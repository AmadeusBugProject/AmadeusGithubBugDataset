Leak in OpenSslContext
[OpenSslContext](https://github.com/netty/netty/blob/4.1/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java) (I mean OpenSslClientContext or OpenSslServerContext exactly) object hold some resources (like custom verification callback to verify ssl certificate) which need to be released when this OpenSslContext object is GC. This is done by JVM calling [`finalize`](https://github.com/netty/netty/blob/4.1/handler/src/main/java/io/netty/handler/ssl/OpenSslContext.java#L352) in OpenSslContext.

But I found that OpenSslContext will never be GC so all the resources possessed by it will never be released. Take [OpenSslClientContext](https://github.com/netty/netty/blob/4.1/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java) as example but the same bug exists in [OpenSslServerContext](https://github.com/netty/netty/blob/4.1/handler/src/main/java/io/netty/handler/ssl/OpenSslServerContext.java) too. In the constructor of OpenSslClientContext, there's [an anonymous class object](https://github.com/netty/netty/blob/4.1/handler/src/main/java/io/netty/handler/ssl/OpenSslClientContext.java#L253) which is used as a custom verification callback to verify certificate and is set into [SSLContext](https://github.com/netty/netty-tcnative/blob/1.1.33/openssl-dynamic/src/main/java/org/apache/tomcat/jni/SSLContext.java) by calling [SSLContext.setCertVerifyCallback](https://github.com/netty/netty-tcnative/blob/1.1.33/openssl-dynamic/src/main/java/org/apache/tomcat/jni/SSLContext.java#L437). This SSLContext.setCertVerifyCallback is a native function in which [a global reference](https://github.com/netty/netty-tcnative/blob/1.1.33/openssl-dynamic/src/main/c/sslcontext.c#L1619) is created and ref to the custom verification callback passed to SSLContext.setCertVerifyCallback. 

So the custom verification callback used to verify certificate will be released only when OpenSslClientContext object is GC. And the OpenSslClientContext object will be GC only when the custom verification callback is removed from JNI global reference.
