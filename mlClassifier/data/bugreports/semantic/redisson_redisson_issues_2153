The PRINCIPAL_NAME_INDEX_NAME key is not created in redis
What I want to do is depending on PRINCIPAL_NAME_INDEX_NAME in redis to control the Spring Security's maximum session management through SpringSessionBackedSessionRegistry class.

The first look at RedissonSessionRepository.save() confused me that it is an empty method which says "session changes are stored in real-time". In comparison, the standard RedisOperationsSessionRepository.save() of spring-session-data-redis has codes to create PRINCIPAL_NAME_INDEX_NAME. In fact, these codes are in RedisOperationsSessionRepository$RedisSession.saveDelta().

### Expected behavior
The PRINCIPAL_NAME_INDEX_NAME key is created with Spring Security's principal information

### Actual behavior
The PRINCIPAL_NAME_INDEX_NAME key is not created

### Steps to reproduce or test case
Using Spring Boot 2.1.3/Spring Security 5.1.4/Spring Session 2.1.4, during which the Spring Session java configuration is:
```java
@EnableRedissonHttpSession(keyPrefix = "xxx:")
public class SessionConfig {
    @Bean
    public static ConfigureRedisAction configureRedisAction() {
        return ConfigureRedisAction.NO_OP;
    }
}
```

### Redis version
5.0.0 on AWS Elasticache
### Redisson version
3.11.0
### Redisson configuration
```yaml
clusterServersConfig:
   retryAttempts: 6
   retryInterval: 20000
   readMode: "MASTER_SLAVE"
   nodeAddresses:
   - "redis://xxx.xxxxxx.clustercfg.apne1.cache.amazonaws.com:6379"
   scanInterval: 5000
```