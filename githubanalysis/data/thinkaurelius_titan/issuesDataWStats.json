{"bugLabels": ["bug"], "issues": [{"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/1174", "title": "com.thinkaurelius.titan.diskstorage.idmanagement.ConsistentKeyIDAuthority.getIDBlock()", "closed": "2016-02-09 14:40:10", "commitsDetails": [], "commits": {}, "ttf": 98.00027777777778, "created": "2015-11-03 03:56:42", "user": "zyoo", "body": "throw new TemporaryLockingException(String.format(\"Reached timeout %d (%s elapsed) when attempting to allocate id block on partition(%d)-namespace(%d)\",timeout, methodTime.toString(), partition, idNamespace)); at ConsistenKeyIDAuthority.java(329)\n\nException stack:\nCaused by: java.util.IllegalFormatConversionException: d != com.thinkaurelius.titan.diskstorage.util.time.StandardDuration\n        at java.util.Formatter$FormatSpecifier.failConversion(Formatter.java:4045)\n        at java.util.Formatter$FormatSpecifier.printInteger(Formatter.java:2748)\n        at java.util.Formatter$FormatSpecifier.print(Formatter.java:2702)\n        at java.util.Formatter.format(Formatter.java:2488)\n        at java.util.Formatter.format(Formatter.java:2423)\n        at java.lang.String.format(String.java:2792)\n        at com.thinkaurelius.titan.diskstorage.idmanagement.ConsistentKeyIDAuthority.getIDBlock(ConsistentKeyIDAuthority.java:329)\n        at com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.renewBuffer(StandardIDPool.java:172)\n        at com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.access$100(StandardIDPool.java:27)\n        at com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool$IDBlockRunnable.run(StandardIDPool.java:236)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\nthanks\n"}, {"labels": ["bug"], "filteredCommits": ["8ed7a34830b0a78e03142c2f4be6ea9d63b30fa8"], "url": "https://github.com/thinkaurelius/titan/issues/1148", "gitStatsSummary": {"insertions": 92, "gitFilesChange": 6, "lines": 97, "deletions": 5}, "numCommits": 1, "commits": {"8ed7a34830b0a78e03142c2f4be6ea9d63b30fa8": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 1.0002777777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.keycolumnvalue.StandardStoreFeatures.Builder", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.StandardStoreFeatures.supportsInterruption()", "com.thinkaurelius.titan.diskstorage.supportsInterruption()", "com.thinkaurelius.titan.diskstorage.idmanagement.ConsistentKeyIDAuthority.supportsInterruption()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.close()", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.StandardStoreFeatures.Builder.build()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockGetter.call()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.startIDBlockGetter()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.waitForIDBlockGetter()", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.supportsInterruption()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool", "com.thinkaurelius.titan.diskstorage.berkeleyje.BerkeleyJEStoreManager", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockGetter", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.StandardStoreFeatures.Builder.supportsInterruption(boolean)", "com.thinkaurelius.titan.graphdb.idmanagement.MockIDAuthority.supportsInterruption()", "com.thinkaurelius.titan.diskstorage.idmanagement.ConsistentKeyIDAuthority", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockGetter.stopRequested()", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.StandardStoreFeatures"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/idmanagement", "titan-berkeleyje/src/main/java/com/thinkaurelius/titan/diskstorage/berkeleyje", "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/idassigner", "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue"], "body": "We should avoid interrupting BDB:\n\nhttp://www.oracle.com/technetwork/database/berkeleydb/je-faq-096044.html#WhatisasafewaytostopthreadsinaJEapplication\n\nThe FAQ entry claims that a RunRecoveryException may propagate after interruption, but I think I'm seeing cases where that doesn't even happen -- the environment just gets borked and left in a persistently unopenable state.\n\nTitan can currently interrupt BDB if ID block allocation repeatedly fails up to the retry limit.  `StandardIDPool.waitForIDBlockGetter` does a timed `future.get` on a task that's essentially doing `while-not-successful-getIDBlock` ad infinitum.  If this times out, then it next invokes `future.cancel(true)`, which in turn interrupts the background thread blocked inside BDB's guts.  This breaks the environment.  This requires either overwhelming IO contention to be sustained long enough to exceed the ID block retry count or a pathologically low ID block wait time, so it's not exactly the common case, but it would be good to avoid.\n\nConsider adding `StoreFeatures.supportsInterruption` or something similar.  This would let us continue to interrupt HBase and C\\* backends that timeout during ID block allocation, where it's preferable for responsiveness, but avoid interrupting BDB JE, which blows up.  This would have to be exposed through `IDAuthority` so that `StandardIDPool` can see it.  The latter would then have to make `future.cancel(true)` conditional, falling back to something like setting a `volatile boolean shutdownRequested` field that gets checked on every iteration of the background task's loop in between its blocking calls.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 18, "UPD": 2, "TOT": 30, "DEL": 0, "INS": 25, "spoonFilesChanged": 7, "MOV": 3}, "title": "Avoid interrupting BDB in StandardIDPool", "statsSkippedReason": "", "closed": "2015-09-10 21:18:37", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-09-10 16:50:12", "commitHash": "8ed7a34830b0a78e03142c2f4be6ea9d63b30fa8", "commitParents": ["21d712306d38cb33488304cd356b0c812323557d"], "commitGHEventType": "referenced", "nameRev": "8ed7a34830b0a78e03142c2f4be6ea9d63b30fa8 tags/1.0.0~44", "commitGitStats": [{"insertions": 18, "lines": 20, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/StandardStoreFeatures.java", "deletions": 2}, {"insertions": 1, "lines": 1, "filePath": "titan-berkeleyje/src/main/java/com/thinkaurelius/titan/diskstorage/berkeleyje/BerkeleyJEStoreManager.java", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/IDAuthority.java", "deletions": 0}, {"insertions": 47, "lines": 50, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/idassigner/StandardIDPool.java", "deletions": 3}, {"insertions": 12, "lines": 12, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/StoreFeatures.java", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/idmanagement/MockIDAuthority.java", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/idmanagement/ConsistentKeyIDAuthority.java", "deletions": 0}, {"insertions": 35, "lines": 35, "filePath": "titan-berkeleyje/src/test/java/com/thinkaurelius/titan/graphdb/berkeleyje/BerkeleyGraphTest.java", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/idmanagement/IDPoolTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.berkeleyje.BerkeleyGraphTest.testIDBlockAllocationTimeout()"}], "spoonFilePath": "BerkeleyGraphTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.berkeleyje.BerkeleyJEStoreManager"}], "spoonFilePath": "BerkeleyJEStoreManager.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.supportsInterruption()"}], "spoonFilePath": "StoreFeatures.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.idmanagement.MockIDAuthority.supportsInterruption()"}], "spoonFilePath": "MockIDAuthority.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.idmanagement.ConsistentKeyIDAuthority.supportsInterruption()"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.idmanagement.ConsistentKeyIDAuthority"}], "spoonFilePath": "ConsistentKeyIDAuthority.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 0, "INS": 2, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.waitForIDBlockGetter()"}, {"UPD": 0, "TOT": 3, "DEL": 0, "INS": 2, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.startIDBlockGetter()"}, {"UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.close()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockGetter"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockGetter.stopRequested()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockGetter.call()"}], "spoonFilePath": "StandardIDPool.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.idmanagement.IDPoolTest.testAllocationTimeoutAndRecovery().5.supportsInterruption()"}], "spoonFilePath": "IDPoolTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.supportsInterruption()"}], "spoonFilePath": "IDAuthority.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.StandardStoreFeatures.Builder.supportsInterruption(boolean)"}, {"UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.StandardStoreFeatures"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.StandardStoreFeatures.Builder"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.StandardStoreFeatures.supportsInterruption()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.StandardStoreFeatures.Builder.build()"}], "spoonFilePath": "StandardStoreFeatures.java"}], "commitMessage": "Avoid interrupting ID allocations on BDB\n\nThis commit introduces StoreFeatures.supportsInterruption specifically\nfor BerkeleyDB JE.  BDB responds with undefined behavior when a thread\nis interrupted while inside a blocking IO call.  \"Undefined behavior\"\nin this case tends to mean that all subsequent calls to the\nenvironment (barring a manual recovery operation) appear to fail with\nexceptions.\n\nAs of this commit, C* and HBase return true for supportsInterruption,\nwhile BDB returns false.\n\nThe only place I've found so far where this matters is ID allocation.\nStandardIDPool works by starting a loop-forever background task that\nattempts to call getIDBlock until the first time it succeeds.\nStandardIDPool then watches the clock and attempts to cancel the\nbackground task if it has exceeded its timeout.  Cancelation sent a\nthread interrupt, which in turn broke BDB JE's environment.\n\nStandardIDPool now has a collaborative/discretionary background task\ncancellation mechanism: it sets a volatile boolean field to true when\nit wants the background task to shutdown, and the background task\nchecks it during its loop between each blocking call.  This field is\nalways set now when StandardIDPool wants the background task to abort.\nFurthermore, StandardIDPool checks StoreFeatures.supportsInterruption\n(actually, it calls IDAuthority.supportsInterruption, which wraps a\ncall to the same-named method on its underlying store features).  If\ninterruption is allowed, it calls future.cancel(true) on the task,\nsame as prior to this commit.  If interruption is not allowed, then\nStandardIDPool adds the future to a deque.  This deque is drained and\n`get` invoked on each element during StandardIDPool's close method.\nThis last queue-draining ensures that a clean shutdown doesn't leave\nBDB in an inconsistent state because a background task was still\nmid-IO-call.\n\nFixes #1148\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-09-10 03:55:02"}], "created": "2015-09-09 19:39:59"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/1147", "title": "order().by() is broken if the ordered field is part of an ES index", "closed": "2015-09-10 21:18:22", "commitsDetails": [], "commits": {}, "ttf": 1.0002777777777778, "created": "2015-09-09 19:21:11", "user": "dkuppitz", "body": "To reproduce:\n\n``` groovy\ngraph = TitanFactory.open(\"conf/titan-cassandra-es.properties\")\nGraphOfTheGodsFactory.load(graph)\ng = graph.traversal()\ng.V().has(\"age\", inside(1000,5000)).order().by(\"age\", incr)\n```\n\nThe last line will fail with an exception caused by ES.\n"}, {"labels": ["bug", "question"], "filteredCommits": ["0d269e350f01e145b0eec0157b9c45274b2023f7"], "url": "https://github.com/thinkaurelius/titan/issues/1133", "gitStatsSummary": {"insertions": 31, "gitFilesChange": 1, "lines": 32, "deletions": 1}, "numCommits": 1, "commits": {"0d269e350f01e145b0eec0157b9c45274b2023f7": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 5.000277777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.tinkerpop.TitanFeatures.TitanVertexFeatures.supportsUserSuppliedIds()", "com.thinkaurelius.titan.graphdb.tinkerpop.TitanFeatures.TitanVertexFeatures.supportsCustomIds()", "com.thinkaurelius.titan.graphdb.tinkerpop.TitanFeatures.TitanEdgeFeatures.supportsStringIds()", "com.thinkaurelius.titan.graphdb.tinkerpop.TitanFeatures.TitanEdgeFeatures.supportsCustomIds()", "com.thinkaurelius.titan.graphdb.tinkerpop.TitanFeatures.TitanVertexFeatures.supportsNumericIds()"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/tinkerpop"], "body": "This is on the current titan09 HEAD (a0ba586cf56ac191020e113b0661e05aad2f06cd).\n\n@dkuppitz pointed out this behavior:\n\n``` java\ngremlin> graph.features().vertex().supportsCustomIds()\n==>true\ngremlin> graph.addVertex(id, 1)\nVertex does not support user supplied identifiers\nDisplay stack trace? [yN]\n```\n\nTitan's `graph.set-vertex-id` still exists, but graph.addVertex does not appear to respect it, despite some sentences in its javadoc comment that talk about validity checking on user-supplied vertex IDs.  I think none of Titan's vertex features check `set-vertex-id`.  Some of Titan's other vertex feature methods also seem to have incorrect behavior, such as:\n\n``` java\ngremlin> g.features().vertex().supportsStringIds()\n==>true\n```\n\nI got confused when I tried to figure out how all of the various vertex features interact.  For example, how precisely does `supportsCustomIds()` differ from `supportsUserSuppliedIds()`?  Only the latter appears in TP3's own unit tests -- maybe the former is something vestigial?  Neither appears in the user documentation.\n\nSome TP3 references:\n- Javadoc comment above `Graph.vertices` declaration describing how a subset of vertex features interacts with its method parameters (this is just the read side): https://github.com/apache/incubator-tinkerpop/blob/master/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/structure/Graph.java#L149-L197\n- ElementFeature method declarations (+ their method javadoc): https://github.com/apache/incubator-tinkerpop/blob/master/gremlin-core/src/main/java/org/apache/tinkerpop/gremlin/structure/Graph.java#L571-L619\n\nAt this point, I'm pretty confident that at least some of Titan's vertex feature methods are incorrect, but I'm not confident that I understand the semantics of TP3 vertex features well enough to completely correct it.  I would appreciate guidance from @spmallette or @okram.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 5, "UPD": 1, "TOT": 7, "DEL": 0, "INS": 5, "spoonFilesChanged": 1, "MOV": 1}, "title": "vertex features and custom vertex ids", "statsSkippedReason": "", "closed": "2015-08-28 01:22:10", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-08-27 12:41:37", "commitHash": "0d269e350f01e145b0eec0157b9c45274b2023f7", "commitParents": ["a0ba586cf56ac191020e113b0661e05aad2f06cd"], "commitGHEventType": "referenced", "nameRev": "0d269e350f01e145b0eec0157b9c45274b2023f7 tags/1.0.0~55^2~19", "commitGitStats": [{"insertions": 31, "lines": 32, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/tinkerpop/TitanFeatures.java", "deletions": 1}, {"insertions": 82, "lines": 82, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/configuration/TinkerpopFeaturesTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.configuration.TinkerpopFeaturesTest"}], "spoonFilePath": "TinkerpopFeaturesTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.tinkerpop.TitanFeatures.TitanEdgeFeatures.supportsStringIds()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.tinkerpop.TitanFeatures.TitanVertexFeatures.supportsUserSuppliedIds()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.tinkerpop.TitanFeatures.TitanEdgeFeatures.supportsCustomIds()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.tinkerpop.TitanFeatures.TitanVertexFeatures.supportsCustomIds()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.tinkerpop.TitanFeatures.TitanVertexFeatures.supportsNumericIds()"}], "spoonFilePath": "TitanFeatures.java"}], "commitMessage": "Fix (+test) some vertex and edge features methods\n\nFixes #1133\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-08-27 12:41:37"}], "created": "2015-08-22 03:26:57"}, {"labels": ["bug", "enhancement"], "filteredCommits": ["3b4dd304515746e895b4ea7cd1728c0bcfd5d460"], "url": "https://github.com/thinkaurelius/titan/issues/1114", "gitStatsSummary": {"insertions": 9, "gitFilesChange": 2, "lines": 14, "deletions": 5}, "numCommits": 1, "commits": {"3b4dd304515746e895b4ea7cd1728c0bcfd5d460": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 59.000277777777775, "user": "Alan47", "changesInPackagesSPOON": ["com.thinkaurelius.titan.core.TitanFactory.Builder.open()", "com.thinkaurelius.titan.core.TitanFactory.Builder", "com.thinkaurelius.titan.diskstorage.configuration.BasicConfiguration.getAll()", "com.thinkaurelius.titan.core.TitanFactory.Builder.set(java.lang.String,java.lang.Object)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration", "titan-core/src/main/java/com/thinkaurelius/titan/core"], "body": "I am trying to configure a tokenizer and an analyzer for Elasticsearch through the Titan create.ext properties. Here is the full JUnit-Test:\n\n```\npublic class TitanESTest {\n\nprivate static final String EXT = \"index.search.elasticsearch.create.ext.index.\";\n\n@Test\npublic void runTest() {\n    Builder titanBuilder = TitanFactory.build();\n    titanBuilder.set(\"storage.backend\", \"inmemory\");\n    titanBuilder.set(\"index.search.backend\", \"elasticsearch\");\n    titanBuilder.set(\"index.search.elasticsearch.interface\", \"NODE\");\n    titanBuilder.set(EXT + \"analysis.analyzer.myanalyzer.type\", \"custom\");\n    titanBuilder.set(EXT + \"analysis.analyzer.myanalyzer.tokenizer\", \"mytokenizer\");\n    titanBuilder.set(EXT + \"analysis.analyzer.myanalyzer.filter\", \"mylowercasefilter\");\n    titanBuilder.set(EXT + \"analysis.filter.mylowercasefilter.type\", \"lowercase\");\n    titanBuilder.set(EXT + \"analysis.filter.mylowercasefilter.language\", \"greek\");\n    titanBuilder.set(EXT + \"analysis.tokenizer.mytokenizer.type\", \"whitespace\");\n    titanBuilder.set(EXT + \"analysis.tokenizer.mytokenizer.max_token_length\", 255);\n    TitanGraph graph = titanBuilder.open();\n    assertNotNull(graph);\n}\n```\n\nThis is a slightly simpler filter than presented here in the ElasticSearch docs:\nhttps://www.elastic.co/guide/en/elasticsearch/reference/1.3/analysis-lowercase-tokenfilter.html\n\nAccording to the Titan documentation, this should work. However, depending on the Titan version, I get different error messages (but all of them fail the test):\n\nTITAN 0.9.0-M2\njava.lang.IllegalArgumentException: Unknown configuration element in namespace [root.index.elasticsearch.create.ext]: analysis\n\nTITAN 0.9.0-M1\njava.lang.IllegalArgumentException: Unknown configuration element in namespace [root.index.elasticsearch]: create\n\nTITAN 0.5.4:\njava.lang.IllegalArgumentException: Unknown configuration element in namespace [root.index.elasticsearch.create.ext]: analysis\n\nI also tried to put the parameters in a Titan *.properties file, without success (same errors as above). I also tried using a separate *.yaml file for the ES configuration and point Titan to it by using the `index.search.conf-file` property - no success (seems to be ignored).\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 4, "UPD": 1, "TOT": 10, "DEL": 4, "INS": 5, "spoonFilesChanged": 2, "MOV": 0}, "title": "Bug in Titan ElasticSearch ext.create configuration", "statsSkippedReason": "", "closed": "2015-08-28 01:22:04", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-08-27 21:02:31", "commitHash": "3b4dd304515746e895b4ea7cd1728c0bcfd5d460", "commitParents": ["37491a904e67614fbac185f651adbc0e9d405b4b"], "commitGHEventType": "referenced", "nameRev": "3b4dd304515746e895b4ea7cd1728c0bcfd5d460 tags/1.0.0~55^2~16", "commitGitStats": [{"insertions": 8, "lines": 12, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/core/TitanFactory.java", "deletions": 4}, {"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/BasicConfiguration.java", "deletions": 1}, {"insertions": 24, "lines": 27, "filePath": "titan-es/src/test/java/com/thinkaurelius/titan/diskstorage/es/ElasticSearchConfigTest.java", "deletions": 3}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 1, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.core.TitanFactory.Builder.open()"}, {"UPD": 0, "TOT": 4, "DEL": 2, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.core.TitanFactory.Builder"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.core.TitanFactory.Builder.set(java.lang.String,java.lang.Object)"}], "spoonFilePath": "TitanFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchConfigTest.testLocalNodeUsingYaml()"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchConfigTest.testLocalNodeUsingExt()"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchConfigTest.testLocalNodeUsingExtAndIndexDirectory()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchConfigTest.testTitanFactoryBuilder()"}], "spoonFilePath": "ElasticSearchConfigTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.configuration.BasicConfiguration.getAll()"}], "spoonFilePath": "BasicConfiguration.java"}], "commitMessage": "Let TitanFactory.Builder accept arbitrary keys\n\nElasticsearch reserves a Titan config namespace under which the user\nmay provide arbitrary Elasticsearch config options.  These options\ncan't be validated, since it's fundamentally a bit of a perversion of\nthe config API: the keys are defined in and controlled by\nElasticsearch, but we're cramming them into a Titan configuration.\n\nThis commit tweaks TitanFactory.Builder to use a WriteConfiguration\n(which is based on dumb strings) instead of a ModifiableConfiguration\n(which is based on ConfigOption and includes validation).\n\nA more elegant way to approach this might be to introduce an\nabstraction to support Elasticsearch's reserved namespace: some kind\nof boolean field that says, in effect, \"don't try to validate any keys\nunderneath me\".  That still wouldn't totally address the problem,\nthough; (User)ModifiableConfiguration still wouldn't be a suitable\nbasis for TitanFactory.Builder, since it requires that any\nuser-provided config key string map to a ConfigOption.\n\nThis commit also adds a test (that fails without the TitanFactory\nchange).\n\nFixes #1114\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-08-27 20:57:59"}], "created": "2015-06-29 12:17:26"}, {"labels": ["bug"], "filteredCommits": ["9a49faa3669fc2c03e458c7999ecf095e0b0725d"], "url": "https://github.com/thinkaurelius/titan/issues/1110", "gitStatsSummary": {"insertions": 14, "gitFilesChange": 4, "lines": 28, "deletions": 14}, "numCommits": 1, "commits": {"9a49faa3669fc2c03e458c7999ecf095e0b0725d": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 66.00027777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.util.stats.IntegerDoubleFrequency", "com.thinkaurelius.titan.graphdb.database.EdgeSerializer.writeRelation(com.thinkaurelius.titan.graphdb.database.InternalRelation,com.thinkaurelius.titan.graphdb.database.InternalRelationType,int,com.thinkaurelius.titan.graphdb.types.TypeInspector)", "com.thinkaurelius.titan.graphdb.database.EdgeSerializer.parseRelation(com.thinkaurelius.titan.diskstorage.Entry,boolean,com.thinkaurelius.titan.graphdb.types.TypeInspector)", "com.thinkaurelius.titan.util.datastructures.IntHashSet", "com.thinkaurelius.titan.graphdb.database.EdgeSerializer.readInlineTypes(long[],com.carrotsearch.hppc.LongObjectOpenHashMap,com.thinkaurelius.titan.diskstorage.ReadBuffer,com.thinkaurelius.titan.graphdb.types.TypeInspector,com.thinkaurelius.titan.graphdb.database.EdgeSerializer$InlineType)", "com.thinkaurelius.titan.graphdb.relations.RelationCache"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database", "titan-core/src/main/java/com/thinkaurelius/titan/util/datastructures", "titan-core/src/main/java/com/thinkaurelius/titan/util/stats"], "body": "Titan and gremlin-core depend on different versions of HPPC.  Titan compiles with 0.6.0.  gremlin-core compiles with 0.7.1.  Incompatible API changes in HPPC 0.7.0 make Titan unable to run with gremlin-core's preferred HPPC version: https://groups.google.com/d/msg/aureliusgraphs/ycd8ddkurYw/iSrNiaqsb04J.\n\nThe missing class in that thread didn't go away.  It was just renamed to LongHashSet.  I suspect the HPPC API changes don't affect Titan beyond some class renames (but I haven't investigated).  We should consider putting Titan back in HPPC version lockstep with gremlin-core and/or shading Titan's HPPC version.  Titan's version of HPPC is controlled in the top-level pom.xml.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 6, "UPD": 10, "TOT": 10, "DEL": 0, "INS": 0, "spoonFilesChanged": 4, "MOV": 0}, "title": "Upgrade hppc version to match gremlin-core", "statsSkippedReason": "", "closed": "2015-08-28 01:22:16", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-08-27 12:56:22", "commitHash": "9a49faa3669fc2c03e458c7999ecf095e0b0725d", "commitParents": ["0d269e350f01e145b0eec0157b9c45274b2023f7"], "commitGHEventType": "referenced", "nameRev": "9a49faa3669fc2c03e458c7999ecf095e0b0725d tags/1.0.0~55^2~18", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "pom.xml", "deletions": 1}, {"insertions": 2, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/util/stats/IntegerDoubleFrequency.java", "deletions": 2}, {"insertions": 2, "lines": 4, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/TestByteBuffer.java", "deletions": 2}, {"insertions": 5, "lines": 10, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/EdgeSerializer.java", "deletions": 5}, {"insertions": 3, "lines": 6, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanPartitionGraphTest.java", "deletions": 3}, {"insertions": 4, "lines": 8, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/util/datastructures/RelationCacheTest.java", "deletions": 4}, {"insertions": 3, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/util/datastructures/IntHashSet.java", "deletions": 3}, {"insertions": 3, "lines": 6, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/idmanagement/VertexIDAssignerTest.java", "deletions": 3}, {"insertions": 5, "lines": 10, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/IDAuthorityTest.java", "deletions": 5}, {"insertions": 1, "lines": 2, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/idmanagement/PartitionIDRangeTest.java", "deletions": 1}, {"insertions": 4, "lines": 8, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/RelationCache.java", "deletions": 4}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.IDAuthorityTest.testManyThreadsOneIDAuthority()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.IDAuthorityTest.testSimpleIDAcquisition()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.IDAuthorityTest.checkBlock(com.thinkaurelius.titan.diskstorage.IDBlock)"}], "spoonFilePath": "IDAuthorityTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.util.datastructures.IntHashSet"}], "spoonFilePath": "IntHashSet.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.util.stats.IntegerDoubleFrequency"}], "spoonFilePath": "IntegerDoubleFrequency.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.util.datastructures.RelationCacheTest.testPerformance()"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.util.datastructures.RelationCacheTest.testEmpty()"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.util.datastructures.RelationCacheTest.testMap()"}], "spoonFilePath": "RelationCacheTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.TestByteBuffer.testByte()"}], "spoonFilePath": "TestByteBuffer.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.EdgeSerializer.writeRelation(com.thinkaurelius.titan.graphdb.database.InternalRelation,com.thinkaurelius.titan.graphdb.database.InternalRelationType,int,com.thinkaurelius.titan.graphdb.types.TypeInspector)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.EdgeSerializer.readInlineTypes(long[],com.carrotsearch.hppc.LongObjectOpenHashMap,com.thinkaurelius.titan.diskstorage.ReadBuffer,com.thinkaurelius.titan.graphdb.types.TypeInspector,com.thinkaurelius.titan.graphdb.database.EdgeSerializer$InlineType)"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.EdgeSerializer.parseRelation(com.thinkaurelius.titan.diskstorage.Entry,boolean,com.thinkaurelius.titan.graphdb.types.TypeInspector)"}], "spoonFilePath": "EdgeSerializer.java"}, {"spoonMethods": [{"UPD": 4, "TOT": 4, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.RelationCache"}], "spoonFilePath": "RelationCache.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanPartitionGraphTest.testKeybasedGraphPartitioning()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanPartitionGraphTest.testPartitionSpread(boolean,boolean)"}], "spoonFilePath": "TitanPartitionGraphTest.java"}, {"spoonMethods": [], "spoonFilePath": "PartitionIDRangeTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.idmanagement.VertexIDAssignerTest.testIDAssignment()"}], "spoonFilePath": "VertexIDAssignerTest.java"}], "commitMessage": "Upgrade hppc from 0.6.0 to 0.7.1\n\nThe non-pom changes account for hppc removing the word \"Open\" from a\nplethora of datastructures in 0.7.0\n(http://issues.carrot2.org/browse/HPPC-145)\n\nFixes #1110\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-08-27 12:54:59"}], "created": "2015-06-22 20:59:29"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/1039", "title": "Kryo serialization error with gremlin server.", "closed": "2015-04-29 14:27:42", "commitsDetails": [], "commits": {}, "ttf": 4.000277777777778, "created": "2015-04-24 15:06:02", "user": "BrynCooke", "body": "Config is now fixed but am getting a weird error\n\n``` java\n16:03:31 WARN  io.netty.channel.DefaultChannelPipeline  - An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\nio.netty.handler.codec.DecoderException: org.apache.tinkerpop.gremlin.driver.ser.SerializationException: org.apache.tinkerpop.shaded.kryo.KryoException: Encountered unregistered class ID: 121\n    at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:99)\n    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)\n    at org.apache.tinkerpop.gremlin.driver.handler.WebSocketClientHandler.channelRead0(WebSocketClientHandler.java:90)\n    at io.netty.channel.SimpleChannelInboundHandler.channelRead(SimpleChannelInboundHandler.java:105)\n    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)\n    at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\n    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)\n    at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:182)\n    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:308)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:294)\n    at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:846)\n    at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:130)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)\n    at io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:116)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.tinkerpop.gremlin.driver.ser.SerializationException: org.apache.tinkerpop.shaded.kryo.KryoException: Encountered unregistered class ID: 121\n    at org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV1d0.deserializeResponse(GryoMessageSerializerV1d0.java:194)\n    at org.apache.tinkerpop.gremlin.driver.handler.WebSocketGremlinResponseDecoder.decode(WebSocketGremlinResponseDecoder.java:49)\n    at org.apache.tinkerpop.gremlin.driver.handler.WebSocketGremlinResponseDecoder.decode(WebSocketGremlinResponseDecoder.java:36)\n    at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89)\n    ... 20 more\nCaused by: org.apache.tinkerpop.shaded.kryo.KryoException: Encountered unregistered class ID: 121\n    at org.apache.tinkerpop.gremlin.structure.io.gryo.GremlinClassResolver.readClass(GremlinClassResolver.java:166)\n    at org.apache.tinkerpop.shaded.kryo.Kryo.readClass(Kryo.java:641)\n    at org.apache.tinkerpop.shaded.kryo.Kryo.readClassAndObject(Kryo.java:752)\n    at org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV1d0.deserializeResponse(GryoMessageSerializerV1d0.java:181)\n    ... 23 more\n```\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/1010", "title": "ElasticSearch Test fail dues to race conditions", "closed": "2015-04-14 18:49:58", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2015-04-14 18:18:51", "user": "BrynCooke", "body": "Separating out from https://github.com/thinkaurelius/titan/issues/593\n\nAs far as I can tell programmatically starting and stopping a node is not a synchronous operation, and examining the log files for started and stopped markers is insufficient to prevent conditions where:\n\nAn ES node is queried before it is ready.\nAn ES node joins a cluster that has been shut down.\nThis manifests itself in failed queries, data from previous tests replicating to new tests, nodes failing to start up due to the 'old master' node shutting down.\n\nI have tried to make this better by pulling out the nodes in to separate clusters for each test and adding a delay after ES has started, but occasionally the tests still fail.\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/1005", "title": "Occasional error with TitanIndexTest.testIndexUpdatesWithoutReindex", "closed": "2015-08-27 22:12:03", "commitsDetails": [], "commits": {}, "ttf": 136.00027777777777, "created": "2015-04-13 15:45:11", "user": "BrynCooke", "body": "Occasionally the test fails:\n\n```\nRunning com.thinkaurelius.titan.diskstorage.lucene.BerkeleyLuceneTest\nIndex [theIndex] job status: com.thinkaurelius.titan.diskstorage.keycolumnvalue.scan.StandardScannerExecutor@13bdf540\nIndex [theIndex] job status: com.thinkaurelius.titan.diskstorage.keycolumnvalue.scan.StandardScannerExecutor@13bdf540\nTests run: 20, Failures: 0, Errors: 2, Skipped: 0, Time elapsed: 147.656 sec <<< FAILURE! - in com.thinkaurelius.titan.diskstorage.lucene.BerkeleyLuceneTest\ntestIndexUpdatesWithoutReindex(com.thinkaurelius.titan.diskstorage.lucene.BerkeleyLuceneTest)  Time elapsed: 25.566 sec  <<< ERROR!\ncom.thinkaurelius.titan.core.TitanException: Could not execute operation due to backend exception\n    at com.thinkaurelius.titan.diskstorage.util.BackendOperation.execute(BackendOperation.java:44)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction.executeRead(BackendTransaction.java:428)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction.edgeStoreQuery(BackendTransaction.java:253)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.edgeQuery(StandardTitanGraph.java:415)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph$1.retrieveSchemaRelations(StandardTitanGraph.java:368)\n    at com.thinkaurelius.titan.graphdb.database.cache.StandardSchemaCache.getSchemaRelations(StandardSchemaCache.java:156)\n    at com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getRelated(TitanSchemaVertex.java:99)\n    at com.thinkaurelius.titan.graphdb.types.indextype.MixedIndexTypeWrapper.getFieldKeys(MixedIndexTypeWrapper.java:36)\n    at com.thinkaurelius.titan.graphdb.types.indextype.MixedIndexTypeWrapper.getFieldKeys(MixedIndexTypeWrapper.java:12)\n    at com.thinkaurelius.titan.graphdb.database.management.TitanGraphIndexWrapper.getFieldKeys(TitanGraphIndexWrapper.java:48)\n    at com.thinkaurelius.titan.core.util.ManagementUtil.awaitIndexUpdate(ManagementUtil.java:67)\n    at com.thinkaurelius.titan.core.util.ManagementUtil.awaitGraphIndexUpdate(ManagementUtil.java:40)\n    at com.thinkaurelius.titan.graphdb.TitanIndexTest.testIndexUpdatesWithoutReindex(TitanIndexTest.java:1171)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n    at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runners.Suite.runChild(Suite.java:127)\n    at org.junit.runners.Suite.runChild(Suite.java:26)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.createReqestAndRun(JUnitCoreWrapper.java:139)\n    at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.executeEager(JUnitCoreWrapper.java:111)\n    at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:84)\n    at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:135)\n    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\nCaused by: com.thinkaurelius.titan.diskstorage.PermanentBackendException: Permanent failure in storage backend\n    at com.thinkaurelius.titan.diskstorage.berkeleyje.BerkeleyJEKeyValueStore.getSlice(BerkeleyJEKeyValueStore.java:166)\n    at com.thinkaurelius.titan.diskstorage.keycolumnvalue.keyvalue.OrderedKeyValueStoreAdapter.getSlice(OrderedKeyValueStoreAdapter.java:56)\n    at com.thinkaurelius.titan.diskstorage.keycolumnvalue.cache.KCVSCache.getSliceNoCache(KCVSCache.java:63)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction$1.call(BackendTransaction.java:257)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction$1.call(BackendTransaction.java:253)\n    at com.thinkaurelius.titan.diskstorage.util.BackendOperation.executeDirect(BackendOperation.java:56)\n    at com.thinkaurelius.titan.diskstorage.util.BackendOperation.execute(BackendOperation.java:42)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction.executeRead(BackendTransaction.java:428)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction.edgeStoreQuery(BackendTransaction.java:253)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.edgeQuery(StandardTitanGraph.java:415)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph$1.retrieveSchemaRelations(StandardTitanGraph.java:368)\n    at com.thinkaurelius.titan.graphdb.database.cache.StandardSchemaCache.getSchemaRelations(StandardSchemaCache.java:156)\n    at com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getRelated(TitanSchemaVertex.java:99)\n    at com.thinkaurelius.titan.graphdb.types.indextype.MixedIndexTypeWrapper.getFieldKeys(MixedIndexTypeWrapper.java:36)\n    at com.thinkaurelius.titan.graphdb.types.indextype.MixedIndexTypeWrapper.getFieldKeys(MixedIndexTypeWrapper.java:12)\n    at com.thinkaurelius.titan.graphdb.database.management.TitanGraphIndexWrapper.getFieldKeys(TitanGraphIndexWrapper.java:48)\n    at com.thinkaurelius.titan.core.util.ManagementUtil.awaitIndexUpdate(ManagementUtil.java:67)\n    at com.thinkaurelius.titan.core.util.ManagementUtil.awaitGraphIndexUpdate(ManagementUtil.java:40)\n    at com.thinkaurelius.titan.graphdb.TitanIndexTest.testIndexUpdatesWithoutReindex(TitanIndexTest.java:1171)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n    at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runners.Suite.runChild(Suite.java:127)\n    at org.junit.runners.Suite.runChild(Suite.java:26)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.createReqestAndRun(JUnitCoreWrapper.java:139)\n    at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.executeEager(JUnitCoreWrapper.java:111)\n    at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:84)\n    at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:135)\n    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\nCaused by: com.sleepycat.je.LockTimeoutException: (JE 5.0.73) Lock expired. Locker 15288143 471_main_Txn: waited for lock on database=edgestore LockAddr:408551386 LSN=0x0/0x745d type=READ grant=WAIT_NEW timeoutMillis=500 startTime=1428928019667 endTime=1428928020167\nOwners: [<LockInfo locker=\"585637516 466_pool-132-thread-1_Txn\" type=\"WRITE\"/>]\nWaiters: []\n\n    at com.sleepycat.je.txn.LockManager.newLockTimeoutException(LockManager.java:664)\n    at com.sleepycat.je.txn.LockManager.makeTimeoutMsgInternal(LockManager.java:623)\n    at com.sleepycat.je.txn.SyncedLockManager.makeTimeoutMsg(SyncedLockManager.java:97)\n    at com.sleepycat.je.txn.LockManager.lockInternal(LockManager.java:390)\n    at com.sleepycat.je.txn.LockManager.lock(LockManager.java:276)\n    at com.sleepycat.je.txn.Txn.lockInternal(Txn.java:498)\n    at com.sleepycat.je.txn.Locker.lock(Locker.java:443)\n    at com.sleepycat.je.dbi.CursorImpl.lockLN(CursorImpl.java:2621)\n    at com.sleepycat.je.dbi.CursorImpl.lockLN(CursorImpl.java:2422)\n    at com.sleepycat.je.dbi.CursorImpl.fetchCurrent(CursorImpl.java:2253)\n    at com.sleepycat.je.dbi.CursorImpl.getCurrentAlreadyLatched(CursorImpl.java:1466)\n    at com.sleepycat.je.dbi.CursorImpl.getNext(CursorImpl.java:1593)\n    at com.sleepycat.je.Cursor.searchInternal(Cursor.java:2742)\n    at com.sleepycat.je.Cursor.searchAllowPhantoms(Cursor.java:2576)\n    at com.sleepycat.je.Cursor.searchNoDups(Cursor.java:2430)\n    at com.sleepycat.je.Cursor.search(Cursor.java:2397)\n    at com.sleepycat.je.Cursor.getSearchKeyRange(Cursor.java:1727)\n    at com.thinkaurelius.titan.diskstorage.berkeleyje.BerkeleyJEKeyValueStore.getSlice(BerkeleyJEKeyValueStore.java:123)\n    at com.thinkaurelius.titan.diskstorage.keycolumnvalue.keyvalue.OrderedKeyValueStoreAdapter.getSlice(OrderedKeyValueStoreAdapter.java:56)\n    at com.thinkaurelius.titan.diskstorage.keycolumnvalue.cache.KCVSCache.getSliceNoCache(KCVSCache.java:63)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction$1.call(BackendTransaction.java:257)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction$1.call(BackendTransaction.java:253)\n    at com.thinkaurelius.titan.diskstorage.util.BackendOperation.executeDirect(BackendOperation.java:56)\n    at com.thinkaurelius.titan.diskstorage.util.BackendOperation.execute(BackendOperation.java:42)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction.executeRead(BackendTransaction.java:428)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction.edgeStoreQuery(BackendTransaction.java:253)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.edgeQuery(StandardTitanGraph.java:415)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph$1.retrieveSchemaRelations(StandardTitanGraph.java:368)\n    at com.thinkaurelius.titan.graphdb.database.cache.StandardSchemaCache.getSchemaRelations(StandardSchemaCache.java:156)\n    at com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getRelated(TitanSchemaVertex.java:99)\n    at com.thinkaurelius.titan.graphdb.types.indextype.MixedIndexTypeWrapper.getFieldKeys(MixedIndexTypeWrapper.java:36)\n    at com.thinkaurelius.titan.graphdb.types.indextype.MixedIndexTypeWrapper.getFieldKeys(MixedIndexTypeWrapper.java:12)\n    at com.thinkaurelius.titan.graphdb.database.management.TitanGraphIndexWrapper.getFieldKeys(TitanGraphIndexWrapper.java:48)\n    at com.thinkaurelius.titan.core.util.ManagementUtil.awaitIndexUpdate(ManagementUtil.java:67)\n    at com.thinkaurelius.titan.core.util.ManagementUtil.awaitGraphIndexUpdate(ManagementUtil.java:40)\n    at com.thinkaurelius.titan.graphdb.TitanIndexTest.testIndexUpdatesWithoutReindex(TitanIndexTest.java:1171)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n    at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runners.Suite.runChild(Suite.java:127)\n    at org.junit.runners.Suite.runChild(Suite.java:26)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n    at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.createReqestAndRun(JUnitCoreWrapper.java:139)\n    at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.executeEager(JUnitCoreWrapper.java:111)\n    at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:84)\n    at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:135)\n    at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\n```\n"}, {"labels": ["bug"], "filteredCommits": ["4c8f8e8018c7370e2cfbc52514c3a2c8db371c96", "598e12b21c73c1eb837031f2bee0398c08ad9d09"], "url": "https://github.com/thinkaurelius/titan/issues/992", "gitStatsSummary": {"insertions": 45, "gitFilesChange": 1, "lines": 86, "deletions": 41}, "numCommits": 1, "commits": {"598e12b21c73c1eb837031f2bee0398c08ad9d09": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "4c8f8e8018c7370e2cfbc52514c3a2c8db371c96": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "7a3d796f82911c2aed7e8db453edf70ab39477ef": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "2e637dd69812a4a7eb879e9f34ae03a1cfbfbaac": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 18.00027777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockGetter", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.close()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.renewBuffer()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.startIDBlockGetter()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.waitForIDBlockGetter()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.nextBlock()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockRunnable.run()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.waitForIDRenewer()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.startNextIDAcquisition()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockRunnable", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.nextID()", "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/idassigner"], "body": "This is assigned somewhat arbitrarily to 0.5.5.  It may also apply to 0.9 (not sure yet).\n\nLooking at StandardIDPool.java in 0.5.4, I think I see the following:\n- Successive IO failures when attempting to claim a new ID block in the storage backend which take (collectively) longer than ids.renew-timeout will set StandardIDPool.nextBlock = null.\n- If StandardIDPool.nextBlock is null, calls to StandardIDPool.nextID will not start a new allocation attempt.  nextID will call nextBlock, which then throws an IllegalArgumentException without talking to the storage backend.  I don't see how we can get out of this state once we enter it, even if the storage backend later becomes responsive enough to satisfy new ID block allocation attempts.\n\nThe first next step is to add a test that proves the behavior describes above actually exists in controlled conditions.  Then we can change StandardIDPool.\n", "filteredCommitsReason": {"duplicated": 2, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 12, "UPD": 17, "TOT": 63, "DEL": 9, "INS": 6, "spoonFilesChanged": 1, "MOV": 31}, "title": "Allow ID allocation to resume after continuous failures exceeding ids.renew-timeout", "statsSkippedReason": "", "closed": "2015-04-21 05:22:55", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-05-05 05:28:19", "commitHash": "598e12b21c73c1eb837031f2bee0398c08ad9d09", "commitParents": ["4c8f8e8018c7370e2cfbc52514c3a2c8db371c96"], "commitGHEventType": "referenced", "nameRev": "598e12b21c73c1eb837031f2bee0398c08ad9d09 tags/0.9.0-M2~93", "commitGitStats": [{"insertions": 45, "lines": 86, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/idassigner/StandardIDPool.java", "deletions": 41}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.close()"}, {"UPD": 4, "TOT": 18, "DEL": 1, "INS": 0, "MOV": 13, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.renewBuffer()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.startIDBlockGetter()"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.waitForIDBlockGetter()"}, {"UPD": 1, "TOT": 8, "DEL": 2, "INS": 2, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.nextBlock()"}, {"UPD": 4, "TOT": 6, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool"}, {"UPD": 5, "TOT": 11, "DEL": 0, "INS": 0, "MOV": 6, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockRunnable.run()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockGetter"}, {"UPD": 0, "TOT": 5, "DEL": 1, "INS": 0, "MOV": 4, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.startNextIDAcquisition()"}, {"UPD": 0, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockRunnable"}, {"UPD": 1, "TOT": 5, "DEL": 3, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.nextID()"}, {"UPD": 1, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.waitForIDRenewer()"}], "spoonFilePath": "StandardIDPool.java"}], "commitMessage": "Modify StandardIDPool to allow failure recovery\n\nPrior to this commit, an IDAuthority.getIDBlock call that threw an\nexception or timed out would leave its StandardIDPool unable to\nprogress for the rest of its lifetime.  After the first\ntimeout/exception, StandardIDPool would never attempt another call to\nIDAuthority.getIDBlock.  This commit changes StandardIDPool to let it\nstart a new call to IDAuthority.getIDBlock following an\nexception/timeout.\n\nThis also fixes the test just introduced in\n2e637dd69812a4a7eb879e9f34ae03a1cfbfbaac.\n\nThere is no backoff logic introduced in this commit.  The assumption\nis that the IDAuthority implementation will contain a reasonable\namount of backoff logic (e.g. BackendOperation.execute).\n\nFor #992\n(cherry picked from commit 7a3d796f82911c2aed7e8db453edf70ab39477ef)\n\nConflicts:\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/idassigner/StandardIDPool.java\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-04-20 17:47:53"}, {"commitUser": "dalaro", "commitDateTime": "2015-05-05 05:24:06", "commitHash": "4c8f8e8018c7370e2cfbc52514c3a2c8db371c96", "commitParents": ["310af27dbd22377fa2bd9597d3a61227977918d2"], "commitGHEventType": "referenced", "nameRev": "4c8f8e8018c7370e2cfbc52514c3a2c8db371c96 tags/0.9.0-M2~94", "commitGitStats": [{"insertions": 83, "lines": 83, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/idmanagement/IDPoolTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.idmanagement.IDPoolTest.testAllocationTimeoutAndRecovery()"}], "spoonFilePath": "IDPoolTest.java"}], "commitMessage": "Add test of StandardIDPool's error recovery\n\nThis test shows that StandardIDPool suffers sticky failure when its\nunderlying IDAuthority times out; after the timeout, StandardIDPool\njust throws IllegalArgumentException even if the IDAuthority has since\nrecovered and is ready to return new blocks.\n\nFor #992\n(cherry picked from commit 2e637dd69812a4a7eb879e9f34ae03a1cfbfbaac)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-04-20 16:33:50"}, {"commitUser": "dalaro", "commitDateTime": "2015-04-20 17:47:53", "commitHash": "7a3d796f82911c2aed7e8db453edf70ab39477ef", "commitParents": ["2e637dd69812a4a7eb879e9f34ae03a1cfbfbaac"], "commitGHEventType": "referenced", "nameRev": "7a3d796f82911c2aed7e8db453edf70ab39477ef remotes/origin/titan05~6", "commitGitStats": [{"insertions": 46, "lines": 88, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/idassigner/StandardIDPool.java", "deletions": 42}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.close()"}, {"UPD": 4, "TOT": 18, "DEL": 1, "INS": 0, "MOV": 13, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.renewBuffer()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.startIDBlockGetter()"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.waitForIDBlockGetter()"}, {"UPD": 1, "TOT": 8, "DEL": 2, "INS": 2, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.nextBlock()"}, {"UPD": 4, "TOT": 6, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool"}, {"UPD": 6, "TOT": 12, "DEL": 0, "INS": 0, "MOV": 6, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockRunnable.run()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockGetter"}, {"UPD": 1, "TOT": 7, "DEL": 1, "INS": 0, "MOV": 5, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.startNextIDAcquisition()"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.IDBlockRunnable"}, {"UPD": 1, "TOT": 5, "DEL": 3, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.nextID()"}, {"UPD": 1, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.waitForIDRenewer()"}], "spoonFilePath": "StandardIDPool.java"}], "commitMessage": "Modify StandardIDPool to allow failure recovery\n\nPrior to this commit, an IDAuthority.getIDBlock call that threw an\nexception or timed out would leave its StandardIDPool unable to\nprogress for the rest of its lifetime.  After the first\ntimeout/exception, StandardIDPool would never attempt another call to\nIDAuthority.getIDBlock.  This commit changes StandardIDPool to let it\nstart a new call to IDAuthority.getIDBlock following an\nexception/timeout.\n\nThis also fixes the test just introduced in\n2e637dd69812a4a7eb879e9f34ae03a1cfbfbaac.\n\nThere is no backoff logic introduced in this commit.  The assumption\nis that the IDAuthority implementation will contain a reasonable\namount of backoff logic (e.g. BackendOperation.execute).\n\nFor #992\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-04-20 17:47:53"}, {"commitUser": "dalaro", "commitDateTime": "2015-04-20 16:33:50", "commitHash": "2e637dd69812a4a7eb879e9f34ae03a1cfbfbaac", "commitParents": ["81cfbdba7b338ed677808f8a1e141e7517e8cb43"], "commitGHEventType": "referenced", "nameRev": "2e637dd69812a4a7eb879e9f34ae03a1cfbfbaac remotes/origin/titan05~7", "commitGitStats": [{"insertions": 83, "lines": 83, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/idmanagement/IDPoolTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.idmanagement.IDPoolTest.testAllocationTimeoutAndRecovery()"}], "spoonFilePath": "IDPoolTest.java"}], "commitMessage": "Add test of StandardIDPool's error recovery\n\nThis test shows that StandardIDPool suffers sticky failure when its\nunderlying IDAuthority times out; after the timeout, StandardIDPool\njust throws IllegalArgumentException even if the IDAuthority has since\nrecovered and is ready to return new blocks.\n\nFor #992\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-04-20 16:33:50"}], "created": "2015-04-03 02:29:38"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/990", "title": "BerkleyElasticsearchTest fails on subsequent runs", "closed": "2015-04-02 10:33:37", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2015-04-02 09:21:00", "user": "BrynCooke", "body": "BerkleyElasticsearchTest\nWhen running the unit tests I sometimes errors, these look like actual test errors but they go away if I do a clean build.\n\nThis is a very common stack trace for testGraphOfGodsFactoryCreate:\n\n```\ncom.thinkaurelius.titan.core.SchemaViolationException: Adding this property for key [~T$SchemaName] and value [rt%name] violates a uniqueness constraint [SystemIndex#~T$SchemaName]\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addPropertyInternal(StandardTitanTx.java:746)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.setProperty(StandardTitanTx.java:781)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addProperty(StandardTitanTx.java:704)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.makeSchemaVertex(StandardTitanTx.java:834)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.makePropertyKey(StandardTitanTx.java:854)\n    at com.thinkaurelius.titan.graphdb.types.StandardPropertyKeyMaker.make(StandardPropertyKeyMaker.java:86)\n    at com.thinkaurelius.titan.example.GraphOfTheGodsFactory.load(GraphOfTheGodsFactory.java:45)\n    at com.thinkaurelius.titan.example.GraphOfTheGodsFactory.create(GraphOfTheGodsFactory.java:38)\n    at com.thinkaurelius.titan.diskstorage.es.BerkeleyElasticsearchTest.testGraphOfTheGodsFactoryCreate(BerkeleyElasticsearchTest.java:50)\n```\n"}, {"labels": ["bug"], "filteredCommits": [], "url": "https://github.com/thinkaurelius/titan/issues/965", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"194bd3305793f06d39dafc780a4223d0f9c60f05": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 1.0002777777777778, "user": "dalaro", "changesInPackagesSPOON": [], "changesInPackagesGIT": [], "body": "This test passes in 0.5.3 but currently fails on titan05:\n\n```\ntestContainsWithMultipleValues(com.thinkaurelius.titan.diskstorage.lucene.BerkeleyLuceneTest)  Time elapsed: 3.98 sec  <<< ERROR!\njava.lang.IndexOutOfBoundsException: position (0) must be less than the number of elements that remained (0)\n        at com.google.common.collect.Iterators.get(Iterators.java:813)\n        at com.google.common.collect.Iterables.get(Iterables.java:725)\n        at com.thinkaurelius.titan.graphdb.TitanIndexTest.testContainsWithMultipleValues(TitanIndexTest.java:1307)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:606)\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n        at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)\n        at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n        at org.junit.runners.Suite.runChild(Suite.java:127)\n        at org.junit.runners.Suite.runChild(Suite.java:26)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:138)\n        at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.createReqestAndRun(JUnitCoreWrapper.java:139)\n        at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.executeEager(JUnitCoreWrapper.java:111)\n        at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:84)\n        at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:135)\n        at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:200)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:153)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0, "TOT": 0, "DEL": 0, "INS": 0, "spoonFilesChanged": 0, "MOV": 0}, "title": "Debug Lucene testContainsWithMultipleValues failure", "statsSkippedReason": "", "closed": "2015-02-11 21:30:19", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-02-11 16:23:42", "commitHash": "194bd3305793f06d39dafc780a4223d0f9c60f05", "commitParents": ["71bd1d78cbed459f75c70ac4f200363b4406dda6"], "commitGHEventType": "referenced", "nameRev": "194bd3305793f06d39dafc780a4223d0f9c60f05 tags/0.5.4~6", "commitGitStats": [{"insertions": 3, "lines": 6, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "deletions": 3}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanIndexTest.testContainsWithMultipleValues()"}], "spoonFilePath": "TitanIndexTest.java"}], "commitMessage": "Avoid stopwords in testContainsWithMultipleValues\n\n2a99d97913d8c05c7a53ceca77af944452fcde4c brought a new test method,\ntestContainsWithMultipleValues, for #909.  This passed on solr, but I\nfailed to notice that it failed on lucene.\n\nThe test ran a CONTAINS query on \"was here\".  On Solr, the query\nmatches the expected property, but on Lucene, it doesn't match even\nthough the data are the same.\n\nIf I'm reading the Solr and Lucene docs and test configs correctly,\nthen I think \"was\" is configured as a stopword for both of them.  I\nthink I've also ruled out dynamic field mapping as a potential culprit\n-- the field in the test is getting named 1|1_t, and there's a dynamic\nmapping for *_t in the schema file.  The FieldType also looks right;\nit's got to stopwords.txt.  I also see stopwords.txt pushed into the\nSolr server config when I turn org.apache.solr logging up to DEBUG.\nReally not sure where the discrepancy is.\n\nReconciling this difference was consuming a bunch of time for unclear\ngains, so I eventually tapped out and just changed the query string\nfrom \"was here\" to \"here hercules\".  The code exercised is the same as\nwhen searching for \"was here\", but this avoids common stopwords.\n\nFor #965\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-02-11 15:54:06"}], "created": "2015-02-10 19:36:36"}, {"labels": ["bug"], "filteredCommits": ["3c776d48e6d7d40359c2d7080409fd590d695728", "3736b37212d3a9e2278e44e4b070ba02b32cceea"], "url": "https://github.com/thinkaurelius/titan/issues/963", "gitStatsSummary": {"insertions": 183, "gitFilesChange": 5, "lines": 264, "deletions": 81}, "numCommits": 1, "commits": {"3736b37212d3a9e2278e44e4b070ba02b32cceea": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "3c776d48e6d7d40359c2d7080409fd590d695728": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.VertexBuilder.addEntries(java.lang.Iterable)", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat.setConf(org.apache.hadoop.conf.Configuration)", "com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.readHadoopVertex(com.thinkaurelius.titan.diskstorage.configuration.Configuration,com.thinkaurelius.titan.diskstorage.StaticBuffer,java.lang.Iterable)", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraWideRecordReader", "com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.VertexBuilder.build()", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraHadoopGraph.CassandraMapIterable", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat.createRecordReader(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)", "com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.VertexBuilder", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraHadoopGraph.CassandraMapIterator", "com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.newVertexBuilder(com.thinkaurelius.titan.diskstorage.configuration.Configuration,com.thinkaurelius.titan.diskstorage.StaticBuffer)"], "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats"], "body": "ColumnFamilyRecordReader's widerows option is technically honored when provided in titan-hadoop's config since #694, but because TitanCassandraRecordReader incorrectly assumes it will still get all of a row's columns in one call even when widerows is enabled, it's unusuable.  TCRR produces a bunch of fragmentary vertices from distinct chunks of a single row's columns and chaos ensues.\n\nThe binary-row-to-FaunusVertex logic in `TitanHadoopGraph.readHadoopVertex` may need to be broken into a builder pattern that can accommodate incremental vertex construction as the widerow iterator passes in columns over several calls.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 12, "UPD": 10, "TOT": 92, "DEL": 24, "INS": 31, "spoonFilesChanged": 5, "MOV": 27}, "title": "Add unit test of titan-hadoop Cassandra widerows, fix spurious row-breaks", "statsSkippedReason": "", "closed": "2015-02-10 06:35:00", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-02-09 22:05:43", "commitHash": "3736b37212d3a9e2278e44e4b070ba02b32cceea", "commitParents": ["3c776d48e6d7d40359c2d7080409fd590d695728"], "commitGHEventType": "referenced", "nameRev": "3736b37212d3a9e2278e44e4b070ba02b32cceea tags/0.5.4~11", "commitGitStats": [{"insertions": 12, "lines": 16, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/cassandra/TitanCassandraInputFormat.java", "deletions": 4}, {"insertions": 8, "lines": 15, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/cassandra/TitanCassandraRecordReader.java", "deletions": 7}, {"insertions": 61, "lines": 61, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/cassandra/TitanCassandraWideRecordReader.java", "deletions": 0}, {"insertions": 2, "lines": 4, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/cassandra/TitanCassandraHadoopGraph.java", "deletions": 2}, {"insertions": 100, "lines": 168, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/util/TitanHadoopGraph.java", "deletions": 68}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraWideRecordReader"}], "spoonFilePath": "TitanCassandraWideRecordReader.java"}, {"spoonMethods": [{"UPD": 6, "TOT": 6, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader"}], "spoonFilePath": "TitanCassandraRecordReader.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraHadoopGraph.CassandraMapIterator"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraHadoopGraph.CassandraMapIterable"}], "spoonFilePath": "TitanCassandraHadoopGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat.setConf(org.apache.hadoop.conf.Configuration)"}, {"UPD": 0, "TOT": 10, "DEL": 1, "INS": 4, "MOV": 5, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat.createRecordReader(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)"}], "spoonFilePath": "TitanCassandraInputFormat.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.VertexBuilder"}, {"UPD": 0, "TOT": 16, "DEL": 0, "INS": 16, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.VertexBuilder.addEntries(java.lang.Iterable)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.newVertexBuilder(com.thinkaurelius.titan.diskstorage.configuration.Configuration,com.thinkaurelius.titan.diskstorage.StaticBuffer)"}, {"UPD": 0, "TOT": 4, "DEL": 0, "INS": 4, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.VertexBuilder.build()"}, {"UPD": 2, "TOT": 47, "DEL": 22, "INS": 1, "MOV": 22, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.readHadoopVertex(com.thinkaurelius.titan.diskstorage.configuration.Configuration,com.thinkaurelius.titan.diskstorage.StaticBuffer,java.lang.Iterable)"}], "spoonFilePath": "TitanHadoopGraph.java"}], "commitMessage": "Keep vertices together with Cassandra widerows\n\nThis commit adds a new TitanCassandraWideRecordReader class that gets\ninstantiated when titan-hadoop's configuration includes\ncassandra.input.widerows=true.  This RR attempts to make as many calls\nto the underlying widerows iterator as necessary to collect all\n(column,value) entries before considering a FaunusVertex complete and\npassing it up to the MapReduce task.\n\nFor #963\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-02-09 20:59:26"}, {"commitUser": "dalaro", "commitDateTime": "2015-02-09 22:05:43", "commitHash": "3c776d48e6d7d40359c2d7080409fd590d695728", "commitParents": ["4f7647efbcece9f1fececef5f040fdeba6461c10"], "commitGHEventType": "referenced", "nameRev": "3c776d48e6d7d40359c2d7080409fd590d695728 tags/0.5.4~12", "commitGitStats": [{"insertions": 2, "lines": 4, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/test/java/com/thinkaurelius/titan/hadoop/formats/TitanOutputFormatTest.java", "deletions": 2}, {"insertions": 57, "lines": 57, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/test/java/com/thinkaurelius/titan/hadoop/formats/cassandra/TitanCassandraOutputFormatTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.TitanOutputFormatTest"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.TitanOutputFormatTest.bulkLoadGraphOfTheGods(com.thinkaurelius.titan.hadoop.formats.HadoopGraph)"}], "spoonFilePath": "TitanOutputFormatTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraOutputFormatTest.assertTotalLineCountInJobFiles(int,java.lang.String,java.lang.String)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraOutputFormatTest.testWideRows()"}], "spoonFilePath": "TitanCassandraOutputFormatTest.java"}], "commitMessage": "Adding test of titan-hadoop w/ Cassandra widerows\n\nThis commit adds a test method to TitanCassandraOutputFormatTest that\ncounts vertices with cassandra.input.widerows=true in the titan-hadoop\nconfiguration.\n\nThe test fails as of this commit due to a preexisting bug (fix\nincoming).\n\nFor #963\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-02-09 20:50:02"}], "created": "2015-02-09 20:15:25"}, {"labels": ["bug"], "filteredCommits": ["79a942a43203bb32b4051edb298fdc312d36a950"], "url": "https://github.com/thinkaurelius/titan/issues/941", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"79a942a43203bb32b4051edb298fdc312d36a950": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 14.000277777777777, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.hadoop.FaunusElement.getPropertyKeysDirect()"], "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop"], "body": "This reproduces in two separate shell invocations.\n\nFirst `gremlin.sh` invocation uses OLTP to load GotG:\n\n``` groovy\ng = TitanFactory.open('conf/titan-cassandra-es.properties')\nGraphOfTheGodsFactory.load(g)\n\nv = g.V('name', 'jupiter').next()\n\nm = g.getManagementSystem()\nm.makeEdgeLabel('hatedBy').multiplicity(Multiplicity.MANY2ONE).unidirected().make()\nm.commit()\ng.commit()\n\nv.outE('father').next().setProperty('hatedBy', v)\ng.shutdown()\n```\n\nNext `gremlin.sh` uses OLAP to count vertices.   It dies in FaunusSchemaManager.\n\n``` groovy\nh = HadoopFactory.open('conf/hadoop/titan-cassandra-input.properties')\nh.V.count() // This line should fail\n```\n\nHere's the exception:\n\n```\njava.lang.Exception: java.lang.RuntimeException: java.lang.IllegalArgumentException: Name does not identify a property key:  [hatedBy]\n        at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:403)\nCaused by: java.lang.RuntimeException: java.lang.IllegalArgumentException: Name does not identify a property key:  [hatedBy]\n        at org.apache.hadoop.mapreduce.lib.chain.Chain.joinAllThreads(Chain.java:526)\n        at org.apache.hadoop.mapreduce.lib.chain.ChainMapper.run(ChainMapper.java:169)\n        at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:763)\n        at org.apache.hadoop.mapred.MapTask.run(MapTask.java:339)\n        at org.apache.hadoop.mapred.LocalJobRunner$Job$MapTaskRunnable.run(LocalJobRunner.java:235)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:744)\nCaused by: java.lang.IllegalArgumentException: Name does not identify a property key:  [hatedBy]\n        at com.google.common.base.Preconditions.checkArgument(Preconditions.java:120)\n        at com.thinkaurelius.titan.hadoop.FaunusSchemaManager.getPropertyKey(FaunusSchemaManager.java:138)\n        at com.thinkaurelius.titan.hadoop.FaunusElement.getProperty(FaunusElement.java:334)\n        at com.tinkerpop.blueprints.util.io.graphson.GraphSONUtility.createPropertyMap(GraphSONUtility.java:649)\n        at com.tinkerpop.blueprints.util.io.graphson.GraphSONUtility.objectNodeFromElement(GraphSONUtility.java:218)\n        at com.tinkerpop.blueprints.util.io.graphson.GraphSONUtility.jsonFromElement(GraphSONUtility.java:198)\n        at com.tinkerpop.blueprints.util.io.graphson.GraphSONUtility.jsonFromElement(GraphSONUtility.java:388)\n        at com.thinkaurelius.titan.hadoop.formats.graphson.HadoopGraphSONUtility.toJSON(HadoopGraphSONUtility.java:128)\n        at com.thinkaurelius.titan.hadoop.formats.graphson.GraphSONRecordWriter.write(GraphSONRecordWriter.java:43)\n        at com.thinkaurelius.titan.hadoop.formats.graphson.GraphSONRecordWriter.write(GraphSONRecordWriter.java:19)\n        at org.apache.hadoop.mapreduce.lib.output.MultipleOutputs.write(MultipleOutputs.java:433)\n        at org.apache.hadoop.mapreduce.lib.output.MultipleOutputs.write(MultipleOutputs.java:411)\n        at com.thinkaurelius.titan.hadoop.mapreduce.util.SafeMapperOutputs.write(SafeMapperOutputs.java:34)\n        at com.thinkaurelius.titan.hadoop.mapreduce.util.CountMapReduce$Map.map(CountMapReduce.java:74)\n        at com.thinkaurelius.titan.hadoop.mapreduce.util.CountMapReduce$Map.map(CountMapReduce.java:39)\n        at org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:145)\n\n```\n\nRunning these two snippets in the same shell does not produce a failure.\n\nReproduced on titan05 HEAD 69b0788d86422d6e50555e1830b46639137e305c.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 2, "DEL": 1, "INS": 0, "spoonFilesChanged": 1, "MOV": 1}, "title": "Hadoop read failure on edge property", "statsSkippedReason": "", "closed": "2015-02-10 06:56:22", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-02-09 22:03:31", "commitHash": "79a942a43203bb32b4051edb298fdc312d36a950", "commitParents": ["879c9a16cddc117291e6bc9e82aa5e76a2666b3c"], "commitGHEventType": "referenced", "nameRev": "79a942a43203bb32b4051edb298fdc312d36a950 tags/0.5.4~15", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/FaunusElement.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.FaunusElement.getPropertyKeysDirect()"}], "spoonFilePath": "FaunusElement.java"}], "commitMessage": "Stop returning unidir edges as properties\n\ntitan-hadoop iterates over unidirected edges as if they were\nproperties; this produces an exception as reported in #941.\n\nThis commit makes FaunusElement.getPropertyKeysDirect stop returning\nunidirected edges.  This avoids the exception in #941.  However,\ndumping edges from Cassandra to GraphSON omits unidirected edges.\n\ntitan-hadoop could probably use more tweaking to resolve the tension\nbetween unidirected edges being represented as relations with a type\nthat extends edge but which use the setProperty interface.\n\nThe existing TitanOutputFormatTest.testUnidirectionEdges still passes,\nbut given my track record of unintended collateral breakage caused by\nfaunus schema changes during titan05 development, I'm hesitant to\ndeclare victory.  There may be unintended consequences that I'm\nmissing.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-02-09 11:07:58"}], "created": "2015-01-26 21:40:58"}, {"labels": ["bug"], "filteredCommits": ["acd9f5c08815885fbf43a31b36c4be784fc8fc02"], "url": "https://github.com/thinkaurelius/titan/issues/940", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"acd9f5c08815885fbf43a31b36c4be784fc8fc02": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "4f7647efbcece9f1fececef5f040fdeba6461c10": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 14.000277777777777, "user": "dalaro", "changesInPackagesGIT": [], "body": "In 0.5.3, the gpg:sign goal executes before the assembly:single goal, resulting in zipfiles without signatures.  Reorder the plugin config declarations s.t. gpg:sign executes after assembly:single. \n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Fix sign-assembly plugin ordering in poms", "statsSkippedReason": "", "closed": "2015-02-10 06:35:25", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-05-05 04:41:31", "commitHash": "acd9f5c08815885fbf43a31b36c4be784fc8fc02", "commitParents": ["c45960b3fafc0bb89d8e94ddb9cf8c70d035ea46"], "commitGHEventType": "referenced", "nameRev": "acd9f5c08815885fbf43a31b36c4be784fc8fc02 tags/0.9.0-M2~99", "commitGitStats": [{"insertions": 8, "lines": 8, "filePath": "titan-dist/pom.xml", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Fix maven assembly->gpg plugin ordering in release\n\nFor #940\n(cherry picked from commit 4f7647efbcece9f1fececef5f040fdeba6461c10)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-02-09 12:19:10"}, {"commitUser": "dalaro", "commitDateTime": "2015-02-09 22:05:42", "commitHash": "4f7647efbcece9f1fececef5f040fdeba6461c10", "commitParents": ["645b406468f06c043b810375d6203618b505b241"], "commitGHEventType": "referenced", "nameRev": "4f7647efbcece9f1fececef5f040fdeba6461c10 tags/0.5.4~13", "commitGitStats": [{"insertions": 8, "lines": 8, "filePath": "titan-dist/pom.xml", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Fix maven assembly->gpg plugin ordering in release\n\nFor #940\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-02-09 12:19:10"}], "created": "2015-01-26 21:01:30"}, {"labels": ["bug"], "filteredCommits": ["7156dcbc9fe1f7a4785a1c68812aafaa18d69c87"], "url": "https://github.com/thinkaurelius/titan/issues/937", "gitStatsSummary": {"insertions": 9, "gitFilesChange": 2, "lines": 11, "deletions": 2}, "numCommits": 1, "commits": {"7156dcbc9fe1f7a4785a1c68812aafaa18d69c87": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}, "56e64ff140b2219f9dd637d6241763c8c43aa45f": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 3.000277777777778, "user": "dkuppitz", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.relations.CacheEdge.copyProperties(com.thinkaurelius.titan.graphdb.internal.InternalRelation)", "com.thinkaurelius.titan.graphdb.relations.CacheProperty.copyProperties(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations"], "body": "Trying to set a `Long` on an edge fails when you're using the setting:\n\n```\nstorage.meta.edgestore.timestamps=true\n```\n\nCheck out the [sample code](https://github.com/dkuppitz/titan-sandbox/tree/simon) that reproduces the issue.\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 12, "DEL": 2, "INS": 4, "spoonFilesChanged": 2, "MOV": 6}, "title": "Conversion issue when trying to set a long value on an edge", "statsSkippedReason": "", "closed": "2015-01-26 02:34:33", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2015-01-22 16:07:53", "commitHash": "7156dcbc9fe1f7a4785a1c68812aafaa18d69c87", "commitParents": ["9d650c36ce4fdaa463fc3a994c746c9fe1817470"], "commitGHEventType": "closed", "nameRev": "7156dcbc9fe1f7a4785a1c68812aafaa18d69c87 tags/0.5.4~22", "commitGitStats": [{"insertions": 4, "lines": 5, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheEdge.java", "deletions": 1}, {"insertions": 5, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheProperty.java", "deletions": 1}, {"insertions": 44, "lines": 44, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanEventualGraphTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 6, "DEL": 1, "INS": 2, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.CacheProperty.copyProperties(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}], "spoonFilePath": "CacheProperty.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanEventualGraphTest.testTimestampedUpdates()"}], "spoonFilePath": "TitanEventualGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 6, "DEL": 1, "INS": 2, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.CacheEdge.copyProperties(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}], "spoonFilePath": "CacheEdge.java"}], "commitMessage": "Fixes #937 with extra test coverage.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-01-22 16:07:53"}, {"commitUser": "mbroecheler", "commitDateTime": "2015-05-04 23:12:30", "commitHash": "56e64ff140b2219f9dd637d6241763c8c43aa45f", "commitParents": ["7181d969d170523ab94e96f8b9c53713a76ef0ad"], "commitGHEventType": "referenced", "nameRev": "56e64ff140b2219f9dd637d6241763c8c43aa45f tags/0.9.0-M2~103", "commitGitStats": [{"insertions": 4, "lines": 5, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheVertexProperty.java", "deletions": 1}, {"insertions": 4, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheEdge.java", "deletions": 2}, {"insertions": 38, "lines": 38, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanEventualGraphTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 6, "DEL": 1, "INS": 2, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.CacheVertexProperty.copyProperties(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}], "spoonFilePath": "CacheVertexProperty.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanEventualGraphTest.testTimestampedEdgeUpdates()"}], "spoonFilePath": "TitanEventualGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 6, "DEL": 1, "INS": 2, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.CacheEdge.copyProperties(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}], "spoonFilePath": "CacheEdge.java"}], "commitMessage": "Fixes #937 with extra test coverage.\n(cherry picked from commit 7156dcbc9fe1f7a4785a1c68812aafaa18d69c87)\n\n@dalaro: Although only CacheEdge and CacheVertexProperty encountered\nmerge conflicts, TitanEventualGraphTest was also completely out of\ndate and had to be rewritten for the titan09 API.  Essentially all of\nthe API bits touched in this commit have shifted.  I'm not even\ncompletely sure the ImplicitKey checks in Cache* are still valid.\n\nConflicts:\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheEdge.java\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheVertexProperty.java\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-01-22 16:07:53"}], "created": "2015-01-22 15:55:13"}, {"labels": ["bug"], "filteredCommits": ["110e22c818314f65ab9a0d27cb4ab429abda0db6", "7bd3abf6dc65777cab11eb9cbd0f5a95b5d3e8fb"], "url": "https://github.com/thinkaurelius/titan/issues/929", "gitStatsSummary": {"insertions": 43, "gitFilesChange": 5, "lines": 127, "deletions": 84}, "numCommits": 2, "commits": {"7bd3abf6dc65777cab11eb9cbd0f5a95b5d3e8fb": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "110e22c818314f65ab9a0d27cb4ab429abda0db6": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 8.000277777777777, "user": "rjbriody", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.StandardIndexProvider", "com.thinkaurelius.titan.diskstorage.Backend", "com.thinkaurelius.titan.graphdb.configuration.TitanConstants", "com.thinkaurelius.titan.diskstorage.StandardStoreManager", "com.thinkaurelius.titan.diskstorage.Backend.registerShorthands(java.util.Properties,java.lang.String,java.util.Map)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration", "titan-core/src/main/resources/com/thinkaurelius/titan/graphdb/configuration/{titan.properties => titan.internal.properties}", "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage"], "body": "Seen in 0.9.M1\n\nHaving a titan.properties on the classpath causes a failure on startup.\n\n```\nException in thread \"main\" java.lang.ExceptionInInitializerError\n    at com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.<init>(GraphDatabaseConfiguration.java:1296)\n    at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:91)\n    at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:71)\n    at runnable.TestConfBug.main(TestConfBug.java:21)\nCaused by: java.lang.UnsupportedOperationException\n    at com.google.common.collect.ImmutableMap.put(ImmutableMap.java:326)\n    at com.thinkaurelius.titan.diskstorage.Backend.registerShorthands(Backend.java:726)\n    at com.thinkaurelius.titan.diskstorage.Backend.<clinit>(Backend.java:717)\n    ... 4 more\n```\n\nThe problem is that an ImmutableMap is returned and passed on the following line:\n\n```\nregisterShorthands(props, \"storage.\", StandardStoreManager.getAllManagerClasses())\n```\n\n...then registerShorthands calls put on the Immutable Map\n\n```\nshorthands.put(shorthand, clazz);\n```\n\n...which results in the `UnsupportedOperationException`.\n\nTaking a step back, I wonder if auto-loading titan.properties is actually useful (but I'm not clear on it's original purpose).\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 5, "UPD": 25, "TOT": 51, "DEL": 13, "INS": 13, "spoonFilesChanged": 4, "MOV": 0}, "title": "titan.properties on classpath results in startup failure.", "statsSkippedReason": "", "closed": "2015-01-24 00:37:46", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-01-23 18:46:42", "commitHash": "7bd3abf6dc65777cab11eb9cbd0f5a95b5d3e8fb", "commitParents": ["110e22c818314f65ab9a0d27cb4ab429abda0db6"], "commitGHEventType": "referenced", "nameRev": "7bd3abf6dc65777cab11eb9cbd0f5a95b5d3e8fb tags/0.9.0-M2~270", "commitGitStats": [{"insertions": 8, "lines": 16, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/StandardStoreManager.java", "deletions": 8}, {"insertions": 0, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration/TitanConstants.java", "deletions": 4}, {"insertions": 8, "lines": 16, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/StandardIndexProvider.java", "deletions": 8}, {"insertions": 0, "lines": 44, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/Backend.java", "deletions": 44}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 6, "TOT": 10, "DEL": 2, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardStoreManager"}], "spoonFilePath": "StandardStoreManager.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.registerShorthands(java.util.Properties,java.lang.String,java.util.Map)"}], "spoonFilePath": "Backend.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 2, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.configuration.TitanConstants"}], "spoonFilePath": "TitanConstants.java"}, {"spoonMethods": [{"UPD": 6, "TOT": 10, "DEL": 2, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardIndexProvider"}], "spoonFilePath": "StandardIndexProvider.java"}], "commitMessage": "Removing custom shorthand registration\n\nThis is a follow-on to 110e22c818314f65ab9a0d27cb4ab429abda0db6\n\nI just changed the resource containing shorthand->class mappings to a\nfully-qualified package-and-filename string.  That dramatically\nreduces the odds of accidentally overwriting the file with nonsense,\nbut it also provides no clean way for third-party implementors to add\nmappings.  I don't think centralizing this information in a file is\nthe way we want to approach custom shorthands anyway.  Removing the\ncustom shorthand feature and making the index and storage backend\nmappings immutable again.\n\nThis commit does not affect the standard shorthands.  For example,\n\"cassandra\" is still a valid shorthand.\n\nFor #929\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-01-23 18:46:42"}, {"commitUser": "dalaro", "commitDateTime": "2015-01-23 18:10:50", "commitHash": "110e22c818314f65ab9a0d27cb4ab429abda0db6", "commitParents": ["8d5f50cefca0d20892cc6621c5b53cd463a4a2f8"], "commitGHEventType": "referenced", "nameRev": "110e22c818314f65ab9a0d27cb4ab429abda0db6 tags/0.9.0-M2~271", "commitGitStats": [{"insertions": 0, "lines": 0, "filePath": "titan-core/src/main/resources/com/thinkaurelius/titan/graphdb/configuration/{titan.properties => titan.internal.properties}", "deletions": 0}, {"insertions": 8, "lines": 16, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/StandardStoreManager.java", "deletions": 8}, {"insertions": 8, "lines": 11, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration/TitanConstants.java", "deletions": 3}, {"insertions": 8, "lines": 16, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/StandardIndexProvider.java", "deletions": 8}, {"insertions": 3, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/Backend.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 6, "TOT": 10, "DEL": 2, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardStoreManager"}], "spoonFilePath": "StandardStoreManager.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 1, "INS": 3, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend"}], "spoonFilePath": "Backend.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.configuration.TitanConstants"}], "spoonFilePath": "TitanConstants.java"}, {"spoonMethods": [{"UPD": 6, "TOT": 10, "DEL": 2, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardIndexProvider"}], "spoonFilePath": "StandardIndexProvider.java"}], "commitMessage": "Fix custom backend shorthand registration\n\nThere are two related but distinct logical changes in this commit:\n\n* Changed the list of index and storage backends from immutable to\n  mutable collections to allow provision of custom shorthand->class\n  mappings for third-party backends.\n\n* Made Backend look at a fully-qualified resource name instead of just\n  loading the resource named \"titan.properties\", which is such a\n  natural filename for a user's config that it tends to cause\n  conflicts.  TitanConstants already used a fully-qualified\n  packagename when looking up this resource, but Backend didn't.  Also\n  renamed the resource file from \"titan.properties\" to\n  \"titan.internal.properties\".\n\nFor #929\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-01-23 18:10:50"}], "created": "2015-01-15 23:07:37"}, {"labels": ["bug", "enhancement"], "filteredCommits": ["dcf2924a4d9de7acb6fcf86f91c6f4dcb8cc0e3a", "71bd1d78cbed459f75c70ac4f200363b4406dda6", "645b406468f06c043b810375d6203618b505b241"], "url": "https://github.com/thinkaurelius/titan/issues/924", "gitStatsSummary": {"insertions": 171, "gitFilesChange": 4, "lines": 249, "deletions": 78}, "numCommits": 3, "commits": {"71bd1d78cbed459f75c70ac4f200363b4406dda6": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "dcf2924a4d9de7acb6fcf86f91c6f4dcb8cc0e3a": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "645b406468f06c043b810375d6203618b505b241": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 35.000277777777775, "user": "spmallette", "changesInPackagesSPOON": ["com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.call(java.lang.Object[])", "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ConsolePreferenceChangeListener", "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure", "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console", "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.OLTPPeekConsumer", "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.safeIntConversion(java.lang.String,int)", "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.setConsolePreferenceConsumers(com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ConsolePreferenceChangeListener)", "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.OLAPPeekConsumer"], "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop", "titan-dist/src/assembly/static/bin/gremlin.sh"], "body": "I saw this in 0.5.2, but @dalaro confirmed that it was in 0.5.3:\n\n``` text\ngremlin> [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n==>1\n==>2\n==>3\n==>4\n==>5\n==>6\n==>7\n==>8\n==>9\n==>10\n==>11\n==>12\n==>13\n==>14\n==>15\n==>...\ngremlin> [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n==>1\n==>2\n==>3\n==>4\n==>5\n==>6\n==>7\n==>8\n==>9\n==>10\n==>11\n==>12\n==>13\n==>14\n==>15\n==>16\ngremlin> [1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n==>1\n==>2\n==>3\n==>4\n==>5\n==>6\n==>7\n==>8\n==>9\n==>10\n==>11\n==>12\n==>13\n==>14\n```\n\nUnsure if there are other list sizes that pop in the ellipse or not.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 8, "UPD": 7, "TOT": 49, "DEL": 9, "INS": 26, "spoonFilesChanged": 3, "MOV": 7}, "title": "Ellipse shows in Console for 15 items", "statsSkippedReason": "", "closed": "2015-02-17 18:55:31", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-02-11 06:18:03", "commitHash": "71bd1d78cbed459f75c70ac4f200363b4406dda6", "commitParents": ["dcf2924a4d9de7acb6fcf86f91c6f4dcb8cc0e3a"], "commitGHEventType": "referenced", "nameRev": "71bd1d78cbed459f75c70ac4f200363b4406dda6 tags/0.5.4~7", "commitGitStats": [{"insertions": 77, "lines": 81, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop/gremlin/ResultHookClosure.java", "deletions": 4}, {"insertions": 76, "lines": 76, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop/gremlin/ConsolePreferenceChangeListener.java", "deletions": 0}, {"insertions": 10, "lines": 12, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop/gremlin/Console.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 12, "DEL": 3, "INS": 9, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.call(java.lang.Object[])"}, {"UPD": 2, "TOT": 7, "DEL": 0, "INS": 4, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.OLTPPeekConsumer"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.safeIntConversion(java.lang.String,int)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.setConsolePreferenceConsumers(com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ConsolePreferenceChangeListener)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.OLAPPeekConsumer"}], "spoonFilePath": "ResultHookClosure.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 6, "DEL": 0, "INS": 5, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console"}], "spoonFilePath": "Console.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ConsolePreferenceChangeListener"}], "spoonFilePath": "ConsolePreferenceChangeListener.java"}], "commitMessage": "Use Groovysh `set` builtin for result peek sizes\n\nWhen a gremlin.sh command evaluates to an iterable, the number of\ninitial elements in the iterable printed to the console is now\ncontrolled by a pair of Groovysh settings:\n\n* `set tp-olap-result-peek <int>` (default 50)\n* `set tp-oltp-result-peek <int>` (default 500)\n\nThe OLAP setting controls the number of initial lines read out of\nresult files produced by executing a HadoopPipeline (i.e. a\ntitan-hadoop/Faunus job).\n\nThe OLTP setting controls the number of initial elements read out of\nany other iterable result.\n\nNegative ints are treated as if Integer.MAX_VALUE were specified.\nZero has slightly special interpretation; it completely disables\niterator peeking.  Zero means that the shell will not even call\nhasNext to decide whether to print \"...\".  Positive ints are used\nexactly as specified.\n\nSettings are persistent across gremlin.sh sessions.  They're stored in\nthe Java user Preferences system under the node\n\"/org/codehaus/groovy/tools/shell\".  On *NIX systems, this is usually\nin ~/.java/.userPrefs/org/codehaus/groovy/tools/shell/prefs.xml.  You\nmay notice that the implementation in this commit does not actually\ncall Preferences.flush anywhere to guarantee persistence.  It relies\ninstead on this guarantee from the Preferences javadoc: \"Normal\ntermination of the Java Virtual Machine will not result in the loss of\npending updates -- an explicit flush invocation is not required upon\ntermination to ensure that pending updates are made persistent.\"\n\nFor #924\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-02-11 05:15:08"}, {"commitUser": "dalaro", "commitDateTime": "2015-02-11 03:49:57", "commitHash": "dcf2924a4d9de7acb6fcf86f91c6f4dcb8cc0e3a", "commitParents": ["86a142e0cf3981ed8011a71128b4023cbe014fa9"], "commitGHEventType": "referenced", "nameRev": "dcf2924a4d9de7acb6fcf86f91c6f4dcb8cc0e3a tags/0.5.4~8", "commitGitStats": [{"insertions": 2, "lines": 16, "filePath": "titan-dist/src/assembly/static/bin/gremlin.sh", "deletions": 14}, {"insertions": 1, "lines": 54, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop/gremlin/ResultHookClosure.java", "deletions": 53}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 7, "DEL": 4, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure"}], "spoonFilePath": "ResultHookClosure.java"}], "commitMessage": "Revert \"Optionify the # of result elems shown in the shell\"\n\nThis reverts commit 5298f5d923fd2fbf276b40d7c20d4d56fd2f0621.\n\nReverting per recent discussion in #924.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-02-11 03:49:57"}, {"commitUser": "dalaro", "commitDateTime": "2015-02-09 22:05:42", "commitHash": "645b406468f06c043b810375d6203618b505b241", "commitParents": ["79a942a43203bb32b4051edb298fdc312d36a950"], "commitGHEventType": "referenced", "nameRev": "645b406468f06c043b810375d6203618b505b241 tags/0.5.4~14", "commitGitStats": [{"insertions": 5, "lines": 10, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop/gremlin/ResultHookClosure.java", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 3, "TOT": 12, "DEL": 2, "INS": 3, "MOV": 4, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.call(java.lang.Object[])"}], "spoonFilePath": "ResultHookClosure.java"}], "commitMessage": "Fix gremlin.sh result set ellipses\n\nPrior to this commit:\n\n* Ellipses were printed whenever a result set iterator printed exactly\n  15 elements.\n\n* Iterators over result files generated by titan-hadoop jobs were hard\n  limited to 15 elements, but non-Hadoop result iterators had no\n  limit, resulting in odd ellipses behavior and no effective limit for\n  non-Hadoop results\n\nAfter this commit:\n\n* All result set iterators are subject to the 15 line limit\n\n* Iterators over result files generated by titan-hadoop jobs have\n  their internal hard limit set to 16, so that exactly-15 and 15+ are\n  distinguishable for ellipses\n\nFor #924\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-02-09 12:10:53"}], "created": "2015-01-13 17:31:04"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/922", "title": "Gremlin extensions not loaded when gremlin.sh is run from directory other than dist root", "closed": "2015-04-10 21:38:44", "commitsDetails": [], "commits": {}, "ttf": 90.00027777777778, "created": "2015-01-10 00:21:20", "user": "rjbriody", "body": "Observed in titan-console-0.9.0-M1.\n\nExtensions are loaded when gremlin.sh is started from the dist root:\n\n```\n./bin/gremlin.sh \n\n         \\,,,/\n         (o o)\n-----oOOo-(3)-oOOo-----\nplugin activated: tinkerpop.server\nplugin activated: tinkerpop.utilities\nINFO  com.tinkerpop.gremlin.hadoop.structure.HadoopGraph  - HADOOP_GREMLIN_LIBS is set to: /home/bob/aurelius/titan/dists/titan-console-0.9.0-M1/bin/../ext/hadoop-gremlin:/home/bob/aurelius/titan/dists/titan-console-0.9.0-M1/bin/../ext/titan-all\nplugin activated: tinkerpop.hadoop\nplugin activated: aurelius.titan\nplugin activated: tinkerpop.tinkergraph\n```\n\n...but when gremlin is started from anywhere else the extensions are not loaded\n\n```\n./titan-console-0.9.0-M1/bin/gremlin.sh \n\n         \\,,,/\n         (o o)\n-----oOOo-(3)-oOOo-----\n\n```\n\nI have verified that the $DIR and $CLASSPATH vars in gemlin.sh look correct. \n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/918", "title": "Duplicate properties after singleProperty call in Titan 0.9", "closed": "2015-04-14 22:55:15", "commitsDetails": [], "commits": {}, "ttf": 95.00027777777778, "created": "2015-01-09 05:05:38", "user": "smalyshev", "body": "I create a vertex with this code:\n\n```\ngremlin> v = g.addVertex('wikibaseId', 'Q1')\n==>v[66560768]\ngremlin> v.singleProperty('contentHash', 'test')\n==>vp[contentHash->test]\ngremlin> g.tx().commit()\n```\n\nThen I do this:\n\n```\ngremlin> v = g.V().has('wikibaseId', 'Q1').next()\n==>v[66560768]\ngremlin> v.singleProperty('contentHash', 'test2')\n==>vp[contentHash->test2]\ngremlin> v = g.V().has('wikibaseId', 'Q1').next()\n==>v[66560768]\ngremlin> v.singleProperty('contentHash', 'test2')\n==>vp[contentHash->test2]\ngremlin> v = g.V().has('wikibaseId', 'Q1').next()\n==>v[66560768]\ngremlin> v.singleProperty('contentHash', 'test3')\n==>vp[contentHash->test3]\ngremlin> v.properties('contentHash')\n==>vp[contentHash->test3]\n==>vp[contentHash->test]\n```\n\nAs you can see, I have now two properties named contentHash - even though I specifically asked to make it a single property. It also leads to this unpleasant effect:\n\n```\ngremlin> v.property('contentHash')\nMultiple properties exist for the provided key, use Vertex.properties(contentHash)\nDisplay stack trace? [yN] \n```\n\nI.e. despite me always using `singleProperty`, I can not use `property()` reliably. The duplicates disappear after the commit, but committing after each property change would be very expensive. \n\nBoth `wikibaseId` and `contentHash` are declared as String keys with default (i.e. `SINGLE`, as the docs say) cardinality:\n\n```\nmgmt.makePropertyKey('contentHash').dataType(String.class).make()\nmgmt.makePropertyKey('wikibaseId').dataType(String.class).make()\n```\n\nso they aren't even supposed to be able to hold many values. Yet that's what happens. \n"}, {"labels": ["bug"], "filteredCommits": ["f25283628168a4888ce46f38e6cf7cecb2794c05"], "url": "https://github.com/thinkaurelius/titan/issues/914", "gitStatsSummary": {"insertions": 27, "gitFilesChange": 2, "lines": 46, "deletions": 19}, "numCommits": 1, "commits": {"f25283628168a4888ce46f38e6cf7cecb2794c05": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 23.00027777777778, "user": "smalyshev", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.tinkerpop.TitanBlueprintsGraph.close()", "com.thinkaurelius.titan.graphdb.tinkerpop.TitanBlueprintsGraph", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.closeInternal()", "com.thinkaurelius.titan.graphdb.tinkerpop.TitanBlueprintsGraph.startNewTx()"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/tinkerpop", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database"], "body": "It looks like TitanBlueprintsGraph class does not release transactions it puts into openTx map.\n\nI was porting data import code from Titan 0.5.2 to 0.9 and I've encountered OutOfMemory errors. Looking into the memory dump, I've discovered 16 StandardTitanTx objects held by ConcurrentHashMap in StandardTitanGraph object. I suspect those are transactions in openTx map in TitanBlueprintsGraph:\n\nhttps://github.com/thinkaurelius/titan/blob/0.9.0-M1/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/tinkerpop/TitanBlueprintsGraph.java#L64\n\nLooking at the code, openTx is declared private and only two references to it are:\n\nhttps://github.com/thinkaurelius/titan/blob/0.9.0-M1/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/tinkerpop/TitanBlueprintsGraph.java#L85\n\nwhere new transaction gets put into the map, and:\nhttps://github.com/thinkaurelius/titan/blob/0.9.0-M1/titan-core/src/main/java/com/thinkaurelius/titan/graphdb/tinkerpop/TitanBlueprintsGraph.java#L98\n\nwhere the graph is closed and the map is cleared. But when transactions are committed or rolled back I see no change to openTx and no reference to openTx in other code at all. Am I missing something or indeed openTx keeps them forever until the graph is closed? If so, it seems to be what is causing the memory leak - the ConcurrentHashMap seems to consume 2/3 of the heap and is never cleaned until the process goes OOM. \n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 4, "UPD": 0, "TOT": 16, "DEL": 5, "INS": 1, "spoonFilesChanged": 2, "MOV": 10}, "title": "TitanBlueprintsGraph not releasing transactions?", "statsSkippedReason": "", "closed": "2015-01-31 04:19:40", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2015-01-20 13:08:04", "commitHash": "f25283628168a4888ce46f38e6cf7cecb2794c05", "commitParents": ["78e78eac4e59a716b323408c75aacfdc6e138508"], "commitGHEventType": "referenced", "nameRev": "f25283628168a4888ce46f38e6cf7cecb2794c05 tags/0.9.0-M2~314", "commitGitStats": [{"insertions": 2, "lines": 21, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/tinkerpop/TitanBlueprintsGraph.java", "deletions": 19}, {"insertions": 25, "lines": 25, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 12, "DEL": 1, "INS": 1, "MOV": 10, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.closeInternal()"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 2, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.tinkerpop.TitanBlueprintsGraph.close()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.tinkerpop.TitanBlueprintsGraph"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.tinkerpop.TitanBlueprintsGraph.startNewTx()"}], "spoonFilePath": "TitanBlueprintsGraph.java"}], "commitMessage": "Tweak open transaction tracking\n\nThis deletes TitanBlueprintsGraph's collection of the graph's open\ntransactions.  StandardTitanGraph has an openTransactions set that\nmakes TBG's collection redundant.  Also modified STG.close to iterate\nover open transactions and attempt to close each.\n\nFor #914\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-01-20 12:47:06"}], "created": "2015-01-07 23:18:55"}, {"labels": ["bug"], "filteredCommits": ["43df5df06cf3697da19de6fc286f28905647f3f8"], "url": "https://github.com/thinkaurelius/titan/issues/913", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"43df5df06cf3697da19de6fc286f28905647f3f8": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 98.00027777777778, "user": "levin-royl", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.tinkerpop.TitanBlueprintsTransaction.addVertex(java.lang.Object[])"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/tinkerpop"], "body": "Hi,\n\nI ran into some problems with Titan version 0.9.0.M1 and TinkerPop 3.0.0.M6 when trying to set vertex properties with multiple values.\nI created the following test to show that TinkerGraph and TitanGraph behave differently with respect to this:\n\n@Test\npublic void testTitanMultiValueVertexProperty() throws Exception {\n        Graph[] graphs = new Graph[] {\n                TinkerGraph.open(),\n                GraphUtil.createTitanInMemory(true)\n        };\n\n```\n    for (Graph g : graphs) {\n        Vertex v = g.addVertex(T.label, \"test\", \"i\", 1, \"i\", 2);\n\n        assertNotNull(v);\n        assertEquals(\"test\", v.label());\n\n        System.out.println(v.propertyMap(\"i\").next());\n   }\n```\n\n}\n\nOutput\n\n{i=[vp[i->1], vp[i->2]]}\n{i=[vp[i->2]]}\n\nI would expect that in both cases i would have two values, 1 and 2.\n\nThanks in advance,\nRoy Levin\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "spoonFilesChanged": 1, "MOV": 0}, "title": "Tian not supporting multiple values per property like previous version or like TinkerGraph ", "statsSkippedReason": "", "closed": "2015-04-14 23:02:01", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2015-04-14 16:00:44", "commitHash": "43df5df06cf3697da19de6fc286f28905647f3f8", "commitParents": ["a6d482084d31298b2585952d4f63b13f4c35ddf0"], "commitGHEventType": "referenced", "nameRev": "43df5df06cf3697da19de6fc286f28905647f3f8 tags/0.9.0-M2~187", "commitGitStats": [{"insertions": 27, "lines": 27, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/tinkerpop/TitanBlueprintsTransaction.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testTinkerPopCardinality()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.tinkerpop.TitanBlueprintsTransaction.addVertex(java.lang.Object[])"}], "spoonFilePath": "TitanBlueprintsTransaction.java"}], "commitMessage": "Fixes #913\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-04-14 16:00:44"}], "created": "2015-01-06 11:01:52"}, {"labels": ["bug"], "filteredCommits": ["2a421cfd38a4a9567e25060633f19fd30b73d042", "9655018ad6f9784fe8ff880e6cfc9b105676fe40", "a83e46304c13d16b9bbb94add6f7f49c73bb4627", "9977456a110929d1104138915c14d09d348ef137"], "url": "https://github.com/thinkaurelius/titan/issues/881", "gitStatsSummary": {"insertions": 115, "gitFilesChange": 8, "lines": 171, "deletions": 56}, "numCommits": 4, "commits": {"9977456a110929d1104138915c14d09d348ef137": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "a83e46304c13d16b9bbb94add6f7f49c73bb4627": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "3247d28161a1c089cb463c208ae21c5129eee1af": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "7d6a0ccac21b21a423b708c1ffa976898c51f906": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "e00073c07557d346acfe697165a7764f98349abb": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "9655018ad6f9784fe8ff880e6cfc9b105676fe40": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "bc88a4598c16486efd191c4a327ccd077c0beac2": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "2a421cfd38a4a9567e25060633f19fd30b73d042": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 12.000277777777777, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.util.system.TXUtils", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getSchemaVertex(java.lang.String)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaByName(java.lang.String)", "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.incAction(java.lang.String,com.thinkaurelius.titan.diskstorage.util.CacheMetricsAction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.database.cache.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getName()", "com.thinkaurelius.titan.graphdb.database.cache.StandardSchemaCache.getSchemaId(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getDefinition()", "com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getRelated(com.thinkaurelius.titan.graphdb.types.vertices.TypeDefinitionCategory,com.tinkerpop.blueprints.Direction)", "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.getSchemaId(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.1.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.database.cache.getSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.database.cache.getSchemaId(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.database.cache.StandardSchemaCache.getSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.customOption(java.lang.String,java.lang.Object)", "com.thinkaurelius.titan.graphdb.database.cache.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.incAction(java.lang.String,com.thinkaurelius.titan.diskstorage.util.CacheMetricsAction)", "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.getSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.thinkaurelius.titan.graphdb.database.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/types/vertices", "titan-core/src/main/java/com/thinkaurelius/titan/util/system", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/cache"], "body": "Schema writes on Cassandra that take locks are already promoted to QUORUM regardless of the `write-consistency-level` in the config.  However, schema reads -- such as StandardTitanGraph.typeCacheRetrieval.retrieveSchemaByName, which looks up a type vertex given a string name -- use the `read-consistency-level` in the config.  Under certain circumstances, this could lead to Titan instances failing to see a type in a timely manner after those types are created.  For instance, a single DC setup with RF=3 could run into this:\n- Titan instance `A` makes property key `foo`; this uses QUORUM and writes to 2/3 replicas\n- Titan instance `A` shuts down, discarding its type cache\n- Titan instance `B` starts up with `storage.cassandra.read-consistency-level=ONE`, attempts to retrieve the property key for the name `foo`, and this read hits third replica which has not yet repaired using information from its two counterparts; instance `B` thinks the type is not defined\n\nFor deployments that use a low `read-consistency-level` and might be affected by this bug, and in which the schema is mostly defined prior to data loading and rarely changed thereafter, one workaround is to run `nodetool repair` across the cluster between defining Titan schema and loading data.  Deployments that use the default `read-consistency-level` (QUORUM) or higher are not affected by this issue.\n", "filteredCommitsReason": {"duplicated": 4, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 24, "UPD": 6, "TOT": 69, "DEL": 38, "INS": 11, "spoonFilesChanged": 8, "MOV": 14}, "title": "Read schema using strong-consistency backend settings (Cassandra's QUORUM)", "statsSkippedReason": "", "closed": "2014-12-23 20:24:34", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-12-19 18:03:47", "commitHash": "9977456a110929d1104138915c14d09d348ef137", "commitParents": ["e00073c07557d346acfe697165a7764f98349abb"], "commitGHEventType": "referenced", "nameRev": "9977456a110929d1104138915c14d09d348ef137 tags/0.5.3~14", "commitGitStats": [{"insertions": 3, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/types/vertices/TitanSchemaVertex.java", "deletions": 3}, {"insertions": 4, "lines": 10, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/cache/SchemaCache.java", "deletions": 6}, {"insertions": 8, "lines": 17, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/cache/StandardSchemaCache.java", "deletions": 9}, {"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 1}, {"insertions": 15, "lines": 31, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/cache/MetricInstrumentedSchemaCache.java", "deletions": 16}, {"insertions": 4, "lines": 10, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 6}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 2, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 3, "DEL": 2, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getName()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getRelated(com.thinkaurelius.titan.graphdb.types.vertices.TypeDefinitionCategory,com.tinkerpop.blueprints.Direction)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getDefinition()"}], "spoonFilePath": "TitanSchemaVertex.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.getSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.getSchemaId(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "SchemaCache.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getSchemaVertex(java.lang.String)"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 4, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.StandardSchemaCache.getSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 4, "DEL": 4, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.StandardSchemaCache.getSchemaId(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "StandardSchemaCache.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 3, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 4, "DEL": 3, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.incAction(java.lang.String,com.thinkaurelius.titan.diskstorage.util.CacheMetricsAction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 3, "DEL": 3, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.1.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.incAction(java.lang.String,com.thinkaurelius.titan.diskstorage.util.CacheMetricsAction)"}, {"UPD": 0, "TOT": 4, "DEL": 3, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.getSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 4, "DEL": 3, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.getSchemaId(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "MetricInstrumentedSchemaCache.java"}], "commitMessage": "Removing tx from SchemaCache method params\n\nNow that the SchemaCache.StoreRetrieval implementation constructs a\nnew, cache-disabled transaction for each schema read method\ninvocation, it no longer uses the tx param to its various methods.\nThis lets us remove the tx param from both\nSchemaCache.StoreRetrieval's methods and SchemaCache's methods.\n\nFor #881\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-19 16:15:40"}, {"commitUser": "dalaro", "commitDateTime": "2014-12-19 18:03:47", "commitHash": "a83e46304c13d16b9bbb94add6f7f49c73bb4627", "commitParents": ["9977456a110929d1104138915c14d09d348ef137"], "commitGHEventType": "referenced", "nameRev": "a83e46304c13d16b9bbb94add6f7f49c73bb4627 tags/0.5.3~13", "commitGitStats": [{"insertions": 3, "lines": 5, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 2}, {"insertions": 26, "lines": 26, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/util/system/TXUtils.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaByName(java.lang.String)"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.util.system.TXUtils"}], "spoonFilePath": "TXUtils.java"}], "commitMessage": "Add helper method for exception/null-safe rollback\n\nThis commit introduces a TXUtils.rollbackQuietly which is roughly\nsimilar to IOUtils.closeQuietly.  This might become obsolete in Titan\n0.9 where we can assume try-with-resources and txs are AutoCloseable.\n\nFirst used as part of #881's implementation, but not specifically\nrelated to that issue\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-19 16:18:18"}, {"commitUser": "dalaro", "commitDateTime": "2015-01-20 14:45:14", "commitHash": "2a421cfd38a4a9567e25060633f19fd30b73d042", "commitParents": ["736d71a8f5d93e0d3af1279a3edca9adcc4d0f94"], "commitGHEventType": "referenced", "nameRev": "2a421cfd38a4a9567e25060633f19fd30b73d042 tags/0.9.0-M2~297", "commitGitStats": [{"insertions": 20, "lines": 20, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTransactionBuilder.java", "deletions": 0}, {"insertions": 28, "lines": 36, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 8}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 10, "DEL": 1, "INS": 3, "MOV": 5, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.thinkaurelius.titan.graphdb.database.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 7, "DEL": 0, "INS": 3, "MOV": 4, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.customOption(java.lang.String,java.lang.Object)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder"}], "spoonFilePath": "StandardTransactionBuilder.java"}], "commitMessage": "Use consistent tx for schema retrieval\n\nExperimenting with opening a new transaction with a reference held on\nthe stack solely for the purpose of reading schema vertices and schema\nrelations.\n\nFor #881\n(cherry picked from commit bc88a4598c16486efd191c4a327ccd077c0beac2)\n\nConflicts:\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTransactionBuilder.java\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-18 17:14:32"}, {"commitUser": "dalaro", "commitDateTime": "2015-01-20 14:46:31", "commitHash": "9655018ad6f9784fe8ff880e6cfc9b105676fe40", "commitParents": ["2a421cfd38a4a9567e25060633f19fd30b73d042"], "commitGHEventType": "referenced", "nameRev": "9655018ad6f9784fe8ff880e6cfc9b105676fe40 tags/0.9.0-M2~296", "commitGitStats": [{"insertions": 3, "lines": 8, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 2, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.thinkaurelius.titan.graphdb.database.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 2, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "StandardTitanGraph.java"}], "commitMessage": "Disable cache on correct tx for schema reads\n\nde177b9e59b02cd865fb9e49aa4d1a120353ced8 modified\nStandardTitanGraph.typeCacheRetrieval's retrieveSchemaByName and\nretrieveSchemaRelations methods to each instantiate a new\nStandardTitanTx using a key-consistent backend config (i.e. Cassandra\nQUORUM) inside each retrieve method to perform schema reads.  Those\nmethods also disabled cache on a transaction just before the schema\nreads.  However, they disabled cache on the wrong tx -- when I\nintroduced a a new key-consistent tx to these methods for schema\nreads, I failed to move the disableCache invocation from the old tx to\nthe new key-consistent one.\n\nNow cache is disabled on the actual StandardTitanTx used for the\nschema schema vertex/relation read\n\nFor #881\n(cherry picked from commit e00073c07557d346acfe697165a7764f98349abb)\n\nConflicts:\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-19 15:36:09"}, {"commitUser": "dalaro", "commitDateTime": "2014-12-19 18:03:15", "commitHash": "e00073c07557d346acfe697165a7764f98349abb", "commitParents": ["bc88a4598c16486efd191c4a327ccd077c0beac2"], "commitGHEventType": "referenced", "nameRev": "e00073c07557d346acfe697165a7764f98349abb tags/0.5.3~15", "commitGitStats": [{"insertions": 3, "lines": 8, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 2, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 2, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "StandardTitanGraph.java"}], "commitMessage": "Disable cache on correct tx for schema reads\n\nde177b9e59b02cd865fb9e49aa4d1a120353ced8 modified\nStandardTitanGraph.typeCacheRetrieval's retrieveSchemaByName and\nretrieveSchemaRelations methods to each instantiate a new\nStandardTitanTx using a key-consistent backend config (i.e. Cassandra\nQUORUM) inside each retrieve method to perform schema reads.  Those\nmethods also disabled cache on a transaction just before the schema\nreads.  However, they disabled cache on the wrong tx -- when I\nintroduced a a new key-consistent tx to these methods for schema\nreads, I failed to move the disableCache invocation from the old tx to\nthe new key-consistent one.\n\nNow cache is disabled on the actual StandardTitanTx used for the\nschema schema vertex/relation read\n\nFor #881\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-19 15:36:09"}, {"commitUser": "dalaro", "commitDateTime": "2015-01-20 15:12:14", "commitHash": "7d6a0ccac21b21a423b708c1ffa976898c51f906", "commitParents": ["9655018ad6f9784fe8ff880e6cfc9b105676fe40"], "commitGHEventType": "referenced", "nameRev": "7d6a0ccac21b21a423b708c1ffa976898c51f906 tags/0.9.0-M2~295", "commitGitStats": [{"insertions": 3, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/types/vertices/TitanSchemaVertex.java", "deletions": 3}, {"insertions": 4, "lines": 10, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/cache/SchemaCache.java", "deletions": 6}, {"insertions": 8, "lines": 17, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/cache/StandardSchemaCache.java", "deletions": 9}, {"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 1}, {"insertions": 15, "lines": 31, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/cache/MetricInstrumentedSchemaCache.java", "deletions": 16}, {"insertions": 5, "lines": 12, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 7}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 2, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.thinkaurelius.titan.graphdb.database.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 1, "TOT": 4, "DEL": 2, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.name()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getRelated(com.thinkaurelius.titan.graphdb.types.vertices.TypeDefinitionCategory,com.tinkerpop.gremlin.structure.Direction)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.types.vertices.TitanSchemaVertex.getDefinition()"}], "spoonFilePath": "TitanSchemaVertex.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.gremlin.structure.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.getSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.gremlin.structure.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.getSchemaId(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "SchemaCache.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getSchemaVertex(java.lang.String)"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 4, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.StandardSchemaCache.getSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.gremlin.structure.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 4, "DEL": 4, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.StandardSchemaCache.getSchemaId(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "StandardSchemaCache.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 3, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.incAction(java.lang.String,com.thinkaurelius.titan.diskstorage.util.CacheMetricsAction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 4, "DEL": 3, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.getSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.gremlin.structure.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 3, "DEL": 3, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.1.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.incAction(java.lang.String,com.thinkaurelius.titan.diskstorage.util.CacheMetricsAction)"}, {"UPD": 0, "TOT": 3, "DEL": 3, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.gremlin.structure.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 0, "TOT": 4, "DEL": 3, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.cache.MetricInstrumentedSchemaCache.getSchemaId(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "MetricInstrumentedSchemaCache.java"}], "commitMessage": "Removing tx from SchemaCache method params\n\nNow that the SchemaCache.StoreRetrieval implementation constructs a\nnew, cache-disabled transaction for each schema read method\ninvocation, it no longer uses the tx param to its various methods.\nThis lets us remove the tx param from both\nSchemaCache.StoreRetrieval's methods and SchemaCache's methods.\n\nFor #881\n(cherry picked from commit 9977456a110929d1104138915c14d09d348ef137)\n\nConflicts:\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/cache/SchemaCache.java\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/cache/StandardSchemaCache.java\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/types/vertices/TitanSchemaVertex.java\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-19 16:15:40"}, {"commitUser": "dalaro", "commitDateTime": "2014-12-19 18:02:25", "commitHash": "bc88a4598c16486efd191c4a327ccd077c0beac2", "commitParents": ["24f93bbdfff7b20a0e11bfd747813ba1a48111cb"], "commitGHEventType": "referenced", "nameRev": "bc88a4598c16486efd191c4a327ccd077c0beac2 tags/0.5.3~16", "commitGitStats": [{"insertions": 21, "lines": 21, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTransactionBuilder.java", "deletions": 0}, {"insertions": 28, "lines": 36, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 8}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 10, "DEL": 1, "INS": 3, "MOV": 5, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.tinkerpop.blueprints.Direction,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}, {"UPD": 1, "TOT": 10, "DEL": 1, "INS": 3, "MOV": 5, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaByName(java.lang.String,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.setCustomOption(java.lang.String,java.lang.Object)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder"}], "spoonFilePath": "StandardTransactionBuilder.java"}], "commitMessage": "Use consistent tx for schema retrieval\n\nExperimenting with opening a new transaction with a reference held on\nthe stack solely for the purpose of reading schema vertices and schema\nrelations.\n\nFor #881\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-18 17:14:32"}, {"commitUser": "dalaro", "commitDateTime": "2015-01-20 15:14:22", "commitHash": "3247d28161a1c089cb463c208ae21c5129eee1af", "commitParents": ["7d6a0ccac21b21a423b708c1ffa976898c51f906"], "commitGHEventType": "referenced", "nameRev": "3247d28161a1c089cb463c208ae21c5129eee1af tags/0.9.0-M2~294", "commitGitStats": [{"insertions": 3, "lines": 9, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 6}, {"insertions": 26, "lines": 26, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/util/system/TXUtils.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaByName(java.lang.String)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.1.retrieveSchemaRelations(long,com.thinkaurelius.titan.graphdb.types.system.BaseRelationType,com.thinkaurelius.titan.graphdb.database.Direction)"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.util.system.TXUtils"}], "spoonFilePath": "TXUtils.java"}], "commitMessage": "Add helper method for exception/null-safe rollback\n\nThis commit introduces a TXUtils.rollbackQuietly which is roughly\nsimilar to IOUtils.closeQuietly.  This might become obsolete in Titan\n0.9 where we can assume try-with-resources and txs are AutoCloseable.\n\nFirst used as part of #881's implementation, but not specifically\nrelated to that issue\n(cherry picked from commit a83e46304c13d16b9bbb94add6f7f49c73bb4627)\n\nConflicts:\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-19 16:18:18"}], "created": "2014-12-11 06:24:16"}, {"labels": ["bug"], "filteredCommits": ["9d1bdc1fc9d6bd8ae48cf806fea82c69c697fb12", "1f6f9503c5a6120da4cba0dea8fbab6fb27624be", "8e76984347ad0cc94af1cde0ecb9b018e79d526c"], "url": "https://github.com/thinkaurelius/titan/issues/877", "gitStatsSummary": {"insertions": 389, "gitFilesChange": 12, "lines": 510, "deletions": 121}, "numCommits": 3, "commits": {"8e76984347ad0cc94af1cde0ecb9b018e79d526c": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "9d1bdc1fc9d6bd8ae48cf806fea82c69c697fb12": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "1f6f9503c5a6120da4cba0dea8fbab6fb27624be": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 8.000277777777777, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.1.apply(com.esotericsoftware.kryo.Kryo)", "com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.getSerializer(com.thinkaurelius.titan.graphdb.configuration.Configuration)", "com.thinkaurelius.titan.diskstorage.Backend.getGlobalConfiguration(com.thinkaurelius.titan.diskstorage.util.BackendOperation$TransactionalProvider,com.thinkaurelius.titan.diskstorage.KeyColumnValueStore,com.thinkaurelius.titan.diskstorage.Configuration)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.closeInternal()", "com.thinkaurelius.titan.graphdb.database.serialize.StandardSerializer", "com.thinkaurelius.titan.diskstorage.configuration.backend.KCVSConfiguration", "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer", "com.thinkaurelius.titan.diskstorage.cassandra.thrift.thriftpool.CTConnectionFactory.Config.getRandomHost()", "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.getKryo()", "com.thinkaurelius.titan.diskstorage.log.kcvs.KCVSLogManager", "com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration", "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.close()", "com.thinkaurelius.titan.diskstorage.cassandra.thrift.thriftpool.CTConnectionFactory.Config", "com.thinkaurelius.titan.graphdb.database.serialize.kryo", "com.thinkaurelius.titan.graphdb.database.serialize.kryo.CHMKryos", "com.thinkaurelius.titan.diskstorage.log.kcvs.KCVSLogManager.close()", "com.thinkaurelius.titan.graphdb.database.serialize.StandardSerializer.close()", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.shutdownInternal()", "com.thinkaurelius.titan.diskstorage.configuration.backend.KCVSConfiguration.close()", "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.1.initialValue()"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration", "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/backend", "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/log/kcvs", "titan-cassandra/src/main/java/com/thinkaurelius/titan/diskstorage/cassandra/thrift", "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop", "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize"], "body": "https://groups.google.com/d/msg/aureliusgraphs/2wXtxczww6Q/AmEJNXeNfE8J\n\nThe Kryo instance stored in a ThreadLocal should probably be removed during graph shutdown to prevent unintended reference retention.  Servlet containers in particular may reuse threads after Titan's done with them, and Tomcat appears extra clever about this, checking and warning when it finds ThreadLocals after a webapp shuts down, but I think the reference retention issue is more general.\n\nShould also check for similar ThreadLocal patterns elsewhere in the codebase.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 20, "UPD": 29, "TOT": 155, "DEL": 18, "INS": 39, "spoonFilesChanged": 10, "MOV": 69}, "title": "Remove ThreadLocals when no longer needed", "statsSkippedReason": "", "closed": "2014-12-18 18:40:11", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-12-17 09:24:38", "commitHash": "1f6f9503c5a6120da4cba0dea8fbab6fb27624be", "commitParents": ["8d4cb4cc194b16fff5b24081048cadd6166e2d14"], "commitGHEventType": "referenced", "nameRev": "1f6f9503c5a6120da4cba0dea8fbab6fb27624be tags/0.5.3~27", "commitGitStats": [{"insertions": 8, "lines": 10, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/backend/KCVSConfiguration.java", "deletions": 2}, {"insertions": 19, "lines": 19, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/kryo/KryoInstanceCache.java", "deletions": 0}, {"insertions": 117, "lines": 117, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/kryo/KryoInstanceCacheImpl.java", "deletions": 0}, {"insertions": 3, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/log/kcvs/KCVSLogManager.java", "deletions": 3}, {"insertions": 36, "lines": 90, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/kryo/KryoSerializer.java", "deletions": 54}, {"insertions": 21, "lines": 24, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java", "deletions": 3}, {"insertions": 12, "lines": 14, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/StandardSerializer.java", "deletions": 2}, {"insertions": 3, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/Backend.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 10, "DEL": 1, "INS": 5, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.StandardSerializer"}], "spoonFilePath": "StandardSerializer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.CHMKryos"}], "spoonFilePath": "KryoInstanceCacheImpl.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 18, "DEL": 3, "INS": 4, "MOV": 8, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.close()"}, {"UPD": 3, "TOT": 21, "DEL": 4, "INS": 2, "MOV": 12, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.getKryo()"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.1.apply(com.esotericsoftware.kryo.Kryo)"}], "spoonFilePath": "KryoSerializer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.getSerializer(com.thinkaurelius.titan.graphdb.configuration.Configuration)"}, {"UPD": 1, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration"}], "spoonFilePath": "GraphDatabaseConfiguration.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getGlobalConfiguration(com.thinkaurelius.titan.diskstorage.util.BackendOperation$TransactionalProvider,com.thinkaurelius.titan.diskstorage.KeyColumnValueStore,com.thinkaurelius.titan.diskstorage.Configuration)"}], "spoonFilePath": "Backend.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.configuration.backend.KCVSConfiguration"}], "spoonFilePath": "KCVSConfiguration.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.kcvs.KCVSLogManager"}], "spoonFilePath": "KCVSLogManager.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo"}], "spoonFilePath": "KryoInstanceCache.java"}], "commitMessage": "Support ThreadLocal and CHM for Kryo caching\n\nThis commit adds the `graph.kryo-instance-cache` option.  It takes\neither the value THREAD_LOCAL (default) or CONCURRENT_HASH_MAP.  This\ncommit effectively restores the old Kryo caching behavior of\nKryoSerializer, where it stored Kryos in a ThreadLocal, and where\nthose ThreadLocals are not necessarily removed when Titan shuts down.\nThe CHM setting provides an alternative that, unlike ThreadLocal, is\nexposed to synchronization overhead when retrieving cached Kryos, but\nwhich also releases all of its cached Kryo references when the graph\nis shutdown.\n\nFor #840\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-17 09:24:38"}, {"commitUser": "dalaro", "commitDateTime": "2014-12-16 06:46:26", "commitHash": "9d1bdc1fc9d6bd8ae48cf806fea82c69c697fb12", "commitParents": ["f25f02e9816e8130717f63f5d8194061a9c4c408"], "commitGHEventType": "referenced", "nameRev": "9d1bdc1fc9d6bd8ae48cf806fea82c69c697fb12 tags/0.5.3~34", "commitGitStats": [{"insertions": 3, "lines": 11, "filePath": "titan-cassandra/src/main/java/com/thinkaurelius/titan/diskstorage/cassandra/thrift/thriftpool/CTConnectionFactory.java", "deletions": 8}, {"insertions": 2, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/backend/KCVSConfiguration.java", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/FaunusSerializer.java", "deletions": 0}, {"insertions": 3, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/Serializer.java", "deletions": 1}, {"insertions": 4, "lines": 5, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/log/kcvs/KCVSLogManager.java", "deletions": 1}, {"insertions": 61, "lines": 78, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/kryo/KryoSerializer.java", "deletions": 17}, {"insertions": 2, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 0}, {"insertions": 9, "lines": 10, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/StandardSerializer.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.StandardSerializer.close()"}], "spoonFilePath": "StandardSerializer.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.kcvs.KCVSLogManager"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.kcvs.KCVSLogManager.close()"}], "spoonFilePath": "KCVSLogManager.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 15, "DEL": 1, "INS": 2, "MOV": 10, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer"}, {"UPD": 2, "TOT": 6, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.getKryo()"}, {"UPD": 1, "TOT": 12, "DEL": 2, "INS": 0, "MOV": 9, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.1.initialValue()"}], "spoonFilePath": "KryoSerializer.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 5, "DEL": 1, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.cassandra.thrift.thriftpool.CTConnectionFactory.Config"}, {"UPD": 1, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.cassandra.thrift.thriftpool.CTConnectionFactory.Config.getRandomHost()"}], "spoonFilePath": "CTConnectionFactory.java"}, {"spoonMethods": [], "spoonFilePath": "FaunusSerializer.java"}, {"spoonMethods": [], "spoonFilePath": "Serializer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.shutdownInternal()"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.configuration.backend.KCVSConfiguration.close()"}], "spoonFilePath": "KCVSConfiguration.java"}], "commitMessage": "ThreadLocal cleanup\n\nThis commit removes ThreadLocal usage from KryoSerializer and\nCTConnectionFactory.  The KryoSerializer ThreadLocal caused problems\nwith Tomcat (#877).  CTConnectionFactory's ThreadLocal seems to\nproduce a unmeasurably-small performance gain, if it produces one at\nall, so I replaced it with an ordinary private final field.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-16 06:46:26"}, {"commitUser": "dalaro", "commitDateTime": "2014-12-16 07:31:17", "commitHash": "8e76984347ad0cc94af1cde0ecb9b018e79d526c", "commitParents": ["ee1d562528178614735f8e5526856dc1e407c97e"], "commitGHEventType": "referenced", "nameRev": "8e76984347ad0cc94af1cde0ecb9b018e79d526c tags/0.9.0-M2~319", "commitGitStats": [{"insertions": 3, "lines": 11, "filePath": "titan-cassandra/src/main/java/com/thinkaurelius/titan/diskstorage/cassandra/thrift/thriftpool/CTConnectionFactory.java", "deletions": 8}, {"insertions": 2, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/backend/KCVSConfiguration.java", "deletions": 0}, {"insertions": 3, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/Serializer.java", "deletions": 1}, {"insertions": 4, "lines": 5, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/log/kcvs/KCVSLogManager.java", "deletions": 1}, {"insertions": 61, "lines": 78, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/kryo/KryoSerializer.java", "deletions": 17}, {"insertions": 2, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 0}, {"insertions": 9, "lines": 10, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/StandardSerializer.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.StandardSerializer.close()"}], "spoonFilePath": "StandardSerializer.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.kcvs.KCVSLogManager"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.kcvs.KCVSLogManager.close()"}], "spoonFilePath": "KCVSLogManager.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 15, "DEL": 1, "INS": 2, "MOV": 10, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer"}, {"UPD": 2, "TOT": 6, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.getKryo()"}, {"UPD": 1, "TOT": 12, "DEL": 2, "INS": 0, "MOV": 9, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.1.initialValue()"}], "spoonFilePath": "KryoSerializer.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 5, "DEL": 1, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.cassandra.thrift.thriftpool.CTConnectionFactory.Config"}, {"UPD": 1, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.cassandra.thrift.thriftpool.CTConnectionFactory.Config.getRandomHost()"}], "spoonFilePath": "CTConnectionFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.closeInternal()"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [], "spoonFilePath": "Serializer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.configuration.backend.KCVSConfiguration.close()"}], "spoonFilePath": "KCVSConfiguration.java"}], "commitMessage": "ThreadLocal cleanup (titan05->09 cherry-pick)\n\nThis commit removes ThreadLocal usage from KryoSerializer and\nCTConnectionFactory.  The KryoSerializer ThreadLocal caused problems\nwith Tomcat (#877).  CTConnectionFactory's ThreadLocal seems to\nproduce a unmeasurably-small performance gain, if it produces one at\nall, so I replaced it with an ordinary private final field.\n(cherry picked from commit 9d1bdc1fc9d6bd8ae48cf806fea82c69c697fb12)\n\nConflicts:\n\ttitan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/backend/KCVSConfiguration.java\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java\n\ttitan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/FaunusSerializer.java\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-16 06:46:26"}], "created": "2014-12-10 10:51:51"}, {"labels": ["bug", "documentation"], "url": "https://github.com/thinkaurelius/titan/issues/872", "title": "Documentation bugs.", "closed": "2015-04-29 14:28:34", "commitsDetails": [], "commits": {}, "ttf": 144.00027777777777, "created": "2014-12-05 14:50:32", "user": "okram", "body": "http://s3.thinkaurelius.com/docs/titan/0.9.0-M1/arch-overview.html\nhttp://s3.thinkaurelius.com/docs/titan/0.9.0-M1/getting-started.html (Gremlin2)\nhttp://s3.thinkaurelius.com/docs/titan/0.9.0-M1/gremlin.html (Gremlin2)\n\n...there is alot more Gremlin than just the titanbasics.txt. It would be good for Titan guys to go through each line one by one and make sure its all right -- with appropriate links to TP3 docs.\n"}, {"labels": ["bug"], "filteredCommits": ["dc361be619d77356c905a95a1f664dfa105d1576"], "url": "https://github.com/thinkaurelius/titan/issues/844", "gitStatsSummary": {"insertions": 4, "gitFilesChange": 1, "lines": 7, "deletions": 3}, "numCommits": 1, "commits": {"dc361be619d77356c905a95a1f664dfa105d1576": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "6205f7fa29b9faacd785285112c972b59deda13d": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "philmes", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.Backend"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/diskstorage"], "body": "Attempting to test out #807 using a snapshot build of Titan 0.5.2 (commit SHA 34002ea0af81bd8723d390a694ac763e0cda9c53) results in the following exception when running a simple Hadoop job from the gremlin console:\n\n``` java.lang.NullPointerException\n    at com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader.close(TitanCassandraRecordReader.java:75)\n    at org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.close(MapTask.java:500)\n    at org.apache.hadoop.mapred.MapTask.closeQuietly(MapTask.java:1975)\n    at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:773)\n    at org.apache.hadoop.mapred.MapTask.run(MapTask.java:340)\n    at org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:167)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at javax.security.auth.Subject.doAs(Subject.java:415)\n    at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1554)\n    at org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:162)\n2014-11-24 11:08:12,318 WARN [main] org.apache.hadoop.mapred.YarnChild: Exception running child : java.lang.IllegalArgumentException: Could not instantiate implementation: com.thinkaurelius.titan.hadoop.formats.util.input.current.TitanHadoopSetupImpl\n    at com.thinkaurelius.titan.util.system.ConfigurationUtil.instantiate(ConfigurationUtil.java:55)\n    at com.thinkaurelius.titan.hadoop.formats.util.TitanInputFormat.getGraphSetup(TitanInputFormat.java:49)\n    at com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader.initialize(TitanCassandraRecordReader.java:44)\n    at org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.initialize(MapTask.java:525)\n    at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:763)\n    at org.apache.hadoop.mapred.MapTask.run(MapTask.java:340)\n    at org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:167)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at javax.security.auth.Subject.doAs(Subject.java:415)\n    at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1554)\n    at org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:162)\nCaused by: java.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n    at com.thinkaurelius.titan.util.system.ConfigurationUtil.instantiate(ConfigurationUtil.java:44)\n    ... 10 more\nCaused by: java.lang.NoSuchMethodError: com.google.common.collect.Maps.immutableEnumMap(Ljava/util/Map;)Lcom/google/common/collect/ImmutableMap;\n    at com.thinkaurelius.titan.diskstorage.Backend.<clinit>(Backend.java:552)\n    at com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.<init>(GraphDatabaseConfiguration.java:1258)\n    at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:91)\n    at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:81)\n    at com.thinkaurelius.titan.hadoop.formats.util.input.current.TitanHadoopSetupImpl.<init>(TitanHadoopSetupImpl.java:39)\n    ... 15 more\n```\n\nThis is evidently a Guava compatibility issue, but Interesting this only explodes when I run it against a remote Hadoop cluster. Running locally works.\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 4, "TOT": 4, "DEL": 0, "INS": 0, "spoonFilesChanged": 1, "MOV": 0}, "title": "Titan 0.5.2 snapshot doesn't work on Hadoop 2", "statsSkippedReason": "", "closed": "2014-11-24 13:27:14", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-25 01:12:01", "commitHash": "dc361be619d77356c905a95a1f664dfa105d1576", "commitParents": ["8c4cb727599bf9ee2811020ce6714c3f8dece52d"], "commitGHEventType": "referenced", "nameRev": "dc361be619d77356c905a95a1f664dfa105d1576 tags/0.9.0-M1~36", "commitGitStats": [{"insertions": 4, "lines": 7, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/Backend.java", "deletions": 3}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 4, "TOT": 4, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend"}], "spoonFilePath": "Backend.java"}], "commitMessage": "Remove Maps.immutableEnumMap call\n\nFor #844.  Guava 11 doesn't have this method, so it throws\nNoSuchMethodError on Hadoop clusters.  Changed to\nImmutableMaps.copyOf.\n(cherry picked from commit 6205f7fa29b9faacd785285112c972b59deda13d)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-24 08:23:03"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 08:23:03", "commitHash": "6205f7fa29b9faacd785285112c972b59deda13d", "commitParents": ["34002ea0af81bd8723d390a694ac763e0cda9c53"], "commitGHEventType": "referenced", "nameRev": "6205f7fa29b9faacd785285112c972b59deda13d tags/0.5.2~9", "commitGitStats": [{"insertions": 4, "lines": 7, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/Backend.java", "deletions": 3}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 4, "TOT": 4, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend"}], "spoonFilePath": "Backend.java"}], "commitMessage": "Remove Maps.immutableEnumMap call\n\nFor #844.  Guava 11 doesn't have this method, so it throws\nNoSuchMethodError on Hadoop clusters.  Changed to\nImmutableMaps.copyOf.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-24 08:23:03"}], "created": "2014-11-24 11:14:27"}, {"labels": ["bug"], "filteredCommits": ["62d459107f26085f1a1dbeadf4204be63af8fe03", "949b837948c1a0547911cb5dc9534c4973c65112"], "url": "https://github.com/thinkaurelius/titan/issues/835", "gitStatsSummary": {"insertions": 72, "gitFilesChange": 26, "lines": 127, "deletions": 55}, "numCommits": 1, "commits": {"949b837948c1a0547911cb5dc9534c4973c65112": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "62d459107f26085f1a1dbeadf4204be63af8fe03": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "dalaro", "changesInPackagesSPOON": [], "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce", "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats"], "body": "Thanks to @spmallette for reporting this.  Found under 0.5.1-hadoop1.  Probably a Hadoop 2 type leaking into core, but not certain yet.\n\n```\ngremlin> g = HadoopFactory.open(\"conf/hadoop/rdf-input.properties\")\n==>titangraph[hadoop:rdfinputformat->sequencefileoutputformat]\ngremlin> g._()\n12:53:48 WARN org.apache.hadoop.mapred.JobClient - Use GenericOptionsParser for parsing the arguments. Applications should implement Tool for the same.\n12:53:48 INFO org.apache.hadoop.mapreduce.lib.input.FileInputFormat - Total input paths to process : 1\n12:53:48 INFO org.apache.hadoop.mapred.JobClient - Cleaning up the staging area hdfs://lo\ncalhost:9000/tmp/hadoop-smallette/mapred/staging/smallette/.staging/job_201411171246_0001\nFound class org.apache.hadoop.mapreduce.JobContext, but interface was expected\nDisplay stack trace? [yN] y\njava.lang.IncompatibleClassChangeError: Found class org.apache.hadoop.mapreduce.JobContext, but interface was expected\n    at com.thinkaurelius.titan.hadoop.formats.edgelist.rdf.RDFInputFormat.isSplitable(RDFInputFormat.java:37)\n    at org.apache.hadoop.mapreduce.lib.input.FileInputFormat.getSplits(FileInputFormat.java:258)\n    at org.apache.hadoop.mapred.JobClient.writeNewSplits(JobClient.java:1054)\n    at org.apache.hadoop.mapred.JobClient.writeSplits(JobClient.java:1071)\n    at org.apache.hadoop.mapred.JobClient.access$700(JobClient.java:179)\n    at org.apache.hadoop.mapred.JobClient$2.run(JobClient.java:983)\n    at org.apache.hadoop.mapred.JobClient$2.run(JobClient.java:936)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at javax.security.auth.Subject.doAs(Subject.java:422)\n    at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1190)\n    at org.apache.hadoop.mapred.JobClient.submitJobInternal(JobClient.java:936)\n    at org.apache.hadoop.mapreduce.Job.submit(Job.java:550)\n    at org.apache.hadoop.mapreduce.Job.waitForCompletion(Job.java:580)\n    at com.thinkaurelius.titan.hadoop.compat.h1.Hadoop1Compiler.run(Hadoop1Compiler.java:315)\n    at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:65)\n    at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:79)\n    at com.thinkaurelius.titan.hadoop.HadoopPipeline.submit(HadoopPipeline.java:1092)\n    at com.thinkaurelius.titan.hadoop.HadoopPipeline.submit(HadoopPipeline.java:1075)\n    at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.call(ResultHookClosure.java:39)\n    at groovy.lang.Closure.call(Closure.java:428)\n    at sun.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:231)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:64)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)\n    at org.codehaus.groovy.tools.shell.Groovysh.setLastResult(Groovysh.groovy:324)\n    at org.codehaus.groovy.tools.shell.Groovysh.this$3$setLastResult(Groovysh.groovy)\n    at sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.setProperty(MetaClassImpl.java:2416)\n    at groovy.lang.MetaClassImpl.setProperty(MetaClassImpl.java:3347)\n    at org.codehaus.groovy.tools.shell.Shell.setProperty(Shell.groovy)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.setGroovyObjectProperty(ScriptBytecodeAdapter.java:528)\n    at org.codehaus.groovy.tools.shell.Groovysh.execute(Groovysh.groovy:152)\n    at org.codehaus.groovy.tools.shell.Shell.leftShift(Shell.groovy:114)\n    at org.codehaus.groovy.tools.shell.Shell$leftShift$0.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.ShellRunner.work(ShellRunner.groovy:88)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$work(InteractiveShellRunner.groovy)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.work(InteractiveShellRunner.groovy:100)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:272)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:52)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:137)\n    at org.codehaus.groovy.tools.shell.ShellRunner.run(ShellRunner.groovy:57)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$run(InteractiveShellRunner.groovy)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.run(InteractiveShellRunner.groovy:66)\n    at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.<init>(Console.java:61)\n    at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.<init>(Console.java:70)\n    at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.main(Console.java:75)\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0.0, "TOT": 0.0, "DEL": 0.0, "INS": 0.0, "spoonFilesChanged": 0, "MOV": 0.0}, "title": "RDFInputFormat Hadoop compat leak", "statsSkippedReason": "", "closed": "2014-11-18 06:47:55", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-17 23:33:10", "commitHash": "949b837948c1a0547911cb5dc9534c4973c65112", "commitParents": ["aa1057d5feefd3f2012588dd10668c4953dbaf69"], "commitGHEventType": "referenced", "nameRev": "949b837948c1a0547911cb5dc9534c4973c65112 tags/0.5.2~18^2~27", "commitGitStats": [{"insertions": 0, "lines": 1, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/test/java/com/thinkaurelius/titan/hadoop/formats/edgelist/rdf/RDFInputFormatTest.java", "deletions": 1}, {"insertions": 19, "lines": 19, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/test/java/com/thinkaurelius/titan/hadoop/HadoopPipelineTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [], "spoonFilePath": "RDFInputFormatTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.HadoopPipelineTest.testRDFToGraphSON()"}], "spoonFilePath": "HadoopPipelineTest.java"}], "commitMessage": "Adding test for #835\n\nThis fails under Hadoop 1 (but not 2) due to the bug reported in #835.\nFix up next.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-17 23:30:56"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-17 23:33:36", "commitHash": "62d459107f26085f1a1dbeadf4204be63af8fe03", "commitParents": ["949b837948c1a0547911cb5dc9534c4973c65112"], "commitGHEventType": "referenced", "nameRev": "62d459107f26085f1a1dbeadf4204be63af8fe03 tags/0.5.2~18^2~26", "commitGitStats": [{"insertions": 2, "lines": 4, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/util/TitanGraphOutputMapReduce.java", "deletions": 2}, {"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/transform/EdgesVerticesMap.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/transform/VerticesMap.java", "deletions": 1}, {"insertions": 3, "lines": 6, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/edgelist/EdgeListInputMapReduce.java", "deletions": 3}, {"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/transform/EdgesMap.java", "deletions": 1}, {"insertions": 3, "lines": 5, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/transform/PathMap.java", "deletions": 2}, {"insertions": 4, "lines": 7, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/transform/PropertyMap.java", "deletions": 3}, {"insertions": 3, "lines": 4, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/util/SafeMapperOutputs.java", "deletions": 1}, {"insertions": 5, "lines": 9, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/transform/OrderMapReduce.java", "deletions": 4}, {"insertions": 3, "lines": 6, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/sideeffect/GroupCountMapReduce.java", "deletions": 3}, {"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/transform/VertexMap.java", "deletions": 1}, {"insertions": 6, "lines": 11, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/filter/PropertyFilterMap.java", "deletions": 5}, {"insertions": 3, "lines": 4, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/util/SafeReducerOutputs.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/sideeffect/LinkMapReduce.java", "deletions": 1}, {"insertions": 2, "lines": 3, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/util/CountMapReduce.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/edgelist/rdf/RDFInputFormat.java", "deletions": 1}, {"insertions": 3, "lines": 5, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/sideeffect/SideEffectMap.java", "deletions": 2}, {"insertions": 5, "lines": 9, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/sideeffect/ValueGroupCountMapReduce.java", "deletions": 4}, {"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/filter/CyclicPathFilterMap.java", "deletions": 1}, {"insertions": 3, "lines": 5, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/transform/TransformMap.java", "deletions": 2}, {"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/sideeffect/CommitVerticesMapReduce.java", "deletions": 1}, {"insertions": 2, "lines": 4, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/filter/FilterMap.java", "deletions": 2}, {"insertions": 6, "lines": 9, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/sideeffect/ScriptMap.java", "deletions": 3}, {"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/sideeffect/CommitEdgesMap.java", "deletions": 1}, {"insertions": 2, "lines": 3, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/transform/PropertyMapMap.java", "deletions": 1}, {"insertions": 8, "lines": 15, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/mapreduce/filter/IntervalFilterMap.java", "deletions": 7}], "commitSpoonAstDiffStats": [], "commitMessage": "Put context.getConfiguration calls behind compat\n\nConverting calls to getConfiguration() on Hadoop Context instances to\nDEFAULT_COMPAT.getContextConfiguration(<instance>).  Fixes #835.\n", "spoonStatsSkippedReason": "tooManyFiles", "authoredDateTime": "2014-11-17 23:33:36"}], "created": "2014-11-18 01:32:38"}, {"labels": ["bug"], "filteredCommits": ["8b0a078edf50ba93c88c6be6ab3220abaf49ea59", "c546e13325756f7ed68b3d4f72ced4e097fee7ff", "c1580c5c6d2c2ffd0ae1427d65aab10251e1a544"], "url": "https://github.com/thinkaurelius/titan/issues/831", "gitStatsSummary": {"insertions": 170, "gitFilesChange": 5, "lines": 219, "deletions": 49}, "numCommits": 2, "commits": {"8b0a078edf50ba93c88c6be6ab3220abaf49ea59": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "c546e13325756f7ed68b3d4f72ced4e097fee7ff": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "7eb355ec7e2e27514c2d9ce09fa73e960784208e": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "63f50c66dd4ec7a3e6882886f4aee674552564e4": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "c1580c5c6d2c2ffd0ae1427d65aab10251e1a544": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "a2149cec1d2d9b52b1bad596ef8cb1accdd2f3db": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 3.000277777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.StandardIndexProvider", "com.thinkaurelius.titan.diskstorage.Backend.getIndexFeatures().11", "com.thinkaurelius.titan.diskstorage.Backend", "com.thinkaurelius.titan.diskstorage.Backend.getRegisteredStoreManagers()", "com.thinkaurelius.titan.diskstorage.StandardStoreManager", "com.thinkaurelius.titan.diskstorage.Backend.2", "com.thinkaurelius.titan.diskstorage.Backend.3", "com.thinkaurelius.titan.diskstorage.StandardStoreManager.getAllManagerClasses()", "com.thinkaurelius.titan.diskstorage.Backend.getStandaloneGlobalConfiguration(com.thinkaurelius.titan.diskstorage.KeyColumnValueStoreManager,com.thinkaurelius.titan.diskstorage.Configuration).10", "com.thinkaurelius.titan.diskstorage.Backend.5", "com.thinkaurelius.titan.diskstorage.Backend.4", "com.thinkaurelius.titan.diskstorage.Backend.getStorageManager(com.thinkaurelius.titan.diskstorage.Configuration)", "com.thinkaurelius.titan.diskstorage.Backend.getIndexFeatures()", "com.thinkaurelius.titan.diskstorage.Backend.6", "com.thinkaurelius.titan.diskstorage.Backend.7", "com.thinkaurelius.titan.diskstorage.Backend.getIndexes(com.thinkaurelius.titan.diskstorage.Configuration)", "com.thinkaurelius.titan.core.TitanFactory.getLocalConfiguration(java.lang.String)", "com.thinkaurelius.titan.diskstorage.Backend.initialize(com.thinkaurelius.titan.diskstorage.Configuration).9", "com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration", "com.thinkaurelius.titan.diskstorage.Backend.initialize(com.thinkaurelius.titan.diskstorage.Configuration).8", "com.thinkaurelius.titan.diskstorage.StandardStoreManager.getAllShorthands()", "com.thinkaurelius.titan.diskstorage.Backend.getStoreShorthandOptions()"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration", "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage", "titan-core/src/main/java/com/thinkaurelius/titan/core"], "body": "If a JVM's first `TitanFactory.open` call passes a nonexistent configuration file, then TitanFactory gets into the else block on lines 169-190 where it tries to decode a backend shorthand.  This leads to a circular reference between static initializers triggered on line 173 which eventually generates an ExceptionInInitializerError:\n\n```\ngremlin> g = TitanFactory.open('nonexistent/file')\njava.lang.ExceptionInInitializerError\nDisplay stack trace? [yN] y\njava.lang.ExceptionInInitializerError\n        at com.thinkaurelius.titan.diskstorage.Backend$5.<init>(Backend.java:559)\n        at com.thinkaurelius.titan.diskstorage.Backend.<clinit>(Backend.java:558)\n        at com.thinkaurelius.titan.core.TitanFactory.getLocalConfiguration(TitanFactory.java:173)\n        at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:60)\n        at com.thinkaurelius.titan.core.TitanFactory$open.call(Unknown Source)\n        at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n        (rest of the Groovy REPL stack frames omitted...)\nCaused by: java.lang.NullPointerException\n        at com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.<clinit>(GraphDatabaseConfiguration.java:766)\n        ... 56 more\n```\n\nWorkaround: pass an extant properties file to `TitanFactory.open` on the initial invocation of that method after VM startup.  This triggers static initializers in a safe order.  Subsequent invocations can use either a file or shorthand argument.\n\nSlated fix: add a failing test that exercises the shorthand-parsing logic path in `TitanFactory.open` right after VM start, then break static initializer circularity that led to this exception, which should fix the test.\n", "filteredCommitsReason": {"duplicated": 3, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 22, "UPD": 31, "TOT": 77, "DEL": 17, "INS": 15, "spoonFilesChanged": 5, "MOV": 14}, "title": "Invoking TitanFactory.open with nonexistent file argument throws exception", "statsSkippedReason": "", "closed": "2014-11-18 18:00:43", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-19 08:44:12", "commitHash": "8b0a078edf50ba93c88c6be6ab3220abaf49ea59", "commitParents": ["b1635dcaf0754dcbf1d8dac84e4795b5c6f235ea"], "commitGHEventType": "referenced", "nameRev": "8b0a078edf50ba93c88c6be6ab3220abaf49ea59 tags/0.5.2~18^2~6", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/core/TitanFactory.java", "deletions": 1}, {"insertions": 2, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/StandardStoreManager.java", "deletions": 2}, {"insertions": 12, "lines": 14, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/Backend.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardStoreManager.getAllShorthands()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardStoreManager.getAllManagerClasses()"}], "spoonFilePath": "StandardStoreManager.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 0, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.core.TitanFactory.getLocalConfiguration(java.lang.String)"}], "spoonFilePath": "TitanFactory.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getStoreShorthandOptions()"}], "spoonFilePath": "Backend.java"}], "commitMessage": "Fix bug in shorthand argument interpretation\n\na2149cec1d2d9b52b1bad596ef8cb1accdd2f3db broke a static initializer\ncycle triggered by TitanFactory.open('backend:arg') shorthand\ninvocation, but it also added a bug that broke interpretation the\n'arg' part of the shorthand.  This is related to #831.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-19 08:44:12"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 11:00:50", "commitHash": "c546e13325756f7ed68b3d4f72ced4e097fee7ff", "commitParents": ["5dd656e050cf1f31580a4425e51b3da272d9bfcb"], "commitGHEventType": "referenced", "nameRev": "c546e13325756f7ed68b3d4f72ced4e097fee7ff tags/0.5.2~18^2~19", "commitGitStats": [{"insertions": 21, "lines": 21, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/TitanFactoryShorthandTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanFactoryShorthandTest"}], "spoonFilePath": "TitanFactoryShorthandTest.java"}], "commitMessage": "Failing test executing a static initializer cycle\n\nThis test triggers a unsafe cycle of dependencies between static\ninitializers in two classes, Backend and GraphDatabaseConfiguration,\nby invoking TitanFactory.open with a shorthand parameter first thing\nafter the JVM starts up.  This cycle is not triggered if a file is\npassed in.  This test is for #831.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 09:30:16"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 19:32:33", "commitHash": "7eb355ec7e2e27514c2d9ce09fa73e960784208e", "commitParents": ["627201ea7c20d1f72ab1d548ad5ec11041da09ee"], "commitGHEventType": "referenced", "nameRev": "7eb355ec7e2e27514c2d9ce09fa73e960784208e tags/0.9.0-M1~59", "commitGitStats": [{"insertions": 21, "lines": 21, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/TitanFactoryShorthandTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanFactoryShorthandTest"}], "spoonFilePath": "TitanFactoryShorthandTest.java"}], "commitMessage": "Failing test executing a static initializer cycle\n\nThis test triggers a unsafe cycle of dependencies between static\ninitializers in two classes, Backend and GraphDatabaseConfiguration,\nby invoking TitanFactory.open with a shorthand parameter first thing\nafter the JVM starts up.  This cycle is not triggered if a file is\npassed in.  This test is for #831.\n(cherry picked from commit c546e13325756f7ed68b3d4f72ced4e097fee7ff)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 09:30:16"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 19:53:15", "commitHash": "c1580c5c6d2c2ffd0ae1427d65aab10251e1a544", "commitParents": ["7eb355ec7e2e27514c2d9ce09fa73e960784208e"], "commitGHEventType": "referenced", "nameRev": "c1580c5c6d2c2ffd0ae1427d65aab10251e1a544 tags/0.9.0-M1~58", "commitGitStats": [{"insertions": 3, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/core/TitanFactory.java", "deletions": 3}, {"insertions": 64, "lines": 64, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/StandardStoreManager.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TestMockIndexProvider.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/TitanFactoryShorthandTest.java", "deletions": 1}, {"insertions": 4, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java", "deletions": 2}, {"insertions": 64, "lines": 64, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/StandardIndexProvider.java", "deletions": 0}, {"insertions": 20, "lines": 59, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/Backend.java", "deletions": 39}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.7"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getIndexFeatures().11"}, {"UPD": 5, "TOT": 21, "DEL": 6, "INS": 8, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getRegisteredStoreManagers()"}, {"UPD": 7, "TOT": 18, "DEL": 5, "INS": 0, "MOV": 6, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.2"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.3"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.initialize(com.thinkaurelius.titan.diskstorage.Configuration).9"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getStandaloneGlobalConfiguration(com.thinkaurelius.titan.diskstorage.KeyColumnValueStoreManager,com.thinkaurelius.titan.diskstorage.Configuration).10"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.5"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.4"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getStorageManager(com.thinkaurelius.titan.diskstorage.Configuration)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.initialize(com.thinkaurelius.titan.diskstorage.Configuration).8"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getIndexes(com.thinkaurelius.titan.diskstorage.Configuration)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getStoreShorthandOptions()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getIndexFeatures()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.6"}], "spoonFilePath": "Backend.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TestMockIndexProvider"}], "spoonFilePath": "TestMockIndexProvider.java"}, {"spoonMethods": [{"UPD": 4, "TOT": 6, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration"}], "spoonFilePath": "GraphDatabaseConfiguration.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardStoreManager"}], "spoonFilePath": "StandardStoreManager.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 6, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.core.TitanFactory.getLocalConfiguration(java.lang.String)"}], "spoonFilePath": "TitanFactory.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanFactoryShorthandTest.testTitanFactoryShorthand()"}], "spoonFilePath": "TitanFactoryShorthandTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardIndexProvider"}], "spoonFilePath": "StandardIndexProvider.java"}], "commitMessage": "Breaking static initializer cycles\n\nGraphDatabaseConfiguration no longer contains references to Backend.\nThose references have been replaced by two new self-contained enums\nrepresenting storage managers and index backends.  Fixes #831.\n(cherry picked from commit a2149cec1d2d9b52b1bad596ef8cb1accdd2f3db)\n\nConflicts:\n\ttitan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 11:03:40"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 20:50:59", "commitHash": "63f50c66dd4ec7a3e6882886f4aee674552564e4", "commitParents": ["f97c5b6e04a91767a5126a3aa1ca31fe1de5832c"], "commitGHEventType": "referenced", "nameRev": "63f50c66dd4ec7a3e6882886f4aee674552564e4 tags/0.9.0-M1~48", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/core/TitanFactory.java", "deletions": 1}, {"insertions": 2, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/StandardStoreManager.java", "deletions": 2}, {"insertions": 12, "lines": 14, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/Backend.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardStoreManager.getAllShorthands()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardStoreManager.getAllManagerClasses()"}], "spoonFilePath": "StandardStoreManager.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 0, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.core.TitanFactory.getLocalConfiguration(java.lang.String)"}], "spoonFilePath": "TitanFactory.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getStoreShorthandOptions()"}], "spoonFilePath": "Backend.java"}], "commitMessage": "Fix bug in shorthand argument interpretation\n\na2149cec1d2d9b52b1bad596ef8cb1accdd2f3db broke a static initializer\ncycle triggered by TitanFactory.open('backend:arg') shorthand\ninvocation, but it also added a bug that broke interpretation the\n'arg' part of the shorthand.  This is related to #831.\n(cherry picked from commit 8b0a078edf50ba93c88c6be6ab3220abaf49ea59)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-19 08:44:12"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 11:03:40", "commitHash": "a2149cec1d2d9b52b1bad596ef8cb1accdd2f3db", "commitParents": ["c546e13325756f7ed68b3d4f72ced4e097fee7ff"], "commitGHEventType": "referenced", "nameRev": "a2149cec1d2d9b52b1bad596ef8cb1accdd2f3db tags/0.5.2~18^2~18", "commitGitStats": [{"insertions": 3, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/core/TitanFactory.java", "deletions": 3}, {"insertions": 64, "lines": 64, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/StandardStoreManager.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TestMockIndexProvider.java", "deletions": 1}, {"insertions": 4, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java", "deletions": 2}, {"insertions": 64, "lines": 64, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/StandardIndexProvider.java", "deletions": 0}, {"insertions": 18, "lines": 55, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/Backend.java", "deletions": 37}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.7"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getIndexFeatures().10"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getStoreShorthandOptions()"}, {"UPD": 5, "TOT": 21, "DEL": 6, "INS": 8, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getRegisteredStoreManagers()"}, {"UPD": 7, "TOT": 18, "DEL": 5, "INS": 0, "MOV": 6, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.2"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.3"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.5"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.4"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getStorageManager(com.thinkaurelius.titan.diskstorage.Configuration)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.initialize(com.thinkaurelius.titan.diskstorage.Configuration).8"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getIndexes(com.thinkaurelius.titan.diskstorage.Configuration)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getStandaloneGlobalConfiguration(com.thinkaurelius.titan.diskstorage.KeyColumnValueStoreManager,com.thinkaurelius.titan.diskstorage.Configuration).9"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getIndexFeatures()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.6"}], "spoonFilePath": "Backend.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TestMockIndexProvider"}], "spoonFilePath": "TestMockIndexProvider.java"}, {"spoonMethods": [{"UPD": 4, "TOT": 6, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration"}], "spoonFilePath": "GraphDatabaseConfiguration.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardStoreManager"}], "spoonFilePath": "StandardStoreManager.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 6, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.core.TitanFactory.getLocalConfiguration(java.lang.String)"}], "spoonFilePath": "TitanFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.StandardIndexProvider"}], "spoonFilePath": "StandardIndexProvider.java"}], "commitMessage": "Breaking static initializer cycles\n\nGraphDatabaseConfiguration no longer contains references to Backend.\nThose references have been replaced by two new self-contained enums\nrepresenting storage managers and index backends.  Fixes #831.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 11:03:40"}], "created": "2014-11-14 23:50:31"}, {"labels": ["bug"], "filteredCommits": ["44632ff681fa2e95c2c0eaef9dc4d54ccb50196f"], "url": "https://github.com/thinkaurelius/titan/issues/828", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"44632ff681fa2e95c2c0eaef9dc4d54ccb50196f": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 26.00027777777778, "user": "superbeeny", "changesInPackagesGIT": [], "body": "Hi all,\n\nI pulled a copy of titan 09 down and tried to build it so I could access the maven artifacts. mvn clean install works nicely and all my dependencies resolve from my local maven repo.\n\nWhen I try to run the code I get the following exception\n\n```\nHello Titan!\n0    [main] INFO  com.thinkaurelius.titan.diskstorage.cassandra.thrift.CassandraThriftStoreManager  - Closed Thrift connection pooler.\nException in thread \"main\" java.lang.NoClassDefFoundError: org/objenesis/strategy/InstantiatorStrategy\n    at com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer$2.initialValue(KryoSerializer.java:64)\n    at com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer$2.initialValue(KryoSerializer.java:62)\n    at java.lang.ThreadLocal.setInitialValue(ThreadLocal.java:180)\n    at java.lang.ThreadLocal.get(ThreadLocal.java:170)\n    at com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.getKryo(KryoSerializer.java:77)\n    at com.thinkaurelius.titan.graphdb.database.serialize.kryo.KryoSerializer.writeClassAndObject(KryoSerializer.java:132)\n    at com.thinkaurelius.titan.graphdb.database.serialize.StandardSerializer$StandardDataOutput.writeClassAndObject(StandardSerializer.java:167)\n    at com.thinkaurelius.titan.diskstorage.configuration.backend.KCVSConfiguration.object2StaticBuffer(KCVSConfiguration.java:246)\n    at com.thinkaurelius.titan.diskstorage.configuration.backend.KCVSConfiguration.set(KCVSConfiguration.java:130)\n    at com.thinkaurelius.titan.diskstorage.configuration.backend.KCVSConfiguration.set(KCVSConfiguration.java:120)\n    at com.thinkaurelius.titan.diskstorage.configuration.ModifiableConfiguration.set(ModifiableConfiguration.java:27)\n    at com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.<init>(GraphDatabaseConfiguration.java:1280)\n    at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:91)\n    at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:71)\n    at com.comcast.idea.titan.App.main(App.java:27)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)\nCaused by: java.lang.ClassNotFoundException: org.objenesis.strategy.InstantiatorStrategy\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:372)\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:361)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:360)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n    ... 20 more\n```\n\nCode\n\n``` java\nimport com.thinkaurelius.titan.core.TitanFactory;\nimport com.thinkaurelius.titan.core.TitanGraph;\nimport org.apache.commons.configuration.BaseConfiguration;\nimport org.apache.commons.configuration.Configuration;\n\n/**\n * Hello world!\n *\n */\npublic class App \n{\n    public static Configuration getNicks09() {\n        Configuration configuration = new BaseConfiguration();\n\n        configuration.setProperty(\"storage.backend\", \"cassandrathrift\");\n        configuration.setProperty(\"storage.hostname\", \"localhost\");\n\n        return configuration;\n    }\n\n    public static void main( String[] args )\n    {\n        System.out.println( \"Hello Titan!\" );\n\n        TitanGraph graph = TitanFactory.open(getNicks09());\n\n        graph.close();\n        System.out.println(\"Goodbye Titan!\");\n    }\n}\n```\n\nDependencies in pom\n\n``` xml\n<properties>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n    <tinkerpopVersion>3.0.0.M5</tinkerpopVersion>\n    <titanVersion>0.9.0-SNAPSHOT</titanVersion>\n  </properties>\n\n  <dependencies>\n    <dependency>\n      <groupId>com.thinkaurelius.titan</groupId>\n      <artifactId>titan-core</artifactId>\n      <version>${titanVersion}</version>\n    </dependency>\n    <dependency>\n      <groupId>com.thinkaurelius.titan</groupId>\n      <artifactId>titan-cassandra</artifactId>\n      <version>${titanVersion}</version>\n    </dependency>\n    <dependency>\n      <groupId>com.tinkerpop</groupId>\n      <artifactId>gremlin-core</artifactId>\n      <version>${tinkerpopVersion}</version>\n    </dependency>\n```\n\nDependency Tree from maven\n\n```\n[INFO] +- com.thinkaurelius.titan:titan-core:jar:0.9.0-SNAPSHOT:compile\n[INFO] |  +- com.tinkerpop:gremlin-groovy:jar:3.0.0.M5:compile\n[INFO] |  |  +- com.tinkerpop:gremlin-algorithm:jar:3.0.0.M5:compile\n[INFO] |  |  +- org.apache.ivy:ivy:jar:2.3.0:compile\n[INFO] |  |  +- org.codehaus.groovy:groovy-all:jar:indy:2.3.7:compile\n[INFO] |  |  +- jline:jline:jar:2.11:compile\n[INFO] |  |  +- org.apache.commons:commons-lang3:jar:3.3.1:compile\n[INFO] |  |  \\- org.kohsuke:groovy-sandbox:jar:1.6:compile\n[INFO] |  +- org.glassfish:javax.json:jar:1.0:compile\n[INFO] |  +- com.codahale.metrics:metrics-core:jar:3.0.1:compile\n[INFO] |  +- com.codahale.metrics:metrics-ganglia:jar:3.0.1:compile\n[INFO] |  |  \\- info.ganglia.gmetric4j:gmetric4j:jar:1.0.3:compile\n[INFO] |  |     \\- org.acplt:oncrpc:jar:1.0.7:compile\n[INFO] |  +- com.codahale.metrics:metrics-graphite:jar:3.0.1:compile\n[INFO] |  +- org.reflections:reflections:jar:0.9.9-RC1:compile\n[INFO] |  |  +- org.javassist:javassist:jar:3.16.1-GA:compile\n[INFO] |  |  \\- dom4j:dom4j:jar:1.6.1:compile\n[INFO] |  |     \\- xml-apis:xml-apis:jar:1.0.b2:compile\n[INFO] |  +- com.spatial4j:spatial4j:jar:0.4.1:compile\n[INFO] |  +- commons-collections:commons-collections:jar:3.2.1:compile\n[INFO] |  +- commons-configuration:commons-configuration:jar:1.10:compile\n[INFO] |  |  +- commons-lang:commons-lang:jar:2.6:compile\n[INFO] |  |  \\- commons-logging:commons-logging:jar:1.1.1:compile\n[INFO] |  +- commons-io:commons-io:jar:2.1:compile\n[INFO] |  +- commons-codec:commons-codec:jar:1.7:compile\n[INFO] |  +- com.google.guava:guava:jar:15.0:compile\n[INFO] |  +- com.google.code.findbugs:jsr305:jar:1.3.9:compile\n[INFO] |  +- com.carrotsearch:hppc:jar:0.6.0:compile\n[INFO] |  +- com.github.stephenc.high-scale-lib:high-scale-lib:jar:1.1.4:compile\n[INFO] |  +- com.esotericsoftware.kryo:kryo:jar:2.24.0:compile\n[INFO] |  |  \\- com.esotericsoftware.minlog:minlog:jar:1.2:compile\n[INFO] |  \\- org.slf4j:slf4j-api:jar:1.7.5:compile\n[INFO] +- com.thinkaurelius.titan:titan-cassandra:jar:0.9.0-SNAPSHOT:compile\n[INFO] |  +- com.carrotsearch:junit-benchmarks:jar:0.7.0:compile\n[INFO] |  +- com.carrotsearch.randomizedtesting:randomizedtesting-runner:jar:2.0.8:compile\n[INFO] |  +- org.apache.cassandra:cassandra-all:jar:2.0.8:compile\n[INFO] |  |  +- net.jpountz.lz4:lz4:jar:1.2.0:compile\n[INFO] |  |  +- com.ning:compress-lzf:jar:0.8.4:compile\n[INFO] |  |  +- commons-cli:commons-cli:jar:1.1:compile\n[INFO] |  |  +- com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:jar:1.3:compile\n[INFO] |  |  +- org.antlr:antlr:jar:3.2:compile\n[INFO] |  |  |  \\- org.antlr:antlr-runtime:jar:3.2:compile\n[INFO] |  |  |     \\- org.antlr:stringtemplate:jar:3.2:compile\n[INFO] |  |  |        \\- antlr:antlr:jar:2.7.7:compile\n[INFO] |  |  +- org.codehaus.jackson:jackson-core-asl:jar:1.9.2:compile\n[INFO] |  |  +- org.codehaus.jackson:jackson-mapper-asl:jar:1.9.2:compile\n[INFO] |  |  +- com.googlecode.json-simple:json-simple:jar:1.1:compile\n[INFO] |  |  +- edu.stanford.ppl:snaptree:jar:0.1:compile\n[INFO] |  |  +- org.mindrot:jbcrypt:jar:0.3m:compile\n[INFO] |  |  +- com.yammer.metrics:metrics-core:jar:2.2.0:compile\n[INFO] |  |  +- com.addthis.metrics:reporter-config:jar:2.1.0:compile\n[INFO] |  |  |  \\- org.hibernate:hibernate-validator:jar:4.3.0.Final:compile\n[INFO] |  |  |     +- javax.validation:validation-api:jar:1.0.0.GA:compile\n[INFO] |  |  |     \\- org.jboss.logging:jboss-logging:jar:3.1.0.CR2:compile\n[INFO] |  |  +- com.thinkaurelius.thrift:thrift-server:jar:0.3.3:compile\n[INFO] |  |  |  \\- com.lmax:disruptor:jar:3.0.1:compile\n[INFO] |  |  +- net.sf.supercsv:super-csv:jar:2.1.0:compile\n[INFO] |  |  +- log4j:log4j:jar:1.2.16:compile\n[INFO] |  |  +- org.apache.thrift:libthrift:jar:0.9.1:compile\n[INFO] |  |  |  +- org.apache.httpcomponents:httpclient:jar:4.2.5:compile\n[INFO] |  |  |  \\- org.apache.httpcomponents:httpcore:jar:4.2.4:compile\n[INFO] |  |  +- org.apache.cassandra:cassandra-thrift:jar:2.0.8:compile\n[INFO] |  |  +- com.github.stephenc:jamm:jar:0.2.5:compile\n[INFO] |  |  \\- io.netty:netty:jar:3.6.6.Final:compile\n[INFO] |  +- commons-pool:commons-pool:jar:1.6:compile\n[INFO] |  +- org.jboss.netty:netty:jar:3.2.7.Final:compile\n[INFO] |  +- com.netflix.astyanax:astyanax-core:jar:1.56.48:compile\n[INFO] |  |  +- com.eaio.uuid:uuid:jar:3.2:compile\n[INFO] |  |  +- joda-time:joda-time:jar:1.6.2:compile\n[INFO] |  |  \\- org.codehaus.jettison:jettison:jar:1.2:compile\n[INFO] |  |     \\- stax:stax-api:jar:1.0.1:compile\n[INFO] |  +- com.netflix.astyanax:astyanax-thrift:jar:1.56.48:compile\n[INFO] |  +- com.netflix.astyanax:astyanax-cassandra:jar:1.56.48:compile\n[INFO] |  |  \\- org.apache.servicemix.bundles:org.apache.servicemix.bundles.commons-csv:jar:1.0-r706900_3:compile\n[INFO] |  +- com.netflix.astyanax:astyanax-recipes:jar:1.56.48:compile\n[INFO] |  \\- org.xerial.snappy:snappy-java:jar:1.0.5-M3:compile\n[INFO] +- com.tinkerpop:gremlin-core:jar:3.0.0.M5:compile\n[INFO] |  +- org.yaml:snakeyaml:jar:1.13:compile\n[INFO] |  +- org.javatuples:javatuples:jar:1.2:compile\n[INFO] |  +- com.fasterxml.jackson.core:jackson-databind:jar:2.3.0:compile\n[INFO] |  |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.3.0:compile\n[INFO] |  |  \\- com.fasterxml.jackson.core:jackson-core:jar:2.3.0:compile\n[INFO] |  +- com.jcabi:jcabi-manifests:jar:1.0:compile\n[INFO] |  |  \\- com.jcabi:jcabi-log:jar:0.14:compile\n[INFO] |  +- org.slf4j:slf4j-log4j12:jar:1.7.7:compile\n[INFO] |  \\- org.slf4j:jcl-over-slf4j:jar:1.7.7:compile\n[INFO] \\- junit:junit:jar:3.8.1:test\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "NoClassDefFound Errors in Titan 09", "statsSkippedReason": "", "closed": "2014-12-10 06:20:59", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-12-05 01:47:03", "commitHash": "44632ff681fa2e95c2c0eaef9dc4d54ccb50196f", "commitParents": ["24bc58c3e12d32263f4138e4d120b02c2d5fa848"], "commitGHEventType": "referenced", "nameRev": "44632ff681fa2e95c2c0eaef9dc4d54ccb50196f tags/0.9.0-M1~1", "commitGitStats": [{"insertions": 2, "lines": 3, "filePath": "pom.xml", "deletions": 1}, {"insertions": 0, "lines": 4, "filePath": "titan-core/pom.xml", "deletions": 4}], "commitSpoonAstDiffStats": [], "commitMessage": "Depend on Objenesis\n\nThis was excluded from our dependency on older versions of Kryo, since\nKryo used to include a shaded copy of Objenesis.  As of 2.24.0, Kryo\ndoesn't include a shaded copy and needs an Objenesis dependency to\nwork (judging from the list of classfiles in the 2.24.0 jar on\nCentral).\n\nThanks @superbeeny\n\nFor #828\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-12-05 01:47:03"}], "created": "2014-11-14 01:46:32"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/827", "title": "Titan Infer Schema does not work correctly in Titan/Hadoop.", "closed": "2014-11-20 14:41:22", "commitsDetails": [], "commits": {}, "ttf": 6.000277777777778, "created": "2014-11-13 21:15:09", "user": "okram", "body": "Do this:\n\n`titan.hadoop.output.infer-schema=true`\n\n........Then see how it looks like its doing a bulk load but it does SchemaInfer, but then no data. Something is odd.\n\nTitan/Hadoop2 into Cassandra.\n"}, {"labels": ["bug"], "filteredCommits": ["b2ad7e883d873b1e8425aedc31cefbf82aacb60c", "e8e7201de14cfdbb4c3c90b20419531b6d663cb9"], "url": "https://github.com/thinkaurelius/titan/issues/825", "gitStatsSummary": {"insertions": 14, "gitFilesChange": 2, "lines": 14, "deletions": 0}, "numCommits": 2, "commits": {"e8e7201de14cfdbb4c3c90b20419531b6d663cb9": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "b2ad7e883d873b1e8425aedc31cefbf82aacb60c": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "82dd462237aa6d7f584ed4816598b6ed39dc1b9e": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "a83867fdcded76a8f54584f3ebdbceb21e401fb8": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 4.000277777777778, "user": "denisekgosnell", "changesInPackagesGIT": ["UPGRADE.asc", "titan-dist/src/assembly/static/bin/cassandra.in.sh"], "body": "The strange behavior I noticed: there were cases when I would stop titan and remove all data with titan.sh clean. After restarting titan, the graph would still be accessible and was not removed.\n\nThe reasons this is happening on my system:\n1) titan.sh clean looks in `titan/log` and `titan/db/` to remove all data from the Cassandra and elastic search backends\n2) If you start titan from within titan/bin/, then the Cassandra data is mapped to be stored in:\ntitan/bin/db/cassandra/ whereas the elastic search data is mapped to titan/db \n--> As such, when you run titan clean, the data is not properly removed.\n\nHow I can avoid this at the moment: I can manually remove all cassandra data and be sure to start titan in the proper directory.\n\nA Proposed Fix: the titan start and associated Cassandra launching scripts could be sure to map the path of the Cassandra data to be in titan/db/cassandra regardless of the absolute path from which titan was started (Eg: if it is started from within bin)\n", "filteredCommitsReason": {"duplicated": 2, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "The graph data persists after titan.sh clean because of data being written to bin/db/cassandra", "statsSkippedReason": "", "closed": "2014-11-18 17:47:33", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-18 12:36:52", "commitHash": "e8e7201de14cfdbb4c3c90b20419531b6d663cb9", "commitParents": ["b2ad7e883d873b1e8425aedc31cefbf82aacb60c"], "commitGHEventType": "referenced", "nameRev": "e8e7201de14cfdbb4c3c90b20419531b6d663cb9 tags/0.5.2~18^2~13", "commitGitStats": [{"insertions": 10, "lines": 10, "filePath": "UPGRADE.asc", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "docs/upgrade.txt", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Upgrade notice about Cassandra dirs\n\nA warning to users of titan.sh in 0.5.0 and 0.5.1 porting data forward\nto 0.5.2 that the script's working directory no longer affects the\nlocation of Cassandra data directories\n\nRelated to #825\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 12:35:25"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 12:14:43", "commitHash": "b2ad7e883d873b1e8425aedc31cefbf82aacb60c", "commitParents": ["a0a726d2fdc0dd20e82dee4536701064f4f778e7"], "commitGHEventType": "referenced", "nameRev": "b2ad7e883d873b1e8425aedc31cefbf82aacb60c tags/0.5.2~18^2~14", "commitGitStats": [{"insertions": 4, "lines": 4, "filePath": "titan-dist/src/assembly/static/bin/cassandra.in.sh", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Make the Cassandra working dir fixed\n\nThe cassandra.yaml file used by titan.sh has long used relative paths\nfor data, commitlogs, and saved_caches, but since moving away from the\nembeddedcassandra backend in favor of a standalone cassandra daemon,\nwe can no longer rely on STORAGE_DIRECTORY being interpreted relative\nto the Titan configuration file.\n\nThis commit changes cassandra.in.sh to cd to $CASSANDRA_HOME\n(typically the directory containing titan's bin/ directory, or the\ngrandparent of titan.sh) before starting Cassandra.\n\nFixes #825\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 12:14:43"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 20:45:19", "commitHash": "82dd462237aa6d7f584ed4816598b6ed39dc1b9e", "commitParents": ["08c9dfbd50106f50da66c6c5372cdfa467e47149"], "commitGHEventType": "referenced", "nameRev": "82dd462237aa6d7f584ed4816598b6ed39dc1b9e tags/0.9.0-M1~54", "commitGitStats": [{"insertions": 4, "lines": 4, "filePath": "titan-dist/src/assembly/static/bin/cassandra.in.sh", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Make the Cassandra working dir fixed\n\nThe cassandra.yaml file used by titan.sh has long used relative paths\nfor data, commitlogs, and saved_caches, but since moving away from the\nembeddedcassandra backend in favor of a standalone cassandra daemon,\nwe can no longer rely on STORAGE_DIRECTORY being interpreted relative\nto the Titan configuration file.\n\nThis commit changes cassandra.in.sh to cd to $CASSANDRA_HOME\n(typically the directory containing titan's bin/ directory, or the\ngrandparent of titan.sh) before starting Cassandra.\n\nFixes #825\n(cherry picked from commit b2ad7e883d873b1e8425aedc31cefbf82aacb60c)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 12:14:43"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 20:45:26", "commitHash": "a83867fdcded76a8f54584f3ebdbceb21e401fb8", "commitParents": ["82dd462237aa6d7f584ed4816598b6ed39dc1b9e"], "commitGHEventType": "referenced", "nameRev": "a83867fdcded76a8f54584f3ebdbceb21e401fb8 tags/0.9.0-M1~53", "commitGitStats": [{"insertions": 10, "lines": 10, "filePath": "UPGRADE.asc", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "docs/upgrade.txt", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Upgrade notice about Cassandra dirs\n\nA warning to users of titan.sh in 0.5.0 and 0.5.1 porting data forward\nto 0.5.2 that the script's working directory no longer affects the\nlocation of Cassandra data directories\n\nRelated to #825\n(cherry picked from commit e8e7201de14cfdbb4c3c90b20419531b6d663cb9)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 12:35:25"}], "created": "2014-11-13 19:57:45"}, {"labels": ["bug"], "filteredCommits": ["1b23ce606090eb7e9407e63e26bf8e4e2418ac42", "60672b030dfac452ac2ae71a3eaf74d627be5318"], "url": "https://github.com/thinkaurelius/titan/issues/824", "gitStatsSummary": {"insertions": 37, "gitFilesChange": 1, "lines": 42, "deletions": 5}, "numCommits": 1, "commits": {"60672b030dfac452ac2ae71a3eaf74d627be5318": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "627201ea7c20d1f72ab1d548ad5ec11041da09ee": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "1b23ce606090eb7e9407e63e26bf8e4e2418ac42": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 4.000277777777778, "user": "curtisallen", "changesInPackagesSPOON": ["com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.initializeShellWithScript(org.codehaus.groovy.tools.shell.IO,java.lang.String,org.codehaus.groovy.tools.shell.Groovysh)", "com.thinkaurelius.titan.pkgtest.GremlinShellArgsIT", "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console", "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.main(java.lang.String[])"], "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop"], "body": "Given a simple bootstrap script\n\nsetup.groovy:\n\n``` groovy\ng = new TinkerGraph()\n```\n\nWhen starting the gremlin console you used to be able to pass a bootstrap script. In titan-hadoop 0.5.x this doesn't seem to work. \n\n``` bash\ntitan-0.5.0-hadoop1\u00a0$ bin/gremlin.sh setup.groovy  \n         \\,,,/\n         (o o)\n-----oOOo-(_)-oOOo-----\ngremlin> g\nNo such property: g for class: groovysh_evaluate\nDisplay stack trace? [yN] %\n```\n\nCompare with gremlin-groovy\n\n``` bash\ngremlin-groovy-2.5.0\u00a0$\u00a0bin/gremlin.sh setup.groovy\n\n         \\,,,/\n         (o o)\n-----oOOo-(_)-oOOo-----\n==>tinkergraph[vertices:0 edges:0]\ngremlin> g\n==>tinkergraph[vertices:0 edges:0]\ngremlin> \n```\n\nI also noticed that if you pass in a path to a script that doesn't exist a FIleNotFoundException is no longer thrown. \n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 4, "UPD": 1, "TOT": 7, "DEL": 0, "INS": 6, "spoonFilesChanged": 2, "MOV": 0}, "title": "Bootstrap script doesn't get invoked in titan console ", "statsSkippedReason": "", "closed": "2014-11-18 10:13:52", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-18 04:53:23", "commitHash": "60672b030dfac452ac2ae71a3eaf74d627be5318", "commitParents": ["61178133aea5cdeae63b45af9118d543107b7c0c"], "commitGHEventType": "referenced", "nameRev": "60672b030dfac452ac2ae71a3eaf74d627be5318 tags/0.5.2~18^2~22", "commitGitStats": [{"insertions": 11, "lines": 11, "filePath": "titan-dist/src/test/java/com/thinkaurelius/titan/pkgtest/GremlinShellArgsIT.java", "deletions": 0}, {"insertions": 71, "lines": 71, "filePath": "titan-dist/src/test/expect/gremlin-shell-args.expect.vm", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "titan-dist/src/test/resources/test_gremlin_init.groovy", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.pkgtest.GremlinShellArgsIT"}], "spoonFilePath": "GremlinShellArgsIT.java"}], "commitMessage": "Add test of gremlin.sh gremlin-script.groovy\n\nThis test checks that gremlin.sh interprets a single command-line\nargument, when present, as the path to a script file to be evaluated\nand whose additions to the scriptengine variable binding will be\navailable at the prompt eventually presented to the user.\n\nThe sample script used in the test sets and checks these four\nvariables:\n\ntest_i = 2 + 2\ntest_g = new TinkerGraph()\ntest_hadoop_class = HadoopFactory.class\ntest_titan_class = TitanFactory.class\n\nThis is for #824\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 04:42:55"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 19:31:48", "commitHash": "627201ea7c20d1f72ab1d548ad5ec11041da09ee", "commitParents": ["d1b5e1acd3c1462bb316b11f12de7ca7dce1eebe"], "commitGHEventType": "referenced", "nameRev": "627201ea7c20d1f72ab1d548ad5ec11041da09ee tags/0.9.0-M1~60", "commitGitStats": [{"insertions": 11, "lines": 11, "filePath": "titan-dist/src/test/java/com/thinkaurelius/titan/pkgtest/GremlinShellArgsIT.java", "deletions": 0}, {"insertions": 71, "lines": 71, "filePath": "titan-dist/src/test/expect/gremlin-shell-args.expect.vm", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "titan-dist/src/test/resources/test_gremlin_init.groovy", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.pkgtest.GremlinShellArgsIT"}], "spoonFilePath": "GremlinShellArgsIT.java"}], "commitMessage": "Add test of gremlin.sh gremlin-script.groovy\n\nThis test checks that gremlin.sh interprets a single command-line\nargument, when present, as the path to a script file to be evaluated\nand whose additions to the scriptengine variable binding will be\navailable at the prompt eventually presented to the user.\n\nThe sample script used in the test sets and checks these four\nvariables:\n\ntest_i = 2 + 2\ntest_g = new TinkerGraph()\ntest_hadoop_class = HadoopFactory.class\ntest_titan_class = TitanFactory.class\n\nThis is for #824\n(cherry picked from commit 60672b030dfac452ac2ae71a3eaf74d627be5318)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 04:42:55"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 05:10:13", "commitHash": "1b23ce606090eb7e9407e63e26bf8e4e2418ac42", "commitParents": ["60672b030dfac452ac2ae71a3eaf74d627be5318"], "commitGHEventType": "referenced", "nameRev": "1b23ce606090eb7e9407e63e26bf8e4e2418ac42 tags/0.5.2~18^2~21", "commitGitStats": [{"insertions": 37, "lines": 42, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop/gremlin/Console.java", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.initializeShellWithScript(org.codehaus.groovy.tools.shell.IO,java.lang.String,org.codehaus.groovy.tools.shell.Groovysh)"}, {"UPD": 0, "TOT": 4, "DEL": 0, "INS": 4, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.main(java.lang.String[])"}], "spoonFilePath": "Console.java"}], "commitMessage": "Make gremlin.sh process an arg as a gremlin script\n\nFixes #824\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 05:10:13"}], "created": "2014-11-13 18:17:49"}, {"labels": ["bug", "convention"], "url": "https://github.com/thinkaurelius/titan/issues/819", "title": "Multi-properties don't work in Titan 0.9.0-Experimental", "closed": "2015-04-14 23:01:38", "commitsDetails": [], "commits": {}, "ttf": 153.00027777777777, "created": "2014-11-12 17:51:52", "user": "okram", "body": "Titan defaults to cardinality ONE for vertex properties. We should have this be MANY as this is now \"standard TinkerPop.\"\n\n``` groovy\ngremlin> v = g.addVertex('name','marko','name','bob')\n==>v[2560256]\ngremlin> v.valueMap()\n==>[name:[bob]]\ngremlin> v.property('name','marko')\n==>vp[name->marko]\ngremlin> v.valueMap()\n==>[name:[marko]]\ngremlin>\n```\n"}, {"labels": ["bug"], "filteredCommits": ["b4eee85165c5c1887d7597a628d5470500ffef8d", "5dd656e050cf1f31580a4425e51b3da272d9bfcb"], "url": "https://github.com/thinkaurelius/titan/issues/817", "gitStatsSummary": {"insertions": 41, "gitFilesChange": 6, "lines": 69, "deletions": 28}, "numCommits": 2, "commits": {"5dd656e050cf1f31580a4425e51b3da272d9bfcb": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "b4eee85165c5c1887d7597a628d5470500ffef8d": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 15.000277777777777, "user": "skavulya", "changesInPackagesSPOON": ["com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat", "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseInputFormat.setConf(org.apache.hadoop.conf.Configuration)", "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseRecordReader", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader", "com.thinkaurelius.titan.hadoop.formats.util.TitanInputFormat.getGraphSetup()", "com.thinkaurelius.titan.hadoop.formats.util.TitanInputFormat", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat.setConf(org.apache.hadoop.conf.Configuration)", "com.thinkaurelius.titan.hadoop.formats.util.TitanInputFormat.setConf(org.apache.hadoop.conf.Configuration)", "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseInputFormat.createRecordReader(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader.initialize(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)", "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseInputFormat", "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseRecordReader.initialize(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)", "com.thinkaurelius.titan.hadoop.formats.util.input.TitanHadoopSetupCommon.getDefaultSliceQuery()", "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat.createRecordReader(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)"], "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats"], "body": "I encountered an error when using the TitanHBaseInputFormat in Titan 0.5+ with Apache Spark 1.0.0, and HBase 0.98. The Spark context would not shut down due to a runaway KCVSLog$MessagePuller thread that maintained a connection to the underlying graph. \n\nThe bug occurs due to the following sequence of events when using the TitanInputFormat with Spark's HadoopRDD: \nval hBaseRDD = sparkContext.newAPIHadoopRDD(hBaseConfig, classOf[TitanHBaseInputFormat], classOf[NullWritable], classOf[FaunusVertex])\n\nSpark's HadoopRDD creates a new TitanInputFormat to get the input partitions. TitanInputFormat.setConf() creates a new TitanHBaseHadoopGraph which is opened but never closed. The KCVSLog$MessagePuller maintains a connection to the graph even after the TitanInputFormat instance is out-of-scope in getPartitions() so the Spark context does not fully shut down.\n\nSpark's HadoopRDD's compute method also calls TitanInputFormat.setConf() for each partition.\nA new TitanInputFormat is created, along with the corresponding record reader. Once the computation is complete, the Titan graph is shut down correctly using the record reader's close method.\n\nSince close() in Hadoop input formats is associated with the record reader, and not the initial invocation of the input format to get splits, there is currently no way to shutdown the initial graph created.  I worked around it by extending  TitanHBaseInputFormat and closing the graph after getSplits(), but I am not sure if this is the best approach.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 14, "UPD": 26, "TOT": 72, "DEL": 13, "INS": 17, "spoonFilesChanged": 6, "MOV": 16}, "title": "KCVSLog$MessagePuller does not shut down when using the TitanInputFormat in Apache Spark", "statsSkippedReason": "", "closed": "2014-11-26 21:58:31", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-18 08:47:46", "commitHash": "5dd656e050cf1f31580a4425e51b3da272d9bfcb", "commitParents": ["1b23ce606090eb7e9407e63e26bf8e4e2418ac42"], "commitGHEventType": "referenced", "nameRev": "5dd656e050cf1f31580a4425e51b3da272d9bfcb tags/0.5.2~18^2~20", "commitGitStats": [{"insertions": 4, "lines": 8, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/hbase/TitanHBaseInputFormat.java", "deletions": 4}, {"insertions": 3, "lines": 8, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/cassandra/TitanCassandraInputFormat.java", "deletions": 5}, {"insertions": 5, "lines": 7, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/cassandra/TitanCassandraRecordReader.java", "deletions": 2}, {"insertions": 4, "lines": 4, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/util/input/TitanHadoopSetupCommon.java", "deletions": 0}, {"insertions": 10, "lines": 15, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/util/TitanInputFormat.java", "deletions": 5}, {"insertions": 5, "lines": 7, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/hbase/TitanHBaseRecordReader.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseRecordReader.initialize(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)"}, {"UPD": 4, "TOT": 5, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseRecordReader"}], "spoonFilePath": "TitanHBaseRecordReader.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.util.input.TitanHadoopSetupCommon.getDefaultSliceQuery()"}], "spoonFilePath": "TitanHadoopSetupCommon.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader.initialize(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)"}, {"UPD": 4, "TOT": 5, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader"}], "spoonFilePath": "TitanCassandraRecordReader.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 6, "DEL": 0, "INS": 2, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.util.TitanInputFormat"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.util.TitanInputFormat.getGraphSetup()"}, {"UPD": 1, "TOT": 19, "DEL": 3, "INS": 2, "MOV": 13, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.util.TitanInputFormat.setConf(org.apache.hadoop.conf.Configuration)"}], "spoonFilePath": "TitanInputFormat.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseInputFormat.createRecordReader(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)"}, {"UPD": 1, "TOT": 2, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseInputFormat.setConf(org.apache.hadoop.conf.Configuration)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseInputFormat"}], "spoonFilePath": "TitanHBaseInputFormat.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat"}, {"UPD": 1, "TOT": 2, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat.setConf(org.apache.hadoop.conf.Configuration)"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat.createRecordReader(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)"}], "spoonFilePath": "TitanCassandraInputFormat.java"}], "commitMessage": "Moving TitanGraph instantiation into RecordReaders\n\nThis should address #817.  According to that issue, Spark (and maybe\nMR?) creates an InputFormat when starting a workload just to get the\nsplits, then throws the IF away.  Creating a graph in IF.setConf\ntherefore lets an unclosed graph go out-of-scope in this scenario.\n\nThis commit implements @skavulya's suggestion to move graph\ninstantiation into RecordReader.initialize for both the HBase and\nCassandra RRs implementations.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 08:43:47"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 13:22:38", "commitHash": "b4eee85165c5c1887d7597a628d5470500ffef8d", "commitParents": ["c12d1ebecbf423d4b9ae0b468263af4109218a45"], "commitGHEventType": "referenced", "nameRev": "b4eee85165c5c1887d7597a628d5470500ffef8d tags/0.5.2~18^2~11", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/hbase/TitanHBaseInputFormat.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/cassandra/TitanCassandraInputFormat.java", "deletions": 1}, {"insertions": 4, "lines": 8, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/cassandra/TitanCassandraRecordReader.java", "deletions": 4}, {"insertions": 4, "lines": 8, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/hbase/TitanHBaseRecordReader.java", "deletions": 4}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 1, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader.initialize(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)"}, {"UPD": 6, "TOT": 6, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader"}], "spoonFilePath": "TitanCassandraRecordReader.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 1, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseRecordReader.initialize(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)"}, {"UPD": 6, "TOT": 6, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseRecordReader"}], "spoonFilePath": "TitanHBaseRecordReader.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.hbase.TitanHBaseInputFormat.createRecordReader(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)"}], "spoonFilePath": "TitanHBaseInputFormat.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat.createRecordReader(org.apache.hadoop.mapreduce.InputSplit,org.apache.hadoop.mapreduce.TaskAttemptContext)"}], "spoonFilePath": "TitanCassandraInputFormat.java"}], "commitMessage": "Move Faunus Graph instantiation into RR.initialize\n\nI kind of implemented this in\n5dd656e050cf1f31580a4425e51b3da272d9bfcb, but I cheated by opening the\ngraph in InputFormat.createRecordReader rather than\nRecordReader.initialize.  I'm not sure whether the contract of\ncreateRecordReader makes that safe.  This commit moves graph\ninstantiation into RecordReader.initialize in an attempt to remove the\nuncertainty.\n\nRelated to #817\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 13:20:07"}], "created": "2014-11-11 21:49:46"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/810", "title": "TitanVertexQuery with adjacent", "closed": "2014-11-21 00:04:04", "commitsDetails": [], "commits": {}, "ttf": 13.000277777777777, "created": "2014-11-07 06:45:52", "user": "boliza", "body": "if direction is Direction.BOTH the result is incorrect.\nmy schema is\n\n``` Java\nPropertyKey userId = mgmt.makePropertyKey(\"bloggerId\").dataType(String.class).make();\nTitanGraphIndex bloggerIdIndex = mgmt.buildIndex(\"bloggIdIndex\", Vertex.class).addKey(userId).unique().buildCompositeIndex();\nmgmt.setConsistency(bloggerIdIndex, ConsistencyModifier.LOCK);\nmgmt.addIndexKey(getExternalIndex(Vertex.class), userId, Mapping.STRING.getParameter());\n\ntimes = mgmt.makePropertyKey(\"times\").dataType(Integer.class).make();\n EdgeLabel edgeLabel = mgmt.makeEdgeLabel(\"mention\").make();\nmgmt.buildEdgeIndex(edgeLabel, \"labelIndex\", Direction.BOTH, Order.DESC, times);\n```\n\ntest code is\n\n``` Java\n Vertex[] vertexes = new Vertex[3];\n        for (int i = 0; i < vertexes.length; i++) {\n            Vertex vertex = tx.addVertex();\n            vertex.setProperty(\"bloggerId\", \"key-\" + i);\n            vertexes[i] = vertex;\n        }\nEdge edge1 = vertexes[0].addEdge(\"mention\", vertexes[1]);\nEdge edge2 = vertexes[0].addEdge(\"mention\",vertexes[2]);\nEdge edge3 = vertexes[1].addEdge(\"mention\", vertexes[2]);\n\nIterable iterable = vertexes[1].query().direction(Direction.BOTH).adjacent(vertexes[2]).vertices();\n```\n\nThe size of iterable is 2.\n\nIs this a bug of TitanVertexQuery or I'am full understand of the method adjacent\n"}, {"labels": ["bug"], "filteredCommits": ["856a84ee55aa106d29db3d6ade540b7ca627dd57"], "url": "https://github.com/thinkaurelius/titan/issues/807", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"856a84ee55aa106d29db3d6ade540b7ca627dd57": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 15.000277777777777, "user": "rjbriody", "changesInPackagesSPOON": [], "changesInPackagesGIT": [], "body": "Here is the relevant discussion: https://groups.google.com/forum/?utm_medium=email&utm_source=footer#!msg/aureliusgraphs/vLHe43s6XlA/sKFW2ji6DlcJ\n\nStep 1 - add schema\n\n```\ngraph = <get a cassandra connected graph>\nmgmt = graph.getManagementSystem()\nmgmt.makePropertyKey(\"email\").dataType(String).cardinality(com.thinkaurelius.titan.core.Cardinality.LIST).make()\nmgmt.commit()\ngraph.commit()\n```\n\nStep 2 - add vertex with multi-property\n\n```\nv = graph.addVertex(null)\nv.addProperty(\"email\", \"one\")\nv.addProperty(\"email\", \"two\")\ngraph.commit()\n```\n\nStep 3 - boom!\n\n```\ng = HadoopFactory.open('../conf/hadoop/titan-cassandra-input.properties')\ng._\n```\n\nResults in following exception:\n\n```\nError: java.lang.RuntimeException: java.lang.IllegalArgumentException: A relation already exists which violates the multiplicity constraint: MANY2ONE on type freebase_name at com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.readHadoopVertex(TitanHadoopGraph.java:102) at com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraHadoopGraph.readHadoopVertex(TitanCassandraHadoopGraph.java:30) at com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader.nextKeyValue(TitanCassandraRecordReader.java:49) at org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.nextKeyValue(MapTask.java:533) at org.apache.hadoop.mapreduce.task.MapContextImpl.nextKeyValue(MapContextImpl.java:80) at org.apache.hadoop.mapreduce.lib.map.WrappedMapper$Context.nextKeyValue(WrappedMapper.java:91) at org.apache.hadoop.mapreduce.lib.chain.Chain$ChainRecordReader.nextKeyValue(Chain.java:156) at org.apache.hadoop.mapreduce.lib.chain.ChainMapContextImpl.nextKeyValue(ChainMapContextImpl.java:78) at org.apache.hadoop.mapreduce.lib.map.WrappedMapper$Context.nextKeyValue(WrappedMapper.java:91) at org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:144) at org.apache.hadoop.mapreduce.lib.chain.Chain.runMapper(Chain.java:389) at org.apache.hadoop.mapreduce.lib.chain.ChainMapper.run(ChainMapper.java:149) at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:764) at org.apache.hadoop.mapred.MapTask.run(MapTask.java:340) at org.apache.hadoop.mapred.YarnChild$2.run(YarnChild.java:167) at java.security.AccessController.doPrivileged(Native Method) at javax.security.auth.Subject.doAs(Subject.java:415) at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1554) at org.apache.hadoop.mapred.YarnChild.main(YarnChild.java:162) Caused by: java.lang.IllegalArgumentException: A relation already exists which violates the multiplicity constraint: MANY2ONE on type freebase_name at com.thinkaurelius.titan.hadoop.FaunusElement.ensureUniqueness(FaunusElement.java:248) at com.thinkaurelius.titan.hadoop.FaunusElement.addRelation(FaunusElement.java:205) at com.thinkaurelius.titan.hadoop.FaunusVertex.addProperty(FaunusVertex.java:122) at com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.readHadoopVertex(TitanHadoopGraph.java:71) ... 18 more \n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0, "TOT": 0, "DEL": 0, "INS": 0, "spoonFilesChanged": 0, "MOV": 0}, "title": "Multiplicity constraint error when using HadoopFactory", "statsSkippedReason": "", "closed": "2014-11-21 20:39:09", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-21 14:34:36", "commitHash": "856a84ee55aa106d29db3d6ade540b7ca627dd57", "commitParents": ["b9aca3273a0b6b0ea716932ff4111af074d9ba1f"], "commitGHEventType": "referenced", "nameRev": "856a84ee55aa106d29db3d6ade540b7ca627dd57 tags/0.5.2~14^2~1", "commitGitStats": [{"insertions": 74, "lines": 76, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/test/java/com/thinkaurelius/titan/hadoop/formats/cassandra/TitanCassandraInputFormatTest.java", "deletions": 2}, {"insertions": 2, "lines": 4, "filePath": "titan-hadoop-parent/pom.xml", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormatTest.testInGremlinImports()"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormatTest"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormatTest.clear()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormatTest.startUpCassandra()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormatTest.getTitanConfiguration()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormatTest.testCanReadListValuedProperty()"}], "spoonFilePath": "TitanCassandraInputFormatTest.java"}], "commitMessage": "Add test that reads a list-valued prop with Faunus\n\nThis test is modeled on #807.  #807 is reproducible on 0.5.1 but has\nbeen fixed in titan05 (0.5.2-SNAPSHOT) at the time of this commit.\nThis was probably fixed as part of earlier Faunus NPE issue fixing,\nbut I haven't bisected and don't know exactly which change did it.\n\nThis commit adds a test which would catch a regression on #807.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-21 14:34:36"}], "created": "2014-11-05 20:42:19"}, {"labels": ["bug"], "filteredCommits": [], "url": "https://github.com/thinkaurelius/titan/issues/806", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"520e7c650e08ebc2d6b86bfa1515f032006259f4": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "0c28ed51f4be7d8a178024d7b46bbcd11f05038b": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "c89cf724c754ea079bdbab1c8c2cbb23435299a8": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 10.000277777777777, "user": "keith-hinde", "changesInPackagesSPOON": [], "changesInPackagesGIT": [], "body": "Using 0.5.0.\n\nEvery time I try to run a Sequence File Output extract job against my graph, the mapreduce jobs fail with the following error:\n\nError: java.io.IOException: wrong key class: org.apache.hadoop.io.NullWritable is not class org.apache.hadoop.io.LongWritable\n\nHadoop (2.2.0) is working fine, for both regular mapreduce jobs and also GraphSON extracts from the same Graph (stored in Cassandra). The properties file I'm using looks a little like this:\n\ntitan.hadoop.input.format=com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat\ntitan.hadoop.input.conf.storage.backend=cassandrathrift\n\ntitan.hadoop.output.format=org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat\ntitan.hadoop.sideeffect.output.format=org.apache.hadoop.mapreduce.lib.output.TextOutputFormat\ntitan.hadoop.output.location=output\ntitan.hadoop.output.location.overwrite=true\n\nLooking at the syslog in the userjobs folder for a failed attempt, I find errors like this:\n\n2014-11-04 10:48:06,536 ERROR [main] org.apache.hadoop.security.UserGroupInformation: PriviledgedActionException as:hduser (auth:SIMPLE) cause:java.io.IOException: wrong key class: org.apache.hadoop.io.NullWritable is not class org.apache.hadoop.io.LongWritable\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 3}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0, "TOT": 0, "DEL": 0, "INS": 0, "spoonFilesChanged": 0, "MOV": 0}, "title": "\"wrong key class\" errors - Sequence File Output", "statsSkippedReason": "", "closed": "2014-11-15 07:16:50", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-15 01:16:08", "commitHash": "520e7c650e08ebc2d6b86bfa1515f032006259f4", "commitParents": ["90054838b0d9ec39f514d903feb823cd7f346990"], "commitGHEventType": "referenced", "nameRev": "520e7c650e08ebc2d6b86bfa1515f032006259f4 tags/0.5.2~23", "commitGitStats": [{"insertions": 12, "lines": 12, "filePath": "titan-hadoop-parent/titan-hadoop-2/src/main/java/com/thinkaurelius/titan/hadoop/compat/h2/Hadoop2Compiler.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.compat.h2.Hadoop2Compiler.addMap(java.lang.Class,java.lang.Class,java.lang.Class,org.apache.hadoop.conf.Configuration)"}], "spoonFilePath": "Hadoop2Compiler.java"}], "commitMessage": "Set job output k-v along with Mapper output k-v\n\nHadoop2Compiler (but not Hadoop1Compiler) uses ChainMapper and\nChainReducer to string work together inside a single job.\n\nHadoop2Compiler has an addMap method that creates a reducerless job.\nThis method failed to set the job's output key and value classes, nor\ndid ChainMapper.addMapper, so these jobs used the defaults that ship\nwith Hadoop.  These are almost always wrong for Titan-Hadoop jobs.\n\nSome output formats don't care about the configured k-v classes\n(e.g. TextOutputFormat), but SequenceFileOutputFormat definitely does.\n\nThis change sets the job output k-v classes to match the Mapper k-v\nclasses passed into Hadoop2Compiler.addMap.  If a reducer is later\nadded to the job, ChainReducer.setReducer overwrites the job output\nk-v, so I think this is safe.\n\nfixes #806\nfixes #826\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-15 01:10:51"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-15 02:12:19", "commitHash": "0c28ed51f4be7d8a178024d7b46bbcd11f05038b", "commitParents": ["35d229849825d7cecdda6a528908f379d642d5f1"], "commitGHEventType": "referenced", "nameRev": "0c28ed51f4be7d8a178024d7b46bbcd11f05038b tags/0.5.2~18^2~30", "commitGitStats": [{"insertions": 4, "lines": 8, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/HadoopPipeline.java", "deletions": 4}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.HadoopPipeline.submit(java.lang.String,java.lang.Boolean)"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.HadoopPipeline.submit()"}], "spoonFilePath": "HadoopPipeline.java"}], "commitMessage": "Making HadoopPipeline.submit return Tool status\n\nThis submit method is a thin wrapper around ToolRunner.run.\nToolRunner.run returns the integer exit status produced by the Tool\nimplementation it executes.  Prior to this commit, submit returned\nvoid and threw the status away.  Now the status is returned from\nsubmit.  This change is groundwork for a new integration test method\nrelated to #806 and #826 that will submit a HadoopPipeline that\nsubmits a typical graphson-to-sequencefile dump job and needs to know\nwhether the job succeeded.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-15 02:08:46"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-15 02:13:06", "commitHash": "c89cf724c754ea079bdbab1c8c2cbb23435299a8", "commitParents": ["0c28ed51f4be7d8a178024d7b46bbcd11f05038b"], "commitGHEventType": "referenced", "nameRev": "c89cf724c754ea079bdbab1c8c2cbb23435299a8 tags/0.5.2~18^2~29", "commitGitStats": [{"insertions": 19, "lines": 19, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/test/java/com/thinkaurelius/titan/hadoop/HadoopPipelineTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.HadoopPipelineTest.testGraphSONToSequenceFile()"}], "spoonFilePath": "HadoopPipelineTest.java"}], "commitMessage": "Adding a test single-map/no-reduce job\n\nThis test will detect a regression on #806 / #826.  I checked that it\nfailed when I locally reverted\n520e7c650e08ebc2d6b86bfa1515f032006259f4 (the commit that fixed this\nbug in manual testing).\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-15 02:13:06"}], "created": "2014-11-04 12:02:02"}, {"labels": ["bug"], "filteredCommits": ["c12d1ebecbf423d4b9ae0b468263af4109218a45", "e527d2b4ad16bcfd414d45ca4aaf90692c297501"], "url": "https://github.com/thinkaurelius/titan/issues/803", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"c12d1ebecbf423d4b9ae0b468263af4109218a45": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "e527d2b4ad16bcfd414d45ca4aaf90692c297501": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "13c07c80381e25ceeb8f7c194b4744a3c1f52f9b": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "25cf8f5b076fc74f817dd95b933cab8b7bbee89a": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "e97fbdb7a069c5a6fe7d74fd4333f701fa20ed2a": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "8ef3b971146347d1b7986192e7108f56d1e378ea": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "0a594bb052b36a57ffaf158dfdc3a18fa0bec332": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 14.000277777777777, "user": "dminkovsky", "changesInPackagesGIT": [], "body": "On, http://s3.thinkaurelius.com/docs/titan/0.5.1/getting-started.html, the \"Downloads\" link points to \"todo\". I'd submit a PR, but docs in the repo currently point to the wiki, which appears to be for 0.4. Wasn't sure where to find 0.5 docs\n", "filteredCommitsReason": {"duplicated": 5, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Download link on Getting Started points to \"todo\"", "statsSkippedReason": "", "closed": "2014-11-18 17:56:36", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-18 12:50:45", "commitHash": "c12d1ebecbf423d4b9ae0b468263af4109218a45", "commitParents": ["e8e7201de14cfdbb4c3c90b20419531b6d663cb9"], "commitGHEventType": "referenced", "nameRev": "c12d1ebecbf423d4b9ae0b468263af4109218a45 tags/0.5.2~18^2~12", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "docs/intro.txt", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "docs/acknowledgements.txt", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Change some github.com urls from master to titan05\n\nThis is prompted by #803.  I did a grep through all of the docs\n(recursive) for blob/master and found two hits.  A more elegant\nsolution would probably involve an AsciiDoc property that's centrally\ncontrolled to avoid repetition, but with only two references, I don't\nwant to go overboard.  Changed both to titan05 equivalents and checked\nthat the links were still live.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 12:50:45"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 20:43:37", "commitHash": "e527d2b4ad16bcfd414d45ca4aaf90692c297501", "commitParents": ["c1580c5c6d2c2ffd0ae1427d65aab10251e1a544"], "commitGHEventType": "referenced", "nameRev": "e527d2b4ad16bcfd414d45ca4aaf90692c297501 tags/0.9.0-M1~57", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "docs/intro.txt", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Fix \"todo\" download link in documentation\n\nFixes #803\n(cherry picked from commit 25cf8f5b076fc74f817dd95b933cab8b7bbee89a)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 11:39:48"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 12:52:50", "commitHash": "13c07c80381e25ceeb8f7c194b4744a3c1f52f9b", "commitParents": ["160856a5270fd802790c92d41de919eb8759420e"], "commitGHEventType": "referenced", "nameRev": "13c07c80381e25ceeb8f7c194b4744a3c1f52f9b remotes/origin/0.5.1_docs~3", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "docs/intro.txt", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "docs/acknowledgements.txt", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Change some github.com urls from master to titan05\n\nThis is prompted by #803.  I did a grep through all of the docs\n(recursive) for blob/master and found two hits.  A more elegant\nsolution would probably involve an AsciiDoc property that's centrally\ncontrolled to avoid repetition, but with only two references, I don't\nwant to go overboard.  Changed both to titan05 equivalents and checked\nthat the links were still live.\n(cherry picked from commit c12d1ebecbf423d4b9ae0b468263af4109218a45)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 12:50:45"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 11:41:34", "commitHash": "25cf8f5b076fc74f817dd95b933cab8b7bbee89a", "commitParents": ["a2149cec1d2d9b52b1bad596ef8cb1accdd2f3db"], "commitGHEventType": "referenced", "nameRev": "25cf8f5b076fc74f817dd95b933cab8b7bbee89a tags/0.5.2~18^2~17", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "docs/intro.txt", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Fix \"todo\" download link in documentation\n\nFixes #803\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 11:39:48"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 12:39:27", "commitHash": "e97fbdb7a069c5a6fe7d74fd4333f701fa20ed2a", "commitParents": ["495402f9a8d764aa03c66ae0dd58b18413d3558e"], "commitGHEventType": "referenced", "nameRev": "e97fbdb7a069c5a6fe7d74fd4333f701fa20ed2a remotes/origin/0.5.1_docs~6", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "docs/intro.txt", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Fix \"todo\" download link in documentation\n\nFixes #803\n(cherry picked from commit 25cf8f5b076fc74f817dd95b933cab8b7bbee89a)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 11:39:48"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 12:55:09", "commitHash": "8ef3b971146347d1b7986192e7108f56d1e378ea", "commitParents": ["98bc4630842f282d0b23e63aec9ea16d3d4df75b"], "commitGHEventType": "referenced", "nameRev": "8ef3b971146347d1b7986192e7108f56d1e378ea remotes/origin/0.5.0_docs~3", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "docs/intro.txt", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "docs/acknowledgements.txt", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Change some github.com urls from master to titan05\n\nThis is prompted by #803.  I did a grep through all of the docs\n(recursive) for blob/master and found two hits.  A more elegant\nsolution would probably involve an AsciiDoc property that's centrally\ncontrolled to avoid repetition, but with only two references, I don't\nwant to go overboard.  Changed both to titan05 equivalents and checked\nthat the links were still live.\n(cherry picked from commit c12d1ebecbf423d4b9ae0b468263af4109218a45)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 12:50:45"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 12:44:58", "commitHash": "0a594bb052b36a57ffaf158dfdc3a18fa0bec332", "commitParents": ["7314347b4d64e3721cb20973d76738e5a5c32277"], "commitGHEventType": "referenced", "nameRev": "0a594bb052b36a57ffaf158dfdc3a18fa0bec332 remotes/origin/0.5.0_docs~6", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "docs/intro.txt", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Fix \"todo\" download link in documentation\n\nFixes #803\n(cherry picked from commit 25cf8f5b076fc74f817dd95b933cab8b7bbee89a)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 11:39:48"}], "created": "2014-11-03 19:44:17"}, {"labels": ["bug"], "filteredCommits": ["ee67f0069d971aa8ffa88cf5b7231e7b1a38dd3d"], "url": "https://github.com/thinkaurelius/titan/issues/787", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 1, "lines": 1, "deletions": 1}, "numCommits": 1, "commits": {"ee67f0069d971aa8ffa88cf5b7231e7b1a38dd3d": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 29.00027777777778, "user": "skiefer", "changesInPackagesSPOON": ["com.thinkaurelius.titan.hadoop.compat.h1.Hadoop1Compiler.addConfiguration(org.apache.hadoop.conf.Configuration)"], "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-1/src/main/java/com/thinkaurelius/titan/hadoop/compat"], "body": "Since we are using Titan 0.5.1 we are getting many exceptions like the following in TitanHadoop:\n\n``` text\n2014-10-16 13:32:30.221  INFO 25498 [main] --- com.thinkaurelius.titan.diskstorage.configuration.BasicConfiguration : Ignored configuration entry for storage.hostname-0 since it does not map to an option\n\njava.lang.IllegalArgumentException: Unknown configuration element in namespace [root.storage]: hostname-0\n    at com.google.common.base.Preconditions.checkArgument(Preconditions.java:120)\n    at com.thinkaurelius.titan.diskstorage.configuration.ConfigElement.parse(ConfigElement.java:170)\n    at com.thinkaurelius.titan.diskstorage.configuration.BasicConfiguration.getAll(BasicConfiguration.java:80)\n    at com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.<init>(GraphDatabaseConfiguration.java:1319)\n    at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:91)\n    at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:81)\n    at com.thinkaurelius.titan.hadoop.formats.util.input.current.TitanHadoopSetupImpl.<init>(TitanHadoopSetupImpl.java:37)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n    at com.thinkaurelius.titan.util.system.ConfigurationUtil.instantiate(ConfigurationUtil.java:44)\n    at com.thinkaurelius.titan.hadoop.formats.util.TitanInputFormat.setConf(TitanInputFormat.java:44)\n    at com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraInputFormat.setConf(TitanCassandraInputFormat.java:53)\n    at org.apache.hadoop.util.ReflectionUtils.setConf(ReflectionUtils.java:62)\n    at org.apache.hadoop.util.ReflectionUtils.newInstance(ReflectionUtils.java:117)\n    at org.apache.hadoop.mapred.JobClient.writeNewSplits(JobClient.java:1051)\n    at org.apache.hadoop.mapred.JobClient.writeSplits(JobClient.java:1071)\n    at org.apache.hadoop.mapred.JobClient.access$700(JobClient.java:179)\n    at org.apache.hadoop.mapred.JobClient$2.run(JobClient.java:983)\n    at org.apache.hadoop.mapred.JobClient$2.run(JobClient.java:936)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at javax.security.auth.Subject.doAs(Subject.java:415)\n    at org.apache.hadoop.security.UserGroupInformation.doAs(UserGroupInformation.java:1190)\n    at org.apache.hadoop.mapred.JobClient.submitJobInternal(JobClient.java:936)\n    at org.apache.hadoop.mapreduce.Job.submit(Job.java:550)\n    at org.apache.hadoop.mapreduce.Job.waitForCompletion(Job.java:580)\n    at com.thinkaurelius.titan.hadoop.compat.h1.Hadoop1Compiler.run(Hadoop1Compiler.java:315)\n    at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:65)\n    at org.apache.hadoop.util.ToolRunner.run(ToolRunner.java:79)\n    at com.thinkaurelius.titan.hadoop.HadoopPipeline.submit(HadoopPipeline.java:1092)\n    at com.iqser.gin.batch.common.FaunusTasklet.execute(FaunusTasklet.java:92)\n    at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:406)\n    at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:330)\n    at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:133)\n    at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:271)\n    at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:77)\n    at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:368)\n    at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)\n    at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:144)\n    at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:257)\n    at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:198)\n    at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)\n    at org.springframework.batch.core.job.flow.JobFlowExecutor.executeStep(JobFlowExecutor.java:64)\n    at org.springframework.batch.core.job.flow.support.state.StepState.handle(StepState.java:67)\n    at org.springframework.batch.core.job.flow.support.SimpleFlow.resume(SimpleFlow.java:162)\n    at org.springframework.batch.core.job.flow.support.SimpleFlow.start(SimpleFlow.java:141)\n    at org.springframework.batch.core.job.flow.FlowJob.doExecute(FlowJob.java:134)\n    at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:304)\n    at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:135)\n    at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)\n    at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:128)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n    at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n    at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)\n    at com.sun.proxy.$Proxy42.run(Unknown Source)\n    at com.iqser.gin.batch.common.AbstractBatchIntegrationTest.executeJob(AbstractBatchIntegrationTest.java:41)\n    at com.iqser.gin.batch.BatchPatternJobIntegrationTest.launchJob(BatchPatternJobIntegrationTest.java:89)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:74)\n    at org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:83)\n    at org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:233)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n    at org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:71)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:176)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n\n2014-10-16 13:32:30.223  INFO 25498 [main] --- com.thinkaurelius.titan.diskstorage.configuration.BasicConfiguration : Ignored configuration entry for storage.port-0 since it does not map to an option\n```\n\nThis configuration is causing the errors:\n\n``` properties\nstorage.backend=cassandrathrift\nstorage.keyspace=titan\nstorage.port=9160\nstorage.hostname=127.0.0.1\n\nindex.search.backend=elasticsearch\nindex.search.hostname=127.0.0.1\n\ncache.db-cache = true\ncache.db-cache-clean-wait = 0\ncache.db-cache-time = 0\ncache.db-cache-size = 0.25\n\ntitan.hadoop.input.conf.storage.backend=cassandrathrift\ntitan.hadoop.input.conf.storage.hostname=localhost\ntitan.hadoop.input.conf.storage.port=9160\ntitan.hadoop.input.conf.storage.cassandra.keyspace=titan\ntitan.hadoop.input.conf.storage.batch-loading=true\ntitan.hadoop.input.infer-schema=true\ntitan.hadoop.output.conf.storage.backend=cassandrathrift\ntitan.hadoop.output.conf.storage.hostname=localhost\ntitan.hadoop.output.conf.storage.port=9160\ntitan.hadoop.output.conf.storage.cassandra.keyspace=titan\ntitan.hadoop.output.conf.storage.batch-loading=true\ntitan.hadoop.output.infer-schema=true\ntitan.hadoop.sideeffect.format=org.apache.hadoop.mapreduce.lib.output.TextOutputFormat\n\nmapreduce.jobtracker.staging.root.dir=target/tmp/jobtracker\n```\n\nIt seems that the \"-0\" is added in Hadoop1Compiler:\n\n``` java\n    private void addConfiguration(final Configuration configuration) {\n        for (final Map.Entry<String, String> entry : configuration) {\n            this.getConf().set(entry.getKey() + \"-\" + this.mapSequenceClasses.size(), entry.getValue()); // TODO why does this line exist?\n            this.getConf().set(entry.getKey(), entry.getValue());\n        }\n    }\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "spoonFilesChanged": 1, "MOV": 0}, "title": "\"Unknown configuration element in namespace\" in TitanHadoop 0.5.1", "statsSkippedReason": "", "closed": "2014-11-15 00:19:19", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-14 18:15:52", "commitHash": "ee67f0069d971aa8ffa88cf5b7231e7b1a38dd3d", "commitParents": ["5d6e3c5212177b96ff1d4a266f0fd57c785a6ee0"], "commitGHEventType": "referenced", "nameRev": "ee67f0069d971aa8ffa88cf5b7231e7b1a38dd3d tags/0.5.2~25", "commitGitStats": [{"insertions": 0, "lines": 1, "filePath": "titan-hadoop-parent/titan-hadoop-1/src/main/java/com/thinkaurelius/titan/hadoop/compat/h1/Hadoop1Compiler.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.compat.h1.Hadoop1Compiler.addConfiguration(org.apache.hadoop.conf.Configuration)"}], "spoonFilePath": "Hadoop1Compiler.java"}], "commitMessage": "Removed vestigial config keys from Hadoop1Compiler\n\nfixes #787\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-14 18:15:52"}], "created": "2014-10-16 13:39:24"}, {"labels": ["bug"], "filteredCommits": ["7243d05e0c7a4162d5750374fe02aa94b17a8850", "8fa00662730ec74089dc4dd604cb247f4dadafa9"], "url": "https://github.com/thinkaurelius/titan/issues/786", "gitStatsSummary": {"insertions": 39, "gitFilesChange": 4, "lines": 47, "deletions": 8}, "numCommits": 1, "commits": {"7243d05e0c7a4162d5750374fe02aa94b17a8850": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "8fa00662730ec74089dc4dd604cb247f4dadafa9": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 32.000277777777775, "user": "skiefer", "changesInPackagesSPOON": ["com.thinkaurelius.titan.hadoop.DefaultSchemaProvider", "com.thinkaurelius.titan.hadoop.FaunusElement.removeProperty(java.lang.String)", "com.thinkaurelius.titan.hadoop.FaunusSchemaManager.setSchemaProvider(com.thinkaurelius.titan.graphdb.schema.SchemaProvider)", "com.thinkaurelius.titan.hadoop.formats.util.input.current.TitanHadoopSetupImpl", "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.asBackupProvider(com.thinkaurelius.titan.hadoop.SchemaProvider,com.thinkaurelius.titan.hadoop.SchemaProvider).1.toString()", "com.thinkaurelius.titan.hadoop.FaunusSchemaManager.getRelationType(java.lang.String)", "com.thinkaurelius.titan.hadoop.FaunusSchemaManager", "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.asBackupProvider(com.thinkaurelius.titan.hadoop.SchemaProvider,com.thinkaurelius.titan.hadoop.SchemaProvider).1.getRelationType(java.lang.String)", "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.getPropertyKey(java.lang.String)", "com.thinkaurelius.titan.hadoop.FaunusElement.setProperty(java.lang.String,java.lang.Object)", "com.thinkaurelius.titan.hadoop.FaunusElement.getProperty(java.lang.String)", "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.getRelationType(java.lang.String)", "com.thinkaurelius.titan.pkgtest.FaunusCassandraIT.testGraphOfTheGodsWithVMRestart()", "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.getVertexLabel(java.lang.String)", "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.getEdgeLabel(java.lang.String)"], "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop", "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats"], "body": "While executing a simple TitanHadoop query (g.V.has(\"propertyName\")) the following NullPointerException occurs in TitanHadoopGraph:\n\n``` text\n2014-10-16 13:32:58.677  WARN 25498 [Thread-884] --- org.apache.hadoop.mapred.LocalJobRunner : job_local1082010068_0001\n\njava.lang.Exception: java.lang.RuntimeException: java.lang.NullPointerException\n    at org.apache.hadoop.mapred.LocalJobRunner$Job.run(LocalJobRunner.java:354)\njava.lang.RuntimeException: java.lang.NullPointerException\n    at com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.readHadoopVertex(TitanHadoopGraph.java:110)\n    at com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraHadoopGraph.readHadoopVertex(TitanCassandraHadoopGraph.java:30)\n    at com.thinkaurelius.titan.hadoop.formats.cassandra.TitanCassandraRecordReader.nextKeyValue(TitanCassandraRecordReader.java:50)\n    at org.apache.hadoop.mapred.MapTask$NewTrackingRecordReader.nextKeyValue(MapTask.java:531)\n    at org.apache.hadoop.mapreduce.MapContext.nextKeyValue(MapContext.java:67)\n    at org.apache.hadoop.mapreduce.Mapper.run(Mapper.java:144)\n    at org.apache.hadoop.mapred.MapTask.runNewMapper(MapTask.java:764)\n    at org.apache.hadoop.mapred.MapTask.run(MapTask.java:364)\n    at org.apache.hadoop.mapred.LocalJobRunner$Job$MapTaskRunnable.run(LocalJobRunner.java:223)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:262)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.NullPointerException: null\n    at com.thinkaurelius.titan.hadoop.StandardFaunusRelation.setProperty(StandardFaunusRelation.java:37)\n    at com.thinkaurelius.titan.hadoop.FaunusElement.setProperty(FaunusElement.java:266)\n    at com.thinkaurelius.titan.hadoop.formats.util.TitanHadoopGraph.readHadoopVertex(TitanHadoopGraph.java:97)\n    ... 13 common frames omitted\n```\n\nThe NullPointerException is thrown because the FaunusSchemaManager is not able to resolve properties we created via the TitanManagementSystem before the job runs.\n\n``` java\n...\nTitanManagement titanManagement = graph.getManagementSystem();\ntitanManagement.makePropertyKey(META_ATTRIBUTE_TYPE).dataType(String.class).make();\ntitanManagement.commit();\n...\n```\n\nWhen using Titan 0.5.0 the job runs without any problems.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 15, "UPD": 3, "TOT": 21, "DEL": 1, "INS": 16, "spoonFilesChanged": 5, "MOV": 1}, "title": "NullPointerException  in TitanHadoop 0.5.1", "statsSkippedReason": "", "closed": "2014-11-18 06:45:02", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-11 08:32:44", "commitHash": "7243d05e0c7a4162d5750374fe02aa94b17a8850", "commitParents": ["94446d5b1952bb6998c9f2d0e36dc13773331460"], "commitGHEventType": "referenced", "nameRev": "7243d05e0c7a4162d5750374fe02aa94b17a8850 tags/0.5.2~28", "commitGitStats": [{"insertions": 17, "lines": 20, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/FaunusSchemaManager.java", "deletions": 3}, {"insertions": 3, "lines": 6, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/FaunusElement.java", "deletions": 3}, {"insertions": 3, "lines": 4, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/util/input/current/TitanHadoopSetupImpl.java", "deletions": 1}, {"insertions": 16, "lines": 17, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/DefaultSchemaProvider.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.util.input.current.TitanHadoopSetupImpl"}], "spoonFilePath": "TitanHadoopSetupImpl.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.FaunusElement.removeProperty(java.lang.String)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.FaunusElement.getProperty(java.lang.String)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.FaunusElement.setProperty(java.lang.String,java.lang.Object)"}], "spoonFilePath": "FaunusElement.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.FaunusSchemaManager.setSchemaProvider(com.thinkaurelius.titan.graphdb.schema.SchemaProvider)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.FaunusSchemaManager"}, {"UPD": 0, "TOT": 4, "DEL": 0, "INS": 4, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.FaunusSchemaManager.getRelationType(java.lang.String)"}], "spoonFilePath": "FaunusSchemaManager.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 1, "INS": 2, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.asBackupProvider(com.thinkaurelius.titan.hadoop.SchemaProvider,com.thinkaurelius.titan.hadoop.SchemaProvider).1.getRelationType(java.lang.String)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.getPropertyKey(java.lang.String)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.getRelationType(java.lang.String)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.asBackupProvider(com.thinkaurelius.titan.hadoop.SchemaProvider,com.thinkaurelius.titan.hadoop.SchemaProvider).1.toString()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.getVertexLabel(java.lang.String)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.DefaultSchemaProvider.getEdgeLabel(java.lang.String)"}], "spoonFilePath": "DefaultSchemaProvider.java"}], "commitMessage": "Use Titan SchemaContainer in Faunus's InputFormat\n\nPossible fix for #786.  This could also make several calls to\nsetSchemaProvider in the test code redundant.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-11 08:32:44"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-18 01:37:37", "commitHash": "8fa00662730ec74089dc4dd604cb247f4dadafa9", "commitParents": ["502528c9843c2fa31ce1ed142dd3f4e2a4cfe58a"], "commitGHEventType": "referenced", "nameRev": "8fa00662730ec74089dc4dd604cb247f4dadafa9 tags/0.5.2~18^2~24", "commitGitStats": [{"insertions": 77, "lines": 77, "filePath": "titan-dist/src/test/expect/faunus-cassandra-vm-restart.expect.vm", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "titan-dist/src/test/java/com/thinkaurelius/titan/pkgtest/FaunusCassandraIT.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.pkgtest.FaunusCassandraIT.testGraphOfTheGodsWithVMRestart()"}], "spoonFilePath": "FaunusCassandraIT.java"}], "commitMessage": "Adding test for #786\n\nThis test runs in the aurelius-release profile.  I implemented it as\nan Expect-based integration test in titan-dist because that was the\nmost straightward approach within the existing test harness that\nallowed for restarting the JVM in the middle of the test logic, which\nis necessary to catch a regression on this particular bug.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-18 01:37:37"}], "created": "2014-10-16 13:00:41"}, {"labels": ["bug"], "filteredCommits": ["d71100e92d1a2879d0a63409b40273b28e24a2ee"], "url": "https://github.com/thinkaurelius/titan/issues/785", "gitStatsSummary": {"insertions": 2, "gitFilesChange": 1, "lines": 4, "deletions": 2}, "numCommits": 1, "commits": {"d71100e92d1a2879d0a63409b40273b28e24a2ee": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "8a6df3d3a393b5a86b25e7b0c18ed1717324c793": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 28.00027777777778, "user": "miechus", "changesInPackagesSPOON": ["com.thinkaurelius.titan.core.util.ReflectiveConfigOptionLoader.loadStandard(java.lang.Class)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/core/util"], "body": "When starting Titan 0.5.1 with only part of the dependencies (i.e. titan-cassandra without titan-hbase), an error is thrown in the log:\n\n java.lang.NoClassDefFoundError: org/apache/hadoop/hbase/ZooKeeperConnectionException\n\nThis is caused by the ReflectiveConfigOptionLoader.loadStandard() method which includes classes from all Titan dependencies such as Berkeley, HBase and Cassandra. To hack around this issue we had to include all the dependencies so that classes included in the loadStandard() method are available in the class loader.\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "spoonFilesChanged": 1, "MOV": 0}, "title": "NoClassDefFound errors in 0.5.1 startup when not all titan dependencies are included", "statsSkippedReason": "", "closed": "2014-11-12 23:35:45", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-10-15 10:54:36", "commitHash": "d71100e92d1a2879d0a63409b40273b28e24a2ee", "commitParents": ["3086753e660f271619e587769f9934cf8a45157f"], "commitGHEventType": "referenced", "nameRev": "d71100e92d1a2879d0a63409b40273b28e24a2ee tags/0.5.2~31^2~8", "commitGitStats": [{"insertions": 2, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/core/util/ReflectiveConfigOptionLoader.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.core.util.ReflectiveConfigOptionLoader.loadStandard(java.lang.Class)"}], "spoonFilePath": "ReflectiveConfigOptionLoader.java"}], "commitMessage": "Catch Throwable in ReflectiveConfigOptionLoader\n\nFor #785\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-10-15 10:54:36"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 19:27:19", "commitHash": "8a6df3d3a393b5a86b25e7b0c18ed1717324c793", "commitParents": ["312a0f5e69b1ef6fc60dedca2bdbf5dcc42dadc8"], "commitGHEventType": "referenced", "nameRev": "8a6df3d3a393b5a86b25e7b0c18ed1717324c793 tags/0.9.0-M1~71", "commitGitStats": [{"insertions": 2, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/core/util/ReflectiveConfigOptionLoader.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.core.util.ReflectiveConfigOptionLoader.loadStandard(java.lang.Class)"}], "spoonFilePath": "ReflectiveConfigOptionLoader.java"}], "commitMessage": "Catch Throwable in ReflectiveConfigOptionLoader\n\nFor #785\n(cherry picked from commit d71100e92d1a2879d0a63409b40273b28e24a2ee)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-10-15 10:54:36"}], "created": "2014-10-15 00:52:32"}, {"labels": ["bug"], "filteredCommits": ["18f44383dc18968930bac6c36822e0b68012d8c6", "b1635dcaf0754dcbf1d8dac84e4795b5c6f235ea", "f47ee136822d006598b5d059a800ff7ccd48965f", "c995eda1f08335ec0795e634ee266e74802d251a", "de721bebfe7721d8db762853c39389e4efa77251", "bfcc99dbd71e90f4a2a17b24cf02ab484bf89396"], "url": "https://github.com/thinkaurelius/titan/issues/784", "gitStatsSummary": {"insertions": 28, "gitFilesChange": 4, "lines": 152, "deletions": 124}, "numCommits": 2, "commits": {"18f44383dc18968930bac6c36822e0b68012d8c6": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "c995eda1f08335ec0795e634ee266e74802d251a": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "b1635dcaf0754dcbf1d8dac84e4795b5c6f235ea": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "e9f5edd783049591ec0c94c4f72f2d0e695e4a94": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "bfcc99dbd71e90f4a2a17b24cf02ab484bf89396": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "f97c5b6e04a91767a5126a3aa1ca31fe1de5832c": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "de721bebfe7721d8db762853c39389e4efa77251": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "f47ee136822d006598b5d059a800ff7ccd48965f": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 36.000277777777775, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Imports", "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console"], "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop", "titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/gremlin"], "body": "titan-solr brought ASM 4.1 back into the Titan dependency tree.  This is going to be more delicate to resolve than with kryo-shaded, since the solr-core artifact on Maven Central does not use a shaded ASM.  Ideally we want a single fix that works not just in the zipfile but also interops with the solr-core artifact on Central.  Not sure that's even possible without putting an onerous runtime environment requirement on the user (container).\n\n```\nException in thread \"main\" java.lang.VerifyError: class org.codehaus.groovy.runtime.callsite.GroovySunClassLoader$2 overrides final method visit.(IILjava/lang/String;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;)V\n        at java.lang.ClassLoader.defineClass1(Native Method)\n        at java.lang.ClassLoader.defineClass(ClassLoader.java:760)\n        at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n        at java.net.URLClassLoader.defineClass(URLClassLoader.java:455)\n        at java.net.URLClassLoader.access$100(URLClassLoader.java:73)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:367)\n        at java.net.URLClassLoader$1.run(URLClassLoader.java:361)\n        at java.security.AccessController.doPrivileged(Native Method)\n        at java.net.URLClassLoader.findClass(URLClassLoader.java:360)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n        at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)\n        at java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n        at org.codehaus.groovy.runtime.callsite.CallSiteGenerator.isCompilable(CallSiteGenerator.java:245)\n        at org.codehaus.groovy.reflection.CachedMethod.createStaticMetaMethodSite(CachedMethod.java:284)\n        at org.codehaus.groovy.runtime.callsite.StaticMetaMethodSite.createStaticMetaMethodSite(StaticMetaMethodSite.java:111)\n        at groovy.lang.MetaClassImpl.createStaticSite(MetaClassImpl.java:3034)\n        at org.codehaus.groovy.runtime.callsite.CallSiteArray.createCallStaticSite(CallSiteArray.java:61)\n        at org.codehaus.groovy.runtime.callsite.CallSiteArray.createCallSite(CallSiteArray.java:146)\n        at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n        at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)\n        at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:112)\n        at org.codehaus.groovy.tools.shell.Groovysh.<clinit>(Groovysh.groovy:40)\n        at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.<init>(Console.java:37)\n        at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.<init>(Console.java:70)\n        at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.main(Console.java:75)\n```\n", "filteredCommitsReason": {"duplicated": 2, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 6.0, "TOT": 12.0, "DEL": 1.0, "INS": 1.0, "spoonFilesChanged": 2, "MOV": 4.0}, "title": "Shade or otherwise fix ASM 4.x and 3.x conflict in 0.5.1", "statsSkippedReason": "", "closed": "2014-11-20 11:28:43", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-21 10:16:51", "commitHash": "18f44383dc18968930bac6c36822e0b68012d8c6", "commitParents": ["de721bebfe7721d8db762853c39389e4efa77251"], "commitGHEventType": "referenced", "nameRev": "18f44383dc18968930bac6c36822e0b68012d8c6 tags/0.5.2~17^2~1", "commitGitStats": [{"insertions": 4, "lines": 49, "filePath": "titan-core/pom.xml", "deletions": 45}], "commitSpoonAstDiffStats": [], "commitMessage": "Move shaded Groovy + ASM classes to external jar\n\nThis removes the shaded copy of Groovy 1.8.9 and ASM 3.2 introduced to\ntitan-core in bfcc99dbd71e90f4a2a17b24cf02ab484bf89396.  That worked\nfine in the Maven build, tests, and in Rexster and gremlin.sh testing\nfrom the zip archives (in other words, substantially everywhere), but\nIDEA refused to compile the Groovy classes in this configuration.  The\nMaven build worked; only IDEA failed to build.  It seemed to ignore\nthe shade plugin config in titan-core, manually compiling just\ntitan-core/src/main but leaving out the Groovy and ASM classes,\nresulting in NoClassDefFound on groovy.lang.GroovyObject when building\nthe other modules.\n\nIt's possible to work around this IDEA limitation by manually adding\nGroovy 1.8.9 as a global library or as a project library in all the\naffected modules.  IDEA does build the project in that case.  But I\ndon't like that approach, since it means IDEA and Maven tests will use\ndifferent copies of the Groovy runtime.\n\nIn an attempt to placate IDEA and while trying to keep testing as\nuniform as possible between Maven and IDEA, I pushed the shaded Groovy\n+ ASM classes out to their own artifact now published to central,\nnamed groovy-shaded-asm.  This moots IDEA's inability to comprehend\nthe shade plugin config in titan-core, since titan-core is no longer\nresponsible for shading (it's done in this new artifact).\n\nThis is all related to #784.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-21 10:16:51"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 20:48:55", "commitHash": "c995eda1f08335ec0795e634ee266e74802d251a", "commitParents": ["181c380661939d2b38ed015068ba73c59ceb3b8e"], "commitGHEventType": "referenced", "nameRev": "c995eda1f08335ec0795e634ee266e74802d251a tags/0.9.0-M1~50", "commitGitStats": [{"insertions": 7, "lines": 14, "filePath": "pom.xml", "deletions": 7}], "commitSpoonAstDiffStats": [], "commitMessage": "Update Jersey version from 1.17 to 1.18.2\n\nThis is related to #784.  1.17 depends on an unshaded copy of ASM 3.2.\n1.18.2 drops the unshaded ASM dependency in favor of carrying its own\nshaded copy of the ASM classfiles.  I'm not certain Rexster will\ntolerate this.\n(cherry picked from commit e9f5edd783049591ec0c94c4f72f2d0e695e4a94)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-19 08:04:29"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-19 08:43:04", "commitHash": "b1635dcaf0754dcbf1d8dac84e4795b5c6f235ea", "commitParents": ["f47ee136822d006598b5d059a800ff7ccd48965f"], "commitGHEventType": "referenced", "nameRev": "b1635dcaf0754dcbf1d8dac84e4795b5c6f235ea tags/0.5.2~18^2~7", "commitGitStats": [{"insertions": 45, "lines": 50, "filePath": "pom.xml", "deletions": 5}, {"insertions": 12, "lines": 14, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop/gremlin/Imports.java", "deletions": 2}, {"insertions": 0, "lines": 5, "filePath": "titan-test/pom.xml", "deletions": 5}, {"insertions": 0, "lines": 99, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/gremlin/Console.java", "deletions": 99}, {"insertions": 3, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/gremlin/Imports.java", "deletions": 3}, {"insertions": 5, "lines": 8, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop/gremlin/Console.java", "deletions": 3}, {"insertions": 31, "lines": 33, "filePath": "titan-core/pom.xml", "deletions": 2}, {"insertions": 0, "lines": 5, "filePath": "titan-hadoop-parent/pom.xml", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Imports"}], "spoonFilePath": "Imports.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 3, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console"}], "spoonFilePath": "Console.java"}], "commitMessage": "Attempt upgrade to Groovy 2.3.7\n\nThis is part of #784.  This commit overrides the Groovy version from\n1.8.9 (what TP 2.5.0 compiled against and wants at runtime, but which\ndepends on unshaded ASM 3.x) to 2.3.7, which uses a shaded copy of ASM\nbuilt with the jarjar utility.  This is not ideal.  I recompiled\ngremlin-groovy against 2.3.7 and ran the test suite, which passed, but\nthe Console class required some changes on account of the jline\nupgrade (1.x to 2.x involved some backwards-incompatible changes to\njline's history package).  There could be complications here that I'm\nnot seeing yet.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-19 08:25:04"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-21 04:12:13", "commitHash": "de721bebfe7721d8db762853c39389e4efa77251", "commitParents": ["bfcc99dbd71e90f4a2a17b24cf02ab484bf89396"], "commitGHEventType": "referenced", "nameRev": "de721bebfe7721d8db762853c39389e4efa77251 tags/0.5.2~17^2~2", "commitGitStats": [{"insertions": 9, "lines": 9, "filePath": "titan-test/pom.xml", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Add groovy-all titan-test dependency for IDEA\n\nThis new dependency has scope=provided.  Prior to this commit, Maven\nbuilt the project without error, but IDEA seemed to get confused by\nsome of the changes in #784, and refused to build titan-test with the\nerror message \"no groovy library is defined for module\".\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-21 04:12:13"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-20 04:02:44", "commitHash": "bfcc99dbd71e90f4a2a17b24cf02ab484bf89396", "commitParents": ["db612b573886de4cad003837104533d847413b95"], "commitGHEventType": "referenced", "nameRev": "bfcc99dbd71e90f4a2a17b24cf02ab484bf89396 tags/0.5.2~18^2", "commitGitStats": [{"insertions": 35, "lines": 108, "filePath": "pom.xml", "deletions": 73}, {"insertions": 7, "lines": 7, "filePath": "titan-dist/pom.xml", "deletions": 0}, {"insertions": 3, "lines": 6, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/tinkerpop/gremlin/Imports.java", "deletions": 3}, {"insertions": 2, "lines": 11, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop/gremlin/Imports.java", "deletions": 9}, {"insertions": 53, "lines": 68, "filePath": "titan-core/pom.xml", "deletions": 15}, {"insertions": 3, "lines": 8, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/tinkerpop/gremlin/Console.java", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Imports"}], "spoonFilePath": "Imports.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 3, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console"}], "spoonFilePath": "Console.java"}], "commitMessage": "Use Groovy 1.8.9 with shaded ASM 3.x\n\nThis is part of #784.  This effectively reverts\nb1635dcaf0754dcbf1d8dac84e4795b5c6f235ea, which upgraded from Groovy\n1.8.9 to 2.3.7.  This commit also configures the shade plugin in\ntitan-core to hide Groovy 1.8.9's required copy of ASM 3.x under the\npackage prefix com.thinkaurelius.shaded.groovy.asm.  Since the Groovy\n1.8.9 classfiles also need to be rewritten to use the shaded package\nname at every ASM type reference and method callsite, titan-core now\nincludes a copy of Groovy 1.8.9.  The package for Groovy's classes is\nunchanged to maintain compatibility with client code in Rexster and\nGremlin-Groovy.  Only ASM has moved.\n\nFurthermore, this commit adds a new maven-enforcer-plugin execution in\nthe top-level pom.  This execution bans dependencies on the ASM 3.x\nartifacts.  ASM 4.x+ is still allowed (since it uses a different\ngroupId than the 3.x series).  If this enforcer execution finds an ASM\n3.x dep, it will fail the Maven build.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-20 04:02:44"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-19 08:08:37", "commitHash": "f47ee136822d006598b5d059a800ff7ccd48965f", "commitParents": ["e9f5edd783049591ec0c94c4f72f2d0e695e4a94"], "commitGHEventType": "referenced", "nameRev": "f47ee136822d006598b5d059a800ff7ccd48965f tags/0.5.2~18^2~8", "commitGitStats": [{"insertions": 1, "lines": 3, "filePath": "pom.xml", "deletions": 2}], "commitSpoonAstDiffStats": [], "commitMessage": "Upgrading Avro version\n\nThis is part of #784.  The Avro version managed in the top-level pom\nprior to this commit, 1.4.1, depended on paranamer, which in turn\ndepended on an unshaded copy of ASM 3.2:\n\n[INFO] +- org.apache.hadoop:hadoop-client:jar:2.2.0:compile\n[INFO] |  \\- org.apache.hadoop:hadoop-common:jar:2.2.0:compile\n[INFO] |     \\- org.apache.avro:avro:jar:1.4.1:compile (version managed from 1.7.4)\n[INFO] |        \\- com.thoughtworks.paranamer:paranamer-ant:jar:2.2:compile\n[INFO] |           \\- com.thoughtworks.paranamer:paranamer-generator:jar:2.2:compile\n[INFO] |              \\- (asm:asm:jar:3.1:compile - version managed from 3.2; omitted for duplicate)\n\nThis commit updates to Avro 1.7.4, which depends on a different\nparanamer version that apparently no longer requires unshaded ASM,\nthough I don't know whether that's because paranamer stopped using ASM\nor whether they've got a shaded and repackaged copy of it somewhere in\ntheir artifacts.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-19 08:08:37"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-19 08:04:29", "commitHash": "e9f5edd783049591ec0c94c4f72f2d0e695e4a94", "commitParents": ["b48f1e00c2b66ba4d92f4c8ea6c788cd709c32a8"], "commitGHEventType": "referenced", "nameRev": "e9f5edd783049591ec0c94c4f72f2d0e695e4a94 tags/0.5.2~18^2~9", "commitGitStats": [{"insertions": 7, "lines": 14, "filePath": "pom.xml", "deletions": 7}], "commitSpoonAstDiffStats": [], "commitMessage": "Update Jersey version from 1.17 to 1.18.2\n\nThis is related to #784.  1.17 depends on an unshaded copy of ASM 3.2.\n1.18.2 drops the unshaded ASM dependency in favor of carrying its own\nshaded copy of the ASM classfiles.  I'm not certain Rexster will\ntolerate this.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-19 08:04:29"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 20:49:23", "commitHash": "f97c5b6e04a91767a5126a3aa1ca31fe1de5832c", "commitParents": ["c995eda1f08335ec0795e634ee266e74802d251a"], "commitGHEventType": "referenced", "nameRev": "f97c5b6e04a91767a5126a3aa1ca31fe1de5832c tags/0.9.0-M1~49", "commitGitStats": [{"insertions": 1, "lines": 3, "filePath": "pom.xml", "deletions": 2}], "commitSpoonAstDiffStats": [], "commitMessage": "Upgrading Avro version\n\nThis is part of #784.  The Avro version managed in the top-level pom\nprior to this commit, 1.4.1, depended on paranamer, which in turn\ndepended on an unshaded copy of ASM 3.2:\n\n[INFO] +- org.apache.hadoop:hadoop-client:jar:2.2.0:compile\n[INFO] |  \\- org.apache.hadoop:hadoop-common:jar:2.2.0:compile\n[INFO] |     \\- org.apache.avro:avro:jar:1.4.1:compile (version managed from 1.7.4)\n[INFO] |        \\- com.thoughtworks.paranamer:paranamer-ant:jar:2.2:compile\n[INFO] |           \\- com.thoughtworks.paranamer:paranamer-generator:jar:2.2:compile\n[INFO] |              \\- (asm:asm:jar:3.1:compile - version managed from 3.2; omitted for duplicate)\n\nThis commit updates to Avro 1.7.4, which depends on a different\nparanamer version that apparently no longer requires unshaded ASM,\nthough I don't know whether that's because paranamer stopped using ASM\nor whether they've got a shaded and repackaged copy of it somewhere in\ntheir artifacts.\n(cherry picked from commit f47ee136822d006598b5d059a800ff7ccd48965f)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-19 08:08:37"}], "created": "2014-10-14 22:55:57"}, {"labels": ["bug"], "filteredCommits": ["f8f8204d8a6ba44a589032f00a8067330748e3e3"], "url": "https://github.com/thinkaurelius/titan/issues/782", "gitStatsSummary": {"insertions": 3, "gitFilesChange": 2, "lines": 5, "deletions": 2}, "numCommits": 1, "commits": {"f8f8204d8a6ba44a589032f00a8067330748e3e3": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}, "4d4700f2228f768450954df98aa8af68df125e2f": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 40.000277777777775, "user": "ccoffey", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.query.vertex.VertexLongList.iterator().1.next()", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.VertexConstructor.get(java.lang.Long)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/vertex"], "body": "Version: [Titan 0.5.1 with Hadoop 2](http://s3.thinkaurelius.com/downloads/titan/titan-0.5.1-hadoop2.zip)\n\nSteps the recreate the problem.\ngremlin> g = TitanFactory.open('conf/titan-berkeleydb-es.properties')\n==>titangraph[berkeleyje:/home/cathalc/Desktop/titan-0.5.1-hadoop2/conf/../db/berkeley]\ngremlin> GraphOfTheGodsFactory.load(g)\n==>null\ngremlin> h = g.V.has('name','hercules').next()\n==>v[1536]\ngremlin> h.query().labels('battled').direction(OUT).orderBy('time',Order.DESC).limit(10).vertices()._().name\n==>cerberus\n==>hydra\n==>nemean\njava.lang.IllegalArgumentException\nDisplay stack trace? [yN] y\njava.lang.IllegalArgumentException\n        at com.google.common.base.Preconditions.checkArgument(Preconditions.java:77)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$VertexConstructor.get(StandardTitanTx.java:419)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$VertexConstructor.get(StandardTitanTx.java:408)\n        at com.thinkaurelius.titan.graphdb.transaction.vertexcache.GuavaVertexCache.get(GuavaVertexCache.java:65)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getInternalVertex(StandardTitanTx.java:405)\n        at com.thinkaurelius.titan.graphdb.query.vertex.VertexLongList.get(VertexLongList.java:53)\n        at com.thinkaurelius.titan.graphdb.query.vertex.VertexLongList$1.next(VertexLongList.java:124)\n        at com.thinkaurelius.titan.graphdb.query.vertex.VertexLongList$1.next(VertexLongList.java:112)\n        at com.tinkerpop.pipes.util.iterators.HistoryIterator.next(HistoryIterator.java:25)\n        at com.tinkerpop.pipes.IdentityPipe.processNextStart(IdentityPipe.java:19)\n        at com.tinkerpop.pipes.AbstractPipe.next(AbstractPipe.java:89)\n        at com.tinkerpop.pipes.transform.PropertyPipe.processNextStart(PropertyPipe.java:29)\n        at com.tinkerpop.pipes.AbstractPipe.hasNext(AbstractPipe.java:98)\n        at com.tinkerpop.pipes.util.Pipeline.hasNext(Pipeline.java:105)\n        at com.tinkerpop.pipes.transform.ToStringPipe.processNextStart(ToStringPipe.java:24)\n        at com.tinkerpop.pipes.transform.ToStringPipe.processNextStart(ToStringPipe.java:16)\n        at com.tinkerpop.pipes.AbstractPipe.hasNext(AbstractPipe.java:98)\n        at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.ResultHookClosure.call(ResultHookClosure.java:52)\n        at groovy.lang.Closure.call(Closure.java:428)\n        at sun.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:483)\n        at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:231)\n        at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:64)\n        at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)\n        at org.codehaus.groovy.tools.shell.Groovysh.setLastResult(Groovysh.groovy:324)\n        at org.codehaus.groovy.tools.shell.Groovysh.this$3$setLastResult(Groovysh.groovy)\n        at sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:483)\n        at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n        at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n        at groovy.lang.MetaClassImpl.setProperty(MetaClassImpl.java:2416)\n        at groovy.lang.MetaClassImpl.setProperty(MetaClassImpl.java:3347)\n        at org.codehaus.groovy.tools.shell.Shell.setProperty(Shell.groovy)\n        at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.setGroovyObjectProperty(ScriptBytecodeAdapter.java:528)\n        at org.codehaus.groovy.tools.shell.Groovysh.execute(Groovysh.groovy:152)\n        at org.codehaus.groovy.tools.shell.Shell.leftShift(Shell.groovy:114)\n        at org.codehaus.groovy.tools.shell.Shell$leftShift$0.call(Unknown Source)\n        at org.codehaus.groovy.tools.shell.ShellRunner.work(ShellRunner.groovy:88)\n        at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$work(InteractiveShellRunner.groovy)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:483)\n        at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n        at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n        at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n        at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n        at org.codehaus.groovy.tools.shell.InteractiveShellRunner.work(InteractiveShellRunner.groovy:100)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:483)\n        at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:272)\n        at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:52)\n        at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:137)\n        at org.codehaus.groovy.tools.shell.ShellRunner.run(ShellRunner.groovy:57)\n        at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$run(InteractiveShellRunner.groovy)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:483)\n        at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n        at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n        at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n        at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n        at org.codehaus.groovy.tools.shell.InteractiveShellRunner.run(InteractiveShellRunner.groovy:66)\n        at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.<init>(Console.java:61)\n        at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.<init>(Console.java:70)\n        at com.thinkaurelius.titan.hadoop.tinkerpop.gremlin.Console.main(Console.java:75)\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 1, "TOT": 4, "DEL": 1, "INS": 1, "spoonFilesChanged": 2, "MOV": 1}, "title": "java.lang.IllegalArgumentException when executing example in Titan documentation", "statsSkippedReason": "", "closed": "2014-11-21 19:40:36", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2014-11-21 11:39:28", "commitHash": "f8f8204d8a6ba44a589032f00a8067330748e3e3", "commitParents": ["5e25600c15f7f2f5ca435212db9e125c3e12f923"], "commitGHEventType": "referenced", "nameRev": "f8f8204d8a6ba44a589032f00a8067330748e3e3 tags/0.5.2~16", "commitGitStats": [{"insertions": 1, "lines": 3, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 2}, {"insertions": 2, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/vertex/VertexLongList.java", "deletions": 0}, {"insertions": 28, "lines": 32, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/VertexListTest.java", "deletions": 4}, {"insertions": 4, "lines": 9, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 12, "DEL": 3, "INS": 9, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.VertexListTest.testLists()"}], "spoonFilePath": "VertexListTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.VertexConstructor.get(java.lang.Long)"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanIndexTest.assertGraphOfTheGods(com.thinkaurelius.titan.graphdb.TitanGraph)"}, {"UPD": 0, "TOT": 3, "DEL": 3, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanIndexTest.testGraphOfTheGods()"}], "spoonFilePath": "TitanIndexTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.vertex.VertexLongList.iterator().1.next()"}], "spoonFilePath": "VertexLongList.java"}], "commitMessage": "Fixes #782 and adds some test coverage for VertexList implementations.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-21 11:39:28"}, {"commitUser": "mbroecheler", "commitDateTime": "2014-11-24 23:19:19", "commitHash": "4d4700f2228f768450954df98aa8af68df125e2f", "commitParents": ["2beffb4767bcaab8cdfb54dbcb08c819c0a8dd3c"], "commitGHEventType": "referenced", "nameRev": "4d4700f2228f768450954df98aa8af68df125e2f tags/0.9.0-M1~41", "commitGitStats": [{"insertions": 1, "lines": 3, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 2}, {"insertions": 2, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/vertex/VertexLongList.java", "deletions": 0}, {"insertions": 28, "lines": 32, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/VertexListTest.java", "deletions": 4}, {"insertions": 4, "lines": 10, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "deletions": 6}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 12, "DEL": 3, "INS": 9, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.VertexListTest.testLists()"}], "spoonFilePath": "VertexListTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.VertexConstructor.get(java.lang.Long)"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanIndexTest.assertGraphOfTheGods(com.thinkaurelius.titan.graphdb.TitanGraph)"}, {"UPD": 0, "TOT": 3, "DEL": 3, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanIndexTest.testGraphOfTheGods()"}], "spoonFilePath": "TitanIndexTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.vertex.VertexLongList.iterator().1.next()"}], "spoonFilePath": "VertexLongList.java"}], "commitMessage": "Fixes #782 and adds some test coverage for VertexList implementations.\n(cherry picked from commit f8f8204d8a6ba44a589032f00a8067330748e3e3)\n\nConflicts:\n\ttitan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-21 11:39:28"}], "created": "2014-10-12 13:00:27"}, {"labels": ["bug"], "filteredCommits": ["5d6e3c5212177b96ff1d4a266f0fd57c785a6ee0"], "url": "https://github.com/thinkaurelius/titan/issues/781", "gitStatsSummary": {"insertions": 19, "gitFilesChange": 2, "lines": 52, "deletions": 33}, "numCommits": 1, "commits": {"5d6e3c5212177b96ff1d4a266f0fd57c785a6ee0": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "91e762bccc8de3a1b2ef2dea53d22bc3f56c7905": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 34.000277777777775, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.es.ElasticSearchConstants", "com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.checkExpectedClientVersion()", "com.thinkaurelius.titan.diskstorage.es.ElasticSearchConstants.getExpectedVersionReflectively(java.lang.String)"], "changesInPackagesGIT": ["titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es"], "body": "`ElasticsearchIndex.checkExpectedClientValue` attempts to get the `Version` enum value corresponding to the version against which Titan was compiled, then compare it against the current `Version`.  This prevents downgrades to older Elasticsearch versions without recompiling Titan, since  there will be no enum value corresponding to the version against which Titan was compiled in that scenario.\n\nTwo things need to change:\n1. `checkExpectedClientValue` needs to be guarded by a try-catchall block\n2. the comparison between `Version` enum values should be changed to an equivalent string comparison.  Instead of using `Version.CURRENT`, use `Version.CURRENT.toString` and the `es.version` sting read out of `titan-es.properties`.\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 3, "UPD": 3, "TOT": 15, "DEL": 5, "INS": 2, "spoonFilesChanged": 2, "MOV": 5}, "title": "Stringify ElasticSearchContstants.ES_VERSION_EXPECTED", "statsSkippedReason": "", "closed": "2014-11-15 00:18:59", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-11-14 17:50:58", "commitHash": "5d6e3c5212177b96ff1d4a266f0fd57c785a6ee0", "commitParents": ["736d050e5e924fbde3a59e83520e55c02fbda088"], "commitGHEventType": "referenced", "nameRev": "5d6e3c5212177b96ff1d4a266f0fd57c785a6ee0 tags/0.5.2~26", "commitGitStats": [{"insertions": 15, "lines": 20, "filePath": "titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es/ElasticSearchIndex.java", "deletions": 5}, {"insertions": 4, "lines": 32, "filePath": "titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es/ElasticSearchConstants.java", "deletions": 28}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 9, "DEL": 1, "INS": 2, "MOV": 4, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.checkExpectedClientVersion()"}], "spoonFilePath": "ElasticSearchIndex.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 5, "DEL": 3, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchConstants"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchConstants.getExpectedVersionReflectively(java.lang.String)"}], "spoonFilePath": "ElasticSearchConstants.java"}], "commitMessage": "Make ES client version check defensive\n\nfixes #781\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-14 17:50:58"}, {"commitUser": "dalaro", "commitDateTime": "2014-11-24 19:30:20", "commitHash": "91e762bccc8de3a1b2ef2dea53d22bc3f56c7905", "commitParents": ["15132b905deeab35d12be7213e6046ee5039c489"], "commitGHEventType": "referenced", "nameRev": "91e762bccc8de3a1b2ef2dea53d22bc3f56c7905 tags/0.9.0-M1~62", "commitGitStats": [{"insertions": 15, "lines": 20, "filePath": "titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es/ElasticSearchIndex.java", "deletions": 5}, {"insertions": 4, "lines": 32, "filePath": "titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es/ElasticSearchConstants.java", "deletions": 28}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 9, "DEL": 1, "INS": 2, "MOV": 4, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.checkExpectedClientVersion()"}], "spoonFilePath": "ElasticSearchIndex.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 5, "DEL": 3, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchConstants"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchConstants.getExpectedVersionReflectively(java.lang.String)"}], "spoonFilePath": "ElasticSearchConstants.java"}], "commitMessage": "Make ES client version check defensive\n\nfixes #781\n(cherry picked from commit 5d6e3c5212177b96ff1d4a266f0fd57c785a6ee0)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-14 17:50:58"}], "created": "2014-10-11 04:42:16"}, {"labels": ["bug"], "filteredCommits": ["47ee32a2856c30e03e2fb8eeab245d1ba2a03569"], "url": "https://github.com/thinkaurelius/titan/issues/774", "gitStatsSummary": {"insertions": 50, "gitFilesChange": 2, "lines": 122, "deletions": 72}, "numCommits": 1, "commits": {"47ee32a2856c30e03e2fb8eeab245d1ba2a03569": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 2.000277777777778, "user": "dalaro", "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-core/src/assembly/example-data/IncrementalLoading.groovy", "titan-hadoop-parent/titan-hadoop-core/src/assembly/example-data/BlueprintsScript.groovy"], "body": "Should match current docs\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Update examples/BlueprintsScript.groovy", "statsSkippedReason": "", "closed": "2014-10-09 02:32:04", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-10-06 18:22:20", "commitHash": "47ee32a2856c30e03e2fb8eeab245d1ba2a03569", "commitParents": ["f6e44efd078981d8390d56b278318e4f83cc5046"], "commitGHEventType": "referenced", "nameRev": "47ee32a2856c30e03e2fb8eeab245d1ba2a03569 tags/0.5.1~19^2~3", "commitGitStats": [{"insertions": 50, "lines": 50, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/assembly/example-data/IncrementalLoading.groovy", "deletions": 0}, {"insertions": 0, "lines": 72, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/assembly/example-data/BlueprintsScript.groovy", "deletions": 72}], "commitSpoonAstDiffStats": [], "commitMessage": "Updated incremental loading sample script\n\nFor #774\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-10-06 18:22:20"}], "created": "2014-10-06 19:40:33"}, {"labels": ["bug"], "filteredCommits": ["854139c3e9bb3a63ed124e1403d1227aba7632e1"], "url": "https://github.com/thinkaurelius/titan/issues/765", "gitStatsSummary": {"insertions": 16, "gitFilesChange": 3, "lines": 31, "deletions": 15}, "numCommits": 1, "commits": {"854139c3e9bb3a63ed124e1403d1227aba7632e1": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.setCustomOption(java.lang.String,java.lang.Object)", "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.ImmutableTxCfg", "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.getCustomOptions()", "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.start()", "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.getCustomOption(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption)", "com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.getConfiguration()", "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.ImmutableTxCfg.getCustomOptions()", "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder", "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.ImmutableTxCfg.getCustomOption(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration", "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction"], "body": "The consistency level on transactions can be explicitly set when building a transaction by calling `setCustomOption` on the `StandardTransactionBuilder` returned by `graph.buildTransaction`.  However, creating a transaction with the default config or through the thread-bound mechanism doesn't honor R/W CL options in the graph config -- it just uses the default `QUORUM`.  Add test coverage for setting transaction custom options through the graph config and fix the bug.\n\nRelated discussion: https://groups.google.com/d/msg/aureliusgraphs/3vRdokCYF08/2PD_SJneZ0YJ\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 9, "UPD": 12, "TOT": 23, "DEL": 2, "INS": 5, "spoonFilesChanged": 2, "MOV": 4}, "title": "Add test coverage for and fix Cassandra CL options in graph config", "statsSkippedReason": "", "closed": "2014-09-19 06:05:49", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-09-19 00:17:33", "commitHash": "854139c3e9bb3a63ed124e1403d1227aba7632e1", "commitParents": ["9d605dcb292894a5b4c7c9f8512426c1dae9d6d4"], "commitGHEventType": "referenced", "nameRev": "854139c3e9bb3a63ed124e1403d1227aba7632e1 tags/0.5.1~62", "commitGitStats": [{"insertions": 11, "lines": 26, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTransactionBuilder.java", "deletions": 15}, {"insertions": 4, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java", "deletions": 0}, {"insertions": 1, "lines": 1, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/configuration/MergedConfiguration.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.getConfiguration()"}], "spoonFilePath": "GraphDatabaseConfiguration.java"}, {"spoonMethods": [], "spoonFilePath": "MergedConfiguration.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.setCustomOption(java.lang.String,java.lang.Object)"}, {"UPD": 1, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.start()"}, {"UPD": 3, "TOT": 3, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.ImmutableTxCfg"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.getCustomOption(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption)"}, {"UPD": 1, "TOT": 4, "DEL": 1, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.getCustomOptions()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.ImmutableTxCfg.getCustomOptions()"}, {"UPD": 3, "TOT": 7, "DEL": 1, "INS": 2, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTransactionBuilder.ImmutableTxCfg.getCustomOption(com.thinkaurelius.titan.diskstorage.configuration.ConfigOption)"}], "spoonFilePath": "StandardTransactionBuilder.java"}], "commitMessage": "Use graph configuration in tx custom options\n\nFix for #765\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-09-19 00:14:14"}], "created": "2014-09-19 04:07:15"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/764", "title": "Titan 0.5 HadoopGraph.V.count() does not match TitanGraph.V.count()", "closed": "2015-03-19 23:35:01", "commitsDetails": [], "commits": {}, "ttf": 182.00027777777777, "created": "2014-09-18 18:15:11", "user": "yuriythedev", "body": "This bug is based on my forum post - could you please take a look:\n\nHere is the data and it is based on examples/graph-of-the-gods.id shipped with Titan 0.5:\n\nHadoopGraph:  g.V.map():\n\n==>16416        {_id=[16416]}\n==>16456        {_id=[16456]}\n==>16536        {_id=[16536]}\n==>163856648    {_id=[163856648]}\n==>327696648    {_id=[327696648]}\n\ng.E.map():\n\n==>163842052    {_id=[163842052], userId=[1], _label=[friend]}\n==>491522052    {_id=[491522052], userId=[1], _label=[friend]}\n==>327682052    {_id=[327682052], userId=[1], _label=[friend]}\n==>655362052    {_id=[655362052], userId=[1], _label=[friend]}\n==>491522057    {_id=[491522057], userId=[2], _label=[friend]}\n==>163842057    {_id=[163842057], userId=[2], _label=[friend]}\n==>327682057    {_id=[327682057], userId=[2], _label=[friend]}\n==>655362067    {_id=[655362067], userId=[7], _label=[friend]}\n==>327682067    {_id=[327682067], userId=[7], _label=[friend]}\n==>163842067    {_id=[163842067], userId=[7], _label=[friend]}\n==>491522067    {_id=[491522067], userId=[7], _label=[friend]}\n==>819202067    {_id=[819202067], userId=[7], _label=[friend]}\n==>983042081    {_id=[983042081], userId=[11], _label=[friend]}\n==>819202081    {_id=[819202081], userId=[3], _label=[friend]}\n==>491522081    {_id=[491522081], userId=[3], _label=[friend]}\n==>...\n\nTitanGraph:\n\ngremlin> g.E.map()\n11:45:41 WARN  com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx  - Query requires iterating over all vertices [()]. For better performance, use indexes\n==>{userId=1}\n==>{userId=1}\n==>{userId=1}\n==>{userId=1}\n==>{userId=2}\n==>{userId=2}\n==>{userId=2}\n==>{userId=7}\n==>{userId=7}\n==>{userId=7}\n==>{userId=7}\n==>{userId=7}\n==>{userId=11}\n==>{userId=3}\n==>{userId=3}\n==>{userId=3}\n==>{userId=3}\n\ngremlin> g.V\n11:48:11 WARN  com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx  - Query requires iterating over all vertices [()]. For better performance, use indexes\n==>v[16416]\n==>v[16440]\n==>v[16456]\n==>v[16536]\n==>v[16592]\n==>v[16648]\n==>v[163856648]\n==>v[327696648]\n==>v[16824]\n==>v[163856824]\n==>v[16832]\n==>v[16864]\ngremlin>\n\ng.V.map is useless with TItanGraph:\n\ngremlin> g.V.map()\n11:48:48 WARN  com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx  - Query requires iterating over all vertices [()]. For better performance, use indexes\n==>{}\n==>{}\n==>{}\n==>{}\n==>{}\n==>{}\n==>{}\n==>{}\n==>{}\n==>{}\n==>{}\n==>{}\n\nThe data was inserted by TitanHadoop into Titan backed by HBase cluster.\nNote that after the insertion, Hadoop reports that 12 vertices were inserted:\n\n```\ncom.thinkaurelius.titan.hadoop.formats.util.TitanGraphOutputMapReduce$Counters\n        EDGES_ADDED=17\n        EDGE_PROPERTIES_ADDED=17\n        SUCCESSFUL_TRANSACTIONS=82\n        VERTICES_ADDED=12\n```\n\nAfter the insertion, I just create a graph with Titan-Hbase-Input.properties config and do g.V.count()/g.V.map()\nHere are the additional files generated by the Hadoop execution:\n\ngremlin> hdfs.head('jobs/job-0/graph-m-00000')\n==>{\"_id\":16416,\"_outE\":[{\"_id\":null,\"userId\":1,\"_inV\":16864,\"_label\":\"friend\"},{\"_id\":null,\"userId\":1,\"_inV\":327696648,\"_label\":\"friend\"},{\"_id\":null,\"userId\":1,\"_inV\":16440,\"_lab\nel\":\"friend\"},{\"_id\":null,\"userId\":1,\"_inV\":16456,\"_label\":\"friend\"}]}\n==>{\"_id\":16456,\"_outE\":[{\"_id\":null,\"userId\":2,\"_inV\":327696648,\"_label\":\"friend\"},{\"_id\":null,\"userId\":2,\"_inV\":16832,\"_label\":\"friend\"},{\"_id\":null,\"userId\":2,\"_inV\":16416,\"_lab\nel\":\"friend\"}]}\n==>{\"_id\":16536,\"_outE\":[{\"_id\":null,\"userId\":7,\"_inV\":16592,\"_label\":\"friend\"},{\"_id\":null,\"userId\":7,\"_inV\":16648,\"_label\":\"friend\"},{\"_id\":null,\"userId\":7,\"_inV\":163856648,\"_lab\nel\":\"friend\"},{\"_id\":null,\"userId\":7,\"_inV\":16416,\"_label\":\"friend\"},{\"_id\":null,\"userId\":7,\"_inV\":163856824,\"_label\":\"friend\"}]}\n==>{\"_id\":163856648,\"_outE\":[{\"_id\":null,\"userId\":11,\"_inV\":16824,\"_label\":\"friend\"}]}\n==>{\"_id\":327696648,\"_outE\":[{\"_id\":null,\"userId\":3,\"_inV\":16456,\"_label\":\"friend\"},{\"_id\":null,\"userId\":3,\"_inV\":163856648,\"_label\":\"friend\"},{\"_id\":null,\"userId\":3,\"_inV\":16416,\"\n_label\":\"friend\"},{\"_id\":null,\"userId\":3,\"_inV\":16824,\"_label\":\"friend\"}]}\ngremlin>\n\ngremlin> hdfs.head('jobs/job-0/sideeffect-m-00000')\n==>163842052    {_id=[163842052], userId=[1], _label=[friend]}\n==>491522052    {_id=[491522052], userId=[1], _label=[friend]}\n==>327682052    {_id=[327682052], userId=[1], _label=[friend]}\n==>655362052    {_id=[655362052], userId=[1], _label=[friend]}\n==>491522057    {_id=[491522057], userId=[2], _label=[friend]}\n==>163842057    {_id=[163842057], userId=[2], _label=[friend]}\n==>327682057    {_id=[327682057], userId=[2], _label=[friend]}\n==>655362067    {_id=[655362067], userId=[7], _label=[friend]}\n==>327682067    {_id=[327682067], userId=[7], _label=[friend]}\n==>163842067    {_id=[163842067], userId=[7], _label=[friend]}\n==>491522067    {_id=[491522067], userId=[7], _label=[friend]}\n==>819202067    {_id=[819202067], userId=[7], _label=[friend]}\n==>983042081    {_id=[983042081], userId=[11], _label=[friend]}\n==>819202081    {_id=[819202081], userId=[3], _label=[friend]}\n==>491522081    {_id=[491522081], userId=[3], _label=[friend]}\n==>655362081    {_id=[655362081], userId=[3], _label=[friend]}\n==>983044129    {_id=[983044129], userId=[3], _label=[friend]}\ngremlin>\n\nChanging the output format from Graphson to Noop in Titan-Hbase-Input.properties does not really change anything.\n\nPlease let me know if you'd like me to get more data to you.\n\nThanks,\nYuriy\n- hide quoted text -\n\nOn Thursday, September 4, 2014 8:33:20 PM UTC-7, Matthias wrote:\nyes, map would be a good start. THanks!\n\nOn Thu, Sep 4, 2014 at 11:30 AM, Yuriy yuriy...@gmail.com wrote:\nThanks Mathias.\n\nI no longer have this data, but I will try to repro this again\nWhat is the best way to print out the contents?\nJust use map()? Or is there a better way?\n\nOn Wednesday, September 3, 2014 11:54:54 PM UTC-7, Matthias wrote:\nThat is really bizarre. Since the graph is small, can you try to print out the content for both cases so they can be compared?\nThanks,\nMatthias\n\nOn Wed, Sep 3, 2014 at 7:20 PM, Yuriy yuriy...@gmail.com wrote:\nAfter loading some tiny test data using TitanHadoop, I ran HadoopGraph.V.count() and TitanGraph.V.count().\nThese appear to produce different results - any ideas why?\n\ng = HadoopFactory.open('../conf/hadoop/titan-hbase-input.properties')\ng.V.count()\n\n---\n\n```\n    Shuffle Errors\n            BAD_ID=0\n            CONNECTION=0\n            IO_ERROR=0\n            WRONG_LENGTH=0\n            WRONG_MAP=0\n            WRONG_REDUCE=0\n    com.thinkaurelius.titan.hadoop.mapreduce.transform.VerticesMap$Counters\n            EDGES_PROCESSED=0\n            VERTICES_PROCESSED=5\n    com.thinkaurelius.titan.hadoop.mapreduce.util.CountMapReduce$Counters\n            VERTICES_COUNTED=5\n    File Input Format Counters\n            Bytes Read=0\n    File Output Format Counters\n            Bytes Written=0\n```\n\n==>5\n\ng.shutdown()\ng = TitanFactory.open(\"../conf/titan-hbase.properties\")\ng.V.count()\n\n19:13:02 WARN  com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx  - Query requires iterating over all vertices [()]. For better performance, use indexes\n==>36\n\nThe connection properties files are as these where supplied by Titan distro - I just changed HBase (.98) zookeeper connection string in these.\nI should also add that I am using your latest and greatest stuff - the Titan package was built from the latest 0.5.1 branch, sync'd Tuesday\n\nThanks,\nYuriy\n"}, {"labels": ["bug"], "filteredCommits": ["5f562761e6d8d9dcb35d8c0eeacef91f0bfe74da"], "url": "https://github.com/thinkaurelius/titan/issues/761", "gitStatsSummary": {"insertions": 47, "gitFilesChange": 1, "lines": 84, "deletions": 37}, "numCommits": 1, "commits": {"5f562761e6d8d9dcb35d8c0eeacef91f0bfe74da": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "1fc9959967a2a34255afa2408e8e6335f0544821": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 10.000277777777777, "user": "fechtner", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.mutateStores(java.util.Map$Entry,com.thinkaurelius.titan.diskstorage.lucene.KeyInformation$IndexRetriever)", "com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.mutate(java.util.Map,com.thinkaurelius.titan.diskstorage.lucene.KeyInformation$IndexRetriever,com.thinkaurelius.titan.diskstorage.lucene.BaseTransaction)"], "changesInPackagesGIT": ["titan-lucene/src/main/java/com/thinkaurelius/titan/diskstorage/lucene"], "body": "Hello, \nI've noticed problems during working with Lucene indexing in Titan, more precisely in using artifact titan-lucene 0.4.4. The problem was with closing database and indexes, the index files are still held by the application and cannot be deleted. \n\nI think that IndexReader (init in the line 148) in the method mutate in the class LuceneIndex (https://github.com/thinkaurelius/titan/blob/master/titan-lucene/src/main/java/com/thinkaurelius/titan/diskstorage/lucene/LuceneIndex.java) should be closed, but it is not. \n\nIn my opinion the whole body of top for-cycle in the method mutate should be surrounded by try with finally containing closing this reader.\nTom\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 1, "TOT": 21, "DEL": 1, "INS": 3, "spoonFilesChanged": 1, "MOV": 16}, "title": "Resource leak in the Lucene connector", "statsSkippedReason": "", "closed": "2014-09-26 17:36:09", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-09-25 12:27:05", "commitHash": "5f562761e6d8d9dcb35d8c0eeacef91f0bfe74da", "commitParents": ["6c3914ad754ddd53d8118a6350dc6587ec1f6639"], "commitGHEventType": "referenced", "nameRev": "5f562761e6d8d9dcb35d8c0eeacef91f0bfe74da tags/0.5.1~52", "commitGitStats": [{"insertions": 47, "lines": 84, "filePath": "titan-lucene/src/main/java/com/thinkaurelius/titan/diskstorage/lucene/LuceneIndex.java", "deletions": 37}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 19, "DEL": 1, "INS": 1, "MOV": 16, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.mutate(java.util.Map,com.thinkaurelius.titan.diskstorage.lucene.KeyInformation$IndexRetriever,com.thinkaurelius.titan.diskstorage.lucene.BaseTransaction)"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.mutateStores(java.util.Map$Entry,com.thinkaurelius.titan.diskstorage.lucene.KeyInformation$IndexRetriever)"}], "spoonFilePath": "LuceneIndex.java"}], "commitMessage": "Always close IndexReaders in LuceneIndex.mutate\n\nFor #761\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-09-25 12:27:05"}, {"commitUser": "dalaro", "commitDateTime": "2014-09-25 22:09:11", "commitHash": "1fc9959967a2a34255afa2408e8e6335f0544821", "commitParents": ["4b7cf865b4741aa7d6a05399fbed5059991c7d28"], "commitGHEventType": "referenced", "nameRev": "1fc9959967a2a34255afa2408e8e6335f0544821 remotes/origin/master", "commitGitStats": [{"insertions": 98, "lines": 184, "filePath": "titan-lucene/src/main/java/com/thinkaurelius/titan/diskstorage/lucene/LuceneIndex.java", "deletions": 86}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.mutateStores(java.util.Map$Entry,com.thinkaurelius.titan.diskstorage.lucene.KeyInformation$IndexRetriever)"}, {"UPD": 1, "TOT": 19, "DEL": 1, "INS": 1, "MOV": 16, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.mutate(java.util.Map,com.thinkaurelius.titan.diskstorage.lucene.KeyInformation$IndexRetriever,com.thinkaurelius.titan.diskstorage.TransactionHandle)"}], "spoonFilePath": "LuceneIndex.java"}], "commitMessage": "Always close IndexReaders in LuceneIndex.mutate\n\nFor #761 (0.4.x edition)\n\nThis is a reimplementation of 0.5.1-SNAPSHOT's\n5f562761e6d8d9dcb35d8c0eeacef91f0bfe74da on 0.4.5-SNAPSHOT.  The\naffected bits were different enough between the two versions that it\nwas easier to rewrite than resolve the conflicted cherry pick.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-09-25 22:07:59"}], "created": "2014-09-16 07:49:40"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/757", "title": "java.nio.channels.OverlappingFileLockException when set property for one vertex that indexed using lucene", "closed": "2015-03-19 23:34:50", "commitsDetails": [], "commits": {}, "ttf": 188.00027777777777, "created": "2014-09-12 14:22:18", "user": "huiwenhan", "body": "Get following error:\nERROR [com.thinkaurelius.titan.graphdb.database.StandardTitanGraph] Error while commiting index mutations for transaction [2364] on index: search\ncom.thinkaurelius.titan.core.TitanException: Could not execute operation due to backend exception\n    at com.thinkaurelius.titan.diskstorage.util.BackendOperation.execute(BackendOperation.java:44)\n    at com.thinkaurelius.titan.diskstorage.indexing.IndexTransaction.flushInternal(IndexTransaction.java:119)\n    at com.thinkaurelius.titan.diskstorage.indexing.IndexTransaction.commit(IndexTransaction.java:100)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction.commitIndexes(BackendTransaction.java:124)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.commit(StandardTitanGraph.java:639)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.commit(StandardTitanTx.java:1228)\n    at com.sfb.wsa.cd.uptake.graph.titan.model.vertex.access.TagDao.add(TagDao.java:32)\n    at com.sfb.wsa.cd.uptake.profiles.jobs.ImportProfileJob.main(ImportProfileJob.java:108)\nCaused by: com.thinkaurelius.titan.diskstorage.PermanentBackendException: Could not create writer\n    at com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.getWriter(LuceneIndex.java:111)\n    at com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.mutate(LuceneIndex.java:146)\n    at com.thinkaurelius.titan.diskstorage.indexing.IndexTransaction$1.call(IndexTransaction.java:122)\n    at com.thinkaurelius.titan.diskstorage.indexing.IndexTransaction$1.call(IndexTransaction.java:119)\n    at com.thinkaurelius.titan.diskstorage.util.BackendOperation.executeDirect(BackendOperation.java:56)\n    at com.thinkaurelius.titan.diskstorage.util.BackendOperation.execute(BackendOperation.java:42)\n    ... 7 more\nCaused by: org.apache.lucene.store.LockObtainFailedException: Lock obtain timed out: NativeFSLock@C:\\tmp\\titan\\wsa\\emp\\lucene\\tagmixedIndex\\write.lock: java.nio.channels.OverlappingFileLockException\n    at org.apache.lucene.store.Lock.obtain(Lock.java:89)\n    at org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:710)\n    at com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.getWriter(LuceneIndex.java:108)\n    ... 12 more\nCaused by: java.nio.channels.OverlappingFileLockException\n    at sun.nio.ch.SharedFileLockTable.checkList(FileLockTable.java:267)\n    at sun.nio.ch.SharedFileLockTable.add(FileLockTable.java:164)\n    at sun.nio.ch.FileChannelImpl.tryLock(FileChannelImpl.java:1078)\n    at java.nio.channels.FileChannel.tryLock(FileChannel.java:1165)\n    at org.apache.lucene.store.NativeFSLock.obtain(NativeFSLockFactory.java:148)\n    at org.apache.lucene.store.Lock.obtain(Lock.java:100)\n    ... 14 more\n"}, {"labels": ["bug", "question"], "filteredCommits": ["376bad20b40a842876fbda80efd2583266c88cfe"], "url": "https://github.com/thinkaurelius/titan/issues/744", "gitStatsSummary": {"insertions": 6, "gitFilesChange": 4, "lines": 11, "deletions": 5}, "numCommits": 1, "commits": {"376bad20b40a842876fbda80efd2583266c88cfe": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 29.00027777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.relations.CacheEdge", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.isOpen()", "com.thinkaurelius.titan.graphdb.relations.CacheProperty", "com.thinkaurelius.titan.graphdb.query.vertex.MultiVertexCentricQueryBuilder.addVertex(com.thinkaurelius.titan.graphdb.query.vertex.TitanVertex)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.isClosed()"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/vertex"], "body": "Kishore Senji posted [a test case](https://groups.google.com/d/msg/aureliusgraphs/nVkl0WiD4Vs/rfJNyHz7aIYJ):\n\n```\n/* using titan 0.5 */\n\ng=TitanFactory.build().set(\"storage.backend\", \"berkeleyje\").set(\"schema.default\", \"none\").set(\"storage.directory\", \"/tmp/\"+System.nanoTime()).set(\"query.force-index\", true).open();\n\ntm = g.getManagementSystem();\n\nname = tm.makePropertyKey(\"name\").dataType(String.class).make();\nage = tm.makePropertyKey(\"age\").dataType(Integer.class).make();\ntm.buildIndex('byName',Vertex.class).addKey(name).unique().buildCompositeIndex();\n\ntm.commit();\n\ncartman = g.addVertex([\"name\" : \"cartman\", \"age\" : 10]);\nstan    = g.addVertex([\"name\" : \"stan\", \"age\" : 8]);\n\ng.commit();\n\ncartman = g.V(\"name\", \"cartman\").next();\n\ng.commit();\n\ng.multiQuery(com.google.common.collect.Lists.newArrayList(g.query().has(\"name\", \"cartman\").vertices())).properties().collect{it.value.iterator().next()};\ng.multiQuery(cartman).properties().collect{it.value.iterator().next()}; /* This will cause stack over flow */\n\ng.commit();\n```\n\nThat produces:\n\n```\njava.lang.StackOverflowError\n        at java.util.concurrent.atomic.AtomicReferenceArray.checkedByteOffset(AtomicReferenceArray.java:77)\n        at java.util.concurrent.atomic.AtomicReferenceArray.get(AtomicReferenceArray.java:125)\n        at com.google.common.cache.LocalCache$Segment.getFirst(LocalCache.java:2688)\n        at com.google.common.cache.LocalCache$Segment.getEntry(LocalCache.java:2695)\n        at com.google.common.cache.LocalCache$Segment.getLiveEntry(LocalCache.java:2716)\n        at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2753)\n        at com.google.common.cache.LocalCache.getIfPresent(LocalCache.java:3921)\n        at com.google.common.cache.LocalCache$LocalManualCache.getIfPresent(LocalCache.java:4715)\n        at com.thinkaurelius.titan.graphdb.transaction.vertexcache.GuavaVertexCache.get(GuavaVertexCache.java:59)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getVertex(StandardTitanTx.java:358)\n        at com.thinkaurelius.titan.graphdb.vertices.AbstractVertex.it(AbstractVertex.java:40)\n        at com.thinkaurelius.titan.graphdb.relations.AbstractTypedRelation.it(AbstractTypedRelation.java:29)\n        at com.thinkaurelius.titan.graphdb.relations.CacheProperty.it(CacheProperty.java:49)\n        at com.thinkaurelius.titan.graphdb.relations.CacheProperty.getLongId(CacheProperty.java:72)\n        at com.thinkaurelius.titan.graphdb.internal.AbstractElement.hasId(AbstractElement.java:96)\n        at com.thinkaurelius.titan.graphdb.relations.RelationIdentifier.get(RelationIdentifier.java:34)\n        at com.thinkaurelius.titan.graphdb.relations.AbstractTypedRelation.it(AbstractTypedRelation.java:32)\n        at com.thinkaurelius.titan.graphdb.relations.CacheProperty.it(CacheProperty.java:49)\n        at com.thinkaurelius.titan.graphdb.relations.CacheProperty.getLongId(CacheProperty.java:72)\n        (... repeated frames omitted ...)\n        at com.thinkaurelius.titan.graphdb.internal.AbstractElement.hasId(AbstractElement.java:96)\n        at com.thinkaurelius.titan.graphdb.relations.RelationIdentifier.get(RelationIdentifier.java:34)\n        at com.thinkaurelius.titan.graphdb.relations.AbstractTypedRelation.it(AbstractTypedRelation.java:32)\n        at com.thinkaurelius.titan.graphdb.relations.CacheProperty.it(CacheProperty.java:49)\n        at com.thinkaurelius.titan.graphdb.relations.CacheProperty.getLongId(CacheProperty.java:72)\n        (line above is the outermost frame available in the exception trace)\n```\n\nI think this is supposed to just work.  If it can't work for some efficiency/correctness reason that I'm missing, we should still detect it and throw a more useful exception.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 5, "UPD": 0, "TOT": 10, "DEL": 0, "INS": 6, "spoonFilesChanged": 4, "MOV": 4}, "title": "StackOverflowError involving stale vertex", "statsSkippedReason": "", "closed": "2014-10-03 01:29:01", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2014-09-26 13:45:06", "commitHash": "376bad20b40a842876fbda80efd2583266c88cfe", "commitParents": ["4bc081be419e372fa611b672481294033f98f4aa"], "commitGHEventType": "referenced", "nameRev": "376bad20b40a842876fbda80efd2583266c88cfe tags/0.5.1~43", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheEdge.java", "deletions": 1}, {"insertions": 32, "lines": 32, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/vertex/MultiVertexCentricQueryBuilder.java", "deletions": 1}, {"insertions": 2, "lines": 3, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheProperty.java", "deletions": 1}, {"insertions": 2, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.isOpen()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.isClosed()"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testStaleVertex()"}, {"UPD": 0, "TOT": 6, "DEL": 0, "INS": 4, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testThreadBoundTx()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.vertex.MultiVertexCentricQueryBuilder.addVertex(com.thinkaurelius.titan.graphdb.query.vertex.TitanVertex)"}], "spoonFilePath": "MultiVertexCentricQueryBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.CacheEdge"}], "spoonFilePath": "CacheEdge.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.CacheProperty"}], "spoonFilePath": "CacheProperty.java"}], "commitMessage": "Added test case and fix for stale vertex issue with multi query. Fixes #744.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-09-26 13:45:06"}], "created": "2014-09-03 02:42:28"}, {"labels": ["bug"], "filteredCommits": ["8238ece060a0e2177ae9770946880f43cb4440a2", "d0d962abdff5e293c4a492fae684cf6906e16b9f", "f6b36aaef67c40f6771ebfe87d2f3a2ef889e16b"], "url": "https://github.com/thinkaurelius/titan/issues/740", "gitStatsSummary": {"insertions": 4, "gitFilesChange": 1, "lines": 8, "deletions": 4}, "numCommits": 1, "commits": {"d0d962abdff5e293c4a492fae684cf6906e16b9f": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "f6b36aaef67c40f6771ebfe87d2f3a2ef889e16b": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "8238ece060a0e2177ae9770946880f43cb4440a2": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 2.000277777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.example.GraphOfTheGodsFactory.create(java.lang.String)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/example"], "body": "https://github.com/thinkaurelius/titan/blob/0.5.0/titan-core/src/main/java/com/thinkaurelius/titan/example/GraphOfTheGodsFactory.java#L28-L40\n\nRunning `g = TitanFactory.open('path/to/cfg'); GraphOfTheGodsFactory.load(g)` is the workaround.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 2.0, "TOT": 5.0, "DEL": 0.0, "INS": 0.0, "spoonFilesChanged": 1, "MOV": 3.0}, "title": "Outdated config elements in GraphOfTheGodsFactory.create", "statsSkippedReason": "", "closed": "2014-09-04 06:47:14", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-09-23 12:24:54", "commitHash": "d0d962abdff5e293c4a492fae684cf6906e16b9f", "commitParents": ["4a19e90b4fe4e1d9cb4c47c9416d5b2cfa127fc3"], "commitGHEventType": "referenced", "nameRev": "d0d962abdff5e293c4a492fae684cf6906e16b9f remotes/origin/0.5.0_docs~9", "commitGitStats": [{"insertions": 15, "lines": 30, "filePath": "docs/intro.txt", "deletions": 15}], "commitSpoonAstDiffStats": [], "commitMessage": "patch docs for 0.5.x tutorial based on #740\n(cherry picked from commit 9258a9dd339b1bf7a4039cf3d7e44807ce3e5a5f)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-09-15 23:39:52"}, {"commitUser": "dalaro", "commitDateTime": "2014-09-03 03:57:42", "commitHash": "f6b36aaef67c40f6771ebfe87d2f3a2ef889e16b", "commitParents": ["8238ece060a0e2177ae9770946880f43cb4440a2"], "commitGHEventType": "referenced", "nameRev": "f6b36aaef67c40f6771ebfe87d2f3a2ef889e16b tags/0.5.1~86", "commitGitStats": [{"insertions": 4, "lines": 8, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/example/GraphOfTheGodsFactory.java", "deletions": 4}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 5, "DEL": 0, "INS": 0, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.example.GraphOfTheGodsFactory.create(java.lang.String)"}], "spoonFilePath": "GraphOfTheGodsFactory.java"}], "commitMessage": "Fix #740\n\nI decided not to use the ConfigOption API.\nGraphOfTheGodsFactory.create is likely to be seen/copied by Titan\nusers.  In the most recent discussion with Matthias about the\nConfigOption API, the verdict was to keep it internal to Titan insofar\nas possible, so that we only have to manage stability on the string\nconfig keys instead of both the string keys and ConfigOption\npublic-static-final-fields all over the code.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-09-03 03:57:42"}, {"commitUser": "dalaro", "commitDateTime": "2014-09-03 03:56:30", "commitHash": "8238ece060a0e2177ae9770946880f43cb4440a2", "commitParents": ["86e5b6e3b408b55a7705c20627e702ca5c1fe313"], "commitGHEventType": "referenced", "nameRev": "8238ece060a0e2177ae9770946880f43cb4440a2 tags/0.5.1~87", "commitGitStats": [{"insertions": 16, "lines": 16, "filePath": "titan-berkeleyje/src/test/java/com/thinkaurelius/titan/graphdb/berkeleyje/BerkeleyGraphTest.java", "deletions": 0}, {"insertions": 6, "lines": 9, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "deletions": 3}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.berkeleyje.BerkeleyGraphTest.testGraphOfTheGodsFactoryCreate()"}], "spoonFilePath": "BerkeleyGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanIndexTest.assertGraphOfTheGods(com.thinkaurelius.titan.graphdb.TitanGraph)"}, {"UPD": 1, "TOT": 7, "DEL": 3, "INS": 1, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanIndexTest.testGraphOfTheGods()"}], "spoonFilePath": "TitanIndexTest.java"}], "commitMessage": "Add test of GOTGFactory.create\n\nFor #740; test fails\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-09-03 03:56:30"}], "created": "2014-09-01 21:37:01"}, {"labels": ["bug"], "filteredCommits": ["09f367028b094df838516900eb9ffc9c6764f7b6"], "url": "https://github.com/thinkaurelius/titan/issues/722", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"09f367028b094df838516900eb9ffc9c6764f7b6": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.hbase.HBaseStoreManager.checkConfigDeprecation(com.thinkaurelius.titan.diskstorage.configuration.Configuration)"], "changesInPackagesGIT": ["titan-hbase-parent/titan-hbase-core/src/main/java/com/thinkaurelius/titan/diskstorage/hbase"], "body": "The HBase manager produces this warning:\n\n```\n21:44:09 WARN  com.thinkaurelius.titan.diskstorage.hbase.HBaseStoreManager  - The configuration property root.storage.port is ignored for HBase. Set hbase.zookeeper.property.clientPort in hbase-site.xml or root.storage.hbase.ext.hbase.zookeeper.property.clientPort in Titan's configuration file.\n```\n\n\"root.storage....\" should just be \"storage...\" in both instances above.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 4, "DEL": 0, "INS": 2, "spoonFilesChanged": 1, "MOV": 2}, "title": "Remove \"root.\" prefix from config option in HBase cfg warning", "statsSkippedReason": "", "closed": "2014-08-22 09:41:56", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-08-22 01:36:10", "commitHash": "09f367028b094df838516900eb9ffc9c6764f7b6", "commitParents": ["d6dd24d036a7ff073c7a88358239ea23550ee2a1"], "commitGHEventType": "referenced", "nameRev": "09f367028b094df838516900eb9ffc9c6764f7b6 tags/0.5.1~105^2~14", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "titan-hbase-parent/titan-hbase-core/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.hbase.HBaseStoreManager.checkConfigDeprecation(com.thinkaurelius.titan.diskstorage.configuration.Configuration)"}], "spoonFilePath": "HBaseStoreManager.java"}], "commitMessage": "Fix #722\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-08-22 01:36:10"}], "created": "2014-08-22 01:46:22"}, {"labels": ["bug"], "filteredCommits": ["8842e0c61db8c593846fab59a143e5b984f98e3a", "2dc20d0abb5b6bd1fa67c4ee5fd0361345a9b2e7"], "url": "https://github.com/thinkaurelius/titan/issues/720", "gitStatsSummary": {"insertions": 19, "gitFilesChange": 1, "lines": 21, "deletions": 2}, "numCommits": 1, "commits": {"2dc20d0abb5b6bd1fa67c4ee5fd0361345a9b2e7": {"commitUser": "dalaro", "commitGHEventType": "referenced"}, "8842e0c61db8c593846fab59a143e5b984f98e3a": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 6.000277777777778, "user": "randall-sosacorp", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.legacyConfiguration(com.thinkaurelius.titan.diskstorage.configuration.Configuration)", "com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.getNode()"], "changesInPackagesGIT": ["titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es"], "body": "##### Brief Description\n\nWhen attempting to configure Titan to read an Elasticsearch yaml configuration file while running in local mode, the settings defined in the yaml file never take effect.  Example configuration setting: `index.search.conf-file=/etc/elasticsearch/elasticsearch.yml`.  Within this configuration file, there is the following setting: `index.store.type=memory`.  This is ignored, and Elasticsearch writes to the files system.\n##### Expected\n\nPointing Titan to the path where an Elasticsearch configuration file may be located will allow settings therein to take effect.\n##### Actual\n\nThe path descriptor is treated as the content body of the configuration file.\n##### Discovered Version\n\n0.5.0\n##### Detailed description\n\nIn ElasticSearchIndex.java, the YAML file is loaded on line 4 with the following block of code:\n\n```\nif (config.has(INDEX_CONF_FILE)) {\n    String configFile = config.get(INDEX_CONF_FILE);\n    log.debug(\"Configuring ES from YML file [{}]\", configFile);\n    Settings settings = ImmutableSettings.settingsBuilder().loadFromSource(configFile).build();\n    builder.settings(settings);\n} \n```\n\nThis code should invoke `ImmutableSettings.settingsBuilder().loadFromStream()` instead.  This should, in turn, invoke `SettingsLoaderFactory.loaderFromResource()` rather than `loaderFromSource()`.  Note the difference in that class:\n\n```\n    /**\n     * Returns a {@link SettingsLoader} based on the resource name.\n     */\n    public static SettingsLoader loaderFromResource(String resourceName) {\n        if (resourceName.endsWith(\".json\")) {\n            return new JsonSettingsLoader();\n        } else if (resourceName.endsWith(\".yml\") || resourceName.endsWith(\".yaml\")) {\n            return new YamlSettingsLoader();\n        } else if (resourceName.endsWith(\".properties\")) {\n            return new PropertiesSettingsLoader();\n        } else {\n            // lets default to the json one\n            return new JsonSettingsLoader();\n        }\n    }\n\n    /**\n     * Returns a {@link SettingsLoader} based on the actual settings source.\n     */\n    public static SettingsLoader loaderFromSource(String source) {\n        if (source.indexOf('{') != -1 && source.indexOf('}') != -1) {\n            return new JsonSettingsLoader();\n        }\n        if (source.indexOf(':') != -1) {\n            return new YamlSettingsLoader();\n        }\n        return new PropertiesSettingsLoader();\n    }\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 2, "TOT": 13, "DEL": 2, "INS": 4, "spoonFilesChanged": 1, "MOV": 5}, "title": "ElasticSearchIndex fails to load elasticsearch.yml file", "statsSkippedReason": "", "closed": "2014-08-28 10:32:30", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-08-27 07:58:14", "commitHash": "2dc20d0abb5b6bd1fa67c4ee5fd0361345a9b2e7", "commitParents": ["8842e0c61db8c593846fab59a143e5b984f98e3a"], "commitGHEventType": "referenced", "nameRev": "2dc20d0abb5b6bd1fa67c4ee5fd0361345a9b2e7 tags/0.5.1~105^2~4", "commitGitStats": [{"insertions": 19, "lines": 21, "filePath": "titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es/ElasticSearchIndex.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 12, "DEL": 2, "INS": 3, "MOV": 5, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.legacyConfiguration(com.thinkaurelius.titan.diskstorage.configuration.Configuration)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.getNode()"}], "spoonFilePath": "ElasticSearchIndex.java"}], "commitMessage": "Fix #720\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-08-27 07:58:14"}, {"commitUser": "dalaro", "commitDateTime": "2014-08-27 07:57:21", "commitHash": "8842e0c61db8c593846fab59a143e5b984f98e3a", "commitParents": ["304f14e44f986e806ac8e86437ff7b8e46a68045"], "commitGHEventType": "referenced", "nameRev": "8842e0c61db8c593846fab59a143e5b984f98e3a tags/0.5.1~105^2~5", "commitGitStats": [{"insertions": 33, "lines": 33, "filePath": "titan-es/src/test/java/com/thinkaurelius/titan/diskstorage/es/ElasticSearchIndexTest.java", "deletions": 0}, {"insertions": 1, "lines": 1, "filePath": "titan-es/src/test/resources/es_nodename_foo.yml", "deletions": 0}, {"insertions": 1, "lines": 1, "filePath": "titan-es/src/test/resources/es_nodename_bar.yml", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndexTest.testConfigurationFile()"}], "spoonFilePath": "ElasticSearchIndexTest.java"}], "commitMessage": "Add test of ES conf-file option\n\nTest current fails by triggering #720\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-08-27 07:57:21"}], "created": "2014-08-21 16:37:07"}, {"labels": ["bug"], "filteredCommits": ["070f75a3a577d2703e77fac45710686dc1cd8a99"], "url": "https://github.com/thinkaurelius/titan/issues/702", "gitStatsSummary": {"insertions": 24, "gitFilesChange": 5, "lines": 52, "deletions": 28}, "numCommits": 1, "commits": {"070f75a3a577d2703e77fac45710686dc1cd8a99": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 1.0002777777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addVertex(java.lang.String)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addVertex()", "com.thinkaurelius.titan.core.addVertex(com.thinkaurelius.titan.core.VertexLabel)", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsTransaction.addVertex(java.lang.Object)", "com.thinkaurelius.titan.example.GraphOfTheGodsFactory.load(com.thinkaurelius.titan.example.TitanGraph)", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.addVertex(com.thinkaurelius.titan.graphdb.blueprints.VertexLabel)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addVertex(com.thinkaurelius.titan.graphdb.transaction.VertexLabel)", "com.thinkaurelius.titan.graphdb.serializer.SerializerGraphConfiguration.testOnlyRegisteredSerialization()", "com.thinkaurelius.titan.core.addVertex(java.lang.String)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction", "titan-core/src/main/java/com/thinkaurelius/titan/example", "titan-core/src/main/java/com/thinkaurelius/titan/core", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/blueprints"], "body": "Rename addVertex(string) and addVertex(VertexLabel) methods in TitanGraph, titanBlueprintsGraph, and TitanTransaction to addVertexWithLabel in order to remove with Collision with blueprints.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 9, "UPD": 23, "TOT": 30, "DEL": 2, "INS": 3, "spoonFilesChanged": 6, "MOV": 2}, "title": "Rename methods for adding vertex with label", "statsSkippedReason": "", "closed": "2014-08-11 01:53:12", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-08-10 08:05:10", "commitHash": "070f75a3a577d2703e77fac45710686dc1cd8a99", "commitParents": ["e7167fe372470cbecec7f2713ca423fb319e455a"], "commitGHEventType": "referenced", "nameRev": "070f75a3a577d2703e77fac45710686dc1cd8a99 tags/0.5.0~43", "commitGitStats": [{"insertions": 2, "lines": 4, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanPartitionGraphTest.java", "deletions": 2}, {"insertions": 5, "lines": 11, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/blueprints/TitanBlueprintsTransaction.java", "deletions": 6}, {"insertions": 2, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/core/TitanTransaction.java", "deletions": 2}, {"insertions": 2, "lines": 4, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/serializer/SerializerGraphConfiguration.java", "deletions": 2}, {"insertions": 1, "lines": 2, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanOperationCountingTest.java", "deletions": 1}, {"insertions": 13, "lines": 26, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 13}, {"insertions": 1, "lines": 5, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/blueprints/TitanBlueprintsGraph.java", "deletions": 4}, {"insertions": 4, "lines": 8, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 4}, {"insertions": 3, "lines": 6, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "deletions": 3}, {"insertions": 12, "lines": 24, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/example/GraphOfTheGodsFactory.java", "deletions": 12}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testAutomaticTypeCreation()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testPropertyTTLTiming()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testEdgeTTLLimitedByVertexTTL()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testVertexTTLWithCompositeIndex()"}, {"UPD": 4, "TOT": 4, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testGlobalGraphIndexingAndQueriesForInternalIndexes()"}, {"UPD": 3, "TOT": 3, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testSchemaTypes()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testSchemaNameChange()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testVertexTTLImplicitKey()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 12, "TOT": 12, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.example.GraphOfTheGodsFactory.load(com.thinkaurelius.titan.example.TitanGraph)"}], "spoonFilePath": "GraphOfTheGodsFactory.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanIndexTest.testConditionalIndexing()"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanIndexTest.testVertexTTLWithMixedIndices()"}], "spoonFilePath": "TitanIndexTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.core.addVertex(com.thinkaurelius.titan.core.VertexLabel)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.core.addVertex(java.lang.String)"}], "spoonFilePath": "TitanTransaction.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addVertex(java.lang.String)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addVertex(com.thinkaurelius.titan.graphdb.transaction.VertexLabel)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addVertex()"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 9, "DEL": 2, "INS": 3, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsTransaction.addVertex(java.lang.Object)"}], "spoonFilePath": "TitanBlueprintsTransaction.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanPartitionGraphTest.testVertexPartitioning()"}], "spoonFilePath": "TitanPartitionGraphTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.serializer.SerializerGraphConfiguration.testOnlyRegisteredSerialization()"}], "spoonFilePath": "SerializerGraphConfiguration.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.addVertex(com.thinkaurelius.titan.graphdb.blueprints.VertexLabel)"}], "spoonFilePath": "TitanBlueprintsGraph.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanOperationCountingTest.testReadOperations(boolean)"}], "spoonFilePath": "TitanOperationCountingTest.java"}], "commitMessage": "Rename two addVertex overloads that take a label\n\nFix #702\n\nLead up to this commit:\n\nTitanTransaction.addVertex(VertexLabel) and addVertex(String) both\ntake a vertex label argument.  TitanBlueprintsTransaction and TBGraph\ndefine addVertex(Object).  The Object overload doesn't contain any\nimplementation logic by itself; it does instanceof checks on the\nargument and calls another addVertex overload based on what it finds.\nIf the argument is a String, it calls the\nTitanTransaction.addVertex(String vertexLabel) overload.\n\nThis behavior is incompatible with Blueprints.  Calling loadGraphML\n(which in turn uses BP GraphMLReader and BatchGraph) on a file just\ncontaining <node id=\"1\"/> results in Blueprints calling\nTitanTransaction.addVertex(Object) with the String \"1\".  Titan sees\nthat the argument is a String and attempts to interpret \"1\" as a\nvertex label.  However, the implicit contract/intent on the Blueprints\nside was to have \"1\" interpreted as a user-assigned ID (or, in the\nspecific case of Titan, to have Titan ignore that ID argument entirely\nand self-assign an ID).\n\nThis commit renames the two TitanTransaction.addVertex methods that\ntake a vertex label to addVertexWithLabel.  It also modifies\nTitanBlueprintsTransaction.addVertex(Object) to ignore arguments of\ntype String.  Now only addVertex arguments of type Number or\nVertexLabel are considered by Titan.  Arguments of other types are\nignored.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-08-10 07:51:20"}], "created": "2014-08-09 02:50:02"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/700", "title": "Unable to start Elastic Search using in-memory mode as configured", "closed": "2014-08-10 16:17:56", "commitsDetails": [], "commits": {}, "ttf": 5.000277777777778, "created": "2014-08-04 20:16:06", "user": "randall-sosacorp", "body": "##### Expected result\n\nDefining a configuration like `index.search.elasticsearch.local-mode` should start Elastic Search in embedded mode.\n##### Actual result\n\nThe following exception is emitted:\n\n```\norg.elasticsearch.client.transport.NoNodeAvailableException: No node available\n    at org.elasticsearch.client.transport.TransportClientNodesService.execute(TransportClientNodesService.java:219)\n    at org.elasticsearch.client.transport.support.InternalTransportClusterAdminClient.execute(InternalTransportClusterAdminClient.java:85)\n    at org.elasticsearch.client.support.AbstractClusterAdminClient.health(AbstractClusterAdminClient.java:123)\n    at org.elasticsearch.action.admin.cluster.health.ClusterHealthRequestBuilder.doExecute(ClusterHealthRequestBuilder.java:93)\n    at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:85)\n    at org.elasticsearch.action.ActionRequestBuilder.execute(ActionRequestBuilder.java:59)\n    at com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.<init>(ElasticSearchIndex.java:198)\n```\n##### Affected versions\n\nTitan 0.5.x, primarily 0.5.0-M2, 0.5.0-M3, and as of this writing, HEAD of the titan05 branch.\n##### Detailed Description\n\nThis was discovered while running an integration test and attempting to initialize a Titan graph.  Debugging revealed that the `GraphDatabaseConfiguration` excludes \"local-mode\" configuration property because it is not defined globally within the INDEX_NS namespace.  This is manifested in the constructor of ElasticSearchIndex when the LOCAL_MODE `ConfigOption` evaluates to `false`.  The proposed fix is to change the LOCAL_MODE and CLIENT_ONLY `ConfigOption` from GLOBAL_OFFLINE to MASKABLE so that a local configuration file may take effect.\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/669", "title": "Index name setting ignored", "closed": "2014-07-26 21:23:07", "commitsDetails": [], "commits": {}, "ttf": 32.000277777777775, "created": "2014-06-23 23:55:05", "user": "mbroecheler", "body": "FROM PABLO: Thank you for your response. I did the change, And I'm seeing in the logs that the xyz index name seems to be applied\n\n14/05/03 14:24:14 INFO diskstorage.Backend: Configuring index [xyz] based on:\n\nHowever, when I browse indexes in ES http://localhost:9200/all/_mapping  I'm seeing \n\n{\ntitan: \n{\nvertex: \n{\nproperties: \n{\n\nand\n\nhits\" : [ {\n      \"_index\" : \"titan\",\n      \"_type\" : \"vertex\",\n      \"_id\" : \"12j6\",\n\nI was expecting that the index name = xyz? what I'm doing wrong?\n"}, {"labels": ["bug", "wontfix"], "url": "https://github.com/thinkaurelius/titan/issues/668", "title": "v.getEdges returns a deleted ghost edge from cache", "closed": "2015-06-24 18:58:19", "commitsDetails": [], "commits": {}, "ttf": 365.0002777777778, "created": "2014-06-23 20:30:26", "user": "dalaro", "body": "#665\n\nThis definitely applies to 0.4.  Tried the test twice on titan05 and it didn't fail on either run, FWIW...\n"}, {"labels": ["bug"], "filteredCommits": ["78f7182c4a3f837affbad4903aa3a0c6a1ad4fd3"], "url": "https://github.com/thinkaurelius/titan/issues/667", "gitStatsSummary": {"insertions": 4, "gitFilesChange": 1, "lines": 4, "deletions": 0}, "numCommits": 1, "commits": {"78f7182c4a3f837affbad4903aa3a0c6a1ad4fd3": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 52.000277777777775, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.hadoop.formats.titan.cassandra.TitanCassandraInputFormat.setConf(org.apache.hadoop.conf.Configuration)"], "changesInPackagesGIT": ["titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats"], "body": "TitanCassandraRecordReader uses org.apache.cassandra.hadoop.ColumnFamilyRecordReader.  This class ships with Cassandra.  We instantiate a CFRR without passing the username and password.  Skimming the source suggests that CFRR does have some mechanism for passing username and password.\n\nIt would also be interesting to see whether CFRR supports SSLized client<->cassandracluster configuration like we added to the Cassandra backends.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "spoonFilesChanged": 1, "MOV": 0}, "title": "TitanCassandraRecordReader does not use storage.username/.password", "statsSkippedReason": "", "closed": "2014-08-14 21:51:44", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-07-01 18:59:57", "commitHash": "78f7182c4a3f837affbad4903aa3a0c6a1ad4fd3", "commitParents": ["e524d9f429f9c937ecd2eb9315144a28b3f27090"], "commitGHEventType": "referenced", "nameRev": "78f7182c4a3f837affbad4903aa3a0c6a1ad4fd3 tags/0.5.0-M2~30^2~13", "commitGitStats": [{"insertions": 4, "lines": 4, "filePath": "titan-hadoop-parent/titan-hadoop-core/src/main/java/com/thinkaurelius/titan/hadoop/formats/titan/cassandra/TitanCassandraInputFormat.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.hadoop.formats.titan.cassandra.TitanCassandraInputFormat.setConf(org.apache.hadoop.conf.Configuration)"}], "spoonFilePath": "TitanCassandraInputFormat.java"}], "commitMessage": "Untested fix for #667\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-07-01 16:40:41"}], "created": "2014-06-23 19:43:56"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/658", "title": "Fix ThriftGraphCacheTest.testConfiguration", "closed": "2014-06-17 20:48:14", "commitsDetails": [], "commits": {}, "ttf": 5.000277777777778, "created": "2014-06-12 02:14:56", "user": "dalaro", "body": "This applies to the 0.5.0 line\n"}, {"labels": ["bug"], "filteredCommits": ["e773067c084e9e6a0a58b739d06f86f0ad36a994"], "url": "https://github.com/thinkaurelius/titan/issues/631", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"e773067c084e9e6a0a58b739d06f86f0ad36a994": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "mbroecheler", "changesInPackagesSPOON": [], "changesInPackagesGIT": [], "body": "this happens sometimes and for all storage backends. It's not 100% reproducible. The error message looks like this:\n\n  InternalCassandraEmbeddedLogTest>LogTest.testMultipleLogsWithSingleReader:118 expected:<3> but was:<1>\n\nIt's always line 118 but the \"was\" part is sometimes 1, sometimes 2.\nThis seems to indicate that some timeout might be too low for my machine which causes failure when running the tests (in particular in parallel).\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0, "TOT": 0, "DEL": 0, "INS": 0, "spoonFilesChanged": 0, "MOV": 0}, "title": "Random unit test failures in LogTest.testMultipleLogsWithSingleReader", "statsSkippedReason": "", "closed": "2014-04-22 03:50:19", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-04-21 22:52:50", "commitHash": "e773067c084e9e6a0a58b739d06f86f0ad36a994", "commitParents": ["02a1a20f591c0fcdbe9847acb71d1e1ea591e79d"], "commitGHEventType": "referenced", "nameRev": "e773067c084e9e6a0a58b739d06f86f0ad36a994 tags/0.5.0-M1~62^2~44^2", "commitGitStats": [{"insertions": 9, "lines": 17, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/log/LogTest.java", "deletions": 8}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.LogTest.testSeparateReadersAndLogsInSharedManager()"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.LogTest.testMultipleLogsWithSingleReader()"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.LogTest.testFuzzMessages()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.LogTest"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.LogTest.testReadMarkerResumesInMiddleOfLog()"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.LogTest.sendReceive(int,int,int)"}, {"UPD": 0, "TOT": 6, "DEL": 3, "INS": 3, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.log.LogTest.testLogIsDurableAcrossReopen()"}], "spoonFilePath": "LogTest.java"}], "commitMessage": "Increase timeout in #631\n\nAttempting to punt this per discussion with @mbroecheler; not fixing\nthe root problem, just increasing the timeout value involved in the\ntest logic's race condition\n\nA slightly more labor-intensive but more-reliable approach might be to\nmake the test block up to a much longer timeout (order of magnitude\nlonger than median runtime), but wakeup frequently to test whether its\nexpected conditions have been met and bail out early if so.\n\nThe right way to do this that's a lot more work is to mock\nTimestampProvider and completely eliminate Thread.sleep calls in the\ntest logic.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-04-21 22:52:50"}], "created": "2014-04-21 21:35:35"}, {"labels": ["bug"], "filteredCommits": ["7130ed23b24f93a9fa5a82b81e58529abeb3d6bd"], "url": "https://github.com/thinkaurelius/titan/issues/626", "gitStatsSummary": {"insertions": 8, "gitFilesChange": 1, "lines": 9, "deletions": 1}, "numCommits": 1, "commits": {"7130ed23b24f93a9fa5a82b81e58529abeb3d6bd": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 14.000277777777777, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.database.StandardTitanGraph", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.shutdown()"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database"], "body": "Current code seems to retain references to closed STG instances through a field in STG's ShutdownThread; eagerly unregistering a graph's hook should reduce memory pressure in testing where we frequently close and open STGs\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 5, "DEL": 0, "INS": 4, "spoonFilesChanged": 1, "MOV": 1}, "title": "Remove StandardTitanGraph JVM shutdown hook when graph shuts down", "statsSkippedReason": "", "closed": "2014-04-25 04:52:00", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-04-19 02:14:38", "commitHash": "7130ed23b24f93a9fa5a82b81e58529abeb3d6bd", "commitParents": ["3c93acd5dc33f8e8adc86a2de7fe72bd25496b9a"], "commitGHEventType": "referenced", "nameRev": "7130ed23b24f93a9fa5a82b81e58529abeb3d6bd tags/0.5.0-M1~62^2~49^2^2~3", "commitGitStats": [{"insertions": 8, "lines": 9, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 0, "INS": 3, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.shutdown()"}], "spoonFilePath": "StandardTitanGraph.java"}], "commitMessage": "Unregister shutdown hook on graph closure\n\nfixes #626\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-04-19 02:14:38"}], "created": "2014-04-10 17:53:27"}, {"labels": ["bug"], "filteredCommits": ["afee26ff1f8b69622e709ec8a4cf01d1d304d84b"], "url": "https://github.com/thinkaurelius/titan/issues/595", "gitStatsSummary": {"insertions": 2, "gitFilesChange": 1, "lines": 2, "deletions": 0}, "numCommits": 1, "commits": {"afee26ff1f8b69622e709ec8a4cf01d1d304d84b": {"commitUser": "dalaro", "commitGHEventType": "closed"}, "1a597e0fb89307a94627c4f0479e76d6ae22a25b": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 7.000277777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.hbase.HBaseStoreManager"], "changesInPackagesGIT": ["titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase"], "body": "Noticed this in the HBase test log:\n\n```\n2014-02-18 15:06:13,519 INFO org.apache.hadoop.hbase.regionserver.Store: Closed i\n2014-02-18 15:06:13,519 INFO org.apache.hadoop.hbase.regionserver.Store: Closed s\n2014-02-18 15:06:13,521 INFO org.apache.hadoop.hbase.regionserver.Store: Closed system_properties\n2014-02-18 15:06:13,521 INFO org.apache.hadoop.hbase.regionserver.Store: Closed t\n2014-02-18 15:06:13,521 INFO org.apache.hadoop.hbase.regionserver.Store: Closed v\n```\n\nUpdate shorthand table for `system_properties` and briefly look for other new CF names.\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 1}, "title": "Update HBase's CF name shorthands", "statsSkippedReason": "", "closed": "2014-02-26 10:17:17", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2014-02-26 04:01:08", "commitHash": "afee26ff1f8b69622e709ec8a4cf01d1d304d84b", "commitParents": ["44e117dacf6f8922df8e593fafbd87437ebd99aa"], "commitGHEventType": "closed", "nameRev": "afee26ff1f8b69622e709ec8a4cf01d1d304d84b tags/0.4.3~19", "commitGitStats": [{"insertions": 2, "lines": 2, "filePath": "titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.hbase.HBaseStoreManager"}], "spoonFilePath": "HBaseStoreManager.java"}], "commitMessage": "Add system_properties to HBase CF shorthand map\n\ncloses #595 on master/0.4.x\n\n(cherry picked from commit 1a597e0fb89307a94627c4f0479e76d6ae22a25b)\n\nConflicts:\n\ttitan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-02-19 19:27:47"}, {"commitUser": "dalaro", "commitDateTime": "2014-02-19 19:27:47", "commitHash": "1a597e0fb89307a94627c4f0479e76d6ae22a25b", "commitParents": ["a602feda16496edc4c967d3b9cc53ebb7238acb3"], "commitGHEventType": "referenced", "nameRev": "1a597e0fb89307a94627c4f0479e76d6ae22a25b tags/0.5.0-M1~62^2~65^2~23", "commitGitStats": [{"insertions": 2, "lines": 2, "filePath": "titan-hbase/src/main/java/com/thinkaurelius/titan/diskstorage/hbase/HBaseStoreManager.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.hbase.HBaseStoreManager"}], "spoonFilePath": "HBaseStoreManager.java"}], "commitMessage": "Add system_properties to HBase CF shorthand map\n\ncloses #595\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-02-19 19:27:47"}], "created": "2014-02-18 20:08:19"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/578", "title": "Connection pool does not work properly under heavy load.", "closed": "2014-11-12 22:55:13", "commitsDetails": [], "commits": {}, "ttf": 282.0002777777778, "created": "2014-02-03 15:04:31", "user": "haebin", "body": "Under heavy load, Titan produces too many TIME_WAIT state sockets.\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/536", "title": "Forward-compatibility with Astyanax RetryPolicy constructors", "closed": "2014-03-30 03:36:16", "commitsDetails": [], "commits": {}, "ttf": 100.00027777777778, "created": "2013-12-19 04:25:00", "user": "dalaro", "body": "https://groups.google.com/forum/#!topic/aureliusgraphs/YmS-ovoOQHg\n\nBoundedExponentialBackoff (and maybe others?) have undergone constructor signature changes since 1.56.37 that break reflective instantiation of RetryPolicy in AstyanaxStoreManager.  Also consider potential mirror breakage for RetryBackoffStrategy implementations.\n"}, {"labels": ["bug"], "filteredCommits": ["891801754393a640e7233485e524821d23aaa765"], "url": "https://github.com/thinkaurelius/titan/issues/534", "gitStatsSummary": {"insertions": 22, "gitFilesChange": 5, "lines": 36, "deletions": 14}, "numCommits": 1, "commits": {"891801754393a640e7233485e524821d23aaa765": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 55.000277777777775, "user": "mbroecheler", "changesInPackagesGIT": ["titan-dist/src/assembly/static/bin/rexster.sh", "titan-dist/src/assembly/static/bin/rexster-console.sh", "titan-dist/src/assembly/static/bin/titan.sh", "titan-dist/src/assembly/static/bin/cassandra.in.sh", "titan-dist/src/assembly/static/conf/cassandra-env.sh"], "body": "uname: illegal option -- o\nusage: uname [-amnprsv]\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "titan.sh issue on OS X", "statsSkippedReason": "", "closed": "2014-02-12 18:08:49", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2013-12-19 11:30:52", "commitHash": "891801754393a640e7233485e524821d23aaa765", "commitParents": ["5f8dbdb71898c63217ced1bcfe1c86b330ccbd18"], "commitGHEventType": "referenced", "nameRev": "891801754393a640e7233485e524821d23aaa765 tags/0.4.2~22^2", "commitGitStats": [{"insertions": 3, "lines": 4, "filePath": "titan-dist/src/assembly/static/bin/rexster.sh", "deletions": 1}, {"insertions": 6, "lines": 10, "filePath": "titan-dist/src/assembly/static/bin/rexster-console.sh", "deletions": 4}, {"insertions": 4, "lines": 9, "filePath": "titan-dist/src/assembly/static/bin/titan.sh", "deletions": 5}, {"insertions": 6, "lines": 7, "filePath": "titan-dist/src/assembly/static/bin/cassandra.in.sh", "deletions": 1}, {"insertions": 3, "lines": 6, "filePath": "titan-dist/src/assembly/static/conf/cassandra-env.sh", "deletions": 3}], "commitSpoonAstDiffStats": [], "commitMessage": "Expunge uses of `uname -o` from shell scripts\n\nThe -o option is not POSIX standard and does not exist on OS X (and\npossibly other platforms).  Replaced with calls to just `uname`,\nwithout options, which under POSIX must behave the same as `uname -s`.\n\nThis change is untested.  It's intended to address #534, but needs to\nbe verified manually before closing the issue.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-12-19 11:24:45"}], "created": "2013-12-19 04:07:21"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/529", "title": "Fix short-cf-names regression", "closed": "2014-01-31 08:17:17", "commitsDetails": [], "commits": {}, "ttf": 44.000277777777775, "created": "2013-12-17 16:18:11", "user": "dalaro", "body": "I disabled short-cf-names by default in titan05's HBaseStoreManager when I ran into a regression in the process of debugging an orthogonal issue.  Some part of graphdb was reading the short name and attempting to open a diskstorage DB using the short name instead of the long equivalent.  Locate the root cause, fix it in both master and titan05, and then reenable short-cf-names under HBase by default in titan05.\n"}, {"labels": ["bug", "documentation"], "url": "https://github.com/thinkaurelius/titan/issues/506", "title": "Update Titan documentation so same ElasticSearch issue doesn't reoccur.", "closed": "2013-12-19 01:20:03", "commitsDetails": [], "commits": {}, "ttf": 16.00027777777778, "created": "2013-12-02 15:51:14", "user": "okram", "body": "I am trying to run this example and I get the following errors:\nException in thread \"main\" java.lang.IllegalArgumentException: Could not instantiate implementation: com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex\n    at com.thinkaurelius.titan.diskstorage.Backend.instantiate(Backend.java:346)\n    at com.thinkaurelius.titan.diskstorage.Backend.getImplementationClass(Backend.java:358)\n    at com.thinkaurelius.titan.diskstorage.Backend.getIndexes(Backend.java:322)\n    at com.thinkaurelius.titan.diskstorage.Backend.<init>(Backend.java:116)\n    at com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.getBackend(GraphDatabaseConfiguration.java:1108)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.<init>(StandardTitanGraph.java:75)\n    at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:40)\n    at test_pcg.GraphOfTheGodsFactory.create(GraphOfTheGodsFactory.java:43)\n    at test_pcg.Test.main(Test.java:7)\nCaused by: java.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:526)\n    at com.thinkaurelius.titan.diskstorage.Backend.instantiate(Backend.java:335)\n    ... 8 more\nCaused by: java.lang.NoSuchFieldError: LUCENE_41\n    at org.elasticsearch.Version.<clinit>(Version.java:118)\n    at com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.checkExpectedClientVersion(ElasticSearchIndex.java:559)\n    at com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.<init>(ElasticSearchIndex.java:98)\n    ... 13 more\n\nWhat is the problem?\n"}, {"labels": ["bug"], "filteredCommits": ["c312bb7dd7c42a6bd662cc4e953b4abcb2af66bb"], "url": "https://github.com/thinkaurelius/titan/issues/484", "gitStatsSummary": {"insertions": 17, "gitFilesChange": 1, "lines": 22, "deletions": 5}, "numCommits": 1, "commits": {"c312bb7dd7c42a6bd662cc4e953b4abcb2af66bb": {"commitUser": "dalaro", "commitGHEventType": "closed"}}, "ttf": 1.0002777777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.getConfiguration(java.io.File)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration"], "body": "This won't work:\ng = TitanFactory.open('infini.prop')\nbut this does:\ng = TitanFactory.open('./infini.prop')\n\nException:\njava.lang.NullPointerException\n    at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:191)\n    at com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.getConfiguration(GraphDatabaseConfiguration.java:733)\n    at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:29)\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 4, "TOT": 6, "DEL": 0, "INS": 2, "spoonFilesChanged": 1, "MOV": 0}, "title": "NullPointerExcp when just a file name is specified", "statsSkippedReason": "", "closed": "2013-11-15 00:03:17", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2013-11-14 18:59:44", "commitHash": "c312bb7dd7c42a6bd662cc4e953b4abcb2af66bb", "commitParents": ["eb5b7c6d95ee752ba7e9643c1445452ed64d0fff"], "commitGHEventType": "closed", "nameRev": "c312bb7dd7c42a6bd662cc4e953b4abcb2af66bb tags/0.4.1~60", "commitGitStats": [{"insertions": 17, "lines": 22, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/configuration/GraphDatabaseConfiguration.java", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 4, "TOT": 6, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.getConfiguration(java.io.File)"}], "spoonFilePath": "GraphDatabaseConfiguration.java"}], "commitMessage": "Fix NPE when parsing config file path without dir\n\nFixes #484\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-11-14 18:59:44"}], "created": "2013-11-13 22:09:47"}, {"labels": ["bug"], "filteredCommits": ["86bc51a0b9aa5d6d59ec1770f6fdafff8d0a5f7e"], "url": "https://github.com/thinkaurelius/titan/issues/479", "gitStatsSummary": {"insertions": 49, "gitFilesChange": 5, "lines": 92, "deletions": 43}, "numCommits": 1, "commits": {"86bc51a0b9aa5d6d59ec1770f6fdafff8d0a5f7e": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getGlobalCacheHitRatio()", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getSlice(com.thinkaurelius.titan.diskstorage.keycolumnvalue.KeySliceQuery,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore", "com.thinkaurelius.titan.diskstorage.util.MetricInstrumentedStore", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getGlobalCacheMisses()", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.SliceQuery", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.KeySliceQuery.hashCode()", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getSlice(com.thinkaurelius.titan.diskstorage.keycolumnvalue.KeySliceQuery,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction).2.call()", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getCacheHitRatio()", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.KeyRangeQuery.hashCode()", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getGlobalCacheHits()"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util", "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue"], "body": "```\n    TitanVertexQuery vertexQuery = (TitanVertexQuery) parentVertex.query();\n    Iterable<TitanRelation> relations = vertexQuery.relations();\n    Iterator<TitanRelation> relationsIter = relations.iterator();\n    relationsIter.next()\n\n    titanGraph.commit(); // With this commented out, the below query only queries Cassandra once\n\n    TitanVertexQuery vertexQuery2 = (TitanVertexQuery) parentVertex2.query();\n    Iterable<TitanRelation> relations2 = vertexQuery2.relations();\n    Iterator<TitanRelation> relationsIter2 = relations2.iterator();\n    relationsIter2.next()\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 11, "UPD": 25, "TOT": 50, "DEL": 7, "INS": 9, "spoonFilesChanged": 5, "MOV": 9}, "title": "Titan does no longer cache types", "statsSkippedReason": "", "closed": "2013-11-13 03:23:56", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-11-12 16:18:44", "commitHash": "86bc51a0b9aa5d6d59ec1770f6fdafff8d0a5f7e", "commitParents": ["996dd26106e7310f2a8681591e7b86596f690532"], "commitGHEventType": "closed", "nameRev": "86bc51a0b9aa5d6d59ec1770f6fdafff8d0a5f7e tags/0.4.1~65", "commitGitStats": [{"insertions": 2, "lines": 7, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeySliceQuery.java", "deletions": 5}, {"insertions": 27, "lines": 47, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/util/MetricInstrumentedStore.java", "deletions": 20}, {"insertions": 0, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/SliceQuery.java", "deletions": 2}, {"insertions": 18, "lines": 29, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/CachedKeyColumnValueStore.java", "deletions": 11}, {"insertions": 6, "lines": 6, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/inmemory/InMemoryGraphTest.java", "deletions": 0}, {"insertions": 2, "lines": 7, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/KeyRangeQuery.java", "deletions": 5}, {"insertions": 166, "lines": 166, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/inmemory/InMemoryMetricsTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 6, "DEL": 2, "INS": 1, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.KeySliceQuery.hashCode()"}], "spoonFilePath": "KeySliceQuery.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.inmemory.InMemoryMetricsTest"}], "spoonFilePath": "InMemoryMetricsTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getGlobalCacheHitRatio()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getGlobalCacheHits()"}, {"UPD": 2, "TOT": 6, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getGlobalCacheMisses()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getSlice(com.thinkaurelius.titan.diskstorage.keycolumnvalue.KeySliceQuery,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction).2.call()"}, {"UPD": 4, "TOT": 6, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getCacheHitRatio()"}, {"UPD": 3, "TOT": 5, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.getSlice(com.thinkaurelius.titan.diskstorage.keycolumnvalue.KeySliceQuery,com.thinkaurelius.titan.diskstorage.keycolumnvalue.StoreTransaction)"}], "spoonFilePath": "CachedKeyColumnValueStore.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.SliceQuery"}], "spoonFilePath": "SliceQuery.java"}, {"spoonMethods": [{"UPD": 13, "TOT": 15, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.MetricInstrumentedStore"}], "spoonFilePath": "MetricInstrumentedStore.java"}, {"spoonMethods": [], "spoonFilePath": "InMemoryGraphTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 7, "DEL": 2, "INS": 1, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.KeyRangeQuery.hashCode()"}], "spoonFilePath": "KeyRangeQuery.java"}], "commitMessage": "Added metric and cache hit based test cases to ensure that the correct number of storage backend retrievals are happening.\nRemoved query limit check for static query caching. Fixes #479.\nMade hashcode for SliceQuery children based on HashCodeBuilder.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-11-12 16:18:44"}], "created": "2013-11-13 00:04:22"}, {"labels": ["bug", "dependency", "duplicate"], "url": "https://github.com/thinkaurelius/titan/issues/476", "title": "Bug in Titan BerkeleyDB", "closed": "2015-06-24 18:59:22", "commitsDetails": [], "commits": {}, "ttf": 590.0002777777778, "created": "2013-11-11 17:46:22", "user": "dirkweissenborn", "body": "Graph configuration:\n\n```\nstorage.backend=berkeleyje\nstorage.directory=$path/standard\nstorage.index.lucene.backend=lucene\nstorage.index.lucene.directory=$path/lucene\nstorage.buffer-size=2048\nids.block-size=500000\n\ng.makeKey(UI).dataType(classOf[String]).indexed(classOf[Vertex]).unique(UniquenessConsistency.LOCK).make()\ng.makeKey(TYPE).dataType(classOf[String]).indexed(classOf[Vertex]).indexed(\"lucene\",classOf[Vertex]).make()\ng.makeKey(TEXT).dataType(classOf[String]).indexed(\"lucene\",classOf[Vertex]).make()\ng.makeKey(SOURCE).dataType(classOf[String]).indexed(classOf[Edge]).make()\ng.makeKey(WEIGHT).dataType(classOf[java.lang.Double]).indexed(classOf[Edge]).make()\ng.commit()\n\nfinal val UI = \"ui\"\nfinal val TYPE = \"type\"\nfinal val TEXT = \"text\"\nfinal val SOURCE = \"source\"\nfinal val WEIGHT = \"weight\"\n\n//open/create graph\ngraph = TitanFactory.open(titanConf)\n```\n\nI filled the graph with my data and tested the following with gremlin:\n\n```\ngremlin> g.v(252).ui\n==>C0033684\ngremlin> g.v(724).ui\n==>C0033684\ngremlin> g.v(1016).ui\n==>C0033684\ngremlin> g.v(7644).ui\n==>C0033684\n```\n\nThis should not be possible after the given type declaration, that 'ui' should be unique. During indexing, I query the graph for a given vertex with the given 'ui'. If it exists, I take it and add an edge to it. If not I create it first.\n\nThis is how I query the graph for the vertex:\n\n```\nval it1 = graph.query.has('ui', Compare.EQUAL, c1.conceptId).limit(1).vertices()\n```\n\nHow can it happen that there are many vertices with the same ui?\n"}, {"labels": ["bug", "question"], "url": "https://github.com/thinkaurelius/titan/issues/468", "title": "Warning message regarding Thrift fame size.", "closed": "2013-11-10 01:45:24", "commitsDetails": [], "commits": {}, "ttf": 3.000277777777778, "created": "2013-11-06 23:33:09", "user": "okram", "body": "This doesn't seem good:\n\n```\ngremlin> g = TitanFactory.open('conf/my-cassandra-embedded.properties')\nWARN  com.thinkaurelius.titan.diskstorage.cassandra.embedded.CassandraEmbeddedStoreManager  - Couldn't set custom Thrift Frame Size property, use 'cassandrathrift' instead.\n```\n"}, {"labels": ["bug"], "filteredCommits": ["c13653068935640e541ac88784e8b349e64da134", "5f904d746f517fc714368c0258df4fd545e3829f"], "url": "https://github.com/thinkaurelius/titan/issues/461", "gitStatsSummary": {"insertions": 47, "gitFilesChange": 7, "lines": 81, "deletions": 34}, "numCommits": 2, "commits": {"c13653068935640e541ac88784e8b349e64da134": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}, "5f904d746f517fc714368c0258df4fd545e3829f": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.query.condition.DirectionCondition.evaluate(com.thinkaurelius.titan.core.TitanRelation)", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.relations().1", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.getBasicIterator().5", "com.thinkaurelius.titan.graphdb.query.AbstractVertexCentricQueryBuilder.constructQuery(com.thinkaurelius.titan.graphdb.internal.RelationType)", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.getBasicIterator()", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.vertexIds().4", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.vertexIds()", "com.thinkaurelius.titan.graphdb.relations.CacheEdge.getVertexCentricDirection()", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.iterator()", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.properties().2", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.vertices().3", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.getBasicIterator().6", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.1.execute(com.thinkaurelius.titan.graphdb.transaction.VertexCentricQuery,com.thinkaurelius.titan.diskstorage.keycolumnvalue.SliceQuery,java.lang.Object)", "com.thinkaurelius.titan.graphdb.relations.RelationComparator.compare(com.thinkaurelius.titan.graphdb.internal.InternalRelation,com.thinkaurelius.titan.graphdb.internal.InternalRelation)", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.vertices()", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.1.execute(com.thinkaurelius.titan.graphdb.transaction.VertexCentricQuery,com.thinkaurelius.titan.diskstorage.keycolumnvalue.SliceQuery,java.lang.Object).4", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.relations()", "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.properties()"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query", "CHANGELOG.textile", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/condition"], "body": "there should be NO filtering inside the executeQuery call to make sure that the limits are correctly propagated.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 18, "UPD": 14, "TOT": 49, "DEL": 8, "INS": 13, "spoonFilesChanged": 6, "MOV": 14}, "title": "Limit is not adjusted correctly for queries filtered at lower level", "statsSkippedReason": "", "closed": "2013-11-04 23:18:19", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-11-04 15:18:12", "commitHash": "c13653068935640e541ac88784e8b349e64da134", "commitParents": ["61a915a6afd480c126ad2e5747f3d4c310b2299b"], "commitGHEventType": "closed", "nameRev": "c13653068935640e541ac88784e8b349e64da134 tags/0.4.1~90", "commitGitStats": [{"insertions": 133, "lines": 220, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 87}, {"insertions": 13, "lines": 19, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/RelationComparator.java", "deletions": 6}, {"insertions": 1, "lines": 12, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 11}, {"insertions": 5, "lines": 5, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheEdge.java", "deletions": 0}, {"insertions": 4, "lines": 7, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/AbstractVertexCentricQueryBuilder.java", "deletions": 3}, {"insertions": 6, "lines": 7, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/condition/DirectionCondition.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 34, "TOT": 249, "DEL": 34, "INS": 74, "MOV": 107, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testQuery()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 7, "DEL": 0, "INS": 2, "MOV": 5, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.RelationComparator.compare(com.thinkaurelius.titan.graphdb.internal.InternalRelation,com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}], "spoonFilePath": "RelationComparator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.CacheEdge.getVertexCentricDirection()"}], "spoonFilePath": "CacheEdge.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 8, "DEL": 1, "INS": 3, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.condition.DirectionCondition.evaluate(com.thinkaurelius.titan.core.TitanRelation)"}], "spoonFilePath": "DirectionCondition.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 6, "DEL": 2, "INS": 1, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.1.execute(com.thinkaurelius.titan.graphdb.transaction.VertexCentricQuery,com.thinkaurelius.titan.diskstorage.keycolumnvalue.SliceQuery,java.lang.Object)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.1.execute(com.thinkaurelius.titan.graphdb.transaction.VertexCentricQuery,com.thinkaurelius.titan.diskstorage.keycolumnvalue.SliceQuery,java.lang.Object).4"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 2, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.AbstractVertexCentricQueryBuilder.constructQuery(com.thinkaurelius.titan.graphdb.internal.RelationType)"}], "spoonFilePath": "AbstractVertexCentricQueryBuilder.java"}], "commitMessage": "Fixes #461. Also fixes the relation ordering to go by type first and then direction.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-11-04 15:18:12"}, {"commitUser": "mbroecheler", "commitDateTime": "2013-11-04 22:17:52", "commitHash": "5f904d746f517fc714368c0258df4fd545e3829f", "commitParents": ["4e71e58a8564d92e85610026e0e5e38382671ccb"], "commitGHEventType": "referenced", "nameRev": "5f904d746f517fc714368c0258df4fd545e3829f tags/0.4.1~59^2~39^2", "commitGitStats": [{"insertions": 14, "lines": 27, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/SimpleVertexQueryProcessor.java", "deletions": 13}, {"insertions": 4, "lines": 4, "filePath": "CHANGELOG.textile", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.getBasicIterator().5"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.relations().1"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.vertexIds().4"}, {"UPD": 1, "TOT": 6, "DEL": 1, "INS": 1, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.getBasicIterator()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.vertexIds()"}, {"UPD": 0, "TOT": 6, "DEL": 2, "INS": 3, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.iterator()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.properties().2"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.getBasicIterator().6"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.vertices().3"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.vertices()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.relations()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.SimpleVertexQueryProcessor.properties()"}], "spoonFilePath": "SimpleVertexQueryProcessor.java"}], "commitMessage": "Fixed limit adjustment issue for SimpleVertexQueryProcessor #461\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-11-04 22:17:52"}], "created": "2013-11-04 20:40:50"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/454", "title": "IndexQuery needs to take order into account in equals/hashcode/etc", "closed": "2013-11-08 01:40:15", "commitsDetails": [], "commits": {}, "ttf": 7.000277777777778, "created": "2013-10-31 18:41:55", "user": "mbroecheler", "body": "Otherwise caching is faulty.\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/449", "title": "CassandraEmbedded Hangs on exiting Gremlin REPL", "closed": "2013-11-11 19:00:51", "commitsDetails": [], "commits": {}, "ttf": 17.00027777777778, "created": "2013-10-25 16:03:47", "user": "okram", "body": "```\ngremlin> g.shutdown()\n==>null\ngremlin> exit\n\n```\n\nJust sitting there... been over 1 minute thus far.\n"}, {"labels": ["bug", "documentation"], "url": "https://github.com/thinkaurelius/titan/issues/432", "title": "Old wikidoc HTMLs have all their images as broken links", "closed": "2013-10-17 17:35:16", "commitsDetails": [], "commits": {}, "ttf": 2.000277777777778, "created": "2013-10-15 15:54:45", "user": "okram", "body": "http://thinkaurelius.github.io/titan/wikidoc/0.3.0/Home.html\n\nBoth in titan and faunus.\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/427", "title": "Titan/Hazelcast hangs the Gremlin REPL on exit.", "closed": "2013-11-11 19:00:41", "commitsDetails": [], "commits": {}, "ttf": 27.00027777777778, "created": "2013-10-14 20:29:50", "user": "okram", "body": "```\ngremlin> g.shutdown()\nCould not commit transaction due to exception during persistence\nDisplay stack trace? [yN]\ngremlin> exit\n~/software/aurelius/titan$\n```\n\nI have to CNTRL-C out. Note that when I g.shutdown() I get an exception as well. Will post that in another ticket.\n"}, {"labels": ["bug"], "filteredCommits": ["b428f3b0b34bc81d67ec83b7203320ba2578bf89"], "url": "https://github.com/thinkaurelius/titan/issues/426", "gitStatsSummary": {"insertions": 2, "gitFilesChange": 1, "lines": 10, "deletions": 8}, "numCommits": 1, "commits": {"b428f3b0b34bc81d67ec83b7203320ba2578bf89": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 25.00027777777778, "user": "dkuppitz", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.query.GraphCentricQueryBuilder.edges()", "com.thinkaurelius.titan.graphdb.query.GraphCentricQueryBuilder.vertices()"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query"], "body": "`orderBy` doesn't work in queries without conditions.\n\nCode to reproduce:\n\n```\ntg = TinkerGraphFactory.createTinkerGraph()\n\nconf = new BaseConfiguration()\nconf.setProperty(\"storage.backend\",\"inmemory\")\n\ng = TitanFactory.open(conf)\ng.makeKey().name(\"name\").dataType(String.class).unique().indexed(Vertex.class).make()\ng.makeKey().name(\"lang\").dataType(String.class).make()\ng.makeKey().name(\"age\").dataType(Integer.class).make()\nw = g.makeKey().name(\"weight\").dataType(Double.class).make()\ng.makeLabel().name(\"knows\").sortKey(w).make()\ng.makeLabel().name(\"created\").sortKey(w).make()\ng.commit()\n\ntg.V().each({\n  v = g.addVertex()\n  ElementHelper.copyProperties(it, v)\n})\n\ntg.E().each({\n  v1 = g.V(\"name\", it.outV().next().name).next()\n  v2 = g.V(\"name\", it.inV().next().name).next()\n  g.addEdge(v1, v2, it.label, it.map())\n})\n\ng.commit()\n\n// doesn't work\ng.query().orderBy(\"age\", Order.DESC).vertices()._().map()\ng.query().orderBy(\"age\", Order.DESC).limit(2).vertices()._().map()\n\n// works\ng.query().hasNot(\"name\", null).orderBy(\"age\", Order.DESC).vertices()._().map()\ng.query().hasNot(\"age\", null).orderBy(\"age\", Order.DESC).limit(2).vertices()._().map()\n```\n\nUntested with ES-indexed properties.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 4, "DEL": 2, "INS": 0, "spoonFilesChanged": 1, "MOV": 2}, "title": "orderBy in unconditional query", "statsSkippedReason": "", "closed": "2013-11-09 07:50:53", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-11-07 19:20:24", "commitHash": "b428f3b0b34bc81d67ec83b7203320ba2578bf89", "commitParents": ["736f1d41ff7db602e3836a89eae80f29f2f9c4dc"], "commitGHEventType": "closed", "nameRev": "b428f3b0b34bc81d67ec83b7203320ba2578bf89 tags/0.4.1~76^2~5", "commitGitStats": [{"insertions": 15, "lines": 19, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 4}, {"insertions": 2, "lines": 10, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/GraphCentricQueryBuilder.java", "deletions": 8}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 3, "TOT": 14, "DEL": 1, "INS": 9, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testWithoutIndex()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.GraphCentricQueryBuilder.edges()"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.GraphCentricQueryBuilder.vertices()"}], "spoonFilePath": "GraphCentricQueryBuilder.java"}], "commitMessage": "Fixes #426.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-11-07 19:20:24"}], "created": "2013-10-14 16:48:48"}, {"labels": ["bug"], "filteredCommits": ["de5ed8fe8b9525d3a760033fc7a8e2877220b0fe"], "url": "https://github.com/thinkaurelius/titan/issues/425", "gitStatsSummary": {"insertions": 10, "gitFilesChange": 1, "lines": 12, "deletions": 2}, "numCommits": 1, "commits": {"de5ed8fe8b9525d3a760033fc7a8e2877220b0fe": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "okram", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.hazelcast.AbstractHazelcastStoreManager.beginTransaction(com.thinkaurelius.titan.diskstorage.hazelcast.StoreTxConfig)", "com.thinkaurelius.titan.diskstorage.hazelcast.AbstractHazelcastStoreManager"], "changesInPackagesGIT": ["titan-hazelcast/src/main/java/com/thinkaurelius/titan/diskstorage/hazelcast"], "body": "With other backends, loading a 1 million edge graph  using the code fragment in\n\n[[https://github.com/thinkaurelius/titan/wiki/Generating-Artificial-Natural-Graphs]]\n\n...works just fine. For Hazelcast, it no likey.\n\n```\ngremlin> size = 1000000; ids = [g.addVertex().id]; rand = new Random();\n==>java.util.Random@790a367f\ngremlin> (1..size).each{\ngremlin>   v = g.addVertex();\ngremlin>   u = g.v(ids.get(rand.nextInt(ids.size())))\ngremlin>   g.addEdge(v,u,'linked');\ngremlin>   ids.add(u.id);\ngremlin>   ids.add(v.id);\ngremlin>   if(it % 1000 == 0)\ngremlin>     g.commit()\ngremlin> }; null\nCould not commit transaction due to exception during persistence\nDisplay stack trace? [yN] y\ncom.thinkaurelius.titan.core.TitanException: Could not commit transaction due to exception during persistence\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.commit(StandardTitanTx.java:950)\n    at com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.commit(TitanBlueprintsGraph.java:55)\n    at com.tinkerpop.blueprints.TransactionalGraph$commit.call(Unknown Source)\n    at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:112)\n    at groovysh_evaluate$_run_closure1.doCall(groovysh_evaluate:63)\n    at sun.reflect.GeneratedMethodAccessor38.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:272)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:903)\n    at groovy.lang.Closure.call(Closure.java:415)\n    at groovy.lang.Closure.call(Closure.java:428)\n    at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:1379)\n    at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:1351)\n    at org.codehaus.groovy.runtime.dgm$170.invoke(Unknown Source)\n    at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:271)\n    at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:53)\n    at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)\n    at groovysh_evaluate.run(groovysh_evaluate:56)\n    at groovysh_evaluate$run.call(Unknown Source)\n    at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n    at groovysh_evaluate$run.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.Interpreter.evaluate(Interpreter.groovy:67)\n    at org.codehaus.groovy.tools.shell.Interpreter$evaluate.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.Groovysh.execute(Groovysh.groovy:152)\n    at org.codehaus.groovy.tools.shell.Shell.leftShift(Shell.groovy:114)\n    at org.codehaus.groovy.tools.shell.Shell$leftShift$0.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.ShellRunner.work(ShellRunner.groovy:88)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$work(InteractiveShellRunner.groovy)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.work(InteractiveShellRunner.groovy:100)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:272)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:52)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:137)\n    at org.codehaus.groovy.tools.shell.ShellRunner.run(ShellRunner.groovy:57)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$run(InteractiveShellRunner.groovy)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.run(InteractiveShellRunner.groovy:66)\n    at com.thinkaurelius.titan.tinkerpop.gremlin.Console.<init>(Console.java:57)\n    at com.thinkaurelius.titan.tinkerpop.gremlin.Console.<init>(Console.java:70)\n    at com.thinkaurelius.titan.tinkerpop.gremlin.Console.main(Console.java:96)\nCaused by: com.hazelcast.transaction.TransactionException: Transaction is timed-out!\n    at com.hazelcast.transaction.impl.TransactionImpl.checkTimeout(TransactionImpl.java:224)\n    at com.hazelcast.transaction.impl.TransactionImpl.prepare(TransactionImpl.java:154)\n    at com.hazelcast.transaction.impl.TransactionContextImpl.commitTransaction(TransactionContextImpl.java:59)\n    at com.thinkaurelius.titan.diskstorage.hazelcast.AbstractHazelcastStoreManager$HazelCastTransaction.commit(AbstractHazelcastStoreManager.java:94)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction.commit(BackendTransaction.java:75)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.commit(StandardTitanTx.java:943)\n    ... 66 more\ngremlin>\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 6, "DEL": 1, "INS": 5, "spoonFilesChanged": 1, "MOV": 0}, "title": "Transaction timeout with Hazelcast on g.commit() operation", "statsSkippedReason": "", "closed": "2013-10-14 20:37:05", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2013-10-14 17:01:50", "commitHash": "de5ed8fe8b9525d3a760033fc7a8e2877220b0fe", "commitParents": ["69a156e0249a0173b717cdade73db96a53321bcb"], "commitGHEventType": "referenced", "nameRev": "de5ed8fe8b9525d3a760033fc7a8e2877220b0fe tags/0.4.0~18^2", "commitGitStats": [{"insertions": 10, "lines": 12, "filePath": "titan-hazelcast/src/main/java/com/thinkaurelius/titan/diskstorage/hazelcast/AbstractHazelcastStoreManager.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 1, "INS": 3, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.hazelcast.AbstractHazelcastStoreManager.beginTransaction(com.thinkaurelius.titan.diskstorage.hazelcast.StoreTxConfig)"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.hazelcast.AbstractHazelcastStoreManager"}], "spoonFilePath": "AbstractHazelcastStoreManager.java"}], "commitMessage": "Make HC transactions use LOCK_EXPIRE_MS\n\nHazelcast's notion of expiring transactions is not really identical to\nTitan's notion of expiring locks.  Might want to introduce a new\nconfig key instead of reusing LOCK_EXPIRE_MS.\n\nThis commit might fix a cause of #425.  This issue seems to be timing\nsensitive and I've yet to reproduce it, so I can't tell for sure.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-10-14 17:01:50"}], "created": "2013-10-14 14:38:04"}, {"labels": ["bug", "convention"], "filteredCommits": ["5f62c60624af53910a8e3e494b8dbb4110d630bb"], "url": "https://github.com/thinkaurelius/titan/issues/422", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 2, "lines": 14, "deletions": 14}, "numCommits": 1, "commits": {"5f62c60624af53910a8e3e494b8dbb4110d630bb": {"commitUser": "dalaro", "commitGHEventType": "closed"}}, "ttf": 1.0002777777777778, "user": "okram", "changesInPackagesGIT": ["bin/gremlin.bat", "bin/gremlin.sh"], "body": "```\n~/software/aurelius/titan$ git pull\nAlready up-to-date.\n~/software/aurelius/titan$ git status\n# On branch master\nnothing to commit, working directory clean\n~/software/aurelius/titan$ mvn clean install -Dmaven.test.skip=true\n[INFO] Scanning for projects...\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Build Order:\n[INFO]\n[INFO] Titan: Distributed Graph Database\n[INFO] Titan-Core: Core Library for Titan\n[INFO] Titan-Test: Test Suite for Titan\n[INFO] Titan-ElasticSearch: Distributed Indexing Support\n[INFO] Titan-BerkeleyJE: Distributed Graph Database\n...\n...\n...\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 15.525s\n[INFO] Finished at: Mon Oct 14 08:23:33 MDT 2013\n[INFO] Final Memory: 50M/370M\n[INFO] ------------------------------------------------------------------------\n~/software/aurelius/titan$ git status\n# On branch master\n# Changes not staged for commit:\n#   (use \"git add/rm <file>...\" to update what will be committed)\n#   (use \"git checkout -- <file>...\" to discard changes in working directory)\n#\n#   deleted:    bin/README.txt\n#   modified:   bin/gremlin.bat\n#   modified:   bin/gremlin.sh\n#\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\n~/software/aurelius/titan$\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Building Titan mutates Gremlin.sh/bat and deletes README.txt", "statsSkippedReason": "", "closed": "2013-10-15 16:28:58", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2013-10-15 10:55:08", "commitHash": "5f62c60624af53910a8e3e494b8dbb4110d630bb", "commitParents": ["4299c586a97ea8306aea0311ab672be6e0bd3952"], "commitGHEventType": "closed", "nameRev": "5f62c60624af53910a8e3e494b8dbb4110d630bb tags/0.4.0~16", "commitGitStats": [{"insertions": 0, "lines": 3, "filePath": "bin/README.txt", "deletions": 3}, {"insertions": 0, "lines": 2, "filePath": "bin/gremlin.bat", "deletions": 2}, {"insertions": 0, "lines": 12, "filePath": "bin/gremlin.sh", "deletions": 12}], "commitSpoonAstDiffStats": [], "commitMessage": "Removing conflict-prone stubs from bin\n\nFixes #422\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-10-15 10:55:08"}], "created": "2013-10-14 14:23:50"}, {"labels": ["bug", "convention"], "filteredCommits": ["5d37a960447ff5351194b13246d1bfa132634546"], "url": "https://github.com/thinkaurelius/titan/issues/419", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"5d37a960447ff5351194b13246d1bfa132634546": {"commitUser": "dalaro", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "okram", "changesInPackagesGIT": [], "body": "From the git pull titan$ directory, Hazelcast doesn't load. Note that Cassandra works just fine.\n\n```\ntitan$ git pull\ntitan$ mvn clean install -Dmaven.test.skip=true\ntitan$ bin/gremlin.sh\n...\ngremlin> g = TitanFactory.open('conf/titan-hazelcast.properties')\nCould not find implementation class: com.thinkaurelius.titan.diskstorage.hazelcast.HazelcastCacheStoreManager\nDisplay stack trace? [yN]\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "[Titan04/SNAPSHOT] Hazelcast not found", "statsSkippedReason": "", "closed": "2013-10-13 09:04:44", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2013-10-13 04:10:03", "commitHash": "5d37a960447ff5351194b13246d1bfa132634546", "commitParents": ["99c3c6a87a120f0ec34b83eb1f890f538e12c9ed"], "commitGHEventType": "closed", "nameRev": "5d37a960447ff5351194b13246d1bfa132634546 tags/0.4.0~18^2~5", "commitGitStats": [{"insertions": 6, "lines": 6, "filePath": "titan-dist/titan-dist-all/pom.xml", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Add titan-hazelcast to standalone distro\n\nFixes #419\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-10-13 04:10:03"}], "created": "2013-10-12 13:35:48"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/414", "title": "Investigate connection issues with Astyanax on AWS", "closed": "2013-11-11 18:55:27", "commitsDetails": [], "commits": {}, "ttf": 32.000277777777775, "created": "2013-10-09 21:24:47", "user": "mbroecheler", "body": "sometimes it does not seem to connect. Why and what can we do about that?\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/412", "title": "Faunus SLF4J issues with Titan 0.4.0-SNAPSHOT", "closed": "2013-10-08 19:15:29", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2013-10-08 15:25:05", "user": "okram", "body": "I had this problem earlier in Faunus and was able to use Apache Logger to get around it. But this is in Titan's code and Faunus can't read graphs (HBase or Cassandra).\n\n_HBASE_\n\n```\ngremlin> g = FaunusFactory.open('bin/titan-hbase-input.properties')\n==>faunusgraph[titanhbaseinputformat->graphsonoutputformat]\ngremlin> g.V.map\n09:21:36 WARN mapreduce.FaunusCompiler: Using the developer Faunus job jar: target/faunus-0.4.0-SNAPSHOT-job.jar\n09:21:36 INFO mapreduce.FaunusCompiler: Compiled to 1 MapReduce job(s)\n09:21:36 INFO mapreduce.FaunusCompiler: Executing job 1 out of 1: MapSequence[com.thinkaurelius.faunus.mapreduce.transform.VerticesMap.Map, com.thinkaurelius.faunus.mapreduce.transform.PropertyMapMap.Map]\n09:21:36 INFO mapreduce.FaunusCompiler: Job data location: output/job-0\n09:21:36 WARN mapred.JobClient: Use GenericOptionsParser for parsing the arguments. Applications should implement Tool for the same.\nSLF4J: slf4j-api 1.6.x (or later) is incompatible with this binding.\nSLF4J: Your binding is version 1.5.5 or earlier.\nSLF4J: Upgrade your binding to version 1.6.x.\n09:21:37 INFO mapred.JobClient: Cleaning up the staging area hdfs://localhost:9000/tmp/hadoop-marko/mapred/staging/marko/.staging/job_201310080859_0005\norg.slf4j.impl.StaticLoggerBinder.getSingleton()Lorg/slf4j/impl/StaticLoggerBinder;\nDisplay stack trace? [yN] y\njava.lang.NoSuchMethodError: org.slf4j.impl.StaticLoggerBinder.getSingleton()Lorg/slf4j/impl/StaticLoggerBinder;\n    at org.slf4j.LoggerFactory.bind(LoggerFactory.java:128)\n    at org.slf4j.LoggerFactory.performInitialization(LoggerFactory.java:107)\n    at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:295)\n    at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:269)\n    at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:281)\n    at com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.<clinit>(TitanBlueprintsGraph.java:24)\n    at com.thinkaurelius.faunus.formats.titan.hbase.TitanHBaseInputFormat.setConf(TitanHBaseInputFormat.java:53)\n```\n\n_CASSANDRA_\n\n```\nCaused by: java.lang.IllegalStateException: org.slf4j.LoggerFactory could not be successfully initialized. See also http://www.slf4j.org/codes.html#unsuccessfulInit\n    at org.slf4j.LoggerFactory.getILoggerFactory(LoggerFactory.java:303)\n    at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:269)\n    at org.slf4j.LoggerFactory.getLogger(LoggerFactory.java:281)\n    at org.apache.cassandra.hadoop.ColumnFamilyInputFormat.<clinit>(ColumnFamilyInputFormat.java:71)\n    ... 78 more\n```\n"}, {"labels": ["bug"], "filteredCommits": ["814a5107c5858ef3d4411610feaed4cf74237eb5", "3fedaf2cdff20618a3b06951f72e0da59204c6de"], "url": "https://github.com/thinkaurelius/titan/issues/393", "gitStatsSummary": {"insertions": 8, "gitFilesChange": 3, "lines": 13, "deletions": 5}, "numCommits": 2, "commits": {"814a5107c5858ef3d4411610feaed4cf74237eb5": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}, "3fedaf2cdff20618a3b06951f72e0da59204c6de": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.connectRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)", "com.thinkaurelius.titan.graphdb.relations.CacheEdge.it()", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(java.util.Collection,java.util.Collection,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx).2.call()", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.removeRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database"], "body": "because when it tries to lookup the new representation of said edge it will find two (for each direction).\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 4, "UPD": 1, "TOT": 11, "DEL": 2, "INS": 6, "spoonFilesChanged": 3, "MOV": 2}, "title": "Resolving loop edge across tx boundaries fails", "statsSkippedReason": "", "closed": "2013-09-28 06:30:10", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-09-27 21:10:30", "commitHash": "3fedaf2cdff20618a3b06951f72e0da59204c6de", "commitParents": ["f77a4f7d95c07a0f54fc714dc97ddbb6a19ab431"], "commitGHEventType": "closed", "nameRev": "3fedaf2cdff20618a3b06951f72e0da59204c6de tags/0.4.0~94^2~1", "commitGitStats": [{"insertions": 2, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 1}, {"insertions": 4, "lines": 5, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.connectRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.removeRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(java.util.Collection,java.util.Collection,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx).2.call()"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testIteration()"}, {"UPD": 0, "TOT": 5, "DEL": 0, "INS": 3, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testThreadBoundTx()"}], "spoonFilePath": "TitanGraphTest.java"}], "commitMessage": "Fixes #393. Fixes another issue where loop edges get deleted twice.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-09-27 21:10:30"}, {"commitUser": "mbroecheler", "commitDateTime": "2013-09-27 21:20:05", "commitHash": "814a5107c5858ef3d4411610feaed4cf74237eb5", "commitParents": ["3fedaf2cdff20618a3b06951f72e0da59204c6de"], "commitGHEventType": "referenced", "nameRev": "814a5107c5858ef3d4411610feaed4cf74237eb5 tags/0.4.0~94^2", "commitGitStats": [{"insertions": 5, "lines": 7, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheEdge.java", "deletions": 2}, {"insertions": 0, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.connectRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.removeRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 5, "DEL": 0, "INS": 3, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.CacheEdge.it()"}], "spoonFilePath": "CacheEdge.java"}], "commitMessage": "Fixes #393\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-09-27 21:20:05"}], "created": "2013-09-28 04:09:52"}, {"labels": ["bug"], "filteredCommits": ["d39591ed87e4e2f0c854e1e9942af37cd070e2e5"], "url": "https://github.com/thinkaurelius/titan/issues/358", "gitStatsSummary": {"insertions": 56, "gitFilesChange": 4, "lines": 108, "deletions": 52}, "numCommits": 1, "commits": {"d39591ed87e4e2f0c854e1e9942af37cd070e2e5": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 23.00027777777778, "user": "zachkinstner", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.relations.StandardEdge", "com.thinkaurelius.titan.graphdb.relations.CacheProperty.getPropertyKeysDirect()", "com.thinkaurelius.titan.graphdb.relations.CacheEdge.getPropertyKeysDirect()", "com.thinkaurelius.titan.graphdb.relations.StandardProperty"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations"], "body": "I have noticed that Titan is adding additional null properties to edges after committing the transaction. I think this is related to the property being an edge primary key, and _not_ being set by `addEdge()`. Here is an example scenario:\n\n``` java\nmyProp = g.makeType().dataType(Integer.class).name(\"MyProp\").unique(OUT).indexed(Vertex.class).makePropertyKey(); \ng.makeType().name(\"MyEdge\").primaryKey(myProp).unique(OUT).makeEdgeLabel();\na = g.addVertex();\nb = g.addVertex();\ne = g.addEdge(a,b,\"MyEdge\",[:]);\n```\n\nResult before commit:\n\n``` json\n{\"_type\":\"edge\",\"_inV\":\"8\",\"_id\":\"j-4-2F0LaTPQAS\",\"_label\":\"MyEdge\",\"_outV\":\"4\"}]\n```\n\nAfter commit, the `MyProp` property is present:\n\n``` json\n{\"_properties\":{\"MyProp\":null},\"_type\":\"edge\",\"_inV\":\"8\",\"_id\":\"j-4-2F0LaTPQAS\",\"_label\":\"MyEdge\",\"_outV\":\"4\"}\n```\n\nIs this the expected behavior?\n\nSide note: this (after commit) returns an empty result:\n\n``` java\ng.e(\"j-4-2F0LaTPQAS\").has(\"MyProp\");\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 4, "UPD": 0, "TOT": 6, "DEL": 0, "INS": 4, "spoonFilesChanged": 4, "MOV": 2}, "title": "Null Edge Properties Added After Commit", "statsSkippedReason": "", "closed": "2013-09-27 21:50:07", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-09-27 13:07:09", "commitHash": "d39591ed87e4e2f0c854e1e9942af37cd070e2e5", "commitParents": ["7d69240e324cb5c2bef71a25dc88fbead1697308"], "commitGHEventType": "closed", "nameRev": "d39591ed87e4e2f0c854e1e9942af37cd070e2e5 tags/0.4.0~94^2~4", "commitGitStats": [{"insertions": 20, "lines": 38, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheEdge.java", "deletions": 18}, {"insertions": 10, "lines": 20, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/StandardEdge.java", "deletions": 10}, {"insertions": 10, "lines": 20, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/StandardProperty.java", "deletions": 10}, {"insertions": 16, "lines": 30, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/CacheProperty.java", "deletions": 14}, {"insertions": 7, "lines": 7, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.StandardEdge"}], "spoonFilePath": "StandardEdge.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 17, "DEL": 0, "INS": 5, "MOV": 12, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testTypes()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.CacheEdge.getPropertyKeysDirect()"}], "spoonFilePath": "CacheEdge.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.StandardProperty"}], "spoonFilePath": "StandardProperty.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.CacheProperty.getPropertyKeysDirect()"}], "spoonFilePath": "CacheProperty.java"}], "commitMessage": "Fixes #358\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-09-27 13:07:09"}], "created": "2013-09-04 18:17:51"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/355", "title": "Unexpected null values", "closed": "2013-09-27 05:20:27", "commitsDetails": [], "commits": {}, "ttf": 35.000277777777775, "created": "2013-08-22 20:17:00", "user": "dkuppitz", "body": "One of our clients has a problem with unexpected null values. Unfortunately I cannot reproduce this behaviour in s small sample graph, but here's how it looks like:\n\n```\ng.V[1..10].map()\n<snip>\n==>{a_property=null, custom_id=-7930742963208686808, ...}\n```\n\nThen, in the same graph (and even the same Gremlin REPL session) the following query:\n\n```\ng.v(203003840).map()\n==>a_property=a_string_value\n==>custom_id=-7930742963208686808\n...\n```\n\nThe custom id is definitely unique, so it's definitely the same vertex. Some queries return null values for a_property, some queries return the real (expected) values. It's not only this single vertex, this behaviour is seen in a lot of (random) vertices, too. We can't tell for sure, but it seems like only this a_property is affected. Unexpected null values were not seen on other properties.\n\nSystem: Cassandra + ElasticSearch\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/354", "title": "First Filter execution is wrong", "closed": "2013-09-28 02:20:51", "commitsDetails": [], "commits": {}, "ttf": 37.000277777777775, "created": "2013-08-22 00:00:35", "user": "mbroecheler", "body": "In Gremlin on a medium size graph where \"type\" is not indexed:\n\ngremlin> g.V('type','something').count()\n==> 7\ngremlin> g.V('type','something').count()\n==> 1252\n\nwith nothing done to the database in between. When executing a g.V up front, it produces the correct result.\n"}, {"labels": ["bug"], "filteredCommits": ["55d73740c60812fa57864c07f01e08b09a4504f4", "b7c3aa150bd268d5cb2c5cc50bb0a273eb16ff4e"], "url": "https://github.com/thinkaurelius/titan/issues/329", "gitStatsSummary": {"insertions": 65, "gitFilesChange": 1, "lines": 136, "deletions": 71}, "numCommits": 1, "commits": {"b7c3aa150bd268d5cb2c5cc50bb0a273eb16ff4e": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}, "55d73740c60812fa57864c07f01e08b09a4504f4": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 65.00027777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.database.IndexSerializer.addEdge(com.thinkaurelius.titan.graphdb.internal.InternalRelation,com.thinkaurelius.titan.graphdb.database.BackendTransaction)", "com.thinkaurelius.titan.graphdb.database.IndexSerializer.addProperty(com.thinkaurelius.titan.graphdb.database.TitanProperty,com.thinkaurelius.titan.graphdb.database.BackendTransaction)", "com.thinkaurelius.titan.graphdb.database.IndexSerializer.removeEdge(com.thinkaurelius.titan.graphdb.internal.InternalRelation,com.thinkaurelius.titan.graphdb.database.BackendTransaction)", "com.thinkaurelius.titan.graphdb.database.IndexSerializer.getIndexColumn(com.thinkaurelius.titan.graphdb.database.TitanKey,long)", "com.thinkaurelius.titan.graphdb.database.IndexSerializer.getIndexColumn(com.thinkaurelius.titan.graphdb.database.TitanKey,com.thinkaurelius.titan.graphdb.database.TitanProperty)", "com.thinkaurelius.titan.graphdb.database.IndexSerializer.removeProperty(com.thinkaurelius.titan.graphdb.database.TitanProperty,com.thinkaurelius.titan.graphdb.database.BackendTransaction)", "com.thinkaurelius.titan.graphdb.database.IndexSerializer.getIndexValue(com.thinkaurelius.titan.graphdb.database.TitanProperty)", "com.thinkaurelius.titan.graphdb.database.IndexSerializer.lockKeyedProperty(com.thinkaurelius.titan.graphdb.database.TitanProperty,com.thinkaurelius.titan.graphdb.database.BackendTransaction)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database"], "body": "Use the vertex id as the qualifying third field in the index entry not the property id.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 8, "UPD": 5, "TOT": 42, "DEL": 3, "INS": 9, "spoonFilesChanged": 1, "MOV": 25}, "title": "Index entry format allows duplicates for out-unique properties", "statsSkippedReason": "", "closed": "2013-09-26 03:26:58", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-09-25 19:04:35", "commitHash": "b7c3aa150bd268d5cb2c5cc50bb0a273eb16ff4e", "commitParents": ["28650a32ec86c8fdccc8518318116ed408f1346b"], "commitGHEventType": "referenced", "nameRev": "b7c3aa150bd268d5cb2c5cc50bb0a273eb16ff4e tags/0.4.0~94^2~9", "commitGitStats": [{"insertions": 1, "lines": 1, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 0}, {"insertions": 22, "lines": 22, "filePath": "titan-cassandra/src/test/java/com/thinkaurelius/titan/graphdb/thrift/InternalCassandraEventualGraphTest.java", "deletions": 0}, {"insertions": 52, "lines": 52, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanEventualGraphTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.thrift.InternalCassandraEventualGraphTest"}], "spoonFilePath": "InternalCassandraEventualGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanEventualGraphTest"}], "spoonFilePath": "TitanEventualGraphTest.java"}], "commitMessage": "Added test case for #329.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-09-25 19:04:35"}, {"commitUser": "mbroecheler", "commitDateTime": "2013-09-25 19:04:58", "commitHash": "55d73740c60812fa57864c07f01e08b09a4504f4", "commitParents": ["b7c3aa150bd268d5cb2c5cc50bb0a273eb16ff4e"], "commitGHEventType": "closed", "nameRev": "55d73740c60812fa57864c07f01e08b09a4504f4 tags/0.4.0~94^2~8", "commitGitStats": [{"insertions": 65, "lines": 136, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/IndexSerializer.java", "deletions": 71}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.IndexSerializer.addEdge(com.thinkaurelius.titan.graphdb.internal.InternalRelation,com.thinkaurelius.titan.graphdb.database.BackendTransaction)"}, {"UPD": 1, "TOT": 10, "DEL": 1, "INS": 2, "MOV": 6, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.IndexSerializer.lockKeyedProperty(com.thinkaurelius.titan.graphdb.database.TitanProperty,com.thinkaurelius.titan.graphdb.database.BackendTransaction)"}, {"UPD": 1, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.IndexSerializer.removeEdge(com.thinkaurelius.titan.graphdb.internal.InternalRelation,com.thinkaurelius.titan.graphdb.database.BackendTransaction)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.IndexSerializer.getIndexColumn(com.thinkaurelius.titan.graphdb.database.TitanKey,long)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.IndexSerializer.getIndexColumn(com.thinkaurelius.titan.graphdb.database.TitanKey,com.thinkaurelius.titan.graphdb.database.TitanProperty)"}, {"UPD": 0, "TOT": 10, "DEL": 1, "INS": 2, "MOV": 7, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.IndexSerializer.removeProperty(com.thinkaurelius.titan.graphdb.database.TitanProperty,com.thinkaurelius.titan.graphdb.database.BackendTransaction)"}, {"UPD": 1, "TOT": 5, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.IndexSerializer.getIndexValue(com.thinkaurelius.titan.graphdb.database.TitanProperty)"}, {"UPD": 0, "TOT": 11, "DEL": 1, "INS": 2, "MOV": 8, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.IndexSerializer.addProperty(com.thinkaurelius.titan.graphdb.database.TitanProperty,com.thinkaurelius.titan.graphdb.database.BackendTransaction)"}], "spoonFilePath": "IndexSerializer.java"}], "commitMessage": "Fixes #329\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-09-25 19:04:58"}], "created": "2013-07-22 21:36:04"}, {"labels": ["bug"], "filteredCommits": ["1bea1e5a9d3de1b8eb128dd05c237b4a1d01201a"], "url": "https://github.com/thinkaurelius/titan/issues/284", "gitStatsSummary": {"insertions": 31, "gitFilesChange": 1, "lines": 36, "deletions": 5}, "numCommits": 1, "commits": {"1bea1e5a9d3de1b8eb128dd05c237b4a1d01201a": {"commitUser": "dalaro", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "dalaro", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.1", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.rollback()", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.shutdown()", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.1.initialValue()", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.newThreadBoundTransaction()", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.makeType()", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.commit()", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.getAutoStartTx()", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.query()", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.getCurrentThreadTx()", "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.getType(java.lang.String)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/blueprints"], "body": "TitanBlueprintsGraph (TBG) implements the Blueprints interface TransactionalGraph.  TBG's implementation internally creates a single ThreadLocal transaction for each caller and also stores all of these transaction references as keys in a WeakHashMap.  TBG's shutdown() method iterates over the WeakHashMap and autocommits every open transaction.\n\nThe test method BerkeleyJEBlueprintsTest#testTransactionalGraphTestSuite would sometimes fail like this:\n\n```\nEncountered error in testCompetingThreads\njava.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at com.thinkaurelius.titan.blueprints.TitanBlueprintsTest.doTestSuite(TitanBlueprintsTest.java:117)\n    at com.thinkaurelius.titan.blueprints.TitanBlueprintsTest.testTransactionalGraphTestSuite(TitanBlueprintsTest.java:63)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at junit.framework.TestCase.runTest(TestCase.java:168)\n    at junit.framework.TestCase.runBare(TestCase.java:134)\n    at junit.framework.TestResult$1.protect(TestResult.java:110)\n    at junit.framework.TestResult.runProtected(TestResult.java:128)\n    at junit.framework.TestResult.run(TestResult.java:113)\n    at junit.framework.TestCase.run(TestCase.java:124)\n    at junit.framework.TestSuite.runTest(TestSuite.java:232)\n    at junit.framework.TestSuite.run(TestSuite.java:227)\n    at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:83)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: java.lang.IllegalStateException: There is 1 existing transaction opened against the Environment.\nAborting open transactions ...\naborting <Transaction id=\"269\">\n    at com.sleepycat.je.Environment.close(Environment.java:384)\n    at com.thinkaurelius.titan.diskstorage.berkeleyje.BerkeleyJEStoreManager.close(BerkeleyJEStoreManager.java:152)\n    at com.thinkaurelius.titan.diskstorage.keycolumnvalue.keyvalue.OrderedKeyValueStoreManagerAdapter.close(OrderedKeyValueStoreManagerAdapter.java:52)\n    at com.thinkaurelius.titan.diskstorage.Backend.close(Backend.java:346)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.shutdown(StandardTitanGraph.java:92)\n    at com.tinkerpop.blueprints.TransactionalGraphTestSuite.testCompetingThreads(TransactionalGraphTestSuite.java:491)\n    at com.thinkaurelius.titan.blueprints.TransactionalTitanGraphTestSuite.testCompetingThreads(TransactionalTitanGraphTestSuite.java:33)\n    ... 25 more\n```\n\nThe count of open transactions and BDB transaction id are always 1 and 269, respectively.\n\nI found this failure accidentally while attempting to move Titan from Tinkerpop 2.3.0 to 2.4.0-SNAPSHOT to support Metrics integration.  The failure appears to have nothing to do with new Tinkerpop code or Metrics.\n\nThe failure is setup in the last three lines of `TransactionalGraphTestSuite#testCompetingThreads()`:\n\n```\nedgeCount(graph, edges.get());\nvertexCount(graph, vertices.get());\ngraph.shutdown();\n```\n\n`edgeCount()` ends up calling TBG's `getAutoStartTx()` method.  This creates a new transaction and stores its reference in both TBG's WeakHashMap and the main thread's ThreadLocal storage.  `graph.shutdown()` iterates over TBG's WeakHashMap to look for open transactions to autocommit.  Sometimes the size of the map (as measured by a counter incremented during iteration) is zero, and other times one.  When it's of size one, `shutdown()` successfully autocommits the transaction and the test passes.  When it's empty, TBG's reference to the still-open transaction created for edge counting has been lost, and we get the exception stacktrace from BDB shown above.  I've verified this with conditional breakpoints.\n\nI'm not convinced that I have the root cause figured out.  I have three observations so far.\n1. WeakHashMap is not synchronized according to [its javadoc](http://docs.oracle.com/javase/6/docs/api/java/util/WeakHashMap.html).  TBG allows multiple threads to simultaneously write to a single WeakHashMap without synchronization.  This might be sufficient to cause the failure.  When I run the test on a loop, the first failure usually emerges within ten iterations; when I changed WeakHashMap to ConcurrentHashMap, it ran for 551 successful consecutive iterations before I killed the loop.  I'm trying Collections.synchronizedMap(new WeakHashMap()) now.\n2. ThreadLocalMap (an inner static class of ThreadLocal that tracks all its data) uses WeakReference.  For a while, I thought this failure might have something to do with WeakReferences: maybe we erroneously kept only WeakReferences to our transactions and wound up unintentionally losing them to GC?  However, I currently think this is not the case.  TBG puts every transaction in ThreadLocal storage before putting it in the WeakHashMap as a key.  I think this is sufficient to guarantee that every transaction in the WeakHashMap visible from a live thread cannot be GC'ed.  Here's the strong-reachability path from each live thread to its ThreadLocal transaction:\n   - `Thread` has a field `threadLocals` (type `ThreadLocal.ThreadLocalMap`)\n   - `ThreadLocalMap` has a field `table`  (type `ThreadLocalMap.Entry[]`)\n   - `Entry` has a field `value` (type `Object`) holding the transaction\n   \n   If that's all correct, then I think I can rule out WeakReference semantics and premature GC as the root cause.  But this code is unfamiliar and I could easily have bungled my analysis.\n3. A workaround for this problem is to always call TBG's `commit()` or `rollback()` method after calling some method that could have opened a ThreadLocal transaction.  This problem can only arise if a thread relies on `shutdown()` to autocommit an open transaction.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 12, "UPD": 14, "TOT": 18, "DEL": 0, "INS": 4, "spoonFilesChanged": 1, "MOV": 0}, "title": "TitanBlueprintsGraph's WeakHashMap loses transactions", "statsSkippedReason": "", "closed": "2013-05-22 22:31:15", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2013-05-22 18:20:12", "commitHash": "1bea1e5a9d3de1b8eb128dd05c237b4a1d01201a", "commitParents": ["97f3c69b06ed6cf67dab963c4157eb9a0a77d50c"], "commitGHEventType": "referenced", "nameRev": "1bea1e5a9d3de1b8eb128dd05c237b4a1d01201a tags/0.3.2~28", "commitGitStats": [{"insertions": 31, "lines": 36, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/blueprints/TitanBlueprintsGraph.java", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.1"}, {"UPD": 1, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.rollback()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.shutdown()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.1.initialValue()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.newThreadBoundTransaction()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.makeType()"}, {"UPD": 2, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph"}, {"UPD": 1, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.commit()"}, {"UPD": 2, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.getAutoStartTx()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.query()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.getCurrentThreadTx()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.getType(java.lang.String)"}], "spoonFilePath": "TitanBlueprintsGraph.java"}], "commitMessage": "Change WeakHashMap to ConcurrentHashMap\n\nThe WeakHashMap in TitanBlueprintsGraph can be accessed concurrently\nby multiple threads.  This access pattern is tested in\nTransactionalGraphTestSuite#testCompetingThreads().  The javadoc for\nWeakHashMap says the collection is unsynchronized.  When running the\ntest on my box, these unsynchronized concurrent accesses seem to the\ntype of failure seen in #284.\n\nI changed the WeakHashMap to a ConcurrentHashMap.\nCollections.synchronizedMap(new WeakHashMap()) would also work, but I\nsuspect that we want concurrency more than we want the ability to\nautomatically forget and GC uncommitted/unrollbacked transactions.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-05-22 18:20:12"}], "created": "2013-05-22 06:29:36"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/281", "title": "Chaining has() When Multiple Keys are Used", "closed": "2013-05-21 16:45:47", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2013-05-21 16:17:56", "user": "spmallette", "body": "Originally reported here:\n\nhttps://groups.google.com/forum/#!topic/aureliusgraphs/VPx0-K5W5gw\n\nchaining has() in GraphQuery when referencing to property keys marked as indices seems to generate an error:\n\n``` text\ngremlin> graph = TitanFactory.open(\"/tmp/t\")\n==>titangraph[local:/tmp/t]\ngremlin> graph.makeType().name(\"first\").dataType(String.class).indexed(Vertex.class).unique(Direction.OUT).makePropertyKey();\n==>v[36028797018963978]\ngremlin> graph.makeType().name(\"last\").dataType(String.class).indexed(Vertex.class).unique(Direction.OUT).makePropertyKey();\n==>v[36028797018963986]\ngremlin> graph.query().has(\"last\",\"x\").has('first',\"y\").vertices()\nCould not call index\nDisplay stack trace? [yN] y\ncom.thinkaurelius.titan.core.TitanException: Could not call index\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$6.execute(StandardTitanTx.java:733)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$6.execute(StandardTitanTx.java:607)\n    at com.thinkaurelius.titan.graphdb.query.QueryProcessor.getUnwrappedIterator(QueryProcessor.java:74)\n    at com.thinkaurelius.titan.graphdb.query.QueryProcessor$OuterIterator.<init>(QueryProcessor.java:132)\n    at com.thinkaurelius.titan.graphdb.query.QueryProcessor.iterator(QueryProcessor.java:48)\n    at com.google.common.collect.Iterables$7.iterator(Iterables.java:611)\n    at com.google.common.collect.Iterables.toString(Iterables.java:259)\n    at com.google.common.collect.FluentIterable.toString(FluentIterable.java:117)\n    at java.lang.String.valueOf(String.java:2826)\n    at java_lang_String$valueOf.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.Interpreter.evaluate(Interpreter.groovy:71)\n    at org.codehaus.groovy.tools.shell.Interpreter$evaluate.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.Groovysh.execute(Groovysh.groovy:152)\n    at org.codehaus.groovy.tools.shell.Shell.leftShift(Shell.groovy:114)\n    at org.codehaus.groovy.tools.shell.Shell$leftShift$0.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.ShellRunner.work(ShellRunner.groovy:88)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$work(InteractiveShellRunner.groovy)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.work(InteractiveShellRunner.groovy:100)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:272)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:52)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:137)\n    at org.codehaus.groovy.tools.shell.ShellRunner.run(ShellRunner.groovy:57)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$run(InteractiveShellRunner.groovy)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.run(InteractiveShellRunner.groovy:66)\n    at com.thinkaurelius.titan.tinkerpop.gremlin.Console.<init>(Console.java:65)\n    at com.thinkaurelius.titan.tinkerpop.gremlin.Console.<init>(Console.java:78)\n    at com.thinkaurelius.titan.tinkerpop.gremlin.Console.main(Console.java:104)\nCaused by: com.google.common.util.concurrent.UncheckedExecutionException: java.lang.IllegalArgumentException: expected one element but was: <v[36028797018963986]=x, v[36028797018963978]=y>\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2258)\n    at com.google.common.cache.LocalCache.get(LocalCache.java:3990)\n    at com.google.common.cache.LocalCache$LocalManualCache.get(LocalCache.java:4793)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$6.execute(StandardTitanTx.java:717)\n    ... 48 more\nCaused by: java.lang.IllegalArgumentException: expected one element but was: <v[36028797018963986]=x, v[36028797018963978]=y>\n    at com.google.common.collect.Iterators.getOnlyElement(Iterators.java:375)\n    at com.google.common.collect.Iterables.getOnlyElement(Iterables.java:270)\n    at com.thinkaurelius.titan.graphdb.database.IndexSerializer.query(IndexSerializer.java:191)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.elementQuery(StandardTitanGraph.java:169)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$6$5.call(StandardTitanTx.java:720)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$6$5.call(StandardTitanTx.java:717)\n    at com.google.common.cache.LocalCache$LocalManualCache$1.load(LocalCache.java:4796)\n    at com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3589)\n    at com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2374)\n    at com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2337)\n    at com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2252)\n    ... 51 more\n```\n\ndoesn't seem to create errors when the second property key reference in the chain is not indexed:\n\n``` java\ngremlin> graph.query().has(\"last\",\"x\").has('test',\"y\").vertices()\ngremlin>\n```\n"}, {"labels": ["bug", "convention", "enhancement", "limitation"], "filteredCommits": [], "url": "https://github.com/thinkaurelius/titan/issues/273", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"442f468a5b0c962b5c087baa682302976a08cbb8": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 115.00027777777778, "user": "okram", "changesInPackagesSPOON": [], "changesInPackagesGIT": [], "body": "This is the problem. Faunus 0.3.0 leverages Titan 0.3.0. Titan 0.3.0 can't talk to Titan 0.3.1 !\n\nWhat we need to do in the future is be very strict about minor versions such that Titan 0.3.x can all talk to each other. This way, forward- and backward-compatibility are possible.\n\nThis way, we only need to specify in the pom.xml of Titan: \n\n``` xml\n<titan.compatibile.versions>0.3</titan.compatible.versions>\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0, "TOT": 0, "DEL": 0, "INS": 0, "spoonFilesChanged": 0, "MOV": 0}, "title": "Strong respect for minor version compatibility so we can do forward and backward compatibility.", "statsSkippedReason": "", "closed": "2013-09-08 01:12:06", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-09-07 17:48:53", "commitHash": "442f468a5b0c962b5c087baa682302976a08cbb8", "commitParents": ["0221302fd6e14f6d4c85062bd25fcd0608ff1a14"], "commitGHEventType": "closed", "nameRev": "442f468a5b0c962b5c087baa682302976a08cbb8 tags/0.4.0~119", "commitGitStats": [{"insertions": 70, "lines": 136, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/Backend.java", "deletions": 66}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.getImplementationClass(org.apache.commons.configuration.Configuration,java.lang.String,java.lang.String,java.util.Map)"}, {"UPD": 2, "TOT": 10, "DEL": 2, "INS": 3, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.initialize(org.apache.commons.configuration.Configuration)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.instantiate(java.lang.String,java.lang.Object[])"}, {"UPD": 0, "TOT": 4, "DEL": 1, "INS": 0, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.Backend.initialize(org.apache.commons.configuration.Configuration).6.call()"}], "spoonFilePath": "Backend.java"}], "commitMessage": "Fixes #273. Fixes #350\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-09-07 17:48:53"}], "created": "2013-05-15 18:01:52"}, {"labels": ["bug", "convention"], "url": "https://github.com/thinkaurelius/titan/issues/270", "title": "Make sure the /ext directory is in the distribution.xml (is only in titan-all).", "closed": "2013-09-09 18:09:00", "commitsDetails": [], "commits": {}, "ttf": 118.00027777777778, "created": "2013-05-14 18:00:45", "user": "okram", "body": ""}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/266", "title": "Thrift exception in multiIdAcquisition", "closed": "2013-05-10 20:16:43", "commitsDetails": [], "commits": {}, "ttf": 3.000277777777778, "created": "2013-05-07 02:06:04", "user": "mbroecheler", "body": "in LockKeyColumnValueStoreTest.testMultiIDAcquisition and encountered this crazy bug. Check out the attached log file that contains more information. Scary part is an ERROR in cassandra:\n17693 [Thrift:16] ERROR org.apache.cassandra.thrift.CustomTThreadPoolServer  - Thrift error occurred during processing of message.\norg.apache.thrift.protocol.TProtocolException: Bad version in readMessageBegin\n\nAny idea what this is? Could you try to debug this? This has high priority since its part of the id management.\nThanks,\nMatthias\n\ncom.thinkaurelius.titan.diskstorage.PermanentStorageException: Permanent failure in storage backend\n    at com.thinkaurelius.titan.diskstorage.cassandra.thrift.CassandraThriftKeyColumnValueStore.convertException(CassandraThriftKeyColumnValueStore.java:268)\n    at com.thinkaurelius.titan.diskstorage.cassandra.thrift.CassandraThriftKeyColumnValueStore.getSlice(CassandraThriftKeyColumnValueStore.java:131)\n    at com.thinkaurelius.titan.diskstorage.idmanagement.ConsistentKeyIDManager.getCurrentID(ConsistentKeyIDManager.java:84)\n    at com.thinkaurelius.titan.diskstorage.idmanagement.ConsistentKeyIDManager.getIDBlock(ConsistentKeyIDManager.java:110)\n    at com.thinkaurelius.titan.diskstorage.LockKeyColumnValueStoreTest$3.run(LockKeyColumnValueStoreTest.java:389)\n    at java.lang.Thread.run(Thread.java:680)\nCaused by: java.lang.IndexOutOfBoundsException\n    at java.io.ByteArrayOutputStream.write(ByteArrayOutputStream.java:88)\n    at org.apache.thrift.transport.TFramedTransport.write(TFramedTransport.java:146)\n    at org.apache.thrift.protocol.TBinaryProtocol.writeBinary(TBinaryProtocol.java:196)\n    at org.apache.cassandra.thrift.SliceRange.write(SliceRange.java:600)\n    at org.apache.cassandra.thrift.SlicePredicate.write(SlicePredicate.java:436)\n    at org.apache.cassandra.thrift.Cassandra$get_slice_args.write(Cassandra.java:7275)\n    at org.apache.thrift.TServiceClient.sendBase(TServiceClient.java:63)\n    at org.apache.cassandra.thrift.Cassandra$Client.send_get_slice(Cassandra.java:588)\n    at org.apache.cassandra.thrift.Cassandra$Client.get_slice(Cassandra.java:577)\n    at com.thinkaurelius.titan.diskstorage.cassandra.thrift.CassandraThriftKeyColumnValueStore.getSlice(CassandraThriftKeyColumnValueStore.java:114)\n    ... 4 more\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/252", "title": "ElasticSearch chaining has() does not work -- Titan 0.3.0 and ES 0.20.06 ", "closed": "2013-05-07 19:12:44", "commitsDetails": [], "commits": {}, "ttf": 5.000277777777778, "created": "2013-05-02 16:12:16", "user": "okram", "body": "Without ElasticSearch, has() chaining works perfect. See below.\n\n``` text\ngremlin> g = TitanFactory.open('bin/cassandra.local')\n==>titangraph[cassandrathrift:127.0.0.1]\ngremlin> g.makeType().name('service').indexed(Vertex.class).unique(OUT).dataType(String.class).makePropertyKey()\n==>v[36028797018963978]\ngremlin> v = g.addVertex([service:'computers',name:'marko'])\n==>v[4]\ngremlin> g.query().has('service','computers').vertices()\n==>v[4]\ngremlin> g.query().has('service','computers').has('name','marko').vertices()\n==>v[4]\ngremlin> g.commit()\n==>null\ngremlin> g.query().has('service','computers').has('name','marko').vertices()\n==>v[4]\n```\n\nWith ElasticSearch has() chaining does not work correctly. .................\n\nNOTE: I can NOT reproduce it on the small scale. I can only reproduce it in a semi-production data set.\n\nI can demonstrate on the large scale:\n\ng.query().has('service','computers').has('name','marko').vertices() is an empty iterable.\ng.query().has('service','computers').vertices()._().has('name','marko') returns the 1 vertex.\n\n...apologies that I don't have a perfect clean-cut test case. Hopefully there is an \"ah. I know why.\" Else, if someone else can identify the problem simply, please comment on this ticket.\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/251", "title": "BerkeleyDB memory exists beyond rm -rf", "closed": "2013-05-07 19:31:58", "commitsDetails": [], "commits": {}, "ttf": 5.000277777777778, "created": "2013-05-02 15:49:21", "user": "okram", "body": "I forgot to add unique(OUT) so I rm -rf'd the /tmp/test-index directory. I then try to reinstantiate a new graph using TitanFactory.open(). Note that the directory was removed but it still 'sees' the old database schema.\n\n``` text\ngremlin> g.addVertex([service:'computers',name:'marko'])\nNot an out-unique key: service\nDisplay stack trace? [yN]\n// IN ANOTHER WINDOW I sudo rm -rf /tmp/test-index\ngremlin> g = TitanFactory.open('/tmp/test-index')\n==>titangraph[local:/tmp/test-index]\ngremlin> g.makeType().name('service').indexed(Vertex.class).unique(OUT).dataType(String.class).makePropertyKey()\nThe given value is already used as a property\nDisplay stack trace? [yN]\ngremlin> quit\n/usr/local/titan-all-0.3.0$ bin/gremlin.sh\n\n         \\,,,/\n         (o o)\n-----oOOo-(_)-oOOo-----\ngremlin> g = TitanFactory.open('/tmp/test-index')\n==>titangraph[local:/tmp/test-index]\ngremlin> g.makeType().name('service').indexed(Vertex.class).unique(OUT).dataType(String.class).makePropertyKey()\n==>v[36028797018963978]\ngremlin>\n```\n"}, {"labels": ["bug", "convention"], "filteredCommits": ["6cda2a4f4a454246b56602c8dab7913a8cca3fed"], "url": "https://github.com/thinkaurelius/titan/issues/245", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"6cda2a4f4a454246b56602c8dab7913a8cca3fed": {"commitUser": "okram", "commitGHEventType": "referenced"}, "bdab532f73c2f85d37ba1020b12c676c43458cf8": {"commitUser": "okram", "commitGHEventType": "closed"}}, "ttf": 2.000277777777778, "user": "okram", "changesInPackagesGIT": [], "body": "Look into assembly.xml and ensure -es.properties are included (its okay for titan-cassandra, but not titan-all).\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Titan 0.3.0 release does not have all the .properties files in its bin/", "statsSkippedReason": "", "closed": "2013-05-02 23:05:46", "commitsDetails": [{"commitUser": "okram", "commitDateTime": "2013-05-02 17:03:02", "commitHash": "6cda2a4f4a454246b56602c8dab7913a8cca3fed", "commitParents": ["8c51ee9c15b656fa51de53de4f4cc29444132a4a"], "commitGHEventType": "referenced", "nameRev": "6cda2a4f4a454246b56602c8dab7913a8cca3fed tags/0.3.1~56^2", "commitGitStats": [{"insertions": 3, "lines": 5, "filePath": "titan-all/src/assembly/distribution.xml", "deletions": 2}, {"insertions": 9, "lines": 19, "filePath": "titan-hbase/src/assembly/distribution.xml", "deletions": 10}, {"insertions": 7, "lines": 15, "filePath": "titan-cassandra/src/assembly/distribution.xml", "deletions": 8}, {"insertions": 7, "lines": 11, "filePath": "titan-berkeleyje/src/assembly/distribution.xml", "deletions": 4}], "commitSpoonAstDiffStats": [], "commitMessage": "generalized the distribution.xml pattern so bin files go to their respective projects based on their name -- e.g. cassandra*. Fixed #245\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-05-02 17:03:02"}, {"commitUser": "okram", "commitDateTime": "2013-05-02 17:05:33", "commitHash": "bdab532f73c2f85d37ba1020b12c676c43458cf8", "commitParents": ["43cfc88ed7156a497ac80e5e90a0280708c4fea4"], "commitGHEventType": "closed", "nameRev": "bdab532f73c2f85d37ba1020b12c676c43458cf8 tags/0.4.0~186", "commitGitStats": [{"insertions": 3, "lines": 5, "filePath": "titan-all/src/assembly/distribution.xml", "deletions": 2}, {"insertions": 9, "lines": 19, "filePath": "titan-hbase/src/assembly/distribution.xml", "deletions": 10}, {"insertions": 7, "lines": 15, "filePath": "titan-cassandra/src/assembly/distribution.xml", "deletions": 8}, {"insertions": 7, "lines": 11, "filePath": "titan-berkeleyje/src/assembly/distribution.xml", "deletions": 4}], "commitSpoonAstDiffStats": [], "commitMessage": "generalized the distribution.xml pattern so bin files go to their respective projects based on their name -- e.g. cassandra*. Fixed #245\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-05-02 17:03:02"}], "created": "2013-04-30 15:58:18"}, {"labels": ["bug"], "filteredCommits": ["560c02dc92a77b07cd3fead1f073c16b948eb2be"], "url": "https://github.com/thinkaurelius/titan/issues/237", "gitStatsSummary": {"insertions": 45, "gitFilesChange": 4, "lines": 53, "deletions": 8}, "numCommits": 1, "commits": {"560c02dc92a77b07cd3fead1f073c16b948eb2be": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 5.000277777777778, "user": "okram", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.InMemoryKeyColumnValueStore.getKeys(com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.StoreTransaction)", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.InMemoryKeyColumnValueStore.getKeys(com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.StoreTransaction).1", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(java.util.Collection,java.util.Collection,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)", "com.thinkaurelius.titan.diskstorage.idmanagement.ConsistentKeyIDManager.getIDBlock(int)", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.ColumnValueStore.convert(com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.Entry)", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.ColumnValueStore.mutate(java.util.List,java.util.List,com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.StoreTransaction)", "com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.InMemoryKeyColumnValueStore.getKeys(com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.StoreTransaction).1.next()"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/idmanagement", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database", "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory"], "body": "``` text\n-------------------------------------------------------------------------------\nTest set: com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest\n-------------------------------------------------------------------------------\nTests run: 19, Failures: 2, Errors: 2, Skipped: 0, Time elapsed: 23.785 sec <<< FAILURE!\ntestSelfLoop(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.224 sec  <<< FAILURE!\njava.lang.AssertionError: expected:<1> but was:<2>\n        at org.junit.Assert.fail(Assert.java:91)\n        at org.junit.Assert.failNotEquals(Assert.java:645)\n        at org.junit.Assert.assertEquals(Assert.java:126)\n        at org.junit.Assert.assertEquals(Assert.java:470)\n        at org.junit.Assert.assertEquals(Assert.java:454)\n        at com.thinkaurelius.titan.graphdb.TitanGraphTest.testSelfLoop(TitanGraphTest.java:360)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:601)\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:249)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:142)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:113)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:601)\n        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\ntestIteration(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.221 sec  <<< ERROR!\njava.lang.NullPointerException\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:23)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:10)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanTypeVertex.getName(TitanTypeVertex.java:20)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:236)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:22:        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\ntestIteration(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.221 sec  <<< ERROR!\njava.lang.NullPointerException\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:23)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:10)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanTypeVertex.getName(TitanTypeVertex.java:20)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:236)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:220)\n        at com.thinkaurelius.titan.graphdb.transaction.vertexcache.ConcurrentVertexCache.get(ConcurrentVertexCache.java:53)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getExistingVertex(StandardTitan:        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\ntestIteration(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.221 sec  <<< ERROR!\njava.lang.NullPointerException\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:23)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:10)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanTypeVertex.getName(TitanTypeVertex.java:20)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:236)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:220)\n        at com.thinkaurelius.titan.graphdb.transaction.vertexcache.ConcurrentVertexCache.get(ConcurrentVertexCache.java:53)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getExistingVertex(StandardTitanTx.java:216)\n:        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\ntestIteration(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.221 sec  <<< ERROR!\njava.lang.NullPointerException\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:23)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:10)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanTypeVertex.getName(TitanTypeVertex.java:20)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:236)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:220)\n        at com.thinkaurelius.titan.graphdb.transaction.vertexcache.ConcurrentVertexCache.get(ConcurrentVertexCache.java:53)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getExistingVertex(StandardTitanTx.java:216)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.nextVertex(VertexIterable.java:39)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.next(VertexIterable.java:58)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.next(VertexIterable.java:29)\n        at com.google.common.collect.Iterators.size(Iterators.java:219)\n:        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\ntestIteration(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.221 sec  <<< ERROR!\njava.lang.NullPointerException\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:23)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:10)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanTypeVertex.getName(TitanTypeVertex.java:20)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:236)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:220)\n        at com.thinkaurelius.titan.graphdb.transaction.v   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n:        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\ntestIteration(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.221 sec  <<< ERROR!\njava.lang.NullPointerException\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:23)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.gion(TitanLabelVertex.java:10)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanTypeVertex.getName(TitanTypeVertex.java:20)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:236)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:220)\n        at com.thinkaurelius.titan.graphdb.transaction.vertexcache.ConcurrentVertexCache.get(ConcurrentVertexCache.java:53)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getExistingVertex(StandardTitanTx.java:216)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.nextVertex(VertexIterable.java:39)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.next(VertexIterable.java:58)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.next(VertexIterable.java:29)\n        at com.google.common.collect.Iterators.size(Iterators.java:219)\n        at com.google.common.collect.Iterables.sizes.java:110)\n        at com.thinkaurelius.titan.graphdb.TitanGraphTest.testIteration(TitanGraphTest.java:391)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:601)\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n:        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.ja      at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\ntestIteration(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.221 sec  <<< ERROR!\njava.lang.NullPointerException\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:23)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:10)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanTypeVertex.getName(TitanTypeVertex.java:20)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:236)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:220)\n        at com.thinkaurelius.titan.graphdb.transaction.vertexcache.ConcurrentVertexCache.get(ConcurrentVertexCache.java:53)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getExistingVertex(StandardTitanTx.java:216)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.nextVertex(VertexIterable.java:39)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.next(VertexIterable.java:58)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.next(VertexIterable.java:29)\n        at com.google.common.collect.Iterators.size(Iterators.java:219)\n        at com.google.common.collect.Iterables.size(Iterables.java:110)\n        at com.thinkaurelius.titan.graphdb.TitanGraphTest.testIteration(TitanGraphTest.java:391)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:601)\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n:        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\ntestIteration(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.221 sec  <<< ERROR!\njava.lang.NullPointerException\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:23)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanLabelVertex.getDefinition(TitanLabelVertex.java:10)\n        at com.thinkaurelius.titan.graphdb.types.vertices.TitanTypeVertex.getName(TitanTypeVertex.java:20)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:236)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx$3.get(StandardTitanTx.java:220)\n        at com.thinkaurelius.titan.graphdb.transaction.vertexcache.ConcurrentVertexCache.get(ConcurrentVertexCache.java:53)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.getExistingVertex(StandardTitanTx.java:216)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.nextVertex(VertexIterable.java:39)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.next(VertexIterable.java:58)\n        at com.thinkaurelius.titan.graphdb.transaction.VertexIterable$1.next(VertexIterable.java:29)\n        at com.google.common.collect.Iterators.size(Iterators.java:219)\n        at com.google.common.collect.Iterables.size(Iterables.java:110)\n        at com.thinkaurelius.titan.graphdb.TitanGraphTest.testIteration(TitanGraphTest.java:391)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:601)\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:249)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:142)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:113)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:601)\n        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\ntestIndexRetrieval(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.678 sec  <<< ERROR!\ncom.thinkaurelius.titan.core.TitanException: Could not commit transaction due to exception during persistence\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.commit(StandardTitanTx.java:805)\n        at com.thinkaurelius.titan.graphdb.TitanGraphTestCommon.newTx(TitanGraphTestCommon.java:52)\n        at com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest.clopen(InMemoryGraphTest.java:26)\n        at com.thinkaurelius.titan.graphdb.TitanGraphTest.testIndexRetrieval(TitanGraphTest.java:519)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:601)\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:249)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:142)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:113)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:601)\n        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\nCaused by: com.thinkaurelius.titan.diskstorage.PermanentStorageException: Unidentified exception occurred during persistence\n        at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(StandardTitanGraph.java:277)\n        at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.commit(StandardTitanTx.java:796)\n        ... 33 more\nCaused by: java.lang.NullPointerException\n        at com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.ColumnValueStore.mutate(ColumnValueStore.java:112)\n        at com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.InMemoryKeyColumnValueStore.mutate(InMemoryKeyColumnValueStore.java:67)\n        at com.thinkaurelius.titan.diskstorage.keycolumnvalue.CachedKeyColumnValueStore.mutate(CachedKeyColumnValueStore.java:107)\n        at com.thinkaurelius.titan.diskstorage.locking.consistentkey.ConsistentKeyLockStore.mutate(ConsistentKeyLockStore.java:103)\n        at com.thinkaurelius.titan.diskstorage.BackendTransaction.mutateEdgeIndex(BackendTransaction.java:111)\n        at com.thinkaurelius.titan.graphdb.database.IndexSerializer.addEdge(IndexSerializer.java:124)\n        at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.persist(StandardTitanGraph.java:315)\n        at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(StandardTitanGraph.java:264)\n        ... 34 more\ntestCreateAndRetrieveComprehensive(com.thinkaurelius.titan.graphdb.inmemory.InMemoryGraphTest)  Time elapsed: 1.373 sec  <<< FAILURE!\njava.lang.AssertionError: expected:<4> but was:<6>\n        at org.junit.Assert.fail(Assert.java:91)\n        at org.junit.Assert.failNotEquals(Assert.java:645)\n        at org.junit.Assert.assertEquals(Assert.java:126)\n        at org.junit.Assert.assertEquals(Assert.java:470)\n        at org.junit.Assert.assertEquals(Assert.java:454)\n        at com.thinkaurelius.titan.graphdb.TitanGraphTest.testCreateAndRetrieveComprehensive(TitanGraphTest.java:771)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:601)\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:249)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:142)\n        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:113)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:601)\n        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:104)\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 7, "UPD": 1, "TOT": 19, "DEL": 4, "INS": 11, "spoonFilesChanged": 4, "MOV": 3}, "title": "InMemoryGraphTest not passing in titan03 (Titan 0.3.1-SNAPSHOT)", "statsSkippedReason": "", "closed": "2013-05-01 03:54:25", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-04-30 12:30:28", "commitHash": "560c02dc92a77b07cd3fead1f073c16b948eb2be", "commitParents": ["abc6f869fe83b17935119c88fc85a1b2a871f495"], "commitGHEventType": "referenced", "nameRev": "560c02dc92a77b07cd3fead1f073c16b948eb2be tags/0.3.1~72", "commitGitStats": [{"insertions": 23, "lines": 26, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/ColumnValueStore.java", "deletions": 3}, {"insertions": 20, "lines": 23, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/keycolumnvalue/inmemory/InMemoryKeyColumnValueStore.java", "deletions": 3}, {"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/diskstorage/idmanagement/ConsistentKeyIDManager.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.InMemoryKeyColumnValueStore.getKeys(com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.StoreTransaction)"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.InMemoryKeyColumnValueStore.getKeys(com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.StoreTransaction).1"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.InMemoryKeyColumnValueStore.getKeys(com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.StoreTransaction).1.next()"}], "spoonFilePath": "InMemoryKeyColumnValueStore.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(java.util.Collection,java.util.Collection,com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx)"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.idmanagement.ConsistentKeyIDManager.getIDBlock(int)"}], "spoonFilePath": "ConsistentKeyIDManager.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.ColumnValueStore.convert(com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.Entry)"}, {"UPD": 0, "TOT": 8, "DEL": 3, "INS": 5, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.ColumnValueStore.mutate(java.util.List,java.util.List,com.thinkaurelius.titan.diskstorage.keycolumnvalue.inmemory.StoreTransaction)"}], "spoonFilePath": "ColumnValueStore.java"}], "commitMessage": "Fixed InMemoryKCVS implementation. Removed redundancy when storing loop edges. Fixes #237.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-04-30 12:30:28"}], "created": "2013-04-25 16:59:11"}, {"labels": ["bug"], "filteredCommits": ["00aa8b9b5ef06997c0f455d7028235f520100fa9"], "url": "https://github.com/thinkaurelius/titan/issues/229", "gitStatsSummary": {"insertions": 6, "gitFilesChange": 1, "lines": 13, "deletions": 7}, "numCommits": 1, "commits": {"00aa8b9b5ef06997c0f455d7028235f520100fa9": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 70.00027777777778, "user": "hariharshankar", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.mutate(java.util.Map,com.thinkaurelius.titan.diskstorage.TransactionHandle)"], "changesInPackagesGIT": ["titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es"], "body": "This exception is thrown everytime a transaction is committed to titan, after a script that would write to titan failed once (because of a bug in the script). This exception persists until the titan server is restarted again. \n\nException in thread \"main\" com.thinkaurelius.titan.core.TitanException: Could not commit transaction due to exception during persistence\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.commit(StandardTitanTx.java:805)\n    at com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.commit(TitanBlueprintsGraph.java:38)\n    at com.tinkerpop.blueprints.TransactionalGraph$commit.call(Unknown Source)\n    at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:112)\n    at gov.lanl.egosystem.discovery.utils.BatchTwitter.main(BatchTwitter.groovy:41)\nCaused by: com.thinkaurelius.titan.diskstorage.PermanentStorageException: Unknown exception while executing index operation\n    at com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.convert(ElasticSearchIndex.java:169)\n    at com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.mutate(ElasticSearchIndex.java:301)\n    at com.thinkaurelius.titan.diskstorage.indexing.IndexTransaction.flushInternal(IndexTransaction.java:88)\n    at com.thinkaurelius.titan.diskstorage.indexing.IndexTransaction.commit(IndexTransaction.java:70)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction.commit(BackendTransaction.java:67)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.commit(StandardTitanTx.java:798)\n    ... 6 more\nCaused by: org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: no requests added;\n    at org.elasticsearch.action.ValidateActions.addValidationError(ValidateActions.java:29)\n    at org.elasticsearch.action.bulk.BulkRequest.validate(BulkRequest.java:375)\n    at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:55)\n    at org.elasticsearch.action.bulk.TransportBulkAction$TransportHandler.messageReceived(TransportBulkAction.java:272)\n    at org.elasticsearch.action.bulk.TransportBulkAction$TransportHandler.messageReceived(TransportBulkAction.java:261)\n    at org.elasticsearch.transport.netty.MessageChannelHandler.handleRequest(MessageChannelHandler.java:210)\n    at org.elasticsearch.transport.netty.MessageChannelHandler.messageReceived(MessageChannelHandler.java:111)\n    at org.elasticsearch.common.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:560)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:787)\n    at org.elasticsearch.common.netty.channel.Channels.fireMessageReceived(Channels.java:296)\n    at org.elasticsearch.common.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462)\n    at org.elasticsearch.common.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443)\n    at org.elasticsearch.common.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)\n    at org.elasticsearch.common.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:560)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:787)\n    at org.elasticsearch.common.netty.OpenChannelsHandler.handleUpstream(OpenChannelsHandler.java:74)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:560)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:555)\n    at org.elasticsearch.common.netty.channel.Channels.fireMessageReceived(Channels.java:268)\n    at org.elasticsearch.common.netty.channel.Channels.fireMessageReceived(Channels.java:255)\n    at org.elasticsearch.common.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)\n    at org.elasticsearch.common.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:107)\n    at org.elasticsearch.common.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:312)\n    at org.elasticsearch.common.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:88)\n    at org.elasticsearch.common.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)\n    at org.elasticsearch.common.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)\n    at org.elasticsearch.common.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:722)\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 3, "TOT": 7, "DEL": 2, "INS": 1, "spoonFilesChanged": 1, "MOV": 1}, "title": "Could not commit transaction due to exception during persistence", "statsSkippedReason": "", "closed": "2013-06-28 20:28:49", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-04-30 21:31:53", "commitHash": "00aa8b9b5ef06997c0f455d7028235f520100fa9", "commitParents": ["af0cb5e914ec2a77b4dcceae3eea5ebfef3a52ad"], "commitGHEventType": "referenced", "nameRev": "00aa8b9b5ef06997c0f455d7028235f520100fa9 tags/0.3.1~66", "commitGitStats": [{"insertions": 6, "lines": 13, "filePath": "titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es/ElasticSearchIndex.java", "deletions": 7}, {"insertions": 18, "lines": 18, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanIndexTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanIndexTest.testSimpleUpdate()"}], "spoonFilePath": "TitanIndexTest.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 7, "DEL": 2, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.mutate(java.util.Map,com.thinkaurelius.titan.diskstorage.TransactionHandle)"}], "spoonFilePath": "ElasticSearchIndex.java"}], "commitMessage": "Fixes #229\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-04-30 21:31:53"}], "created": "2013-04-19 17:15:00"}, {"labels": ["bug", "question"], "filteredCommits": ["65361de5ecc2f63e0a69dbcd1370847c800b5cc7"], "url": "https://github.com/thinkaurelius/titan/issues/228", "gitStatsSummary": {"insertions": 2, "gitFilesChange": 2, "lines": 4, "deletions": 2}, "numCommits": 1, "commits": {"65361de5ecc2f63e0a69dbcd1370847c800b5cc7": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 14.000277777777777, "user": "okram", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.getFilter(com.thinkaurelius.titan.diskstorage.es.KeyCondition)", "com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.convertQuery(com.thinkaurelius.titan.diskstorage.lucene.KeyCondition)"], "changesInPackagesGIT": ["titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es", "titan-lucene/src/main/java/com/thinkaurelius/titan/diskstorage/lucene"], "body": "I suspect this is an issue with my setup, but I can't figure out what is wrong.\n\n``` text\nmore bin/cassandra-es.local\nstorage.backend=cassandrathrift\nstorage.hostname=127.0.0.1\n\nstorage.index.search.backend=elasticsearch\nstorage.index.search.hostname=localhost\nstorage.index.search.client-only=true\n   // also tried with client-only=false\n```\n\nThen in Gremlin I do the following. Note the last line returns no data.\n\n``` text\ngremlin> g = TitanFactory.open('bin/cassandra-es.local')\n0    [main] INFO  com.thinkaurelius.titan.diskstorage.Backend  - Configuring index [search] based on:\n backend: elasticsearch\nhostname: localhost\nclient-only: false\n\n67   [main] INFO  org.elasticsearch.plugins  - [Strobe] loaded [], sites []\n574  [main] INFO  com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex  - Configured remote host: localhost : 9300\n==>titangraph[cassandrathrift:127.0.0.1]\ngremlin> g.makeType().name('name').dataType(String.class).indexed(\"search\",Vertex.class).unique(Direction.OUT).makePropertyKey();\n==>v[36028797018963978]\ngremlin> g.commit()\n==>null\ngremlin> g.addVertex()['name'] = 'Marko A. Rodriguez'\n==>Marko A. Rodriguez\ngremlin> g.query().has('name',CONTAINS,'Marko').vertices()\n==>v[4]\ngremlin> g.commit()\n==>null\ngremlin> g.query().has('name',CONTAINS,'Marko').vertices()\ngremlin>\n```\n\nThen check out this very odd behavior... (simply continues where the last line of the above Gremlin output ended).\n\n``` text\ngremlin> v = g.v(4)\n==>v[4]\ngremlin> v.map\n==>{name=Marko A. Rodriguez}\ngremlin> v.setProperty('name','Marko')\n==>null\ngremlin> v.map\n==>{name=Marko}\ngremlin> g.commit()\nCould not commit transaction due to exception during persistence\nDisplay stack trace? [yN] y\ncom.thinkaurelius.titan.core.TitanException: Could not commit transaction due to exception during persistence\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.commit(StandardTitanTx.java:805)\n    at com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.commit(TitanBlueprintsGraph.java:38)\n    at com.tinkerpop.blueprints.TransactionalGraph$commit.call(Unknown Source)\n    at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:112)\n    at groovysh_evaluate.run(groovysh_evaluate:54)\n    at groovysh_evaluate$run.call(Unknown Source)\n    at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n    at groovysh_evaluate$run.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.Interpreter.evaluate(Interpreter.groovy:67)\n    at org.codehaus.groovy.tools.shell.Interpreter$evaluate.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.Groovysh.execute(Groovysh.groovy:152)\n    at org.codehaus.groovy.tools.shell.Shell.leftShift(Shell.groovy:114)\n    at org.codehaus.groovy.tools.shell.Shell$leftShift$0.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.ShellRunner.work(ShellRunner.groovy:88)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$work(InteractiveShellRunner.groovy)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.work(InteractiveShellRunner.groovy:100)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:272)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:52)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:137)\n    at org.codehaus.groovy.tools.shell.ShellRunner.run(ShellRunner.groovy:57)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$run(InteractiveShellRunner.groovy)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.run(InteractiveShellRunner.groovy:66)\n    at com.thinkaurelius.titan.tinkerpop.gremlin.Console.<init>(Console.java:65)\n    at com.thinkaurelius.titan.tinkerpop.gremlin.Console.<init>(Console.java:78)\n    at com.thinkaurelius.titan.tinkerpop.gremlin.Console.main(Console.java:104)\nCaused by: com.thinkaurelius.titan.diskstorage.PermanentStorageException: Unknown exception while executing index operation\n    at com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.convert(ElasticSearchIndex.java:169)\n    at com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.mutate(ElasticSearchIndex.java:301)\n    at com.thinkaurelius.titan.diskstorage.indexing.IndexTransaction.flushInternal(IndexTransaction.java:88)\n    at com.thinkaurelius.titan.diskstorage.indexing.IndexTransaction.commit(IndexTransaction.java:70)\n    at com.thinkaurelius.titan.diskstorage.BackendTransaction.commit(BackendTransaction.java:67)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.commit(StandardTitanTx.java:798)\n    ... 48 more\nCaused by: org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: no requests added;\n    at org.elasticsearch.action.ValidateActions.addValidationError(ValidateActions.java:29)\n    at org.elasticsearch.action.bulk.BulkRequest.validate(BulkRequest.java:375)\n    at org.elasticsearch.action.support.TransportAction.execute(TransportAction.java:55)\n    at org.elasticsearch.action.bulk.TransportBulkAction$TransportHandler.messageReceived(TransportBulkAction.java:272)\n    at org.elasticsearch.action.bulk.TransportBulkAction$TransportHandler.messageReceived(TransportBulkAction.java:261)\n    at org.elasticsearch.transport.netty.MessageChannelHandler.handleRequest(MessageChannelHandler.java:210)\n    at org.elasticsearch.transport.netty.MessageChannelHandler.messageReceived(MessageChannelHandler.java:111)\n    at org.elasticsearch.common.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:560)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:787)\n    at org.elasticsearch.common.netty.channel.Channels.fireMessageReceived(Channels.java:296)\n    at org.elasticsearch.common.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462)\n    at org.elasticsearch.common.netty.handler.codec.frame.FrameDecoder.callDecode(FrameDecoder.java:443)\n    at org.elasticsearch.common.netty.handler.codec.frame.FrameDecoder.messageReceived(FrameDecoder.java:303)\n    at org.elasticsearch.common.netty.channel.SimpleChannelUpstreamHandler.handleUpstream(SimpleChannelUpstreamHandler.java:70)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:560)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline$DefaultChannelHandlerContext.sendUpstream(DefaultChannelPipeline.java:787)\n    at org.elasticsearch.common.netty.OpenChannelsHandler.handleUpstream(OpenChannelsHandler.java:74)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:560)\n    at org.elasticsearch.common.netty.channel.DefaultChannelPipeline.sendUpstream(DefaultChannelPipeline.java:555)\n    at org.elasticsearch.common.netty.channel.Channels.fireMessageReceived(Channels.java:268)\n    at org.elasticsearch.common.netty.channel.Channels.fireMessageReceived(Channels.java:255)\n    at org.elasticsearch.common.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88)\n    at org.elasticsearch.common.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:107)\n    at org.elasticsearch.common.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:312)\n    at org.elasticsearch.common.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:88)\n    at org.elasticsearch.common.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178)\n    at org.elasticsearch.common.netty.util.ThreadRenamingRunnable.run(ThreadRenamingRunnable.java:108)\n    at org.elasticsearch.common.netty.util.internal.DeadLockProofWorker$1.run(DeadLockProofWorker.java:42)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n    at java.lang.Thread.run(Thread.java:722)\ngremlin>\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 4, "DEL": 1, "INS": 2, "spoonFilesChanged": 2, "MOV": 1}, "title": "Titan/Cassandra + ElasticSearch -- Data not available after transaction commits?", "statsSkippedReason": "", "closed": "2013-05-02 18:28:15", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-04-30 21:12:49", "commitHash": "65361de5ecc2f63e0a69dbcd1370847c800b5cc7", "commitParents": ["c7ac478437665f6989f9925b4198f0effcba94a3"], "commitGHEventType": "referenced", "nameRev": "65361de5ecc2f63e0a69dbcd1370847c800b5cc7 tags/0.3.1~68", "commitGitStats": [{"insertions": 8, "lines": 8, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/diskstorage/indexing/IndexProviderTest.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "titan-lucene/src/test/java/com/thinkaurelius/titan/diskstorage/lucene/LuceneBerkeleyDBTest.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "titan-lucene/src/main/java/com/thinkaurelius/titan/diskstorage/lucene/LuceneIndex.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "titan-es/src/main/java/com/thinkaurelius/titan/diskstorage/es/ElasticSearchIndex.java", "deletions": 1}, {"insertions": 0, "lines": 6, "filePath": "titan-lucene/pom.xml", "deletions": 6}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 7, "DEL": 0, "INS": 6, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.indexing.IndexProviderTest.storeTest(java.lang.String[])"}], "spoonFilePath": "IndexProviderTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.lucene.LuceneBerkeleyDBTest"}], "spoonFilePath": "LuceneBerkeleyDBTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.es.ElasticSearchIndex.getFilter(com.thinkaurelius.titan.diskstorage.es.KeyCondition)"}], "spoonFilePath": "ElasticSearchIndex.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex.convertQuery(com.thinkaurelius.titan.diskstorage.lucene.KeyCondition)"}], "spoonFilePath": "LuceneIndex.java"}], "commitMessage": "Automatic lower-casing of queries. Fixes #228.\nFixed Lucene dependency problem.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-04-30 21:12:49"}], "created": "2013-04-17 21:57:44"}, {"labels": ["bug"], "filteredCommits": ["6eec0ad79102e9d0d93c7753410965aec85c296a"], "url": "https://github.com/thinkaurelius/titan/issues/225", "gitStatsSummary": {"insertions": 4, "gitFilesChange": 1, "lines": 4, "deletions": 0}, "numCommits": 1, "commits": {"6eec0ad79102e9d0d93c7753410965aec85c296a": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 18.00027777777778, "user": "dkuppitz", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addPropertyInternal(com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanKey,java.lang.Object)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.removeRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addEdge(com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanLabel)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction"], "body": "Store a vertex in a variable (in Gremlin shell), then commit the current transaction. After commit you won't be able to use the variable for mutating queries.\n\n```\ngremlin> g = TitanFactory.open('/tmp/test')\n==>titangraph[local:/tmp/test]\ngremlin> g.V\ngremlin> v1 = g.addVertex()\n==>v[4]\ngremlin> v2 = g.addVertex()\n==>v[8]\ngremlin> g.addEdge(null,v1,v2,'knows')\n==>e[d-4-2F0LaTPQAK][4-knows->8]\ngremlin> g.commit()\n==>null\ngremlin> v3 = g.addVertex()\n==>v[12]\ngremlin> g.addEdge(null,v1,v3,'knows')\nRelation has been removed\nDisplay stack trace? [yN] N\n```\n\nThis should not happen (see [discussion](https://groups.google.com/forum/?fromgroups=#!topic/aureliusgraphs/T9qrLnhWuys)).\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 3, "UPD": 0, "TOT": 4, "DEL": 0, "INS": 4, "spoonFilesChanged": 1, "MOV": 0}, "title": "Relation has been removed", "statsSkippedReason": "", "closed": "2013-05-03 00:46:49", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-05-02 16:02:09", "commitHash": "6eec0ad79102e9d0d93c7753410965aec85c296a", "commitParents": ["9b9d0857f6a2d36c4b9dc91d58bee6d5ae0d1bb1"], "commitGHEventType": "referenced", "nameRev": "6eec0ad79102e9d0d93c7753410965aec85c296a tags/0.3.1~57", "commitGitStats": [{"insertions": 4, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addPropertyInternal(com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanKey,java.lang.Object)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.removeRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addEdge(com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanLabel)"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 8, "DEL": 0, "INS": 8, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testThreadBoundTx()"}], "spoonFilePath": "TitanGraphTest.java"}], "commitMessage": "Fixes #225\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-05-02 16:02:09"}], "created": "2013-04-14 21:00:19"}, {"labels": ["bug"], "filteredCommits": [], "url": "https://github.com/thinkaurelius/titan/issues/220", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"33a560db97bf3187ac45d1fe4fdf2e6b817bec40": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 19.00027777777778, "user": "okram", "changesInPackagesSPOON": [], "changesInPackagesGIT": [], "body": "``` groovy\ngremlin> g = TitanFactory.open('/tmp/blah')\n==>titangraph[local:/tmp/blah]\ngremlin> g.makeType().name('private').unique(OUT).dataType(Boolean.class).makePropertyKey();\n==>v[36028797018963978]\ngremlin> g.commit()\n==>null\ngremlin> g.addVertex([private:true])\nValue [true] is not an instance of the expected data type for property key [private]. Expected: boolean, found: class java.lang.Boolean\nDisplay stack trace? [yN]\ngremlin> g.addVertex([private:Boolean.TRUE])\nValue [true] is not an instance of the expected data type for property key [private]. Expected: boolean, found: class java.lang.Boolean\nDisplay stack trace? [yN]\ngremlin> g.addVertex([private:new Boolean(true)])\nValue [true] is not an instance of the expected data type for property key [private]. Expected: boolean, found: class java.lang.Boolean\nDisplay stack trace? [yN]\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0, "TOT": 0, "DEL": 0, "INS": 0, "spoonFilesChanged": 0, "MOV": 0}, "title": "dataType(Boolean.class) and dataType(boolean.class) throw illegal argument exceptions.", "statsSkippedReason": "", "closed": "2013-05-02 18:26:03", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-04-20 18:09:09", "commitHash": "33a560db97bf3187ac45d1fe4fdf2e6b817bec40", "commitParents": ["e715670b304da165feafdf2a991772ae8ff46f25"], "commitGHEventType": "referenced", "nameRev": "33a560db97bf3187ac45d1fe4fdf2e6b817bec40 tags/0.3.1~77", "commitGitStats": [{"insertions": 13, "lines": 14, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/TestBed.java", "deletions": 1}, {"insertions": 16, "lines": 20, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/attribute/DoubleSerializer.java", "deletions": 4}, {"insertions": 1, "lines": 1, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/types/StandardTypeMaker.java", "deletions": 0}, {"insertions": 13, "lines": 13, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 0}, {"insertions": 45, "lines": 45, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/core/attribute/FullDouble.java", "deletions": 0}, {"insertions": 15, "lines": 19, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/attribute/FloatSerializer.java", "deletions": 4}, {"insertions": 34, "lines": 38, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/AttributeUtil.java", "deletions": 4}, {"insertions": 22, "lines": 22, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/attribute/ShortSerializer.java", "deletions": 0}, {"insertions": 14, "lines": 15, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/SerializerInitialization.java", "deletions": 1}, {"insertions": 22, "lines": 22, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/attribute/ByteSerializer.java", "deletions": 0}, {"insertions": 24, "lines": 24, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/attribute/CharacterSerializer.java", "deletions": 0}, {"insertions": 45, "lines": 45, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/core/attribute/FullFloat.java", "deletions": 0}, {"insertions": 23, "lines": 23, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/serialize/attribute/BooleanSerializer.java", "deletions": 0}, {"insertions": 69, "lines": 74, "filePath": "titan-test/src/test/java/com/thinkaurelius/titan/graphdb/serializer/SerializerTest.java", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.CharacterSerializer"}], "spoonFilePath": "CharacterSerializer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 10, "DEL": 0, "INS": 6, "MOV": 4, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testTypes()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.BooleanSerializer"}], "spoonFilePath": "BooleanSerializer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.ShortSerializer"}], "spoonFilePath": "ShortSerializer.java"}, {"spoonMethods": [{"UPD": 14, "TOT": 39, "DEL": 1, "INS": 1, "MOV": 23, "spoonMethodName": "com.thinkaurelius.titan.graphdb.serializer.SerializerTest.setUp()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.serializer.SerializerTest.primitiveSerialization()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.serializer.SerializerTest.classSerialization()"}], "spoonFilePath": "SerializerTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.DoubleSerializer.read(java.nio.ByteBuffer)"}, {"UPD": 2, "TOT": 6, "DEL": 0, "INS": 3, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.DoubleSerializer.writeObjectData(com.thinkaurelius.titan.graphdb.database.serialize.DataOutput,java.lang.Double)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.DoubleSerializer.withinRange(java.lang.Double)"}, {"UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.DoubleSerializer"}], "spoonFilePath": "DoubleSerializer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.ByteSerializer"}], "spoonFilePath": "ByteSerializer.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 15, "DEL": 0, "INS": 7, "MOV": 7, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.AttributeUtil.prepareAttribute(java.lang.Object,java.lang.Class)"}, {"UPD": 0, "TOT": 6, "DEL": 1, "INS": 2, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.AttributeUtil.checkAttributeType(com.thinkaurelius.titan.core.TitanKey,java.lang.Object)"}], "spoonFilePath": "AttributeUtil.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.FloatSerializer"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.FloatSerializer.withinRange(java.lang.Float)"}, {"UPD": 2, "TOT": 9, "DEL": 1, "INS": 3, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.FloatSerializer.writeObjectData(com.thinkaurelius.titan.graphdb.database.serialize.DataOutput,java.lang.Float)"}, {"UPD": 1, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.attribute.FloatSerializer.read(java.nio.ByteBuffer)"}], "spoonFilePath": "FloatSerializer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.types.StandardTypeMaker.makePropertyKey()"}], "spoonFilePath": "StandardTypeMaker.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.core.attribute.FullFloat"}], "spoonFilePath": "FullFloat.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 6, "DEL": 0, "INS": 5, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.TestBed.main(java.lang.String[])"}], "spoonFilePath": "TestBed.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 11, "DEL": 0, "INS": 10, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.serialize.SerializerInitialization.initialize(com.thinkaurelius.titan.graphdb.database.serialize.Serializer)"}], "spoonFilePath": "SerializerInitialization.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.core.attribute.FullDouble"}], "spoonFilePath": "FullDouble.java"}], "commitMessage": "Registered additional primitive classes in Kryo. Improved attribute checking and automatic conversions. Added full versions of double and float in case full precision is needed and order preservation is not.\nFixes #220. Fixes #222.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-04-20 18:09:09"}], "created": "2013-04-12 20:40:14"}, {"labels": ["bug"], "filteredCommits": ["cf981127bcf88a6f6b6c160104ce6e97c2c37554"], "url": "https://github.com/thinkaurelius/titan/issues/215", "gitStatsSummary": {"insertions": 153, "gitFilesChange": 4, "lines": 169, "deletions": 16}, "numCommits": 1, "commits": {"cf981127bcf88a6f6b6c160104ce6e97c2c37554": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 25.00027777777778, "user": "antonkulaga", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.transaction.indexcache.SimpleIndexCache", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.connectRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)", "com.thinkaurelius.titan.CassandraStorageSetup", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.removeRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).4", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).6", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.getNew(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).2", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).9.apply(com.thinkaurelius.titan.graphdb.transaction.TitanElement)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).8.apply(com.thinkaurelius.titan.graphdb.transaction.TitanElement)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).5", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).7", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).7.apply(com.thinkaurelius.titan.graphdb.transaction.TitanElement)", "com.thinkaurelius.titan.graphdb.transaction.indexcache.ConcurrentIndexCache", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.getNew(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).3", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.isVertexIndexProperty(com.thinkaurelius.titan.graphdb.internal.InternalRelation)", "com.thinkaurelius.titan.graphdb.transaction.indexcache", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).6.apply(java.lang.Object)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.isVertexIndexProperty(com.thinkaurelius.titan.graphdb.transaction.TitanKey)", "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.getNew(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/indexcache"], "body": "I updated to the latest titan and got very poor performance on indexes (seems like the do not work at all).\n\nCode that was executed in a matter of seconds on previous versions of Titan (stuff like this https://github.com/hudvin/genes-demo/tree/master/src/main/scala ) now takes many minutes on both Berkeley and Cassandra backends.\n\nAnd when I add index backends explicitness to the config I get \"could not instantiate implementation: com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex\" even when I have them all in sbt settings: (i.e.  \"com.thinkaurelius.titan\" % \"titan-lucene\" % \"0.3.0\")\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 21, "UPD": 19, "TOT": 58, "DEL": 5, "INS": 20, "spoonFilesChanged": 5, "MOV": 14}, "title": "Very poor performance on indexed of Titan 0.3.0 + \"could not instantiate implementation: com.thinkaurelius.titan.diskstorage.lucene.LuceneIndex\"", "statsSkippedReason": "", "closed": "2013-05-03 00:34:00", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-05-02 14:38:46", "commitHash": "cf981127bcf88a6f6b6c160104ce6e97c2c37554", "commitParents": ["e871add0cbdfdc52cf5475b2f62019fb3a35016a"], "commitGHEventType": "referenced", "nameRev": "cf981127bcf88a6f6b6c160104ce6e97c2c37554 tags/0.3.1~59", "commitGitStats": [{"insertions": 18, "lines": 18, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/indexcache/IndexCache.java", "deletions": 0}, {"insertions": 42, "lines": 42, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/indexcache/SimpleIndexCache.java", "deletions": 0}, {"insertions": 19, "lines": 19, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphPerformanceTest.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "titan-cassandra/src/test/java/com/thinkaurelius/titan/CassandraStorageSetup.java", "deletions": 1}, {"insertions": 50, "lines": 66, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 16}, {"insertions": 43, "lines": 43, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/indexcache/ConcurrentIndexCache.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.indexcache"}], "spoonFilePath": "IndexCache.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.indexcache.SimpleIndexCache"}], "spoonFilePath": "SimpleIndexCache.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).8.apply(com.thinkaurelius.titan.graphdb.transaction.TitanElement)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.connectRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.isVertexIndexProperty(com.thinkaurelius.titan.graphdb.transaction.TitanKey)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).4"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).6"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.getNew(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).2"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.isVertexIndexProperty(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).9.apply(com.thinkaurelius.titan.graphdb.transaction.TitanElement)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).5"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).7"}, {"UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx"}, {"UPD": 1, "TOT": 5, "DEL": 1, "INS": 0, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).7.apply(com.thinkaurelius.titan.graphdb.transaction.TitanElement)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.getNew(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).3"}, {"UPD": 4, "TOT": 11, "DEL": 2, "INS": 2, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery)"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.execute(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery).6.apply(java.lang.Object)"}, {"UPD": 0, "TOT": 4, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.removeRelation(com.thinkaurelius.titan.graphdb.internal.InternalRelation)"}, {"UPD": 6, "TOT": 17, "DEL": 1, "INS": 5, "MOV": 5, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.3.getNew(com.thinkaurelius.titan.graphdb.transaction.StandardElementQuery)"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphPerformanceTest.testInTxIndex()"}], "spoonFilePath": "TitanGraphPerformanceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.CassandraStorageSetup"}], "spoonFilePath": "CassandraStorageSetup.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.indexcache.ConcurrentIndexCache"}], "spoonFilePath": "ConcurrentIndexCache.java"}], "commitMessage": "Added in-transaction index for newly added vertex properties. Fixes #215\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-05-02 14:38:46"}], "created": "2013-04-07 02:18:17"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/212", "title": "Vertices Not Deleting Fully", "closed": "2013-04-13 19:39:56", "commitsDetails": [], "commits": {}, "ttf": 7.000277777777778, "created": "2013-04-06 10:14:03", "user": "spmallette", "body": "Vertices only partially deleting under certain conditions.  First reported here:\n\nhttps://groups.google.com/forum/#!topic/gremlin-users/m5RjyS97iNA\n\nTo recreate:\n- Start Titan Server:\n\n``` text\nbin/titan.sh config/titan-server-rexster.xml config/titan-server-cassandra.properties`\n```\n- Start gremlin and connect to titan server and add a few vertices: \n\n``` text\ngremlin> g = TitanFactory.open('bin/cassandra.local')\n==>titangraph[cassandrathrift:127.0.0.1]\ngremlin> g.addVertex([name:'allen'])\n==>v[4]\ngremlin> g.addVertex([name:'rick'])\n==>v[8]\ngremlin> g.addVertex([name:'sandy'])\n==>v[12]\ngremlin> g.commit()\n==>null\ngremlin> g.V\n==>v[4]\n==>v[8]\n==>v[12]\n```\n- You should be able to curl that out via REST:\n\n``` text\ncurl http://localhost:8182/graphs/graph/vertices\n{\"version\":\"2.3.0\",\"results\":[{\"name\":\"allen\",\"_id\":4,\"_type\":\"vertex\"},{\"name\":\"rick\",\"_id\":8,\"_type\":\"vertex\"},{\"name\":\"sandy\",\"_id\":12,\"_type\":\"vertex\"}],\"totalSize\":3,\"queryTime\":270.671319}\n```\n- You should be able to remove all those vertices via REST:\n\n``` text\ncurl \"http://localhost:8182/graphs/graph/tp/gremlin?script=g.V.remove();g.commit()\"\n{\"results\":null,\"success\":true,\"version\":\"2.3.0\",\"queryTime\":843.982107}\n```\n- But they are still there...sort of.  They are listed but have no properties:\n\n``` text\ncurl http://localhost:8182/graphs/graph/vertices{\"version\":\"2.3.0\",\"results\":[{\"_id\":4,\"_type\":\"vertex\"},{\"_id\":8,\"_type\":\"vertex\"},{\"_id\":12,\"_type\":\"vertex\"}],\"totalSize\":3,\"queryTime\":26.497273}\n```\n- So check in Gremlin REPL and see what it says:\n\n``` text\ngremlin> g.V\ngremlin> \n```\n\nApparently they were deleted.\n- It must be a problem with Rexster.  Maybe a lurking cache somewhere in memory.  Perhaps some trick of multithreading.  So...restart Titan Server and try to grab the data again:\n\n``` text\ngremlin> g = TitanFactory.open('bin/cassandra.local')\n==>titangraph[cassandrathrift:127.0.0.1]\ngremlin> g.V\ngremlin> \n```\n\nGremlin is good...what about REST:\n\n``` text\ncurl http://localhost:8182/graphs/graph/vertices\n{\"version\":\"2.3.0\",\"results\":[{\"_id\":4,\"_type\":\"vertex\"},{\"_id\":8,\"_type\":\"vertex\"},{\"_id\":12,\"_type\":\"vertex\"}],\"totalSize\":3,\"queryTime\":231.322573}\n```\n\nStill showing those \"empty\" vertices.  What about Rexster Console:\n\n``` text\nrexster[groovy]> g = rexster.getGraph('graph')\n==>titangraph[embeddedcassandra:null]\nrexster[groovy]> g.V\n==>v[4]\n==>v[8]\n==>v[12]\nrexster[groovy]> g.V.map\n==>{}\n==>{}\n==>{}\n```\n\nSame problem.  The fact that restarting Titan Server doesn't fix the problem seems to indicated that Rexster is not the problem as it maintains no state itself between stop/start. The fact that Gremlin REPL is working properly seems to indicate that the problem is not in Titan as we're removing layers from the stack and simplifying.\n"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/211", "title": "Double index not working -- EXACT and FULL_TEXT", "closed": "2013-04-29 15:21:40", "commitsDetails": [], "commits": {}, "ttf": 24.00027777777778, "created": "2013-04-04 22:15:25", "user": "okram", "body": "the double indexed().indexed() thing didn't work. the exact index worked (g.V(key,value)), but when I did query().has(key,CONTAINS,value) it didn't work --- and for values we had working before.\n\n```groovy       g.makeType().name('name').dataType(String.class).indexed(\"search\",Vertex.class).indexed(Vertex.class).unique(Direction.OUT).makePropertyKey();\n\n```\n\n\n\n```\n"}, {"labels": ["bug"], "filteredCommits": ["8844fb05759ae0d64a9afd5c53dee9dee3650d00"], "url": "https://github.com/thinkaurelius/titan/issues/205", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"8844fb05759ae0d64a9afd5c53dee9dee3650d00": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}, "27639d4fc85bf97bfbd4db1c8227026f4ad3043e": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}}, "ttf": 30.00027777777778, "user": "vantonio", "changesInPackagesSPOON": [], "changesInPackagesGIT": [], "body": "Please see this thread for detailed information:\n\nhttps://groups.google.com/forum/?fromgroups=#!topic/aureliusgraphs/FFaZmp6P5JE\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0, "TOT": 0, "DEL": 0, "INS": 0, "spoonFilesChanged": 0, "MOV": 0}, "title": "Defining a unique type without committing won't enforce type check.", "statsSkippedReason": "", "closed": "2013-05-03 00:35:19", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-05-02 12:53:24", "commitHash": "8844fb05759ae0d64a9afd5c53dee9dee3650d00", "commitParents": ["27639d4fc85bf97bfbd4db1c8227026f4ad3043e"], "commitGHEventType": "referenced", "nameRev": "8844fb05759ae0d64a9afd5c53dee9dee3650d00 tags/0.3.1~62", "commitGitStats": [{"insertions": 15, "lines": 30, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 15}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 7, "DEL": 0, "INS": 5, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testTypes()"}], "spoonFilePath": "TitanGraphTest.java"}], "commitMessage": "Added test case and fix #205. Closes #205\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-05-02 12:53:24"}, {"commitUser": "mbroecheler", "commitDateTime": "2013-05-02 12:52:33", "commitHash": "27639d4fc85bf97bfbd4db1c8227026f4ad3043e", "commitParents": ["8c51ee9c15b656fa51de53de4f4cc29444132a4a"], "commitGHEventType": "referenced", "nameRev": "27639d4fc85bf97bfbd4db1c8227026f4ad3043e tags/0.3.1~63", "commitGitStats": [{"insertions": 26, "lines": 30, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/query/StandardElementQuery.java", "deletions": 4}, {"insertions": 9, "lines": 13, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardTitanTx.java", "deletions": 4}, {"insertions": 77, "lines": 79, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 4, "TOT": 20, "DEL": 0, "INS": 10, "MOV": 6, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.StandardElementQuery.matchesCondition(com.thinkaurelius.titan.graphdb.query.TitanElement,com.thinkaurelius.titan.graphdb.query.KeyCondition)"}], "spoonFilePath": "StandardElementQuery.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 7, "DEL": 1, "INS": 1, "MOV": 4, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.setProperty(com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanKey,java.lang.Object)"}, {"UPD": 3, "TOT": 4, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardTitanTx.addProperty(com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanKey,java.lang.Object)"}], "spoonFilePath": "StandardTitanTx.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 28, "DEL": 1, "INS": 22, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testTypes()"}], "spoonFilePath": "TitanGraphTest.java"}], "commitMessage": "Added test case and fix #205. Closes #205\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-05-02 12:52:33"}], "created": "2013-04-02 04:34:54"}, {"labels": ["bug", "question"], "url": "https://github.com/thinkaurelius/titan/issues/159", "title": "Index out of sync with Transaction?", "closed": "2013-03-29 02:42:49", "commitsDetails": [], "commits": {}, "ttf": 35.000277777777775, "created": "2013-02-21 19:57:45", "user": "okram", "body": "okay.. here there is a weird behavior in Titan I don't like.\nI do this:\n1. use index, kill some vertices.  \n   g.V('type','affiliation').has('state','NM').remove() \n2. then hit the index again and traverse -- NM states gone.\n   g.V('type','affiliaiton').out\n\nI get a \n\n```\n Vertex 12345 has altreay been deleted.\n```\n\nwhy should I get that? I'm in a transaction that that vertex was already deleted in.\n"}, {"labels": ["bug"], "filteredCommits": ["43619ac420e8393b939f823bd63b99020c75e1f4"], "url": "https://github.com/thinkaurelius/titan/issues/144", "gitStatsSummary": {"insertions": 6, "gitFilesChange": 1, "lines": 12, "deletions": 6}, "numCommits": 1, "commits": {"43619ac420e8393b939f823bd63b99020c75e1f4": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 21.00027777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.loadRelations(java.lang.Iterable,com.thinkaurelius.titan.graphdb.database.VertexRelationLoader,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getEntry(com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction,com.thinkaurelius.titan.graphdb.relations.InternalRelation,com.thinkaurelius.titan.graphdb.vertices.InternalTitanVertex,java.util.Map,boolean)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database"], "body": "", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 12, "DEL": 0, "INS": 6, "spoonFilesChanged": 1, "MOV": 6}, "title": "Functional edges are stored incorrectly on OUT Vertex", "statsSkippedReason": "", "closed": "2013-02-14 05:41:22", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-02-12 16:15:33", "commitHash": "43619ac420e8393b939f823bd63b99020c75e1f4", "commitParents": ["2acbf827aca75c65380851dfff34901e88a2f37c"], "commitGHEventType": "closed", "nameRev": "43619ac420e8393b939f823bd63b99020c75e1f4 tags/0.2.1~39", "commitGitStats": [{"insertions": 42, "lines": 49, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 7}, {"insertions": 6, "lines": 12, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 6}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 14, "DEL": 0, "INS": 14, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testTypes()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testDate()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.loadRelations(java.lang.Iterable,com.thinkaurelius.titan.graphdb.database.VertexRelationLoader,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction)"}, {"UPD": 0, "TOT": 8, "DEL": 0, "INS": 4, "MOV": 4, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getEntry(com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction,com.thinkaurelius.titan.graphdb.relations.InternalRelation,com.thinkaurelius.titan.graphdb.vertices.InternalTitanVertex,java.util.Map,boolean)"}], "spoonFilePath": "StandardTitanGraph.java"}], "commitMessage": "Fixes #144.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-02-12 16:15:33"}], "created": "2013-01-24 01:24:07"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/135", "title": "Make JavaDoc exclusions works.", "closed": "2013-02-14 01:11:53", "commitsDetails": [], "commits": {}, "ttf": 33.000277777777775, "created": "2013-01-11 06:44:46", "user": "okram", "body": "```\n              <excludePackageNames>\n                 com.thinkaurelius.titan.diskstorage;com.thinkaurelius.titan.graphdb;com.thinkaurelius.titan.tinkerpop;com.thinkaurelius.titan.util;\n                </excludePackageNames>\n```\n\nIn the root Titan directory, you create the aggregate JavaDoc with:\n   mvn javadoc:aggregate\n\nThe titan-all distribution.xml then grabs that for its distribution.zip.\n\nProblem, the name exclusions don't seem to be considered by the plugin' :(\n"}, {"labels": ["bug"], "filteredCommits": ["b55f4f332ee7c5c47295db46ffac2d2355968f79"], "url": "https://github.com/thinkaurelius/titan/issues/129", "gitStatsSummary": {"insertions": 20, "gitFilesChange": 3, "lines": 29, "deletions": 9}, "numCommits": 1, "commits": {"b55f4f332ee7c5c47295db46ffac2d2355968f79": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 41.000277777777775, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.transaction.isDeletedVertex(long)", "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.getVertices(com.thinkaurelius.titan.core.TitanKey,java.lang.Object)", "com.thinkaurelius.titan.graphdb.transaction.VertexIterable.iterator().1.nextVertex()", "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.getExisting(long)", "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.isDeletedVertex(long)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction"], "body": "```\n@Test\npublic void testVertexDeletion() {\n    Vertex v1 = graphdb.addVertex(null);\n    v1.setProperty(\"name\", \"v1\");\n    Vertex v2 = graphdb.addVertex(null);\n    v2.setProperty(\"name\", \"v2\");\n\n    Edge e = graphdb.addEdge(null, v1, v2, \"some_edge\");\n\n    graphdb.stopTransaction(TransactionalGraph.Conclusion.SUCCESS);\n\n    v1 = graphdb.getVertex(v1);\n    graphdb.removeVertex(v1);\n    v2 = graphdb.getVertices(\"name\", \"v2\").iterator().next(); // generates IllegalArgumentException\n\n    graphdb.stopTransaction(TransactionalGraph.Conclusion.SUCCESS);\n}\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 5, "UPD": 7, "TOT": 17, "DEL": 0, "INS": 7, "spoonFilesChanged": 3, "MOV": 3}, "title": "Filter out deleted vertices in index calls and global iterations", "statsSkippedReason": "", "closed": "2013-02-14 05:41:22", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-02-12 18:37:05", "commitHash": "b55f4f332ee7c5c47295db46ffac2d2355968f79", "commitParents": ["ac746d5753151c1904efda645429fca6a9086231"], "commitGHEventType": "closed", "nameRev": "b55f4f332ee7c5c47295db46ffac2d2355968f79 tags/0.2.1~36", "commitGitStats": [{"insertions": 2, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/InternalTitanTransaction.java", "deletions": 0}, {"insertions": 3, "lines": 4, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/VertexIterable.java", "deletions": 1}, {"insertions": 15, "lines": 23, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/transaction/AbstractTitanTx.java", "deletions": 8}, {"insertions": 29, "lines": 30, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.isDeletedVertex(long)"}], "spoonFilePath": "InternalTitanTransaction.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.getVertices(com.thinkaurelius.titan.core.TitanKey,java.lang.Object)"}, {"UPD": 7, "TOT": 7, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.getExisting(long)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.isDeletedVertex(long)"}], "spoonFilePath": "AbstractTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 6, "DEL": 0, "INS": 4, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.VertexIterable.iterator().1.nextVertex()"}], "spoonFilePath": "VertexIterable.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testVertexDeletionWithIndex()"}, {"UPD": 0, "TOT": 6, "DEL": 0, "INS": 6, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testIteration()"}], "spoonFilePath": "TitanGraphTest.java"}], "commitMessage": "Fixes #129. Added additional tests to verify other cases that are similar.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-02-12 18:37:05"}], "created": "2013-01-04 04:15:00"}, {"labels": ["bug"], "filteredCommits": ["ac746d5753151c1904efda645429fca6a9086231"], "url": "https://github.com/thinkaurelius/titan/issues/127", "gitStatsSummary": {"insertions": 39, "gitFilesChange": 2, "lines": 73, "deletions": 34}, "numCommits": 1, "commits": {"ac746d5753151c1904efda645429fca6a9086231": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 46.000277777777775, "user": "okram", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.persist(com.google.common.collect.ListMultimap,java.util.Map,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction,com.thinkaurelius.titan.graphdb.database.BackendMutator)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(java.util.Collection,java.util.Collection,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction)", "com.thinkaurelius.titan.graphdb.relations.factory.RelationFactoryUtil.connectRelation(com.thinkaurelius.titan.graphdb.relations.InternalRelation,boolean,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getEntry(com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction,com.thinkaurelius.titan.graphdb.relations.InternalRelation,com.thinkaurelius.titan.graphdb.vertices.InternalTitanVertex,java.util.Map)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getEntry(com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction,com.thinkaurelius.titan.graphdb.relations.InternalRelation,int,java.util.Map,boolean)", "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getEntry(com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction,com.thinkaurelius.titan.graphdb.relations.InternalRelation,com.thinkaurelius.titan.graphdb.vertices.InternalTitanVertex,java.util.Map,boolean)"], "changesInPackagesGIT": ["titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/factory", "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database"], "body": "gremlin> g = TitanFactory.open('/tmp/blah2')\n==>titangraph[local:/tmp/blah2]\ngremlin> v = g.addVertex()\n==>v[4]\ngremlin> g.addEdge(v,v,'self')\n==>e[11:4:36028797018963982][4-self->4]\ngremlin> v.inE.count()\n==>1\ngremlin> v.outE.count()\n==>1\ngremlin> g.stopTransaction(SUCCESS)\n==>null\ngremlin> v = g.getVertex(4)\n==>v[4]\ngremlin> v.inE.count()\n==>0\ngremlin> v.outE.count()\n==>1\ngremlin> v.inE.count() \n==>1\n//////////// THE PROBLEM IS EVEN MORE NEFARIOUS IF YOU TRY AND GRAB THE ADJACENT VERTEX\ngremlin> g.stopTransaction(SUCCESS)\n==>null\ngremlin> v = g.getVertex(4)  \n==>v[4]\ngremlin> v.in.count()\n==>0\ngremlin> v.out.count()\n==>1\ngremlin> v.in.count() \n==>0\ngremlin> v.inE.count()\n==>0\n\nHowever, note that this seems to only happen with 'self loops'. See the code fragment below:\n\ngremlin> g = TitanFactory.open('/tmp/blah3')\n==>titangraph[local:/tmp/blah3]\ngremlin> v = g.addVertex()\n==>v[4]\ngremlin> u = g.addVertex()\n==>v[8]\ngremlin> g.addEdge(u,v,'knows')\n==>e[13:8:36028797018963982][8-knows->4]\ngremlin> u.outE.count()\n==>1\ngremlin> u.inE.count()\n==>0\ngremlin> v.inE.count()\n==>1\ngremlin> v.outE.count()\n==>0\ngremlin> g.stopTransaction(SUCCESS)\n==>null\ngremlin> u = g.getVertex(8)  \n==>v[8]\ngremlin> v = g.getVertex(4)\n==>v[4]\ngremlin> v.inE.count()\n==>1\ngremlin> u.inE.count()\n==>0\ngremlin> u.outE.count()\n==>1\ngremlin> v.outE.count()\n==>0\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 6, "UPD": 18, "TOT": 52, "DEL": 9, "INS": 11, "spoonFilesChanged": 2, "MOV": 14}, "title": "Self looping -- in edge count off after transaction committed. (but good when out edges are counted)", "statsSkippedReason": "", "closed": "2013-02-14 05:41:22", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2013-02-12 17:41:59", "commitHash": "ac746d5753151c1904efda645429fca6a9086231", "commitParents": ["bd1445809192f13ed0674e0a81c8117fe263b0a0"], "commitGHEventType": "closed", "nameRev": "ac746d5753151c1904efda645429fca6a9086231 tags/0.2.1~37", "commitGitStats": [{"insertions": 15, "lines": 19, "filePath": "titan-test/src/main/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 4}, {"insertions": 1, "lines": 2, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/relations/factory/RelationFactoryUtil.java", "deletions": 1}, {"insertions": 38, "lines": 71, "filePath": "titan-core/src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 33}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testIndexRetrieval()"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testQuery()"}, {"UPD": 3, "TOT": 3, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testVertexRemoval()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testSelfLoop()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testDate()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 7, "TOT": 12, "DEL": 1, "INS": 1, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.persist(com.google.common.collect.ListMultimap,java.util.Map,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction,com.thinkaurelius.titan.graphdb.database.BackendMutator)"}, {"UPD": 3, "TOT": 3, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getEntry(com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction,com.thinkaurelius.titan.graphdb.relations.InternalRelation,com.thinkaurelius.titan.graphdb.vertices.InternalTitanVertex,java.util.Map)"}, {"UPD": 6, "TOT": 23, "DEL": 7, "INS": 0, "MOV": 10, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getEntry(com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction,com.thinkaurelius.titan.graphdb.relations.InternalRelation,com.thinkaurelius.titan.graphdb.vertices.InternalTitanVertex,java.util.Map,boolean)"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(java.util.Collection,java.util.Collection,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction)"}, {"UPD": 0, "TOT": 10, "DEL": 0, "INS": 10, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getEntry(com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction,com.thinkaurelius.titan.graphdb.relations.InternalRelation,int,java.util.Map,boolean)"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.relations.factory.RelationFactoryUtil.connectRelation(com.thinkaurelius.titan.graphdb.relations.InternalRelation,boolean,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction)"}], "spoonFilePath": "RelationFactoryUtil.java"}], "commitMessage": "Fixes #127.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-02-12 17:41:59"}], "created": "2012-12-29 17:56:30"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/111", "title": "Titan cache and vertex-centric indices", "closed": "2012-12-13 06:06:06", "commitsDetails": [], "commits": {}, "ttf": 39.000277777777775, "created": "2012-11-04 02:05:06", "user": "okram", "body": "When you do a:\n\n   v.outE.inV\n\nThen do a\n\n  v.outE[0..5].inV\n\n..the primary key is not respected. I can provide an example if you don't know what I'm talking about, but we discovered this in Tennessee.\n"}, {"labels": ["bug"], "filteredCommits": [], "url": "https://github.com/thinkaurelius/titan/issues/106", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"7720850da32092290f6ee0e375eb22cb367a3310": {"commitUser": "okram", "commitGHEventType": "referenced"}}, "ttf": 42.000277777777775, "user": "okram", "changesInPackagesGIT": [], "body": "When a composite key is defined on a label, a restricted query will be interpreted as an unrestricted query which leads to missing data.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {}, "title": "Composite Primary Key Edge Loading mistake", "statsSkippedReason": "", "closed": "2012-12-13 09:36:09", "commitsDetails": [{"commitUser": "okram", "commitDateTime": "2013-09-24 13:52:33", "commitHash": "7720850da32092290f6ee0e375eb22cb367a3310", "commitParents": ["63cd447da2fac871c2528fcec575e19b10e7330b"], "commitGHEventType": "referenced", "nameRev": "7720850da32092290f6ee0e375eb22cb367a3310 tags/0.5.0-M1~62^2~16^2~20^2~72", "commitGitStats": [{"insertions": 0, "lines": 80, "filePath": "src/main/java/com/thinkaurelius/faunus/formats/sequence/faunus01/FaunusSequenceFileRecordReader.java", "deletions": 80}, {"insertions": 43, "lines": 46, "filePath": "src/test/java/com/thinkaurelius/faunus/mapreduce/filter/PropertyFilterMapTest.java", "deletions": 3}, {"insertions": 2, "lines": 3, "filePath": "src/main/java/com/thinkaurelius/faunus/tinkerpop/gremlin/ScriptExecutor.java", "deletions": 1}, {"insertions": 0, "lines": 118, "filePath": "src/test/java/com/thinkaurelius/faunus/formats/sequence/faunus01/FaunusVertex01Test.java", "deletions": 118}, {"insertions": 0, "lines": 0, "filePath": "src/test/resources/com/thinkaurelius/faunus/formats/sequence/faunus01/graph-of-the-gods-faunus01.seq", "deletions": 0}, {"insertions": 17, "lines": 17, "filePath": "src/test/java/com/thinkaurelius/faunus/tinkerpop/gremlin/ScriptExecutorTest.java", "deletions": 0}, {"insertions": 4, "lines": 23, "filePath": "src/test/java/com/thinkaurelius/faunus/mapreduce/util/ElementCheckerTest.java", "deletions": 19}, {"insertions": 3, "lines": 6, "filePath": "src/test/java/com/thinkaurelius/faunus/FaunusVertexTest.java", "deletions": 3}, {"insertions": 1, "lines": 2, "filePath": "src/test/java/com/thinkaurelius/faunus/formats/VertexQueryFilterTest.java", "deletions": 1}, {"insertions": 0, "lines": 14, "filePath": "src/test/java/com/thinkaurelius/faunus/formats/sequence/faunus01/FaunusSequenceFileInputFormatTest.java", "deletions": 14}, {"insertions": 0, "lines": 49, "filePath": "src/main/java/com/thinkaurelius/faunus/formats/sequence/faunus01/VertexConverter.java", "deletions": 49}, {"insertions": 12, "lines": 24, "filePath": "src/main/java/com/thinkaurelius/faunus/FaunusPipeline.java", "deletions": 12}, {"insertions": 5, "lines": 5, "filePath": "CHANGELOG.textile", "deletions": 0}, {"insertions": 4, "lines": 12, "filePath": "src/main/java/com/thinkaurelius/faunus/formats/titan/TitanInputFormat.java", "deletions": 8}, {"insertions": 0, "lines": 9, "filePath": "bin/faunus01-to-faunus03.properties", "deletions": 9}, {"insertions": 0, "lines": 25, "filePath": "src/main/java/com/thinkaurelius/faunus/formats/sequence/faunus01/FaunusSequenceFileInputFormat.java", "deletions": 25}, {"insertions": 22, "lines": 43, "filePath": "src/main/java/com/thinkaurelius/faunus/mapreduce/filter/PropertyFilterMap.java", "deletions": 21}, {"insertions": 0, "lines": 36, "filePath": "src/test/java/com/thinkaurelius/faunus/formats/sequence/faunus01/FaunusSequenceFileRecordReaderTest.java", "deletions": 36}, {"insertions": 3, "lines": 3, "filePath": "src/test/resources/com/thinkaurelius/faunus/tinkerpop/gremlin/Script.groovy", "deletions": 0}, {"insertions": 0, "lines": 405, "filePath": "src/main/java/com/thinkaurelius/faunus/formats/sequence/faunus01/FaunusVertex01.java", "deletions": 405}, {"insertions": 0, "lines": 0, "filePath": "src/test/resources/com/thinkaurelius/faunus/graph-of-the-gods-2.seq", "deletions": 0}, {"insertions": 7, "lines": 91, "filePath": "src/main/java/com/thinkaurelius/faunus/mapreduce/util/ElementChecker.java", "deletions": 84}, {"insertions": 0, "lines": 405, "filePath": "src/main/java/com/thinkaurelius/faunus/formats/sequence/faunus01/FaunusElement01.java", "deletions": 405}, {"insertions": 0, "lines": 145, "filePath": "src/main/java/com/thinkaurelius/faunus/formats/sequence/faunus01/FaunusEdge01.java", "deletions": 145}, {"insertions": 3, "lines": 9, "filePath": "src/main/java/com/thinkaurelius/faunus/mapreduce/filter/IntervalFilterMap.java", "deletions": 6}, {"insertions": 2, "lines": 2, "filePath": "src/test/java/com/thinkaurelius/faunus/tinkerpop/gremlin/FaunusGremlinScriptEngineTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "moved to Compare 2.4.0 Blueprints, removed SequenceFile upgraded, fixed #106, added support for has(key) and hasNot(key), fixed #141.\n", "spoonStatsSkippedReason": "tooManyFiles", "authoredDateTime": "2013-09-24 13:52:33"}], "created": "2012-10-31 16:22:00"}, {"labels": ["bug"], "filteredCommits": ["26bbee89f169c89334baf92b54894fa17230d5d4"], "url": "https://github.com/thinkaurelius/titan/issues/102", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 1, "deletions": 0}, "numCommits": 1, "commits": {"26bbee89f169c89334baf92b54894fa17230d5d4": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}, "5dd8b160f80705932a804affd102283822c6aebd": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 23.00027777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.isDeletedRelation(com.thinkaurelius.titan.graphdb.relations.InternalRelation)"], "changesInPackagesGIT": ["src/main/java/com/thinkaurelius/titan/graphdb/transaction"], "body": "If I try to remove two related vertices in the same transaction, an IllegalArgumentException is thrown.  If the 2 removeVertex operations are performed in independent transactions it seems to work properly.\n\nThe following test case fails:\n\nVertex v1 = g.addVertex(null);\nVertex v2 = g.addVertex(null);\n\nEdge e = g.addEdge(null, v1, v2, \"some_edge\");\n\ng.stopTransaction(Conclusion.SUCCESS);\n\nv1 = g.getVertex(v1);\nv2 = g.getVertex(v2);\n\ng.removeVertex(v1);\ng.removeVertex(v2);\n\ng.stopTransaction(Conclusion.SUCCESS);\n\nEXCEPTION:\njava.lang.IllegalArgumentException: Vertex has been removed for id: 2000004\n    at com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.getExisting(AbstractTitanTx.java:174)\n    at com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.getExistingVertex(AbstractTitanTx.java:156)\n    at com.thinkaurelius.titan.graphdb.database.StandardVertexRelationLoader.loadEdge(StandardVertexRelationLoader.java:37)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.loadRelations(StandardTitanGraph.java:314)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.loadRelations(StandardTitanGraph.java:275)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.loadRelations(StandardPersistTitanTx.java:150)\n    at com.thinkaurelius.titan.graphdb.vertices.AbstractTitanVertex.ensureLoadedEdges(AbstractTitanVertex.java:88)\n    at com.thinkaurelius.titan.graphdb.vertices.StandardTitanVertex.getRelations(StandardTitanVertex.java:71)\n    at com.thinkaurelius.titan.graphdb.query.SimpleAtomicQuery.relations(SimpleAtomicQuery.java:479)\n    at com.thinkaurelius.titan.graphdb.vertices.AbstractTitanVertex.getRelations(AbstractTitanVertex.java:182)\n    at com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsTransaction.removeVertex(TitanBlueprintsTransaction.java:79)\n    at com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.removeVertex(TitanBlueprintsGraph.java:110)\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 5, "DEL": 1, "INS": 1, "spoonFilesChanged": 1, "MOV": 3}, "title": "Vertex Removal throws Exception", "statsSkippedReason": "", "closed": "2012-11-15 19:16:44", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2012-11-15 11:49:39", "commitHash": "26bbee89f169c89334baf92b54894fa17230d5d4", "commitParents": ["a27597dcd607cc40a3797071f22db15ff1a2e170"], "commitGHEventType": "referenced", "nameRev": "26bbee89f169c89334baf92b54894fa17230d5d4 tags/0.2.0~26^2~4", "commitGitStats": [{"insertions": 1, "lines": 1, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardPersistTitanTx.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 5, "DEL": 1, "INS": 1, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.isDeletedRelation(com.thinkaurelius.titan.graphdb.relations.InternalRelation)"}], "spoonFilePath": "StandardPersistTitanTx.java"}], "commitMessage": "Fixes #102\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-11-15 11:49:39"}, {"commitUser": "mbroecheler", "commitDateTime": "2012-11-15 11:16:10", "commitHash": "5dd8b160f80705932a804affd102283822c6aebd", "commitParents": ["da8901bcea96f225bc445f4e13289b0f04e18e14"], "commitGHEventType": "closed", "nameRev": "5dd8b160f80705932a804affd102283822c6aebd tags/0.2.0~26^2~6", "commitGitStats": [{"insertions": 5, "lines": 5, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/InMemoryTitanGraph.java", "deletions": 0}, {"insertions": 4, "lines": 6, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 2}, {"insertions": 18, "lines": 22, "filePath": "src/test/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 4}, {"insertions": 1, "lines": 1, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/InternalTitanTransaction.java", "deletions": 0}, {"insertions": 14, "lines": 25, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardPersistTitanTx.java", "deletions": 11}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 6, "DEL": 2, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.deletedRelation(com.thinkaurelius.titan.graphdb.relations.InternalRelation)"}, {"UPD": 2, "TOT": 4, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.commit()"}, {"UPD": 0, "TOT": 4, "DEL": 1, "INS": 1, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.isDeletedRelation(com.thinkaurelius.titan.graphdb.relations.InternalRelation)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.isDeletedRelation(long)"}], "spoonFilePath": "StandardPersistTitanTx.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testIndexRetrieval()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testVertexRemoval()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.loadRelations(java.lang.Iterable,com.thinkaurelius.titan.graphdb.database.VertexRelationLoader,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction)"}], "spoonFilePath": "StandardTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.InMemoryTitanGraph.isDeletedRelation(long)"}], "spoonFilePath": "InMemoryTitanGraph.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.isDeletedRelation(long)"}], "spoonFilePath": "InternalTitanTransaction.java"}], "commitMessage": "Fixes #102\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-11-15 11:16:10"}], "created": "2012-10-23 00:35:30"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/101", "title": "error in hbase-whirr.properties. REGION_SERVER_OPTS", "closed": "2012-10-17 21:47:08", "commitsDetails": [], "commits": {}, "ttf": 3.000277777777778, "created": "2012-10-14 00:59:55", "user": "okram", "body": "See last lines of:\n\nhttps://svn.apache.org/repos/asf/whirr/trunk/recipes/hbase.properties\n"}, {"labels": ["bug"], "filteredCommits": ["898033872164962f81ef6cd0415c829f9ef7746a"], "url": "https://github.com/thinkaurelius/titan/issues/89", "gitStatsSummary": {"insertions": 13, "gitFilesChange": 1, "lines": 22, "deletions": 9}, "numCommits": 1, "commits": {"898033872164962f81ef6cd0415c829f9ef7746a": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.types.system.SystemTypeManager.getSystemEdgeType(long)"], "changesInPackagesGIT": ["src/main/java/com/thinkaurelius/titan/graphdb/types/system"], "body": "in creating the hashmap with all the system types.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 1, "TOT": 17, "DEL": 4, "INS": 3, "spoonFilesChanged": 1, "MOV": 9}, "title": "Race condition in SystemTypeManager.getSystemEdgeType", "statsSkippedReason": "", "closed": "2012-09-14 21:13:14", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2012-09-14 12:31:14", "commitHash": "898033872164962f81ef6cd0415c829f9ef7746a", "commitParents": ["5bbc7807c15d0918a7d228998f5ad333649945f3"], "commitGHEventType": "closed", "nameRev": "898033872164962f81ef6cd0415c829f9ef7746a tags/0.2.0~44", "commitGitStats": [{"insertions": 13, "lines": 22, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/types/system/SystemTypeManager.java", "deletions": 9}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 17, "DEL": 4, "INS": 3, "MOV": 9, "spoonMethodName": "com.thinkaurelius.titan.graphdb.types.system.SystemTypeManager.getSystemEdgeType(long)"}], "spoonFilePath": "SystemTypeManager.java"}], "commitMessage": "Fixes #89\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-09-14 12:31:14"}], "created": "2012-09-14 19:23:39"}, {"labels": ["bug"], "filteredCommits": ["624a0e1c014b7b589db531167a9c5f171b2555a9"], "url": "https://github.com/thinkaurelius/titan/issues/88", "gitStatsSummary": {"insertions": 7, "gitFilesChange": 1, "lines": 16, "deletions": 9}, "numCommits": 1, "commits": {"624a0e1c014b7b589db531167a9c5f171b2555a9": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(java.util.Collection,java.util.Collection,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction)"], "changesInPackagesGIT": ["src/main/java/com/thinkaurelius/titan/graphdb/database"], "body": "", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 13, "DEL": 3, "INS": 8, "spoonFilesChanged": 1, "MOV": 2}, "title": "Setting collections to null in StandardTitanGraph.save causes retry to fail", "statsSkippedReason": "", "closed": "2012-09-14 21:13:13", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2012-09-14 11:49:32", "commitHash": "624a0e1c014b7b589db531167a9c5f171b2555a9", "commitParents": ["38b70fe4708eee2fb5b8646613f8e62777c9c0b0"], "commitGHEventType": "closed", "nameRev": "624a0e1c014b7b589db531167a9c5f171b2555a9 tags/0.2.0~46", "commitGitStats": [{"insertions": 7, "lines": 16, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 9}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 13, "DEL": 3, "INS": 8, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(java.util.Collection,java.util.Collection,com.thinkaurelius.titan.graphdb.transaction.InternalTitanTransaction)"}], "spoonFilePath": "StandardTitanGraph.java"}], "commitMessage": "Fixes #88\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-09-14 11:49:32"}], "created": "2012-09-14 18:48:51"}, {"labels": ["bug"], "filteredCommits": ["ed88d7286080492045efafb45a69fa4cb6eeb94d"], "url": "https://github.com/thinkaurelius/titan/issues/44", "gitStatsSummary": {"insertions": 986, "gitFilesChange": 41, "lines": 1377, "deletions": 391}, "numCommits": 1, "commits": {"ed88d7286080492045efafb45a69fa4cb6eeb94d": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 11.000277777777777, "user": "DanielThomas", "changesInPackagesGIT": ["src/main/java/com/thinkaurelius/titan/core", "src/main/java/com/thinkaurelius/titan/graphdb/database", "src/main/java/com/thinkaurelius/titan/graphdb/relations", "src/main/java/com/thinkaurelius/titan/graphdb/relations/factory", "src/main/java/com/thinkaurelius/titan/graphdb/types/manager", "src/main/java/com/thinkaurelius/titan/graphdb/transaction", "src/main/java/com/thinkaurelius/titan/graphdb/blueprints", "src/main/java/com/thinkaurelius/titan/graphdb/types", "src/main/java/com/thinkaurelius/titan/graphdb/vertices", "src/main/java/com/thinkaurelius/titan/graphdb/query", "src/main/java/com/thinkaurelius/titan/util/interval", "src/main/java/com/thinkaurelius/titan/graphdb/database/util", "src/main/java/com/thinkaurelius/titan/graphdb/loadingstatus"], "body": "This behaviour is inconsistent with Blueprints DefaultQuery. In this case we want the edges that do _not_ have a property set:\n\n   .has(\"end\", null)\n\nThis works fine with OrientDB and Neo4J with Blueprints, however Titan's native implementation throws:\n\n```\njava.lang.IllegalArgumentException: Unknown property key: end\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "AtomicTitanQuery throws IllegalArgumentException if property key does not yet exist", "statsSkippedReason": "", "closed": "2012-08-20 23:11:58", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2012-08-20 16:08:25", "commitHash": "ed88d7286080492045efafb45a69fa4cb6eeb94d", "commitParents": ["a1e70246868f0fc9e3e6e1bd454f2b0b13170c3b"], "commitGHEventType": "closed", "nameRev": "ed88d7286080492045efafb45a69fa4cb6eeb94d tags/0.1.0~51", "commitGitStats": [{"insertions": 1, "lines": 1, "filePath": "src/main/java/com/thinkaurelius/titan/util/interval/PointInterval.java", "deletions": 0}, {"insertions": 3, "lines": 6, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/loadingstatus/DefaultLoadingStatus.java", "deletions": 3}, {"insertions": 246, "lines": 246, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/query/EmptyAtomicQuery.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "src/main/java/com/thinkaurelius/titan/util/interval/RangeWithHoles.java", "deletions": 1}, {"insertions": 7, "lines": 13, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/query/DisjunctiveQueryIterator.java", "deletions": 6}, {"insertions": 17, "lines": 35, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/relations/LabeledTitanEdge.java", "deletions": 18}, {"insertions": 2, "lines": 4, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/database/util/LimitTracker.java", "deletions": 2}, {"insertions": 39, "lines": 54, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/vertices/VertexUtil.java", "deletions": 15}, {"insertions": 6, "lines": 6, "filePath": "src/main/java/com/thinkaurelius/titan/util/interval/IntervalUtil.java", "deletions": 0}, {"insertions": 3, "lines": 6, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/loadingstatus/LoadingStatus.java", "deletions": 3}, {"insertions": 17, "lines": 18, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/relations/AttributeUtil.java", "deletions": 1}, {"insertions": 5, "lines": 10, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/InMemoryTitanGraph.java", "deletions": 5}, {"insertions": 1, "lines": 5, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/relations/SimpleProperty.java", "deletions": 4}, {"insertions": 137, "lines": 212, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/query/ComplexTitanQuery.java", "deletions": 75}, {"insertions": 15, "lines": 19, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/query/QueryUtil.java", "deletions": 4}, {"insertions": 3, "lines": 6, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/database/InternalTitanGraph.java", "deletions": 3}, {"insertions": 69, "lines": 69, "filePath": "src/main/java/com/thinkaurelius/titan/util/interval/DoesNotExist.java", "deletions": 0}, {"insertions": 3, "lines": 5, "filePath": "src/main/java/com/thinkaurelius/titan/util/interval/Range.java", "deletions": 2}, {"insertions": 138, "lines": 264, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/query/{AtomicTitanQuery.java => SimpleAtomicQuery.java}", "deletions": 126}, {"insertions": 5, "lines": 5, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/blueprints/BlueprintsDefaultTypeMaker.java", "deletions": 0}, {"insertions": 17, "lines": 35, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/vertices/AbstractTitanVertex.java", "deletions": 18}, {"insertions": 3, "lines": 4, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/TransactionConfig.java", "deletions": 1}, {"insertions": 4, "lines": 8, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/types/manager/StandardTypeFactory.java", "deletions": 4}, {"insertions": 3, "lines": 6, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/loadingstatus/DirectionTypeEncoder.java", "deletions": 3}, {"insertions": 91, "lines": 91, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/query/SimpleTitanQuery.java", "deletions": 0}, {"insertions": 14, "lines": 14, "filePath": "src/main/java/com/thinkaurelius/titan/core/TitanQuery.java", "deletions": 0}, {"insertions": 9, "lines": 11, "filePath": "src/test/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 2}, {"insertions": 6, "lines": 8, "filePath": "src/test/java/com/thinkaurelius/titan/graphdb/loading/EdgeLoadingTest.java", "deletions": 2}, {"insertions": 2, "lines": 4, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/vertices/StandardTitanVertex.java", "deletions": 2}, {"insertions": 0, "lines": 52, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/query/InternalTitanQuery.java", "deletions": 52}, {"insertions": 4, "lines": 9, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/AbstractTitanTx.java", "deletions": 5}, {"insertions": 76, "lines": 76, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/query/AtomicQuery.java", "deletions": 0}, {"insertions": 3, "lines": 7, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardPersistTitanTx.java", "deletions": 4}, {"insertions": 5, "lines": 10, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/vertices/InternalTitanVertex.java", "deletions": 5}, {"insertions": 2, "lines": 4, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/relations/factory/RelationFactoryUtil.java", "deletions": 2}, {"insertions": 5, "lines": 5, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/types/DisableDefaultTypeMaker.java", "deletions": 0}, {"insertions": 9, "lines": 9, "filePath": "src/main/java/com/thinkaurelius/titan/core/DefaultTypeMaker.java", "deletions": 0}, {"insertions": 4, "lines": 8, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/vertices/LoadedEmptyTitanVertex.java", "deletions": 4}, {"insertions": 8, "lines": 17, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/database/StandardTitanGraph.java", "deletions": 9}, {"insertions": 7, "lines": 11, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/query/DisjunctiveQueryIterable.java", "deletions": 4}, {"insertions": 3, "lines": 6, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/loadingstatus/BasicLoadingStatus.java", "deletions": 3}, {"insertions": 3, "lines": 6, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/vertices/PersistStandardTitanVertex.java", "deletions": 3}, {"insertions": 5, "lines": 9, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/InternalTitanTransaction.java", "deletions": 4}], "commitSpoonAstDiffStats": [], "commitMessage": "Significant rewriting/improvements to the query engine. Fixes #44. Fixes possible double constraint counting bug. Fixes null handling in general. Speeds up query execution by smarter interval intersection. Extends test cases.\n", "spoonStatsSkippedReason": "tooManyFiles", "authoredDateTime": "2012-08-20 16:08:25"}], "created": "2012-08-09 11:53:52"}, {"labels": ["bug"], "filteredCommits": ["343cb98a1c918e3a8e9262b337388112c888c325", "a30adc9e96561dc01c2429054cad1acc1eeddc0b"], "url": "https://github.com/thinkaurelius/titan/issues/36", "gitStatsSummary": {"insertions": 26, "gitFilesChange": 5, "lines": 36, "deletions": 10}, "numCommits": 2, "commits": {"a30adc9e96561dc01c2429054cad1acc1eeddc0b": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}, "343cb98a1c918e3a8e9262b337388112c888c325": {"commitUser": "spmallette", "commitGHEventType": "referenced"}}, "ttf": 42.000277777777775, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.faunus.formats.rexster.RexsterConfiguration.getAuthenticationHeaderValue()", "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.addProperty(com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanKey,java.lang.Object)", "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.deleteVertex(com.thinkaurelius.titan.graphdb.vertices.InternalTitanVertex)", "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.verifyWriteAccess(com.thinkaurelius.titan.graphdb.transaction.TitanVertex[])", "com.thinkaurelius.faunus.formats.rexster.RexsterConfiguration", "com.thinkaurelius.faunus.formats.rexster.RexsterConfiguration.getTrueVertexCount()", "com.thinkaurelius.faunus.formats.rexster.util.HttpHelper.createConnection(java.lang.String,java.lang.String)", "com.thinkaurelius.faunus.formats.rexster.RexsterRecordReader.openRexsterStream()", "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.addEdge(com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanLabel)"], "changesInPackagesGIT": ["src/main/java/com/thinkaurelius/titan/graphdb/transaction", "src/main/java/com/thinkaurelius/faunus/formats/rexster", "src/main/java/com/thinkaurelius/faunus/formats/rexster/util", "bin/rexster-input.properties"], "body": "", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 9, "UPD": 0, "TOT": 13, "DEL": 0, "INS": 13, "spoonFilesChanged": 4, "MOV": 0}, "title": "Throw exception when adding edge to vertex from previous transaction", "statsSkippedReason": "", "closed": "2012-08-21 00:52:43", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2012-08-20 16:57:21", "commitHash": "a30adc9e96561dc01c2429054cad1acc1eeddc0b", "commitParents": ["99d0fe408262931e0a936d850deafa101862a483"], "commitGHEventType": "closed", "nameRev": "a30adc9e96561dc01c2429054cad1acc1eeddc0b tags/0.1.0~49", "commitGitStats": [{"insertions": 8, "lines": 12, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/AbstractTitanTx.java", "deletions": 4}, {"insertions": 23, "lines": 23, "filePath": "src/test/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 13, "DEL": 0, "INS": 13, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testTransaction()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.addProperty(com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanKey,java.lang.Object)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.deleteVertex(com.thinkaurelius.titan.graphdb.vertices.InternalTitanVertex)"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.verifyWriteAccess(com.thinkaurelius.titan.graphdb.transaction.TitanVertex[])"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.addEdge(com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanVertex,com.thinkaurelius.titan.graphdb.transaction.TitanLabel)"}], "spoonFilePath": "AbstractTitanTx.java"}], "commitMessage": "Added additional precondition checks to verify that vertices cannot be accessed outside their transactional contexts. Fixes #36.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-08-20 16:57:21"}, {"commitUser": "spmallette", "commitDateTime": "2013-02-04 10:57:10", "commitHash": "343cb98a1c918e3a8e9262b337388112c888c325", "commitParents": ["5b7e1ce4b1f7cdb54ca530bb0751cdcfba5c8d09"], "commitGHEventType": "referenced", "nameRev": "343cb98a1c918e3a8e9262b337388112c888c325 tags/0.5.0-M1~62^2~16^2~20^2~191", "commitGitStats": [{"insertions": 2, "lines": 5, "filePath": "src/main/java/com/thinkaurelius/faunus/formats/rexster/util/HttpHelper.java", "deletions": 3}, {"insertions": 2, "lines": 3, "filePath": "src/main/java/com/thinkaurelius/faunus/formats/rexster/RexsterRecordReader.java", "deletions": 1}, {"insertions": 11, "lines": 12, "filePath": "src/main/java/com/thinkaurelius/faunus/formats/rexster/RexsterConfiguration.java", "deletions": 1}, {"insertions": 3, "lines": 4, "filePath": "bin/rexster-input.properties", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.faunus.formats.rexster.util.HttpHelper.createConnection(java.lang.String,java.lang.String)"}], "spoonFilePath": "HttpHelper.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.faunus.formats.rexster.RexsterConfiguration"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.faunus.formats.rexster.RexsterConfiguration.getAuthenticationHeaderValue()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.faunus.formats.rexster.RexsterConfiguration.getTrueVertexCount()"}], "spoonFilePath": "RexsterConfiguration.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.faunus.formats.rexster.RexsterRecordReader.openRexsterStream()"}], "spoonFilePath": "RexsterRecordReader.java"}], "commitMessage": "Added rexster authentication option. #36\n\nNow faunus can authenticate if rexster security is turned on.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-02-04 10:57:10"}], "created": "2012-07-09 06:49:16"}, {"labels": ["bug"], "url": "https://github.com/thinkaurelius/titan/issues/33", "title": "Update to support setProperty() fluent style in 2.1-SNAPSHOT", "closed": "2012-07-11 15:59:44", "commitsDetails": [], "commits": {}, "ttf": 6.000277777777778, "created": "2012-07-04 22:21:49", "user": "okram", "body": ""}, {"labels": ["bug"], "filteredCommits": ["41c11539fdf9dc0012bf3095989ebf8dfb91023a"], "url": "https://github.com/thinkaurelius/titan/issues/28", "gitStatsSummary": {"insertions": 3, "gitFilesChange": 1, "lines": 10, "deletions": 7}, "numCommits": 1, "commits": {"41c11539fdf9dc0012bf3095989ebf8dfb91023a": {"commitUser": "mbroecheler", "commitGHEventType": "referenced"}, "bc1e73742882df152df3fc4e41ab3a90754e1292": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "dbxfb", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.abort()", "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.commit()"], "changesInPackagesGIT": ["src/main/java/com/thinkaurelius/titan/graphdb/transaction"], "body": "Hi !\n\nI am currently trying Titan out (snapshot 0.1), and I can't commit any transactions I make.\nMy code goes like this:\n\n```\n    TitanTransaction t = g.startThreadTransaction();\n    [getType for TitanKeys and TitanLabels]\n    [adding vertices and edges]\n    t.stopTransaction(Conclusion.SUCCESS);\n\n(i've also tried t.commit(), in vain)\n```\n\nin the end I always get the following:\n\nERROR ContainerResponse - The RuntimeException could not be mapped to a response, re-throwing to the HTTP container\njava.lang.NullPointerException\n    at com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.isDeletedRelation(StandardPersistTitanTx.java:64)\n    at com.thinkaurelius.titan.graphdb.relations.factory.RelationFactoryUtil.connectRelation(RelationFactoryUtil.java:15)\n    at com.thinkaurelius.titan.graphdb.relations.factory.StandardPersistedRelationFactory.createExistingProperty(StandardPersistedRelationFactory.java:41)\n    at com.thinkaurelius.titan.graphdb.types.manager.StandardTypeFactory.createExistingType(StandardTypeFactory.java:37)\n    at com.thinkaurelius.titan.graphdb.types.manager.SimpleTypeManager.getType(SimpleTypeManager.java:149)\n    at com.thinkaurelius.titan.graphdb.types.manager.SimpleTypeManager.getType(SimpleTypeManager.java:168)\n    at com.thinkaurelius.titan.graphdb.transaction.AbstractTitanTx.getType(AbstractTitanTx.java:247)\n    at com.thinkaurelius.titan.graphdb.database.util.TypeSignature.parseTypes(TypeSignature.java:41)\n    at com.thinkaurelius.titan.graphdb.database.util.TypeSignature.<init>(TypeSignature.java:26)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getSignature(StandardTitanGraph.java:856)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getEntry(StandardTitanGraph.java:761)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.getEntry(StandardTitanGraph.java:703)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.persist(StandardTitanGraph.java:689)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.save(StandardTitanGraph.java:642)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.commit(StandardPersistTitanTx.java:171)\n    at com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsTransaction.stopTransaction(TitanBlueprintsTransaction.java:30)\n\nI am using a Cassandra backend, and had no problem creating types etc., although each time I try to use a transaction it gives me this error.\n\nAfter looking at both stack trace and source, I think the NPE is caused by the \" deletedEdges = null; \" line before calling graphdb.save(...), in the TitanTransaction.commit() method. (although I only took a quick look so you might prove me wrong here).\n\nThanks for your time :)\n(Please do not hesitate to ask for more details if I omitted important informations)\n", "filteredCommitsReason": {"duplicated": 1, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 10, "DEL": 6, "INS": 0, "spoonFilesChanged": 1, "MOV": 4}, "title": "NPE on transaction commit", "statsSkippedReason": "", "closed": "2012-06-23 00:18:22", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2012-06-22 16:51:19", "commitHash": "41c11539fdf9dc0012bf3095989ebf8dfb91023a", "commitParents": ["dfa482899dc5f4461457b5999de97afb7c285895"], "commitGHEventType": "referenced", "nameRev": "41c11539fdf9dc0012bf3095989ebf8dfb91023a tags/0.1.0~82^2^2~4", "commitGitStats": [{"insertions": 3, "lines": 3, "filePath": "src/test/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 0}, {"insertions": 3, "lines": 10, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardPersistTitanTx.java", "deletions": 7}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.abort()"}, {"UPD": 0, "TOT": 9, "DEL": 6, "INS": 0, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.commit()"}], "spoonFilePath": "StandardPersistTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testCreateDelete()"}], "spoonFilePath": "TitanGraphTest.java"}], "commitMessage": "Transaction buffers were deleted prematurely - under certain circumstances further transaction retrievals are needed during persistence. Added unit test which replicates #28. Fixes #28.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-06-22 16:51:19"}, {"commitUser": "mbroecheler", "commitDateTime": "2012-06-22 16:56:11", "commitHash": "bc1e73742882df152df3fc4e41ab3a90754e1292", "commitParents": ["303302d24decb75524a30f794f77e8b36f23d903"], "commitGHEventType": "closed", "nameRev": "bc1e73742882df152df3fc4e41ab3a90754e1292 tags/0.1.0~102", "commitGitStats": [{"insertions": 3, "lines": 3, "filePath": "src/test/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 0}, {"insertions": 3, "lines": 10, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/transaction/StandardPersistTitanTx.java", "deletions": 7}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.abort()"}, {"UPD": 0, "TOT": 9, "DEL": 6, "INS": 0, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.commit()"}], "spoonFilePath": "StandardPersistTitanTx.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testCreateDelete()"}], "spoonFilePath": "TitanGraphTest.java"}], "commitMessage": "Transaction buffers were deleted prematurely - under certain circumstances further transaction retrievals are needed during persistence. Added unit test which replicates #28. Fixes #28.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-06-22 16:51:19"}], "created": "2012-06-22 16:23:44"}, {"labels": ["bug"], "filteredCommits": ["6e5ccd4a2dcd59a5cf400e9e43892d3fea4847d4"], "url": "https://github.com/thinkaurelius/titan/issues/20", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"6e5ccd4a2dcd59a5cf400e9e43892d3fea4847d4": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "okram", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsTransaction.getIndexedKeys(java.lang.Class)"], "changesInPackagesGIT": ["src/main/java/com/thinkaurelius/titan/graphdb/blueprints"], "body": "This happens on a fresh instance of Cassandra and BerekeleyDB. Stack trace is after examples below.\n\ngremlin> g = TitanFactory.open('target/testdb') \n==>standardtitangraph[local]\ngremlin> g.getIndexedKeys()  \njava.lang.NullPointerException\nDisplay stack trace? [yN] \ngremlin> g.createKeyIndex('name',Vertex.class)\n==>null\ngremlin> g.getIndexedKeys()  \njava.lang.NullPointerException\nDisplay stack trace? [yN] \ngremlin> g.stopTransaction(SUCCESS)\n==>null\ngremlin> g.getIndexedKeys()  \njava.lang.NullPointerException\nDisplay stack trace? [yN] \n\n---\n\n... create with BasicConfiguration to Cassandra.\ngremlin> g.getIndexedKeys()\njava.lang.NullPointerException\nDisplay stack trace? [yN] y\njava.lang.NullPointerException\n    at com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsTransaction.getIndexedKeys(TitanBlueprintsTransaction.java:125)\n    at com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsGraph.getIndexedKeys(TitanBlueprintsGraph.java:95)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoCachedMethodSite.invoke(PojoMetaMethodSite.java:189)\n    at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:53)\n    at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:112)\n    at groovysh_evaluate.run(groovysh_evaluate:39)\n    at groovysh_evaluate$run.call(Unknown Source)\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 1}, "title": "g.getIndexedKeys() throws NPE", "statsSkippedReason": "", "closed": "2012-06-08 08:42:41", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2012-06-07 18:45:30", "commitHash": "6e5ccd4a2dcd59a5cf400e9e43892d3fea4847d4", "commitParents": ["f794ac462ae55bb86e6b05c6e23921dbadad9b23"], "commitGHEventType": "closed", "nameRev": "6e5ccd4a2dcd59a5cf400e9e43892d3fea4847d4 tags/0.1-alpha~13", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/blueprints/TitanBlueprintsTransaction.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.blueprints.TitanBlueprintsTransaction.getIndexedKeys(java.lang.Class)"}], "spoonFilePath": "TitanBlueprintsTransaction.java"}], "commitMessage": "Fixed NPE getKeyIndexes. Fixes #20.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-06-07 18:45:30"}], "created": "2012-06-07 13:29:26"}, {"labels": ["bug"], "filteredCommits": ["995bcb422f0002c02ffa0d9a0a42b840275fa0f6"], "url": "https://github.com/thinkaurelius/titan/issues/17", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"995bcb422f0002c02ffa0d9a0a42b840275fa0f6": {"commitUser": "dalaro", "commitGHEventType": "closed"}}, "ttf": 16.00027777777778, "user": "spmallette", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.cassandra.CassandraThriftStorageManager.close()"], "changesInPackagesGIT": ["src/main/java/com/thinkaurelius/titan/diskstorage/cassandra"], "body": "I'm not sure if this is a problem or not.  it is an off-case for sure which likely wouldn't happen in the real-world, but during testing and tearing stuff down it's an irritant and i'm not sure if it's not going to manifest as a problem somewhere else so...\n\n``` text\ngremlin> conf = new BaseConfiguration()\n==>org.apache.commons.configuration.BaseConfiguration@301abf87\ngremlin> conf.setProperty(\"storage.backend\", \"cassandra\")\n==>null\ngremlin> conf.setProperty(\"storage.hostname\", \"127.0.0.1\")\n==>null\ngremlin> g = TitanFactory.open(conf)\n==>standardtitangraph[cassandra]\ngremlin> g.createKeyIndex(\"someid\", Vertex.class)\n==>null\ngremlin> g.stopTransaction(SUCCESS)\n==>null\ngremlin> v = g.addVertex(null)\n==>v[4]\ngremlin> v.setProperty(\"someid\", 123)\n==>null\ngremlin> g.stopTransaction(SUCCESS)\n==>null\ngremlin> g.shutdown()\n==>null\n\n-- stop and restart cassandra\n\ngremlin> g = TitanFactory.open(conf)\n==>standardtitangraph[cassandra]\ngremlin> g.shutdown()\n==>null\n\n-- stop cassandra, delete the cassandra related data directories and restart cassandra\n\ngremlin> g = TitanFactory.open(conf)\nException in storage backend.\nDisplay stack trace? [yN] y\ncom.thinkaurelius.titan.core.GraphStorageException: Exception in storage backend.\n        at com.thinkaurelius.titan.diskstorage.cassandra.thriftpool.UncheckedGenericKeyedObjectPool.borrowObject(UncheckedGenericKeyedObjectPool.java:44)\n        at com.thinkaurelius.titan.diskstorage.cassandra.thriftpool.UncheckedGenericKeyedObjectPool.genericBorrowObject(UncheckedGenericKeyedObjectPool.java:74)\n        at com.thinkaurelius.titan.diskstorage.cassandra.CassandraThriftOrderedKeyColumnValueStore.getSlice(CassandraThriftOrderedKeyColumnValueStore.java:157)\n        at com.thinkaurelius.titan.diskstorage.cassandra.CassandraThriftOrderedKeyColumnValueStore.getSlice(CassandraThriftOrderedKeyColumnValueStore.java:192)\n        at com.thinkaurelius.titan.diskstorage.util.OrderedKeyColumnValueIDManager.getIDBlock(OrderedKeyColumnValueIDManager.java:68)\n        at com.thinkaurelius.titan.diskstorage.cassandra.CassandraThriftStorageManager.getIDBlock(CassandraThriftStorageManager.java:208)\n        at com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.renewBuffer(StandardIDPool.java:73)\n        at com.thinkaurelius.titan.graphdb.database.idassigner.StandardIDPool.<init>(StandardIDPool.java:42)\n        at com.thinkaurelius.titan.graphdb.database.idassigner.SimpleVertexIDAssigner.<init>(SimpleVertexIDAssigner.java:42)\n        at com.thinkaurelius.titan.graphdb.configuration.GraphDatabaseConfiguration.getIDAssigner(GraphDatabaseConfiguration.java:308)\n        at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.<init>(StandardTitanGraph.java:83)\n        at com.thinkaurelius.titan.core.TitanFactory.open(TitanFactory.java:60)\n        at com.thinkaurelius.titan.core.TitanFactory$open.call(Unknown Source)\n        at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n        at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)\n        at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)\n        at groovysh_evaluate.run(groovysh_evaluate:39)\n        at groovysh_evaluate$run.call(Unknown Source)\n        at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:42)\n        at groovysh_evaluate$run.call(Unknown Source)\n        at org.codehaus.groovy.tools.shell.Interpreter.evaluate(Interpreter.groovy:67)\n        at org.codehaus.groovy.tools.shell.Interpreter$evaluate.call(Unknown Source)\n        at org.codehaus.groovy.tools.shell.Groovysh.execute(Groovysh.groovy:152)\n        at org.codehaus.groovy.tools.shell.Shell.leftShift(Shell.groovy:114)\n        at org.codehaus.groovy.tools.shell.Shell$leftShift$0.call(Unknown Source)\n        at org.codehaus.groovy.tools.shell.ShellRunner.work(ShellRunner.groovy:88)\n        at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$work(InteractiveShellRunner.groovy)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n        at java.lang.reflect.Method.invoke(Unknown Source)\n        at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n        at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1047)\n        at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n        at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n        at org.codehaus.groovy.tools.shell.InteractiveShellRunner.work(InteractiveShellRunner.groovy:100)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n        at java.lang.reflect.Method.invoke(Unknown Source)\n        at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:267)\n        at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:52)\n        at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:137)\n        at org.codehaus.groovy.tools.shell.ShellRunner.run(ShellRunner.groovy:57)\n        at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$run(InteractiveShellRunner.groovy)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n        at java.lang.reflect.Method.invoke(Unknown Source)\n        at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n        at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1047)\n        at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n        at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n        at org.codehaus.groovy.tools.shell.InteractiveShellRunner.run(InteractiveShellRunner.groovy:66)\n        at com.thinkaurelius.titan.util.gremlin.Console.<init>(Console.java:52)\n        at com.thinkaurelius.titan.util.gremlin.Console.<init>(Console.java:59)\n        at com.thinkaurelius.titan.util.gremlin.Console.main(Console.java:64)\nCaused by: InvalidRequestException(why:Keyspace titan does not exist)\n        at org.apache.cassandra.thrift.Cassandra$set_keyspace_result.read(Cassandra.java:4790)\n        at org.apache.thrift.TServiceClient.receiveBase(TServiceClient.java:78)\n        at org.apache.cassandra.thrift.Cassandra$Client.recv_set_keyspace(Cassandra.java:480)\n        at org.apache.cassandra.thrift.Cassandra$Client.set_keyspace(Cassandra.java:467)\n        at com.thinkaurelius.titan.diskstorage.cassandra.thriftpool.CTConnectionFactory.makeObject(CTConnectionFactory.java:69)\n        at org.apache.commons.pool.impl.GenericKeyedObjectPool.borrowObject(GenericKeyedObjectPool.java:1190)\n        at com.thinkaurelius.titan.diskstorage.cassandra.thriftpool.UncheckedGenericKeyedObjectPool.borrowObject(UncheckedGenericKeyedObjectPool.java:42)\n        ... 58 more\ngremlin>\n```\n\nbasically, you can't reconnect to titan from the gremlin console if cassandra is reinitialized.  i find the workaround is to exit gremlin and start over again.  it doesn't seem right that gremlin should throw an error here as gremlin shouldn't care if cassandra is empty or not.  it certainly doesn't care the first time cassandra is started and gremlin is started.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 0}, "title": "Reconnecting to Titan From Gremlin", "statsSkippedReason": "", "closed": "2012-06-24 09:12:39", "commitsDetails": [{"commitUser": "dalaro", "commitDateTime": "2012-06-24 04:49:19", "commitHash": "995bcb422f0002c02ffa0d9a0a42b840275fa0f6", "commitParents": ["0d8b54a4de742f9ccbad2cd43e9c2ae9f35e6909"], "commitGHEventType": "closed", "nameRev": "995bcb422f0002c02ffa0d9a0a42b840275fa0f6 tags/0.1.0~98", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "src/main/java/com/thinkaurelius/titan/diskstorage/cassandra/CassandraThriftStorageManager.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.cassandra.CassandraThriftStorageManager.close()"}], "spoonFilePath": "CassandraThriftStorageManager.java"}], "commitMessage": "Hack to fix #17\n\nWhen Titan's Cassandra keyspace was removed by external (non-Titan)\nmeans, stale pooled Thrift connections and OKVCS objects would linger.\nThe Cassandra-Thrift backend subsequently failed to detect the absent\nkeyspace and recreate it.\n\nOn Titan systems with multiple local-lock-mediator-prefix settings,\nthis patch could potentially cause rendundant but harmless recreation\nof CassandraThriftOKCVS objects.  This configuration only appears in\ntesting.  It still wouldn't hurt to refine this behavior out.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-06-24 04:49:19"}], "created": "2012-06-07 12:24:16"}, {"labels": ["bug"], "filteredCommits": ["0a02b5352020cdf5518610bd54c004399c5308f3"], "url": "https://github.com/thinkaurelius/titan/issues/14", "gitStatsSummary": {"insertions": 59, "gitFilesChange": 2, "lines": 153, "deletions": 94}, "numCommits": 1, "commits": {"0a02b5352020cdf5518610bd54c004399c5308f3": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 84.00027777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.getColumn(java.nio.ByteBuffer)", "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.KeyColumnSliceSelector.reachedLimit()", "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.columnInRange(java.nio.ByteBuffer,java.nio.ByteBuffer,java.nio.ByteBuffer,boolean,boolean)", "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.getLength(java.nio.ByteBuffer)", "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.mutate(java.nio.ByteBuffer,java.util.List,java.util.List,com.thinkaurelius.titan.diskstorage.TransactionHandle)", "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.getSlice(java.nio.ByteBuffer,java.nio.ByteBuffer,java.nio.ByteBuffer,com.thinkaurelius.titan.diskstorage.TransactionHandle)", "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.convert(java.util.List)", "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.convertKey(java.util.List)", "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.concatenatePrefix(java.nio.ByteBuffer,java.nio.ByteBuffer)", "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.getKeyLength(java.nio.ByteBuffer)", "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.hasFixedKeyLength()", "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.KeyColumnSliceSelector.reachedCountLimit()", "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.getSlice(java.nio.ByteBuffer,java.nio.ByteBuffer,java.nio.ByteBuffer,int,com.thinkaurelius.titan.diskstorage.TransactionHandle)", "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.KeyColumnSliceSelector", "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.concatenate(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean)", "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.KeyColumnSliceSelector.include(java.nio.ByteBuffer)", "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.concatenate(java.nio.ByteBuffer,java.nio.ByteBuffer)"], "changesInPackagesGIT": ["src/main/java/com/thinkaurelius/titan/diskstorage/util"], "body": "When the blocksize is set to be anywhere in [8191,65534] the TitanGraph.createAndRetrieveComprehensive test case fails. This id range seems to indicate a problem with ids in a certain bit range for BerkeleyDB. Edges are successfully written, but retrieving them by label fails (returns an empty result set from storage backend).\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 17, "UPD": 21, "TOT": 126, "DEL": 50, "INS": 23, "spoonFilesChanged": 2, "MOV": 32}, "title": "For certain id block sizes, BerkeleyJE fails test case", "statsSkippedReason": "", "closed": "2012-08-29 22:45:22", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2012-08-29 14:41:53", "commitHash": "0a02b5352020cdf5518610bd54c004399c5308f3", "commitParents": ["5030ddbd044b915588512ef74029ca9ac3095392"], "commitGHEventType": "closed", "nameRev": "0a02b5352020cdf5518610bd54c004399c5308f3 tags/0.1.0~33", "commitGitStats": [{"insertions": 23, "lines": 100, "filePath": "src/main/java/com/thinkaurelius/titan/diskstorage/util/OrderedKeyValueStoreAdapter.java", "deletions": 77}, {"insertions": 36, "lines": 53, "filePath": "src/main/java/com/thinkaurelius/titan/diskstorage/util/KeyValueStoreAdapter.java", "deletions": 17}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 1, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.KeyColumnSliceSelector.reachedLimit()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.KeyColumnSliceSelector.reachedCountLimit()"}, {"UPD": 2, "TOT": 4, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.getSlice(java.nio.ByteBuffer,java.nio.ByteBuffer,java.nio.ByteBuffer,int,com.thinkaurelius.titan.diskstorage.TransactionHandle)"}, {"UPD": 10, "TOT": 47, "DEL": 31, "INS": 3, "MOV": 3, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.KeyColumnSliceSelector"}, {"UPD": 2, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.getSlice(java.nio.ByteBuffer,java.nio.ByteBuffer,java.nio.ByteBuffer,com.thinkaurelius.titan.diskstorage.TransactionHandle)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.convert(java.util.List)"}, {"UPD": 2, "TOT": 19, "DEL": 8, "INS": 2, "MOV": 7, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.KeyColumnSliceSelector.include(java.nio.ByteBuffer)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.OrderedKeyValueStoreAdapter.convertKey(java.util.List)"}], "spoonFilePath": "OrderedKeyValueStoreAdapter.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.getColumn(java.nio.ByteBuffer)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.concatenatePrefix(java.nio.ByteBuffer,java.nio.ByteBuffer)"}, {"UPD": 3, "TOT": 28, "DEL": 5, "INS": 1, "MOV": 19, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.concatenate(java.nio.ByteBuffer,java.nio.ByteBuffer)"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.columnInRange(java.nio.ByteBuffer,java.nio.ByteBuffer,java.nio.ByteBuffer,boolean,boolean)"}, {"UPD": 0, "TOT": 4, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.mutate(java.nio.ByteBuffer,java.util.List,java.util.List,com.thinkaurelius.titan.diskstorage.TransactionHandle)"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.getLength(java.nio.ByteBuffer)"}, {"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.getKeyLength(java.nio.ByteBuffer)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.hasFixedKeyLength()"}, {"UPD": 0, "TOT": 5, "DEL": 0, "INS": 5, "MOV": 0, "spoonMethodName": "com.thinkaurelius.titan.diskstorage.util.KeyValueStoreAdapter.concatenate(java.nio.ByteBuffer,java.nio.ByteBuffer,boolean)"}], "spoonFilePath": "KeyValueStoreAdapter.java"}], "commitMessage": "Fixed mistake in the concatenation of key-column when getting slices. Fixes #14.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-08-29 14:41:53"}], "created": "2012-06-06 02:13:41"}, {"labels": ["bug"], "filteredCommits": ["924872055980faf1f2c1545be81f247e722cc961"], "url": "https://github.com/thinkaurelius/titan/issues/10", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"924872055980faf1f2c1545be81f247e722cc961": {"commitUser": "mbroecheler", "commitGHEventType": "closed"}}, "ttf": 1.0002777777777778, "user": "mbroecheler", "changesInPackagesSPOON": ["com.thinkaurelius.titan.graphdb.query.QueryUtil.hasFirstKeyConstraint(com.thinkaurelius.titan.graphdb.query.InternalTitanQuery)"], "changesInPackagesGIT": ["src/main/java/com/thinkaurelius/titan/graphdb/query"], "body": "gremlin> hercules.outE('battled').has('time',T.gt,1).inV.name\n0\nDisplay stack trace? [yN] y\njava.lang.ArrayIndexOutOfBoundsException: 0\n    at com.thinkaurelius.titan.graphdb.query.QueryUtil.hasFirstKeyConstraint(QueryUtil.java:54)\n    at com.thinkaurelius.titan.graphdb.loadingstatus.BasicLoadingStatus.loadedEdges(BasicLoadingStatus.java:57)\n    at com.thinkaurelius.titan.graphdb.vertices.PersistStandardTitanVertex.loadedEdges(PersistStandardTitanVertex.java:58)\n    at com.thinkaurelius.titan.graphdb.database.StandardTitanGraph.loadRelations(StandardTitanGraph.java:302)\n    at com.thinkaurelius.titan.graphdb.transaction.StandardPersistTitanTx.loadRelations(StandardPersistTitanTx.java:148)\n    at com.thinkaurelius.titan.graphdb.vertices.AbstractTitanVertex.ensureLoadedEdges(AbstractTitanVertex.java:88)\n    at com.thinkaurelius.titan.graphdb.vertices.StandardTitanVertex.getRelations(StandardTitanVertex.java:61)\n    at com.thinkaurelius.titan.graphdb.query.AtomicTitanQuery.edges(AtomicTitanQuery.java:436)\n    at com.thinkaurelius.titan.graphdb.query.ComplexTitanQuery.edges(ComplexTitanQuery.java:105)\n    at com.tinkerpop.gremlin.pipes.transform.QueryPipe.processNextStart(QueryPipe.java:80)\n    at com.tinkerpop.gremlin.pipes.transform.QueryPipe.processNextStart(QueryPipe.java:23)\n    at com.tinkerpop.pipes.AbstractPipe.next(AbstractPipe.java:81)\n    at com.tinkerpop.pipes.transform.IdentityPipe.processNextStart(IdentityPipe.java:20)\n    at com.tinkerpop.pipes.AbstractPipe.next(AbstractPipe.java:81)\n    at com.tinkerpop.gremlin.pipes.transform.EdgesVerticesPipe.processNextStart(EdgesVerticesPipe.java:37)\n    at com.tinkerpop.gremlin.pipes.transform.EdgesVerticesPipe.processNextStart(EdgesVerticesPipe.java:12)\n    at com.tinkerpop.pipes.AbstractPipe.next(AbstractPipe.java:81)\n    at com.tinkerpop.gremlin.pipes.transform.PropertyPipe.processNextStart(PropertyPipe.java:29)\n    at com.tinkerpop.pipes.AbstractPipe.hasNext(AbstractPipe.java:90)\n    at com.tinkerpop.pipes.util.Pipeline.hasNext(Pipeline.java:105)\n    at com.tinkerpop.gremlin.groovy.console.ResultHookClosure.call(ResultHookClosure.java:38)\n    at groovy.lang.Closure.call(Closure.java:425)\n    at sun.reflect.GeneratedMethodAccessor22.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSite.invoke(PogoMetaMethodSite.java:226)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.call(PogoMetaMethodSite.java:64)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)\n    at org.codehaus.groovy.tools.shell.Groovysh.setLastResult(Groovysh.groovy:324)\n    at org.codehaus.groovy.tools.shell.Groovysh.this$3$setLastResult(Groovysh.groovy)\n    at sun.reflect.GeneratedMethodAccessor21.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.setProperty(MetaClassImpl.java:2384)\n    at groovy.lang.MetaClassImpl.setProperty(MetaClassImpl.java:3312)\n    at org.codehaus.groovy.tools.shell.Shell.setProperty(Shell.groovy)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.setGroovyObjectProperty(ScriptBytecodeAdapter.java:528)\n    at org.codehaus.groovy.tools.shell.Groovysh.execute(Groovysh.groovy:152)\n    at org.codehaus.groovy.tools.shell.Shell.leftShift(Shell.groovy:114)\n    at org.codehaus.groovy.tools.shell.Shell$leftShift$0.call(Unknown Source)\n    at org.codehaus.groovy.tools.shell.ShellRunner.work(ShellRunner.groovy:88)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$work(InteractiveShellRunner.groovy)\n    at sun.reflect.GeneratedMethodAccessor37.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1047)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.work(InteractiveShellRunner.groovy:100)\n    at sun.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:267)\n    at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:52)\n    at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:137)\n    at org.codehaus.groovy.tools.shell.ShellRunner.run(ShellRunner.groovy:57)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.super$2$run(InteractiveShellRunner.groovy)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:90)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:233)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1047)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:128)\n    at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuper0(ScriptBytecodeAdapter.java:148)\n    at org.codehaus.groovy.tools.shell.InteractiveShellRunner.run(InteractiveShellRunner.groovy:66)\n    at com.tinkerpop.gremlin.groovy.console.Console.<init>(Console.java:50)\n    at com.tinkerpop.gremlin.groovy.console.Console.<init>(Console.java:57)\n    at com.tinkerpop.gremlin.groovy.console.Console.main(Console.java:62)\ngremlin> \n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 1}, "title": "One sided query constraints causes exception", "statsSkippedReason": "", "closed": "2012-06-07 06:20:55", "commitsDetails": [{"commitUser": "mbroecheler", "commitDateTime": "2012-06-06 23:20:50", "commitHash": "924872055980faf1f2c1545be81f247e722cc961", "commitParents": ["4bb50eed4955f432a43b0a5b60ed6357ba14f004"], "commitGHEventType": "closed", "nameRev": "924872055980faf1f2c1545be81f247e722cc961 tags/0.1-alpha~18", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "src/main/java/com/thinkaurelius/titan/graphdb/query/QueryUtil.java", "deletions": 1}, {"insertions": 10, "lines": 16, "filePath": "src/test/java/com/thinkaurelius/titan/graphdb/TitanGraphTest.java", "deletions": 6}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 5, "DEL": 0, "INS": 4, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.TitanGraphTest.testQuery()"}], "spoonFilePath": "TitanGraphTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "com.thinkaurelius.titan.graphdb.query.QueryUtil.hasFirstKeyConstraint(com.thinkaurelius.titan.graphdb.query.InternalTitanQuery)"}], "spoonFilePath": "QueryUtil.java"}], "commitMessage": "Fixes #10 and adds test case\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-06-06 23:20:50"}], "created": "2012-06-06 02:01:50"}], "captureTime": "Mon Jul  6 15:15:35 2020", "projectName": "thinkaurelius/titan"}