{"projectName": "grpc/grpc-java", "bugLabels": ["End-to-end bugs", "Type: Bug", "api-breaking", "bug"], "captureTime": "Sat Jul  4 20:34:12 2020", "issues": [{"title": "Server does not send initial metadata on a stream with no messages", "body": "The [gRPC wire spec](http://www.grpc.io/docs/guides/wire.html#responses) says:\r\n\r\n> Most responses are expected to have both headers and trailers but Trailers-Only is permitted for calls that produce an immediate error. \r\n\r\nHowever, the only time that headers are sent by a Java server is in when `onNext()` is called (see [ServerCalls.java#L282]( https://github.com/grpc/grpc-java/blob/e67b6027afd57e8984d432f7a0ed68b46ffea00a/stub/src/main/java/io/grpc/stub/ServerCalls.java#L282)). This means that a stream where the server's behavior should be to send initial and trailing metadata (i.e., close the stream with no outbound messages), instead gRPC sends out a Trailers-Only response, skipping any initial metadata.\r\n\r\nThis popped up on the existing interop tests when PHP and Node were not setting the `response_parameters` field in the [`custom_metadata`](https://github.com/grpc/grpc/blob/master/doc/interop-test-descriptions.md#custom_metadata) interop test. See https://github.com/grpc/grpc/commit/ced8702d1d184fe83bbdcdfc97868a9f94868986. These tests are now passing since the test spec says to set the `response_parameters` field, and so the interop server calls `onNext()` to send the appropriate response(s).\r\n\r\nBut, if the wire spec's statement should be interpreted as Trailers-Only should only be sent for calls with an immediate error, this is a bug in Java's implementation. Even if Trailers-Only is a legal response even without errors, it seems like the Trailers-Only message should include any header metadata.\r\n\r\nIt seems to fix things to add the following check to `ServerCalls$ServerCallStreamObserverImpl#onCompleted()`, but I haven't tested this extensively enough to be sure this doesn't cause problems elsewhere:\r\n\r\n```\r\n    @Override\r\n    public void onCompleted() {\r\n       if (cancelled) {\r\n         throw Status.CANCELLED.asRuntimeException();\r\n       } else {\r\n+        if (!sentHeaders) {\r\n+          call.sendHeaders(new Metadata());\r\n+          sentHeaders = true;\r\n+        }\r\n         call.close(Status.OK, new Metadata());\r\n       }\r\n    }\r\n```", "url": "https://github.com/grpc/grpc-java/issues/2770", "user": "ericgribkoff", "labels": ["End-to-end bugs"], "created": "2017-02-28 18:00:43", "closed": "2017-03-26 21:55:47", "commits": {}, "ttf": 26.00027777777778, "commitsDetails": []}, {"title": "OkHttp: INTERNAL: Flow control error Rst Stream", "body": "Our android-interop test failed: https://source.cloud.google.com/results/invocations/ed2d6385-7608-437e-84ed-f8e34cdb35f7/log\r\n\r\n```\r\njunit.framework.ComparisonFailure: very_large_request failed expected:<[Failed... : INTERNAL: Flow control error\r\nRst Stream\r\nio.grpc.StatusRuntimeException: INTERNAL: Flow control error\r\nRst Stream\r\n  at io.grpc.stub.ClientCalls.toStatusRuntimeException(ClientCalls.java:233)\r\n  at io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:214)\r\n  at io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:139)\r\n  at io.grpc.testing.integration.TestServiceGrpc$TestServiceBlockingStub.unaryCall(TestServiceGrpc.java:624)\r\n  at io.grpc.testing.integration.AbstractInteropTest.veryLargeRequest(AbstractInteropTest.java:959)\r\n  at io.grpc.android.integrationtest.InteropTask.runTest(InteropTask.java:113)\r\n  at io.grpc.android.integrationtest.InteropTask.doInBackground(InteropTask.java:62)\r\n  at io.grpc.android.integrationtest.InteropTask.doInBackground(InteropTask.java:31)\r\n  at android.os.AsyncTask$2.call(AsyncTask.java:305)\r\n  at java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n  at android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:243)\r\n  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)\r\n  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:636)\r\n  at java.lang.Thread.run(Thread.java:764)\r\n]> but was:<[Success!]>\r\n  at junit.framework.Assert.assertEquals(Assert.java:85)\r\n  at io.grpc.android.integrationtest.InteropInstrumentationTest.runTest(InteropInstrumentationTest.java:134)\r\n  at io.grpc.android.integrationtest.InteropInstrumentationTest.interopTests(InteropInstrumentationTest.java:99)\r\n  at java.lang.reflect.Method.invoke(Native Method)\r\n  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n  snip\r\n```\r\n\r\nNote that the \"expected\" and \"actual\" appear reversed in the code, so ignore that \"problem\" in the message:\r\n```\r\nassertEquals(testCase + \" failed\", result, InteropTask.SUCCESS_MESSAGE);\r\n```\r\n\r\n\"Flow control error\" seems to be caused by a [ErrorCode.FLOW_CONTROL_ERROR](https://github.com/grpc/grpc-java/blob/30a4bfb2f0d1daf38d3b59e633f300b8edba9faf/okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java#L116), via a RST_STREAM. That should never happen in proper operation. This seems highly likely a bug, somewhere. \r\n\r\n@ericgribkoff, what server are we using in this test?", "url": "https://github.com/grpc/grpc-java/issues/4809", "user": "ejona86", "labels": ["Type: Bug"], "created": "2018-08-28 23:52:06", "closed": "2018-09-06 22:52:03", "commits": {"554210da2a9199c7c8e0ea3613a32e9d71d57031": {"commitGHEventType": "referenced", "commitUser": "creamsoup"}, "8f92600956e2b37094131d95d516dd5966607a94": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 8.000277777777777, "commitsDetails": [{"commitHash": "554210da2a9199c7c8e0ea3613a32e9d71d57031", "commitGHEventType": "referenced", "commitUser": "creamsoup", "commitParents": ["2fca42feb93f1bda1a80f6649d1e6304e9a67b08"], "nameRev": "554210da2a9199c7c8e0ea3613a32e9d71d57031 tags/v1.16.0~60", "commitMessage": "okhttp: settings acks back after apply settings before sending any data (#4825)\n\nokhttp: setting acks back after apply settings before sending any data as a result of the change.\r\nResolves #4809 also, make #4816 the not flaky.", "commitDateTime": "2018-09-06 15:52:02", "authoredDateTime": "2018-09-06 15:52:02", "commitGitStats": [{"filePath": "okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java", "insertions": 12, "deletions": 3, "lines": 15}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/OutboundFlowController.java", "insertions": 12, "deletions": 7, "lines": 19}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java", "insertions": 36, "deletions": 0, "lines": 36}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OkHttpClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransport.ClientFrameHandler.settings(boolean,io.grpc.okhttp.internal.framed.Settings)", "TOT": 5, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "OutboundFlowController.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OutboundFlowController.initialOutboundWindowSize(int)", "TOT": 4, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.okhttp.OutboundFlowController.writeStreams()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "OkHttpClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransportTest.outboundFlowControlWithInitialWindowSizeChangeInMiddleOfStream()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "8f92600956e2b37094131d95d516dd5966607a94", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["c3e3cf5c780af758f3e9bba021d2464c257e1d32"], "nameRev": "8f92600956e2b37094131d95d516dd5966607a94 tags/v1.15.1~3", "commitMessage": "okhttp: settings acks back after apply settings before sending any data (#4825)\n\nokhttp: setting acks back after apply settings before sending any data as a result of the change.\r\nResolves #4809 also, make #4816 the not flaky.", "commitDateTime": "2018-09-11 13:43:18", "authoredDateTime": "2018-09-06 15:52:02", "commitGitStats": [{"filePath": "okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java", "insertions": 12, "deletions": 3, "lines": 15}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/OutboundFlowController.java", "insertions": 12, "deletions": 7, "lines": 19}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java", "insertions": 36, "deletions": 0, "lines": 36}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OkHttpClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransport.ClientFrameHandler.settings(boolean,io.grpc.okhttp.internal.framed.Settings)", "TOT": 5, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "OutboundFlowController.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OutboundFlowController.initialOutboundWindowSize(int)", "TOT": 4, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.okhttp.OutboundFlowController.writeStreams()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "OkHttpClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransportTest.outboundFlowControlWithInitialWindowSizeChangeInMiddleOfStream()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "ClientCall.cancel is not required to be implemented", "body": "https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/ClientCall.java#L212\n\nThis is an oversight based on how we changed the arguments. We should remove the default implementation for 1.0\n", "url": "https://github.com/grpc/grpc-java/issues/2050", "user": "ejona86", "labels": ["api-breaking"], "created": "2016-07-15 22:39:28", "closed": "2016-07-25 16:51:19", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "Mark ServerCalls, MethodDescriptor.create, MethodDescriptor.Marshaller and a few others ExperimentalApi", "body": "These are generally used by the generated code. There are some plans for doing Android-driven performance work on the generated code, and there are some options being discussed that would impact these APIs.\n\nFor beta, we've agreed that it is fine for generated code to depend on ExperimentalApi. For GA, that will not be allowed to be the case.\n", "url": "https://github.com/grpc/grpc-java/issues/975", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-09-08 22:56:51", "closed": "2015-09-11 18:14:44", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Replace use of ExecutorService with Executor in builders", "body": "@ejona86 \nWe don't depend on ExecutorService so we can downgrade the requirement here.\n", "url": "https://github.com/grpc/grpc-java/issues/937", "user": "louiscryan", "labels": ["api-breaking"], "created": "2015-09-03 18:38:33", "closed": "2015-09-03 21:44:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Move io.grpc.stub.StreamRecorder to testing package", "body": "It really is only used in testing. I'm not wild about the class in general, but reducing its usage to tests addresses the primary concerns.\n", "url": "https://github.com/grpc/grpc-java/issues/899", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-08-28 23:06:53", "closed": "2015-09-01 16:45:44", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Add authority to HandlerRegistry.lookupMethod", "body": "It should be possible to do virtual hosting; that requires authority. It would just be an additional string to lookupMethod (presumably as the first parameter).\n", "url": "https://github.com/grpc/grpc-java/issues/898", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-08-28 23:05:31", "closed": "2015-09-03 22:03:25", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Trash HandlerRegistry.Method", "body": "We only need the `ServerMethodDefinition`. `ServerServiceDefinition` requires a list of all contained methods, which would make it painful for proxies. So lookup should just return the method definition.\n", "url": "https://github.com/grpc/grpc-java/issues/897", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-08-28 23:04:26", "closed": "2015-09-03 20:50:07", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Mark generated MethodDescriptors @ExperimentalAPI", "body": "For Android, we may want to lazy-create MethodDescriptors in order to prevent cascading of static initializations of all dependent protos for all methods. That would mean making accessor methods instead of static fields.\n", "url": "https://github.com/grpc/grpc-java/issues/895", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-08-28 22:52:55", "closed": "2015-08-31 18:21:22", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Determine API stability story for Android", "body": "For Android, we are considering alternative transport implementations, for example, Cronet. That would imply we may not support OkHttp in the future. We need to be able to communicate the API stability of OkHttp's presence.\n\nOne possibility is that we have an Android-specific class that is able to choose the \"correct\" transport to use on Android. We would have to communicate that using OkHttp directly would not be API stable.\n", "url": "https://github.com/grpc/grpc-java/issues/871", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-08-25 19:28:17", "closed": "2015-09-03 23:24:09", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "{Channel,Server}.awaitTerminated should wait for application to complete processing", "body": "As we discussed, we were going to have `awaitTerminated()` wait until all application notifications execute. We can achieve that by tracking number of unclosed calls (clientcall or servercall): when creating a new call register it, and after the application listener's close is called de-register it. In awaitTerminated it would wait for the registrations to become empty/zero.\n", "url": "https://github.com/grpc/grpc-java/issues/854", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-08-21 18:52:23", "closed": "2015-09-03 21:26:41", "commits": {}, "ttf": 13.000277777777777, "commitsDetails": []}, {"title": "Mark Compression API @Experimental", "body": "Some pieces of compression are already checked in to master. There is a question if they will be api-stable in time for beta. We need to do something with what is checked in to release. Determining whether that is revert the changes or mark the API as `@Experimental` is the point of this issue.\n", "url": "https://github.com/grpc/grpc-java/issues/838", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-08-19 17:41:14", "closed": "2015-08-26 20:27:29", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Make interceptors an abstract class?", "body": "They are an interface today. We can add other interfaces later, but would need instanceof checking in `ClientInterceptors`/`ServerInterceptors` to enable features.\n", "url": "https://github.com/grpc/grpc-java/issues/821", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-08-17 18:09:32", "closed": "2015-08-26 17:27:39", "commits": {}, "ttf": 8.000277777777777, "commitsDetails": []}, {"title": "Discuss StreamObserver", "body": "abstract class?\nrename to Observer/do we are how closely it matches RxJava?\nonValue -> onNext?\n\njust depend on RxJava for stub?\n", "url": "https://github.com/grpc/grpc-java/issues/799", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-08-12 17:48:32", "closed": "2015-09-01 20:08:33", "commits": {}, "ttf": 20.00027777777778, "commitsDetails": []}, {"title": "Remove  Status.OperationRuntimeException and Status.OperationException", "body": "These are deprecated in favor of StatusException and StatusRuntimeException\n", "url": "https://github.com/grpc/grpc-java/issues/750", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:57:39", "closed": "2015-08-06 20:09:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make ServerServiceDefinition.getMethod private", "body": "This method was only intended for internal use.  ServerServiceDefinition.getMethods should be used instead.\n", "url": "https://github.com/grpc/grpc-java/issues/749", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:56:56", "closed": "2015-08-06 22:28:16", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ServerImpl.awaitTerminated should be renamed awaitTermination", "body": "This is the same as the change in #735\n", "url": "https://github.com/grpc/grpc-java/issues/746", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:52:49", "closed": "2015-08-06 20:53:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Maybe remove Server and rename ServerImpl", "body": "It may be worth keeping Server as a base to ServerImpl (in order to add methods later on like getServerAddress)\n\nThis was a contentious issue, but needs to be resolved before going beta. \n", "url": "https://github.com/grpc/grpc-java/issues/745", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:51:32", "closed": "2015-08-26 17:31:55", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "SerializingExecutor should be moved to be internal", "body": "", "url": "https://github.com/grpc/grpc-java/issues/744", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:50:06", "closed": "2015-08-10 22:57:23", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Remove second MethodDescriptor.create method", "body": "currently there are two methods, one that takes the fully qualified name and one that takes the service and method name.  Since the rest of core is using the fully qualified name, the second create method doesn't need to be part of our API.  (and can be easily added back if there is demand).\n", "url": "https://github.com/grpc/grpc-java/issues/743", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:48:44", "closed": "2015-08-20 21:29:25", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "Metadata.Key.asciiName should be private", "body": "Because the returned value is mutable, it should be limited to being modified by our own code.\n", "url": "https://github.com/grpc/grpc-java/issues/742", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:43:36", "closed": "2015-08-10 19:28:18", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Deprecated inner classes of ClientInterceptor should be removed ", "body": "", "url": "https://github.com/grpc/grpc-java/issues/738", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:25:07", "closed": "2015-08-06 20:51:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Remove ChannelImpl.ping (or possible mark it experimental)", "body": "It isn't clear that ping will be part of the long term gRPC interface (and is easy to add back in later if needed).  Either remove it or mark it experimental.\n", "url": "https://github.com/grpc/grpc-java/issues/737", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:19:22", "closed": "2015-08-12 22:06:26", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "ChannelImpl.TIMEOUT_KEY should be private ", "body": "Possibly moved to the internal package.\n", "url": "https://github.com/grpc/grpc-java/issues/736", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:18:25", "closed": "2015-08-21 23:52:14", "commits": {}, "ttf": 15.000277777777777, "commitsDetails": []}, {"title": "ChannelImpl.awaitTerminated should be renamed awaitTermination", "body": "This makes it make the spelling of ExecutorService shutdown methods.\n", "url": "https://github.com/grpc/grpc-java/issues/735", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:17:48", "closed": "2015-08-06 20:53:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Deprecated Channel.newCall should be deleted ", "body": "Clients should use the non deprecated sibling newCall.\n", "url": "https://github.com/grpc/grpc-java/issues/734", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:16:46", "closed": "2015-08-13 20:25:04", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Add \"set\" and \"add\" method prefixes to AbstractChannelBuilder (e.g. addInterceptor)", "body": "Our API is currently not consistent between how builders are implemented.  Considering the pervasiveness of the set, get, add, with, and other prefixed methods of Proto and the existing stubby implementations, consistency should be swing towards these style methods.\n\nAlso, AbstractServerBuilder should be changed likewise\n", "url": "https://github.com/grpc/grpc-java/issues/731", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:12:48", "closed": "2015-09-02 17:48:14", "commits": {}, "ttf": 27.00027777777778, "commitsDetails": []}, {"title": "SharedResourceHolder should be moved to the internal package", "body": "", "url": "https://github.com/grpc/grpc-java/issues/730", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 17:09:24", "closed": "2015-08-10 22:36:07", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "ServerInterceptor.interceptCall should take a method descriptor", "body": "Currently it takes the name of the method.\n", "url": "https://github.com/grpc/grpc-java/issues/729", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 16:59:10", "closed": "2015-08-07 16:34:10", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Review the generics on ServerCallHandler", "body": "Maybe add a super and extends.   The context for this issue was how would a proxy be implemented.\n", "url": "https://github.com/grpc/grpc-java/issues/728", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 16:56:49", "closed": "2015-08-27 23:23:25", "commits": {}, "ttf": 21.00027777777778, "commitsDetails": []}, {"title": "ServerCall Handler should take a method descriptor rathe than a string", "body": "", "url": "https://github.com/grpc/grpc-java/issues/726", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 16:54:48", "closed": "2015-08-07 16:32:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NanoProtoInputStream should be package private", "body": "", "url": "https://github.com/grpc/grpc-java/issues/724", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-06 16:52:28", "closed": "2015-08-06 18:13:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "AbstractChannelBuilder should be renamed AbstractChannelImplBuilder", "body": "This is to match ChannelImpl.  If ChannelImpl gets renamed in #680, it should be updated accordingly.\n", "url": "https://github.com/grpc/grpc-java/issues/715", "user": "carl-mastrangelo", "labels": ["api-breaking"], "created": "2015-08-05 23:46:34", "closed": "2015-09-01 20:09:19", "commits": {}, "ttf": 26.00027777777778, "commitsDetails": []}, {"title": "Replace Metadata.Trailers and Metadata.Headers with just Metadata", "body": "In Headers, path can be removed (just use a different MethodDescriptor; if we really need it it the future, it can be added to CallOptions) and authority can move to CallOptions. At that point, there isn't a distinction between headers and trailers and we can just have \"Metadata\".\n", "url": "https://github.com/grpc/grpc-java/issues/649", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-07-21 20:19:50", "closed": "2015-08-24 18:41:50", "commits": {}, "ttf": 33.000277777777775, "commitsDetails": []}, {"title": "ServerCall.onCancel should not be called for server-initiated close(CANCELLED)", "body": "For reasons possibly lost to history, we decided to notify the server's onCompleted after the server completed with non-OK status codes, [except for CANCELLED which notifies onCancel](https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/ServerCall.java#L151).\n\nFor whatever reason CANCELLED triggers onCancel, DEADLINE_EXCEEDED probably should as well. However, it might be good to re-discover the reason for the behavior, and maybe only call onCanel if there was an error.\n\nI don't believe we are following the documentation today. It seems [AbstractStream only triggers onCancel when an error occurs](https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/internal/AbstractServerStream.java#L200).\n", "url": "https://github.com/grpc/grpc-java/issues/639", "user": "ejona86", "labels": ["api-breaking", "docs"], "created": "2015-07-18 04:01:14", "closed": "2015-09-02 16:49:25", "commits": {}, "ttf": 46.000277777777775, "commitsDetails": []}, {"title": "Rename \"payload\" to \"message\"", "body": "Call has `onPayload` and `sendPayload`. Such things should use \"message\" instead; little sense in having different names for the entity.\n\nWe should try to maintain backward compatibility for a bit for this. We can simply make the new \"message\" versions of the methods and have the new versions call the old versions. When we remove the old version we make the methods abstract on Call.\n", "url": "https://github.com/grpc/grpc-java/issues/637", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-07-16 22:59:00", "closed": "2015-08-05 17:40:12", "commits": {}, "ttf": 19.00027777777778, "commitsDetails": []}, {"title": "Consider renaming DUPLEX_STREAMING to BIDI_STREAMING", "body": "I thought a while back it was decided to use \"bidi\" or \"bidirectional\" streaming to describe a call that has both server and client streaming. I appers C, C++, Node.js, Ruby, and PHP use \"bidi.\" It appears C# uses \"duplex.\" It appears Go did not define the concept. I couldn't find what Obj-C and Python use.\n\nWe would need to change it in `ClientCalls`, `ServerCalls`, and `MethodDescriptor.MethodType`.\n", "url": "https://github.com/grpc/grpc-java/issues/635", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-07-16 19:05:23", "closed": "2015-08-06 00:09:54", "commits": {}, "ttf": 20.00027777777778, "commitsDetails": []}, {"title": "OkHttp should use SSLSocketFactory.getDefault() by default", "body": "We should default to using TLS. Right now setting sslSocketFactory enables TLS. We should have a separate option for enabling/disabling TLS. It could easily be a boolean, but we might choose a enum to expand it later; either way.\n", "url": "https://github.com/grpc/grpc-java/issues/620", "user": "ejona86", "labels": ["api-breaking", "okhttp"], "created": "2015-07-13 19:53:17", "closed": "2015-07-22 16:16:40", "commits": {}, "ttf": 8.000277777777777, "commitsDetails": []}, {"title": "The generated Service.methods() should return a Collection", "body": "For similar reasoning to #572. Just limiting our API surface.\n", "url": "https://github.com/grpc/grpc-java/issues/573", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-06-26 23:32:29", "closed": "2015-07-09 21:29:37", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "ServerServiceDefinition.getMethods should return a Collection", "body": "Right now it has a return type of ImmutableList, which 1) requires a specific Guava implementation and 2) there is no need for order of the methods. For instance, in the current implementation we _could_ use methodLookup.values().\n\nNote that having \"Collection\" as the return type but actually returning an ImmutableList is fine though.\n\nI could be convinced that returning a List or Set is appropriate, but if we return Collection now we could actually change to using a List or Set in the future and remain API compatible (since the class is final).\n", "url": "https://github.com/grpc/grpc-java/issues/572", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-06-26 23:29:07", "closed": "2015-07-09 21:26:09", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "Are Interceptors are executed in an unintuitive order?", "body": "```\n// interceptor1 is run before interceptor2\nClientInterceptors.intercept(channel, interceptor1, interceptor2);\n\n// interceptor2 is run before interceptor1\nchannel = ClientInterceptors.intercept(channel, interceptor1);\nchannel = ClientInterceptors.intercept(channel, interceptor2);\n```\n\nThis seems like it would get really confusing if you call intercept multiple times with multiple interceptors each time:\n\n```\nchannel = ClientInterceptors.intercept(channel, interceptor2,\n                                                interceptor1);\nchannel = ClientInterceptors.intercept(channel, interceptor4,\n                                                interceptor3);\n```\n\nIt seems the first interceptor listed should most likely be the interceptor nearest the library. If there was a single mutable interceptor list then the current behavior would make more sense.\n\nNote that on server-side the application and library are reversed, so reversing the order would make the first interceptor nearest the application.\n", "url": "https://github.com/grpc/grpc-java/issues/570", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-06-26 00:18:55", "closed": "2015-07-22 22:49:18", "commits": {"3ce15b50b2d636beba84b17bcfdce5c20fea6f42": {"commitGHEventType": "closed", "commitUser": "ejona86"}}, "ttf": 26.00027777777778, "commitsDetails": [{"commitHash": "3ce15b50b2d636beba84b17bcfdce5c20fea6f42", "commitGHEventType": "closed", "commitUser": "ejona86", "commitParents": ["6ca7eb33c8af6a5b7bd52cf7a8be0b13f3a4be72"], "nameRev": "3ce15b50b2d636beba84b17bcfdce5c20fea6f42 tags/v0.8.0~80", "commitMessage": "Reverse interceptor execution order\n\nThe previous order was unintuitive as the following would execute in the\nreverse order:\n\nChannel channel;\nchannel = ClientInterceptors.intercept(channel, interceptor1,\n                                                interceptor2);\n// vs\nchannel = ClientInterceptors.intercept(channel, interceptor1);\nchannel = ClientInterceptors.intercept(channel, interceptor2);\n\nAfter this change, they have equivalent behavior. With this change,\nthere are no more per-invocation allocations and so calling 'next' twice\nis no longer prohibited.\n\nResolves #570\n", "commitDateTime": "2015-07-22 15:45:58", "authoredDateTime": "2015-07-22 14:03:29", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/ClientInterceptors.java", "insertions": 11, "deletions": 37, "lines": 48}, {"filePath": "core/src/main/java/io/grpc/ServerInterceptors.java", "insertions": 16, "deletions": 47, "lines": 63}, {"filePath": "core/src/test/java/io/grpc/ClientInterceptorsTest.java", "insertions": 7, "deletions": 4, "lines": 11}, {"filePath": "core/src/test/java/io/grpc/ServerInterceptorsTest.java", "insertions": 8, "deletions": 4, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ClientInterceptors.java", "spoonMethods": [{"spoonMethodName": "io.grpc.ClientInterceptors.InterceptorChannel", "TOT": 8, "UPD": 8, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.ClientInterceptors.InterceptorChannel.newCall(io.grpc.MethodDescriptor,io.grpc.CallOptions)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.ClientInterceptors.intercept(io.grpc.Channel,java.util.List)", "TOT": 7, "UPD": 1, "INS": 1, "MOV": 3, "DEL": 2}, {"spoonMethodName": "io.grpc.ClientInterceptors.ProcessInterceptorChannel", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ServerInterceptors.java", "spoonMethods": [{"spoonMethodName": "io.grpc.ServerInterceptors.ProcessInterceptorsCallHandler", "TOT": 8, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 5}, {"spoonMethodName": "io.grpc.ServerInterceptors.InterceptCallHandler", "TOT": 12, "UPD": 3, "INS": 1, "MOV": 7, "DEL": 1}, {"spoonMethodName": "io.grpc.ServerInterceptors.ProcessInterceptorsCallHandler.create(java.util.Iterator,io.grpc.ServerCallHandler)", "TOT": 7, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.grpc.ServerInterceptors.intercept(io.grpc.ServerServiceDefinition,java.util.List)", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.ServerInterceptors.InterceptCallHandler.startCall(java.lang.String,io.grpc.ServerCall,io.grpc.Metadata$Headers)", "TOT": 9, "UPD": 2, "INS": 1, "MOV": 6, "DEL": 0}, {"spoonMethodName": "io.grpc.ServerInterceptors.ProcessInterceptorsCallHandler.startCall(java.lang.String,io.grpc.ServerCall,io.grpc.Metadata$Headers)", "TOT": 10, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 7}, {"spoonMethodName": "io.grpc.ServerInterceptors.wrapAndAddMethod(io.grpc.ServerServiceDefinition$Builder,io.grpc.ServerMethodDefinition,java.util.List)", "TOT": 12, "UPD": 0, "INS": 1, "MOV": 9, "DEL": 2}, {"spoonMethodName": "io.grpc.ServerInterceptors.InterceptCallHandler.create(java.util.List,io.grpc.ServerCallHandler)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "ClientInterceptorsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.ClientInterceptorsTest.ordered()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.ClientInterceptorsTest.callNextTwice()", "TOT": 8, "UPD": 0, "INS": 3, "MOV": 3, "DEL": 2}, {"spoonMethodName": "io.grpc.ClientInterceptorsTest.callNextTwice().2.interceptCall(io.grpc.MethodDescriptor,io.grpc.CallOptions,io.grpc.Channel)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "ServerInterceptorsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.ServerInterceptorsTest.ordered()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.ServerInterceptorsTest.callNextTwice()", "TOT": 10, "UPD": 0, "INS": 4, "MOV": 4, "DEL": 2}, {"spoonMethodName": "io.grpc.ServerInterceptorsTest.callNextTwice().1.interceptCall(java.lang.String,io.grpc.ServerCall,io.grpc.Metadata.Headers,io.grpc.ServerCallHandler)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3ce15b50b2d636beba84b17bcfdce5c20fea6f42"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 27, "deletions": 84, "lines": 111, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 82, "UPD": 27, "INS": 4, "MOV": 30, "DEL": 21, "spoonFilesChanged": 2, "spoonMethodsChanged": 12}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc"], "changesInPackagesSPOON": ["io.grpc.ServerInterceptors.ProcessInterceptorsCallHandler.startCall(java.lang.String,io.grpc.ServerCall,io.grpc.Metadata$Headers)", "io.grpc.ServerInterceptors.InterceptCallHandler.create(java.util.List,io.grpc.ServerCallHandler)", "io.grpc.ClientInterceptors.ProcessInterceptorChannel", "io.grpc.ServerInterceptors.ProcessInterceptorsCallHandler.create(java.util.Iterator,io.grpc.ServerCallHandler)", "io.grpc.ClientInterceptors.intercept(io.grpc.Channel,java.util.List)", "io.grpc.ServerInterceptors.wrapAndAddMethod(io.grpc.ServerServiceDefinition$Builder,io.grpc.ServerMethodDefinition,java.util.List)", "io.grpc.ClientInterceptors.InterceptorChannel.newCall(io.grpc.MethodDescriptor,io.grpc.CallOptions)", "io.grpc.ServerInterceptors.ProcessInterceptorsCallHandler", "io.grpc.ServerInterceptors.intercept(io.grpc.ServerServiceDefinition,java.util.List)", "io.grpc.ServerInterceptors.InterceptCallHandler.startCall(java.lang.String,io.grpc.ServerCall,io.grpc.Metadata$Headers)", "io.grpc.ClientInterceptors.InterceptorChannel", "io.grpc.ServerInterceptors.InterceptCallHandler"]}, {"title": "Stop using intrinsic locks in ChannelImpl/ServerImpl", "body": "I originally used intrinsic locks for expediency. We were still designing quite a bit and we were still using Service. It seems swapping away from intrinsic locks makes sense, as we have no want/need to allow users to compose method calls into higher-order atomic calls.\n", "url": "https://github.com/grpc/grpc-java/issues/569", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-06-25 23:40:41", "closed": "2015-07-28 14:23:33", "commits": {}, "ttf": 32.000277777777775, "commitsDetails": []}, {"title": "ChannelImpl's constructor shouldn't be public", "body": "ChannelImpl is really expected to be constructed from AbstractChannelBuilder. Using the builder allows us to more easily change the arguments as time goes on.\n", "url": "https://github.com/grpc/grpc-java/issues/568", "user": "ejona86", "labels": ["api-breaking", "code health"], "created": "2015-06-25 23:35:40", "closed": "2015-07-10 00:56:03", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "Have different abstract base types for each stub type; use it instead of Calls", "body": "Currently, `channel` (and soon, `callOptions`) are defined in AbstractStub, but the generated code uses them. It could be a good idea to have abstract base types for each stub type that uses `channel` so that the generated code doesn't.\n\nThis also moves the call of `Channel.newCall` into non-generated code. In all, this should have the generate code hard-code fewer things.\n", "url": "https://github.com/grpc/grpc-java/issues/548", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-06-17 20:06:41", "closed": "2015-07-15 23:54:24", "commits": {}, "ttf": 28.00027777777778, "commitsDetails": []}, {"title": "Make Channel hierarchy more meaningful", "body": "@nmittler wrote on [issue 64](https://github.com/grpc/grpc-java/issues/64#issuecomment-112221220):\n\n> I think the problem here is that the term \"channel\" ~= \"transport\", but \"interceptor\" != \"transport\". I think it would be better to provide a more abstract interface that is responsible for creating calls and then all of these \"things\" would implement/extend that. Something like this:\n> \n> ``` java\n> interface CallFactory {\n>    Call newCall(MethodDescriptor method);\n> }\n> ```\n> \n> ``` java\n> class MyInterceptor implements CallFactory {\n>     ...\n> }\n> ```\n> \n> ``` java\n> interface Channel extends CallFactory {\n>     ...\n>     void shutdown();\n> }\n> ```\n> \n> ``` java\n> class ChannelImpl implements Channel {\n>     ...\n> }\n> ```\n\nDiscussion continued further. This issue is for these class renames/additions.\n", "url": "https://github.com/grpc/grpc-java/issues/545", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-06-16 23:48:20", "closed": "2015-09-03 18:22:46", "commits": {"b687bdc7426da49879f8bf8f5c4472056180e241": {"commitGHEventType": "closed", "commitUser": "nmittler"}}, "ttf": 78.00027777777778, "commitsDetails": [{"commitHash": "b687bdc7426da49879f8bf8f5c4472056180e241", "commitGHEventType": "closed", "commitUser": "nmittler", "commitParents": ["65b4e0b1f2902e85cf9846b4fe9019d3a26fc1b5"], "nameRev": "b687bdc7426da49879f8bf8f5c4472056180e241 tags/v0.9.0~68", "commitMessage": "Refactoring channel API.\n\nClient:\n* New ManagedChannel abstract class.\n* Adding ping to Channel.\n* Moving builders and implementations to internal.\n\nServer:\n* Added lifecycle management API to Server (mirroring ManagedChannel).\n* Moved ServerImpl, AbstractServerBuilder and handler registries to internal.\n* New ServerBuilder abstract class (mirroring ManagedChannelBuilder).\n\nFixes #545\n", "commitDateTime": "2015-09-03 11:22:29", "authoredDateTime": "2015-08-31 16:13:39", "commitGitStats": [{"filePath": "benchmarks/src/jmh/java/io/grpc/benchmarks/TransportBenchmark.java", "insertions": 8, "deletions": 8, "lines": 16}, {"filePath": "benchmarks/src/jmh/java/io/grpc/benchmarks/netty/AbstractBenchmark.java", "insertions": 9, "deletions": 9, "lines": 18}, {"filePath": "benchmarks/src/jmh/java/io/grpc/benchmarks/netty/HandlerRegistryBenchmark.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncClient.java", "insertions": 8, "deletions": 7, "lines": 15}, {"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncServer.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/OpenLoopClient.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/Utils.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "core/src/main/java/io/grpc/HandlerRegistry.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "core/src/main/java/io/grpc/ManagedChannel.java", "insertions": 76, "deletions": 0, "lines": 76}, {"filePath": "core/src/main/java/io/grpc/ManagedChannelBuilder.java", "insertions": 66, "deletions": 0, "lines": 66}, {"filePath": "core/src/main/java/io/grpc/MutableHandlerRegistry.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/src/main/java/io/grpc/MutableHandlerRegistryImpl.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "core/src/main/java/io/grpc/Server.java", "insertions": 54, "deletions": 1, "lines": 55}, {"filePath": "core/src/main/java/io/grpc/ServerBuilder.java", "insertions": 70, "deletions": 0, "lines": 70}, {"filePath": "core/src/main/java/io/grpc/ServerMethodDefinition.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "core/src/main/java/io/grpc/inprocess/InProcessChannelBuilder.java", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "core/src/main/java/io/grpc/inprocess/InProcessServerBuilder.java", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "core/src/main/java/io/grpc/{AbstractChannelBuilder.java => internal/AbstractManagedChannelImplBuilder.java}", "insertions": 19, "deletions": 17, "lines": 36}, {"filePath": "core/src/main/java/io/grpc/{AbstractServerBuilder.java => internal/AbstractServerImplBuilder.java}", "insertions": 26, "deletions": 26, "lines": 52}, {"filePath": "core/src/main/java/io/grpc/{ => internal}/BackoffPolicy.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/src/main/java/io/grpc/{ => internal}/ClientCallImpl.java", "insertions": 7, "deletions": 5, "lines": 12}, {"filePath": "core/src/main/java/io/grpc/{ => internal}/ExponentialBackoffPolicy.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/src/main/java/io/grpc/internal/GrpcUtil.java", "insertions": 28, "deletions": 2, "lines": 30}, {"filePath": "core/src/main/java/io/grpc/{ChannelImpl.java => internal/ManagedChannelImpl.java}", "insertions": 29, "deletions": 62, "lines": 91}, {"filePath": "core/src/main/java/io/grpc/{ => internal}/ServerImpl.java", "insertions": 19, "deletions": 38, "lines": 57}, {"filePath": "core/src/test/java/io/grpc/IntegerMarshaller.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/src/test/java/io/grpc/StringMarshaller.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/src/test/java/io/grpc/{ => internal}/ExponentialBackoffPolicyTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/src/test/java/io/grpc/{ChannelImplTest.java => internal/ManagedChannelImplTest.java}", "insertions": 17, "deletions": 10, "lines": 27}, {"filePath": "core/src/test/java/io/grpc/{ => internal}/ServerImplTest.java", "insertions": 11, "deletions": 6, "lines": 17}, {"filePath": "examples/android/app/src/main/java/io/grpc/helloworldexample/HelloworldActivity.java", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "examples/src/main/java/io/grpc/examples/header/CustomHeaderClient.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "examples/src/main/java/io/grpc/examples/header/CustomHeaderServer.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "examples/src/main/java/io/grpc/examples/helloworld/HelloWorldClient.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "examples/src/main/java/io/grpc/examples/helloworld/HelloWorldServer.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "examples/src/main/java/io/grpc/examples/routeguide/RouteGuideClient.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "examples/src/main/java/io/grpc/examples/routeguide/RouteGuideServer.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractTransportTest.java", "insertions": 7, "deletions": 8, "lines": 15}, {"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/ReconnectTestClient.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/TestServiceServer.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyLocalChannelTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/InProcessTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyServerBuilder.java", "insertions": 8, "deletions": 7, "lines": 15}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/OkHttpChannelBuilder.java", "insertions": 5, "deletions": 2, "lines": 7}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}], "filteredCommits": ["b687bdc7426da49879f8bf8f5c4472056180e241"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 480, "deletions": 223, "lines": 703, "gitFilesChange": 35}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["examples/src/main/java/io/grpc/examples/header", "examples/src/main/java/io/grpc/examples/routeguide", "benchmarks/src/jmh/java/io/grpc/benchmarks", "netty/src/main/java/io/grpc/netty", "core/src/main/java/io/grpc", "core/src/main/java/io/grpc/{ => internal}", "examples/android/app/src/main/java/io/grpc/helloworldexample", "benchmarks/src/main/java/io/grpc/benchmarks/qps", "examples/src/main/java/io/grpc/examples/helloworld", "okhttp/src/main/java/io/grpc/okhttp", "benchmarks/src/jmh/java/io/grpc/benchmarks/netty", "core/src/main/java/io/grpc/inprocess", "core/src/main/java/io/grpc/internal", "core/src/main/java/io/grpc/{ChannelImpl.java => internal", "core/src/main/java/io/grpc/{AbstractChannelBuilder.java => internal", "core/src/main/java/io/grpc/{AbstractServerBuilder.java => internal"]}, {"title": "Move DEFAULT_CONNECTION_SPEC to OkHttpChannelBuilder and make OkHttpClientTransport package-private", "body": "There is little reason for `OkHttpClientTransport` to be public. `DEFAULT_CONNECTION_SPEC` should just be the initial value of `connectionSpec` in the `OkHttpChannelBuilder` (instead of the current `null`).\n", "url": "https://github.com/grpc/grpc-java/issues/541", "user": "ejona86", "labels": ["api-breaking", "okhttp"], "created": "2015-06-15 21:25:34", "closed": "2015-06-18 20:30:28", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Rename OkHttpChannelBuilder.setConnectionSpec to connectionSpec", "body": "We aren't prefixing any of the other builder methods with set.\n", "url": "https://github.com/grpc/grpc-java/issues/540", "user": "ejona86", "labels": ["api-breaking", "okhttp"], "created": "2015-06-15 21:23:05", "closed": "2015-06-18 20:30:46", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Cleanup io.grpc package", "body": "- [x] Rename DeferredInputStream as it doesn't necessarily have to be deferred.  Consider making it an interface. \n- [x] Move SharedResourceHolder into transport\n- [x] SerializingExecutor into transport\n- [x] Rename KnownLength\n- [x] Add `available` method with documentation to KnownLength\n- [x] Move MethodType into MethodDescriptor\n- [x] Move Marshaller into MethodDescriptor\n", "url": "https://github.com/grpc/grpc-java/issues/529", "user": "nmittler", "labels": ["api-breaking"], "created": "2015-06-10 22:14:23", "closed": "2015-08-11 17:56:16", "commits": {}, "ttf": 61.000277777777775, "commitsDetails": []}, {"title": "Consolidate Method descriptor classes", "body": "Now we have three classes for representing a method: `MethodDescriptor`, `ServerMethodDefinition`, `Method`. They all have the method name and marshallers. We list their differences below:\n- `MethodDescriptor` is used on client when making a call. It has options and `MethodType` (unary, streaming etc)\n- `Method` passes information from IDL to the runtime. It has `MethodType`.\n- `ServerMethodDefinition` is used on server for a registered method. It has the `ServerCallHandler`.\n\nTheir content overlap a lot. They should be consolidated. Here is the plan:\n- Make it clear that `MethodDescriptor` is a static representation of the method definition from IDL. It will be used on both client-side and server-side.\n- Change `ServerMethodDefinition` to contain a `MethodDescriptor`\n- Delete `Method`. Use `MethodDescriptor` to pass information from IDL.\n", "url": "https://github.com/grpc/grpc-java/issues/511", "user": "zhangkun83", "labels": ["api-breaking"], "created": "2015-06-05 17:50:31", "closed": "2015-07-09 16:31:40", "commits": {}, "ttf": 33.000277777777775, "commitsDetails": []}, {"title": "DeferredInputStream has unused generic parameter", "body": "", "url": "https://github.com/grpc/grpc-java/issues/496", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-05-28 14:50:33", "closed": "2015-08-05 17:54:27", "commits": {}, "ttf": 69.00027777777778, "commitsDetails": []}, {"title": "Simplify configuration of flow control windows", "body": "Stream window should really always be the same as the connection window.  We should just expose a single lever for this ... default to 1MB.\n", "url": "https://github.com/grpc/grpc-java/issues/494", "user": "nmittler", "labels": ["api-breaking"], "created": "2015-05-27 19:08:21", "closed": "2015-07-08 22:43:16", "commits": {"efbb65522bd12c0fb0f7a605de52bbd7ba83f683": {"commitGHEventType": "closed", "commitUser": "nmittler"}}, "ttf": 42.000277777777775, "commitsDetails": [{"commitHash": "efbb65522bd12c0fb0f7a605de52bbd7ba83f683", "commitGHEventType": "closed", "commitUser": "nmittler", "commitParents": ["35ff624eb214d2b080eeb97cf3955bcdf90a1379"], "nameRev": "efbb65522bd12c0fb0f7a605de52bbd7ba83f683 tags/v0.8.0~113", "commitMessage": "Simplifying flow control window config for Netty.\n\nFixes #494\n", "commitDateTime": "2015-07-08 15:43:03", "authoredDateTime": "2015-06-30 12:10:47", "commitGitStats": [{"filePath": "benchmarks/src/jmh/java/io/grpc/benchmarks/netty/AbstractBenchmark.java", "insertions": 2, "deletions": 4, "lines": 6}, {"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncClient.java", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/AsyncServer.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/ClientConfiguration.java", "insertions": 4, "deletions": 12, "lines": 16}, {"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/OpenLoopClient.java", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/ServerConfiguration.java", "insertions": 4, "deletions": 12, "lines": 16}, {"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/Utils.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyChannelBuilder.java", "insertions": 10, "deletions": 23, "lines": 33}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyClientHandler.java", "insertions": 11, "deletions": 11, "lines": 22}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyClientTransport.java", "insertions": 4, "deletions": 7, "lines": 11}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyServer.java", "insertions": 6, "deletions": 9, "lines": 15}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyServerBuilder.java", "insertions": 9, "deletions": 22, "lines": 31}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyServerHandler.java", "insertions": 8, "deletions": 9, "lines": 17}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyServerTransport.java", "insertions": 4, "deletions": 6, "lines": 10}, {"filePath": "netty/src/test/java/io/grpc/transport/netty/NettyClientHandlerTest.java", "insertions": 11, "deletions": 11, "lines": 22}, {"filePath": "netty/src/test/java/io/grpc/transport/netty/NettyClientTransportTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "netty/src/test/java/io/grpc/transport/netty/NettyServerHandlerTest.java", "insertions": 8, "deletions": 9, "lines": 17}, {"filePath": "okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpChannelBuilder.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractBenchmark.java", "spoonMethods": [{"spoonMethodName": "io.grpc.benchmarks.netty.AbstractBenchmark.setup(io.grpc.benchmarks.netty.AbstractBenchmark$ExecutorType,io.grpc.benchmarks.netty.AbstractBenchmark$ExecutorType,io.grpc.benchmarks.netty.AbstractBenchmark$PayloadSize,io.grpc.benchmarks.netty.AbstractBenchmark$PayloadSize,io.grpc.benchmarks.netty.AbstractBenchmark$FlowWindowSize,io.grpc.benchmarks.netty.AbstractBenchmark$ChannelType,int,int)", "TOT": 6, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "AsyncClient.java", "spoonMethods": [{"spoonMethodName": "io.grpc.benchmarks.qps.AsyncClient.main(java.lang.String[])", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "AsyncServer.java", "spoonMethods": [{"spoonMethodName": "io.grpc.benchmarks.qps.AsyncServer.newServer(io.grpc.benchmarks.qps.ServerConfiguration)", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "ClientConfiguration.java", "spoonMethods": [{"spoonMethodName": "io.grpc.benchmarks.qps.ClientConfiguration", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.benchmarks.qps.ClientConfiguration.ClientParam", "TOT": 5, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.16", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.14.setClientValue(io.grpc.benchmarks.qps.ClientConfiguration,java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OpenLoopClient.java", "spoonMethods": [{"spoonMethodName": "io.grpc.benchmarks.qps.OpenLoopClient.main(java.lang.String[])", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ServerConfiguration.java", "spoonMethods": [{"spoonMethodName": "io.grpc.benchmarks.qps.ServerConfiguration", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.benchmarks.qps.ServerConfiguration.ServerParam", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.benchmarks.qps.ServerConfiguration.ServerParam.5.setServerValue(io.grpc.benchmarks.qps.ServerConfiguration,java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Utils.java", "spoonMethods": [{"spoonMethodName": "io.grpc.benchmarks.qps.Utils.newClientChannel(io.grpc.benchmarks.qps.ClientConfiguration)", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "NettyChannelBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyChannelBuilder", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.grpc.transport.netty.NettyChannelBuilder.streamWindowSize(int)", "TOT": 5, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.netty.NettyChannelBuilder.buildEssentials()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.transport.netty.NettyChannelBuilder.connectionWindowSize(int)", "TOT": 6, "UPD": 2, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "io.grpc.transport.netty.NettyChannelBuilder.buildEssentials().1.newClientTransport()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "NettyClientHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyClientHandler", "TOT": 12, "UPD": 9, "INS": 0, "MOV": 0, "DEL": 3}, {"spoonMethodName": "io.grpc.transport.netty.NettyClientHandler.sendInitialSettings()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyClientTransport", "TOT": 7, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 3}, {"spoonMethodName": "io.grpc.transport.netty.NettyClientTransport.newHandler()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "NettyServer.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyServer", "TOT": 12, "UPD": 6, "INS": 0, "MOV": 1, "DEL": 5}, {"spoonMethodName": "io.grpc.transport.netty.NettyServer.start(io.grpc.transport.ServerListener).1.initChannel(io.netty.channel.Channel)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "NettyServerBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyServerBuilder", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.grpc.transport.netty.NettyServerBuilder.streamWindowSize(int)", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.netty.NettyServerBuilder.connectionWindowSize(int)", "TOT": 6, "UPD": 2, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "io.grpc.transport.netty.NettyServerBuilder.buildEssentials()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyServerHandler", "TOT": 8, "UPD": 7, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.transport.netty.NettyServerHandler.sendInitialSettings()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyServerTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyServerTransport", "TOT": 8, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 3}, {"spoonMethodName": "io.grpc.transport.netty.NettyServerTransport.createHandler(io.grpc.transport.ServerTransportListener)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "NettyClientHandlerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyClientHandlerTest.setUp()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.transport.netty.NettyClientHandlerTest.connectionWindowShouldBeOverridden()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.transport.netty.NettyClientHandlerTest.newHandler(int,int)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}]}, {"spoonFilePath": "NettyClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyClientTransportTest.newTransport(io.grpc.transport.netty.ProtocolNegotiator)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.transport.netty.NettyClientTransportTest.startServer(int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "NettyServerHandlerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyServerHandlerTest.connectionWindowShouldBeOverridden()", "TOT": 5, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.transport.netty.NettyServerHandlerTest.newHandler(io.grpc.transport.ServerTransportListener,int,int)", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.grpc.transport.netty.NettyServerHandlerTest.shouldAdvertiseMaxConcurrentStreams()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.transport.netty.NettyServerHandlerTest.newHandler(io.grpc.transport.ServerTransportListener)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "OkHttpChannelBuilder.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["efbb65522bd12c0fb0f7a605de52bbd7ba83f683"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 69, "deletions": 126, "lines": 195, "gitFilesChange": 15}, "spoonStatsSummary": {"TOT": 136, "UPD": 85, "INS": 0, "MOV": 14, "DEL": 37, "spoonFilesChanged": 14, "spoonMethodsChanged": 31}, "statsSkippedReason": "", "changesInPackagesGIT": ["benchmarks/src/main/java/io/grpc/benchmarks/qps", "netty/src/main/java/io/grpc/transport/netty", "okhttp/src/main/java/io/grpc/transport/okhttp", "benchmarks/src/jmh/java/io/grpc/benchmarks/netty"], "changesInPackagesSPOON": ["io.grpc.transport.netty.NettyServer.start(io.grpc.transport.ServerListener).1.initChannel(io.netty.channel.Channel)", "io.grpc.benchmarks.qps.ClientConfiguration", "io.grpc.transport.netty.NettyServerBuilder.streamWindowSize(int)", "io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.14.setClientValue(io.grpc.benchmarks.qps.ClientConfiguration,java.lang.String)", "io.grpc.transport.netty.NettyChannelBuilder.buildEssentials()", "io.grpc.transport.netty.NettyClientTransport.newHandler()", "io.grpc.transport.netty.NettyServerHandler", "io.grpc.benchmarks.qps.ServerConfiguration", "io.grpc.transport.netty.NettyClientHandler", "io.grpc.benchmarks.qps.ClientConfiguration.ClientParam.16", "io.grpc.benchmarks.qps.ServerConfiguration.ServerParam", "io.grpc.transport.netty.NettyServer", "io.grpc.transport.netty.NettyChannelBuilder.connectionWindowSize(int)", "io.grpc.benchmarks.qps.ServerConfiguration.ServerParam.5.setServerValue(io.grpc.benchmarks.qps.ServerConfiguration,java.lang.String)", "io.grpc.transport.netty.NettyServerTransport.createHandler(io.grpc.transport.ServerTransportListener)", "io.grpc.transport.netty.NettyClientTransport", "io.grpc.benchmarks.qps.Utils.newClientChannel(io.grpc.benchmarks.qps.ClientConfiguration)", "io.grpc.transport.netty.NettyChannelBuilder.buildEssentials().1.newClientTransport()", "io.grpc.transport.netty.NettyChannelBuilder", "io.grpc.transport.netty.NettyChannelBuilder.streamWindowSize(int)", "io.grpc.benchmarks.qps.AsyncServer.newServer(io.grpc.benchmarks.qps.ServerConfiguration)", "io.grpc.benchmarks.qps.AsyncClient.main(java.lang.String[])", "io.grpc.transport.netty.NettyServerBuilder.buildEssentials()", "io.grpc.transport.netty.NettyServerBuilder", "io.grpc.benchmarks.qps.ClientConfiguration.ClientParam", "io.grpc.benchmarks.netty.AbstractBenchmark.setup(io.grpc.benchmarks.netty.AbstractBenchmark$ExecutorType,io.grpc.benchmarks.netty.AbstractBenchmark$ExecutorType,io.grpc.benchmarks.netty.AbstractBenchmark$PayloadSize,io.grpc.benchmarks.netty.AbstractBenchmark$PayloadSize,io.grpc.benchmarks.netty.AbstractBenchmark$FlowWindowSize,io.grpc.benchmarks.netty.AbstractBenchmark$ChannelType,int,int)", "io.grpc.benchmarks.qps.OpenLoopClient.main(java.lang.String[])", "io.grpc.transport.netty.NettyClientHandler.sendInitialSettings()", "io.grpc.transport.netty.NettyServerBuilder.connectionWindowSize(int)", "io.grpc.transport.netty.NettyServerHandler.sendInitialSettings()", "io.grpc.transport.netty.NettyServerTransport"]}, {"title": "ServerCalls binding utilities are too general", "body": "Generated server bindings use only two methods in ServerCalls to adapt a service. The lack of differentiation between the different modes of streaming causes too many calls to 'request' more messages from flow control in scenarios where no more messages are available.\n", "url": "https://github.com/grpc/grpc-java/issues/436", "user": "louiscryan", "labels": ["api-breaking"], "created": "2015-05-15 17:09:09", "closed": "2015-07-14 20:41:54", "commits": {}, "ttf": 60.000277777777775, "commitsDetails": []}, {"title": "Revisit Lifecycle API", "body": "The current shutdown/shutdownNow/isShutdown/awaitShutdown/isTerminated/awaitTerminated API of ChannelImpl and ServerImpl was chosen when we had time constraints in removing Service from our API. During its addition in #33, @adriancole and @nmittler expressed concern for the API, but the API was left in-place and the decision delayed as part of #28. The Health-checking API is coming, but the current Lifecycle API continues to be contentious in the mean time as it is part of both channel layer and transport layer.\n\nWe need to agree on an API.\n", "url": "https://github.com/grpc/grpc-java/issues/307", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-04-16 18:13:10", "closed": "2015-08-26 18:00:46", "commits": {}, "ttf": 131.00027777777777, "commitsDetails": []}, {"title": "Remove AbstractStub.StubConfigBuilder", "body": "Forked from #150\n\nNow we are doing this to reconfigure a stub:\n\n```\nstub = stub.configureNewStub().setDeadline(...).addInterceptor(...).build();\n```\n\nWhy not just:\n\n```\nstub = stub.withDeadline(...).withInterceptor(...);\n```\n\nThis could make per-call configuration more concise. Instead of:\n\n```\nresponse = stub.configureNewStub().setDeadline(...).build().foo(request);\n```\n\nwe could have:\n\n```\nresponse = stub.withDeadline(...).foo(request);\n```\n", "url": "https://github.com/grpc/grpc-java/issues/168", "user": "zhangkun83", "labels": ["api-breaking"], "created": "2015-03-03 21:51:37", "closed": "2015-07-23 18:20:05", "commits": {}, "ttf": 141.00027777777777, "commitsDetails": []}, {"title": "Add CallOptions parameter to newCall()", "body": "We need robust per-call configuration. For example, if we were to add configuration for specifying whether to retry, where would it go? Such configuration would need to be per-call, so it must go in Channel.newCall() somewhere. MethodDescriptor is where timeout is now, but putting more in MethodDescriptor seems like a long-term disaster. Metadata.Headers is where authority and path are now, but putting retry configuration there would be very odd.\n\nA CallOptions class would be a natural place for per-call configuration, and would actually be a good home for timeout, authority, and path. Removal of timeout from MethodDescriptor would make it so that nobody ever needs to modify the object, which would allow us to greatly simplify the generated code. Authority and path don't really relate to Metadata; they relate to HTTP headers but not GRPC Metadata. Removal of them from Headers means we would remove the Headers/Trailers distinction and just have Metadata. That would also fix the issue where Headers doesn't make sense to send from ServerCall since authority and path are meaningless for response headers.\n\nThe main breakage would be with Interceptors, as it would be adding a new parameter.\n\nI'm also uncertain as to whether CallOptions should be final or not. I think we want final, since we don't want that part of the API to be transport-specific, but it could be useful to have transport-specific options such as inbound flow control window.\n\n@louiscryan and @zhangkun83, what do you think?\n", "url": "https://github.com/grpc/grpc-java/issues/150", "user": "ejona86", "labels": ["api-breaking"], "created": "2015-02-27 17:43:00", "closed": "2015-07-07 21:31:42", "commits": {}, "ttf": 130.00027777777777, "commitsDetails": []}, {"title": "Consider making Channel/Server abstract classes", "body": "They were interfaces previously because of the bane of Service and the need to extend Abstract*Service in ChannelImpl/ServerImpl. Now that Service is gone from those APIs, we could swap to using abstract classes to give us greater ability to add to the APIs in the future.\n", "url": "https://github.com/grpc/grpc-java/issues/65", "user": "ejona86", "labels": ["api-breaking", "code health"], "created": "2015-02-09 19:09:22", "closed": "2015-05-07 23:42:37", "commits": {}, "ttf": 87.00027777777778, "commitsDetails": []}, {"title": "Channel interface needs shutdown/close", "body": "With the elimination of Service the Channel interface is now insufficient for normal use. \n\nWhile ChannelImpl has a shutdown Channel does not and intercepting a ChannelImpl immediately converts it into Channel.\n\nCloseable/AutoCloseable would be fine too\n", "url": "https://github.com/grpc/grpc-java/issues/64", "user": "louiscryan", "labels": ["api-breaking"], "created": "2015-02-09 18:53:30", "closed": "2015-08-26 18:02:32", "commits": {}, "ttf": 197.00027777777777, "commitsDetails": []}, {"title": "Figure out what names we want for Client Foos vs Server Foos", "body": "We have Call on both Client and Server. When adding the server, we chose ServerCall as the name of the server-side Call, and discussed renaming the client-side to ClientCall. ClientInterceptor was named based on this idea. However, the rename hasn't happened yet and now some have suggested having the Client names simply lack \"Client\" (so it would remain \"Call\"). It seems it has simply been too long since the original discussion for us to remember what was decided.\n\nWe need to decide to either prefix Client with Client and Server with Server or only prefix Server with Server. After the decision, whatever needs fixing needs to be fixed.\n\nNote that in the transport we must have ClientStream prefixed with Client, since Stream is a shared interface between Client and Server.\n", "url": "https://github.com/grpc/grpc-java/issues/23", "user": "ejona86", "labels": ["api-breaking", "code health"], "created": "2015-01-21 00:10:47", "closed": "2015-06-05 21:40:53", "commits": {}, "ttf": 135.00027777777777, "commitsDetails": []}, {"title": "Failed to collect dependencies at io.grpc:grpc-all:jar:1.30.0 -> io.grpc:grpc-rls:jar:1.30.0", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n\r\n1.30.0\r\n\r\n### What is your environment?\r\n<!-- operating system (Linux, Windows,...) and version, jdk version, etc. -->\r\n\r\nMacOS\r\n\r\n### What did you expect to see?\r\n\r\nNo error appears when grpc bumps to 1.30.0\r\n\r\n### What did you see instead?\r\n\r\nFailed to collect dependencies at io.grpc:grpc-all:jar:1.30.0 -> io.grpc:grpc-rls:jar:1.30.0\r\n\r\n### Steps to reproduce the bug\r\n\r\nmvn clean install\r\n", "url": "https://github.com/grpc/grpc-java/issues/7110", "user": "asdf2014", "labels": ["bug"], "created": "2020-06-10 03:55:35", "closed": "2020-06-11 19:06:22", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "BaseDnsNameResolverProvider exception with 1.29?", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n1.29\r\n\r\n### What is your environment?\r\nMAC JDK\r\n\r\n### What did you expect to see?\r\nNo exception being thrown.  I have a project that contains peer dependencies that use 1.28.  I then installed a library that used 1.29.  I force 1.29 on all the peer dependencies. I expect 1.29 to be backward compatible.  \r\n\r\n### What did you see instead?\r\nIt looks like in 1.29 BaseDnsNameResolverProvider was removed. Is 1.29 backward compatible?  would it break library dependencies that utilize 1.28?\r\n\r\n```\r\njava.lang.NoClassDefFoundError: io/grpc/internal/BaseDnsNameResolverProvider\r\n\tat java.lang.ClassLoader.defineClass1(Native Method)\r\n\tat java.lang.ClassLoader.defineClass(ClassLoader.java:763)\r\n\tat java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\r\n\tat java.net.URLClassLoader.defineClass(URLClassLoader.java:468)\r\n\tat java.net.URLClassLoader.access$100(URLClassLoader.java:74)\r\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:369)\r\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:363)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:362)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\r\n\tat java.lang.Class.forName0(Native Method)\r\n\tat java.lang.Class.forName(Class.java:348)\r\n\tat java.util.ServiceLoader$LazyIterator.nextService(ServiceLoader.java:370)\r\n\tat java.util.ServiceLoader$LazyIterator.next(ServiceLoader.java:404)\r\n\tat java.util.ServiceLoader$1.next(ServiceLoader.java:480)\r\n\tat io.grpc.ServiceProviders.loadAll(ServiceProviders.java:67)\r\n\tat io.grpc.NameResolverRegistry.getDefaultRegistry(NameResolverRegistry.java:101)\r\n\tat io.grpc.internal.AbstractManagedChannelImplBuilder.<init>(AbstractManagedChannelImplBuilder.java:107)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder.<init>(NettyChannelBuilder.java:136)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder.<init>(NettyChannelBuilder.java:131)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder.forAddress(NettyChannelBuilder.java:117)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyChannelProvider.builderForAddress(NettyChannelProvider.java:37)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyChannelProvider.builderForAddress(NettyChannelProvider.java:23)\r\n\tat io.grpc.ManagedChannelBuilder.forAddress(ManagedChannelBuilder.java:39)\r\n\tat com.google.api.gax.grpc.InstantiatingGrpcChannelProvider.createSingleChannel(InstantiatingGrpcChannelProvider.java:270)\r\n\tat com.google.api.gax.grpc.InstantiatingGrpcChannelProvider.access$1500(InstantiatingGrpcChannelProvider.java:71)\r\n\tat com.google.api.gax.grpc.InstantiatingGrpcChannelProvider$1.createSingleChannel(InstantiatingGrpcChannelProvider.java:202)\r\n\tat com.google.api.gax.grpc.ChannelPool.create(ChannelPool.java:72)\r\n\tat com.google.api.gax.grpc.InstantiatingGrpcChannelProvider.createChannel(InstantiatingGrpcChannelProvider.java:209)\r\n\tat com.google.api.gax.grpc.InstantiatingGrpcChannelProvider.getTransportChannel(InstantiatingGrpcChannelProvider.java:192)\r\n\tat com.google.api.gax.rpc.ClientContext.create(ClientContext.java:155)\r\n\tat com.google.api.gax.rpc.ClientContext.create(ClientContext.java:122)\r\n\tat com.google.cloud.logging.spi.v2.GrpcLoggingRpc.<init>(GrpcLoggingRpc.java:132)\r\n\tat com.google.cloud.logging.LoggingOptions$DefaultLoggingRpcFactory.create(LoggingOptions.java:61)\r\n\tat com.google.cloud.logging.LoggingOptions$DefaultLoggingRpcFactory.create(LoggingOptions.java:55)\r\n\tat com.google.cloud.ServiceOptions.getRpc(ServiceOptions.java:561)\r\n\tat com.google.cloud.logging.LoggingOptions.getLoggingRpcV2(LoggingOptions.java:129)\r\n\tat com.google.cloud.logging.LoggingImpl.<init>(LoggingImpl.java:109)\r\n\tat com.google.cloud.logging.LoggingOptions$DefaultLoggingFactory.create(LoggingOptions.java:46)\r\n\tat com.google.cloud.logging.LoggingOptions$DefaultLoggingFactory.create(LoggingOptions.java:41)\r\n\tat com.google.cloud.ServiceOptions.getService(ServiceOptions.java:541)\r\n\tat com.google.cloud.logging.logback.LoggingAppender.getLogging(LoggingAppender.java:245)\r\n\tat com.google.cloud.logging.logback.LoggingAppender.start(LoggingAppender.java:207)\r\n\tat com.snapchat.machamp.temporal_ctrl.logger.ConsoleJsonAppenderFactory.build(ConsoleJsonAppenderFactory.java:74)\r\n\tat io.dropwizard.logging.DefaultLoggingFactory.configure(DefaultLoggingFactory.java:170)\r\n\tat io.dropwizard.cli.ConfiguredCommand.run(ConfiguredCommand.java:83)\r\n\tat io.dropwizard.cli.Cli.run(Cli.java:78)\r\n\tat io.dropwizard.Application.run(Application.java:94)\r\n\tat com.snapchat.machamp.temporal_ctrl.TemporalCtrlApplication.main(TemporalCtrlApplication.java:37)\r\nCaused by: java.lang.ClassNotFoundException: io.grpc.internal.BaseDnsNameResolverProvider\r\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:382)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\r\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:349)\r\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\r\n\t... 51 more\r\n```\r\nit seems to crash when\r\n\r\n![image](https://user-images.githubusercontent.com/16171726/81004841-dc476780-8e01-11ea-98fd-29f945e5c97c.png)\r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/7002", "user": "darewreck54", "labels": ["bug"], "created": "2020-05-04 19:24:21", "closed": "2020-05-19 21:05:10", "commits": {}, "ttf": 15.000277777777777, "commitsDetails": []}, {"title": "java.lang.NoSuchFieldError: NETTY_SHADED when upgrading from 1.27.2 to 1.28.0", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n\r\n1.29.0 -- although I tried all gRPC versions from 1.27.2 to 1.29.0 to determine the exact version of breakage and it looks like it occurs between 1.27.2 (working) and 1.28.0 (not working).\r\n\r\n### What is your environment?\r\n* My development machine has macOS Catalina 10.15.4 with Java 11.0.6 installed\r\n* I'm seeing the same issue in production, where we run the `openjdk:11-jre-slim-buster` Docker image, which contains Debian + Java 11\r\n* We're using Kotlin 1.3.72, compiled for the JVM\r\n\r\n#### Dependencies\r\n\r\n```bzl\r\nGRPC_VERSION = \"1.27.2\" # Issue appears when I change this to 1.28.0\r\n\r\nJAVA_DEPS = [\r\n    \"com.google.code.gson:gson:2.8.6\",\r\n    \"com.google.protobuf:protobuf-java:3.11.4\",\r\n    \"com.googlecode.protobuf-java-format:protobuf-java-format:1.4\",\r\n    \"io.grpc:grpc-core:{grpcVersion}\".format(grpcVersion = GRPC_VERSION),\r\n    \"io.grpc:grpc-netty-shaded:{grpcVersion}\".format(grpcVersion = GRPC_VERSION),\r\n    \"io.grpc:grpc-protobuf:{grpcVersion}\".format(grpcVersion = GRPC_VERSION),\r\n    \"io.grpc:grpc-services:{grpcVersion}\".format(grpcVersion = GRPC_VERSION),\r\n    \"io.grpc:grpc-stub:{grpcVersion}\".format(grpcVersion = GRPC_VERSION),\r\n    \"io.grpc:grpc-testing:{grpcVersion}\".format(grpcVersion = GRPC_VERSION),\r\n    \"javax.annotation:javax.annotation-api:1.3.2\",\r\n    \"junit:junit:4.13\"\r\n]\r\n```\r\n\r\n<!-- operating system (Linux, Windows,...) and version, jdk version, etc. -->\r\n\r\n### What did you expect to see?\r\n\r\nFirst, I create a stub to access one of our gRPC services:\r\n\r\n```kt\r\n// All of our services require JWT authentication\r\nval headers = Metadata().apply {\r\n    this.put(Metadata.Key.of(\"Authorization\", Metadata.ASCII_STRING_MARSHALLER), \"Bearer $token\")\r\n}\r\nval contentServiceStub = MetadataUtils.attachHeaders(ContentServiceGrpc.newBlockingStub(\r\n    ManagedChannelBuilder\r\n        .forAddress(\r\n            System.getenv(\"CONTENT_SERVER_HOST\"),\r\n            System.getenv(\"CONTENT_SERVER_PORT\").toInt()\r\n       )\r\n       .usePlaintext()\r\n       .build()\r\n), headers)\r\n```\r\n\r\nThen, I run an RPC:\r\n\r\n```kt\r\nval content = contentServiceBlockingStub.getContent(\r\n    GetContentRequest\r\n        .newBuilder()\r\n        .addAllKeys(\r\n            listOf(\r\n                 \"website-heading\",\r\n                 \"website-subheading\"\r\n             )\r\n         )\r\n         .build()\r\n).content\r\n\r\nprintln(content)\r\n```\r\n\r\nI expect to see the content from the content service (in this case, website copy).\r\n\r\n### What did you see instead?\r\n\r\nI get an error message (see \"Steps to reproduce the bug\")\r\n\r\n### Steps to reproduce the bug\r\n\r\nStarting with gRPC version 1.28.0, in the terminal in which I `bazel run` the Kotlin executable which runs the RPC, I see this stack trace:\r\n\r\n```\r\nApr 26, 2020 1:31:56 PM io.grpc.stub.ClientCalls$ThreadlessExecutor waitAndDrain\r\nWARNING: Runnable threw exception\r\njava.lang.NoSuchFieldError: NETTY_SHADED\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyClientStream.<clinit>(NettyClientStream.java:59)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyClientTransport.newStream(NettyClientTransport.java:177)\r\n\tat io.grpc.internal.CallCredentialsApplyingTransportFactory$CallCredentialsApplyingTransport.newStream(CallCredentialsApplyingTransportFactory.java:117)\r\n\tat io.grpc.internal.ForwardingConnectionClientTransport.newStream(ForwardingConnectionClientTransport.java:49)\r\n\tat io.grpc.internal.InternalSubchannel$CallTracingTransport.newStream(InternalSubchannel.java:635)\r\n\tat io.grpc.internal.DelayedClientTransport$PendingStream.createRealStream(DelayedClientTransport.java:353)\r\n\tat io.grpc.internal.DelayedClientTransport$PendingStream.access$300(DelayedClientTransport.java:341)\r\n\tat io.grpc.internal.DelayedClientTransport$5.run(DelayedClientTransport.java:300)\r\n\tat io.grpc.stub.ClientCalls$ThreadlessExecutor.waitAndDrain(ClientCalls.java:690)\r\n\tat io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:133)\r\n\tat plus.talar.proto.ContentServiceGrpc$ContentServiceBlockingStub.getContent(ContentServiceGrpc.java:395)\r\n\tat (the file where the RPC was run)\r\n```\r\n\r\nI don't see any error logs in the shell where I'm running the grpc service.\r\n\r\nThis PR seems relevant: https://github.com/grpc/grpc-java/pull/6774\r\n\r\nThanks! Let me know if you need any more information.\r\n\r\n<!-- Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs). -->\r\n", "url": "https://github.com/grpc/grpc-java/issues/6982", "user": "nathanhleung", "labels": ["bug"], "created": "2020-04-26 17:58:58", "closed": "2020-04-29 15:47:14", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Receiving Unknown Status code on hostname with InetSocketAddres ", "body": "### What version of gRPC-Java are you using?\r\nversion 1.24.2 \r\n### What is your environment?\r\n<!-- operating system (Linux, Windows,...) and version, jdk version, etc. -->\r\nWindows 10/2012/2016, Ubuntu 16, openJDK 8.242\r\n\r\n### What did you expect to see?\r\nStatus code unavailable \r\n### What did you see instead?\r\nStatus code unknown \r\n### Steps to reproduce the bug\r\n\r\nused : \r\nNettyChannelBuilder.forAddress(new InetSocketAddress(address,443))\r\nwhere address contains a hostname that does not exists \r\ngot back StatusRuntimeExcetpion with cause of  UnresolvedAddressException and code Unknown", "url": "https://github.com/grpc/grpc-java/issues/6954", "user": "emaayan", "labels": ["bug", "good first issue"], "created": "2020-04-21 17:16:19", "closed": "2020-05-21 23:15:54", "commits": {}, "ttf": 30.00027777777778, "commitsDetails": []}, {"title": "Xds interop test is failing in v1.29.x", "body": "https://source.cloud.google.com/results/invocations/9c427396-6b29-4305-8f94-60571775d705/targets/grpc%2Fjava%2Fv1.29.x%2Fbranch%2Fxds/log\r\n", "url": "https://github.com/grpc/grpc-java/issues/6939", "user": "dapengzhang0", "labels": ["bug"], "created": "2020-04-16 23:38:55", "closed": "2020-04-21 20:34:14", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "java.lang.OutOfMemoryError: Direct buffer memory", "body": "### What version of gRPC-Java are you using?\r\n==> 1.24\r\n### What is your environment?\r\n==> Linux os\r\n\r\nHi, \r\n\r\ni face sometimes a memory issue of my client app that is trying to connect to grpc server.\r\nWhat happen ? my client app is not able to connect to my grpc server (for some reason, for example grpc server down). So, there is a retry each minutes until grpc server is reachable. \r\nAnd when finally the server is reachable, sometimes i face an outOfMemory issue. On client side, i only try to get from server a simple json payload  and the grpc message size is not heavy (less than 4mo that is the max size if i understood). \r\nI need to stop my java process in order to start without any exception.\r\nAny hints about this memory issue ?\r\n\r\nBelow few logs, hope that should help :)\r\n\r\n```\r\n04:27:43.259 [Thread-3] ERROR com.mrrobot.eliot.umbrellaCorp.agent.Core - following exception was thrown initializing managers\r\nio.grpc.StatusRuntimeException: UNKNOWN: Channel Pipeline: [SslHandler#0, ProtocolNegotiators$ClientTlsHandler#0, WriteBufferingAndExceptionHandler#0, DefaultChannelPipeline$TailContext#0]\r\n\tat io.grpc.stub.ClientCalls.toStatusRuntimeException(ClientCalls.java:235) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:216) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:141) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.grpc_model.GrpcTokenServiceGrpc$GrpcTokenServiceBlockingStub.initGrpcToken(GrpcTokenServiceGrpc.java:209) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getToken(GrpcManager.java:468) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getUmbrellaConf(GrpcManager.java:413) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getconf(GrpcManager.java:114) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ManagerWrapper.<init>(ManagerWrapper.java:33) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.initAgent(Core.java:206) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.initAgent(ServiceInstallationPluginImpl.java:71) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.service.ServiceInstall.run(ServiceInstall.java:144) ~[installService-1.0.0.jar:1.0.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.lambda$start$0(ServiceInstallationPluginImpl.java:44) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]\r\n\tat java.lang.Thread.run(Thread.java:834) [?:?]\r\nCaused by: java.lang.OutOfMemoryError: Direct buffer memory\r\n\tat java.nio.Bits.reserveMemory(Bits.java:175) ~[?:?]\r\n\tat java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:118) ~[?:?]\r\n\tat java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:317) ~[?:?]\r\n\tat io.netty.buffer.PoolArena$DirectArena.allocateDirect(PoolArena.java:764) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.PoolArena$DirectArena.newChunk(PoolArena.java:740) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.PoolArena.allocateNormal(PoolArena.java:244) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.PoolArena.allocate(PoolArena.java:226) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.PoolArena.allocate(PoolArena.java:146) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.PooledByteBufAllocator.newDirectBuffer(PooledByteBufAllocator.java:324) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:185) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:176) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.AbstractByteBufAllocator.buffer(AbstractByteBufAllocator.java:113) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.allocate(SslHandler.java:1911) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.allocateOutNetBuf(SslHandler.java:1920) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.wrapNonAppData(SslHandler.java:923) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.handshake(SslHandler.java:1754) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.startHandshakeProcessing(SslHandler.java:1666) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.handlerAdded(SslHandler.java:1656) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:637) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.addBefore(DefaultChannelPipeline.java:287) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.addBefore(DefaultChannelPipeline.java:249) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.netty.ProtocolNegotiators$ClientTlsHandler.handlerAdded0(ProtocolNegotiators.java:307) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.handlerAdded(ProtocolNegotiators.java:668) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:637) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:597) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:540) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.fireProtocolNegotiationEvent(ProtocolNegotiators.java:709) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.netty.ProtocolNegotiators$WaitUntilActiveHandler.channelActive(ProtocolNegotiators.java:618) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:213) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:199) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelActive(AbstractChannelHandlerContext.java:192) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelActive(DefaultChannelPipeline.java:1422) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:213) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:199) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelActive(DefaultChannelPipeline.java:941) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.fulfillConnectPromise(AbstractEpollChannel.java:613) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.finishConnect(AbstractEpollChannel.java:646) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.epollOutReady(AbstractEpollChannel.java:522) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:411) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:321) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[core-1.15.0-test.jar:1.15.0]\r\n\t... 1 more\r\n04:27:43.360 [Thread-3] ERROR com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl - following exception was thrown\r\norg.pf4j.PluginRuntimeException: fail to init agent\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.initAgent(Core.java:210) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.initAgent(ServiceInstallationPluginImpl.java:71) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.service.ServiceInstall.run(ServiceInstall.java:144) ~[installService-1.0.0.jar:1.0.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.lambda$start$0(ServiceInstallationPluginImpl.java:44) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515) [?:?]\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:264) [?:?]\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128) [?:?]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628) [?:?]\r\n\tat java.lang.Thread.run(Thread.java:834) [?:?]\r\nCaused by: io.grpc.StatusRuntimeException: UNKNOWN: Channel Pipeline: [SslHandler#0, ProtocolNegotiators$ClientTlsHandler#0, WriteBufferingAndExceptionHandler#0, DefaultChannelPipeline$TailContext#0]\r\n\tat io.grpc.stub.ClientCalls.toStatusRuntimeException(ClientCalls.java:235) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:216) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:141) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.grpc_model.GrpcTokenServiceGrpc$GrpcTokenServiceBlockingStub.initGrpcToken(GrpcTokenServiceGrpc.java:209) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getToken(GrpcManager.java:468) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getUmbrellaConf(GrpcManager.java:413) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getconf(GrpcManager.java:114) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ManagerWrapper.<init>(ManagerWrapper.java:33) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.initAgent(Core.java:206) ~[core-1.15.0-test.jar:1.15.0]\r\n\t... 8 more\r\nCaused by: java.lang.OutOfMemoryError: Direct buffer memory\r\n\tat java.nio.Bits.reserveMemory(Bits.java:175) ~[?:?]\r\n\tat java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:118) ~[?:?]\r\n\tat java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:317) ~[?:?]\r\n\tat io.netty.buffer.PoolArena$DirectArena.allocateDirect(PoolArena.java:764) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.PoolArena$DirectArena.newChunk(PoolArena.java:740) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.PoolArena.allocateNormal(PoolArena.java:244) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.PoolArena.allocate(PoolArena.java:226) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.PoolArena.allocate(PoolArena.java:146) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.PooledByteBufAllocator.newDirectBuffer(PooledByteBufAllocator.java:324) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:185) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:176) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.buffer.AbstractByteBufAllocator.buffer(AbstractByteBufAllocator.java:113) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.allocate(SslHandler.java:1911) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.allocateOutNetBuf(SslHandler.java:1920) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.wrapNonAppData(SslHandler.java:923) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.handshake(SslHandler.java:1754) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.startHandshakeProcessing(SslHandler.java:1666) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.handler.ssl.SslHandler.handlerAdded(SslHandler.java:1656) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:637) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.addBefore(DefaultChannelPipeline.java:287) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.addBefore(DefaultChannelPipeline.java:249) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.netty.ProtocolNegotiators$ClientTlsHandler.handlerAdded0(ProtocolNegotiators.java:307) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.handlerAdded(ProtocolNegotiators.java:668) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:637) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:597) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:540) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.fireProtocolNegotiationEvent(ProtocolNegotiators.java:709) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.grpc.netty.ProtocolNegotiators$WaitUntilActiveHandler.channelActive(ProtocolNegotiators.java:618) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:213) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:199) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelActive(AbstractChannelHandlerContext.java:192) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelActive(DefaultChannelPipeline.java:1422) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:213) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:199) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelActive(DefaultChannelPipeline.java:941) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.fulfillConnectPromise(AbstractEpollChannel.java:613) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.finishConnect(AbstractEpollChannel.java:646) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.epollOutReady(AbstractEpollChannel.java:522) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:411) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:321) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897) ~[core-1.15.0-test.jar:1.15.0]\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[core-1.15.0-test.jar:1.15.0]\r\n\t... 1 more\r\n2020-04-08 04:27:43.362 [pool-1-thread-1] ERROR com.mrrobot.eliot.umbrellaCorp.agent.Application - Main-app: something happen when trying to restart entire agent with following exception\r\norg.pf4j.PluginRuntimeException: fail to execute installation service\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.start(ServiceInstallationPluginImpl.java:53)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.runFactoryMode(Core.java:155)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.start(Core.java:99)\r\n\tat org.pf4j.AbstractPluginManager.startPlugin(AbstractPluginManager.java:375)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Application.firstStart(Application.java:226)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Application.lambda$restart$0(Application.java:324)\r\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\r\n\tat java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)\r\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: installation execution error\r\n\tat java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)\r\n\tat java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.start(ServiceInstallationPluginImpl.java:50)\r\n\t... 11 more\r\nCaused by: java.lang.RuntimeException: installation execution error\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.lambda$start$0(ServiceInstallationPluginImpl.java:47)\r\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\t... 3 more\r\nCaused by: org.pf4j.PluginRuntimeException: fail to init agent\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.initAgent(Core.java:210)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.initAgent(ServiceInstallationPluginImpl.java:71)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.service.ServiceInstall.run(ServiceInstall.java:144)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.lambda$start$0(ServiceInstallationPluginImpl.java:44)\r\n\t... 5 more\r\nCaused by: io.grpc.StatusRuntimeException: UNKNOWN: Channel Pipeline: [SslHandler#0, ProtocolNegotiators$ClientTlsHandler#0, WriteBufferingAndExceptionHandler#0, DefaultChannelPipeline$TailContext#0]\r\n\tat io.grpc.stub.ClientCalls.toStatusRuntimeException(ClientCalls.java:235)\r\n\tat io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:216)\r\n\tat io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:141)\r\n\tat com.mrrobot.eliot.umbrellaCorp.grpc_model.GrpcTokenServiceGrpc$GrpcTokenServiceBlockingStub.initGrpcToken(GrpcTokenServiceGrpc.java:209)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getToken(GrpcManager.java:468)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getUmbrellaConf(GrpcManager.java:413)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getconf(GrpcManager.java:114)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ManagerWrapper.<init>(ManagerWrapper.java:33)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.initAgent(Core.java:206)\r\n\t... 8 more\r\nCaused by: java.lang.OutOfMemoryError: Direct buffer memory\r\n\tat java.base/java.nio.Bits.reserveMemory(Bits.java:175)\r\n\tat java.base/java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:118)\r\n\tat java.base/java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:317)\r\n\tat io.netty.buffer.PoolArena$DirectArena.allocateDirect(PoolArena.java:764)\r\n\tat io.netty.buffer.PoolArena$DirectArena.newChunk(PoolArena.java:740)\r\n\tat io.netty.buffer.PoolArena.allocateNormal(PoolArena.java:244)\r\n\tat io.netty.buffer.PoolArena.allocate(PoolArena.java:226)\r\n\tat io.netty.buffer.PoolArena.allocate(PoolArena.java:146)\r\n\tat io.netty.buffer.PooledByteBufAllocator.newDirectBuffer(PooledByteBufAllocator.java:324)\r\n\tat io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:185)\r\n\tat io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:176)\r\n\tat io.netty.buffer.AbstractByteBufAllocator.buffer(AbstractByteBufAllocator.java:113)\r\n\tat io.netty.handler.ssl.SslHandler.allocate(SslHandler.java:1911)\r\n\tat io.netty.handler.ssl.SslHandler.allocateOutNetBuf(SslHandler.java:1920)\r\n\tat io.netty.handler.ssl.SslHandler.wrapNonAppData(SslHandler.java:923)\r\n\tat io.netty.handler.ssl.SslHandler.handshake(SslHandler.java:1754)\r\n\tat io.netty.handler.ssl.SslHandler.startHandshakeProcessing(SslHandler.java:1666)\r\n\tat io.netty.handler.ssl.SslHandler.handlerAdded(SslHandler.java:1656)\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:637)\r\n\tat io.netty.channel.DefaultChannelPipeline.addBefore(DefaultChannelPipeline.java:287)\r\n\tat io.netty.channel.DefaultChannelPipeline.addBefore(DefaultChannelPipeline.java:249)\r\n\tat io.grpc.netty.ProtocolNegotiators$ClientTlsHandler.handlerAdded0(ProtocolNegotiators.java:307)\r\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.handlerAdded(ProtocolNegotiators.java:668)\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:637)\r\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:597)\r\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:540)\r\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.fireProtocolNegotiationEvent(ProtocolNegotiators.java:709)\r\n\tat io.grpc.netty.ProtocolNegotiators$WaitUntilActiveHandler.channelActive(ProtocolNegotiators.java:618)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:213)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:199)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelActive(AbstractChannelHandlerContext.java:192)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelActive(DefaultChannelPipeline.java:1422)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:213)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:199)\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelActive(DefaultChannelPipeline.java:941)\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.fulfillConnectPromise(AbstractEpollChannel.java:613)\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.finishConnect(AbstractEpollChannel.java:646)\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.epollOutReady(AbstractEpollChannel.java:522)\r\n\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:411)\r\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:321)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\t... 1 more\r\n2020-04-08 04:27:43.364 [pool-1-thread-1] ERROR com.mrrobot.eliot.umbrellaCorp.agent.Application - Main-app: saveError called with following exception: \r\norg.pf4j.PluginRuntimeException: fail to execute installation service\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.start(ServiceInstallationPluginImpl.java:53)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.runFactoryMode(Core.java:155)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.start(Core.java:99)\r\n\tat org.pf4j.AbstractPluginManager.startPlugin(AbstractPluginManager.java:375)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Application.firstStart(Application.java:226)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Application.lambda$restart$0(Application.java:324)\r\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\r\n\tat java.base/java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305)\r\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: java.util.concurrent.ExecutionException: java.lang.RuntimeException: installation execution error\r\n\tat java.base/java.util.concurrent.FutureTask.report(FutureTask.java:122)\r\n\tat java.base/java.util.concurrent.FutureTask.get(FutureTask.java:191)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.start(ServiceInstallationPluginImpl.java:50)\r\n\t... 11 more\r\nCaused by: java.lang.RuntimeException: installation execution error\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.lambda$start$0(ServiceInstallationPluginImpl.java:47)\r\n\tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\t... 3 more\r\nCaused by: org.pf4j.PluginRuntimeException: fail to init agent\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.initAgent(Core.java:210)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.initAgent(ServiceInstallationPluginImpl.java:71)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.service.ServiceInstall.run(ServiceInstall.java:144)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ServiceInstallationPluginImpl.lambda$start$0(ServiceInstallationPluginImpl.java:44)\r\n\t... 5 more\r\nCaused by: io.grpc.StatusRuntimeException: UNKNOWN: Channel Pipeline: [SslHandler#0, ProtocolNegotiators$ClientTlsHandler#0, WriteBufferingAndExceptionHandler#0, DefaultChannelPipeline$TailContext#0]\r\n\tat io.grpc.stub.ClientCalls.toStatusRuntimeException(ClientCalls.java:235)\r\n\tat io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:216)\r\n\tat io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:141)\r\n\tat com.mrrobot.eliot.umbrellaCorp.grpc_model.GrpcTokenServiceGrpc$GrpcTokenServiceBlockingStub.initGrpcToken(GrpcTokenServiceGrpc.java:209)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getToken(GrpcManager.java:468)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getUmbrellaConf(GrpcManager.java:413)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.grpc.GrpcManager.getconf(GrpcManager.java:114)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.ManagerWrapper.<init>(ManagerWrapper.java:33)\r\n\tat com.mrrobot.eliot.umbrellaCorp.agent.Core.initAgent(Core.java:206)\r\n\t... 8 more\r\nCaused by: java.lang.OutOfMemoryError: Direct buffer memory\r\n\tat java.base/java.nio.Bits.reserveMemory(Bits.java:175)\r\n\tat java.base/java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:118)\r\n\tat java.base/java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:317)\r\n\tat io.netty.buffer.PoolArena$DirectArena.allocateDirect(PoolArena.java:764)\r\n\tat io.netty.buffer.PoolArena$DirectArena.newChunk(PoolArena.java:740)\r\n\tat io.netty.buffer.PoolArena.allocateNormal(PoolArena.java:244)\r\n\tat io.netty.buffer.PoolArena.allocate(PoolArena.java:226)\r\n\tat io.netty.buffer.PoolArena.allocate(PoolArena.java:146)\r\n\tat io.netty.buffer.PooledByteBufAllocator.newDirectBuffer(PooledByteBufAllocator.java:324)\r\n\tat io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:185)\r\n\tat io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:176)\r\n\tat io.netty.buffer.AbstractByteBufAllocator.buffer(AbstractByteBufAllocator.java:113)\r\n\tat io.netty.handler.ssl.SslHandler.allocate(SslHandler.java:1911)\r\n\tat io.netty.handler.ssl.SslHandler.allocateOutNetBuf(SslHandler.java:1920)\r\n\tat io.netty.handler.ssl.SslHandler.wrapNonAppData(SslHandler.java:923)\r\n\tat io.netty.handler.ssl.SslHandler.handshake(SslHandler.java:1754)\r\n\tat io.netty.handler.ssl.SslHandler.startHandshakeProcessing(SslHandler.java:1666)\r\n\tat io.netty.handler.ssl.SslHandler.handlerAdded(SslHandler.java:1656)\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:637)\r\n\tat io.netty.channel.DefaultChannelPipeline.addBefore(DefaultChannelPipeline.java:287)\r\n\tat io.netty.channel.DefaultChannelPipeline.addBefore(DefaultChannelPipeline.java:249)\r\n\tat io.grpc.netty.ProtocolNegotiators$ClientTlsHandler.handlerAdded0(ProtocolNegotiators.java:307)\r\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.handlerAdded(ProtocolNegotiators.java:668)\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:637)\r\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:597)\r\n\tat io.netty.channel.DefaultChannelPipeline.replace(DefaultChannelPipeline.java:540)\r\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.fireProtocolNegotiationEvent(ProtocolNegotiators.java:709)\r\n\tat io.grpc.netty.ProtocolNegotiators$WaitUntilActiveHandler.channelActive(ProtocolNegotiators.java:618)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:213)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:199)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelActive(AbstractChannelHandlerContext.java:192)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelActive(DefaultChannelPipeline.java:1422)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:213)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(AbstractChannelHandlerContext.java:199)\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelActive(DefaultChannelPipeline.java:941)\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.fulfillConnectPromise(AbstractEpollChannel.java:613)\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.finishConnect(AbstractEpollChannel.java:646)\r\n\tat io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.epollOutReady(AbstractEpollChannel.java:522)\r\n\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:411)\r\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:321)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\t... 1 more\r\n2020-04-08 04:27:43.373 [pool-1-thread-1] INFO com.mrrobot.eliot.umbrellaCorp.agent.Application - Error successfully saved...\r\n04:27:44.137 [grpc-default-worker-ELG-1-2] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@321fc685(success)\r\n04:27:44.137 [grpc-default-worker-ELG-1-2] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@321fc685(success)\r\n04:27:44.869 [grpc-default-worker-ELG-1-4] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@5ef9be69(success)\r\n04:27:44.869 [grpc-default-worker-ELG-1-4] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@5ef9be69(success)\r\n04:27:45.832 [grpc-default-worker-ELG-1-6] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@79a71a0b(success)\r\n04:27:45.832 [grpc-default-worker-ELG-1-6] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@79a71a0b(success)\r\n04:27:48.627 [grpc-default-worker-ELG-1-8] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@30b8bff9(success)\r\n04:27:48.627 [grpc-default-worker-ELG-1-8] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@30b8bff9(success)\r\n04:27:52.038 [grpc-default-worker-ELG-1-2] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@6399ab6(success)\r\n04:27:52.038 [grpc-default-worker-ELG-1-2] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@6399ab6(success)\r\nApr 08, 2020 4:27:58 AM io.grpc.netty.NettyClientHandler$3 onGoAwayReceived\r\nWARNING: Received GOAWAY with ENHANCE_YOUR_CALM. Debug data: {1}\r\nApr 08, 2020 4:27:58 AM io.grpc.internal.AtomicBackoff$State backoff\r\nWARNING: Increased keepalive time nanos to 20,000,000,000\r\n04:27:58.726 [grpc-default-worker-ELG-1-4] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@62cccede(success)\r\n04:27:58.726 [grpc-default-worker-ELG-1-4] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@62cccede(success)\r\n04:28:08.770 [grpc-default-worker-ELG-1-6] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@1988e544(success)\r\n04:28:08.770 [grpc-default-worker-ELG-1-6] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@1988e544(success)\r\nApr 08, 2020 4:28:08 AM io.grpc.netty.NettyClientHandler$3 onGoAwayReceived\r\nWARNING: Received GOAWAY with ENHANCE_YOUR_CALM. Debug data: {1}\r\nApr 08, 2020 4:28:08 AM io.grpc.internal.AtomicBackoff$State backoff\r\nWARNING: Increased keepalive time nanos to 20,000,000,000\r\n 04:28:28.224 [grpc-default-worker-ELG-1-8] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@2d99f52c(success)\r\n04:28:28.224 [grpc-default-worker-ELG-1-8] WARN  io.netty.channel.AbstractChannelHandlerContext - Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@2d99f52c(success)\r\n```", "url": "https://github.com/grpc/grpc-java/issues/6910", "user": "otmanel31", "labels": ["bug"], "created": "2020-04-08 16:11:12", "closed": "2020-05-05 21:17:44", "commits": {}, "ttf": 27.00027777777778, "commitsDetails": []}, {"title": "Port is bound if start is Interrupted", "body": "### What version of gRPC-Java are you using?\r\n\r\nGRPC 1.25.0, but the problem can be found also in master\r\nNetty 4.1.43.Final\r\n\r\n### What is your environment?\r\n\r\nLinux, OpenJDK 11\r\n\r\n### What did you expect to see?\r\n\r\nI expected GRPC server not to keep a bound port if the start fails due to interruption.\r\n\r\n### What did you see instead?\r\n\r\nWhen I interrupt the start of server during binding to a port (https://github.com/grpc/grpc-java/blob/74cde7e8b4d4b8e59d6b8383b1557dddbada9f67/netty/src/main/java/io/grpc/netty/NettyServer.java#L248), the server fails correctly but the port is still bound.\r\n\r\nWhen the server is starting for the second time, the port is still bound which leads to a failure.\r\n\r\n### Steps to reproduce the bug\r\n\r\nA little background story: I have nothing to do with GRPC, I am trying to implement restarting Spring Application Context on a signal (HTTP REST call) due to reloading the whole app (the main reason is that the database structures have changed). The signal can come at any point when the web server is alive, which can be even before the application context is fully refreshed. If the signal comes and there is a thread creating an application context, we interrupt it, discard its result, and start a new context. I hope this explains the role of interruption in my use case.\r\n\r\nOne of the beans is a GRpcServerStarter which encloses Server (NettyServer). If the initialization of this bean is interrupted at the wrong stage (server is binding to a port), then the future.await() is interrupted, server crashes, bean is not created, application context is closed. This however still leads to the port being bound, and the binding leaking.\r\n\r\n```\r\njava.lang.RuntimeException: Interrupted waiting for bind\r\n        at io.grpc.netty.NettyServer.start(NettyServer.java:244) ~[grpc-netty-1.25.0.jar:1.25.0]\r\n        at io.grpc.internal.ServerImpl.start(ServerImpl.java:184) ~[grpc-core-1.25.0.jar:1.25.0]\r\n        at io.grpc.internal.ServerImpl.start(ServerImpl.java:90) ~[grpc-core-1.25.0.jar:1.25.0]\r\n        at com.ataccama.dpe.grpc.GRpcServerStarter.init(GRpcServerStarter.java:76) ~[grpc-0.2.1.jar:0.2.1]\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\r\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\r\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\r\n        at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:300) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(ApplicationListenerMethodAdapter.java:190) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(ApplicationListenerMethodAdapter.java:153) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.boot.context.event.EventPublishingRunListener.started(EventPublishingRunListener.java:98) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]\r\n        at org.springframework.boot.SpringApplicationRunListeners.started(SpringApplicationRunListeners.java:71) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:321) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]\r\n        at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:140) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]\r\n        at com.ataccama.one.metadata.MetadataServerApplication.restartApplicationContext(MetadataServerApplication.java:78) ~[app-0.0.0-restart-app-context-SNAPSHOT.jar:0.0.0-restart-app-context-SNAPSHOT]\r\n        at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]\r\n```\r\n\r\nAfter this interruption, there is no way to create a new server as the port is used.\r\n\r\n```\r\njava.lang.reflect.UndeclaredThrowableException: Failed to invoke event listener method\r\nHandlerMethod details: \r\nBean [com.ataccama.dpe.grpc.GRpcServerStarter]\r\nMethod [public void com.ataccama.dpe.grpc.GRpcServerStarter.init() throws java.lang.Exception]\r\nResolved arguments: \r\n\r\n        at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:317) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.event.ApplicationListenerMethodAdapter.processEvent(ApplicationListenerMethodAdapter.java:190) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.event.ApplicationListenerMethodAdapter.onApplicationEvent(ApplicationListenerMethodAdapter.java:153) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.event.SimpleApplicationEventMulticaster.invokeListener(SimpleApplicationEventMulticaster.java:165) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.event.SimpleApplicationEventMulticaster.multicastEvent(SimpleApplicationEventMulticaster.java:139) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:403) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.context.support.AbstractApplicationContext.publishEvent(AbstractApplicationContext.java:360) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        at org.springframework.boot.context.event.EventPublishingRunListener.started(EventPublishingRunListener.java:98) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]\r\n        at org.springframework.boot.SpringApplicationRunListeners.started(SpringApplicationRunListeners.java:71) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:321) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]\r\n        at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:140) ~[spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]\r\n        at com.ataccama.one.metadata.MetadataServerApplication.restartApplicationContext(MetadataServerApplication.java:78) ~[app-0.0.0-restart-app-context-SNAPSHOT.jar:0.0.0-restart-app-context-SNAPSHOT]\r\n        at java.base/java.lang.Thread.run(Thread.java:834) ~[na:na]\r\nCaused by: java.io.IOException: Failed to bind\r\n        at io.grpc.netty.NettyServer.start(NettyServer.java:247) ~[grpc-netty-1.25.0.jar:1.25.0]\r\n        at io.grpc.internal.ServerImpl.start(ServerImpl.java:184) ~[grpc-core-1.25.0.jar:1.25.0]\r\n        at io.grpc.internal.ServerImpl.start(ServerImpl.java:90) ~[grpc-core-1.25.0.jar:1.25.0]\r\n        at com.ataccama.dpe.grpc.GRpcServerStarter.init(GRpcServerStarter.java:76) ~[grpc-0.2.1.jar:0.2.1]\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\r\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\r\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\r\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\r\n        at org.springframework.context.event.ApplicationListenerMethodAdapter.doInvoke(ApplicationListenerMethodAdapter.java:300) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]\r\n        ... 13 common frames omitted\r\nCaused by: java.net.BindException: Address already in use\r\n        at java.base/sun.nio.ch.Net.bind0(Native Method) ~[na:na]\r\n        at java.base/sun.nio.ch.Net.bind(Net.java:461) ~[na:na]\r\n        at java.base/sun.nio.ch.Net.bind(Net.java:453) ~[na:na]\r\n        at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:227) ~[na:na]\r\n        at io.netty.channel.socket.nio.NioServerSocketChannel.doBind(NioServerSocketChannel.java:134) ~[netty-transport-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.channel.AbstractChannel$AbstractUnsafe.bind(AbstractChannel.java:551) ~[netty-transport-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.channel.DefaultChannelPipeline$HeadContext.bind(DefaultChannelPipeline.java:1346) ~[netty-transport-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeBind(AbstractChannelHandlerContext.java:503) ~[netty-transport-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.bind(AbstractChannelHandlerContext.java:488) ~[netty-transport-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.channel.DefaultChannelPipeline.bind(DefaultChannelPipeline.java:985) ~[netty-transport-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.channel.AbstractChannel.bind(AbstractChannel.java:247) ~[netty-transport-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.bootstrap.AbstractBootstrap$2.run(AbstractBootstrap.java:344) ~[netty-transport-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-common-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:510) ~[netty-common-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:518) ~[netty-transport-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1050) ~[netty-common-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) ~[netty-common-4.1.43.Final.jar:4.1.43.Final]\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[netty-common-4.1.43.Final.jar:4.1.43.Final]\r\n        ... 1 common frames omitted\r\n```\r\n\r\nI assume that a fix should handle better the InterruptedException by trying to unbind the port. I guess that this bug could be fixed in Netty, however from theit point of view, the binding can still succeed; you were just not patient enough to wait for the result, and it is your problem that you crash.", "url": "https://github.com/grpc/grpc-java/issues/6850", "user": "juriad", "labels": ["bug"], "created": "2020-03-23 10:05:58", "closed": "2020-03-28 00:21:23", "commits": {"2c250ace523c7bf329b27dfb81099f936a7810a9": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "2c250ace523c7bf329b27dfb81099f936a7810a9", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["0b4503e4b27833e0797f08db721414f4d07397f9"], "nameRev": "2c250ace523c7bf329b27dfb81099f936a7810a9 tags/v1.29.0~29", "commitMessage": "netty: prevent interruption during bind from leaking channel\n\nFixes #6850\n", "commitDateTime": "2020-03-27 17:21:22", "authoredDateTime": "2020-03-27 12:35:56", "commitGitStats": [{"filePath": "core/src/test/java/io/grpc/internal/AbstractTransportTest.java", "insertions": 30, "deletions": 0, "lines": 30}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyServer.java", "insertions": 4, "deletions": 6, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractTransportTest.serverStartInterrupted()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyServer.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServer.start(io.grpc.internal.ServerListener)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2c250ace523c7bf329b27dfb81099f936a7810a9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 6, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.NettyServer.start(io.grpc.internal.ServerListener)"]}, {"title": "java.lang.IllegalStateException: lbHelper is null", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n1.12.0\r\n### What is your environment?\r\n<!-- operating system (Linux, Windows,...) and version, jdk version, etc. -->\r\nubuntu 18.04.4 LTS, openJdk version 1.8.0_242\r\n\r\n### What did you expect to see?\r\nno exception error\r\n### What did you see instead?\r\nio.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!\r\nCaused by: java.lang.IllegalStateException: lbHelper is null\r\n\r\n<!-- Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs). -->\r\n```\r\nio.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!\r\n\tat io.grpc.Status.asRuntimeException(Status.java:526)\r\n\tat io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onClose(ClientCalls.java:419)\r\n\tat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39)\r\n\tat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)\r\n\tat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)\r\n\tat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39)\r\n\tat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)\r\n\tat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)\r\n\tat io.grpc.internal.CensusStatsModule$StatsClientInterceptor$1$1.onClose(CensusStatsModule.java:684)\r\n\tat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39)\r\n\tat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)\r\n\tat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)\r\n\tat io.grpc.internal.CensusTracingModule$TracingClientInterceptor$1$1.onClose(CensusTracingModule.java:391)\r\n\tat io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:471)\r\n\tat io.grpc.internal.ClientCallImpl.access$300(ClientCallImpl.java:63)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.close(ClientCallImpl.java:553)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.access$600(ClientCallImpl.java:474)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:591)\r\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\r\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)\r\n\tat java.lang.Thread.run(Thread.java:919)\r\nCaused by: java.lang.IllegalStateException: lbHelper is null\r\n\tat com.google.common.base.Preconditions.checkState(Preconditions.java:510)\r\n\tat io.grpc.internal.ManagedChannelImpl.shutdownNameResolverAndLoadBalancer(ManagedChannelImpl.java:319)\r\n\tat io.grpc.internal.ManagedChannelImpl.enterIdleMode(ManagedChannelImpl.java:376)\r\n\tat io.grpc.internal.ManagedChannelImpl.access$1000(ManagedChannelImpl.java:81)\r\n\tat io.grpc.internal.ManagedChannelImpl$IdleModeTimer.run(ManagedChannelImpl.java:311)\r\n\tat io.grpc.internal.Rescheduler$ChannelFutureRunnable.run(Rescheduler.java:106)\r\n\tat io.grpc.internal.ChannelExecutor.drain(ChannelExecutor.java:73)\r\n\tat io.grpc.internal.ManagedChannelImpl$1AutoDrainChannelExecutor.execute(ManagedChannelImpl.java:561)\r\n\tat io.grpc.internal.Rescheduler$FutureRunnable.run(Rescheduler.java:87)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:462)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:301)\r\n\t... 3 more\r\n```", "url": "https://github.com/grpc/grpc-java/issues/6842", "user": "malgun-gothic", "labels": ["bug"], "created": "2020-03-19 05:56:55", "closed": "2020-03-26 04:52:41", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "The Ready event is missed in RetriableStream. Sublistener::onReady is called but masterListener.onReady() is not.", "body": "\r\n### What version of gRPC-Java are you using?\r\nI am using 1.26.0, and I have tried 1.27.2 and latest code 1.27.3 (compiled by myself).\r\n\r\n### What is your environment?\r\nWindows 10, with openjdk 11.0.2\r\n\r\n### What did you expect to see?\r\nI expect to see the onReady is called, then trigger masterListener.onReady().\r\n\r\n### What did you see instead?\r\nonReady is called, but masterListener.onReady() is not called.\r\n\r\n### Steps to reproduce the bug\r\nSorry, it is hard to reproduce, but I can analyze the code to explain.\r\nIn drain(Substream) of RetriableStream, the new state was generated when all the entries were runWith the substream. but in the start(), a StartEntry was added, then the stream started after runWith. There is a possibility that the stream has sent the data successfully and call onReady to notify (another thread), but the new state which include the substream in the drainedSubstreams was not generated, then masterListener.onReady() was not called.\r\n", "url": "https://github.com/grpc/grpc-java/issues/6817", "user": "bjxutj", "labels": ["bug"], "created": "2020-03-11 16:48:09", "closed": "2020-06-04 20:35:52", "commits": {"959769aad890b27d713e50d229a54d5bb821fe78": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "411aac0bdd378b732774853bebaf754fe0262c9c": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 85.00027777777778, "commitsDetails": [{"commitHash": "959769aad890b27d713e50d229a54d5bb821fe78", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["27409016733f8a6f97ab46de7ece5c0edbe47657"], "nameRev": "959769aad890b27d713e50d229a54d5bb821fe78 master~44", "commitMessage": "core: always propagate RetriableStream.Sublistener.onReady()\n\nThis fixes #6817 for the normal retry case, although it makes the hedging issue #7089 more broken, and there is still space of optimization for normal retry.", "commitDateTime": "2020-06-04 13:35:51", "authoredDateTime": "2020-06-04 13:35:51", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/RetriableStream.java", "insertions": 4, "deletions": 4, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RetriableStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.RetriableStream.Sublistener.onReady()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "411aac0bdd378b732774853bebaf754fe0262c9c", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["ffee6a664538ace6dc1b52327f5a9663a2b3c09e"], "nameRev": "411aac0bdd378b732774853bebaf754fe0262c9c tags/v1.30.1~3", "commitMessage": "core: always propagate RetriableStream.Sublistener.onReady()\n\nThis fixes #6817 for the normal retry case, although it makes the hedging issue #7089 more broken, and there is still space of optimization for normal retry.", "commitDateTime": "2020-06-10 13:57:54", "authoredDateTime": "2020-06-04 13:35:51", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/RetriableStream.java", "insertions": 4, "deletions": 4, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RetriableStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.RetriableStream.Sublistener.onReady()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "ClientCallStreamObserver.disableAutoInboundFlowControl doesn't disable initial flow control", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n1.27.2\r\n\r\n### What is your environment?\r\nLinux Java 8\r\n\r\n### What did you expect to see?\r\nCalling ClientCallStreamObserver.disableAutoInboundFlowControl would disable all inbound flow control not explicitly initiated by the user.\r\n\r\n### What did you see instead?\r\nThe default behavior of requesting one initial message for streaming responses and two for unary responses is still applied.  It's worth noting that in streaming request server calls, disableAutoInboundFlowControl disables all inbound flow control (for unary requests, this doesn't even make sense as the handler isn't invoked until the request is received).\r\n\r\n### Steps to reproduce the bug\r\n```java\r\nclass FakeCall extends SimpleForwardingClientCall<Object, Object> {\r\n  int requested;\r\n  FakeCall() {\r\n    super(new NoopClientCall<>());\r\n  }\r\n  @Override public void request(int numMessages) {\r\n    requested += numMessages;\r\n  }\r\n}\r\nFakeCall call = new FakeCall();\r\nClientCalls.asyncBidiStreamingCall(call, new ClientResponseObserver<Object, Object>() {\r\n  @Override public void beforeStart(ClientCallStreamObserver<Object> requestStream) {\r\n    requestStream.disableAutoInboundFlowControl();\r\n  }\r\n  @Override public void onNext(Object value) {}\r\n  @Override public void onError(Throwable t) {}\r\n  @Override public void onCompleted() {}\r\n});\r\nSystem.out.println(\"Requested: %d\\n\", call.requested);\r\n```\r\nShould return 0, but returns 1 (2 if asyncUnaryCall is used instead).", "url": "https://github.com/grpc/grpc-java/issues/6806", "user": "DRayX", "labels": ["bug"], "created": "2020-03-05 05:54:19", "closed": "2020-03-10 21:15:56", "commits": {"a9250c1f995450a78abdc0b2490e3b4f3c189ed8": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "a9250c1f995450a78abdc0b2490e3b4f3c189ed8", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["0057c4f29de110d39eeb83e556296c41dcbe726e"], "nameRev": "a9250c1f995450a78abdc0b2490e3b4f3c189ed8 tags/v1.30.0~37", "commitMessage": "stub: Add disableAutoRequestWithInitial that disables all automatic inbound flow-control requests\n\nAdd a new disableAutoRequest method that disables all automatic requests while disableAutoInboundFlowControl maintains existing behavior.\r\n\r\nThe default behavior of requesting initial messages is applied even if disableAutoInboundFlowControl is called. ServerCalls disables all automatic flow control which is much more useful in case the user can't handle incoming messages until some time after the call has started.  This change creates a new StartableListener that has an onStart method that is invoked when the call is started which makes initial requests if necessary.\r\n\r\nSee #6806", "commitDateTime": "2020-05-06 10:19:41", "authoredDateTime": "2020-05-06 10:19:41", "commitGitStats": [{"filePath": "examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlClient.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "examples/src/main/java/io/grpc/examples/manualflowcontrol/ManualFlowControlServer.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "services/src/main/java/io/grpc/protobuf/services/ProtoReflectionService.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "services/src/test/java/io/grpc/protobuf/services/ProtoReflectionServiceTest.java", "insertions": 8, "deletions": 7, "lines": 15}, {"filePath": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "insertions": 28, "deletions": 0, "lines": 28}, {"filePath": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "insertions": 61, "deletions": 37, "lines": 98}, {"filePath": "stub/src/main/java/io/grpc/stub/ClientResponseObserver.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "insertions": 14, "deletions": 5, "lines": 19}, {"filePath": "stub/src/test/java/io/grpc/stub/ClientCallsTest.java", "insertions": 76, "deletions": 24, "lines": 100}, {"filePath": "stub/src/test/java/io/grpc/stub/ServerCallsTest.java", "insertions": 27, "deletions": 4, "lines": 31}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ManualFlowControlClient.java", "spoonMethods": [{"spoonMethodName": "io.grpc.examples.manualflowcontrol.ManualFlowControlClient.main(java.lang.String[]).1.beforeStart(io.grpc.stub.ClientCallStreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ManualFlowControlServer.java", "spoonMethods": [{"spoonMethodName": "io.grpc.examples.manualflowcontrol.ManualFlowControlServer.main(java.lang.String[]).1.sayHelloStreaming(io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ProtoReflectionService.java", "spoonMethods": [{"spoonMethodName": "io.grpc.protobuf.services.ProtoReflectionService.serverReflectionInfo(io.grpc.stub.StreamObserver)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ProtoReflectionServiceTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.protobuf.services.ProtoReflectionServiceTest.flowControl()", "TOT": 9, "UPD": 2, "INS": 1, "MOV": 5, "DEL": 1}, {"spoonMethodName": "io.grpc.protobuf.services.ProtoReflectionServiceTest.flowControlOnCompleteWithPendingRequest()", "TOT": 10, "UPD": 2, "INS": 2, "MOV": 5, "DEL": 1}, {"spoonMethodName": "io.grpc.protobuf.services.ProtoReflectionServiceTest.FlowControlClientResponseObserver.beforeStart(io.grpc.stub.ClientCallStreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CallStreamObserver.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.CallStreamObserver.disableAutoRequestWithInitial(int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ClientCalls.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.ClientCalls.CallToStreamObserverAdapter", "TOT": 3, "UPD": 1, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.CallToStreamObserverAdapter.disableAutoInboundFlowControl()", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)", "TOT": 4, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ClientCalls.asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)", "TOT": 4, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 3}, {"spoonMethodName": "io.grpc.stub.ClientCalls.asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.grpc.stub.ClientCalls.startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 2}, {"spoonMethodName": "io.grpc.stub.ClientCalls.StreamObserverToCallListenerAdapter", "TOT": 4, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ClientCalls.UnaryStreamToFuture", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.BlockingResponseStream", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.BlockingResponseStream.listener()", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.StreamObserverToCallListenerAdapter.onMessage(java.lang.Object)", "TOT": 6, "UPD": 1, "INS": 2, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ClientCalls.blockingServerStreamingCall(io.grpc.ClientCall,java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ClientCalls.blockingServerStreamingCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ClientCalls.futureUnaryCall(io.grpc.ClientCall,java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ClientCalls.StartableListener", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.startCall(io.grpc.ClientCall,io.grpc.stub.ClientCalls$StartableListener)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.StreamObserverToCallListenerAdapter.onStart()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.UnaryStreamToFuture.onStart()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.CallToStreamObserverAdapter.request(int)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.BlockingResponseStream.QueuingListener", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.BlockingResponseStream.QueuingListener.onStart()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ClientResponseObserver.java", "spoonMethods": []}, {"spoonFilePath": "ServerCalls.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.ServerCalls.ServerCallStreamObserverImpl", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCalls.ServerCallStreamObserverImpl.disableAutoInboundFlowControl()", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCalls.StreamingServerCallHandler.StreamingServerCallListener.onMessage(java.lang.Object)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCalls.StreamingServerCallHandler.startCall(io.grpc.ServerCall,io.grpc.Metadata)", "TOT": 5, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 2}]}, {"spoonFilePath": "ClientCallsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.ClientCallsTest.callStreamObserverPropagatesFlowControlRequestsToCall()", "TOT": 5, "UPD": 1, "INS": 0, "MOV": 4, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.canCaptureInboundFlowControlForServerStreamingObserver()", "TOT": 4, "UPD": 1, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.callStreamObserverPropagatesFlowControlRequestsToCall().12", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.callStreamObserverPropagatesFlowControlRequestsToCall().11", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportInboundFlowControl().15", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportOutboundFlowControl().16", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.blockingResponseStreamFailed().17", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.callStreamObserverPropagatesFlowControlRequestsToCall().11.beforeStart(io.grpc.stub.ClientCallStreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.canCaptureInboundFlowControlForServerStreamingObserver().13.beforeStart(io.grpc.stub.ClientCallStreamObserver)", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportInboundFlowControl().15.beforeStart(io.grpc.stub.ClientCallStreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportOutboundFlowControl().16.beforeStart(io.grpc.stub.ClientCallStreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportOutboundFlowControl().<unknown>.invoke(StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportOutboundFlowControl().16.beforeStart(io.grpc.stub.ClientCallStreamObserver).1.run()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportInboundFlowControl()", "TOT": 7, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "ServerCallsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.ServerCallsTest.cannotDisableAutoFlowControlAfterServiceInvocation()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCallsTest.disablingInboundAutoFlowControlForUnaryHasNoEffect()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCallsTest.disablingInboundAutoFlowControlForUnaryHasNoEffect().<unknown>.invoke(java.lang.Integer,StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCallsTest.disablingInboundAutoRequestSuppressesRequestsForMoreMessages()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a9250c1f995450a78abdc0b2490e3b4f3c189ed8"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 108, "deletions": 48, "lines": 156, "gitFilesChange": 7}, "spoonStatsSummary": {"TOT": 66, "UPD": 21, "INS": 18, "MOV": 11, "DEL": 16, "spoonFilesChanged": 6, "spoonMethodsChanged": 29}, "statsSkippedReason": "", "changesInPackagesGIT": ["stub/src/main/java/io/grpc/stub", "examples/src/main/java/io/grpc/examples/manualflowcontrol", "services/src/main/java/io/grpc/protobuf/services"], "changesInPackagesSPOON": ["io.grpc.stub.ClientCalls.CallToStreamObserverAdapter.request(int)", "io.grpc.stub.ClientCalls.StreamObserverToCallListenerAdapter.onStart()", "io.grpc.stub.ClientCalls.asyncStreamingRequestCall(io.grpc.ClientCall,io.grpc.stub.StreamObserver,boolean)", "io.grpc.stub.ClientCalls.BlockingResponseStream.QueuingListener", "io.grpc.stub.ClientCalls.asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.ClientCall$Listener,boolean)", "io.grpc.stub.ClientCalls.BlockingResponseStream.QueuingListener.onStart()", "io.grpc.stub.ServerCalls.ServerCallStreamObserverImpl.disableAutoInboundFlowControl()", "io.grpc.stub.ClientCalls.blockingServerStreamingCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)", "io.grpc.stub.ServerCalls.StreamingServerCallHandler.StreamingServerCallListener.onMessage(java.lang.Object)", "io.grpc.examples.manualflowcontrol.ManualFlowControlServer.main(java.lang.String[]).1.sayHelloStreaming(io.grpc.stub.StreamObserver)", "io.grpc.protobuf.services.ProtoReflectionService.serverReflectionInfo(io.grpc.stub.StreamObserver)", "io.grpc.stub.ClientCalls.asyncUnaryRequestCall(io.grpc.ClientCall,java.lang.Object,io.grpc.stub.StreamObserver,boolean)", "io.grpc.stub.ClientCalls.UnaryStreamToFuture", "io.grpc.stub.ClientCalls.UnaryStreamToFuture.onStart()", "io.grpc.stub.ClientCalls.blockingServerStreamingCall(io.grpc.ClientCall,java.lang.Object)", "io.grpc.stub.ClientCalls.BlockingResponseStream", "io.grpc.stub.ClientCalls.CallToStreamObserverAdapter.disableAutoInboundFlowControl()", "io.grpc.stub.ClientCalls.StartableListener", "io.grpc.stub.ClientCalls.startCall(io.grpc.ClientCall,io.grpc.stub.ClientCalls$StartableListener)", "io.grpc.stub.ClientCalls.BlockingResponseStream.listener()", "io.grpc.stub.ServerCalls.ServerCallStreamObserverImpl", "io.grpc.examples.manualflowcontrol.ManualFlowControlClient.main(java.lang.String[]).1.beforeStart(io.grpc.stub.ClientCallStreamObserver)", "io.grpc.stub.ClientCalls.futureUnaryCall(io.grpc.ClientCall,java.lang.Object)", "io.grpc.stub.ClientCalls.StreamObserverToCallListenerAdapter", "io.grpc.stub.CallStreamObserver.disableAutoRequestWithInitial(int)", "io.grpc.stub.ClientCalls.CallToStreamObserverAdapter", "io.grpc.stub.ClientCalls.StreamObserverToCallListenerAdapter.onMessage(java.lang.Object)", "io.grpc.stub.ServerCalls.StreamingServerCallHandler.startCall(io.grpc.ServerCall,io.grpc.Metadata)", "io.grpc.stub.ClientCalls.startCall(io.grpc.ClientCall,io.grpc.ClientCall$Listener,boolean)"]}, {"title": "Resource leak exception in logs", "body": "### What version of gRPC-Java are you using?\r\n1.21.0\r\n### What is your environment?\r\nCentOS Linux release 7.6.1810\r\nOpenJDK 64-Bit Server VM (Zulu 8.38.0.13-CA-linux64) (build 25.212-b04, mixed mode)\r\n\r\n### What did you expect to see?\r\nNo errors\r\n### What did you see instead?\r\n```\r\nLEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.\r\nRecent access records: \r\nCreated at:\r\n\tio.netty.buffer.PooledByteBufAllocator.newDirectBuffer(PooledByteBufAllocator.java:331)\r\n\tio.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:185)\r\n\tio.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:176)\r\n\tio.netty.buffer.AbstractByteBufAllocator.ioBuffer(AbstractByteBufAllocator.java:137)\r\n\tio.netty.channel.DefaultMaxMessagesRecvByteBufAllocator$MaxMessageHandle.allocate(DefaultMaxMessagesRecvByteBufAllocator.java:114)\r\n\tio.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:147)\r\n\tio.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:648)\r\n\tio.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:583)\r\n\tio.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:500)\r\n\tio.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462)\r\n\tio.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)\r\n\tjava.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tjava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tjava.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\n### Steps to reproduce the bug\r\nFound by internal load testing\r\n\r\nThe only thing we do is set a bounded thread pool executor that sends out usage metrics. A test project is available on GitHub.\r\nhttps://github.com/asarkar/kotlin/blob/master/grpc-learning/src/main/kotlin/org/asarkar/greeting/server/GreetingServer.kt#L47\r\n", "url": "https://github.com/grpc/grpc-java/issues/6796", "user": "asarkar", "labels": ["bug"], "created": "2020-03-03 01:13:51", "closed": "2020-03-06 21:16:28", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Race in StreamObservers.copyWithFlowControl", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n1.28\r\n\r\n### What is your environment?\r\n<!-- operating system (Linux, Windows,...) and version, jdk version, etc. -->\r\nLinux Java 8\r\n\r\n### What did you expect to see?\r\nThat StreamObservers.copyWithFlowControl would deterministically copy values\r\n\r\n### What did you see instead?\r\nThat StreamObservers.copyWithFlowControl has a race that can lead to non-deterministic behavior\r\n\r\n### Steps to reproduce the bug\r\nThe following test class reproduces the bug (generally after a hundred thousand attempts or so)\r\n\r\n```java\r\npublic final class StreamObserversRace {\r\n  private static final ImmutableList<Integer> LIST =\r\n      ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\r\n\r\n  static final class TestStreamObserver<T> extends CallStreamObserver<T> {\r\n    final ConcurrentLinkedQueue<T> values = new ConcurrentLinkedQueue<>();\r\n    final ConcurrentLinkedQueue<FutureTask<Void>> waits = new ConcurrentLinkedQueue<>();\r\n    final FutureTask<Void> completed = new FutureTask<>(() -> {}, null);\r\n    private final Executor executor;\r\n    private Runnable onReady;\r\n    private volatile boolean ready = true;\r\n\r\n    TestStreamObserver(Executor executor) {\r\n      this.executor = executor;\r\n    }\r\n    @Override public boolean isReady() {\r\n      return ready;\r\n    }\r\n    @Override public void setOnReadyHandler(Runnable onReady) {\r\n      this.onReady = onReady;\r\n      executor.execute(onReady);\r\n    }\r\n    @Override public void onNext(T value) {\r\n      this.ready = false;\r\n      FutureTask<Void> wait = new FutureTask<>(() -> {}, null);\r\n      waits.add(wait);\r\n      executor.execute(() -> {\r\n        values.add(value);\r\n        this.ready = true;\r\n        onReady.run();\r\n        wait.run();\r\n      });\r\n    }\r\n    @Override public void onCompleted() {\r\n      executor.execute(completed);\r\n    }\r\n    @Override public void onError(Throwable t) {}\r\n    @Override public void disableAutoInboundFlowControl() {}\r\n    @Override public void request(int count) {}\r\n    @Override public void setMessageCompression(boolean enable) {}\r\n  }\r\n\r\n  static void main(String[] args) throws Exception {\r\n    ExecutorService executor = Executors.newCachedThreadPool();\r\n    for (int i = 0;; ++i) {\r\n      TestStreamObserver<Integer> test = new TestStreamObserver<>(executor);\r\n      StreamObservers.copyWithFlowControl(LIST, test);\r\n      test.completed.get();\r\n      for (FutureTask<Void> wait : test.waits) {\r\n        wait.get();\r\n      }\r\n      if (!LIST.equals(ImmutableList.copyOf(test.values))) {\r\n        System.out.println(String.format(\"Failed after %d attempts (%s)\", i, test.values));\r\n        break;\r\n      }\r\n    }\r\n    executor.shutdown();\r\n  }\r\n}\r\n```\r\n\r\n### Why this race happens\r\nIf the `FlowControllingOnReadyHandler.run` method is interrupted between `target.onNext` and the next `target.isReady` call, it is possible for it to never see that the target was in a not ready state, meaning that both a new invocation of the ready handler will be started, and the current one will continue.  In this test this is exhibited by the list being out of order.\r\n\r\n### General issues with the ready mechanism\r\nThis race is caused by a more general design flaw of the `isReady`/`onReady` mechanism used across `ClientCall`, `ServerCall`, and `CallStreamObserver`.  The typical pattern of \r\n\r\n```java\r\n@Override public void onReady() {\r\n  while(observer.isReady()) {\r\n    observer.onNext(getMessage());  // or call.sendMessage\r\n    // Issue happens if the thread is interrupted here and the\r\n    // stream transitions from not-ready to ready.\r\n  }\r\n}\r\n```\r\n\r\nalways has this race of the stream transitioning from not ready to ready between the call to `next` and the call to `isReady`.  Avoiding this race is very non-trivial, especially given the limited invariants of the onReady call (there doesn't appear to be any guarantee that this method isn't called spuriously when the stream was already ready).  I've been trying to find a good example of this for a while, but this is the first concrete example I've come up with.\r\n\r\n### Potential solution\r\nOne potential fix would be to have `StreamObserver.onNext` (and `{Client|Server}Call.sendMessage`) return a boolean atomically indicating that the underlying stream is ready, and to add an invariant that `onReady` will be called if and only if the underlying stream transitions from a state where it is visibly not ready to one where it is, but this would be a breaking change on any implementations of these classes.  The above pattern would then become\r\n\r\n```java\r\n@Override public void onReady() {\r\n  while (observer.onNext(getMessage())) {}\r\n}\r\n```\r\n\r\nNote that this solution only works when the messages are being pulled.  When the messages are also being pushed asynchronously, rendezvousing the message and the ready event would still be tricky.  For this use case, a `whenReady(Runnable)` mechanism that invokes the handler exactly once (immediately if already ready) would be preferable.  This approach while more general would be more expensive than the one above as it requires creating a runnable for each message that is sent.", "url": "https://github.com/grpc/grpc-java/issues/6786", "user": "DRayX", "labels": ["bug"], "created": "2020-02-28 21:28:21", "closed": "2020-03-10 21:23:21", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "MethodDescriptor.setRawMethodName breaks Immutability if multiple types of transport are used", "body": "```\r\njava.lang.ClassCastException: io.netty.util.AsciiString cannot be cast to io.grpc.netty.shaded.io.netty.util.AsciiString\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyClientStream$Sink.writeHeadersInternal(NettyClientStream.java:130)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyClientStream$Sink.writeHeaders(NettyClientStream.java:122)\r\n\tat io.grpc.internal.AbstractClientStream.start(AbstractClientStream.java:166)\r\n\tat io.grpc.internal.ForwardingClientStream.start(ForwardingClientStream.java:87)\r\n\tat io.grpc.internal.InternalSubchannel$CallTracingTransport$1.start(InternalSubchannel.java:645)\r\n\tat io.grpc.internal.DelayedStream$5.run(DelayedStream.java:229)\r\n\tat io.grpc.internal.DelayedStream.drainPendingCalls(DelayedStream.java:163)\r\n\tat io.grpc.internal.DelayedStream.setStream(DelayedStream.java:132)\r\n\tat io.grpc.internal.DelayedClientTransport$PendingStream.createRealStream(DelayedClientTransport.java:358)\r\n\tat io.grpc.internal.DelayedClientTransport$PendingStream.access$300(DelayedClientTransport.java:341)\r\n\tat io.grpc.internal.DelayedClientTransport$5.run(DelayedClientTransport.java:300)\r\n\tat io.grpc.stub.ClientCalls$ThreadlessExecutor.waitAndDrain(ClientCalls.java:691)\r\n\tat io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:133)\r\n\tat io.grpc.testing.integration.TestServiceGrpc$TestServiceBlockingStub.unaryCall(TestServiceGrpc.java:637)\r\n\tat io.grpc.testing.integration.CompressionTest.compression(CompressionTest.java:202)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)\r\n\tat org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```", "url": "https://github.com/grpc/grpc-java/issues/6765", "user": "dapengzhang0", "labels": ["bug"], "created": "2020-02-27 01:10:55", "closed": "2020-02-27 20:53:14", "commits": {"5677a0b7237ca9d28768ee84f04f3e2a03f23fbb": {"commitGHEventType": "closed", "commitUser": "dapengzhang0"}, "a6c93dc473f7cebb78e112a63061690820ce80ea": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "5677a0b7237ca9d28768ee84f04f3e2a03f23fbb", "commitGHEventType": "closed", "commitUser": "dapengzhang0", "commitParents": ["bf2a66c8a2d52be41afd7090c151984a3ce64e0d"], "nameRev": "5677a0b7237ca9d28768ee84f04f3e2a03f23fbb tags/v1.29.0~83", "commitMessage": "api,netty: fix MethodDescriptor and InternalKnownTransport for netty-shaded\n\nResolves #6765", "commitDateTime": "2020-02-27 12:53:11", "authoredDateTime": "2020-02-27 12:53:11", "commitGitStats": [{"filePath": "api/src/main/java/io/grpc/InternalKnownTransport.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "api/src/main/java/io/grpc/MethodDescriptor.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyClientStream.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InternalKnownTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.InternalKnownTransport", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MethodDescriptor.java", "spoonMethods": [{"spoonMethodName": "io.grpc.MethodDescriptor", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyClientStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientStream", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "a6c93dc473f7cebb78e112a63061690820ce80ea", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["2ec86c11f3c7138b099669bb270b0c5ffcdb6f83"], "nameRev": "a6c93dc473f7cebb78e112a63061690820ce80ea tags/v1.28.0~6", "commitMessage": "api,netty: fix MethodDescriptor and InternalKnownTransport for netty-shaded\n\nResolves #6765", "commitDateTime": "2020-02-27 13:52:08", "authoredDateTime": "2020-02-27 12:53:11", "commitGitStats": [{"filePath": "api/src/main/java/io/grpc/InternalKnownTransport.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "api/src/main/java/io/grpc/MethodDescriptor.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyClientStream.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InternalKnownTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.InternalKnownTransport", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MethodDescriptor.java", "spoonMethods": [{"spoonMethodName": "io.grpc.MethodDescriptor", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyClientStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientStream", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5677a0b7237ca9d28768ee84f04f3e2a03f23fbb"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 3, "lines": 8, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 4, "UPD": 1, "INS": 2, "MOV": 1, "DEL": 0, "spoonFilesChanged": 3, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["api/src/main/java/io/grpc", "netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.NettyClientStream", "io.grpc.MethodDescriptor", "io.grpc.InternalKnownTransport"]}, {"title": "cannot run jmh benchmarks", "body": "```\r\nError: Could not find or load main class org.openjdk.jmh.runner.ForkedMain\r\n```\r\n\r\none issue is jmh plugin and gradle version is not matching, but there are more issues than this.", "url": "https://github.com/grpc/grpc-java/issues/6762", "user": "creamsoup", "labels": ["bug"], "created": "2020-02-26 17:59:00", "closed": "2020-03-05 00:04:10", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Many LB-related Javadoc warnings", "body": "These have cropped into the build, and some I think have been here for multiple releases (some look almost a year old)\r\n\r\n```\r\n> Task :grpc-api:javadoc\r\napi/src/main/java/io/grpc/ClientStreamTracer.java:68: warning - Tag @link: can't find newClientStreamTracer(StreamInfo, Metadata) in io.grpc.ClientStreamTracer.Factory\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"58\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"47\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"47\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"47\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"47\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"47\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"47\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"47\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"45\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"45\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see:illegal character: \"45\" in \"https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\"\r\napi/src/main/java/io/grpc/LoadBalancerProvider.java:75: warning - Tag @see: reference not found: https://github.com/grpc/proposal/blob/master/A24-lb-policy-config.md\r\n13 warnings\r\n\r\n> Task :grpc-core:javadoc\r\ncore/src/main/java/io/grpc/util/GracefulSwitchLoadBalancer.java:43: warning - Tag @link: can't find switchTo(Factory) in io.grpc.util.GracefulSwitchLoadBalancer\r\n1 warning\r\n\r\n> Task :grpc-xds:javadoc\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:206: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:156: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:156: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:206: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:228: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:228: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaPerRequestUtil.java:166: warning - Tag @link: reference not found: ClientStreamTracer.Factory\r\nxds/src/main/java/io/grpc/xds/OrcaPerRequestUtil.java:94: warning - Tag @link: reference not found: ClientStreamTracer.Factory\r\nxds/src/main/java/io/grpc/xds/OrcaPerRequestUtil.java:94: warning - Tag @link: reference not found: ClientStreamTracer.Factory\r\nxds/src/main/java/io/grpc/xds/OrcaPerRequestUtil.java:166: warning - Tag @link: reference not found: ClientStreamTracer.Factory\r\nxds/src/main/java/io/grpc/xds/XdsNameResolverProvider.java:38: warning - Tag @link: can't find asFactory#newNameResolver(URI, Args) in io.grpc.NameResolverRegistry\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:206: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaPerRequestUtil.java:166: warning - Tag @link: reference not found: ClientStreamTracer.Factory\r\nxds/src/main/java/io/grpc/xds/OrcaPerRequestUtil.java:94: warning - Tag @link: reference not found: ClientStreamTracer.Factory\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:156: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:156: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:206: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:228: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaPerRequestUtil.java:94: warning - Tag @link: reference not found: ClientStreamTracer.Factory\r\nxds/src/main/java/io/grpc/xds/OrcaPerRequestUtil.java:166: warning - Tag @link: reference not found: ClientStreamTracer.Factory\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:156: warning - Tag @link: reference not found: LoadBalancer.Helper\r\nxds/src/main/java/io/grpc/xds/OrcaOobUtil.java:206: warning - Tag @link: reference not found: LoadBalancer.Helper\r\n22 warnings\r\n```", "url": "https://github.com/grpc/grpc-java/issues/6755", "user": "ejona86", "labels": ["bug"], "created": "2020-02-25 20:27:31", "closed": "2020-02-26 19:51:02", "commits": {"e29561fbca3eb7a536b38d0e0b91c95caef94700": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "e29561fbca3eb7a536b38d0e0b91c95caef94700", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["3aa27b69c76ed056b5abb55ad91f9d3645706e72"], "nameRev": "e29561fbca3eb7a536b38d0e0b91c95caef94700 tags/v1.29.0~77", "commitMessage": "core: fix javadoc warnings\n\nFixes #6755\r\n\r\n```\r\n> Task :grpc-core:javadoc\r\ncore/src/main/java/io/grpc/util/GracefulSwitchLoadBalancer.java:43: warning - Tag @link: can't find switchTo(Factory) in io.grpc.util.GracefulSwitchLoadBalancer\r\n1 warning\r\n```", "commitDateTime": "2020-02-28 13:07:22", "authoredDateTime": "2020-02-28 13:07:22", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/util/GracefulSwitchLoadBalancer.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GracefulSwitchLoadBalancer.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e29561fbca3eb7a536b38d0e0b91c95caef94700"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/util"]}, {"title": "Panic when empty serverlists from the grpclb balancer", "body": "when grpclb gets empty address, it ends up causing uncaught exception in subchannel.", "url": "https://github.com/grpc/grpc-java/issues/6728", "user": "creamsoup", "labels": ["bug"], "created": "2020-02-19 19:35:59", "closed": "2020-02-21 18:55:58", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "INTERNAL: gRPC frame header malformed: reserved bits not zero", "body": "Version:\r\nGrpc 1.20\r\n\r\nEnvironment:\r\nWindow 10, Java 8\r\n\r\nI sending punch of files through grpc, I send the files as chucks in form of bytes, the programs runs well, but when I send too much file chunks it gives me these error:\r\n\r\n```\r\nFeb 15, 2020 9:04:05 PM io.grpc.netty.NettyServerStream$TransportState deframeFailed\r\nWARNING: Exception processing message\r\nio.grpc.StatusRuntimeException: INTERNAL: gRPC frame header malformed: reserved bits not zero\r\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\r\n\tat io.grpc.internal.MessageDeframer.processHeader(MessageDeframer.java:377)\r\n\tat io.grpc.internal.MessageDeframer.deliver(MessageDeframer.java:267)\r\n\tat io.grpc.internal.MessageDeframer.deframe(MessageDeframer.java:177)\r\n\tat io.grpc.internal.AbstractStream$TransportState.deframe(AbstractStream.java:193)\r\n\tat io.grpc.internal.AbstractServerStream$TransportState.inboundDataReceived(AbstractServerStream.java:266)\r\n\tat io.grpc.netty.NettyServerStream$TransportState.inboundDataReceived(NettyServerStream.java:198)\r\n\tat io.grpc.netty.NettyServerHandler.onDataRead(NettyServerHandler.java:466)\r\n\tat io.grpc.netty.NettyServerHandler.access$800(NettyServerHandler.java:99)\r\n\tat io.grpc.netty.NettyServerHandler$FrameListener.onDataRead(NettyServerHandler.java:735)\r\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:236)\r\n\tat io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:48)\r\n```\r\n\r\n\r\n**Sometimes give these error also** \r\n\r\n```\r\nFeb 15, 2020 9:04:05 PM io.grpc.internal.SerializingExecutor run\r\nSEVERE: Exception while executing runnable io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1MessagesAvailable@6367084e\r\nio.grpc.StatusRuntimeException: INTERNAL: Invalid protobuf byte sequence\r\n\tat io.grpc.Status.asRuntimeException(Status.java:523)\r\n\tat io.grpc.protobuf.lite.ProtoLiteUtils$MessageMarshaller.parse(ProtoLiteUtils.java:218)\r\n\tat io.grpc.protobuf.lite.ProtoLiteUtils$MessageMarshaller.parse(ProtoLiteUtils.java:118)\r\n\tat io.grpc.MethodDescriptor.parseRequest(MethodDescriptor.java:289)\r\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.messagesAvailable(ServerCallImpl.java:263)\r\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1MessagesAvailable.runInContext(ServerImpl.java:737)\r\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\r\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\r\n\tat java.lang.Thread.run(Unknown Source)\r\nCaused by: com.google.protobuf.InvalidProtocolBufferException: While parsing a protocol message, the input ended unexpectedly in the middle of a field.  This could mean either that the input has been truncated or that an embedded message misreported its own length.\r\n\tat com.google.protobuf.InvalidProtocolBufferException.truncatedMessage(InvalidProtocolBufferException.java:84)\r\n\tat com.google.protobuf.CodedInputStream$ArrayDecoder.pushLimit(CodedInputStream.java:1184)\r\n\tat com.google.protobuf.CodedInputStream$ArrayDecoder.readMessage(CodedInputStream.java:881)\r\n```\r\n\r\nAny ideas that could help, it seems that the netty server not able to handle too much data to received or what?\r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/6720", "user": "MostafaRamadan1", "labels": ["bug"], "created": "2020-02-16 17:10:35", "closed": "2020-02-25 22:19:33", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "'channelLogger' is already in use when updating from 1.23.x to 1.24.x", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n1.124.0\r\n\r\n### What is your environment?\r\nMac OS X\r\nJava 11\r\n\r\n### What did you expect to see?\r\nNo error\r\n\r\n### What did you see instead?\r\n<details>\r\n<summary>java.lang.IllegalArgumentException: 'channelLogger' is already in use</summary>\r\n\r\n```\r\nio.netty.channel.ChannelPipelineException: io.grpc.netty.ProtocolNegotiators$WaitUntilActiveHandler.handlerAdded() has thrown an exception; removed.\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:624)\r\n\tat io.netty.channel.DefaultChannelPipeline.addBefore(DefaultChannelPipeline.java:269)\r\n\tat io.netty.channel.DefaultChannelPipeline.addBefore(DefaultChannelPipeline.java:237)\r\n\tat io.grpc.netty.WriteBufferingAndExceptionHandler.handlerAdded(WriteBufferingAndExceptionHandler.java:59)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.callHandlerAdded(AbstractChannelHandlerContext.java:956)\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:609)\r\n\tat io.netty.channel.DefaultChannelPipeline.addLast(DefaultChannelPipeline.java:223)\r\n\tat io.netty.channel.DefaultChannelPipeline.addLast(DefaultChannelPipeline.java:381)\r\n\tat io.netty.channel.DefaultChannelPipeline.addLast(DefaultChannelPipeline.java:370)\r\n\tat io.grpc.netty.NettyServerTransport.start(NettyServerTransport.java:147)\r\n\tat io.grpc.netty.NettyServer$1.initChannel(NettyServer.java:231)\r\n\tat io.netty.channel.ChannelInitializer.initChannel(ChannelInitializer.java:129)\r\n\tat io.netty.channel.ChannelInitializer.handlerAdded(ChannelInitializer.java:112)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.callHandlerAdded(AbstractChannelHandlerContext.java:956)\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:609)\r\n\tat io.netty.channel.DefaultChannelPipeline.access$100(DefaultChannelPipeline.java:46)\r\n\tat io.netty.channel.DefaultChannelPipeline$PendingHandlerAddedTask.execute(DefaultChannelPipeline.java:1463)\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAddedForAllHandlers(DefaultChannelPipeline.java:1115)\r\n\tat io.netty.channel.DefaultChannelPipeline.invokeHandlerAddedIfNeeded(DefaultChannelPipeline.java:650)\r\n\tat io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:502)\r\n\tat io.netty.channel.AbstractChannel$AbstractUnsafe.access$200(AbstractChannel.java:417)\r\n\tat io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:474)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:164)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:472)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:500)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: java.lang.ExceptionInInitializerError: null\r\n\tat io.grpc.netty.ProtocolNegotiators.negotiationLogger(ProtocolNegotiators.java:82)\r\n\tat io.grpc.netty.ProtocolNegotiators.negotiationLogger(ProtocolNegotiators.java:78)\r\n\tat io.grpc.netty.ProtocolNegotiators$ProtocolNegotiationHandler.handlerAdded(ProtocolNegotiators.java:667)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.callHandlerAdded(AbstractChannelHandlerContext.java:956)\r\n\tat io.netty.channel.DefaultChannelPipeline.callHandlerAdded0(DefaultChannelPipeline.java:609)\r\n\t... 28 common frames omitted\r\nCaused by: java.lang.IllegalArgumentException: 'channelLogger' is already in use\r\n\tat io.netty.util.ConstantPool.createOrThrow(ConstantPool.java:109)\r\n\tat io.netty.util.ConstantPool.newInstance(ConstantPool.java:91)\r\n\tat io.netty.util.AttributeKey.newInstance(AttributeKey.java:55)\r\n\tat io.grpc.netty.NettyClientTransport.<clinit>(NettyClientTransport.java:70)\r\n\t... 33 common frames omitted\r\n```\r\n</details>\r\n\r\n### Steps to reproduce the bug\r\n\r\n1. Clone https://github.com/bsideup/liiklus\r\n1. Edit `AbstractIntegrationTest` in `app/src/test/java` and set `useGrpc` to true\r\n1. Run `SmokeTest` **either by delegating to Gradle in your IDE or with Gradle**\r\n", "url": "https://github.com/grpc/grpc-java/issues/6707", "user": "bsideup", "labels": ["bug"], "created": "2020-02-13 08:26:22", "closed": "2020-05-21 19:43:36", "commits": {}, "ttf": 98.00027777777778, "commitsDetails": []}, {"title": "Android: Execution failed for task ':app:mergeDebugJavaResource'", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n1.27.0\r\n### What is your environment?\r\n<!-- operating system (Linux, Windows,...) and version, jdk version, etc. -->\r\nmacOSCatalina 10.15.3\r\njava version \"1.8.0_241\"\r\nAndroid Studio 3.5.3\r\nGradle 6.0.1\r\n### What did you expect to see?\r\nBuild Successful.\r\n### What did you see instead?\r\n```\r\n2: Task failed with an exception.\r\n-----------\r\n* What went wrong:\r\nExecution failed for task ':app:mergeDebugJavaResource'.\r\n> A failure occurred while executing com.android.build.gradle.internal.tasks.Workers$ActionFacade\r\n   > More than one file was found with OS independent path 'google/protobuf/field_mask.proto'\r\n```\r\n```\r\nExecution failed for task ':app:checkDebugDuplicateClasses'.\r\n> 1 exception was raised by workers:\r\n  java.lang.RuntimeException: Duplicate class com.google.protobuf.AbstractMessageLite found in modules protobuf-java-3.7.1.jar (com.google.protobuf:protobuf-java:3.7.1) and protobuf-javalite-3.11.3.jar (com.google.protobuf:protobuf-javalite:3.11.3)\r\n  Duplicate class com.google.protobuf.AbstractMessageLite$Builder found in modules protobuf-java-3.7.1.jar (com.google.protobuf:protobuf-java:3.7.1) and protobuf-javalite-3.11.3.jar (com.google.protobuf:protobuf-javalite:3.11.3)\r\n  Duplicate class com.google.protobuf.AbstractMessageLite$Builder$LimitedInputStream found in modules protobuf-java-3.7.1.jar (com.google.protobuf:protobuf-java:3.7.1) and protobuf-javalite-3.11.3.jar (com.google.protobuf:protobuf-javalite:3.11.3)\r\n  Duplicate class com.google.protobuf.AbstractParser found in modules protobuf-java-3.7.1.jar (com.google.protobuf:protobuf-java:3.7.1) and protobuf-javalite-3.11.3.jar (com.google.protobuf:protobuf-javalite:3.11.3)\r\n  Duplicate class com.google.protobuf.AbstractProtobufList found in modules protobuf-java-3.7.1.jar (com.google.protobuf:protobuf-java:3.7.1) and protobuf-javalite-3.11.3.jar (com.google.protobuf:protobuf-javalite:3.11.3)\r\n...[sample of repeated values]\r\n```\r\n### Steps to reproduce the bug\r\nHere is the gradle file being used:\r\n```\r\napply plugin: 'com.android.application'\r\napply plugin: 'kotlin-android'\r\napply plugin: 'kotlin-android-extensions'\r\napply plugin: 'com.google.protobuf'\r\n\r\nbuildscript {\r\n    ext.kotlin_version = '1.3.61'\r\n\r\n    repositories {\r\n        mavenCentral()\r\n        mavenLocal()\r\n        maven { url \"https://plugins.gradle.org/m2/\" }\r\n        jcenter()\r\n    }\r\n    dependencies {\r\n        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.11'\r\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\r\n    }\r\n}\r\n\r\n//plugins {\r\n//    javalite {\r\n//        artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'\r\n//    }\r\n//}\r\n\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n    buildToolsVersion \"29.0.3\"\r\n    defaultConfig {\r\n        applicationId \"com.balance.umbrella\"\r\n        minSdkVersion 25\r\n        targetSdkVersion 29\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n\r\n    }\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n//    configurations {\r\n//        implementation.exclude module:'proto-google-common-protos'\r\n//        implementation.exclude module:'protolite-well-known-types'\r\n//        implementation.exclude module:'protobuf-lite'\r\n//    }\r\n    sourceSets {\r\n        main.java.srcDirs += 'src/main/kotlin'\r\n        test.java.srcDirs += 'src/test/kotlin'\r\n        androidTest.java.srcDirs += 'src/androidTest/kotlin'\r\n    }\r\n\r\n}\r\n\r\nif (hasProperty('buildScan')) {\r\n    buildScan {\r\n        termsOfServiceUrl = 'https://gradle.com/terms-of-service'\r\n        termsOfServiceAgree = 'yes'\r\n    }\r\n}\r\n\r\nprotobuf {\r\n    protoc {\r\n        artifact = \"com.google.protobuf:protoc:3.11.3\"\r\n    }\r\n    plugins {\r\n//        grpc {\r\n//            artifact = 'io.grpc:protoc-gen-grpc-java:1.27.0'\r\n//        }\r\n        javalite {\r\n            // The codegen for lite comes as a separate artifact\r\n            artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'\r\n        }\r\n    }\r\n\r\n    generateProtoTasks {\r\n        all().each { task ->\r\n            task.builtins {\r\n                // In most cases you don't need the full Java output\r\n                // if you use the lite output.\r\n                remove java\r\n            }\r\n            task.plugins {\r\n                javalite {}\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n//    generateProtoTasks {\r\n//        all().each { task ->\r\n//            task.builtins {\r\n//                java {\r\n//                    option \"lite\"\r\n//                }\r\n//            }\r\n//        }\r\n//    }\r\n\r\n}\r\n\r\n    dependencies {\r\n        implementation fileTree(dir: 'libs', include: ['*.jar'])\r\n        implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version\"\r\n        implementation 'androidx.appcompat:appcompat:1.1.0'\r\n        implementation 'androidx.core:core-ktx:1.2.0'\r\n        implementation 'androidx.constraintlayout:constraintlayout:1.1.3'\r\n        testImplementation 'junit:junit:4.13'\r\n        androidTestImplementation 'androidx.test.ext:junit:1.1.1'\r\n        androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'\r\n\r\n        // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-lite\r\n//        implementation \"com.google.protobuf:protobuf-lite:3.0.1\"\r\n\r\n        // https://mvnrepository.com/artifact/com.google.api.grpc/proto-google-common-protos\r\n        implementation \"com.google.api.grpc:proto-google-common-protos:1.17.0\"\r\n\r\n        // https://mvnrepository.com/artifact/io.grpc/grpc-protobuf-lite\r\n        implementation 'io.grpc:grpc-protobuf-lite:1.27.0' // CURRENT_GRPC_VERSION\r\n\r\n        // https://mvnrepository.com/artifact/io.grpc/grpc-stub\r\n        implementation 'io.grpc:grpc-stub:1.27.0' // CURRENT_GRPC_VERSION\r\n\r\n        // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-javalite\r\n        implementation 'com.google.protobuf:protobuf-javalite:3.11.3'\r\n\r\n        implementation 'javax.annotation:javax.annotation-api:1.3.2'\r\n\r\n        testImplementation \"io.grpc:grpc-testing:1.27.0\" // gRCP testing utilities\r\n\r\n    }\r\n```\r\n\r\n<!-- Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs). -->\r\n", "url": "https://github.com/grpc/grpc-java/issues/6689", "user": "namsoila", "labels": ["bug"], "created": "2020-02-09 04:35:20", "closed": "2020-02-10 03:41:00", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "OkHttpChannelBuilder.flowControlWindow(int) isn't working", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n\r\nTried this with all of:\r\n* 1.24.1\r\n* 1.26.0\r\n* 1.27.0\r\n\r\n### What is your environment?\r\n<!-- operating system (Linux, Windows,...) and version, jdk version, etc. -->\r\n\r\nBoth:\r\n- running locally on MacOSX 10.14.4\r\n- running in Kubernetes - Ubuntu 18 image on Ubuntu 18 workers\r\n\r\nJDK: Zulu, java 8\r\n\r\n### What did you expect to see?\r\n\r\nDuring server-side streaming RPC's, increasing the client's flow control window size should improve the rate at which the client can receive messages (particularly when the connection has some latency).\r\n\r\n### What did you see instead?\r\n\r\nWhen using the OkHttp client specifically, the above expectation holds true as long as the flow control window size is somewhere between its default value and double the default value \u2013 the rate at which the client can receive messages scales linearly with the size of the flow control window. However, going even a single byte above that range results in the client receiving only a few messages, then stops receiving messages entirely. Even when the RPC stops due to deadline and a new streaming RPC is started over the same connection, no more messages are sent.\r\n\r\n### Steps to reproduce the bug\r\n\r\n<!-- Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs). -->\r\n\r\nThough we first encountered this in our production environment, we've been able to recreate it in a controlled test environment like this:\r\n- a client that initiates the server-side stream and immediately discards messages as they're received\r\n- a server that produces a stream of uniformly-sized messages (~100 bytes) consisting of a random ByteString wrapped in a protocol buffer, sending them as fast as possible\r\n- a proxy sitting between the two that adds latency to all network communication (we're using [toxiproxy](https://github.com/Shopify/toxiproxy))\r\n- all three components run in separate processes on the same machine (just a developer's workstation)\r\n\r\nHere's our protos:\r\n```\r\nservice TestService {\r\n    rpc TestStream (StreamRequest) returns (stream StreamItem) {}\r\n}\r\n\r\nmessage StreamRequest {\r\n    // technically have some stuff in here, but leave everything unset for this test\r\n}\r\n\r\nmessage StreamItem {\r\n    bytes random_bytes = 1;\r\n    // some other fields that aren't set for this test\r\n}\r\n```\r\n\r\nHere's how the OkHttp channel is created-\r\n```\r\nManagedChannel channel = OkHttpChannelBuilder.forTarget(\"localhost:9801\")\r\n                    .usePlaintext()\r\n                    .flowControlWindow(flowControlWindowBytes)\r\n                    .build();\r\n```\r\n\r\nExperiment results:\r\n\r\nLatency | Flow Control Window Size | Message Send Rate\r\n--- | --- | ---\r\n<1ms | 65535 (default) | 200k msg/s\r\n100ms | 65535 (default) | 2k msg/s\r\n100ms | 131070 (2*default) | 4k msg/s\r\n<1ms | anything >131070 | sends ~500 messages, then stalls forever\r\n100ms | anything >131070 | sends ~500 messages, then stalls forever\r\n\r\nOther observations:\r\n* Enabling as much logging as possible (eg. looking at http2 frame logs) doesn't show anything useful, the server sends data until it just stops and there aren't any logs at that point\r\n* As shown in the above table, the drop in send rate from adding 100ms is surprisingly drastic (99% slower)\r\n* We repeated the same experiments with Netty. Netty is significantly slower in the ideal case (40k msg/s compared to 200k msg/s) but doesn't experience nearly the same drop due to high latency (20k msg/s). We can also increase the flowControlWindow past 2*default without detrimental effects.\r\n* We found some mention of BDP in [this blog post](https://grpc.io/blog/2017-08-22-grpc-go-perf-improvements/) (yes, I know this is for grpc-go). From a quick code search, it appears as though BDP is implemented in the grpc-java netty client code, but not in okhttp. Can't tell if this is actually related to the problems we're seeing though.\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/6685", "user": "chrisschek", "labels": ["bug"], "created": "2020-02-06 22:57:54", "closed": "2020-02-27 20:34:26", "commits": {"bf2a66c8a2d52be41afd7090c151984a3ce64e0d": {"commitGHEventType": "closed", "commitUser": "ejona86"}, "849dc2e259a637f2d0259b2c23a756286fd66173": {"commitGHEventType": "referenced", "commitUser": "voidzcy"}}, "ttf": 20.00027777777778, "commitsDetails": [{"commitHash": "bf2a66c8a2d52be41afd7090c151984a3ce64e0d", "commitGHEventType": "closed", "commitUser": "ejona86", "commitParents": ["2eab291928e91327f89b1e80911d429b2581a77f"], "nameRev": "bf2a66c8a2d52be41afd7090c151984a3ce64e0d tags/v1.29.0~84", "commitMessage": "okhttp: fix incorrect connection-level flow control handling at beginning of connection\n\nSpecifically, this addresses bugs that occur when the `OkHttpChannelBuilder.flowControlWindow(int)` setting is increased from its default value.\r\n\r\nTwo changes:\r\n1. On starting a connection, ensure the value of `OkHttpChannelBuilder.flowControlWindow(int)` is sent via Settings.INITIAL_WINDOW_SIZE. Also send a WINDOW_UPDATE after Settings to update the connection-level window.\r\n2. Always initialize the `OutboundFlowController` with an initialWindowSize of 65335 bytes per the [http2 spec](https://http2.github.io/http2-spec/#InitialWindowSize) instead of using the inbound window size.\r\n\r\nFixes #6685", "commitDateTime": "2020-02-27 12:34:23", "authoredDateTime": "2020-02-27 12:34:23", "commitGitStats": [{"filePath": "okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java", "insertions": 21, "deletions": 8, "lines": 29}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/OutboundFlowController.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/Utils.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java", "insertions": 121, "deletions": 15, "lines": 136}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OkHttpClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransport.start(io.grpc.okhttp.Listener)", "TOT": 8, "UPD": 0, "INS": 1, "MOV": 6, "DEL": 1}, {"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransport.sendConnectionPrefaceAndSettings()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OutboundFlowController.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OutboundFlowController", "TOT": 4, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 2}]}, {"spoonFilePath": "Utils.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.Utils", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OkHttpClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransportTest.outboundFlowControl()", "TOT": 8, "UPD": 2, "INS": 2, "MOV": 4, "DEL": 0}, {"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransportTest.outboundFlowControl_smallWindowSize()", "TOT": 6, "UPD": 3, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransportTest.outboundFlowControl(int)", "TOT": 9, "UPD": 6, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransportTest.outboundFlowControl_bigWindowSize()", "TOT": 30, "UPD": 2, "INS": 23, "MOV": 4, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "849dc2e259a637f2d0259b2c23a756286fd66173", "commitGHEventType": "referenced", "commitUser": "voidzcy", "commitParents": ["a6c93dc473f7cebb78e112a63061690820ce80ea"], "nameRev": "849dc2e259a637f2d0259b2c23a756286fd66173 tags/v1.28.0~5", "commitMessage": "okhttp: fix incorrect connection-level flow control handling at beginning of connection (v1.28.x backport)\n\nSpecifically, this addresses bugs that occur when the `OkHttpChannelBuilder.flowControlWindow(int)` setting is increased from its default value.\r\n\r\nTwo changes:\r\n1. On starting a connection, ensure the value of `OkHttpChannelBuilder.flowControlWindow(int)` is sent via Settings.INITIAL_WINDOW_SIZE. Also send a WINDOW_UPDATE after Settings to update the connection-level window.\r\n2. Always initialize the `OutboundFlowController` with an initialWindowSize of 65335 bytes per the [http2 spec](https://http2.github.io/http2-spec/#InitialWindowSize) instead of using the inbound window size.\r\n\r\nFixes #6685\r\nBackport of #6742\r\n", "commitDateTime": "2020-02-27 14:23:29", "authoredDateTime": "2020-02-27 14:23:29", "commitGitStats": [{"filePath": "okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java", "insertions": 21, "deletions": 8, "lines": 29}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/OutboundFlowController.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/Utils.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java", "insertions": 121, "deletions": 15, "lines": 136}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OkHttpClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransport.start(io.grpc.okhttp.Listener)", "TOT": 8, "UPD": 0, "INS": 1, "MOV": 6, "DEL": 1}, {"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransport.sendConnectionPrefaceAndSettings()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OutboundFlowController.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OutboundFlowController", "TOT": 4, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 2}]}, {"spoonFilePath": "Utils.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.Utils", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OkHttpClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransportTest.outboundFlowControl()", "TOT": 8, "UPD": 2, "INS": 2, "MOV": 4, "DEL": 0}, {"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransportTest.outboundFlowControl_smallWindowSize()", "TOT": 6, "UPD": 3, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransportTest.outboundFlowControl(int)", "TOT": 9, "UPD": 6, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.okhttp.OkHttpClientTransportTest.outboundFlowControl_bigWindowSize()", "TOT": 30, "UPD": 2, "INS": 23, "MOV": 4, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bf2a66c8a2d52be41afd7090c151984a3ce64e0d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 26, "deletions": 11, "lines": 37, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 14, "UPD": 1, "INS": 4, "MOV": 6, "DEL": 3, "spoonFilesChanged": 3, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["okhttp/src/main/java/io/grpc/okhttp"], "changesInPackagesSPOON": ["io.grpc.okhttp.Utils", "io.grpc.okhttp.OutboundFlowController", "io.grpc.okhttp.OkHttpClientTransport.start(io.grpc.okhttp.Listener)", "io.grpc.okhttp.OkHttpClientTransport.sendConnectionPrefaceAndSettings()"]}, {"title": "StatusRuntimeException trailers not sent to client", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n\r\n1.27.0\r\n\r\n### What is your environment?\r\n<!-- operating system (Linux, Windows,...) and version, jdk version, etc. -->\r\n\r\nLinux, java 8\r\n\r\n### What did you expect to see?\r\n\r\nTrailers attached to a thrown `StatusRuntimeException` by a server implementation are passed to the client.\r\n\r\n### What did you see instead?\r\nThe trailers are not passed.\r\n\r\n### Steps to reproduce the bug\r\n* Clone this little sample project https://github.com/cbornet/grpc-status-trailers\r\n* Package :  \u0300mvn package`\r\n* Execute : `java -jar target/simple-grpc-server-1.0-SNAPSHOT.jar`\r\n\r\nIt should print `test`. It prints `null` instead.\r\nIf you uncomment the `onError` call and comment the `throw` line then it works.\r\n\r\nIn https://github.com/grpc/grpc-java/blob/v1.27.0/core/src/main/java/io/grpc/internal/ServerImpl.java#L558 we see that empty Metadata are set when closing the call instead of using the ones from the Status exception.\r\n", "url": "https://github.com/grpc/grpc-java/issues/6683", "user": "cbornet", "labels": ["bug"], "created": "2020-02-06 15:23:38", "closed": "2020-02-07 09:06:00", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "io.grpc.StatusRuntimeException when using shutdownNow", "body": "### What version of gRPC-Java are you using?\r\n\r\n1.26.0\r\n\r\n### What is your environment?\r\n\r\nMac Java 8/11\r\n\r\n### What did you expect to see?\r\n\r\nNo exception\r\n\r\n### What did you see instead?\r\n\r\n```\r\nio.grpc.StatusRuntimeException: UNAVAILABLE: Channel shutdownNow invoked\r\n\tat io.grpc.Status.asRuntimeException(Status.java:533)\r\n\tat io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onClose(ClientCalls.java:449)\r\n\tat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39)\r\n\tat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)\r\n\tat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)\r\n\tat io.grpc.internal.CensusStatsModule$StatsClientInterceptor$1$1.onClose(CensusStatsModule.java:700)\r\n\tat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39)\r\n\tat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)\r\n\tat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)\r\n\tat io.grpc.internal.CensusTracingModule$TracingClientInterceptor$1$1.onClose(CensusTracingModule.java:399)\r\n\tat io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:521)\r\n\tat io.grpc.internal.ClientCallImpl.access$300(ClientCallImpl.java:66)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.close(ClientCallImpl.java:641)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.access$700(ClientCallImpl.java:529)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInternal(ClientCallImpl.java:703)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:692)\r\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\r\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\n### Steps to reproduce the bug\r\n\r\nNote this is a BiDi stream call. The client is closing the connection on the server without the server knowing this will happen. This is done by calling:\r\n\r\n```\r\nstreamObserver.onCompleted();\r\nchannel.shutdownNow();\r\nchannel.awaitTermination(maxWaitMs, TimeUnit.MILLISECONDS);\r\n```\r\n\r\nEverything seems to work properly but I see the above exception in my logs. Note: I don't believe this is the same as #4102 as I'm calling `shutdownNow()` only once.\r\n\r\nAs an aside, I'd prefer to just call `shutdown()` instead of `shutdownNow()` but `awaitTermination` takes a very long time (10-20 seconds) if I do this. I don't know if it's related.", "url": "https://github.com/grpc/grpc-java/issues/6642", "user": "Randgalt", "labels": ["bug"], "created": "2020-01-26 17:17:45", "closed": "2020-02-10 17:37:56", "commits": {}, "ttf": 15.000277777777777, "commitsDetails": []}, {"title": "gRPC seems to treat socksProxyHost as httpProxy", "body": "### What version of gRPC-Java are you using?\r\n\r\nLatest from master: b8474d61c966f60cc0bad4e5abaca351e90afc9d\r\n\r\n### What is your environment?\r\n\r\nLinux 5.0.0-37-generic\r\nopenjdk version \"1.8.0_232\"\r\nOpenJDK Runtime Environment (build 1.8.0_232-8u232-b09-0ubuntu1~18.04.1-b09)\r\nOpenJDK 64-Bit Server VM (build 25.232-b09, mixed mode)\r\n\r\nbazel version\r\nBuild label: 2.0.0\r\nBuild target: bazel-out/k8-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Thu Dec 19 12:30:18 2019 (1576758618)\r\nBuild timestamp: 1576758618\r\nBuild timestamp as int: 1576758618\r\n\r\n### What did you expect to see?\r\n\r\nI expected gRPC to respect system properties:\r\nsocksProxyHost\r\nsocksProxyPort\r\n\r\nand use socks to connect to remote hosts\r\n\r\n### What did you see instead?\r\n\r\ngRPC appears to send HTTP proxy commands (rather than SOCKS) commands\r\n\r\n### Steps to reproduce the bug\r\n\r\njava -DsocksProxyHost=localhost -DsocksProxyPort=9112 <something that used grpc to try to connect>\r\n\r\nFor a socks proxy, you can use tor or ssh -D for a simple setup.\r\n\r\nOr in fact, nc -l -k 9112\r\n\r\nExample log from nc:\r\n\r\nCONNECT snow-a.1209k.com:2348 HTTP/1.1\r\nhost: snow-a.1209k.com:2348\r\n\r\nCONNECT snow-de1.snowblossom.org:443 HTTP/1.1\r\nhost: snow-de1.snowblossom.org:443\r\n\r\nCONNECT snow-a.1209k.com:2338 HTTP/1.1\r\nhost: snow-a.1209k.com:2338\r\n\r\nCONNECT snow-tx1.snowblossom.org:2348 HTTP/1.1\r\nhost: snow-tx1.snowblossom.org:2348\r\n\r\nCONNECT snow-tx1.snowblossom.org:2338 HTTP/1.1\r\nhost: snow-tx1.snowblossom.org:2338\r\n\r\nCONNECT snow-tx1.snowblossom.org:80 HTTP/1.1\r\nhost: snow-tx1.snowblossom.org:80\r\n\r\nNote: those ports and hosts are what I am trying to connect to with gRPC.  Something that starts with the string \"CONNECT\" is an HTTP proxy command, not a SOCKS command.  SOCKS uses a binary protocol and expects the first byte to be the SOCKS version. \r\n\r\nIf I use tor, it gives the following error:\r\nJan 16 13:05:06.000 [warn] Socks version 67 not recognized. (This port is not an HTTP proxy; did you want to use HTTPTunnelPort?)\r\n\r\n67 = 'C', which is not surprising since gRPC is attempting to send \"CONNECT\".\r\n\r\nWhen java is configured as above:\r\njava -DsocksProxyHost=localhost -DsocksProxyPort=9112\r\n(and pointed to a real SOCKS proxy rather than nc) parts of my program that just java.net.URL connection work properly (using the proxy).\r\n\r\nThis seems to be a repeat of #5600, but I am certain this isn't a proxy configuration problem. \r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/6613", "user": "fireduck64", "labels": ["bug"], "created": "2020-01-16 21:24:13", "closed": "2020-01-17 21:50:34", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Deadlock on start gRPC server", "body": "### What version of gRPC-Java are you using?\r\n1.26.0\r\n### What is your environment?\r\nLinux, Alpine\r\nopenjdk version \"1.8.0_171\"\r\nOpenJDK Runtime Environment (IcedTea 3.8.0) (Alpine 8.171.11-r0)\r\nOpenJDK 64-Bit Server VM (build 25.171-b11, mixed mode)\r\nNetty - 4.1.44.Final\r\nVertx & Vertx-gRPC - 3.8.4\r\n### What did you expect to see?\r\nProper start of gRPC Server\r\n### What did you see instead?\r\nStart sometimes hangs with deadlock\r\n### Steps to reproduce the bug\r\n[int_threaddump.txt](https://github.com/grpc/grpc-java/files/4058905/int_threaddump.txt)\r\n\r\nI suppose it's a race condition related to synchronization in gRPC (ServerImpl), await in NetServer.start and vertx/nettty event loops (probably single threaded). Probably it could happened at any time if someone start gRPC server and concurrently open new client connection to that server.\r\nIn my case I stopped and started the gGPR server but I'm not sure if it is somehow related.\r\n\r\n### Analysis\r\nWhat I see in the thread dump is the following 2 threads that stays in that state, seems, forever:\r\n>\r\n\"vert.x-eventloop-thread-0\" #39 prio=10 os_prio=0 tid=0x000055711e379000 nid=0x2d waiting for monitor entry [0x00007fb72abc8000]\r\njava.lang.Thread.State: BLOCKED (on object monitor)\r\n  at io.grpc.internal.ServerImpl$ServerListenerImpl.transportCreated(ServerImpl.java:379)\r\n  \\- waiting to lock <0x00000000c559f1a0> (a java.lang.Object)\r\n  at io.grpc.netty.NettyServer$1.initChannel(NettyServer.java:224)\r\n  \\- locked <0x00000000c559bfd8> (a io.grpc.netty.NettyServer)\r\n  at io.netty.channel.ChannelInitializer.initChannel(ChannelInitializer.java:129)\r\n\r\n\"vert.x-worker-thread-12\" #214 prio=10 os_prio=0 tid=0x000055711f2d1800 nid=0x418 in Object.wait() [0x00007fb720656000]\r\njava.lang.Thread.State: WAITING (on object monitor)\r\n  at java.lang.Object.wait(Native Method)\r\n  at java.lang.Object.wait(Object.java:502)\r\n  at io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:252)\r\n  \\- locked <0x00000000c589baa0> (a io.netty.util.concurrent.PromiseTask)\r\n  at io.netty.util.concurrent.DefaultPromise.await(DefaultPromise.java:35)\r\n  at io.grpc.netty.NettyServer.start(NettyServer.java:269)\r\n  at io.grpc.internal.ServerImpl.start(ServerImpl.java:184)\r\n  \\- locked <0x00000000c559f1a0> (a java.lang.Object)\r\n  at io.grpc.internal.ServerImpl.start(ServerImpl.java:90)\r\n>\r\nFrom what I see in these thread dumps and the code I think that this could be the problem (deadlock):\r\n1. Vertx grpc starts server (ServerImpl.start) in vertx blocking thread\r\n2. ServerImpl synchronize on lock and then try (keeping lock) to start server (NetServer.start)\r\n3. NetServer.start opens a channel, binds to it, and since that moment it, I assume, may receive connections from remote clients\r\n4. It seems, at this time a remote client opens connection to this server (already bound)\r\n5. Then in channel's event loop (probably single threaded) is received initChannel which try to get ServerImpl.lock in ServerListenerImpl.transportCreated (coudln't because got by ServerImpl.start)\r\n6. NetServer.start then schedules runnable in channel's event loop and blocks with channelzFuture.await() \r\n7. Now, channelzFuture.await() waits for a runnable to be executed in channel's event loop (probably single threaded)\r\n8. At this point channelzFuture.await keeps ServerImpl.lock lock, while the ServerListenerImpl.transportCreated occupies/blocks (this is what I suppose) the single threaded channel's event loop thus making impossible to process further\r\n\r\nI'm attaching file with thread dumps of the whole JVM", "url": "https://github.com/grpc/grpc-java/issues/6601", "user": "avgustinmm", "labels": ["bug"], "created": "2020-01-14 11:45:22", "closed": "2020-01-24 22:59:16", "commits": {"b8474d61c966f60cc0bad4e5abaca351e90afc9d": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "8c346d00e573c4247427e64be0ce47fe9f75ac84": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "b8474d61c966f60cc0bad4e5abaca351e90afc9d", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["cb4a7fb2de6d2e5aa58e2db097d7fd0b69afef27"], "nameRev": "b8474d61c966f60cc0bad4e5abaca351e90afc9d tags/v1.28.0~81", "commitMessage": "netty: fix a race for channelz at server transport creation\n\nA race condition was reported by user in #6601:\r\n\r\n`ServerImpl.start()` calls `NettyServer.start()` while holding `ServerImpl.lock`. `NettyServer.start()` awaits a submitted runnable in eventloop. However, this pending runnable may never be executed because the eventloop might be executing some other task, like `ServerListenerImpl.transportCreated()`, that is trying to acquire `ServerImpl.lock` causing a deadlock.\r\n\r\nThis PR resolves the particular issue reported in #6601 for server with a single port, but `NettyServer` (https://github.com/grpc/grpc-java/blob/v1.26.0/netty/src/main/java/io/grpc/netty/NettyServer.java#L251) and `ServerImpl` (https://github.com/grpc/grpc-java/blob/v1.26.0/core/src/main/java/io/grpc/internal/ServerImpl.java#L184) in general still have the same potential risk of deadlock, which need further fix. \r\n", "commitDateTime": "2020-01-16 11:53:37", "authoredDateTime": "2020-01-16 11:53:37", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServer.java", "insertions": 8, "deletions": 15, "lines": 23}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyServerTest.java", "insertions": 32, "deletions": 14, "lines": 46}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServer.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServer", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyServer.getListenSocketStats()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyServer.start(io.grpc.internal.ServerListener).2.run()", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 3}, {"spoonMethodName": "io.grpc.netty.NettyServer.start(io.grpc.internal.ServerListener)", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.grpc.netty.NettyServer.shutdown().3.operationComplete(io.netty.channel.ChannelFuture)", "TOT": 5, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "NettyServerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerTest.startStop()", "TOT": 8, "UPD": 2, "INS": 3, "MOV": 1, "DEL": 2}, {"spoonMethodName": "io.grpc.netty.NettyServerTest.getPort_notStarted()", "TOT": 17, "UPD": 2, "INS": 4, "MOV": 8, "DEL": 3}, {"spoonMethodName": "io.grpc.netty.NettyServerTest.childChannelOptions()", "TOT": 8, "UPD": 2, "INS": 3, "MOV": 1, "DEL": 2}, {"spoonMethodName": "io.grpc.netty.NettyServerTest.channelzListenSocket()", "TOT": 9, "UPD": 2, "INS": 4, "MOV": 1, "DEL": 2}, {"spoonMethodName": "io.grpc.netty.NettyServerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerTest.tearDown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "8c346d00e573c4247427e64be0ce47fe9f75ac84", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["5acb70e8b4815368b47ed46c583af531af7af158"], "nameRev": "8c346d00e573c4247427e64be0ce47fe9f75ac84 tags/v1.27.0~2", "commitMessage": "netty: fix a race for channelz at server transport creation\n\nA race condition was reported by user in #6601:\r\n\r\n`ServerImpl.start()` calls `NettyServer.start()` while holding `ServerImpl.lock`. `NettyServer.start()` awaits a submitted runnable in eventloop. However, this pending runnable may never be executed because the eventloop might be executing some other task, like `ServerListenerImpl.transportCreated()`, that is trying to acquire `ServerImpl.lock` causing a deadlock.\r\n\r\nThis PR resolves the particular issue reported in #6601 for server with a single port, but `NettyServer` (https://github.com/grpc/grpc-java/blob/v1.26.0/netty/src/main/java/io/grpc/netty/NettyServer.java#L251) and `ServerImpl` (https://github.com/grpc/grpc-java/blob/v1.26.0/core/src/main/java/io/grpc/internal/ServerImpl.java#L184) in general still have the same potential risk of deadlock, which need further fix. \r\n", "commitDateTime": "2020-01-21 16:56:02", "authoredDateTime": "2020-01-16 11:53:37", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServer.java", "insertions": 8, "deletions": 15, "lines": 23}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyServerTest.java", "insertions": 32, "deletions": 14, "lines": 46}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServer.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServer", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyServer.getListenSocketStats()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyServer.start(io.grpc.internal.ServerListener).2.run()", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 3}, {"spoonMethodName": "io.grpc.netty.NettyServer.start(io.grpc.internal.ServerListener)", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.grpc.netty.NettyServer.shutdown().3.operationComplete(io.netty.channel.ChannelFuture)", "TOT": 5, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "NettyServerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerTest.startStop()", "TOT": 8, "UPD": 2, "INS": 3, "MOV": 1, "DEL": 2}, {"spoonMethodName": "io.grpc.netty.NettyServerTest.getPort_notStarted()", "TOT": 17, "UPD": 2, "INS": 4, "MOV": 8, "DEL": 3}, {"spoonMethodName": "io.grpc.netty.NettyServerTest.childChannelOptions()", "TOT": 8, "UPD": 2, "INS": 3, "MOV": 1, "DEL": 2}, {"spoonMethodName": "io.grpc.netty.NettyServerTest.channelzListenSocket()", "TOT": 9, "UPD": 2, "INS": 4, "MOV": 1, "DEL": 2}, {"spoonMethodName": "io.grpc.netty.NettyServerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerTest.tearDown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b8474d61c966f60cc0bad4e5abaca351e90afc9d"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 15, "lines": 23, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 22, "UPD": 3, "INS": 4, "MOV": 7, "DEL": 8, "spoonFilesChanged": 1, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.NettyServer.shutdown().3.operationComplete(io.netty.channel.ChannelFuture)", "io.grpc.netty.NettyServer.start(io.grpc.internal.ServerListener)", "io.grpc.netty.NettyServer.start(io.grpc.internal.ServerListener).2.run()", "io.grpc.netty.NettyServer", "io.grpc.netty.NettyServer.getListenSocketStats()"]}, {"title": "INTERNAL: Panic! This is a bug!", "body": "### What version of gRPC-Java are you using?\r\n\r\n1.21.0\r\n\r\n### What is your environment?\r\n\r\nLong running server process. Attempting to make a call after some time idle, the reschedule() call fails with Panic.\r\n\r\n### What did you expect to see?\r\n\r\nAPI call succeeds.\r\n\r\n### What did you see instead?\r\n\r\nPanic.\r\n\r\n### Steps to reproduce the bug\r\n\r\nPlease see related [issue on Google Ads Java client library](https://github.com/googleads/google-ads-java/issues/194). ", "url": "https://github.com/grpc/grpc-java/issues/6590", "user": "nwbirnie", "labels": ["bug"], "created": "2020-01-09 12:14:44", "closed": "2020-01-17 21:46:47", "commits": {}, "ttf": 8.000277777777777, "commitsDetails": []}, {"title": "repositories.bzl uses http (not https)", "body": "I see a lot of lines like this:\r\n\r\n        server_urls = [\"http://central.maven.org/maven2\"],\r\n\r\nIf we're actually resolving these they're going to stop working on January 15, 2020. \r\n\r\nI'm not 100% sure this matters, but just in case I wanted to raise the issue. ", "url": "https://github.com/grpc/grpc-java/issues/6536", "user": "elharo", "labels": ["bug"], "created": "2019-12-17 23:50:58", "closed": "2019-12-18 18:00:44", "commits": {"a4299eb6bed3c2f2497f583d0c4620c9f31ec455": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "b6f5233929463431c8e5595fd793c41e280695b4": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "81404352de334fc813552d6e879865023c8dcf62": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "f967a13ff94e90d6290eb2655f08bd2e4b813d44": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "62e8655f1bc4dfb474afbf332ca7571c1454e6ef": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "a4299eb6bed3c2f2497f583d0c4620c9f31ec455", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["ead36d152a003468d26fe939f70bc05ef0a93866"], "nameRev": "a4299eb6bed3c2f2497f583d0c4620c9f31ec455 tags/v1.27.0~37", "commitMessage": "bazel: Use https to download from Maven Central\n\ncentral.maven.org shouldn't have been used in the first place as it isn't one\nof the canonical URLs to Maven Central, but even more importantly we want to\nuse https. The previous URL will probably stop working January 15, 2020[1][2].\n\nFixes #6536\n\n1. https://central.sonatype.org/articles/2019/Apr/30/http-access-to-repo1mavenorg-and-repomavenapacheorg-is-being-deprecated/\n2. https://central.sonatype.org/articles/2019/Nov/15/non-canonical-urls-will-be-redirected-today/\n", "commitDateTime": "2019-12-18 10:00:43", "authoredDateTime": "2019-12-18 09:36:24", "commitGitStats": [{"filePath": "repositories.bzl", "insertions": 32, "deletions": 32, "lines": 64}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "b6f5233929463431c8e5595fd793c41e280695b4", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["f0be78f5eac01afe4ab1bb44ba9e588bc94ce587"], "nameRev": "b6f5233929463431c8e5595fd793c41e280695b4 tags/v1.26.1~3", "commitMessage": "bazel: Use https to download from Maven Central\n\ncentral.maven.org shouldn't have been used in the first place as it isn't one\nof the canonical URLs to Maven Central, but even more importantly we want to\nuse https. The previous URL will probably stop working January 15, 2020[1][2].\n\nFixes #6536\n\n1. https://central.sonatype.org/articles/2019/Apr/30/http-access-to-repo1mavenorg-and-repomavenapacheorg-is-being-deprecated/\n2. https://central.sonatype.org/articles/2019/Nov/15/non-canonical-urls-will-be-redirected-today/\n", "commitDateTime": "2019-12-19 14:44:34", "authoredDateTime": "2019-12-18 09:36:24", "commitGitStats": [{"filePath": "repositories.bzl", "insertions": 32, "deletions": 32, "lines": 64}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "81404352de334fc813552d6e879865023c8dcf62", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["6ecb40e1ba3ddaac0a9a9107c04e2cddb41b4527"], "nameRev": "81404352de334fc813552d6e879865023c8dcf62 remotes/origin/v1.25.x", "commitMessage": "bazel: Use https to download from Maven Central\n\ncentral.maven.org shouldn't have been used in the first place as it isn't one\nof the canonical URLs to Maven Central, but even more importantly we want to\nuse https. The previous URL will probably stop working January 15, 2020[1][2].\n\nFixes #6536\n\n1. https://central.sonatype.org/articles/2019/Apr/30/http-access-to-repo1mavenorg-and-repomavenapacheorg-is-being-deprecated/\n2. https://central.sonatype.org/articles/2019/Nov/15/non-canonical-urls-will-be-redirected-today/\n", "commitDateTime": "2019-12-19 14:53:16", "authoredDateTime": "2019-12-18 09:36:24", "commitGitStats": [{"filePath": "repositories.bzl", "insertions": 32, "deletions": 32, "lines": 64}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "f967a13ff94e90d6290eb2655f08bd2e4b813d44", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["bb48fa569adbce2a3a3ae597ee4342c4bfe09789"], "nameRev": "f967a13ff94e90d6290eb2655f08bd2e4b813d44 remotes/origin/v1.23.x", "commitMessage": "bazel: Use https to download from Maven Central\n\ncentral.maven.org shouldn't have been used in the first place as it isn't one\nof the canonical URLs to Maven Central, but even more importantly we want to\nuse https. The previous URL will probably stop working January 15, 2020[1][2].\n\nFixes #6536\n\n1. https://central.sonatype.org/articles/2019/Apr/30/http-access-to-repo1mavenorg-and-repomavenapacheorg-is-being-deprecated/\n2. https://central.sonatype.org/articles/2019/Nov/15/non-canonical-urls-will-be-redirected-today/\n", "commitDateTime": "2019-12-19 15:02:31", "authoredDateTime": "2019-12-18 09:36:24", "commitGitStats": [{"filePath": "repositories.bzl", "insertions": 31, "deletions": 31, "lines": 62}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "62e8655f1bc4dfb474afbf332ca7571c1454e6ef", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["4ba9e4cee6d462a84bc7a93a6b5620bdacb34d9c"], "nameRev": "62e8655f1bc4dfb474afbf332ca7571c1454e6ef remotes/origin/v1.24.x", "commitMessage": "bazel: Use https to download from Maven Central\n\ncentral.maven.org shouldn't have been used in the first place as it isn't one\nof the canonical URLs to Maven Central, but even more importantly we want to\nuse https. The previous URL will probably stop working January 15, 2020[1][2].\n\nFixes #6536\n\n1. https://central.sonatype.org/articles/2019/Apr/30/http-access-to-repo1mavenorg-and-repomavenapacheorg-is-being-deprecated/\n2. https://central.sonatype.org/articles/2019/Nov/15/non-canonical-urls-will-be-redirected-today/\n", "commitDateTime": "2019-12-19 15:04:18", "authoredDateTime": "2019-12-18 09:36:24", "commitGitStats": [{"filePath": "repositories.bzl", "insertions": 32, "deletions": 32, "lines": 64}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a4299eb6bed3c2f2497f583d0c4620c9f31ec455"], "filteredCommitsReason": {"duplicated": 4, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 32, "deletions": 32, "lines": 64, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["repositories.bzl"]}, {"title": "Example HelloWorldServer does not gracefully shutdown", "body": "### What version of gRPC-Java are you using?\r\nOn a fork up at commit https://github.com/grpc/grpc-java/commit/d168632f8229e387c19e820c26cf1d0f25bb0c84\r\n\r\n### What is your environment?\r\nMac OSX 10.14.6\r\nJava 11.0.2\r\n\r\n### What did you expect to see?\r\nThe server should allow in-flight RPCs to finish\r\n\r\n### What did you see instead?\r\nThe client receives error `WARNING: RPC 1 failed: Status{code=UNAVAILABLE, description=Network closed for unknown reason, cause=null}`\r\n\r\n### Steps to reproduce the bug\r\n- Add a call to `Thread.sleep(15000)` in `io.grpc.examples.helloworld.HelloWorldServer.GreeterImpl.sayHello`\r\n- Build and run the server\r\n- Run the client\r\n- Ctrl+C the server once it gets the request\r\n\r\nIt seems like `server.shutdown()` does not wait for in-flight RPCs to finish before returning. The documentation makes it seem like that it should block. \r\n\r\nI am able to \"fix\" the issue by adding a call to `server.awaitTermination()` in the `stop` method.", "url": "https://github.com/grpc/grpc-java/issues/6511", "user": "dounan", "labels": ["bug"], "created": "2019-12-11 02:53:58", "closed": "2019-12-17 18:37:04", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "DEADLINE_EXCEEDED is triggered after header continuation frame is received", "body": "### What version of gRPC-Java are you using?\r\n1.25\r\n\r\n### What is your environment?\r\nClient: Android\r\nServer: Windows running C++ version of gRPC\r\n\r\n### What did you expect to see?\r\nHTTP/2 implementation in OkHttp library has hard coded frame size of 16384 bytes. In case server is sending a response with trailers that won't fit to max frame size, the frame is split on server side to headers frame and continuation frame. These frames should be then read on client side and stream should get closed. \r\n\r\n### What did you see instead?\r\nIn case the server sends headers frame and continuation frame, gRPC-java implementation will read the frames, but it doesn't handle the end of stream correctly and therefore it keeps on waiting for more data. Finally DEADLINE_EXCEEDED error is triggered after the configured timeout since there will never be more data coming as server already sent everything.\r\n\r\n### Steps to reproduce the bug\r\n1. Make a request from Android client to server\r\n2. Send response (e.g. error) from server with large trailing metadata so that all data won't fit to OkHttp's max frame size (16384 bytes)\r\n3. Android client receives the data, but will keep on waiting more and original request will finally fail with DEADLINE_EXCEEDED error\r\n\r\n**The problem is on below code:**\r\n```java\r\nprivate void readHeaders(Handler handler, int length, byte flags, int streamId)\r\n     throws IOException {\r\n    if (streamId == 0) throw ioException(\"PROTOCOL_ERROR: TYPE_HEADERS streamId == 0\");\r\n\r\n    boolean endStream = (flags & FLAG_END_STREAM) != 0;\r\n\r\n    short padding = (flags & FLAG_PADDED) != 0 ? (short) (source.readByte() & 0xff) : 0;\r\n\r\n    if ((flags & FLAG_PRIORITY) != 0) {\r\n        readPriority(handler, streamId);\r\n        length -= 5; // account for above read.\r\n    }\r\n\r\n    length = lengthWithoutPadding(length, flags, padding);\r\n\r\n    List<Header> headerBlock = readHeaderBlock(length, padding, flags, streamId);\r\n\r\n    handler.headers(false, endStream, streamId, -1, headerBlock, HeadersMode.HTTP_20_HEADERS);\r\n}\r\n```\r\n\r\nHere the `readHeaderBlock` method reads the header frame and the continuation frame correctly and updates the member variable `continuation` with flags from the continuation frame. However, in the above code `endStream` is already evaluated based on the flags received from the first frame, which will not have the `FLAG_END_STREAM`. So the `endStream` will never be true if there is a continuation frame and this will cause that client will keep on waiting for more data.\r\n\r\n**Solution proposal:**\r\n\r\n```java\r\nprivate void readHeaders(Handler handler, int length, byte flags, int streamId)\r\n     throws IOException {\r\n    if (streamId == 0) throw ioException(\"PROTOCOL_ERROR: TYPE_HEADERS streamId == 0\");\r\n\r\n    short padding = (flags & FLAG_PADDED) != 0 ? (short) (source.readByte() & 0xff) : 0;\r\n\r\n    if ((flags & FLAG_PRIORITY) != 0) {\r\n        readPriority(handler, streamId);\r\n        length -= 5; // account for above read.\r\n    }\r\n\r\n    length = lengthWithoutPadding(length, flags, padding);\r\n\r\n    List<Header> headerBlock = readHeaderBlock(length, padding, flags, streamId);\r\n\r\n    boolean endStream = (continuation.flags & FLAG_END_STREAM) != 0;\r\n\r\n    handler.headers(false, endStream, streamId, -1, headerBlock, HeadersMode.HTTP_20_HEADERS);\r\n}\r\n```\r\n\r\nInstead of evaluating `endStream` immediately from flags received on first frame, flags should be evaluated after reading the header block in which case `continuation.flags` should always have the flags for the whole response. This way the stream end is received correctly and client will not keep on waiting for more data.", "url": "https://github.com/grpc/grpc-java/issues/6484", "user": "jaankoi", "labels": ["bug"], "created": "2019-12-04 07:38:14", "closed": "2019-12-10 16:20:25", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Known uninteresting log is INFO level", "body": "in the #6423, `Connection reset by peer` exception is logged as `INFO` level. This log message should be logged as `FINE`.\r\n\r\n```\r\n Nov 19, 2019 5:23:25 PM io.grpc.netty.shaded.io.grpc.netty.NettyServerTransport notifyTerminated \r\nINFO: Transport failed \r\nio.grpc.netty.shaded.io.netty.channel.unix.Errors$NativeIoException: readAddress(..) failed: Connection reset by peer \r\n```", "url": "https://github.com/grpc/grpc-java/issues/6478", "user": "creamsoup", "labels": ["bug"], "created": "2019-12-03 01:44:10", "closed": "2019-12-03 21:05:05", "commits": {"1573e0d4002e82ae535e7cab6b7954c4fbb5311a": {"commitGHEventType": "referenced", "commitUser": "creamsoup"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "1573e0d4002e82ae535e7cab6b7954c4fbb5311a", "commitGHEventType": "referenced", "commitUser": "creamsoup", "commitParents": ["54b7847a7febc816f97e45257a12f47066345e14"], "nameRev": "1573e0d4002e82ae535e7cab6b7954c4fbb5311a tags/v1.26.0~6", "commitMessage": "netty: log NativeIoException as FINE level (#6477)\n\nresolves #6478 ", "commitDateTime": "2019-12-03 13:05:04", "authoredDateTime": "2019-12-03 13:05:04", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerTransport.java", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyServerTransportTest.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerTransport", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerTransport.getLogLevel(java.lang.Throwable)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "NettyServerTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerTransportTest.fakeNettyNativeIoException()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "The grpc-cronet Android library build produces an empty aar", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n\r\n1.25.0\r\n\r\n### What is your environment?\r\n\r\nAndroid\r\nTarget/compile SDK version is 28.\r\n\r\n### What did you expect to see?\r\n\r\nI expected to be able to use the `CronetChannelBuilder` class, but I wasn't.\r\n\r\n### What did you see instead?\r\n\r\nUpon opening the aar file downloaded from [maven central](https://mvnrepository.com/artifact/io.grpc/grpc-cronet/1.25.0) I noticed there were no classes included and the file has a size of 543 bytes.\r\n\r\n### Steps to reproduce the bug\r\n\r\nRunning the grpc-cronet build with gradlew produces an aar that is practically empty.\r\n\r\nAs far as I can tell the line `minifyEnabled true` in the release build causes all Java classes to be left out of the final aar. Because this is a library and there is no entry point all code is considered dead. I also think `proguardFiles` should be replaced with `consumerProguardFiles` in the release build configuration for an Android library.\r\n\r\nWhen running into this issue we started to doubt whether grpc-cronet was actually meant to be released on maven central yet. It is however recommended to use cronet for gRPC on Android [here](https://developer.android.com/guide/topics/connectivity/grpc).\r\n\r\nAm I missing something here? I couldn't really believe grpc-cronet has had 4 releases published to maven central, the first almost two months ago, with the actual product being in an unusable state.", "url": "https://github.com/grpc/grpc-java/issues/6447", "user": "MaartenR", "labels": ["bug"], "created": "2019-11-20 16:16:26", "closed": "2019-11-20 20:12:54", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "io.grpc.StatusRuntimeException: INTERNAL: Panic! This is a bug!  Caused by: java.lang.OutOfMemoryError: unable to create native thread: possibly out of memory or process/resource limits reached", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n\r\n### What is your environment?\r\n<!-- operating system (Linux, Windows,...) and version, jdk version, etc. -->\r\n\r\n### What did you expect to see?\r\n\r\n### What did you see instead?\r\n\r\n### Steps to reproduce the bug\r\n\r\n<!-- Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs). -->\r\n", "url": "https://github.com/grpc/grpc-java/issues/6421", "user": "Zhuliuer666", "labels": ["bug"], "created": "2019-11-13 06:57:30", "closed": "2019-11-13 07:02:08", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Client blocks exactly at the third call while calling the unary method in loop?", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using?\r\n1.25.0\r\n### What is your environment?\r\n<!-- operating system (Linux, Windows,...) and version, JDK version, etc. -->\r\nLinux centos \r\n### What did you expect to see?\r\nThe client should able to call the GRPC server in the remote host in a loop using the same channel.\r\n### What did you see instead?\r\nWhile calling in the loop, the client receives response 2 times and blocks at the third attempt forever. It happens only if I call a remote machine in AWS from my local machine. Local Client to Local server or AWS EC2 Client to Another EC2 server working as expected.\r\n### Steps to reproduce the bug\r\nHost a GRPC server in the remote machine. In the client, create a channel and use the same channel instance to call the remote method in a loop and shut down the channel after the loop.\r\n<!-- Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs). -->\r\n\r\nClient code:\r\n```\r\nTestGrpcClientBase client = new TestGrpcClientBase(address, 8082);\r\n        for (int i = 0; i < 5; i++) {\r\n            long startTime = System.currentTimeMillis();\r\n            client.creatContact();\r\n            System.out.println(\"Time Taken -- \"+(System.currentTimeMillis() - startTime));\r\n        }\r\n        client.shutdown();\r\n```\r\n\r\n\r\nClient logs: \r\n```\r\nCalling server from client to create contact =================> \r\n-Dio.netty.leakDetection.level: simple\r\n-Dio.netty.leakDetection.targetRecords: 4\r\n-Dio.netty.buffer.checkAccessible: true\r\n-Dio.netty.buffer.checkBounds: true\r\nLoaded default ResourceLeakDetector: io.netty.util.ResourceLeakDetector@16c1ce4\r\n-Dio.netty.processId: 38201 (auto-detected)\r\n-Djava.net.preferIPv4Stack: false\r\n-Djava.net.preferIPv6Addresses: false\r\nLoopback interface: lo0 (lo0, 0:0:0:0:0:0:0:1)\r\nFailed to get SOMAXCONN from sysctl and file /proc/sys/net/core/somaxconn. Default: 128\r\n-Dio.netty.machineId: 18:65:90:ff:fe:cc:5f:83 (auto-detected)\r\n-Dio.netty.allocator.numHeapArenas: 16\r\n-Dio.netty.allocator.numDirectArenas: 16\r\n-Dio.netty.allocator.pageSize: 8192\r\n-Dio.netty.allocator.maxOrder: 11\r\n-Dio.netty.allocator.chunkSize: 16777216\r\n-Dio.netty.allocator.tinyCacheSize: 512\r\n-Dio.netty.allocator.smallCacheSize: 256\r\n-Dio.netty.allocator.normalCacheSize: 64\r\n-Dio.netty.allocator.maxCachedBufferCapacity: 32768\r\n-Dio.netty.allocator.cacheTrimInterval: 8192\r\n-Dio.netty.allocator.cacheTrimIntervalMillis: 0\r\n-Dio.netty.allocator.useCacheForAllThreads: true\r\n-Dio.netty.allocator.maxCachedByteBuffersPerChunk: 1023\r\n-Dio.netty.allocator.type: pooled\r\n-Dio.netty.threadLocalDirectBufferSize: 0\r\n-Dio.netty.maxThreadLocalCharBufferSize: 16384\r\n-Dio.netty.recycler.maxCapacityPerThread: 4096\r\n-Dio.netty.recycler.maxSharedCapacityFactor: 2\r\n-Dio.netty.recycler.linkCapacity: 16\r\n-Dio.netty.recycler.ratio: 8\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND SETTINGS: ack=false settings={ENABLE_PUSH=0, MAX_CONCURRENT_STREAMS=0, INITIAL_WINDOW_SIZE=1048576, MAX_HEADER_LIST_SIZE=8192}\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=983041\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] INBOUND SETTINGS: ack=false settings={INITIAL_WINDOW_SIZE=268435456}\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND SETTINGS: ack=true\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] INBOUND SETTINGS: ack=true\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] INBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=268369921\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND HEADERS: streamId=3 headers=GrpcHttp2OutboundHeaders[:authority: xxxxxxxxxxxxxx.com:8082, :path: /pb.ContactService/CreateContact, :method: POST, :scheme: http, content-type: application/grpc, te: trailers, user-agent: grpc-java-netty/1.25.0, grpc-accept-encoding: gzip, grpc-timeout: 13634673u] streamDependency=0 weight=16 exclusive=false padding=0 endStream=false\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND DATA: streamId=3 padding=0 endStream=true length=301 bytes=00000001280a063133333233321204313231322201412201422201432a01013201013a01014201014a01015a0576696a6179620673616e6b61726a0f76696a61...\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] INBOUND HEADERS: streamId=3 headers=GrpcHttp2ResponseHeaders[:status: 200, content-type: application/grpc, grpc-encoding: identity, grpc-accept-encoding: gzip, x-envoy-upstream-service-time: 79, date: Tue, 12 Nov 2019 06:02:20 GMT, server: envoy] padding=0 endStream=false\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] INBOUND DATA: streamId=3 padding=0 endStream=false length=301 bytes=00000001280a063133333233321204313231322201412201422201432a01013201013a01014201014a01015a0576696a6179620673616e6b61726a0f76696a61...\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] INBOUND HEADERS: streamId=3 headers=GrpcHttp2ResponseHeaders[grpc-status: 0] padding=0 endStream=true\r\n<======================== Contact saved successfully : 133232\r\nTime Taken -- 1910\r\nCalling server from client to create contact =================> \r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND HEADERS: streamId=5 headers=GrpcHttp2OutboundHeaders[:authority: xxxxxxxxxxxxxx.com:8082, :path: /pb.ContactService/CreateContact, :method: POST, :scheme: http, content-type: application/grpc, te: trailers, user-agent: grpc-java-netty/1.25.0, grpc-accept-encoding: gzip, grpc-timeout: 14999830u] streamDependency=0 weight=16 exclusive=false padding=0 endStream=false\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND DATA: streamId=5 padding=0 endStream=true length=301 bytes=00000001280a063133333233321204313231322201412201422201432a01013201013a01014201014a01015a0576696a6179620673616e6b61726a0f76696a61...\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] INBOUND HEADERS: streamId=5 headers=GrpcHttp2ResponseHeaders[:status: 200, content-type: application/grpc, grpc-encoding: identity, grpc-accept-encoding: gzip, x-envoy-upstream-service-time: 73, date: Tue, 12 Nov 2019 06:02:21 GMT, server: envoy] padding=0 endStream=false\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] INBOUND DATA: streamId=5 padding=0 endStream=false length=301 bytes=00000001280a063133333233321204313231322201412201422201432a01013201013a01014201014a01015a0576696a6179620673616e6b61726a0f76696a61...\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] INBOUND HEADERS: streamId=5 headers=GrpcHttp2ResponseHeaders[grpc-status: 0] padding=0 endStream=true\r\n<======================== Contact saved successfully : 133232\r\nTime Taken -- 351\r\nCalling server from client to create contact =================> \r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND HEADERS: streamId=7 headers=GrpcHttp2OutboundHeaders[:authority: xxxxxxxxxxxxxx.com:8082, :path: /pb.ContactService/CreateContact, :method: POST, :scheme: http, content-type: application/grpc, te: trailers, user-agent: grpc-java-netty/1.25.0, grpc-accept-encoding: gzip, grpc-timeout: 14999864u] streamDependency=0 weight=16 exclusive=false padding=0 endStream=false\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND DATA: streamId=7 padding=0 endStream=true length=301 bytes=00000001280a063133333233321204313231322201412201422201432a01013201013a01014201014a01015a0576696a6179620673616e6b61726a0f76696a61...\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND PING: ack=false bytes=1111\r\n[id: 0x2fc20e36, L:/192.168.58.42:52335 - R:xxxxxxxxxxxxxx:8082] OUTBOUND RST_STREAM: streamId=7 errorCode=8\r\nRPC failed: {0}Status{code=DEADLINE_EXCEEDED, description=deadline exceeded after 14999797421ns. [remote_addr=xxxxxxxxxxxxxx:8082], cause=null}\r\nTime Taken -- 15002\r\n```\r\n\r\nServer logs:\r\n```\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] OUTBOUND SETTINGS: ack=false settings={MAX_CONCURRENT_STREAMS=10, INITIAL_WINDOW_SIZE=1048576, MAX_HEADER_LIST_SIZE=8192}\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] OUTBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=983041\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] INBOUND SETTINGS: ack=false settings={ENABLE_PUSH=0, INITIAL_WINDOW_SIZE=268435456}\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] OUTBOUND SETTINGS: ack=true\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] INBOUND WINDOW_UPDATE: streamId=0 windowSizeIncrement=268369921\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] INBOUND HEADERS: streamId=1 headers=GrpcHttp2RequestHeaders[:path: /pb.ContactService/CreateContact, :authority: xxxxxxxxxx:8082, :method: POST, :scheme: http, te: trailers, content-type: application/grpc, user-agent: grpc-java-netty/1.25.0, grpc-accept-encoding: gzip, grpc-timeout: 13634673u, x-forwarded-proto: http, x-request-id: f1e9257d-9e9e-47e6-a049-33080ff5fad7, x-envoy-expected-rq-timeout-ms: 15000] padding=0 endStream=false\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] INBOUND DATA: streamId=1 padding=0 endStream=true length=301 bytes=00000001280a063133333233321204313231322201412201422201432a01013201013a01014201014a01015a0576696a6179620673616e6b61726a0f76696a61...\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] INBOUND SETTINGS: ack=true\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] OUTBOUND HEADERS: streamId=1 headers=GrpcHttp2OutboundHeaders[:status: 200, content-type: application/grpc, grpc-encoding: identity, grpc-accept-encoding: gzip] streamDependency=0 weight=16 exclusive=false padding=0 endStream=false\r\nGRPC call code latency timeMS 71\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] OUTBOUND DATA: streamId=1 padding=0 endStream=false length=301 bytes=00000001280a063133333233321204313231322201412201422201432a01013201013a01014201014a01015a0576696a6179620673616e6b61726a0f76696a61...\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] OUTBOUND HEADERS: streamId=1 headers=GrpcHttp2OutboundHeaders[grpc-status: 0] streamDependency=0 weight=16 exclusive=false padding=0 endStream=true\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] INBOUND HEADERS: streamId=3 headers=GrpcHttp2RequestHeaders[:path: /pb.ContactService/CreateContact, :authority: xxxxxxxxxx:8082, :method: POST, :scheme: http, te: trailers, content-type: application/grpc, user-agent: grpc-java-netty/1.25.0, grpc-accept-encoding: gzip, grpc-timeout: 14999830u, x-forwarded-proto: http, x-request-id: d55d432b-eb9c-48a7-bc78-5927073b359f, x-envoy-expected-rq-timeout-ms: 15000] padding=0 endStream=false\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] INBOUND DATA: streamId=3 padding=0 endStream=true length=301 bytes=00000001280a063133333233321204313231322201412201422201432a01013201013a01014201014a01015a0576696a6179620673616e6b61726a0f76696a61...\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] OUTBOUND HEADERS: streamId=3 headers=GrpcHttp2OutboundHeaders[:status: 200, content-type: application/grpc, grpc-encoding: identity, grpc-accept-encoding: gzip] streamDependency=0 weight=16 exclusive=false padding=0 endStream=false\r\nGRPC call code latency timeMS 70\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] OUTBOUND DATA: streamId=3 padding=0 endStream=false length=301 bytes=00000001280a063133333233321204313231322201412201422201432a01013201013a01014201014a01015a0576696a6179620673616e6b61726a0f76696a61...\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] OUTBOUND HEADERS: streamId=3 headers=GrpcHttp2OutboundHeaders[grpc-status: 0] streamDependency=0 weight=16 exclusive=false padding=0 endStream=true\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] OUTBOUND PING: ack=false bytes=57005\r\n[id: 0x6d3c9880, L:/127.0.0.1:8086 - R:/127.0.0.1:57450] INBOUND PING: ack=true bytes=57005\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/6417", "user": "sankarvj", "labels": ["bug"], "created": "2019-11-12 06:07:40", "closed": "2020-03-26 20:18:51", "commits": {}, "ttf": 135.00027777777777, "commitsDetails": []}, {"title": "abstract class NameResolver has recursion loop in non-abstract start methods", "body": "### What version of gRPC-Java are you using?\r\n1.24.1\r\n\r\n### What is your environment?\r\nmacOS\r\n\r\n### Steps to reproduce the bug\r\nIf you create an implementation of NameResolver and don't override one of start(Listener) or start(Listener2), you get an infinite loop and stack overflow.\r\n\r\nYes, my implementation is incorrect (as I'm experimenting in an effort to understand how this works), but it seems this condition should be prevented somehow.\r\n\r\nIt's easy to see in the source code that these two methods delegate to each other.\r\n\r\n```\r\n\"main@1\" prio=5 tid=0x1 nid=NA runnable\r\n  java.lang.Thread.State: RUNNABLE\r\n\t  at io.deephaven.dhservice.client.UnifiedServiceGrpcImpl$MyNameResolver.start(UnifiedServiceGrpcImpl.java:89)\r\n\t  at io.grpc.NameResolver.start(NameResolver.java:101)\r\n\t  at io.deephaven.dhservice.client.UnifiedServiceGrpcImpl$MyNameResolver.start(UnifiedServiceGrpcImpl.java:94)\r\n\t  at io.grpc.NameResolver.start(NameResolver.java:78)\r\n\t  at io.deephaven.dhservice.client.UnifiedServiceGrpcImpl$MyNameResolver.start(UnifiedServiceGrpcImpl.java:89)\r\n\t  at io.grpc.NameResolver.start(NameResolver.java:101)\r\n\t  at io.deephaven.dhservice.client.UnifiedServiceGrpcImpl$MyNameResolver.start(UnifiedServiceGrpcImpl.java:94)\r\n\t  at io.grpc.NameResolver.start(NameResolver.java:78)\r\n\t  at io.deephaven.dhservice.client.UnifiedServiceGrpcImpl$MyNameResolver.start(UnifiedServiceGrpcImpl.java:89)\r\n\t  at io.grpc.NameResolver.start(NameResolver.java:101)\r\n\t  at io.deephaven.dhservice.client.UnifiedServiceGrpcImpl$MyNameResolver.start(UnifiedServiceGrpcImpl.java:94)\r\n\t  at io.grpc.NameResolver.start(NameResolver.java:78)\r\n\r\n```", "url": "https://github.com/grpc/grpc-java/issues/6410", "user": "darinpetty", "labels": ["bug"], "created": "2019-11-07 21:13:15", "closed": "2019-11-08 20:26:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "There is a recursion loop in NameResolver.", "body": "### What version of gRPC-Java are you using?\r\n1.24.1\r\n\r\nThere is a recursion loop in NameResolver.\r\nnewNameResolver(URI targetUri, final Args args)\r\ndelegates to \r\nnewNameResolver(URI targetUri, final Helper helper)\r\ndelegates to \r\n newNameResolver(URI targetUri, final Attributes params)\r\ndelegates back to \r\nnewNameResolver(URI targetUri, final Args args)\r\n\r\nThis can be triggered with \r\nNameResolverProvider.asFactory().newNameResolver(URI.create(\"localhost:22023\"), NameResolver.Args.newBuilder()\r\n                .setDefaultPort(22023)\r\n                .setProxyDetector(pd)\r\n                .setServiceConfigParser(new ScParser())\r\n                .setSynchronizationContext(new SynchronizationContext(UncaughtExceptionHandlers.systemExit()))\r\n                .build())\r\n\r\n\r\n\"main@1\" prio=5 tid=0x1 nid=NA runnable\r\n  java.lang.Thread.State: RUNNABLE\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:207)\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:233)\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:188)\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:205)\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:233)\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:188)\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:205)\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:233)\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:188)\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:205)\r\n\t  at io.grpc.NameResolver$Factory.newNameResolver(NameResolver.java:233)\r\n\t  at io.grpc.NameResolverRegistry$NameResolverFactory.newNameResolver(NameResolverRegistry.java:154)\r\n\t  at io.deephaven.dhservice.client.UnifiedServiceGrpcImpl.<init>(UnifiedServiceGrpcImpl.java:151)\r\n\t  at io.deephaven.dhservice.client.UnifiedServiceGrpcImpl.make(UnifiedServiceGrpcImpl.java:55)\r\n\t  at io.deephaven.dhservice.UniversalServiceTest.testSingleConnection(UniversalServiceTest.java:83)\r\n\t  at sun.reflect.NativeMethodAccessorImpl.invoke0(NativeMethodAccessorImpl.java:-1)\r\n\t  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\t  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\t  at java.lang.reflect.Method.invoke(Method.java:498)\r\n\t  at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\r\n\t  at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\t  at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\r\n\t  at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\t  at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\r\n\t  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\r\n\t  at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\r\n\t  at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\r\n\t  at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\r\n\t  at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\r\n\t  at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\r\n\t  at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\r\n\t  at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\t  at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\t  at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\r\n\t  at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\r\n\t  at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\t  at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\t  at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\t  at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)", "url": "https://github.com/grpc/grpc-java/issues/6408", "user": "darinpetty", "labels": ["bug"], "created": "2019-11-07 19:18:19", "closed": "2019-11-08 20:28:01", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Compilation error with generated code in Netbeans with oneof in prototype", "body": "<!-- Please answer these questions before submitting a bug report. -->\r\n\r\n### What version of gRPC-Java are you using? V1.24.0\r\n\r\n### What is your environment? \r\n<!-- operating system (Linux, Windows,...) and version, jdk version, etc. -->\r\n\r\nProduct Version: Apache NetBeans IDE 11.2\r\nJava: 1.8.0_231; Java HotSpot(TM) Server VM 25.231-b11\r\nRuntime: Java(TM) SE Runtime Environment 1.8.0_231-b11\r\nSystem: Windows 10 version 10.0 running on x86; Cp1252; en_US (nb)\r\nUser directory: C:\\Users\\NCR\\AppData\\Roaming\\NetBeans\\11.2\r\nCache directory: C:\\Users\\NCR\\AppData\\Local\\NetBeans\\Cache\\11.2\r\n\r\n### What did you expect to see?  I expected the build to complete\r\n\r\n### What did you see instead?  I get a compilation error in the generated code:\r\n\r\ncd E:\\Source\\Phase3.9\\java\\EdgeClient; \"JAVA_HOME=C:\\\\Program Files (x86)\\\\Java\\\\jdk1.8.0_231\" cmd /c \"\\\"\\\"C:\\\\Program Files (x86)\\\\NetBeans-11.2\\\\netbeans\\\\java\\\\maven\\\\bin\\\\mvn.cmd\\\" -Dmaven.ext.class.path=\\\"C:\\\\Program Files (x86)\\\\NetBeans-11.2\\\\netbeans\\\\java\\\\maven-nblib\\\\netbeans-eventspy.jar\\\" -Dfile.encoding=UTF-8 clean install\\\"\"\r\nScanning for projects...\r\n------------------------------------------------------------------------\r\nDetecting the operating system and CPU architecture\r\n------------------------------------------------------------------------\r\nos.detected.name: windows\r\nos.detected.arch: x86_32\r\nos.detected.version: 10.0\r\nos.detected.version.major: 10\r\nos.detected.version.minor: 0\r\nos.detected.classifier: windows-x86_32\r\n                                                                        \r\n------------------------------------------------------------------------\r\nBuilding EdgeClient 1.0-SNAPSHOT\r\n------------------------------------------------------------------------\r\n\r\n--- maven-clean-plugin:2.5:clean (default-clean) @ EdgeClient ---\r\nDeleting E:\\Source\\Phase3.9\\java\\EdgeClient\\target\r\n\r\n--- protobuf-maven-plugin:0.6.1:compile (default) @ EdgeClient ---\r\nCompiling 2 proto file(s) to E:\\Source\\Phase3.9\\java\\EdgeClient\\target\\generated-sources\\protobuf\\java\r\n\r\n--- protobuf-maven-plugin:0.6.1:compile-custom (default) @ EdgeClient ---\r\nCompiling 2 proto file(s) to E:\\Source\\Phase3.9\\java\\EdgeClient\\target\\generated-sources\\protobuf\\grpc-java\r\n\r\n--- maven-resources-plugin:2.6:resources (default-resources) @ EdgeClient ---\r\nUsing 'UTF-8' encoding to copy filtered resources.\r\nskip non existing resourceDirectory E:\\Source\\Phase3.9\\java\\EdgeClient\\src\\main\\resources\r\nCopying 2 resources\r\nCopying 2 resources\r\n\r\n--- maven-compiler-plugin:3.1:compile (default-compile) @ EdgeClient ---\r\nChanges detected - recompiling the module!\r\nCompiling 8 source files to E:\\Source\\Phase3.9\\java\\EdgeClient\\target\\classes\r\n-------------------------------------------------------------\r\nCOMPILATION ERROR : \r\n-------------------------------------------------------------\r\n/E:/Source/Phase3.9/java/EdgeClient/target/generated-sources/protobuf/java/com/ncr/edge/client/rpc/EdgeMessage.java:[1079,48] cannot find symbol\r\n  symbol:   class InternalOneOfEnum\r\n  location: class com.google.protobuf.AbstractMessage\r\n/E:/Source/Phase3.9/java/EdgeClient/target/generated-sources/protobuf/java/com/ncr/edge/client/rpc/EdgeMessage.java:[2048,48] cannot find symbol\r\n  symbol:   class InternalOneOfEnum\r\n  location: class com.google.protobuf.AbstractMessage\r\n2 errors \r\n-------------------------------------------------------------\r\n------------------------------------------------------------------------\r\nBUILD FAILURE\r\n------------------------------------------------------------------------\r\nTotal time: 3.849 s\r\nFinished at: 2019-11-05T08:56:02-05:00\r\nFinal Memory: 15M/36M\r\n------------------------------------------------------------------------\r\nFailed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.1:compile (default-compile) on project EdgeClient: Compilation failure: Compilation failure:\r\n/E:/Source/Phase3.9/java/EdgeClient/target/generated-sources/protobuf/java/com/ncr/edge/client/rpc/EdgeMessage.java:[1079,48] cannot find symbol\r\nsymbol:   class InternalOneOfEnum\r\nlocation: class com.google.protobuf.AbstractMessage\r\n/E:/Source/Phase3.9/java/EdgeClient/target/generated-sources/protobuf/java/com/ncr/edge/client/rpc/EdgeMessage.java:[2048,48] cannot find symbol\r\nsymbol:   class InternalOneOfEnum\r\nlocation: class com.google.protobuf.AbstractMessage\r\n-> [Help 1]\r\n\r\nTo see the full stack trace of the errors, re-run Maven with the -e switch.\r\nRe-run Maven using the -X switch to enable full debug logging.\r\n\r\nFor more information about the errors and possible solutions, please read the following articles:\r\n[Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\r\n\r\n\r\n### Steps to reproduce the bug\r\n[EdgeClient.zip](https://github.com/grpc/grpc-java/files/3809356/EdgeClient.zip)\r\n\r\n\r\n<!-- Make sure you include information that can help us debug (full error message, exception listing, stack trace, logs). -->\r\n\r\nThis same prototype works just fine in C++.  I just downloaded all the Java today so it is the latest.", "url": "https://github.com/grpc/grpc-java/issues/6397", "user": "dm185016", "labels": ["bug"], "created": "2019-11-05 14:15:17", "closed": "2019-11-12 16:38:28", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "ComputeEngineChannelBuilder has wrong signature", "body": "The generic type in `ComputeEngineChannelBuilder` class signature\r\n```java\r\npublic final class ComputeEngineChannelBuilder\r\n    extends ForwardingChannelBuilder<GoogleDefaultChannelBuilder> \r\n```\r\nis wrong, it should be `ForwardingChannelBuilder<ComputeEngineChannelBuilder> `\r\n\r\nHowever, fixing the bug might be ABI breaking for existing users.\r\n\r\ncc @zhangkun83 ", "url": "https://github.com/grpc/grpc-java/issues/6367", "user": "dapengzhang0", "labels": ["bug"], "created": "2019-10-31 18:17:59", "closed": "2019-11-01 19:04:53", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "grpc-interop-testing on Maven Central no longer includes tar/zip", "body": "Also applies to grpc-benchmarks, but that's not as big of a deal.\r\n\r\nIt seems the last version the zips were included was 1.18.0. I assume this was broken when we swapped to the maven-publish plugin.\r\n\r\nCC @creamsoup ", "url": "https://github.com/grpc/grpc-java/issues/6365", "user": "ejona86", "labels": ["bug"], "created": "2019-10-31 16:30:38", "closed": "2019-11-05 01:16:13", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Update OpenCensus to 0.24.0", "body": "In build.gradle.\r\n\r\nMost other projects in the GCP orbit have already migrated to this version", "url": "https://github.com/grpc/grpc-java/issues/6357", "user": "elharo", "labels": ["bug"], "created": "2019-10-30 14:32:08", "closed": "2019-10-30 17:47:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Update google-auth-version to 0.18.0", "body": "In build.gradle", "url": "https://github.com/grpc/grpc-java/issues/6356", "user": "elharo", "labels": ["bug"], "created": "2019-10-30 14:30:43", "closed": "2019-10-30 20:25:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "netty-tcnative incompatible with Conscrypt provider", "body": "When [using conscrypt](https://github.com/grpc/grpc-java/blob/master/SECURITY.md#bundling-conscrypt) like:\r\n```java\r\nSecurity.insertProviderAt(Conscrypt.newProvider(), 1);\r\n```\r\n\r\nOn one machine we got lots of weird failures, but also:\r\n```\r\njava.lang.NoSuchFieldException\r\n        at io.grpc.netty.shaded.io.netty.handler.ssl.OpenSslX509TrustManagerWrapper$3.run(OpenSslX509TrustManagerWrapper.java:123)\r\n```\r\n\r\nSource code for line: https://github.com/netty/netty/blob/netty-4.1.41.Final/handler/src/main/java/io/netty/handler/ssl/OpenSslX509TrustManagerWrapper.java#L123\r\n\r\nIt looks like Netty is trying to dig into the JDK to reuse code. But that is only used in ReferenceCountedOpenSslContext which is when Netty is using tcnative.\r\n\r\nGrpcSslContexts [prefers tcnative](https://github.com/grpc/grpc-java/blob/ed845991dbb39401425d85e9aa6289afa5db5374/netty/src/main/java/io/grpc/netty/GrpcSslContexts.java#L228), which is how tcnative is being selected. Netty then tries to use Conscrypt because of [`getInstance(\"TLS\")`](https://github.com/netty/netty/blob/netty-4.1.41.Final/handler/src/main/java/io/netty/handler/ssl/OpenSslX509TrustManagerWrapper.java#L154).\r\n\r\nIt's unclear what the best solution is here. We probably do want to figure out a fix for Netty to work with Conscrypt, but it's unclear what rules Netty should use, since it is already in hack territory. In the short-term, if Conscrypt is the provider for `\"TLS\"` we could select JDK+Conscrypt instead of tcnative in GrpcSslContext.\r\n\r\nCC @normanmaurer", "url": "https://github.com/grpc/grpc-java/issues/6315", "user": "ejona86", "labels": ["bug"], "created": "2019-10-22 16:31:23", "closed": "2020-06-25 20:11:26", "commits": {}, "ttf": 247.00027777777777, "commitsDetails": []}, {"title": "Can't compile when proto definition contains oneOf field type", "body": "Please answer these questions before submitting a bug report.\r\n\r\n### What version of gRPC are you using?\r\n      artifact = 'io.grpc:protoc-gen-grpc-java:1.24.0'\r\n\r\n### What operating system (Linux, Windows,...) and version?\r\n       MacOS Mojave : v10.14.6\r\n### What did you expect to see?\r\n      Should compile and generate from proto definitions without errors\r\n### What did you see instead?\r\n```\r\nTask :compileKotlin FAILED e : Supertypes of the following classes cannot be resolved. \r\nPlease make sure you have the required dependencies in the classpath: \r\nclass entity.grpc.User.MyAgeCase, unresolved supertypes: InternalOneOfEnum\r\n```\r\n\r\n### Steps to reproduce the bug\r\n    message User {\r\n        oneof my_age {\r\n           string age = 26;\r\n        string age_baz = 29;\r\n       }\r\n    }\r\nMake sure you include information that can help us debug (full error message, exception listing, stack trace, logs).\r\n\r\n##### Gradle\r\n```\r\nbuildscript {\r\n    ext.kotlin_version = '1.3.50'\r\n\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n\r\n    dependencies {\r\n        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'\r\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\r\n    }\r\n}\r\n\r\nplugins {\r\n    id 'idea'\r\n    id 'java'\r\n    id \"org.flywaydb.flyway\" version \"6.0.4\"\r\n    id 'org.jetbrains.kotlin.jvm' version '1.3.41'\r\n    id 'com.google.protobuf' version '0.8.8'\r\n}\r\n\r\nprotobuf {\r\n    protoc {\r\n        artifact = \"com.google.protobuf:protoc:3.10.0\"\r\n    }\r\n    plugins {\r\n        grpc {\r\n            artifact = 'io.grpc:protoc-gen-grpc-java:1.24.0'\r\n        }\r\n    }\r\n    generateProtoTasks {\r\n        all()*.plugins {\r\n            grpc {}\r\n        }\r\n    }\r\n\r\n    generatedFilesBaseDir = \"$projectDir/build/generated/\"\r\n}\r\n\r\nsourceCompatibility = 12\r\n\r\nrepositories {\r\n    mavenCentral()\r\n    maven { url \"https://jitpack.io\" }\r\n    jcenter()\r\n}\r\n\r\ndependencies {\r\n    //Logging\r\n    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.7'\r\n    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.7'\r\n    implementation group: 'javax.annotation', name: 'javax.annotation-api', version: '1.3.2'\r\n\r\n    //Postgres Database\r\n    implementation group: 'org.postgresql', name: 'postgresql', version: '42.2.8'\r\n\r\n    //Akka\r\n    implementation group: 'com.typesafe.akka', name: 'akka-http_2.12',   version: '10.1.10'\r\n    implementation group: 'com.typesafe.akka', name: 'akka-http2-support_2.12', version: '10.1.10'\r\n\r\n    //gRPC - Java\r\n    implementation 'io.grpc:grpc-netty-shaded:1.24.0'\r\n    implementation 'io.grpc:grpc-protobuf:1.24.0'\r\n    implementation 'io.grpc:grpc-stub:1.24.0'\r\n    implementation 'com.google.protobuf:protobuf-java-util:3.9.2'\r\n\r\n\r\n    //Guice - Google\r\n    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.0'\r\n    implementation group: 'com.google.inject', name: 'guice', version: '4.2.2'\r\n    implementation group: 'com.google.inject.extensions', name: 'guice-assistedinject', version: '4.2.2'\r\n\r\n    //Kotlin\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib-jdk8\"\r\n\r\n    //-------------- Test dependencies----------------------------\r\n    testImplementation group: 'junit', name: 'junit', version: '4.12'\r\n    testImplementation \"io.mockk:mockk:1.9.3\"\r\n    testImplementation(\"org.assertj:assertj-core:3.11.1\")\r\n    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.4.0'\r\n    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.4.0'\r\n    //-------------------------------------------------------------\r\n    implementation 'org.jetbrains.exposed:exposed:0.16.1'\r\n    implementation 'org.hibernate:hibernate-validator:6.0.17.Final'\r\n\r\n}\r\n\r\n\r\nflyway {\r\n    url = 'jdbc:postgresql://localhost:5432/user_management'\r\n    user = 'postgres'\r\n    password = ''\r\n    placeholders = ['keyABC': 'valueXYZ']\r\n}\r\n\r\ntest{\r\n    useJUnitPlatform()\r\n    testLogging {\r\n        events \"passed\", \"skipped\", \"failed\"\r\n    }\r\n}\r\n\r\ncompileKotlin {\r\n    kotlinOptions.jvmTarget = \"12\"\r\n}\r\ncompileTestKotlin {\r\n    kotlinOptions.jvmTarget = \"12\"\r\n}\r\n\r\n```", "url": "https://github.com/grpc/grpc-java/issues/6306", "user": "donpaul120", "labels": ["bug"], "created": "2019-10-19 21:12:43", "closed": "2019-10-20 23:30:16", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Race condition causing NPE with LocalChannelProvider and GrpcCallContext with timeout", "body": "There seems to be a race condition causing a `NullPointerException` when using an `InProcessServer`, a `LocalChannelProvider` and a `GrpcCallContext` with a very short timeout.\r\n\r\nThe following example call will (often) cause the problem:\r\n\r\n```java\r\nGrpcCallContext context = GrpcCallContext.createDefault().withTimeout(Duration.ofMillis(1L));\r\nclient\r\n    .getOperationCallable()\r\n    .futureCall(GetOperationRequest.getDefaultInstance(), context)\r\n    .get();\r\n```\r\n\r\nAssuming that the (mock) server will take more than 1 millisecond to respond, the expected outcome should be a `DeadlineExceededException` wrapped in an `ExecutionException`. Instead, a `NullPointerException` is logged and the call hangs indefinitely.\r\n\r\nThe exception that is logged is:\r\n\r\n```\r\nOct 18, 2019 3:07:03 PM io.grpc.Context$ExecutableListener deliver\r\nINFO: Exception notifying context listener\r\njava.lang.NullPointerException\r\n\tat io.grpc.inprocess.InProcessTransport$InProcessStream$InProcessClientStream.internalCancel(InProcessTransport.java:746)\r\n\tat io.grpc.inprocess.InProcessTransport$InProcessStream$InProcessClientStream.serverClosed(InProcessTransport.java:683)\r\n\tat io.grpc.inprocess.InProcessTransport$InProcessStream$InProcessClientStream.access$1700(InProcessTransport.java:619)\r\n\tat io.grpc.inprocess.InProcessTransport$InProcessStream$InProcessServerStream.cancel(InProcessTransport.java:563)\r\n\tat io.grpc.internal.ServerImpl$ServerTransportListenerImpl$1ServerStreamCancellationListener.cancelled(ServerImpl.java:596)\r\n\tat io.grpc.Context$ExecutableListener.run(Context.java:1005)\r\n\tat com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:30)\r\n\tat io.grpc.Context$ExecutableListener.deliver(Context.java:997)\r\n\tat io.grpc.Context.addListener(Context.java:479)\r\n\tat io.grpc.internal.ServerImpl$ServerTransportListenerImpl.createContext(ServerImpl.java:601)\r\n\tat io.grpc.internal.ServerImpl$ServerTransportListenerImpl.streamCreatedInternal(ServerImpl.java:501)\r\n\tat io.grpc.internal.ServerImpl$ServerTransportListenerImpl.streamCreated(ServerImpl.java:476)\r\n\tat io.grpc.inprocess.InProcessTransport$InProcessStream$InProcessClientStream.start(InProcessTransport.java:780)\r\n\tat io.grpc.internal.ForwardingClientStream.start(ForwardingClientStream.java:87)\r\n\tat io.grpc.internal.InternalSubchannel$CallTracingTransport$1.start(InternalSubchannel.java:642)\r\n\tat io.grpc.internal.ClientCallImpl.startInternal(ClientCallImpl.java:290)\r\n\tat io.grpc.internal.ClientCallImpl.start(ClientCallImpl.java:190)\r\n\tat io.grpc.internal.CensusTracingModule$TracingClientInterceptor$1.start(CensusTracingModule.java:394)\r\n\tat io.grpc.internal.CensusStatsModule$StatsClientInterceptor$1.start(CensusStatsModule.java:695)\r\n\tat io.grpc.ForwardingClientCall.start(ForwardingClientCall.java:32)\r\n\tat com.google.api.gax.grpc.GrpcHeaderInterceptor$1.start(GrpcHeaderInterceptor.java:94)\r\n\tat io.grpc.ForwardingClientCall.start(ForwardingClientCall.java:32)\r\n\tat com.google.api.gax.grpc.testing.LocalChannelProvider$LocalHeaderInterceptor$1.start(LocalChannelProvider.java:188)\r\n\tat io.grpc.stub.ClientCalls.startCall(ClientCalls.java:310)\r\n\tat io.grpc.stub.ClientCalls.asyncUnaryRequestCall(ClientCalls.java:282)\r\n\tat io.grpc.stub.ClientCalls.futureUnaryCall(ClientCalls.java:191)\r\n\tat com.google.api.gax.grpc.GrpcDirectCallable.futureCall(GrpcDirectCallable.java:58)\r\n\tat com.google.api.gax.grpc.GrpcExceptionCallable.futureCall(GrpcExceptionCallable.java:64)\r\n\tat com.google.api.gax.rpc.UnaryCallable$1.futureCall(UnaryCallable.java:126)\r\n\tat com.google.api.gax.tracing.TracedUnaryCallable.futureCall(TracedUnaryCallable.java:75)\r\n\tat com.google.api.gax.rpc.UnaryCallable$1.futureCall(UnaryCallable.java:126)\r\n\tat com.google.cloud.grpctest.GrpcTest.test(GrpcTest.java:138)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:606)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)\r\n```\r\n\r\ngRPC version: 1.24\r\n\r\nThe following test class will reproduce the problem. If you change the value of the `CLIENT_CONTEXT_TIMEOUT` constant from 1 millisecond to for example 100 milliseconds, you will get the expected outcome of each call just timing out and the test case will succeed (after 10 seconds).\r\n\r\n```java\r\npackage com.google.cloud.grpctest;\r\n\r\nimport static com.google.common.truth.Truth.assertThat;\r\nimport static org.junit.Assert.fail;\r\n\r\nimport com.google.api.gax.core.NoCredentialsProvider;\r\nimport com.google.api.gax.grpc.GrpcCallContext;\r\nimport com.google.api.gax.grpc.testing.LocalChannelProvider;\r\nimport com.google.api.gax.grpc.testing.MockGrpcService;\r\nimport com.google.api.gax.rpc.DeadlineExceededException;\r\nimport com.google.longrunning.GetOperationRequest;\r\nimport com.google.longrunning.MockOperationsImpl;\r\nimport com.google.longrunning.Operation;\r\nimport com.google.longrunning.OperationsClient;\r\nimport com.google.longrunning.OperationsSettings;\r\nimport com.google.protobuf.AbstractMessage;\r\nimport io.grpc.Server;\r\nimport io.grpc.ServerServiceDefinition;\r\nimport io.grpc.Status;\r\nimport io.grpc.inprocess.InProcessServerBuilder;\r\nimport io.grpc.stub.StreamObserver;\r\nimport java.io.IOException;\r\nimport java.util.List;\r\nimport java.util.concurrent.ExecutionException;\r\nimport java.util.concurrent.ScheduledThreadPoolExecutor;\r\nimport org.junit.After;\r\nimport org.junit.AfterClass;\r\nimport org.junit.Before;\r\nimport org.junit.BeforeClass;\r\nimport org.junit.Test;\r\nimport org.threeten.bp.Duration;\r\n\r\npublic class GrpcTest {\r\n  private static final long SERVER_EXEC_TIME_MILLIS = 1000L;\r\n  private static final long CLIENT_CONTEXT_TIMEOUT = 1L;\r\n\r\n  private static class MockOperations implements MockGrpcService {\r\n    private final MockOperationsImpl serviceImpl;\r\n\r\n    public MockOperations() {\r\n      serviceImpl =\r\n          new MockOperationsImpl() {\r\n            @Override\r\n            public void getOperation(\r\n                GetOperationRequest request, StreamObserver<Operation> responseObserver) {\r\n              try {\r\n                // Simulate a longer execution time.\r\n                Thread.sleep(SERVER_EXEC_TIME_MILLIS);\r\n              } catch (InterruptedException e) {\r\n                throw Status.CANCELLED.asRuntimeException();\r\n              }\r\n              responseObserver.onNext(Operation.getDefaultInstance());\r\n              responseObserver.onCompleted();\r\n            }\r\n          };\r\n    }\r\n\r\n    @Override\r\n    public List<AbstractMessage> getRequests() {\r\n      return serviceImpl.getRequests();\r\n    }\r\n\r\n    @Override\r\n    public void addResponse(AbstractMessage response) {\r\n      serviceImpl.addResponse(response);\r\n    }\r\n\r\n    @Override\r\n    public void addException(Exception exception) {\r\n      serviceImpl.addException(exception);\r\n    }\r\n\r\n    @Override\r\n    public ServerServiceDefinition getServiceDefinition() {\r\n      return serviceImpl.bindService();\r\n    }\r\n\r\n    @Override\r\n    public void reset() {\r\n      serviceImpl.reset();\r\n    }\r\n  }\r\n\r\n  private static MockOperations mockOperations;\r\n  private static Server server;\r\n  private static LocalChannelProvider channelProvider;\r\n  private OperationsClient client;\r\n\r\n  @BeforeClass\r\n  public static void setupClass() throws IOException {\r\n    String uniqueName = InProcessServerBuilder.generateName();\r\n    mockOperations = new MockOperations() {};\r\n\r\n    server =\r\n        InProcessServerBuilder.forName(uniqueName)\r\n            // We need to use a real executor for timeouts to occur.\r\n            .scheduledExecutorService(new ScheduledThreadPoolExecutor(1))\r\n            .addService(mockOperations.getServiceDefinition())\r\n            .build()\r\n            .start();\r\n    channelProvider = LocalChannelProvider.create(uniqueName);\r\n  }\r\n\r\n  @AfterClass\r\n  public static void stopServer() throws InterruptedException {\r\n    server.shutdown();\r\n    server.awaitTermination();\r\n  }\r\n\r\n  @Before\r\n  public void setUp() throws IOException {\r\n    mockOperations.reset();\r\n    OperationsSettings.Builder builder = OperationsSettings.newBuilder();\r\n    // Set default to no retries and a very long timeout. The call context will be used to set a\r\n    // shorter timeout.\r\n    builder.getOperationSettings().setSimpleTimeoutNoRetries(Duration.ofDays(1L));\r\n    OperationsSettings settings =\r\n        builder\r\n            .setTransportChannelProvider(channelProvider)\r\n            .setCredentialsProvider(NoCredentialsProvider.create())\r\n            .build();\r\n\r\n    client = OperationsClient.create(settings);\r\n  }\r\n\r\n  @After\r\n  public void tearDown() throws Exception {\r\n    client.close();\r\n  }\r\n\r\n  @Test\r\n  public void test() throws InterruptedException, ExecutionException {\r\n    for (int i = 0; i < 100; i++) {\r\n      GrpcCallContext context =\r\n          GrpcCallContext.createDefault().withTimeout(Duration.ofMillis(CLIENT_CONTEXT_TIMEOUT));\r\n      try {\r\n        client\r\n            .getOperationCallable()\r\n            .futureCall(GetOperationRequest.getDefaultInstance(), context)\r\n            .get();\r\n        fail(\"missing expected DEADLINE_EXCEEDED exception\");\r\n      } catch (ExecutionException e) {\r\n        assertThat(e.getCause()).isInstanceOf(DeadlineExceededException.class);\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nDependencies:\r\n\r\n```xml\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <artifactId>grpc-test</artifactId>\r\n  <version>0.0.1-SNAPSHOT</version>\r\n  <properties>\r\n    <java.version>1.8</java.version>\r\n    <maven.compiler.source>1.8</maven.compiler.source>\r\n    <maven.compiler.target>1.8</maven.compiler.target>\r\n  </properties>\r\n  <parent>\r\n    <groupId>com.google.cloud</groupId>\r\n    <artifactId>google-cloud-clients</artifactId>\r\n    <version>0.116.1-alpha-SNAPSHOT</version>\r\n  </parent>\r\n  \r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>${project.groupId}</groupId>\r\n      <artifactId>google-cloud-core-grpc</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>com.google.api.grpc</groupId>\r\n      <artifactId>grpc-google-common-protos</artifactId>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>com.google.truth</groupId>\r\n      <artifactId>truth</artifactId>\r\n      <scope>test</scope>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>com.google.api</groupId>\r\n      <artifactId>gax-grpc</artifactId>\r\n      <classifier>testlib</classifier>\r\n      <scope>test</scope>\r\n    </dependency>\r\n  </dependencies>\r\n</project>\r\n```\r\n", "url": "https://github.com/grpc/grpc-java/issues/6300", "user": "olavloite", "labels": ["bug"], "created": "2019-10-18 13:24:37", "closed": "2019-11-14 22:29:35", "commits": {}, "ttf": 27.00027777777778, "commitsDetails": []}, {"title": "Disabled tests in io.grpc.xds.sds.trust.SdsX509TrustManagerTest need to be re-enabled", "body": "Many tests in io.grpc.xds.sds.trust.SdsX509TrustManagerTest read from files that fail with blaze (internal failure). Need to fix by using resources ", "url": "https://github.com/grpc/grpc-java/issues/6274", "user": "sanjaypujare", "labels": ["bug"], "created": "2019-10-11 18:20:48", "closed": "2019-10-21 21:23:40", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "INTERNAL: Protocol error Rst Stream when communicating with .NET Core 3 server.", "body": "I have compiled a repo with the issue in a reproducible manner : \r\nhttps://github.com/ivan-penchev/gRPC-Java-dotnetcore3/tree/master\r\n\r\nI have basically download the \"Greeter\" example from dotnet and java  repos and tried to make them work together. Since we are trying to migrate our services to .NET Core 3.0;\r\n\r\nSomeone reported the same issue [on stackoverflow for Kotlin](https://stackoverflow.com/questions/57414584/rst-stream-grpc-error-on-android-kotlin-client-when-requesting-net-core-3-0-grp)\r\n\r\nI have tried the same .NET Core 3 server with Python, .NET and BloomRPC client and it worked flawlessly, which is why I post the issue here.\r\n### What version of gRPC are you using?\r\nJava uses : 1.23.0\r\n.NET uses: 2.23.2\r\n\r\n### What operating system (Linux, Windows,...) and version?\r\nI am running on Windows, using Docker in a Linux container.\r\n\r\n### What did you expect to see?\r\nI expected to see a response containing \"Hello ~whatever message I sent initially~\".\r\n\r\n### What did you see instead?\r\n\r\n```java\r\nFailed... : \r\nio.grpc.StatusRuntimeException: INTERNAL: Protocol error\r\nRst Stream\r\n\tat io.grpc.stub.ClientCalls.toStatusRuntimeException(ClientCalls.java:235)\r\n\tat io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:216)\r\n\tat io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:141)\r\n\tat io.grpc.examples.helloworld.GreeterGrpc$GreeterBlockingStub.sayHello(GreeterGrpc.java:228)\r\n\tat io.grpc.helloworldexample.HelloworldActivity$GrpcTask.doInBackground(HelloworldActivity.java:90)\r\n\tat io.grpc.helloworldexample.HelloworldActivity$GrpcTask.doInBackground(HelloworldActivity.java:72)\r\n\tat android.os.AsyncTask$2.call(AsyncTask.java:333)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat android.os.AsyncTask$SerialExecutor$1.run(AsyncTask.java:245)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)\r\n\tat java.lang.Thread.run(Thread.java:764)\r\n\r\n```\r\n\r\n### Steps to reproduce the bug\r\n\r\nI have described it completely [here](https://github.com/ivan-penchev/gRPC-Java-dotnetcore3/blob/master/README.md).  \r\n\r\nI have also attached a log from the package sniffer on the client [here](https://github.com/ivan-penchev/gRPC-Java-dotnetcore3/blob/master/client-packet-sniff-full).  \r\n", "url": "https://github.com/grpc/grpc-java/issues/6202", "user": "ivan-penchev", "labels": ["bug"], "created": "2019-09-26 09:24:13", "closed": "2019-10-10 01:00:46", "commits": {}, "ttf": 13.000277777777777, "commitsDetails": []}, {"title": "GoogleAuthLibraryCallCredentialsTest is flaky", "body": "https://travis-ci.org/grpc/grpc-java/jobs/581770651\r\n```\r\n> Task :grpc-auth:test\r\nio.grpc.auth.GoogleAuthLibraryCallCredentialsTest > jwtAccessCredentialsInRequestMetadata FAILED\r\n    arrays first differed at element [0]; expected:<...JleHAiOjE1Njc3OTM0Mj[MsImlhdCI6MTU2Nzc4OTgyMywiaXNzIjoidGVzdC1lbWFpbEBleGFtcGxlLmNvbSIsInN1YiI6InRlc3QtZW1haWxAZXhhbXBsZS5jb20ifQ.hwjtmbWc8TwisKZIR0Zl4k_LQjzSPwCMvWi8YbclShouxIyY11SjkXsEQ7DGxsXAqwvsQ1fJl-AA3o0iAboOpwP17D3hYJ_wLopzCX8L9qjEv91VMOO0cewKbmxUDM75GSIT-pO2djjZQYsYlXvZTleM_M-T4mJaquwDvLfe3ok]> but was:<...JleHAiOjE1Njc3OTM0Mj[QsImlhdCI6MTU2Nzc4OTgyNCwiaXNzIjoidGVzdC1lbWFpbEBleGFtcGxlLmNvbSIsInN1YiI6InRlc3QtZW1haWxAZXhhbXBsZS5jb20ifQ.FUX3xJsIE5hBZj538y5ZjcWxQkFLLZZMn1P05aE5EyLKJ-TfOnTrQETQsOCLWgFafTqG6r5ucM-YExwLjzQaguRRjCJYYgywbbpO8BbTNx_NEe7QMFgNgEtlGEnjMlztyOG9t9mRcTTwOTeT3s-Q_TvquXcrrBiSgZOaNf0NNm4]>\r\n        at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:55)\r\n        at org.junit.Assert.internalArrayEquals(Assert.java:532)\r\n        at org.junit.Assert.assertArrayEquals(Assert.java:283)\r\n        at org.junit.Assert.assertArrayEquals(Assert.java:298)\r\n        at io.grpc.auth.GoogleAuthLibraryCallCredentialsTest.jwtAccessCredentialsInRequestMetadata(GoogleAuthLibraryCallCredentialsTest.java:421)\r\n        Caused by:\r\n        org.junit.ComparisonFailure: expected:<...JleHAiOjE1Njc3OTM0Mj[MsImlhdCI6MTU2Nzc4OTgyMywiaXNzIjoidGVzdC1lbWFpbEBleGFtcGxlLmNvbSIsInN1YiI6InRlc3QtZW1haWxAZXhhbXBsZS5jb20ifQ.hwjtmbWc8TwisKZIR0Zl4k_LQjzSPwCMvWi8YbclShouxIyY11SjkXsEQ7DGxsXAqwvsQ1fJl-AA3o0iAboOpwP17D3hYJ_wLopzCX8L9qjEv91VMOO0cewKbmxUDM75GSIT-pO2djjZQYsYlXvZTleM_M-T4mJaquwDvLfe3ok]> but was:<...JleHAiOjE1Njc3OTM0Mj[QsImlhdCI6MTU2Nzc4OTgyNCwiaXNzIjoidGVzdC1lbWFpbEBleGFtcGxlLmNvbSIsInN1YiI6InRlc3QtZW1haWxAZXhhbXBsZS5jb20ifQ.FUX3xJsIE5hBZj538y5ZjcWxQkFLLZZMn1P05aE5EyLKJ-TfOnTrQETQsOCLWgFafTqG6r5ucM-YExwLjzQaguRRjCJYYgywbbpO8BbTNx_NEe7QMFgNgEtlGEnjMlztyOG9t9mRcTTwOTeT3s-Q_TvquXcrrBiSgZOaNf0NNm4]>\r\n            at org.junit.Assert.assertEquals(Assert.java:115)\r\n            at org.junit.Assert.assertEquals(Assert.java:144)\r\n            at org.junit.internal.ExactComparisonCriteria.assertElementsEqual(ExactComparisonCriteria.java:8)\r\n            at org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:53)\r\n            ... 4 more\r\n17 tests completed, 1 failed\r\n> Task :grpc-auth:test FAILED\r\n```", "url": "https://github.com/grpc/grpc-java/issues/6129", "user": "dapengzhang0", "labels": ["bug", "code health"], "created": "2019-09-06 17:34:31", "closed": "2019-09-10 18:09:37", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Netty client channel with TLS over proxy does not establish a connection anymore in 1.22.0 and 1.23.0", "body": "A netty grpc channel never establishes a TLS connection to a valid grpc server when using a HTTP proxy. The problem is reproducible in versions 1.23.0 and 1.22.0 but not in 1.21.0 and earlier.\r\n\r\nThe proxy is configured on the JVM with `-Dhttps.proxyHost`/`-Dhttps.proxyPort`.\r\nThe channel does send http `CONNECT` with the correct destination to the configured proxy but after the proxy responds with `HTTP/1.1 200`, instead of starting with the TLS connection the channel simply hangs and does not send any further traffic to the proxy.\r\nThe issue is caused by changes in `io.grpc.netty.ProtocolNegotiators`. Replacing this file in 1.23.0 with the one from 1.21.0 (with some minor compile fixes) restores the functionality.", "url": "https://github.com/grpc/grpc-java/issues/6118", "user": "blachris", "labels": ["bug"], "created": "2019-09-03 16:38:56", "closed": "2019-09-19 22:29:03", "commits": {}, "ttf": 16.00027777777778, "commitsDetails": []}, {"title": "NPE in com.google.auth.oauth2.JwtCredentials$Builder.setPrivateKeyId(JwtCredentials.java:223) due to a mistake in io.grpc.auth.GoogleAuthLibraryCallCredentials", "body": "Hi All,\r\nI run an application that uses java clients libraries for pubsub, stackdriver logging, stackdriver tracing.\r\nEverything works ok, if the application uses only pubsub or stackdriver logging & tracing, but if it uses all of them then I got a NPE.\r\n\r\nI debugged the application and it seems like I found the root cause.\r\nThere is the following  class:\r\nhttps://github.com/grpc/grpc-java/blob/4f516d545bfd9bcd813ba80f0dbd89c99d445428/auth/src/main/java/io/grpc/auth/GoogleAuthLibraryCallCredentials.java#L299\r\n\r\nwith these lines:\r\n      {\r\n        Method getter = serviceAccountClass.getMethod(\"**getPrivateKey**\");\r\n        Method setter = builderClass.getMethod(\"**setPrivateKey**\", getter.getReturnType());\r\n        methodPairs.add(new MethodPair(getter, setter));\r\n      }\r\n      {\r\n        Method getter = serviceAccountClass.getMethod(\"**getPrivateKey**\");\r\n        Method setter = builderClass.getMethod(\"**setPrivateKey**\", getter.getReturnType());\r\n        methodPairs.add(new MethodPair(getter, setter));\r\n      }\r\n\r\nIt seems like a copy-paste mistake that was introduced in this commit:\r\nhttps://github.com/grpc/grpc-java/commit/09d9c4a91959c371d6c6ee9778dff4d3cdb6c457\r\n\r\nI think it must be like:\r\n      {\r\n        Method getter = serviceAccountClass.getMethod(\"**getPrivateKey**\");\r\n        Method setter = builderClass.getMethod(\"**setPrivateKey**\", getter.getReturnType());\r\n        methodPairs.add(new MethodPair(getter, setter));\r\n      }\r\n      {\r\n        Method getter = serviceAccountClass.getMethod(\"**getPrivateKeyId**\");\r\n        Method setter = builderClass.getMethod(\"**setPrivateKeyId**\", getter.getReturnType());\r\n        methodPairs.add(new MethodPair(getter, setter));\r\n      }\r\n\r\n\r\nThe stacktrace of the issue:\r\n\r\n```\r\n18:44:39.562 [ExportComponent.ServiceExporterThread-0] WARN  i.o.trace.export.ExportComponent - Exception thrown by the service export io.opencensus.exporter.trace.stackdriver.StackdriverTraceExporter\r\ncom.google.api.gax.rpc.UnauthenticatedException: io.grpc.StatusRuntimeException: UNAUTHENTICATED: Failed computing credential metadata\r\nat com.google.api.gax.rpc.ApiExceptionFactory.createException(ApiExceptionFactory.java:73)\r\nat com.google.api.gax.grpc.GrpcApiExceptionFactory.create(GrpcApiExceptionFactory.java:72)\r\nat com.google.api.gax.grpc.GrpcApiExceptionFactory.create(GrpcApiExceptionFactory.java:60)\r\nat com.google.api.gax.grpc.GrpcExceptionCallable$ExceptionTransformingFuture.onFailure(GrpcExceptionCallable.java:97)\r\nat com.google.api.core.ApiFutures$1.onFailure(ApiFutures.java:68)\r\nat com.google.common.util.concurrent.Futures$CallbackListener.run(Futures.java:982)\r\nat com.google.common.util.concurrent.DirectExecutor.execute(DirectExecutor.java:30)\r\nat com.google.common.util.concurrent.AbstractFuture.executeListener(AbstractFuture.java:1138)\r\nat com.google.common.util.concurrent.AbstractFuture.complete(AbstractFuture.java:957)\r\nat com.google.common.util.concurrent.AbstractFuture.setException(AbstractFuture.java:748)\r\nat io.grpc.stub.ClientCalls$GrpcFuture.setException(ClientCalls.java:515)\r\nat io.grpc.stub.ClientCalls$UnaryStreamToFuture.onClose(ClientCalls.java:490)\r\nat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39)\r\nat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)\r\nat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)\r\nat io.grpc.internal.CensusStatsModule$StatsClientInterceptor$1$1.onClose(CensusStatsModule.java:700)\r\nat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:39)\r\nat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)\r\nat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)\r\nat io.grpc.internal.CensusTracingModule$TracingClientInterceptor$1$1.onClose(CensusTracingModule.java:399)\r\nat io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:510)\r\nat io.grpc.internal.ClientCallImpl.access$300(ClientCallImpl.java:66)\r\nat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.close(ClientCallImpl.java:630)\r\nat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.access$700(ClientCallImpl.java:518)\r\nat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInternal(ClientCallImpl.java:692)\r\nat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamClosed.runInContext(ClientCallImpl.java:681)\r\nat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\r\nat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\r\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\nat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\nat java.lang.Thread.run(Thread.java:748)\r\nSuppressed: com.google.api.gax.rpc.AsyncTaskException: Asynchronous task failed\r\n    at com.google.api.gax.rpc.ApiExceptions.callAndTranslateApiException(ApiExceptions.java:57)\r\n    at com.google.api.gax.rpc.UnaryCallable.call(UnaryCallable.java:112)\r\n    at com.google.cloud.trace.v2.TraceServiceClient.batchWriteSpans(TraceServiceClient.java:234)\r\n    at com.google.cloud.trace.v2.TraceServiceClient.batchWriteSpans(TraceServiceClient.java:182)\r\n    at io.opencensus.exporter.trace.stackdriver.StackdriverV2ExporterHandler.export(StackdriverV2ExporterHandler.java:444)\r\n    at io.opencensus.implcore.trace.export.SpanExporterImpl$Worker.onBatchExport(SpanExporterImpl.java:248)\r\n    at io.opencensus.implcore.trace.export.SpanExporterImpl$Worker.exportBatches(SpanExporterImpl.java:350)\r\n    at io.opencensus.implcore.trace.export.SpanExporterImpl$Worker.run(SpanExporterImpl.java:290)\r\n    ... 1 common frames omitted\r\nCaused by: io.grpc.StatusRuntimeException: UNAUTHENTICATED: Failed computing credential metadata\r\nat io.grpc.Status.asRuntimeException(Status.java:533)\r\n... 24 common frames omitted\r\nCaused by: com.google.common.util.concurrent.UncheckedExecutionException: java.lang.NullPointerException\r\nat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2049)\r\nat com.google.common.cache.LocalCache.get(LocalCache.java:3851)\r\nat com.google.common.cache.LocalCache.getOrLoad(LocalCache.java:3875)\r\nat com.google.common.cache.LocalCache$LocalLoadingCache.get(LocalCache.java:4800)\r\nat com.google.auth.oauth2.ServiceAccountJwtAccessCredentials.getRequestMetadata(ServiceAccountJwtAccessCredentials.java:346)\r\nat com.google.auth.Credentials.blockingGetToCallback(Credentials.java:112)\r\nat com.google.auth.oauth2.ServiceAccountJwtAccessCredentials.getRequestMetadata(ServiceAccountJwtAccessCredentials.java:323)\r\nat io.grpc.auth.GoogleAuthLibraryCallCredentials.applyRequestMetadata(GoogleAuthLibraryCallCredentials.java:110)\r\nat io.grpc.CallCredentials2.applyRequestMetadata(CallCredentials2.java:58)\r\nat io.grpc.internal.CallCredentialsApplyingTransportFactory$CallCredentialsApplyingTransport.newStream(CallCredentialsApplyingTransportFactory.java:108)\r\nat io.grpc.internal.ForwardingConnectionClientTransport.newStream(ForwardingConnectionClientTransport.java:49)\r\nat io.grpc.internal.InternalSubchannel$CallTracingTransport.newStream(InternalSubchannel.java:632)\r\nat io.grpc.internal.DelayedClientTransport$PendingStream.createRealStream(DelayedClientTransport.java:353)\r\nat io.grpc.internal.DelayedClientTransport$PendingStream.access$300(DelayedClientTransport.java:341)\r\nat io.grpc.internal.DelayedClientTransport$5.run(DelayedClientTransport.java:300)\r\n... 7 common frames omitted\r\nCaused by: java.lang.NullPointerException: null\r\nat com.google.common.base.Preconditions.checkNotNull(Preconditions.java:890)\r\nat com.google.auth.oauth2.JwtCredentials$Builder.setPrivateKeyId(JwtCredentials.java:223)\r\nat com.google.auth.oauth2.ServiceAccountJwtAccessCredentials$1.load(ServiceAccountJwtAccessCredentials.java:271)\r\nat com.google.auth.oauth2.ServiceAccountJwtAccessCredentials$1.load(ServiceAccountJwtAccessCredentials.java:266)\r\nat com.google.common.cache.LocalCache$LoadingValueReference.loadFuture(LocalCache.java:3445)\r\nat com.google.common.cache.LocalCache$Segment.loadSync(LocalCache.java:2194)\r\nat com.google.common.cache.LocalCache$Segment.lockedGetOrLoad(LocalCache.java:2153)\r\nat com.google.common.cache.LocalCache$Segment.get(LocalCache.java:2043)\r\n... 21 common frames omitted\r\n```", "url": "https://github.com/grpc/grpc-java/issues/6105", "user": "Alxbss", "labels": ["bug"], "created": "2019-08-29 16:00:57", "closed": "2019-08-30 18:21:33", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "SharedResourceHolder should roughly handle exceptions during close", "body": "@xCASx [reported a bug](https://github.com/googleapis/google-cloud-java/issues/5810) where gRPC would get \"hung\" after a point, which included the following stack trace:\r\n```\r\nJul 22, 2019 7:37:47 PM io.grpc.internal.LogExceptionRunnable run\r\nSEVERE: Exception while executing runnable io.grpc.internal.SharedResourceHolder$2@73cfe40e\r\nio.grpc.netty.shaded.io.netty.channel.ChannelException: eventfd_write() failed: Bad file descriptor\r\nat io.grpc.netty.shaded.io.netty.channel.epoll.Native.eventFdWrite(Native Method)\r\nat io.grpc.netty.shaded.io.netty.channel.epoll.EpollEventLoop.wakeup(EpollEventLoop.java:167)\r\nat io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor.shutdownGracefully(SingleThreadEventExecutor.java:603)\r\nat io.grpc.netty.shaded.io.netty.util.concurrent.MultithreadEventExecutorGroup.shutdownGracefully(MultithreadEventExecutorGroup.java:163)\r\nat io.grpc.netty.shaded.io.grpc.netty.Utils$DefaultEventLoopGroupResource.close(Utils.java:346)\r\nat io.grpc.netty.shaded.io.grpc.netty.Utils$DefaultEventLoopGroupResource.close(Utils.java:318)\r\nat io.grpc.internal.SharedResourceHolder$2.run(SharedResourceHolder.java:145)\r\nat io.grpc.internal.LogExceptionRunnable.run(LogExceptionRunnable.java:43)\r\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\nat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\nat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\nat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nIf we look in SharedResourceHolder, if `resource.close(instance)` fails throws `instances.remove(resource)` is not run. While we shouldn't encourage exceptions to be thrown during close, we would like it to be able to recover eventually. In this case, any future resource fetches will get the partially-closed resource, which will immediately fail.\r\nhttps://github.com/grpc/grpc-java/blob/d7b9438d399e44d9dccd0f7830cb544bb1840f0d/core/src/main/java/io/grpc/internal/SharedResourceHolder.java#L145-L146\r\n\r\n@xCASx, a workaround would be to keep the client objects alive for as long as possible. We generally encourage that for performance, but as long as one client object is alive we won't attempt to shut down this executor.", "url": "https://github.com/grpc/grpc-java/issues/6002", "user": "ejona86", "labels": ["bug"], "created": "2019-07-23 23:54:53", "closed": "2019-08-08 21:24:00", "commits": {"539f0400b6711e9d2e5c68c203cbe489aca1e1dc": {"commitGHEventType": "referenced", "commitUser": "voidzcy"}, "8779c6a36d6c9ca4f8e20f98881b3ea0ae5ddfea": {"commitGHEventType": "referenced", "commitUser": "voidzcy"}, "54084b9b9dfd85e4fce870046a4dd275545f665e": {"commitGHEventType": "referenced", "commitUser": "voidzcy"}, "0736411b13646cc0d8fb7f06e584ef6e6cd03545": {"commitGHEventType": "referenced", "commitUser": "voidzcy"}}, "ttf": 15.000277777777777, "commitsDetails": [{"commitHash": "539f0400b6711e9d2e5c68c203cbe489aca1e1dc", "commitGHEventType": "referenced", "commitUser": "voidzcy", "commitParents": ["c5317e4935ad8e2c152163020e000742cbd76991"], "nameRev": "539f0400b6711e9d2e5c68c203cbe489aca1e1dc tags/v1.24.0~57", "commitMessage": "core: handle removing partially-closed resources for throwing on close. Fixes #6002. (#6044)\n\n", "commitDateTime": "2019-08-08 14:23:59", "authoredDateTime": "2019-08-08 14:23:59", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/SharedResourceHolder.java", "insertions": 16, "deletions": 7, "lines": 23}, {"filePath": "core/src/test/java/io/grpc/internal/SharedResourceHolderTest.java", "insertions": 28, "deletions": 0, "lines": 28}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SharedResourceHolder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.SharedResourceHolder.releaseInternal(io.grpc.internal.SharedResourceHolder$Resource,java.lang.Object)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.SharedResourceHolder.releaseInternal(io.grpc.internal.SharedResourceHolder$Resource,java.lang.Object).2.run()", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 0}]}, {"spoonFilePath": "SharedResourceHolderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.SharedResourceHolderTest.handleInstanceCloseError()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "8779c6a36d6c9ca4f8e20f98881b3ea0ae5ddfea", "commitGHEventType": "referenced", "commitUser": "voidzcy", "commitParents": ["79bc50c171bbaa9c1b22d3f9948459df65fcd245"], "nameRev": "8779c6a36d6c9ca4f8e20f98881b3ea0ae5ddfea tags/v1.23.0~3", "commitMessage": "core: handle removing partially-closed resources for throwing on close. Fixes #6002. (#6044) (#6046)\n\n", "commitDateTime": "2019-08-08 16:32:36", "authoredDateTime": "2019-08-08 16:32:36", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/SharedResourceHolder.java", "insertions": 16, "deletions": 7, "lines": 23}, {"filePath": "core/src/test/java/io/grpc/internal/SharedResourceHolderTest.java", "insertions": 28, "deletions": 0, "lines": 28}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SharedResourceHolder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.SharedResourceHolder.releaseInternal(io.grpc.internal.SharedResourceHolder$Resource,java.lang.Object)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.SharedResourceHolder.releaseInternal(io.grpc.internal.SharedResourceHolder$Resource,java.lang.Object).2.run()", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 0}]}, {"spoonFilePath": "SharedResourceHolderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.SharedResourceHolderTest.handleInstanceCloseError()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "54084b9b9dfd85e4fce870046a4dd275545f665e", "commitGHEventType": "referenced", "commitUser": "voidzcy", "commitParents": ["3a3ee0d0fe24c442192ad7c614ba5681a9adecc3"], "nameRev": "54084b9b9dfd85e4fce870046a4dd275545f665e tags/v1.22.2~3", "commitMessage": "core: handle removing partially-closed resources for throwing on close. Fixes #6002. (#6044) (#6047)\n\n", "commitDateTime": "2019-08-08 16:33:28", "authoredDateTime": "2019-08-08 16:33:28", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/SharedResourceHolder.java", "insertions": 16, "deletions": 7, "lines": 23}, {"filePath": "core/src/test/java/io/grpc/internal/SharedResourceHolderTest.java", "insertions": 28, "deletions": 0, "lines": 28}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SharedResourceHolder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.SharedResourceHolder.releaseInternal(io.grpc.internal.SharedResourceHolder$Resource,java.lang.Object)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.SharedResourceHolder.releaseInternal(io.grpc.internal.SharedResourceHolder$Resource,java.lang.Object).2.run()", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 0}]}, {"spoonFilePath": "SharedResourceHolderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.SharedResourceHolderTest.handleInstanceCloseError()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "0736411b13646cc0d8fb7f06e584ef6e6cd03545", "commitGHEventType": "referenced", "commitUser": "voidzcy", "commitParents": ["9033efa48bb1b0bf019c7f11271e5ac17991d450"], "nameRev": "0736411b13646cc0d8fb7f06e584ef6e6cd03545 tags/v1.21.1~3", "commitMessage": "core: handle removing partially-closed resources for throwing on close. Fixes #6002. (#6044) (#6048)\n\n", "commitDateTime": "2019-08-08 16:33:40", "authoredDateTime": "2019-08-08 16:33:40", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/SharedResourceHolder.java", "insertions": 16, "deletions": 7, "lines": 23}, {"filePath": "core/src/test/java/io/grpc/internal/SharedResourceHolderTest.java", "insertions": 28, "deletions": 0, "lines": 28}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SharedResourceHolder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.SharedResourceHolder.releaseInternal(io.grpc.internal.SharedResourceHolder$Resource,java.lang.Object)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.SharedResourceHolder.releaseInternal(io.grpc.internal.SharedResourceHolder$Resource,java.lang.Object).2.run()", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 0}]}, {"spoonFilePath": "SharedResourceHolderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.SharedResourceHolderTest.handleInstanceCloseError()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 4, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "OkHttp HPACK header compression is not fully implemented", "body": "Disregarding Huffman encoding, upstream Okhttp's HPACK implementation does not fully implement HPACK compression. Especially for the [writer](https://github.com/grpc/grpc-java/blob/8a9afd618aec0e1bf5858232cac70c89a90fb96e/okhttp/third_party/okhttp/main/java/io/grpc/okhttp/internal/framed/Hpack.java#L383), its implementation is very minimal, with very simplistic [header field representations](https://tools.ietf.org/html/rfc7541#section-6) (for table lookup, `Indexed Header Field Representation` is completely not implemented, only for indexed name; no dynamic table is involved at all).\r\n\r\nAn obvious result is that in Http2 frames, header fields such as `:scheme: https` will be encoded as `06 05 68 74 70 73` and `:method: POST` will be encoded as `02 04 50 4f 53 54`, which are in the format for `Literal Header Field without Indexing - Indexed Name` although `:scheme: https` and `:method: POST` do exist in the static table.\r\n\r\n[Okhttp3](https://github.com/square/okhttp/blob/master/okhttp/src/main/java/okhttp3/internal/http2/Hpack.kt) has fully implemented this.\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/5985", "user": "voidzcy", "labels": ["bug", "enhancement", "okhttp"], "created": "2019-07-17 18:37:39", "closed": "2019-10-08 17:06:27", "commits": {}, "ttf": 82.00027777777778, "commitsDetails": []}, {"title": "All internal APIs are shown in the javadoc (gh-pages)", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n\r\n\r\n### What did you expect to see?\r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/5858", "user": "dapengzhang0", "labels": ["bug"], "created": "2019-06-10 17:22:55", "closed": "2019-06-10 20:36:31", "commits": {"b69b15fddb37048c0a2512768a3966639d7e2f98": {"commitGHEventType": "closed", "commitUser": "dapengzhang0"}, "6328e2b7ee376389f2c409084853cca93fb85e96": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "b172024ee98586b2a80510f43616c19815849d9f": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "b69b15fddb37048c0a2512768a3966639d7e2f98", "commitGHEventType": "closed", "commitUser": "dapengzhang0", "commitParents": ["33c30db42c9a09226cac2e0645fd1dc82f063750"], "nameRev": "b69b15fddb37048c0a2512768a3966639d7e2f98 tags/v1.22.0~28", "commitMessage": "javadoc: exclude internal APIs\n\nFixes #5858 in master", "commitDateTime": "2019-06-10 13:36:21", "authoredDateTime": "2019-06-10 13:36:21", "commitGitStats": [{"filePath": "api/build.gradle", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "core/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "6328e2b7ee376389f2c409084853cca93fb85e96", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["de5cb358f8a54c9ca5d9a24fae9bbe0adefe13a6"], "nameRev": "6328e2b7ee376389f2c409084853cca93fb85e96 tags/v1.21.1~7", "commitMessage": "javadoc: exclude internal APIs\n\nThis is a cherry-pick of #5858", "commitDateTime": "2019-06-10 13:36:52", "authoredDateTime": "2019-06-10 13:36:52", "commitGitStats": [{"filePath": "api/build.gradle", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "core/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "b172024ee98586b2a80510f43616c19815849d9f", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["33c588008dc6e7894eb11594f90ea76591684e13"], "nameRev": "b172024ee98586b2a80510f43616c19815849d9f remotes/origin/gh-pages~14", "commitMessage": "Fix javadoc for v1.21.0 to remove internal package doc\n\nResolves #5858\r\n\r\nThis only fixes gh-pages, dose not fix maven javadoc jar file.\r\n\r\ngit checkout v1.21.0\r\ngit cherry-pick 34ba1fa (#5859)\r\n./gradlew :grpc-all:javadocJar\r\ngit checkout gh-pages\r\ngit pull --ff-only\r\nrm -r javadoc/\r\nunzip -d javadoc all/build/libs//grpc-all-1.21.0-javadoc.jar\r\npatch -p1 < ga.patch\r\nrm -r javadoc/META-INF/\r\ngit add -A javadoc\r\ngit commit", "commitDateTime": "2019-06-10 13:37:35", "authoredDateTime": "2019-06-10 13:37:35", "commitGitStats": [{"filePath": "javadoc/allclasses-frame.html", "insertions": 2, "deletions": 87, "lines": 89}, {"filePath": "javadoc/allclasses-noframe.html", "insertions": 2, "deletions": 87, "lines": 89}, {"filePath": "javadoc/constant-values.html", "insertions": 2, "deletions": 140, "lines": 142}, {"filePath": "javadoc/deprecated-list.html", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "javadoc/help-doc.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/index-all.html", "insertions": 24, "deletions": 2189, "lines": 2213}, {"filePath": "javadoc/index.html", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "javadoc/index.html.orig", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "javadoc/io/grpc/Attributes.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Attributes.Key.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Attributes.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/BinaryLog.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/BindableService.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/CallCredentials.MetadataApplier.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/CallCredentials.RequestInfo.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/CallCredentials.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/CallCredentials2.MetadataApplier.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/CallCredentials2.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/CallOptions.Key.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/CallOptions.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Channel.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ChannelLogger.ChannelLogLevel.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ChannelLogger.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ClientCall.Listener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ClientCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ClientInterceptor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ClientInterceptors.CheckedForwardingClientCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ClientInterceptors.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ClientStreamTracer.Factory.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ClientStreamTracer.StreamInfo.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ClientStreamTracer.StreamInfo.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ClientStreamTracer.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Codec.Gzip.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Codec.Identity.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Codec.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Compressor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/CompressorRegistry.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ConnectivityState.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ConnectivityStateInfo.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Context.CancellableContext.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Context.CancellationListener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Context.Key.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Context.Storage.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Context.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Contexts.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Deadline.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Decompressor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/DecompressorRegistry.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Drainable.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/EquivalentAddressGroup.Attr.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/EquivalentAddressGroup.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ExperimentalApi.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ForwardingChannelBuilder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ForwardingClientCall.SimpleForwardingClientCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ForwardingClientCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ForwardingClientCallListener.SimpleForwardingClientCallListener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ForwardingClientCallListener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ForwardingServerCall.SimpleForwardingServerCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ForwardingServerCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ForwardingServerCallListener.SimpleForwardingServerCallListener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ForwardingServerCallListener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Grpc.TransportAttr.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Grpc.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/HandlerRegistry.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/HttpConnectProxiedSocketAddress.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/HttpConnectProxiedSocketAddress.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Internal.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/KnownLength.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/LoadBalancer.Factory.html", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "javadoc/io/grpc/LoadBalancer.Helper.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/LoadBalancer.PickResult.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/LoadBalancer.PickSubchannelArgs.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/LoadBalancer.ResolvedAddresses.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/LoadBalancer.ResolvedAddresses.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/LoadBalancer.Subchannel.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/LoadBalancer.SubchannelPicker.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/LoadBalancer.html", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "javadoc/io/grpc/LoadBalancerProvider.html", "insertions": 2, "deletions": 6, "lines": 8}, {"filePath": "javadoc/io/grpc/LoadBalancerRegistry.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ManagedChannel.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ManagedChannelBuilder.html", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "javadoc/io/grpc/ManagedChannelProvider.ProviderNotFoundException.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ManagedChannelProvider.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Metadata.AsciiMarshaller.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Metadata.BinaryMarshaller.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Metadata.Key.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Metadata.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/MethodDescriptor.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/MethodDescriptor.Marshaller.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/MethodDescriptor.MethodType.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/MethodDescriptor.PrototypeMarshaller.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/MethodDescriptor.ReflectableMarshaller.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/MethodDescriptor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.Args.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.Args.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.ConfigOrError.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.Factory.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.Helper.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.Listener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.Listener2.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.ResolutionResult.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.ResolutionResult.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.ResolutionResultAttr.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.ServiceConfigParser.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/NameResolverProvider.html", "insertions": 2, "deletions": 6, "lines": 8}, {"filePath": "javadoc/io/grpc/NameResolverRegistry.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ProxiedSocketAddress.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ProxyDetector.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/SecurityLevel.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Server.html", "insertions": 2, "deletions": 6, "lines": 8}, {"filePath": "javadoc/io/grpc/ServerBuilder.html", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "javadoc/io/grpc/ServerCall.Listener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerCallHandler.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerInterceptor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerInterceptors.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerMethodDefinition.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerProvider.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerServiceDefinition.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerServiceDefinition.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerStreamTracer.Factory.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerStreamTracer.ServerCallInfo.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerStreamTracer.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServerTransportFilter.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServiceDescriptor.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/ServiceDescriptor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Status.Code.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/Status.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/StatusException.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/StatusRuntimeException.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/StreamTracer.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/SynchronizationContext.ScheduledHandle.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/SynchronizationContext.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/auth/ClientAuthInterceptor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/auth/MoreCallCredentials.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/auth/class-use/ClientAuthInterceptor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/auth/class-use/MoreCallCredentials.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/auth/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/auth/package-summary.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/auth/package-tree.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/auth/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Attributes.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Attributes.Key.html", "insertions": 2, "deletions": 52, "lines": 54}, {"filePath": "javadoc/io/grpc/class-use/Attributes.html", "insertions": 17, "deletions": 117, "lines": 134}, {"filePath": "javadoc/io/grpc/class-use/BinaryLog.html", "insertions": 6, "deletions": 34, "lines": 40}, {"filePath": "javadoc/io/grpc/class-use/BindableService.html", "insertions": 2, "deletions": 26, "lines": 28}, {"filePath": "javadoc/io/grpc/class-use/CallCredentials.MetadataApplier.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/CallCredentials.RequestInfo.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/CallCredentials.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/CallCredentials2.MetadataApplier.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/CallCredentials2.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/CallOptions.Key.html", "insertions": 2, "deletions": 29, "lines": 31}, {"filePath": "javadoc/io/grpc/class-use/CallOptions.html", "insertions": 2, "deletions": 61, "lines": 63}, {"filePath": "javadoc/io/grpc/class-use/Channel.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ChannelLogger.ChannelLogLevel.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ChannelLogger.html", "insertions": 2, "deletions": 47, "lines": 49}, {"filePath": "javadoc/io/grpc/class-use/ClientCall.Listener.html", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "javadoc/io/grpc/class-use/ClientCall.html", "insertions": 7, "deletions": 7, "lines": 14}, {"filePath": "javadoc/io/grpc/class-use/ClientInterceptor.html", "insertions": 10, "deletions": 47, "lines": 57}, {"filePath": "javadoc/io/grpc/class-use/ClientInterceptors.CheckedForwardingClientCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ClientInterceptors.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ClientStreamTracer.Factory.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ClientStreamTracer.StreamInfo.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ClientStreamTracer.StreamInfo.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ClientStreamTracer.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Codec.Gzip.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Codec.Identity.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Codec.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Compressor.html", "insertions": 2, "deletions": 46, "lines": 48}, {"filePath": "javadoc/io/grpc/class-use/CompressorRegistry.html", "insertions": 6, "deletions": 34, "lines": 40}, {"filePath": "javadoc/io/grpc/class-use/ConnectivityState.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ConnectivityStateInfo.html", "insertions": 2, "deletions": 27, "lines": 29}, {"filePath": "javadoc/io/grpc/class-use/Context.CancellableContext.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Context.CancellationListener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Context.Key.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Context.Storage.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Context.html", "insertions": 2, "deletions": 43, "lines": 45}, {"filePath": "javadoc/io/grpc/class-use/Contexts.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Deadline.html", "insertions": 2, "deletions": 36, "lines": 38}, {"filePath": "javadoc/io/grpc/class-use/Decompressor.html", "insertions": 2, "deletions": 67, "lines": 69}, {"filePath": "javadoc/io/grpc/class-use/DecompressorRegistry.html", "insertions": 6, "deletions": 48, "lines": 54}, {"filePath": "javadoc/io/grpc/class-use/Drainable.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/EquivalentAddressGroup.Attr.html", "insertions": 2, "deletions": 34, "lines": 36}, {"filePath": "javadoc/io/grpc/class-use/EquivalentAddressGroup.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ExperimentalApi.html", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "javadoc/io/grpc/class-use/ForwardingChannelBuilder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ForwardingClientCall.SimpleForwardingClientCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ForwardingClientCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ForwardingClientCallListener.SimpleForwardingClientCallListener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ForwardingClientCallListener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ForwardingServerCall.SimpleForwardingServerCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ForwardingServerCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ForwardingServerCallListener.SimpleForwardingServerCallListener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ForwardingServerCallListener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Grpc.TransportAttr.html", "insertions": 8, "deletions": 40, "lines": 48}, {"filePath": "javadoc/io/grpc/class-use/Grpc.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/HandlerRegistry.html", "insertions": 2, "deletions": 26, "lines": 28}, {"filePath": "javadoc/io/grpc/class-use/HttpConnectProxiedSocketAddress.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/HttpConnectProxiedSocketAddress.html", "insertions": 2, "deletions": 39, "lines": 41}, {"filePath": "javadoc/io/grpc/class-use/Internal.html", "insertions": 5, "deletions": 22, "lines": 27}, {"filePath": "javadoc/io/grpc/class-use/KnownLength.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancer.Factory.html", "insertions": 2, "deletions": 32, "lines": 34}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancer.Helper.html", "insertions": 2, "deletions": 30, "lines": 32}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancer.PickResult.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancer.PickSubchannelArgs.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancer.ResolvedAddresses.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancer.ResolvedAddresses.html", "insertions": 2, "deletions": 26, "lines": 28}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancer.Subchannel.html", "insertions": 2, "deletions": 27, "lines": 29}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancer.SubchannelPicker.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancer.html", "insertions": 2, "deletions": 47, "lines": 49}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancerProvider.html", "insertions": 2, "deletions": 28, "lines": 30}, {"filePath": "javadoc/io/grpc/class-use/LoadBalancerRegistry.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ManagedChannel.html", "insertions": 9, "deletions": 33, "lines": 42}, {"filePath": "javadoc/io/grpc/class-use/ManagedChannelBuilder.html", "insertions": 14, "deletions": 36, "lines": 50}, {"filePath": "javadoc/io/grpc/class-use/ManagedChannelProvider.ProviderNotFoundException.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ManagedChannelProvider.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Metadata.AsciiMarshaller.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Metadata.BinaryMarshaller.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Metadata.Key.html", "insertions": 2, "deletions": 70, "lines": 72}, {"filePath": "javadoc/io/grpc/class-use/Metadata.html", "insertions": 9, "deletions": 203, "lines": 212}, {"filePath": "javadoc/io/grpc/class-use/MethodDescriptor.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/MethodDescriptor.Marshaller.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/MethodDescriptor.MethodType.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/MethodDescriptor.PrototypeMarshaller.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/MethodDescriptor.ReflectableMarshaller.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/MethodDescriptor.html", "insertions": 11, "deletions": 39, "lines": 50}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.Args.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.Args.html", "insertions": 2, "deletions": 27, "lines": 29}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.ConfigOrError.html", "insertions": 2, "deletions": 26, "lines": 28}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.Factory.html", "insertions": 6, "deletions": 45, "lines": 51}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.Helper.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.Listener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.Listener2.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.ResolutionResult.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.ResolutionResult.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.ResolutionResultAttr.html", "insertions": 2, "deletions": 28, "lines": 30}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.ServiceConfigParser.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/NameResolver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/NameResolverProvider.html", "insertions": 2, "deletions": 28, "lines": 30}, {"filePath": "javadoc/io/grpc/class-use/NameResolverRegistry.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ProxiedSocketAddress.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ProxyDetector.html", "insertions": 6, "deletions": 66, "lines": 72}, {"filePath": "javadoc/io/grpc/class-use/SecurityLevel.html", "insertions": 2, "deletions": 28, "lines": 30}, {"filePath": "javadoc/io/grpc/class-use/Server.html", "insertions": 2, "deletions": 41, "lines": 43}, {"filePath": "javadoc/io/grpc/class-use/ServerBuilder.html", "insertions": 6, "deletions": 23, "lines": 29}, {"filePath": "javadoc/io/grpc/class-use/ServerCall.Listener.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ServerCall.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ServerCallHandler.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ServerInterceptor.html", "insertions": 3, "deletions": 27, "lines": 30}, {"filePath": "javadoc/io/grpc/class-use/ServerInterceptors.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ServerMethodDefinition.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ServerProvider.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ServerServiceDefinition.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ServerServiceDefinition.html", "insertions": 2, "deletions": 47, "lines": 49}, {"filePath": "javadoc/io/grpc/class-use/ServerStreamTracer.Factory.html", "insertions": 2, "deletions": 50, "lines": 52}, {"filePath": "javadoc/io/grpc/class-use/ServerStreamTracer.ServerCallInfo.html", "insertions": 2, "deletions": 28, "lines": 30}, {"filePath": "javadoc/io/grpc/class-use/ServerStreamTracer.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ServerTransportFilter.html", "insertions": 2, "deletions": 26, "lines": 28}, {"filePath": "javadoc/io/grpc/class-use/ServiceDescriptor.Builder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/ServiceDescriptor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Status.Code.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/Status.html", "insertions": 9, "deletions": 226, "lines": 235}, {"filePath": "javadoc/io/grpc/class-use/StatusException.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/StatusRuntimeException.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/StreamTracer.html", "insertions": 2, "deletions": 28, "lines": 30}, {"filePath": "javadoc/io/grpc/class-use/SynchronizationContext.ScheduledHandle.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/class-use/SynchronizationContext.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/inprocess/InProcessChannelBuilder.html", "insertions": 14, "deletions": 31, "lines": 45}, {"filePath": "javadoc/io/grpc/inprocess/InProcessServerBuilder.html", "insertions": 8, "deletions": 17, "lines": 25}, {"filePath": "javadoc/io/grpc/inprocess/InProcessSocketAddress.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/inprocess/class-use/InProcessChannelBuilder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/inprocess/class-use/InProcessServerBuilder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/inprocess/class-use/InProcessSocketAddress.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/inprocess/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/inprocess/package-summary.html", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "javadoc/io/grpc/inprocess/package-tree.html", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "javadoc/io/grpc/inprocess/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/internal/AbstractClientStream.Sink.html", "insertions": 0, "deletions": 307, "lines": 307}, {"filePath": "javadoc/io/grpc/internal/AbstractClientStream.TransportState.html", "insertions": 0, "deletions": 522, "lines": 522}, {"filePath": "javadoc/io/grpc/internal/AbstractClientStream.html", "insertions": 0, "deletions": 695, "lines": 695}, {"filePath": "javadoc/io/grpc/internal/AbstractManagedChannelImplBuilder.html", "insertions": 0, "deletions": 1236, "lines": 1236}, {"filePath": "javadoc/io/grpc/internal/AbstractReadableBuffer.html", "insertions": 0, "deletions": 400, "lines": 400}, {"filePath": "javadoc/io/grpc/internal/AbstractServerImplBuilder.html", "insertions": 0, "deletions": 800, "lines": 800}, {"filePath": "javadoc/io/grpc/internal/AbstractServerStream.Sink.html", "insertions": 0, "deletions": 323, "lines": 323}, {"filePath": "javadoc/io/grpc/internal/AbstractServerStream.TransportState.html", "insertions": 0, "deletions": 473, "lines": 473}, {"filePath": "javadoc/io/grpc/internal/AbstractServerStream.html", "insertions": 0, "deletions": 659, "lines": 659}, {"filePath": "javadoc/io/grpc/internal/AbstractStream.TransportState.html", "insertions": 0, "deletions": 557, "lines": 557}, {"filePath": "javadoc/io/grpc/internal/AbstractStream.html", "insertions": 0, "deletions": 496, "lines": 496}, {"filePath": "javadoc/io/grpc/internal/ApplicationThreadDeframer.html", "insertions": 0, "deletions": 484, "lines": 484}, {"filePath": "javadoc/io/grpc/internal/AtomicBackoff.State.html", "insertions": 0, "deletions": 260, "lines": 260}, {"filePath": "javadoc/io/grpc/internal/AtomicBackoff.html", "insertions": 0, "deletions": 300, "lines": 300}, {"filePath": "javadoc/io/grpc/internal/AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer.html", "insertions": 0, "deletions": 420, "lines": 420}, {"filePath": "javadoc/io/grpc/internal/AutoConfiguredLoadBalancerFactory.html", "insertions": 0, "deletions": 303, "lines": 303}, {"filePath": "javadoc/io/grpc/internal/BackoffPolicy.Provider.html", "insertions": 0, "deletions": 229, "lines": 229}, {"filePath": "javadoc/io/grpc/internal/BackoffPolicy.html", "insertions": 0, "deletions": 249, "lines": 249}, {"filePath": "javadoc/io/grpc/internal/CensusStatsModule.html", "insertions": 0, "deletions": 263, "lines": 263}, {"filePath": "javadoc/io/grpc/internal/ClientStream.html", "insertions": 0, "deletions": 410, "lines": 410}, {"filePath": "javadoc/io/grpc/internal/ClientStreamListener.RpcProgress.html", "insertions": 0, "deletions": 367, "lines": 367}, {"filePath": "javadoc/io/grpc/internal/ClientStreamListener.html", "insertions": 0, "deletions": 333, "lines": 333}, {"filePath": "javadoc/io/grpc/internal/ClientTransport.PingCallback.html", "insertions": 0, "deletions": 256, "lines": 256}, {"filePath": "javadoc/io/grpc/internal/ClientTransport.html", "insertions": 0, "deletions": 318, "lines": 318}, {"filePath": "javadoc/io/grpc/internal/ClientTransportFactory.ClientTransportOptions.html", "insertions": 0, "deletions": 440, "lines": 440}, {"filePath": "javadoc/io/grpc/internal/ClientTransportFactory.html", "insertions": 0, "deletions": 310, "lines": 310}, {"filePath": "javadoc/io/grpc/internal/CompositeReadableBuffer.html", "insertions": 0, "deletions": 481, "lines": 481}, {"filePath": "javadoc/io/grpc/internal/ConnectionClientTransport.html", "insertions": 0, "deletions": 282, "lines": 282}, {"filePath": "javadoc/io/grpc/internal/Deframer.html", "insertions": 0, "deletions": 345, "lines": 345}, {"filePath": "javadoc/io/grpc/internal/DeprecatedCensusConstants.html", "insertions": 0, "deletions": 539, "lines": 539}, {"filePath": "javadoc/io/grpc/internal/DnsNameResolverProvider.html", "insertions": 0, "deletions": 416, "lines": 416}, {"filePath": "javadoc/io/grpc/internal/ExponentialBackoffPolicy.Provider.html", "insertions": 0, "deletions": 284, "lines": 284}, {"filePath": "javadoc/io/grpc/internal/ExponentialBackoffPolicy.html", "insertions": 0, "deletions": 305, "lines": 305}, {"filePath": "javadoc/io/grpc/internal/FailingClientStream.html", "insertions": 0, "deletions": 338, "lines": 338}, {"filePath": "javadoc/io/grpc/internal/FixedObjectPool.html", "insertions": 0, "deletions": 310, "lines": 310}, {"filePath": "javadoc/io/grpc/internal/ForwardingReadableBuffer.html", "insertions": 0, "deletions": 578, "lines": 578}, {"filePath": "javadoc/io/grpc/internal/Framer.html", "insertions": 0, "deletions": 345, "lines": 345}, {"filePath": "javadoc/io/grpc/internal/GrpcAttributes.html", "insertions": 0, "deletions": 316, "lines": 316}, {"filePath": "javadoc/io/grpc/internal/GrpcUtil.Http2Error.html", "insertions": 0, "deletions": 575, "lines": 575}, {"filePath": "javadoc/io/grpc/internal/GrpcUtil.html", "insertions": 0, "deletions": 1107, "lines": 1107}, {"filePath": "javadoc/io/grpc/internal/Http2ClientStreamTransportState.html", "insertions": 0, "deletions": 412, "lines": 412}, {"filePath": "javadoc/io/grpc/internal/Http2Ping.html", "insertions": 0, "deletions": 389, "lines": 389}, {"filePath": "javadoc/io/grpc/internal/InUseStateAggregator.html", "insertions": 0, "deletions": 329, "lines": 329}, {"filePath": "javadoc/io/grpc/internal/InternalServer.html", "insertions": 0, "deletions": 288, "lines": 288}, {"filePath": "javadoc/io/grpc/internal/IoUtils.html", "insertions": 0, "deletions": 303, "lines": 303}, {"filePath": "javadoc/io/grpc/internal/JsonParser.html", "insertions": 0, "deletions": 248, "lines": 248}, {"filePath": "javadoc/io/grpc/internal/KeepAliveManager.ClientKeepAlivePinger.html", "insertions": 0, "deletions": 310, "lines": 310}, {"filePath": "javadoc/io/grpc/internal/KeepAliveManager.KeepAlivePinger.html", "insertions": 0, "deletions": 248, "lines": 248}, {"filePath": "javadoc/io/grpc/internal/KeepAliveManager.html", "insertions": 0, "deletions": 407, "lines": 407}, {"filePath": "javadoc/io/grpc/internal/LogExceptionRunnable.html", "insertions": 0, "deletions": 299, "lines": 299}, {"filePath": "javadoc/io/grpc/internal/LongCounter.html", "insertions": 0, "deletions": 245, "lines": 245}, {"filePath": "javadoc/io/grpc/internal/ManagedClientTransport.Listener.html", "insertions": 0, "deletions": 294, "lines": 294}, {"filePath": "javadoc/io/grpc/internal/ManagedClientTransport.html", "insertions": 0, "deletions": 341, "lines": 341}, {"filePath": "javadoc/io/grpc/internal/MessageDeframer.Listener.html", "insertions": 0, "deletions": 299, "lines": 299}, {"filePath": "javadoc/io/grpc/internal/MessageDeframer.html", "insertions": 0, "deletions": 485, "lines": 485}, {"filePath": "javadoc/io/grpc/internal/MessageFramer.Sink.html", "insertions": 0, "deletions": 249, "lines": 249}, {"filePath": "javadoc/io/grpc/internal/MessageFramer.html", "insertions": 0, "deletions": 467, "lines": 467}, {"filePath": "javadoc/io/grpc/internal/NoopClientStream.html", "insertions": 0, "deletions": 685, "lines": 685}, {"filePath": "javadoc/io/grpc/internal/ObjectPool.html", "insertions": 0, "deletions": 250, "lines": 250}, {"filePath": "javadoc/io/grpc/internal/PickFirstLoadBalancerProvider.html", "insertions": 0, "deletions": 406, "lines": 406}, {"filePath": "javadoc/io/grpc/internal/ReadableBuffer.html", "insertions": 0, "deletions": 488, "lines": 488}, {"filePath": "javadoc/io/grpc/internal/ReadableBuffers.html", "insertions": 0, "deletions": 398, "lines": 398}, {"filePath": "javadoc/io/grpc/internal/ReflectionLongAdderCounter.html", "insertions": 0, "deletions": 273, "lines": 273}, {"filePath": "javadoc/io/grpc/internal/SerializingExecutor.html", "insertions": 0, "deletions": 312, "lines": 312}, {"filePath": "javadoc/io/grpc/internal/ServerImpl.html", "insertions": 0, "deletions": 589, "lines": 589}, {"filePath": "javadoc/io/grpc/internal/ServerListener.html", "insertions": 0, "deletions": 250, "lines": 250}, {"filePath": "javadoc/io/grpc/internal/ServerStream.html", "insertions": 0, "deletions": 390, "lines": 390}, {"filePath": "javadoc/io/grpc/internal/ServerStreamListener.html", "insertions": 0, "deletions": 283, "lines": 283}, {"filePath": "javadoc/io/grpc/internal/ServerTransport.html", "insertions": 0, "deletions": 283, "lines": 283}, {"filePath": "javadoc/io/grpc/internal/ServerTransportListener.html", "insertions": 0, "deletions": 274, "lines": 274}, {"filePath": "javadoc/io/grpc/internal/ServiceConfigUtil.LbConfig.html", "insertions": 0, "deletions": 343, "lines": 343}, {"filePath": "javadoc/io/grpc/internal/ServiceConfigUtil.html", "insertions": 0, "deletions": 384, "lines": 384}, {"filePath": "javadoc/io/grpc/internal/SharedResourceHolder.Resource.html", "insertions": 0, "deletions": 247, "lines": 247}, {"filePath": "javadoc/io/grpc/internal/SharedResourceHolder.html", "insertions": 0, "deletions": 312, "lines": 312}, {"filePath": "javadoc/io/grpc/internal/SharedResourcePool.html", "insertions": 0, "deletions": 287, "lines": 287}, {"filePath": "javadoc/io/grpc/internal/StatsTraceContext.html", "insertions": 0, "deletions": 579, "lines": 579}, {"filePath": "javadoc/io/grpc/internal/Stream.html", "insertions": 0, "deletions": 349, "lines": 349}, {"filePath": "javadoc/io/grpc/internal/StreamListener.MessageProducer.html", "insertions": 0, "deletions": 237, "lines": 237}, {"filePath": "javadoc/io/grpc/internal/StreamListener.html", "insertions": 0, "deletions": 281, "lines": 281}, {"filePath": "javadoc/io/grpc/internal/TimeProvider.html", "insertions": 0, "deletions": 262, "lines": 262}, {"filePath": "javadoc/io/grpc/internal/TransportFrameUtil.html", "insertions": 0, "deletions": 279, "lines": 279}, {"filePath": "javadoc/io/grpc/internal/TransportTracer.Factory.html", "insertions": 0, "deletions": 275, "lines": 275}, {"filePath": "javadoc/io/grpc/internal/TransportTracer.FlowControlReader.html", "insertions": 0, "deletions": 226, "lines": 226}, {"filePath": "javadoc/io/grpc/internal/TransportTracer.FlowControlWindows.html", "insertions": 0, "deletions": 293, "lines": 293}, {"filePath": "javadoc/io/grpc/internal/TransportTracer.html", "insertions": 0, "deletions": 434, "lines": 434}, {"filePath": "javadoc/io/grpc/internal/WritableBuffer.html", "insertions": 0, "deletions": 306, "lines": 306}, {"filePath": "javadoc/io/grpc/internal/WritableBufferAllocator.html", "insertions": 0, "deletions": 227, "lines": 227}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractClientStream.Sink.html", "insertions": 0, "deletions": 168, "lines": 168}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractClientStream.TransportState.html", "insertions": 0, "deletions": 183, "lines": 183}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractClientStream.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractManagedChannelImplBuilder.html", "insertions": 0, "deletions": 249, "lines": 249}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractReadableBuffer.html", "insertions": 0, "deletions": 168, "lines": 168}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractServerImplBuilder.html", "insertions": 0, "deletions": 221, "lines": 221}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractServerStream.Sink.html", "insertions": 0, "deletions": 168, "lines": 168}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractServerStream.TransportState.html", "insertions": 0, "deletions": 166, "lines": 166}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractServerStream.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractStream.TransportState.html", "insertions": 0, "deletions": 196, "lines": 196}, {"filePath": "javadoc/io/grpc/internal/class-use/AbstractStream.html", "insertions": 0, "deletions": 174, "lines": 174}, {"filePath": "javadoc/io/grpc/internal/class-use/ApplicationThreadDeframer.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/AtomicBackoff.State.html", "insertions": 0, "deletions": 168, "lines": 168}, {"filePath": "javadoc/io/grpc/internal/class-use/AtomicBackoff.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/AutoConfiguredLoadBalancerFactory.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/BackoffPolicy.Provider.html", "insertions": 0, "deletions": 166, "lines": 166}, {"filePath": "javadoc/io/grpc/internal/class-use/BackoffPolicy.html", "insertions": 0, "deletions": 185, "lines": 185}, {"filePath": "javadoc/io/grpc/internal/class-use/CensusStatsModule.html", "insertions": 0, "deletions": 174, "lines": 174}, {"filePath": "javadoc/io/grpc/internal/class-use/ClientStream.html", "insertions": 0, "deletions": 197, "lines": 197}, {"filePath": "javadoc/io/grpc/internal/class-use/ClientStreamListener.RpcProgress.html", "insertions": 0, "deletions": 215, "lines": 215}, {"filePath": "javadoc/io/grpc/internal/class-use/ClientStreamListener.html", "insertions": 0, "deletions": 197, "lines": 197}, {"filePath": "javadoc/io/grpc/internal/class-use/ClientTransport.PingCallback.html", "insertions": 0, "deletions": 184, "lines": 184}, {"filePath": "javadoc/io/grpc/internal/class-use/ClientTransport.html", "insertions": 0, "deletions": 174, "lines": 174}, {"filePath": "javadoc/io/grpc/internal/class-use/ClientTransportFactory.ClientTransportOptions.html", "insertions": 0, "deletions": 203, "lines": 203}, {"filePath": "javadoc/io/grpc/internal/class-use/ClientTransportFactory.html", "insertions": 0, "deletions": 244, "lines": 244}, {"filePath": "javadoc/io/grpc/internal/class-use/CompositeReadableBuffer.html", "insertions": 0, "deletions": 166, "lines": 166}, {"filePath": "javadoc/io/grpc/internal/class-use/ConnectionClientTransport.html", "insertions": 0, "deletions": 181, "lines": 181}, {"filePath": "javadoc/io/grpc/internal/class-use/Deframer.html", "insertions": 0, "deletions": 175, "lines": 175}, {"filePath": "javadoc/io/grpc/internal/class-use/DeprecatedCensusConstants.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/DnsNameResolverProvider.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/ExponentialBackoffPolicy.Provider.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/ExponentialBackoffPolicy.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/FailingClientStream.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/FixedObjectPool.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/ForwardingReadableBuffer.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/Framer.html", "insertions": 0, "deletions": 199, "lines": 199}, {"filePath": "javadoc/io/grpc/internal/class-use/GrpcAttributes.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/GrpcUtil.Http2Error.html", "insertions": 0, "deletions": 181, "lines": 181}, {"filePath": "javadoc/io/grpc/internal/class-use/GrpcUtil.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/Http2ClientStreamTransportState.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/Http2Ping.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/InUseStateAggregator.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/InternalServer.html", "insertions": 0, "deletions": 169, "lines": 169}, {"filePath": "javadoc/io/grpc/internal/class-use/IoUtils.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/JsonParser.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/KeepAliveManager.ClientKeepAlivePinger.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/KeepAliveManager.KeepAlivePinger.html", "insertions": 0, "deletions": 185, "lines": 185}, {"filePath": "javadoc/io/grpc/internal/class-use/KeepAliveManager.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/LogExceptionRunnable.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/LongCounter.html", "insertions": 0, "deletions": 168, "lines": 168}, {"filePath": "javadoc/io/grpc/internal/class-use/ManagedClientTransport.Listener.html", "insertions": 0, "deletions": 168, "lines": 168}, {"filePath": "javadoc/io/grpc/internal/class-use/ManagedClientTransport.html", "insertions": 0, "deletions": 168, "lines": 168}, {"filePath": "javadoc/io/grpc/internal/class-use/MessageDeframer.Listener.html", "insertions": 0, "deletions": 211, "lines": 211}, {"filePath": "javadoc/io/grpc/internal/class-use/MessageDeframer.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/MessageFramer.Sink.html", "insertions": 0, "deletions": 189, "lines": 189}, {"filePath": "javadoc/io/grpc/internal/class-use/MessageFramer.html", "insertions": 0, "deletions": 174, "lines": 174}, {"filePath": "javadoc/io/grpc/internal/class-use/NoopClientStream.html", "insertions": 0, "deletions": 181, "lines": 181}, {"filePath": "javadoc/io/grpc/internal/class-use/ObjectPool.html", "insertions": 0, "deletions": 174, "lines": 174}, {"filePath": "javadoc/io/grpc/internal/class-use/PickFirstLoadBalancerProvider.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/ReadableBuffer.html", "insertions": 0, "deletions": 332, "lines": 332}, {"filePath": "javadoc/io/grpc/internal/class-use/ReadableBuffers.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/ReflectionLongAdderCounter.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/SerializingExecutor.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/ServerImpl.html", "insertions": 0, "deletions": 178, "lines": 178}, {"filePath": "javadoc/io/grpc/internal/class-use/ServerListener.html", "insertions": 0, "deletions": 168, "lines": 168}, {"filePath": "javadoc/io/grpc/internal/class-use/ServerStream.html", "insertions": 0, "deletions": 185, "lines": 185}, {"filePath": "javadoc/io/grpc/internal/class-use/ServerStreamListener.html", "insertions": 0, "deletions": 191, "lines": 191}, {"filePath": "javadoc/io/grpc/internal/class-use/ServerTransport.html", "insertions": 0, "deletions": 168, "lines": 168}, {"filePath": "javadoc/io/grpc/internal/class-use/ServerTransportListener.html", "insertions": 0, "deletions": 168, "lines": 168}, {"filePath": "javadoc/io/grpc/internal/class-use/ServiceConfigUtil.LbConfig.html", "insertions": 0, "deletions": 222, "lines": 222}, {"filePath": "javadoc/io/grpc/internal/class-use/ServiceConfigUtil.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/SharedResourceHolder.Resource.html", "insertions": 0, "deletions": 200, "lines": 200}, {"filePath": "javadoc/io/grpc/internal/class-use/SharedResourceHolder.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/SharedResourcePool.html", "insertions": 0, "deletions": 166, "lines": 166}, {"filePath": "javadoc/io/grpc/internal/class-use/StatsTraceContext.html", "insertions": 0, "deletions": 261, "lines": 261}, {"filePath": "javadoc/io/grpc/internal/class-use/Stream.html", "insertions": 0, "deletions": 213, "lines": 213}, {"filePath": "javadoc/io/grpc/internal/class-use/StreamListener.MessageProducer.html", "insertions": 0, "deletions": 182, "lines": 182}, {"filePath": "javadoc/io/grpc/internal/class-use/StreamListener.html", "insertions": 0, "deletions": 189, "lines": 189}, {"filePath": "javadoc/io/grpc/internal/class-use/TimeProvider.html", "insertions": 0, "deletions": 177, "lines": 177}, {"filePath": "javadoc/io/grpc/internal/class-use/TransportFrameUtil.html", "insertions": 0, "deletions": 124, "lines": 124}, {"filePath": "javadoc/io/grpc/internal/class-use/TransportTracer.Factory.html", "insertions": 0, "deletions": 196, "lines": 196}, {"filePath": "javadoc/io/grpc/internal/class-use/TransportTracer.FlowControlReader.html", "insertions": 0, "deletions": 169, "lines": 169}, {"filePath": "javadoc/io/grpc/internal/class-use/TransportTracer.FlowControlWindows.html", "insertions": 0, "deletions": 166, "lines": 166}, {"filePath": "javadoc/io/grpc/internal/class-use/TransportTracer.html", "insertions": 0, "deletions": 219, "lines": 219}, {"filePath": "javadoc/io/grpc/internal/class-use/WritableBuffer.html", "insertions": 0, "deletions": 217, "lines": 217}, {"filePath": "javadoc/io/grpc/internal/class-use/WritableBufferAllocator.html", "insertions": 0, "deletions": 180, "lines": 180}, {"filePath": "javadoc/io/grpc/internal/package-frame.html", "insertions": 0, "deletions": 110, "lines": 110}, {"filePath": "javadoc/io/grpc/internal/package-summary.html", "insertions": 0, "deletions": 684, "lines": 684}, {"filePath": "javadoc/io/grpc/internal/package-tree.html", "insertions": 0, "deletions": 312, "lines": 312}, {"filePath": "javadoc/io/grpc/internal/package-use.html", "insertions": 0, "deletions": 532, "lines": 532}, {"filePath": "javadoc/io/grpc/netty/GrpcHttp2ConnectionHandler.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/GrpcSslContexts.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/HandlerSettings.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/NegotiationType.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/NettyChannelBuilder.LocalSocketPicker.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/NettyChannelBuilder.html", "insertions": 24, "deletions": 67, "lines": 91}, {"filePath": "javadoc/io/grpc/netty/NettyChannelProvider.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/NettyServerBuilder.html", "insertions": 16, "deletions": 42, "lines": 58}, {"filePath": "javadoc/io/grpc/netty/NettyServerProvider.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/ProtocolNegotiationEvent.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/class-use/GrpcHttp2ConnectionHandler.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/class-use/GrpcSslContexts.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/class-use/HandlerSettings.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/class-use/NegotiationType.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/class-use/NettyChannelBuilder.LocalSocketPicker.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/class-use/NettyChannelBuilder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/class-use/NettyChannelProvider.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/class-use/NettyServerBuilder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/class-use/NettyServerProvider.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/class-use/ProtocolNegotiationEvent.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/netty/package-summary.html", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "javadoc/io/grpc/netty/package-tree.html", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "javadoc/io/grpc/netty/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/okhttp/NegotiationType.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/okhttp/OkHttpChannelBuilder.html", "insertions": 15, "deletions": 29, "lines": 44}, {"filePath": "javadoc/io/grpc/okhttp/OkHttpChannelProvider.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/okhttp/class-use/NegotiationType.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/okhttp/class-use/OkHttpChannelBuilder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/okhttp/class-use/OkHttpChannelProvider.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/okhttp/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/okhttp/package-summary.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/okhttp/package-tree.html", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "javadoc/io/grpc/okhttp/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/package-summary.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/package-tree.html", "insertions": 7, "deletions": 7, "lines": 14}, {"filePath": "javadoc/io/grpc/package-use.html", "insertions": 4, "deletions": 231, "lines": 235}, {"filePath": "javadoc/io/grpc/protobuf/ProtoFileDescriptorSupplier.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/ProtoMethodDescriptorSupplier.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/ProtoServiceDescriptorSupplier.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/ProtoUtils.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/StatusProto.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/class-use/ProtoFileDescriptorSupplier.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/class-use/ProtoMethodDescriptorSupplier.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/class-use/ProtoServiceDescriptorSupplier.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/class-use/ProtoUtils.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/class-use/StatusProto.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/lite/ProtoLiteUtils.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/lite/class-use/ProtoLiteUtils.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/lite/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/lite/package-summary.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/lite/package-tree.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/lite/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/nano/MessageNanoFactory.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/nano/NanoUtils.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/nano/class-use/MessageNanoFactory.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/nano/class-use/NanoUtils.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/nano/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/nano/package-summary.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/nano/package-tree.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/nano/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/package-summary.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/package-tree.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/protobuf/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/AbstractStub.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/CallStreamObserver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/ClientCallStreamObserver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/ClientCalls.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/ClientResponseObserver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/MetadataUtils.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/ServerCallStreamObserver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/ServerCalls.BidiStreamingMethod.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/ServerCalls.ClientStreamingMethod.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/ServerCalls.ServerStreamingMethod.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/ServerCalls.UnaryMethod.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/ServerCalls.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/StreamObserver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/StreamObservers.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/annotations/RpcMethod.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/annotations/class-use/RpcMethod.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/annotations/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/annotations/package-summary.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/annotations/package-tree.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/annotations/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/AbstractStub.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/CallStreamObserver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/ClientCallStreamObserver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/ClientCalls.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/ClientResponseObserver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/MetadataUtils.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/ServerCallStreamObserver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/ServerCalls.BidiStreamingMethod.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/ServerCalls.ClientStreamingMethod.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/ServerCalls.ServerStreamingMethod.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/ServerCalls.UnaryMethod.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/ServerCalls.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/StreamObserver.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/class-use/StreamObservers.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/package-summary.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/package-tree.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/stub/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/GrpcCleanupRule.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/GrpcServerRule.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/StreamRecorder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/TestMethodDescriptors.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/TestUtils.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/TlsTesting.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/class-use/GrpcCleanupRule.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/class-use/GrpcServerRule.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/class-use/StreamRecorder.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/class-use/TestMethodDescriptors.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/class-use/TestUtils.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/class-use/TlsTesting.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/package-summary.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/package-tree.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/testing/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/ForwardingClientStreamTracer.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/ForwardingLoadBalancer.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/ForwardingLoadBalancerHelper.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/MutableHandlerRegistry.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/TransmitStatusRuntimeExceptionInterceptor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/class-use/ForwardingClientStreamTracer.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/class-use/ForwardingLoadBalancer.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/class-use/ForwardingLoadBalancerHelper.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/class-use/MutableHandlerRegistry.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/class-use/TransmitStatusRuntimeExceptionInterceptor.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/package-frame.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/package-summary.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/package-tree.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/io/grpc/util/package-use.html", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "javadoc/overview-frame.html", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "javadoc/overview-summary.html", "insertions": 10, "deletions": 16, "lines": 26}, {"filePath": "javadoc/overview-tree.html", "insertions": 13, "deletions": 177, "lines": 190}, {"filePath": "javadoc/package-list", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "javadoc/serialized-form.html", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b69b15fddb37048c0a2512768a3966639d7e2f98"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core", "api"]}, {"title": "[Bazel] java_rpc_toolchain does not respect Java toolchain flags ", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n1.21\r\n\r\n### What did you expect to see?\r\n\r\nI build gRPC code with Bazel using Remote Build Execution (RBE) and I have to use a custom jdk8 toolchain [[.bazelrc snippet](https://gist.github.com/pshabunia0epam/0901b3267518ad7b6d99c1a73c5ebe69)]. Java toolchain flags don't seem propagated to the `java_rpc_toolchain` rule as it declares a [fixed dependency](https://github.com/grpc/grpc-java/blob/745aa0a2f570d74e7d7fe0c72334c24e21b8ab17/java_grpc_library.bzl#L46) on the default Java toolchain, which is jdk10 for Bazel v0.25.0. I believe this is the primary reason contributing to the following error returned by Bazel:\r\n\r\n```\r\nUnrecognized VM option 'CompactStrings'\r\nError: Could not create the Java Virtual Machine.\r\nError: A fatal exception has occurred. Program will exit.\r\n```\r\n\r\nPlease let me know if I can do anything else to enforce a custom Java toolchain for Bazel gRPC rules.", "url": "https://github.com/grpc/grpc-java/issues/5841", "user": "pshabunia0epam", "labels": ["bug"], "created": "2019-06-06 18:32:58", "closed": "2019-06-06 22:31:32", "commits": {"5d0c283b467ea0da8dbea47245aad1fffb073855": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "7e5e6e604a9a74cb62a0aa6edbdb47f2ae676ed7": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "5d0c283b467ea0da8dbea47245aad1fffb073855", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["63a6e26f394c04a27e91ac197006da29db0a43f3"], "nameRev": "5d0c283b467ea0da8dbea47245aad1fffb073855 tags/v1.22.0~36", "commitMessage": "java_grpc_library.bzl: Support alternative javac toolchains\n\nDepending on jdk:toolchain causes java_grpc_library to always use the\n_default_ toolchain, even if the user tried to override it. Changing to\n:current_java_toolchain allows the rule to use the user-selected\ntoolchain when overridden.\n\nTested by adding to BUILD:\nload(\"@bazel_tools//tools/jdk:default_java_toolchain.bzl\", \"default_java_toolchain\")\ndefault_java_toolchain(\n    name = \"mychain\",\n    misc = [\"-Amy=flag\"],\n    visibility = [\"//visibility:public\"],\n)\n\nAnd then verifying -Amy=flag is in the output of:\nbazel aquery --java_toolchain=:mychain services:_reflection_java_grpc\n\nFixes #5841\n", "commitDateTime": "2019-06-06 15:31:31", "authoredDateTime": "2019-06-06 13:54:32", "commitGitStats": [{"filePath": "java_grpc_library.bzl", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "7e5e6e604a9a74cb62a0aa6edbdb47f2ae676ed7", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["6328e2b7ee376389f2c409084853cca93fb85e96"], "nameRev": "7e5e6e604a9a74cb62a0aa6edbdb47f2ae676ed7 tags/v1.21.1~6", "commitMessage": "java_grpc_library.bzl: Support alternative javac toolchains\n\nDepending on jdk:toolchain causes java_grpc_library to always use the\n_default_ toolchain, even if the user tried to override it. Changing to\n:current_java_toolchain allows the rule to use the user-selected\ntoolchain when overridden.\n\nTested by adding to BUILD:\nload(\"@bazel_tools//tools/jdk:default_java_toolchain.bzl\", \"default_java_toolchain\")\ndefault_java_toolchain(\n    name = \"mychain\",\n    misc = [\"-Amy=flag\"],\n    visibility = [\"//visibility:public\"],\n)\n\nAnd then verifying -Amy=flag is in the output of:\nbazel aquery --java_toolchain=:mychain services:_reflection_java_grpc\n\nFixes #5841\n", "commitDateTime": "2019-06-17 17:03:36", "authoredDateTime": "2019-06-06 13:54:32", "commitGitStats": [{"filePath": "java_grpc_library.bzl", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5d0c283b467ea0da8dbea47245aad1fffb073855"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["java_grpc_library.bzl"]}, {"title": "Should rawConfig include policy name?", "body": "#5397 assumed that rawConfig includes policy name, but the constructor \r\n`LbConfig(String policyName, Map<String, ?> rawConfigValue)` is never passing `rawConfigValue` with the policy name. That ends up a bug\r\n\r\n```\r\nFINEST: [Channel<7>: (test_service.test_namespace.gslb.googleprod.com)] Resolved address: [[[/0:0:0:0:0:0:0:1:21607]/{io.grpc.grpclb.lbAddrAuthority=fake-authority-that-is-always-the-same}]], config={service-config={loadBalancingConfig=[{xds_experimental={balancerName=[::1]:21607}}, {grpclb={}}, {xds={balancerName=[::1]:21607}}], healthCheckConfig={serviceName=}}}\r\nMay 29, 2019 5:11:20 PM io.grpc.ChannelLogger log\r\nFINEST: [Channel<7>: (test_service.test_namespace.gslb.googleprod.com)] Address resolved: [[[/0:0:0:0:0:0:0:1:21607]/{io.grpc.grpclb.lbAddrAuthority=fake-authority-that-is-always-the-same}]]\r\nMay 29, 2019 5:11:20 PM io.grpc.internal.ClientCallImpl logIfContextNarrowedTimeout\r\nFINE: Call timeout set to '4998908748' ns, due to context deadline. Explicit call timeout was not set.\r\nMay 29, 2019 5:11:20 PM io.grpc.ChannelLogger log\r\nFINEST: [Channel<7>: (test_service.test_namespace.gslb.googleprod.com)] Service config changed\r\nMay 29, 2019 5:11:20 PM io.grpc.internal.ClientCallImpl logIfContextNarrowedTimeout\r\nFINE: Call timeout set to '4997013555' ns, due to context deadline. Explicit call timeout was not set.\r\nMay 29, 2019 5:11:20 PM io.grpc.ChannelLogger log\r\nFINEST: [Channel<7>: (test_service.test_namespace.gslb.googleprod.com)] Load balancer changed from PickFirstLoadBalancer to XdsLoadBalancer\r\nMay 29, 2019 5:11:20 PM io.grpc.ChannelLogger log\r\nFINEST: [Channel<7>: (test_service.test_namespace.gslb.googleprod.com)] Load-balancing config: {balancerName=[::1]:21607}\r\nMay 29, 2019 5:11:20 PM io.grpc.internal.ManagedChannelImpl$1 uncaughtException\r\nSEVERE: [Channel<7>: (test_service.test_namespace.gslb.googleprod.com)] Uncaught exception in the SynchronizationContext. Panic!\r\nio.grpc.StatusRuntimeException: UNKNOWN: Failed to parse config value '[::1]:21607' for key 'balancerName' in '{balancerName=[::1]:21607}' is not object\r\n\tat io.grpc.Status.asRuntimeException(Status.java:524)\r\n\tat io.grpc.xds.XdsLoadBalancer.handleResolvedAddresses(XdsLoadBalancer.java:133)\r\n\tat io.grpc.internal.AutoConfiguredLoadBalancerFactory$AutoConfiguredLoadBalancer.handleResolvedAddresses(AutoConfiguredLoadBalancerFactory.java:152)\r\n\tat io.grpc.internal.ManagedChannelImpl$NameResolverListener$1NamesResolved.run(ManagedChannelImpl.java:1346)\r\n\tat io.grpc.SynchronizationContext.drain(SynchronizationContext.java:88)\r\n\tat io.grpc.SynchronizationContext.execute(SynchronizationContext.java:120)\r\n\tat com.google.net.grpc.nameresolver.EnvelopeNameResolver$EnvelopeStreamListener.onResponse(EnvelopeNameResolver.java:306)\r\n\tat com.google.net.rpc.messenger.NettyMessengerClient$Stream$1Receiver.run(NettyMessengerClient.java:265)\r\n\tat com.google.common.util.concurrent.SequentialExecutor$1.run(SequentialExecutor.java:120)\r\n\tat com.google.common.util.concurrent.SequentialExecutor$QueueWorker.workOnQueue(SequentialExecutor.java:227)\r\n\tat com.google.common.util.concurrent.SequentialExecutor$QueueWorker.run(SequentialExecutor.java:171)\r\n\tat com.google.net.eventmanager.AbstractFutureTask$Sync.innerRun(AbstractFutureTask.java:260)\r\n\tat com.google.net.eventmanager.AbstractFutureTask.run(AbstractFutureTask.java:121)\r\n\tat com.google.net.eventmanager.EventManagerImpl.runTask(EventManagerImpl.java:618)\r\n\tat com.google.net.eventmanager.EventManagerImpl.internalRunWorkerLoop(EventManagerImpl.java:1036)\r\n\tat com.google.net.eventmanager.EventManagerImpl.runWorkerLoop(EventManagerImpl.java:916)\r\n\tat com.google.net.eventmanager.WorkerThreadInfo.runWorkerLoop(WorkerThreadInfo.java:160)\r\n\tat com.google.net.eventmanager.EventManagerImpl$WorkerThread.run(EventManagerImpl.java:1903)\r\nCaused by: java.lang.ClassCastException: value '[::1]:21607' for key 'balancerName' in '{balancerName=[::1]:21607}' is not object\r\n\tat io.grpc.internal.ServiceConfigUtil.getObject(ServiceConfigUtil.java:458)\r\n\tat io.grpc.internal.ServiceConfigUtil.unwrapLoadBalancingConfig(ServiceConfigUtil.java:364)\r\n\tat io.grpc.xds.XdsLoadBalancerProvider.parseLoadBalancingConfigPolicy(XdsLoadBalancerProvider.java:77)\r\n\tat io.grpc.xds.XdsLoadBalancer.handleResolvedAddresses(XdsLoadBalancer.java:131)\r\n\t... 16 more\r\n```\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/5804", "user": "dapengzhang0", "labels": ["bug"], "created": "2019-05-30 01:56:19", "closed": "2019-05-30 23:37:10", "commits": {"d8aa42723dbb0f964e35153a5de4be1ca4f2d1dd": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "d8aa42723dbb0f964e35153a5de4be1ca4f2d1dd", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["f9decbf69d02c707186b0626456bfa455ed1f906"], "nameRev": "d8aa42723dbb0f964e35153a5de4be1ca4f2d1dd tags/v1.22.0~56", "commitMessage": " xds: fix bug in XdsLoadBalancerProvider.parseLoadBalancingConfigPolicy\n\nResolves #5804\r\n", "commitDateTime": "2019-05-30 16:37:08", "authoredDateTime": "2019-05-30 16:37:08", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/ServiceConfigUtil.java", "insertions": 6, "deletions": 9, "lines": 15}, {"filePath": "core/src/test/java/io/grpc/internal/ServiceConfigUtilTest.java", "insertions": 15, "deletions": 16, "lines": 31}, {"filePath": "xds/src/main/java/io/grpc/xds/XdsLoadBalancerProvider.java", "insertions": 12, "deletions": 9, "lines": 21}, {"filePath": "xds/src/test/java/io/grpc/xds/XdsLoadBalancerProviderTest.java", "insertions": 36, "deletions": 13, "lines": 49}, {"filePath": "xds/src/test/java/io/grpc/xds/XdsLoadBalancerTest.java", "insertions": 24, "deletions": 24, "lines": 48}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ServiceConfigUtil.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ServiceConfigUtil.getBalancerNameFromXdsConfig(io.grpc.internal.ServiceConfigUtil$LbConfig)", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServiceConfigUtil.getChildPolicyFromXdsConfig(io.grpc.internal.ServiceConfigUtil$LbConfig)", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServiceConfigUtil.getFallbackPolicyFromXdsConfig(io.grpc.internal.ServiceConfigUtil$LbConfig)", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ServiceConfigUtilTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ServiceConfigUtilTest.getBalancerNameFromXdsConfig()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServiceConfigUtilTest.getChildPolicyFromXdsConfig()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServiceConfigUtilTest.getChildPolicyFromXdsConfig_null()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServiceConfigUtilTest.getFallbackPolicyFromXdsConfig()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServiceConfigUtilTest.getFallbackPolicyFromXdsConfig_null()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "XdsLoadBalancerProvider.java", "spoonMethods": [{"spoonMethodName": "io.grpc.xds.XdsLoadBalancerProvider.selectFallbackPolicy(io.grpc.internal.ServiceConfigUtil.LbConfig,io.grpc.LoadBalancerRegistry)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerProvider.selectChildPolicy(io.grpc.internal.ServiceConfigUtil.LbConfig,io.grpc.LoadBalancerRegistry)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerProvider.parseLoadBalancingConfigPolicy(java.util.Map,io.grpc.LoadBalancerRegistry)", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "XdsLoadBalancerProviderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.xds.XdsLoadBalancerProviderTest.selectChildPolicy()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerProviderTest.selectFallBackPolicy()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerProviderTest.selectFallBackPolicy_roundRobinIsDefault()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerProviderTest.parseLoadBalancingConfigPolicy()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "XdsLoadBalancerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.xds.XdsLoadBalancerTest.resolverEvent_standardModeToStandardMode()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerTest.resolverEvent_standardModeToCustomMode()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerTest.resolverEvent_customModeToStandardMode()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerTest.resolverEvent_customModeToCustomMode()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerTest.resolverEvent_balancerNameChange()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerTest.standardModeWithFallback1Attributes()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.xds.XdsLoadBalancerTest.shutdown_cleanupTimers()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d8aa42723dbb0f964e35153a5de4be1ca4f2d1dd"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 18, "deletions": 18, "lines": 36, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 22, "UPD": 18, "INS": 0, "MOV": 0, "DEL": 4, "spoonFilesChanged": 2, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal", "xds/src/main/java/io/grpc/xds"], "changesInPackagesSPOON": ["io.grpc.xds.XdsLoadBalancerProvider.selectFallbackPolicy(io.grpc.internal.ServiceConfigUtil.LbConfig,io.grpc.LoadBalancerRegistry)", "io.grpc.internal.ServiceConfigUtil.getChildPolicyFromXdsConfig(io.grpc.internal.ServiceConfigUtil$LbConfig)", "io.grpc.internal.ServiceConfigUtil.getFallbackPolicyFromXdsConfig(io.grpc.internal.ServiceConfigUtil$LbConfig)", "io.grpc.xds.XdsLoadBalancerProvider.selectChildPolicy(io.grpc.internal.ServiceConfigUtil.LbConfig,io.grpc.LoadBalancerRegistry)", "io.grpc.internal.ServiceConfigUtil.getBalancerNameFromXdsConfig(io.grpc.internal.ServiceConfigUtil$LbConfig)", "io.grpc.xds.XdsLoadBalancerProvider.parseLoadBalancingConfigPolicy(java.util.Map,io.grpc.LoadBalancerRegistry)"]}, {"title": "NPE in DelayedClientTransport", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n1.16.1 (but also appears to be present in master)\r\n\r\n\r\n### What did you expect to see?\r\nNo NullPointerException in DelayedClientTransport.java\r\n\r\n### Description\r\nWe (Firestore) have had a few reports of a NPE within DelayedClientTransport.java. (https://github.com/firebase/firebase-android-sdk/issues/428).\r\n\r\nLooking at the stacktrace, it seems as though `picker` is null here: https://github.com/grpc/grpc-java/blob/57043233bf5aecce92f0c6629b6ac46d9393ce8c/core/src/main/java/io/grpc/internal/DelayedClientTransport.java#L149\r\n\r\nExamining that function further, it seems as though picker is set here and here:\r\nhttps://github.com/grpc/grpc-java/blob/57043233bf5aecce92f0c6629b6ac46d9393ce8c/core/src/main/java/io/grpc/internal/DelayedClientTransport.java#L139-L142\r\nhttps://github.com/grpc/grpc-java/blob/57043233bf5aecce92f0c6629b6ac46d9393ce8c/core/src/main/java/io/grpc/internal/DelayedClientTransport.java#L165\r\n\r\nIn the first case, there's a null check that protects it, but there isn't in the second case. Should there be?\r\n\r\n(All links to the 1.16.1 tag, but the code looks effectively the same in master wrt this issue.)\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/5729", "user": "rsgowman", "labels": ["bug"], "created": "2019-05-13 14:06:23", "closed": "2019-05-15 23:56:47", "commits": {"f3bf250a46571db3321fc3078b55e74280bdfd87": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "8225aa5218ae3d3f1d7f17744e8681f69c73e84e": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "f3bf250a46571db3321fc3078b55e74280bdfd87", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["8fdd2072eeaf393f76b40668a60b353abde8758f"], "nameRev": "f3bf250a46571db3321fc3078b55e74280bdfd87 tags/v1.22.0~100", "commitMessage": "core: Handle IDLE MODE race in DelayedClientTransport\n\nWe check for idle mode the first time we try newStream(), but failed to when\nnewStream races with reprocess(). This would normally be a very rare race,\nexcept when you consider that AbstractChannelBuilder will call\nmanagedChannel.enterIdle() when the network changes.\n\nFixes #5729\n", "commitDateTime": "2019-05-15 16:56:46", "authoredDateTime": "2019-05-15 16:28:07", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "insertions": 10, "deletions": 17, "lines": 27}, {"filePath": "core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java", "insertions": 20, "deletions": 0, "lines": 20}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DelayedClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata,io.grpc.CallOptions)", "TOT": 6, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "DelayedClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransportTest.newStream_racesWithReprocessIdleMode()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "8225aa5218ae3d3f1d7f17744e8681f69c73e84e", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["7ba3a589b5f6ec965342f32935f6c5bcb1ddc090"], "nameRev": "8225aa5218ae3d3f1d7f17744e8681f69c73e84e tags/v1.21.0~5", "commitMessage": "core: Handle IDLE MODE race in DelayedClientTransport\n\nWe check for idle mode the first time we try newStream(), but failed to when\nnewStream races with reprocess(). This would normally be a very rare race,\nexcept when you consider that AbstractChannelBuilder will call\nmanagedChannel.enterIdle() when the network changes.\n\nFixes #5729\n", "commitDateTime": "2019-05-16 14:30:10", "authoredDateTime": "2019-05-15 16:28:07", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "insertions": 10, "deletions": 17, "lines": 27}, {"filePath": "core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java", "insertions": 20, "deletions": 0, "lines": 20}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DelayedClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata,io.grpc.CallOptions)", "TOT": 6, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "DelayedClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransportTest.newStream_racesWithReprocessIdleMode()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f3bf250a46571db3321fc3078b55e74280bdfd87"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 17, "lines": 27, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.DelayedClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata,io.grpc.CallOptions)"]}, {"title": "ClientCall errors does not finally invoke ClientCall.Listener.onClose()", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n\r\nv1.19.0\r\n\r\n### What did you expect to see?\r\n\r\n`ClientCall.Listener.onClose()` should be invoked when there is a ClientCall error for unary calls.\r\n\r\nWhen there is an exception thrown by `call.sendMessage()` or `call.halfClose()` within `asyncUnaryRequestCall()` (See https://sourcegraph.com/github.com/grpc/grpc-java/-/blob/stub/src/main/java/io/grpc/stub/ClientCalls.java#L276:37), it results in `cancelThrow()` calling `ClientCall.cancel()` and scheduling a stream closed task (i.e. `ClientCall.Listener.onClose`) on the executor.  However, the exception propagates up to `futureUnaryCall ` and `blockingUnaryCall` which catches it again, calls `cancelThrow()` again but never drains the executor within the try-catch block (See https://sourcegraph.com/github.com/grpc/grpc-java/-/blob/stub/src/main/java/io/grpc/stub/ClientCalls.java#L123-146).  Thus `ClientCall.cancel()` is called but not `ClientCall.Listener.onClose()` on client call errors.\r\n\r\nIs `ClientCall.Listener.onClose()` expected to be called whenever the client call terminates?  Is dropping the `ClientCall.Listener.onClose()` call a bug or expected behaviour?\r\n", "url": "https://github.com/grpc/grpc-java/issues/5576", "user": "ravirajj", "labels": ["bug"], "created": "2019-04-10 05:26:23", "closed": "2019-10-07 18:40:21", "commits": {"6d44f46f18fd2dcdbb5be8866cdbf79ab21b110f": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 180.00027777777777, "commitsDetails": [{"commitHash": "6d44f46f18fd2dcdbb5be8866cdbf79ab21b110f", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["f4d48fec62cf4e59e91cb83db34fbb32edf48f3b"], "nameRev": "6d44f46f18fd2dcdbb5be8866cdbf79ab21b110f tags/v1.21.0~47", "commitMessage": "stub: Wait for onClose when blocking stub is interrupted\n\nInterceptors need to see the onClose to clean up properly.\r\n\r\nThis also changes an isInterrupted() to interrupted(), since previously\r\nthe interrupted flag was still set when InterruptedException was thrown.\r\nThis caused an infinite loop with the new code. Previously, all callers\r\nimmediately re-set the interrupted flag, so there was no issue.\r\n\r\nFixes #5576", "commitDateTime": "2019-04-22 16:32:06", "authoredDateTime": "2019-04-22 16:32:06", "commitGitStats": [{"filePath": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "insertions": 49, "deletions": 30, "lines": 79}, {"filePath": "stub/src/test/java/io/grpc/stub/ClientCallsTest.java", "insertions": 214, "deletions": 9, "lines": 223}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ClientCalls.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.ClientCalls.ThreadlessExecutor.throwIfInterrupted(java.lang.Thread)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ClientCalls.blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)", "TOT": 9, "UPD": 1, "INS": 4, "MOV": 3, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ClientCalls.getUnchecked(java.util.concurrent.Future)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.BlockingResponseStream.waitForNext()", "TOT": 14, "UPD": 0, "INS": 4, "MOV": 6, "DEL": 4}, {"spoonMethodName": "io.grpc.stub.ClientCalls.BlockingResponseStream.hasNext()", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 4, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ClientCalls.ThreadlessExecutor.waitAndDrain()", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 4}]}, {"spoonFilePath": "ClientCallsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.ClientCallsTest", "TOT": 4, "UPD": 2, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportInboundFlowControl()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportOutboundFlowControl()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.blockingUnaryCall2_success()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.blockingUnaryCall2_interruptedWaitsForOnClose()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.blockingServerStreamingCall_interruptedWaitsForOnClose()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.blockingServerStreamingCall2_success()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.blockingServerStreamingCall2_interruptedWaitsForOnClose()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.InterruptInterceptor", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6d44f46f18fd2dcdbb5be8866cdbf79ab21b110f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 49, "deletions": 30, "lines": 79, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 37, "UPD": 3, "INS": 9, "MOV": 14, "DEL": 11, "spoonFilesChanged": 1, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["stub/src/main/java/io/grpc/stub"], "changesInPackagesSPOON": ["io.grpc.stub.ClientCalls.ThreadlessExecutor.throwIfInterrupted(java.lang.Thread)", "io.grpc.stub.ClientCalls.blockingUnaryCall(io.grpc.Channel,io.grpc.MethodDescriptor,io.grpc.CallOptions,java.lang.Object)", "io.grpc.stub.ClientCalls.ThreadlessExecutor.waitAndDrain()", "io.grpc.stub.ClientCalls.BlockingResponseStream.hasNext()", "io.grpc.stub.ClientCalls.BlockingResponseStream.waitForNext()", "io.grpc.stub.ClientCalls.getUnchecked(java.util.concurrent.Future)"]}, {"title": "WriteBufferingAndExceptionHandlerTest is flaky", "body": "https://travis-ci.org/grpc/grpc-java/jobs/518029993\r\n\r\n```\r\n> Task :grpc-netty:test\r\nio.grpc.netty.WriteBufferingAndExceptionHandlerTest > channelCloseFailuresPropagated FAILED\r\n    io.netty.channel.ChannelException: address already in use by: [id: 0x285e4dff, L:local:local]\r\n344 tests completed, 1 failed, 1 skipped\r\n> Task :grpc-netty:test FAILED\r\nFAILURE: Build failed with an exception.\r\n```\r\n\r\nLooks like the `local` address is not being cleaned up fast enough", "url": "https://github.com/grpc/grpc-java/issues/5574", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2019-04-09 23:42:02", "closed": "2019-11-05 01:52:58", "commits": {"28149944ad95867522597e59a3a7ea4b1758ccf7": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 209.00027777777777, "commitsDetails": [{"commitHash": "28149944ad95867522597e59a3a7ea4b1758ccf7", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["6d5116393355e1be6026819e8bd8cae8c5244649"], "nameRev": "28149944ad95867522597e59a3a7ea4b1758ccf7 tags/v1.26.0~50", "commitMessage": "netty: Deflake WriteBufferingAndExceptionHandlerTest\n\nIt appears the problem is that server.close() was missing sync(), so the\nevent loop was still processing the closure when the next test started.\n\nThis change is more aggressive than it needs to be, but should make it\nless bug-prone.\n\nFixes #5574\n", "commitDateTime": "2019-11-04 17:52:57", "authoredDateTime": "2019-11-04 15:53:01", "commitGitStats": [{"filePath": "netty/src/test/java/io/grpc/netty/WriteBufferingAndExceptionHandlerTest.java", "insertions": 5, "deletions": 4, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "WriteBufferingAndExceptionHandlerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.WriteBufferingAndExceptionHandlerTest.tearDown()", "TOT": 8, "UPD": 0, "INS": 4, "MOV": 3, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["28149944ad95867522597e59a3a7ea4b1758ccf7"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Data race in NameResolve.Listener.onError", "body": "`NameResolve.Listener.onError` can be called concurrently in different threads, so the following code in `onError()` impl may have data race.\r\n\r\n```\r\nif (haveBackends == null || haveBackends) {\r\n    channelLogger.log(ChannelLogLevel.WARNING, \"Failed to resolve name: {0}\", error);\r\n    haveBackends = false;\r\n}\r\n```\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/5450", "user": "dapengzhang0", "labels": ["bug"], "created": "2019-03-08 18:46:42", "closed": "2019-03-11 21:35:50", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "grpclb: SubchannelPool should handle state updates for cached Subchannels", "body": "`GrpclbState` tracks Subchannels' states as a mutable attribute in `Subchannel.getAttributes()`. However, `GrpclbState` only update this attribute for the Subchannels its managing.  For those cached in `SubchannelPool`, their state attributes are stale. When they are given back to `GrpclbState`, `IDLE` state is assumed, and will not be used for picking even if the actual state is `READY`.\r\n\r\nTo fix this, two changes are needed:\r\n1. Expand `SubchannelPool` interface to handle Subchannel state updates, which `GrpclbState` will call. `SubchannelPool` should save the state separately, not in the existing attribute.\r\n2. When `SubchannelPool` gives a cached `Subchannel` back to `GrpclbState`, it needs to schedule a call to `handleSubchannelState()` in the `SynchronizationContext`, so that `GrpclbState` will take the latest state as if it was just reported from the Channel.\r\n\r\nThanks to @menghanl for reporting this issue.", "url": "https://github.com/grpc/grpc-java/issues/5435", "user": "zhangkun83", "labels": ["bug"], "created": "2019-03-05 22:57:51", "closed": "2019-03-07 21:14:22", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Test failure: serverChecksInboundMetadataSize FAILED", "body": "Noticed here:  https://travis-ci.org/grpc/grpc-java/jobs/492953187\r\n\r\n```\r\n> Task :grpc-okhttp:test\r\nio.grpc.okhttp.OkHttpTransportTest > serverChecksInboundMetadataSize FAILED\r\n    java.lang.AssertionError: Status code was not expected: Status{code=UNAVAILABLE, description=End of stream or IOException, cause=null}\r\n```\r\n\r\nNot sure why this would flake.", "url": "https://github.com/grpc/grpc-java/issues/5363", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2019-02-13 22:55:20", "closed": "2019-02-13 23:19:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Service Config DNS TXT record attribute does not match spec", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n1.18.0\r\n\r\n### What did you expect to see?\r\nBased on the [proposal](https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md#encoding-in-dns-txt-records), Service Config should be specified in the `grpc_config` attribute in the DNS TXT record. However, in [grpc-java](https://github.com/grpc/grpc-java/blob/3a38e59bae00ac63d0e743d88fd03207bd9fd394/core/src/main/java/io/grpc/internal/DnsNameResolver.java#L75), it seems to be checking for `_grpc_config` instead, with a leading underscore.\r\n\r\nThis seems like a bug, and it should be checking `grpc_config` instead as stated in the proposal.\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/5280", "user": "wsee", "labels": ["bug"], "created": "2019-01-24 22:29:54", "closed": "2019-01-28 20:46:24", "commits": {"27253353e754c4266a45737b25aa56ffac230544": {"commitGHEventType": "referenced", "commitUser": "carl-mastrangelo"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "27253353e754c4266a45737b25aa56ffac230544", "commitGHEventType": "referenced", "commitUser": "carl-mastrangelo", "commitParents": ["ce2ae1fb6c89ffcd3fdb1e20f0a31119a01d4bd8"], "nameRev": "27253353e754c4266a45737b25aa56ffac230544 tags/v1.19.0~51", "commitMessage": "core: fix service config prefix matching in Dns\n\nFixes #5280", "commitDateTime": "2019-01-28 12:46:23", "authoredDateTime": "2019-01-28 12:46:23", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/DnsNameResolver.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/src/test/java/io/grpc/internal/DnsNameResolverTest.java", "insertions": 69, "deletions": 0, "lines": 69}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DnsNameResolver.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DnsNameResolver", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DnsNameResolverTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DnsNameResolverTest.parseTxtResults_misspelledName()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.DnsNameResolverTest.parseTxtResults_badTypeIgnored()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.DnsNameResolverTest.parseTxtResults_badInnerTypeIgnored()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.DnsNameResolverTest.parseTxtResults_combineAll()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["27253353e754c4266a45737b25aa56ffac230544"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.DnsNameResolver"]}, {"title": "Reset Stream accidentally sent for Connection", "body": "I don't have an easy repro, but I got this exception either shortly before or after getting an unexpected GOAWAY:\r\n\r\n```\r\nJan 16, 2019 5:15:50 PM io.netty.util.internal.PromiseNotificationUtil tryFailure\r\nWARNING: Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@158478bf(success)\r\njava.lang.UnsupportedOperationException\r\n\tat io.netty.handler.codec.http2.DefaultHttp2Connection$ConnectionStream.resetSent(DefaultHttp2Connection.java:621)\r\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.resetStream(Http2ConnectionHandler.java:778)\r\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.resetStream(Http2ConnectionHandler.java:756)\r\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeRstStream(DefaultHttp2ConnectionEncoder.java:255)\r\n\tat io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeRstStream(DecoratingHttp2FrameWriter.java:65)\r\n\tat io.netty.handler.codec.http2.StreamBufferingEncoder.writeRstStream(StreamBufferingEncoder.java:174)\r\n\tat io.grpc.netty.NettyClientHandler.cancelStream(NettyClientHandler.java:591)\r\n\tat io.grpc.netty.NettyClientHandler.write(NettyClientHandler.java:313)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:738)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:730)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:816)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:723)\r\n\tat io.netty.channel.DefaultChannelPipeline.write(DefaultChannelPipeline.java:1061)\r\n\tat io.netty.channel.AbstractChannel.write(AbstractChannel.java:299)\r\n\tat io.grpc.netty.WriteQueue$AbstractQueuedCommand.run(WriteQueue.java:174)\r\n\tat io.grpc.netty.WriteQueue.flush(WriteQueue.java:112)\r\n\tat io.grpc.netty.WriteQueue.access$000(WriteQueue.java:32)\r\n\tat io.grpc.netty.WriteQueue$1.run(WriteQueue.java:44)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:474)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:909)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```", "url": "https://github.com/grpc/grpc-java/issues/5254", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2019-01-17 03:04:19", "closed": "2019-01-24 00:23:40", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "ManagedChannelImpl should not call NameResolver.refresh() if it's not started", "body": "This was discovered by internal user. ManagedChannelImpl calling `refresh()` on a not started NameResolver produced an exception and led the channel into panic mode.\r\n \r\n```\r\nCaused by: java.lang.IllegalStateException: not started\r\n\tat com.google.common.base.Preconditions.checkState(Preconditions.java:510)\r\n\tat io.grpc.internal.DnsNameResolver.refresh(DnsNameResolver.java:193)\r\n\tat io.grpc.internal.ManagedChannelImpl.refreshNameResolutionNow(ManagedChannelImpl.java:429)\r\n\tat io.grpc.internal.ManagedChannelImpl.access$3900(ManagedChannelImpl.java:98)\r\n\tat io.grpc.internal.ManagedChannelImpl$LbHelperImpl.handleInternalSubchannelState(ManagedChannelImpl.java:993)\r\n\tat io.grpc.internal.ManagedChannelImpl$LbHelperImpl.access$4500(ManagedChannelImpl.java:987)\r\n\tat io.grpc.internal.ManagedChannelImpl$LbHelperImpl$1ManagedInternalSubchannelCallback.onStateChange(ManagedChannelImpl.java:1031)\r\n\tat io.grpc.internal.InternalSubchannel$2.run(InternalSubchannel.java:356)\r\n\tat io.grpc.SynchronizationContext.drain(SynchronizationContext.java:101)\r\n\tat io.grpc.internal.InternalSubchannel$TransportListener.transportShutdown(InternalSubchannel.java:616)\r\n\tat io.grpc.okhttp.OkHttpClientTransport.startGoAway(OkHttpClientTransport.java:792)\r\n\tat io.grpc.okhttp.OkHttpClientTransport.onException(OkHttpClientTransport.java:778)\r\n\tat io.grpc.okhttp.OkHttpClientTransport$4.run(OkHttpClientTransport.java:538)\r\n\t... 4 more\r\n```\r\n\r\nThis looks like a pre-existing issue, while made more visible (or rather, disruptive) by #5089 where `refresh()` started to be called from the sync context. Prior to that, the exception would be caught by the scheduled executor service, which would only end up in logs rather than panicking the channel. We should probably back port the fix to 1.18.x", "url": "https://github.com/grpc/grpc-java/issues/5222", "user": "zhangkun83", "labels": ["bug"], "created": "2019-01-09 22:30:23", "closed": "2019-01-10 19:28:59", "commits": {"7475b7f1109743cfefc10c8e07cfc86407689d71": {"commitGHEventType": "referenced", "commitUser": "zhangkun83"}, "bc9fbd74026684c8a87c46d49bfd93a377eadd56": {"commitGHEventType": "referenced", "commitUser": "zhangkun83"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "7475b7f1109743cfefc10c8e07cfc86407689d71", "commitGHEventType": "referenced", "commitUser": "zhangkun83", "commitParents": ["08218810fdc1e5a47a3a831a6774b04f3edd5f3d"], "nameRev": "7475b7f1109743cfefc10c8e07cfc86407689d71 tags/v1.19.0~83", "commitMessage": "core: fix a channel panic bug caused by calling NameResolver.refresh() when it's not started (#5223)\n\nResolves #5222\r\n", "commitDateTime": "2019-01-10 11:28:58", "authoredDateTime": "2019-01-10 11:28:58", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "insertions": 23, "deletions": 14, "lines": 37}, {"filePath": "core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java", "insertions": 40, "deletions": 12, "lines": 52}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ManagedChannelImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.refreshNameResolutionNow()", "TOT": 6, "UPD": 1, "INS": 0, "MOV": 4, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.shutdownNameResolverAndLoadBalancer(boolean)", "TOT": 14, "UPD": 3, "INS": 2, "MOV": 7, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.LbHelperImpl.handleInternalSubchannelState(io.grpc.ConnectivityStateInfo)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.LbHelperImpl.refreshNameResolution().1LoadBalancerRefreshNameResolution.run()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.resetConnectBackoff().1ResetConnectBackoff.run()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.DelayedNameResolverRefresh.run()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.refreshAndResetNameResolution()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.refreshNameResolution()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ManagedChannelImplTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.refreshNameResolutionWhenSubchannelConnectionFailed()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.refreshNameResolutionWhenOobChannelConnectionFailed()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.subtestRefreshNameResolutionWhenConnectionFailed(boolean)", "TOT": 12, "UPD": 2, "INS": 0, "MOV": 7, "DEL": 3}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.FakeNameResolverFactory.FakeNameResolver.refresh()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.notRefreshNameResolution_whenSubchannelConnectionFailed_idle()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.notRefreshNameResolution_whenOobChannelConnectionFailed_idle()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.subtestNameResolutionRefreshWhenConnectionFailed(boolean,boolean)", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "bc9fbd74026684c8a87c46d49bfd93a377eadd56", "commitGHEventType": "referenced", "commitUser": "zhangkun83", "commitParents": ["ba186f7bbebf2262f7d0439062b0f4268a57a7c8"], "nameRev": "bc9fbd74026684c8a87c46d49bfd93a377eadd56 tags/v1.18.0~3", "commitMessage": "core: fix a channel panic bug caused by calling NameResolver.refresh() when it's not started (#5223) (#5229)\n\nResolves #5222", "commitDateTime": "2019-01-10 14:20:07", "authoredDateTime": "2019-01-10 14:20:07", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "insertions": 23, "deletions": 14, "lines": 37}, {"filePath": "core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java", "insertions": 40, "deletions": 12, "lines": 52}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ManagedChannelImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.refreshNameResolutionNow()", "TOT": 6, "UPD": 1, "INS": 0, "MOV": 4, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.shutdownNameResolverAndLoadBalancer(boolean)", "TOT": 14, "UPD": 3, "INS": 2, "MOV": 7, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.LbHelperImpl.handleInternalSubchannelState(io.grpc.ConnectivityStateInfo)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.LbHelperImpl.refreshNameResolution().1LoadBalancerRefreshNameResolution.run()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.resetConnectBackoff().1ResetConnectBackoff.run()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.DelayedNameResolverRefresh.run()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.refreshAndResetNameResolution()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.refreshNameResolution()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ManagedChannelImplTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.refreshNameResolutionWhenSubchannelConnectionFailed()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.refreshNameResolutionWhenOobChannelConnectionFailed()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.subtestRefreshNameResolutionWhenConnectionFailed(boolean)", "TOT": 12, "UPD": 2, "INS": 0, "MOV": 7, "DEL": 3}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.FakeNameResolverFactory.FakeNameResolver.refresh()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.notRefreshNameResolution_whenSubchannelConnectionFailed_idle()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.notRefreshNameResolution_whenOobChannelConnectionFailed_idle()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.subtestNameResolutionRefreshWhenConnectionFailed(boolean,boolean)", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 2, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Unable to load LoadBalancerProvider in the runtime for Bazel apps", "body": "### What version of gRPC are you using?\r\nv1.17.0\r\n\r\nBazel apps if not having a (transitive) dependency for `@io_grpc_grpc_java//core:util` will fail with the following error in the runtime:\r\n\r\n```\r\nException in thread \"main\" java.util.ServiceConfigurationError: io.grpc.LoadBalancerProvider: Provider io.grpc.util.SecretRoundRobinLoadBalancerProvider$Provider not found\r\n        at java.util.ServiceLoader.fail(ServiceLoader.java:239)\r\n        at java.util.ServiceLoader.access$300(ServiceLoader.java:185)\r\n        at java.util.ServiceLoader$LazyIterator.nextService(ServiceLoader.java:372)\r\n        at java.util.ServiceLoader$LazyIterator.next(ServiceLoader.java:404)\r\n        at java.util.ServiceLoader$1.next(ServiceLoader.java:480)\r\n        at io.grpc.ServiceProviders.loadAll(ServiceProviders.java:67)\r\n        at io.grpc.LoadBalancerRegistry.getDefaultRegistry(LoadBalancerRegistry.java:102)\r\n        at io.grpc.internal.AutoConfiguredLoadBalancerFactory.<clinit>(AutoConfiguredLoadBalancerFactory.java:42)\r\n        at io.grpc.internal.ManagedChannelImpl.<init>(ManagedChannelImpl.java:534)\r\n        at io.grpc.internal.AbstractManagedChannelImplBuilder.build(AbstractManagedChannelImplBuilder.java:428)\r\n        at io.grpc.examples.helloworld.HelloWorldClient.<init>(HelloWorldClient.java:41)\r\n        at io.grpc.examples.helloworld.HelloWorldClient.main(HelloWorldClient.java:73)\r\n```\r\n\r\nA temporary workaround is adding a runtime dependency in the BUILD file\r\n```\r\nruntime_deps = [\r\n        \"@io_grpc_grpc_java//core:util\",\r\n    ],\r\n```\r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/5114", "user": "dapengzhang0", "labels": ["bug"], "created": "2018-12-05 00:05:20", "closed": "2018-12-05 17:46:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "alts client throws IllegalStateException: Cannot write frames while the TSI handshake is in progress", "body": "```\r\nzdapeng@quantumcomputer:~/git/grpc-java/examples$ ./build/install/examples/bin/hello-world-alts-client\r\nNov 30, 2018 4:18:18 PM io.grpc.examples.alts.HelloWorldAltsClient run\r\nINFO: Got message: \"Hello, Waldo\"\r\n\r\nNov 30, 2018 4:18:18 PM io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext notifyHandlerException\r\nWARNING: An exception was thrown by a user handler while handling an exceptionCaught event\r\njava.lang.IllegalStateException: Cannot write frames while the TSI handshake is in progress\r\n\tat com.google.common.base.Preconditions.checkState(Preconditions.java:510)\r\n\tat io.grpc.alts.internal.TsiFrameHandler.flush(TsiFrameHandler.java:150)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749)\r\n\tat io.grpc.netty.shaded.io.netty.handler.codec.http2.Http2ConnectionHandler.onError(Http2ConnectionHandler.java:619)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.AbstractNettyHandler.exceptionCaught(AbstractNettyHandler.java:81)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:285)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:264)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:256)\r\n\tat io.grpc.netty.shaded.io.netty.channel.ChannelInboundHandlerAdapter.exceptionCaught(ChannelInboundHandlerAdapter.java:131)\r\n\tat io.grpc.alts.internal.TsiFrameHandler.exceptionCaught(TsiFrameHandler.java:108)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:285)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.notifyHandlerException(AbstractChannelHandlerContext.java:850)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:778)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749)\r\n\tat io.grpc.netty.shaded.io.netty.handler.codec.http2.Http2ConnectionHandler.flush(Http2ConnectionHandler.java:201)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:776)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:768)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:749)\r\n\tat io.grpc.netty.shaded.io.netty.channel.DefaultChannelPipeline.flush(DefaultChannelPipeline.java:1013)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannel.flush(AbstractChannel.java:248)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.WriteQueue.flush(WriteQueue.java:124)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.WriteQueue.access$000(WriteQueue.java:32)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.WriteQueue$1.run(WriteQueue.java:44)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)\r\n\tat io.grpc.netty.shaded.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nDebug shows io.grpc.alts.internal.TsiFrameHandler.release(TsiFrameHandler.java:188) is called first.\r\n\r\n```\r\nDEBUG: release() is called\r\n\tat io.grpc.alts.internal.TsiFrameHandler.release(TsiFrameHandler.java:188)\r\n\tat io.grpc.alts.internal.TsiFrameHandler.close(TsiFrameHandler.java:133)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeClose(AbstractChannelHandlerContext.java:624)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.close(AbstractChannelHandlerContext.java:608)\r\n\tat io.grpc.netty.shaded.io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener.operationComplete(Http2ConnectionHandler.java:939)\r\n\tat io.grpc.netty.shaded.io.netty.handler.codec.http2.Http2ConnectionHandler$ClosingChannelFutureListener.operationComplete(Http2ConnectionHandler.java:911)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:511)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:485)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:424)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:162)\r\n\tat io.grpc.netty.shaded.io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:95)\r\n\tat io.grpc.netty.shaded.io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:30)\r\n\tat io.grpc.netty.shaded.io.netty.handler.codec.http2.Http2ConnectionHandler.doGracefulShutdown(Http2ConnectionHandler.java:491)\r\n\tat io.grpc.netty.shaded.io.netty.handler.codec.http2.Http2ConnectionHandler.close(Http2ConnectionHandler.java:485)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyClientHandler.close(NettyClientHandler.java:397)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyClientHandler.gracefulClose(NettyClientHandler.java:659)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyClientHandler.write(NettyClientHandler.java:316)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:738)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:730)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:816)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:723)\r\n\tat io.grpc.netty.shaded.io.netty.channel.DefaultChannelPipeline.write(DefaultChannelPipeline.java:1061)\r\n\tat io.grpc.netty.shaded.io.netty.channel.AbstractChannel.write(AbstractChannel.java:295)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.WriteQueue$AbstractQueuedCommand.run(WriteQueue.java:174)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.WriteQueue.flush(WriteQueue.java:112)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.WriteQueue.access$000(WriteQueue.java:32)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.WriteQueue$1.run(WriteQueue.java:44)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)\r\n\tat io.grpc.netty.shaded.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)\r\n\tat io.grpc.netty.shaded.io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/5101", "user": "dapengzhang0", "labels": ["bug"], "created": "2018-11-30 21:22:49", "closed": "2019-01-03 00:57:45", "commits": {}, "ttf": 33.000277777777775, "commitsDetails": []}, {"title": "Separate usage of io.grpc.internal.TimeProvider for time stamp and backoff", "body": "Now TimeProvider is used for both time stamp and backoff. Time stamp should reflect system clock changes (?) whereas backoff duration should be absolute amount of time of delay.\r\n\r\nRelated to #4883.\r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/5056", "user": "dapengzhang0", "labels": ["bug"], "created": "2018-11-13 20:06:18", "closed": "2019-03-25 17:47:15", "commits": {}, "ttf": 131.00027777777777, "commitsDetails": []}, {"title": "1.13.2 - 1.15.1: 0.18.0 Bazel build fails - OkHttpClientTransport access guard failure", "body": "### What version of gRPC are you using?\r\nThe problem occurs on version 1.13.2 through 1.15.1 of gRPC. Using bazel 0.18.0 on OpenJDK 10. The output of bazel info is at end of this issue.\r\n\r\n### What did you expect to see?\r\nNo build error in bazel. The workaround for now is to put 'build --javacopt=\"-XepDisableAllChecks\"' in .bazelrc or on command line\r\n\r\n### This is the output of the build error that is seen:\r\n\r\nERROR: /private/var/tmp/_bazel_bbuxton/ca0a0f1185548889895b36bee140b99b/external/io_grpc_grpc_java/okhttp/BUILD.bazel:1:1: Building external/io_grpc_grpc_java/okhttp/libokhttp-class.jar (35 source files) failed (Exit 1)\r\nexternal/io_grpc_grpc_java/okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java:350: error: [GuardedBy] This access should be guarded by 'this.lock', which is not currently held\r\n        transportTracer);\r\n        ^\r\n    (see https://errorprone.info/bugpattern/GuardedBy)\r\n\r\n$ bazel version\r\nWARNING: failed to raise resource limit 8 to 32768: Invalid argument\r\nWARNING: Processed legacy workspace file /Users/bbuxton/git/services/sfdc-bazel/tools/bazel.rc. This file will not be processed in the next release of Bazel. Please read https://github.com/bazelbuild/bazel/issues/6319 for further information, including how to upgrade.\r\nBuild label: 0.18.0\r\nBuild target: bazel-out/darwin-opt/bin/src/main/java/com/google/devtools/build/lib/bazel/BazelServer_deploy.jar\r\nBuild time: Mon Oct 15 08:33:10 2018 (1539592390)\r\nBuild timestamp: 1539592390\r\nBuild timestamp as int: 1539592390\r\n\r\n$ bazel info\r\njava-runtime: OpenJDK Runtime Environment (build 9.0.7.1+1) by Azul Systems, Inc.\r\njava-vm: OpenJDK 64-Bit Server VM (build 9.0.7.1+1, mixed mode) by Azul Systems, Inc.\r\nmax-heap-size: 3817MB\r\nrelease: release 0.18.0\r\n\r\nbazel build rule:\r\ngit_repository(\r\n    name = \"io_grpc_grpc_java\",\r\n    remote = \"https://github.com/grpc/grpc-java.git\",\r\n    commit = \"6657c310947bc61fcc579e31de2c3c113bc238b3\", # 1.15.1\r\n    # commit = \"1b185c8c98796ae6456afb61b135a2d94c687fc4\", # 1.13.2\r\n)\r\nload(\"@io_grpc_grpc_java//:repositories.bzl\", \"grpc_java_repositories\")\r\n\r\ngrpc_java_repositories(\r\n    omit_com_google_api_grpc_google_common_protos=False,\r\n    omit_com_google_auth_google_auth_library_credentials=False,\r\n    omit_com_google_code_findbugs_jsr305=True,\r\n    omit_com_google_code_gson=True,\r\n    omit_com_google_errorprone_error_prone_annotations=True,\r\n    omit_com_google_guava=True,\r\n    omit_com_google_protobuf=True,\r\n    omit_com_google_protobuf_javalite=True,\r\n    omit_com_google_protobuf_nano_protobuf_javanano=False,\r\n    omit_com_google_truth_truth=False,\r\n    omit_com_squareup_okhttp=False,\r\n    omit_com_squareup_okio=False,\r\n    omit_io_netty_buffer=True,\r\n    omit_io_netty_common=True,\r\n    omit_io_netty_transport=True,\r\n    omit_io_netty_codec=True,\r\n    omit_io_netty_codec_socks=True,\r\n    omit_io_netty_codec_http=True,\r\n    omit_io_netty_codec_http2=True,\r\n    omit_io_netty_handler=True,\r\n    omit_io_netty_handler_proxy=True,\r\n    omit_io_netty_resolver=True,\r\n    omit_io_netty_tcnative_boringssl_static=False,\r\n    omit_io_opencensus_api=False,\r\n    omit_io_opencensus_grpc_metrics=False,\r\n    omit_junit_junit=True,\r\n    omit_org_apache_commons_lang3=True,\r\n)", "url": "https://github.com/grpc/grpc-java/issues/4985", "user": "btbuxton", "labels": ["bug"], "created": "2018-10-23 13:55:22", "closed": "2018-10-30 17:17:34", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "DnsNameResolver swallows UnknownHostException", "body": "As pointed out to us by a Googler, when JNDI is not enabled (the default), this condition will never succeed since `balancerAddressesException == null`:\r\nhttps://github.com/grpc/grpc-java/blob/v1.15.1/core/src/main/java/io/grpc/internal/DnsNameResolver.java#L371\r\n\r\nThis causes DnsNameResolver to return an empty address list, which causes \"UNAVAILABLE: NameResolver returned an empty list\".\r\n\r\nCC @creamsoup \r\n\r\nThis seems related, in part, to #4948.", "url": "https://github.com/grpc/grpc-java/issues/4951", "user": "ejona86", "labels": ["bug"], "created": "2018-10-15 15:31:19", "closed": "2018-10-15 23:59:02", "commits": {"e8cf3fa8eaca3abc61c066f67a94e62bdbb7322d": {"commitGHEventType": "referenced", "commitUser": "carl-mastrangelo"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "e8cf3fa8eaca3abc61c066f67a94e62bdbb7322d", "commitGHEventType": "referenced", "commitUser": "carl-mastrangelo", "commitParents": ["ddc3673591647166e9235f7fb04f3e446d2b0111"], "nameRev": "e8cf3fa8eaca3abc61c066f67a94e62bdbb7322d tags/v1.16.0~8", "commitMessage": "core: throw exception on resolution failure and no jndi resolver\n\nBackport of #4953\r\nUpdates #4951", "commitDateTime": "2018-10-17 12:51:23", "authoredDateTime": "2018-10-17 12:51:23", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/DnsNameResolver.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "core/src/test/java/io/grpc/internal/DnsNameResolverTest.java", "insertions": 18, "deletions": 0, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DnsNameResolver.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DnsNameResolver.resolveAll(io.grpc.internal.DnsNameResolver$AddressResolver,io.grpc.internal.DnsNameResolver$ResourceResolver,boolean,boolean,java.lang.String)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DnsNameResolverTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DnsNameResolverTest.resolveAll_nullResourceResolver_addressFailure()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Android OOM upon network disconnect", "body": "With grpc-java 1.15.0 on Android I am seeing out of memory issues when network connectivity goes away. `isReady()` indicates unlimited readiness on the outbound stream for a bidi call until Java runs out of memory.\r\n\r\nHere is the relevant code, the complete example is at https://github.com/bubenheimer/grpcsinglestreamingcallflush\r\n\r\n    StreamDataGrpc.newStub(channel).streamData(\r\n            new ClientResponseObserver<Item, Item>() {\r\n                private int outCounter = 0;\r\n                private int inCounter = 0;\r\n    \r\n                @Override\r\n                public void beforeStart(\r\n                        final ClientCallStreamObserver<Item> requestStream) {\r\n                    requestStream.setOnReadyHandler(() -> {\r\n                        while (requestStream.isReady()) {\r\n                            final Item item = Item.newBuilder()\r\n                                    .setValue(Integer.toString(outCounter++)).build();\r\n                            requestStream.onNext(item);\r\n                            if (outCounter == 50_000) {\r\n                                requestStream.onCompleted();\r\n                                break;\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n                @Override\r\n                public void onNext(final Item value) {\r\n                    ++inCounter;\r\n                }\r\n    \r\n                @Override\r\n                public void onError(final Throwable t) {\r\n                    Log.w(TAG, t);\r\n                }\r\n    \r\n                @Override\r\n                public void onCompleted() {\r\n                    Log.i(TAG, \"Call completed after \" + inCounter + \" Items\");\r\n                }\r\n            });\r\n\r\nwhere `channel` is more persistently defined as\r\n\r\n    channel = AndroidChannelBuilder\r\n                // localhost server from Android emulator\r\n                .forAddress(\"10.0.2.2\", 8082)\r\n                .usePlaintext()\r\n                .context(getApplicationContext())\r\n                .build();\r\n\r\nTo trigger the issue I do one complete run of the RPC (50,000 messages upstream & 50,000 messages downstream) with the mobile data network on, then I turn mobile data off and do a second run on the same channel. The second run quickly runs out of memory as grpc-java buffers messages it can't send. The channel does not see a break in the connection when mobile data switches off.\r\n\r\nI expected that isReady() would take care of this problem, but it did not. I have tried different variations, including one where writing to the stream is done from a separate, dedicated thread, with 1ms delays between each write, to not block anything and avoid races, but the outcome was the same.", "url": "https://github.com/grpc/grpc-java/issues/4860", "user": "bubenheimer", "labels": ["bug", "enhancement"], "created": "2018-09-16 21:18:45", "closed": "2018-12-29 01:20:05", "commits": {"6bf0936f8ef0e68f2bacfec2e0f58fec8ad7c53f": {"commitGHEventType": "referenced", "commitUser": "creamsoup"}}, "ttf": 103.00027777777778, "commitsDetails": [{"commitHash": "6bf0936f8ef0e68f2bacfec2e0f58fec8ad7c53f", "commitGHEventType": "referenced", "commitUser": "creamsoup", "commitParents": ["a4859c1e931db7886e2f87f3835286ae1fd10d9a"], "nameRev": "6bf0936f8ef0e68f2bacfec2e0f58fec8ad7c53f tags/v1.18.0~11", "commitMessage": "okhttp: move async mechanism from FrameWriter to sink (AsyncSink) (#4916)\n\nOptimize OkHttp transport's memory use by getting rid of queuing writes in\r\nAsyncFrameWriter. If any write is pending due to connection issue or by flow\r\ncontrol, AsyncFrameWriter can use at least 8K per each task (task includes\r\nbuffer) even if the actual payload is very small. To merge pending writes,\r\nAsync mechanism is moved from AsyncFrameWriter to AsyncSink (AsyncSink \r\nis used by okio's FrameWriter). AsyncSink is still relying on okio's buffer to\r\ndecide merging writes or not.\r\n\r\nResolves #4860", "commitDateTime": "2018-12-28 17:20:03", "authoredDateTime": "2018-12-28 17:20:03", "commitGitStats": [{"filePath": "okhttp/src/main/java/io/grpc/okhttp/AsyncFrameWriter.java", "insertions": 0, "deletions": 276, "lines": 276}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/AsyncSink.java", "insertions": 162, "deletions": 0, "lines": 162}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/ExceptionHandlingFrameWriter.java", "insertions": 214, "deletions": 0, "lines": 214}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java", "insertions": 68, "deletions": 49, "lines": 117}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/OutboundFlowController.java", "insertions": 1, "deletions": 6, "lines": 7}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/AsyncFrameWriterTest.java", "insertions": 0, "deletions": 149, "lines": 149}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/AsyncSinkTest.java", "insertions": 289, "deletions": 0, "lines": 289}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/ExceptionHandlingFrameWriterTest.java", "insertions": 77, "deletions": 0, "lines": 77}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/OkHttpClientStreamTest.java", "insertions": 16, "deletions": 9, "lines": 25}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/OkHttpClientTransportTest.java", "insertions": 97, "deletions": 19, "lines": 116}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "upgrading vision past 1.33.0 gives IllegalArgumentException: SunJSSE selected, but Jetty NPN/ALPN unavailable", "body": "I'm running a discord bot on a raspberry pi and using vision to perform OCR on mobile screenshots. It works fine with 1.33 and lower, but 1.34 and 1.35 throw `IllegalArgumentException: SunJSSE selected, but Jetty NPN/ALPN unavailable`.\r\n\r\n```\r\nuname -a\r\nLinux raspberrypi 4.14.50-v7+ #1122 SMP Tue Jun 19 12:26:26 BST 2018 armv7l GNU/Linux\r\n```\r\n\r\nI'm running a build of Java 10 from here (since the official openjdk binaries are 64 bit):\r\n\r\nhttps://www.bell-sw.com/java-for-raspberry-pi.html\r\n\r\n```\r\njava --version\r\nopenjdk 10.0.1-BellSoft 2018-04-17\r\nOpenJDK Runtime Environment (build 10.0.1-BellSoft+0)\r\nOpenJDK Server VM (build 10.0.1-BellSoft+0, mixed mode)\r\n```\r\n\r\nRelvant stack trace from 1.35:\r\n```\r\njava.lang.IllegalArgumentException: SunJSSE selected, but Jetty NPN/ALPN unavailable\r\n\tat io.grpc.netty.shaded.io.grpc.netty.GrpcSslContexts.configure(GrpcSslContexts.java:223)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.GrpcSslContexts.configure(GrpcSslContexts.java:189)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.GrpcSslContexts.configure(GrpcSslContexts.java:171)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.GrpcSslContexts.forClient(GrpcSslContexts.java:120)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder$NettyTransportFactory$DefaultNettyTransportCreationParamsFilterFactory.<init>(NettyChannelBuilder.java:558)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder$NettyTransportFactory$DefaultNettyTransportCreationParamsFilterFactory.<init>(NettyChannelBuilder.java:551)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder$NettyTransportFactory.<init>(NettyChannelBuilder.java:489)\r\n\tat io.grpc.netty.shaded.io.grpc.netty.NettyChannelBuilder.buildTransportFactory(NettyChannelBuilder.java:337)\r\n\tat io.grpc.internal.AbstractManagedChannelImplBuilder.build(AbstractManagedChannelImplBuilder.java:390)\r\n\tat com.google.api.gax.grpc.InstantiatingGrpcChannelProvider.createSingleChannel(InstantiatingGrpcChannelProvider.java:206)\r\n\tat com.google.api.gax.grpc.InstantiatingGrpcChannelProvider.createChannel(InstantiatingGrpcChannelProvider.java:157)\r\n\tat com.google.api.gax.grpc.InstantiatingGrpcChannelProvider.getTransportChannel(InstantiatingGrpcChannelProvider.java:149)\r\n\tat com.google.api.gax.rpc.ClientContext.create(ClientContext.java:151)\r\n\tat com.google.cloud.vision.v1.stub.GrpcImageAnnotatorStub.create(GrpcImageAnnotatorStub.java:84)\r\n\tat com.google.cloud.vision.v1.stub.ImageAnnotatorStubSettings.createStub(ImageAnnotatorStubSettings.java:120)\r\n\tat com.google.cloud.vision.v1.ImageAnnotatorClient.<init>(ImageAnnotatorClient.java:136)\r\n\tat com.google.cloud.vision.v1.ImageAnnotatorClient.create(ImageAnnotatorClient.java:117)\r\n\tat com.google.cloud.vision.v1.ImageAnnotatorClient.create(ImageAnnotatorClient.java:108)\r\n\r\n```\r\n\r\nIs this a bug, or intentional? Can I enable or disable something via config to update the client?", "url": "https://github.com/grpc/grpc-java/issues/4620", "user": "efenderbosch", "labels": ["bug"], "created": "2018-07-08 14:21:50", "closed": "2018-07-10 16:14:51", "commits": {"32d50eb3b3ed9d0701ad352dacc7d71e2d6425f1": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "fadceecd872f35c0aa349f6f27d93cd91e01d8e4": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "6498832c529e608cb9e91df79871816468db6237": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "32d50eb3b3ed9d0701ad352dacc7d71e2d6425f1", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["9222dc5d018c1246e1298032750d445274c4b0b8"], "nameRev": "32d50eb3b3ed9d0701ad352dacc7d71e2d6425f1 tags/v1.14.0~18", "commitMessage": "netty: Fix regression in Java 9 ALPN support\n\nEnable testing on Java 9+ in TlsTest, to prevent future regressions.\n\nFixes #4620\n", "commitDateTime": "2018-07-10 09:14:49", "authoredDateTime": "2018-07-09 11:13:10", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/GrpcSslContexts.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "netty/src/test/java/io/grpc/netty/TlsTest.java", "insertions": 13, "deletions": 6, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GrpcSslContexts.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.GrpcSslContexts.configure(io.netty.handler.ssl.SslContextBuilder,java.security.Provider)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "TlsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.TlsTest.TlsImpl", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.TlsTest.setUp()", "TOT": 6, "UPD": 2, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.TlsTest.data()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "fadceecd872f35c0aa349f6f27d93cd91e01d8e4", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["5cd2f1fc11be01e29d7def5ef2b1194604f1228d"], "nameRev": "fadceecd872f35c0aa349f6f27d93cd91e01d8e4 tags/v1.13.2~2", "commitMessage": "netty: Fix regression in Java 9 ALPN support\n\nEnable testing on Java 9+ in TlsTest, to prevent future regressions.\n\nFixes #4620\n", "commitDateTime": "2018-07-10 16:04:35", "authoredDateTime": "2018-07-09 11:13:10", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/GrpcSslContexts.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "netty/src/test/java/io/grpc/netty/TlsTest.java", "insertions": 13, "deletions": 6, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GrpcSslContexts.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.GrpcSslContexts.configure(io.netty.handler.ssl.SslContextBuilder,java.security.Provider)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "TlsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.TlsTest.TlsImpl", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.TlsTest.setUp()", "TOT": 6, "UPD": 2, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.TlsTest.data()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "6498832c529e608cb9e91df79871816468db6237", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["60e45be9507d8890e8457b25782814513accafed"], "nameRev": "6498832c529e608cb9e91df79871816468db6237 tags/v1.12.1~2", "commitMessage": "netty: Fix regression in Java 9 ALPN support\n\nEnable testing on Java 9+ in TlsTest, to prevent future regressions.\n\nFixes #4620\n", "commitDateTime": "2018-07-10 16:36:10", "authoredDateTime": "2018-07-09 11:13:10", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/GrpcSslContexts.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "netty/src/test/java/io/grpc/netty/TlsTest.java", "insertions": 13, "deletions": 6, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GrpcSslContexts.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.GrpcSslContexts.configure(io.netty.handler.ssl.SslContextBuilder,java.security.Provider)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "TlsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.TlsTest.TlsImpl", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.TlsTest.setUp()", "TOT": 6, "UPD": 2, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.TlsTest.data()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["32d50eb3b3ed9d0701ad352dacc7d71e2d6425f1"], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 0, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.GrpcSslContexts.configure(io.netty.handler.ssl.SslContextBuilder,java.security.Provider)"]}, {"title": "Audit code path when GrpcLB is not in ClassPath", "body": "We need to guarantee that if GRPCLB addresses are provided by the NameResolver, they won't make it to a LB instance other than GRPCLB, as other LB types will not properly ignore the GRPCLB addresses and try to route traffic to them and never realize all such RPCs will fail.\r\n\r\nToday it seems AutoConfiguredLoadBalancerFactory will throw, which isn't probably appropriate because it will cause the channel to go into panic mode. Instead, it could choose a LB instance that fails all RPCs with a clear Status. Or it could consider stripping the LB addresses and continue like normal, passing the non-LB addresses to the PF/RR/etc. If there are no non-LB addresses, maybe it could still fail RPCs with a clear status saying gRPCLB is required for this target.\r\n\r\nWe should also add a comment to the GRPCLB Attribute Key noting that LB policies won't receive it.", "url": "https://github.com/grpc/grpc-java/issues/4602", "user": "ejona86", "labels": ["bug"], "created": "2018-06-29 16:17:11", "closed": "2020-03-27 00:46:06", "commits": {"0cc0f2d1700c8f560cc0cebd796e9e5ce0058216": {"commitGHEventType": "referenced", "commitUser": "zhangkun83"}, "1deeb4b34b0a65ccc6d4d5652b8bf495279ef550": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 636.0002777777778, "commitsDetails": [{"commitHash": "0cc0f2d1700c8f560cc0cebd796e9e5ce0058216", "commitGHEventType": "referenced", "commitUser": "zhangkun83", "commitParents": ["8ff92a4a7d3eca01e01832ff5ed8f9f9229d4ffa"], "nameRev": "0cc0f2d1700c8f560cc0cebd796e9e5ce0058216 tags/v1.18.0~46", "commitMessage": "core: do not fail RPCs if balancer address exists but grpclb is unavailable (#5129)\n\nWhen service owner turns on grpclb through service config, it\r\nshouldn't break existing clients that don't have grpclb in their\r\nclasspath.\r\n\r\nResolves #4602\r\n", "commitDateTime": "2018-12-06 13:40:30", "authoredDateTime": "2018-12-06 13:40:30", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/AutoConfiguredLoadBalancerFactory.java", "insertions": 101, "deletions": 64, "lines": 165}, {"filePath": "core/src/test/java/io/grpc/internal/AutoConfiguredLoadBalancerFactoryTest.java", "insertions": 160, "deletions": 55, "lines": 215}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AutoConfiguredLoadBalancerFactory.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.decideLoadBalancerProvider(java.util.List,java.util.Map,io.grpc.ChannelLogger)", "TOT": 13, "UPD": 6, "INS": 0, "MOV": 2, "DEL": 5}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer", "TOT": 11, "UPD": 0, "INS": 2, "MOV": 7, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer.handleResolvedAddressGroups(java.util.List,io.grpc.Attributes)", "TOT": 5, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.getProviderOrThrow(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory", "TOT": 6, "UPD": 0, "INS": 4, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.PolicySelection", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer.decideLoadBalancerProvider(java.util.List,java.util.Map)", "TOT": 6, "UPD": 0, "INS": 6, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer.handleNameResolutionError(io.grpc.Status)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer.handleSubchannelState(io.grpc.internal.Subchannel,io.grpc.ConnectivityStateInfo)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer.shutdown()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer.getDelegate()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer.setDelegate(io.grpc.LoadBalancer)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactory.AutoConfiguredLoadBalancer.getDelegateProvider()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "AutoConfiguredLoadBalancerFactoryTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_serviceConfigLbPolicyOverridesDefault()", "TOT": 18, "UPD": 4, "INS": 1, "MOV": 12, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.handleResolvedAddressGroups_propagateLbConfigToDelegate()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_oneBalancer_noServiceConfig_grpclb()", "TOT": 13, "UPD": 2, "INS": 4, "MOV": 5, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.channelTracing_lbPolicyChanged()", "TOT": 7, "UPD": 2, "INS": 2, "MOV": 3, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.handleResolvedAddressGroups_keepOldBalancer()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.handleResolvedAddressGroups_shutsDownOldBalancer()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_noBalancerAddresses_noServiceConfig_pickFirst()", "TOT": 7, "UPD": 1, "INS": 4, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_serviceConfigLbConfigSkipUnknown()", "TOT": 8, "UPD": 1, "INS": 4, "MOV": 1, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_serviceConfigLbConfigOverridesDefault()", "TOT": 7, "UPD": 1, "INS": 3, "MOV": 1, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_serviceConfigLbPolicyFailsOnUnknown()", "TOT": 8, "UPD": 1, "INS": 2, "MOV": 3, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_serviceConfigLbConfigFailsOnUnknown()", "TOT": 8, "UPD": 1, "INS": 2, "MOV": 4, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.channelTracing_lbPolicyChanged().19", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_grpclbOverridesServiceConfigLbPolicy()", "TOT": 13, "UPD": 1, "INS": 4, "MOV": 6, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_grpclbOverridesServiceConfigLbPolicy().11", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.channelTracing_lbPolicyChanged().19.getSynchronizationContext()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.channelTracing_lbPolicyChanged().19.createOobChannel(io.grpc.EquivalentAddressGroup,java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_grpclbOverridesServiceConfigLbConfig()", "TOT": 8, "UPD": 0, "INS": 4, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.handleResolvedAddressGroups_propagateOnlyBackendAddrsToDelegate()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_grpclbProviderNotFound_noBackendAddress()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.FakeRoundRobinLoadBalancerProvider", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AutoConfiguredLoadBalancerFactoryTest.decideLoadBalancerProvider_grpclbProviderNotFound_fallbackToRoundRobin()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "1deeb4b34b0a65ccc6d4d5652b8bf495279ef550", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["bb12478cc15a2ee6c6c619b977ee9f2ee43260ae"], "nameRev": "1deeb4b34b0a65ccc6d4d5652b8bf495279ef550 tags/v1.17.1~2", "commitMessage": "core: disable SRV records lookup\n\nThis effectively reverts c729a0f. This is necessary because #4602 is\nnot resolved.\n", "commitDateTime": "2018-12-06 15:05:45", "authoredDateTime": "2018-12-06 14:13:16", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/DnsNameResolver.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DnsNameResolver.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DnsNameResolver", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1deeb4b34b0a65ccc6d4d5652b8bf495279ef550"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.DnsNameResolver"]}, {"title": "StreamObservers.copyWithFlowControl calls StreamObserver.onComplete twice", "body": "Client stream observer on ready handler is invoked after stream is half closed.\r\n```java\r\n      StreamObserver<HelloReply> resp = new ClientResponseObserver<HelloRequest, HelloReply>() {\r\n        @Override\r\n        public void onNext(HelloReply value) {\r\n\r\n        }\r\n\r\n        @Override\r\n        public void onError(Throwable t) {\r\n          t.printStackTrace();\r\n        }\r\n\r\n        @Override\r\n        public void onCompleted() {\r\n        }\r\n\r\n        @Override\r\n        public void beforeStart(ClientCallStreamObserver<HelloRequest> requestStream) {\r\n          StreamObservers.copyWithFlowControl(\r\n              ImmutableList.of(HelloRequest.newBuilder().setName(payload).build()), \r\n              requestStream);\r\n        }\r\n      };\r\n     stub.sayHello(resp);\r\n```\r\nFollowing error is found:\r\n\r\n```\r\n> io.grpc.StatusRuntimeException: CANCELLED: Failed to call onReady.\r\n\tat io.grpc.Status.asRuntimeException(Status.java:526)\r\n\tat io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onClose(ClientCalls.java:419)\r\n\tat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:37)\r\n\tat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)\r\n\tat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)\r\n\tat io.grpc.internal.CensusStatsModule$StatsClientInterceptor$1$1.onClose(CensusStatsModule.java:684)\r\n\tat io.grpc.PartialForwardingClientCallListener.onClose(PartialForwardingClientCallListener.java:37)\r\n\tat io.grpc.ForwardingClientCallListener.onClose(ForwardingClientCallListener.java:23)\r\n\tat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onClose(ForwardingClientCallListener.java:40)\r\n\tat io.grpc.internal.CensusTracingModule$TracingClientInterceptor$1$1.onClose(CensusTracingModule.java:391)\r\n\tat io.grpc.internal.ClientCallImpl.closeObserver(ClientCallImpl.java:471)\r\n\tat io.grpc.internal.ClientCallImpl.access$300(ClientCallImpl.java:63)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.close(ClientCallImpl.java:553)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl.access$600(ClientCallImpl.java:474)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamOnReady.runInContext(ClientCallImpl.java:613)\r\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\r\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:123)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.lang.IllegalStateException: call already half-closed\r\n\tat com.google.common.base.Preconditions.checkState(Preconditions.java:501)\r\n\tat io.grpc.internal.ClientCallImpl.halfClose(ClientCallImpl.java:418)\r\n\tat io.grpc.PartialForwardingClientCall.halfClose(PartialForwardingClientCall.java:43)\r\n\tat io.grpc.ForwardingClientCall.halfClose(ForwardingClientCall.java:22)\r\n\tat io.grpc.ForwardingClientCall$SimpleForwardingClientCall.halfClose(ForwardingClientCall.java:44)\r\n\tat io.grpc.PartialForwardingClientCall.halfClose(PartialForwardingClientCall.java:43)\r\n\tat io.grpc.ForwardingClientCall.halfClose(ForwardingClientCall.java:22)\r\n\tat io.grpc.ForwardingClientCall$SimpleForwardingClientCall.halfClose(ForwardingClientCall.java:44)\r\n\tat io.grpc.stub.ClientCalls$CallToStreamObserverAdapter.onCompleted(ClientCalls.java:330)\r\n\tat io.grpc.stub.StreamObservers$1FlowControllingOnReadyHandler.run(StreamObservers.java:52)\r\n\tat io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onReady(ClientCalls.java:426)\r\n\tat io.grpc.PartialForwardingClientCallListener.onReady(PartialForwardingClientCallListener.java:42)\r\n\tat io.grpc.ForwardingClientCallListener.onReady(ForwardingClientCallListener.java:23)\r\n\tat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onReady(ForwardingClientCallListener.java:40)\r\n\tat io.grpc.PartialForwardingClientCallListener.onReady(PartialForwardingClientCallListener.java:42)\r\n\tat io.grpc.ForwardingClientCallListener.onReady(ForwardingClientCallListener.java:23)\r\n\tat io.grpc.ForwardingClientCallListener$SimpleForwardingClientCallListener.onReady(ForwardingClientCallListener.java:40)\r\n\tat io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$1StreamOnReady.runInContext(ClientCallImpl.java:608)\r\n```\r\n\r\n`payload` is a string of  1 million char.\r\nThis error does not happen with small payload.\r\n\r\n### What version of gRPC are you using?\r\n1.11.0\r\n\r\n### What did you expect to see?\r\n`onComplete()` should only be called once for request stream.\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/4558", "user": "biran0079", "labels": ["bug"], "created": "2018-06-12 05:17:01", "closed": "2018-12-05 20:59:21", "commits": {"9111602d7c2a88b7f9db6772d7d6d8399e2ff96b": {"commitGHEventType": "closed", "commitUser": "ejona86"}}, "ttf": 176.00027777777777, "commitsDetails": [{"commitHash": "9111602d7c2a88b7f9db6772d7d6d8399e2ff96b", "commitGHEventType": "closed", "commitUser": "ejona86", "commitParents": ["b8fac8a75e27bcb91b32469ea49a7b4aae192c1e"], "nameRev": "9111602d7c2a88b7f9db6772d7d6d8399e2ff96b tags/v1.18.0~53", "commitMessage": "StreamObservers: make sure onComplete only gets called once from onReadyHandler\n\nFixes #4558", "commitDateTime": "2018-12-05 12:59:09", "authoredDateTime": "2018-12-05 15:59:09", "commitGitStats": [{"filePath": "stub/src/main/java/io/grpc/stub/StreamObservers.java", "insertions": 8, "deletions": 0, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "StreamObservers.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.StreamObservers.copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver).1FlowControllingOnReadyHandler", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.StreamObservers.copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver).1FlowControllingOnReadyHandler.run()", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 3, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9111602d7c2a88b7f9db6772d7d6d8399e2ff96b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 0, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 4, "MOV": 3, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["stub/src/main/java/io/grpc/stub"], "changesInPackagesSPOON": ["io.grpc.stub.StreamObservers.copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver).1FlowControllingOnReadyHandler.run()", "io.grpc.stub.StreamObservers.copyWithFlowControl(java.util.Iterator,io.grpc.stub.CallStreamObserver).1FlowControllingOnReadyHandler"]}, {"title": "Attributes.equals disagrees with hashCode", "body": "```diff\r\ndiff --git a/core/src/test/java/io/grpc/AttributesTest.java b/core/src/test/java/io/grpc/AttributesTest.java\r\nindex 45319c8f0..adb94a458 100644\r\n--- a/core/src/test/java/io/grpc/AttributesTest.java\r\n+++ b/core/src/test/java/io/grpc/AttributesTest.java\r\n@@ -75,5 +75,6 @@ public class AttributesTest {\r\n     Attributes attr2 = Attributes.newBuilder().set(key, v2).build();\r\n \r\n     assertEquals(attr1, attr2);\r\n+    assertEquals(attr1.hashCode(), attr2.hashCode());\r\n   }\r\n }\r\n```\r\n\r\n```\r\nio.grpc.AttributesTest > valueEquality FAILED\r\n    java.lang.AssertionError: expected:<244492244> but was:<1056354025>\r\n        at org.junit.Assert.fail(Assert.java:88)\r\n        at org.junit.Assert.failNotEquals(Assert.java:834)\r\n        at org.junit.Assert.assertEquals(Assert.java:645)\r\n        at org.junit.Assert.assertEquals(Assert.java:631)\r\n        at io.grpc.AttributesTest.valueEquality(AttributesTest.java:78)\r\n```\r\n\r\nWe need to calculate hashCode manually.", "url": "https://github.com/grpc/grpc-java/issues/4459", "user": "ejona86", "labels": ["bug"], "created": "2018-05-11 22:32:17", "closed": "2018-05-23 20:27:04", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "Channels always logspam about service config", "body": "Regression added in 2df76cc7:\r\n```\r\n$ ./build/install/grpc-interop-testing/bin/test-client --server_host_override=foo.test.google.fr --use_test_ca=true\r\nRunning test empty_unary\r\nApr 12, 2018 10:56:13 AM io.grpc.internal.ManagedChannelImpl$NameResolverListenerImpl$1NamesResolved run\r\nWARNING: [io.grpc.internal.ManagedChannelImpl-1] Unexpected exception from parsing service config\r\njava.lang.NullPointerException\r\n\tat io.grpc.internal.ServiceConfigUtil.getMethodConfigFromServiceConfig(ServiceConfigUtil.java:330)\r\n\tat io.grpc.internal.ServiceConfigInterceptor.handleUpdate(ServiceConfigInterceptor.java:69)\r\n\tat io.grpc.internal.ManagedChannelImpl$NameResolverListenerImpl$1NamesResolved.run(ManagedChannelImpl.java:1172)\r\n\tat io.grpc.internal.ChannelExecutor.drain(ChannelExecutor.java:73)\r\n\tat io.grpc.internal.ManagedChannelImpl$LbHelperImpl.runSerialized(ManagedChannelImpl.java:1136)\r\n\tat io.grpc.internal.ManagedChannelImpl$NameResolverListenerImpl.onAddresses(ManagedChannelImpl.java:1188)\r\n\tat io.grpc.internal.DnsNameResolver$1.run(DnsNameResolver.java:238)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n```\r\n\r\nThere should be absolutely no service config processing today. It seems this code path should have been avoided with at least something resembling a null check in ManagedChannelImpl.", "url": "https://github.com/grpc/grpc-java/issues/4333", "user": "ejona86", "labels": ["bug"], "created": "2018-04-12 18:00:42", "closed": "2018-04-13 18:13:58", "commits": {"03465a7f450ea2d026797fa782516bb25200a6a8": {"commitGHEventType": "referenced", "commitUser": "carl-mastrangelo"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "03465a7f450ea2d026797fa782516bb25200a6a8", "commitGHEventType": "referenced", "commitUser": "carl-mastrangelo", "commitParents": ["a6811d5bb154a7aef16a4cd36d0ffb9be3816d25"], "nameRev": "03465a7f450ea2d026797fa782516bb25200a6a8 tags/v1.12.0~32", "commitMessage": "core: don't warn on absent service config\n\nFixes #4333\r\n\r\n\r\n", "commitDateTime": "2018-04-13 11:13:57", "authoredDateTime": "2018-04-13 11:13:57", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "insertions": 11, "deletions": 10, "lines": 21}, {"filePath": "core/src/main/java/io/grpc/internal/ServiceConfigInterceptor.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ManagedChannelImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.NameResolverListenerImpl.onAddresses(java.util.List,io.grpc.Attributes).1NamesResolved.run()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "ServiceConfigInterceptor.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ServiceConfigInterceptor.handleUpdate(java.util.Map)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["03465a7f450ea2d026797fa782516bb25200a6a8"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 11, "lines": 24, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.ManagedChannelImpl.NameResolverListenerImpl.onAddresses(java.util.List,io.grpc.Attributes).1NamesResolved.run()", "io.grpc.internal.ServiceConfigInterceptor.handleUpdate(java.util.Map)"]}, {"title": "Caused by: io.netty.handler.codec.http2.Http2Exception$HeaderListSizeException: Header size exceeded max allowed size (8192)", "body": "### What version of gRPC are you using?\r\n1.10.0\r\n\r\n### What did you expect to see?\r\nThis error occurs when a Java client attempts to send a header larger than 8192 bytes when connected to a server that did not explicitly specify a SETTINGS_MAX_HEADER_LIST_SIZE in its settings frame.  (Note this cannot be replicated using a grpc-java server because netty always specifies a SETTINGS_MAX_HEADER_LIST_SIZE.)\r\n\r\nThe expected result is no error - the client should send the large header to the server.\r\n\r\nThe HTTP/2 spec [Settings section](https://tools.ietf.org/html/rfc7540#section-6.5) says:\r\n1) SETTINGS parameters are not negotiated; **they describe characteristics\r\n   of the sending peer, which are used by the receiving peer.**\r\n2) SETTINGS_MAX_HEADER_LIST_SIZE (0x6):  .... **The initial value of this setting is unlimited.**\r\n\r\nThese statements indicate that if the server does not specify any SETTINGS_MAX_HEADER_LIST_SIZE, then the client should place no limit on the sending header size. However, netty is enforcing a default max header size on both sent and received headers.  And to boot, there does not seem to be any way to specify or disable the client sender header limit through the grpc-java API.  NettyChannelBuilder has the maxHeaderListSize method, but this only specifies the SETTINGS_MAX_HEADER_LIST_SIZE for the receive path.\r\n\r\nI think the proper fix would be for netty to not enforce any limit on client sent header size if the server has not specified a SETTINGS_MAX_HEADER_LIST_SIZE.\r\n\r\nI am looking for a long-term fix for this issue and short-term workaround if anyone has an idea. Thanks!\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/4284", "user": "JLofgren", "labels": ["bug", "netty"], "created": "2018-03-29 17:46:26", "closed": "2018-08-09 21:52:26", "commits": {}, "ttf": 133.00027777777777, "commitsDetails": []}, {"title": "OkHttpChannelBuilder#overrideAuthority not compatible with IPv6 hostname", "body": "### What version of gRPC are you using?\r\n1.10.0\r\n\r\n### What did you expect to see?\r\nBackground: I'm using mutual TLS with a LAN client that presents an IPv6 link-local address as an IP SAN in its X509 certificate.\r\n\r\nI expected to call `OkHttpChannelBuilder.overrideAuthority(\"FE80::FABB:BFFF:FE01:3A52\")` to allow hostname verification to pass.\r\n\r\nInstead, this call yields an `IllegalArgumentException(\"No host in authority\")`. If I instead represent the authority as `\"[FE80::FABB:BFFF:FE01:3A52]\"`, `OkHostnameVerifier`'s `VERIFY_AS_IP_ADDRESS` regex does not match the address (correctly, I believe, as the square brackets are just a URL disambiguation detail and not part of the hostname), and so the verify mechanism ignores the IP SAN entries.\r\n\r\nIf you agree this behavior should be changed I'm happy to submit a PR. Perhaps we'd modify `GrpcUtil#checkAuthority` to strip square brackets from a validated hostname?\r\n\r\n### Message Sequence Charts (Click to expand)\r\nWith `OkHttpChannelBuilder.overrideAuthority(\"FE80::FABB:BFFF:FE01:3A52\")`:\r\n\r\n![link-local-hostname-verification-okhostnameverify-fail-nobracket-msc](https://user-images.githubusercontent.com/458510/37923791-e9bf1240-30e4-11e8-8cfb-d05ddf3c5d3d.png)\r\n\r\nWith `OkHttpChannelBuilder.overrideAuthority(\"[FE80::FABB:BFFF:FE01:3A52]\")`:\r\n\r\n![link-local-hostname-verification-okhostnameverify-fail-msc](https://user-images.githubusercontent.com/458510/37923865-17711bde-30e5-11e8-9b05-08606d8f70df.png)", "url": "https://github.com/grpc/grpc-java/issues/4278", "user": "OnlyInAmerica", "labels": ["bug"], "created": "2018-03-27 20:17:20", "closed": "2018-04-03 00:44:36", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "ok http read header error", "body": "### What version of gRPC are you using?\r\nserver: 1.10.0 / jdk8\r\nclient:  1.10.0/okhttp\r\n\r\nSince nginx 1.13.10 support grpc proxy, we are considering replace envoy with nginx. It works very when client is `netty`, but got exception on Android.\r\n\r\n```java\r\nio.grpc.StatusRuntimeException: INTERNAL: Missing HTTP status code\r\ntrailers: Metadata(x-request-id=57743f9b-d196-4780-a689-8743e6fa7f9b,grpcjersey.headers-bin=,grpc-status=2,grpc-message=65)\r\n```\r\nAfter some dig, I found okhttp failed to parse `:status:` and `content-type` header.\r\n\r\n![image](https://user-images.githubusercontent.com/1625837/37813085-8e714810-2e9e-11e8-9bfa-51a52a7ee5c8.png)\r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/4261", "user": "wangjunwei87", "labels": ["android", "bug"], "created": "2018-03-23 05:35:03", "closed": "2018-03-28 21:53:20", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "RetryPolicy from serviceConfig may not be populated to RetriableStream if name resolving is not finished", "body": "\r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/4252", "user": "dapengzhang0", "labels": ["bug"], "created": "2018-03-21 22:45:42", "closed": "2018-05-01 16:46:24", "commits": {}, "ttf": 40.000277777777775, "commitsDetails": []}, {"title": "message Empty is defined twice in interop-testing sub-project", "body": "Message `Empty` is once defined in the `interop-testing` sub-project itself:\r\n\r\nhttps://github.com/grpc/grpc-java/blob/95917b8f280115bdb946e455151034a2650f48a6/interop-testing/src/main/proto/io/grpc/testing/integration/empty.proto#L22-L30\r\n\r\nAnd then again pulled in from `protobuf-java`\r\n\r\nhttps://github.com/google/protobuf/blob/d6a17aadeb6fc306d3d8c3b5c07edc41f6bc551e/src/google/protobuf/empty.proto#L43-L52\r\n\r\nvia the dependency chain: `grpc-interop-testing` -> `grpc-protobuf` -> `protobuf-java-util` -> `protobuf-java`\r\n\r\nThis becomes a problem when generating grpc classes using ScalaPB as it tries to place both under the [same package and the same name](https://github.com/scalapb/ScalaPB/issues/243#issuecomment-279769902).\r\n\r\nI would expect `interop-testing` to not define `Empty` message and use the one from  `protobuf-java` instead. Would that be possible to change?", "url": "https://github.com/grpc/grpc-java/issues/4241", "user": "2m", "labels": ["bug"], "created": "2018-03-20 15:31:07", "closed": "2018-03-29 17:37:54", "commits": {"156cc44c5f6ad64ff9b6706e4b03f24abadb4c99": {"commitGHEventType": "referenced", "commitUser": "carl-mastrangelo"}}, "ttf": 9.000277777777777, "commitsDetails": [{"commitHash": "156cc44c5f6ad64ff9b6706e4b03f24abadb4c99", "commitGHEventType": "referenced", "commitUser": "carl-mastrangelo", "commitParents": ["5780743be46ae875f769061d9229fe0f83738b42"], "nameRev": "156cc44c5f6ad64ff9b6706e4b03f24abadb4c99 tags/v1.12.0~63", "commitMessage": "interop-testing: fix empty proto package name\n\nIntended to resolve #4241\r\ngrpc-java has already diverged this proto file, so changing the\r\nthis package name is reasonable for now.", "commitDateTime": "2018-03-29 10:37:53", "authoredDateTime": "2018-03-30 02:37:53", "commitGitStats": [{"filePath": "interop-testing/src/generated/main/grpc/io/grpc/testing/integration/ReconnectServiceGrpc.java", "insertions": 36, "deletions": 36, "lines": 72}, {"filePath": "interop-testing/src/generated/main/grpc/io/grpc/testing/integration/TestServiceGrpc.java", "insertions": 46, "deletions": 46, "lines": 92}, {"filePath": "interop-testing/src/generated/main/grpc/io/grpc/testing/integration/UnimplementedServiceGrpc.java", "insertions": 23, "deletions": 23, "lines": 46}, {"filePath": "interop-testing/src/generated/main/java/{com/google/protobuf => io/grpc/testing/integration}/EmptyProtos.java", "insertions": 43, "deletions": 43, "lines": 86}, {"filePath": "interop-testing/src/generated/main/java/io/grpc/testing/integration/Test.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/ReconnectTestClient.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/TestServiceImpl.java", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "interop-testing/src/main/proto/io/grpc/testing/integration/empty.proto", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ReconnectServiceGrpc.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceBlockingStub.start(com.google.protobuf.EmptyProtos.Empty)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceImplBase.start(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceImplBase.stop(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceStub.start(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceStub.stop(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceBlockingStub.stop(com.google.protobuf.EmptyProtos.Empty)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceFutureStub.start(com.google.protobuf.EmptyProtos.Empty)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceFutureStub.stop(com.google.protobuf.EmptyProtos.Empty)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestServiceGrpc.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.TestServiceGrpc.TestServiceBlockingStub.emptyCall(com.google.protobuf.EmptyProtos.Empty)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.TestServiceGrpc.TestServiceBlockingStub.unimplementedCall(com.google.protobuf.EmptyProtos.Empty)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.TestServiceGrpc.TestServiceImplBase.emptyCall(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.TestServiceGrpc.TestServiceImplBase.unimplementedCall(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.TestServiceGrpc.TestServiceStub.emptyCall(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.TestServiceGrpc.TestServiceStub.unimplementedCall(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.TestServiceGrpc.TestServiceFutureStub.emptyCall(com.google.protobuf.EmptyProtos.Empty)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.TestServiceGrpc.TestServiceFutureStub.unimplementedCall(com.google.protobuf.EmptyProtos.Empty)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "UnimplementedServiceGrpc.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.UnimplementedServiceGrpc.UnimplementedServiceBlockingStub.unimplementedCall(com.google.protobuf.EmptyProtos.Empty)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.UnimplementedServiceGrpc.UnimplementedServiceImplBase.unimplementedCall(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.UnimplementedServiceGrpc.UnimplementedServiceStub.unimplementedCall(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.UnimplementedServiceGrpc.UnimplementedServiceFutureStub.unimplementedCall(com.google.protobuf.EmptyProtos.Empty)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EmptyProtos.java", "spoonMethods": [{"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseFrom(java.nio.ByteBuffer)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseFrom(java.nio.ByteBuffer,com.google.protobuf.ExtensionRegistryLite)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseFrom(com.google.protobuf.ByteString)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseFrom(byte[])", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseFrom(byte[],com.google.protobuf.ExtensionRegistryLite)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseFrom(java.io.InputStream)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseDelimitedFrom(java.io.InputStream)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseFrom(com.google.protobuf.CodedInputStream)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.parseFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.newBuilderForType()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.newBuilder()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.newBuilder(com.google.protobuf.EmptyProtos$Empty)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.toBuilder()", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent)", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty", "TOT": 11, "UPD": 11, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.getDefaultInstance()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.getDefaultInstanceForType()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.equals(java.lang.Object)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.clear()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.getDefaultInstanceForType()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.build()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.buildPartial()", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.clone()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor,java.lang.Object)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor,int,java.lang.Object)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor,java.lang.Object)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.mergeFrom(com.google.protobuf.Message)", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.mergeFrom(com.google.protobuf.EmptyProtos$Empty)", "TOT": 7, "UPD": 7, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)", "TOT": 6, "UPD": 6, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.getDescriptor()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.isInitialized()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.maybeForceBuilderInitialization()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.getUnknownFields()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.internalGetFieldAccessorTable()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.getDescriptor()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.getDescriptorForType()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.<unknown>", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.<unknown>.parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.Empty.Builder.internalGetFieldAccessorTable()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.protobuf.EmptyProtos.1.assignDescriptors(com.google.protobuf.Descriptors$FileDescriptor)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Test.java", "spoonMethods": []}, {"spoonFilePath": "AbstractInteropTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.deadlineNotExceeded()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.deadlineExceeded()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.deadlineExceededServerStreaming()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.deadlineInPast()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.unimplementedMethod()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.unimplementedService()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ReconnectTestClient.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.ReconnectTestClient.runTest()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestServiceImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.TestServiceImpl.emptyCall(com.google.protobuf.EmptyProtos$Empty,io.grpc.stub.StreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Http2OkHttpTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.Http2OkHttpTest.hostnameVerifierWithBadHostname()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.Http2OkHttpTest.wrongHostNameFailHostnameVerification()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.testing.integration.Http2OkHttpTest.hostnameVerifierWithCorrectHostname()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["156cc44c5f6ad64ff9b6706e4b03f24abadb4c99"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 103, "deletions": 103, "lines": 206, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 142, "UPD": 142, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 3, "spoonMethodsChanged": 61}, "statsSkippedReason": "", "changesInPackagesGIT": ["interop-testing/src/generated/main/grpc/io/grpc/testing/integration", "interop-testing/src/generated/main/java/{com/google/protobuf => io/grpc/testing", "interop-testing/src/main/proto/io/grpc/testing/integration/empty.proto"], "changesInPackagesSPOON": ["com.google.protobuf.EmptyProtos.Empty.Builder", "com.google.protobuf.EmptyProtos.Empty.Builder.mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)", "com.google.protobuf.EmptyProtos.Empty.parseFrom(byte[],com.google.protobuf.ExtensionRegistryLite)", "com.google.protobuf.EmptyProtos.Empty.Builder.maybeForceBuilderInitialization()", "io.grpc.testing.integration.UnimplementedServiceGrpc.UnimplementedServiceImplBase.unimplementedCall(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "com.google.protobuf.EmptyProtos.Empty.parseDelimitedFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)", "com.google.protobuf.EmptyProtos.Empty", "com.google.protobuf.EmptyProtos.Empty.Builder.addRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor,java.lang.Object)", "io.grpc.testing.integration.UnimplementedServiceGrpc.UnimplementedServiceStub.unimplementedCall(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "com.google.protobuf.EmptyProtos.Empty.parseFrom(java.nio.ByteBuffer,com.google.protobuf.ExtensionRegistryLite)", "com.google.protobuf.EmptyProtos.Empty.newBuilderForType(com.google.protobuf.GeneratedMessageV3$BuilderParent)", "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceImplBase.start(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "com.google.protobuf.EmptyProtos.Empty.getDescriptor()", "com.google.protobuf.EmptyProtos.Empty.getUnknownFields()", "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceBlockingStub.stop(com.google.protobuf.EmptyProtos.Empty)", "com.google.protobuf.EmptyProtos.Empty.Builder.build()", "com.google.protobuf.EmptyProtos", "com.google.protobuf.EmptyProtos.Empty.Builder.mergeFrom(com.google.protobuf.Message)", "io.grpc.testing.integration.UnimplementedServiceGrpc.UnimplementedServiceFutureStub.unimplementedCall(com.google.protobuf.EmptyProtos.Empty)", "com.google.protobuf.EmptyProtos.Empty.Builder.clone()", "com.google.protobuf.EmptyProtos.Empty.Builder.mergeUnknownFields(com.google.protobuf.UnknownFieldSet)", "com.google.protobuf.EmptyProtos.Empty.getDefaultInstance()", "com.google.protobuf.EmptyProtos.Empty.Builder.setUnknownFields(com.google.protobuf.UnknownFieldSet)", "com.google.protobuf.EmptyProtos.Empty.parseFrom(com.google.protobuf.CodedInputStream)", "com.google.protobuf.EmptyProtos.Empty.newBuilder()", "com.google.protobuf.EmptyProtos.Empty.<unknown>", "com.google.protobuf.EmptyProtos.Empty.newBuilderForType()", "com.google.protobuf.EmptyProtos.Empty.Builder.getDescriptor()", "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceStub.start(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "io.grpc.testing.integration.UnimplementedServiceGrpc.UnimplementedServiceBlockingStub.unimplementedCall(com.google.protobuf.EmptyProtos.Empty)", "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceFutureStub.stop(com.google.protobuf.EmptyProtos.Empty)", "com.google.protobuf.EmptyProtos.Empty.getDefaultInstanceForType()", "com.google.protobuf.EmptyProtos.Empty.parseFrom(java.io.InputStream)", "com.google.protobuf.EmptyProtos.Empty.Builder.setField(com.google.protobuf.Descriptors$FieldDescriptor,java.lang.Object)", "com.google.protobuf.EmptyProtos.Empty.Builder.internalGetFieldAccessorTable()", "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceFutureStub.start(com.google.protobuf.EmptyProtos.Empty)", "com.google.protobuf.EmptyProtos.Empty.Builder.clearField(com.google.protobuf.Descriptors$FieldDescriptor)", "com.google.protobuf.EmptyProtos.Empty.toBuilder()", "com.google.protobuf.EmptyProtos.Empty.equals(java.lang.Object)", "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceStub.stop(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "com.google.protobuf.EmptyProtos.Empty.parseFrom(com.google.protobuf.ByteString)", "com.google.protobuf.EmptyProtos.Empty.internalGetFieldAccessorTable()", "com.google.protobuf.EmptyProtos.Empty.Builder.clear()", "com.google.protobuf.EmptyProtos.Empty.Builder.buildPartial()", "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceImplBase.stop(com.google.protobuf.EmptyProtos.Empty,io.grpc.stub.StreamObserver)", "com.google.protobuf.EmptyProtos.Empty.<unknown>.parsePartialFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)", "com.google.protobuf.EmptyProtos.Empty.Builder.setRepeatedField(com.google.protobuf.Descriptors$FieldDescriptor,int,java.lang.Object)", "com.google.protobuf.EmptyProtos.Empty.isInitialized()", "com.google.protobuf.EmptyProtos.1.assignDescriptors(com.google.protobuf.Descriptors$FileDescriptor)", "com.google.protobuf.EmptyProtos.Empty.parseFrom(byte[])", "com.google.protobuf.EmptyProtos.Empty.newBuilder(com.google.protobuf.EmptyProtos$Empty)", "com.google.protobuf.EmptyProtos.Empty.parseFrom(java.io.InputStream,com.google.protobuf.ExtensionRegistryLite)", "com.google.protobuf.EmptyProtos.Empty.parseFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)", "io.grpc.testing.integration.ReconnectServiceGrpc.ReconnectServiceBlockingStub.start(com.google.protobuf.EmptyProtos.Empty)", "com.google.protobuf.EmptyProtos.Empty.Builder.getDescriptorForType()", "com.google.protobuf.EmptyProtos.Empty.Builder.mergeFrom(com.google.protobuf.EmptyProtos$Empty)", "com.google.protobuf.EmptyProtos.Empty.Builder.clearOneof(com.google.protobuf.Descriptors$OneofDescriptor)", "com.google.protobuf.EmptyProtos.Empty.parseFrom(java.nio.ByteBuffer)", "com.google.protobuf.EmptyProtos.Empty.parseDelimitedFrom(java.io.InputStream)", "com.google.protobuf.EmptyProtos.Empty.parseFrom(com.google.protobuf.ByteString,com.google.protobuf.ExtensionRegistryLite)", "com.google.protobuf.EmptyProtos.Empty.Builder.getDefaultInstanceForType()"]}, {"title": "Bidi calls never close, leaking memory client and server", "body": "Using v1.8.0.\r\n\r\nThe following client/server leaves the bidi RPC call open, holding onto resources and ultimately going OOM if enough calls are made:\r\n\r\n```\r\n// proto\r\nmessage Request {}\r\nmessage Response {}\r\n\r\nservice TestService {\r\n    rpc Ping(stream Request) returns (stream Response);\r\n}\r\n\r\n/////////////////////////////\r\n// server impl\r\nprivate static class ServerServiceImpl extends TestServiceGrpc.TestServiceImplBase {\r\n    @Override\r\n    public StreamObserver<TestRpc.Request> ping(StreamObserver<example.TestRpc.Response> responseObserver) {\r\n        return new StreamObserver<TestRpc.Request>() {\r\n            @Override\r\n            public void onNext(TestRpc.Request request) {\r\n                responseObserver.onNext(TestRpc.Response.newBuilder().build());\r\n                responseObserver.onCompleted();\r\n            }\r\n\r\n            @Override public void onError(Throwable throwable) {}\r\n            @Override public void onCompleted() {}\r\n        };\r\n    }\r\n}\r\n    \r\n/////////////////////////////\r\n// client impl\r\nprivate void oneCall(Channel chan) {\r\n    ClientCall<TestRpc.Request, TestRpc.Response> call =\r\n            chan.newCall(TestServiceGrpc.getPingMethod(), CallOptions.DEFAULT);\r\n    call.start(new ClientCall.Listener<TestRpc.Response>(), new Metadata());\r\n    call.sendMessage(TestRpc.Request.newBuilder().build());\r\n    call.request(1);\r\n}\r\nfor (int i = 0; i < 1000; ++i) {\r\n    oneCall(channel);\r\n}\r\n\r\n// If I attach a debugger to the client here, I can see 1000 instances of DefaultStream and 1000 instances of a bunch of other grpc/netty bits, even after > 5 minutes and repeated attempts at GC.\r\nThread.sleep(9999999);\r\n```\r\n\r\nReplacing the client's `ClientCall.Listener` with one that calls `.halfClose()` upon completion works around the issue.", "url": "https://github.com/grpc/grpc-java/issues/4202", "user": "alexnixon", "labels": ["bug"], "created": "2018-03-09 09:42:10", "closed": "2019-02-20 19:18:24", "commits": {}, "ttf": 348.0002777777778, "commitsDetails": []}, {"title": "ReadableBuffers.BufferInputStream does not release buffer on close()", "body": "**gRPC Version used: 1.7.0\r\nNetty Version used: 4.1.16.Final\r\nJava version: 1.8.0_161**\r\n\r\nContext:\r\nObserved Netty leak detector complaining of bytebuf leaks on the gRPC server configured with Netty Epoll. This occurs more often, a few minutes after the service restarts on a prod machine. Here is the full trace of all 25 access for the bytebuf:\r\n [netty_buf_leak_trace.txt](https://github.com/grpc/grpc-java/files/1795622/netty_buf_leak_trace.txt)\r\n\r\nThe most recent access to the leaked bytebuf occurs at `io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:273)` but the bytebuf is actually released here.  Not sure what is causing the leak.\r\n\r\n```\r\n ERROR [2018-03-09 02:25:49,034] io.netty.util.ResourceLeakDetector: LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.\r\n Recent access records: 25\r\n #25:\r\n \tio.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:273)\r\n \tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n \tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n \tio.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n \tio.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1359)\r\n \tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n \tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n \tio.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:935)\r\n \tio.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:797)\r\n \tio.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:404)\r\n \tio.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:304)\r\n \tio.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n \tio.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\r\n \tjava.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\n\r\n\r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/4198", "user": "srujann", "labels": ["bug", "good first issue"], "created": "2018-03-09 04:52:39", "closed": "2018-04-03 23:11:20", "commits": {"8f01084bb3b4dd7bf39f3bf3b87e0ce09be22e74": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 25.00027777777778, "commitsDetails": [{"commitHash": "8f01084bb3b4dd7bf39f3bf3b87e0ce09be22e74", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["bace06fe9f027d67bc00a4a621346929a3267a51"], "nameRev": "8f01084bb3b4dd7bf39f3bf3b87e0ce09be22e74 tags/v1.12.0~50", "commitMessage": "core: add a `close` to InputBufferStream\n\nBefore:\n`InputBufferStream.close()` does not close their buffer so the buffer will leak.\n\nAfter:\nResolves #4198.\nOverride the `close` for closing their buffer.\n", "commitDateTime": "2018-04-03 16:11:19", "authoredDateTime": "2018-04-04 00:18:01", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/ReadableBuffers.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "core/src/test/java/io/grpc/internal/ReadableBuffersTest.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ReadableBuffers.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ReadableBuffers.BufferInputStream.close()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ReadableBuffersTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ReadableBuffersTest.bufferInputStream_close_closesBuffer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8f01084bb3b4dd7bf39f3bf3b87e0ce09be22e74"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 0, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.ReadableBuffers.BufferInputStream.close()"]}, {"title": "channel.getState(true) will not reconnect", "body": "The javadoc for ManagedChannel.getState:\r\n_Gets the current connectivity state. Note the result may soon become outdated.\r\nParameters:requestConnection if true, the channel will try to make a connection if it is currently IDLE_\r\n\r\nHowever, it attempts to connect only if there has not been an open connection already. After disconnect, channel.getState(true) will not attempt to reconnect (state is IDLE).\r\n\r\n### What version of gRPC are you using?\r\n1.9.0\r\n\r\n### What did you expect to see?\r\nchannel.getState(true) should try to reconnect the channel if the state is idle.\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/4170", "user": "tukez", "labels": ["bug"], "created": "2018-03-05 07:32:23", "closed": "2018-03-12 21:13:53", "commits": {"7852b347817a91506e0e8e8532c3ef6418cad912": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "7852b347817a91506e0e8e8532c3ef6418cad912", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["a83f67a706fdf9cd5b5c5026f1c413fbad1af839"], "nameRev": "7852b347817a91506e0e8e8532c3ef6418cad912 tags/v1.11.0~7", "commitMessage": "core: fix channel.getState(true) will not reconnect\n\nresolves #4170\r\n", "commitDateTime": "2018-03-12 14:13:52", "authoredDateTime": "2018-03-12 14:13:52", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/LoadBalancer.java", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "core/src/main/java/io/grpc/PickFirstBalancerFactory.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "core/src/test/java/io/grpc/PickFirstLoadBalancerTest.java", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java", "insertions": 16, "deletions": 0, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "LoadBalancer.java", "spoonMethods": [{"spoonMethodName": "io.grpc.LoadBalancer.SubchannelPicker.requestConnection()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PickFirstBalancerFactory.java", "spoonMethods": [{"spoonMethodName": "io.grpc.PickFirstBalancerFactory.PickFirstBalancer", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.PickFirstBalancerFactory.PickFirstBalancer.handleSubchannelState(io.grpc.Subchannel,io.grpc.ConnectivityStateInfo)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.PickFirstBalancerFactory.Picker.requestConnection()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ManagedChannelImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.getState(boolean).11.run()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PickFirstLoadBalancerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.PickFirstLoadBalancerTest.requestConnection()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ManagedChannelImplTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.getState_withRequestConnect_IdleWithLbRunning()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7852b347817a91506e0e8e8532c3ef6418cad912"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 22, "deletions": 0, "lines": 22, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 5, "UPD": 2, "INS": 3, "MOV": 0, "DEL": 0, "spoonFilesChanged": 3, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc", "core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.LoadBalancer.SubchannelPicker.requestConnection()", "io.grpc.internal.ManagedChannelImpl.getState(boolean).11.run()", "io.grpc.PickFirstBalancerFactory.PickFirstBalancer", "io.grpc.PickFirstBalancerFactory.PickFirstBalancer.handleSubchannelState(io.grpc.Subchannel,io.grpc.ConnectivityStateInfo)", "io.grpc.PickFirstBalancerFactory.Picker.requestConnection()"]}, {"title": "fix regression in v1.9.0 where using GRPC_PROXY_EXP with the Netty transport would cause an UnresolvedAddressException is not available in 1.10.0", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n1.10.0\r\n\r\n### What did you expect to see?\r\nThe following is listed in the release note (\r\nhttps://github.com/grpc/grpc-java/releases/tag/v1.10.0)\r\nnetty: fix regression in v1.9.0 where using GRPC_PROXY_EXP with the Netty transport would cause an UnresolvedAddressException (#4027).\r\n\r\nHowever, i still face the same issue and fix seems not included in this 1.10.0 release.\r\n", "url": "https://github.com/grpc/grpc-java/issues/4157", "user": "arief-hidayat", "labels": ["bug"], "created": "2018-03-01 03:56:57", "closed": "2018-03-21 22:09:23", "commits": {}, "ttf": 20.00027777777778, "commitsDetails": []}, {"title": "NetworkOnMainThread exception while resolving IP address.", "body": "### What version of gRPC are you using?\r\n1.9.0\r\n\r\n### What did you expect to see?\r\nWhen calling one of the stub's method I get a crash on Android, throwing NetworkOnMainThread exception with the following stacktrace. \r\n\r\n```java\r\n\r\n02-16 22:52:08.352 10488-10488/com.ema.test W/ManagedChannelImpl: [io.grpc.internal.ManagedChannelImpl-1] Unexpected exception from LoadBalancer\r\n                                                                      android.os.NetworkOnMainThreadException\r\n                                                                          at android.os.StrictMode$AndroidBlockGuardPolicy.onNetwork(StrictMode.java:1448)\r\n                                                                          at java.net.Inet6AddressImpl.getHostByAddr(Inet6AddressImpl.java:147)\r\n                                                                          at java.net.InetAddress$1.getHostByAddr(InetAddress.java:266)\r\n                                                                          at java.net.InetAddress.getHostFromNameService(InetAddress.java:569)\r\n                                                                          at java.net.InetAddress.getHostName(InetAddress.java:515)\r\n                                                                          at java.net.InetSocketAddress$InetSocketAddressHolder.getHostName(InetSocketAddress.java:83)\r\n                                                                          at java.net.InetSocketAddress$InetSocketAddressHolder.-wrap2(Unknown Source:0)\r\n                                                                          at java.net.InetSocketAddress.getHostName(InetSocketAddress.java:356)\r\n                                                                          at io.grpc.internal.ProxyDetectorImpl.detectProxy(ProxyDetectorImpl.java:127)\r\n                                                                          at io.grpc.internal.ProxyDetectorImpl.proxyFor(ProxyDetectorImpl.java:118)\r\n                                                                          at io.grpc.internal.InternalSubchannel.startNewTransport(InternalSubchannel.java:209)\r\n                                                                          at io.grpc.internal.InternalSubchannel.obtainActiveTransport(InternalSubchannel.java:190)\r\n                                                                          at io.grpc.internal.ManagedChannelImpl$SubchannelImpl.requestConnection(ManagedChannelImpl.java:1020)\r\n                                                                          at io.grpc.PickFirstBalancerFactory$PickFirstBalancer.handleResolvedAddressGroups(PickFirstBalancerFactory.java:79)\r\n                                                                          at io.grpc.internal.ManagedChannelImpl$NameResolverListenerImpl$1NamesResolved.run(ManagedChannelImpl.java:924)\r\n                                                                          at io.grpc.internal.ChannelExecutor.drain(ChannelExecutor.java:72)\r\n                                                                          at io.grpc.internal.DelayedClientTransport.newStream(DelayedClientTransport.java:173)\r\n                                                                          at io.grpc.internal.ClientCallImpl.start(ClientCallImpl.java:242)\r\n                                                                          at io.grpc.internal.CensusTracingModule$TracingClientInterceptor$1.start(CensusTracingModule.java:387)\r\n                                                                          at io.grpc.internal.CensusStatsModule$StatsClientInterceptor$1.start(CensusStatsModule.java:679)\r\n                                                                          at io.grpc.stub.ClientCalls.startCall(ClientCalls.java:293)\r\n                                                                          at io.grpc.stub.ClientCalls.asyncStreamingRequestCall(ClientCalls.java:283)\r\n                                                                          at io.grpc.stub.ClientCalls.asyncBidiStreamingCall(ClientCalls.java:92)\r\n                                                                          at session.SessionServiceGrpc$SessionServiceStub.startSession(SessionServiceGrpc.java:137)\r\n```\r\n\r\nMy understanding is that the call `io.grpc.internal.ProxyDetectorImpl.detectProxy(ProxyDetectorImpl.java:127)` is happening in a `grpc-default-executor-0`, even though i've called `.executor(Executors.newSingleThreadExecutor())` on the channel builder. \r\nThe `grpc-default-executor-0` thread pool appears to contain the main thread, as Android triggers a NetworkOnMainThread exception if any networking is attempted to be done on it.\r\n\r\nIt seems related to https://github.com/grpc/grpc-java/issues/577, despite it being marked as closed.\r\n", "url": "https://github.com/grpc/grpc-java/issues/4154", "user": "emanueleDiVizio", "labels": ["android", "bug"], "created": "2018-02-28 17:34:38", "closed": "2018-03-02 20:12:25", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Getting grpc exception `java.lang.NullPointerException: runnable is null` ", "body": "### What version of gRPC are you using?\r\n\r\n1.8.0\r\n\r\n### What did you expect to see?\r\n\r\nWe have an app with dozens of bi-directional grpc streams.\r\n\r\nWhen cancelling one of our jobs (but leaving the bi-directional streams open), we sometimes see:\r\n\r\n```\r\njava.lang.NullPointerException: runnable is null\r\n\tat com.google.common.base.Preconditions.checkNotNull(Preconditions.java:228)\r\n\tat io.grpc.internal.ChannelExecutor.executeLater(ChannelExecutor.java:86)\r\n\tat io.grpc.internal.ManagedChannelImpl$3.run(ManagedChannelImpl.java:347)\r\n\tat io.grpc.internal.LogExceptionRunnable.run(LogExceptionRunnable.java:41)\r\n\tat io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)\r\n\tat io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:120)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute$$$capture(AbstractEventExecutor.java:163)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nWe aren't sure what exactly is causing it. \r\n\r\nPerhaps an executor service is getting shutdown without proper cleanup. \r\n\r\nOr perhaps a channel's bidirectional activity is being interrupted due to our attempt to cancel the work being done. \r\n\r\n# Expected\r\n\r\nIs it possible for grpc-java to handle this NPE better and provide a cause of issue? ", "url": "https://github.com/grpc/grpc-java/issues/4077", "user": "nddipiazza", "labels": ["bug"], "created": "2018-02-13 17:45:10", "closed": "2018-04-06 23:14:24", "commits": {}, "ttf": 52.000277777777775, "commitsDetails": []}, {"title": "Plumb proxy address through Name Resolver", "body": "Netty can't handle unresolved addresses. To avoid things like #4027 and any concerns of `ProxySelector`s returning unresolved addresses, we should resolve the address while the NameResolver is running. We then should plumb that result through to the transport.\r\n\r\nWe should probably have a check on addresses coming from the Name Resolver that verifies the addresses are resolved.", "url": "https://github.com/grpc/grpc-java/issues/4029", "user": "ejona86", "labels": ["bug"], "created": "2018-02-01 00:12:11", "closed": "2018-03-12 18:15:40", "commits": {}, "ttf": 39.000277777777775, "commitsDetails": []}, {"title": "DNS resolution failure on Android after connectivity changes", "body": "### What version of gRPC are you using?\r\n1.9.0\r\n\r\n### What did you expect to see?\r\nFor the grpc channel to be able to handle Android connectivity changes (eg. from wifi to mobile data, or from no data connection to wifi). \r\nFor the `resetConnectBackoff()` call on a channel to successfully short-circuit the backoff timer and make it reconnect immediately when triggered from a connectivity change.\r\n\r\n### What did you do\r\nBuilt a grpc channel using the `OkHttpChannelBuilder`. Registered an Android `BroadcastReceiver` against connectivity changes which calls the channels `resetConnectBackoff()`  (as recommended in #4011).\r\n\r\n### What did you see instead\r\nThe `resetConnectBackoff()`  being called from the broadcast receiver event (for `android.net.conn.CONNECTIVITY_CHANGE`) and failing to short-circuit the backoff timer. Had to wait approx 60 seconds before the channel became usable again. Reports a host name resolution failure until the 60 seconds passes.\r\nA sleep (of a few seconds) between the connectivity change and the `resetConnectBackoff()` call seems to fix the issue.\r\nIs there any way to decrease the default backoff time. It may be a useful feature in situations like this.", "url": "https://github.com/grpc/grpc-java/issues/4028", "user": "userar", "labels": ["android", "bug"], "created": "2018-01-31 23:05:28", "closed": "2018-03-13 17:40:09", "commits": {}, "ttf": 40.000277777777775, "commitsDetails": []}, {"title": "Support Conscrypt on Android", "body": "This will allow OkHttp to use TLS1.2 even on Android API levels < 21. This was first brought up in https://github.com/grpc/grpc-java/issues/1906 and https://github.com/grpc/grpc-java/pull/3301, which exposed some issues with how gRPC OkHttp picks the security provider.", "url": "https://github.com/grpc/grpc-java/issues/3966", "user": "ericgribkoff", "labels": ["android", "bug"], "created": "2018-01-12 18:57:00", "closed": "2018-01-31 18:46:03", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "io.grpc.Attributes - reference vs. object equality", "body": "`io.grpc.Attributes` was modified in 291f17059eee0fee0bf0d0d6c3ddc6fc40e2a09c to use an `IdentityMap` to store the underlying attributes. This map uses reference equality in place of the object equality that was used in prior versions, when the class used `HashMap`.\r\n\r\nThis is more of a question around the _expected_ behavior of `Attributes#equals` and the notion of \"attribute equality\" as opposed to a bug or an issue. For context, we have some tests internally that are failing in 1.8 as they were written with object equality in mind.\r\n\r\nFor example, the following fails in 1.8 but passes in prior versions, which upon immediate inspection wasn't intuitive, as `InetSocketAddress#equals` returns `true` when comparing the two different objects:\r\n\r\n```java\r\n  @Test\r\n  public void equals() {\r\n    Attributes.Key<InetSocketAddress> attr = Attributes.Key.of(\"foo\");\r\n\r\n    InetSocketAddress addr1 = new InetSocketAddress(80);\r\n    Attributes attrs1 = Attributes.newBuilder()\r\n        .set(attr, addr1)\r\n        .build();\r\n\r\n    InetSocketAddress addr2 = new InetSocketAddress(80);\r\n    Attributes attrs2 = Attributes.newBuilder()\r\n        .set(attr, addr2)\r\n        .build();\r\n\r\n    assertEquals(addr1, addr2);   // passes\r\n    assertEquals(attrs1, attrs2); // fails\r\n  }\r\n```\r\n\r\nI'm interested in the motivation for the change in semantics (talking with @lukaszx0 in person, he recalls some talk about this previously). If reference equality was the intention, perhaps we could tighten up the javadoc a little to make it more explicit that this class now uses reference equality as opposed to object equality?\r\n\r\nOr, perhaps this wasn't the original intention and it would be possible to revert to using a `HashMap`, although the benchmarks seem to indicate this would be slightly slower than the current impl.", "url": "https://github.com/grpc/grpc-java/issues/3857", "user": "nicktrav", "labels": ["bug"], "created": "2017-12-11 21:45:03", "closed": "2017-12-12 02:12:50", "commits": {"1bb9498ea1319d59d80840c70d92306ea6d960fa": {"commitGHEventType": "referenced", "commitUser": "carl-mastrangelo"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "1bb9498ea1319d59d80840c70d92306ea6d960fa", "commitGHEventType": "referenced", "commitUser": "carl-mastrangelo", "commitParents": ["2ea77cce1e01c68739e68422c8ccfc4800936624"], "nameRev": "1bb9498ea1319d59d80840c70d92306ea6d960fa tags/v1.9.0~20", "commitMessage": "core: fix Attributes value equality\n\nFixes: #3857", "commitDateTime": "2017-12-11 18:12:49", "authoredDateTime": "2017-12-11 18:12:49", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/Attributes.java", "insertions": 12, "deletions": 1, "lines": 13}, {"filePath": "core/src/test/java/io/grpc/AttributesTest.java", "insertions": 17, "deletions": 0, "lines": 17}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Attributes.java", "spoonMethods": [{"spoonMethodName": "io.grpc.Attributes.equals(java.lang.Object)", "TOT": 7, "UPD": 0, "INS": 3, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "AttributesTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.AttributesTest.valueEquality()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1bb9498ea1319d59d80840c70d92306ea6d960fa"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 12, "deletions": 1, "lines": 13, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 3, "MOV": 3, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc"], "changesInPackagesSPOON": ["io.grpc.Attributes.equals(java.lang.Object)"]}, {"title": "Race in io.grpc.internal.MessageFramer.commitToSink", "body": "`messagesBuffered` seems to be updated on error and from the application thread.  \r\n\r\n```\r\n  Read of size 4 at 0x7f5a5b5b128c by thread T91:\r\n    #0 io.grpc.internal.MessageFramer.commitToSink(ZZ)V (MessageFramer.java:350)  \r\n    #1 io.grpc.internal.MessageFramer.close()V (MessageFramer.java:326)  \r\n    #2 io.grpc.internal.AbstractStream.endOfMessages()V (AbstractStream.java:69)  \r\n    #3 io.grpc.internal.AbstractServerStream.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (AbstractServerStream.java:132)  \r\n    #4 io.grpc.internal.ServerCallImpl.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ServerCallImpl.java:174)  \r\n    #5 io.grpc.PartialForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (PartialForwardingServerCall.java:46)  \r\n    #6 io.grpc.ForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:22)  \r\n    #7 io.grpc.ForwardingServerCall$SimpleForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:39)  \r\n    #8 io.grpc.testing.integration.TestServiceImpl$6$1.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (TestServiceImpl.java:567)  \r\n    #9 io.grpc.PartialForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (PartialForwardingServerCall.java:46)  \r\n    #10 io.grpc.ForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:22)  \r\n    #11 io.grpc.ForwardingServerCall$SimpleForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:39)  \r\n    #12 io.grpc.testing.integration.TestServiceImpl$5$1.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (TestServiceImpl.java:540)  \r\n    #13 io.grpc.PartialForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (PartialForwardingServerCall.java:46)  \r\n    #14 io.grpc.ForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:22)  \r\n    #15 io.grpc.ForwardingServerCall$SimpleForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:39)  \r\n    #16 io.grpc.testing.integration.TestServiceImpl$4$1.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (TestServiceImpl.java:513)  \r\n    #17 io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onError(Ljava/lang/Throwable;)V (ServerCalls.java:350)  \r\n    #18 io.grpc.testing.integration.TestServiceImpl$2.onError(Ljava/lang/Throwable;)V (TestServiceImpl.java:200)  \r\n    #19 io.grpc.stub.ServerCalls$StreamingServerCallHandler$StreamingServerCallListener.onCancel()V (ServerCalls.java:269)  \r\n    #20 io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.closed(Lio/grpc/Status;)V (ServerCallImpl.java:281)  \r\n    #21 io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1Closed.runInContext()V (ServerImpl.java:679)  \r\n    #22 io.grpc.internal.ContextRunnable.run()V (ContextRunnable.java:37)  \r\n    #23 io.grpc.internal.SerializingExecutor.run()V (SerializingExecutor.java:123)  \r\n    #24 java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V (ThreadPoolExecutor.java:1142)  \r\n    #25 java.util.concurrent.ThreadPoolExecutor$Worker.run()V (ThreadPoolExecutor.java:617)  \r\n    #26 java.lang.Thread.run()V (Thread.java:745)  \r\n    #27 (Generated Stub)  \r\n\r\n  Previous write of size 4 at 0x7f5a5b5b128c by thread T81 (mutexes: write M371405520357768584):\r\n    #0 io.grpc.internal.MessageFramer.commitToSink(ZZ)V (MessageFramer.java:351)  \r\n    #1 io.grpc.internal.MessageFramer.flush()V (MessageFramer.java:300)  \r\n    #2 io.grpc.internal.AbstractStream.flush()V (AbstractStream.java:60)  \r\n    #3 io.grpc.internal.ServerCallImpl.sendMessage(Ljava/lang/Object;)V (ServerCallImpl.java:135)  \r\n    #4 io.grpc.ForwardingServerCall.sendMessage(Ljava/lang/Object;)V (ForwardingServerCall.java:32)  \r\n    #5 io.grpc.ForwardingServerCall.sendMessage(Ljava/lang/Object;)V (ForwardingServerCall.java:32)  \r\n    #6 io.grpc.ForwardingServerCall.sendMessage(Ljava/lang/Object;)V (ForwardingServerCall.java:32)  \r\n    #7 io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onNext(Ljava/lang/Object;)V (ServerCalls.java:341)  \r\n    #8 io.grpc.testing.integration.TestServiceImpl$ResponseDispatcher.dispatchChunk()V (TestServiceImpl.java:326)  \r\n    #9 io.grpc.testing.integration.TestServiceImpl$ResponseDispatcher.access$000(Lio/grpc/testing/integration/TestServiceImpl$ResponseDispatcher;)V (TestServiceImpl.java:237)  \r\n    #10 io.grpc.testing.integration.TestServiceImpl$ResponseDispatcher$1.run()V (TestServiceImpl.java:251)  \r\n    #11 io.grpc.internal.LogExceptionRunnable.run()V (LogExceptionRunnable.java:41)  \r\n    #12 java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object; (Executors.java:511)  \r\n    #13 java.util.concurrent.FutureTask.run()V (FutureTask.java:266)  \r\n    #14 java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Ljava/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask;)V (ScheduledThreadPoolExecutor.java:180)  \r\n    #15 java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run()V (ScheduledThreadPoolExecutor.java:295)  \r\n    #16 java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V (ThreadPoolExecutor.java:1142)  \r\n    #17 java.util.concurrent.ThreadPoolExecutor$Worker.run()V (ThreadPoolExecutor.java:617)  \r\n    #18 java.lang.Thread.run()V (Thread.java:745)  \r\n    #19 (Generated Stub)  \r\n```", "url": "https://github.com/grpc/grpc-java/issues/3843", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2017-12-07 01:34:37", "closed": "2018-01-10 22:27:16", "commits": {}, "ttf": 34.000277777777775, "commitsDetails": []}, {"title": "Android examples fail to build with minify enabled", "body": "I ran into an issue with minify when testing out release builds of my project. So I built the android examples normally, which works, but when I change:\r\n\r\n```diff\r\ndiff --git a/examples/android/routeguide/app/build.gradle b/examples/android/routeguide/app/build.gradle\r\nindex 08f49c7d..f82577b8 100644\r\n--- a/examples/android/routeguide/app/build.gradle\r\n+++ b/examples/android/routeguide/app/build.gradle\r\n@@ -14,7 +14,7 @@ android {\r\n     }\r\n     buildTypes {\r\n         release {\r\n-            minifyEnabled false\r\n+            minifyEnabled true\r\n             proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'\r\n         }\r\n     }\r\n@@ -32,7 +32,7 @@ protobuf {\r\n             artifact = \"com.google.protobuf:protoc-gen-javalite:3.0.0\"\r\n         }\r\n         grpc {\r\n-            artifact = 'io.grpc:protoc-gen-grpc-java:1.9.0-SNAPSHOT' // CURRENT_GRPC_VERSION\r\n+            artifact = 'io.grpc:protoc-gen-grpc-java:1.8.0' // CURRENT_GRPC_VERSION\r\n         }\r\n     }\r\n     generateProtoTasks {\r\n@@ -52,8 +52,8 @@ dependencies {\r\n     compile 'com.android.support:appcompat-v7:23.+'\r\n \r\n     // You need to build grpc-java to obtain these libraries below.\r\n-    compile 'io.grpc:grpc-okhttp:1.9.0-SNAPSHOT' // CURRENT_GRPC_VERSION\r\n-    compile 'io.grpc:grpc-protobuf-lite:1.9.0-SNAPSHOT' // CURRENT_GRPC_VERSION\r\n-    compile 'io.grpc:grpc-stub:1.9.0-SNAPSHOT' // CURRENT_GRPC_VERSION\r\n+    compile 'io.grpc:grpc-okhttp:1.8.0' // CURRENT_GRPC_VERSION\r\n+    compile 'io.grpc:grpc-protobuf-lite:1.8.0' // CURRENT_GRPC_VERSION\r\n+    compile 'io.grpc:grpc-stub:1.8.0' // CURRENT_GRPC_VERSION\r\n     compile 'javax.annotation:javax.annotation-api:1.2'\r\n }\r\n\r\n```\r\n\r\nthe build fails:\r\n\r\n```\r\nNote: there were 19 unkept descriptor classes in kept class members.\r\n      You should consider explicitly keeping the mentioned classes\r\n      (using '-keep').\r\n      (http://proguard.sourceforge.net/manual/troubleshooting.html#descriptorclass)\r\nNote: there were 12 unresolved dynamic references to classes or interfaces.\r\n      You should check if you need to specify additional program jars.\r\n      (http://proguard.sourceforge.net/manual/troubleshooting.html#dynamicalclass)\r\nNote: there were 8 accesses to class members by means of introspection.\r\n      You should consider explicitly keeping the mentioned class members\r\n      (using '-keep' or '-keepclassmembers').\r\n      (http://proguard.sourceforge.net/manual/troubleshooting.html#dynamicalclassmember)\r\nWarning: there were 21 unresolved references to classes or interfaces.\r\n         You may need to add missing library jars or update their versions.\r\n         If your code works fine without the missing classes, you can suppress\r\n         the warnings with '-dontwarn' options.\r\n         (http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedclass)\r\nWarning: Exception while processing task java.io.IOException: Please correct the above warnings first.\r\n```\r\n\r\nSame issue with my own project, but with a few more unresolved classes. (Note it's the `Warning 21 unresolved references...` that causes the build failure.)\r\n\r\nI'm *pretty sure* I can just ignore these? Is there any formal direction on the preferred way to resolve this issue? I am not sure why there is a discrepancy between Google's `minify` and `proguard`. It would probably be good to have the examples work with `minify` now that it's the suggested option especially if you rely on multidex (which is the case for many Android apps now).\r\n", "url": "https://github.com/grpc/grpc-java/issues/3835", "user": "dcow", "labels": ["bug"], "created": "2017-12-06 00:51:09", "closed": "2018-01-31 20:33:11", "commits": {}, "ttf": 56.000277777777775, "commitsDetails": []}, {"title": "ServerCallImpl.internalClose triggers onComplete, not onCancel", "body": "When we get an outbound error with ServerCallImpl, we call [`internalClose(Status)`](\r\nhttps://github.com/grpc/grpc-java/blob/v1.8.0/core/src/main/java/io/grpc/internal/ServerCallImpl.java#L206). However, it calls stream.close() exactly as if the client closed the RPC.\r\n```java\r\n  private void internalClose(Status internalError) {\r\n    stream.close(internalError, new Metadata());\r\n  }\r\n...\r\n  public void close(Status status, Metadata trailers) {\r\n    ...\r\n    stream.close(status, trailers);\r\n  }\r\n```\r\n\r\nSo the transport thinks this was an application-requested failure and so will call `onComplete()`. It should call `onCancel()` instead.", "url": "https://github.com/grpc/grpc-java/issues/3819", "user": "ejona86", "labels": ["bug"], "created": "2017-12-01 00:51:12", "closed": "2018-02-22 19:09:21", "commits": {}, "ttf": 83.00027777777778, "commitsDetails": []}, {"title": "Failed to mark a promise as failure because it has succeeded already", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n1.7\r\n\r\n### What did you expect to see?\r\nWe saw the following exception occasionally on the client side so that the server didn't receive the RPC:\r\n\r\n```\r\nTuesday, April 4, 2017 6:06:23 AM CST W io.netty.channel.AbstractChannelHandlerContext [warn] Failed to mark a promise as failure because it has succeeded already: DefaultChannelPromise@7cdcdb9b(success)\r\njava.lang.UnsupportedOperationException\r\n        at io.netty.handler.codec.http2.DefaultHttp2Connection$ConnectionStream.resetSent(DefaultHttp2Connection.java:816)\r\n        at io.netty.handler.codec.http2.Http2ConnectionHandler.resetStream(Http2ConnectionHandler.java:716)\r\n        at io.netty.handler.codec.http2.Http2ConnectionHandler.resetStream(Http2ConnectionHandler.java:694)\r\n        at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeRstStream(DefaultHttp2ConnectionEncoder.java:242)\r\n        at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeRstStream(DecoratingHttp2FrameWriter.java:65)\r\n        at io.netty.handler.codec.http2.StreamBufferingEncoder.writeRstStream(StreamBufferingEncoder.java:174)\r\n        at io.grpc.netty.NettyClientHandler.cancelStream(NettyClientHandler.java:460)\r\n        at io.grpc.netty.NettyClientHandler.write(NettyClientHandler.java:234)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:739)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:731)\r\n        at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:817)\r\n        at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:724)\r\n        at io.netty.channel.DefaultChannelPipeline.write(DefaultChannelPipeline.java:1022)\r\n        at io.netty.channel.AbstractChannel.write(AbstractChannel.java:291)\r\n        at io.grpc.netty.WriteQueue.flush(WriteQueue.java:127)\r\n        at io.grpc.netty.WriteQueue.access$000(WriteQueue.java:47)\r\n        at io.grpc.netty.WriteQueue$1.run(WriteQueue.java:59)\r\n        at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403)\r\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:445)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n        at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\r\n        at java.lang.Thread.run(Thread.java:745) \r\n```\r\n", "url": "https://github.com/grpc/grpc-java/issues/3807", "user": "speakless86", "labels": ["bug"], "created": "2017-11-29 01:49:41", "closed": "2018-02-21 16:25:21", "commits": {}, "ttf": 84.00027777777778, "commitsDetails": []}, {"title": "SHA-1 failure for proto-google-common-protos-1.0.0.jar", "body": "Platform: Ubuntu 14.04\r\nBazel version: 0.8.0\r\n\r\nIf I run the Bazel build with:\r\n\r\n```\r\ngit clone https://github.com/grpc/grpc-java\r\ncd grpc-java\r\nbazel build //...\r\n```\r\n\r\nI get:\r\n\r\n```\r\nERROR: <snip>/grpc-java/examples/BUILD.bazel:53:1:\r\n  no such package '@com_google_api_grpc_proto_google_common_protos//jar':\r\n  Downloaded file at <snip>/external/com_google_api_grpc_proto_google_common_protos/com/google/api/grpc/proto-google-common-protos/1.0.0/proto-google-common-protos-1.0.0.jar\r\n  has SHA-1 of 86f070507e28b930e50d218ee5b6788ef0dd05e6, does not match expected SHA-1\r\n  (de4e859c3530f7e9f854e40b0a8b7074d95e3aff) and referenced by '//examples:examples'\r\nERROR: Analysis of target '//examples:examples' failed; build aborted:\r\n  no such package '@com_google_api_grpc_proto_google_common_protos//jar':\r\n  Downloaded file at <snip>/external/com_google_api_grpc_proto_google_common_protos/com/google/api/grpc/proto-google-common-protos/1.0.0/proto-google-common-protos-1.0.0.jar\r\n  has SHA-1 of 86f070507e28b930e50d218ee5b6788ef0dd05e6, does not match expected SHA-1\r\n  (de4e859c3530f7e9f854e40b0a8b7074d95e3aff)\r\nINFO: Elapsed time: 6.185s\r\nFAILED: Build did NOT complete successfully (53 packages loaded)\r\n```\r\n\r\nIt can be fixed by updating the SHA-1 in repositories.bzl.", "url": "https://github.com/grpc/grpc-java/issues/3802", "user": "drigz", "labels": ["bug"], "created": "2017-11-28 12:28:54", "closed": "2017-12-01 03:05:00", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "NullPointerException when create channel with hostname contains '_' underscore", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\ngrpc-core-1.6.1\r\n\r\n### What JVM are you using (`java -version`)?\r\nopenjdk version 1.8.0_141\r\n\r\n### What did you do?\r\nCreate a channel with hostname contains underscore ('_')\r\n`ManagedChannelBuilder.forTarget(\"host_1\").usePlaintext(true).build();`\r\nIt is due to the java.net.URI return null on getHost() when hostname contains '_'.\r\nWe understand that '_' is not align with standard, but many systems support '_' nowadays, and is hard to avoid.\r\n\r\n### What did you see instead?\r\n```\r\njava.lang.NullPointerException: host\r\n\tat com.google.common.base.Preconditions.checkNotNull(Preconditions.java:228)\r\n\tat io.grpc.internal.DnsNameResolver.<init>(DnsNameResolver.java:97)\r\n\tat io.grpc.internal.DnsNameResolverProvider.newNameResolver(DnsNameResolverProvider.java:50)\r\n\tat io.grpc.internal.DnsNameResolverProvider.newNameResolver(DnsNameResolverProvider.java:39)\r\n\tat io.grpc.NameResolverProvider$NameResolverFactory.newNameResolver(NameResolverProvider.java:162)\r\n\tat io.grpc.internal.ManagedChannelImpl.getNameResolver(ManagedChannelImpl.java:447)\r\n\tat io.grpc.internal.ManagedChannelImpl.<init>(ManagedChannelImpl.java:383)\r\n\tat io.grpc.internal.AbstractManagedChannelImplBuilder.build(AbstractManagedChannelImplBuilder.java:320)\r\n```", "url": "https://github.com/grpc/grpc-java/issues/3701", "user": "MinosPong", "labels": ["bug"], "created": "2017-11-09 10:40:06", "closed": "2018-08-13 23:55:20", "commits": {}, "ttf": 277.0002777777778, "commitsDetails": []}, {"title": "WARNING: Received unexpected ping ack. No ping outstanding", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n1.6.1\r\n\r\n\r\n### What JVM are you using (`java -version`)?\r\n1.8.0_141-b15\r\n\r\n### What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\n\r\n\r\n### What did you expect to see?\r\n\r\n\r\n### What did you see instead?\r\nI see lots of these lines:\r\n> Nov 07, 2017 11:52:01 PM io.grpc.netty.NettyServerHandler$FrameListener onPingAckRead\r\n> WARNING: Received unexpected ping ack. No ping outstanding\r\n\r\nLooks like just a warning, but I wanted to know if this could be some network issue.", "url": "https://github.com/grpc/grpc-java/issues/3684", "user": "mfirry", "labels": ["bug"], "created": "2017-11-08 08:38:23", "closed": "2017-11-14 19:09:32", "commits": {"66f9ef5d697331345e8bff81877c6a0204bad4c7": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "899611b2cd377c174bf38caa06196a5c655781bb": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "7aa6d464987d077bc9b168f3ca48688ed99b3740": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "977ef82dfddb3bb4ac85ae29f8efbedd8a8a827b": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "7819c43009a7c35ee9710d3456ad9e15e2d1d3e7": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "d678938295430fc7beac5ee163bcd2347db95dc0": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "71e8f46a60c85b5ce51db81e51ec2fc887e63386": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "66f9ef5d697331345e8bff81877c6a0204bad4c7", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["de06a9471a51b2a265e9f7496424b7166750e079"], "nameRev": "66f9ef5d697331345e8bff81877c6a0204bad4c7 tags/v1.9.0~85", "commitMessage": "netty: fix server keepalive unexpected ping ack\n\nResolves #3684", "commitDateTime": "2017-11-14 11:09:31", "authoredDateTime": "2017-11-14 11:09:31", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandler.KeepAlivePinger.ping()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "899611b2cd377c174bf38caa06196a5c655781bb", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["66615f70747c2a52fb3b93ac1287f50b6ef3bc66"], "nameRev": "899611b2cd377c174bf38caa06196a5c655781bb tags/v1.8.0~10", "commitMessage": "netty: fix server keepalive unexpected ping ack\n\nResolves #3684", "commitDateTime": "2017-11-14 13:30:17", "authoredDateTime": "2017-11-14 11:09:31", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandler.KeepAlivePinger.ping()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "7aa6d464987d077bc9b168f3ca48688ed99b3740", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["32d30640d3b413bb0f5f00042c38eea9f8e31809"], "nameRev": "7aa6d464987d077bc9b168f3ca48688ed99b3740 tags/v1.7.1~6", "commitMessage": "netty: fix server keepalive unexpected ping ack\n\nResolves #3684\n", "commitDateTime": "2017-11-14 13:30:50", "authoredDateTime": "2017-11-14 11:09:31", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandler.KeepAlivePinger.ping()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "977ef82dfddb3bb4ac85ae29f8efbedd8a8a827b", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["996695c7107211ba7aba06c9b083df62257f70b2"], "nameRev": "977ef82dfddb3bb4ac85ae29f8efbedd8a8a827b remotes/origin/v1.5.x~4", "commitMessage": "netty: fix server keepalive unexpected ping ack\n\nResolves #3684\n", "commitDateTime": "2017-11-14 13:31:30", "authoredDateTime": "2017-11-14 11:09:31", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandler.KeepAlivePinger.ping()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "7819c43009a7c35ee9710d3456ad9e15e2d1d3e7", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["c0f8d9d99e1e46954d06b53534cf4136375d7e46"], "nameRev": "7819c43009a7c35ee9710d3456ad9e15e2d1d3e7 remotes/origin/v1.6.x~5", "commitMessage": "netty: fix server keepalive unexpected ping ack\n\nResolves #3684\n", "commitDateTime": "2017-11-14 13:48:28", "authoredDateTime": "2017-11-14 11:09:31", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandler.KeepAlivePinger.ping()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "d678938295430fc7beac5ee163bcd2347db95dc0", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["44ce204e4d43fb84f672b03f644bcf6fe865ce7f"], "nameRev": "d678938295430fc7beac5ee163bcd2347db95dc0 remotes/origin/v1.3.x~4", "commitMessage": "netty: fix server keepalive unexpected ping ack\n\nResolves #3684\n", "commitDateTime": "2017-11-14 14:54:44", "authoredDateTime": "2017-11-14 11:09:31", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandler.KeepAlivePinger.ping()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "71e8f46a60c85b5ce51db81e51ec2fc887e63386", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["32cd5f2c30aab44e0d7bc7acb06d7b5ded2a9776"], "nameRev": "71e8f46a60c85b5ce51db81e51ec2fc887e63386 remotes/origin/v1.4.x~4", "commitMessage": "netty: fix server keepalive unexpected ping ack\n\nResolves #3684\n", "commitDateTime": "2017-11-14 14:55:11", "authoredDateTime": "2017-11-14 11:09:31", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandler.KeepAlivePinger.ping()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["66f9ef5d697331345e8bff81877c6a0204bad4c7"], "filteredCommitsReason": {"duplicated": 6, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.NettyServerHandler.KeepAlivePinger.ping()"]}, {"title": "Bazel: java_grpc_library rules can not be used from another repository (contains fix)", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n\r\n1.7.0\r\n### What JVM are you using (`java -version`)?\r\n\r\nopenjdk version \"9-internal\"\r\nOpenJDK Runtime Environment (build 9-internal+0-2016-04-14-195246.buildd.src)\r\nOpenJDK 64-Bit Server VM (build 9-internal+0-2016-04-14-195246.buildd.src, mixed mode)\r\n\r\n### What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\n\r\nImport Bazel rules in a proto repository from another proto repository\r\n\r\n### What did you expect to see?\r\n\r\nThe other repository should be useable with Bazel\r\n\r\n### What did you see instead?\r\n\r\nBuild errors\r\n\r\n\r\nI traced this here:\r\nhttps://github.com/grpc/grpc-java/blob/8a9660c7008c20151f38db78fe59a0796083ae11/java_grpc_library.bzl#L31\r\n\r\nThe error disappeared after changing it from\r\n`+ [src.short_path for src in srcs])`\r\nto\r\n`+ [_path_ignoring_repository(src) for src in srcs])`\r\n\r\nThe `-I` imports already define aliases, but whatever `src.short_path` produces is prefixed with `../` and the proto-repo workspace name. That directory is not available in the build directory of the importing repo.\r\n\r\nAfter this change, it worked in both the proto repo and the repo importing it.\r\n\r\nIf required, I can work on a reproducer or provide additional details - @-mention me in that case.\r\nI still hope the description is sufficient... :wink:\r\n", "url": "https://github.com/grpc/grpc-java/issues/3650", "user": "ah-edg", "labels": ["bug"], "created": "2017-11-01 19:18:39", "closed": "2017-11-07 01:29:13", "commits": {"3936557e7257ae5ffd18f1de91f62ff24b339075": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "3936557e7257ae5ffd18f1de91f62ff24b339075", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["f792efe82f9bc95be00bf56f88e8d085fc4cbae0"], "nameRev": "3936557e7257ae5ffd18f1de91f62ff24b339075 tags/v1.8.0~16", "commitMessage": "java_grpc_library: fix remote protos that are 'src's\n\n'includes' were already handled, but not 'src's. This allows you to\ndepend on things like :any_proto from the protobuf repo.\n\nFixes #3650\n", "commitDateTime": "2017-11-06 17:29:12", "authoredDateTime": "2017-11-06 17:11:34", "commitGitStats": [{"filePath": "java_grpc_library.bzl", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3936557e7257ae5ffd18f1de91f62ff24b339075"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["java_grpc_library.bzl"]}, {"title": "io.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\ngRPC Server\r\n<gRPC.version>1.5.0</gRPC.version>\r\n<netty.version>4.1.12.Final</netty.version>\r\n\r\ngRPC Client\r\n<gRPC.version>1.6.0</gRPC.version>\r\n<netty.version>4.1.8.Final</netty.version>\r\n\r\n### What JVM are you using (`java -version`)?\r\njava 8\r\n\r\nWe are seeing a lot of warning messages from Netty shown below on gRPC server side. Could someone shed some light on why we are seeing these warnings?\r\n\r\n```\r\n2017-10-04 19:21:08,485 WARN [ForkJoinPool-1-worker-2]io.grpc.netty.NettyServerHandler[423] Stream Error\r\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 5\r\n\r\n2017-10-04 19:21:08,488 WARN [ForkJoinPool-1-worker-2]io.grpc.netty.NettyServerHandler[423] Stream Error\r\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 5\r\n\r\n2017-10-04 19:21:08,489 WARN [ForkJoinPool-1-worker-2]io.grpc.netty.NettyServerHandler[423] Stream Error\r\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 5\r\n\r\n2017-10-04 19:53:07,139 WARN [ForkJoinPool-1-worker-2]io.grpc.netty.NettyServerHandler[423] Stream Error\r\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 145\r\n\r\n2017-10-04 19:53:07,169 WARN [ForkJoinPool-1-worker-2]io.grpc.netty.NettyServerHandler[423] Stream Error\r\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 145\r\n\r\n2017-10-05 07:38:08,033 WARN [ForkJoinPool-1-worker-1]io.grpc.netty.NettyServerHandler[423] Stream Error\r\nio.netty.handler.codec.http2.Http2Exception$StreamException: Received DATA frame for an unknown stream 123\r\n```", "url": "https://github.com/grpc/grpc-java/issues/3548", "user": "hzariv", "labels": ["bug"], "created": "2017-10-06 16:11:46", "closed": "2020-04-24 22:49:14", "commits": {}, "ttf": 931.0002777777778, "commitsDetails": []}, {"title": "Interoptest failing in GAE", "body": "Fails for both jdk7 and jdk8:\r\n```\r\n  maxInboundSize_exact(io.grpc.testing.integration.NettyClientInteropServlet$Tester)\r\n  io.grpc.StatusRuntimeException: RESOURCE_EXHAUSTED: io.grpc.netty.NettyClientTransport$3: Frame size 7 exceeds maximum: 5. \r\n        at io.grpc.Status.asRuntimeException(Status.java:526)\r\n        at io.grpc.stub.ClientCalls$BlockingResponseStream.hasNext(ClientCalls.java:523)\r\n        at io.grpc.stub.ClientCalls$BlockingResponseStream.next(ClientCalls.java:530)\r\n        at io.grpc.testing.integration.AbstractInteropTest.maxInboundSize_exact(AbstractInteropTest.java:1116)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n        at java.lang.reflect.Method.invoke(Method.java:498)\r\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n        at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n        at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n        at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)\r\n        at org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)\r\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```", "url": "https://github.com/grpc/grpc-java/issues/3547", "user": "zpencer", "labels": ["bug"], "created": "2017-10-06 01:37:28", "closed": "2017-11-06 20:34:11", "commits": {}, "ttf": 31.00027777777778, "commitsDetails": []}, {"title": "LoadBalancer gets handleSubchannelState calls after shutdown", "body": "Subchannel State is SHUTDOWN", "url": "https://github.com/grpc/grpc-java/issues/3545", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2017-10-06 00:23:52", "closed": "2017-10-11 23:46:37", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Census contexts not propagated by in-process", "body": "In-process transport currently disables Census altogether. However, we still need to propagate the Census `StatsContext` and tracing `Span` from the client to the server.", "url": "https://github.com/grpc/grpc-java/issues/3481", "user": "zhangkun83", "labels": ["bug"], "created": "2017-09-20 20:43:36", "closed": "2018-01-28 20:40:22", "commits": {}, "ttf": 129.00027777777777, "commitsDetails": []}, {"title": "Could not add interceptor(s) to `ProtoReflectionService`", "body": "### What did you do?\r\nAdd interceptor(s) to `ProtoReflectionService`.\r\n\r\n### What did you expect to see?\r\n`ProtoReflectionService` works with interceptor(s).\r\n\r\n### What did you see instead?\r\nGot a NullPointerException or compilation error.\r\n\r\n### Problem\r\nI ask a question on Gitter.\r\nhttps://gitter.im/grpc/grpc?at=59b9090bcfeed2eb65033bad\r\nand I have got a reply from @e.jona86.\r\nhttps://gitter.im/grpc/grpc?at=59b9a7f9c101bc4e3ac3404a\r\nI think it is not easy to fix. So I report an issue.\r\n\r\n`ProtoReflectionService` needs a reference to `Server` via `notifyOnBuild` but it could not, because an intercepted service is an instance of `ServerServiceDefinition`.\r\n\r\nI think it is consisting some problems (may not a bug or may not a problem) as below.\r\n- `ServerInterceptors#intercept` binds a service and returns `ServerServiceDefinition`.\r\n- `ServerBuilder#addService` doesn't add `ServerServiceDefinition` to `notifyOnBuildList`.\r\n- `ServerServiceDefinition` doesn't implement `InternalNotifyOnBuild`.\r\n\r\nTherefore, I could not add interceptor(s) to `ProtoReflectionService`.", "url": "https://github.com/grpc/grpc-java/issues/3469", "user": "jyane", "labels": ["bug"], "created": "2017-09-15 08:16:16", "closed": "2020-05-01 17:39:39", "commits": {}, "ttf": 959.0002777777778, "commitsDetails": []}, {"title": "Netty server doesn't send multiple GOAWAYs during graceful shutdown", "body": "For full graceful shutdown, we should send one GOAWAY with last-steam-id=MAX_INT and a PING. When the PING ACK is received then we send another GOAWAY with the actual last-stream-id. We can choose to set a timer for if the PING ACK doesn't arrive back promptly.\r\n\r\nIt looks like we try to do shutdown gracefully with maxConnectionAge, but it seems like it may not actually function.", "url": "https://github.com/grpc/grpc-java/issues/3442", "user": "ejona86", "labels": ["bug"], "created": "2017-09-07 20:03:45", "closed": "2018-03-28 22:58:32", "commits": {"bdecdaea22ba4e56949be7534aa47306e5b5f758": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 202.00027777777777, "commitsDetails": [{"commitHash": "bdecdaea22ba4e56949be7534aa47306e5b5f758", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["03a00aa8cf6e928a007a35a45f013e0a7c58ad07"], "nameRev": "bdecdaea22ba4e56949be7534aa47306e5b5f758 tags/v1.12.0~66", "commitMessage": "netty: http2 server transport graceful shutdown sends 2 GOAWAYs\n\nresolves #3442\r\n", "commitDateTime": "2018-03-28 15:58:31", "authoredDateTime": "2018-03-28 15:58:31", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 102, "deletions": 31, "lines": 133}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java", "insertions": 229, "deletions": 9, "lines": 238}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandler.handlerAdded(io.netty.channel.ChannelHandlerContext).3.run()", "TOT": 24, "UPD": 9, "INS": 0, "MOV": 13, "DEL": 2}, {"spoonMethodName": "io.grpc.netty.NettyServerHandler.1.close(io.netty.channel.ChannelHandlerContext)", "TOT": 9, "UPD": 1, "INS": 1, "MOV": 5, "DEL": 2}, {"spoonMethodName": "io.grpc.netty.NettyServerHandler.handlerAdded(io.netty.channel.ChannelHandlerContext)", "TOT": 17, "UPD": 0, "INS": 1, "MOV": 15, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyServerHandler", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandler.GracefulShutdown", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandler.FrameListener.onPingAckRead(io.netty.channel.ChannelHandlerContext,long)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandler.GracefulShutdown.secondGoAwayAndClose(io.netty.channel.ChannelHandlerContext)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyServerHandlerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.maxConnectionIdle_goAwaySent()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.maxConnectionIdle_activeThenRst()", "TOT": 5, "UPD": 1, "INS": 0, "MOV": 4, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.maxConnectionAge_goAwaySent()", "TOT": 7, "UPD": 1, "INS": 0, "MOV": 6, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.maxConnectionAgeGrace_channelClosedAfterGracePeriod()", "TOT": 12, "UPD": 1, "INS": 0, "MOV": 11, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.maxConnectionIdle_goAwaySent_pingTimeout()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.maxConnectionIdle_activeThenRst_pingTimeoutk()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.maxConnectionAge_goAwaySent_pingTimeout()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.maxConnectionAgeGrace_channelClosedAfterGracePeriod_withPingTimeout()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.maxConnectionAgeGrace_channelStillOpenDuringGracePeriod()", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.maxConnectionAgeGrace_channelClosedAfterGracePeriod_withPingAck()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bdecdaea22ba4e56949be7534aa47306e5b5f758"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 102, "deletions": 31, "lines": 133, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 59, "UPD": 10, "INS": 10, "MOV": 34, "DEL": 5, "spoonFilesChanged": 1, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.NettyServerHandler.handlerAdded(io.netty.channel.ChannelHandlerContext).3.run()", "io.grpc.netty.NettyServerHandler.FrameListener.onPingAckRead(io.netty.channel.ChannelHandlerContext,long)", "io.grpc.netty.NettyServerHandler.1.close(io.netty.channel.ChannelHandlerContext)", "io.grpc.netty.NettyServerHandler.GracefulShutdown", "io.grpc.netty.NettyServerHandler", "io.grpc.netty.NettyServerHandler.GracefulShutdown.secondGoAwayAndClose(io.netty.channel.ChannelHandlerContext)", "io.grpc.netty.NettyServerHandler.handlerAdded(io.netty.channel.ChannelHandlerContext)"]}, {"title": "Document CallStreamObserver.request() thread-safety", "body": "### What version of gRPC are you using?\r\n1.5.0\r\n\r\nThe javadoc for `CallStreamObserver.request()` makes no statement about thread safety. I see that the applicable implementations call `request()` methods that are documented as thread-safe, and that `CallStreamObserver.request()` is called as if it were thread-safe. I assume that this is meant to be a contract, as otherwise usage would be oddly complicated.", "url": "https://github.com/grpc/grpc-java/issues/3413", "user": "bubenheimer", "labels": ["bug"], "created": "2017-08-29 16:12:04", "closed": "2017-11-10 21:10:18", "commits": {"5a87a6fff6632b9b3d0a22b6f47c2e780b2e2f66": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 73.00027777777778, "commitsDetails": [{"commitHash": "5a87a6fff6632b9b3d0a22b6f47c2e780b2e2f66", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["b026ea544c8f2ce48c4a0c0c45b0b1372250a46f"], "nameRev": "5a87a6fff6632b9b3d0a22b6f47c2e780b2e2f66 tags/v1.9.0~94", "commitMessage": "stub: Improve threading expectation docs\n\nThis mainly copies documentation from other places, like StreamObserver\nand ClientCall, but does fix some missing important threading notes.\n\nFixes #3413\n", "commitDateTime": "2017-11-10 13:10:17", "authoredDateTime": "2017-11-07 14:27:43", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/ClientCall.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "stub/src/main/java/io/grpc/stub/CallStreamObserver.java", "insertions": 13, "deletions": 0, "lines": 13}, {"filePath": "stub/src/main/java/io/grpc/stub/ClientCallStreamObserver.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "stub/src/main/java/io/grpc/stub/ServerCallStreamObserver.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "stub/src/main/java/io/grpc/stub/StreamObserver.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ClientCall.java", "spoonMethods": []}, {"spoonFilePath": "CallStreamObserver.java", "spoonMethods": []}, {"spoonFilePath": "ClientCallStreamObserver.java", "spoonMethods": []}, {"spoonFilePath": "ServerCallStreamObserver.java", "spoonMethods": []}, {"spoonFilePath": "StreamObserver.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5a87a6fff6632b9b3d0a22b6f47c2e780b2e2f66"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 24, "deletions": 3, "lines": 27, "gitFilesChange": 5}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["stub/src/main/java/io/grpc/stub", "core/src/main/java/io/grpc"]}, {"title": "Netty{Client/Server}Transport.shutdown() has 5 sec timeout, which does not agree with the spec of the interface", "body": "The transport `shutdown()` API specifies that existing streams continue, but the `AbstractNettyHandler` sets a `GRACEFUL_SHUTDOWN_TIMEOUT = SECONDS.toMillis(5)`, so when `Netty{Client/Server}Transport.shutdown()` is called, it actually will kill the existing streams in 5 seconds.", "url": "https://github.com/grpc/grpc-java/issues/3383", "user": "dapengzhang0", "labels": ["bug"], "created": "2017-08-23 22:56:44", "closed": "2017-08-24 15:52:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Netty server poorly handles unknown content type", "body": "If the content-type is missing or unknown, the [Netty transport sends RST_STREAM with REFUSED_STREAM](https://github.com/grpc/grpc-java/blob/v1.5.0/netty/src/main/java/io/grpc/netty/NettyServerHandler.java#L586). That's bonkers on multiple levels.\r\n\r\nWe should probably respond with HTTP 415 instead.", "url": "https://github.com/grpc/grpc-java/issues/3370", "user": "ejona86", "labels": ["bug"], "created": "2017-08-21 22:38:48", "closed": "2017-11-15 19:34:14", "commits": {}, "ttf": 85.00027777777778, "commitsDetails": []}, {"title": "Mismatch in naming with bazel maven jars", "body": "I am trying to use grpc-java in an existing project which uses bazel, java, and a bunch of jars from maven. I added this to my WORKSPACE:\r\n\r\n```\r\nload(\"@grpc_java//:repositories.bzl\", \"grpc_java_repositories\")\r\n\r\ngrpc_java_repositories(\r\n  omit_com_google_guava=True,\r\n)\r\n```\r\n\r\nThe problem is that I use the [migration-tooling](https://github.com/bazelbuild/migration-tooling) project to add maven jars, and its naming for external jars does not match yours. For example, you call it `@com_google_guava`[1] but that project uses `@com_google_guava_guava`[2]. So if I try to use the omits, I get:\r\n\r\n```\r\nno such package '@com_google_guava//jar': The repository could not be resolved\r\n```\r\n\r\nAnd if I remove the omits, my project references two different versions of guava and I get runtime errors (since this project uses guava 19 and I want 21).\r\n\r\nIs it possible to switch the naming of external maven jars to match bazel's tooling?\r\n\r\nPlease answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n\r\n1.5.0\r\n\r\n### What JVM are you using (`java -version`)?\r\n\r\n```\r\n% java -version\r\njava version \"1.8.0_144\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_144-b01)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.144-b01, mixed mode)\r\n```\r\n\r\n[1] https://github.com/grpc/grpc-java/blob/master/repositories.bzl#L113\r\n[2]\r\n```\r\n% bazel run //generate_workspace -- --output_dir /tmp --artifact=com.google.guava:guava:21.0\r\n...\r\nWrote /tmp/generate_workspace.bzl\r\n\r\n% cat /tmp/generate_workspace.bzl \r\n# The following dependencies were calculated from:\r\n#\r\n# generate_workspace --output_dir /tmp --artifact=com.google.guava:guava:21.0\r\n\r\n\r\ndef generated_maven_jars():\r\n  native.maven_jar(\r\n      name = \"com_google_guava_guava\",\r\n      artifact = \"com.google.guava:guava:21.0\",\r\n  )\r\n\r\n\r\n\r\n\r\ndef generated_java_libraries():\r\n  native.java_library(\r\n      name = \"com_google_guava_guava\",\r\n      visibility = [\"//visibility:public\"],\r\n      exports = [\"@com_google_guava_guava//jar\"],\r\n  )\r\n```", "url": "https://github.com/grpc/grpc-java/issues/3328", "user": "pgr0ss", "labels": ["bug"], "created": "2017-08-09 17:14:23", "closed": "2017-08-11 23:39:44", "commits": {"72b9ee22b86bb3ea3e78199e183c744567e7761e": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "72b9ee22b86bb3ea3e78199e183c744567e7761e", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["13ef2261d669795205588e292c547dc8ed9c31f7"], "nameRev": "72b9ee22b86bb3ea3e78199e183c744567e7761e tags/v1.6.1~19", "commitMessage": "all: Fix mismatch in naming Bazel Maven jars\n\nThis commit aligns the naming of the Bazel Maven jars with the names\nused by Bazel's migration-tooling project:\n\nhttps://github.com/bazelbuild/migration-tooling\n\nUnfortunately, we can't fix @com_google_protobuf_java because it's\nrequired by Bazel itself.\n\nFixes #3328\n", "commitDateTime": "2017-08-11 16:39:43", "authoredDateTime": "2017-08-11 16:43:08", "commitGitStats": [{"filePath": "context/BUILD.bazel", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "core/BUILD.bazel", "insertions": 7, "deletions": 7, "lines": 14}, {"filePath": "examples/BUILD.bazel", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "java_grpc_library.bzl", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "netty/BUILD.bazel", "insertions": 11, "deletions": 11, "lines": 22}, {"filePath": "okhttp/BUILD.bazel", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "protobuf-lite/BUILD.bazel", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "protobuf-nano/BUILD.bazel", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "protobuf/BUILD.bazel", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "repositories.bzl", "insertions": 18, "deletions": 18, "lines": 36}, {"filePath": "stub/BUILD.bazel", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["72b9ee22b86bb3ea3e78199e183c744567e7761e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 49, "deletions": 49, "lines": 98, "gitFilesChange": 11}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/BUILD.bazel", "context/BUILD.bazel", "okhttp/BUILD.bazel", "netty/BUILD.bazel", "stub/BUILD.bazel", "protobuf/BUILD.bazel", "protobuf-lite/BUILD.bazel", "examples/BUILD.bazel", "repositories.bzl", "protobuf-nano/BUILD.bazel", "java_grpc_library.bzl"]}, {"title": "Infinite cycle during parse client request", "body": "\r\n### What version of gRPC are you using?\r\n1.5.0 Release\r\n\r\n### What JVM are you using (`java -version`)?\r\njava version \"1.8.0\"\r\nJava(TM) SE Runtime Environment (build 1.8.0-b132)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.0-b70, mixed mode)\r\n\r\n### What the problem?\r\nAfter minor change my proto request all of my request start failed with deadline.\r\n\r\nThread-dumps from server side show that root cause of this deadlines in parsing code\r\n```\r\n\"stockpile-server-grpc-1-2\" #14 prio=5 os_prio=0 tid=0x00007f455c170800 nid=0x90b runnable [0x00007f4589dbd000]\r\n   java.lang.Thread.State: RUNNABLE\r\n\tat io.grpc.protobuf.lite.ProtoLiteUtils$2.parse(ProtoLiteUtils.java:133)\r\n\tat io.grpc.protobuf.lite.ProtoLiteUtils$2.parse(ProtoLiteUtils.java:79)\r\n\tat io.grpc.MethodDescriptor.parseRequest(MethodDescriptor.java:280)\r\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.messageRead(ServerCallImpl.java:246)\r\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1.runInContext(ServerImpl.java:571)\r\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:37)\r\n\tat io.grpc.internal.SerializingExecutor.run(SerializingExecutor.java:102)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nThis cycle never completed, because try read zero bytes from `InputStream` \r\nhttps://github.com/grpc/grpc-java/blob/master/protobuf-lite/src/main/java/io/grpc/protobuf/lite/ProtoLiteUtils.java#L133\r\n\r\n```java\r\n              int chunkSize;\r\n              int position = 0;\r\n              while ((chunkSize = stream.read(buf, position, size - position)) != -1) {\r\n                position += chunkSize;\r\n              }\r\n              if (size != position) {\r\n                throw new RuntimeException(\"size inaccurate: \" + size + \" != \" + position);\r\n```\r\n\r\n[InputSteam contract](https://docs.oracle.com/javase/7/docs/api/java/io/InputStream.html#read(byte[],%20int,%20int)) say that read method will always return zero if reads zero bytes.\r\n> If len is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into b. \r\n", "url": "https://github.com/grpc/grpc-java/issues/3323", "user": "Gordiychuk", "labels": ["bug"], "created": "2017-08-08 14:39:01", "closed": "2017-08-15 23:04:25", "commits": {"ca7685ef50a0970662a55e3ad84b7cba73c2f2d0": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "ca7685ef50a0970662a55e3ad84b7cba73c2f2d0", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["577bbefd1a968e524497626c5487496f93c5254e"], "nameRev": "ca7685ef50a0970662a55e3ad84b7cba73c2f2d0 tags/v1.6.1~9", "commitMessage": "protobuf-lite: ProtoLiteUtils fix infinite loop\n\nInputStream by contract can return zero if requested length equal to zero.\r\n\r\n```\r\nIf len is zero, then no bytes are read and 0 is returned;\r\notherwise, there is an attempt to read at least one byte.\r\nIf no byte is available because the stream is at end of file,\r\nthe value -1 is returned; otherwise, at least one byte is read\r\nand stored into b.\r\n```\r\n\r\nClose #3323", "commitDateTime": "2017-08-15 16:04:24", "authoredDateTime": "2017-08-16 02:04:24", "commitGitStats": [{"filePath": "protobuf-lite/src/main/java/io/grpc/protobuf/lite/ProtoLiteUtils.java", "insertions": 12, "deletions": 5, "lines": 17}, {"filePath": "protobuf-lite/src/test/java/io/grpc/protobuf/lite/ProtoLiteUtilsTest.java", "insertions": 33, "deletions": 0, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ProtoLiteUtils.java", "spoonMethods": [{"spoonMethodName": "io.grpc.protobuf.lite.ProtoLiteUtils.marshaller(com.google.protobuf.MessageLite).2.parse(java.io.InputStream)", "TOT": 16, "UPD": 4, "INS": 3, "MOV": 6, "DEL": 3}]}, {"spoonFilePath": "ProtoLiteUtilsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.protobuf.lite.ProtoLiteUtilsTest.parseFromKnowLengthInputStream()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.protobuf.lite.ProtoLiteUtilsTest.CustomKnownLengthInputStream", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ca7685ef50a0970662a55e3ad84b7cba73c2f2d0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 12, "deletions": 5, "lines": 17, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 16, "UPD": 4, "INS": 3, "MOV": 6, "DEL": 3, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["protobuf-lite/src/main/java/io/grpc/protobuf/lite"], "changesInPackagesSPOON": ["io.grpc.protobuf.lite.ProtoLiteUtils.marshaller(com.google.protobuf.MessageLite).2.parse(java.io.InputStream)"]}, {"title": "InputStream from MethodDescriptor.Marshaller does not close", "body": "### What version of gRPC are you using?\r\n1.5.0 Release\r\n\r\n### What JVM are you using (`java -version`)?\r\njava version \"1.8.0\"\r\nJava(TM) SE Runtime Environment (build 1.8.0-b132)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.0-b70, mixed mode)\r\n\r\n### What the problem?\r\nI have a gRPC method with custom marshaller, that deserialize protobuf request from off-heap ByteBuf.\r\n\r\n```java\r\nprivate static final MethodDescriptor<ByteBuf, ShardCommandResponse> BINARY_METHOD_BULK_SHARD_COMMAND = \r\n            MethodDescriptor.<ByteBuf, ShardCommandResponse>newBuilder()\r\n                    .setType(MethodDescriptor.MethodType.UNARY)\r\n                    .setFullMethodName(StockpileServiceGrpc.METHOD_BULK_SHARD_COMMAND.getFullMethodName())\r\n                    .setRequestMarshaller(new ByteBufMarshaller())\r\n                    .setResponseMarshaller(ProtoUtils.marshaller(ShardCommandResponse.getDefaultInstance()))\r\n                    .build();\r\n```\r\n\r\nMarshaller looks like \r\n```java\r\nimport java.io.InputStream;\r\n\r\nimport javax.annotation.ParametersAreNonnullByDefault;\r\nimport javax.annotation.WillNotClose;\r\n\r\nimport io.grpc.MethodDescriptor;\r\nimport io.netty.buffer.ByteBuf;\r\nimport io.netty.buffer.ByteBufInputStream;\r\n\r\n@ParametersAreNonnullByDefault\r\npublic class ByteBufMarshaller implements MethodDescriptor.Marshaller<ByteBuf> {\r\n\r\n    @Override\r\n    public InputStream stream(@WillNotClose ByteBuf value) {\r\n        ByteBuf buffer = value.retain();\r\n        // todo wrap to {@link io.grpc.KnownLength} for improve transport\r\n        InputStream delegate = new ByteBufInputStream(buffer, true);\r\n        return delegate;\r\n    }\r\n\r\n    @Override\r\n    @WillNotClose\r\n    public ByteBuf parse(InputStream stream) { \r\n        throw new UnsupportedOperationException(\"Not implemented yet!\");\r\n    }\r\n}\r\n```\r\nUse netty ByteBuf as request required release resources. And I expected that gRPC close `InputStream` after send request, but it's doesn't happens. As a result of memory leak my service\r\nthat use gRPC client failed with OOM.\r\n\r\n```\r\n[Time-limited test] ERROR io.netty.util.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.\r\nRecent access records: 4\r\n#4:\r\n\tio.netty.buffer.AdvancedLeakAwareByteBuf.getBytes(AdvancedLeakAwareByteBuf.java:246)\r\n\tio.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:861)\r\n\tio.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:44)\r\n\tio.netty.buffer.ReadOnlyByteBuf.getBytes(ReadOnlyByteBuf.java:260)\r\n\tio.netty.buffer.AbstractByteBuf.readBytes(AbstractByteBuf.java:851)\r\n\tio.netty.buffer.ByteBufInputStream.read(ByteBufInputStream.java:179)\r\n\tjava.io.InputStream.read(InputStream.java:101)\r\n\tcom.google.common.io.ByteStreams.copy(ByteStreams.java:110)\r\n\tio.grpc.internal.MessageFramer.writeToOutputStream(MessageFramer.java:254)\r\n\tio.grpc.internal.MessageFramer.writeUncompressed(MessageFramer.java:155)\r\n\tio.grpc.internal.MessageFramer.writePayload(MessageFramer.java:127)\r\n\tio.grpc.internal.AbstractStream.writeMessage(AbstractStream.java:52)\r\n\tio.grpc.internal.ClientCallImpl.sendMessage(ClientCallImpl.java:386)\r\n\tio.grpc.stub.ClientCalls.asyncUnaryRequestCall(ClientCalls.java:239)\r\n\tio.grpc.stub.ClientCalls.asyncUnaryRequestCall(ClientCalls.java:222)\r\n\tio.grpc.stub.ClientCalls.asyncUnaryCall(ClientCalls.java:62)\r\n```\r\n\r\nI also recheck it via implement empty InputStream that log close method. And it method was not execute. \r\n\r\nI think for resolve this issue need resolve this todo https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/internal/ClientCallImpl.java#L387", "url": "https://github.com/grpc/grpc-java/issues/3318", "user": "Gordiychuk", "labels": ["bug"], "created": "2017-08-07 15:51:23", "closed": "2018-02-20 17:57:58", "commits": {}, "ttf": 197.00027777777777, "commitsDetails": []}, {"title": "Channel shutdown without calling shutdown()?", "body": "We are sometimes seeing `StatusRuntimeException` with `Status.UNAVAILABLE` and the message `Channel requested transport to shut down`.  However, our codebase does not contain a call to `ManagedChannel.shutdown(Now)()`. We never close the channel.\r\n\r\nDoes gRPC ever invoke `shutdown()` internally i.e. in error cases - I always thought it doesn't, but my knowledge of internals is out of date.", "url": "https://github.com/grpc/grpc-java/issues/3297", "user": "buchgr", "labels": ["bug"], "created": "2017-08-01 08:05:52", "closed": "2017-11-22 17:58:20", "commits": {}, "ttf": 113.00027777777778, "commitsDetails": []}, {"title": "Pings being sent too often by KeepAliveManager", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n\r\n1.5.0\r\n\r\n### What JVM are you using (`java -version`)?\r\n\r\n1.8\r\n\r\n### What did you do?\r\n\r\n* Enabled keepAliveTime of 20 seconds on the client, permitKeepAlive of 10 seconds on the server\r\n* Start the server w/logging in KeepAliveEnforcer\r\n* Start the client w/logging in KeepAliveManager\r\n* After ~3 pings, KeepAliveManager sends a ping after < 10 seconds, which is marked invalid by KeepAliveEnforcer\r\n* This happens a few more times and then more calm is sent\r\n\r\n### What did you expect to see?\r\n\r\n* Pings sent only every 20 seconds\r\n\r\nYou can checkout github.com/stephenh/mirror, the latest master has the reproducible error.\r\n\r\nHere is the output of some logging that I added to KeepAliveManager:\r\n\r\n```\r\n\r\n12:37:54 STATE GOING TO PING_SCHEDULED from onTransportActive <-- 1st schedule\r\n12:37:54 SCHEDULING sendPing in onTransportActive, delay=19545661745 (19.5 seconds)\r\n12:38:06 STATE GOING TO PING_DELAYED from onDataReceived\r\n12:38:07 STATE GOING TO IDLE from onTransportIdle\r\n\r\n12:38:08 STATE GOING TO PING_SCHEDULED from onTransportActive <-- 2nd schedule\r\n12:38:08 SCHEDULING sendPing in onTransportActive, delay=19630595429 (19.6 seconds)\r\n\r\n12:38:13 RUNNING sendPing, state=PING_SCHEDULED <-- from 1st schedule (~20 seconds later)\r\n12:38:13 STATE GOING TO PING_SENT from sendPing <-- 1st ping at :13\r\n12:38:13 STATE GOING TO PING_SCHEDULED from onDataReceived\r\n12:38:13 SCHEDULING sendPing in onDataReceived, delay=20000000000 <-- 3rd schedule\r\n\r\n12:38:27 RUNNING sendPing, state=PING_SCHEDULED <-- from 2nd schedule (~20 seconds later)\r\n12:38:27 STATE GOING TO PING_SENT from sendPing <-- 2nd ping at :27\r\n\r\n12:38:28 STATE GOING TO PING_SCHEDULED from onDataReceived\r\n12:38:28 SCHEDULING sendPing in onDataReceived, delay=20000000000\r\n\r\n12:38:33 RUNNING sendPing, state=PING_SCHEDULED <-- from 3rd schedule\r\n12:38:33 STATE GOING TO PING_SENT from sendPing <-- 3rd ping at :33, < 10 seconds later, marked invalid\r\n12:38:33 STATE GOING TO PING_SCHEDULED from onDataReceived\r\n12:38:33 SCHEDULING sendPing in onDataReceived, delay=2000000000\r\n```\r\n\r\nYou can see the 3rd ping is sent only 6 seconds after the 2nd ping.\r\n\r\nMy guess is that KeepAliveManager is not handling sendPing being scheduled multiple times, and so should check nextKeepaliveTime instead of just the state.\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/3274", "user": "stephenh", "labels": ["bug", "usability"], "created": "2017-07-25 17:53:52", "closed": "2017-08-01 18:25:25", "commits": {"db9b7ed8c0a38072ab4cd889e7e2033bd33858e4": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "db9b7ed8c0a38072ab4cd889e7e2033bd33858e4", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["18970e6ef310fda38e577de2a30c71c6c44f1e66"], "nameRev": "db9b7ed8c0a38072ab4cd889e7e2033bd33858e4 tags/v1.6.1~39", "commitMessage": "Don't schedule multiple pings.\n\nIf onTransportActive ran while SendPing was already scheduled, we would\r\nschedule another SendPing, which seems fine, but the server might observe\r\nus sending pings too quickly, and make us GOAWAY.\r\n\r\nFixes #3274.", "commitDateTime": "2017-08-01 11:25:24", "authoredDateTime": "2017-08-01 13:25:24", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/KeepAliveManager.java", "insertions": 11, "deletions": 6, "lines": 17}, {"filePath": "core/src/test/java/io/grpc/internal/KeepAliveManagerTest.java", "insertions": 34, "deletions": 2, "lines": 36}], "commitSpoonAstDiffStats": [{"spoonFilePath": "KeepAliveManager.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.KeepAliveManager.onTransportActive()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.KeepAliveManager.2.run()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.KeepAliveManager.onDataReceived()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.KeepAliveManager.onTransportTermination()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "KeepAliveManagerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.KeepAliveManagerTest.transportGoesIdleBeforePingSent()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.KeepAliveManagerTest.keepAlivePingDelayedByIncomingData()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.KeepAliveManagerTest.transportGoesIdle()", "TOT": 8, "UPD": 0, "INS": 6, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["db9b7ed8c0a38072ab4cd889e7e2033bd33858e4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 6, "lines": 17, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.KeepAliveManager.2.run()", "io.grpc.internal.KeepAliveManager.onTransportActive()", "io.grpc.internal.KeepAliveManager.onTransportTermination()", "io.grpc.internal.KeepAliveManager.onDataReceived()"]}, {"title": "Client does not detect a truncated message at the end of stream", "body": "As discovered during the course of #3145. The server does detect and fail in the case of truncated message frame (\"Encountered end-of-stream mid-frame\"), but client doesn't have such logic.", "url": "https://github.com/grpc/grpc-java/issues/3264", "user": "ejona86", "labels": ["bug"], "created": "2017-07-21 21:20:16", "closed": "2018-05-21 20:51:16", "commits": {"451c412354730221e05cadcbdca5cf476675625a": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 303.0002777777778, "commitsDetails": [{"commitHash": "451c412354730221e05cadcbdca5cf476675625a", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["10291d5cccb739cfd7a9dee535e3ee08d9d6692f"], "nameRev": "451c412354730221e05cadcbdca5cf476675625a tags/v1.13.1~35", "commitMessage": "core: fix client does not detect truncated message\n\nResolves #3264", "commitDateTime": "2018-05-21 13:51:15", "authoredDateTime": "2018-05-21 13:51:15", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/AbstractClientStream.java", "insertions": 23, "deletions": 7, "lines": 30}, {"filePath": "core/src/test/java/io/grpc/internal/AbstractClientStreamTest.java", "insertions": 43, "deletions": 2, "lines": 45}, {"filePath": "okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractClientStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractClientStream.TransportState.deframerClosed(boolean)", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractClientStream.TransportState.setDecompressorRegistry(io.grpc.DecompressorRegistry)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractClientStream.TransportState.setListener(io.grpc.internal.ClientStreamListener)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractClientStream.TransportState.inboundHeadersReceived(io.grpc.Metadata)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractClientStream.TransportState.inboundTrailersReceived(io.grpc.Metadata,io.grpc.Status)", "TOT": 5, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractClientStream.GetFramer.writePayload(java.io.InputStream)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractClientStream.GetFramer.close()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractClientStream.TransportState", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractClientStreamTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractClientStreamTest.rstStreamClosesStream()", "TOT": 15, "UPD": 4, "INS": 1, "MOV": 10, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractClientStreamTest.trailerNotOkWithTruncatedMessage()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractClientStreamTest.trailerOkWithTruncatedMessage()", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OkHttpClientStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpClientStream.TransportState.deframerClosed(boolean)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["451c412354730221e05cadcbdca5cf476675625a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 25, "deletions": 9, "lines": 34, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 16, "UPD": 3, "INS": 6, "MOV": 1, "DEL": 6, "spoonFilesChanged": 2, "spoonMethodsChanged": 9}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal", "okhttp/src/main/java/io/grpc/okhttp"], "changesInPackagesSPOON": ["io.grpc.internal.AbstractClientStream.GetFramer.close()", "io.grpc.internal.AbstractClientStream.TransportState.inboundHeadersReceived(io.grpc.Metadata)", "io.grpc.internal.AbstractClientStream.TransportState.setListener(io.grpc.internal.ClientStreamListener)", "io.grpc.internal.AbstractClientStream.TransportState", "io.grpc.internal.AbstractClientStream.TransportState.deframerClosed(boolean)", "io.grpc.internal.AbstractClientStream.GetFramer.writePayload(java.io.InputStream)", "io.grpc.internal.AbstractClientStream.TransportState.inboundTrailersReceived(io.grpc.Metadata,io.grpc.Status)", "io.grpc.internal.AbstractClientStream.TransportState.setDecompressorRegistry(io.grpc.DecompressorRegistry)", "io.grpc.okhttp.OkHttpClientStream.TransportState.deframerClosed(boolean)"]}, {"title": "ChannelExecutor is not threadsafe", "body": "Found with TSAN:\r\n\r\n```\r\nWARNING: ThreadSanitizer: data race (pid=255771)\r\n  Read of size 8 at 0x7fd6d9ff3608 by thread T41 (mutexes: write M223068742301678088):\r\n    #0 io.netty.channel.DefaultChannelPipeline.estimatorHandle()Lio/netty/channel/MessageSizeEstimator$Handle; (DefaultChannelPipeline.java:100)  \r\n    #1 io.netty.channel.AbstractChannelHandlerContext$AbstractWriteTask.init(Lio/netty/channel/AbstractChannelHandlerContext$AbstractWriteTask;Lio/netty/channel/AbstractChannelHandlerContext;Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V (AbstractChannelHandlerContext.java:1060)  \r\n    #2 io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask.newInstance(Lio/netty/channel/AbstractChannelHandlerContext;Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/AbstractChannelHandlerContext$WriteAndFlushTask; (AbstractChannelHandlerContext.java:1126)  \r\n    #3 io.netty.channel.AbstractChannelHandlerContext$WriteAndFlushTask.access$1600(Lio/netty/channel/AbstractChannelHandlerContext;Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/AbstractChannelHandlerContext$WriteAndFlushTask; (AbstractChannelHandlerContext.java:1114)  \r\n    #4 io.netty.channel.AbstractChannelHandlerContext.write(Ljava/lang/Object;ZLio/netty/channel/ChannelPromise;)V (AbstractChannelHandlerContext.java:821)  \r\n    #5 io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture; (AbstractChannelHandlerContext.java:794)  \r\n    #6 io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture; (AbstractChannelHandlerContext.java:831)  \r\n    #7 io.netty.channel.DefaultChannelPipeline.writeAndFlush(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture; (DefaultChannelPipeline.java:1032)  \r\n    #8 io.netty.channel.AbstractChannel.writeAndFlush(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture; (AbstractChannel.java:296)  \r\n    #9 io.grpc.netty.NettyClientTransport.start(Lio/grpc/internal/ManagedClientTransport$Listener;)Ljava/lang/Runnable; (NettyClientTransport.java:227)  \r\n    #10 io.grpc.internal.ForwardingConnectionClientTransport.start(Lio/grpc/internal/ManagedClientTransport$Listener;)Ljava/lang/Runnable; (ForwardingConnectionClientTransport.java:29)  \r\n    #11 io.grpc.internal.InternalSubchannel.startNewTransport()V (InternalSubchannel.java:202)  \r\n    #12 io.grpc.internal.InternalSubchannel.obtainActiveTransport()Lio/grpc/internal/ClientTransport; (InternalSubchannel.java:175)  \r\n    #13 io.grpc.internal.ManagedChannelImpl$SubchannelImplImpl.obtainActiveTransport()Lio/grpc/internal/ClientTransport; (ManagedChannelImpl.java:813)  \r\n    #14 io.grpc.internal.GrpcUtil.getTransportFromPickResult(Lio/grpc/LoadBalancer$PickResult;Z)Lio/grpc/internal/ClientTransport; (GrpcUtil.java:578)  \r\n    #15 io.grpc.internal.DelayedClientTransport.reprocess(Lio/grpc/LoadBalancer$SubchannelPicker;)V (DelayedClientTransport.java:280)  \r\n    #16 io.grpc.internal.ManagedChannelImpl$LbHelperImpl$5.run()V (ManagedChannelImpl.java:719)  \r\n    #17 io.grpc.internal.ChannelExecutor.drain()V (ChannelExecutor.java:72)  \r\n    #18 io.grpc.internal.ManagedChannelImpl$LbHelperImpl.runSerialized(Ljava/lang/Runnable;)V (ManagedChannelImpl.java:710)  \r\n    #19 io.grpc.internal.ManagedChannelImpl$NameResolverListenerImpl.onAddresses(Ljava/util/List;Lio/grpc/Attributes;)V (ManagedChannelImpl.java:759)  \r\n    #20 io.grpc.internal.DnsNameResolver$1.run()V (DnsNameResolver.java:176)  \r\n    #21 java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V (ThreadPoolExecutor.java:1142)  \r\n    #22 java.util.concurrent.ThreadPoolExecutor$Worker.run()V (ThreadPoolExecutor.java:617)  \r\n    #23 java.lang.Thread.run()V (Thread.java:745)  \r\n    #24 (Generated Stub)  \r\n\r\n  Previous write of size 8 at 0x7fd6d9ff3608 by thread T42:\r\n    #0 io.netty.channel.DefaultChannelPipeline.estimatorHandle()Lio/netty/channel/MessageSizeEstimator$Handle; (DefaultChannelPipeline.java:101)  \r\n    #1 io.netty.channel.AbstractChannel$AbstractUnsafe.write(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V (AbstractChannel.java:800)  \r\n    #2 io.netty.channel.DefaultChannelPipeline$HeadContext.write(Lio/netty/channel/ChannelHandlerContext;Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V (DefaultChannelPipeline.java:1291)  \r\n    #3 io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V (AbstractChannelHandlerContext.java:738)  \r\n    #4 io.netty.channel.AbstractChannelHandlerContext.invokeWrite(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)V (AbstractChannelHandlerContext.java:730)  \r\n    #5 io.netty.channel.AbstractChannelHandlerContext.write(Ljava/lang/Object;ZLio/netty/channel/ChannelPromise;)V (AbstractChannelHandlerContext.java:816)  \r\n    #6 io.netty.channel.AbstractChannelHandlerContext.write(Ljava/lang/Object;Lio/netty/channel/ChannelPromise;)Lio/netty/channel/ChannelFuture; (AbstractChannelHandlerContext.java:723)  \r\n    #7 io.netty.channel.AbstractChannelHandlerContext.write(Ljava/lang/Object;)Lio/netty/channel/ChannelFuture; (AbstractChannelHandlerContext.java:704)  \r\n    #8 io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.sendPreface(Lio/netty/channel/ChannelHandlerContext;)V (Http2ConnectionHandler.java:339)  \r\n    #9 io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.channelActive(Lio/netty/channel/ChannelHandlerContext;)V (Http2ConnectionHandler.java:234)  \r\n    #10 io.netty.handler.codec.http2.Http2ConnectionHandler.channelActive(Lio/netty/channel/ChannelHandlerContext;)V (Http2ConnectionHandler.java:383)  \r\n    #11 io.grpc.netty.AbstractNettyHandler.channelActive(Lio/netty/channel/ChannelHandlerContext;)V (AbstractNettyHandler.java:74)  \r\n    #12 io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive()V (AbstractChannelHandlerContext.java:213)  \r\n    #13 io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(Lio/netty/channel/AbstractChannelHandlerContext;)V (AbstractChannelHandlerContext.java:199)  \r\n    #14 io.netty.channel.AbstractChannelHandlerContext.fireChannelActive()Lio/netty/channel/ChannelHandlerContext; (AbstractChannelHandlerContext.java:192)  \r\n    #15 io.netty.channel.DefaultChannelPipeline$HeadContext.channelActive(Lio/netty/channel/ChannelHandlerContext;)V (DefaultChannelPipeline.java:1322)  \r\n    #16 io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive()V (AbstractChannelHandlerContext.java:213)  \r\n    #17 io.netty.channel.AbstractChannelHandlerContext.invokeChannelActive(Lio/netty/channel/AbstractChannelHandlerContext;)V (AbstractChannelHandlerContext.java:199)  \r\n    #18 io.netty.channel.DefaultChannelPipeline.fireChannelActive()Lio/netty/channel/ChannelPipeline; (DefaultChannelPipeline.java:902)  \r\n    #19 io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(Lio/netty/channel/ChannelPromise;Z)V (AbstractNioChannel.java:311)  \r\n    #20 io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect()V (AbstractNioChannel.java:341)  \r\n    #21 io.netty.channel.nio.NioEventLoop.processSelectedKey(Ljava/nio/channels/SelectionKey;Lio/netty/channel/nio/AbstractNioChannel;)V (NioEventLoop.java:632)  \r\n    #22 io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized()V (NioEventLoop.java:579)  \r\n    #23 io.netty.channel.nio.NioEventLoop.processSelectedKeys()V (NioEventLoop.java:496)  \r\n    #24 io.netty.channel.nio.NioEventLoop.run()V (NioEventLoop.java:458)  \r\n    #25 io.netty.util.concurrent.SingleThreadEventExecutor$5.run()V (SingleThreadEventExecutor.java:858)  \r\n    #26 io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run()V (DefaultThreadFactory.java:138)  \r\n    #27 java.lang.Thread.run()V (Thread.java:745)  \r\n    #28 (Generated Stub)  \r\n```", "url": "https://github.com/grpc/grpc-java/issues/3244", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2017-07-15 01:54:24", "closed": "2017-07-27 19:06:20", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "Data race in TestServiceImpl", "body": "```\r\nWARNING: ThreadSanitizer: data race (pid=982210)\r\n  Read of size 8 at 0x7fd444897628 by thread T36:\r\n    #0 io.grpc.internal.MessageFramer.close()V (MessageFramer.java:305)  \r\n    #1 io.grpc.internal.AbstractStream.endOfMessages()V (AbstractStream.java:68)  \r\n    #2 io.grpc.internal.AbstractServerStream.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (AbstractServerStream.java:129)  \r\n    #3 io.grpc.internal.ServerCallImpl.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ServerCallImpl.java:173)  \r\n    #4 io.grpc.PartialForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (PartialForwardingServerCall.java:46)  \r\n    #5 io.grpc.ForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:22)  \r\n    #6 io.grpc.ForwardingServerCall$SimpleForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:39)  \r\n    #7 io.grpc.testing.integration.TestServiceImpl$6$1.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (TestServiceImpl.java:579)  \r\n    #8 io.grpc.PartialForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (PartialForwardingServerCall.java:46)  \r\n    #9 io.grpc.ForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:22)  \r\n    #10 io.grpc.ForwardingServerCall$SimpleForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:39)  \r\n    #11 io.grpc.testing.integration.TestServiceImpl$5$1.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (TestServiceImpl.java:552)  \r\n    #12 io.grpc.PartialForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (PartialForwardingServerCall.java:46)  \r\n    #13 io.grpc.ForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:22)  \r\n    #14 io.grpc.ForwardingServerCall$SimpleForwardingServerCall.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (ForwardingServerCall.java:39)  \r\n    #15 io.grpc.testing.integration.TestServiceImpl$4$1.close(Lio/grpc/Status;Lio/grpc/Metadata;)V (TestServiceImpl.java:525)  \r\n    #16 io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onError(Ljava/lang/Throwable;)V (ServerCalls.java:302)  \r\n    #17 io.grpc.testing.integration.TestServiceImpl$2.onError(Ljava/lang/Throwable;)V (TestServiceImpl.java:212)  \r\n    #18 io.grpc.stub.ServerCalls$2$1.onCancel()V (ServerCalls.java:233)  \r\n    #19 io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.closed(Lio/grpc/Status;)V (ServerCallImpl.java:280)  \r\n    #20 io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$3.runInContext()V (ServerImpl.java:613)  \r\n    #21 io.grpc.internal.ContextRunnable.run()V (ContextRunnable.java:37)  \r\n    #22 io.grpc.internal.SerializingExecutor.run()V (SerializingExecutor.java:102)  \r\n    #23 java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V (ThreadPoolExecutor.java:1142)  \r\n    #24 java.util.concurrent.ThreadPoolExecutor$Worker.run()V (ThreadPoolExecutor.java:617)  \r\n    #25 java.lang.Thread.run()V (Thread.java:745)  \r\n    #26 (Generated Stub)  \r\n\r\n  Previous write of size 8 at 0x7fd444897628 by thread T38 (mutexes: write M173247660336208224):\r\n    #0 io.grpc.internal.MessageFramer.commitToSink(ZZ)V (MessageFramer.java:331)  \r\n    #1 io.grpc.internal.MessageFramer.flush()V (MessageFramer.java:282)  \r\n    #2 io.grpc.internal.AbstractStream.flush()V (AbstractStream.java:59)  \r\n    #3 io.grpc.internal.ServerCallImpl.sendMessage(Ljava/lang/Object;)V (ServerCallImpl.java:134)  \r\n    #4 io.grpc.ForwardingServerCall.sendMessage(Ljava/lang/Object;)V (ForwardingServerCall.java:32)  \r\n    #5 io.grpc.ForwardingServerCall.sendMessage(Ljava/lang/Object;)V (ForwardingServerCall.java:32)  \r\n    #6 io.grpc.ForwardingServerCall.sendMessage(Ljava/lang/Object;)V (ForwardingServerCall.java:32)  \r\n    #7 io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onNext(Ljava/lang/Object;)V (ServerCalls.java:293)  \r\n    #8 io.grpc.testing.integration.TestServiceImpl$ResponseDispatcher.dispatchChunk()V (TestServiceImpl.java:338)  \r\n    #9 io.grpc.testing.integration.TestServiceImpl$ResponseDispatcher.access$000(Lio/grpc/testing/integration/TestServiceImpl$ResponseDispatcher;)V (TestServiceImpl.java:249)  \r\n    #10 io.grpc.testing.integration.TestServiceImpl$ResponseDispatcher$1.run()V (TestServiceImpl.java:263)  \r\n    #11 io.grpc.internal.LogExceptionRunnable.run()V (LogExceptionRunnable.java:41)  \r\n    #12 java.util.concurrent.Executors$RunnableAdapter.call()Ljava/lang/Object; (Executors.java:511)  \r\n    #13 java.util.concurrent.FutureTask.run()V (FutureTask.java:266)  \r\n    #14 java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(Ljava/util/concurrent/ScheduledThreadPoolExecutor$ScheduledFutureTask;)V (ScheduledThreadPoolExecutor.java:180)  \r\n    #15 java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run()V (ScheduledThreadPoolExecutor.java:295)  \r\n    #16 java.util.concurrent.ThreadPoolExecutor.runWorker(Ljava/util/concurrent/ThreadPoolExecutor$Worker;)V (ThreadPoolExecutor.java:1142)  \r\n    #17 java.util.concurrent.ThreadPoolExecutor$Worker.run()V (ThreadPoolExecutor.java:617)  \r\n    #18 java.lang.Thread.run()V (Thread.java:745)  \r\n    #19 (Generated Stub)  \r\n```", "url": "https://github.com/grpc/grpc-java/issues/3207", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2017-07-08 02:23:48", "closed": "2018-04-06 21:53:55", "commits": {}, "ttf": 272.0002777777778, "commitsDetails": []}, {"title": "Memory leak when using Jetty ALPN SSL provider", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n1.4.0\r\n\r\n### What JVM are you using (`java -version`)?\r\nopenjdk version \"1.8.0_131\"\r\nOpenJDK Runtime Environment (build 1.8.0_131-8u131-b11-1-b11)\r\nOpenJDK 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\n### What did you do?\r\nWe have observed a memory leak when using the Jetty ALPN SSL provider. This occurs when using a name resolver that returns multiple results, one of which fails to connect (in practice this was because of faulty firewall rules, but for the sake of testing it can be reproduced by just using a bad port number). I believe the managed channel will keep trying to open up a subchannel, but the callbacks in the ALPN.objects map aren't getting cleared.\r\n\r\nI've created a minimal reproducer for this here: https://github.com/JackOfMostTrades/memory-leak-reproducer\r\n\r\nWhen left running overnight, the size of the map grew to over 2300 objects (since there's only ever one actual connection in this test, that's pretty clearly an issue).\r\n\r\nThis *may* be a bug in the underlying netty channel rather than gRPC's managed channel where it's not properly cleaning up its ALPN callback when this type of error occurs, but I didn't dig deep enough into the issue to be able to tell.", "url": "https://github.com/grpc/grpc-java/issues/3080", "user": "JackOfMostTrades", "labels": ["bug"], "created": "2017-06-08 17:50:56", "closed": "2018-11-07 23:49:19", "commits": {}, "ttf": 517.0002777777778, "commitsDetails": []}, {"title": "OverrideAuthorityNameResolverFactory fails to forward NameResolver.refresh()", "body": "It seems we should create a `ForwardingNameResolver` and use it in `OverrideAuthorityNameResolverFactory`. Let's keep the new forwarding class internal for now.", "url": "https://github.com/grpc/grpc-java/issues/3061", "user": "ejona86", "labels": ["bug"], "created": "2017-06-05 19:57:45", "closed": "2017-06-17 01:54:48", "commits": {"726c23b7dadd52e5ce0047874a1366b40f3dd0f5": {"commitGHEventType": "referenced", "commitUser": "zpencer"}}, "ttf": 11.000277777777777, "commitsDetails": [{"commitHash": "726c23b7dadd52e5ce0047874a1366b40f3dd0f5", "commitGHEventType": "referenced", "commitUser": "zpencer", "commitParents": ["d6d3a53d2543ebcbdccfa71e15d24335a57d4084"], "nameRev": "726c23b7dadd52e5ce0047874a1366b40f3dd0f5 tags/v1.5.0~45", "commitMessage": "core: OverrideAuthorityNameResolverFactory should forward refresh() (#3061)\n\nThe current implementation has a bug where certain methods are not forwarded to the delegate.\r\n\r\nThis is essentially the same as e4f1f39 which was merged to the v1.4.x branch. This PR uses the new license header.\r\n\r\nFixes #3061", "commitDateTime": "2017-06-16 18:54:47", "authoredDateTime": "2017-06-16 18:54:47", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java", "insertions": 15, "deletions": 1, "lines": 16}, {"filePath": "core/src/main/java/io/grpc/internal/ForwardingNameResolver.java", "insertions": 53, "deletions": 0, "lines": 53}, {"filePath": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "insertions": 1, "deletions": 6, "lines": 7}, {"filePath": "core/src/main/java/io/grpc/internal/OverrideAuthorityNameResolverFactory.java", "insertions": 1, "deletions": 11, "lines": 12}, {"filePath": "core/src/test/java/io/grpc/internal/AbstractManagedChannelImplBuilderTest.java", "insertions": 15, "deletions": 32, "lines": 47}, {"filePath": "core/src/test/java/io/grpc/internal/OverrideAuthorityNameResolverTest.java", "insertions": 79, "deletions": 0, "lines": 79}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractManagedChannelImplBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilder", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilder.getNameResolverFactory()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ForwardingNameResolver.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ForwardingNameResolver", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ManagedChannelImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImpl", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 3}]}, {"spoonFilePath": "OverrideAuthorityNameResolverFactory.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.OverrideAuthorityNameResolverFactory.newNameResolver(java.net.URI,io.grpc.Attributes)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.OverrideAuthorityNameResolverFactory.newNameResolver(java.net.URI,io.grpc.Attributes).1", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.OverrideAuthorityNameResolverFactory.newNameResolver(java.net.URI,io.grpc.Attributes).1.start(io.grpc.internal.Listener)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.OverrideAuthorityNameResolverFactory.newNameResolver(java.net.URI,io.grpc.Attributes).1.shutdown()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "AbstractManagedChannelImplBuilderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilderTest.overrideAuthorityNameResolverWrapsDelegateTest()", "TOT": 13, "UPD": 5, "INS": 0, "MOV": 7, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilderTest.overrideAuthorityNameResolverWontWrapNullTest()", "TOT": 9, "UPD": 5, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilderTest.nameResolverFactory_default()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilderTest.nameResolverFactory_normal()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilderTest.nameResolverFactory_null()", "TOT": 6, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilderTest.overrideAuthority_getNameResolverFactory()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OverrideAuthorityNameResolverTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.OverrideAuthorityNameResolverTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["726c23b7dadd52e5ce0047874a1366b40f3dd0f5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 70, "deletions": 18, "lines": 88, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 14, "UPD": 2, "INS": 5, "MOV": 1, "DEL": 6, "spoonFilesChanged": 4, "spoonMethodsChanged": 8}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.OverrideAuthorityNameResolverFactory.newNameResolver(java.net.URI,io.grpc.Attributes).1.shutdown()", "io.grpc.internal.OverrideAuthorityNameResolverFactory.newNameResolver(java.net.URI,io.grpc.Attributes).1", "io.grpc.internal.OverrideAuthorityNameResolverFactory.newNameResolver(java.net.URI,io.grpc.Attributes)", "io.grpc.internal.ManagedChannelImpl", "io.grpc.internal.AbstractManagedChannelImplBuilder", "io.grpc.internal.OverrideAuthorityNameResolverFactory.newNameResolver(java.net.URI,io.grpc.Attributes).1.start(io.grpc.internal.Listener)", "io.grpc.internal.ForwardingNameResolver", "io.grpc.internal.AbstractManagedChannelImplBuilder.getNameResolverFactory()"]}, {"title": "OkHttp is incompatible with newer C-core binaries", "body": "As reported by grpc/grpc#11258. This is caused by grpc/proposal#19 and [a bug](https://github.com/grpc/grpc-java/blob/v1.3.0/okhttp/third_party/okhttp/java/io/grpc/okhttp/internal/framed/Http2.java#L304) in the OkHttp transport that doesn't ignore unknown settings frames (as required by the [HTTP/2 spec](http://httpwg.org/specs/rfc7540.html#rfc.section.6.5.2)).\r\n\r\nIt's unclear how this wasn't caught in the integration tests.", "url": "https://github.com/grpc/grpc-java/issues/3032", "user": "ejona86", "labels": ["P1", "bug", "usability"], "created": "2017-05-24 00:17:02", "closed": "2017-06-06 21:43:47", "commits": {}, "ttf": 13.000277777777777, "commitsDetails": []}, {"title": "Stop telling people Jetty ALPN has not been configured", "body": "If both OpenSsl (tcnative) and Jetty ALPN are unavailable then we end up failing with [\"Jetty ALPN/NPN has not been properly configured\"](https://github.com/grpc/grpc-java/blob/v1.3.0/netty/src/main/java/io/grpc/netty/GrpcSslContexts.java#L174). We should tell them to configure tcnative, and not encourage the use of Jetty ALPN.", "url": "https://github.com/grpc/grpc-java/issues/3025", "user": "ejona86", "labels": ["bug", "usability"], "created": "2017-05-19 17:46:22", "closed": "2017-11-07 21:06:56", "commits": {}, "ttf": 172.00027777777777, "commitsDetails": []}, {"title": "[Question] Catch exceptionCaught() event was fired, and it reached at the tail of the pipeline", "body": "### What version of gRPC are you using?\r\n1.2.0\r\n\r\n### What JVM are you using (`java -version`)?\r\njava version \"1.8.0_131\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_131-b11)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\r\n\r\n### What did you do?\r\nConnect to a Unix domain socket that is not existing anymore with the following:\r\n```java\r\nNettyChannelBuilder.forAddress(new DomainSocketAddress(\"/tmp/socket123.so\"))\r\n                    .eventLoopGroup(new EpollEventLoopGroup())\r\n                    .channelType(EpollDomainSocketChannel.class)\r\n                    .usePlaintext(true)\r\n                    .build();\r\n```\r\n\r\nThen those WARN will be produced in the output:\r\n```\r\nWARN  [epollEventLoopGroup-2-5] 2017-05-18 23:10:17,648  Slf4JLogger.java:151 - An exceptionCaught() event was fired, and it reached at the tail of the pipeline. \r\nIt usually means the last handler in the pipeline did not handle the exception.\r\ntest.io.netty.channel.AbstractChannel$AnnotatedConnectException: connect() failed: No such file or directory: /tmp/socket123.so\r\n```\r\n\r\nHow can we handle those exceptions or make them silent?\r\n\r\nMany thanks!\r\n", "url": "https://github.com/grpc/grpc-java/issues/3020", "user": "MarcMagnin", "labels": ["bug", "usability"], "created": "2017-05-18 22:09:59", "closed": "2017-09-19 17:59:54", "commits": {}, "ttf": 123.00027777777778, "commitsDetails": []}, {"title": "Duplicate headers causes c-core failure", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n1.3.0\r\n\r\n### What JVM are you using (`java -version`)?\r\n1.8.0_121\r\n\r\n### What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\nI made a server interceptor as follows:\r\n\r\n```\r\n    @Override\r\n    public <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(final ServerCall<ReqT, RespT> serverCall,\r\n                                                                 final Metadata headers,\r\n                                                                 final ServerCallHandler<ReqT, RespT> next) {\r\n        final Optional<String> targetAlias = resolveRedirectTarget();\r\n        if (!targetAlias.isPresent()) {\r\n            return next.startCall(serverCall, headers);\r\n        }\r\n\r\n        final ManagedChannel channel;\r\n        final ClientCall<ReqT, RespT> clientCall;\r\n        try {\r\n            channel = channelFactory.get(targetAlias.get());\r\n            clientCall = channel.newCall(serverCall.getMethodDescriptor(), CallOptions.DEFAULT);\r\n            clientCall.start(new ClientCall.Listener<RespT>() {\r\n                @Override\r\n                public void onHeaders(final Metadata headers) {\r\n                    // Issue is here\r\n                    serverCall.sendHeaders(headers);\r\n                }\r\n\r\n                @Override\r\n                public void onMessage(final RespT message) {\r\n                    serverCall.sendMessage(message);\r\n                }\r\n\r\n                @Override\r\n                public void onClose(final Status status, final Metadata trailers) {\r\n                    serverCall.close(status, trailers);\r\n                }\r\n\r\n                @Override\r\n                public void onReady() {\r\n                    serverCall.request(1);\r\n                }\r\n\r\n            }, headers);\r\n            clientCall.request(2);\r\n            serverCall.request(1);\r\n        } catch (final Exception ignored) {\r\n            return next.startCall(serverCall, headers);\r\n        }\r\n\r\n        return new ServerCall.Listener<ReqT>(){\r\n            public void onMessage(final ReqT message) {\r\n                clientCall.sendMessage(message);\r\n            }\r\n\r\n            public void onHalfClose() {\r\n                clientCall.halfClose();\r\n            }\r\n\r\n            public void onCancel() {\r\n                clientCall.cancel(\"Redirect call was cancelled upstream.\", null);\r\n            }\r\n\r\n             public void onReady() {\r\n                clientCall.request(1);\r\n            }\r\n        };\r\n    }\r\n```\r\n\r\n### What did you expect to see?\r\nA caller of this service to get a response that has been proxied through to a different backend target. \r\n\r\n### What did you see instead?\r\nThis works in Java, but not in c-core from the client side.  As a result of forwarding the proxy target response headers, there ends up being 2 entries for \"content-type\"  Java clients are okay with this, c based clients are not.  I'm not sure who is \"right\" here as the spec is ambiguous as to the desired behavior if there are multiple headers for the same key(and in this case, their values are identical as well).  My fix for now is to simply send a new Metadata() rather than forwarding headers, but this might lose some custom headers from the proxy target.  I also considered doing a headers.removeAll(GrpcUtil.CONTENT_TYPE/ENCODING_TYPE/ETC) but since those are in the internal package I didn't.  I'm wondering what your thoughts are on how I'm doing this.  Maybe there's even a trick where I could pull this off at a pure bytestream level so my proxy isn't parsing the bytes at all?\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/3017", "user": "jhspaybar", "labels": ["bug", "usability"], "created": "2017-05-18 15:17:15", "closed": "2017-09-14 22:26:37", "commits": {}, "ttf": 119.00027777777778, "commitsDetails": []}, {"title": "Netty caused \"onStreamAllocated was not called, but it seems the stream is active\"", "body": "Reported by https://groups.google.com/d/topic/grpc-io/gpapLCscalk/discussion\r\n\r\nSeen in grpc 1.3.0\r\n\r\n```\r\n22:42:37.609 |- WARN  i.n.u.c.DefaultPromise - An exception was thrown by io.grpc.netty.NettyClientStream$Sink$2.operationComplete()\r\njava.lang.IllegalStateException: onStreamAllocated was not called, but it seems the stream is active\r\n        at com.google.common.base.Preconditions.checkState(Preconditions.java:174)\r\n        at io.grpc.internal.AbstractStream2$TransportState.onSentBytes(AbstractStream2.java:287)\r\n        at io.grpc.netty.NettyClientStream$Sink$2.operationComplete(NettyClientStream.java:172)\r\n        at io.grpc.netty.NettyClientStream$Sink$2.operationComplete(NettyClientStream.java:166)\r\n        at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:507)\r\n        at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:481)\r\n        at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:420)\r\n        at io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:95)\r\n        at io.netty.channel.DefaultChannelPromise.setSuccess(DefaultChannelPromise.java:76)\r\n        at io.netty.channel.DefaultChannelPromise.setSuccess(DefaultChannelPromise.java:71)\r\n        at io.netty.handler.codec.http2.StreamBufferingEncoder$Frame.release(StreamBufferingEncoder.java:309)\r\n        at io.netty.handler.codec.http2.StreamBufferingEncoder$DataFrame.release(StreamBufferingEncoder.java:357)\r\n        at io.netty.handler.codec.http2.StreamBufferingEncoder$PendingStream.close(StreamBufferingEncoder.java:292)\r\n        at io.netty.handler.codec.http2.StreamBufferingEncoder.writeRstStream(StreamBufferingEncoder.java:184)\r\n        at io.grpc.netty.NettyClientHandler.cancelStream(NettyClientHandler.java:470)\r\n        at io.grpc.netty.NettyClientHandler.write(NettyClientHandler.java:244)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeWrite0(AbstractChannelHandlerContext.java:739)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeWrite(AbstractChannelHandlerContext.java:731)\r\n        at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:817)\r\n        at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:724)\r\n        at io.netty.channel.DefaultChannelPipeline.write(DefaultChannelPipeline.java:1022)\r\n        at io.netty.channel.AbstractChannel.write(AbstractChannel.java:291)\r\n        at io.grpc.netty.WriteQueue.flush(WriteQueue.java:127)\r\n        at io.grpc.netty.WriteQueue.access$000(WriteQueue.java:47)\r\n        at io.grpc.netty.WriteQueue$1.run(WriteQueue.java:59)\r\n        at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403)\r\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:445)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n        at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```", "url": "https://github.com/grpc/grpc-java/issues/3007", "user": "ejona86", "labels": ["bug", "usability"], "created": "2017-05-15 23:29:45", "closed": "2017-08-11 14:30:55", "commits": {}, "ttf": 87.00027777777778, "commitsDetails": []}, {"title": "grpc-all brings in both protobuf-java and protobuf-lite", "body": "```\r\n    <dependency>\r\n      <groupId>io.grpc</groupId>\r\n      <artifactId>grpc-protobuf</artifactId>\r\n      <version>1.2.0</version>\r\n      <scope>compile</scope>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>io.grpc</groupId>\r\n      <artifactId>grpc-protobuf-lite</artifactId>\r\n      <version>1.2.0</version>\r\n      <scope>compile</scope>\r\n    </dependency>\r\n```\r\n\r\ngrpc-protobuf depends on protobuf-java and grpc-protobuf-lite depends on protobuf-lite. Although grpc-protobuf depends on grpc-protobuf-lite and excludes the protobuf-lite dependency, that does nothing for grpc-all which depends directly on both.\r\n\r\nWe should probably remove the explicit dependency of grpc-protobuf-lite from grpc-all, or add in an exclusion for protobuf-lite.", "url": "https://github.com/grpc/grpc-java/issues/2985", "user": "ejona86", "labels": ["bug", "usability"], "created": "2017-05-08 19:03:55", "closed": "2017-06-29 17:29:12", "commits": {"8f75f8ee7ca6c4c4a0c7a053e9923dcdee95e87e": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 51.000277777777775, "commitsDetails": [{"commitHash": "8f75f8ee7ca6c4c4a0c7a053e9923dcdee95e87e", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["45085c3ce40f37c39e2fc630f2d06f052064ee93"], "nameRev": "8f75f8ee7ca6c4c4a0c7a053e9923dcdee95e87e tags/v1.5.0~22", "commitMessage": "all: Don't depend directly on grpc-protobuf-lite\n\ngrpc-protobuf-lite brings in protobuf-lite as a dependency, which has\ndifferent versions of classes in protobuf. This causes duplicate classes\non the class path, which easily breaks things. Since lite the lite\nruntime/codegen is incompatible with full protobuf, it makes sense to\nonly depend on one of the two.\n\ngrpc-protobuf actually already has a dependency on grpc-protobuf-lite,\nbut excludes the protobuf-lite dependency, making the dep safe. But this\nis more of an implementation detail.\n\nWe only change deps so that JavaDoc, code coverage, and similar will\nstill include grpc-protobuf-lite.\n\nFixes #2985\n", "commitDateTime": "2017-06-29 10:29:11", "authoredDateTime": "2017-06-29 09:52:54", "commitGitStats": [{"filePath": "all/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8f75f8ee7ca6c4c4a0c7a053e9923dcdee95e87e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["all"]}, {"title": "Fail to to enable server-side keepAlive on 1.3.0 RELEASE", "body": "### What version of gRPC are you using?\r\nGRPC 1.3.0\r\n\r\n### What JVM are you using (`java -version`)?\r\n1.8.0_112\r\n\r\n### What did you do?\r\nTry to enable server-side keepAlive(added in gprc-java 1.3) but the feature didn't work properly.\r\nAfter setting server-side keepAlive to 180s and keepAliveTimeout to 30s. what i expect is the server will sending a keepAlive to client if the connection is idle(didn't sent any data during 180s). however. i did't see such ping packet on network. \r\n\r\nDebugging the code(io.grpc.internal.KeepAliveManager), it seems the `onTransportActive`/`onTransportIdle` methods didn't be called by NettyServerHandler.  Unlike the NettyClientHandler, the keepAliveManager can't be triggered by stream's created/remove.\r\n\r\nOnly `onDataReceived` is called if data received by NettyServerHandler. \r\n![image](https://cloud.githubusercontent.com/assets/2533748/25769933/895356b2-3259-11e7-90c3-84a064ad656c.png)\r\n\r\nSo, simply if the client didn't sent any data, the server wouldn't sent back any ping.\r\n\r\nIn this case, another way to enable server-side KeepAlive is set `keepAliveDuringTransportIdle(permitKeepAliveWithoutCalls)` to true, so when the `io.grpc.internal.KeepAliveManager#onTransportStarted` is called, it will schedule a ping future immediately. \r\n\r\nHowever, the call of `io.grpc.internal.KeepAliveManager#onTransportStarted` didn't make effective too!\r\nthe only caller on server is `io.grpc.netty.NettyServerHandler#handleProtocolNegotiationCompleted`, which didn't invoke `onTransportStarted` because the `keepAliveManager` has not been initialized yet(the keepAliveManager always null during this method called).\r\n\r\n![image](https://cloud.githubusercontent.com/assets/2533748/25769901/78056e0a-3258-11e7-9a20-47baea059d6c.png)\r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/2982", "user": "bobwenx", "labels": ["bug", "usability"], "created": "2017-05-06 04:52:57", "closed": "2017-05-12 16:05:22", "commits": {"28ad3ba335f8212a58f73965e30c897cda73cb69": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "c35a85238597e785ed5ccdfd601236844d3db6a9": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "28ad3ba335f8212a58f73965e30c897cda73cb69", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["870dd50eb2918ec8972bc7fcdcc1f7d4111d220a"], "nameRev": "28ad3ba335f8212a58f73965e30c897cda73cb69 tags/v1.4.0~19", "commitMessage": "netty: fix server keepalive not initialized bug\n\nfixes #2982 ", "commitDateTime": "2017-05-12 09:05:21", "authoredDateTime": "2017-05-12 09:05:21", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 2, "deletions": 4, "lines": 6}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java", "insertions": 0, "deletions": 8, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandler.handleProtocolNegotiationCompleted(io.grpc.Attributes)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyServerHandler.FrameListener.onPingAckRead(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "NettyServerHandlerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.keepAliveManagerStarted()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "c35a85238597e785ed5ccdfd601236844d3db6a9", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["c03fb61a11e5cf0405fca9f6fe6cd05d4413a7f7"], "nameRev": "c35a85238597e785ed5ccdfd601236844d3db6a9 tags/v1.3.1~4", "commitMessage": "netty: fix server keepalive not initialized bug\n\nfixes #2982", "commitDateTime": "2017-05-12 10:37:50", "authoredDateTime": "2017-05-12 10:37:50", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 2, "deletions": 4, "lines": 6}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java", "insertions": 0, "deletions": 7, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandler.handleProtocolNegotiationCompleted(io.grpc.Attributes)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyServerHandler.FrameListener.onPingAckRead(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "NettyServerHandlerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerHandlerTest.keepAliveManagerStarted()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["28ad3ba335f8212a58f73965e30c897cda73cb69"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 4, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.NettyServerHandler.FrameListener.onPingAckRead(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf)", "io.grpc.netty.NettyServerHandler.handleProtocolNegotiationCompleted(io.grpc.Attributes)"]}, {"title": "FutureStub hangs when wrong netty version is used", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n1.3.0\r\n\r\n### What JVM are you using (`java -version`)?\r\nnetty4.version\r\n\r\n### What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\n\r\n1. Accidentally use netty-codec-http2 4.1.9.Final in your pom\r\n2. Create a future stub\r\n3. Call `stub.someOperation().get()`\r\n\r\n### What did you expect to see?\r\n* The call should fail from the underlying `ClassNotFoundException`\r\n\r\n### What did you see instead?\r\n* A log message is printed to the console indicating the `ClassNotFoundException`\r\n* The call to `.get()` blocks indefinitely because the underlying future never returns\r\n* If a timeout is used when calling `.get()`, the request always times out\r\n\r\nThis problem was especially hard to diagnose because our logger is configured to exclude log messages from libraries (legacy code), so the `ClassNotFoundException` was never surfaced.\r\n\r\n### Findings\r\n* `ChannelExecutor.drain()` (line 89) eats all exceptions thrown when processing the outbound task queue when `DelayedClientTransport` switches from `DelayedStream` to `NettyClientStream` in `DelayedClientTransport.newStream()`.\r\n* `GrpcHttp2HeadersDecoder.<init>` fails with a `ClassNotFoundException` when trying to load `io.netty.handler.codec.http2.internal.hpack.Decoder`.\r\n* Since the stream switch is itself is the task that fails, `DelayedClientTransport` buffers outbound tasks indefinitely, causing the request to hang.\r\n\r\n### Possible Mitigations\r\n1. Propagate exceptions from `ChannelExecutor.drain()` in a \"CompositeException\" that aggregates all exceptions encountered. This will cause the client to explode, rather than logging and hoping someone is watching.\r\n2. Fail conspicuously when starting gRPC with an incompatible netty version.\r\n", "url": "https://github.com/grpc/grpc-java/issues/2976", "user": "rmichela", "labels": ["bug"], "created": "2017-05-04 17:22:29", "closed": "2018-02-22 17:27:36", "commits": {}, "ttf": 294.0002777777778, "commitsDetails": []}, {"title": "Audit/Fix graceful client shutdown in Netty", "body": "Based on https://groups.google.com/d/topic/grpc-io/6e0GFRSWit8/discussion and the code, it seems that `channel.shutdown()` when using Netty transport kills open streams.\r\n\r\n[gracefulClose()](https://github.com/grpc/grpc-java/blob/v1.2.0/netty/src/main/java/io/grpc/netty/NettyClientHandler.java#L536) calls close() [which waits for `gracefulShutdownTimeoutMillis`](https://github.com/netty/netty/blob/netty-4.1.8.Final/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java#L445). It seems we should either set the grace time to infinity or delay calling close until after all the streams are closed.\r\n\r\nWe need to investigate why [`AbstractTransportTest.openStreamPreventsTermination()`](https://github.com/grpc/grpc-java/blob/v1.2.0/testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java#L301) failed to notice this.", "url": "https://github.com/grpc/grpc-java/issues/2907", "user": "ejona86", "labels": ["bug", "netty", "usability"], "created": "2017-04-13 17:35:55", "closed": "2017-08-24 17:16:13", "commits": {}, "ttf": 132.00027777777777, "commitsDetails": []}, {"title": "Rare race condition in Client", "body": "While more prominent when using compression, this race occurs without it as well.  The typical race looks something like:\r\n\r\n1.  Client starts and RPC\r\n2.  The transport to the server is not yet available, so a DelayedClientTransport is used.\r\n3.  The server handles the RPC and sends back headers and a compressed message.\r\n4.  The client sees there are headers, and begins executing the queued stream callbacks, **on the channel executor threads** instead of the transport thread\r\n5.  The client sees the Data frame, and tries to decompress it on the network thread.  *This fails since the headers from 4 have not yet been processed.\r\n6.  The stream has already failed, but the queued callback for onHeaders() is finally executed on the app thread.  \r\n\r\nThis is the root cause of #2157.  As mentioned, this isn't just for compression.  ClientInterceptors will see headers *after* data has been received.   The solution (temporary?) seems to be to move OkHttp to used AbstractClientStream2 in #2821, and then move decompression from ClientCallImpl to the stream.  That will fix the decompression, but not interceptors.", "url": "https://github.com/grpc/grpc-java/issues/2865", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2017-03-30 20:31:12", "closed": "2017-06-30 01:12:53", "commits": {"a3ac64a883a045a7863fe9b8da03856f75b3a69e": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 91.00027777777778, "commitsDetails": [{"commitHash": "a3ac64a883a045a7863fe9b8da03856f75b3a69e", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["4e31ccba4c42650efaf99f1a9d3cf5e02d482b9e"], "nameRev": "a3ac64a883a045a7863fe9b8da03856f75b3a69e tags/v1.5.0~17", "commitMessage": "core: Move client-side decompressor selection to stream\n\nPreviously ClientCallImpl's stream listener would call\r\nstream.setDecompressor(), but this has always been a bit strange as the\r\nonly case where the call listener calls the stream and forms a bit of a\r\nloop. It also turned out to be racy in the presence of\r\nDelayedClientStream since DelayedClientStream does not guarantee that\r\nthe listener has processed before returning.\r\n\r\nNow we let the stream handle decompressor selection itself. Compressor\r\nselection on client and server and decompressor selection on server\r\nremain unchanged. Nothing prevents them from being changed, other than\r\nit is currently unnecessary to fix the severe compressionTest flake.\r\n\r\nFixes #2865\r\nFixes #2157", "commitDateTime": "2017-06-29 18:12:53", "authoredDateTime": "2017-06-29 18:12:53", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "core/src/main/java/io/grpc/internal/AbstractClientStream.java", "insertions": 30, "deletions": 0, "lines": 30}, {"filePath": "core/src/main/java/io/grpc/internal/AbstractServerStream.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "core/src/main/java/io/grpc/internal/AbstractStream.java", "insertions": 1, "deletions": 6, "lines": 7}, {"filePath": "core/src/main/java/io/grpc/internal/ClientCallImpl.java", "insertions": 1, "deletions": 13, "lines": 14}, {"filePath": "core/src/main/java/io/grpc/internal/ClientStream.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "core/src/main/java/io/grpc/internal/DelayedStream.java", "insertions": 9, "deletions": 11, "lines": 20}, {"filePath": "core/src/main/java/io/grpc/internal/NoopClientStream.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "core/src/main/java/io/grpc/internal/ServerStream.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "core/src/main/java/io/grpc/internal/Stream.java", "insertions": 0, "deletions": 8, "lines": 8}, {"filePath": "core/src/test/java/io/grpc/internal/DelayedStreamTest.java", "insertions": 3, "deletions": 8, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InProcessTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.inprocess.InProcessTransport.InProcessStream.InProcessClientStream.setDecompressor(io.grpc.Decompressor)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractClientStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractClientStream.setDecompressorRegistry(io.grpc.DecompressorRegistry)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractClientStream.TransportState", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractClientStream.TransportState.setDecompressorRegistry(io.grpc.DecompressorRegistry)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractClientStream.TransportState.inboundHeadersReceived(io.grpc.Metadata)", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractServerStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractServerStream.setDecompressor(io.grpc.Decompressor)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractStream.TransportState.setDecompressor(io.grpc.Decompressor)", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractStream.setDecompressor(io.grpc.Decompressor)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ClientCallImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ClientCallImpl.ClientStreamListenerImpl.headersRead(io.grpc.Metadata)", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 3}, {"spoonMethodName": "io.grpc.internal.ClientCallImpl.start(io.grpc.internal.Listener,io.grpc.Metadata)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ClientStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.setDecompressorRegistry(io.grpc.DecompressorRegistry)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DelayedStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedStream.setDecompressor(io.grpc.Decompressor)", "TOT": 8, "UPD": 7, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.DelayedStream.setMessageCompression(boolean)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.DelayedStream.setMessageCompression(boolean).11", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NoopClientStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.NoopClientStream.setDecompressor(io.grpc.Decompressor)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ServerStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.setDecompressor(io.grpc.Decompressor)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Stream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.setDecompressor(io.grpc.Decompressor)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "DelayedStreamTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedStreamTest.setStream_sendsAllMessages()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.DelayedStreamTest.setDecompressor_beforeSetStream()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Netty improperly delays sending SETTINGS ACK", "body": "As seen in grpc/grpc#9956:\r\n\r\n... it appears Java/Netty is doing the wrong thing. `encoder.remoteSettings()` [is called before](https://github.com/netty/netty/blob/netty-4.1.8.Final/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionDecoder.java#L452,L455) `writeSettingsAck()`. `encoder.remoteSettings()` [calls](https://github.com/netty/netty/blob/netty-4.1.8.Final/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2ConnectionEncoder.java#L113) `flowController().initialWindowSize()` which results in [the flow controller writing pending bytes](https://github.com/netty/netty/blob/netty-4.1.8.Final/codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2RemoteFlowController.java#L659).\r\n\r\nTwo immediate changes should probably be made: 1) Send the settings ack immediately before processing the settings frame in the decoder. Any failure in processing would probably result in the connection being closed, so this doesn't seem dangerous. 2) Stop triggering `writePendingBytes()` in the flow controller and instead [wait for the `flush()` like normal](https://github.com/netty/netty/blob/netty-4.1.8.Final/codec-http2/src/main/java/io/netty/handler/codec/http2/Http2ConnectionHandler.java#L166).", "url": "https://github.com/grpc/grpc-java/issues/2801", "user": "ejona86", "labels": ["bug"], "created": "2017-03-07 20:03:26", "closed": "2017-03-14 21:21:57", "commits": {"2cb6ecc3b31c63be503e63d03a27bda1ac3ecb85": {"commitGHEventType": "closed", "commitUser": "ejona86"}, "4091130196e3cde8fe5fc43ed834a585a4fbeb78": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "b4277d5cae8f0a2aa4496e2e49e95e42889fcd83": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "2cb6ecc3b31c63be503e63d03a27bda1ac3ecb85", "commitGHEventType": "closed", "commitUser": "ejona86", "commitParents": ["9ef07916f716a19a534513eed8822d3eee9b8d33"], "nameRev": "2cb6ecc3b31c63be503e63d03a27bda1ac3ecb85 tags/v1.3.0~66", "commitMessage": "netty: Backport SETTINGS ACK sequencing fix\n\nThis fix was made in netty/netty#6521. Fixes #2801\n", "commitDateTime": "2017-03-14 14:21:51", "authoredDateTime": "2017-03-14 14:08:03", "commitGitStats": [{"filePath": "netty/third_party/netty/java/io/grpc/netty/FixedHttp2ConnectionDecoder.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FixedHttp2ConnectionDecoder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.FixedHttp2ConnectionDecoder.FrameReadListener.onSettingsRead(io.netty.channel.ChannelHandlerContext,io.grpc.netty.Http2Settings)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "4091130196e3cde8fe5fc43ed834a585a4fbeb78", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["1003c80771f2586b3e5b966457e6911ca58323a2"], "nameRev": "4091130196e3cde8fe5fc43ed834a585a4fbeb78 tags/v1.2.0~2", "commitMessage": "netty: Backport SETTINGS ACK sequencing fix\n\nThis fix was made in netty/netty#6521. Fixes #2801\n", "commitDateTime": "2017-03-14 17:05:00", "authoredDateTime": "2017-03-14 14:08:03", "commitGitStats": [{"filePath": "netty/third_party/netty/java/io/grpc/netty/FixedHttp2ConnectionDecoder.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FixedHttp2ConnectionDecoder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.FixedHttp2ConnectionDecoder.FrameReadListener.onSettingsRead(io.netty.channel.ChannelHandlerContext,io.grpc.netty.Http2Settings)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "b4277d5cae8f0a2aa4496e2e49e95e42889fcd83", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["64a024f5f661f7dd41d8f82b8dd3ea6cbd940064"], "nameRev": "b4277d5cae8f0a2aa4496e2e49e95e42889fcd83 remotes/origin/v1.1.x~8", "commitMessage": "netty: Backport SETTINGS ACK sequencing fix\n\nThis fix was made in netty/netty#6521. Fixes #2801\n", "commitDateTime": "2017-03-14 17:05:16", "authoredDateTime": "2017-03-14 14:08:03", "commitGitStats": [{"filePath": "netty/third_party/netty/java/io/grpc/netty/FixedHttp2ConnectionDecoder.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FixedHttp2ConnectionDecoder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.FixedHttp2ConnectionDecoder.FrameReadListener.onSettingsRead(io.netty.channel.ChannelHandlerContext,io.grpc.netty.Http2Settings)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Inconsistent INTERNAL errors for message-less RPCs", "body": "### What version of gRPC are you using?\r\n1.0.3\r\n\r\n### What JVM are you using (`java -version`)?\r\njava version \"1.8.0_121\"\r\n\r\n### What did you do?\r\nCreate a unary rpc, on the server have it immediately call responseObserver.onCompleted() with no previous onNext().  With a java gRPC client call this rpc with blocking and future stubs, they'll both throw an INTERNAL error from here https://github.com/grpc/grpc-java/blob/89bc2cd3b23d583387d104bb1ca6ec86ad9816be/stub/src/main/java/io/grpc/stub/ClientCalls.java#L434 .  Using the async client stubs will work(no onNext, just onCompleted with trailers).\r\n\r\nIf I switched to a streaming response and called onComplete() on with no previous onNext() the future stub is no longer available(expected) and now the Iterable<Response> for the blocking stub returns false for hasNext() as expected, but doesn't break.  The async stub continues working as before.\r\n\r\n### What did you expect to see?\r\nI guess I wanted the \"defaultInstance\" of the response type for the blocking and future based stubs rather than an exception.  That, or an onError to trigger on the async stub with the same INTERNAL status and message.\r\n\r\nI have not checked what the c-core will do in this case, or if there is a spec for this behavior.\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/2785", "user": "jhspaybar", "labels": ["bug"], "created": "2017-03-03 19:50:14", "closed": "2017-07-25 23:27:40", "commits": {}, "ttf": 144.00027777777777, "commitsDetails": []}, {"title": "NPE during NettyClientTransport.start() if keepAlive is enabled", "body": "### What version of gRPC are you using?\r\nGRPC 1.1.2\r\n\r\n### What JVM are you using (`java -version`)?\r\n1.8.0_112\r\n\r\n### What did you do?\r\nJust simply call io.grpc.netty.NettyChannelBuilder#enableKeepAlive(boolean) during channel build. and the grpc always throw NPE exception.\r\n\r\n```\r\njava.lang.NullPointerException: null\r\n\tat io.grpc.netty.NettyClientTransport.start(NettyClientTransport.java:169)\r\n\tat io.grpc.internal.ForwardingConnectionClientTransport.start(ForwardingConnectionClientTransport.java:44)\r\n\tat io.grpc.internal.TransportSet.startNewTransport(TransportSet.java:233)\r\n\tat io.grpc.internal.TransportSet.obtainActiveTransport(TransportSet.java:203)\r\n\tat io.grpc.internal.ManagedChannelImpl$3.getTransport(ManagedChannelImpl.java:739)\r\n\tat io.grpc.internal.ManagedChannelImpl$3.getTransport(ManagedChannelImpl.java:677)\r\n\tat io.grpc.PickFirstBalancerFactory$PickFirstBalancer$1.get(PickFirstBalancerFactory.java:129)\r\n\tat io.grpc.internal.DelayedClientTransport$2.run(DelayedClientTransport.java:271)\r\n\tat java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1402)\r\n\tat java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\r\n\tat java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\r\n\tat java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\r\n\tat java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\r\n```\r\n\r\nand inspect the code(io.grpc.netty.NettyClientTransport#start):\r\n\r\n```java\r\n @SuppressWarnings(\"unchecked\")\r\n  @Override\r\n  public Runnable start(Listener transportListener) {\r\n    lifecycleManager = new ClientTransportLifecycleManager(\r\n        Preconditions.checkNotNull(transportListener, \"listener\"));\r\n\r\n    if (enableKeepAlive) {\r\n      keepAliveManager = new KeepAliveManager(this, channel.eventLoop(), keepAliveDelayNanos,\r\n          keepAliveTimeoutNanos);\r\n    }\r\n    ....\r\n}\r\n```\r\n\r\ni believe the field `channel` is never initialized right now, so NPE is throw by field call `channel.eventLoop()`.", "url": "https://github.com/grpc/grpc-java/issues/2726", "user": "bobwenx", "labels": ["bug"], "created": "2017-02-15 02:28:03", "closed": "2017-02-16 18:29:53", "commits": {"d116cc9875a70a318582327baaf8d9ea2ebafa2f": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "c8d21d571f0936e85001b79c9be40121e2323af3": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "d116cc9875a70a318582327baaf8d9ea2ebafa2f", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["72923dca87b940a9a7b744b13c124170c43cb2fc"], "nameRev": "d116cc9875a70a318582327baaf8d9ea2ebafa2f tags/v1.2.0~43", "commitMessage": "netty: Fix NPE in NettyClientTransport\n\nFixes NPE when keepalive is enabled.\n\n* Move creation of keepAliveManager to the bottom of start()\n* Enable keepAlive in NettyClientTransportTest\n* Add test cases checking if keepalive is enabled/disabled, specifically.\n\nFixes #2726\n", "commitDateTime": "2017-02-16 10:29:52", "authoredDateTime": "2017-02-16 09:27:55", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyClientTransport.java", "insertions": 11, "deletions": 5, "lines": 16}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java", "insertions": 35, "deletions": 7, "lines": 42}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientTransport.keepAliveManager()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "NettyClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.keepAliveEnabled()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.keepAliveDisabled()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.newTransport(io.grpc.netty.ProtocolNegotiator,int,int,java.lang.String,boolean)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.overrideDefaultUserAgent()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.maxMessageSizeShouldBeEnforced()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.maxHeaderListSizeShouldBeEnforcedOnClient()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.newTransport(io.grpc.netty.ProtocolNegotiator)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "c8d21d571f0936e85001b79c9be40121e2323af3", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["4b819e4514412bcb5945c9fa06d274bef00b6170"], "nameRev": "c8d21d571f0936e85001b79c9be40121e2323af3 remotes/origin/v1.1.x~11", "commitMessage": "netty: Fix NPE in NettyClientTransport\n\nFixes NPE when keepalive is enabled.\n\n* Move creation of keepAliveManager to the bottom of start()\n* Enable keepAlive in NettyClientTransportTest\n* Add test cases checking if keepalive is enabled/disabled, specifically.\n\nFixes #2726 (Backports #2729)\n", "commitDateTime": "2017-02-17 11:23:22", "authoredDateTime": "2017-02-16 09:27:55", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyClientTransport.java", "insertions": 11, "deletions": 5, "lines": 16}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java", "insertions": 35, "deletions": 7, "lines": 42}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientTransport.keepAliveManager()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "NettyClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.keepAliveEnabled()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.keepAliveDisabled()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.newTransport(io.grpc.netty.ProtocolNegotiator,int,int,java.lang.String,boolean)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.overrideDefaultUserAgent()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.maxMessageSizeShouldBeEnforced()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.maxHeaderListSizeShouldBeEnforcedOnClient()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.newTransport(io.grpc.netty.ProtocolNegotiator)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d116cc9875a70a318582327baaf8d9ea2ebafa2f"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 5, "lines": 16, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.NettyClientTransport.keepAliveManager()", "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener)"]}, {"title": "overrideAuthority does not impact authority for JWT in jwt_token_creds", "body": "https://github.com/grpc/grpc-java/commit/65e4d9f47abdad2a0a7a67fc5f1002bcf6f6fab1#diff-850c920bd69ac031d7e98cab9459dec8 caused grpc/grpc#9497", "url": "https://github.com/grpc/grpc-java/issues/2682", "user": "ejona86", "labels": ["bug"], "created": "2017-02-01 00:37:53", "closed": "2017-04-27 21:17:39", "commits": {"57b9105c7f14b52a3ed132302af1af59fc869281": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "a317912a14567391d7485e64b3da245731f547c4": {"commitGHEventType": "referenced", "commitUser": "zpencer"}, "924b0b2b001f53228881ebe1a7a63e9dd4d129f2": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 85.00027777777778, "commitsDetails": [{"commitHash": "57b9105c7f14b52a3ed132302af1af59fc869281", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["e8aef5b4bbb7525800e7c7ecda0f111224382cde"], "nameRev": "57b9105c7f14b52a3ed132302af1af59fc869281 tags/v1.2.0~65", "commitMessage": "interop-testing: overrideAuthority breaks JWT\n\nCommit 65e4d9f4 broke the jwt_token_creds. It is believed to be because\nthe JWT does not see the authority passed to overrideAuthority. So the\nchanges to interop-testing client are temporarily reverted here. Note\nthat this breaks GRPC_PROXY_EXP testing, so the incompatibility needs to\nbe resolved.\n\nSolving #2682 will allow reverting this change.\n\nFixes grpc/grpc#9497\nFixes #2680\n", "commitDateTime": "2017-02-01 08:38:53", "authoredDateTime": "2017-01-31 16:38:08", "commitGitStats": [{"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java", "insertions": 14, "deletions": 2, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TestServiceClient.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.TestServiceClient.Tester.createChannel()", "TOT": 8, "UPD": 0, "INS": 3, "MOV": 4, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "a317912a14567391d7485e64b3da245731f547c4", "commitGHEventType": "referenced", "commitUser": "zpencer", "commitParents": ["b2b67458684940d53febd58def63b35de99bea2f"], "nameRev": "a317912a14567391d7485e64b3da245731f547c4 tags/v1.4.0~37", "commitMessage": "Channel.authority() should return the value of overrideAuthority (#2956)\n\nAbstractManagedChannelImplBuilder accepts an overrideAuthority parameter, but this value is not hooked up to the name resolver object. Ultimately, Channel.authority consults with the NameResolver, so the overrideAuthority should be hooked into the NameResolverFactory, while all other functionality should be preserved.\r\n\r\nAlso, add unit tests for all the variants of OkHttpChannelBuilder and NettyChannelBuilder constructors, namely to test the slightly different NettyChannelBuilder(SocketAddress) code path.\r\n\r\nFixes #2682", "commitDateTime": "2017-04-27 14:17:38", "authoredDateTime": "2017-04-27 14:17:38", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/AbstractManagedChannelImplBuilder.java", "insertions": 58, "deletions": 27, "lines": 85}, {"filePath": "core/src/test/java/io/grpc/internal/AbstractManagedChannelImplBuilderTest.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/OkHttpChannelBuilderTest.java", "insertions": 24, "deletions": 0, "lines": 24}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractManagedChannelImplBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilder.AuthorityOverridingTransportFactory", "TOT": 12, "UPD": 8, "INS": 0, "MOV": 1, "DEL": 3}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilder.AuthorityOverridingTransportFactory.newClientTransport(java.net.SocketAddress,java.lang.String,java.lang.String)", "TOT": 14, "UPD": 10, "INS": 0, "MOV": 4, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilder.AuthorityOverridingTransportFactory.close()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilder.build()", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilder.OverrideAuthorityNameResolverFactory", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractManagedChannelImplBuilderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilderTest.overrideAuthorityNameResolverWrapsDelegateTest()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractManagedChannelImplBuilderTest.overrideAuthorityNameResolverWontWrapNullTest()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyChannelBuilderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.overrideAllowsInvalidAuthority()", "TOT": 7, "UPD": 1, "INS": 1, "MOV": 4, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.failOverrideInvalidAuthority()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.overrideAllowsInvalidAuthority().2", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.failOverrideInvalidAuthority().3", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.authorityIsReadable()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.overrideAuthorityIsReadableForAddress()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.overrideAuthorityIsReadableForSocketAddress()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.overrideAuthorityIsReadableHelper(io.grpc.netty.NettyChannelBuilder,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.sslContextCanBeNull()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.failIfSslContextIsNotClient()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.overrideAuthorityIsReadableForTarget()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OkHttpChannelBuilderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpChannelBuilderTest.authorityIsReadable()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.okhttp.OkHttpChannelBuilderTest.overrideAuthorityIsReadableForAddress()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.okhttp.OkHttpChannelBuilderTest.overrideAuthorityIsReadableForTarget()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.okhttp.OkHttpChannelBuilderTest.overrideAuthorityIsReadableHelper(io.grpc.okhttp.OkHttpChannelBuilder,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "924b0b2b001f53228881ebe1a7a63e9dd4d129f2", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["946c29ac3236162f52b13cef76729654afeb1449"], "nameRev": "924b0b2b001f53228881ebe1a7a63e9dd4d129f2 tags/v1.6.1~55", "commitMessage": "Revert \"interop-testing: overrideAuthority breaks JWT\"\n\nThis reverts commit 57b9105c7f14b52a3ed132302af1af59fc869281.\n\nIssue #2682 is fixed, so we can revert the commit as planned. This\nre-applies a previously-reverted modernization.\n", "commitDateTime": "2017-07-19 13:54:32", "authoredDateTime": "2017-07-19 11:06:57", "commitGitStats": [{"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/TestServiceClient.java", "insertions": 2, "deletions": 14, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TestServiceClient.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.TestServiceClient.Tester.createChannel()", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 3}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["924b0b2b001f53228881ebe1a7a63e9dd4d129f2"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 2, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Do not pass ClassLoader to Class.forName, for Android", "body": "See #2207. An easy workaround for #2207 was to specify -keep in ProGuard configuration. However, everyone would be happier if such configuration was unnecessary. Using `forName()` without passing `ClassLoader` should remove the need for configuration, as originally intended.", "url": "https://github.com/grpc/grpc-java/issues/2633", "user": "ejona86", "labels": ["android", "bug"], "created": "2017-01-20 22:43:53", "closed": "2017-07-19 17:15:04", "commits": {"06c40dccc38647d09add356cf4d3bc15be99c3f2": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "d325919f628b4279dab95690d0f5d7611539948c": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 179.00027777777777, "commitsDetails": [{"commitHash": "06c40dccc38647d09add356cf4d3bc15be99c3f2", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["a4e481b3f98d2689949c419c12d9f8beca046c87"], "nameRev": "06c40dccc38647d09add356cf4d3bc15be99c3f2 tags/v1.1.0~24", "commitMessage": "android: Fix ProGuard rules in Android apps\n\nFixes #2207. This is actually a workaround. Ideally users shouldn't need\r\nto -keep classes, but it's a bit risky to fix the real issue before 1.1.\r\nThe further fix will be done as part of #2633.\r\n\r\nThe interop app's build.gradle change is necessary to compile with newer\r\nGradle versions. The com.google.errorprone.annotations was necessary in\r\norder to prevent annotation warnings from failing the build.", "commitDateTime": "2017-01-23 09:11:09", "authoredDateTime": "2017-01-23 09:11:09", "commitGitStats": [{"filePath": "android-interop-testing/app/proguard-rules.pro", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "android-interop-testing/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "examples/android/helloworld/app/proguard-rules.pro", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "examples/android/routeguide/app/proguard-rules.pro", "insertions": 5, "deletions": 2, "lines": 7}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "d325919f628b4279dab95690d0f5d7611539948c", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["8572f5ff6b1783069e04a52c4497c371883cfb6a"], "nameRev": "d325919f628b4279dab95690d0f5d7611539948c tags/v1.6.1~59", "commitMessage": "core: Use Class.forName(String) in provider for Android\n\nClass.forName(String) is understood by ProGuard, removing the need for\r\nmanual ProGuard configuration and allows ProGuard to rename the provider\r\nclasses. Previously the provider classes could not be renamed.\r\n\r\nFixes #2633", "commitDateTime": "2017-07-19 10:15:03", "authoredDateTime": "2017-07-19 10:15:03", "commitGitStats": [{"filePath": "android-interop-testing/app/proguard-rules.pro", "insertions": 0, "deletions": 2, "lines": 2}, {"filePath": "core/src/main/java/io/grpc/ManagedChannelProvider.java", "insertions": 7, "deletions": 5, "lines": 12}, {"filePath": "core/src/main/java/io/grpc/NameResolverProvider.java", "insertions": 6, "deletions": 4, "lines": 10}, {"filePath": "core/src/test/java/io/grpc/ManagedChannelProviderTest.java", "insertions": 44, "deletions": 14, "lines": 58}, {"filePath": "core/src/test/java/io/grpc/NameResolverProviderTest.java", "insertions": 85, "deletions": 14, "lines": 99}, {"filePath": "core/src/test/java/io/grpc/StaticTestingClassLoader.java", "insertions": 76, "deletions": 0, "lines": 76}, {"filePath": "core/src/test/java/io/grpc/internal/DnsNameResolverProviderTest.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "examples/android/helloworld/app/proguard-rules.pro", "insertions": 0, "deletions": 2, "lines": 2}, {"filePath": "examples/android/routeguide/app/proguard-rules.pro", "insertions": 0, "deletions": 2, "lines": 2}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyChannelProviderTest.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "okhttp/src/test/java/io/grpc/okhttp/OkHttpChannelProviderTest.java", "insertions": 1, "deletions": 2, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ManagedChannelProvider.java", "spoonMethods": [{"spoonMethodName": "io.grpc.ManagedChannelProvider.load(java.lang.ClassLoader)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.ManagedChannelProvider.getCandidatesViaHardCoded(java.lang.ClassLoader)", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 5}]}, {"spoonFilePath": "NameResolverProvider.java", "spoonMethods": [{"spoonMethodName": "io.grpc.NameResolverProvider.load(java.lang.ClassLoader)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.NameResolverProvider.getCandidatesViaHardCoded(java.lang.ClassLoader)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 3}]}, {"spoonFilePath": "ManagedChannelProviderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.ManagedChannelProviderTest.getCandidatesViaHardCoded_usesProvidedClassLoader()", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 3, "DEL": 0}, {"spoonMethodName": "io.grpc.ManagedChannelProviderTest.getCandidatesViaHardCoded_ignoresMissingClasses()", "TOT": 10, "UPD": 2, "INS": 5, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.ManagedChannelProviderTest.invokeGetCandidatesViaHardCoded(java.lang.ClassLoader)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.ManagedChannelProviderTest.getCandidatesViaHardCoded_triesToLoadClasses().1", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.ManagedChannelProviderTest.getCandidatesViaHardCoded_ignoresMissingClasses().2", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.ManagedChannelProviderTest.getCandidatesViaHardCoded_triesToLoadClasses().1.loadClass(java.lang.String,boolean)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.ManagedChannelProviderTest.getCandidatesViaHardCoded_ignoresMissingClasses().2.loadClass(java.lang.String,boolean)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.ManagedChannelProviderTest.getCandidatesViaHardCoded_usesProvidedClassLoader().1", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.ManagedChannelProviderTest.getCandidatesViaHardCoded_usesProvidedClassLoader().1.loadClass(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.ManagedChannelProviderTest.getCandidatesViaHardCoded_ignoresMissingClasses().2.loadClass(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "NameResolverProviderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.NameResolverProviderTest.getCandidatesViaHardCoded_usesProvidedClassLoader()", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 3, "DEL": 0}, {"spoonMethodName": "io.grpc.NameResolverProviderTest.getCandidatesViaHardCoded_ignoresMissingClasses()", "TOT": 11, "UPD": 2, "INS": 6, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.NameResolverProviderTest.invokeGetCandidatesViaHardCoded(java.lang.ClassLoader)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.NameResolverProviderTest.FilteringClassLoader", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.NameResolverProviderTest.getCandidatesViaHardCoded_triesToLoadClasses().2", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.NameResolverProviderTest.getCandidatesViaHardCoded_ignoresMissingClasses().3", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.NameResolverProviderTest.getCandidatesViaHardCoded_triesToLoadClasses().2.loadClass(java.lang.String,boolean)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.NameResolverProviderTest.getCandidatesViaHardCoded_ignoresMissingClasses().3.loadClass(java.lang.String,boolean)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.NameResolverProviderTest.getCandidatesViaHardCoded_usesProvidedClassLoader().2", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.NameResolverProviderTest.getCandidatesViaHardCoded_usesProvidedClassLoader().2.loadClass(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.NameResolverProviderTest.getCandidatesViaHardCoded_ignoresMissingClasses().3.loadClass(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "StaticTestingClassLoader.java", "spoonMethods": [{"spoonMethodName": "io.grpc.StaticTestingClassLoader", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DnsNameResolverProviderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DnsNameResolverProviderTest.providedHardCoded()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "NettyChannelProviderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyChannelProviderTest.providedHardCoded()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "OkHttpChannelProviderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.okhttp.OkHttpChannelProviderTest.providedHardCoded()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d325919f628b4279dab95690d0f5d7611539948c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 15, "lines": 28, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 10.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 10.0, "spoonFilesChanged": 2, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc", "examples/android/routeguide/app/proguard-rules.pro", "android-interop-testing/app/proguard-rules.pro", "examples/android/helloworld/app/proguard-rules.pro"], "changesInPackagesSPOON": ["io.grpc.NameResolverProvider.getCandidatesViaHardCoded(java.lang.ClassLoader)", "io.grpc.ManagedChannelProvider.load(java.lang.ClassLoader)", "io.grpc.NameResolverProvider.load(java.lang.ClassLoader)", "io.grpc.ManagedChannelProvider.getCandidatesViaHardCoded(java.lang.ClassLoader)"]}, {"title": "Java GRPC Client (1.0.3) not able to send requests with metadata larger than ~500KB.", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\nJava: 1.0.3\r\nPython: 1.0.4\r\n\r\n### What JVM are you using (`java -version`)?\r\njava version \"1.8.0_112\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_112-b16)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.112-b16, mixed mode)\r\n\r\n### What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\n\r\n1. Start a [Python Greeter server](https://github.com/grpc/grpc/blob/master/examples/python/helloworld/greeter_server.py).\r\n\r\n2. Modify the Python Greeter client to have the following run() method:\r\n\r\n```py\r\ndef run():\r\n  channel = grpc.insecure_channel('localhost:50051', options=[('grpc.max_metadata_size', 10*1024*1024)])\r\n  stub = helloworld_pb2.GreeterStub(channel)\r\n  response = stub.SayHello(helloworld_pb2.HelloRequest(name='you'), metadata=[('request-metadata', 'x'*20000)])\r\n```\r\n\r\n3. Run the python client. With the standard package for grpc 1.0.4 for python, the metadata is larger than the default metadata size (16K) and we get (as expected):\r\n\r\n> grpc._channel._Rendezvous: <_Rendezvous of RPC that terminated with (StatusCode.RESOURCE_EXHAUSTED, {\"created\":\"@1484199373.574894000\",\"description\":\"RST_STREAM\",\"file\":\"src/core/ext/transport/chttp2/transport/frame_rst_stream.c\",\"file_line\":107,\"http2_error\":11})>\r\n\r\n4. Now patch [this line](https://github.com/grpc/grpc/blob/v1.0.x/src/python/grpcio/grpc/_server.py#L735) on the python grpc server init code (we don't yet have the ability to set options :/) with:\r\n\r\n```py\r\nserver = cygrpc.Server(cygrpc.ChannelArgs([\r\n        cygrpc.ChannelArg(_common.encode('grpc.max_metadata_size'), 10*1024*1024)])) \r\n```\r\n\r\n5. Rerun the server and client:\r\n\u27a4 python greeter_client.py\r\nGreeter client received: Hello, you!\r\n\r\n6. Change the client to send 4MB of metadata instead:\r\n`metadata=[('request-metadata', 'x'*(4*1024*1024))]`\r\n\u27a4 python greeter_client.py\r\nGreeter client received: Hello, you!\r\n\r\n7. Keep the python server running and run the Java client:\r\n```\r\nJan 11, 2017 9:56:34 PM io.grpc.examples.helloworld.HelloWorldClient greet\r\nINFO: Greeting: Hello, world!\r\n```\r\n\r\n8. Modify the Java client to add metadata:\r\n\r\n```java\r\n  public HelloWorldClient(String host, int port) {\r\n    channel = ManagedChannelBuilder.forAddress(host, port)\r\n        // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid\r\n        // needing certificates.\r\n        .usePlaintext(true)\r\n        .build();\r\n\r\n    Metadata metadata = new Metadata();\r\n    Metadata.Key<String> key = Metadata.Key.of(\"request-metadata\", Metadata.ASCII_STRING_MARSHALLER);\r\n\r\n    char[] chars = new char[10*1024];\r\n    Arrays.fill(chars, 'x');\r\n    metadata.put(key, new String(chars));\r\n\r\n    blockingStub = MetadataUtils.attachHeaders(GreeterGrpc.newBlockingStub(channel), metadata);\r\n  }\r\n```\r\n\r\n```\r\nJan 11, 2017 10:07:28 PM io.grpc.examples.helloworld.HelloWorldClient greet\r\nINFO: Greeting: Hello, world!\r\n```\r\n\r\n9. Modify the Java client to send 4MB of metadata:\r\n\r\n` char[] chars = new char[4*1024*1024];`\r\n\r\n```\r\n\u27a4 ./build/install/examples/bin/hello-world-client\r\nJan 11, 2017 10:09:40 PM io.grpc.internal.ManagedChannelImpl <init>\r\nINFO: [ManagedChannelImpl@96532d6] Created with target localhost:50052\r\nJan 11, 2017 10:09:40 PM io.grpc.examples.helloworld.HelloWorldClient greet\r\nINFO: Will try to greet world ...\r\nJan 11, 2017 10:09:40 PM io.grpc.examples.helloworld.HelloWorldClient greet\r\n**WARNING: RPC failed: Status{code=INTERNAL, description=Connection closed with unknown cause, cause=null}**\r\nJan 11, 2017 10:09:40 PM io.grpc.internal.ManagedChannelImpl maybeTerminateChannel\r\nINFO: [ManagedChannelImpl@96532d6] Terminated\r\n```\r\n\r\nAs a side note, creating the channel with\r\n```java\r\nNettyChannelBuilder.forAddress(host, port)\r\n        .maxHeaderListSize(10*1024*1024))\r\n        .maxMessageSize(10*1024*1024)\r\n        .usePlaintext(true)\r\n        .build()\r\n```\r\ndoes not change the outcome (kind of expected, since apparently those options are only for receiving metadata, which is quite confusing).\r\n\r\n### What did you expect to see?\r\nI expected the Java client to be able to send  as much metadata as the server supports. The python client seems to do it just fine.\r\n\r\n### What did you see instead?\r\nStarting at around 500KB the Java GRPC client is not able to send the request and the connection errors with `WARNING: RPC failed: Status{code=INTERNAL, description=Connection closed with unknown cause, cause=null}`.\r\n\r\nI'm guessing this behavior is not expected? Are there any workarounds?\r\n\r\nThanks!", "url": "https://github.com/grpc/grpc-java/issues/2601", "user": "gfernandessc", "labels": ["bug"], "created": "2017-01-12 06:15:04", "closed": "2018-05-29 16:50:56", "commits": {}, "ttf": 502.0002777777778, "commitsDetails": []}, {"title": "Don't hang RPC when netty-tcnative .so fails to load due to (musl) linking errors", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n\r\n1.0.3\r\n\r\n### What JVM are you using (`java -version`)?\r\n\r\nopenjdk version \"1.8.0_102\"\r\nOpenJDK Runtime Environment (build 1.8.0_102)\r\nOpenJDK 64-Bit Server VM (build 25.102-b01, mixed mode)\r\n\r\n### What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\n\r\nhttps://github.com/garrettjonesgoogle/gcloud-java/tree/deadline-exceeded-issue/google-cloud-example-docker-gradle-alpine\r\n\r\n1. `./gradlew jar shadowJar`\r\n2. `docker build .`\r\n\r\nThen deploy to a GCE instance and run it.\r\n\r\n1. `sudo docker run -it YOUR_DOCKER_BUILD_ID_HERE sh`\r\n2. `java -Djava.util.logging.config.file=logging.properties -cp google-cloud-example-docker-gradle-alpine-all.jar com.google.cloud.pubsub.spi.v1.PublisherSmokeTest --project_id YOUR_PROJECT_ID_HERE`\r\n\r\n### What did you expect to see?\r\n\r\nAn exception indicating that the netty dependency was unsatisfied\r\n\r\n### What did you see instead?\r\n\r\nAfter the call times out, DEADLINE_EXCEEDED\r\n\r\n### Notes\r\n\r\nIf a user has a high timeout, it can take a long time for them to discover something is wrong. Then when they receive DEADLINE_EXCEEDED, they have no idea why - it doesn't guide them to the problem with the dependency. They have to know to turn on FINE logging and go log spelunking to fine the root cause. Example user-filed issue: https://github.com/GoogleCloudPlatform/google-cloud-java/issues/1430 \r\n", "url": "https://github.com/grpc/grpc-java/issues/2599", "user": "garrettjonesgoogle", "labels": ["bug"], "created": "2017-01-11 20:09:08", "closed": "2017-06-06 19:00:03", "commits": {"c48610b890fe820eda08bf3c1ea682831401eb62": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "4d740a50dade9f96a2b38d5f22b4b13cb0c7ffa2": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 145.00027777777777, "commitsDetails": [{"commitHash": "c48610b890fe820eda08bf3c1ea682831401eb62", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["9c6ea274fe93955236c9ef4c68d02b72c9f58ccc"], "nameRev": "c48610b890fe820eda08bf3c1ea682831401eb62 tags/v1.5.0~66", "commitMessage": "netty: Eagerly create SslContext\n\nCreating the SslContext can throw, generally due to broken ALPN. We want\nthat to propagate to the caller of build(), instead of within the\nchannel where it could easily cause hangs.\n\nWe still delay creation until actual build() time, since TLS is not\nguaranteed to work and the application may be configuring plaintext or\nsimilar later before calling build() where SslContext is unnecessary.\n\nThe only externally-visible change should be the exception handling.\nI'd add a test, but the things throwing are static and trying to inject\nthem would be pretty messy.\n\nFixes #2599\n", "commitDateTime": "2017-06-06 12:00:01", "authoredDateTime": "2017-06-05 12:35:04", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "insertions": 7, "deletions": 7, "lines": 14}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java", "insertions": 4, "deletions": 9, "lines": 13}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyChannelBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyChannelBuilder.NettyTransportFactory", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilder.createProtocolNegotiatorByType(java.lang.String,io.grpc.netty.NegotiationType,io.netty.handler.ssl.SslContext)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "NettyChannelBuilderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.createProtocolNegotiator_tlsWithNoContext()", "TOT": 6, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 4}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.createProtocolNegotiator_tlsWithAuthorityFallback()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "4d740a50dade9f96a2b38d5f22b4b13cb0c7ffa2", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["e4f1f398a0f92cc09054c351ea6c5e6816459c77"], "nameRev": "4d740a50dade9f96a2b38d5f22b4b13cb0c7ffa2 tags/v1.4.0~2", "commitMessage": "netty: Eagerly create SslContext\n\nCreating the SslContext can throw, generally due to broken ALPN. We want\nthat to propagate to the caller of build(), instead of within the\nchannel where it could easily cause hangs.\n\nWe still delay creation until actual build() time, since TLS is not\nguaranteed to work and the application may be configuring plaintext or\nsimilar later before calling build() where SslContext is unnecessary.\n\nThe only externally-visible change should be the exception handling.\nI'd add a test, but the things throwing are static and trying to inject\nthem would be pretty messy.\n\nFixes #2599\n", "commitDateTime": "2017-06-06 13:24:35", "authoredDateTime": "2017-06-05 12:35:04", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "insertions": 7, "deletions": 7, "lines": 14}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java", "insertions": 4, "deletions": 9, "lines": 13}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyChannelBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyChannelBuilder.NettyTransportFactory", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilder.createProtocolNegotiatorByType(java.lang.String,io.grpc.netty.NegotiationType,io.netty.handler.ssl.SslContext)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "NettyChannelBuilderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.createProtocolNegotiator_tlsWithNoContext()", "TOT": 6, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 4}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.createProtocolNegotiator_tlsWithAuthorityFallback()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c48610b890fe820eda08bf3c1ea682831401eb62"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 7, "lines": 14, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.NettyChannelBuilder.NettyTransportFactory", "io.grpc.netty.NettyChannelBuilder.createProtocolNegotiatorByType(java.lang.String,io.grpc.netty.NegotiationType,io.netty.handler.ssl.SslContext)"]}, {"title": "bindService() should be final", "body": "We just found out a method in the generated code\r\n\r\nThe method is \"bindService()\" on the generated server interface is supposed to be \"final\", but is currently not.\r\n\r\nFor example\r\n```java\r\npublic abstract class RouteGuideImplBase {\r\n  // Empty implementations, to be overridden by the application\r\n  public StreamObserver routeSingle(StreamObserver) {\r\n    failWithUnimplemented();\r\n  }\r\n  public StreamObserver routeMultiple(StreamObserver) {\r\n    failWithUnimplemented();\r\n  }\r\n\r\n  // Glue code called by gRPC server to register the service.\r\n  // Not supposed to be overridden.\r\n  public bindService() {\r\n    ...\r\n  }\r\n}\r\n```\r\n\r\n## Why is it an issue\r\n\r\nThe non-final bindService() adds difficulty for users who want to mock the server interface in their tests. Mockito by default overrides all non-final methods with its no-op and null-returning impl. When a Mockito user creates a mock for RouteGuideImplBase, it can't be correctly registered to the server. It can be worked around by explicitly telling Mockito to use the original bindService(), but it's still a friction in the user experience.\r\n\r\n## What should we do\r\n\r\nbindService() should have been defined as \"final\" in the first place. It was an oversight that we didn't make it so.  This should be considered as a bug and be fixed.\r\n\r\nWe will make the change in master, which will be in 1.1.0.\r\n\r\n## Risk\r\n\r\nThis is technically an incompatible API change. Anyone overrides bindService() on the generated interface will be broken. However, I don't find anyone doing so in google3, or any legitimate reason for it in general. The chance of breaking anyone is very low.", "url": "https://github.com/grpc/grpc-java/issues/2552", "user": "zhangkun83", "labels": ["bug"], "created": "2016-12-22 21:40:57", "closed": "2016-12-29 18:32:48", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Threading of StatsTraceContext", "body": "StatsTraceContext assumes non-thread-safety, which is fine as long as the RPC is closed by the application through the ClientCall/ServerCall interface, which are also not thread-safe.\r\n\r\nHowever, if the RPC is not closed by the application, but either cancelled by the other side, or closed by transport due to errors, which will call `callEnded()` from the transport thread which is not synchronized with  the application thread. As the application may not be notified about the closure in time, it may still trying to send messages, resulting in `wireBytesSent()` etc being called after `callEnded()`, which would trigger a check failure. There is also a data race on the counter fields as `wireBytesSent()` etc write them and `callEnded()` reads them from different threads without synchronization.\r\n\r\nWe will remove the preconditions checks from `writeBytesSent()` etc. For the data race, some kind of synchronization would be required, maybe atomics? @ejona86 ", "url": "https://github.com/grpc/grpc-java/issues/2453", "user": "zhangkun83", "labels": ["bug"], "created": "2016-11-28 22:33:47", "closed": "2016-11-29 02:05:41", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Non-determinism when using InProcessTransport with direct executors", "body": "### What version of gRPC are you using?\r\n\r\n1.0.1\r\n\r\n### What JVM are you using (`java -version`)?\r\n\r\n1.8.0_101\r\n\r\n### What did you do?\r\n\r\nI am attempting to write unit tests for RPC systems without mocking stubs, which would be lovely if it worked. Recent discussions (e.g. [here](https://github.com/grpc/grpc-java/issues/1469), [1.0.1 release notes](https://github.com/grpc/grpc-java/releases/tag/v1.0.1), [this example](https://github.com/grpc/grpc-java/commit/7306df42662b8eb96f3524e3940b3e65d37deb73)) suggest this is the new done thing and is supposed to work. To this end I am running an `InProcessServer` and calling it over an `InProcessChannel` with both ends using a `DirectExecutor`.\r\n\r\n### What did you expect to see?\r\n\r\nThe 1.0.1 release notes imply that this is now deterministic (after the removal of the `grpc-ready` thread pool, which was causing issues for me before), so I expected to see determinism in my unit test, and for the server handler to be called on the same thread that made the stub method call. The RPC method is a client-side streaming RPC, but I don't know if that is relevant.\r\n\r\n### What did you see instead?\r\n\r\nThe unit test is not deterministic, since the service handler seems to end up being called on a `grpc-timer` thread provided by the `ScheduledExecutorService` created by `GrpcUtil.TIMER_SERVICE`. The task that causes the call is  the `NameResolverStartTask` in `ManagedChannelImpl`, and there appears to be no way to provide an alternative timer service.\r\n\r\n[See ManagedChannelImpl.java line 307.](https://github.com/grpc/grpc-java/blob/496a621da7c57a252286f041e9b41e59b722ae9b/core/src/main/java/io/grpc/internal/ManagedChannelImpl.java#L307)\r\n\r\nFor reference, the stack trace that I see on the handler side is as follows:\r\n\r\n```\r\n        ...\r\n\tat foo.bar.FooServiceImpl$1.onNext(FooServiceImpl.java:33)\r\n\tat io.grpc.stub.ServerCalls$2$1.onMessage(ServerCalls.java:206)\r\n\tat io.grpc.internal.ServerCallImpl$ServerStreamListenerImpl.messageRead(ServerCallImpl.java:237)\r\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener$1.runInContext(ServerImpl.java:485)\r\n\tat io.grpc.internal.ContextRunnable.run(ContextRunnable.java:52)\r\n\tat io.grpc.internal.SerializeReentrantCallsDirectExecutor.execute(SerializeReentrantCallsDirectExecutor.java:65)\r\n\tat io.grpc.internal.ServerImpl$JumpToApplicationThreadServerStreamListener.messageRead(ServerImpl.java:481)\r\n\tat io.grpc.inprocess.InProcessTransport$InProcessStream$InProcessClientStream.writeMessage(InProcessTransport.java:475)\r\n\tat io.grpc.internal.DelayedStream$3.run(DelayedStream.java:201)\r\n\tat io.grpc.internal.DelayedStream.drainPendingCalls(DelayedStream.java:121)\r\n\tat io.grpc.internal.DelayedStream.setStream(DelayedStream.java:90)\r\n\tat io.grpc.internal.DelayedClientTransport$PendingStream.createRealStream(DelayedClientTransport.java:383)\r\n\tat io.grpc.internal.DelayedClientTransport$PendingStream.access$100(DelayedClientTransport.java:370)\r\n\tat io.grpc.internal.DelayedClientTransport$2.run(DelayedClientTransport.java:262)\r\n\tat com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:456)\r\n\tat io.grpc.internal.DelayedClientTransport.setTransportSupplier(DelayedClientTransport.java:259)\r\n\tat io.grpc.internal.ManagedChannelImpl$InterimTransportImpl.closeWithRealTransports(ManagedChannelImpl.java:740)\r\n\tat io.grpc.DummyLoadBalancerFactory$DummyLoadBalancer.handleResolvedAddresses(DummyLoadBalancerFactory.java:133)\r\n\tat io.grpc.internal.ManagedChannelImpl$NameResolverListenerImpl.onUpdate(ManagedChannelImpl.java:681)\r\n\tat io.grpc.internal.AbstractManagedChannelImplBuilder$DirectAddressNameResolverFactory$1.start(AbstractManagedChannelImplBuilder.java:323)\r\n\tat io.grpc.internal.ManagedChannelImpl$1NameResolverStartTask.run(ManagedChannelImpl.java:254)\r\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n\tat java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n```\r\n\r\nAm I doing something wrong? Is there a workaround? It seems like doing the name resolution work on the `ManagedChannelImpl`'s user-provided `executor` rather than its `scheduledExecutor` might fix it, but I don't know if there's some reason it's not done that way.", "url": "https://github.com/grpc/grpc-java/issues/2444", "user": "grandseiken", "labels": ["bug"], "created": "2016-11-25 18:21:52", "closed": "2017-01-23 19:24:26", "commits": {"7adbffeb98e668a667b593cb8e5a97a3c56ff6d2": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "e9fa8c99ceba92753998ee7c3b5fece44aa635b9": {"commitGHEventType": "referenced", "commitUser": "ejona86"}, "5bae984a88fa44aae1c8a97fa1431669d0e34e9c": {"commitGHEventType": "referenced", "commitUser": "ericgribkoff"}, "dcc3902eb4bc6ce464ba02455dcf6f89ba5ad163": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 59.000277777777775, "commitsDetails": [{"commitHash": "7adbffeb98e668a667b593cb8e5a97a3c56ff6d2", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["3b15fa32d89ad1ba86eb43758ec8b3467001882d"], "nameRev": "7adbffeb98e668a667b593cb8e5a97a3c56ff6d2 tags/v1.0.3~3", "commitMessage": "core: Only use scheduled executor for timer tasks\n\nThis removes an abuse of scheduled executor in ManagedChannelImpl. The executor\nwas used to avoid deadlocking. Now we run the work on the same thread, but\ndelay it until locks have been released.\n\nFixes #2444\n", "commitDateTime": "2016-11-30 15:52:42", "authoredDateTime": "2016-11-16 00:01:23", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/InUseStateAggregator.java", "insertions": 12, "deletions": 5, "lines": 17}, {"filePath": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "insertions": 49, "deletions": 31, "lines": 80}, {"filePath": "core/src/main/java/io/grpc/internal/TransportSet.java", "insertions": 14, "deletions": 6, "lines": 20}, {"filePath": "core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java", "insertions": 1, "deletions": 3, "lines": 4}, {"filePath": "core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java", "insertions": 1, "deletions": 3, "lines": 4}, {"filePath": "core/src/test/java/io/grpc/internal/ManagedChannelImplTransportManagerTest.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InUseStateAggregator.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.InUseStateAggregator.updateObjectInUse(java.lang.Object,boolean)", "TOT": 6, "UPD": 1, "INS": 4, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.InUseStateAggregator.handleInUse()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.InUseStateAggregator.isInUse()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ManagedChannelImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.exitIdleMode()", "TOT": 18, "UPD": 1, "INS": 5, "MOV": 10, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.1.handleInUse()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.2.get(io.grpc.CallOptions)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.3.getTransport(io.grpc.EquivalentAddressGroup).1.onInUse(io.grpc.internal.TransportSet)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.exitIdleModeAndGetLb()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.InterimTransportImpl.1.transportTerminated()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.InterimTransportImpl.1.transportInUse(boolean)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.3.getTransport(io.grpc.EquivalentAddressGroup).1.onNotInUse(io.grpc.internal.TransportSet)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "TransportSet.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.TransportSet.Callback.onInUse(io.grpc.internal.TransportSet)", "TOT": 3, "UPD": 1, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.TransportSet.1.handleInUse()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.TransportSet.BaseTransportListener.transportInUse(boolean)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.TransportSet.BaseTransportListener.transportTerminated()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "ManagedChannelImplIdlenessTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImplIdlenessTest.forceExitIdleMode()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ManagedChannelImplTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.createChannel(io.grpc.NameResolver$Factory,java.util.List)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ManagedChannelImplTransportManagerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImplTransportManagerTest.setUp()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "e9fa8c99ceba92753998ee7c3b5fece44aa635b9", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["06c40dccc38647d09add356cf4d3bc15be99c3f2"], "nameRev": "e9fa8c99ceba92753998ee7c3b5fece44aa635b9 tags/v1.1.0~23", "commitMessage": "core: Only use scheduled executor for timer tasks\n\nThis removes an abuse of scheduled executor in ManagedChannelImpl. The executor\nwas used to avoid deadlocking. Now we run the work on the same thread, but\ndelay it until locks have been released.\n\nThere is no need to fix ManagedChannelImpl2. Due to its different\nthreading model it didn't have need to abuse the scheduledExecutor.\n\nFixes #2444\n", "commitDateTime": "2017-01-23 11:24:25", "authoredDateTime": "2016-11-16 00:01:23", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/InUseStateAggregator.java", "insertions": 12, "deletions": 5, "lines": 17}, {"filePath": "core/src/main/java/io/grpc/internal/ManagedChannelImpl.java", "insertions": 55, "deletions": 37, "lines": 92}, {"filePath": "core/src/main/java/io/grpc/internal/TransportSet.java", "insertions": 14, "deletions": 6, "lines": 20}, {"filePath": "core/src/test/java/io/grpc/internal/ManagedChannelImplIdlenessTest.java", "insertions": 1, "deletions": 3, "lines": 4}, {"filePath": "core/src/test/java/io/grpc/internal/ManagedChannelImplTest.java", "insertions": 1, "deletions": 3, "lines": 4}, {"filePath": "core/src/test/java/io/grpc/internal/ManagedChannelImplTransportManagerTest.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InUseStateAggregator.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.InUseStateAggregator.updateObjectInUse(java.lang.Object,boolean)", "TOT": 6, "UPD": 1, "INS": 4, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.InUseStateAggregator.handleInUse()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.InUseStateAggregator.isInUse()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ManagedChannelImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.exitIdleMode()", "TOT": 20, "UPD": 1, "INS": 5, "MOV": 12, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.1.handleInUse()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.2.get(io.grpc.CallOptions,io.grpc.Metadata)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.3.getTransport(io.grpc.EquivalentAddressGroup).1.onInUse(io.grpc.internal.TransportSet)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.exitIdleModeAndGetLb()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.InterimTransportImpl.1.transportTerminated()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.InterimTransportImpl.1.transportInUse(boolean)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ManagedChannelImpl.3.getTransport(io.grpc.EquivalentAddressGroup).1.onNotInUse(io.grpc.internal.TransportSet)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "TransportSet.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.TransportSet.Callback.onInUse(io.grpc.internal.TransportSet)", "TOT": 3, "UPD": 1, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.TransportSet.1.handleInUse()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.TransportSet.BaseTransportListener.transportInUse(boolean)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.TransportSet.BaseTransportListener.transportTerminated()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "ManagedChannelImplIdlenessTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImplIdlenessTest.forceExitIdleMode()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ManagedChannelImplTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImplTest.createChannel(io.grpc.NameResolver$Factory,java.util.List)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ManagedChannelImplTransportManagerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ManagedChannelImplTransportManagerTest.setUp()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "5bae984a88fa44aae1c8a97fa1431669d0e34e9c", "commitGHEventType": "referenced", "commitUser": "ericgribkoff", "commitParents": ["40bc50212b75923afe928f698e11cb3304e7e3c9"], "nameRev": "5bae984a88fa44aae1c8a97fa1431669d0e34e9c tags/v1.1.0~18", "commitMessage": "services: remove no-op call in reflection service test\n\nNow that the fix for #2444 is in, there's no need for the initial noop call.", "commitDateTime": "2017-01-23 17:56:13", "authoredDateTime": "2017-01-23 17:56:13", "commitGitStats": [{"filePath": "services/src/test/java/io/grpc/protobuf/service/ProtoReflectionServiceTest.java", "insertions": 0, "deletions": 33, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ProtoReflectionServiceTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.protobuf.service.ProtoReflectionServiceTest.setUp()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.protobuf.service.ProtoReflectionServiceTest.doNoOpCall()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "dcc3902eb4bc6ce464ba02455dcf6f89ba5ad163", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["be74e97b5dbf24d681989abece2d98e87c8c2592"], "nameRev": "dcc3902eb4bc6ce464ba02455dcf6f89ba5ad163 tags/v1.4.0~42", "commitMessage": "grpclb: remove non-determinism workaround\n\nIssue #2444 is resolved.\n", "commitDateTime": "2017-04-26 13:35:22", "authoredDateTime": "2017-04-24 14:42:30", "commitGitStats": [{"filePath": "grpclb/src/test/java/io/grpc/grpclb/GrpclbLoadBalancerTest.java", "insertions": 0, "deletions": 10, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GrpclbLoadBalancerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.grpclb.GrpclbLoadBalancerTest.setUp().2.answer(org.mockito.invocation.InvocationOnMock)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7adbffeb98e668a667b593cb8e5a97a3c56ff6d2", "5bae984a88fa44aae1c8a97fa1431669d0e34e9c", "dcc3902eb4bc6ce464ba02455dcf6f89ba5ad163"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 75, "deletions": 42, "lines": 117, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 55, "UPD": 8, "INS": 26, "MOV": 19, "DEL": 2, "spoonFilesChanged": 3, "spoonMethodsChanged": 15}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.TransportSet.BaseTransportListener.transportInUse(boolean)", "io.grpc.internal.TransportSet.Callback.onInUse(io.grpc.internal.TransportSet)", "io.grpc.internal.ManagedChannelImpl.InterimTransportImpl.1.transportInUse(boolean)", "io.grpc.internal.ManagedChannelImpl.2.get(io.grpc.CallOptions)", "io.grpc.internal.InUseStateAggregator.updateObjectInUse(java.lang.Object,boolean)", "io.grpc.internal.ManagedChannelImpl.exitIdleModeAndGetLb()", "io.grpc.internal.ManagedChannelImpl.exitIdleMode()", "io.grpc.internal.InUseStateAggregator.handleInUse()", "io.grpc.internal.ManagedChannelImpl.3.getTransport(io.grpc.EquivalentAddressGroup).1.onNotInUse(io.grpc.internal.TransportSet)", "io.grpc.internal.InUseStateAggregator.isInUse()", "io.grpc.internal.TransportSet.1.handleInUse()", "io.grpc.internal.ManagedChannelImpl.1.handleInUse()", "io.grpc.internal.ManagedChannelImpl.3.getTransport(io.grpc.EquivalentAddressGroup).1.onInUse(io.grpc.internal.TransportSet)", "io.grpc.internal.TransportSet.BaseTransportListener.transportTerminated()", "io.grpc.internal.ManagedChannelImpl.InterimTransportImpl.1.transportTerminated()"]}, {"title": "ServerServiceDefinition.addMethod fails incorrectly ", "body": "Please answer these questions before submitting your issue.\r\n\r\n### What version of gRPC are you using?\r\n1.0.1\r\n\r\n### What JVM are you using (`java -version`)?\r\njava version \"1.8.0_91\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_91-b14)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.91-b14, mixed mode)\r\n\r\n### What did you do?\r\nIf possible, provide a recipe for reproducing the error.\r\n```\r\npublic class MyBindableService implements BindableService {\r\n\r\n    @Override\r\n    public ServerServiceDefinition bindService() {\r\n\r\n        MethodDescriptor<String, String> myMethodDescriptor = MethodDescriptor.create(\r\n                MethodDescriptor.MethodType.UNARY,\r\n                \"/mypage\",\r\n                new MyRequestMarshaller<>(),\r\n                new MyResponseMarshaller<>());\r\n        ServiceDescriptor myServiceDescriptor = new ServiceDescriptor(\r\n                \"/mypage\",\r\n                myMethodDescriptor);\r\n        ServerMethodDefinition<String, String> serverMethodDefinition =\r\n                ServerMethodDefinition.create(myMethodDescriptor,\r\n                new MyServerCallHandler());\r\n        return ServerServiceDefinition.builder(myServiceDescriptor).\r\n                addMethod(serverMethodDefinition).build();\r\n    }\r\n}\r\n```\r\n\r\n### What did you expect to see?\r\nThis works without problem, the server starts up\r\n\r\n### What did you see instead?\r\nAn error that says the following:\r\n`Exception in thread \"main\" java.lang.IllegalArgumentException: Service name mismatch. Expected service name: '/mypage'. Actual method name: '/mypage'.\r\n`\r\n\r\nThe reason for this is rather interesting, here is the code that generates this in addMethod:\r\n\r\n```\r\n /** Add a method to be supported by the service. */\r\n    public <ReqT, RespT> Builder addMethod(ServerMethodDefinition<ReqT, RespT> def) {\r\n      MethodDescriptor<ReqT, RespT> method = def.getMethodDescriptor();\r\n      checkArgument(\r\n          serviceName.equals(MethodDescriptor.extractFullServiceName(method.getFullMethodName())),\r\n          \"Service name mismatch. Expected service name: '%s'. Actual method name: '%s'.\",\r\n          serviceName, method.getFullMethodName());\r\n      String name = method.getFullMethodName();\r\n      checkState(!methods.containsKey(name), \"Method by same name already registered: %s\", name);\r\n      methods.put(name, def);\r\n      return this;\r\n    }\r\n```\r\n\r\nThe problem is that what your outputting as the comparison is not what is actually being compared.  The \"extractFullServiceName\" method performs the following operation:\r\n\r\n```\r\n  public static String extractFullServiceName(String fullMethodName) {\r\n    int index = fullMethodName.lastIndexOf('/');\r\n    if (index == -1) {\r\n      return null;\r\n    }\r\n    return fullMethodName.substring(0, index);\r\n  }\r\n```\r\n\r\nWhich normalizes in some weird way the method name, but this only happens in the above code to the MethodDescriptor, but not to the serviceName, this leads to a mismatch, and then you print out a wrong mismatch as well.  This is broken.  The other problem, is that even if you passed in just \"mypage\" for both values, the noramalization results in an empty string while the other one has a full string, and thus the test fails again.  \r\n\r\n\r\n", "url": "https://github.com/grpc/grpc-java/issues/2437", "user": "mavrukin", "labels": ["bug"], "created": "2016-11-23 21:01:22", "closed": "2016-12-02 15:45:57", "commits": {"4d4d4b386ee57495c488f98f26c561ab25bc3469": {"commitGHEventType": "referenced", "commitUser": "zhangkun83"}}, "ttf": 8.000277777777777, "commitsDetails": [{"commitHash": "4d4d4b386ee57495c488f98f26c561ab25bc3469", "commitGHEventType": "referenced", "commitUser": "zhangkun83", "commitParents": ["8ecf05409e299b55fc2b12ab78697cc430c24c4a"], "nameRev": "4d4d4b386ee57495c488f98f26c561ab25bc3469 tags/v1.1.0~114", "commitMessage": "core: improve error message for adding method (#2460)\n\nIssue: grpc/grpc-java/issues/2437\r\n", "commitDateTime": "2016-12-02 07:45:37", "authoredDateTime": "2016-12-02 07:45:37", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/ServerServiceDefinition.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ServerServiceDefinition.java", "spoonMethods": [{"spoonMethodName": "io.grpc.ServerServiceDefinition.Builder.addMethod(io.grpc.ServerMethodDefinition)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4d4d4b386ee57495c488f98f26c561ab25bc3469"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc"], "changesInPackagesSPOON": ["io.grpc.ServerServiceDefinition.Builder.addMethod(io.grpc.ServerMethodDefinition)"]}, {"title": "Handle java.lang.IllegalStateException properly", "body": "I'm currently using gRPC on Android, and it crashes due to the following exceptions:\n\nCase 1: \n\n```\nFatal Exception: java.lang.IllegalStateException: activeTransport still points to the delayedTransport. Seems transportShutdown() was not called.\n       at com.google.common.base.Preconditions.checkState(Preconditions.java:174)\n       at io.grpc.internal.TransportSet$TransportListener.transportTerminated(TransportSet.java:495)\n       at io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler.run(OkHttpClientTransport.java:759)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\n       at java.lang.Thread.run(Thread.java:818)\n```\n\nCase 2:\n\n```\nFatal Exception: java.lang.IllegalStateException\n       at com.google.common.base.Preconditions.checkState(Preconditions.java:159)\n       at io.grpc.internal.DelayedClientTransport.startBackoff(DelayedClientTransport.java:324)\n       at io.grpc.internal.TransportSet$2.run(TransportSet.java:297)\n       at io.grpc.internal.TransportSet$TransportListener.transportShutdown(TransportSet.java:477)\n       at io.grpc.okhttp.OkHttpClientTransport.startGoAway(OkHttpClientTransport.java:568)\n       at io.grpc.okhttp.OkHttpClientTransport.access$1400(OkHttpClientTransport.java:98)\n       at io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler.run(OkHttpClientTransport.java:752)\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\n       at java.lang.Thread.run(Thread.java:818)\n```\n\nIs there any way to handle these exceptions before crashing?\n\nThanks in advance.\n", "url": "https://github.com/grpc/grpc-java/issues/2363", "user": "ChangshinLee-NBT", "labels": ["android", "bug", "okhttp"], "created": "2016-10-21 09:13:31", "closed": "2019-02-20 19:19:22", "commits": {}, "ttf": 852.0002777777778, "commitsDetails": []}, {"title": "ServiceDescriptor lacks validation", "body": "ServerServiceDefinition has validation, but it seems that should actually be in ServiceDescriptor (moved or copied). The method names should match the service name, and there shouldn't be two methods with the same name.\n", "url": "https://github.com/grpc/grpc-java/issues/2357", "user": "ejona86", "labels": ["bug"], "created": "2016-10-19 23:49:15", "closed": "2017-01-21 01:22:14", "commits": {"a4e481b3f98d2689949c419c12d9f8beca046c87": {"commitGHEventType": "referenced", "commitUser": "carl-mastrangelo"}}, "ttf": 93.00027777777778, "commitsDetails": [{"commitHash": "a4e481b3f98d2689949c419c12d9f8beca046c87", "commitGHEventType": "referenced", "commitUser": "carl-mastrangelo", "commitParents": ["737cd16a38a7a2b2aa70e420a0505bdb487d1051"], "nameRev": "a4e481b3f98d2689949c419c12d9f8beca046c87 tags/v1.1.0~25", "commitMessage": "core: make ServiceDescriptor check input values\n\nFixes: #2357\r\n", "commitDateTime": "2017-01-20 17:22:14", "authoredDateTime": "2017-01-20 17:22:14", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/ServerServiceDefinition.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "core/src/main/java/io/grpc/ServiceDescriptor.java", "insertions": 18, "deletions": 0, "lines": 18}, {"filePath": "core/src/test/java/io/grpc/ServiceDescriptorTest.java", "insertions": 102, "deletions": 0, "lines": 102}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ServerServiceDefinition.java", "spoonMethods": []}, {"spoonFilePath": "ServiceDescriptor.java", "spoonMethods": [{"spoonMethodName": "io.grpc.ServiceDescriptor.validateMethodNames(java.lang.String,java.util.Collection)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.ServiceDescriptor", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ServiceDescriptorTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.ServiceDescriptorTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a4e481b3f98d2689949c419c12d9f8beca046c87"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 20, "deletions": 2, "lines": 22, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc"], "changesInPackagesSPOON": ["io.grpc.ServiceDescriptor", "io.grpc.ServiceDescriptor.validateMethodNames(java.lang.String,java.util.Collection)"]}, {"title": "Client-streaming call is hanging if service impl throws unexpected runtime exception", "body": "Client-streaming call is hanging if service implementation for the requestStreamObserver#onNext callback throws an unexpected runtime exception.\n", "url": "https://github.com/grpc/grpc-java/issues/2337", "user": "dapengzhang0", "labels": ["bug"], "created": "2016-10-13 17:34:36", "closed": "2016-10-14 03:13:42", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Error on run example step \"./gradlew installDist\"", "body": "Due to documentation  [http://www.grpc.io/docs/quickstart/java.html](url)\n1. clone git repo\n2. run command line `./gradlew installDist`\n\nstep number 2 does not work for me, get a compile errors about illegal characters... like `RouteGuideServer.java line 299` this line has greece characters.\n\nto resolve this issue I had to add `set DEFAULT_JVM_OPTS=\"-Dfile.encoding=utf-8\"`\ninto `gradlew.bat` file and execute command `./gradlew installDist` againe. Can it be resolve in git?\n", "url": "https://github.com/grpc/grpc-java/issues/2327", "user": "mnogono", "labels": ["bug"], "created": "2016-10-10 07:37:05", "closed": "2017-09-19 17:38:54", "commits": {}, "ttf": 344.0002777777778, "commitsDetails": []}, {"title": "Exception thrown from `OnReadyHandler` sometimes does not close stream", "body": "It seems like there should be a try-catch block around this line:\nhttps://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/internal/ServerImpl.java#L559\n", "url": "https://github.com/grpc/grpc-java/issues/2305", "user": "biran0079", "labels": ["bug"], "created": "2016-09-28 05:17:49", "closed": "2017-01-20 18:47:12", "commits": {"2bd74c5a921b45652cfae10355153d1ae6be2c67": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 114.00027777777778, "commitsDetails": [{"commitHash": "2bd74c5a921b45652cfae10355153d1ae6be2c67", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["f51316b84a70910ff580dd0b6dec357bced170ac"], "nameRev": "2bd74c5a921b45652cfae10355153d1ae6be2c67 tags/v1.1.0~29", "commitMessage": "core: cancel RPC when exception in server onReady\n\nFixes #2305\n", "commitDateTime": "2017-01-20 10:47:11", "authoredDateTime": "2016-09-28 10:59:09", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/ServerImpl.java", "insertions": 14, "deletions": 3, "lines": 17}, {"filePath": "core/src/test/java/io/grpc/internal/ServerImplTest.java", "insertions": 130, "deletions": 0, "lines": 130}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ServerImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ServerImpl.JumpToApplicationThreadServerStreamListener", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServerImpl.JumpToApplicationThreadServerStreamListener.setListener(io.grpc.internal.ServerStreamListener)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServerImpl.JumpToApplicationThreadServerStreamListener.onReady().4.runInContext()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "ServerImplTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ServerImplTest.messageRead_errorCancelsCall()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.messageRead_runtimeExceptionCancelsCall()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.halfClosed_errorCancelsCall()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.halfClosed_runtimeExceptionCancelsCall()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.onReady_errorCancelsCall()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.onReady_runtimeExceptionCancelsCall()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2bd74c5a921b45652cfae10355153d1ae6be2c67"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 14, "deletions": 3, "lines": 17, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.ServerImpl.JumpToApplicationThreadServerStreamListener.setListener(io.grpc.internal.ServerStreamListener)", "io.grpc.internal.ServerImpl.JumpToApplicationThreadServerStreamListener", "io.grpc.internal.ServerImpl.JumpToApplicationThreadServerStreamListener.onReady().4.runInContext()"]}, {"title": "Client side NPE when sending large number of concurrent requests", "body": "Both server and client use GRPC 1.0.\nClient log:\n\n```\nException in thread \"grpc-default-executor-95\" java.lang.NullPointerException: channel\n        at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:228)\n        at io.grpc.netty.WriteQueue.<init>(WriteQueue.java:76)\n        at io.grpc.netty.NettyClientHandler.startWriteQueue(NettyClientHandler.java:223)\n        at io.grpc.netty.NettyClientTransport.start(NettyClientTransport.java:172)\n        at io.grpc.internal.ForwardingConnectionClientTransport.start(ForwardingConnectionClientTransport.java:45)\n        at io.grpc.internal.TransportSet.startNewTransport(TransportSet.java:215)\n        at io.grpc.internal.TransportSet.obtainActiveTransport(TransportSet.java:188)\n        at io.grpc.internal.ManagedChannelImpl$3.getTransport(ManagedChannelImpl.java:637)\n        at io.grpc.internal.ManagedChannelImpl$3.getTransport(ManagedChannelImpl.java:579)\n        at \n......\n```\n\nServer log:\n\n```\nWARN  [2016-09-22 21:28:41,870] io.netty.channel.DefaultChannelPipeline: An exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception. [client=null]\n! java.io.IOException: Too many open files in system\n! at sun.nio.ch.ServerSocketChannelImpl.accept0(Native Method) ~[na:1.8.0_60]\n! at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:422) ~[na:1.8.0_60]\n! at sun.nio.ch.ServerSocketChannelImpl.accept(ServerSocketChannelImpl.java:250) ~[na:1.8.0_60]\n! at io.netty.channel.socket.nio.NioServerSocketChannel.doReadMessages(NioServerSocketChannel.java:140) ~[netty.jar:4.1.5.Final]\n! at io.netty.channel.nio.AbstractNioMessageChannel$NioMessageUnsafe.read(AbstractNioMessageChannel.java:75) ~[netty.jar:4.1.5.Final]\n! at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:610) [netty.jar:4.1.5.Final]\n! at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:551) [netty.jar:4.1.5.Final]\n! at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:465) [netty.jar:4.1.5.Final]\n! at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:437) [netty.jar:4.1.5.Final]\n! at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:873) [netty.jar:4.1.5.Final]\n! at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144) [netty.jar:4.1.5.Final]\n! at java.lang.Thread.run(Thread.java:745) [na:1.8.0_60]\n```\n", "url": "https://github.com/grpc/grpc-java/issues/2296", "user": "biran0079", "labels": ["bug", "netty"], "created": "2016-09-22 21:29:59", "closed": "2017-04-06 18:11:49", "commits": {"3818087aa4f69399ad32f49827a129cb7d7bb67c": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 195.00027777777777, "commitsDetails": [{"commitHash": "3818087aa4f69399ad32f49827a129cb7d7bb67c", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["123bb315e9c9158ec4a69fbd03d664f4aeb2d63e"], "nameRev": "3818087aa4f69399ad32f49827a129cb7d7bb67c tags/v1.3.0~24", "commitMessage": "netty: Handle channel creation failure\n\nSomething \"very bad\" has happened, but without grpc propagating the\r\ncause from the Future it is very difficult to figure out what.\r\n\r\nFixes #2296", "commitDateTime": "2017-04-06 11:11:49", "authoredDateTime": "2017-04-06 11:11:49", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/FailingClientStream.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyClientTransport.java", "insertions": 41, "deletions": 1, "lines": 42}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java", "insertions": 64, "deletions": 0, "lines": 64}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FailingClientStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.FailingClientStream", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientTransport.ping(io.grpc.netty.PingCallback,java.util.concurrent.Executor).1", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).3", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).4", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).5", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata,io.grpc.CallOptions,io.grpc.internal.StatsTraceContext).2", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.ping(io.grpc.netty.PingCallback,java.util.concurrent.Executor).1.operationComplete(io.netty.channel.ChannelFuture)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.ping(io.grpc.netty.PingCallback,java.util.concurrent.Executor)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata,io.grpc.CallOptions,io.grpc.internal.StatsTraceContext)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.shutdown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.getAttributes_negotiatorHandler().1", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.CantConstructChannel", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.CantConstructChannelError", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransportTest.failingToConstructChannelShouldFailGracefully()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3818087aa4f69399ad32f49827a129cb7d7bb67c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 42, "deletions": 2, "lines": 44, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 15, "UPD": 6, "INS": 8, "MOV": 1, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 12}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal", "netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.internal.FailingClientStream", "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).3", "io.grpc.netty.NettyClientTransport.ping(io.grpc.netty.PingCallback,java.util.concurrent.Executor)", "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).4", "io.grpc.netty.NettyClientTransport.ping(io.grpc.netty.PingCallback,java.util.concurrent.Executor).1", "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener)", "io.grpc.netty.NettyClientTransport", "io.grpc.netty.NettyClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata,io.grpc.CallOptions,io.grpc.internal.StatsTraceContext).2", "io.grpc.netty.NettyClientTransport.shutdown()", "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).5", "io.grpc.netty.NettyClientTransport.ping(io.grpc.netty.PingCallback,java.util.concurrent.Executor).1.operationComplete(io.netty.channel.ChannelFuture)", "io.grpc.netty.NettyClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata,io.grpc.CallOptions,io.grpc.internal.StatsTraceContext)"]}, {"title": "QPS client using much more memory than server.", "body": "I did some benchmarking using the `qps_client` and `qps_server`. Zero bytes payload. I enabled `verbose:gc`. \n\nWhen running with 8 channels and 250 concurrent RPCs. On the client, after a young GC our live heap is ~290MiB. The GC logs have a very low volatility +/- 1MiB.\n\nDoubling the concurrent streams to 500, on the client, the live heap more than doubles to 560MiB.\nOn the server it increases to ~140MiB. Doubling the concurrent streams to 1000, on the client, the live heap again doubles to ~1.1GB and on the server it increases to ~170MB.\n\nI then thought it might be due to the client having to keep stream state  around much longer (until the server responds) and so I enabled streaming rpcs (with 8 channels, 1000 concurrent). Live heap on the client stays the same, on the server it drops to ~30MiB. The used heap on the client is about 2.3GiB before the GC, and 1.1GiB after. The used heap on the server is about 1.3GB before the GC and 30MiB after. So it seems like we keep an additional GiB of data around on the client (or 130KiB per stream).\n\nThat data seems to be allocated at the beginning. The first 3 GCs and the last GC on the client\n\n```\n(before GC -> after GC)\n1GB -> 800.67MB\n1.78GB -> 1.08GB\n2.08GB -> 1.09GB\n...\n2.4GB -> 1.09GB\n```\n\nThe first 3 GCs and the last GC on the server\n\n```\n(before GC -> after GC)\n1.31GB -> 14.95MB\n1.32GB -> 13.53MB\n1.31GB -> 12.25MB\n...\n1.35GB -> 31.30MB\n```\n\nThe increased memory usage on the client is not due to histograms, cause I commented out the line recording latencies.\n\nI wonder why that is? Is it possibly a small memory leak per RPC? Is that specific to the QPS client or gRPC? Any ideas?\n", "url": "https://github.com/grpc/grpc-java/issues/2278", "user": "buchgr", "labels": ["bug", "netty", "performance"], "created": "2016-09-16 12:05:45", "closed": "2017-06-01 20:37:27", "commits": {}, "ttf": 258.0002777777778, "commitsDetails": []}, {"title": "OutOfMemoryError getting swallowed by SerializingExecutor", "body": "My application throws OutOfMemoryError and got swallowed by following code,\nhttps://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/internal/SerializingExecutor.java#L156\n\nI hope to handle OutOfMemoryError in my default uncaught exception handler, but it is not happening.\n\nIs this a bug?\n", "url": "https://github.com/grpc/grpc-java/issues/2270", "user": "biran0079", "labels": ["bug"], "created": "2016-09-14 19:53:19", "closed": "2017-06-12 21:49:56", "commits": {}, "ttf": 271.0002777777778, "commitsDetails": []}, {"title": "Deadlock with TransportSet", "body": "Hello,\n\nI was testing Grpc with RoundRobinLB and a custom NameResolver when this deadlock happened:\n\n> Found one Java-level deadlock:\n> \n> \"grpc-timer-0\":\n>   waiting to lock monitor 0x00007fa1b00062c8 (object 0x00000007397d7f88, a java.lang.Object),\n>   which is held by \"main\"\n> \"main\":\n>   waiting to lock monitor 0x00007fa1800087f8 (object 0x00000007397d7e00, a java.lang.Object),\n>   which is held by \"grpc-timer-0\"\n> \n> \"grpc-timer-0\":\n>   at io.grpc.internal.DelayedClientTransport.hasPendingStreams(DelayedClientTransport.java:284)\n> - waiting to lock <0x00000007397d7f88> (a java.lang.Object)\n>   at io.grpc.internal.TransportSet$1EndOfCurrentBackoff.run(TransportSet.java:246)\n> - locked <0x00000007397d7e00> (a java.lang.Object)\n>   at io.grpc.internal.LogExceptionRunnable.run(LogExceptionRunnable.java:56)\n>   at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n>   at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n>   at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n>   at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n>   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n>   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n>   at java.lang.Thread.run(Thread.java:745)\n> \n> \"main\":\n>   at io.grpc.internal.InUseStateAggregator.updateObjectInUse(InUseStateAggregator.java:50)\n> - waiting to lock <0x00000007397d7e00> (a java.lang.Object)\n>   at io.grpc.internal.TransportSet$BaseTransportListener.transportInUse(TransportSet.java:357)\n>   at io.grpc.internal.DelayedClientTransport.newStream(DelayedClientTransport.java:128)\n> - locked <0x00000007397d7f88> (a java.lang.Object)\n>   at io.grpc.internal.ClientCallImpl.start(ClientCallImpl.java:214)\n>   at io.grpc.stub.ClientCalls.startCall(ClientCalls.java:273)\n>   at io.grpc.stub.ClientCalls.asyncUnaryRequestCall(ClientCalls.java:252)\n>   at io.grpc.stub.ClientCalls.futureUnaryCall(ClientCalls.java:189)\n>   at io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:135)\n>   at [...]remote.TestGrpc$TestBlockingStub.sayHello(TestGrpc.java:156)\n\nI don't know if it may relate to my own code or if the issue is on grpc side.\n", "url": "https://github.com/grpc/grpc-java/issues/2246", "user": "RobinDevTW", "labels": ["bug"], "created": "2016-09-09 09:58:47", "closed": "2016-09-12 18:15:17", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Detect zero-message response to unary request on server-side", "body": "It [appears](https://github.com/grpc/grpc-java/blob/v1.0.0/core/src/main/java/io/grpc/internal/ServerCallImpl.java#L177) that a server can respond OK to a unary RPC without any detection on the server-side. It'd be nice to throw an exception if close(OK) is called without first sending a message for a UNARY response, although that may be against our API stability. At the very least, we should convert the OK into a Status saying the server is broken.\n\nAs reported in grpc/grpc#8010.\n", "url": "https://github.com/grpc/grpc-java/issues/2243", "user": "ejona86", "labels": ["bug"], "created": "2016-09-08 22:20:47", "closed": "2017-06-15 16:33:02", "commits": {"532450996aa2b8efdbf9ee302855e554d2ecd79d": {"commitGHEventType": "referenced", "commitUser": "zpencer"}}, "ttf": 279.0002777777778, "commitsDetails": [{"commitHash": "532450996aa2b8efdbf9ee302855e554d2ecd79d", "commitGHEventType": "referenced", "commitUser": "zpencer", "commitParents": ["d42a4b24b990aceb241ad4810318a2b33c1664d3"], "nameRev": "532450996aa2b8efdbf9ee302855e554d2ecd79d tags/v1.5.0~49", "commitMessage": "core: detect invalid states on server side (eg zero responses for unary) (#3068)\n\nThe current check in ServerCallImpl is theoretically unsafe (#3059). Move that check into the stub, and expand the unit tests to cover other interesting edge cases on the server side:\r\n\r\nclient sends one, but zero requests received at onHalfClose\r\nclient sends one, but > 1 requests received at onHalfClose\r\nserver sends one, but zero responses sent at onComplete\r\nserver sends one, but > 1 responses sent via onNext\r\nfixes #2243\r\nfixes #3059", "commitDateTime": "2017-06-15 09:33:01", "authoredDateTime": "2017-06-15 09:33:01", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/ServerCallImpl.java", "insertions": 29, "deletions": 11, "lines": 40}, {"filePath": "core/src/main/java/io/grpc/internal/ServerStream.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "core/src/test/java/io/grpc/internal/ServerCallImplTest.java", "insertions": 131, "deletions": 28, "lines": 159}, {"filePath": "examples/src/test/java/io/grpc/examples/routeguide/RouteGuideClientTest.java", "insertions": 0, "deletions": 46, "lines": 46}, {"filePath": "stub/src/main/java/io/grpc/stub/ServerCalls.java", "insertions": 33, "deletions": 10, "lines": 43}, {"filePath": "stub/src/test/java/io/grpc/stub/ServerCallsTest.java", "insertions": 100, "deletions": 10, "lines": 110}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ServerCallImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ServerCallImpl.ServerStreamListenerImpl", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServerCallImpl.ServerStreamListenerImpl.messageRead(java.io.InputStream)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ServerCallImpl", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImpl.internalClose(io.grpc.Status)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImpl.sendMessage(java.lang.Object)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImpl.close(io.grpc.Status,io.grpc.Metadata)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ServerStream.java", "spoonMethods": []}, {"spoonFilePath": "ServerCallImplTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ServerCallImplTest", "TOT": 7, "UPD": 3, "INS": 3, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.streamListener_messageRead()", "TOT": 18, "UPD": 9, "INS": 1, "MOV": 7, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.streamListener_messageRead_unaryFailsOnMultiple()", "TOT": 28, "UPD": 15, "INS": 0, "MOV": 11, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.setUp()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.streamListener_messageRead_onlyOnce()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.streamListener_unexpectedRuntimeException()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.sendMessage_serverSendsOne_closeOnSecondCall_unary()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.sendMessage_serverSendsOne_closeOnSecondCall_clientStreaming()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.sendMessage_serverSendsOne_closeOnSecondCall(io.grpc.MethodDescriptor)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.sendMessage_serverSendsOne_closeOnSecondCall_appRunToCompletion_unary()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.sendMessage_serverSendsOne_closeOnSecondCall_appRunToCompletion_clientStreaming()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.sendMessage_serverSendsOne_closeOnSecondCall_appRunToCompletion(io.grpc.MethodDescriptor)", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.serverSendsOne_okFailsOnMissingResponse_unary()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.serverSendsOne_okFailsOnMissingResponse_clientStreaming()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.serverSendsOne_okFailsOnMissingResponse(io.grpc.MethodDescriptor)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerCallImplTest.serverSendsOne_canErrorWithoutResponse()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RouteGuideClientTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.examples.routeguide.RouteGuideClientTest.recordRoute_serverError().8", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.examples.routeguide.RouteGuideClientTest.routeChat_simpleResponse().9", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.examples.routeguide.RouteGuideClientTest.routeChat_echoResponse().10", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.examples.routeguide.RouteGuideClientTest.routeChat_errorResponse().11", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.examples.routeguide.RouteGuideClientTest.recordRoute_wrongResponse()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ServerCalls.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.ServerCalls.asyncUnaryRequestCall(io.grpc.stub.ServerCalls$UnaryRequestMethod).1.startCall(io.grpc.ServerCall,io.grpc.Metadata).1.onHalfClose()", "TOT": 13, "UPD": 1, "INS": 3, "MOV": 6, "DEL": 3}, {"spoonMethodName": "io.grpc.stub.ServerCalls", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCalls.asyncUnaryRequestCall(io.grpc.stub.ServerCalls$UnaryRequestMethod).1.startCall(io.grpc.ServerCall,io.grpc.Metadata)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCalls.asyncUnaryRequestCall(io.grpc.stub.ServerCalls$UnaryRequestMethod).1.startCall(io.grpc.ServerCall,io.grpc.Metadata).1", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCalls.asyncUnaryRequestCall(io.grpc.stub.ServerCalls$UnaryRequestMethod).1.startCall(io.grpc.ServerCall,io.grpc.Metadata).1.onMessage(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ServerCallsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.ServerCallsTest", "TOT": 4, "UPD": 3, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCallsTest.ServerCallRecorder", "TOT": 8, "UPD": 2, "INS": 4, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.stub.ServerCallsTest.ServerCallRecorder.sendMessage(java.lang.Integer)", "TOT": 4, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCallsTest.clientSendsOne_errorMissingRequest_unary()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCallsTest.clientSendsOne_errorMissingRequest_serverStreaming()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCallsTest.clientSendsOne_errorTooManyRequests_unary()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ServerCallsTest.clientSendsOne_errorTooManyRequests_serverStreaming()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Possible bug in Status code parser", "body": "```\n  public static Status fromCodeValue(int codeValue) {\n    if (codeValue < 0 || codeValue > STATUS_LIST.size()) {\n      return UNKNOWN.withDescription(\"Unknown code \" + codeValue);\n    } else {\n      return STATUS_LIST.get(codeValue);\n    }\n  }\n```\n\nIt seems that a `codeValue` of 17 would not be greater than the list size of 17, and would explode.\n", "url": "https://github.com/grpc/grpc-java/issues/2237", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2016-09-07 22:20:23", "closed": "2016-09-13 20:14:40", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Android HelloWorld example release build is broken", "body": "When trying to send the RPC it crashes with:\n\n```\n08-26 12:45:47.761  6837  6837 E AndroidRuntime: java.lang.NullPointerException: Attempt to invoke virtual method 'io.grpc.l io.grpc.l.a()' on a null object reference\n08-26 12:45:47.761  6837  6837 E AndroidRuntime:    at io.grpc.helloworldexample.b.a(Unknown Source)\n08-26 12:45:47.761  6837  6837 E AndroidRuntime:    at io.grpc.helloworldexample.b.onPostExecute(Unknown Source)\n08-26 12:45:47.761  6837  6837 E AndroidRuntime:    at android.os.AsyncTask.finish(AsyncTask.java:651)\n...\n```\n\nAfter fixing the NPE (caused by calling `shutdown()` on a `null` `ManagedChannel`), then it gracefully fails with:\n\n```\nFailed... :\nio.grpc.p: No functional channel service provider found. Try adding a dependency on the grpc-okhttp or grpc-netty artifact\n```\n\nokhttp is not included after ProGuard. However, android-interop-testing doesn't suffer from the same issue, and I don't understand how. For android-interop-testing, I do see OkHttpChannelBuilder in mapping.txt, but I don't see OkHttpChannelProvider. Maybe it is being inlined. But I don't know why it would be included for one application but not for the other. I do know that android-interop-testing includes a cast to OkHttpChannelBuilder, but it seems like the provider should still break. The only reference to OkHttpChannelProvider in a `Class.forName()` in ManagedChannelProvider.\n\nCC @zsurocking \n", "url": "https://github.com/grpc/grpc-java/issues/2207", "user": "ejona86", "labels": ["android", "bug"], "created": "2016-08-26 20:12:38", "closed": "2017-01-23 17:11:09", "commits": {"06c40dccc38647d09add356cf4d3bc15be99c3f2": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 149.00027777777777, "commitsDetails": [{"commitHash": "06c40dccc38647d09add356cf4d3bc15be99c3f2", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["a4e481b3f98d2689949c419c12d9f8beca046c87"], "nameRev": "06c40dccc38647d09add356cf4d3bc15be99c3f2 tags/v1.1.0~24", "commitMessage": "android: Fix ProGuard rules in Android apps\n\nFixes #2207. This is actually a workaround. Ideally users shouldn't need\r\nto -keep classes, but it's a bit risky to fix the real issue before 1.1.\r\nThe further fix will be done as part of #2633.\r\n\r\nThe interop app's build.gradle change is necessary to compile with newer\r\nGradle versions. The com.google.errorprone.annotations was necessary in\r\norder to prevent annotation warnings from failing the build.", "commitDateTime": "2017-01-23 09:11:09", "authoredDateTime": "2017-01-23 09:11:09", "commitGitStats": [{"filePath": "android-interop-testing/app/proguard-rules.pro", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "android-interop-testing/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "examples/android/helloworld/app/proguard-rules.pro", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "examples/android/routeguide/app/proguard-rules.pro", "insertions": 5, "deletions": 2, "lines": 7}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "gRPC code generator needs to handle reserved words in method names", "body": "When defining an RPC like:\n\n```\nservice Foo {\n  rpc Import(ImportRequest) returns (ImportResponse) {};\n}\n```\n\nThe method Import gets translated to a java keyword.    When should adjust it by adding an underscore (prepended?)  to allow it to compile.\n", "url": "https://github.com/grpc/grpc-java/issues/2195", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2016-08-24 15:52:49", "closed": "2018-04-05 23:45:20", "commits": {}, "ttf": 589.0002777777778, "commitsDetails": []}, {"title": "metadata is lost when server sends StatusRuntimeException", "body": "I would like to send a StatusRuntimeException to the client with some information saved in metadata. like this:\n\n``` java\nMetadata trailers = new Metadata();\n trailers.put(EXTENDED_STATUS_KEY, \"10001\");\nStatusRuntimeException e = new StatusRuntimeException(Status.ABORTED, trailers);\n throw e;\n```\n\nBut when I caught the exception in the client, I found that the metadata in the exception didn't contain this information. I checked the code and found that in class Server.JumpToApplicationThreadServerStreamListener:\n\n``` java\n    public void halfClosed() {\n      callExecutor.execute(new ContextRunnable(context) {\n        @Override\n        public void runInContext() {\n          try {\n            getListener().halfClosed();\n          } catch (RuntimeException e) {\n            internalClose(Status.fromThrowable(e), new Metadata());\n            throw e;\n          } catch (Throwable t) {\n            internalClose(Status.fromThrowable(t), new Metadata());\n            throw new RuntimeException(t);\n          }\n        }\n      });\n    }\n```\n\nIn this method, `Status.fromThrowable(e)` will convert this exception into Status instance, but it won't reuse the metadata saved in the exception. Instead, it create a new empty Metadata.\n\nSo in this way, all the data saved in the metadata of StatusRuntimeException is lost.\n\nYet in class Status I found there is a new method `Metadata trailersFromThrowable(Throwable t)` and it is used in class ServerCalls:\n\n``` java\npublic void onError(Throwable t) {\n      Metadata metadata = Status.trailersFromThrowable(t);\n      if (metadata == null) {\n        metadata = new Metadata();\n      }\n      call.close(Status.fromThrowable(t), metadata);\n    }\n```\n\nI think this is the correct way to handle and pass metadata. \n\nPlease help to confirm it. If so, I would like to pull a request to fix it. \n\nThank you !\n", "url": "https://github.com/grpc/grpc-java/issues/2189", "user": "skyao", "labels": ["bug"], "created": "2016-08-20 13:19:04", "closed": "2017-06-19 18:15:22", "commits": {"2b1eee90e5bd7f5ad905e34f73f2040d6c9a3568": {"commitGHEventType": "referenced", "commitUser": "zpencer"}}, "ttf": 303.0002777777778, "commitsDetails": [{"commitHash": "2b1eee90e5bd7f5ad905e34f73f2040d6c9a3568", "commitGHEventType": "referenced", "commitUser": "zpencer", "commitParents": ["dda8f547e73087670396bd7fcaf19f23034c35fd"], "nameRev": "2b1eee90e5bd7f5ad905e34f73f2040d6c9a3568 tags/v1.5.0~41", "commitMessage": "core: Do not leak server state when application callbacks throw exceptions (#3064)\n\nToday JumpToApplicationThreadServerStreamListener leaks server state by transmitting details about uncaught StatusRuntimeException throwables to the client. This is a security problem.\r\n\r\nThis PR ensures that uncaught exceptions always close the ServerCall without leaking any state information. Users running in a trusted environment who want to transmit error details can install the TransmitStatusRuntimeExceptionInterceptor.\r\n\r\nfixes #2189", "commitDateTime": "2017-06-19 11:15:22", "authoredDateTime": "2017-06-19 11:15:22", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/ServerImpl.java", "insertions": 8, "deletions": 8, "lines": 16}, {"filePath": "core/src/main/java/io/grpc/util/TransmitStatusRuntimeExceptionInterceptor.java", "insertions": 264, "deletions": 0, "lines": 264}, {"filePath": "core/src/test/java/io/grpc/internal/ServerImplTest.java", "insertions": 15, "deletions": 12, "lines": 27}, {"filePath": "core/src/test/java/io/grpc/util/UtilServerInterceptorsTest.java", "insertions": 118, "deletions": 0, "lines": 118}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Occasional IllegalStateException during shutdown after upgrading to 1.0.0", "body": "Hi, after upgrading from 0.15.0 to 1.0.0, I'm seeing occasional `IllegalStateException` during shutdown (makes my tests fail which is why I notice).  I had not seen this previously with 0.15.0.\n\n```\njava.lang.IllegalStateException: null\n    at com.google.common.base.Preconditions.checkState(Preconditions.java:159)\n    at io.grpc.internal.DelayedClientTransport.startBackoff(DelayedClientTransport.java:323)\n    at io.grpc.internal.TransportSet$2.run(TransportSet.java:281)\n    at io.grpc.internal.TransportSet$TransportListener.transportShutdown(TransportSet.java:461)\n    at io.grpc.netty.ClientTransportLifecycleManager.notifyShutdown(ClientTransportLifecycleManager.java:68)\n    at io.grpc.netty.ClientTransportLifecycleManager.notifyTerminated(ClientTransportLifecycleManager.java:84)\n    at io.grpc.netty.NettyClientTransport$4.operationComplete(NettyClientTransport.java:181)\n    at io.grpc.netty.NettyClientTransport$4.operationComplete(NettyClientTransport.java:175)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:514)\n    at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:488)\n    at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:427)\n    at io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:120)\n    at io.netty.channel.DefaultChannelPromise.setFailure(DefaultChannelPromise.java:87)\n    at io.grpc.netty.ProtocolNegotiators$AbstractBufferingHandler.fail(ProtocolNegotiators.java:436)\n    at io.grpc.netty.ProtocolNegotiators$AbstractBufferingHandler.exceptionCaught(ProtocolNegotiators.java:376)\n    at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:295)\n    at io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:274)\n    at io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:266)\n    at io.grpc.netty.NettyClientTransport$3.operationComplete(NettyClientTransport.java:165)\n    at io.grpc.netty.NettyClientTransport$3.operationComplete(NettyClientTransport.java:156)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:514)\n    at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:507)\n    at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:486)\n    at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:427)\n    at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:129)\n    at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)\n    at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:588)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:512)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:426)\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:398)\n    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nI was able to capture under a debugger and the existing `backoffStatus` was\n\n```\nStatus{code=UNAVAILABLE, description=Channel in TRANSIENT_FAILURE state, cause=io.grpc.StatusRuntimeException: UNAVAILABLE}\n```\n\nLet me know if there's additional info I can provide to help diagnose.\n\nThanks,\nTrask\n", "url": "https://github.com/grpc/grpc-java/issues/2188", "user": "trask", "labels": ["bug"], "created": "2016-08-20 00:40:58", "closed": "2016-10-19 17:01:19", "commits": {"40c5700cc3996f01304d114b113c76e90bb6b610": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "22de0d4a7397553dd2a8c59c3428c6b83b2233b6": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 60.000277777777775, "commitsDetails": [{"commitHash": "40c5700cc3996f01304d114b113c76e90bb6b610", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["141eed5ed07f3cf969948c5b25a6de01b2bdb3de"], "nameRev": "40c5700cc3996f01304d114b113c76e90bb6b610 tags/v1.1.0~192", "commitMessage": "core: fix race condition for TransportSet scheduleBackoff\n\nTrying to fix issue  #2188\r\n- Try to keep avoiding the lock issue #2152 and also to avoid race condition #2188.\r\n- Add `checkState` for `endBackoff()`. Could help hit and identify any potential issue related to #2188.\r\n- Make sure `startBackoff()` and `endBackoff()` invoked in the right order.\r\n- Not to schedule endBackoff if transportSet has been shutdown.", "commitDateTime": "2016-09-20 11:32:38", "authoredDateTime": "2016-09-20 11:32:38", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "insertions": 12, "deletions": 3, "lines": 15}, {"filePath": "core/src/main/java/io/grpc/internal/TransportSet.java", "insertions": 29, "deletions": 27, "lines": 56}, {"filePath": "core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "core/src/test/java/io/grpc/internal/TransportSetTest.java", "insertions": 34, "deletions": 0, "lines": 34}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DelayedClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransport.startBackoff(io.grpc.Status).3", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.DelayedClientTransport.startBackoff(io.grpc.Status)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.DelayedClientTransport.endBackoff()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TransportSet.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.TransportSet.scheduleBackoff(io.grpc.internal.DelayedClientTransport,io.grpc.Status)", "TOT": 10, "UPD": 1, "INS": 1, "MOV": 5, "DEL": 3}, {"spoonMethodName": "io.grpc.internal.TransportSet.TransportListener.transportShutdown(io.grpc.Status)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.TransportSet.scheduleBackoff(io.grpc.internal.DelayedClientTransport,io.grpc.Status).2.run()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DelayedClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransportTest.startBackoff_DoNothingIfAlreadyShutDown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TransportSetTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.TransportSetTest.scheduleBackoff_DoNotScheduleEndOfBackoffIfAlreadyShutdown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "22de0d4a7397553dd2a8c59c3428c6b83b2233b6", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["7b818d8db5e0f03bab93dcaf40d03605ab327e83"], "nameRev": "22de0d4a7397553dd2a8c59c3428c6b83b2233b6 tags/v1.0.2~7", "commitMessage": "core: fix race condition for TransportSet scheduleBackoff\n\nTrying to fix issue  #2188\r\n- Try to keep avoiding the lock issue #2152 and also to avoid race condition #2188.\r\n- Add `checkState` for `endBackoff()`. Could help hit and identify any potential issue related to #2188.\r\n- Make sure `startBackoff()` and `endBackoff()` invoked in the right order.\r\n- Not to schedule endBackoff if transportSet has been shutdown.", "commitDateTime": "2016-10-25 16:47:28", "authoredDateTime": "2016-10-25 16:47:28", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "insertions": 12, "deletions": 3, "lines": 15}, {"filePath": "core/src/main/java/io/grpc/internal/TransportSet.java", "insertions": 29, "deletions": 27, "lines": 56}, {"filePath": "core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "core/src/test/java/io/grpc/internal/TransportSetTest.java", "insertions": 34, "deletions": 0, "lines": 34}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DelayedClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransport.startBackoff(io.grpc.Status).3", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.DelayedClientTransport.startBackoff(io.grpc.Status)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.DelayedClientTransport.endBackoff()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TransportSet.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.TransportSet.scheduleBackoff(io.grpc.internal.DelayedClientTransport,io.grpc.Status)", "TOT": 10, "UPD": 1, "INS": 1, "MOV": 5, "DEL": 3}, {"spoonMethodName": "io.grpc.internal.TransportSet.TransportListener.transportShutdown(io.grpc.Status)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.TransportSet.scheduleBackoff(io.grpc.internal.DelayedClientTransport,io.grpc.Status).2.run()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DelayedClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransportTest.startBackoff_DoNothingIfAlreadyShutDown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TransportSetTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.TransportSetTest.scheduleBackoff_DoNotScheduleEndOfBackoffIfAlreadyShutdown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Clients should RST_STREAM(NO_ERROR) if not half-closed when receiving trailers", "body": "This is the client-side version of #2162, to handle the case when intermediaries are in play. Note that the RST_STREAM can be elided if the server sent a RST_STREAM after the EOS=true. But the client can't assume the server will send such a RST_STREAM.\n", "url": "https://github.com/grpc/grpc-java/issues/2163", "user": "ejona86", "labels": ["bug", "cross-language-gotchas"], "created": "2016-08-16 16:09:00", "closed": "2018-08-09 22:17:15", "commits": {}, "ttf": 723.0002777777778, "commitsDetails": []}, {"title": "Deadlock found in TransportSet", "body": "When running benchmarks where the client started up faster than the server, The first few calls failed as unavailable.  Our internal deadlock detector seems to think there is a deadlock around here:\n\n```\nDeadlock(s) found:\n\"grpc-client-net-1-32\" daemon prio=5 Id=175 BLOCKED on java.lang.Object@7eeb2e6b owned by \"grpc-client-app-5\" Id=119\n io.grpc.internal.DelayedClientTransport.startBackoff(DelayedClientTransport.java:323)\n io.grpc.internal.TransportSet.scheduleBackoff(TransportSet.java:235)\n io.grpc.internal.TransportSet.access$1500(TransportSet.java:61)\n io.grpc.internal.TransportSet$TransportListener.transportShutdown(TransportSet.java:440)\n io.grpc.netty.ClientTransportLifecycleManager.notifyShutdown(ClientTransportLifecycleManager.java:68)\n io.grpc.netty.ClientTransportLifecycleManager.notifyTerminated(ClientTransportLifecycleManager.java:84)\n io.grpc.netty.NettyClientTransport$4.operationComplete(NettyClientTransport.java:181)\n io.grpc.netty.NettyClientTransport$4.operationComplete(NettyClientTransport.java:175)\n io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:514)\n io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:488)\n io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:427)\n io.netty.util.concurrent.DefaultPromise.setFailure(DefaultPromise.java:120)\n io.netty.channel.DefaultChannelPromise.setFailure(DefaultChannelPromise.java:87)\n io.grpc.netty.ProtocolNegotiators$AbstractBufferingHandler.fail(ProtocolNegotiators.java:436)\n io.grpc.netty.ProtocolNegotiators$AbstractBufferingHandler.exceptionCaught(ProtocolNegotiators.java:376)\n io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:295)\n io.netty.channel.AbstractChannelHandlerContext.invokeExceptionCaught(AbstractChannelHandlerContext.java:274)\n io.netty.channel.AbstractChannelHandlerContext.fireExceptionCaught(AbstractChannelHandlerContext.java:266)\n io.grpc.netty.NettyClientTransport$3.operationComplete(NettyClientTransport.java:165)\n io.grpc.netty.NettyClientTransport$3.operationComplete(NettyClientTransport.java:156)\n io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:514)\n io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:507)\n io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:486)\n io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:427)\n io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:129)\n io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)\n io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)\n io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:588)\n io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:512)\n io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:426)\n io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:398)\n io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:877)\n io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\n java.lang.Thread.run(Thread.java:745)\n\n\n\"grpc-client-app-5\" daemon prio=5 Id=119 BLOCKED on java.lang.Object@17902cf5 owned by \"grpc-client-net-1-32\" Id=175\n io.grpc.internal.InUseStateAggregator.updateObjectInUse(InUseStateAggregator.java:51)\n io.grpc.internal.TransportSet$BaseTransportListener.transportInUse(TransportSet.java:345)\n io.grpc.internal.DelayedClientTransport.newStream(DelayedClientTransport.java:128)\n io.grpc.internal.DelayedClientTransport$PendingStream.createRealStream(DelayedClientTransport.java:382)\n io.grpc.internal.DelayedClientTransport$PendingStream.access$100(DelayedClientTransport.java:369)\n io.grpc.internal.DelayedClientTransport$2.run(DelayedClientTransport.java:261)\n java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1402)\n java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)\n java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)\n java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)\n java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)\n\n```\n", "url": "https://github.com/grpc/grpc-java/issues/2152", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2016-08-10 01:19:48", "closed": "2016-08-10 17:02:32", "commits": {"40c5700cc3996f01304d114b113c76e90bb6b610": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "22de0d4a7397553dd2a8c59c3428c6b83b2233b6": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "40c5700cc3996f01304d114b113c76e90bb6b610", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["141eed5ed07f3cf969948c5b25a6de01b2bdb3de"], "nameRev": "40c5700cc3996f01304d114b113c76e90bb6b610 tags/v1.1.0~192", "commitMessage": "core: fix race condition for TransportSet scheduleBackoff\n\nTrying to fix issue  #2188\r\n- Try to keep avoiding the lock issue #2152 and also to avoid race condition #2188.\r\n- Add `checkState` for `endBackoff()`. Could help hit and identify any potential issue related to #2188.\r\n- Make sure `startBackoff()` and `endBackoff()` invoked in the right order.\r\n- Not to schedule endBackoff if transportSet has been shutdown.", "commitDateTime": "2016-09-20 11:32:38", "authoredDateTime": "2016-09-20 11:32:38", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "insertions": 12, "deletions": 3, "lines": 15}, {"filePath": "core/src/main/java/io/grpc/internal/TransportSet.java", "insertions": 29, "deletions": 27, "lines": 56}, {"filePath": "core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "core/src/test/java/io/grpc/internal/TransportSetTest.java", "insertions": 34, "deletions": 0, "lines": 34}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DelayedClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransport.startBackoff(io.grpc.Status).3", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.DelayedClientTransport.startBackoff(io.grpc.Status)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.DelayedClientTransport.endBackoff()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TransportSet.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.TransportSet.scheduleBackoff(io.grpc.internal.DelayedClientTransport,io.grpc.Status)", "TOT": 10, "UPD": 1, "INS": 1, "MOV": 5, "DEL": 3}, {"spoonMethodName": "io.grpc.internal.TransportSet.TransportListener.transportShutdown(io.grpc.Status)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.TransportSet.scheduleBackoff(io.grpc.internal.DelayedClientTransport,io.grpc.Status).2.run()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DelayedClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransportTest.startBackoff_DoNothingIfAlreadyShutDown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TransportSetTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.TransportSetTest.scheduleBackoff_DoNotScheduleEndOfBackoffIfAlreadyShutdown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "22de0d4a7397553dd2a8c59c3428c6b83b2233b6", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["7b818d8db5e0f03bab93dcaf40d03605ab327e83"], "nameRev": "22de0d4a7397553dd2a8c59c3428c6b83b2233b6 tags/v1.0.2~7", "commitMessage": "core: fix race condition for TransportSet scheduleBackoff\n\nTrying to fix issue  #2188\r\n- Try to keep avoiding the lock issue #2152 and also to avoid race condition #2188.\r\n- Add `checkState` for `endBackoff()`. Could help hit and identify any potential issue related to #2188.\r\n- Make sure `startBackoff()` and `endBackoff()` invoked in the right order.\r\n- Not to schedule endBackoff if transportSet has been shutdown.", "commitDateTime": "2016-10-25 16:47:28", "authoredDateTime": "2016-10-25 16:47:28", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "insertions": 12, "deletions": 3, "lines": 15}, {"filePath": "core/src/main/java/io/grpc/internal/TransportSet.java", "insertions": 29, "deletions": 27, "lines": 56}, {"filePath": "core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "core/src/test/java/io/grpc/internal/TransportSetTest.java", "insertions": 34, "deletions": 0, "lines": 34}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DelayedClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransport.startBackoff(io.grpc.Status).3", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.DelayedClientTransport.startBackoff(io.grpc.Status)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.DelayedClientTransport.endBackoff()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TransportSet.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.TransportSet.scheduleBackoff(io.grpc.internal.DelayedClientTransport,io.grpc.Status)", "TOT": 10, "UPD": 1, "INS": 1, "MOV": 5, "DEL": 3}, {"spoonMethodName": "io.grpc.internal.TransportSet.TransportListener.transportShutdown(io.grpc.Status)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.TransportSet.scheduleBackoff(io.grpc.internal.DelayedClientTransport,io.grpc.Status).2.run()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DelayedClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransportTest.startBackoff_DoNothingIfAlreadyShutDown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TransportSetTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.TransportSetTest.scheduleBackoff_DoNotScheduleEndOfBackoffIfAlreadyShutdown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Server-side cancellation does not promptly inform server", "body": "Both `context.isCancelled()` and `call.isCancelled()` only begin returning `true` _after_ `ServerCallListener.onCancel()` (in `ServerCallImpl.ServerStreamListenerImpl`, but that is already on application callback thread via `ServerImpl.JumpToApplicationThreadServerStreamListener`). That means callers must return from a listener event before the values can change _and_ they will have already seen `onCancel()`, which makes them broken for the very case they are there to solve.\n\nIf `!status.isOk()`, both the context and the call should return `true` as soon as the transport notifies the server. How to do that seems it will be a bit awkward with the current code organization.\n", "url": "https://github.com/grpc/grpc-java/issues/2112", "user": "ejona86", "labels": ["bug"], "created": "2016-08-01 17:16:32", "closed": "2017-05-30 20:05:55", "commits": {}, "ttf": 302.0002777777778, "commitsDetails": []}, {"title": "Android has version \"0.0\" in user agent", "body": "It should have the actual version.\n", "url": "https://github.com/grpc/grpc-java/issues/2098", "user": "ejona86", "labels": ["android", "bug"], "created": "2016-07-29 00:23:17", "closed": "2017-12-15 23:31:27", "commits": {"1bbe126b447e5dba8ad13dfd0a20ce8340db80c5": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 504.0002777777778, "commitsDetails": [{"commitHash": "1bbe126b447e5dba8ad13dfd0a20ce8340db80c5", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["a84b4066827e84fce11529e18c71535f3fa84e05"], "nameRev": "1bbe126b447e5dba8ad13dfd0a20ce8340db80c5 tags/v1.9.0~9", "commitMessage": "core: Use hard-coded string for version\n\nUsing META-INF for loading the version is broken on Android and\nfrequently broken when gRPC is shaded. Having hard-coded strings be\nreplaced on version bumps has been working well.\n\nFixes #2098\n", "commitDateTime": "2017-12-15 15:31:26", "authoredDateTime": "2017-12-11 13:55:36", "commitGitStats": [{"filePath": "RELEASING.md", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "core/src/main/java/io/grpc/internal/GrpcUtil.java", "insertions": 1, "deletions": 9, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GrpcUtil.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.GrpcUtil", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.GrpcUtil.getImplementationVersion()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1bbe126b447e5dba8ad13dfd0a20ce8340db80c5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 9, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.GrpcUtil.getImplementationVersion()", "io.grpc.internal.GrpcUtil"]}, {"title": "Metadata trailers are not passed to Status*Exception when using ClientCalls.blockingUnaryCall.", "body": "Trying to write a sample for #1295, but when calling unary rpc method on blocking stub, the trailers are not passed during `ClientCalls.getUnchecked` which is called from [ClientCalls.blockingUnaryCall](https://github.com/grpc/grpc-java/blob/master/stub/src/main/java/io/grpc/stub/ClientCalls.java#L141).\n\nIs this by design or bug ?\n\nSample code is [here](https://github.com/chikei/grpc-java/commit/ea1ec3f5503a40d39c0ad10360c8a6ecbad46eca), the [blockingCall()](https://github.com/chikei/grpc-java/blob/ea1ec3f5503a40d39c0ad10360c8a6ecbad46eca/examples/src/main/java/io/grpc/examples/errorhandling/ErrorHandlingClient.java#L94) fails but others are good.\n", "url": "https://github.com/grpc/grpc-java/issues/2036", "user": "chikei", "labels": ["bug"], "created": "2016-07-12 17:51:23", "closed": "2016-07-18 22:48:12", "commits": {"780b2696c1941fb1f8d1f75c7853ca5d18c636ab": {"commitGHEventType": "closed", "commitUser": "nmittler"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "780b2696c1941fb1f8d1f75c7853ca5d18c636ab", "commitGHEventType": "closed", "commitUser": "nmittler", "commitParents": ["c1ef8061d1fc8d5e1bf23cfe4fa449390ff29b27"], "nameRev": "780b2696c1941fb1f8d1f75c7853ca5d18c636ab tags/v1.1.0~293", "commitMessage": "Ensure that trailers are not lost when making blocking calls.\n\nFixes #2036\n", "commitDateTime": "2016-07-18 15:47:57", "authoredDateTime": "2016-07-18 09:26:48", "commitGitStats": [{"filePath": "stub/src/main/java/io/grpc/stub/ClientCalls.java", "insertions": 27, "deletions": 1, "lines": 28}, {"filePath": "stub/src/test/java/io/grpc/stub/ClientCallsTest.java", "insertions": 74, "deletions": 19, "lines": 93}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ClientCalls.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.ClientCalls.getUnchecked(java.util.concurrent.Future)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCalls.toStatusRuntimeException(java.lang.Throwable)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ClientCallsTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.stub.ClientCallsTest.cannotSetOnReadyAfterCallStarted()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.cannotSetOnReadyAfterCallStarted().1", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.callStreamObserverPropagatesFlowControlRequestsToCall().3", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.disablingInboundAutoFlowControlSuppressesRequestsForMoreMessages().2", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.canCaptureInboundFlowControlForServerStreamingObserver().4", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportInboundFlowControl().5", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportOutboundFlowControl().6", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportOutboundFlowControl().6.beforeStart(io.grpc.stub.ClientCallStreamObserver)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.inprocessTransportOutboundFlowControl().6.beforeStart(io.grpc.stub.ClientCallStreamObserver).1.run()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.unaryBlockingCallSuccess()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.unaryBlockingCallFailed()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.disablingInboundAutoFlowControlSuppressesRequestsForMoreMessages()", "TOT": 5, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.stub.ClientCallsTest.callStreamObserverPropagatesFlowControlRequestsToCall()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["780b2696c1941fb1f8d1f75c7853ca5d18c636ab"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 27, "deletions": 1, "lines": 28, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["stub/src/main/java/io/grpc/stub"], "changesInPackagesSPOON": ["io.grpc.stub.ClientCalls.toStatusRuntimeException(java.lang.Throwable)", "io.grpc.stub.ClientCalls.getUnchecked(java.util.concurrent.Future)"]}, {"title": "ServerImpl may use executor after it is released", "body": "Since 777e92853, ServerImpl [may reference `executor`](https://github.com/grpc/grpc-java/blob/v0.15.0/core/src/main/java/io/grpc/internal/ServerImpl.java#L331) and [may schedule Runnables on `executor`](https://github.com/grpc/grpc-java/blob/v0.15.0/core/src/main/java/io/grpc/internal/ServerImpl.java#L478) after `executor` is released. The executor should be released on termination, not shutdown.\n", "url": "https://github.com/grpc/grpc-java/issues/2034", "user": "ejona86", "labels": ["bug"], "created": "2016-07-11 23:26:34", "closed": "2017-01-13 17:00:33", "commits": {"c436d93f07d147f04a3953182f9a532b6a52870d": {"commitGHEventType": "referenced", "commitUser": "zhangkun83"}}, "ttf": 185.00027777777777, "commitsDetails": [{"commitHash": "c436d93f07d147f04a3953182f9a532b6a52870d", "commitGHEventType": "referenced", "commitUser": "zhangkun83", "commitParents": ["ec7f00a27274d724015f592563939ac106a7f3a1"], "nameRev": "c436d93f07d147f04a3953182f9a532b6a52870d tags/v1.1.0~43", "commitMessage": "core: ServerImpl returns shared resources at termination (#2605)\n\nPreviously it does it at shutdown, which was wrong because executor may\r\nstill be used before the server is terminated.\r\n\r\nResolves #2034\r\n\r\nUses ObjectPool to make this change testable.  Cleans up test and makes\r\nit mostly single-threaded, except for two deadlock tests that have to be\r\nmulti-threaded.", "commitDateTime": "2017-01-13 09:00:32", "authoredDateTime": "2017-01-13 09:00:32", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/AbstractServerImplBuilder.java", "insertions": 20, "deletions": 1, "lines": 21}, {"filePath": "core/src/main/java/io/grpc/internal/ObjectPool.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "core/src/main/java/io/grpc/internal/ServerImpl.java", "insertions": 16, "deletions": 15, "lines": 31}, {"filePath": "core/src/test/java/io/grpc/internal/ServerImplTest.java", "insertions": 129, "deletions": 119, "lines": 248}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractServerImplBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractServerImplBuilder.getExecutorPool()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.AbstractServerImplBuilder.build()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "ObjectPool.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ServerImpl.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ServerImpl", "TOT": 14, "UPD": 5, "INS": 4, "MOV": 3, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ServerImpl.start()", "TOT": 11, "UPD": 3, "INS": 2, "MOV": 4, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ServerImpl.shutdown()", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ServerImpl.checkForTermination()", "TOT": 8, "UPD": 0, "INS": 2, "MOV": 5, "DEL": 1}]}, {"spoonFilePath": "ServerImplTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.ServerImplTest", "TOT": 20, "UPD": 3, "INS": 7, "MOV": 8, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.startUp()", "TOT": 5, "UPD": 1, "INS": 1, "MOV": 3, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.getPortAfterTerminationFails()", "TOT": 10, "UPD": 2, "INS": 2, "MOV": 6, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.executeBarrier(java.util.concurrent.Executor).13.run()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.startStopImmediateWithChildTransport()", "TOT": 19, "UPD": 4, "INS": 6, "MOV": 5, "DEL": 4}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.startShutdownNowImmediateWithChildTransport()", "TOT": 19, "UPD": 4, "INS": 6, "MOV": 5, "DEL": 4}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.shutdownNowAfterShutdown()", "TOT": 21, "UPD": 5, "INS": 6, "MOV": 6, "DEL": 4}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.methodNotFound()", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.basicExchangeSuccessful()", "TOT": 11, "UPD": 7, "INS": 2, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.exceptionInStartCallPropagatesToStream()", "TOT": 8, "UPD": 5, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.testClientCancelTriggersContextCancellation()", "TOT": 11, "UPD": 8, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.handlerRegistryPriorities()", "TOT": 37, "UPD": 3, "INS": 0, "MOV": 29, "DEL": 5}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.executeBarrier(java.util.concurrent.Executor)", "TOT": 5, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.tearDown()", "TOT": 4, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.transportFilters()", "TOT": 12, "UPD": 1, "INS": 3, "MOV": 4, "DEL": 4}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.testCallContextIsBoundInListenerCallbacks()", "TOT": 29, "UPD": 17, "INS": 5, "MOV": 7, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.stopImmediate()", "TOT": 17, "UPD": 1, "INS": 7, "MOV": 5, "DEL": 4}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.shutdownNowAfterSlowShutdown()", "TOT": 27, "UPD": 1, "INS": 12, "MOV": 4, "DEL": 10}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.transportServerFailsStartup()", "TOT": 11, "UPD": 1, "INS": 5, "MOV": 3, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.getPortBeforeStartedFails()", "TOT": 16, "UPD": 1, "INS": 1, "MOV": 12, "DEL": 2}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.testClientCancelTriggersContextCancellation().<unknown>.onReady().<unknown>.cancelled(io.grpc.Context)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.testCallContextIsBoundInListenerCallbacks().10.startCall(io.grpc.ServerCall,io.grpc.Metadata).<unknown>.onReady()", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.testCallContextIsBoundInListenerCallbacks().10.startCall(io.grpc.ServerCall,io.grpc.Metadata).<unknown>.onMessage(java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.testCallContextIsBoundInListenerCallbacks().10.startCall(io.grpc.ServerCall,io.grpc.Metadata).<unknown>.onHalfClose()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.testCallContextIsBoundInListenerCallbacks().10.startCall(io.grpc.ServerCall,io.grpc.Metadata).<unknown>.onCancel()", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.startStopImmediate()", "TOT": 13, "UPD": 0, "INS": 5, "MOV": 2, "DEL": 6}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.testNoDeadlockOnShutdown()", "TOT": 7, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 3}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.getPort()", "TOT": 7, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 3}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.createAndStartServer(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.createServer(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.verifyExecutorsAcquired()", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.verifyExecutorsNotReturned()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.ServerImplTest.testNoDeadlockOnTransportShutdown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "ServerCallImpl's use of metadata in sendHeaders is thread-unsafe", "body": "`ServerCallImpl` uses metadata to determine compression settings in [sendHeaders](https://github.com/grpc/grpc-java/blob/a2076f4/core/src/main/java/io/grpc/internal/ServerCallImpl.java#L111). However, that `Metadata` has already been passed to the application which is free to modify it. The `acceptEncodings` should just be saved as a field during the constructor instead.\n", "url": "https://github.com/grpc/grpc-java/issues/1947", "user": "ejona86", "labels": ["bug"], "created": "2016-06-17 14:50:11", "closed": "2016-07-10 18:31:34", "commits": {}, "ttf": 23.00027777777778, "commitsDetails": []}, {"title": "directExecutor on Server is broken if handler not found", "body": "When directExecutor is used, [failure to find a handler will call close()](https://github.com/grpc/grpc-java/blob/v0.14.0/core/src/main/java/io/grpc/internal/ServerImpl.java#L316) before setListener is called. This is effectively a manifestation of the concern presented in [NettyServerHandler](https://github.com/grpc/grpc-java/blob/c6fd94c/netty/src/main/java/io/grpc/netty/NettyServerHandler.java#L199).\n", "url": "https://github.com/grpc/grpc-java/issues/1936", "user": "ejona86", "labels": ["bug"], "created": "2016-06-15 22:19:01", "closed": "2016-11-09 23:21:11", "commits": {"0e27eef1683f7e501f6bdf458f641283dab623b1": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 147.00027777777777, "commitsDetails": [{"commitHash": "0e27eef1683f7e501f6bdf458f641283dab623b1", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["e40668499c38e0abfe6f511d4d15ee70903a8458"], "nameRev": "0e27eef1683f7e501f6bdf458f641283dab623b1 tags/v1.1.0~141", "commitMessage": "core: fix bug when stream listener not set before stream closed\n\nResolves #1936\r\n\r\nTwo bugs fixed:\r\n- NPE in `ServerImpl#streamCreated()` when stream listener not set before\r\n  stream closed\r\n- It is possible that `internalCancel()` is called during\r\n  `InProcessClientStream#start()` due to early server `onComplete()` or server `onError()`,\r\n  in this case no need to enlist `streams`, otherwise the channel can not be shutdown by `shutdown()`.", "commitDateTime": "2016-11-09 15:21:11", "authoredDateTime": "2016-11-09 15:21:11", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "insertions": 6, "deletions": 3, "lines": 9}, {"filePath": "core/src/main/java/io/grpc/internal/ServerImpl.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "core/src/main/java/io/grpc/internal/ServerStream.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "core/src/main/java/io/grpc/internal/ServerTransportListener.java", "insertions": 1, "deletions": 3, "lines": 4}, {"filePath": "core/src/test/java/io/grpc/internal/AbstractServerStreamTest.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "core/src/test/java/io/grpc/internal/ServerImplTest.java", "insertions": 16, "deletions": 13, "lines": 29}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/InProcessTest.java", "insertions": 5, "deletions": 4, "lines": 9}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/MoreInProcessTest.java", "insertions": 270, "deletions": 0, "lines": 270}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyServerHandler.java", "insertions": 1, "deletions": 7, "lines": 8}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyServerStream.java", "insertions": 8, "deletions": 1, "lines": 9}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyClientTransportTest.java", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyServerHandlerTest.java", "insertions": 25, "deletions": 12, "lines": 37}, {"filePath": "testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java", "insertions": 2, "deletions": 3, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": ["0e27eef1683f7e501f6bdf458f641283dab623b1"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 25, "deletions": 17, "lines": 42, "gitFilesChange": 6}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal", "netty/src/main/java/io/grpc/netty", "core/src/main/java/io/grpc/inprocess"]}, {"title": "java.lang.IllegalArgumentException when try to use ipv6", "body": "I guess this is caused by the scopeId:\n\n```\njava.lang.IllegalArgumentException: cannot find a NameResolver for directaddress:////0:0:0:0:0:0:0:0%0:10005 (Malformed escape pair at index 33: directaddress:////0:0:0:0:0:0:0:0%0:10005)\nat io.grpc.internal.ManagedChannelImpl.getNameResolver(ManagedChannelImpl.java:238)\nat io.grpc.internal.ManagedChannelImpl.(ManagedChannelImpl.java:159)\nat io.grpc.internal.AbstractManagedChannelImplBuilder.build(AbstractManagedChannelImplBuilder.java:205)\n```\n", "url": "https://github.com/grpc/grpc-java/issues/1883", "user": "normanmaurer", "labels": ["P0", "bug"], "created": "2016-05-30 19:14:51", "closed": "2016-06-03 00:22:11", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Stack Overflow when running AsyncClient", "body": "```\nINFO: [ManagedChannelImpl@506e6d5e] Created with target directaddress:///localhost/127.0.0.1:1234\nMay 27, 2016 9:43:05 AM io.grpc.internal.ManagedChannelImpl <init>\nINFO: [ManagedChannelImpl@668bc3d5] Created with target directaddress:///localhost/127.0.0.1:1234\nMay 27, 2016 9:43:05 AM io.grpc.internal.ManagedChannelImpl <init>\nINFO: [ManagedChannelImpl@62043840] Created with target directaddress:///localhost/127.0.0.1:1234\nException in thread \"grpc-default-executor-32\" java.lang.StackOverflowError\n        at io.grpc.Context.removeListener(Context.java:454)\n        at io.grpc.Context.removeListener(Context.java:462)\n        at io.grpc.Context.removeListener(Context.java:462)\n        at io.grpc.Context.removeListener(Context.java:462)\n        at io.grpc.Context.removeListener(Context.java:462)\n        at io.grpc.Context.removeListener(Context.java:462)\n        at io.grpc.Context.removeListener(Context.java:462)\n        at io.grpc.Context.removeListener(Context.java:462)\n        at io.grpc.Context.removeListener(Context.java:462)\n```\n", "url": "https://github.com/grpc/grpc-java/issues/1878", "user": "carl-mastrangelo", "labels": ["P2", "bug"], "created": "2016-05-27 16:44:32", "closed": "2016-06-03 04:43:31", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "netty: Stream ID exhaustion takes too long to swap transports", "body": "This is split out of #1809.\n\n> A new transport is only created once all RPCs are complete, which is a problem for slow RPC and long lived streams, as there's no upper bound for how long a stream can live.\n\nThis is because the transport does not call `transportShutdown()` immediately, but only once all the streams on that transport have completed.\n", "url": "https://github.com/grpc/grpc-java/issues/1819", "user": "ejona86", "labels": ["bug", "netty"], "created": "2016-05-12 20:26:24", "closed": "2016-05-13 20:39:47", "commits": {"27dffdfe03db946b2f520a0818bd016292fda355": {"commitGHEventType": "referenced", "commitUser": "ejona86"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "27dffdfe03db946b2f520a0818bd016292fda355", "commitGHEventType": "referenced", "commitUser": "ejona86", "commitParents": ["ce002bd4498a83c244f56331e1ab255f860c4c9d"], "nameRev": "27dffdfe03db946b2f520a0818bd016292fda355 tags/v0.15.0~113", "commitMessage": "netty: call transportShutdown immediately on ID exhaustion\n\nFixes #1819", "commitDateTime": "2016-05-13 13:39:47", "authoredDateTime": "2016-05-13 13:39:47", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyClientHandler.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyClientHandlerTest.java", "insertions": 9, "deletions": 1, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyClientHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientHandler.createStream(io.grpc.netty.CreateStreamCommand,io.netty.channel.ChannelPromise)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "NettyClientHandlerTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientHandlerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientHandlerTest.setUp()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientHandlerTest.exhaustedStreamsShouldFail()", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientHandlerTest.newHandler()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["27dffdfe03db946b2f520a0818bd016292fda355"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.NettyClientHandler.createStream(io.grpc.netty.CreateStreamCommand,io.netty.channel.ChannelPromise)"]}, {"title": "Stress test failures in Java client", "body": "### Steps to repro:\n\n(I repro'ed this using a docker image. This may repro without the docker image too - I am not sure)\n\n1) Built a Docker image for stress test:\nGet the `grpc` repo  (you don't have to build it. Just need it for the docker scripts)\n\n``` bash\n$ git clone https://github.com/grpc/grpc.git\n$ cd grpc\n$ export INTEROP_IMAGE=stress-test-java\n$ export BASE_NAME=grpc_interop_stress_java\n$ # Remember to be under the grpc directory\n$ tools/run_tests/dockerize/build_interop_stress_image.sh\n```\n\nThis will take a few minutes to build (if it fails in the middle, just retry one more time. Sometimes, it is flaky)\n\n2) Start a docker container\n\n``` bash\n$ docker run -i -t stress-test-java bash\n```\n\n3) Run  java interop server in the background in the container:\n\n``` bash\nroot@b44016cf1c83:/# /var/local/git/grpc-java/interop-testing/build/install/grpc-interop-testing/bin/test-server --port=8080 --use_tls=false &\n```\n\n4) Now run the interop client:\n\n```\nroot@b44016cf1c83:/# /var/local/git/grpc-java/interop-testing/build/install/grpc-interop-testing/bin/stresstest-client --test_cases=empty_unary:1 --num_channels_per_server=5 --num_stubs_per_channel=5\n\n```\n\nYou will see the following errors:\n\n```\nroot@b44016cf1c83:/# /var/local/git/grpc-java/interop-testing/build/install/grpc-interop-testing/bin/stresstest-client --test_cases=empty_unary:1 --num_channels_per_server=5 --num_stubs_per_channel=5\nMay 10, 2016 2:04:14 AM io.grpc.internal.ManagedChannelImpl <init>\nINFO: [ManagedChannelImpl@7494e528] Created with target localhost:8080\nMay 10, 2016 2:04:14 AM io.grpc.internal.ManagedChannelImpl <init>\nINFO: [ManagedChannelImpl@5f282abb] Created with target localhost:8080\nMay 10, 2016 2:04:14 AM io.grpc.internal.ManagedChannelImpl <init>\nINFO: [ManagedChannelImpl@1786dec2] Created with target localhost:8080\nMay 10, 2016 2:04:14 AM io.grpc.internal.ManagedChannelImpl <init>\nINFO: [ManagedChannelImpl@4d41cee] Created with target localhost:8080\nMay 10, 2016 2:04:14 AM io.grpc.internal.ManagedChannelImpl <init>\nINFO: [ManagedChannelImpl@1b68ddbd] Created with target localhost:8080\n[GC (Allocation Failure)  129024K->17912K(493056K), 0.0100072 secs]\n[GC (Allocation Failure)  146936K->12744K(622080K), 0.0084358 secs]\n[GC (Allocation Failure)  270792K->12672K(622080K), 0.0058763 secs]\n[GC (Allocation Failure)  270720K->12664K(880128K), 0.0046501 secs]\n[GC (Allocation Failure)  528760K->12704K(880128K), 0.0076892 secs]\n[GC (Allocation Failure)  528800K->12744K(1392128K), 0.0086561 secs]\n[GC (Allocation Failure)  1044936K->14822K(1392640K), 0.0067372 secs]\n[GC (Allocation Failure)  1047014K->14902K(1330176K), 0.0009984 secs]\n[GC (Allocation Failure)  1001526K->14982K(1286656K), 0.0008510 secs]\n```\n", "url": "https://github.com/grpc/grpc-java/issues/1812", "user": "sreecha", "labels": ["bug"], "created": "2016-05-10 02:15:11", "closed": "2016-05-13 17:18:17", "commits": {"46edcad0c103da9803af8360590a662b2dfe8d97": {"commitGHEventType": "closed", "commitUser": "buchgr"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "46edcad0c103da9803af8360590a662b2dfe8d97", "commitGHEventType": "closed", "commitUser": "buchgr", "commitParents": ["4e8cf923ca3d97292737b07ff1149c36a10a9713"], "nameRev": "46edcad0c103da9803af8360590a662b2dfe8d97 tags/v0.15.0~116", "commitMessage": "Don't enforce a timeout in stress test client. Fixes #1812 (#1823)", "commitDateTime": "2016-05-13 19:18:13", "authoredDateTime": "2016-05-13 19:18:13", "commitGitStats": [{"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/AbstractInteropTest.java", "insertions": 19, "deletions": 14, "lines": 33}, {"filePath": "interop-testing/src/main/java/io/grpc/testing/integration/StressTestClient.java", "insertions": 7, "deletions": 0, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractInteropTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.pingPong()", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.emptyStream()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.cancelAfterFirstResponse()", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.serverStreamingShouldBeFlowControlled()", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 3}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.gracefulShutdown()", "TOT": 8, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 4}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.timeoutOnSleepingServer()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.grpc.testing.integration.AbstractInteropTest.operationTimeoutMillis()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "StressTestClient.java", "spoonMethods": [{"spoonMethodName": "io.grpc.testing.integration.StressTestClient.Worker.Tester.operationTimeoutMillis()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Unimplemented service causes MessageDeframer exceptions in the log", "body": "I'm seeing exceptions running grpc-java 0.14.0 in production (same with 0.13.2). Reproducible on both linux and mac with oracle jdk 1.8.0_66.\n\n```\nmai 05, 2016 10:12:52 AM io.grpc.internal.AbstractServerStream deframeFailed\nWARNING: Exception processing message\njava.lang.IllegalStateException: MessageDeframer is already closed\n    at com.google.common.base.Preconditions.checkState(Preconditions.java:174)\n    at io.grpc.internal.MessageDeframer.checkNotClosed(MessageDeframer.java:222)\n    at io.grpc.internal.MessageDeframer.deframe(MessageDeframer.java:168)\n    at io.grpc.internal.AbstractStream.deframe(AbstractStream.java:276)\n    at io.grpc.internal.AbstractServerStream.inboundDataReceived(AbstractServerStream.java:156)\n    at io.grpc.netty.NettyServerStream.inboundDataReceived(NettyServerStream.java:83)\n    at io.grpc.netty.NettyServerHandler.onDataRead(NettyServerHandler.java:214)\n    at io.grpc.netty.NettyServerHandler.access$200(NettyServerHandler.java:93)\n    at io.grpc.netty.NettyServerHandler$FrameListener.onDataRead(NettyServerHandler.java:425)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:250)\n    at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:46)\n    at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:409)\n    at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:240)\n    at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:147)\n    at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:39)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:111)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:331)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:391)\n    at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:387)\n    at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:245)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeChannelReadNow(ChannelHandlerInvokerUtil.java:83)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeChannelRead(DefaultChannelHandlerInvoker.java:154)\n    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:354)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:145)\n    at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:1078)\n    at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:117)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:527)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:484)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:398)\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:370)\n    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:742)\n    at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:145)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nI've found the following code reproduces the exceptions (the number of rounds required may vary as it doesn't happen for all requests):\n\n```\n        Server grpcServer = NettyServerBuilder.forPort(0).build();\n        grpcServer.start();\n        ManagedChannel channel = NettyChannelBuilder.forAddress(\"localhost\", grpcServer.getPort()).usePlaintext(true).build();\n        for (int x= 0; x < 100; ++x) {\n            try {\n                HealthGrpc.newBlockingStub(channel).check(HealthCheckRequest.getDefaultInstance());\n            } catch (StatusRuntimeException e) {\n                if (e.getStatus().getCode() != Code.UNIMPLEMENTED) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n        System.err.println(\"done\");\n```\n\nIf you replace Netty with InProcess, you can get the following exception (the number of rounds must be increased a lot, though):\n\n```\nmai 05, 2016 10:33:46 AM io.grpc.internal.SerializingExecutor$TaskRunner run\nSEVERE: Exception while executing runnable io.grpc.internal.ServerImpl$ServerTransportListenerImpl$1@2d83238d\njava.lang.NullPointerException\n    at io.grpc.inprocess.InProcessTransport$InProcessStream$InProcessClientStream.internalCancel(InProcessTransport.java:484)\n    at io.grpc.inprocess.InProcessTransport$InProcessStream$InProcessClientStream.serverClosed(InProcessTransport.java:435)\n    at io.grpc.inprocess.InProcessTransport$InProcessStream$InProcessClientStream.access$1000(InProcessTransport.java:381)\n    at io.grpc.inprocess.InProcessTransport$InProcessStream$InProcessServerStream.close(InProcessTransport.java:335)\n    at io.grpc.internal.ServerImpl$ServerTransportListenerImpl$1.runInContext(ServerImpl.java:316)\n    at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:54)\n    at io.grpc.internal.SerializingExecutor$TaskRunner.run(SerializingExecutor.java:154)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n", "url": "https://github.com/grpc/grpc-java/issues/1795", "user": "gorset", "labels": ["bug"], "created": "2016-05-05 08:53:12", "closed": "2016-06-01 18:44:31", "commits": {"028d0844ddc2b5d09168b4743ecdec6571d56aa9": {"commitGHEventType": "closed", "commitUser": "buchgr"}}, "ttf": 27.00027777777778, "commitsDetails": [{"commitHash": "028d0844ddc2b5d09168b4743ecdec6571d56aa9", "commitGHEventType": "closed", "commitUser": "buchgr", "commitParents": ["134451f62cd12d18448d373701d9b34bce5305f6"], "nameRev": "028d0844ddc2b5d09168b4743ecdec6571d56aa9 tags/v0.15.0~76", "commitMessage": "core: add test for deframer closed exception. fixes #1795", "commitDateTime": "2016-06-01 20:44:29", "authoredDateTime": "2016-06-01 20:44:29", "commitGitStats": [{"filePath": "core/src/test/java/io/grpc/internal/AbstractServerStreamTest.java", "insertions": 19, "deletions": 0, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractServerStreamTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractServerStreamTest.frameShouldBeIgnoredAfterDeframerClosed()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["028d0844ddc2b5d09168b4743ecdec6571d56aa9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Throw Status.UNAVAILABLE on connection refused", "body": "I think we want to catch `io.netty.channel.ChannelException` and re-throw as `Status.UNAVIALIBLE` when endpoint is unreachable:\n\n```\nhttp2.Http2ConnectionHandler - [id: 0x39fed2a5] Sending GOAWAY failed: lastStreamId '0', errorCode '2', debugData 'Connection refused: example.lukasz.local/127.0.0.1:12345'. Forcing shutdown of the connection.\nio.netty.channel.ChannelException: Pending write on removal of SslHandler\n    at io.netty.handler.ssl.SslHandler.handlerRemoved0(SslHandler.java:426)\n[...]\n```\n", "url": "https://github.com/grpc/grpc-java/issues/1720", "user": "lukaszx0", "labels": ["P2", "bug", "netty"], "created": "2016-04-26 15:49:46", "closed": "2016-06-15 15:54:46", "commits": {}, "ttf": 50.000277777777775, "commitsDetails": []}, {"title": "Throw away Status cause in InProcess transport", "body": "To act like a normal transport, InProcess transport should throw away everything in the status but the code and message. Otherwise it will be misleading during testing and general usage.\n", "url": "https://github.com/grpc/grpc-java/issues/1716", "user": "ejona86", "labels": ["P3", "bug"], "created": "2016-04-22 04:21:49", "closed": "2016-04-29 21:36:59", "commits": {"46eefe34fb45a24b9c1704e4c29d563f4c815e4f": {"commitGHEventType": "referenced", "commitUser": "buchgr"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "46eefe34fb45a24b9c1704e4c29d563f4c815e4f", "commitGHEventType": "referenced", "commitUser": "buchgr", "commitParents": ["f7dc4d2cc6fc27382405834d070c462fe9c02463"], "nameRev": "46eefe34fb45a24b9c1704e4c29d563f4c815e4f tags/v0.15.0~138", "commitMessage": "Strip cause from InProcessTransport between client and server. Fixes #1716", "commitDateTime": "2016-04-29 23:36:59", "authoredDateTime": "2016-04-29 23:36:59", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "insertions": 18, "deletions": 1, "lines": 19}, {"filePath": "testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java", "insertions": 18, "deletions": 5, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InProcessTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.inprocess.InProcessTransport.stripCause(io.grpc.Status)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.inprocess.InProcessTransport.InProcessStream.InProcessServerStream.close(io.grpc.Status,io.grpc.Metadata)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.inprocess.InProcessTransport.InProcessStream.InProcessClientStream.cancel(io.grpc.Status)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "AbstractTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.earlyServerClose_withServerHeaders()", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.earlyServerClose_noServerHeaders()", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.earlyServerClose_serverFailure()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.clientCancel()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.serverCancel()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["46eefe34fb45a24b9c1704e4c29d563f4c815e4f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 18, "deletions": 1, "lines": 19, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/inprocess"], "changesInPackagesSPOON": ["io.grpc.inprocess.InProcessTransport.InProcessStream.InProcessServerStream.close(io.grpc.Status,io.grpc.Metadata)", "io.grpc.inprocess.InProcessTransport.InProcessStream.InProcessClientStream.cancel(io.grpc.Status)", "io.grpc.inprocess.InProcessTransport.stripCause(io.grpc.Status)"]}, {"title": "Bad ssl setup leads to requests never returning", "body": "I've shoot myself in a foot by copy-pasting code snippet between client and server code which looked almost identical ;)\n\nI've been trying to make a call from client which was set up as follows:\n\n``` java\nsslCtx = GrpcSslContexts.configure(SslContextBuilder.forServer(getPrivateKey(), getX509CertificateChain())).build();\n\nchannel = NettyChannelBuilder.forAddress(host, port)\n        .sslContext(sslCtx)\n        .build();\n```\n\nSuch setup, as you may already noticed,  is obviously incorrect on the _client_ and the correct way to do this is to use `SslContextBuilder.forClient` instead of `SslContextBuilder.forServer` like this:\n\n``` java\nsslCtx = GrpcSslContexts.configure(SslContextBuilder.forClient().keyManager(getPrivateKey(),getX509CertificateChain())).build();\n```\n\nThis lead to client being broken and handing indefinitely, after making a call, during handshake without throwing any error or other indication or notice of horribly wrong setup. It would be great if we could prevent from making this mistake somehow.\n\nAs an aside, would be nice if netty could provide overloaded versions of `forClient` just like it does for `forServer`. I might be missing something because I haven't looked into this deepy, but it doesn't seem that there's anything preventing from that (?).\n", "url": "https://github.com/grpc/grpc-java/issues/1699", "user": "lukaszx0", "labels": ["P2", "bug"], "created": "2016-04-21 22:01:25", "closed": "2016-04-27 20:02:46", "commits": {"27c6e5cfcca255285218975ff4cdff2aa5092d18": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "6d7f3bac274e899a58ae235533d5cfb5098da1c2": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}, "804991e80df3e02eba2da320d0efcdf3fb802b2f": {"commitGHEventType": "closed", "commitUser": "dapengzhang0"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "27c6e5cfcca255285218975ff4cdff2aa5092d18", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "6d7f3bac274e899a58ae235533d5cfb5098da1c2", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "804991e80df3e02eba2da320d0efcdf3fb802b2f", "commitGHEventType": "closed", "commitUser": "dapengzhang0", "commitParents": ["6b5177d3e3643a13c90eb1662409e804e69051af"], "nameRev": "804991e80df3e02eba2da320d0efcdf3fb802b2f tags/v0.14.0~11", "commitMessage": "validate sslContext in Netty channel/server builder #1699 (#1724)\n\nvalidate sslContext in Netty channel/server builder #1699\r\n\r\nresolves #1699 \r\n", "commitDateTime": "2016-04-27 13:02:43", "authoredDateTime": "2016-04-27 13:02:43", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyServerBuilder.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyChannelBuilderTest.java", "insertions": 19, "deletions": 0, "lines": 19}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyServerBuilderTest.java", "insertions": 70, "deletions": 0, "lines": 70}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyChannelBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyChannelBuilder.sslContext(io.netty.handler.ssl.SslContext)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyServerBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerBuilder.sslContext(io.netty.handler.ssl.SslContext)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyChannelBuilderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.sslContextCanBeNull()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyChannelBuilderTest.failIfSslContextIsNotClient()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyServerBuilderTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerBuilderTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Cancelling a call results in onClose never being invoked. ", "body": "Consider the following code:\n\n```\n      final ClientCall<Void, Void> call = channel.newCall(..., ...);\n      ClientCall.Listener<Void> listen =\n          new ClientCall.Listener<Void>() {\n            @Override\n            public void onMessage(Void message) {\n              call.cancel();\n            }\n\n            @Override\n            public void onClose(Status status, Metadata trailers) {\n              // NEVER CALLED!\n            }\n          };\n      call.start(listen, new Metadata());\n      call.sendMessage(msg);\n      call.halfClose();\n      call.request(1);\n```\n\nonClose will not be invoked, so it becomes impossible to know when the call is actually done.  This seems wrong.  If the call is cancelled from outside of the listener, onClose is invoked.\n", "url": "https://github.com/grpc/grpc-java/issues/1682", "user": "carl-mastrangelo", "labels": ["P1", "bug"], "created": "2016-04-16 02:56:09", "closed": "2016-06-02 16:34:08", "commits": {"d25b65bb53258fc033e58cbaab4013a329ff45ce": {"commitGHEventType": "referenced", "commitUser": "buchgr"}}, "ttf": 47.000277777777775, "commitsDetails": [{"commitHash": "d25b65bb53258fc033e58cbaab4013a329ff45ce", "commitGHEventType": "referenced", "commitUser": "buchgr", "commitParents": ["c6c74799f488935fc174f26cb06e6bd2e8debd4a"], "nameRev": "d25b65bb53258fc033e58cbaab4013a329ff45ce tags/v0.15.0~69", "commitMessage": "testing: add tests for Netty bug where a channel would break after a RST_STREAM frame. Fixes #1682", "commitDateTime": "2016-06-02 18:34:07", "authoredDateTime": "2016-06-02 18:34:07", "commitGitStats": [{"filePath": "testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java", "insertions": 47, "deletions": 0, "lines": 47}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.frameAfterRstStreamShouldNotBreakClientChannel()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d25b65bb53258fc033e58cbaab4013a329ff45ce"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "ServerInterceptor close trigger MessageDeframer is already closed", "body": "I want implements `ServerInterceptor` for intercepting incoming calls to check valid authentication credentials.\n\nHere is my java env and code snippet.\n\nquestion is:\n- invoke `serverCall.close` and return null trigger NPE\n\nexception stack:\n\n```\nSEVERE: Exception while executing runnable io.grpc.internal.ServerImpl$ServerTransportListenerImpl$1@803a06c\njava.lang.NullPointerException: startCall() returned a null listener for method com.elegantpay.merchant.api.DictService/SearchCNAPS\n    at io.grpc.internal.ServerImpl$ServerTransportListenerImpl.startCall(ServerImpl.java:371)\n    at io.grpc.internal.ServerImpl$ServerTransportListenerImpl.access$1100(ServerImpl.java:282)\n    at io.grpc.internal.ServerImpl$ServerTransportListenerImpl$1.runInContext(ServerImpl.java:326)\n    at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:54)\n    at io.grpc.internal.SerializingExecutor$TaskRunner.run(SerializingExecutor.java:154)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n- invoke `serverCall.close` then return `return new ServerCall.Listener(){} //` empty Listener, trigger `MessageDeframer is already closed` Exception\n\n> Note: this exception is not appear at first time, should invoke client/stub again, the server side exception show up\n\nexception stack:\n\n```\nWARNING: Exception processing message\njava.lang.IllegalStateException: MessageDeframer is already closed\n    at com.google.common.base.Preconditions.checkState(Preconditions.java:174)\n    at io.grpc.internal.MessageDeframer.checkNotClosed(MessageDeframer.java:222)\n    at io.grpc.internal.MessageDeframer.deframe(MessageDeframer.java:168)\n    at io.grpc.internal.AbstractStream.deframe(AbstractStream.java:276)\n    at io.grpc.internal.AbstractServerStream.inboundDataReceived(AbstractServerStream.java:155)\n    at io.grpc.netty.NettyServerStream.inboundDataReceived(NettyServerStream.java:77)\n    at io.grpc.netty.NettyServerHandler.onDataRead(NettyServerHandler.java:216)\n    at io.grpc.netty.NettyServerHandler.access$300(NettyServerHandler.java:93)\n    at io.grpc.netty.NettyServerHandler$FrameListener.onDataRead(NettyServerHandler.java:425)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:245)\n    at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:46)\n    at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:409)\n    at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:240)\n    at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:147)\n    at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:39)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:106)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:332)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:392)\n    at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:387)\n    at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:245)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeChannelReadNow(ChannelHandlerInvokerUtil.java:83)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeChannelRead(DefaultChannelHandlerInvoker.java:154)\n    at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:354)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:145)\n    at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:1078)\n    at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:125)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:510)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:467)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:381)\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:353)\n    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:742)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n\nenv: \n\n```\njava version \"1.7.0_72\"\nJava(TM) SE Runtime Environment (build 1.7.0_72-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 24.72-b04, mixed mode)\n```\n\ngrpc version: `compile 'io.grpc:grpc-all:0.13.2'`\n\n> `groovy` code\n\n``` groovy\nimport io.grpc.Metadata\nimport io.grpc.MethodDescriptor\nimport io.grpc.ServerCall\nimport io.grpc.ServerCallHandler\nimport io.grpc.ServerInterceptor\nimport io.grpc.Status\n\nclass MyInterceptor implements ServerInterceptor {\n    @Override\n    def <ReqT, RespT> ServerCall.Listener<ReqT> interceptCall(\n            MethodDescriptor<ReqT, RespT> methodDescriptor,\n            ServerCall<RespT> serverCall,\n            Metadata metadata,\n            ServerCallHandler<ReqT, RespT> serverCallHandler) {\n\n        // for test\n        serverCall.close(Status.UNAUTHENTICATED, new Metadata())\n\n        return null // if close then return null trigger NPE\n    }\n}\n```\n\nso. is the bug? or what is the best practices doing this.\n\nThanks.\n", "url": "https://github.com/grpc/grpc-java/issues/1665", "user": "yinheli", "labels": ["P2", "bug"], "created": "2016-04-13 10:21:52", "closed": "2016-05-26 18:15:38", "commits": {}, "ttf": 43.000277777777775, "commitsDetails": []}, {"title": "OutOfBounds exception with NameResolvers and TransportSet", "body": "Long story short, it appears there's an explicit array.get(0) that happens on the first outbound call, but if the NameResolver hasn't found any servers yet, this causes an exception.  Stack trace can be found below(SpectatorInterceptor is a proprietary metrics component, and the EurekaNameResolver simply uses Eureka to resolve a set of IP + port that can then be used to load balance).  In the case below, the list of servers the EurekaNameResolver passes to onUpdate is empty.\n\n```\nSEVERE: Exception while executing runnable io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$2@7d8bd17e\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n    at java.util.ArrayList.rangeCheck(ArrayList.java:653)\n    at java.util.ArrayList.get(ArrayList.java:429)\n    at java.util.Collections$UnmodifiableList.get(Collections.java:1309)\n    at io.grpc.internal.TransportSet.scheduleConnection(TransportSet.java:197)\n    at io.grpc.internal.TransportSet.obtainActiveTransport(TransportSet.java:169)\n    at io.grpc.internal.ManagedChannelImpl$3.getTransport(ManagedChannelImpl.java:381)\n    at io.grpc.SimpleLoadBalancerFactory$SimpleLoadBalancer$1.get(SimpleLoadBalancerFactory.java:121)\n    at io.grpc.SimpleLoadBalancerFactory$SimpleLoadBalancer$1.get(SimpleLoadBalancerFactory.java:119)\n    at io.grpc.internal.BlankFutureProvider$FulfillmentBatch.link(BlankFutureProvider.java:128)\n    at io.grpc.SimpleLoadBalancerFactory$SimpleLoadBalancer.handleResolvedAddresses(SimpleLoadBalancerFactory.java:119)\n    at io.grpc.internal.ManagedChannelImpl$2.onUpdate(ManagedChannelImpl.java:165)\n    at com.netflix.grpc.nameresolver.eureka.EurekaNameResolver$1.onNext(EurekaNameResolver.java:64)\n    at com.netflix.grpc.nameresolver.eureka.EurekaNameResolver$1.onNext(EurekaNameResolver.java:61)\n    at io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onMessage(ClientCalls.java:305)\n    at io.grpc.ForwardingClientCallListener.onMessage(ForwardingClientCallListener.java:51)\n    at io.grpc.ForwardingClientCallListener.onMessage(ForwardingClientCallListener.java:51)\n    at com.netflix.grpc.interceptor.spectator.SpectatorMetricsClientInterceptor$1$1.onMessage(SpectatorMetricsClientInterceptor.java:44)\n    at io.grpc.internal.ClientCallImpl$ClientStreamListenerImpl$2.runInContext(ClientCallImpl.java:423)\n    at io.grpc.internal.ContextRunnable.run(ContextRunnable.java:54)\n    at io.grpc.internal.SerializingExecutor$TaskRunner.run(SerializingExecutor.java:154)\n    at java.util.concurrent.ThreadPoolExecutorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n", "url": "https://github.com/grpc/grpc-java/issues/1657", "user": "jhspaybar", "labels": ["bug"], "created": "2016-04-11 06:09:07", "closed": "2016-04-14 20:51:38", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Exceptions thrown in StreamObserver.onNext() may be swallowed", "body": "For unary calls it appears the exception is basically guaranteed to be swallowed.\nSee #1638 for some discussion. Basically we try to fail the call with a Status, but if the call already completed successfully (which is especially likely for unary calls) the exception is thrown away.\n", "url": "https://github.com/grpc/grpc-java/issues/1652", "user": "ejona86", "labels": ["P1", "bug"], "created": "2016-04-08 16:52:59", "closed": "2016-06-24 23:26:24", "commits": {}, "ttf": 77.00027777777778, "commitsDetails": []}, {"title": "okhttp: race between receiving data and closing deframer", "body": "As [reported on SO](http://stackoverflow.com/q/36123530/4690866):\n\n```\njava.lang.IllegalStateException: MessageDeframer is already closed\n    at com.google.common.base.Preconditions.checkState(Preconditions.java:174)\n    at io.grpc.internal.MessageDeframer.checkNotClosed(MessageDeframer.java:222)\n    at io.grpc.internal.MessageDeframer.deframe(MessageDeframer.java:168)\n    at io.grpc.internal.AbstractStream.deframe(AbstractStream.java:276)\n```\n\nWhen receiving a DATA frame, it seems there is a [race between](https://github.com/grpc/grpc-java/blob/v0.13.2/okhttp/src/main/java/io/grpc/okhttp/OkHttpClientTransport.java#L659) getStream() and calling transportDataReceived(). Although I wouldn't expect to trigger that race often.\n", "url": "https://github.com/grpc/grpc-java/issues/1569", "user": "ejona86", "labels": ["P2", "android", "bug", "okhttp"], "created": "2016-03-21 19:24:52", "closed": "2016-07-08 19:39:19", "commits": {}, "ttf": 109.00027777777778, "commitsDetails": []}, {"title": "If DNS resolution fails, the Channel is permanently failed", "body": "We should probably update DnsNameResolver to continue retrying the DNS query until shutdown, at maybe a fixed rate of 1 minute or such. Overall, it's not a superb solution, but it fixes a lot of the problem and is expedient to implement.\n", "url": "https://github.com/grpc/grpc-java/issues/1546", "user": "ejona86", "labels": ["bug"], "created": "2016-03-11 21:11:48", "closed": "2016-03-29 23:16:59", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "It seems that CallOptions.withDeadlineAfter does not provide a fully functional timeout", "body": "CallOptions.withDeadlineAfter works when client and server are connected or can be connected but the server can not respond in time. When it comes to network partition, a CallOptions.blockingUnaryCall will wait about 30s to throw an exception despite the deadline.\n\nI can walk around this by giving timeout parameters to the future.get() inside CallOptions.getUnchecked(Future<V> future) like this\n\n``` java\nprivate static <V> V getUnchecked(Future<V> future) {\n        try {\n          return future.get(2, TimeUnit.SECONDS);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n          throw Status.CANCELLED.withCause(e).asRuntimeException();\n        } catch (ExecutionException e) {\n          throw Status.fromThrowable(e).asRuntimeException();\n        } catch (TimeoutException e) {\n          throw Status.fromThrowable(e).asRuntimeException();\n        }\n```\n\nBut I believe there should be a better way @ejona86\n", "url": "https://github.com/grpc/grpc-java/issues/1540", "user": "LeeYeeze", "labels": ["bug", "netty"], "created": "2016-03-10 13:13:27", "closed": "2016-07-04 01:53:29", "commits": {}, "ttf": 115.00027777777778, "commitsDetails": []}, {"title": "DelayedClientTransport and InProcessTransport means deadlock", "body": "There is a chance of deadlock when `DelayedClientTransport` is linked with an `InProcessTransport`. See grpc/grpc-java/pull/1503.\n", "url": "https://github.com/grpc/grpc-java/issues/1510", "user": "zhangkun83", "labels": ["bug"], "created": "2016-03-03 00:37:51", "closed": "2016-03-09 23:38:09", "commits": {"eccd2311311f8c480f396fd76bf8fe9b5931a035": {"commitGHEventType": "closed", "commitUser": "ejona86"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "eccd2311311f8c480f396fd76bf8fe9b5931a035", "commitGHEventType": "closed", "commitUser": "ejona86", "commitParents": ["b9c12327ebc49b44a430646be243091d4b324f72"], "nameRev": "eccd2311311f8c480f396fd76bf8fe9b5931a035 tags/v0.14.0~112", "commitMessage": "Don't hold a lock in DelayedStream when calling realStream\n\nOur current lock ordering rules prohibit holding a lock when calling the\nchannel and stream. This change avoids the lock for both\nDelayedClientTransport and DelayedStream. It is effectively a rewrite of\nDelayedStream.\n\nThe fixes to ClientCallImpl were to ensure sane state in DelayedStream.\n\nFixes #1510\n", "commitDateTime": "2016-03-09 15:14:00", "authoredDateTime": "2016-03-05 12:19:07", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/ClientCallImpl.java", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "insertions": 22, "deletions": 25, "lines": 47}, {"filePath": "core/src/main/java/io/grpc/internal/DelayedStream.java", "insertions": 179, "deletions": 193, "lines": 372}, {"filePath": "core/src/test/java/io/grpc/internal/DelayedClientTransportTest.java", "insertions": 12, "deletions": 0, "lines": 12}, {"filePath": "core/src/test/java/io/grpc/internal/DelayedStreamTest.java", "insertions": 91, "deletions": 9, "lines": 100}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": ["eccd2311311f8c480f396fd76bf8fe9b5931a035"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 205, "deletions": 220, "lines": 425, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"]}, {"title": "GRPC tests fail and hang with JDK 1.8.0_73", "body": "Making the following change in `build.gradle` gets everything working again:\n\n```\n-        def alpnboot_version = '8.1.2.v20141202'\n+        def alpnboot_version = '8.1.7.v20160121'\n```\n\nHowever, doing so would probably break the build for developers using an old JDK and for Travis.\n\nShould the [current logic for choosing the ALPN version](https://github.com/grpc/grpc-java/blob/master/build.gradle#L150) accommodate more than one version of Java 8, or is the current approach intentional?\n", "url": "https://github.com/grpc/grpc-java/issues/1497", "user": "matthild", "labels": ["P3", "bug"], "created": "2016-02-29 18:50:45", "closed": "2016-05-02 22:25:58", "commits": {"aed886d8dea35f6dd4186a95a24f2e171ca559f1": {"commitGHEventType": "referenced", "commitUser": "dapengzhang0"}}, "ttf": 63.000277777777775, "commitsDetails": [{"commitHash": "aed886d8dea35f6dd4186a95a24f2e171ca559f1", "commitGHEventType": "referenced", "commitUser": "dapengzhang0", "commitParents": ["cd8f82871fa6d4e760f462558c24c8017f9f409f"], "nameRev": "aed886d8dea35f6dd4186a95a24f2e171ca559f1 tags/v0.15.0~131", "commitMessage": "use Jetty ALPN agent instead of Jetty ALPN \n\n#1497\r\n\r\n", "commitDateTime": "2016-05-02 14:01:36", "authoredDateTime": "2016-05-02 14:01:36", "commitGitStats": [{"filePath": "SECURITY.md", "insertions": 6, "deletions": 2, "lines": 8}, {"filePath": "benchmarks/build.gradle", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "build.gradle", "insertions": 7, "deletions": 13, "lines": 20}, {"filePath": "interop-testing/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "netty/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["aed886d8dea35f6dd4186a95a24f2e171ca559f1"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 19, "lines": 32, "gitFilesChange": 4}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["interop-testing", "benchmarks", "netty", ""]}, {"title": "TransportSet should reset current index on transportReady", "body": "If we successfully make a connection to an address, then that should mean the address is good. If it later is disconnected due to GOAWAY or transient failure we should start at the top of the list instead of trying less-desirable IPs.\n\nThis can cause errors, but any errors can already be gotten other ways, so it shouldn't be considered a major bug.\n", "url": "https://github.com/grpc/grpc-java/issues/1476", "user": "ejona86", "labels": ["bug"], "created": "2016-02-24 17:14:40", "closed": "2016-02-27 01:28:25", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Sporadic NullPointerException", "body": "I'm getting this sporadically on slow travis-ci machines.  Haven't seen it on other machines.  My guess is that the listener is being executed before the channel field assignment occurs so channel is null.\n\n```\njava.lang.NullPointerException: null\n    at io.grpc.netty.NettyClientTransport$1.operationComplete(NettyClientTransport.java:168) ~[grpc-netty-0.12.0.jar:0.12.0]\n    at io.grpc.netty.NettyClientTransport$1.operationComplete(NettyClientTransport.java:164) ~[grpc-netty-0.12.0.jar:0.12.0]\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:683) ~[netty-common-4.1.0.CR2.jar:4.1.0.CR2]\n    at io.netty.util.concurrent.DefaultPromise$LateListeners.run(DefaultPromise.java:854) [netty-common-4.1.0.CR2.jar:4.1.0.CR2]\n    at io.netty.util.concurrent.DefaultPromise$LateListenerNotifier.run(DefaultPromise.java:882) [netty-common-4.1.0.CR2.jar:4.1.0.CR2]\n    at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:339) [netty-common-4.1.0.CR2.jar:4.1.0.CR2]\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:356) [netty-transport-4.1.0.CR2.jar:4.1.0.CR2]\n    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:742) [netty-common-4.1.0.CR2.jar:4.1.0.CR2]\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_31]\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_31]\n    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_31]\n```\n", "url": "https://github.com/grpc/grpc-java/issues/1426", "user": "trask", "labels": ["bug", "netty"], "created": "2016-02-16 04:51:35", "closed": "2016-02-19 05:44:07", "commits": {"c10f5781b998990f23501919d6f58dec5c85465b": {"commitGHEventType": "closed", "commitUser": "ejona86"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "c10f5781b998990f23501919d6f58dec5c85465b", "commitGHEventType": "closed", "commitUser": "ejona86", "commitParents": ["86ef8e70b56abd6c4f6ba9cef87c5c54cdcdeb26"], "nameRev": "c10f5781b998990f23501919d6f58dec5c85465b tags/v0.14.0~156", "commitMessage": "Fix sporadic NullPointerException\n\nFixes #1426\n", "commitDateTime": "2016-02-18 21:43:43", "authoredDateTime": "2016-02-18 21:02:07", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/NettyClientTransport.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).1.operationComplete(io.netty.channel.ChannelFuture)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c10f5781b998990f23501919d6f58dec5c85465b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).1.operationComplete(io.netty.channel.ChannelFuture)"]}, {"title": "ProtocolNegotiators leaks ByteBufs on failure", "body": "As reported by @trask in #1277 with repro repo at https://github.com/trask/grpc-netty-leak-repro. The key distinguishing feature is `BufferUntilChannelActiveHandler` in the log here:\n\n```\nSEVERE: LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.\nRecent access records: 2\n#2:\n        Hint: 'ProtocolNegotiators$BufferUntilChannelActiveHandler#0' will handle the message from this point.\n```\n\nWhen looking at the code, it is obvious it doesn't release when it fails the promise. This leak only happens when failing to establish a connection to the server.\n", "url": "https://github.com/grpc/grpc-java/issues/1401", "user": "ejona86", "labels": ["bug"], "created": "2016-02-10 00:20:44", "closed": "2016-02-10 17:39:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Netty should call transportShutdown on GOAWAY", "body": "This will cause `TransportSet` to divert new traffic away from the transport which would prevent many failed RPCs.\n", "url": "https://github.com/grpc/grpc-java/issues/1359", "user": "ejona86", "labels": ["bug", "netty"], "created": "2016-01-26 18:45:12", "closed": "2016-03-07 17:41:47", "commits": {}, "ttf": 40.000277777777775, "commitsDetails": []}, {"title": "GOAWAY with OK maps to INTERNAL", "body": "HTTP/2 graceful shutdown starts with a GOAWAY with code OK.  We currently map that to a `INTERNAL`, which would not imply that clients should attempt a retry.  We should change this to `UNAVAILABLE`.\n", "url": "https://github.com/grpc/grpc-java/issues/1355", "user": "nmittler", "labels": ["bug"], "created": "2016-01-25 18:29:05", "closed": "2016-01-27 19:11:07", "commits": {"b7c4e18dcd00c8099ba6869d8e87d5825c50990a": {"commitGHEventType": "closed", "commitUser": "nmittler"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "b7c4e18dcd00c8099ba6869d8e87d5825c50990a", "commitGHEventType": "closed", "commitUser": "nmittler", "commitParents": ["52f17055a4282c533502a8f34848918891070d64"], "nameRev": "b7c4e18dcd00c8099ba6869d8e87d5825c50990a tags/v0.13.0~46", "commitMessage": "Change status of HTTP/2 NO_ERROR to UNAVAILABLE.\n\nFixes #1355\n", "commitDateTime": "2016-01-27 11:10:54", "authoredDateTime": "2016-01-27 10:05:08", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/GrpcUtil.java", "insertions": 7, "deletions": 2, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GrpcUtil.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.GrpcUtil.Http2Error", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b7c4e18dcd00c8099ba6869d8e87d5825c50990a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 2, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/main/java/io/grpc/internal"], "changesInPackagesSPOON": ["io.grpc.internal.GrpcUtil.Http2Error"]}, {"title": "Deadline can fire before stream started", "body": "In [ClientCallImpl](https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/internal/ClientCallImpl.java#L249) the deadline is scheduled before `stream.start()`. However, if the deadline has already elapsed the runnable will be executed immediately and race with the `start`. I've only looked into how OkHttp may be impacted.\n\nI believe [a NullPointerException](https://github.com/grpc/grpc-java/blob/master/core/src/main/java/io/grpc/internal/AbstractClientStream.java#L284) would be thrown when trying to notify the stream listener [due to the cancellation](https://github.com/grpc/grpc-java/blob/master/okhttp/src/main/java/io/grpc/okhttp/OkHttpClientStream.java#L259). However, due to #1237 the exception won't be logged. Thus, this will result in a hung stream that never completes with no logging as to what went wrong.\n\nThis was discovered due to timeout_on_sleeping_server on android being flaky, because it uses a very small timeout. The test would fail at [awaitCompletion](https://github.com/grpc/grpc-java/blob/master/android-interop-testing/app/src/main/java/io/grpc/android/integrationtest/InteropTester.java#L735).\n\n@carl-mastrangelo, FYI\n", "url": "https://github.com/grpc/grpc-java/issues/1343", "user": "ejona86", "labels": ["bug"], "created": "2016-01-23 03:52:19", "closed": "2016-01-25 21:25:45", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "memory leak in io.grpc.internal.TransportSet", "body": "We experienced an issue where our grpc-java clients filled up their heaps and the entire cluster went down. The cause appears to be a list of futures in io.grpc.internal.TransportSet. 5 of these sets would consume 47% of a 30GB heap. The cluster was running without issue for a month.\n\nContext: Our clients each make about 10,000 requests/s to a cluster of 80 servers. The problem began when the cluster of servers was restarted. The clients filled their heaps and effectively died. A restart of the clients resolved the immediate issue, but we want to fix the root cause.\n\nThe clients each maintain a single blocking stub for each of the 80 servers. We enforce a 10ms timeout using withDeadlineAfter(). All calling threads reuse the same blocking stub.\n\nWe did manage to get a heap dump of an offending client. We noticed that about 5 blocking stubs account for 47% of the retained heap on the machine. ~70 blocking stubs have the expected ~1kb size. I'm attaching a screenshot of the Dominator Tree report from Eclipse Memory Analyzer showing the problem. The labels on the columns are \"shallow heap\", \"retained heap\" and \"retained heap %\". This shows that a single io.grpc.internal.TransportSet has references to effectively a linked-list of RunnableExecutorPair objects each containing a Future. This linked list is 1.6 GB in size, where each element is about 1.5kb.\n\nAny thoughts? What can I do to help debug this?\n\nWe are running grpc-java master as of Dec 9. v0.9 has a bug that makes it unusable for us.\n\n![grpc_stub_heap_use](https://cloud.githubusercontent.com/assets/2730364/12527498/517abf4a-c131-11e5-854e-542dec03e347.png)\n", "url": "https://github.com/grpc/grpc-java/issues/1342", "user": "alugowski", "labels": ["bug"], "created": "2016-01-23 02:11:42", "closed": "2016-02-23 17:43:27", "commits": {}, "ttf": 31.00027777777778, "commitsDetails": []}, {"title": "Receiving ClosedChannelException instead of actual error", "body": "We aren't reporting a helpful error in very simple connectivity cases, like the server port is closed. Here is what it looks like when using the interop client against a non-existent server: \n\n```\n$ ./build/install/grpc-interop-testing/bin/test-client\nRunning test empty_unary\n...\nException in thread \"main\" io.grpc.StatusRuntimeException: UNAVAILABLE\n        at io.grpc.Status.asRuntimeException(Status.java:431)\n        at io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:157)\n        at io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:106)\n        at io.grpc.testing.integration.TestServiceGrpc$TestServiceBlockingStub.emptyCall(TestServiceGrpc.java:212)\n        at io.grpc.testing.integration.AbstractTransportTest.emptyUnary(AbstractTransportTest.java:164)\n        at io.grpc.testing.integration.TestServiceClient.runTest(TestServiceClient.java:220)\n        at io.grpc.testing.integration.TestServiceClient.run(TestServiceClient.java:209)\n        at io.grpc.testing.integration.TestServiceClient.main(TestServiceClient.java:80)\nCaused by: java.nio.channels.ClosedChannelException\n```\n\nIt seems the problem may also impact other, much harder to diagnose, issues like client certificate validation (like in #1327).\n", "url": "https://github.com/grpc/grpc-java/issues/1330", "user": "ejona86", "labels": ["P2", "bug", "netty"], "created": "2016-01-20 21:42:20", "closed": "2016-09-12 17:17:34", "commits": {"1170afd16844bfe8654dd8634ff026d02e77baa0": {"commitGHEventType": "closed", "commitUser": "ejona86"}, "7504b79f0083db84cd1b2bd141603e20d70d2a16": {"commitGHEventType": "referenced", "commitUser": "buchgr"}, "4aadf550ee6b4f6c3a7f63bb7a295cbdfb9b12d9": {"commitGHEventType": "referenced", "commitUser": "buchgr"}}, "ttf": 235.00027777777777, "commitsDetails": [{"commitHash": "1170afd16844bfe8654dd8634ff026d02e77baa0", "commitGHEventType": "closed", "commitUser": "ejona86", "commitParents": ["72f1e88d78ffd598021930652142165fd4b5b25f"], "nameRev": "1170afd16844bfe8654dd8634ff026d02e77baa0 tags/v0.14.0~129", "commitMessage": "Add transport test for Netty\n\nNetty client shutdown would race with the negotiation handling and\ncircumvent AbstractBufferingHandler. Use a new command in order to\nleave channel.close() available for abrupt killing of the connection\nwhen connecting.\n\nping_afterTermination was previously racey that made it succeed. After\nfixing the test, Netty would consistently fail to call callback. After\nfixing Netty to fail the callback it was not using the right status\nbecause when Netty's channel is closed none of our handlers are run.\nThis reliably fails the future with ClosedChannelException, which is\nuseless, so now we special-case that exception and fill in the reason\nfor shutdown.\n\nTo prevent accidentally reporting Status.OK, the transports no longer\nuse OK when calling transportShutdown. The OK status was already no\nlonger being consumed, since keying off whether transportReady was\ncalled is more helpful.\n\nThis fixes #1330\n", "commitDateTime": "2016-03-01 17:43:30", "authoredDateTime": "2016-02-08 11:17:42", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/inprocess/InProcessTransport.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/src/main/java/io/grpc/internal/DelayedClientTransport.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/src/main/java/io/grpc/internal/ManagedClientTransport.java", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "netty/src/main/java/io/grpc/netty/GracefulCloseCommand.java", "insertions": 35, "deletions": 0, "lines": 35}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyClientHandler.java", "insertions": 27, "deletions": 11, "lines": 38}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyClientStream.java", "insertions": 8, "deletions": 2, "lines": 10}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyClientTransport.java", "insertions": 49, "deletions": 8, "lines": 57}, {"filePath": "netty/src/main/java/io/grpc/netty/Utils.java", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyClientStreamTest.java", "insertions": 16, "deletions": 2, "lines": 18}, {"filePath": "netty/src/test/java/io/grpc/netty/NettyTransportTest.java", "insertions": 89, "deletions": 0, "lines": 89}, {"filePath": "testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java", "insertions": 23, "deletions": 1, "lines": 24}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InProcessTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.inprocess.InProcessTransport.shutdown()", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "DelayedClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.DelayedClientTransport.shutdown()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ManagedClientTransport.java", "spoonMethods": []}, {"spoonFilePath": "GracefulCloseCommand.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.GracefulCloseCommand", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyClientHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientHandler.sendPingFrame(io.netty.channel.ChannelHandlerContext,io.grpc.netty.SendPingCommand,io.netty.channel.ChannelPromise)", "TOT": 8, "UPD": 2, "INS": 3, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyClientHandler.close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientHandler.write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientHandler.createStream(io.grpc.netty.CreateStreamCommand,io.netty.channel.ChannelPromise)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "NettyClientStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientStream.start(io.grpc.internal.ClientStreamListener).1.operationComplete(io.netty.channel.ChannelFuture)", "TOT": 4, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyClientStream", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientStream.statusFromFailedFuture(io.netty.channel.ChannelFuture)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).2", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).3", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.shutdown()", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).1", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).3.operationComplete(io.netty.channel.ChannelFuture)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).2.operationComplete(io.netty.channel.ChannelFuture)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata)", "TOT": 7, "UPD": 0, "INS": 1, "MOV": 5, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.notifyShutdown(io.grpc.Status)", "TOT": 6, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 1}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.statusFromFailedFuture(io.netty.channel.ChannelFuture)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientTransport.ping(io.grpc.netty.PingCallback,java.util.concurrent.Executor)", "TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "Utils.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.Utils.statusFromThrowable(java.lang.Throwable)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyClientStreamTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientStreamTest.setHttp2StreamShouldNotifyReady()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientStreamTest.createStream()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.NettyClientStreamTest.NettyClientStreamImpl", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyTransportTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.newStream_afterTermination()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.clientStartStop()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.ping_duringShutdown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.ping_afterTermination()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.newStream_duringShutdown()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "7504b79f0083db84cd1b2bd141603e20d70d2a16", "commitGHEventType": "referenced", "commitUser": "buchgr", "commitParents": ["d9001ca4488ba48cf8f732c5fbe59386f55833dc"], "nameRev": "7504b79f0083db84cd1b2bd141603e20d70d2a16 tags/v1.0.0-pre1~22", "commitMessage": "netty: add logging to find cause of ClosedChannelException.\n\n- See #1330 for details.\r\n- Also, Netty 4.1.2.Final comes with additional information where\r\na (usually statically cached) ClosedChannelException was triggered [1]\r\n\r\n[1] https://github.com/netty/netty@e845670#diff-8c9a7d1d9b0fdb6c5aef2794d05a9f88", "commitDateTime": "2016-07-09 14:50:39", "authoredDateTime": "2016-07-09 14:50:39", "commitGitStats": [{"filePath": "testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java", "insertions": 14, "deletions": 3, "lines": 17}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.assertCodeEquals(io.grpc.Status,io.grpc.Status)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.ping_afterTermination()", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.assertCodeEquals(java.lang.String,io.grpc.Status,io.grpc.Status)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "4aadf550ee6b4f6c3a7f63bb7a295cbdfb9b12d9", "commitGHEventType": "referenced", "commitUser": "buchgr", "commitParents": ["8c18a0d35589f21678f614361a9ec1ba82794e13"], "nameRev": "4aadf550ee6b4f6c3a7f63bb7a295cbdfb9b12d9 tags/v1.1.0~205", "commitMessage": "netty: Fix receipt of ClosedChannelException instead of actual error. Fixes #1330.\n\n\r\nOur API allows pings to be send even after the transport has been shutdown. We currently\r\ndon't handle the case, where the Netty channel has been closed but the NettyClientHandler\r\nhas not yet been removed from the pipeline, correctly. That is, we need to query the shutdown\r\nstatus whenever we receive a ClosedChannelException.\r\n\r\nAlso, some cleanup.", "commitDateTime": "2016-09-12 19:17:34", "authoredDateTime": "2016-09-12 19:17:34", "commitGitStats": [{"filePath": "core/src/main/java/io/grpc/internal/Http2Ping.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyClientHandler.java", "insertions": 10, "deletions": 1, "lines": 11}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyClientTransport.java", "insertions": 8, "deletions": 6, "lines": 14}, {"filePath": "netty/src/main/java/io/grpc/netty/Utils.java", "insertions": 1, "deletions": 4, "lines": 5}, {"filePath": "testing/src/main/java/io/grpc/internal/testing/AbstractTransportTest.java", "insertions": 1, "deletions": 8, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Http2Ping.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.Http2Ping.failed(java.lang.Throwable)", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "NettyClientHandler.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientHandler.sendPingFrame(io.netty.channel.ChannelHandlerContext,io.grpc.netty.SendPingCommand,io.netty.channel.ChannelPromise).4.operationComplete(io.netty.channel.ChannelFuture)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "NettyClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyClientTransport.statusFromFailedFuture(io.netty.channel.ChannelFuture)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "Utils.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.Utils.statusFromThrowable(java.lang.Throwable)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "AbstractTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.testing.AbstractTransportTest.ping_afterTermination()", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 3}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1170afd16844bfe8654dd8634ff026d02e77baa0", "7504b79f0083db84cd1b2bd141603e20d70d2a16", "4aadf550ee6b4f6c3a7f63bb7a295cbdfb9b12d9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 148, "deletions": 36, "lines": 184, "gitFilesChange": 9}, "spoonStatsSummary": {"TOT": 68, "UPD": 13, "INS": 23, "MOV": 24, "DEL": 8, "spoonFilesChanged": 8, "spoonMethodsChanged": 24}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty", "core/src/main/java/io/grpc/internal", "core/src/main/java/io/grpc/inprocess"], "changesInPackagesSPOON": ["io.grpc.netty.NettyClientTransport.statusFromFailedFuture(io.netty.channel.ChannelFuture)", "io.grpc.netty.Utils.statusFromThrowable(java.lang.Throwable)", "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).3", "io.grpc.internal.Http2Ping.failed(java.lang.Throwable)", "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).3.operationComplete(io.netty.channel.ChannelFuture)", "io.grpc.netty.NettyClientTransport.ping(io.grpc.netty.PingCallback,java.util.concurrent.Executor)", "io.grpc.netty.NettyClientHandler.write(io.netty.channel.ChannelHandlerContext,java.lang.Object,io.netty.channel.ChannelPromise)", "io.grpc.netty.NettyClientHandler.sendPingFrame(io.netty.channel.ChannelHandlerContext,io.grpc.netty.SendPingCommand,io.netty.channel.ChannelPromise)", "io.grpc.netty.NettyClientHandler.close(io.netty.channel.ChannelHandlerContext,io.netty.channel.ChannelPromise)", "io.grpc.netty.NettyClientTransport.shutdown()", "io.grpc.netty.NettyClientTransport", "io.grpc.netty.NettyClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata)", "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).2.operationComplete(io.netty.channel.ChannelFuture)", "io.grpc.netty.NettyClientStream.start(io.grpc.internal.ClientStreamListener).1.operationComplete(io.netty.channel.ChannelFuture)", "io.grpc.netty.NettyClientStream", "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).1", "io.grpc.netty.NettyClientHandler.sendPingFrame(io.netty.channel.ChannelHandlerContext,io.grpc.netty.SendPingCommand,io.netty.channel.ChannelPromise).4.operationComplete(io.netty.channel.ChannelFuture)", "io.grpc.netty.NettyClientTransport.start(io.grpc.netty.Listener).2", "io.grpc.inprocess.InProcessTransport.shutdown()", "io.grpc.netty.NettyClientStream.statusFromFailedFuture(io.netty.channel.ChannelFuture)", "io.grpc.netty.NettyClientHandler.createStream(io.grpc.netty.CreateStreamCommand,io.netty.channel.ChannelPromise)", "io.grpc.internal.DelayedClientTransport.shutdown()", "io.grpc.netty.GracefulCloseCommand", "io.grpc.netty.NettyClientTransport.notifyShutdown(io.grpc.Status)"]}, {"title": "BufferingHttp2ConnectionEncoder forgets GO_AWAY received", "body": "The BufferingHttp2ConnectionEncoder needs to remember that a GO_AWAY was received and immediately reject incoming requests.\n", "url": "https://github.com/grpc/grpc-java/issues/1319", "user": "nmittler", "labels": ["bug"], "created": "2016-01-14 18:27:29", "closed": "2016-01-21 15:38:58", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Netty Server does not observe channelInactive", "body": "If the TCP connection goes down, gRPC isn't noticing because nothing is observing the `channelInactive()` notification on the channel pipeline. I confirmed that `channelInactive()` is called, but saw that an outstanding streaming RPC was not cancelled.\n\nThis likely applies to both client-side and server-side; I only verified it broken on server-side.\n", "url": "https://github.com/grpc/grpc-java/issues/1251", "user": "ejona86", "labels": ["bug", "netty"], "created": "2015-12-04 00:35:09", "closed": "2015-12-07 17:03:23", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "NPE in ProtoInputStream.drainTo", "body": "```\njava.lang.NullPointerException: null\n        at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:210)\n        at com.google.common.io.ByteStreams.copy(ByteStreams.java:65)\n        at io.grpc.protobuf.ProtoInputStream.drainTo(ProtoInputStream.java:74)\n        at io.grpc.internal.MessageFramer.writeToOutputStream(MessageFramer.java:224)\n        at io.grpc.internal.MessageFramer.writeKnownLength(MessageFramer.java:185)\n        at io.grpc.internal.MessageFramer.writeUncompressed(MessageFramer.java:135)\n        at io.grpc.internal.MessageFramer.writePayload(MessageFramer.java:125)\n        at io.grpc.internal.AbstractStream.writeMessage(AbstractStream.java:165)\n        at io.grpc.internal.ClientCallImpl.sendMessage(ClientCallImpl.java:204)\n        at com.google.cloud.bigtable.grpc.io.ReconnectingChannel$DelayingCall.sendMessage(ReconnectingChannel.java:122)\n        at io.grpc.ForwardingClientCall.sendMessage(ForwardingClientCall.java:65)\n```\n\nIt looks like if you call `drainTo()` twice then it will NPE. Calling `drainTo()` twice is sort of strange, so I wouldn't expect this to be critical, but we should still not NPE.\n", "url": "https://github.com/grpc/grpc-java/issues/1225", "user": "ejona86", "labels": ["bug"], "created": "2015-11-20 20:10:31", "closed": "2016-02-02 18:02:06", "commits": {}, "ttf": 73.00027777777778, "commitsDetails": []}, {"title": "empty_stream interop tests fails against Go server", "body": "empty_stream, java client, go server\n\n```\nRunning test empty_stream\nOct 09, 2015 10:59:50 PM io.grpc.internal.TransportSet$1 run\nINFO: Created transport 'io.grpc.netty.NettyClientTransport@332c01ed\nOct 09, 2015 10:59:53 PM io.netty.util.internal.ThreadLocalRandom getInitialSeedUniquifier\nWARNING: Failed to generate a seed from SecureRandom within 3 seconds. Not enough entropy?\nOct 09, 2015 10:59:53 PM io.grpc.internal.TransportSet$TransportListener transportReady\nINFO: Transport 'io.grpc.netty.NettyClientTransport@332c01ed is ready\nOct 09, 2015 10:59:55 PM io.grpc.internal.TransportSet$TransportListener transportShutdown\nINFO: Transport 'io.grpc.netty.NettyClientTransport@332c01ed is being shutdown\nException in thread \"main\" Wanted but not invoked:\nstreamObserver.onCompleted();\n-> at io.grpc.testing.integration.AbstractTransportTest.emptyStream(AbstractTransportTest.java:320)\n\nHowever, there were other interactions with this mock:\nstreamObserver.onError(\n    io.grpc.StatusRuntimeException: INTERNAL: Invalid content-type: null\n);\n-> at io.grpc.stub.ClientCalls$StreamObserverToCallListenerAdapter.onClose(ClientCalls.java:266)\n\n\n    at io.grpc.testing.integration.AbstractTransportTest.emptyStream(AbstractTransportTest.java:320)\n    at io.grpc.testing.integration.TestServiceClient.runTest(TestServiceClient.java:228)\n    at io.grpc.testing.integration.TestServiceClient.run(TestServiceClient.java:207)\n    at io.grpc.testing.integration.TestServiceClient.main(TestServiceClient.java:80)\nShutting down\n\nFLAKE: cloud_to_cloud:java:go_server:empty_stream [ret=1, pid=31237]\n```\n\nhttps://grpc-testing.appspot.com/job/gRPC_interop_master/180/console\n", "url": "https://github.com/grpc/grpc-java/issues/1113", "user": "jtattermusch", "labels": ["bug", "cross-language-gotchas"], "created": "2015-10-09 23:07:15", "closed": "2015-10-13 23:53:14", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "transportShutdown() should be called before calling transportTerminated().", "body": "With the changes of TransportSet, transportShutdown() must be called before calling transportTerminated().\n\n```\n10-06 15:32:45.917  5126  5126 E AndroidRuntime: FATAL EXCEPTION: OkHttpClientTransport\n10-06 15:32:45.917  5126  5126 E AndroidRuntime: Process: com.google.android.apps.fireball, PID: 5126\n10-06 15:32:45.917  5126  5126 E AndroidRuntime: java.lang.IllegalStateException: Listener is still attached to activeTransportFuture. Seems transportTerminated was not called.\n10-06 15:32:45.917  5126  5126 E AndroidRuntime:    at com.google.common.base.Preconditions.checkState(Preconditions.java:173)\n10-06 15:32:45.917  5126  5126 E AndroidRuntime:    at io.grpc.internal.TransportSet$TransportListener.transportTerminated(TransportSet.java:249)\n10-06 15:32:45.917  5126  5126 E AndroidRuntime:    at io.grpc.okhttp.OkHttpClientTransport$ClientFrameHandler.run(OkHttpClientTransport.java:606)\n10-06 15:32:45.917  5126  5126 E AndroidRuntime:    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\n10-06 15:32:45.917  5126  5126 E AndroidRuntime:    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\n10-06 15:32:45.917  5126  5126 E AndroidRuntime:    at java.lang.Thread.run(Thread.java:818)\n10-06 15:32:45.918   745  1319 W ActivityManager:   Force finishing activity com.google.android.apps.fireball/.ui.photoviewer.FireballPhotoViewActivity\n```\n", "url": "https://github.com/grpc/grpc-java/issues/1111", "user": "madongfly", "labels": ["bug", "okhttp"], "created": "2015-10-08 23:54:34", "closed": "2015-10-12 23:40:26", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "The run-test-server.sh exits immediately", "body": "After changing to using daemon threads by default, this script stopped working.  We need to update the server to keep alive until cancelled (e.g. ctrl+c).\n", "url": "https://github.com/grpc/grpc-java/issues/1017", "user": "nmittler", "labels": ["bug"], "created": "2015-09-11 22:57:07", "closed": "2015-09-11 23:04:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Possible race condition ServerImpl between start() and shutdown()", "body": "I believe it may be possible if start and stop are called concurrently that the shared executor may not get released.  I'm not sure if this is an actual problem, but it does go against the @ ThreadSafe annotation.\n", "url": "https://github.com/grpc/grpc-java/issues/999", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2015-09-10 22:48:03", "closed": "2015-09-14 18:44:42", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "okhttp: Skip trash data for finished stream.", "body": "Otherwise the remaining data would pollute the next read. \n", "url": "https://github.com/grpc/grpc-java/issues/952", "user": "madongfly", "labels": ["bug", "okhttp"], "created": "2015-09-04 00:03:23", "closed": "2015-09-04 06:56:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NettyServer prematurely releases worker event loop", "body": "777e928 causes flaky server shutdown, as the individual transports out-live the server.\n", "url": "https://github.com/grpc/grpc-java/issues/926", "user": "ejona86", "labels": ["bug"], "created": "2015-09-02 20:19:01", "closed": "2015-09-04 01:31:01", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "OkHttp: race between sendCancel and sendFrame.", "body": "If sendCancel is called (by timeout for example) before the stream is started, a following sendFrame will cause a NPE:\n\n```\njava.lang.NullPointerException\n    at io.grpc.okhttp.OkHttpClientStream.sendFrame(OkHttpClientStream.java:197)\n    at io.grpc.internal.AbstractClientStream.internalSendFrame(AbstractClientStream.java:199)\n    at io.grpc.internal.AbstractStream$2.deliverFrame(AbstractStream.java:128)\n    at io.grpc.internal.MessageFramer.commitToSink(MessageFramer.java:297)\n    at io.grpc.internal.MessageFramer.flush(MessageFramer.java:255)\n    at io.grpc.internal.AbstractStream.flush(AbstractStream.java:178)\n    at io.grpc.ClientCallImpl.sendMessage(ClientCallImpl.java:213)\n    at io.grpc.stub.ClientCalls$CallToStreamObserverAdapter.onNext(ClientCalls.java:210)\n    at io.grpc.testing.integration.AbstractTransportTest.timeoutOnSleepingServer(AbstractTransportTest.java:843)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:606)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.internal.runners.statements.FailOnTimeout$StatementThread.run(FailOnTimeout.java:74)\n```\n", "url": "https://github.com/grpc/grpc-java/issues/887", "user": "madongfly", "labels": ["bug", "okhttp"], "created": "2015-08-27 21:14:57", "closed": "2015-08-28 05:39:24", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "InProcessTransport doesn't call onReady", "body": "The in-process transport supports flow control and supports `isReady()`, but it never calls `onReady()`. It seems to be just an oversight/bug. Since the in-process transport connects immediately, `onReady()` should probably be called on the client immediately in `newStream()`.\n\nLocking will be a little interesting since for a single `request()` both client and server listeners may need to be called (because numMessages can be > 1). It looks like `{client,server}Requested()` could maybe return a boolean for whether `{client,server}Requested > 0 && {client,server}Requested <= numMessages`, which would imply `onReady()` should be called.\n", "url": "https://github.com/grpc/grpc-java/issues/875", "user": "ejona86", "labels": ["bug"], "created": "2015-08-25 23:53:38", "closed": "2016-02-10 18:05:26", "commits": {}, "ttf": 168.00027777777777, "commitsDetails": []}, {"title": "MessageDeframer stalled logic needs review", "body": "Currently there is a bug that results in the MessageDeframer not being stalled when stream is being closed (in error scenarios), resulting in the stream listener not being called immediately.  Specific lines of review include:\n\nreturn unprocessed.readableBytes() > 0 || (nextFrame != null && nextFrame.readableBytes() > 0);\n\nAnd a proposed change (WIP):\n\n```\n  stalled = (unprocessed.readableBytes() == 0);\n\n  if (endOfStream) {\n    if (!stalled) {\n      listener.endOfStream();\n    } else if (nextFrame != null || nextFrame.readableBytes() > 0) {//FIXME\n      // We've received the entire stream and have data available but we don't have\n      // enough to read the next frame ... this is bad.\n      throw Status.INTERNAL.withDescription(\"Encountered end-of-stream mid-frame\")\n          .asRuntimeException();\n    } else if (stalled) {\n    }\n  }\n```\n", "url": "https://github.com/grpc/grpc-java/issues/857", "user": "carl-mastrangelo", "labels": ["bug"], "created": "2015-08-21 22:16:25", "closed": "2015-08-26 17:22:01", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "okhttp: pending stream is broken due to stream id check.", "body": "`OkHttpClientTransport.mayHaveCreatedStream()` checks the stream id less than the `nextStreamId`, but the `nextStreamId` is not increased yet when the pending stream is being started.\n\nAnd `OkHttpClientTransport.mayHaveCreatedStream()` is wrong when the stream id greater than Integer.MAX_VALUE - 2.\n", "url": "https://github.com/grpc/grpc-java/issues/786", "user": "madongfly", "labels": ["bug", "okhttp"], "created": "2015-08-10 23:57:43", "closed": "2015-08-11 17:16:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Flake: Cannot transition phase from STATUS to MESSAGE", "body": "As seen in https://travis-ci.org/grpc/grpc-java/builds/74499477:\n\n```\nio.grpc.testing.integration.Http2NettyLocalChannelTest > deadlineExceeded FAILED\n    java.lang.AssertionError: expected:<Status{code=DEADLINE_EXCEEDED, description=null, cause=null}> but was:<Status{code=UNKNOWN, description=null, cause=java.lang.IllegalStateException: Cannot transition phase from STATUS to MESSAGE}>\n```\n\nNot much to go on. This can just track occasions that we see it.\n", "url": "https://github.com/grpc/grpc-java/issues/765", "user": "ejona86", "labels": ["bug"], "created": "2015-08-07 00:26:26", "closed": "2016-04-26 17:52:28", "commits": {}, "ttf": 263.0002777777778, "commitsDetails": []}, {"title": "okhttp: pending stream should be cancellable.", "body": "Current implementation will throw a NPE\n", "url": "https://github.com/grpc/grpc-java/issues/760", "user": "madongfly", "labels": ["bug", "okhttp"], "created": "2015-08-06 22:05:55", "closed": "2015-08-07 18:31:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "In-process transport deadlock during shutdown", "body": "Simultaneously shutting down both server and client sharing the same in-process transport can lead to a deadlock. During server shutdown, the transport lock is held while calling transportShutdown on the channel listener, which attempts to lock the channel. At the same time, channel.shutdownNow() holds the channel lock while also trying to lock the transport which leads to a deadlock:\n\n```\nFound one Java-level deadlock:\n=============================\n\"AccountServer STOPPING\":\n  waiting to lock monitor 0x00007f88221d72a8 (object 0x000000076eb28a20, a io.grpc.ChannelImpl),\n  which is held by \"main\"\n\"main\":\n  waiting to lock monitor 0x00007f8824015488 (object 0x000000076c2afb38, a io.grpc.transport.inprocess.InProcessTransport),\n  which is held by \"AccountServer STOPPING\"\n\nJava stack information for the threads listed above:\n===================================================\n\"AccountServer STOPPING\":\n    at io.grpc.ChannelImpl$TransportListener.transportShutdown(ChannelImpl.java:281)\n    - waiting to lock <0x000000076eb28a20> (a io.grpc.ChannelImpl)\n    at io.grpc.transport.inprocess.InProcessTransport.notifyShutdown(InProcessTransport.java:151)\n    - locked <0x000000076c2afb38> (a io.grpc.transport.inprocess.InProcessTransport)\n    at io.grpc.transport.inprocess.InProcessTransport.shutdown(InProcessTransport.java:140)\n    - locked <0x000000076c2afb38> (a io.grpc.transport.inprocess.InProcessTransport)\n    at io.grpc.ServerImpl$ServerListenerImpl.serverShutdown(ServerImpl.java:240)\n    - locked <0x000000076bfe81a8> (a io.grpc.ServerImpl)\n    at io.grpc.transport.inprocess.InProcessServer.shutdown(InProcessServer.java:77)\n    - locked <0x000000076be7fdc0> (a io.grpc.transport.inprocess.InProcessServer)\n    at io.grpc.ServerImpl.shutdown(ServerImpl.java:135)\n    - locked <0x000000076bfe81a8> (a io.grpc.ServerImpl)\n    at com.pexlabs.grpc.AbstractGrpcServer.shutDown(AbstractGrpcServer.java:42)\n    at com.google.common.util.concurrent.AbstractIdleService$2$2.run(AbstractIdleService.java:69)\n    at com.google.common.util.concurrent.Callables$3.run(Callables.java:95)\n    at java.lang.Thread.run(Thread.java:745)\n\"main\":\n    at io.grpc.transport.inprocess.InProcessTransport.shutdown(InProcessTransport.java:136)\n    - waiting to lock <0x000000076c2afb38> (a io.grpc.transport.inprocess.InProcessTransport)\n    at io.grpc.ChannelImpl.shutdown(ChannelImpl.java:128)\n    - locked <0x000000076eb28a20> (a io.grpc.ChannelImpl)\n    at io.grpc.ChannelImpl.shutdownNow(ChannelImpl.java:149)\n    - locked <0x000000076eb28a20> (a io.grpc.ChannelImpl)\n    at com.pexlabs.grpc.AbstractGrpcClient.close(AbstractGrpcClient.java:25)\n    at com.pexlabs.test.TestUtil$1.doStop(TestUtil.java:25)\n    at com.google.common.util.concurrent.AbstractService.stopAsync(AbstractService.java:204)\n    at com.google.common.util.concurrent.ServiceManager.stopAsync(ServiceManager.java:327)\n    at com.pexlabs.test.TestContext.after(TestContext.java:75)\n    at org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:50)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:68)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:140)\n\nFound 1 deadlock.\n```\n", "url": "https://github.com/grpc/grpc-java/issues/696", "user": "dconnelly", "labels": ["bug"], "created": "2015-08-03 23:00:59", "closed": "2015-08-04 23:54:13", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Double-closure of call during interop tests", "body": "I find it in the stderr of the test report of Netty, Netty local channel, and OkHttp. I see it printed out to my console once, so I think that may be from the InProcess test.\n\nThis exception very likely means we have a bug and are double-closing.\n\n```\njava.lang.IllegalStateException: call already closed\n    at com.google.common.base.Preconditions.checkState(Preconditions.java:173)\n    at io.grpc.ServerImpl$ServerCallImpl.close(ServerImpl.java:507)\n    at io.grpc.ForwardingServerCall.close(ForwardingServerCall.java:65)\n    at io.grpc.testing.TestUtils$1$1.close(TestUtils.java:109)\n    at io.grpc.stub.ServerCalls$ResponseObserver.onError(ServerCalls.java:237)\n    at io.grpc.testing.integration.TestServiceImpl$ResponseDispatcher.dispatchChunk(TestServiceImpl.java:277)\n    at io.grpc.testing.integration.TestServiceImpl$ResponseDispatcher.access$000(TestServiceImpl.java:207)\n    at io.grpc.testing.integration.TestServiceImpl$ResponseDispatcher$1.run(TestServiceImpl.java:219)\n    at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\n    at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n", "url": "https://github.com/grpc/grpc-java/issues/694", "user": "ejona86", "labels": ["bug"], "created": "2015-08-03 19:23:54", "closed": "2015-09-16 01:06:29", "commits": {}, "ttf": 43.000277777777775, "commitsDetails": []}, {"title": "Fix UNKNOWN status without description", "body": "https://github.com/grpc/grpc-java/blob/d2b1b37ed7ba0087fd8a2920549118191ce22f95/core/src/main/java/io/grpc/ChannelImpl.java#L311\nhttps://github.com/grpc/grpc-java/blob/3e26b993ce90901b32faa1b8b855abfdc2153bc6/netty/src/main/java/io/grpc/transport/netty/NettyClientHandler.java#L212\n\nWe should basically always provide a description, so that users have a hope of distinguishing whether an error is local or remote. The NettyClientHandler should be converting the HTTP/2 error code to a status.\n", "url": "https://github.com/grpc/grpc-java/issues/687", "user": "ejona86", "labels": ["bug"], "created": "2015-07-31 22:55:57", "closed": "2015-08-03 18:34:00", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "May need to tweak ordering of `complete()` and `close()`", "body": "We shouldn't be getting the \"successful complete() without close()\" exception. It seems it is caused by another exception and us not cleaning up the stream well.\n\nIt isn't the point of this issue to fix the \"flow control window exceeded\" exception. That is being investigated elsewhere.\n\n```\nJul 09, 2015 4:11:07 PM io.grpc.transport.netty.NettyServerHandler onStreamError\nWARNING: Stream Error\nio.netty.handler.codec.http2.Http2Exception$StreamException: Flow control window exceeded for stream: 1\n    at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:100)\n    at io.netty.handler.codec.http2.DefaultHttp2LocalFlowController$DefaultState.receiveFlowControlledFrame(DefaultHttp2LocalFlowController.java:365)\n    at io.netty.handler.codec.http2.DefaultHttp2LocalFlowController.receiveFlowControlledFrame(DefaultHttp2LocalFlowController.java:239)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:223)\n    at io.netty.handler.codec.http2.Http2InboundFrameLogger$1.onDataRead(Http2InboundFrameLogger.java:46)\n    at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:392)\n    at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:223)\n    at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:130)\n    at io.netty.handler.codec.http2.Http2InboundFrameLogger.readFrame(Http2InboundFrameLogger.java:39)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:100)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:293)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:336)\n    at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:327)\n    at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:230)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeChannelReadNow(ChannelHandlerInvokerUtil.java:83)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeChannelRead(DefaultChannelHandlerInvoker.java:153)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:157)\n    at io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1069)\n    at io.netty.handler.ssl.SslHandler.decode(SslHandler.java:939)\n    at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:327)\n    at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:230)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeChannelReadNow(ChannelHandlerInvokerUtil.java:83)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeChannelRead(DefaultChannelHandlerInvoker.java:153)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:157)\n    at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:946)\n    at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:127)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:510)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:467)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:381)\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:353)\n    at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:703)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n\nJul 09, 2015 4:11:07 PM io.netty.util.concurrent.DefaultPromise notifyListener0\nWARNING: An exception was thrown by io.grpc.transport.netty.NettyServerHandler$2.operationComplete()\njava.lang.IllegalStateException: successful complete() without close()\n    at io.grpc.transport.AbstractServerStream.complete(AbstractServerStream.java:198)\n    at io.grpc.transport.netty.NettyServerHandler$2.operationComplete(NettyServerHandler.java:262)\n    at io.grpc.transport.netty.NettyServerHandler$2.operationComplete(NettyServerHandler.java:259)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:603)\n    at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:563)\n    at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:406)\n    at io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator.trySuccess(Http2CodecUtil.java:288)\n    at io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator.trySuccess(Http2CodecUtil.java:192)\n    at io.netty.channel.DefaultChannelPromise.trySuccess(DefaultChannelPromise.java:82)\n    at io.netty.channel.ChannelOutboundBuffer.safeSuccess(ChannelOutboundBuffer.java:644)\n    at io.netty.channel.ChannelOutboundBuffer.remove(ChannelOutboundBuffer.java:260)\n    at io.netty.channel.ChannelOutboundBuffer.removeBytes(ChannelOutboundBuffer.java:339)\n    at io.netty.channel.socket.nio.NioSocketChannel.doWrite(NioSocketChannel.java:318)\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:799)\n    at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:311)\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:766)\n    at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1234)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeFlushNow(ChannelHandlerInvokerUtil.java:165)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeFlush(DefaultChannelHandlerInvoker.java:355)\n    at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:272)\n    at io.netty.handler.ssl.SslHandler.flush(SslHandler.java:478)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeFlushNow(ChannelHandlerInvokerUtil.java:165)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeFlush(DefaultChannelHandlerInvoker.java:355)\n    at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:272)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.flush(Http2ConnectionHandler.java:392)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeFlushNow(ChannelHandlerInvokerUtil.java:165)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeFlush(DefaultChannelHandlerInvoker.java:355)\n    at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:272)\n    at io.netty.channel.DefaultChannelPipeline.flush(DefaultChannelPipeline.java:997)\n    at io.netty.channel.AbstractChannel.flush(AbstractChannel.java:210)\n    at io.grpc.transport.netty.WriteQueue.flush(WriteQueue.java:131)\n    at io.grpc.transport.netty.WriteQueue.access$000(WriteQueue.java:48)\n    at io.grpc.transport.netty.WriteQueue$1.run(WriteQueue.java:58)\n    at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:322)\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:356)\n    at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:703)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n", "url": "https://github.com/grpc/grpc-java/issues/615", "user": "ejona86", "labels": ["P3", "bug", "netty"], "created": "2015-07-09 23:57:55", "closed": "2016-06-03 05:27:58", "commits": {"53cd3335316e70861fdb99ca22867e06db4da2e0": {"commitGHEventType": "referenced", "commitUser": "buchgr"}}, "ttf": 329.0002777777778, "commitsDetails": [{"commitHash": "53cd3335316e70861fdb99ca22867e06db4da2e0", "commitGHEventType": "referenced", "commitUser": "buchgr", "commitParents": ["0021e063f209c4e7d620a382fd553b23bf782564"], "nameRev": "53cd3335316e70861fdb99ca22867e06db4da2e0 tags/v0.15.0~65", "commitMessage": "core: add test for complete() without close() exception in AbstractServerStream. Fixes #615", "commitDateTime": "2016-06-03 07:27:57", "authoredDateTime": "2016-06-03 07:27:57", "commitGitStats": [{"filePath": "core/src/test/java/io/grpc/internal/AbstractServerStreamTest.java", "insertions": 10, "deletions": 0, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractServerStreamTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.internal.AbstractServerStreamTest.completeWithoutClose()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["53cd3335316e70861fdb99ca22867e06db4da2e0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Error message when connecting with TLS to closed port unhelpful", "body": "When I connect to a random port that is not open, the error message is not helpful.\n\n```\n$ ./run-test-client.sh --server_port=1234\nGradle is no longer run automatically. Make sure to run\n'./gradlew installDist -PskipCodegen=true' or\n'./gradlew :grpc-interop-testing:installDist -PskipCodegen' after any changes.\n-PskipCodegen=true is optional, but requires less setup.\nRunning test empty_unary\nJul 07, 2015 11:02:03 AM io.grpc.transport.netty.ProtocolNegotiators$AbstractBufferingHandler fail\nSEVERE: Transport failed during protocol negotiation\nio.grpc.StatusRuntimeException: UNAVAILABLE: Channel closed while performing protocol negotiation\n    at io.grpc.Status.asRuntimeException(Status.java:428)\n    at io.grpc.transport.netty.ProtocolNegotiators.unavailableException(ProtocolNegotiators.java:175)\n    at io.grpc.transport.netty.ProtocolNegotiators.access$000(ProtocolNegotiators.java:72)\n    at io.grpc.transport.netty.ProtocolNegotiators$AbstractBufferingHandler.close(ProtocolNegotiators.java:261)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeCloseNow(ChannelHandlerInvokerUtil.java:133)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeClose(DefaultChannelHandlerInvoker.java:276)\n    at io.netty.channel.AbstractChannelHandlerContext.close(AbstractChannelHandlerContext.java:238)\n    at io.netty.channel.AbstractChannelHandlerContext.close(AbstractChannelHandlerContext.java:197)\n    at io.netty.channel.DefaultChannelPipeline.close(DefaultChannelPipeline.java:987)\n    at io.netty.channel.AbstractChannel.close(AbstractChannel.java:200)\n    at io.netty.channel.ChannelFutureListener$2.operationComplete(ChannelFutureListener.java:56)\n    at io.netty.channel.ChannelFutureListener$2.operationComplete(ChannelFutureListener.java:52)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:603)\n    at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:563)\n    at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:424)\n    at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:276)\n    at io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:292)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:527)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:467)\n    at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:381)\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:353)\n    at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:703)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n\nException in thread \"main\" io.grpc.StatusRuntimeException: UNKNOWN\n    at io.grpc.Status.asRuntimeException(Status.java:428)\n    at io.grpc.stub.ClientCalls.getUnchecked(ClientCalls.java:105)\n    at io.grpc.stub.ClientCalls.blockingUnaryCall(ClientCalls.java:115)\n    at io.grpc.testing.integration.TestServiceGrpc$TestServiceBlockingStub.emptyCall(TestServiceGrpc.java:257)\n    at io.grpc.testing.integration.AbstractTransportTest.emptyUnary(AbstractTransportTest.java:148)\n    at io.grpc.testing.integration.TestServiceClient.runTest(TestServiceClient.java:203)\n    at io.grpc.testing.integration.TestServiceClient.run(TestServiceClient.java:192)\n    at io.grpc.testing.integration.TestServiceClient.main(TestServiceClient.java:79)\nCaused by: io.netty.channel.ChannelException: Pending write on removal of SslHandler\n    at io.netty.handler.ssl.SslHandler.handlerRemoved0(SslHandler.java:411)\n    at io.netty.handler.codec.ByteToMessageDecoder.handlerRemoved(ByteToMessageDecoder.java:209)\n    at io.netty.channel.DefaultChannelPipeline.callHandlerRemoved0(DefaultChannelPipeline.java:627)\n    at io.netty.channel.DefaultChannelPipeline.callHandlerRemoved(DefaultChannelPipeline.java:621)\n    at io.netty.channel.DefaultChannelPipeline.remove0(DefaultChannelPipeline.java:450)\n    at io.netty.channel.DefaultChannelPipeline.destroyDown(DefaultChannelPipeline.java:898)\n    at io.netty.channel.DefaultChannelPipeline.destroyUp(DefaultChannelPipeline.java:867)\n    at io.netty.channel.DefaultChannelPipeline.destroy(DefaultChannelPipeline.java:859)\n    at io.netty.channel.DefaultChannelPipeline.fireChannelUnregistered(DefaultChannelPipeline.java:843)\n    at io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:696)\n    at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:322)\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:356)\n    at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:703)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\n```\n", "url": "https://github.com/grpc/grpc-java/issues/602", "user": "ejona86", "labels": ["bug", "netty"], "created": "2015-07-07 18:03:11", "closed": "2015-12-01 20:05:57", "commits": {}, "ttf": 147.00027777777777, "commitsDetails": []}, {"title": "Memory leaking when using ALPN", "body": "We're experiencing a slow memory leak with 0.7.1 when using ALPN and TLS. The server is built and started with this code : \n\n```\nNettyServerBuilder builder = NettyServerBuilder.forPort(port);\ndefinitions.forEach(builder::addService);\nSslContext context = SslContextBuilder.forServer(keyCertPathprivateKeyPath).build();\nbuilder.sslContext(context);\nServerImpl server = builder.build();\nserver.start();\n```\n\nThis is the alpn version that we're using.\n-Xbootclasspath/p:/usr/lib/java/alpn-boot-8.1.3.v20150130.jar\"\n\nRunning a heap dump, we're seeing a huge amount of SSLEngineImpl objects stored in a concurrent hash map : \n\n![image](https://cloud.githubusercontent.com/assets/9012046/8503526/2c2acda0-21c9-11e5-9dfe-ba599b324c12.png)\n\nThe server is running behind a Amazon ELB. This might be related since the Amazon load balancer would open connections every once in a while to the server and to ping and make sure the server is live. Unfortunately it takes a long time to replicate, the server would run out of memory after 36 hours or so, but it doesn't seem like the number of requests \n", "url": "https://github.com/grpc/grpc-java/issues/598", "user": "ohad7", "labels": ["bug"], "created": "2015-07-03 18:23:10", "closed": "2015-07-13 21:37:22", "commits": {"492128e23c559c50e884c4d2b557e0ed0e33ecc4": {"commitGHEventType": "referenced", "commitUser": "nmittler"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "492128e23c559c50e884c4d2b557e0ed0e33ecc4", "commitGHEventType": "referenced", "commitUser": "nmittler", "commitParents": ["4bf37b9397752822d3f6f491f0e5316577451b3e"], "nameRev": "492128e23c559c50e884c4d2b557e0ed0e33ecc4 tags/v0.7.2~4", "commitMessage": "Fixing leak of SSLEngine for Jetty ALPN/NPN servers\n\nFixes #598\n", "commitDateTime": "2015-07-07 07:34:58", "authoredDateTime": "2015-07-06 14:32:50", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/transport/netty/ProtocolNegotiators.java", "insertions": 39, "deletions": 5, "lines": 44}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ProtocolNegotiators.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.ProtocolNegotiators.tls(io.netty.handler.ssl.SslContext,java.net.InetSocketAddress).1", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.netty.ProtocolNegotiators.plaintextUpgrade().2", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.netty.ProtocolNegotiators.plaintext().3", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.netty.ProtocolNegotiators.installJettyTlsProtocolSelection(javax.net.ssl.SSLEngine,com.google.common.util.concurrent.SettableFuture,boolean)", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.netty.ProtocolNegotiators.installJettyTlsProtocolSelection(javax.net.ssl.SSLEngine,com.google.common.util.concurrent.SettableFuture,boolean).4", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.netty.ProtocolNegotiators.tls(io.netty.handler.ssl.SslContext,java.net.InetSocketAddress).1.newHandler(io.netty.handler.codec.http2.Http2ConnectionHandler).1.handlerAdded(io.netty.channel.ChannelHandlerContext)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.netty.ProtocolNegotiators.serverTls(javax.net.ssl.SSLEngine)", "TOT": 5, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.grpc.transport.netty.ProtocolNegotiators.installJettyTlsProtocolSelection(javax.net.ssl.SSLEngine,com.google.common.util.concurrent.SettableFuture,boolean).4.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 2}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["492128e23c559c50e884c4d2b557e0ed0e33ecc4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 39, "deletions": 5, "lines": 44, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 15, "UPD": 6, "INS": 4, "MOV": 2, "DEL": 3, "spoonFilesChanged": 1, "spoonMethodsChanged": 8}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/transport/netty"], "changesInPackagesSPOON": ["io.grpc.transport.netty.ProtocolNegotiators.tls(io.netty.handler.ssl.SslContext,java.net.InetSocketAddress).1", "io.grpc.transport.netty.ProtocolNegotiators.installJettyTlsProtocolSelection(javax.net.ssl.SSLEngine,com.google.common.util.concurrent.SettableFuture,boolean).4", "io.grpc.transport.netty.ProtocolNegotiators.installJettyTlsProtocolSelection(javax.net.ssl.SSLEngine,com.google.common.util.concurrent.SettableFuture,boolean)", "io.grpc.transport.netty.ProtocolNegotiators.serverTls(javax.net.ssl.SSLEngine)", "io.grpc.transport.netty.ProtocolNegotiators.installJettyTlsProtocolSelection(javax.net.ssl.SSLEngine,com.google.common.util.concurrent.SettableFuture,boolean).4.invoke(java.lang.Object,java.lang.reflect.Method,java.lang.Object[])", "io.grpc.transport.netty.ProtocolNegotiators.plaintext().3", "io.grpc.transport.netty.ProtocolNegotiators.tls(io.netty.handler.ssl.SslContext,java.net.InetSocketAddress).1.newHandler(io.netty.handler.codec.http2.Http2ConnectionHandler).1.handlerAdded(io.netty.channel.ChannelHandlerContext)", "io.grpc.transport.netty.ProtocolNegotiators.plaintextUpgrade().2"]}, {"title": "OkHttp's cancellation is not properly synchronized", "body": "[`OkHttpClientStream.sendCancel()` calls `finishStream()`](https://github.com/grpc/grpc-java/blob/master/okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientStream.java#L213) from an application thread. But `finishStream()` [calls transportReportStatus() without any lock held](https://github.com/grpc/grpc-java/blob/master/okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java#L463). That is not synchronized correctly, as `transportReportStatus()` may only be called from the transport thread (i.e., while `lock` is held).\n\nIt seems that all usages of `streams` is done while `lock` is held except for within `finishStream()` and [data()](https://github.com/grpc/grpc-java/blob/master/okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java#L570). `data()` can actually race with `finishStream()` and end up sending DATA frames after the RST_STREAM. It seems it would be best to just have `stream` protected by `lock`, because it having its own synchronization isn't providing much benefit and isn't leading to correct code.\n", "url": "https://github.com/grpc/grpc-java/issues/583", "user": "ejona86", "labels": ["bug", "okhttp"], "created": "2015-06-30 19:12:56", "closed": "2015-07-27 15:18:20", "commits": {}, "ttf": 26.00027777777778, "commitsDetails": []}, {"title": "Verify Protocol Negotiation completed", "body": "It seems if neither ALPN nor NPN occur/available we just happily continue connecting and think that negotiation occurred. We should instead check that the protocol negotiated and fail if it didn't. \n", "url": "https://github.com/grpc/grpc-java/issues/527", "user": "ejona86", "labels": ["bug", "netty"], "created": "2015-06-10 17:50:33", "closed": "2015-09-03 20:16:33", "commits": {}, "ttf": 85.00027777777778, "commitsDetails": []}, {"title": "Netty Client does not detect when ALPN was not used", "body": "When I tried to reproduce the APLN silence failure, I expected the following change fails our tests, but not, all tests still passed. \n\n```\ndiff --git a/interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java b/interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java\nindex 504c815..2ae8160 100644\n--- a/interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java\n+++ b/interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java\n@@ -37,6 +37,7 @@ import io.grpc.transport.netty.GrpcSslContexts;\n import io.grpc.transport.netty.NettyChannelBuilder;\n import io.grpc.transport.netty.NettyServerBuilder;\n\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.runner.RunWith;\n@@ -74,7 +75,8 @@ public class Http2NettyTest extends AbstractTransportTest {\n       return NettyChannelBuilder\n           .forAddress(TestUtils.testServerAddress(serverPort))\n           .sslContext(GrpcSslContexts.forClient().trustManager(\n-                  TestUtils.loadCert(\"ca.pem\")).build())\n+                  TestUtils.loadCert(\"ca.pem\"))\n+              .applicationProtocolConfig(ApplicationProtocolConfig.DISABLED).build())\n           .build();\n     } catch (Exception ex) {\n       throw new RuntimeException(ex);\n```\n\nThe problem itself is not a big deal, but investigating it may expose some hidden bugs.\n", "url": "https://github.com/grpc/grpc-java/issues/522", "user": "madongfly", "labels": ["P3", "bug", "netty"], "created": "2015-06-09 17:33:09", "closed": "2016-06-25 13:59:32", "commits": {"fc5197fbf4ca51bd76484b28e155beb52c0c0a90": {"commitGHEventType": "closed", "commitUser": "buchgr"}}, "ttf": 381.0002777777778, "commitsDetails": [{"commitHash": "fc5197fbf4ca51bd76484b28e155beb52c0c0a90", "commitGHEventType": "closed", "commitUser": "buchgr", "commitParents": ["46f418da9408bc6e9d5172ea3a7c467b30c6b358"], "nameRev": "fc5197fbf4ca51bd76484b28e155beb52c0c0a90 tags/v0.15.0~16", "commitMessage": "netty: detect when ALPN was not used. Fixes #522\n\n", "commitDateTime": "2016-06-25 15:59:30", "authoredDateTime": "2016-06-25 15:59:30", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/netty/GrpcSslContexts.java", "insertions": 18, "deletions": 6, "lines": 24}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyChannelBuilder.java", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "netty/src/main/java/io/grpc/netty/NettyServerBuilder.java", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "netty/src/main/java/io/grpc/netty/ProtocolNegotiators.java", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GrpcSslContexts.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.GrpcSslContexts", "TOT": 8, "UPD": 2, "INS": 3, "MOV": 0, "DEL": 3}, {"spoonMethodName": "io.grpc.netty.GrpcSslContexts.ensureAlpnAndH2Enabled(io.netty.handler.ssl.ApplicationProtocolNegotiator)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NettyChannelBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyChannelBuilder.sslContext(io.netty.handler.ssl.SslContext)", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 4, "DEL": 1}]}, {"spoonFilePath": "NettyServerBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.NettyServerBuilder.sslContext(io.netty.handler.ssl.SslContext)", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 4, "DEL": 1}]}, {"spoonFilePath": "ProtocolNegotiators.java", "spoonMethods": [{"spoonMethodName": "io.grpc.netty.ProtocolNegotiators.ServerTlsHandler.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.netty.ProtocolNegotiators.BufferUntilTlsNegotiatedHandler.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fc5197fbf4ca51bd76484b28e155beb52c0c0a90"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 31, "deletions": 13, "lines": 44, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 25, "UPD": 6, "INS": 6, "MOV": 8, "DEL": 5, "spoonFilesChanged": 4, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/netty"], "changesInPackagesSPOON": ["io.grpc.netty.GrpcSslContexts", "io.grpc.netty.ProtocolNegotiators.ServerTlsHandler.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)", "io.grpc.netty.NettyServerBuilder.sslContext(io.netty.handler.ssl.SslContext)", "io.grpc.netty.ProtocolNegotiators.BufferUntilTlsNegotiatedHandler.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)", "io.grpc.netty.NettyChannelBuilder.sslContext(io.netty.handler.ssl.SslContext)", "io.grpc.netty.GrpcSslContexts.ensureAlpnAndH2Enabled(io.netty.handler.ssl.ApplicationProtocolNegotiator)"]}, {"title": "\"WARN java.lang.IllegalStateException: Refcount has already reached zero\" during shutdown", "body": "We are frequently seeing this exception during server shutdown but not in all cases. I did a little digging and it looks like the SharedResourceHolder on DEFAULT_EXECUTOR is being called twice in ServerImpl.java: once when transportClosed() is called and again in serverShutdown(). Looks like serverShutdown() first shuts down all transports, so perhaps this is what is triggering the call to transportClosed() before it attempts to release the holder again for a second time.\n\nThanks,\nDavid\n\n```\nINFO  [2015-06-07 21:52:09,390] org.eclipse.jetty.server.handler.ContextHandler: Stopped i.d.j.MutableServletContextHandler@21bd20ee{/,null,UNAVAILABLE}\nWARN  [2015-06-07 21:52:09,400] io.netty.util.concurrent.DefaultPromise: An exception was thrown by io.grpc.transport.netty.NettyServer$2.operationComplete()\n! java.lang.IllegalStateException: Refcount has already reached zero\n! at com.google.common.base.Preconditions.checkState(Preconditions.java:173) ~[guava-18.0.jar:na]\n! at io.grpc.SharedResourceHolder.releaseInternal(SharedResourceHolder.java:147) ~[grpc-core-0.8.0-SNAPSHOT.jar:na]\n! at io.grpc.SharedResourceHolder.release(SharedResourceHolder.java:115) ~[grpc-core-0.8.0-SNAPSHOT.jar:na]\n! at io.grpc.AbstractServerBuilder$1.run(AbstractServerBuilder.java:120) ~[grpc-core-0.8.0-SNAPSHOT.jar:na]\n! at io.grpc.ServerImpl.checkForTermination(ServerImpl.java:204) ~[grpc-core-0.8.0-SNAPSHOT.jar:na]\n! at io.grpc.ServerImpl.access$300(ServerImpl.java:64) ~[grpc-core-0.8.0-SNAPSHOT.jar:na]\n! at io.grpc.ServerImpl$ServerListenerImpl.serverShutdown(ServerImpl.java:227) ~[grpc-core-0.8.0-SNAPSHOT.jar:na]\n! at io.grpc.transport.netty.NettyServer$2.operationComplete(NettyServer.java:140) ~[grpc-netty-0.8.0-SNAPSHOT.jar:na]\n! at io.grpc.transport.netty.NettyServer$2.operationComplete(NettyServer.java:134) ~[grpc-netty-0.8.0-SNAPSHOT.jar:na]\n! at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680) ~[netty-common-4.1.0.Beta5.jar:4.1.0.Beta5]\n! at io.netty.util.concurrent.DefaultPromise$LateListeners.run(DefaultPromise.java:845) [netty-common-4.1.0.Beta5.jar:4.1.0.Beta5]\n! at io.netty.util.concurrent.DefaultPromise$LateListenerNotifier.run(DefaultPromise.java:873) [netty-common-4.1.0.Beta5.jar:4.1.0.Beta5]\n! at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:322) [netty-common-4.1.0.Beta5.jar:4.1.0.Beta5]\n! at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:356) [netty-transport-4.1.0.Beta5.jar:4.1.0.Beta5]\n! at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:703) [netty-common-4.1.0.Beta5.jar:4.1.0.Beta5]\n! at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]\n! at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]\n! at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]\n```\n", "url": "https://github.com/grpc/grpc-java/issues/517", "user": "dconnelly", "labels": ["bug"], "created": "2015-06-07 22:20:34", "closed": "2015-06-15 20:07:13", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Netty throws exception when creating > 1 TLS transport.", "body": "When attempting to create multiple TLS transports from the same builder, Netty throws an exception:\n\n```\nio.netty.channel.ChannelPipelineException: io.grpc.transport.netty.ProtocolNegotiators$SslBootstrapHandler is not a @Sharable handler, so can't be added or removed multiple times.\n    at io.netty.channel.DefaultChannelPipeline.checkMultiplicity(DefaultChannelPipeline.java:564)\n    at io.netty.channel.DefaultChannelPipeline.addFirst0(DefaultChannelPipeline.java:114)\n    at io.netty.channel.DefaultChannelPipeline.addFirst(DefaultChannelPipeline.java:108)\n    at io.netty.channel.DefaultChannelPipeline.addFirst(DefaultChannelPipeline.java:291)\n    at io.netty.channel.DefaultChannelPipeline.addFirst(DefaultChannelPipeline.java:246)\n    at io.grpc.transport.netty.ProtocolNegotiators$AbstractBufferingHandler.channelRegistered(ProtocolNegotiators.java:192)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeChannelRegisteredNow(ChannelHandlerInvokerUtil.java:32)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeChannelRegistered(DefaultChannelHandlerInvoker.java:50)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRegistered(AbstractChannelHandlerContext.java:114)\n    at io.netty.channel.DefaultChannelPipeline.fireChannelRegistered(DefaultChannelPipeline.java:833)\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.register0(AbstractChannel.java:487)\n    at io.netty.channel.AbstractChannel$AbstractUnsafe.access$100(AbstractChannel.java:401)\n    at io.netty.channel.AbstractChannel$AbstractUnsafe$1.run(AbstractChannel.java:461)\n    at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:322)\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:356)\n    at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:703)\n    at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:137)\n    at java.lang.Thread.run(Thread.java:745)\n```\n", "url": "https://github.com/grpc/grpc-java/issues/504", "user": "nmittler", "labels": ["bug"], "created": "2015-06-01 22:36:44", "closed": "2015-06-03 16:42:27", "commits": {"4ee2a6584a2f3a2054654409355b1f7995433b96": {"commitGHEventType": "closed", "commitUser": "nmittler"}, "6b5ff0632120c50f08e4a28e97a7364557b2c829": {"commitGHEventType": "referenced", "commitUser": "nmittler"}, "cdd81d2e75ecee6e49dfeaeffcfb4882a8fdbd36": {"commitGHEventType": "referenced", "commitUser": "nmittler"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "4ee2a6584a2f3a2054654409355b1f7995433b96", "commitGHEventType": "closed", "commitUser": "nmittler", "commitParents": ["d242b225d0f7c0c0afc1faf93c5df77fd3a14dfa"], "nameRev": "4ee2a6584a2f3a2054654409355b1f7995433b96 tags/v0.8.0~164", "commitMessage": "Allowing Netty TLS bootstrap handler to be sharable.\n\nFixes #504\n", "commitDateTime": "2015-06-03 09:42:08", "authoredDateTime": "2015-06-01 16:20:08", "commitGitStats": [{"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/ClientConfiguration.java", "insertions": 4, "deletions": 11, "lines": 15}, {"filePath": "build.gradle", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "interop-testing/build.gradle", "insertions": 0, "deletions": 6, "lines": 6}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java", "insertions": 1, "deletions": 5, "lines": 6}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "netty/build.gradle", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyClientTransport.java", "insertions": 16, "deletions": 15, "lines": 31}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyServerTransport.java", "insertions": 1, "deletions": 9, "lines": 10}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/ProtocolNegotiators.java", "insertions": 44, "deletions": 30, "lines": 74}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/WriteQueue.java", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "netty/src/test/java/io/grpc/transport/netty/NettyClientStreamTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "netty/src/test/java/io/grpc/transport/netty/NettyClientTransportTest.java", "insertions": 255, "deletions": 0, "lines": 255}, {"filePath": "netty/src/test/java/io/grpc/transport/netty/NettyServerStreamTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "testing/src/main/java/io/grpc/testing/TestUtils.java", "insertions": 30, "deletions": 0, "lines": 30}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}, {"commitHash": "6b5ff0632120c50f08e4a28e97a7364557b2c829", "commitGHEventType": "referenced", "commitUser": "nmittler", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "cdd81d2e75ecee6e49dfeaeffcfb4882a8fdbd36", "commitGHEventType": "referenced", "commitUser": "nmittler", "commitParents": ["728c8b723caa7987585c99f5058cd16f9d794709"], "nameRev": "cdd81d2e75ecee6e49dfeaeffcfb4882a8fdbd36 tags/v0.7.1~1", "commitMessage": "Allowing Netty TLS bootstrap handler to be sharable.\n\nFixes #504\n", "commitDateTime": "2015-06-03 11:09:43", "authoredDateTime": "2015-06-01 16:20:08", "commitGitStats": [{"filePath": "benchmarks/src/main/java/io/grpc/benchmarks/qps/ClientConfiguration.java", "insertions": 4, "deletions": 11, "lines": 15}, {"filePath": "build.gradle", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "interop-testing/build.gradle", "insertions": 0, "deletions": 6, "lines": 6}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/Http2NettyTest.java", "insertions": 1, "deletions": 5, "lines": 6}, {"filePath": "interop-testing/src/test/java/io/grpc/testing/integration/Http2OkHttpTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "netty/build.gradle", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyClientTransport.java", "insertions": 16, "deletions": 15, "lines": 31}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyServerTransport.java", "insertions": 1, "deletions": 9, "lines": 10}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/ProtocolNegotiators.java", "insertions": 50, "deletions": 39, "lines": 89}, {"filePath": "netty/src/main/java/io/grpc/transport/netty/WriteQueue.java", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "netty/src/test/java/io/grpc/transport/netty/NettyClientStreamTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "netty/src/test/java/io/grpc/transport/netty/NettyClientTransportTest.java", "insertions": 255, "deletions": 0, "lines": 255}, {"filePath": "netty/src/test/java/io/grpc/transport/netty/NettyServerStreamTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "testing/src/main/java/io/grpc/testing/TestUtils.java", "insertions": 30, "deletions": 0, "lines": 30}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": ["4ee2a6584a2f3a2054654409355b1f7995433b96"], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 79.0, "deletions": 75.0, "lines": 154.0, "gitFilesChange": 8}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["interop-testing", "netty/src/main/java/io/grpc/transport/netty", "benchmarks/src/main/java/io/grpc/benchmarks/qps", "netty", ""]}, {"title": "OkHttp connection window does not reclaim outstanding connection window of closed stream", "body": "Netty will return any unprocessed stream window to the connection window on stream closure, OkHttp does not currently do this.\n\nSee onStreamClosed in Nettys DefaultHttp2LocalFlowController.\n\nThis will surface if a stream is cancelled and there is a partial message in the Deframer as the Deframer intentionally does not return bytes if there are no pending requests.\n", "url": "https://github.com/grpc/grpc-java/issues/411", "user": "louiscryan", "labels": ["bug", "cross-language-gotchas", "okhttp"], "created": "2015-05-08 01:15:17", "closed": "2015-05-15 21:40:05", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "Http2ClientStream overwrites error message", "body": "[Http2ClientStream.transportHeadersReceived()](https://github.com/grpc/grpc-java/blob/d0aad72441f2f110910003599bb923db6f671f02/core/src/main/java/io/grpc/transport/Http2ClientStream.java#L102) is calling withDescription instead of augmentDescription. This hinders debugging what went wrong.\n\n@yang-g, since he is interested in when this is resolved.\n", "url": "https://github.com/grpc/grpc-java/issues/359", "user": "ejona86", "labels": ["bug"], "created": "2015-04-30 00:06:03", "closed": "2015-04-30 17:57:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Recursion in NettyClientHandler during shutdown caused by channelInactive", "body": "@nmittler @ejona86 \n\nConnection termination can trigger recursion in active stream shutdown\n\nchannelnactive -> close active streams -> send pending frames -> write headers (fail) -> connection error -> send go_away -> close active streams -> ...\n\nApr 28, 2015 1:34:55 PM io.netty.handler.codec.http2.DefaultHttp2Connection notifyClosed\nSEVERE: Caught RuntimeException from listener onStreamClosed.\njava.lang.NullPointerException\n    at io.grpc.transport.netty.NettyClientHandler.onStreamError(NettyClientHandler.java:237)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onException(Http2ConnectionHandler.java:470)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledData.error(DefaultHttp2ConnectionEncoder.java:341)\n    at io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$DefaultState.writeError(DefaultHttp2RemoteFlowController.java:691)\n    at io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$DefaultState.cancel(DefaultHttp2RemoteFlowController.java:578)\n    at io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$DefaultState.cancel(DefaultHttp2RemoteFlowController.java:560)\n    at io.netty.handler.codec.http2.DefaultHttp2RemoteFlowController$2.onStreamClosed(DefaultHttp2RemoteFlowController.java:87)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.notifyClosed(DefaultHttp2Connection.java:263)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.removeFromActiveStreams(DefaultHttp2Connection.java:1150)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams$2.process(DefaultHttp2Connection.java:1097)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.forEachActiveStream(DefaultHttp2Connection.java:1121)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.forEachActiveStream(DefaultHttp2Connection.java:135)\n    at io.grpc.transport.netty.NettyClientHandler.goingAway(NettyClientHandler.java:310)\n    at io.grpc.transport.netty.NettyClientHandler.access$300(NettyClientHandler.java:65)\n    at io.grpc.transport.netty.NettyClientHandler$1.onGoAwaySent(NettyClientHandler.java:99)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.goAwaySent(DefaultHttp2Connection.java:189)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:555)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:586)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onConnectionError(Http2ConnectionHandler.java:494)\n    at io.grpc.transport.netty.NettyClientHandler.onConnectionError(NettyClientHandler.java:228)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onException(Http2ConnectionHandler.java:477)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.error(DefaultHttp2ConnectionEncoder.java:425)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:472)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:440)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyLateListener(DefaultPromise.java:621)\n    at io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:138)\n    at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:93)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.<init>(DefaultHttp2ConnectionEncoder.java:459)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:411)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:401)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:169)\n    at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeHeaders(DecoratingHttp2FrameWriter.java:50)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.writeHeaders(BufferingHttp2ConnectionEncoder.java:118)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$HeadersFrame.send(BufferingHttp2ConnectionEncoder.java:288)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$PendingStream.sendFrames(BufferingHttp2ConnectionEncoder.java:235)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.createNextPendingStream(BufferingHttp2ConnectionEncoder.java:196)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.access$100(BufferingHttp2ConnectionEncoder.java:68)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$1.onStreamClosed(BufferingHttp2ConnectionEncoder.java:95)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.notifyClosed(DefaultHttp2Connection.java:263)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.removeFromActiveStreams(DefaultHttp2Connection.java:1150)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams$2.process(DefaultHttp2Connection.java:1097)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.forEachActiveStream(DefaultHttp2Connection.java:1121)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.forEachActiveStream(DefaultHttp2Connection.java:135)\n    at io.grpc.transport.netty.NettyClientHandler.goingAway(NettyClientHandler.java:310)\n    at io.grpc.transport.netty.NettyClientHandler.access$300(NettyClientHandler.java:65)\n    at io.grpc.transport.netty.NettyClientHandler$1.onGoAwaySent(NettyClientHandler.java:99)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.goAwaySent(DefaultHttp2Connection.java:189)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:555)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:586)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onConnectionError(Http2ConnectionHandler.java:494)\n    at io.grpc.transport.netty.NettyClientHandler.onConnectionError(NettyClientHandler.java:228)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onException(Http2ConnectionHandler.java:477)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.error(DefaultHttp2ConnectionEncoder.java:425)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:472)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:440)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyLateListener(DefaultPromise.java:621)\n    at io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:138)\n    at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:93)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.<init>(DefaultHttp2ConnectionEncoder.java:459)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:411)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:401)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:169)\n    at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeHeaders(DecoratingHttp2FrameWriter.java:50)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.writeHeaders(BufferingHttp2ConnectionEncoder.java:118)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$HeadersFrame.send(BufferingHttp2ConnectionEncoder.java:288)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$PendingStream.sendFrames(BufferingHttp2ConnectionEncoder.java:235)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.createNextPendingStream(BufferingHttp2ConnectionEncoder.java:196)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.access$100(BufferingHttp2ConnectionEncoder.java:68)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$1.onStreamClosed(BufferingHttp2ConnectionEncoder.java:95)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.notifyClosed(DefaultHttp2Connection.java:263)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.removeFromActiveStreams(DefaultHttp2Connection.java:1150)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams$2.process(DefaultHttp2Connection.java:1097)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.forEachActiveStream(DefaultHttp2Connection.java:1121)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.forEachActiveStream(DefaultHttp2Connection.java:135)\n    at io.grpc.transport.netty.NettyClientHandler.goingAway(NettyClientHandler.java:310)\n    at io.grpc.transport.netty.NettyClientHandler.access$300(NettyClientHandler.java:65)\n    at io.grpc.transport.netty.NettyClientHandler$1.onGoAwaySent(NettyClientHandler.java:99)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.goAwaySent(DefaultHttp2Connection.java:189)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:555)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:586)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onConnectionError(Http2ConnectionHandler.java:494)\n    at io.grpc.transport.netty.NettyClientHandler.onConnectionError(NettyClientHandler.java:228)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onException(Http2ConnectionHandler.java:477)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.error(DefaultHttp2ConnectionEncoder.java:425)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:472)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:440)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyLateListener(DefaultPromise.java:621)\n    at io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:138)\n    at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:93)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.<init>(DefaultHttp2ConnectionEncoder.java:459)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:411)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:401)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:169)\n    at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeHeaders(DecoratingHttp2FrameWriter.java:50)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.writeHeaders(BufferingHttp2ConnectionEncoder.java:118)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$HeadersFrame.send(BufferingHttp2ConnectionEncoder.java:288)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$PendingStream.sendFrames(BufferingHttp2ConnectionEncoder.java:235)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.createNextPendingStream(BufferingHttp2ConnectionEncoder.java:196)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.access$100(BufferingHttp2ConnectionEncoder.java:68)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$1.onStreamClosed(BufferingHttp2ConnectionEncoder.java:95)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.notifyClosed(DefaultHttp2Connection.java:263)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.removeFromActiveStreams(DefaultHttp2Connection.java:1150)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams$2.process(DefaultHttp2Connection.java:1097)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.forEachActiveStream(DefaultHttp2Connection.java:1121)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.forEachActiveStream(DefaultHttp2Connection.java:135)\n    at io.grpc.transport.netty.NettyClientHandler.goingAway(NettyClientHandler.java:310)\n    at io.grpc.transport.netty.NettyClientHandler.access$300(NettyClientHandler.java:65)\n    at io.grpc.transport.netty.NettyClientHandler$1.onGoAwaySent(NettyClientHandler.java:99)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.goAwaySent(DefaultHttp2Connection.java:189)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:555)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:586)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onConnectionError(Http2ConnectionHandler.java:494)\n    at io.grpc.transport.netty.NettyClientHandler.onConnectionError(NettyClientHandler.java:228)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onException(Http2ConnectionHandler.java:477)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.error(DefaultHttp2ConnectionEncoder.java:425)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:472)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:440)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyLateListener(DefaultPromise.java:621)\n    at io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:138)\n    at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:93)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.<init>(DefaultHttp2ConnectionEncoder.java:459)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:411)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:401)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:169)\n    at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeHeaders(DecoratingHttp2FrameWriter.java:50)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.writeHeaders(BufferingHttp2ConnectionEncoder.java:118)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$HeadersFrame.send(BufferingHttp2ConnectionEncoder.java:288)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$PendingStream.sendFrames(BufferingHttp2ConnectionEncoder.java:235)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.createNextPendingStream(BufferingHttp2ConnectionEncoder.java:196)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.access$100(BufferingHttp2ConnectionEncoder.java:68)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$1.onStreamClosed(BufferingHttp2ConnectionEncoder.java:95)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.notifyClosed(DefaultHttp2Connection.java:263)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.removeFromActiveStreams(DefaultHttp2Connection.java:1150)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams$2.process(DefaultHttp2Connection.java:1097)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.forEachActiveStream(DefaultHttp2Connection.java:1121)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.forEachActiveStream(DefaultHttp2Connection.java:135)\n    at io.grpc.transport.netty.NettyClientHandler.goingAway(NettyClientHandler.java:310)\n    at io.grpc.transport.netty.NettyClientHandler.access$300(NettyClientHandler.java:65)\n    at io.grpc.transport.netty.NettyClientHandler$1.onGoAwaySent(NettyClientHandler.java:99)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.goAwaySent(DefaultHttp2Connection.java:189)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:555)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:586)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onConnectionError(Http2ConnectionHandler.java:494)\n    at io.grpc.transport.netty.NettyClientHandler.onConnectionError(NettyClientHandler.java:228)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onException(Http2ConnectionHandler.java:477)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.error(DefaultHttp2ConnectionEncoder.java:425)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:472)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:440)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyLateListener(DefaultPromise.java:621)\n    at io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:138)\n    at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:93)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.<init>(DefaultHttp2ConnectionEncoder.java:459)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:411)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:401)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:169)\n    at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeHeaders(DecoratingHttp2FrameWriter.java:50)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.writeHeaders(BufferingHttp2ConnectionEncoder.java:118)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$HeadersFrame.send(BufferingHttp2ConnectionEncoder.java:288)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$PendingStream.sendFrames(BufferingHttp2ConnectionEncoder.java:235)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.createNextPendingStream(BufferingHttp2ConnectionEncoder.java:196)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.access$100(BufferingHttp2ConnectionEncoder.java:68)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$1.onStreamClosed(BufferingHttp2ConnectionEncoder.java:95)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.notifyClosed(DefaultHttp2Connection.java:263)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.removeFromActiveStreams(DefaultHttp2Connection.java:1150)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams$2.process(DefaultHttp2Connection.java:1097)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.forEachActiveStream(DefaultHttp2Connection.java:1121)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.forEachActiveStream(DefaultHttp2Connection.java:135)\n    at io.grpc.transport.netty.NettyClientHandler.goingAway(NettyClientHandler.java:310)\n    at io.grpc.transport.netty.NettyClientHandler.access$300(NettyClientHandler.java:65)\n    at io.grpc.transport.netty.NettyClientHandler$1.onGoAwaySent(NettyClientHandler.java:99)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.goAwaySent(DefaultHttp2Connection.java:189)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:555)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:586)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onConnectionError(Http2ConnectionHandler.java:494)\n    at io.grpc.transport.netty.NettyClientHandler.onConnectionError(NettyClientHandler.java:228)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onException(Http2ConnectionHandler.java:477)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.error(DefaultHttp2ConnectionEncoder.java:425)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:472)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:440)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyLateListener(DefaultPromise.java:621)\n    at io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:138)\n    at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:93)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.<init>(DefaultHttp2ConnectionEncoder.java:459)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:411)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:401)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:169)\n    at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeHeaders(DecoratingHttp2FrameWriter.java:50)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.writeHeaders(BufferingHttp2ConnectionEncoder.java:118)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$HeadersFrame.send(BufferingHttp2ConnectionEncoder.java:288)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$PendingStream.sendFrames(BufferingHttp2ConnectionEncoder.java:235)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.createNextPendingStream(BufferingHttp2ConnectionEncoder.java:196)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.access$100(BufferingHttp2ConnectionEncoder.java:68)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$1.onStreamClosed(BufferingHttp2ConnectionEncoder.java:95)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.notifyClosed(DefaultHttp2Connection.java:263)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.removeFromActiveStreams(DefaultHttp2Connection.java:1150)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams$2.process(DefaultHttp2Connection.java:1097)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.forEachActiveStream(DefaultHttp2Connection.java:1121)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.forEachActiveStream(DefaultHttp2Connection.java:135)\n    at io.grpc.transport.netty.NettyClientHandler.goingAway(NettyClientHandler.java:310)\n    at io.grpc.transport.netty.NettyClientHandler.access$300(NettyClientHandler.java:65)\n    at io.grpc.transport.netty.NettyClientHandler$1.onGoAwaySent(NettyClientHandler.java:99)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.goAwaySent(DefaultHttp2Connection.java:189)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:555)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:586)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onConnectionError(Http2ConnectionHandler.java:494)\n    at io.grpc.transport.netty.NettyClientHandler.onConnectionError(NettyClientHandler.java:228)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onException(Http2ConnectionHandler.java:477)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.error(DefaultHttp2ConnectionEncoder.java:425)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:472)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:440)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyLateListener(DefaultPromise.java:621)\n    at io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:138)\n    at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:93)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.<init>(DefaultHttp2ConnectionEncoder.java:459)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:411)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:401)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:169)\n    at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeHeaders(DecoratingHttp2FrameWriter.java:50)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.writeHeaders(BufferingHttp2ConnectionEncoder.java:118)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$HeadersFrame.send(BufferingHttp2ConnectionEncoder.java:288)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$PendingStream.sendFrames(BufferingHttp2ConnectionEncoder.java:235)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.createNextPendingStream(BufferingHttp2ConnectionEncoder.java:196)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.access$100(BufferingHttp2ConnectionEncoder.java:68)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$1.onStreamClosed(BufferingHttp2ConnectionEncoder.java:95)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.notifyClosed(DefaultHttp2Connection.java:263)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.removeFromActiveStreams(DefaultHttp2Connection.java:1150)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams$2.process(DefaultHttp2Connection.java:1097)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.forEachActiveStream(DefaultHttp2Connection.java:1121)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.forEachActiveStream(DefaultHttp2Connection.java:135)\n    at io.grpc.transport.netty.NettyClientHandler.goingAway(NettyClientHandler.java:310)\n    at io.grpc.transport.netty.NettyClientHandler.access$300(NettyClientHandler.java:65)\n    at io.grpc.transport.netty.NettyClientHandler$1.onGoAwaySent(NettyClientHandler.java:99)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.goAwaySent(DefaultHttp2Connection.java:189)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:555)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.goAway(Http2ConnectionHandler.java:586)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onConnectionError(Http2ConnectionHandler.java:494)\n    at io.grpc.transport.netty.NettyClientHandler.onConnectionError(NettyClientHandler.java:228)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.onException(Http2ConnectionHandler.java:477)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.error(DefaultHttp2ConnectionEncoder.java:425)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:472)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.operationComplete(DefaultHttp2ConnectionEncoder.java:440)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyLateListener(DefaultPromise.java:621)\n    at io.netty.util.concurrent.DefaultPromise.addListener(DefaultPromise.java:138)\n    at io.netty.channel.DefaultChannelPromise.addListener(DefaultChannelPromise.java:93)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledBase.<init>(DefaultHttp2ConnectionEncoder.java:459)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:411)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder$FlowControlledHeaders.<init>(DefaultHttp2ConnectionEncoder.java:401)\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:169)\n    at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeHeaders(DecoratingHttp2FrameWriter.java:50)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.writeHeaders(BufferingHttp2ConnectionEncoder.java:118)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$HeadersFrame.send(BufferingHttp2ConnectionEncoder.java:288)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$PendingStream.sendFrames(BufferingHttp2ConnectionEncoder.java:235)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.createNextPendingStream(BufferingHttp2ConnectionEncoder.java:196)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder.access$100(BufferingHttp2ConnectionEncoder.java:68)\n    at io.grpc.transport.netty.BufferingHttp2ConnectionEncoder$1.onStreamClosed(BufferingHttp2ConnectionEncoder.java:95)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.notifyClosed(DefaultHttp2Connection.java:263)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.removeFromActiveStreams(DefaultHttp2Connection.java:1150)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams$2.process(DefaultHttp2Connection.java:1097)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$ActiveStreams.forEachActiveStream(DefaultHttp2Connection.java:1121)\n    at io.netty.handler.codec.http2.DefaultHttp2Connection.forEachActiveStream(DefaultHttp2Connection.java:135)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler$BaseDecoder.channelInactive(Http2ConnectionHandler.java:151)\n    at io.netty.handler.codec.http2.Http2ConnectionHandler.channelInactive(Http2ConnectionHandler.java:325)\n    at io.grpc.transport.netty.NettyClientHandler.channelInactive(NettyClientHandler.java:217)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeChannelInactiveNow(ChannelHandlerInvokerUtil.java:56)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeChannelInactive(DefaultChannelHandlerInvoker.java:92)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:135)\n    at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:928)\n    at io.netty.channel.AbstractChannel$AbstractUnsafe$7.run(AbstractChannel.java:647)\n    at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:322)\n    at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:356)\n    at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:703)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\n    at java.lang.Thread.run(Thread.java:724)\n", "url": "https://github.com/grpc/grpc-java/issues/352", "user": "louiscryan", "labels": ["bug"], "created": "2015-04-28 20:42:11", "closed": "2015-06-16 19:09:46", "commits": {}, "ttf": 48.000277777777775, "commitsDetails": []}, {"title": "OkHttp does not observe SETTINGS_INITIAL_WINDOW_SIZE", "body": "It only [observes MAX_CONCURRENT_STREAMS](https://github.com/grpc/grpc-java/blob/master/okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java#L527).\n", "url": "https://github.com/grpc/grpc-java/issues/341", "user": "ejona86", "labels": ["bug", "okhttp"], "created": "2015-04-27 18:32:12", "closed": "2015-04-29 17:16:57", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "OkHttpClientTransport.onGoAway() races with startPendingStreams()", "body": "onGoAway has two phases: do things necessary under lock and final cleanup. In the first phase it collects the streams to terminate in the second and sets goAway.\n\nstartPendingStreams() does not observe goAway and also creates new streams that should be failed due to the goAway. From an initial look, it seems it would be best to remove failPendingStreams() and simply integrate its two phases into onGoAway()'s two phases; that is, when holding the lock in onGoAway, replace pendingStreams with an empty list, and then when not holding the lock call transportReportStatus\n", "url": "https://github.com/grpc/grpc-java/issues/330", "user": "ejona86", "labels": ["bug", "okhttp"], "created": "2015-04-23 17:16:24", "closed": "2015-04-28 21:10:25", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "OkHttp may be missing flush after sending headers", "body": "It looks like we aren't flushing after headers. This works okay because we don't have any tests that don't send data. We should add such a test to AbstractTransportTests and add the flush as appropriate.\n\nhttps://github.com/grpc/grpc-java/blob/7865b031e1402b9bf2577485ad610db78c068490/okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java#L192\n\nOn Friday I was playing with a change that allows removing the flush() on headers for unary and server streaming RPCs. We may be more interested in it now.\n", "url": "https://github.com/grpc/grpc-java/issues/257", "user": "ejona86", "labels": ["bug", "okhttp"], "created": "2015-03-31 16:12:06", "closed": "2015-04-27 21:00:45", "commits": {"4b00476d33689a990126075a6199ff1e4f3f7136": {"commitGHEventType": "closed", "commitUser": "madongfly"}}, "ttf": 27.00027777777778, "commitsDetails": [{"commitHash": "4b00476d33689a990126075a6199ff1e4f3f7136", "commitGHEventType": "closed", "commitUser": "madongfly", "commitParents": ["67b5bc792a5ebb3c5b8afb4230afe65362c86b4a"], "nameRev": "4b00476d33689a990126075a6199ff1e4f3f7136 tags/v0.7.0~98", "commitMessage": "okhttp: Flushes headers out immediately, so that the server can be aware of the stream before receiving real data (or half close).\nResolves #257.\n", "commitDateTime": "2015-04-27 13:10:04", "authoredDateTime": "2015-04-07 14:58:33", "commitGitStats": [{"filePath": "okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientStream.java", "insertions": 16, "deletions": 3, "lines": 19}, {"filePath": "okhttp/src/main/java/io/grpc/transport/okhttp/OkHttpClientTransport.java", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "okhttp/src/test/java/io/grpc/transport/okhttp/OkHttpClientTransportTest.java", "insertions": 47, "deletions": 6, "lines": 53}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OkHttpClientStream.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientStream.newStream(io.grpc.transport.ClientStreamListener,io.grpc.transport.okhttp.AsyncFrameWriter,io.grpc.transport.okhttp.OkHttpClientTransport,io.grpc.transport.okhttp.OutboundFlowController)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientStream", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientStream.getType()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientStream.newStream(io.grpc.transport.ClientStreamListener,io.grpc.transport.okhttp.AsyncFrameWriter,io.grpc.transport.okhttp.OkHttpClientTransport,io.grpc.transport.okhttp.OutboundFlowController,io.grpc.MethodType)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OkHttpClientTransport.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientTransport.startStream(io.grpc.transport.okhttp.OkHttpClientStream,java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata$Headers,io.grpc.transport.ClientStreamListener)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OkHttpClientTransportTest.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientTransportTest.unaryHeadersShouldNotBeFlushed()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientTransportTest.serverStreamingHeadersShouldNotBeFlushed()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientTransportTest.clientStreamingHeadersShouldBeFlushed()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientTransportTest.duplexStreamingHeadersShouldNotBeFlushed()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientTransportTest.shouldHeadersBeFlushed(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.grpc.transport.okhttp.OkHttpClientTransportTest.setUp()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4b00476d33689a990126075a6199ff1e4f3f7136"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 23, "deletions": 4, "lines": 27, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 8, "UPD": 1, "INS": 7, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["okhttp/src/main/java/io/grpc/transport/okhttp"], "changesInPackagesSPOON": ["io.grpc.transport.okhttp.OkHttpClientStream", "io.grpc.transport.okhttp.OkHttpClientTransport.newStream(io.grpc.MethodDescriptor,io.grpc.Metadata$Headers,io.grpc.transport.ClientStreamListener)", "io.grpc.transport.okhttp.OkHttpClientStream.newStream(io.grpc.transport.ClientStreamListener,io.grpc.transport.okhttp.AsyncFrameWriter,io.grpc.transport.okhttp.OkHttpClientTransport,io.grpc.transport.okhttp.OutboundFlowController,io.grpc.MethodType)", "io.grpc.transport.okhttp.OkHttpClientStream.getType()", "io.grpc.transport.okhttp.OkHttpClientStream.newStream(io.grpc.transport.ClientStreamListener,io.grpc.transport.okhttp.AsyncFrameWriter,io.grpc.transport.okhttp.OkHttpClientTransport,io.grpc.transport.okhttp.OutboundFlowController)", "io.grpc.transport.okhttp.OkHttpClientTransport.startStream(io.grpc.transport.okhttp.OkHttpClientStream,java.util.List)"]}, {"title": "ClientAuthInterceptor synchronizes on wrong object", "body": "The \"this\" in synchronized (this), is not the correct object to synchronize on:\nhttps://github.com/grpc/grpc-java/blob/master/auth/src/main/java/io/grpc/auth/ClientAuthInterceptor.java#L77\n\nIt should be ClientAuthInterceptor.this instead. As the code stands, there is no synchronization between threads so you can see NullPointerExceptions as lastMetadata is set but not cached.\n", "url": "https://github.com/grpc/grpc-java/issues/246", "user": "ejona86", "labels": ["bug"], "created": "2015-03-26 14:18:45", "closed": "2015-03-26 16:34:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ClientAuthInterceptor.start() skips super.start() when there is an error, causing subsequent use of the top-level Call to throw IllegalStateException", "body": "onClose does not log any exception or status, as it is commonly used in cases where there wasn't a server error but instead a client issue. Thus, [in the IOException handling of ClientAuthInterceptior](https://github.com/grpc/grpc-java/blob/master/auth/src/main/java/io/grpc/auth/ClientAuthInterceptor.java#L90), if an exception is thrown it is thrown away, the caller doesn't notice, and will get some odd exception on whatever the next call is (NullPointerException in request() was what led me to this discovery). We discussed that the \"proper\" exception handling isn't very obvious, but certainly swallowing the exception is worse than the alternatives.\n", "url": "https://github.com/grpc/grpc-java/issues/240", "user": "ejona86", "labels": ["bug"], "created": "2015-03-24 05:35:09", "closed": "2015-04-09 22:58:27", "commits": {}, "ttf": 16.00027777777778, "commitsDetails": []}, {"title": "Lacking preconditions for start() in ChannelImpl.CallImpl", "body": "For instance, calling request() before start() has been called results in a NullPointerException.\n", "url": "https://github.com/grpc/grpc-java/issues/239", "user": "ejona86", "labels": ["bug"], "created": "2015-03-24 05:12:19", "closed": "2015-03-26 18:47:41", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Race in Server handler initialization", "body": "When initializing an incoming client connection, [we call startAsync()](https://github.com/grpc/grpc-java/blob/master/netty/src/main/java/io/grpc/transport/netty/NettyServer.java#L84) on the transport, which [registers the handler](https://github.com/grpc/grpc-java/blob/master/netty/src/main/java/io/grpc/transport/netty/NettyServerTransport.java#L108) on a separate thread. This is obviously a race, and it would have probably been fixed if I had finished Service removal in #35.\n\nSymptom:\n\n```\nDEBUG i.n.channel.DefaultChannelPipeline - Discarded inbound message SimpleLeakAwareByteBuf(PooledUnsafeDirectByteBuf(ridx: 0, widx: 259, cap: 1024)) that reached at the tail of the pipeline. Please check your pipeline configuration.\n```\n\nThe quickest fix would be to call awaitRunning() from initChannel(). That reduces the rate new connections can connect, but is probably the most expedient solution, until #35 is finished.\n\n@nmittler, thoughts?\n", "url": "https://github.com/grpc/grpc-java/issues/238", "user": "ejona86", "labels": ["bug", "netty"], "created": "2015-03-23 22:28:49", "closed": "2015-03-26 19:36:45", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Observe MAX_CONCURRENT_STREAMS in OkHttp client", "body": "We ignore it. We shouldn't.\n", "url": "https://github.com/grpc/grpc-java/issues/181", "user": "ejona86", "labels": ["bug", "okhttp"], "created": "2015-03-11 17:09:16", "closed": "2015-04-07 07:04:26", "commits": {}, "ttf": 26.00027777777778, "commitsDetails": []}, {"title": "The Future interface doesn't implement cancellation", "body": "Currently Future returned by the future interface is a SettableFuture and it doesn't implement the RPC cancellation. It should be as easy as implementing AbstractFuture.interruptTask().\n", "url": "https://github.com/grpc/grpc-java/issues/152", "user": "zhangkun83", "labels": ["bug"], "created": "2015-02-27 19:25:18", "closed": "2015-03-02 19:05:58", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Naming inconsistency in NettyServerBuilder", "body": "I noticed that `NettyServerBuilder` has the methods `userBossEventLoopGroup` and `workerEventLoopGroup`. \n\nWhy the `user` prefix in `userBossEventLoopGroup`, why not simply `bossEventLoopGroup`?\n", "url": "https://github.com/grpc/grpc-java/issues/73", "user": "buchgr", "labels": ["bug"], "created": "2015-02-12 20:31:52", "closed": "2015-02-20 21:43:42", "commits": {"c6c0a3bf69ab15abd6c10d9b16ebd1a9ea087f6b": {"commitGHEventType": "closed", "commitUser": "buchgr"}}, "ttf": 8.000277777777777, "commitsDetails": [{"commitHash": "c6c0a3bf69ab15abd6c10d9b16ebd1a9ea087f6b", "commitGHEventType": "closed", "commitUser": "buchgr", "commitParents": ["bd81a58c42cf907670c0decfc999d585b34c2ab0"], "nameRev": "c6c0a3bf69ab15abd6c10d9b16ebd1a9ea087f6b tags/v0.7.0~240", "commitMessage": "Remove user prefix from NettyServerBuilder.userBossEventLoopGroup(). Fixes #73\n", "commitDateTime": "2015-02-20 13:43:20", "authoredDateTime": "2015-02-20 13:39:39", "commitGitStats": [{"filePath": "netty/src/main/java/io/grpc/transport/netty/NettyServerBuilder.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NettyServerBuilder.java", "spoonMethods": [{"spoonMethodName": "io.grpc.transport.netty.NettyServerBuilder.userBossEventLoopGroup(io.netty.channel.EventLoopGroup)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c6c0a3bf69ab15abd6c10d9b16ebd1a9ea087f6b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["netty/src/main/java/io/grpc/transport/netty"], "changesInPackagesSPOON": ["io.grpc.transport.netty.NettyServerBuilder.userBossEventLoopGroup(io.netty.channel.EventLoopGroup)"]}, {"title": "Idea config breaks clean gradle build", "body": "```\n$ gradle clean\n$ gradle build\nFAILURE: Build failed with an exception.\n\n* Where:\nBuild file '/home/ejona/clients/grpc-java/integration-testing/build.gradle' line: 31\n\n* What went wrong:\nA problem occurred evaluating project ':stubby-integration-testing'.\n> java.lang.NullPointerException (no error message)\n```\n\nCommenting out line 31 works around the problem, but obviously doesn't solve it:\n\n``` groovy\nexcludeDirs = [file('.gradle')]\n//excludeDirs += files(file(\"$buildDir/\").listFiles())\nexcludeDirs -= file(\"$buildDir/generated-sources\")\n```\n", "url": "https://github.com/grpc/grpc-java/issues/36", "user": "ejona86", "labels": ["bug"], "created": "2015-01-26 18:01:03", "closed": "2015-01-26 23:39:56", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}]}