{"captureTime": "Sat Jul  4 12:33:18 2020", "issues": [{"url": "https://github.com/google/caja/issues/1994", "closed": "2016-02-11 23:05:48", "ttf": 1.0002777777777778, "title": "c.g.c.util.Abbreviator infinitely recurses sometimes", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "For me, `AbbreviatorTest.testSetContainsSuffixOfOtherMember` fails with a `StackOverflowError` when running unit tests.\n\nIt is basically untouched since it was written, but the test provides a `HashSet` of items to Abbreviator's constructor, and Abbreviator has a bug that depends on whether the shorter or longer of two items is inserted first. So the test depends on hashing order, and there's a bug that wasn't covered by the test.\n\nI'm currently looking at what's wrong with Abbreviator. (And yes, this is not dead code \u2014 it's still used in the parsing code that's used in our build and test systems.)\n", "created": "2016-02-10 22:52:33"}, {"url": "https://github.com/google/caja/issues/1979", "closed": "2015-09-09 18:16:40", "ttf": 0.0002777777777777778, "title": "SES not supported, aborting taming frame initialization in Chrome 45", "commits": {}, "user": "kurttomlinson", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "How to reproduce:\n1) Navigate to https://developers.google.com/caja/demos/gettingstarted/host.html\n2) Expected result:\n\n> Caja host page\n> Static hello world\n> Dynamic hello world\n\n3) Actual result:\n\n> Caja host page\n\nBrowser: Chrome Version 45.0.2454.85 m\nOS: Windows 7 Pro x64\n\nError:\n![image](https://cloud.githubusercontent.com/assets/1914753/9769513/480908a0-56f0-11e5-81e6-4cee6c71d1fa.png)\n", "created": "2015-09-09 17:47:40"}, {"numCommits": 1, "closed": "2015-06-10 20:14:42", "ttf": 7.000277777777778, "title": "ES5/3 fails in Chrome 44", "user": "kpreid", "filteredCommits": ["fbbe498f106d5a41ce337dfc10ad50a8b8441245"], "commitsDetails": [{"commitGHEventType": "referenced", "authoredDateTime": "2015-06-09 12:16:47", "commitDateTime": "2015-06-10 13:11:30", "commitHash": "fbbe498f106d5a41ce337dfc10ad50a8b8441245", "nameRev": "fbbe498f106d5a41ce337dfc10ad50a8b8441245 tags/v6002-es53~1", "commitMessage": "ES5/3 compatibility fixes for native accessor properties and Error inheritance.\nhttps://codereview.appspot.com/247900043\n\n* For Chrome 44 <https://github.com/google/caja/issues/1967>, avoid\n  doing \"O[P] = O[P]\" in the case where it would be a noop by ES3\n  rules, which seems to be sufficient for the issue.\n* Found while testing: markFunc did nothing if the function was\n  already marked. Since the Error subclass constructors now inherit\n  from the Error constructor per ES6 (and in Chrome), this would cause\n  the subclasses to not get new___ configured, so 'new EvalError(...)'\n  would act as 'new Error(...)'. The new___ property now uses the\n  \"o.new___ === o\" pattern to avoid being seen as inherited.\n\nR=erights@gmail.com, metaweta@gmail.com\n", "spoonStatsSkippedReason": "", "commitParents": ["99f9d8a81eff716ff93daa014fadd3493b0df0a0"], "commitGitStats": [{"filePath": "src/com/google/caja/es53.js", "lines": 14, "deletions": 7, "insertions": 7}], "commitSpoonAstDiffStats": [], "commitUser": "kpreid"}], "url": "https://github.com/google/caja/issues/1967", "created": "2015-06-02 22:30:01", "gitStatsSummary": {"gitFilesChange": 1, "lines": 14, "deletions": 7, "insertions": 7}, "changesInPackagesGIT": ["src/com/google/caja/es53.js"], "spoonStatsSummary": {}, "commits": {"fbbe498f106d5a41ce337dfc10ad50a8b8441245": {"commitGHEventType": "referenced", "commitUser": "kpreid"}}, "statsSkippedReason": "", "labels": ["Component-Cajoler", "Priority-Critical", "Type-Defect"], "body": "```\nUncaught TypeError: 'caller' and 'arguments' are restricted function properties and cannot be accessed in this context.\nDefineOwnProperty___ @ es53-taming-frame.js?debug=1:3246\n(anonymous function) @ es53-taming-frame.js?debug=1:3633\n(anonymous function) @ es53-taming-frame.js?debug=1:6615\n```\n\nThis is DefineOwnProperty___ doing \"O[P] = O[P]\" to ensure the property exists (this was introduced in the r4850 patch for issue 1457), which fails when the object has a native setter that rejects the operation.\n\n(I have a funny feeling that I've seen this issue before in a different form, but I didn't find any relevant change.)\n", "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0, "moreThanOneParent": 0}}, {"numCommits": 1, "closed": "2015-07-28 17:08:58", "ttf": 103.00027777777778, "title": "test server should be more locked down", "user": "kpreid", "filteredCommits": ["faa0152cc1881cad3b9f18dc067e65ff82554f97"], "commitsDetails": [{"commitGHEventType": "referenced", "authoredDateTime": "2015-07-27 16:31:19", "commitDateTime": "2015-07-28 10:05:24", "commitHash": "faa0152cc1881cad3b9f18dc067e65ff82554f97", "nameRev": "faa0152cc1881cad3b9f18dc067e65ff82554f97 tags/v6004-es53^2~5", "commitMessage": "Upgrade Jetty and make test server listen only on localhost.\nhttps://codereview.appspot.com/258980043\n\nFixes half of <https://github.com/google/caja/issues/1964>, test server\nbeing visible to the network.\n\nThe Jetty upgrade is needed because the ancient Jetty version we had\ndid not allow binding to an address. We are upgrading to Jetty 8, not\nJetty 9, so as to not require Java 8.\n\nR=felix8a@gmail.com\n", "spoonStatsSkippedReason": "", "commitParents": ["962c28551fefe6ab6c8c45037fae55254f1459f9"], "commitGitStats": [{"filePath": "third_party/java/jetty/lib/jetty.jar", "lines": 1, "deletions": 1, "insertions": 0}, {"filePath": "third_party/java/jetty/LICENSE-ECLIPSE-1.0.html", "lines": 320, "deletions": 0, "insertions": 320}, {"filePath": "third_party/java/jsdk2.1/README", "lines": 96, "deletions": 96, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-server-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-util-6.1.15.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-servlet.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "third_party/java/jetty/lib/jetty-servlet-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-http.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "tests/com/google/caja/util/WrapperResource.java", "lines": 103, "deletions": 103, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-security-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-continuation-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-io-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/servlet-api-3.0.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/README.txt", "lines": 145, "deletions": 108, "insertions": 37}, {"filePath": "third_party/java/jsdk2.1/LICENSE", "lines": 184, "deletions": 184, "insertions": 0}, {"filePath": "third_party/java/jetty/notice.html", "lines": 111, "deletions": 0, "insertions": 111}, {"filePath": "third_party/java/jsdk2.1/stopserver", "lines": 47, "deletions": 47, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-http-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jsdk2.1/startserver", "lines": 50, "deletions": 50, "insertions": 0}, {"filePath": "src/com/google/caja/service/ProxyServletMain.java", "lines": 9, "deletions": 4, "insertions": 5}, {"filePath": "third_party/java/jetty/lib/jetty-util.jar", "lines": 2, "deletions": 1, "insertions": 1}, {"filePath": "third_party/java/jetty/lib/jetty-util-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "tests/com/google/caja/plugin/BrowserTestCase.java", "lines": 10, "deletions": 5, "insertions": 5}, {"filePath": "third_party/java/jsdk2.1/startserver.bat", "lines": 33, "deletions": 33, "insertions": 0}, {"filePath": "third_party/java/jetty/{LICENSES/LICENSE.txt => LICENSE-APACHE-2.0.txt}", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/LICENSES/NOTICE.txt", "lines": 36, "deletions": 36, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-server.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "third_party/java/jetty/lib/jetty-io.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "third_party/java/jetty/VERSION.txt", "lines": 3843, "deletions": 638, "insertions": 3205}, {"filePath": "tests/com/google/caja/service/TestHttpServletResponse.java", "lines": 11, "deletions": 0, "insertions": 11}, {"filePath": "third_party/java/jsdk2.1/default.cfg", "lines": 23, "deletions": 23, "insertions": 0}, {"filePath": "build.xml", "lines": 24, "deletions": 8, "insertions": 16}, {"filePath": "tests/com/google/caja/service/TestHttpServletRequest.java", "lines": 55, "deletions": 3, "insertions": 52}, {"filePath": "third_party/java/jsdk2.1/stopserver.bat", "lines": 27, "deletions": 27, "insertions": 0}, {"filePath": "third_party/java/jsdk2.1/servlet.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/about.html", "lines": 20, "deletions": 0, "insertions": 20}, {"filePath": "third_party/java/jsdk2.1/etc/SimpleStartup.java", "lines": 65, "deletions": 65, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-6.1.15.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-security.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "third_party/java/jetty/lib/jetty-continuation.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "tests/com/google/caja/util/LocalServer.java", "lines": 35, "deletions": 15, "insertions": 20}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.LocalServer.configureContext(org.mortbay.jetty.servlet.Context)", "INS": 0, "DEL": 0, "UPD": 1}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.LocalServer.start(int).1.doResponseHeaders(javax.servlet.http.HttpServletResponse,org.mortbay.resource.Resource,java.lang.String)", "INS": 0, "DEL": 0, "UPD": 1}, {"TOT": 17, "MOV": 1, "spoonMethodName": "com.google.caja.util.LocalServer.start(int)", "INS": 0, "DEL": 0, "UPD": 16}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.LocalServer.start(java.lang.String,int)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.LocalServer.start(int).1", "INS": 0, "DEL": 0, "UPD": 1}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.LocalServer", "INS": 0, "DEL": 0, "UPD": 1}], "spoonFilePath": "LocalServer.java"}, {"spoonMethods": [{"TOT": 3, "MOV": 0, "spoonMethodName": "com.google.caja.service.ProxyServletMain.main(java.lang.String[])", "INS": 0, "DEL": 0, "UPD": 3}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.ProxyServletMain.main(java.lang.String[]).1", "INS": 0, "DEL": 0, "UPD": 1}, {"TOT": 3, "MOV": 1, "spoonMethodName": "com.google.caja.service.ProxyServletMain.main(java.lang.String[]).1.handle(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,int)", "INS": 0, "DEL": 0, "UPD": 2}], "spoonFilePath": "ProxyServletMain.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletResponse.getHeader(java.lang.String)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletResponse.getHeaderNames()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletResponse.getHeaders(java.lang.String)", "INS": 1, "DEL": 0, "UPD": 0}], "spoonFilePath": "TestHttpServletResponse.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.plugin.BrowserTestCase.runBrowserTest(java.lang.String,boolean,java.lang.String,java.lang.String[])", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.plugin.BrowserTestCase.debugHook()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.plugin.BrowserTestCase.addServlets(org.mortbay.jetty.servlet.Context)", "INS": 0, "DEL": 0, "UPD": 1}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.plugin.BrowserTestCase.1.configureContext(org.mortbay.jetty.servlet.Context)", "INS": 0, "DEL": 0, "UPD": 1}], "spoonFilePath": "BrowserTestCase.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "SimpleStartup", "INS": 0, "DEL": 1, "UPD": 0}], "spoonFilePath": "SimpleStartup.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.WrapperResource", "INS": 0, "DEL": 1, "UPD": 0}], "spoonFilePath": "WrapperResource.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getServletContext()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getAsyncContext()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.authenticate(javax.servlet.http.HttpServletResponse)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 8, "MOV": 3, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getParameterMap()", "INS": 1, "DEL": 1, "UPD": 3}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getParts()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.logout()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.login(java.lang.String,java.lang.String)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.startAsync(javax.servlet.ServletRequest,javax.servlet.ServletResponse)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.isAsyncSupported()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.isAsyncStarted()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getDispatcherType()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getPart(java.lang.String)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.startAsync()", "INS": 1, "DEL": 0, "UPD": 0}], "spoonFilePath": "TestHttpServletRequest.java"}], "commitUser": "kpreid"}, {"commitGHEventType": "referenced", "authoredDateTime": "2015-07-27 16:31:19", "commitDateTime": "2015-07-28 10:04:59", "commitHash": "4391844cd376865e0c58499b2815fd3e8dab6ef5", "nameRev": "4391844cd376865e0c58499b2815fd3e8dab6ef5 tags/v6004-es53~1", "commitMessage": "Upgrade Jetty and make test server listen only on localhost.\nhttps://codereview.appspot.com/258980043\n\nFixes half of <https://github.com/google/caja/issues/1964>, test server\nbeing visible to the network.\n\nThe Jetty upgrade is needed because the ancient Jetty version we had\ndid not allow binding to an address. We are upgrading to Jetty 8, not\nJetty 9, so as to not require Java 8.\n\nR=felix8a@gmail.com\n", "spoonStatsSkippedReason": "", "commitParents": ["9bf88a9b0ab846cf73ff10db6adfee59776f0cb2"], "commitGitStats": [{"filePath": "third_party/java/jetty/lib/jetty.jar", "lines": 1, "deletions": 1, "insertions": 0}, {"filePath": "third_party/java/jetty/LICENSE-ECLIPSE-1.0.html", "lines": 320, "deletions": 0, "insertions": 320}, {"filePath": "third_party/java/jsdk2.1/README", "lines": 96, "deletions": 96, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-server-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-util-6.1.15.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-servlet.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "third_party/java/jetty/lib/jetty-io.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "third_party/java/jetty/lib/jetty-http.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "tests/com/google/caja/util/WrapperResource.java", "lines": 103, "deletions": 103, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-security-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-continuation-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-io-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/servlet-api-3.0.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/README.txt", "lines": 145, "deletions": 108, "insertions": 37}, {"filePath": "third_party/java/jsdk2.1/LICENSE", "lines": 184, "deletions": 184, "insertions": 0}, {"filePath": "third_party/java/jetty/notice.html", "lines": 111, "deletions": 0, "insertions": 111}, {"filePath": "third_party/java/jsdk2.1/stopserver", "lines": 47, "deletions": 47, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-http-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jsdk2.1/startserver", "lines": 50, "deletions": 50, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-continuation.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "third_party/java/jetty/lib/jetty-util.jar", "lines": 2, "deletions": 1, "insertions": 1}, {"filePath": "third_party/java/jetty/lib/jetty-util-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "tests/com/google/caja/plugin/BrowserTestCase.java", "lines": 10, "deletions": 5, "insertions": 5}, {"filePath": "third_party/java/jsdk2.1/startserver.bat", "lines": 33, "deletions": 33, "insertions": 0}, {"filePath": "third_party/java/jetty/{LICENSES/LICENSE.txt => LICENSE-APACHE-2.0.txt}", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/LICENSES/NOTICE.txt", "lines": 36, "deletions": 36, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-server.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "src/com/google/caja/service/CajolingServiceMain.java", "lines": 9, "deletions": 4, "insertions": 5}, {"filePath": "third_party/java/jetty/VERSION.txt", "lines": 3843, "deletions": 638, "insertions": 3205}, {"filePath": "tests/com/google/caja/plugin/ModulesBrowserTest.java", "lines": 6, "deletions": 3, "insertions": 3}, {"filePath": "third_party/java/jsdk2.1/default.cfg", "lines": 23, "deletions": 23, "insertions": 0}, {"filePath": "build.xml", "lines": 24, "deletions": 8, "insertions": 16}, {"filePath": "tests/com/google/caja/service/TestHttpServletRequest.java", "lines": 55, "deletions": 3, "insertions": 52}, {"filePath": "third_party/java/jsdk2.1/stopserver.bat", "lines": 27, "deletions": 27, "insertions": 0}, {"filePath": "third_party/java/jsdk2.1/servlet.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-servlet-8.1.17.v20150415.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/about.html", "lines": 20, "deletions": 0, "insertions": 20}, {"filePath": "third_party/java/jsdk2.1/etc/SimpleStartup.java", "lines": 65, "deletions": 65, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-6.1.15.jar", "lines": 0, "deletions": 0, "insertions": 0}, {"filePath": "third_party/java/jetty/lib/jetty-security.jar", "lines": 1, "deletions": 0, "insertions": 1}, {"filePath": "tests/com/google/caja/service/TestHttpServletResponse.java", "lines": 11, "deletions": 0, "insertions": 11}, {"filePath": "tests/com/google/caja/util/LocalServer.java", "lines": 37, "deletions": 16, "insertions": 21}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"TOT": 3, "MOV": 0, "spoonMethodName": "com.google.caja.service.CajolingServiceMain.main(java.lang.String[])", "INS": 0, "DEL": 0, "UPD": 3}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.CajolingServiceMain.main(java.lang.String[]).1", "INS": 0, "DEL": 0, "UPD": 1}, {"TOT": 3, "MOV": 1, "spoonMethodName": "com.google.caja.service.CajolingServiceMain.main(java.lang.String[]).1.handle(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,int)", "INS": 0, "DEL": 0, "UPD": 2}], "spoonFilePath": "CajolingServiceMain.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.LocalServer.configureContext(org.mortbay.jetty.servlet.Context)", "INS": 0, "DEL": 0, "UPD": 1}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.LocalServer.start(int).1.doResponseHeaders(javax.servlet.http.HttpServletResponse,org.mortbay.resource.Resource,java.lang.String)", "INS": 0, "DEL": 0, "UPD": 1}, {"TOT": 17, "MOV": 1, "spoonMethodName": "com.google.caja.util.LocalServer.start(int)", "INS": 0, "DEL": 0, "UPD": 16}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.LocalServer.start(java.lang.String,int)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.LocalServer.start(int).1", "INS": 0, "DEL": 0, "UPD": 1}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.LocalServer", "INS": 0, "DEL": 0, "UPD": 1}], "spoonFilePath": "LocalServer.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletResponse.getHeader(java.lang.String)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletResponse.getHeaderNames()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletResponse.getHeaders(java.lang.String)", "INS": 1, "DEL": 0, "UPD": 0}], "spoonFilePath": "TestHttpServletResponse.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.util.WrapperResource", "INS": 0, "DEL": 1, "UPD": 0}], "spoonFilePath": "WrapperResource.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "SimpleStartup", "INS": 0, "DEL": 1, "UPD": 0}], "spoonFilePath": "SimpleStartup.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.plugin.BrowserTestCase.runBrowserTest(java.lang.String,boolean,java.lang.String,java.lang.String[])", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.plugin.BrowserTestCase.debugHook()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.plugin.BrowserTestCase.addServlets(org.mortbay.jetty.servlet.Context)", "INS": 0, "DEL": 0, "UPD": 1}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.plugin.BrowserTestCase.2.configureContext(org.mortbay.jetty.servlet.Context)", "INS": 0, "DEL": 0, "UPD": 1}], "spoonFilePath": "BrowserTestCase.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getServletContext()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getAsyncContext()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.authenticate(javax.servlet.http.HttpServletResponse)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 8, "MOV": 3, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getParameterMap()", "INS": 1, "DEL": 1, "UPD": 3}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getParts()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.logout()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.login(java.lang.String,java.lang.String)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.startAsync(javax.servlet.ServletRequest,javax.servlet.ServletResponse)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.isAsyncSupported()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.isAsyncStarted()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getDispatcherType()", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.getPart(java.lang.String)", "INS": 1, "DEL": 0, "UPD": 0}, {"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.service.TestHttpServletRequest.startAsync()", "INS": 1, "DEL": 0, "UPD": 0}], "spoonFilePath": "TestHttpServletRequest.java"}, {"spoonMethods": [{"TOT": 1, "MOV": 0, "spoonMethodName": "com.google.caja.plugin.ModulesBrowserTest.addServlets(org.mortbay.jetty.servlet.Context)", "INS": 0, "DEL": 0, "UPD": 1}], "spoonFilePath": "ModulesBrowserTest.java"}], "commitUser": "kpreid"}], "url": "https://github.com/google/caja/issues/1964", "changesInPackagesSPOON": ["SimpleStartup", "com.google.caja.service.ProxyServletMain.main(java.lang.String[]).1", "com.google.caja.util.LocalServer.start(int).1.doResponseHeaders(javax.servlet.http.HttpServletResponse,org.mortbay.resource.Resource,java.lang.String)", "com.google.caja.service.ProxyServletMain.main(java.lang.String[]).1.handle(java.lang.String,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,int)", "com.google.caja.util.LocalServer.start(int)", "com.google.caja.util.LocalServer.start(java.lang.String,int)", "com.google.caja.service.ProxyServletMain.main(java.lang.String[])", "com.google.caja.util.LocalServer.configureContext(org.mortbay.jetty.servlet.Context)", "com.google.caja.util.WrapperResource", "com.google.caja.util.LocalServer", "com.google.caja.util.LocalServer.start(int).1"], "created": "2015-04-16 05:53:32", "gitStatsSummary": {"gitFilesChange": 33, "lines": 1132, "deletions": 649, "insertions": 483}, "changesInPackagesGIT": ["third_party/java/jetty/lib/jetty.jar", "third_party/java/jetty/LICENSE-ECLIPSE-1.0.html", "third_party/java/jsdk2.1/README", "third_party/java/jetty/lib/jetty-server-8.1.17.v20150415.jar", "third_party/java/jetty/lib/jetty-util-6.1.15.jar", "third_party/java/jetty/lib/jetty-servlet.jar", "third_party/java/jetty/lib/jetty-servlet-8.1.17.v20150415.jar", "third_party/java/jetty/lib/jetty-http.jar", "src/com/google/caja/service", "third_party/java/jetty/lib/jetty-security-8.1.17.v20150415.jar", "third_party/java/jetty/lib/jetty-continuation.jar", "third_party/java/jetty/lib/jetty-io-8.1.17.v20150415.jar", "third_party/java/jetty/lib/servlet-api-3.0.jar", "tests/com/google/caja/util", "third_party/java/jetty/notice.html", "third_party/java/jetty/lib/jetty-http-8.1.17.v20150415.jar", "third_party/java/jsdk2.1/startserver", "third_party/java/jetty/lib/jetty-continuation-8.1.17.v20150415.jar", "third_party/java/jetty/lib/jetty-util.jar", "third_party/java/jsdk2.1/LICENSE", "third_party/java/jsdk2.1/startserver.bat", "third_party/java/jsdk2.1/etc", "third_party/java/jetty/lib/jetty-util-8.1.17.v20150415.jar", "third_party/java/jetty/lib/jetty-io.jar", "third_party/java/jetty/lib/jetty-server.jar", "third_party/java/jsdk2.1/default.cfg", "third_party/java/jsdk2.1/stopserver", "third_party/java/jsdk2.1/stopserver.bat", "third_party/java/jetty/about.html", "third_party/java/jetty/lib/jetty-6.1.15.jar", "third_party/java/jetty/lib/jetty-security.jar", "third_party/java/jsdk2.1/servlet.jar"], "spoonStatsSummary": {"TOT": 31, "spoonMethodsChanged": 11, "MOV": 2, "INS": 1, "DEL": 2, "UPD": 26, "spoonFilesChanged": 4}, "commits": {"faa0152cc1881cad3b9f18dc067e65ff82554f97": {"commitGHEventType": "referenced", "commitUser": "kpreid"}, "4391844cd376865e0c58499b2815fd3e8dab6ef5": {"commitGHEventType": "referenced", "commitUser": "kpreid"}}, "statsSkippedReason": "", "labels": ["Component-Build", "Priority-Low", "Type-Defect"], "body": "Original [issue 1966](https://code.google.com/p/google-caja/issues/detail?id=1966) created by kpreid@google.com on 2015-04-14T16:56:46.000Z:\n\nThe web server started by 'ant runtests' / 'ant brserve' permits more than it needs to:\n- It allows access from the network. Localhost would be a better _default_.\n- It serves all files in the project root, hence including .svn or .git. In the event that network access is permitted, hiding .git would prevent reading history information which could include undisclosed draft security patches and such.\n\n(Of course, if the server is accessible then the current files it's serving show the current work as well, but VCS data is more slurpable.)\n", "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0, "moreThanOneParent": 0}}, {"url": "https://github.com/google/caja/issues/1962", "closed": "2015-05-21 23:44:39", "ttf": 35.000277777777775, "title": "Firefox 40 Nightly moved the error.stack property where debug.js was not finding it", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1964](https://code.google.com/p/google-caja/issues/detail?id=1964) created by erights on 2015-04-12T00:39:41.000Z:\n\nOn Firefox 40 Nightly, the .stack property on error objects is now a not-so-magical accessor property inherited from Error.prototype. Of course, Error.prototype.stack is not on our whitelist so it was deleted. This results in debug.js (and thus useHTMLLogger.js) presenting FF40 Nightly as a platform without accessible error stacks.\n", "created": "2015-04-16 05:53:32"}, {"url": "https://github.com/google/caja/issues/1961", "closed": "2015-05-21 23:39:04", "ttf": 35.000277777777775, "title": "Need to rewire Error inheritance to keep UnsafeError hidden", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1963](https://code.google.com/p/google-caja/issues/detail?id=1963) created by erights on 2015-04-12T00:33:33.000Z:\n\nFor each of the builtin &quot;subclasses&quot; of Error, such as EvalError, ES6 changes them the constructors themselves to inherit directly from the Error constructor, in order to be analogous to ES6's handling of user defined classes. Chrome 44 Canary now implements this.\n\nHowever, debug.js hides the original Error constructor for its own use as UnsafeError, replacing it with FakeError. However, it still would have been accessible via, for example, Object.getPrototypeOf(EvalError) or EvalError.**proto**. Fortunately, the new error checking we added to startSES caught this, so no unsafety results. Unfortunately, this results in SES (and therefore Caja in ES5 mode) reporting that it cannot initialize safely on Chrome 44 Canary.\n", "created": "2015-04-16 05:53:30"}, {"url": "https://github.com/google/caja/issues/1960", "closed": "2015-05-21 23:43:57", "ttf": 35.000277777777775, "title": "Cross-frame for-in is broken on Firefox 37, 38 beta", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1962](https://code.google.com/p/google-caja/issues/detail?id=1962) created by kpreid@google.com on 2015-04-06T23:26:43.000Z:\n\nFirefox 37 and 38.0 beta.\n\n  var o = frame.untame(frame.iframe.contentWindow.eval('({})'));\n  for (var x in o) {}\n\nThe for loop throws &quot;TypeError: undefined is not a function&quot;. This shouldn't even be possible (without proxies, and there aren't any proxies here), so it's probably a browser bug.\n\nAny untame()d record object exhibits the problem. The unsafe eval is just to have less machinery involved.\n\nOther language meta-operations (e.g. getOwnPropertyNames) on the object work normally.\n", "created": "2015-04-16 05:53:05"}, {"url": "https://github.com/google/caja/issues/1955", "closed": "2015-04-16 05:52:53", "ttf": 0.0002777777777777778, "title": "INTERNAL COMPILER ERROR", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1957](https://code.google.com/p/google-caja/issues/detail?id=1957) created by ingeniero.ieci@servired.es on 2015-03-10T10:18:59.000Z:\n\nToday the apps we have developed in Google Caja are not working any more, we have a big issue with the referenced scripts and plugins.\n\n&lt;== http://cdn.datatables.net/plug-ins/9dcbecd42ad/integration/jqueryui/dataTables.jqueryui.css:302+3 - 29: unknown css property -webkit-overflow-scrolling HtmlOutput:481+32 - 37: css property display has bad value: ==&gt;clear&lt;== HtmlOutput:4289+45 - 50: css property position has bad value: ==&gt;fixed&lt;== HtmlOutput:1032+25 - 35: INTERNAL COMPILER ERROR. Node did not match any rules at: Declaration Identifier : checkField. Please report this error at: http://code.google.com/p/google-caja/issues/ HtmlOutput:2333+25 - 35: INTERNAL COMPILER ERROR. Node did not match any rules at: Declaration Identifier : checkField. Please report this error at: http://code.google.com/p/google-caja/issues/\n", "created": "2015-04-16 05:52:49"}, {"url": "https://github.com/google/caja/issues/1954", "closed": "2015-04-16 05:52:49", "ttf": 0.0002777777777777778, "title": "JS minifier (optimizer) transforms comma expressions invalidly", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1956](https://code.google.com/p/google-caja/issues/detail?id=1956) created by kpreid@google.com on 2015-02-26T00:54:02.000Z:\n\nThe minifier incorrectly transforms \n  q = (1,y.z)();\nto\n  q = y.z();\n\nAdditionally, I tried writing the obvious test case for this (in JsOptimizerTest.java) and it hung in an infinite loop inside ParseTreeKB.optimize:\n-  public final void testCommaNotChanged() throws Exception {\n-    assertOptimized(\n-        js(fromString(&quot;q = (1,y.z)();&quot;)),\n-        js(fromString(&quot;q = (1,y.z)();&quot;)));\n-  }\n\nThis is not currently a vulnerability as we never use the (1,o.m)() form statically in any critical location. However, it is a significant hazard for future code changes (because we use this pattern in other ways and so it looks like a fine thing to do).\n", "created": "2015-04-16 05:52:46"}, {"url": "https://github.com/google/caja/issues/1953", "closed": "2015-04-16 05:52:46", "ttf": 0.0002777777777777778, "title": "Fix remaining uses of Object.prototype.toString.call as a brand test to do something else.", "commits": {}, "user": "kpreid", "labels": ["Component-Taming", "Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1955](https://code.google.com/p/google-caja/issues/detail?id=1955) created by erights on 2015-02-15T18:54:30.000Z:\n\nAs of this writing, Object.prototype.toString.call(specimen) is still a reliable brand test on all deployed browsers, but TC39 recently agreed on a change so that it would no longer be. \n\nUses in SES fixed at r5708. Remaining uses at least in cajaTamingGoogleLoader.js and taming-membrane.js, either of which may actually be safe.\n", "created": "2015-04-16 05:52:42"}, {"url": "https://github.com/google/caja/issues/1952", "closed": "2015-04-16 05:52:41", "ttf": 0.0002777777777777778, "title": "On FF35, non-extensible objects can be extended", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1954](https://code.google.com/p/google-caja/issues/detail?id=1954) created by erights on 2015-02-15T17:13:28.000Z:\n\nThis is reported at https://bugzilla.mozilla.org/show_bug.cgi?id=1125389 as a non-disclosed bug I was given permission to see and share in a limited manner.  It was fixed on 1/29/2015 and propagated back through FF36. It will not be propagated back to FF35, so it remains vulnerable.\n\nComment 6 shows a case that will demonstrate the bug in the FF35 browser:\n\nfunction Obj() {\n    this.x = 0;\n    Object.preventExtensions(this);\n}\nvar i = 0;\nfunction test() {\n    var A = new Obj();\n    while (true) {\n        i++;\n        if (Object.isExtensible(A)) {\n            throw new Error(&quot;Shouldn't get here&quot;);\n        }\n    }\n    A.length1 = X;\n}\ntry {\n    test();\n} catch (e) {\n    console.log(e, 'iterations: ' + i);\n}\n", "created": "2015-04-16 05:52:19"}, {"url": "https://github.com/google/caja/issues/1951", "closed": "2015-04-16 05:52:19", "ttf": 0.0002777777777777778, "title": "More reachable objects not cleaned", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1953](https://code.google.com/p/google-caja/issues/detail?id=1953) created by erights on 2015-02-15T05:15:42.000Z:\n\nhttps://people.mozilla.org/~jorendorff/es6-draft.html#sec-well-known-intrinsic-objects lists the intrinsic objects of ES6, not all of which are reachable by own property traversal from roots. We've already encountered and fixed the issue with %ThrowTypeError% (nee [[ThrowTypeError]]) escaping the whitelist cleaning. Since it was also (in violation of the spec) not frozen, this caused a loss of isolation. In ES5, this was the only object that could cause this problem.\n\nNow that we are whitelisting some ES6-only objects, we need to be more vigilant about providing access to other intrinsics that we may not have cleaned. The specific case I just found is that the named typed array constructors, such as Float32Array, are speced to inherit from the %TypedArray% intrinsic, which is not otherwise reachable. It was thus escaping our whitelist-based cleaning. At the time of this writing, Chrome and Safari do not yet implement this part of the spec, and no breach seems to occur there. Unfortunately, FF35 and FF Nightly 38 do, so we LOSE ISOLATION there due to this hole. \n\nThus, this is high priority / security / private -- needing to go through the responsible disclosure process.\n", "created": "2015-04-16 05:52:01"}, {"url": "https://github.com/google/caja/issues/1946", "closed": "2015-04-16 05:51:56", "ttf": 0.0002777777777777778, "title": "\"ant runtests\" has failures", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1948](https://code.google.com/p/google-caja/issues/detail?id=1948) created by erights on 2014-12-15T01:38:56.000Z:\n\n&quot;ant runtests&quot; reports the following failures:\n\nguest-scan-min  Failure 100000 ms passed while waiting for: completion (Remaining elements = [&lt;div id=&quot;testUniverse-caja-guest-0___&quot; class=&quot;testcontainer done failed&quot;&gt;])\n\njunit.framework.AssertionFailedError: 100000 ms passed while waiting for: completion (Remaining elements = [&lt;div id=&quot;testUniverse-caja-guest-0___&quot; class=&quot;testcontainer done failed&quot;&gt;])\n    at com.google.caja.plugin.BrowserTestCase.countdown(BrowserTestCase.java:262)\n    at com.google.caja.plugin.BrowserTestCase.waitForCompletion(BrowserTestCase.java:222)\n    at com.google.caja.plugin.BrowserTestCase.driveBrowser(BrowserTestCase.java:209)\n    at com.google.caja.plugin.BrowserTestCase.runBrowserTest(BrowserTestCase.java:130)\n    at com.google.caja.plugin.CatalogTestCase.runTest(CatalogTestCase.java:34)\n    at com.google.caja.plugin.CatalogRunner$1.evaluate(CatalogRunner.java:94)\n    at com.google.caja.plugin.CatalogRunner.runChild(CatalogRunner.java:88)\n    at com.google.caja.plugin.CatalogRunner.runChild(CatalogRunner.java:42)\n\n282.660\ntaming-tamed-min    Failure The title shows 1/40 fail 39/40 pass - Browser test case (Netscape 5.0 (Macintosh))\n\njunit.framework.AssertionFailedError: The title shows 1/40 fail 39/40 pass - Browser test case (Netscape 5.0 (Macintosh))\n    at com.google.caja.plugin.BrowserTestCase.driveBrowser(BrowserTestCase.java:213)\n    at com.google.caja.plugin.BrowserTestCase.runBrowserTest(BrowserTestCase.java:130)\n    at com.google.caja.plugin.CatalogTestCase.runTest(CatalogTestCase.java:34)\n    at com.google.caja.plugin.CatalogRunner$1.evaluate(CatalogRunner.java:94)\n    at com.google.caja.plugin.CatalogRunner.runChild(CatalogRunner.java:88)\n    at com.google.caja.plugin.CatalogRunner.runChild(CatalogRunner.java:42)\n", "created": "2015-04-16 05:51:47"}, {"url": "https://github.com/google/caja/issues/1945", "closed": "2015-04-16 05:51:47", "ttf": 0.0002777777777777778, "title": "Firefox 34 CANT_GOPD_CALLER\"", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1947](https://code.google.com/p/google-caja/issues/detail?id=1947) created by james.keane@wishabi.com on 2014-12-11T21:38:09.000Z:\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 05:51:27"}, {"url": "https://github.com/google/caja/issues/1943", "closed": "2015-04-16 05:51:27", "ttf": 0.0002777777777777778, "title": "JQuery 2.1.1 Version", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1945](https://code.google.com/p/google-caja/issues/detail?id=1945) created by pradeep.niet07 on 2014-12-03T15:47:44.000Z:\n\n&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt;\n\nI see error (in the chrome console)\n&quot;In strict mode code, functions can only be declared at top level or immediately within another function.&quot;\n\nOn the other hand, version\n2.1.0/jquery.min.js and 2.1.1/jquery.js are loading just fine.\n\nPlease see the attachment.\n", "created": "2015-04-16 05:51:22"}, {"url": "https://github.com/google/caja/issues/1939", "closed": "2015-04-16 05:50:53", "ttf": 0.0002777777777777778, "title": "Browser lock up for large css files.", "commits": {}, "user": "kpreid", "labels": ["Component-Sanitizer", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1941](https://code.google.com/p/google-caja/issues/detail?id=1941) created by james.keane@wishabi.com on 2014-10-09T19:50:21.000Z:\n\nCaja causes browser lock up when loading any significantly large css file inside of a guest on Firefox 33.\n\nFirefox 33 is currently in Beta, but due to be released this month.\n\nAttached is a sample file that links to the minified css of the bootstrap project.\n\nRelevant changes in Firefox 33 that may be causing this issue: https://blog.mozilla.org/javascript/2014/07/21/slimmer-and-faster-javascript-strings-in-firefox/\n\nThe lock-up is caused by CRLF to LF normalization at csslexer.js:229\n", "created": "2015-04-16 05:50:33"}, {"url": "https://github.com/google/caja/issues/1934", "closed": "2015-11-22 03:20:04", "ttf": 219.00027777777777, "title": "Deal with Object.observe()", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1936](https://code.google.com/p/google-caja/issues/detail?id=1936) created by kpreid@google.com on 2014-09-08T17:26:56.000Z:\n\nObject.observe is present in Chrome 36. Object.observe can break the WeakMap emulation. WeakMap has also been enabled in the same version, so the emulation will not be used in this case.\n\nHowever, WeakMap.js should, for correctness, do one of: \n1. patching Object.observe to suppress the hidden name,\n2. deleting Object.observe, or\n3. refusing to run.\n\nFor plain SES/Caja sandboxing, even if we had observe but not WeakMap, there would be no effects because Object.observe is not on the SES whitelist.\n\nThere would be a problem if innocent code was using Object.observe on objects given to it by guest code, and passing information about keys back, but that is already a potential problem since the host frame isn't patched to hide the hidden property.\n", "created": "2015-04-16 05:50:20"}, {"url": "https://github.com/google/caja/issues/1933", "closed": "2015-04-16 05:50:20", "ttf": 0.0002777777777777778, "title": "SES initialization fails on the latest FF Nightly.", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1935](https://code.google.com/p/google-caja/issues/detail?id=1935) created by erights on 2014-08-28T23:45:50.000Z:\n\nIronically it seems, because FF Nightly just implemented an ES6 change I suggested.\nSee https://bugs.ecmascript.org/show_bug.cgi?id=3113\nand the attached screenshots\n", "created": "2015-04-16 05:50:18"}, {"url": "https://github.com/google/caja/issues/1930", "closed": "2015-04-16 05:50:15", "ttf": 0.0002777777777777778, "title": "SES calls \"new WeakMap(true)\" which is incorrect ES6 and no longer works on Canary", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1932](https://code.google.com/p/google-caja/issues/detail?id=1932) created by erights@google.com on 2014-08-15T15:09:17.000Z:\n\nIf &quot;new WeakMap&quot; is called with an argument, ES6 demands that the argument be iterable. Chrome Canary now enforces that. However, SES's ejectorsGuardsTrademarks.js calls &quot;new WeakMap(true)&quot; in two places, in accordance with an early and long dead proposal for WeakMaps (also implemented at one time by our shim) that the argument be an optional flag that, if set to true, would be a hint that the weak association should be optimized to use key lifetime rather than map lifetime.\n\nThe attached screenshot shows what currently happens loading the SES initialization test on Chrome Canary.\n", "created": "2015-04-16 05:50:00"}, {"url": "https://github.com/google/caja/issues/1929", "closed": "2015-04-16 05:49:59", "ttf": 0.0002777777777777778, "title": "SES needs to repair when v8 ignores writable flag on arrays", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1931](https://code.google.com/p/google-caja/issues/detail?id=1931) created by metaweta on 2014-08-14T22:22:05.000Z:\n\n&lt;script&gt;\n  var a = [ 0, 1, 2 ];\n  Object.defineProperty( a, 0, {\n    writable : false\n  } );\n  a.shift();\n  console.log(a);\n&lt;/script&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n\nOn Chrome, I see the following in the console:\n\nSES initialization ses-single-frame.js?debug=1:969\n2\n Problem ignored by configuration (Unsafe spec violation): Extending an array can modify read-only array length ses-single-frame.js?debug=1:948\n Repaired: Non-deletable RegExp statics are a global communication channel ses-single-frame.js?debug=1:948\n Repaired: Date.prototype is a global communication channel ses-single-frame.js?debug=1:948\n Repaired: Setting a function's prototype with defineProperty doesn't change its value ses-single-frame.js?debug=1:948\n Not repaired: Extending an array can modify read-only array length ses-single-frame.js?debug=1:948\n Not repaired: [[ThrowTypeError]] has normal function properties ses-single-frame.js?debug=1:948\n Max Severity: Safe spec violation(1). ses-single-frame.js?debug=1:948\n 440 Apparently fine ses-single-frame.js?debug=1:948\n 50 Deleted ses-single-frame.js?debug=1:948\n 3 Frozen harmless ses-single-frame.js?debug=1:948\n 1 Skipped ses-single-frame.js?debug=1:948\n Max Severity: Safe spec violation(1). ses-single-frame.js?debug=1:948\n initSES succeeded. ses-single-frame.js?debug=1:948\n\n[1, 2]\n\nCalling shift() should have thrown.  Seems related to issue 1816, but the resolution to that one I think only tested for frozenness.\n", "created": "2015-04-16 05:49:26"}, {"url": "https://github.com/google/caja/issues/1927", "closed": "2015-04-16 05:49:19", "ttf": 0.0002777777777777778, "title": "DATA TABLE TOOLS NOT WORKING IN CAJA", "commits": {}, "user": "kpreid", "labels": ["Component-CajaJS", "Component-Domado", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1929](https://code.google.com/p/google-caja/issues/detail?id=1929) created by saradambal.munusamy@ssomens.com on 2014-08-06T10:33:11.000Z:\n\nHI,\n\n  I'm using data table tools from SOURCE(https://datatables.net/extensions/tabletools/). I want to work out the export functionality (pdf,csv,copy,excel) in GAS script but in local host its working perfectly. Even button itself not showing in GAS SCRIPT. I tested source code in caja,that one also not showing functionality of pdf,csv,copy buttons.\n\nBELOW Forum i posted, but i cant get soultion\n1.SO: http://stackoverflow.com/questions/24904791/datatables-export-functioncsv-pdf-xls-not-working\n2.Google Drive: https://productforums.google.com/forum/#!category-topic/drive/ask-for-help/drive-in-your-browser/windows/QNYYy8K97ic\n\n  I cant locate the problem ,Why google caja not allowing the flash file.Plz give me a solution.\n\nREFER BELOW IMAGES\n\n1.Local Host- working fine after updating in ADOBE(http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager04.html)\n\n2.Google Caja- not working even using caja swf file(https://caja.appspot.com/#examples/flash.html)\n\nThanks in advance\n", "created": "2015-04-16 05:49:15"}, {"url": "https://github.com/google/caja/issues/1926", "closed": "2015-04-16 05:49:14", "ttf": 0.0002777777777777778, "title": "Host can't see Function.prototype.length of guest functions.", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1928](https://code.google.com/p/google-caja/issues/detail?id=1928) created by max99x on 2014-08-01T18:23:49.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nv5678, Chrome 36, Linux, SES mode\n\n<b>What steps will reproduce the problem?</b>\n1. In the host define an API method f = function(g) {alert(g.length);}\n2. In the client, define function h = function(a, b) {}\n3. In the client, call f(h).\n\n<b>What is the expected output? What do you see instead?</b>\nI expect &quot;2&quot; to be displayed, as that is the number of arguments declared by the client function, and it's what happens if you perform a similar call purely in the host. In reality, &quot;1&quot; gets displayed, since when the client function is passed through Caja, it gets wrapped in a function that declares a single unused parameter and forwards all arguments using the &quot;arguments&quot; object to the wrapped function.\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 05:48:52"}, {"url": "https://github.com/google/caja/issues/1921", "closed": "2015-04-16 05:48:51", "ttf": 0.0002777777777777778, "title": "Protect Caja JSONP responses against \u201cRosetta Flash\u201d vulnerability", "commits": {}, "user": "kpreid", "labels": ["Component-Cajoler", "Component-Playground", "Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1923](https://code.google.com/p/google-caja/issues/detail?id=1923) created by kpreid@google.com on 2014-07-09T23:14:03.000Z:\n\nAny domain (origin) containing the cajoling service or proxy service is vulnerable.\n\nIntroduction to the vulnerability:\nhttp://miki.it/blog/2014/7/8/abusing-jsonp-with-rosetta-flash/\n\nWe should apply these known mitigations:\n- Add a fixed prefix (such as comment) to the JSONP response, before the user-supplied callback.\n- Responses should have Content-Disposition:attachment.\n- Responses should have X-Content-Type-Options: nosniff\n\nThis must be done separately on trunk and es53 branches, because on trunk the ProxyServlet has been refactored to remove the more general cajoling service mechanisms.\n", "created": "2015-04-16 05:48:46"}, {"url": "https://github.com/google/caja/issues/1917", "closed": "2015-04-16 05:48:37", "ttf": 0.0002777777777777778, "title": "Native Proxy test does not work with ES6 Proxies", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1919](https://code.google.com/p/google-caja/issues/detail?id=1919) created by andrebargull on 2014-05-15T12:49:34.000Z:\n\nhttps://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/ses/startSES.js#&nbsp;1144\n\nThe test condition should be changed to `global.Proxy &amp;&amp; global.Proxy.create &amp;&amp; ...`. Adding support for direct proxies would be desirable, but may require more work.\n\nRelated: https://bugzilla.mozilla.org/show_bug.cgi?id=892903\n", "created": "2015-04-16 05:48:32"}, {"url": "https://github.com/google/caja/issues/1916", "closed": "2015-04-16 05:48:32", "ttf": 0.0002777777777777778, "title": "Missing typeof operator in test_TYPED_ARRAYS_THROW_DOMEXCEPTION", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1918](https://code.google.com/p/google-caja/issues/detail?id=1918) created by andrebargull on 2014-05-15T12:47:28.000Z:\n\nhttps://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/ses/repairES5.js#&nbsp;2568\n\nBoth if-statements in test_TYPED_ARRAYS_THROW_DOMEXCEPTION() should probably use the typeof operator instead of using simple string comparison.\n", "created": "2015-04-16 05:48:27"}, {"url": "https://github.com/google/caja/issues/1915", "closed": "2015-04-16 05:48:27", "ttf": 0.0002777777777777778, "title": "inTestFrame() prevents SES initialization in non-browser environments", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1917](https://code.google.com/p/google-caja/issues/detail?id=1917) created by andrebargull on 2014-05-15T12:45:28.000Z:\n\nhttps://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/ses/repairES5.js#&nbsp;684\n\ninTestFrame() prevents SES initialization in non-browser environments. Feature detection of `document` should use the typeof operator. For example like in https://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/ses/repairES5.js#&nbsp;1262 .\n", "created": "2015-04-16 05:48:22"}, {"url": "https://github.com/google/caja/issues/1912", "closed": "2015-04-16 05:48:17", "ttf": 0.0002777777777777778, "title": "Object scanner missing defs for ArrayBuffer.isView (Firefox 29)", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1914](https://code.google.com/p/google-caja/issues/detail?id=1914) created by erights on 2014-05-11T17:11:36.000Z:\n\nSee attached screenshot\n", "created": "2015-04-16 05:48:08"}, {"url": "https://github.com/google/caja/issues/1901", "closed": "2015-04-16 05:47:41", "ttf": 0.0002777777777777778, "title": "document.querySelector throwing when selecting elements with a given attribute", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Component-Domado", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1903](https://code.google.com/p/google-caja/issues/detail?id=1903) created by metaweta on 2014-03-13T22:29:18.000Z:\n\n&lt;div attr=&quot;foo&quot;&gt;hello&lt;/div&gt;\n&lt;script&gt;\n  alert(document.querySelector(&quot;[attr]&quot;).innerText);\n&lt;/script&gt;\n\u200b\n", "created": "2015-04-16 05:47:32"}, {"url": "https://github.com/google/caja/issues/1900", "closed": "2015-04-16 05:47:32", "ttf": 0.0002777777777777778, "title": "ant all fails", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1902](https://code.google.com/p/google-caja/issues/detail?id=1902) created by metaweta on 2014-03-13T17:40:42.000Z:\n\nant clean all\n\nLooks like demos no longer build; either demos should be removed from all or they should be updated to work.\n", "created": "2015-04-16 05:47:27"}, {"url": "https://github.com/google/caja/issues/1899", "closed": "2015-04-16 05:47:27", "ttf": 0.0002777777777777778, "title": "Markdown editor example doesn't update", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1901](https://code.google.com/p/google-caja/issues/detail?id=1901) created by metaweta on 2014-03-13T17:09:27.000Z:\n\nIn the Markdown editor example in the playground, the content gets rendered once but not after that.\n", "created": "2015-04-16 05:47:21"}, {"url": "https://github.com/google/caja/issues/1896", "closed": "2015-04-16 05:46:47", "ttf": 0.0002777777777777778, "title": "pathname property of anchor elements is missing", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Component-Domado", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1898](https://code.google.com/p/google-caja/issues/detail?id=1898) created by metaweta on 2014-03-06T19:59:22.000Z:\n\nvar a = document.createElement('a');\na.href = &quot;http://www.google.com/search?q=blah&quot;;\na.pathname\n\nGet undefined, should be &quot;/search&quot;.\n\nhttp://www.aptana.com/reference/html/api/HTMLAnchorElement.html#HTMLAnchorElement.pathname\n", "created": "2015-04-16 05:46:36"}, {"url": "https://github.com/google/caja/issues/1890", "closed": "2015-04-16 05:46:15", "ttf": 0.0002777777777777778, "title": "Domado TameNodeList allowing undefined values for keys > length.", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1892](https://code.google.com/p/google-caja/issues/detail?id=1892) created by james.keane@wishabi.com on 2014-02-19T01:57:16.000Z:\n\nThis is causing a bug in zepto.js: https://github.com/madrobby/zepto/issues/927\n\nAttached is a screen shot of what I am talking about, if you notice the native browser behaviour is to never have a property/index that points to `undefined` but Domado (ArrayLike?) does.\n\nLooks like it is a simple case of setting undefined vs using `delete`.\n\nIn the screenshot everything except the first two nodes are `undefined`.\n", "created": "2015-04-16 05:46:10"}, {"url": "https://github.com/google/caja/issues/1889", "closed": "2015-04-16 05:46:10", "ttf": 0.0002777777777777778, "title": "acceptableProblems glitch causing SES failure on Chrome 32.0.1700.107", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1891](https://code.google.com/p/google-caja/issues/detail?id=1891) created by kpreid.switchb.org on 2014-02-11T18:47:29.000Z:\n\nIt appears that &quot;doNotRepair: true, permit: true&quot; no longer properly ignores the problem, and that this was broken by the repair-framework refactoring r5659.\n\nThis causes SES to fail e.g. on Chrome stable 32.0.1700.107.\n", "created": "2015-04-16 05:46:05"}, {"url": "https://github.com/google/caja/issues/1880", "closed": "2015-04-16 05:45:46", "ttf": 0.0002777777777777778, "title": "Trailing slash dropped for form action URLs in ES5/3", "commits": {}, "user": "kpreid", "labels": ["Component-Cajoler", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1882](https://code.google.com/p/google-caja/issues/detail?id=1882) created by ekoleda+devrel@googlers.com on 2014-01-22T16:57:29.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nRev 5643, Caja playground, Chrome 31.0.1650.63\n\n<b>What steps will reproduce the problem?</b>\n1. Cajole the following code:\n\n&lt;form action=&quot;http://www.example.com/foobar/&quot;&gt;\n  &lt;input type=&quot;text&quot; name=&quot;foo&quot; /&gt;\n&lt;/form&gt;\n\u200b\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect the form action URL to be preserved. Instead the trailing slash is dropped.\n\n<b>Please provide any additional information below.</b>\n\nSome servers behave differently depending on whether there is a trailing slash or not so Caja should preserve it.\n", "created": "2015-04-16 05:45:44"}, {"numCommits": 1, "closed": "2015-07-20 18:45:09", "ttf": 95.00027777777778, "title": "CORS requests fail in Firefox", "user": "kpreid", "filteredCommits": ["a83ec15cf5b13ffbe482cfb31830b7eb5490ccd9"], "commitsDetails": [{"commitGHEventType": "referenced", "authoredDateTime": "2015-07-20 11:40:29", "commitDateTime": "2015-07-20 11:40:29", "commitHash": "a83ec15cf5b13ffbe482cfb31830b7eb5490ccd9", "nameRev": "a83ec15cf5b13ffbe482cfb31830b7eb5490ccd9 tags/v6003-es53^2~4", "commitMessage": "Fix XHR argument parsing and synchronous event callbacks.\nhttps://codereview.appspot.com/251030043\n\nDerived from James Keane's patches\n<https://github.com/google/caja/pull/1965> -- thanks to him for spotting\nthe problem. Issues in our tests and in onreadystatechange were spotted\nin testing and additionally fixed.\n\nAllegedly fixes <https://github.com/google/caja/issues/1878>.\n\n* Pass the correct number of arguments to native XMLHttpRequest, rather\n  than one too many. Among other things, this caused us to incorrectly\n  default to synchronous XHR.\n* Fixed onreadystatechange firing twice after synchronous XHR on Chrome\n  due to using an unsound browser test rather than a feature test to\n  decide whether to apply a workaround.\n* Fixed lack of argument coercion for some uses of the async parameter.\n  (Should have no observable effects, so this is just on general\n  code structure principles.)\n\nSupporting changes:\n* Fixed test-cajajs-invocation testBuilderApiNetNoFetch accidentally\n  depending on that synchronous XHR.\n* Increased timeout for preliminary-meta from 10 to 30 seconds as\n  I have experienced timeouts on that test only frequently, and it is\n  inherently slow compared to others.\n\nR=erights@gmail.com\n", "spoonStatsSkippedReason": "", "commitParents": ["2c456854bb8584db53bbceaee919d204637e1724"], "commitGitStats": [{"filePath": "tests/com/google/caja/plugin/MainBrowserTest.java", "lines": 2, "deletions": 0, "insertions": 2}, {"filePath": "tests/com/google/caja/plugin/test-cajajs-invocation.js", "lines": 6, "deletions": 3, "insertions": 3}, {"filePath": "src/com/google/caja/plugin/domado.js", "lines": 36, "deletions": 12, "insertions": 24}, {"filePath": "tests/com/google/caja/plugin/test-domado-events-guest.html", "lines": 12, "deletions": 1, "insertions": 11}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"TOT": 5, "MOV": 3, "spoonMethodName": "com.google.caja.plugin.MainBrowserTest.waitForCompletionTimeout()", "INS": 1, "DEL": 1, "UPD": 0}], "spoonFilePath": "MainBrowserTest.java"}], "commitUser": "kpreid"}], "url": "https://github.com/google/caja/issues/1878", "changesInPackagesSPOON": [], "created": "2015-04-16 05:45:35", "gitStatsSummary": {"gitFilesChange": 3, "lines": 54, "deletions": 16, "insertions": 38}, "changesInPackagesGIT": ["tests/com/google/caja/plugin/test-cajajs-invocation.js", "src/com/google/caja/plugin/domado.js", "tests/com/google/caja/plugin/test-domado-events-guest.html"], "spoonStatsSummary": {"TOT": 0, "spoonMethodsChanged": 0, "MOV": 0, "INS": 0, "DEL": 0, "UPD": 0, "spoonFilesChanged": 0}, "commits": {"a83ec15cf5b13ffbe482cfb31830b7eb5490ccd9": {"commitGHEventType": "referenced", "commitUser": "kpreid"}}, "statsSkippedReason": "", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "body": "Original [issue 1880](https://code.google.com/p/google-caja/issues/detail?id=1880) created by ekoleda+devrel@googlers.com on 2014-01-07T15:52:10.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nRev 5643, Firefox 26.0, Ubuntu\n\n<b>What steps will reproduce the problem?</b>\n1. Run the following code in the Caja playground (ES5 mode)\n\n&lt;h1&gt;CORS Test&lt;/h1&gt;\n&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n\n&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n  $(document).ready(function() {\n    $('#result').text('Running...');\n    $.support.cors = true;\n    $.ajax({\n      url: 'https://cors-test.appspot.com/test'\n    }).done(function() {\n      $('#result').text('It worked!');\n    }).fail(function(jqXHR, textStatus, errorThrown) {\n      $('#result').text('It failed: ' + errorThrown);\n    });\n  });\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected: It worked!\nActual: It failed: NS_ERROR_DOM_BAD_URI: Access to restricted URI denied\n\n<b>Please provide any additional information below.</b>\n\nThe same code works fine in Chrome, or in Firefox outside of Caja.\n", "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0, "moreThanOneParent": 0}}, {"url": "https://github.com/google/caja/issues/1877", "closed": "2015-04-16 05:45:34", "ttf": 0.0002777777777777778, "title": "Fails to load jquery-ui.css", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1879](https://code.google.com/p/google-caja/issues/detail?id=1879) created by FHS.CCClassic on 2014-01-05T02:57:55.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nFirefox v26 and others\nWhatever version is used by google sites\n\n<b>What steps will reproduce the problem?</b>\n1.simply create a google sites page that has the following:\n&lt;link rel='stylesheet' href='http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.21/themes/smoothness/jquery-ui.css' /&gt;\nand it will fail to load. \n2.The jquery and jquery ui both load but the UI needs the .css\n3. The examples on the caja playground do not work for this reason when copied into an HTML box  in Google sites.\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected output is a normal edit. Code tested works outside of google sites but the editor for the Google sites HTML box reports:\n\n&quot;failed to load external url jquery-ui.css&quot; error message\n\n<b>Please provide any additional information below.</b>\n\nThe assumption for reporting this &quot;bug&quot; is that google sites uses caja since you see caja when you look at the source for a page. All seems to work until you need the jquery-ui.css\n", "created": "2015-04-16 05:45:32"}, {"url": "https://github.com/google/caja/issues/1874", "closed": "2015-04-16 05:45:12", "ttf": 0.0002777777777777778, "title": "Update title of explicit.html", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1876](https://code.google.com/p/google-caja/issues/detail?id=1876) created by kpreid.switchb.org on 2013-12-19T21:57:40.000Z:\n\nTitle of explicit.html is &quot;Testing SES/5&quot;. &quot;SES/5&quot; sounds like an obsolete name from the ES5/3 days. It should be updated to use the current name &quot;SES&quot; and perhaps to more clearly summarize its purpose.\n", "created": "2015-04-16 05:45:07"}, {"url": "https://github.com/google/caja/issues/1872", "closed": "2015-04-16 05:45:07", "ttf": 0.0002777777777777778, "title": "testResizing/testScrolling broke at r5642", "commits": {}, "user": "kpreid", "labels": ["CSS", "Component-Domado", "Component-Sanitizer", "NotGreen", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1874](https://code.google.com/p/google-caja/issues/detail?id=1874) created by kpreid.switchb.org on 2013-12-10T22:14:12.000Z:\n\nOn Firefox and Chrome I am seeing test-domado-special.js tests testResizing and testScrolling failing with incorrect numbers at and after r5642, which was &quot;remove css-history-sniff defense code (merge from es53 branch)&quot;.\n", "created": "2015-04-16 05:44:58"}, {"url": "https://github.com/google/caja/issues/1871", "closed": "2015-04-16 05:44:58", "ttf": 0.0002777777777777778, "title": "Caja strips out multiple CSS pseudo-selectors, if present", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1873](https://code.google.com/p/google-caja/issues/detail?id=1873) created by dlazin@google.com on 2013-11-21T18:39:06.000Z:\n\nIf a CSS selector uses more than one pseudo-class or pseudo-element, Caja strips out all but the last one.\n\nI believe the following CSS is valid (http://stackoverflow.com/questions/493232/multiple-css-pseudo-classes and http://www.thecssninja.com/css/custom-inputs-using-css suggest that it is):\n\ninput[type=&quot;radio&quot;]:focus {\n background: url(//ssl.gstatic.com/ui/v1/radiobutton/unchecked_focused.png) -3px -3px;\n}\n\ninput[type=&quot;radio&quot;]:checked {\n background: url(//ssl.gstatic.com/ui/v1/radiobutton/checked.png) -3px -3px;\n}\n\ninput[type=&quot;radio&quot;]:focus:checked {\n background: url(//ssl.gstatic.com/ui/v1/radiobutton/checked_focused.png) -3px -3px;\n}\n\nHowever, Caja strips the last selector down to input[type=&quot;radio&quot;]:checked, which makes it override the selector above it.\n\nThanks!\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nI believe 5609m2, in Google Apps Script, running on Chrome/Linux.\n\n<b>What steps will reproduce the problem?</b>\n\ninput[type=&quot;radio&quot;]:focus {\n  background: url(//ssl.gstatic.com/ui/v1/radiobutton/unchecked_focused.png) -3px -3px;\n}\n\ninput[type=&quot;radio&quot;]:checked {\n  background: url(//ssl.gstatic.com/ui/v1/radiobutton/checked.png) -3px -3px;\n}\n\ninput[type=&quot;radio&quot;]:focus:checked {\n  background: url(//ssl.gstatic.com/ui/v1/radiobutton/checked_focused.png) -3px -3px;\n}\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected:\nAs input, plus the .caja-guest-0___ ancestor selector and other minor rewrites (like addition of quotation marks around the URL and `https:`). In particular, the last selector should maintain the two consecutive pseudo-classes.\n\nReality:\n.caja-guest-0___ input[type=&quot;radio&quot;]:focus {\n  background: url(&quot;https://ssl.gstatic.com/ui/v1/radiobutton/unchecked_focused.png&quot;) -3px -3px;\n}\n\n.caja-guest-0___ input[type=&quot;radio&quot;]:checked {\n  background: url(&quot;https://ssl.gstatic.com/ui/v1/radiobutton/checked.png&quot;) -3px -3px;\n}\n\n.caja-guest-0___ input[type=&quot;radio&quot;]:checked {\n  background: url(&quot;https://ssl.gstatic.com/ui/v1/radiobutton/checked_focused.png&quot;) -3px -3px;\n}\n", "created": "2015-04-16 05:44:51"}, {"url": "https://github.com/google/caja/issues/1866", "closed": "2015-04-16 05:44:41", "ttf": 0.0002777777777777778, "title": "Investigate minifier bug / upgrade JS processing libraries", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1868](https://code.google.com/p/google-caja/issues/detail?id=1868) created by kpreid.switchb.org on 2013-10-29T23:46:31.000Z:\n\nI tried upgrading the versions of acorn and escodegen in our third_party. This resulted in a bug where the minified version _only_ of mitigateSrcGotchas would mangle regexp literals by doubling characters: /ab/ becoming /aabb/.\n\nThis indicates a serious bug in our minifier, since it should not be changing the semantics of the code. We should either fix it or replace it with Closure Compiler (see issue 1866).\n\nWe should also upgrade acorn/estraverse/escodegen just to stay current on upstream fixes and API changes.\n", "created": "2015-04-16 05:44:13"}, {"url": "https://github.com/google/caja/issues/1865", "closed": "2015-04-16 05:44:13", "ttf": 0.0002777777777777778, "title": "Handling of unicode escapes in identifiers can lead to security issues", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1867](https://code.google.com/p/google-caja/issues/detail?id=1867) created by dobkin@google.com on 2013-10-23T20:42:09.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nRev 5570 built on 2013-08-21 14:41:33. Tested on Google Chrome, Version 30.0.1599.101, under Linux.\n\nIn ES5 mode, Caja removes unicode escapes in identifiers when producing JavaScript. This can result in a keyword being treated as an identifier.\n\n<b>What steps will reproduce the problem?</b>\n1. Go to http://caja.appspot.com, set mode to 'ES5 Mode (Experimental)' and enter the following code\n\n  &lt;script&gt;\n    de\\u006cete /&quot;x/ })), alert(1), (function(){debugger})(), ((function() { //&quot; ;  \n    f00();\n  &lt;/script&gt;\n1. When executing, code on the second line will be executed directly without going through rewriting. This happens because Caja treats delete as a variable reference that is divided by a string literal. However the browser will treat is a delete statement statement that is passed as a regex as an argument.\n\nI wasn't able to exploit this due to checks in verifyStrictExpression().\n", "created": "2015-04-16 05:43:40"}, {"url": "https://github.com/google/caja/issues/1858", "closed": "2015-04-16 05:43:10", "ttf": 0.0002777777777777778, "title": "Converting a string with unpaired surrogates to UTF-8 results in an invalid string ", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1860](https://code.google.com/p/google-caja/issues/detail?id=1860) created by metaweta on 2013-09-10T17:26:07.000Z:\n\nhttps://code.google.com/p/v8/issues/detail?id=2875\n\nThis may have implications around eval.\n", "created": "2015-04-16 05:43:01"}, {"url": "https://github.com/google/caja/issues/1850", "closed": "2015-04-16 05:42:33", "ttf": 0.0002777777777777778, "title": "allow :last-child", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1852](https://code.google.com/p/google-caja/issues/detail?id=1852) created by joe.marino@fl-dc.org on 2013-09-04T00:10:56.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nno idea\n\nchrome latest\n\n<b>What steps will reproduce the problem?</b>\n1. use :last-child in code\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\nfor example using to round edges of last item in a dropdown list to match the border-radius of overall menu\n\nwhat I see is the normal non-radiused border\n\n<b>Please provide any additional information below.</b>\n\nfound this which directed me here: http://stackoverflow.com/questions/16565328/last-child-css-selector-not-working-in-gas-with-htmlservice\n", "created": "2015-04-16 05:42:24"}, {"url": "https://github.com/google/caja/issues/1848", "closed": "2015-04-16 05:42:20", "ttf": 0.0002777777777777778, "title": "form input doesn't show correctly in IE 10", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Component-Domado", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1850](https://code.google.com/p/google-caja/issues/detail?id=1850) created by hidden.puddle on 2013-09-03T03:37:43.000Z:\n\nIn IE 10, the &quot;Add&quot; button doesn't show as a &quot;submit&quot; button but as text input.\nIn my own app, I have radio buttons and those also appear as text inputs.\nIt seems to me that HTMLService doesn't fully work on IE10.\n\nSource code at:\nhttps://github.com/google/google-apps-script-samples/tree/master/simple_tasks\n", "created": "2015-04-16 05:41:47"}, {"url": "https://github.com/google/caja/issues/1847", "closed": "2015-04-16 05:41:47", "ttf": 0.0002777777777777778, "title": "compileModule does not coerce to string", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1849](https://code.google.com/p/google-caja/issues/detail?id=1849) created by kpreid.switchb.org on 2013-08-27T21:16:07.000Z:\n\ncajaVM.compileModule does not coerce its argument to a string before using it in multiple places, notably in a call to .replace() inside limitSrcCharset. This could be used to confuse limitSrcCharset's answer.\n\nThe problem appears to have been introduced in r5468.\n", "created": "2015-04-16 05:41:27"}, {"url": "https://github.com/google/caja/issues/1846", "closed": "2015-04-16 05:41:27", "ttf": 0.0002777777777777778, "title": "Scanner can enter an infinite loop due to infinite fresh objects(Chrome 30)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1848](https://code.google.com/p/google-caja/issues/detail?id=1848) created by kpreid.switchb.org on 2013-08-23T18:43:13.000Z:\n\nFelix writes:\n\nr5574 es5 scanner infinite loop on Chrome 30 (beta)\nIt complains:\n\nObject&lt;CONSTRUCT&gt;(dummyFunction).get arguments&lt;THIS&gt;() thrown .get\nstack&lt;PLAIN&gt;() thrown .get stack&lt;PLAIN&gt;() thrown .get stack&lt;PLAIN&gt;()\nthrown .get stack&lt;PLAIN&gt;() thrown .get stack&lt;PLAIN&gt;() thrown .get\nstack&lt;PLAIN&gt;() thrown .get stack&lt;PLAIN&gt;() thrown\n  TypeError: Cannot read property '0' of undefined\nProblem: Properties are writable: prototype\n| Path:     Object&lt;CONSTRUCT&gt;(dummyFunction).get arguments&lt;THIS&gt;()\nthrown .get stack&lt;PLAIN&gt;() thrown .get stack&lt;PLAIN&gt;() thrown .get\nstack&lt;PLAIN&gt;() thrown .get stack&lt;PLAIN&gt;() thrown .get stack&lt;PLAIN&gt;()\nthrown .get stack&lt;PLAIN&gt;() thrown .get stack\n| Program:  Object.getOwnPropertyDescriptor(thrown(Object.getOwnPropertyDescriptor(thrown(Object.getOwnPropertyDescriptor(thrown(Object.getOwnPropertyDescriptor(thrown(Object.getOwnPropertyDescriptor(thrown(Object.getOwnPropertyDescriptor(thrown(Object.getOwnPropertyDescriptor(thrown(Object.getOwnPropertyDescriptor(window.Object.call(...),\n&quot;arguments&quot;).get, ...), &quot;stack&quot;).get, ...), &quot;stack&quot;).get, ...),\n&quot;stack&quot;).get, ...), &quot;stack&quot;).get, ...), &quot;stack&quot;).get, ...),\n&quot;stack&quot;).get, ...), &quot;stack&quot;).get\n| toString: function () { [native code] }\n\nand keeps getting deeper without bound\n", "created": "2015-04-16 05:41:18"}, {"url": "https://github.com/google/caja/issues/1840", "closed": "2015-04-16 05:41:01", "ttf": 0.0002777777777777778, "title": "Safari 5 es5/3 using platform accessors in array-likes badly", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Component-Domado", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1842](https://code.google.com/p/google-caja/issues/detail?id=1842) created by erights on 2013-08-17T19:08:34.000Z:\n\nThe domadoInertConstructor.prototype is apparently inheriting from an array-like. On Safari 5, this array-like is implemented using platform getters. However, this assignment to O[P] in the attached screenshot is attempting to initialize domadoInertConstructor.prototype.length, which fails because of http://wiki.ecmascript.org/doku.php?id=strawman:fixing_override_mistake\n", "created": "2015-04-16 05:40:48"}, {"url": "https://github.com/google/caja/issues/1838", "closed": "2015-04-16 05:40:46", "ttf": 0.0002777777777777778, "title": "ES5/3 on Chrome: Localized string methods fail", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1840](https://code.google.com/p/google-caja/issues/detail?id=1840) created by kpreid.switchb.org on 2013-08-15T19:14:55.000Z:\n\nES5/3 mode only\nChrome 28.0.1500.95 stable, 29.0.1547.41 beta\n\nThe following methods always fail with &quot;RangeError: Invalid array length&quot;, presumably due to a lack of layer separation in their implementations which should be reported as a bug:\nString.prototype.localeCompare\nNumber.prototype.toLocaleString\nDate.prototype.toLocaleString\nDate.prototype.toLocaleDateString\nDate.prototype.toLocaleTimeString\n", "created": "2015-04-16 05:40:43"}, {"url": "https://github.com/google/caja/issues/1837", "closed": "2015-04-16 05:40:43", "ttf": 0.0002777777777777778, "title": "Safari 5 causing unexpected SES repair symptoms", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1839](https://code.google.com/p/google-caja/issues/detail?id=1839) created by erights on 2013-08-15T16:38:10.000Z:\n\nSee attached screenshots. Taken on a friend's computer, since I don't have one running Safari 5.\n\nIt may very well be that SES should be judged unsafe on Safari 5. But these problems, whatever they are, should at least be expected problems and so classified correctly.\n\nAlso, as the htmlservice screenshot shows, after falling back to es53 mode, we then encounter another problem, \n\nTypeError: setting a property that has only a getter.\n\nwhich it reports as coming from es53-taming-frame.opt.js:193, which is unfortunately minimized. Is there a way to run this test on unminimized sources?\n", "created": "2015-04-16 05:40:34"}, {"url": "https://github.com/google/caja/issues/1835", "closed": "2015-04-16 05:40:27", "ttf": 0.0002777777777777778, "title": "Canvas does not accept rgb() colors", "commits": {}, "user": "kpreid", "labels": ["CSS", "Component-Domado", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1837](https://code.google.com/p/google-caja/issues/detail?id=1837) created by kpreid.switchb.org on 2013-08-09T18:55:22.000Z:\n\n&lt;div style=&quot;background-color: rgb(10, 20, 255);&quot;&gt;foo&lt;/div&gt;\n&lt;canvas id=&quot;my_canvas&quot; width=&quot;200&quot; height=&quot;20&quot;&gt;&lt;/canvas&gt;\n&lt;script&gt;\nvar ctx = document.getElementById('my_canvas').getContext('2d');\nctx.fillStyle = '#F00';\nctx.fillStyle = 'rgb(10, 20, 255)';\nctx.fillRect(0, 0, 20, 20);\n&lt;/script&gt;\n\nExpected: Two blue boxes.\nActual: One blue box and one red box, indicating the string 'rgb(10, 20, 255)' was rejected as a valid color value for fillStyle.\n", "created": "2015-04-16 05:40:18"}, {"url": "https://github.com/google/caja/issues/1833", "closed": "2015-04-16 05:40:11", "ttf": 0.0002777777777777778, "title": "Firefox 22/23 OSX does not load jQueryUI tabs", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1835](https://code.google.com/p/google-caja/issues/detail?id=1835) created by sbljacobs on 2013-08-08T11:31:09.000Z:\n\nThis can be successfully reproduced in the playerground. All tab content is loaded inside the one tab, instead of each &lt;div&gt; block being shown or hidden as needed.\n\nOutside of caja, the tab functionality works correctly.\n\nExample code (almost straight from jQueryUI.com/tabs):\n\n&lt;span&gt;&lt;/span&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;http://code.jquery.com/ui/1.10.3/themes/smoothness/jquery-ui.css&quot; /&gt;\n&lt;script src=&quot;http://code.jquery.com/jquery-1.9.1.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;http://code.jquery.com/ui/1.10.3/jquery-ui.js&quot;&gt;&lt;/script&gt;\n&lt;link rel=&quot;stylesheet&quot; href=&quot;/resources/demos/style.css&quot; /&gt;\n&lt;script&gt;\n$(function() {\n$( &quot;#tabs&quot; ).tabs();\n});\n&lt;/script&gt;\n&lt;div id=&quot;tabs&quot;&gt;\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=&quot;#tabs-1&quot;&gt;Nunc tincidunt&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;#tabs-2&quot;&gt;Proin dolor&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=&quot;#tabs-3&quot;&gt;Aenean lacinia&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;div id=&quot;tabs-1&quot;&gt;\n&lt;p&gt;Proin elit arcu, rutrum commodo, vehicula tempus, commodo a, risus. Curabitur nec arcu. Donec sollicitudin mi sit amet mauris. Nam elementum quam ullamcorper ante. Etiam aliquet massa et lorem. Mauris dapibus lacus auctor risus. Aenean tempor ullamcorper leo. Vivamus sed magna quis ligula eleifend adipiscing. Duis orci. Aliquam sodales tortor vitae ipsum. Aliquam nulla. Duis aliquam molestie erat. Ut et mauris vel pede varius sollicitudin. Sed ut dolor nec orci tincidunt interdum. Phasellus ipsum. Nunc tristique tempus lectus.&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=&quot;tabs-2&quot;&gt;\n&lt;p&gt;Morbi tincidunt, dui sit amet facilisis feugiat, odio metus gravida ante, ut pharetra massa metus id nunc. Duis scelerisque molestie turpis. Sed fringilla, massa eget luctus malesuada, metus eros molestie lectus, ut tempus eros massa ut dolor. Aenean aliquet fringilla sem. Suspendisse sed ligula in ligula suscipit aliquam. Praesent in eros vestibulum mi adipiscing adipiscing. Morbi facilisis. Curabitur ornare consequat nunc. Aenean vel metus. Ut posuere viverra nulla. Aliquam erat volutpat. Pellentesque convallis. Maecenas feugiat, tellus pellentesque pretium posuere, felis lorem euismod felis, eu ornare leo nisi vel felis. Mauris consectetur tortor et purus.&lt;/p&gt;\n&lt;/div&gt;\n&lt;div id=&quot;tabs-3&quot;&gt;\n&lt;p&gt;Mauris eleifend est et turpis. Duis id erat. Suspendisse potenti. Aliquam vulputate, pede vel vehicula accumsan, mi neque rutrum erat, eu congue orci lorem eget lorem. Vestibulum non ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce sodales. Quisque eu urna vel enim commodo pellentesque. Praesent eu risus hendrerit ligula tempus pretium. Curabitur lorem enim, pretium nec, feugiat nec, luctus a, lacus.&lt;/p&gt;\n&lt;p&gt;Duis cursus. Maecenas ligula eros, blandit nec, pharetra at, semper at, magna. Nullam ac lacus. Nulla facilisi. Praesent viverra justo vitae neque. Praesent blandit adipiscing velit. Suspendisse potenti. Donec mattis, pede vel pharetra blandit, magna ligula faucibus eros, id euismod lacus dolor eget odio. Nam scelerisque. Donec non libero sed nulla mattis commodo. Ut sagittis. Donec nisi lectus, feugiat porttitor, tempor ac, tempor vitae, pede. Aenean vehicula velit eu tellus interdum rutrum. Maecenas commodo. Pellentesque nec elit. Fusce in lacus. Vivamus a libero vitae lectus hendrerit hendrerit.&lt;/p&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n", "created": "2015-04-16 05:40:02"}, {"url": "https://github.com/google/caja/issues/1830", "closed": "2015-04-16 05:39:51", "ttf": 0.0002777777777777778, "title": "Need to stop calling WeakMap as a function", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1832](https://code.google.com/p/google-caja/issues/detail?id=1832) created by kpreid.switchb.org on 2013-08-06T21:28:33.000Z:\n\nES6 is expected to require 'new WeakMap()' rather than 'WeakMap()'. This restriction is already in Chrome Canary.\n\nhttps://code.google.com/p/v8/issues/detail?id=2819\nhttps://github.com/rwldrn/tc39-notes/blob/master/es6/2013-07/july-25.md#anti-pattern-to-call-a-constructor-without-new\n\nWe should:\n1. Remove all occurrences of 'WeakMap()' from our own code. To support this, I propose making it a warning if our emulated WeakMap is so invoked.\n2. Stop exposing a WeakMap emulation which permits this, so that autoswitching doesn't break things. I propose making it an error some time after making it a warning.\n", "created": "2015-04-16 05:39:29"}, {"url": "https://github.com/google/caja/issues/1829", "closed": "2015-04-16 05:39:29", "ttf": 0.0002777777777777778, "title": "SES breaks WeakMap on Chrome 29.0.1547.41 beta w/ Experimental JavaScript", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1831](https://code.google.com/p/google-caja/issues/detail?id=1831) created by kpreid.switchb.org on 2013-08-05T23:45:49.000Z:\n\nTest case:\n\n&lt;body&gt;\n&lt;script&gt;\nvar ses = {maxAcceptableSeverityName: 'NOT_OCAP_SAFE'};\n&lt;/script&gt;\n&lt;script src='src/com/google/caja/ses/logger.js'&gt;&lt;/script&gt;\n&lt;script src='src/com/google/caja/ses/repairES5.js'&gt;&lt;/script&gt;\n&lt;script src='src/com/google/caja/ses/whitelist.js'&gt;&lt;/script&gt;\n&lt;script src='src/com/google/caja/ses/startSES.js'&gt;&lt;/script&gt;\n&lt;script src='src/com/google/caja/ses/hookupSES.js'&gt;&lt;/script&gt;\n&lt;script&gt;\nvar w = new WeakMap();\nvar o = {};\nw.set(o, true);\ndocument.write((ses.ok &amp;&amp; ses.ok()) + ' ' + w.get(o));\n&lt;/script&gt;\n\nThe expected output is &quot;true true&quot;; actual output is &quot;true undefined&quot;.\n\nIn Caja, this misbehavior causes Caja to hang and consume memory inside of def() invoked by the Domado constructor, because it fails to break cycles. It also causes the promise system to misbehave, (causing caja.js to fail even if Domado is not loaded) and a spamming async loop in explicit.html.\n\nVersions:\nDoes not fail in Chrome 28.0.1500.95 stable.\nFails in Chrome 29.0.1547.41 beta.\nFails in Chrome 30.0.1587.2 canary.\n\nIf hookupSES does not run, then WeakMap is fine (so repairES5 is not the problem), and we are not loading WeakMap.js in this test case.\n", "created": "2015-04-16 05:39:13"}, {"url": "https://github.com/google/caja/issues/1828", "closed": "2015-04-16 05:39:13", "ttf": 0.0002777777777777778, "title": "repairES5 inTestFrame() assumes document.body exists", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1830](https://code.google.com/p/google-caja/issues/detail?id=1830) created by kpreid.switchb.org on 2013-08-05T23:29:49.000Z:\n\ninTestFrame uses document.body, which does not exist if SES is loaded from the &lt;head&gt;, causing an unexpected error.\n\n(The test in question is already protected against having no DOM at all.)\n", "created": "2015-04-16 05:39:06"}, {"url": "https://github.com/google/caja/issues/1827", "closed": "2015-04-16 05:39:06", "ttf": 0.0002777777777777778, "title": "False alleged safety when mitigation unavailable", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1829](https://code.google.com/p/google-caja/issues/detail?id=1829) created by erights on 2013-08-04T18:29:29.000Z:\n\nThe INCREMENT_IGNORES_FROZEN test judges failure as a SAFE_SPEC_VIOLATION because, when mitigation is available, startSES safely repairs this using mitigation. However, when mitigation is unavailable, this leads to a false safety report. See attached screenshot of visiting http://google-caja.googlecode.com/svn/trunk/src/com/google/caja/ses/explicit.html in Chrome 30, which suffers from the underlying bug https://code.google.com/p/v8/issues/detail?id=2779 . explicit.html runs without mitigation.\n\nSince Caja always runs with mitigation available, as a Caja bug I'm classifying this as low priority. However, it is clearly high priority for standalone use of SES.\n", "created": "2015-04-16 05:38:59"}, {"url": "https://github.com/google/caja/issues/1825", "closed": "2015-04-16 05:38:52", "ttf": 0.0002777777777777778, "title": "Google Visualization ComboChart not rendered properly", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1827](https://code.google.com/p/google-caja/issues/detail?id=1827) created by ihab.awad on 2013-08-02T16:40:37.000Z:\n\nComboChart demo shows the superimposed line chart in native and ES5/3 modes, but not in ES5 mode.\n", "created": "2015-04-16 05:38:50"}, {"url": "https://github.com/google/caja/issues/1822", "closed": "2015-04-16 05:38:41", "ttf": 0.0002777777777777778, "title": "es53-test-container-overflow fails on linux firefox @r5504", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1824](https://code.google.com/p/google-caja/issues/detail?id=1824) created by felix8a on 2013-07-25T00:04:33.000Z:\n\ndoesn't fail on mac firefox.\n\nsymptom: elementAtCenter is null\nthe test does effectively\n  el = document.getElementById('inner-caja-guest-0___');\n  r = el.getBoundingClientRect();\n  x = (r.left + r.right) / 2;\n  y = (r.top + r.bottom) / 2;\n  document.elementFromPoint(x, y);\n\non mac, r.top == -2, r.bottom == 3, so y is 0.5 and it works.\non linux, r.top == -5, r.bottom == 0, so y is -2.5 and fails.\n", "created": "2015-04-16 05:38:32"}, {"url": "https://github.com/google/caja/issues/1820", "closed": "2015-04-16 05:38:17", "ttf": 0.0002777777777777778, "title": "Caja HTML-CSS Sanitizer is not compatible with Closure Compiler's ADVANCED_OPTIMIZATIONS", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1822](https://code.google.com/p/google-caja/issues/detail?id=1822) created by mknichel@google.com on 2013-07-23T20:40:40.000Z:\n\nRevision: head\nBrowser/OS: all\n\n<b>What steps will reproduce the problem?</b>\n1. Set up HTML that contains an element with an inline style with a margin:\n&lt;div style=&quot;margin: 10px&quot;&gt;&lt;/div&gt;\n1. Run the HTML CSS Sanitizer on this code\n\nExpected output:\n&lt;div style=&quot;margin: 10px&quot;&gt;&lt;/div&gt;\n\nActual output:\n&lt;div style=&quot;margin: &quot;&gt;&lt;/div&gt;\n", "created": "2015-04-16 05:37:59"}, {"url": "https://github.com/google/caja/issues/1819", "closed": "2015-04-16 05:37:59", "ttf": 0.0002777777777777778, "title": "Support string arguments to setTimeout in ES5 mode", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1821](https://code.google.com/p/google-caja/issues/detail?id=1821) created by kpreid.switchb.org on 2013-07-23T17:12:59.000Z:\n\nWe've given up on Thou Shalt Write Capability-Styled Web Content, and ES5 supports eval, so there is no longer any reason for setTimeout('if (foo) bar()', 0) to be unsupported.\n", "created": "2015-04-16 05:37:52"}, {"url": "https://github.com/google/caja/issues/1817", "closed": "2015-04-16 05:37:52", "ttf": 0.0002777777777777778, "title": "Small JS snippet crashes v8", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1819](https://code.google.com/p/google-caja/issues/detail?id=1819) created by metaweta on 2013-07-19T06:41:00.000Z:\n\nhttps://code.google.com/p/v8/issues/detail?id=2594\n", "created": "2015-04-16 05:37:47"}, {"url": "https://github.com/google/caja/issues/1816", "closed": "2015-04-16 05:37:47", "ttf": 0.0002777777777777778, "title": "++, --, += ignore frozenness under v8", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1818](https://code.google.com/p/google-caja/issues/detail?id=1818) created by metaweta on 2013-07-19T05:56:49.000Z:\n\nhttps://code.google.com/p/v8/issues/detail?id=2779\n", "created": "2015-04-16 05:37:10"}, {"url": "https://github.com/google/caja/issues/1815", "closed": "2015-04-16 05:37:10", "ttf": 0.0002777777777777778, "title": "SES should not judge unsafe a platform with a non-whitelisted frozen pure-data property", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1817](https://code.google.com/p/google-caja/issues/detail?id=1817) created by erights@google.com on 2013-07-17T22:19:20.000Z:\n\nSee https://bugzilla.mozilla.org/show_bug.cgi?id=895152\nThe latest FF Nightly adds the property Number.EPSILON as a non-configurable, non-writable, data property whose value is pure data. In this case, a primitive number which is clearly transitively immutable and harmless. Even though this is not on SES's whitelist, because it satisfies these conditions, SES should judge it to be harmless, and accept the platform even though it cannot remove the non-whitelisted property.\n\nNevertheless, it is a FF bug (or possibly an ES6 spec bug?) that the property was added as non-configurable.\n", "created": "2015-04-16 05:36:59"}, {"url": "https://github.com/google/caja/issues/1814", "closed": "2015-04-16 05:36:59", "ttf": 0.0002777777777777778, "title": "Remaining freeze violations among v8 array methods", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1816](https://code.google.com/p/google-caja/issues/detail?id=1816) created by erights on 2013-07-15T01:56:14.000Z:\n\nhttps://code.google.com/p/v8/issues/detail?id=2615\nLists the following methods as potentially problematic, though by different criteria:\n- Array.prototype.unshift\n- Array.prototype.splice\n- Array.prototype.shift\n- Array.prototype.pop\n- Array.prototype.sort\n\nWe need to test each of these to determine whether they violate freeze safety, and if so, repair them. The good new is that, unlike push, probably none of these are as performance critical for the code we care about, and so we can afford to replace them.\n", "created": "2015-04-16 05:36:35"}, {"url": "https://github.com/google/caja/issues/1811", "closed": "2015-04-16 05:36:08", "ttf": 0.0002777777777777778, "title": "plugin_dispatchEvent broken in Playground r5478", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1813](https://code.google.com/p/google-caja/issues/detail?id=1813) created by ihab.awad on 2013-07-12T23:05:34.000Z:\n\nIn r5478, in the Playground, the following markup:\n\n\u200b&lt;div onclick=&quot;alert(1);&quot;&gt;foo&lt;/div&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n\nwhen clicked, throws in the console:\n\nUncaught TypeError: Object #&lt;Object&gt; has no method 'plugin_dispatchEvent___' \n\nSo the &quot;___&quot; object no longer has that method on it.\n", "created": "2015-04-16 05:36:06"}, {"url": "https://github.com/google/caja/issues/1807", "closed": "2015-04-16 05:35:54", "ttf": 0.0002777777777777778, "title": "HTMLInputElement has no click() method", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1809](https://code.google.com/p/google-caja/issues/detail?id=1809) created by ihab.awad on 2013-07-12T05:29:49.000Z:\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\n", "created": "2015-04-16 05:35:52"}, {"url": "https://github.com/google/caja/issues/1806", "closed": "2015-04-16 05:35:51", "ttf": 0.0002777777777777778, "title": "NO_KNOWN_EXPLOIT_SPEC_VIOLATION should be redesigned", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1808](https://code.google.com/p/google-caja/issues/detail?id=1808) created by kpreid.switchb.org on 2013-07-11T23:16:16.000Z:\n\nThe legacy-compatibility implementation of NKESV in caja.js specifies\n\n```\n     'PUSH_IGNORES_FROZEN': { 'doNotRepair': true },\n```\n\nThis means that with the default maxAcceptableSeverity, SAFE_SPEC_VIOLATION, we will repair PUSH_IGNORES_FROZEN, but with the allegedly more-lenient NKESV, we will consider this a fatal problem. This is at least unintuitive, if not wrong.\n\nBefore r5442 which replaced NKESV with acceptableProblems in SES, we had no repair because had no way to express not executing the repair if the only problem was PUSH_IGNORES_SEALED (as we wished to do for performance), so we left the repair out entirely.\n\nProposed actions:\n1. Remove the above from PUSH_IGNORES_FROZEN, so that we are willing to repair a fatally flawed push.\n2. Change the caja.js API so that the acceptableProblems, or (to avoid footguns) predefined bundles of them, are directly specified by the caller, so that they can independently say &quot;don't repair PUSH_IGNORES_SEALED and proceed&quot; and &quot;don't repair PUSH_IGNORED_FROZEN and stop&quot; (if that behavior is wanted). We would still need to give a meaning to NKESV for backwards compatibility.\n", "created": "2015-04-16 05:35:34"}, {"url": "https://github.com/google/caja/issues/1803", "closed": "2015-04-16 05:35:20", "ttf": 0.0002777777777777778, "title": "firefox 23+ failure initKeyboardEvent key : \"q\" != \"\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1805](https://code.google.com/p/google-caja/issues/detail?id=1805) created by felix8a on 2013-07-11T15:45:31.000Z:\n\nfails in firefox 23 (beta) and 24 (aurora)\nfails in both es5 and es53\n\nin es53-test-domado-events-guest.html\nin testInitEvent\nuncaught exception: [JsUnitException initKeyboardEvent key : &quot;q&quot; != &quot;&quot; : Expected &lt;&quot;q&quot;&gt; (String) but was &lt;&quot;&quot;&gt; (String)\n", "created": "2015-04-16 05:35:14"}, {"url": "https://github.com/google/caja/issues/1802", "closed": "2015-04-16 05:35:13", "ttf": 0.0002777777777777778, "title": "lexCss/sanitizeCssSelectors failure to fail rightly", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1804](https://code.google.com/p/google-caja/issues/detail?id=1804) created by kpreid.switchb.org on 2013-07-10T22:54:57.000Z:\n\nlexCss/sanitizeCssSelectors will not handle the following cases correctly:\n  &quot;a,&quot; or &quot;,a&quot; or &quot;,&quot; -- drops comma silently\n  &quot;bad[&quot; -- throws an internal error rather than invoking opt_onUntranslatableSelector\n", "created": "2015-04-16 05:35:05"}, {"url": "https://github.com/google/caja/issues/1800", "closed": "2015-04-16 05:34:55", "ttf": 0.0002777777777777778, "title": "<optgroup> 'disabled' property does not reflect DOM attributes", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1802](https://code.google.com/p/google-caja/issues/detail?id=1802) created by ihab.awad on 2013-07-10T05:25:20.000Z:\n\nThe following markup:\n\n&lt;optgroup disabled=&quot;disabled&quot;&gt;\n  &lt;option id=&quot;x&quot; value=&quot;&quot;&gt;Nothing&lt;/option&gt;\n&lt;/optgroup&gt;\n&lt;script&gt;\n  var x = document.getElementById('x');\n  alert(x.parentNode.disabled);\n&lt;/script&gt;\n\u200b\nalerts &lt;true&gt; in native mode (on Chrome), and &lt;undefined&gt; on Caja.\n", "created": "2015-04-16 05:34:51"}, {"url": "https://github.com/google/caja/issues/1799", "closed": "2015-04-16 05:34:51", "ttf": 0.0002777777777777778, "title": "Nat must include at most (2**53)-1", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1801](https://code.google.com/p/google-caja/issues/detail?id=1801) created by erights@google.com on 2013-07-10T01:54:27.000Z:\n\nCurrently in includes 2**53 as well. This leaves intuitive uses of Nat vulnerable. See https://mail.mozilla.org/pipermail/es-discuss/2013-July/031670.html\n", "created": "2015-04-16 05:34:42"}, {"url": "https://github.com/google/caja/issues/1796", "closed": "2015-04-16 05:34:26", "ttf": 0.0002777777777777778, "title": "document.createAttribute() not supported", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1798](https://code.google.com/p/google-caja/issues/detail?id=1798) created by ihab.awad on 2013-07-09T22:06:45.000Z:\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/document.createAttribute\n", "created": "2015-04-16 05:34:22"}, {"url": "https://github.com/google/caja/issues/1795", "closed": "2015-04-16 05:34:22", "ttf": 0.0002777777777777778, "title": "Property 'autofocus' of <input> is not writable", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1797](https://code.google.com/p/google-caja/issues/detail?id=1797) created by ihab.awad on 2013-07-09T21:44:31.000Z:\n\nSee https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\n", "created": "2015-04-16 05:34:11"}, {"url": "https://github.com/google/caja/issues/1794", "closed": "2015-04-16 05:34:10", "ttf": 0.0002777777777777778, "title": "Domado <input> does not have a click() method", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1796](https://code.google.com/p/google-caja/issues/detail?id=1796) created by ihab.awad on 2013-07-09T16:20:41.000Z:\n\nDomado &lt;input&gt; elements do not have a click() method. See:\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\n", "created": "2015-04-16 05:34:01"}, {"url": "https://github.com/google/caja/issues/1792", "closed": "2015-04-16 05:33:50", "ttf": 0.0002777777777777778, "title": "jQuery expects 'encoding' to shadow 'enctype' when used as a direct accessor", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1794](https://code.google.com/p/google-caja/issues/detail?id=1794) created by ihab.awad on 2013-07-09T06:20:55.000Z:\n\nGiven element 'x' which is a &lt;form&gt;, and:\n\n  x.setAttribute('enctype', 'multipart/form-data');\n\njQuery seems unsurprised if:\n\n  x.getAttribute('encoding') === null\n\nhowever, jQuery expects that:\n\n  x['encoding'] === 'multipart/form-data'\n\nThis behavior is actually the case on native Chrome. See also:\n\nhttp://msdn.microsoft.com/en-us/library/ie/ms533744(v=vs.85).aspx\nhttps://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement.enctype\n", "created": "2015-04-16 05:33:46"}, {"url": "https://github.com/google/caja/issues/1790", "closed": "2015-04-16 05:33:39", "ttf": 0.0002777777777777778, "title": "TameWindow does not support full suite of event names", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1792](https://code.google.com/p/google-caja/issues/detail?id=1792) created by ihab.awad on 2013-07-07T23:43:43.000Z:\n\nCalling addEventListener on a TameWindow with an event name of &quot;unload&quot; does the following:\n- Enters TameWindow.addEventListener(). This only supports &quot;load&quot; and &quot;DOMContentLoaded&quot; so it delegates to tameDocument.addEventListener().\n- Implemented by TameHTMLDocument.addEventListener(). This only supports &quot;DOMContentLoaded&quot; so it delegates to privates.tameContainerNode.addEventListener().\n- Implemented by generic TameBackedNode which has no addEventListener() and is basically a hollow stub object.\n\nWe should implement &quot;unload&quot; and other event names. If we cannot do the correct behavior, we should throw a non-incidental error message (to the effect that the tame window does not support event E) rather than allow the exception to bubble up from the underlying implementation.\n\nI would suspect that this might fit into the work being done to support embedded iframes, as per Issue 1199.\n", "created": "2015-04-16 05:33:25"}, {"url": "https://github.com/google/caja/issues/1788", "closed": "2015-04-16 05:33:19", "ttf": 0.0002777777777777778, "title": "Domado does not support document.getElementsByName()", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1790](https://code.google.com/p/google-caja/issues/detail?id=1790) created by ihab.awad on 2013-07-03T04:40:47.000Z:\n\nSee:\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/document.getElementsByName\n", "created": "2015-04-16 05:33:12"}, {"url": "https://github.com/google/caja/issues/1787", "closed": "2015-04-16 05:33:12", "ttf": 0.0002777777777777778, "title": "Capability leak: v8 bug causes SES to leak the global object.", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1789](https://code.google.com/p/google-caja/issues/detail?id=1789) created by erights on 2013-07-03T04:29:36.000Z:\n\nSee https://code.google.com/p/v8/issues/detail?id=2758\n\nText of original report of https://code.google.com/p/v8/issues/detail?id=2758 follows. These are tested in a bare JS environment. But the same attacks work from confined SES code.\n\nOriginally reported to me by tung tran &lt;tunghack@gmail.com&gt;. Please put him and me and the cajadores on the cc list for this bug.\n\nVarious built-in functions leak the global object. We have yet to do the testing to accumulate a full list. Note that all the cases tested so far work correctly on FF and Safari.\n\nThis bug make all current deployments of SES (and of Caja in ES5 mode) insecure on Chrome/v8. Please keep this bug private until Caja has deployed a SES which detects and repairs (by monkey patching) this bug.\n\n&gt; (1,[].concat)()[0] === window\ntrue\n\n&gt; (1,[].push)('foo')\n1\n\n&gt; window[0]\n&quot;foo&quot;\n\n&gt; (1,[].pop)()\n&quot;foo&quot;\n\nWhereas valueOf works correctly, even if it does have a misleading error message, since it is undefined that it is failing to convert to object.\n\n&gt; (1,{}.valueOf)()\nTypeError: Cannot convert null to object\n\nCuriously, using .call to pass undefined explicitly does not provoke this buggy behavior:\n\n&gt; [].concat.call(void 0)\nTypeError: Array.prototype.concat called on null or undefined\n\n&gt; [].push.call(void 0, 'bar')\nTypeError: Array.prototype.push called on null or undefined\n\n&gt; [].pop.call(void 0)\nTypeError: Array.prototype.pop called on null or undefined\n\n&gt; ({}).valueOf.call(void 0)\nTypeError: Cannot convert null to object\n", "created": "2015-04-16 05:32:56"}, {"url": "https://github.com/google/caja/issues/1781", "closed": "2015-04-16 05:32:07", "ttf": 0.0002777777777777778, "title": "support css @keyframes", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1783](https://code.google.com/p/google-caja/issues/detail?id=1783) created by felix8a on 2013-06-26T11:17:00.000Z:\n\nhttps://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes\n\n@keyframes is used extensively by animate.css\nand is widely supported by browsers\n(caniuse says 75% browser share)\n\nso.. it looks like @keyframes needs tweaks to the parser,\nbut it also declares a global name for an animation,\nso it looks like we'll need to apply an id transform to that name.\n", "created": "2015-04-16 05:32:00"}, {"url": "https://github.com/google/caja/issues/1777", "closed": "2015-04-16 05:31:51", "ttf": 0.0002777777777777778, "title": "flaky test: testRepeatedHandlers in es53-test-domado-events-guest.html", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1779](https://code.google.com/p/google-caja/issues/detail?id=1779) created by felix8a on 2013-06-25T21:00:27.000Z:\n\nThis test fails occasionally. It's difficult to reproduce the failure. It never failed when I ran the test continuously on my laptop for hours.\n\nI think it's a timing issue. It sets a click handler, the click handler uses setTimeout(,0) to run something else.\nI suspect that occasionally the test driver gets a chance to click() again before the setTimeout is triggered.\n", "created": "2015-04-16 05:31:37"}, {"url": "https://github.com/google/caja/issues/1775", "closed": "2015-04-16 05:31:33", "ttf": 0.0002777777777777778, "title": "Whitelist google.visualization.AnnotatedTimeLine", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1777](https://code.google.com/p/google-caja/issues/detail?id=1777) created by ihab.awad on 2013-06-21T20:24:38.000Z:\n\nAnnotatedTimeLine is not whitelisted because, in ES5 mode, the data was inexplicably garbled. See:\n\nhttps://code.google.com/p/google-caja/source/detail?r=5030\n\nWe need to hunt down whatever the problem is and re-enable AnnotatedTimeLine.\n", "created": "2015-04-16 05:31:30"}, {"url": "https://github.com/google/caja/issues/1774", "closed": "2015-04-16 05:31:30", "ttf": 0.0002777777777777778, "title": "Table*Format missing", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1776](https://code.google.com/p/google-caja/issues/detail?id=1776) created by ihab.awad on 2013-06-21T00:42:48.000Z:\n\ngoogle.visualization.policyFactory.js is missing TableArrowFormat taming.\n", "created": "2015-04-16 05:31:17"}, {"url": "https://github.com/google/caja/issues/1773", "closed": "2015-04-16 05:31:17", "ttf": 0.0002777777777777778, "title": "Google API taming copyMixed() should handle Dates", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1775](https://code.google.com/p/google-caja/issues/detail?id=1775) created by ihab.awad on 2013-06-20T22:26:46.000Z:\n\ncopyMixed() in cajaTamingGoogleLoader:\n\nhttps://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/apitaming/cajaTamingGoogleLoader.js?r=5017#&nbsp;124\n\nshould recognize Date objects and turn them into Date instances. At the moment, it just assumes it's getting a generic Object and copies the fields.\n", "created": "2015-04-16 05:31:12"}, {"url": "https://github.com/google/caja/issues/1772", "closed": "2015-04-16 05:31:12", "ttf": 0.0002777777777777778, "title": "test-scan doesn't work with minified Caja frame code", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1774](https://code.google.com/p/google-caja/issues/detail?id=1774) created by kpreid.switchb.org on 2013-06-19T23:41:57.000Z:\n\nI'm not sure what this is, so I'm creating this issue to write down my observations. Private in case it's an integrity problem.\n\nIf es53-test-scan-guest.html is run in an ES5 Caja sandbox _without_ debug: true, then it does not succeed. The first symptom is: In debug mode, cajaVM.def(function(){}).prototype.constructor is a data property. In normal mode, it is an accessor property (and the scanner fails to handle this particular case well).\n\nThe accessor property is a tamperProof accessor property, which is reasonable as it should be overridable by assignment. The strange thing is, why is debug mode _not_ making it an accessor property?\n\nAs far as I can tell, the only thing debug mode should be doing is loading unminified code and telling the cajoler to be in debug mode (which is irrelevant); note that it is NOT the same as disableSecurityForDebugger.\n", "created": "2015-04-16 05:31:01"}, {"url": "https://github.com/google/caja/issues/1770", "closed": "2015-04-16 05:30:54", "ttf": 0.0002777777777777778, "title": "Safari DOMExceptions are not properly tamed", "commits": {}, "user": "kpreid", "labels": ["Component-Taming", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1772](https://code.google.com/p/google-caja/issues/detail?id=1772) created by felix8a on 2013-06-18T20:59:16.000Z:\n\nthis is the only test that fails on safari.\n(tested on safari 6.0.4)\n", "created": "2015-04-16 05:30:45"}, {"url": "https://github.com/google/caja/issues/1769", "closed": "2015-04-16 05:30:45", "ttf": 0.0002777777777777778, "title": "font-weight:300 doesn't work in es5", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1771](https://code.google.com/p/google-caja/issues/detail?id=1771) created by felix8a on 2013-06-18T05:56:51.000Z:\n\n&lt;style&gt;\n  p { font-weight: bold; font-weight: 300; }\n&lt;/style&gt;\n&lt;p&gt;foo&lt;/p&gt;\n\nfoo should show up non-bold, and this works in es53 but not in es5. the font-weight:300 is ignored.\n", "created": "2015-04-16 05:30:38"}, {"url": "https://github.com/google/caja/issues/1768", "closed": "2015-04-16 05:30:38", "ttf": 0.0002777777777777778, "title": "client-side css parser error recovery is too greedy", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1770](https://code.google.com/p/google-caja/issues/detail?id=1770) created by felix8a on 2013-06-17T19:10:38.000Z:\n\n&lt;style&gt;\n bad{bad}p{color:red}\n&lt;/style&gt;\n&lt;p&gt;hello&lt;/p&gt;\n\nIn es5 mode, the paragraph should be red, but it isn't, because the p{} rule gets elided.\nAdding a space after the {bad} will make it work correctly.\n", "created": "2015-04-16 05:30:32"}, {"url": "https://github.com/google/caja/issues/1767", "closed": "2015-04-16 05:30:31", "ttf": 0.0002777777777777778, "title": "support CSS media queries", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1769](https://code.google.com/p/google-caja/issues/detail?id=1769) created by felix8a on 2013-06-17T13:46:14.000Z:\n\nstuff like\n  @media (min-width:768px) and (max-width:979px) { ... }\n\nhttps://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Media_queries\n", "created": "2015-04-16 05:30:20"}, {"url": "https://github.com/google/caja/issues/1766", "closed": "2015-04-16 05:30:20", "ttf": 0.0002777777777777778, "title": "CSS selector \"input:-moz-placeholder\" is a fatal error in es53", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1768](https://code.google.com/p/google-caja/issues/detail?id=1768) created by felix8a on 2013-06-17T13:36:46.000Z:\n\n&lt;style&gt;\n   input:-moz-placeholder { color: red; }\n&lt;/style&gt;\n\nFATAL_ERROR: css identifier '-moz-placeholder' contains characters that may not work on all browsers\n\nmaking it a fatal error is obnoxious. we should downgrade to a warning and do normal css error recovery.\n", "created": "2015-04-16 05:30:09"}, {"url": "https://github.com/google/caja/issues/1765", "closed": "2015-04-16 05:30:09", "ttf": 0.0002777777777777778, "title": "Visualization copyDrawOpts() helper function fails with null options", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1767](https://code.google.com/p/google-caja/issues/detail?id=1767) created by ihab.awad on 2013-06-14T04:50:03.000Z:\n\nIn the following taming:\n\nhttps://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/apitaming/google.visualization.policyFactory.js?spec=svn5308&amp;r=5218#&nbsp;96\n\nfunction copyDrawOpts() fails when the guest code is passing &quot;null&quot; for the options. Need to rewrite so it allocates if null.\n", "created": "2015-04-16 05:30:07"}, {"url": "https://github.com/google/caja/issues/1764", "closed": "2015-04-16 05:30:06", "ttf": 0.0002777777777777778, "title": "Google Visualization taming URL rewriter fails", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Component-Taming", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1766](https://code.google.com/p/google-caja/issues/detail?id=1766) created by ihab.awad on 2013-06-14T03:36:21.000Z:\n\nGoogle Visualization taming, at rewriteDataSourceUrl():\n\nhttps://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/apitaming/google.visualization.policyFactory.js?r=5218#&nbsp;84\n\ncalls frame.rewriteUri() from the host frame, passing a host object through the taming membrane. But frame.rewriteUri() expects to be called from guest code. It tries to un-tame the object it's been given, realizes that this is a host frame object, and panics (as well it should). The errors on the console look like:\n\nRejecting url http://spreadsheets.google.com/tq?key=pCQbetd-CptGXxxQIG7VFIQ&amp;pub=1 because TypeError: Host object leaked without being tamed ses-single-frame.js?debug=1:15879\nEvent handler threw:  TypeError {} caja.js:189\n\nThe fix is to do something more clever in the rewriteDataSourceUrl() function. Note that this function is _always_ resident in the host frame, due to the fact that the code it is a part of is coresident with the feral Google JS API.\n", "created": "2015-04-16 05:30:00"}, {"url": "https://github.com/google/caja/issues/1761", "closed": "2015-04-16 05:29:52", "ttf": 0.0002777777777777778, "title": "jQuery JSONP fails", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1763](https://code.google.com/p/google-caja/issues/detail?id=1763) created by kpreid.switchb.org on 2013-06-10T22:18:14.000Z:\n\n```\n $.ajax({\n    url: ...,\n    dataType: 'jsonp',\n    success: ...\n });\n```\n\nwill fail like\n\n```\nTypeError: Property 'caja_dynamic_script0___' of object [object Object] is not a function \n```\n\nGiven that I see no other way for the dynamic script callback to be undefined, I am guessing that jQuery is cloning script nodes (which we don't make any effort to support) so that the same callback ID is reused.\n", "created": "2015-04-16 05:29:41"}, {"url": "https://github.com/google/caja/issues/1756", "closed": "2015-04-16 05:29:06", "ttf": 0.0002777777777777778, "title": "Bad severity name to ses.ok() is silently ignored", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1758](https://code.google.com/p/google-caja/issues/detail?id=1758) created by kpreid.switchb.org on 2013-06-06T20:34:16.000Z:\n\nses.ok(string not found in ses.severities) is treated as if the argument was not supplied, which is potentially dangerous. repairES5 already has validateSeverityName and we should use that.\n", "created": "2015-04-16 05:28:57"}, {"url": "https://github.com/google/caja/issues/1755", "closed": "2015-04-16 05:28:57", "ttf": 0.0002777777777777778, "title": "Date input types do not work in ES5/3", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1757](https://code.google.com/p/google-caja/issues/detail?id=1757) created by raschee on 2013-06-06T15:17:19.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nI\u2019ve tested with the caja playground Rev 5410 on Chrome 27.0.1453.110/OSX.\n\n<b>What steps will reproduce the problem?</b>\n1. Load the test file in Chrome\n2. Note that you have time and date pickers\n3. Load the test file in caja in ES5/3 mode\n4. No time and date pickers there\u2026\n\n<b>What is the expected output? What do you see instead?</b>\n\nSee above.\n", "created": "2015-04-16 05:28:48"}, {"url": "https://github.com/google/caja/issues/1754", "closed": "2015-04-16 05:28:48", "ttf": 0.0002777777777777778, "title": "Chrome Canary 29 now seems to be classified as unsafe", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1756](https://code.google.com/p/google-caja/issues/detail?id=1756) created by erights on 2013-06-06T05:55:51.000Z:\n\nSee https://code.google.com/p/v8/issues/detail?id=2711\n", "created": "2015-04-16 05:28:30"}, {"url": "https://github.com/google/caja/issues/1753", "closed": "2015-04-16 05:28:30", "ttf": 0.0002777777777777778, "title": "Need rewriteFunctionCalls mitigation", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1755](https://code.google.com/p/google-caja/issues/detail?id=1755) created by erights on 2013-06-04T17:41:13.000Z:\n\nBecause of https://code.google.com/p/google-caja/wiki/SES#this_-binding_of_Global_Function_Calls , we need a mitigating rewrite from function call expressions, e.g., f(), to function call expressions that ensure that undefined is provided as the this-binding of the called function, e.g., (1,f)().\n", "created": "2015-04-16 05:28:19"}, {"url": "https://github.com/google/caja/issues/1750", "closed": "2015-04-16 05:28:05", "ttf": 0.0002777777777777778, "title": "Host object leaked without being tamed: \"valueOf()\"", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Component-Taming", "Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1752](https://code.google.com/p/google-caja/issues/detail?id=1752) created by erights@google.com on 2013-06-01T18:23:20.000Z:\n\nIn the playground, in ES5 mode, cajole\n\n&lt;script&gt;\n  alert(valueOf());\n&lt;/script&gt;\u200b\n\nExpected the imports or scope object to appear in the alert. (ideally it would be &quot;undefined&quot;, but I didn't expect that.) \n\nInstead, nothing was alerted. In the &quot;Runtime Messages&quot; tab I see\n\n```\n&quot;Uncaught script error: 'TypeError: Host object leaked without being tamed' in source: 'https:' at line: 1&quot;\n```\n\nI don't yet know which host object leaked, but I fear the worst. Hence this quick private report.\n", "created": "2015-04-16 05:27:35"}, {"url": "https://github.com/google/caja/issues/1747", "closed": "2015-04-16 05:27:21", "ttf": 0.0002777777777777778, "title": "browser tests fail on Firefox 23 (Aurora)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1749](https://code.google.com/p/google-caja/issues/detail?id=1749) created by felix8a on 2013-05-30T00:40:43.000Z:\n\nwebdriver uses Node.setUserData, which was deprecated in Firefox 22 and deleted in Firefox 23.\nhttps://code.google.com/p/selenium/issues/detail?id=5710\nhttps://developer.mozilla.org/en-US/docs/Web/API/Node.setUserData\n", "created": "2015-04-16 05:27:14"}, {"url": "https://github.com/google/caja/issues/1746", "closed": "2015-04-16 05:27:14", "ttf": 0.0002777777777777778, "title": "CSS font property does not accept unquoted name", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1748](https://code.google.com/p/google-caja/issues/detail?id=1748) created by Marcus.Abrahamsson13 on 2013-05-28T08:26:06.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n5410 chrome and firefox on windows 7\n\n<b>What steps will reproduce the problem?</b>\nCreate a canvas and print text with filltext like the below statements.\nvar context = c.getContext(&quot;2d&quot;);\ncontext.fillStyle = &quot;#&nbsp;000000&quot;;\ncontext.font = '20pt Calibri';\ncontext.fillText(&quot;test&quot;, 20, 30);\n\n<b>What is the expected output? What do you see instead?</b>\nI expect to get the string &quot;test&quot; printed in black with the font calibri with the size 20pt. \n\nWhat I get is the printed text where I want it but the size and font is not working as it should.\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 05:27:03"}, {"url": "https://github.com/google/caja/issues/1744", "closed": "2015-04-16 05:26:58", "ttf": 0.0002777777777777778, "title": "toString as accessor property doesn't work in ES5/3", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 1746](https://code.google.com/p/google-caja/issues/detail?id=1746) created by kpreid.switchb.org on 2013-05-24T22:59:59.000Z:\n\nIf o.toString is overridden as an accessor property under ES5/3, String(o) or ''+o will not invoke the override. This is because toString is virtualized and the hook to cause native .toString() to invoke it is only applied on assignment to toString, not on defineProperty.\n\nThis affects Domado since its toString methods are defined as overridable using accessors (which is not actually necessary under ES5/3). It was not caught by test-domado-dom-guest testToString since it uses .toString() explicitly which is translated into .m___('toString', []).\n\nThe only uses of the opt_setterHook feature in virtualize() are toString and valueOf, so it looks like we can just change that hook into a defineProperty hook (implicitly invoked also by assignment). However, without a concrete value we can't do the early (!isFunction(val)) check; as noted in the comments, it is unclear to me what benefit that check provides and whether it is safe to do it at a later time.\n\nA workaround rather than a fix would be to have Domado skip generating override accessors when running under ES5/3; this might also improve performance for non-virtualized properties.\n\nVersions r5410-r5424, probably at least since r5369.\n", "created": "2015-04-16 05:26:56"}, {"url": "https://github.com/google/caja/issues/1743", "closed": "2015-04-16 05:26:56", "ttf": 0.0002777777777777778, "title": "Caja breaks label@for when rewriting it", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1745](https://code.google.com/p/google-caja/issues/detail?id=1745) created by bruant.d on 2013-05-24T21:04:40.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Try &lt;label for=&quot;caja&quot;&gt;Caja&lt;/label&gt;&lt;input type=&quot;text&quot; name=&quot;caja&quot;&gt; in the playground\n2. Cajole\n\nWhat is the expected output?\n=&gt; Clicking on the label should focus the input (the label@for and input@name should match)\n\nWhat do you see instead?\n=&gt; The input isn't focused, because the for attribute is being rewritten by Caja (so it doesn't match the input@name)\n", "created": "2015-04-16 05:26:51"}, {"url": "https://github.com/google/caja/issues/1741", "closed": "2015-04-16 05:26:44", "ttf": 0.0002777777777777778, "title": "Allow multi-argument console.log", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1743](https://code.google.com/p/google-caja/issues/detail?id=1743) created by bruant.d on 2013-05-24T19:22:22.000Z:\n\nRun &quot;console.log(1, 2, 3)&quot;\n\nWhat is the expected output?\n=&gt; The console should log &quot;1, 2, 3&quot; as it does in browsers\n\nWhat do you see instead?\n=&gt; The console logs &quot;1&quot; ignoring all but first arguments.\n\nI believe this is because Caja only cares about the first argument\n", "created": "2015-04-16 05:26:40"}, {"url": "https://github.com/google/caja/issues/1734", "closed": "2015-04-16 05:26:12", "ttf": 0.0002777777777777778, "title": "CAJA PLAYGROUND NOT EXECUTING THE EXAMPLE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1736](https://code.google.com/p/google-caja/issues/detail?id=1736) created by choc2020 on 2013-05-17T05:23:10.000Z:\n\nIn the following link the caja playground have a example for the jquery autocompletion, But its not working properly in the caja playground.\n\nThe like is : \n\nhttp://caja.appspot.com/#examples/jquery-autocomplete.html\n\nPlease take a look on to it.\n\nwe are in need of implementing this concept in our google sites.\n\nTnx,\nCL.\n", "created": "2015-04-16 05:26:10"}, {"url": "https://github.com/google/caja/issues/1733", "closed": "2015-04-16 05:26:10", "ttf": 0.0002777777777777778, "title": "\"navigator.cajaVersion\" is bogus", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1735](https://code.google.com/p/google-caja/issues/detail?id=1735) created by kpreid.switchb.org on 2013-05-15T22:22:29.000Z:\n\nDomado has a property navigator.cajaVersion === '1.0', with comment\n// Custom attribute indicating Caja is active.\n\nThis version number is completely irrelevant and possibly misleading, so we should either delete that code (if no one uses it; there are no uses within Caja) or change it to use the real Caja version number.\n", "created": "2015-04-16 05:26:07"}, {"url": "https://github.com/google/caja/issues/1731", "closed": "2015-04-16 05:26:03", "ttf": 0.0002777777777777778, "title": "Support wildcard selectors in CSS", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1733](https://code.google.com/p/google-caja/issues/detail?id=1733) created by jasvir on 2013-05-13T17:34:14.000Z:\n\nUsed commonly in bootstrap for example.\n&lt;style&gt;\ndiv[class*='foo-'] {color:red }\n&lt;/style&gt;\n&lt;div class=&quot;foo-1&quot;&gt;is red&lt;/div&gt;\n&lt;div class=&quot;foo-2&quot;&gt;red&lt;/div&gt;\n&lt;div class=&quot;bar&quot;&gt;is not red&lt;/div&gt;\n", "created": "2015-04-16 05:25:54"}, {"url": "https://github.com/google/caja/issues/1730", "closed": "2015-04-16 05:25:54", "ttf": 0.0002777777777777778, "title": "@import \"someUrl\" does not work in ES5, though @import url(someUrl) works", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1730](https://code.google.com/p/google-caja/issues/detail?id=1730) created by ihab.awad on 2013-05-11T01:11:49.000Z:\n\nAt r5390, the following does not work in ES5 but works in ES5/3:\n\n  &lt;style&gt;\n    @import &quot;http://schmivits.org/test2.css&quot;;\n  &lt;/style&gt;\n  &lt;div class=&quot;foo&quot;&gt;thefoo&lt;/div&gt;\n\nwhile the following works in both ES5 and ES5/3:\n\n  &lt;style&gt;\n    @import url(&quot;http://schmivits.org/test2.css&quot;);\n  &lt;/style&gt;\n  &lt;div class=&quot;foo&quot;&gt;thefoo&lt;/div&gt;\n\nIf ES5/3 can securely support the bare string form of a URL in CSS, then so should ES5.\n", "created": "2015-04-16 05:25:47"}, {"url": "https://github.com/google/caja/issues/1726", "closed": "2015-04-16 05:25:28", "ttf": 0.0002777777777777778, "title": "Reorder Proxy get/set trap arguments", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1726](https://code.google.com/p/google-caja/issues/detail?id=1726) created by kpreid.switchb.org on 2013-05-01T20:39:51.000Z:\n\nES5/3 Proxy gives get and set traps the arguments (name[, value], proxy), but the de-facto standard in Firefox and Chrome (and as documented at &lt;http://wiki.ecmascript.org/doku.php?id=harmony:proxies&gt;) is (proxy, name[, value]).\n\nIn the long run this is moot because ES6 will likely use either \u201cdirect proxies\u201d &lt;http://wiki.ecmascript.org/doku.php?id=harmony:direct_proxies&gt; or \u201cnotification proxies\u201d, but for now this is causing us unnecessary complexity.\n\nChange ES5/3 to match the de-facto standard order and update the third_party proxy test suite to a newer version.\n", "created": "2015-04-16 05:25:24"}, {"url": "https://github.com/google/caja/issues/1725", "closed": "2015-04-16 05:25:24", "ttf": 0.0002777777777777778, "title": "ArrayLike proxy handler not compatible with WeakMap emulation", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1725](https://code.google.com/p/google-caja/issues/detail?id=1725) created by kpreid.switchb.org on 2013-04-30T22:37:54.000Z:\n\nNow that we have Proxies combined with non-builtin WeakMaps on some platforms (namely Firefox), the Proxy ArrayLike implementation needs to be aware of the WeakMap HIDDEN_NAME, or we need to properly patch Proxy itself to hide HIDDEN_NAME.\n\nTest case:\n\n  var ArrayLike = cajaVM.makeArrayLike(1);\n  var w = new WeakMap();\n  w.get(ArrayLike.prototype);  // should return undefined, but dies\n\nThis may be a security risk if there is some way to confuse ArrayLike into revealing HIDDEN_NAME such as in an error message.\n", "created": "2015-04-16 05:25:06"}, {"url": "https://github.com/google/caja/issues/1724", "closed": "2015-04-16 05:25:06", "ttf": 0.0002777777777777778, "title": "meta-test testCaseAsyncPass is flaky", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1724](https://code.google.com/p/google-caja/issues/detail?id=1724) created by kpreid.switchb.org on 2013-04-29T22:47:30.000Z:\n\nmeta-test.js testCaseAsyncPass fails randomly.\n\nThis is probably due to the async requirement mechanism having a very short timeout, which interacts poorly with the multiple-frame-loading nature of meta-test.js.\n\nReview the uses (or potential uses, now that it's more reliable) of assertAsynchronousRequirement and decide on a suitable solution:\n1. Increase timeout.\n2. Switch to counting event-loop turns instead, or in addition.\n", "created": "2015-04-16 05:25:01"}, {"url": "https://github.com/google/caja/issues/1722", "closed": "2015-04-16 05:24:59", "ttf": 0.0002777777777777778, "title": "document.body can crash", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1722](https://code.google.com/p/google-caja/issues/detail?id=1722) created by kpreid.switchb.org on 2013-04-29T18:25:00.000Z:\n\nIf the document currently contains no documentElement then document.body will throw an exception rather than returning null.\n\nIt is also non-conformant in not matching FRAMESET elements, which we don't particularly support but might be able to appear virtualized (check this).\n\nhttp://www.whatwg.org/specs/web-apps/current-work/multipage/dom.html#the-body-element-0\n", "created": "2015-04-16 05:24:52"}, {"url": "https://github.com/google/caja/issues/1721", "closed": "2015-04-16 05:24:52", "ttf": 0.0002777777777777778, "title": "Occasionally error while cajoling", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1721](https://code.google.com/p/google-caja/issues/detail?id=1721) created by Marcus.Abrahamsson13 on 2013-04-26T08:35:53.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nrevision 5378 Firefox 23 nightly windows 7\n\n<b>What steps will reproduce the problem?</b>\n1. Load the cajoler module\n\n<b>What is the expected output? What do you see instead?</b>\nThe cajoled web site. Sometimes I get the following error message:\ntry { null.foo = 3; } catch (err) { errors.push(err); }\n\nIt usually helps to reload the the page but it happens to often for me to be satisfied. \n", "created": "2015-04-16 05:24:50"}, {"url": "https://github.com/google/caja/issues/1718", "closed": "2015-04-16 05:24:42", "ttf": 0.0002777777777777778, "title": "No javascript in published Google App Script (createHtmlOutputFromFile)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1718](https://code.google.com/p/google-caja/issues/detail?id=1718) created by Ferric.AU on 2013-04-24T04:59:31.000Z:\n\nFirefox 20.0.1, IE 9, both on Windows 7, Cajoler Rev 5367\n\nMain.html\n&lt;html&gt;\n  &lt;script src=&quot;http://code.jquery.com/jquery-1.7.2.min.js&quot;&gt;&lt;/script&gt;\n  &lt;script&gt;\n       $(document).ready(function() {\n          $('#results').prepend(&quot;Starting&quot;);\n             $('#onebutton').click(function(){\n                $('#results').prepend(&quot;Clicked Button&lt;br&gt;&quot;);\n             });\n        });  \n  &lt;/script&gt;\n  &lt;body&gt;\n    &lt;h2&gt;Debug Caja&lt;/h2&gt;  \n    &lt;b&gt;Blah&lt;/b&gt;&lt;br&gt;\n    &lt;textarea id=&quot;textarea&quot; rows=&quot;2&quot; cols=&quot;5&quot;&gt;&lt;/textarea&gt;&lt;br&gt;\n    &lt;button id=&quot;onebutton&quot;&gt;Click Me&lt;/button&gt;  \n    &lt;br&gt;&lt;br&gt;\n    &lt;div id=&quot;results&quot;&gt;&lt;/div&gt;  \n  &lt;/body&gt;\n&lt;/html&gt;\n\nCode.gs\nfunction doGet() {\n  return HtmlService.createHtmlOutputFromFile('Main');\n}\n\nHTML loads and displays but no javascript.\n\nHTML file runs javascript in Caja playground.\n", "created": "2015-04-16 05:24:38"}, {"url": "https://github.com/google/caja/issues/1717", "closed": "2015-04-16 05:24:38", "ttf": 0.0002777777777777778, "title": "UnsupportedOperationException sometimes when cajoling event handlers", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1717](https://code.google.com/p/google-caja/issues/detail?id=1717) created by felix8a on 2013-04-24T00:49:45.000Z:\n\nThis is for the discussion thread &quot;How to hunt down source of NPE&quot;\nhttps://groups.google.com/forum/?fromgroups=#!topic/google-caja-discuss/tegpNS8xgYw\n\nI think I understand the issue well enough to fix it, but I need to reduce it to a simple testcase and think through some potential complications.\n", "created": "2015-04-16 05:24:33"}, {"url": "https://github.com/google/caja/issues/1715", "closed": "2015-04-16 05:24:26", "ttf": 0.0002777777777777778, "title": "StringMap crashes initSES.js if SES startup fails", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1715](https://code.google.com/p/google-caja/issues/detail?id=1715) created by kpreid.switchb.org on 2013-04-22T20:59:10.000Z:\n\nStringMap.js assumes ses.es5ProblemReports.FREEZING_BREAKS_PROTOTYPES exists, which is not the case if SES has already bailed out; this throws an uncaught exception and so breaks the autoswitcher.\n\nWe should have a test case that initSES.js does not die if SES is fully unsupported.\n", "created": "2015-04-16 05:24:17"}, {"url": "https://github.com/google/caja/issues/1714", "closed": "2015-04-16 05:24:17", "ttf": 0.0002777777777777778, "title": "Cannot cajole document.ready", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1714](https://code.google.com/p/google-caja/issues/detail?id=1714) created by gus@needhamsoftware.com on 2013-04-22T14:10:48.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n- Updated to head revision on trunk SVN around Sat, 20 Apr 2013 19:00 -0700 (PDT)\n- Tested on Chrome 26 and Firefox 20\n- Mac OSX\n\n<b>What steps will reproduce the problem?</b>\n1. Create a war file by the procedure here: http://stackoverflow.com/questions/16068317/set-up-a-production-ready-caja-server\n2. Deploy the war file on Tomcat 7.0.8\n3. Place the attached 3 files in the Root context (webapps/ROOT) and start server on port 8080\n4. Open Either of the above browsers.\n5. Using firebug, or developer tools console as appropriate, browse to localhost:8080/cajatest.html\n\n<b>What is the expected output? What do you see instead?</b>\n\nThe javascript in the embeded page should raise an alert with the text 'foo'\n\nNo alert is raised and a javascript error is shown in the console &quot;Uncaught ReferenceError: &quot;alert&quot; is not defined in this scope.&quot;\n\n<b>Please provide any additional information below.</b>\n\nI also get many console logged warnings relating to the cajoling of jquery, but given the prevelance of jquery, and the importance of minification in the industry I am assuming that these things are meant to be supported. (Otherwise this project will always have a very limited audience).\n", "created": "2015-04-16 05:24:10"}, {"url": "https://github.com/google/caja/issues/1713", "closed": "2015-04-16 05:24:10", "ttf": 0.0002777777777777778, "title": "TameEvent.view generates \"spurious\" warning when it receives undefined rather than null from the browser", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1713](https://code.google.com/p/google-caja/issues/detail?id=1713) created by jasvir on 2013-04-20T19:07:36.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\n&lt;form id=&quot;xxx&quot; action=&quot;#&quot;&gt;\n&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  document.getElementById('xxx').onsubmit = function (evt) { alert(evt.view); return false; }\n&lt;/script&gt;\n\nWhen the button is clicked, the native browser event generated on Chrome 26 has not .view property.  Domado tests explicitly tests if event.view is null and since it is undefined, generates the following error:\n\nDomado: Discarding unrecognized feral view value: undefined\n", "created": "2015-04-16 05:24:03"}, {"url": "https://github.com/google/caja/issues/1710", "closed": "2015-04-16 05:23:38", "ttf": 0.0002777777777777778, "title": "testDimensionProperties should reset scrolling position", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1710](https://code.google.com/p/google-caja/issues/detail?id=1710) created by kpreid.switchb.org on 2013-04-19T00:49:05.000Z:\n\nThe test testDimensionProperties (I might have the name wrong) scrolls a scrollable element. Unfortunately, Firefox remembers the scroll position across page reloads, causing spurious test failures if the test is reloaded. The test should reset the scroll position to the expected state at the beginning of its execution.\n", "created": "2015-04-16 05:23:32"}, {"url": "https://github.com/google/caja/issues/1708", "closed": "2015-04-16 05:23:29", "ttf": 0.0002777777777777778, "title": "Caja inoperable on Chrome Canary", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1708](https://code.google.com/p/google-caja/issues/detail?id=1708) created by ihab.awad on 2013-04-19T00:18:24.000Z:\n\nCaja Playground r5330, Chrome Version 28.0.1482.0 canary\n\nRequires further investigation.\n\n== Load Playground ==\n\n Repaired: Non-deletable RegExp statics are a global communication channel ses-guest-frame.js?debug=1:236\n Repaired: Date.prototype is a global communication channel ses-guest-frame.js?debug=1:236\n Repaired: Array forEach converts primitive thisObj arg to object ses-guest-frame.js?debug=1:236\n Not repaired: Array.prototype.push ignores sealing ses-guest-frame.js?debug=1:236\n Not repaired: Array.prototype.push does not throw on a frozen array ses-guest-frame.js?debug=1:236\n Not repaired: Extending an array can modify read-only array length ses-guest-frame.js?debug=1:236\n Max Severity: Unsafe spec violation but no known exploits(2) is not SES-safe. ses-guest-frame.js?debug=1:236\n 446 Apparently fine ses-guest-frame.js?debug=1:236\n 2 Cannot be poisoned ses-guest-frame.js?debug=1:236\n 15 Deleted ses-guest-frame.js?debug=1:236\n 2 Skipped ses-guest-frame.js?debug=1:236\n Max Severity: Not isolated(5) is not SES-safe. ses-guest-frame.js?debug=1:236\n initSES succeeded. ses-guest-frame.js?debug=1:236\nUnable to use SES.  Switching to ES53. \n\n== Attempt to run a trivial snippet of static HTML ==\n\nUncaught TypeError: Discovery of direct constructors for foreign begotten objects not implemented on this platform es53-taming-frame.js?debug=1:1143\ndirectConstructor es53-taming-frame.js?debug=1:1143\ntame es53-taming-frame.js?debug=1:31291\ninitSwfobject es53-taming-frame.js?debug=1:33578\ninit es53-taming-frame.js?debug=1:33659\nes53run es53-taming-frame.js?debug=1:34295\nrun es53-taming-frame.js?debug=1:33852\n$wnd.caja.load.idClass 742C4C41A79E0E4655E77ED431538DBB.cache.html:1475\n(anonymous function) es53-taming-frame.js?debug=1:34147\nconsumeIfReady caja.js:503\nself.make caja.js:488\nmakeES5Frame es53-taming-frame.js?debug=1:34132\n(anonymous function)\n", "created": "2015-04-16 05:23:27"}, {"url": "https://github.com/google/caja/issues/1707", "closed": "2015-04-16 05:23:27", "ttf": 0.0002777777777777778, "title": "Caja inoperable on Chrome Canary", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1707](https://code.google.com/p/google-caja/issues/detail?id=1707) created by ihab.awad on 2013-04-19T00:18:23.000Z:\n\nCaja Playground r5330, Chrome Version 28.0.1482.0 canary\n\nRequires further investigation.\n\n== Load Playground ==\n\n Repaired: Non-deletable RegExp statics are a global communication channel ses-guest-frame.js?debug=1:236\n Repaired: Date.prototype is a global communication channel ses-guest-frame.js?debug=1:236\n Repaired: Array forEach converts primitive thisObj arg to object ses-guest-frame.js?debug=1:236\n Not repaired: Array.prototype.push ignores sealing ses-guest-frame.js?debug=1:236\n Not repaired: Array.prototype.push does not throw on a frozen array ses-guest-frame.js?debug=1:236\n Not repaired: Extending an array can modify read-only array length ses-guest-frame.js?debug=1:236\n Max Severity: Unsafe spec violation but no known exploits(2) is not SES-safe. ses-guest-frame.js?debug=1:236\n 446 Apparently fine ses-guest-frame.js?debug=1:236\n 2 Cannot be poisoned ses-guest-frame.js?debug=1:236\n 15 Deleted ses-guest-frame.js?debug=1:236\n 2 Skipped ses-guest-frame.js?debug=1:236\n Max Severity: Not isolated(5) is not SES-safe. ses-guest-frame.js?debug=1:236\n initSES succeeded. ses-guest-frame.js?debug=1:236\nUnable to use SES.  Switching to ES53. \n\n== Attempt to run a trivial snippet of static HTML ==\n\nUncaught TypeError: Discovery of direct constructors for foreign begotten objects not implemented on this platform es53-taming-frame.js?debug=1:1143\ndirectConstructor es53-taming-frame.js?debug=1:1143\ntame es53-taming-frame.js?debug=1:31291\ninitSwfobject es53-taming-frame.js?debug=1:33578\ninit es53-taming-frame.js?debug=1:33659\nes53run es53-taming-frame.js?debug=1:34295\nrun es53-taming-frame.js?debug=1:33852\n$wnd.caja.load.idClass 742C4C41A79E0E4655E77ED431538DBB.cache.html:1475\n(anonymous function) es53-taming-frame.js?debug=1:34147\nconsumeIfReady caja.js:503\nself.make caja.js:488\nmakeES5Frame es53-taming-frame.js?debug=1:34132\n(anonymous function)\n", "created": "2015-04-16 05:22:55"}, {"url": "https://github.com/google/caja/issues/1706", "closed": "2015-04-16 05:22:55", "ttf": 0.0002777777777777778, "title": "ES5 inline event handlers do not work", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1706](https://code.google.com/p/google-caja/issues/detail?id=1706) created by ihab.awad on 2013-04-18T23:19:30.000Z:\n\nIn ES5, given the following snippet:\n\n&lt;script&gt;function foo() { alert(1); }&lt;/script&gt;\n&lt;div onclick=&quot;foo()&quot;&gt;foo&lt;/div&gt;\n\u200b\nlogs the following error in console:\n\nUncaught TypeError: Object #&lt;Object&gt; has no method 'plugin_dispatchEvent___' caja.appspot.com:1\nonclick\n\nHowever, doing the equivalent using a script to set the 'onclick' property of the DOM node works correctly.\n", "created": "2015-04-16 05:22:53"}, {"url": "https://github.com/google/caja/issues/1705", "closed": "2015-04-16 05:22:53", "ttf": 0.0002777777777777778, "title": "Firefox support problem", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1705](https://code.google.com/p/google-caja/issues/detail?id=1705) created by Marcus.Abrahamsson13 on 2013-04-18T11:21:27.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nI am using the caja server at caja.appspot.com. Running the page in Firefox 20.0.1 on windows 7\n\n<b>What steps will reproduce the problem?</b>\n1. The host code\n    &lt;script type=&quot;text/javascript&quot;\n        src=&quot;//caja.appspot.com/caja.js&quot;&gt;\n    &lt;/script&gt;\n\n&lt;div id=&quot;guest&quot;&gt;&lt;/div&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n        caja.initialize({\n            cajaServer: 'https://caja.appspot.com/',\n            debug: true\n        });\n        caja.load(document.getElementById('guest'), undefined, function (frame) {\n            frame.code('http://abrisrisba.webs.com/TestApp.html',\n                       'text/html')\n                 .run();\n        });\n    &lt;/script&gt;\n1. the guest code\n   &lt;div id=&quot;method2&quot;&gt;Clicking here will do something too!&lt;/div&gt;\n   &lt;button id=&quot;but&quot;&gt;Press&lt;/button&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction handler2(sender){\ndocument.getElementById('method2').innerHTML = &quot;Method 1 Clicked&quot;;\n}\nvar myClickEl2 = document.getElementById('but');\nmyClickEl2.onclick = handler2;\n&lt;/script&gt;\n1. Run the script in firefox\n\n<b>What is the expected output? What do you see instead?</b>\n\nThe expected output is that the text in the div will change when you push the button. This works perfectly in Chrome but not in Firefox. I get an error message saying &quot;cannot use the given object as a weak map key in source: &quot;unknown&quot; at line: 0&quot;\n", "created": "2015-04-16 05:22:48"}, {"url": "https://github.com/google/caja/issues/1704", "closed": "2015-04-16 05:22:48", "ttf": 0.0002777777777777778, "title": "es5 failures on firefox aurora (22.0a2)", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1704](https://code.google.com/p/google-caja/issues/detail?id=1704) created by felix8a on 2013-04-17T22:38:24.000Z:\n\nlots of failures, most of them seem to be some variant of &quot;TypeError: cannot use the given object as a weak map key&quot;, for different types of browser objects, for example the object returned by:\n  context.createLinearGradient(0, 0, 100, 100);\n", "created": "2015-04-16 05:22:24"}, {"url": "https://github.com/google/caja/issues/1703", "closed": "2015-04-16 05:22:24", "ttf": 0.0002777777777777778, "title": "Content-Type of JSONP PROXY error responses is still wrong", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1703](https://code.google.com/p/google-caja/issues/detail?id=1703) created by kpreid.switchb.org on 2013-04-16T22:11:51.000Z:\n\nChrome 28.0.1480.0 canary\nCaja r5357 with client-side-only changes\nTest es53-test-cajajs-invocation.js\n\nFrom console, broken for readability:\n\n  Refused to execute script from '\n    http://localhost:56901/caja/cajole\n      ?url=http%3A%2F%2Flocalhost%3A56901%2Fant-testlib%2Fcom%2Fgoogle%2Fcaja%2Fplugin%2Fnon-existent-script.js\n      &amp;input-mime-type=text%2Fjavascript\n      &amp;transform=PROXY\n      &amp;callback=caja_ajax_12\n      &amp;alt=json-in-script\n  ' because its MIME type ('application/json') is not executable, and strict MIME type checking is enabled.\n\nI thought I fixed this in r5298, but evidently not. We should make sure that all of our JSONP responses, and this one in particular, are delivered as text/javascript. Note that the target URL deliberately does not exist.\n", "created": "2015-04-16 05:22:15"}, {"url": "https://github.com/google/caja/issues/1701", "closed": "2015-04-16 05:22:05", "ttf": 0.0002777777777777778, "title": "Css proporty transform:rotate() does not work.", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1701](https://code.google.com/p/google-caja/issues/detail?id=1701) created by jacobvdb@lagaroo.com.br on 2013-04-14T15:12:50.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nRev 5330 built on 2013-03-27 18:04:49\n\n<b>What steps will reproduce the problem?</b>\n1.Google Apps Script with a doGet() function \nand a HtmlService.createTemplateFromFile('templateHTML').evaluate()\n1. In the templateHTML In the head style I use the \n   transform: rotate(-20deg); css property. \n2. In the html part itselve I apply this css to a div with class=&quot;kkkk&quot;\n\nPlatform? \nI just tested it on Google Chrome.\n\n<b>What is the expected output? What do you see instead?</b>\nThis div should appear with a angle but it appears straight. \n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 05:21:59"}, {"url": "https://github.com/google/caja/issues/1700", "closed": "2015-04-16 05:21:58", "ttf": 0.0002777777777777778, "title": "JsHtmlSanitizer is identified as virus \"JS/Downloader.Agent\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1700](https://code.google.com/p/google-caja/issues/detail?id=1700) created by matzepfau on 2013-04-11T08:11:11.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nJsHtmlSanitizer r5333\n\n<b>What steps will reproduce the problem?</b>\n1. Install avg free virus scanner\n2. run avgscan on html-sanitizer.js\n\n<b>What is the expected output? What do you see instead?</b>\nNo virus should be detected. Instead, the virus  &quot;JS/Downloader.Agent&quot; is detected.\n\n<b>Please provide any additional information below.</b>\navg currently searches for the following string: \n  window['document'].createElement('textarea')\nPlease replace the string to:\n  window.document.createElement('textarea')\nand the virus scanner will not identify the html-sanitizer as virus anymore.\n\nI also sent a false positive report to avg. However, no one knows how long it will take until they solve the problem. Until then, all websites using caja are unusable as avg will block access to the caja sanitizer.\n", "created": "2015-04-16 05:21:56"}, {"url": "https://github.com/google/caja/issues/1698", "closed": "2015-04-16 05:21:53", "ttf": 0.0002777777777777778, "title": "ES5 / SES insecure on current Firefox", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1698](https://code.google.com/p/google-caja/issues/detail?id=1698) created by ihab.awad on 2013-04-10T23:04:01.000Z:\n\nCurrent Firefox (20.0) makes ES5 insecure (cross-frame Object.freeze() is broken).\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=784892\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=674195\n\nThis is a tracking bug to ensure that we identify which Firefox version will have the necessary fix.\n", "created": "2015-04-16 05:21:47"}, {"url": "https://github.com/google/caja/issues/1697", "closed": "2015-04-16 05:21:47", "ttf": 0.0002777777777777778, "title": "Domado slow on some DOM operations", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1697](https://code.google.com/p/google-caja/issues/detail?id=1697) created by ihab.awad on 2013-04-10T00:09:01.000Z:\n\nA jQuery program that, for some DOM node 'target', repeatedly performs:\n\n```\n  target.append($('&lt;div&gt;x&lt;/div&gt;'));\n```\n\nand which runs in 30ms natively, runs in 649ms in ES5 mode. This is a serious slowdown that we should do something about.\n\nI traced the execution paths of the guest code and found that the same path is taken natively versus in Caja. The issue is not that the guest is doing anything different, but the way in which we implement whatever the guest code is calling.\n\nDigging further, it is possible to reduce the run time to 474ms simply by removing the cajaVM.def(...) surrounding the return value of function NodeListFilter. I believe this value is never exposed to guest code, so this change should be safe.\n\nThe bulk of the remaining time seems to be taken up by calls to def(...) within constructArrayLike. As discussed with kpreid@, we are cajaVM.def()-ing a lot of stuff where we can take a shortcut. Specifically, we can define a shortcut defender for non-constructor functions that have no special properties as:\n\n  function funcify(f) {\n    f.prototype = (void 0);\n    return Object.freeze(f);\n  }\n\nand this would be much faster.\n\nIn any case, what this bug asks us to do is look through the time we're spending in constructArrayLike and optimize away anything that is not strictly necessary.\n", "created": "2015-04-16 05:21:38"}, {"url": "https://github.com/google/caja/issues/1696", "closed": "2015-04-16 05:21:37", "ttf": 0.0002777777777777778, "title": "Enable experimental apis flag in Chrome stable causes ES5 mode initialization to fail", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1696](https://code.google.com/p/google-caja/issues/detail?id=1696) created by jasvir on 2013-04-09T21:00:28.000Z:\n\nIn Chrome stable, go to chrome:flags and enable &quot;Experimental APIs&quot;\nLoad the Caja playground and note the autoswitcher switches to ES5/3\n", "created": "2015-04-16 05:21:09"}, {"url": "https://github.com/google/caja/issues/1695", "closed": "2015-04-16 05:21:09", "ttf": 0.0002777777777777778, "title": "ES5/3 markFuncFreeze leaves .prototype undefended", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1695](https://code.google.com/p/google-caja/issues/detail?id=1695) created by kpreid.switchb.org on 2013-04-09T18:38:51.000Z:\n\nES5/3 internally uses markFuncFreeze in a fashion which suggests that it is intended that the resulting function is (trivially) transitively immutable (ignoring prototypes). However, it leaves the .prototype property untouched, so any such function, if not otherwise defended, has an accessible non-frozen .prototype object.\n\nUnless we find a reason to do otherwise, I propose that markFuncFreeze set .prototype to null; or, if that proves to be problematic, that it freeze the .prototype.\n\nThe function should also perhaps be renamed since it is no longer the composition of markFunc and freeze.\n\n(For the most part, this is not a issue for the taming frame, because anything we care about will have gotten def()ed, but there are corners by which I discovered this.)\n", "created": "2015-04-16 05:21:00"}, {"url": "https://github.com/google/caja/issues/1692", "closed": "2015-04-16 05:20:48", "ttf": 0.0002777777777777778, "title": "innerHTML setter needlessly returns a value", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1692](https://code.google.com/p/google-caja/issues/detail?id=1692) created by kpreid.switchb.org on 2013-04-08T21:45:06.000Z:\n\nin Domado, element.innerHTML's setter returns a value. This is unnecessary and harmless, but it should be removed to avoid confusion.\n", "created": "2015-04-16 05:20:43"}, {"url": "https://github.com/google/caja/issues/1689", "closed": "2015-04-16 05:20:36", "ttf": 0.0002777777777777778, "title": "ES53 url encodes the fragment", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1689](https://code.google.com/p/google-caja/issues/detail?id=1689) created by cgoldfeder@google.com on 2013-04-05T16:43:46.000Z:\n\nCajole this code:\n\n&lt;a href='http://example.com/#/foo'&gt;foo&lt;/a&gt;\n\nIn ES53 this becomes &quot;http://example.com/#%2ffoo&quot; but it's correctly &quot;http://example.com/#/foo&quot; in ES5.\n", "created": "2015-04-16 05:20:34"}, {"url": "https://github.com/google/caja/issues/1688", "closed": "2015-04-16 05:20:34", "ttf": 0.0002777777777777778, "title": "Firefox 20 issue: cannot use the given object as a weak map key", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1688](https://code.google.com/p/google-caja/issues/detail?id=1688) created by Masterofallfps on 2013-04-03T23:55:21.000Z:\n\nOn Firefox version 20.0 (Windows 8), triggered event handlers such as onclick cause &quot;cannot use the given object as a weak map key&quot; error to be thrown at a point before control is handed over to the function which should be called. This behavior can be seen at on the Google Caja Playground (when using Firefox 20) with any of the example applications which make use of such event handlers (the Unboxed Game for example). \n\n<b>What steps will reproduce the problem?</b>\n1. Load Firefox 20.0. \n2. Go to the Google Caja Playground and load the &quot;Unboxed Game&quot;.\n3. Click any of the boxes or the restart button.\n4. &quot;Uncaught script error: 'cannot use the given object as a weak map key' in source: 'unknown' at line: 0&quot; should be displayed in the Runtime Messages.\n\n<b>What is the expected output? What do you see instead?</b>\nThe expected result is the event being handed over to the function the event called. The actual result is the error is displayed and nothing else happens. \n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 05:20:07"}, {"url": "https://github.com/google/caja/issues/1687", "closed": "2015-04-16 05:20:07", "ttf": 0.0002777777777777778, "title": "Chrome 28.0.1480.0 (canary) Object.create fails when Object.prototype is frozen", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1687](https://code.google.com/p/google-caja/issues/detail?id=1687) created by kpreid.switchb.org on 2013-03-29T22:28:46.000Z:\n\nOn Chrome 28.0.1456.0 (canary), **proto** is presented as a magic data property on Object.prototype, which cannot be made non-configurable (attempts silently fail), and whose reassignment modifies the inheriting object's [[Prototype]](if extensible, as required by spec). I understand that this is the intended behavior, and future work in V8 will modify it into an accessor property.\n\nHowever, its silent nonconfigurability causes SES to fail to start because Object.isFrozen(Object.prototype) is always false. We should either repair Object.isFrozen and Object.getOwnPropertyDescriptor to make things look as immutable as they are, or confirm that this intermediate behavior is not going to make it into a Chrome release.\n\n&gt; Object.getOwnPropertyDescriptor(Object.prototype, '**proto**')\nObject {value: null, writable: true, enumerable: false, configurable: true}\n&gt; Object.freeze(Object.prototype)\nObject {}\n&gt; Object.getOwnPropertyDescriptor(Object.prototype, '**proto**')\nObject {value: null, writable: true, enumerable: false, configurable: true}\n&gt; Object.isFrozen(Object.prototype)\nfalse\n&gt; Object.defineProperty(Object.prototype, '**proto**', {value: null})\nObject {}\n&gt; Object.isFrozen(Object.prototype)\nfalse\n&gt; Object.isExtensible(Object.prototype)\nfalse\n&gt; Object.getOwnPropertyDescriptor({}, '**proto**')\nundefined\n&gt; var o = {}; Object.freeze(o); o.**proto** = {x:1}\nTypeError: #&lt;Object&gt; is not extensible\n", "created": "2015-04-16 05:19:49"}, {"url": "https://github.com/google/caja/issues/1686", "closed": "2015-04-16 05:19:49", "ttf": 0.0002777777777777778, "title": "Misleading error message on virtualized unknown attribute", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1686](https://code.google.com/p/google-caja/issues/detail?id=1686) created by jasvir on 2013-03-29T20:58:46.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Cajole  &lt;div id=&quot;contentwrap&quot; itemscope itemtype=&quot;http://schema.org/CreativeWork&quot;&gt;\n\nNote that the error message suggests &quot;itemtype&quot; is removed but it is really just renamed and virutalized:\nWARNING unknown:1+34 - 42: removing disallowed attribute itemtype on tag div:unknown:1: &lt;div id=&quot;contentwrap&quot; itemscope itemtype=&quot;http://schema.org/CreativeWork&quot;&gt;\n\n<b>What is the expected output? What do you see instead?</b>\n\nThe error message should be accurate.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 05:19:44"}, {"url": "https://github.com/google/caja/issues/1683", "closed": "2015-04-16 05:19:34", "ttf": 0.0002777777777777778, "title": "ES5/3 objects can have writable numerics after freeze", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1683](https://code.google.com/p/google-caja/issues/detail?id=1683) created by kpreid.switchb.org on 2013-03-28T21:13:33.000Z:\n\nCaja r5330, Chrome 26.0.1410.43 or Firefox 19.0.2.\n\nFor any of the deodorized objects (Function.prototype, String.prototype, RegExp.prototype, RegExp), if no numeric property of it has been mentioned and it is def()ed, its NUM___ descriptor will be writable and configurable afterward.\n\nThe following code for the playground demonstrates the problem \u2014 it will log 'foo', indicating that data was stored on an allegedly frozen object. If the commented section is uncommented, or if a numeric property is written, then the problem will disappear.\n\n\u200b&lt;script&gt;\n  var gopd = Object.getOwnPropertyDescriptor;\n  var specimen = String.prototype;\n\n  cajaVM.log(/_JSON.stringify(gopd(specimen, '0')) + ' ' + JSON.stringify(gopd(specimen, '-1'))_/);\n  cajaVM.def(specimen);\n  cajaVM.log(JSON.stringify(gopd(specimen, '0')) + ' ' + JSON.stringify(gopd(specimen, '-1')));\n  specimen[0] = 'foo';\n  cajaVM.log(specimen[0]);\n&lt;/script&gt;\u200b\n", "created": "2015-04-16 05:19:28"}, {"url": "https://github.com/google/caja/issues/1682", "closed": "2015-04-16 05:19:27", "ttf": 0.0002777777777777778, "title": "Unnecessary failover to ES53 occurs in Chrome 25", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1682](https://code.google.com/p/google-caja/issues/detail?id=1682) created by jasvir@google.com on 2013-03-28T17:25:43.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  On Chrome Version 25.0.1364.172  visit http://5330.caja.appspot.com/ vs http://5317.caja.appspot.com/\n\nWith v5530 (actually with v5237+) the following logs are generated and a failover to ES5/3 occurs.\n\nSES initialization ses-guest-frame.js:257\n Repaired: Non-deletable RegExp statics are a global communication channel ses-guest-frame.js:236\n Repaired: Date.prototype is a global communication channel ses-guest-frame.js:236\n Repaired: Array forEach converts primitive thisObj arg to object ses-guest-frame.js:236\n Repaired: JSON.parse confused by &quot;**proto**&quot; ses-guest-frame.js:236\n Repaired: Defining **proto** on non-extensible object fails silently ses-guest-frame.js:236\n Not repaired: Array.prototype.push ignores sealing ses-guest-frame.js:236\n Not repaired: Array.prototype.push does not throw on a frozen array ses-guest-frame.js:236\n Not repaired: Extending an array can modify read-only array length ses-guest-frame.js:236\n Not repaired: All objects have non-configurable **proto** ses-guest-frame.js:236\n Max Severity: Unsafe spec violation but no known exploits(2) is not SES-safe. ses-guest-frame.js:236\n 442 Apparently fine ses-guest-frame.js:236\n 4 Cannot be poisoned ses-guest-frame.js:236\n 11 Deleted ses-guest-frame.js:236\n 1 Skipped ses-guest-frame.js:236\n Max Severity: Not isolated(5) is not SES-safe. ses-guest-frame.js:236\n initSES succeeded. ses-guest-frame.js:236\nSES initialization ses-taming-frame.js:1005\n Repaired: Non-deletable RegExp statics are a global communication channel ses-taming-frame.js:984\n Repaired: Date.prototype is a global communication channel ses-taming-frame.js:984\n Repaired: Array forEach converts primitive thisObj arg to object ses-taming-frame.js:984\n Repaired: JSON.parse confused by &quot;**proto**&quot; ses-taming-frame.js:984\n Repaired: Defining **proto** on non-extensible object fails silently ses-taming-frame.js:984\n Not repaired: Array.prototype.push ignores sealing ses-taming-frame.js:984\n Not repaired: Array.prototype.push does not throw on a frozen array ses-taming-frame.js:984\n Not repaired: Extending an array can modify read-only array length ses-taming-frame.js:984\n Not repaired: All objects have non-configurable **proto** ses-taming-frame.js:984\n Max Severity: Unsafe spec violation but no known exploits(2) is not SES-safe. ses-taming-frame.js:984\n 442 Apparently fine ses-taming-frame.js:984\n 4 Cannot be poisoned ses-taming-frame.js:984\n 11 Deleted ses-taming-frame.js:984\n 1 Skipped ses-taming-frame.js:984\n Max Severity: Not isolated(5) is not SES-safe. ses-taming-frame.js:984\n initSES succeeded. ses-taming-frame.js:984\nUnable to use SES.  Switching to ES53. \n\nWith v5517 (actually with &lt;=v5236) the following logs are generated and ES5 mode runs.\nSES initialization ses-guest-frame.js:257\n Repaired: Non-deletable RegExp statics are a global communication channel ses-guest-frame.js:236\n Repaired: Date.prototype is a global communication channel ses-guest-frame.js:236\n Repaired: Array forEach converts primitive thisObj arg to object ses-guest-frame.js:236\n Repaired: JSON.parse confused by &quot;**proto**&quot; ses-guest-frame.js:236\n Repaired: Defining **proto** on non-extensible object fails silently ses-guest-frame.js:236\n Not repaired: Array.prototype.push ignores sealing ses-guest-frame.js:236\n Not repaired: Array.prototype.push does not throw on a frozen array ses-guest-frame.js:236\n Not repaired: Extending an array can modify read-only array length ses-guest-frame.js:236\n Max Severity: Unsafe spec violation but no known exploits(2) is not SES-safe. ses-guest-frame.js:236\n 442 Apparently fine ses-guest-frame.js:236\n 14 Deleted ses-guest-frame.js:236\n 1 Skipped ses-guest-frame.js:236\n Max Severity: Unsafe spec violation but no known exploits(2) is not SES-safe. ses-guest-frame.js:236\n initSES succeeded. ses-guest-frame.js:236\nSES initialization ses-taming-frame.js:1005\n Repaired: Non-deletable RegExp statics are a global communication channel ses-taming-frame.js:984\n Repaired: Date.prototype is a global communication channel ses-taming-frame.js:984\n Repaired: Array forEach converts primitive thisObj arg to object ses-taming-frame.js:984\n Repaired: JSON.parse confused by &quot;**proto**&quot; ses-taming-frame.js:984\n Repaired: Defining **proto** on non-extensible object fails silently ses-taming-frame.js:984\n Not repaired: Array.prototype.push ignores sealing ses-taming-frame.js:984\n Not repaired: Array.prototype.push does not throw on a frozen array ses-taming-frame.js:984\n Not repaired: Extending an array can modify read-only array length ses-taming-frame.js:984\n Max Severity: Unsafe spec violation but no known exploits(2) is not SES-safe. ses-taming-frame.js:984\n 442 Apparently fine ses-taming-frame.js:984\n 14 Deleted ses-taming-frame.js:984\n 1 Skipped ses-taming-frame.js:984\n Max Severity: Unsafe spec violation but no known exploits(2) is not SES-safe. ses-taming-frame.js:984\n initSES succeeded. \n\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 05:19:20"}, {"url": "https://github.com/google/caja/issues/1674", "closed": "2015-04-16 05:18:24", "ttf": 0.0002777777777777778, "title": "r5322 broke resizing/scrolling tests on Chrome", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1674](https://code.google.com/p/google-caja/issues/detail?id=1674) created by kpreid.switchb.org on 2013-03-19T18:57:43.000Z:\n\nr5322 &quot;Give browser tests a makeover.&quot; causes es53-test-domado-special tests testResizing and testScrolling to fail on Chrome 25.0.1364.172.\n", "created": "2015-04-16 05:18:21"}, {"url": "https://github.com/google/caja/issues/1673", "closed": "2015-04-16 05:18:21", "ttf": 0.0002777777777777778, "title": "CSS :hover not permitted by client-side sanitizer", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1673](https://code.google.com/p/google-caja/issues/detail?id=1673) created by kpreid.switchb.org on 2013-03-15T21:52:37.000Z:\n\nCssRewriter seems to permit these pseudo-classes/pseudo-elements:\n:active :after :before :first-child :first-letter :focus :link :hover\n(I am confused about how :visited is handled.)\n\nsanitizecss.js permits only these:\n:after :before :link :visited\n\nThis is inconsistent.\n", "created": "2015-04-16 05:18:15"}, {"url": "https://github.com/google/caja/issues/1672", "closed": "2015-04-16 05:18:14", "ttf": 0.0002777777777777778, "title": "Cajoler in playground (only) rejects forms with no action=", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1672](https://code.google.com/p/google-caja/issues/detail?id=1672) created by kpreid.switchb.org on 2013-03-14T18:02:56.000Z:\n\nThe playground (in ES5/3 mode) will reject &lt;form&gt;&lt;/form&gt; with the error\n\n```\nURI unknown:///unknown is malformed\n```\n\nThis does not seem to occur in other applications such as our test suite or Apps Script.\n", "created": "2015-04-16 05:18:10"}, {"url": "https://github.com/google/caja/issues/1671", "closed": "2015-04-16 05:18:10", "ttf": 0.0002777777777777778, "title": "Taming membrane discards Error instances with custom .name properties", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Component-Taming", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1671](https://code.google.com/p/google-caja/issues/detail?id=1671) created by kpreid.switchb.org on 2013-03-11T18:11:38.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. var e = new Error('foo');\n   e.name = 'MyError';\n2. Pass e through the taming membrane.\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect an Error instance on the other side. Instead I get undefined (on tame) or failure (on untame).\n\nThe problem is that copyBuiltin() does not have a fallback case if the .name is unrecognized.\n", "created": "2015-04-16 05:18:03"}, {"url": "https://github.com/google/caja/issues/1669", "closed": "2015-04-16 05:17:52", "ttf": 0.0002777777777777778, "title": "querySelector handles selector sanitization poorly", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1669](https://code.google.com/p/google-caja/issues/detail?id=1669) created by kpreid.switchb.org on 2013-03-05T19:04:06.000Z:\n\nOur CSS selector filter deletes selectors it does not understand, which cannot be virtualized accurately, or which are not yet properly virtualized (particularly, attribute selectors).\n\nIf this happens to the input to querySelector, then if no selectors remain, a syntax error occurs because we pass the empty string to the browser querySelector. If one or more selectors make it through, the client will receive an unexpectedly shorter list. This behavior is overly inconsistent. Instead:\n1. We should always throw an error if there is a syntax error in the input according to our parser. This will likely require modifying the parser to distinguish syntax errors from whitelist nonmatches.\n2. If the selector cannot be virtualized accurately, then we should either consistently throw, consistently return short results, or implement our own selector engine (maybe borrow Sizzle?) to give accurate results.\n", "created": "2015-04-16 05:17:21"}, {"url": "https://github.com/google/caja/issues/1668", "closed": "2015-04-16 05:17:21", "ttf": 0.0002777777777777778, "title": "ES5/3 taming frame contains undefended methods", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1668](https://code.google.com/p/google-caja/issues/detail?id=1668) created by kpreid.switchb.org on 2013-03-02T00:28:59.000Z:\n\nThe methods of Object.prototype and Array.prototype in ES5/3 are not reachable except via accessor properties; therefore no cajaVM.def() Domado executes ever protects them; therefore these methods are undefended, but exposed to guests.\n\n(In the case of Array, all cases where we currently expose an array are deviations-from-spec where we return a decorated Array instead of a NodeList, but that might change as we offer more APIs.)\n\nExample:\n&lt;script&gt;\n  alert(Object.isExtensible(document.forms.reverse)); // alerts true\n&lt;/script&gt;\u200b\n\nThis is at least an inter-guest channel; it can probably be turned into an exploit by overriding one of the undefended methods' 'call' or 'apply' methods, but I have not been able to construct a working example.\n\nAt the highest level, I would say the problem is that ES5/3 is providing _to the taming frame_ a 'CES' rather than 'SES' environment, and that is how we should approach the fix. I'm not sure how to implement this cleanly, though.\n\n(One possibility, which would make some other things I have wanted to do easier as well, would be to add a conventional way to mark accessor properties as 'treat this like a data property', which cajaVM.def would then recognize and traverse; given this, the taming frame need merely ensure that everything is cajaVM.def()ed.)\n", "created": "2015-04-16 05:17:12"}, {"url": "https://github.com/google/caja/issues/1667", "closed": "2015-04-16 05:17:12", "ttf": 0.0002777777777777778, "title": "ES5/3 property virtualization is unsound", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1667](https://code.google.com/p/google-caja/issues/detail?id=1667) created by kpreid.switchb.org on 2013-02-28T22:19:26.000Z:\n\nThere is an accessor defined for the toString property, which appears to be applying a wrapper to protect the given function from implicit invocations. However, it is not protected from non-assignment property definition:\n    var o = {toString: 0};\nor\n    Object.defineProperty(o, 'toString', {value: 0});\n\nIs this a security issue? Whether or not it is, the rationale for the accessor should be documented inline so the answer to that question is evident.\n\nA related problem: assigning toString does not cause the object to hasOwnProperty:\n    var o = {};\n    o.toString = function(){};\n    alert(Object.prototype.hasOwnProperty.call(o, 'toString'));  // false\n", "created": "2015-04-16 05:16:56"}, {"url": "https://github.com/google/caja/issues/1663", "closed": "2015-04-16 05:16:44", "ttf": 0.0002777777777777778, "title": "escape() and unescape() available in SES but not ES5/3", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1663](https://code.google.com/p/google-caja/issues/detail?id=1663) created by kpreid.switchb.org on 2013-02-28T01:32:08.000Z:\n\nThe builtin functions 'escape' and 'unescape' are whitelisted by SES, but not by ES5/3. This inconsistency should be corrected.\n", "created": "2015-04-16 05:16:42"}, {"url": "https://github.com/google/caja/issues/1661", "closed": "2015-04-16 05:16:42", "ttf": 0.0002777777777777778, "title": "Explicitly freeze [[ThrowTypeError]] and other singletons.", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1661](https://code.google.com/p/google-caja/issues/detail?id=1661) created by kpreid.switchb.org on 2013-02-26T21:29:04.000Z:\n\nhttps://bugs.webkit.org/show_bug.cgi?id=108873 is a bug where the ES5-specified singleton [[ThrowTypeError]] is extensible. As far as I know, this is not an issue for SES because the transitive freezing/whitelisting will reach at least one strict function within SES itself which will contain a reference to [[ThrowTypeError]].\n\nHowever, it seems to me that _in principle_, we ought to give explicit attention to singletons which are ambiently reachable from JS language primitives (in this case, function construction) and make sure they are defended. For example, suppose some crazy person edited the SES whitelist to exclude Array; it is not obvious that this implies that Object.getPrototypeOf([]) is not necessarily frozen.\n", "created": "2015-04-16 05:16:37"}, {"url": "https://github.com/google/caja/issues/1660", "closed": "2015-04-16 05:16:37", "ttf": 0.0002777777777777778, "title": "cajaVM.makeArrayLike doesn't like -1", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1660](https://code.google.com/p/google-caja/issues/detail?id=1660) created by kpreid.switchb.org on 2013-02-21T22:20:11.000Z:\n\nIn SES, cajaVM.makeArrayLike(-1) will attempt to create an ArrayLike supporting 2\u00b3\u00b9-1 elements if it has not previously been called. It appears that the numericGetter implementation of ArrayLike in ES5/3 has the identical bug, but I have not checked.\n\nThe cause is that the condition (!BiggestArrayLike || length &gt; maxLen) is true since there is no BiggestArrayLike yet, and nextUInt31PowerOf2(-1) = 2\u00b3\u00b9-1.\n\nI figure to change these makeArrayLike implementations so that it treats nonsensical inputs as zero (not throwing, because the other ArrayLike implementations entirely ignore the length argument).\n", "created": "2015-04-16 05:16:32"}, {"url": "https://github.com/google/caja/issues/1659", "closed": "2015-04-16 05:16:32", "ttf": 0.0002777777777777778, "title": "mitigateGotchas can throw with undefended prototypes", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1659](https://code.google.com/p/google-caja/issues/detail?id=1659) created by kpreid.switchb.org on 2013-02-21T21:56:44.000Z:\n\nDemo:\n\u200b&lt;script&gt;\n  try {\n    cajaVM.eval('{');\n  } catch (e) {\n    alert(Object.isFrozen(Object.getPrototypeOf(e)));\n  }\n&lt;/script&gt;\n\n\u200bThis throws due to issue 1658, and since mitigateGotchas now lives in a non-SES frame, the exception has an undefended prototype chain. This access can be bootstrapped into modifying the behavior of the mitigator, and therefore rewriting all further evaluations, including any occurring in the taming frame.\n\nEven if issue 1658 in particular, is fixed, we should defend against an unsafe exception; perhaps by having function mitigateGotchas in startSES.js catch any exception thrown and rebuild it with its own prototypes.\n", "created": "2015-04-16 05:16:23"}, {"url": "https://github.com/google/caja/issues/1658", "closed": "2015-04-16 05:16:23", "ttf": 0.0002777777777777778, "title": "mitigateGotchas has broken log wiring", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1658](https://code.google.com/p/google-caja/issues/detail?id=1658) created by kpreid.switchb.org on 2013-02-20T23:06:56.000Z:\n\nmitigateGotchas refers to 'ses.logger.warn', but there is no longer a 'ses.logger' now that it has been moved to another frame. This causes an error unrelated to the parse error.\n", "created": "2015-04-16 05:16:21"}, {"url": "https://github.com/google/caja/issues/1657", "closed": "2015-04-16 05:16:21", "ttf": 0.0002777777777777778, "title": "Circular var initialization misexecuted by SES", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1657](https://code.google.com/p/google-caja/issues/detail?id=1657) created by kpreid.switchb.org on 2013-02-20T22:17:00.000Z:\n\nFrom the jQuery 1.9.1 test suite:\n    var Sizzle = Sizzle || jQuery.find;\n\n'Sizzle' is not (normally) defined; this works in normal scripting because the variable declaration applies before the initialization runs, but SES rewrites it to\n    this.Sizzle = Sizzle || jQuery.find;\nwhich does not have the same semantics and throws a ReferenceError instead.\n\nPerhaps what should happen is that all top-level 'x' (reads as well as writes) are rewritten to 'this.x' iff a var declaration exists somewhere in that scope?\n", "created": "2015-04-16 05:16:16"}, {"url": "https://github.com/google/caja/issues/1655", "closed": "2015-04-16 05:16:07", "ttf": 0.0002777777777777778, "title": "<script>'s 'this' is not window in ES5 mode", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1655](https://code.google.com/p/google-caja/issues/detail?id=1655) created by kpreid.switchb.org on 2013-02-20T19:14:37.000Z:\n\nTrue in browser, true in ES5/3, false in ES5 mode:\n&lt;script&gt;\n  &quot;use strict&quot;;\n  alert(this === window);\n&lt;/script&gt;\n\nAffects jQuery 1.9.1 test suite startup.\n", "created": "2015-04-16 05:15:58"}, {"url": "https://github.com/google/caja/issues/1654", "closed": "2015-04-16 05:15:58", "ttf": 0.0002777777777777778, "title": "Taming membrane may leak host references if host makes use of taming-frame-defined objects", "commits": {}, "user": "kpreid", "labels": ["Component-Taming", "Priority-Medium", "Security", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 1654](https://code.google.com/p/google-caja/issues/detail?id=1654) created by kpreid.switchb.org on 2013-02-16T00:35:22.000Z:\n\nThe taming membrane's tame() says, as of r5293:\n\n```\nif (tameByFeral.has(f)) { return tameByFeral.get(f); }\nif (privilegedAccess.isDefinedInCajaFrame(f)) { return f; }\n```\n\nThat is, objects defined in the taming frame are not copied or proxied, but merely transferred. This punctures the membrane in the event that feral code performs the following steps:\n1. Acquire a reference to a DefinedInCajaFrame object. (Note that this category includes various objects exposed by the Caja API such as GuestManager, and any incidental arrays, records, etc. returned by those interfaces.)\n2. Cause said object to contain a reference to a feral object (such as by assigning a property).\n3. Pass said object to the guest via the taming membrane.\n\nNote that an innocent host may perform steps 2 and 3 with the assumption that the taming membrane will, as it usually does, provide the guest with a tamed view of said reference; I claim that it is _surprising_ that if the object happens to originate from the taming frame there arises a vulnerability.\n\nNote that this risk applies only to objects which\n  \u2022 do _not_ have a tame twin (else the first condition in the quoted code applies)\n  \u2022 and are DefinedInCajaFrame.\nFor example, when the taming frame untames an object such as a Date, it makes a copy (which belongs to the taming frame and so meets the second condition) and then makes it the feral twin of the guest's date (which makes it safe due to the first condition).\n\nIhab and I have discussed this issue, and the best option we currently see is to remove the second condition, so that objects do not live on both sides of the membrane even if they are defined in the taming frame, and see if anything breaks. (Unfortunately, it is possible that what breaks is users of Caja, but as established above, they were doing something with unobvious risks. In the case where the object is a builtin (as defined by copyBuiltin), the taming will work as before except that the object is copied.\n\nAnother solution, which we might want to implement for other reasons, is to ensure that the only objects exposed to feral code are those which are registered in the taming membrane (satisfying the first condition). However, this would still make the second condition apparently unnecessary.\n", "created": "2015-04-16 05:15:53"}, {"url": "https://github.com/google/caja/issues/1652", "closed": "2015-04-16 05:15:48", "ttf": 0.0002777777777777778, "title": "Dynamic <script>s are discarded *silently* in ES5/3", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 1652](https://code.google.com/p/google-caja/issues/detail?id=1652) created by kpreid.switchb.org on 2013-02-12T18:26:28.000Z:\n\ndocument.write('&lt;script ...&gt;') is not supported in ES5/3 mode, and will not be. However, we do not give any error message, and just discard the attempt. For debuggability, we should report an error in the console and/or to window.onerror.\n", "created": "2015-04-16 05:15:44"}, {"url": "https://github.com/google/caja/issues/1650", "closed": "2015-04-16 05:15:28", "ttf": 0.0002777777777777778, "title": "Allow overriding of prototype properties on ExpandoProxyHandler'd objects.", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1650](https://code.google.com/p/google-caja/issues/detail?id=1650) created by kpreid.switchb.org on 2013-02-11T22:17:51.000Z:\n\nAngularJS does something like this:\n  document.createEvent('HTMLEvents').preventDefault = function(){};\nIf Domado has proxies available, then the event object will be an ExpandoProxyHandler, which (since the property already exists) turns this assignment into a defineProperty on the prototypical TameEvent, which is non-extensible (due to the ES5/3 proxy prototype constraint) and therefore refuses.\n\nSince the purpose of ExpandoProxyHandler is to redirect instance-level modifications to the expando storage, we should probably take out that case (if (name in this.target)) in ExpandoProxyHandler.prototype.defineProperty.\n\nIn the end, what should happen is that the tamperProof-generated setter on the prototype is invoked with this === the proxy, which performs a defineProperty on the proxy (so far, this is the current situation) which then is forwarded to the expando storage.\n\nOther notes:\n- Since ExpandoProxyHandler forwards, why are the proxies being made with the target (TameFoo) object as prototype? This seems redundant and confusing, and also means that the target is exposed to guests. I have forgotten my rationale when I wrote that code.\n- TameCustomHTMLEvent doesn't actually need ExpandoProxyHandler since it is 1:1 with feral events.\n- We could generally use some more testing for correct semantics of our proxy handlers.\n", "created": "2015-04-16 05:15:22"}, {"url": "https://github.com/google/caja/issues/1649", "closed": "2015-04-16 05:15:21", "ttf": 0.0002777777777777778, "title": "Link targets are followed unconditionally irrespective of return value from click handler", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1649](https://code.google.com/p/google-caja/issues/detail?id=1649) created by jasvir on 2013-02-11T16:52:26.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  In the following snippet, returning false from click handler should not result in a browser redirect.\n\n  &lt;a id=&quot;linkNoProp&quot; href=&quot;https://www.google.com&quot;&gt;link return false&lt;/a&gt;\n  &lt;script&gt;document.getElementById('linkNoProp').onclick = function() {return false;};&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\n\nInstead the browser redirects to the target link unconditionally.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 05:15:19"}, {"url": "https://github.com/google/caja/issues/1645", "closed": "2015-04-16 05:15:07", "ttf": 0.0002777777777777778, "title": "jQuery 1.9.0 fails in both ES5 and ES5/3", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Priority-High", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1645](https://code.google.com/p/google-caja/issues/detail?id=1645) created by ihab.awad on 2013-02-06T07:18:45.000Z:\n\nIn the playground, r5238, the following code:\n\n  &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js&quot;\n      type=&quot;text/javascript&quot;&gt;\n  &lt;/script&gt;\n  &lt;div&gt;foo&lt;/div&gt;\n\ncauses in ES5/3:\n\n  Uncaught script error: 'Cannot read property 'expando_v___' of undefined' in source: 'jquery.min.js' at line: 1\n  jquery.min.js:1: Cannot read property 'expando_v___' of undefined\n  Rejecting complex event handler div onsubmit=&quot;t&quot; es53-taming-frame.js:6401\n  Rejecting &lt;div&gt;.setAttribute( onsubmit , t ) es53-taming-frame.js:6401\n\nand in ES5:\n\n  Uncaught script error: 'TypeError: Cannot read property 'expando' of undefined' in source:\n      'http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js' at line: 1\n\nThe jQuery file itself:\n\n  http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.js\n\ncontains some code that says:\n\n  // Support: IE&lt;9 (lack submit/change bubble), Firefox 17+ (lack focusin event)\n  // Beware of CSP restrictions (https://developer.mozilla.org/en/Security/CSP), test/csp.php\n  for ( i in { submit: true, change: true, focusin: true }) {\n    div.setAttribute( eventName = &quot;on&quot; + i, &quot;t&quot; );\n    support[ i + &quot;Bubbles&quot; ] = eventName in window || div.attributes[ eventName ].expando === false;\n  }\n\nso we are rejecting the setting of the attribute &quot;onsubmit = t&quot;, then div.attributes.onsubmit is undefined, then we get the error.\n", "created": "2015-04-16 05:14:47"}, {"url": "https://github.com/google/caja/issues/1644", "closed": "2015-04-16 05:14:47", "ttf": 0.0002777777777777778, "title": "interaction beween server param to caja.initialize and XHR unclear", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1644](https://code.google.com/p/google-caja/issues/detail?id=1644) created by dckc@madmode.com on 2013-02-03T03:23:26.000Z:\n\nThe documentation for the server param to caja.initialize could use beefing up. &quot;caja calls home to this server for XHR etc. ...&quot;\n", "created": "2015-04-16 05:14:42"}, {"url": "https://github.com/google/caja/issues/1643", "closed": "2015-04-16 05:14:42", "ttf": 0.0002777777777777778, "title": "Dynamic <script> insertion does not resolve relative URLs", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1643](https://code.google.com/p/google-caja/issues/detail?id=1643) created by kpreid.switchb.org on 2013-02-03T03:14:09.000Z:\n\nIn playground, r5238, Chrome, ES5 mode:\n\n&lt;body&gt;\u200b&lt;script&gt;var s = document.createElement('script'); s.src = 'foo.js'; document.bod\u200b\u200b\u200b\u200b\u200b\u200b\u200by.appendChild(s);&lt;/script&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n\nfails with a 500 error from requesting\nhttp://caja.appspot.com/cajole?url=foo.js&amp;input-mime-type=text%2Fjavascript&amp;transform=PROXY&amp;callback=caja_ajax_2&amp;alt=json-in-script\n\nTwo bugs:\n1. Cajoler servlet should return 4xx, not 500, because this is a malformed request.\n2. The URL should be resolved to an absolute URL before fetching.\n\nThis interfered with an attempt to use require.js within Caja.\n", "created": "2015-04-16 05:14:36"}, {"url": "https://github.com/google/caja/issues/1641", "closed": "2015-04-16 05:14:31", "ttf": 0.0002777777777777778, "title": "solution to TameNode error hard to find in API reference docs", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1641](https://code.google.com/p/google-caja/issues/detail?id=1641) created by dckc@madmode.com on 2013-02-02T03:46:38.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nI don't know what cajoler version; I got it from\n  &lt;script type=&quot;text/javascript&quot;\n            src=&quot;//caja.appspot.com/caja.js&quot;&gt;\nGoogle Chrome Version 24.0.1312.56\nUbuntu 12.04\n\n<b>What steps will reproduce the problem?</b>\n1. Write somewhat buggy code (we later find out that we should have used unwrapDom)\n2. Get diagnostic such as: Uncaught script error: This operation requires a TameNode in source: &quot;unknown&quot; at line: 0 \n3. Search the API reference ( http://google-caja.googlecode.com/svn/doc/cajajs/index.html ) for TameNode\n4. Find no mention of TameNode\n\n<b>What is the expected output? What do you see instead?</b>\n\nI'd like to see keywords from diagnostics (e.g. TameNode) mentioned in discussion of the relevant parts of the API (e.g. unwrapDom).\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 05:14:22"}, {"url": "https://github.com/google/caja/issues/1640", "closed": "2015-04-16 05:14:22", "ttf": 0.0002777777777777778, "title": "Caja does not support pseudo-elements", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1640](https://code.google.com/p/google-caja/issues/detail?id=1640) created by ihab.awad on 2013-02-02T01:08:28.000Z:\n\nCaja r528 does not support pseudo-elements in either ES5/3 or ES5 mode. The below will display a green 'abc' in the Playground, but will not show the &quot;xyzzy&quot; before and after.\n\n```\n *   *   *   *   *\n```\n\n&lt;html&gt;\n  &lt;head&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;style&gt;\n      .foo:before, .foo:after {\n        content: &quot;xyzzy&quot;\n      }\n      .foo {\n        background-color: green;\n      }\n    &lt;/style&gt;\n    &lt;div class=&quot;foo&quot;&gt;abc&lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\u200b\n", "created": "2015-04-16 05:14:10"}, {"url": "https://github.com/google/caja/issues/1639", "closed": "2015-04-16 05:14:10", "ttf": 0.0002777777777777778, "title": "In ES5 mode if caja.load() loads a text/javascript instead of text/html, document.body is null", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1639](https://code.google.com/p/google-caja/issues/detail?id=1639) created by jasvir on 2013-02-01T19:24:29.000Z:\n\nIf a script is loaded by url instead of an html snippet using the caja.load api as follows:\n\ncaja.load(someEl, caja.policy.net.NO_NETWORK,\n          function(frame) {\n              frame.code('http://fake.url/', 'text/javascript', 'var xxx = document.body.appendChild')\n              .run();\n          });\n}); \n\nExpect xxx to hold a function.  Do not expect the an exception to be thrown:\nUncaught TypeError: Cannot read property 'firstChild' of null \n", "created": "2015-04-16 05:13:57"}, {"url": "https://github.com/google/caja/issues/1637", "closed": "2015-04-16 05:13:55", "ttf": 0.0002777777777777778, "title": "ES5 mode parser dies on unicode escapes in strings", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1637](https://code.google.com/p/google-caja/issues/detail?id=1637) created by jasvir on 2013-01-25T22:48:00.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  In the playground, cajole:\n\nvar x = &quot;\\u03c123&quot;; alert(x);\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect to see &lt;123 alerted.  Instead, the parser errors out with\nUncaught script error: 'Error: Failed to parse program' in source: 'https:' at line: 1\n", "created": "2015-04-16 05:13:48"}, {"url": "https://github.com/google/caja/issues/1636", "closed": "2015-04-16 05:13:48", "ttf": 0.0002777777777777778, "title": "jQuery UI datePicker onclick problems in ES5/3", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1636](https://code.google.com/p/google-caja/issues/detail?id=1636) created by ekoleda+devrel@googlers.com on 2013-01-25T22:47:35.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nCurrent Caja Playgound, Rev 5229, Chrome 24.0.1312.52 beta, Ubuntu 12\n\n<b>What steps will reproduce the problem?</b>\n1. Cajole the following code:\n\n&lt;html lang=&quot;en&quot;&gt;\n  &lt;head&gt;\n    &lt;meta charset=&quot;utf-8&quot; /&gt;\n    &lt;link href=&quot;http://code.jquery.com/ui/1.8.22/themes/base/jquery-ui.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;\n    &lt;script src=&quot;http://code.jquery.com/jquery-1.7.2.min.js&quot; type=&quot;text/javascript&quot; &gt;&lt;/script&gt;\n    &lt;script src=&quot;http://code.jquery.com/ui/1.8.22/jquery-ui.min.js&quot; type=&quot;text/javascript&quot; &gt;&lt;/script&gt;\n    &lt;script&gt;\n      $(function() {\n        $(&quot;#datepicker&quot;).datepicker();\n      });\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Date: &lt;input type=&quot;text&quot; id=&quot;datepicker&quot; /&gt;&lt;/p&gt;  \n  &lt;/body&gt;\n&lt;/html&gt;\n1. Click within the datepicker input box.\n2. Click a date in the resulting popup.\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect the date to be populated in the input box. Instead the click opens a new, blank tab.\n\n<b>Please provide any additional information below.</b>\n\nThis appears to be different than Issue #&nbsp;1496, both in behavior and because it's using jQuery UI 1.8.22. I've tested with even newer jQuery UI versions and they have the same behavior.\n\nApps Script users report that the problem was first seen ~Jan 17, 2013: http://code.google.com/p/google-apps-script-issues/issues/detail?id=2327\n", "created": "2015-04-16 05:12:59"}, {"url": "https://github.com/google/caja/issues/1635", "closed": "2015-04-16 05:12:59", "ttf": 0.0002777777777777778, "title": "SES proxy-implemented ArrayLike has a dysfunctional prototype chain", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1635](https://code.google.com/p/google-caja/issues/detail?id=1635) created by kpreid.switchb.org on 2013-01-25T22:33:56.000Z:\n\nChrome 26.0.1393.0 canary, Experimental JavaScript enabled in chrome://flags/ (which enables proxies), ES5 mode.\n\n  var o;\n  for (o = cajaVM.makeArrayLike(10).prototype; o; o = Object.getPrototypeOf(o)) {\n    Object.getOwnPropertyNames(o);\n  }\n\nwill fail with the following system-generated error:\n\n  TypeError: Trap 'getOwnPropertyNames' returned non-object undefined\n\nThis is visible to guest code which traverses the prototype chain of a NodeList.\n\ngetOwnPN() in the ArrayLike implementation indeed has a case where it returns undefined. Perhaps it should be returning ['length'] instead?\n", "created": "2015-04-16 05:12:48"}, {"url": "https://github.com/google/caja/issues/1634", "closed": "2015-04-16 05:12:48", "ttf": 0.0002777777777777778, "title": "SES rewriter fails on 'var' in 'for'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1634](https://code.google.com/p/google-caja/issues/detail?id=1634) created by kpreid.switchb.org on 2013-01-25T22:26:13.000Z:\n\nEvaluating this code on the live playground (r5229) fails inside ses.mitigateGotchas:\n\n```\nfor (var o = p;;);\n```\n\nError: Unknown expression type: ExpressionStatement\n  at Error (?::)\n  at FakeError (http://caja.appspot.com/5229/ses-guest-frame.js?debug=1:4246:13)\n  at generateExpression (http://caja.appspot.com/5229/ses-guest-frame.js?debug=1:7929:19)\n  at ? (http://caja.appspot.com/5229/ses-guest-frame.js?debug=1:8228:37)\n  at withIndent (http://caja.appspot.com/5229/ses-guest-frame.js?debug=1:7133:21)\n  at generateStatement (http://caja.appspot.com/5229/ses-guest-frame.js?debug=1:8222:13)\n  at generateStatement (http://caja.appspot.com/5229/ses-guest-frame.js?debug=1:8301:21)\n  at generate (http://caja.appspot.com/5229/ses-guest-frame.js?debug=1:8463:22)\n  at ses.mitigateGotchas (http://caja.appspot.com/5229/ses-guest-frame.js?debug=1:9366:29)\n  at compileModule (http://caja.appspot.com/5229/ses-guest-frame.js?debug=1:10263:29) \n", "created": "2015-04-16 05:12:41"}, {"url": "https://github.com/google/caja/issues/1633", "closed": "2015-04-16 05:12:41", "ttf": 0.0002777777777777778, "title": "Support init*Event", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1633](https://code.google.com/p/google-caja/issues/detail?id=1633) created by metaweta on 2013-01-25T18:45:31.000Z:\n\nE.g.\n\nvar event = document.createEvent('MouseEvents');\nevent.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\n", "created": "2015-04-16 05:12:34"}, {"url": "https://github.com/google/caja/issues/1631", "closed": "2015-04-16 05:12:27", "ttf": 0.0002777777777777778, "title": "ES5/3 gives no property descriptor for <function>.prototype", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1631](https://code.google.com/p/google-caja/issues/detail?id=1631) created by kpreid.switchb.org on 2013-01-24T17:29:38.000Z:\n\nEvaluating\n\n```\nObject.getOwnPropertyDescriptor(function() {}, 'prototype')\n```\n\nin ES5/3 returns undefined, whereas evaluating\n\n```\nObject.defineProperty(function() {}, 'prototype', {get: function() {}})\n```\n\nthrows &quot;The property 'prototype' is not configurable.&quot; This is self-inconsistent.\n\nSingle-stepping showed that the function object has no prototype_v___ property.\n", "created": "2015-04-16 05:12:14"}, {"url": "https://github.com/google/caja/issues/1630", "closed": "2015-04-16 05:12:13", "ttf": 0.0002777777777777778, "title": "Playground failing badly in ES5 mode", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 1630](https://code.google.com/p/google-caja/issues/detail?id=1630) created by erights on 2013-01-24T03:11:17.000Z:\n\nI classified this as Private because I don't know what the problem is, and it seems like the kind of thing that might be dangerous. On Chrome 24.0.1312.52 on Mac OSX 10.8.2\n\nOn the playground in ES5 mode, at https://caja.appspot.com/?es5=true\nIf I type into the source pane\n\n&lt;script&gt;\ncajaVM.log('x');\n&lt;/script&gt;\u200b\n\nand hit the Cajole button, I see nothing under the Compiler or Runtime Messages tabs. (Btw, I see only &lt;script&gt;\n&lt;/script&gt; in the Cajoled Source tab. Is this a known bug?)\n\nBut in the JavaScript debugging console, I see many occurrences of\n\nUnsafe JavaScript attempt to access frame with URL https://plusone.google.com/_/+1/fastbutton?bsv&amp;size=medium&amp;hl=en-US&amp;origin=\u2026tart%2Concircled&amp;id=I0_1358996226435&amp;parent=https%3A%2F%2Fcaja.appspot.com from frame with URL about:blank. Domains, protocols and ports must match.\n ses-taming-frame.js:26760\nisDefinedInCajaFrame ses-taming-frame.js:26760\ncheckCanControlTaming ses-taming-frame.js:25122\nmarkTameAsFunction ses-taming-frame.js:25138\ntameRecordResult\nmg B5C69BA9883CFD4356A25771E312FE93.cache.html:1578\n$wnd.caja.load.idClass B5C69BA9883CFD4356A25771E312FE93.cache.html:1475\n(anonymous function) ses-taming-frame.js:26786\nframeWin.cajaIframeDone___ caja.js:477\n(anonymous function) ses-guest-frame.js:11334\n\nOTOH, if I do the same thing at http://caja.appspot.com/?es5=true\n\nI see the same tab contents, but the repeated error in the console is instead\n\nUnsafe JavaScript attempt to access frame with URL https://plusone.google.com/_/+1/fastbutton?bsv&amp;size=medium&amp;hl=en-US&amp;origin=\u2026start%2Concircled&amp;id=I0_1358996807173&amp;parent=http%3A%2F%2Fcaja.appspot.com from frame with URL about:blank. The frame requesting access has a protocol of 'http', the frame being accessed has a protocol of 'https'. Protocols must match.\n ses-taming-frame.js:26760\nisDefinedInCajaFrame ses-taming-frame.js:26760\ncheckCanControlTaming ses-taming-frame.js:25122\nmarkTameAsFunction ses-taming-frame.js:25138\ntameRecordResult\nmg B5C69BA9883CFD4356A25771E312FE93.cache.html:1578\n$wnd.caja.load.idClass B5C69BA9883CFD4356A25771E312FE93.cache.html:1475\n(anonymous function) ses-taming-frame.js:26786\nconsumeIfReady caja.js:457\nself.make caja.js:442\nmakeES5Frame ses-taming-frame.js:26774\n(anonymous function) caja.js:232\n\nSince the URLs in question seem to be about the +1 button that appears on the playground, in case it's relevant, I have +1'ed the playground in the past. It does render red, indicating I think that I +1ed it.\n\nPlease let me know if you have any trouble reproducing either problem.\n", "created": "2015-04-16 05:12:04"}, {"url": "https://github.com/google/caja/issues/1629", "closed": "2015-04-16 05:12:04", "ttf": 0.0002777777777777778, "title": "Typeof rewriting is broken around 'this'", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1629](https://code.google.com/p/google-caja/issues/detail?id=1629) created by metaweta on 2013-01-24T02:18:02.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\n&lt;script&gt;\nfunction A() {}\nA.prototype.x = 1;\nA.prototype.xType = function() {\n  return typeof this.x;\n}\nvar a = new A;\ncajaVM.log(a.xType());\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nExpect 'number', see 'undefined'\n\n<b>Please use labels and text to provide additional information.</b>\n\nThe typeof operator gets rewritten to\n\nA.prototype.xType = function () {\n    return function () {\n        try {\n            return typeof this.x;\n        } catch (e) {\n            return 'undefined';\n        }\n    }();\n};\n\nHere, the function is invoked with 'this' bound to undefined.  The rewrite should be something like\n\nA.prototype.xType = function () {\n    return function (self) {\n        try {\n            return typeof self.x;\n        } catch (e) {\n            return 'undefined';\n        }\n    }(this);\n};\n", "created": "2015-04-16 05:11:40"}, {"url": "https://github.com/google/caja/issues/1628", "closed": "2015-04-16 05:11:40", "ttf": 0.0002777777777777778, "title": "In ES5 mode document.documentElement is null if there's no head and body", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1628](https://code.google.com/p/google-caja/issues/detail?id=1628) created by jasvir on 2013-01-23T05:55:30.000Z:\n\nCajole the following in ES5 vs ES53 modes:\n\n&lt;script&gt;\n  cajaVM.log(document.documentElement);\n  setTimeout(function() { cajaVM.log(document.body); }, 0)\n&lt;/script&gt;\n\nvs\n\n&lt;html&gt;\n&lt;script&gt;\n  cajaVM.log(document.documentElement);\n  setTimeout(function() { cajaVM.log(document.body); }, 0)\n&lt;/script&gt;\n&lt;/html&gt;\n\njQuery at least relies on document.documentElement being non-null irrespective of whether the document markup has html, head or body tags.\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect two non-null messages in each case.  Instead in ES5 without head and body tags, I see null and an error:\nUncaught TypeError: Cannot read property 'firstChild' of null \n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 05:11:20"}, {"url": "https://github.com/google/caja/issues/1627", "closed": "2015-04-16 05:11:20", "ttf": 0.0002777777777777778, "title": "Allow window.toString to be writable", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1627](https://code.google.com/p/google-caja/issues/detail?id=1627) created by metaweta on 2013-01-22T19:27:04.000Z:\n\nvar toString = function(){return 'foo';};\n\nresults in \n\nUncaught script error: 'TypeError: Cannot assign to read only property 'toString' of [domado object Window]' in source: 'https:' at line: 1\n\nwhen it should be allowed.\n", "created": "2015-04-16 05:11:11"}, {"url": "https://github.com/google/caja/issues/1626", "closed": "2015-04-16 05:11:10", "ttf": 0.0002777777777777778, "title": "why need isNestedInAnchor \uff1f", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1626](https://code.google.com/p/google-caja/issues/detail?id=1626) created by alibaba.shiba on 2013-01-22T03:11:13.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\n<b>What steps will reproduce the problem?</b>\n1. getComputedStyle method\uff0ccan't get the tag \u201ca&quot; style.\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\nexpect get right value\n\n<b>Please provide any additional information below.</b>\nI finded the function 'isNestedInAnchor' in the es53-taming-frame.js source code.\nbut I want to know why need the isNestedInAnchor. \nAny consideration for this\uff1f e.g security\uff1f\nI Consult it\uff01\n", "created": "2015-04-16 05:11:08"}, {"url": "https://github.com/google/caja/issues/1623", "closed": "2015-04-16 05:10:56", "ttf": 0.0002777777777777778, "title": "Third-level objects in SES environment are not frozen", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1623](https://code.google.com/p/google-caja/issues/detail?id=1623) created by kpreid.switchb.org on 2013-01-16T23:04:09.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nr5215, Chrome 26.0.1383.0 canary or Firefox 17.0.1 (does not appear to be browser-specific)\n\n<b>What steps will reproduce the problem?</b>\n&gt; Object.isExtensible(Array.prototype.some)\ntrue\n&gt; Array.prototype.some.foo = 1\n1\n&gt; Array.prototype.some.foo\n1\n&gt; cajaVM.sharedImports.Array.prototype.some.foo\n1\n\n<b>What is the expected output? What do you see instead?</b>\nI expect everything reachable from sharedImports to be frozen, and this is not the case for Array.prototype.some. This problem appears to occur for all of the properties of Array.prototype, Function.prototype, and String.prototype.\n\nThis can at least be used to establish communication between guests, and may be a complete breach by way of modifying prototypes of the taming frame.\n", "created": "2015-04-16 05:10:47"}, {"url": "https://github.com/google/caja/issues/1622", "closed": "2015-04-16 05:10:47", "ttf": 0.0002777777777777778, "title": "ES5 mitigateGotchas fails because of parser error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1622](https://code.google.com/p/google-caja/issues/detail?id=1622) created by jasvir on 2013-01-15T04:04:37.000Z:\n\nUpstream error causes errors rendering ObjectExpressions.  This causes top-level var mitigation to fail.\n\nTest case:\n\n&lt;script&gt;\n  var xxx = { foo: 1 };\n  function myTopFunc() { return xxx.foo; }\n&lt;/script&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n  assertEquals(1, myTopFunc());\n&lt;/script&gt;\n\nFails with Uncaught script error: 'ReferenceError: &quot;myTopFunc&quot; blocked by Caja' in source: 'https:' at line: 1\n", "created": "2015-04-16 05:10:40"}, {"url": "https://github.com/google/caja/issues/1620", "closed": "2015-04-16 05:10:38", "ttf": 0.0002777777777777778, "title": "Not providing a DOM node to caja.load() results in unexpected missing functionality", "commits": {}, "user": "kpreid", "labels": ["Component-CajaJS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1620](https://code.google.com/p/google-caja/issues/detail?id=1620) created by jasvir on 2013-01-15T00:18:52.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Don't provide guest code a root DOM node ie.\n\nvar dom = undefined vs dom = document.createElement('div')\ncaja.load(dom, caja.policy.net.ALL, function(f) {\n  f.code('http://www.fake.url/', 'text/javascript', 'new Object()').run();\n});\n1. Note that guest code does not:\n- have access to any primodials like Object, Array, Function etc.\n- have access to cajaVM.*\n\nThese log an error Uncaught ReferenceError: &quot;Object&quot; blocked by Caja &quot;\n\nAlso the host code has no api to catch uncaught exceptions triggered by guest code since window.onerror only is called for text/html code.\n", "created": "2015-04-16 05:10:35"}, {"url": "https://github.com/google/caja/issues/1619", "closed": "2015-04-16 05:10:35", "ttf": 0.0002777777777777778, "title": "XSS", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1619](https://code.google.com/p/google-caja/issues/detail?id=1619) created by jaumlucas on 2013-01-12T23:40:14.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nCaja Playground\nRev 5211 built on 2013-01-08 15:53:19\n\n<b>What steps will reproduce the problem?</b>\n&lt;html&gt;\n &lt;body&gt;\n &lt;a href=' javascript:alert(document.cookie)'&gt;Google&lt;/a&gt;\n &lt;/body&gt;\n&lt;/html&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nThe expected output is a safe HTML, but the javascript will be executed.\n", "created": "2015-04-16 05:10:24"}, {"url": "https://github.com/google/caja/issues/1618", "closed": "2015-04-16 05:10:24", "ttf": 0.0002777777777777778, "title": "Uncaught Error: shouldn't happen: ES5/3 object passed to makeDOMAccessible", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1618](https://code.google.com/p/google-caja/issues/detail?id=1618) created by eliasll@telia.com on 2013-01-11T17:53:13.000Z:\n\nChrome 18.0.1025469 on Android 4.2.1. Cajolerversion 5191m2.\n\nThe error\n&quot;Uncaught Error: shouldn't happen: ES5/3 object passed to makeDOMAccessible&quot;\nwill appear in the console when the following is executed:\n\ncode.gs:\nfunction doGet() {\n  var oTmplt = HtmlService.createTemplateFromFile('Main');\n  return oTmplt.evaluate();\n}\n\nMain.html:\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script&gt;\n      function onload () {\n        alert('Pre assignment');\n        document.getElementById('form').onsubmit = function(){ alert('Submit')};\n        alert('Post assignment');\n      }\n      window.onload = onload;\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;form id=&quot;form&quot;&gt;\n      &lt;button&gt;Submit&lt;/button&gt;\n    &lt;/form&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\nThe &quot;Pre assignment&quot; alert is shown, then execution stops. Clicking (tapping) the button submits the form without the &quot;Submit&quot; alert being shown. Changing the onsubmit handler assignment into\ndocument.getElementById('form').addEventListener('submit', function(){ alert('Submit')});\nmakes no change.\n\nWorks as expected on Chrome 23.0.1271.97 (Windows), Firefox 17.0.1 (Windows) and Firefox 18.0 (Android).\n\nSeems to be related to http://code.google.com/p/google-apps-script-issues/issues/detail?id=2255\n", "created": "2015-04-16 05:09:53"}, {"url": "https://github.com/google/caja/issues/1617", "closed": "2015-04-16 05:09:52", "ttf": 0.0002777777777777778, "title": "querySelector drops attribute selectors with a colon in the name", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "CSS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1617](https://code.google.com/p/google-caja/issues/detail?id=1617) created by metaweta on 2013-01-09T01:07:01.000Z:\n\ndocument.querySelectorAll('[ng\\:app]');\n\n<b>What is the expected output? What do you see instead?</b>\nI expect the underlying function to be invoked with &quot;CajaGadget0___ [ng\\:app]&quot;, but sanitizeCssSelectors returns the empty string when processing [ng:app].\n\nRelated to issue1606.\n", "created": "2015-04-16 05:09:24"}, {"url": "https://github.com/google/caja/issues/1616", "closed": "2015-04-16 05:09:24", "ttf": 0.0002777777777777778, "title": "Does Bug 2470 from V8 affect Caja?", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1616](https://code.google.com/p/google-caja/issues/detail?id=1616) created by andrebargull on 2013-01-05T17:06:09.000Z:\n\nhttp://code.google.com/p/v8/issues/detail?id=2470\n\nThe Function constructor can be tricked to run arbitrary code (instead of just compiling a function). I haven't yet tested this out, but it may affect Caja/SES...\n\nd8&gt; (function(){  Function(&quot;}), print('this=' + (this)), (function(){&quot;);  })()\nthis=[object global]\n", "created": "2015-04-16 05:08:46"}, {"url": "https://github.com/google/caja/issues/1615", "closed": "2015-04-16 05:08:46", "ttf": 0.0002777777777777778, "title": "Need to be able to set the target property of events", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1615](https://code.google.com/p/google-caja/issues/detail?id=1615) created by metaweta on 2013-01-04T23:41:31.000Z:\n\nevent.target = document;\n\n<b>What is the expected output? What do you see instead?</b>\nExpect to succeed; instead I get an error about a missing setter.\n", "created": "2015-04-16 05:08:37"}, {"url": "https://github.com/google/caja/issues/1613", "closed": "2015-04-16 05:08:36", "ttf": 0.0002777777777777778, "title": "javascript: uris can bypass uri rewriter in domado if uri scheme is prefixed with spaces", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1613](https://code.google.com/p/google-caja/issues/detail?id=1613) created by jasvir on 2012-12-27T21:43:46.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. In the playground:\n\n&lt;a id=&quot;works&quot; &gt;works&lt;/a&gt;\n&lt;a id=&quot;bypass&quot; &gt;bypass&lt;/a&gt;\n&lt;script&gt;\n  var js = &quot;javascript:alert(1);&quot;;\n  document.getElementById('works').href = js;\n  document.getElementById('bypass').href = &quot; &quot; + js;\n&lt;/script&gt;\n\u200b\n<b>What is the expected output? What do you see instead?</b>\n\nBoth urls should be blocked irrespective of the naive url policy.  Instead only &quot;works&quot; is correctly blocked.\n", "created": "2015-04-16 05:08:21"}, {"url": "https://github.com/google/caja/issues/1612", "closed": "2015-04-16 05:08:21", "ttf": 0.0002777777777777778, "title": "onload setTimeout code execution bug", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1612](https://code.google.com/p/google-caja/issues/detail?id=1612) created by kpreid.switchb.org on 2012-12-21T01:06:38.000Z:\n\nDomado invokes the user-provided window.onload without any validation, resulting in code execution if it is a string. This occurs both in ES5 and ES5/3 modes.\n\n5517         var onload = tameWindow.onload;\n5518         if (onload) {\n5519           window.setTimeout(onload, 0);\n5520         }\n\nThis can be fixed using ensureValidCallback.\n", "created": "2015-04-16 05:08:07"}, {"url": "https://github.com/google/caja/issues/1611", "closed": "2015-04-16 05:08:07", "ttf": 0.0002777777777777778, "title": "Caja - Build - Blacklisting CSS", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1611](https://code.google.com/p/google-caja/issues/detail?id=1611) created by raja.vdv on 2012-12-19T13:44:42.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\n<b>What steps will reproduce the problem?</b>\n1.Building code\n2.css styles are blacklisted during build\n3.so in the end css styles are removed from the original code\n\n<b>What is the expected output? What do you see instead?</b>\nExpected to have css style applies after build, but css are removed from the \ncode after build.\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 05:07:58"}, {"url": "https://github.com/google/caja/issues/1607", "closed": "2015-04-16 05:07:27", "ttf": 0.0002777777777777778, "title": "Undefended exception prototypes may be revealed to guest code by Domado in ES5 mode", "commits": {}, "user": "kpreid", "labels": ["Component-Taming", "Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1607](https://code.google.com/p/google-caja/issues/detail?id=1607) created by jasvir on 2012-12-18T06:32:39.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nkpreid pointed out that exceptions thrown by Domado (unlike exceptions thrown by feral functions tamed by the taming membrane) aren't wrapped.  This allows guest code to gain access and modify the host Object.prototype.  Here's a test case that alerts true instead of false.\n\n&lt;div id=&quot;parent&quot;&gt;&lt;/div&gt;\n&lt;div id=&quot;notchild&quot;&gt;&lt;/div&gt;\n\n&lt;script&gt;\n  try {\n    \u200bdocument.getElementById('parent').removeChild(document.getElementById('notchild'));\n  } catch (e) {\n    alert(e.**proto**.**proto**.**proto**.constructor.FERAL_FRAME_OBJECT___ === undefined) \n  }\n&lt;/script&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n", "created": "2015-04-16 05:07:07"}, {"url": "https://github.com/google/caja/issues/1606", "closed": "2015-04-16 05:07:07", "ttf": 0.0002777777777777778, "title": "Escaped colons in selectors are emitted without escaping in sanitizeCSS", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1606](https://code.google.com/p/google-caja/issues/detail?id=1606) created by metaweta on 2012-12-18T00:42:38.000Z:\n\ndiv.querySelectorAll('.ng\\:app')\n\nThe sanitizer tries to call div.querySelectorAll('.CajGadget0___ .ng:app'), which is a syntax error.\n", "created": "2015-04-16 05:07:05"}, {"url": "https://github.com/google/caja/issues/1605", "closed": "2015-04-16 05:07:04", "ttf": 0.0002777777777777778, "title": "Function.prototype.toString is not writable, so can't override it on instances without defineProperty", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1605](https://code.google.com/p/google-caja/issues/detail?id=1605) created by metaweta on 2012-12-17T23:59:08.000Z:\n\n&lt;script&gt;\n  var f = Function('a', 'b', 'return a+b;');\n  f.toString = function () { return 'foo'; };\n&lt;/script&gt;\n\nThrows a TypeError instead of allowing it.  The error's type is &quot;strict_read_only_property&quot; on v8.\n", "created": "2015-04-16 05:06:56"}, {"url": "https://github.com/google/caja/issues/1604", "closed": "2015-04-16 05:06:55", "ttf": 0.0002777777777777778, "title": "Event dispatch sends too many parameters", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1604](https://code.google.com/p/google-caja/issues/detail?id=1604) created by metaweta on 2012-12-17T23:48:22.000Z:\n\n&lt;body&gt;\nClicky\n&lt;script&gt;\ndocument.body.addEventListener('click', function (e, t) { cajaVM.log(t); })\n&lt;/script&gt;\n&lt;/body&gt;\n\nWhen clicking, should see undefined in the log; instead, we show TameSpecificElement.\n", "created": "2015-04-16 05:06:49"}, {"url": "https://github.com/google/caja/issues/1603", "closed": "2015-04-16 05:06:49", "ttf": 0.0002777777777777778, "title": "DOMContentLoaded dispatch should include an event", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1603](https://code.google.com/p/google-caja/issues/detail?id=1603) created by metaweta on 2012-12-17T23:44:13.000Z:\n\n&lt;script&gt;\ndocument.body.addEventListener('DOMContentLoaded', function (event) { cajaVM.log(event); });\n&lt;/script&gt;\n\n// logs 'undefined' instead of an event\n", "created": "2015-04-16 05:06:40"}, {"url": "https://github.com/google/caja/issues/1602", "closed": "2015-04-16 05:06:40", "ttf": 0.0002777777777777778, "title": "Attributes with no specified value should return empty string as the value", "commits": {}, "user": "kpreid", "labels": ["Angularjs", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1602](https://code.google.com/p/google-caja/issues/detail?id=1602) created by metaweta on 2012-12-17T23:40:40.000Z:\n\n&lt;div foo id=&quot;d&quot;&gt;bar&lt;/div&gt;\n&lt;script&gt;\ncajaVM.log(document.getElementById('d').getAttribute('foo')); // should be empty, is foo\n&lt;/script&gt;\n", "created": "2015-04-16 05:06:35"}, {"url": "https://github.com/google/caja/issues/1600", "closed": "2015-04-16 05:06:08", "ttf": 0.0002777777777777778, "title": "Inconsistent prototype on Chrome 22.0.1229.94 causes failure", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1600](https://code.google.com/p/google-caja/issues/detail?id=1600) created by ihab.awad on 2012-12-12T22:12:14.000Z:\n\nRunning ES5/3 under Chrome 22.0.1229.94 causes:\n\n```\nshouldn't happen: ES5/3 object passed to makeDOMAccessible\n```\n\nFixed in later versions of Chrome.\n\nCause (incorrect Chrome behavior):\n- Given a case with two frames, a parent frame with a clean environment, and a child frame which says:\n  \n  Object.prototype.v___ = /\\* something */;\n- Given object 'o' which is (say) a &lt;DIV&gt; from the parent frame.\n- The result of evaluating the expression:\n  \n  ('v___' in o)\n\nis different depending on which frame first asked the question.\n- If code declared in the child frame first asks this question, then from that point forward, the prototype chain of 'o' comes to point to the Object.prototype of the child frame, and 'v___' is always in 'o'.\n- If code declared in the parent frame first asks this question, then from that point forward, the prototype chain of 'o' is correct, and 'v___' is never in 'o'.\n\nI think something in the Chrome code is lazily instantiating the prototype chain of objects like 'o', and is setting them to the wrong value when it does that -- it's using the prototype chain from the &quot;current&quot; frame rather than the object's &quot;frame of origin&quot;.\n\nThe mitigation, as noted by kpreid@, could be simply to always &quot;ask the question&quot; in the host frame, via some function that caja.js provides to the taming frame.\n", "created": "2015-04-16 05:06:01"}, {"url": "https://github.com/google/caja/issues/1599", "closed": "2015-04-16 05:06:01", "ttf": 0.0002777777777777778, "title": "wrongly skipped test in es5 mode es53-test-domado-forms-guest.html", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1599](https://code.google.com/p/google-caja/issues/detail?id=1599) created by felix8a on 2012-12-10T20:48:05.000Z:\n\nin es5 mode, testFormElements never runs, because it's conditional on (typeof Proxy !== 'undefined')\nwhich throws:\n  ReferenceError: &quot;Proxy&quot; blocked by Caja\n\nWhether or not Proxy can be exposed to es5 code, the test condition should be fixed so that the test runs when Proxy is available to Domado.\n", "created": "2015-04-16 05:05:52"}, {"url": "https://github.com/google/caja/issues/1598", "closed": "2015-04-16 05:05:52", "ttf": 0.0002777777777777778, "title": "Within Caja, throw error on calling canvas.getContext(\"2d\").measureText(\"text\").width", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1598](https://code.google.com/p/google-caja/issues/detail?id=1598) created by k-ohashi@bfts.co.jp on 2012-12-07T07:34:52.000Z:\n\n<b>What steps will reproduce the problem?</b>\n## 1. run below code on caja (I tried in HtmlService on Google Apps Script and Caja Playground(ES5/3 Mode)).\n\nvar ctx =  canvas.getContext(&quot;2d&quot;);\nvar textMetrix = ctx.measureText(&quot;text&quot;)\n## alert(textMetrix.width); //throw error\n\n<b>What is the expected output? What do you see instead?</b>\n## on calling textMetrix.width , throw below error.\n## 'Host object leaked without being tamed' in source:\n\nDoes Caja not support ctx.measureText(&quot;text&quot;)  ?\n", "created": "2015-04-16 05:05:43"}, {"url": "https://github.com/google/caja/issues/1597", "closed": "2015-04-16 05:05:43", "ttf": 0.0002777777777777778, "title": "Mentioning __proto__ causes SES evaluation failure in Chrome", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1597](https://code.google.com/p/google-caja/issues/detail?id=1597) created by kpreid.switchb.org on 2012-12-07T01:26:56.000Z:\n\nSES eval will fail on a program which contains the identifier &quot;**proto**&quot;, on Chrome 25.0.1351.0 canary.\n\nThe error &quot;Cannot redefine property: **proto**&quot; is thrown by the browser, and indeed the relevant property descriptor is: {value: null, writable: true, enumerable: false, configurable: false}. The stack below this is\n  repairedDefineProperty\n  interceptName (specifically the call defProp(scopeObject, name, desc))\n  &lt;forEach repair&gt;\n  makeScopeObject\n  ...\n\nPausing after &quot;var scopeObject = create(null);&quot;, I find these results:\n\n&gt; Object.getOwnPropertyNames(scopeObject)\n[]\n&gt; Object.getOwnPropertyDescriptor(scopeObject, '**proto**')\nObject {value: null, writable: true, enumerable: false, configurable: false}\n\nThis would seem to be inconsistent behavior from the browser. I can also reproduce this result in a new window without SES loaded.\n", "created": "2015-04-16 05:05:30"}, {"url": "https://github.com/google/caja/issues/1596", "closed": "2015-04-16 05:05:30", "ttf": 0.0002777777777777778, "title": "Cajoler rewrites onload=\"\" to execute too early", "commits": {}, "user": "kpreid", "labels": ["Conformance", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1596](https://code.google.com/p/google-caja/issues/detail?id=1596) created by kpreid.switchb.org on 2012-12-06T19:40:37.000Z:\n\nIn r5171, RewriteHtmlStage rewrites &lt;body onload=&quot;A&quot;&gt;B&lt;/body&gt; into &lt;body&gt;B&lt;script&gt;A&lt;/script&gt;&lt;/body&gt;. This executes too early; in particular, it executes before the document is closed (that is, emitter___.finish()). Once we support document.open()/document.write() on a closed document, this will be an observable difference.\n\nWe should place the rewritten onload after the generated emitter___.finish(); code.\n", "created": "2015-04-16 05:05:27"}, {"url": "https://github.com/google/caja/issues/1595", "closed": "2015-04-16 05:05:27", "ttf": 0.0002777777777777778, "title": "SES new symptom in Chrome 25.0.1336.0 canary", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1595](https://code.google.com/p/google-caja/issues/detail?id=1595) created by kpreid.switchb.org on 2012-11-27T19:32:36.000Z:\n\nRunning browser-test-case.html in ES5 mode in Chrome 25.0.1336.0 canary fails with SES init errors:\n\n New Symptom: Defining **proto** neither failed nor succeeded ses-guest-frame.js:232\n New Symptom: Defining **proto** neither failed nor succeeded ses-guest-frame.js:232\n Repaired: Non-deletable RegExp statics are a global communication channel ses-guest-frame.js:232\n Repaired: Date.prototype is a global communication channel ses-guest-frame.js:232\n Repaired: Array forEach converts primitive thisObj arg to object ses-guest-frame.js:232\n Repaired: JSON.parse confused by &quot;**proto**&quot; ses-guest-frame.js:232\n Not repaired: Prototype still redefinable on non-extensible object ses-guest-frame.js:232\n Not repaired: Eval breaks masking of named functions in non-strict code ses-guest-frame.js:232\n Repaired: Array.prototype.sort ignores frozeness ses-guest-frame.js:232\n Repaired: Array.prototype.push ignores sealing ses-guest-frame.js:232\n Not repaired: Extending an array can modify read-only array length ses-guest-frame.js:232\n Max Severity: New symptom(6) is not SES-safe. ses-guest-frame.js:232\n 438 Apparently fine ses-guest-frame.js:232\n 10 Deleted ses-guest-frame.js:232\n 1 Skipped ses-guest-frame.js:232\n Max Severity: New symptom(6) is not SES-safe. ses-guest-frame.js:232\n initSES succeeded. \n", "created": "2015-04-16 05:05:16"}, {"url": "https://github.com/google/caja/issues/1594", "closed": "2015-04-16 05:05:16", "ttf": 0.0002777777777777778, "title": "Google Vizualisation API (GViz) doesn't work on Google HTML service", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1594](https://code.google.com/p/google-caja/issues/detail?id=1594) created by pop.parizotto on 2012-11-23T13:36:48.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n- AFAIK, it occurs on any browser.\n\n<b>What steps will reproduce the problem?</b>\n- Just try to use GViz on Google HTML Service.\n\n<b>What is the expected output? What do you see instead?</b>\n- Expected: GViz working chart, table, etc.\n- What I get: Nothing.\n\n<b>Please provide any additional information below.</b>\n- Not sure if it is actually a Caja problem or a Google problem, but I hope it can be solved ASAP.\n", "created": "2015-04-16 05:05:09"}, {"url": "https://github.com/google/caja/issues/1593", "closed": "2015-04-16 05:05:09", "ttf": 0.0002777777777777778, "title": "ModulesBrowserTest fails in chrome webdriver", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1593](https://code.google.com/p/google-caja/issues/detail?id=1593) created by felix8a on 2012-11-21T10:05:18.000Z:\n\nall the actual tests pass, but webdriver fails,\nbecause the page has es53.js,\nwhich makes all objects recursive,\nwhich causes the injected webdriver script to blow the stack trying to serialize a result.\n\nthe test doesn't seem to need es53.js, except that the test uses Q from cajita-promise.js, which requires es53.js.\n\ncajita-promise.js doesn't seem to need es53.js either.  it just does a bunch of ___.markFuncFreeze etc.\n\nis that still needed? I don't see any place where tamed-cajita-Q is exported to guest code.\n\n(the simplest fix for the webdriver failure is to replace cajita-promise.js with a standalone-promise.js, but I don't see any reason for us to use cajita-promise.js instead of standalone-promise.js.)\n\n(and then there's ses-promise.js which is special in its own way, but I'm going to ignore that.)\n", "created": "2015-04-16 05:05:02"}, {"url": "https://github.com/google/caja/issues/1592", "closed": "2015-04-16 05:05:02", "ttf": 0.0002777777777777778, "title": "testCanvasContextProps failure on Chrome 24 Beta (Mac)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1592](https://code.google.com/p/google-caja/issues/detail?id=1592) created by felix8a on 2012-11-20T21:29:34.000Z:\n\nes53-test-domado-canvas (es5 or es53)\nFAIL: testCanvasContextProps jsunit.js:182\nchanged font : &quot;bold 2em...&quot; != &quot;26px...&quot;\nExpected &lt;&quot;bold 2em monospace&quot;&gt; (String) but was &lt;&quot;26px monospace&quot;&gt; (String)\n", "created": "2015-04-16 05:04:55"}, {"url": "https://github.com/google/caja/issues/1591", "closed": "2015-04-16 05:04:55", "ttf": 0.0002777777777777778, "title": "testResizing failure on Chrome 24 Beta (Mac)", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1591](https://code.google.com/p/google-caja/issues/detail?id=1591) created by felix8a on 2012-11-20T21:27:58.000Z:\n\nes53-test-domado-special (es5 or es53)\nFAIL: testResizing jsunit.js:182\ndocument.body.clientWidth : Expected 585, but got 600 which was more than 4 away\n", "created": "2015-04-16 05:04:48"}, {"url": "https://github.com/google/caja/issues/1590", "closed": "2015-04-16 05:04:48", "ttf": 0.0002777777777777778, "title": "browser tests don't work with firefox 17 (beta)", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1590](https://code.google.com/p/google-caja/issues/detail?id=1590) created by felix8a on 2012-11-12T18:46:03.000Z:\n\n&quot;ant brtest&quot; starts a browser and runs a test that results in the browser window saying &quot;all tests passed&quot;, but then it apparently waits forever. it doesn't continue to the next test. no idea why.\n", "created": "2015-04-16 05:04:37"}, {"url": "https://github.com/google/caja/issues/1589", "closed": "2015-04-16 05:04:37", "ttf": 0.0002777777777777778, "title": "jquery autocomplete not displaying dynamic <ul> list when typing in text", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1589](https://code.google.com/p/google-caja/issues/detail?id=1589) created by steven.zeck on 2012-11-09T00:54:08.000Z:\n\nWhat revision of the cajoler exhibits the problem?  On what browser and OS?  Chrome 23/Windows 7\n\n<b>What steps will reproduce the problem?</b>\n1. Copy/paste the below code into a GAS HTML file.\n2. Create the HTML output from that file and go to your URL that runs it\n3. Start typing in &quot;ja&quot;, it should display a list of possible results, but it doesn't.  If you keep &quot;ja&quot; typed in and use the down arrow key, the results &quot;scroll&quot; through.  If you copy/paste into a local HTML file (non-cajoled) it runs as expected.\n\n<b>Please provide any additional information below.</b>\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;link href=&quot;http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;\n&lt;script src=&quot;http://code.jquery.com/jquery-1.8.2.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;http://code.jquery.com/ui/1.8.23/jquery-ui.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;\n$(function() {\n    var availableTags = [\n      &quot;ActionScript&quot;,\n      &quot;AppleScript&quot;,\n      &quot;Asp&quot;,\n      &quot;BASIC&quot;,\n      &quot;C&quot;,\n      &quot;C++&quot;,\n      &quot;Clojure&quot;,\n      &quot;COBOL&quot;,\n      &quot;ColdFusion&quot;,\n      &quot;Erlang&quot;,\n      &quot;Fortran&quot;,\n      &quot;Groovy&quot;,\n      &quot;Haskell&quot;,\n      &quot;Java&quot;,\n      &quot;JavaScript&quot;,\n      &quot;Lisp&quot;,\n      &quot;Perl&quot;,\n      &quot;PHP&quot;,\n      &quot;Python&quot;,\n      &quot;Ruby&quot;,\n      &quot;Scala&quot;,\n      &quot;Scheme&quot;\n    ];\n    $( &quot;#tags&quot; ).autocomplete({\n      source: availableTags\n    });\n  });\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div class=&quot;demo&quot;&gt;\n&lt;div class=&quot;ui-widget&quot;&gt;\n  &lt;label for=&quot;tags&quot;&gt;Tags: &lt;/label&gt;\n  &lt;input id=&quot;tags&quot; /&gt;\n&lt;/div&gt;\n&lt;/div&gt;&lt;!-- End demo --&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n", "created": "2015-04-16 05:04:17"}, {"url": "https://github.com/google/caja/issues/1588", "closed": "2015-04-16 05:04:17", "ttf": 0.0002777777777777778, "title": "Tests run via RhinoTestBed.runJsUnittestFromHtml do not check for passing", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1588](https://code.google.com/p/google-caja/issues/detail?id=1588) created by kpreid.switchb.org on 2012-11-06T23:56:25.000Z:\n\nRhinoTestBed.runJsUnittestFromHtml does not check that the test suite reports success; it only lets exceptions propagate out.\n\nFor example, cssparser_test.js (as of r5138) does not invoke jsunit.pass(), but this is not caught. If there are any lost-signal bugs in this test suite, we are not catching them.\n", "created": "2015-04-16 05:04:08"}, {"url": "https://github.com/google/caja/issues/1586", "closed": "2015-04-16 05:04:05", "ttf": 0.0002777777777777778, "title": "arrays returned by cajoled string.match(regex) calls are not fully populated", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1586](https://code.google.com/p/google-caja/issues/detail?id=1586) created by jamey.wood on 2012-11-06T20:56:12.000Z:\n\nIf I load the attached file directly in a browser, I see:\n\n  index test pass: true\n  input test pass: true\n  elements test pass: true\n\n...but if I load it in the same browser via a caja container (subversion r5138), I see:\n\n  index test pass: false\n  input test pass: false\n  elements test pass: true\n\nTo determine what properties should be available on the array object returned by a string.match(regex) call, I'm looking at the &quot;Creating an array using the result of a match&quot; section at:\n\n  https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array\n\nThanks,\nJamey\n", "created": "2015-04-16 05:03:59"}, {"url": "https://github.com/google/caja/issues/1585", "closed": "2015-04-16 05:03:59", "ttf": 0.0002777777777777778, "title": "Command-line cajoler is broken", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1585](https://code.google.com/p/google-caja/issues/detail?id=1585) created by kpreid.switchb.org on 2012-11-05T23:36:20.000Z:\n\nPer https://groups.google.com/d/msg/google-caja-discuss/wpx2StmyAD8/E_lhqtnaRogJ :\n\n---\n\n  bin/cajole --input guest.html --output_js guest.js\n\n...where the guest.html input file is just a copy of:\n\n  https://developers.google.com/caja/demos/gettingstarted/guest.html\n\nWhen I go back to svn r5095, that works.  But for r5096 or later, I get errors like these:\n\n  FATAL_ERROR: I/O Error: resource:///com/google/caja/lang/html/html4-elements-extensions.json\n  FATAL_ERROR: I/O Error: resource:///com/google/caja/lang/html/html4-attributes-extensions.json\n##   LOG    : compiler done in 385 msec (384 msec in pre-pipeline)\n\nThere is a hardcoded reference to those files, which were removed in r5096, in com.google.caja.plugin.Config. Those paths should be retrieved from an appropriate centralized location.\n", "created": "2015-04-16 05:03:54"}, {"url": "https://github.com/google/caja/issues/1584", "closed": "2015-04-16 05:03:54", "ttf": 0.0002777777777777778, "title": "testDimensionProperties splats the top of the page only in ES5/3 mode", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1584](https://code.google.com/p/google-caja/issues/detail?id=1584) created by kpreid.switchb.org on 2012-11-05T18:20:39.000Z:\n\nIn es53-test-domado-dom-guest.html, ES5/3 mode ONLY, testDimensionProperties's absolutely-positioned elements are getting positioned relative to the vdoc rather than relative to the testDimensionProperties container, even though testDimensionProperties has position: relative.\n\nThis makes it impossible to manually trigger the testOnReset button.\n\nr5135, both Chrome and Firefox.\n", "created": "2015-04-16 05:03:49"}, {"url": "https://github.com/google/caja/issues/1581", "closed": "2015-04-16 05:03:49", "ttf": 0.0002777777777777778, "title": "testResizing fails on ubuntu gnome firefox", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1581](https://code.google.com/p/google-caja/issues/detail?id=1581) created by felix8a on 2012-11-01T00:26:19.000Z:\n\n&quot;ant brtest&quot; on my linux workstation fails in es53-test-domado-special testResizing, because the test assumes scrollbars are always 15 pixels wide, and my scrollbar is only 13 pixels wide.\n", "created": "2015-04-16 05:03:40"}, {"url": "https://github.com/google/caja/issues/1579", "closed": "2015-04-16 05:03:37", "ttf": 0.0002777777777777778, "title": "URI policy specified without 'fetch' is a lost signal bug", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1579](https://code.google.com/p/google-caja/issues/detail?id=1579) created by kpreid.switchb.org on 2012-10-30T19:45:46.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Use the Caja API as suggested by https://developers.google.com/caja/docs/gettingstarted/, passing undefined as uriPolicy, in ES5 mode.\n2. Load HTML which includes a &lt;script src=&quot;...&quot;&gt;.\n\n<b>What is the expected output? What do you see instead?</b>\nI expect that the script load should fail but the rest of the page should appear. Instead, the HTML after the &lt;script&gt; element is ignored.\n\n<b>Please use labels and text to provide additional information.</b>\nWhile single-stepping I found that the NO_NETWORK URI policy does not invoke its callback parameter, not even with an indication of failure; this means that the HTML parser continuation is never invoked.\n", "created": "2015-04-16 05:03:11"}, {"url": "https://github.com/google/caja/issues/1578", "closed": "2015-04-16 05:03:11", "ttf": 0.0002777777777777778, "title": "Trailing line comment causes syntax error in ES5 mode", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1578](https://code.google.com/p/google-caja/issues/detail?id=1578) created by kpreid.switchb.org on 2012-10-30T19:06:34.000Z:\n\n<b>What steps will reproduce the problem?</b>\nLoad \u200b&lt;script&gt;alert(1);//&lt;/script&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b in ES5 mode.\n\n<b>What is the expected output? What do you see instead?</b>\nExpect alert to be invoked; instead get:\nUncaught script error: 'Unexpected end of input' in source: 'https:' at line: 1\n\nI assume without having looked at the problem that we are concatenating text to the end of the source without a separating newline.\n", "created": "2015-04-16 05:03:06"}, {"url": "https://github.com/google/caja/issues/1577", "closed": "2015-04-16 05:03:06", "ttf": 0.0002777777777777778, "title": "jquery tabs not working anymore", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1577](https://code.google.com/p/google-caja/issues/detail?id=1577) created by jan.keirse@tvh.com on 2012-10-30T15:33:21.000Z:\n\nWhat revision of the cajoler exhibits the problem?  \nThe version on caja.appspot.com\nOn what browser and OS?\nWindows 7, Chrome 22.0.1229.94 m\n\n<b>What steps will reproduce the problem?</b>\n1. Go to http://caja.appspot.com/?es5=false#examples/jquery-tabs.html\n2. Press Cajole\n\nWhat is the expected output? \n\nTab pages\n\nWhat do you see instead?\n\nList Items\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 05:02:59"}, {"url": "https://github.com/google/caja/issues/1576", "closed": "2015-04-16 05:02:59", "ttf": 0.0002777777777777778, "title": "Possibility of cross-element property access hazards in Domado", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1576](https://code.google.com/p/google-caja/issues/detail?id=1576) created by kpreid.switchb.org on 2012-10-29T22:22:46.000Z:\n\nSome properties of DOM elements are tamed by an accessor which operates on the named property of the feral node. However, accessor functions are effectively methods, which can be retrieved via Object.getOwnPropertyDescriptor and re-invoked on different objects; and the accessor functions do not check _which element_ is being accessed, only that it is in TameNodeConf.\n\nTherefore, an accessor for a named property on one element can be re-applied to another element with a different element name, despite the property not having been intended to be whitelisted for that element.\n\nActions to be taken:\n1. Review all existing property tamings to determine if they pose a problem; if so, we must handle disclosure. Note that since the accessor functions can be applied even to unsafe nodes, this must be a review of all DOM node interfaces which have the named property.\n2. Revise the property taming utilities (PropertyTaming and definePropertiesAwesomely) so that a property tamer used in defineElement is automatically restricted to that taming class.\n", "created": "2015-04-16 05:02:46"}, {"url": "https://github.com/google/caja/issues/1575", "closed": "2015-04-16 05:02:46", "ttf": 0.0002777777777777778, "title": "document height is wrong", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1575](https://code.google.com/p/google-caja/issues/detail?id=1575) created by felix8a on 2012-10-26T20:47:21.000Z:\n\nin the playground:\n\n  &lt;div style=&quot;position:absolute&quot;&gt;\n    1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4&lt;br&gt;5&lt;br&gt;6\n  &lt;/div&gt;\n  hello\n\nthe guest document height is only the height of the &quot;hello&quot;, so the list of numbers is cut off.  among other things, this messes up in-page popups like dialog boxes and menus.\n\nthe playground doesn't have\n  .caja-vdoc-wrapper { height: 100%; }\nbut adding that doesn't fix the problem\n", "created": "2015-04-16 05:02:37"}, {"url": "https://github.com/google/caja/issues/1574", "closed": "2015-04-16 05:02:37", "ttf": 0.0002777777777777778, "title": "body node height and width not styllable", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1574](https://code.google.com/p/google-caja/issues/detail?id=1574) created by giannis.spiliopoulos on 2012-10-26T09:57:18.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.try to style the width or height of body node\n2.create a child node with smaller dimensions with different background color\n\n<b>What is the expected output? What do you see instead?</b>\nYou would expect to see the body node with its background color and on top of that the smaller node with its different background color.\nInstead you see only the background color of the smaller element\n\n<b>Please provide any additional information below.</b>\nThe body node height and width can not be styled and the body node is only big enough to accomodate for all it's childs\n", "created": "2015-04-16 05:02:32"}, {"url": "https://github.com/google/caja/issues/1573", "closed": "2015-04-16 05:02:32", "ttf": 0.0002777777777777778, "title": "Domado is not frozen", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1573](https://code.google.com/p/google-caja/issues/detail?id=1573) created by kpreid.switchb.org on 2012-10-25T23:41:44.000Z:\n\nPer SES/capability principles, the Domado constructor in domado.js should be frozen, but isn't.\n\nThis is not a security bug because the object is not exposed to guest code.\n", "created": "2015-04-16 05:02:27"}, {"url": "https://github.com/google/caja/issues/1572", "closed": "2015-04-16 05:02:27", "ttf": 0.0002777777777777778, "title": "Methods do not work directly on target object", "commits": {}, "user": "kpreid", "labels": ["Component-Taming", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1572](https://code.google.com/p/google-caja/issues/detail?id=1572) created by ihab.awad on 2012-10-25T20:49:41.000Z:\n\nThe following is reported to fail.\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Unmarked function as a method&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;http://caja.appspot.com/caja.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n      caja.initialize({\n        'cajaServer': 'https://caja.appspot.com/',\n        'forceES5Mode': true,\n        'debug': false\n      });\n      caja.whenReady(function() {\n        var x = {\n          f: function() { alert('Success!'); }\n        };\n\n```\n    caja.grantMethod(x, 'f');\n\n    var api = {\n      'x': caja.tame(x)\n    };\n\n    caja.load(undefined, undefined, function(frame) {\n      frame.code('about:blank', 'application/javascript', 'x.f();')\n          .api(api).run();\n    });\n  });\n&lt;/script&gt;\n```\n\n  &lt;/head&gt;\n  &lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n", "created": "2015-04-16 05:02:20"}, {"url": "https://github.com/google/caja/issues/1571", "closed": "2015-04-16 05:02:20", "ttf": 0.0002777777777777778, "title": "Tame \"null\" correctly", "commits": {}, "user": "kpreid", "labels": ["Component-Taming", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1571](https://code.google.com/p/google-caja/issues/detail?id=1571) created by ihab.awad on 2012-10-24T22:45:43.000Z:\n\nAt time of writing, the taming membrane tames the value (null) to (void 0).\n", "created": "2015-04-16 05:02:14"}, {"url": "https://github.com/google/caja/issues/1567", "closed": "2015-04-16 05:01:51", "ttf": 0.0002777777777777778, "title": "firefox 17 (beta) can't use events as weakmap keys", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1567](https://code.google.com/p/google-caja/issues/detail?id=1567) created by felix8a on 2012-10-19T20:20:08.000Z:\n\n&lt;script&gt;\n  var m = new WeakMap();\n  var e = new MouseEvent('click');\n  m.set(e, 1);\n&lt;/script&gt;\n\nresults in\n  TypeError: cannot use the given object as a weak map key\n\nthis affects a bunch of things in domado and domado tests\n", "created": "2015-04-16 05:01:29"}, {"url": "https://github.com/google/caja/issues/1566", "closed": "2015-04-16 05:01:29", "ttf": 0.0002777777777777778, "title": "JQueryTest output causes spurious main test path failures", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1566](https://code.google.com/p/google-caja/issues/detail?id=1566) created by kpreid.switchb.org on 2012-10-18T23:46:50.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Introduce a failure in JQueryTest.\n2. ant jquerytest\n3. ant runtests\n\n<b>What is the expected output? What do you see instead?</b>\n'ant runtests' reports failure, even though none of the tests it ran failed.\n\nI assume that RuntestsRun is reading the combined output from all tests and finding the jquery output in the same directory.\n\nIt would also be nice to fix that jquerytest says 'BUILD SUCCESSFUL' whether or not tests failed.\n", "created": "2015-04-16 05:01:22"}, {"url": "https://github.com/google/caja/issues/1565", "closed": "2015-04-16 05:01:22", "ttf": 0.0002777777777777778, "title": "Add better console messages when dynamic scripts are stripped or fail silently", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1565](https://code.google.com/p/google-caja/issues/detail?id=1565) created by jasvir on 2012-10-17T23:59:22.000Z:\n\n<b>What steps will reproduce the problem?</b>\nIn es53 mode, dynamically added script tags silently do not execute.  This is confusing and should generate an error message instead.\n", "created": "2015-04-16 05:01:13"}, {"url": "https://github.com/google/caja/issues/1564", "closed": "2015-04-16 05:01:13", "ttf": 0.0002777777777777778, "title": "r5079 broke <noembed>", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1564](https://code.google.com/p/google-caja/issues/detail?id=1564) created by felix8a on 2012-10-16T16:48:47.000Z:\n\nalso need testcases for embed and noembed\n", "created": "2015-04-16 05:01:11"}, {"url": "https://github.com/google/caja/issues/1562", "closed": "2015-04-16 05:01:06", "ttf": 0.0002777777777777778, "title": "Tame exception types by default.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1562](https://code.google.com/p/google-caja/issues/detail?id=1562) created by maxus@google.com on 2012-10-15T17:20:47.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nr5054, SES, any browser or OS.\n\n<b>What steps will reproduce the problem?</b>\n1. Tame alert().\n2. Eval &quot;alert(new Error('test'))&quot; using Caja.\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected to see an alert showing &quot;Error: test&quot;. Instead the following error is thrown in the console:\n\nUncaught TypeError: Untaming of guest constructed objects unsupported: TypeError: Untaming of guest constructed objects unsupported: Error: test \n\n<b>Please provide any additional information below.</b>\n\nThis applies not just to Error, but all the other built-in JS exception classes.\n", "created": "2015-04-16 05:01:02"}, {"url": "https://github.com/google/caja/issues/1561", "closed": "2015-04-16 05:01:01", "ttf": 0.0002777777777777778, "title": "Support custom properties on non-constructor functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1561](https://code.google.com/p/google-caja/issues/detail?id=1561) created by maxus@google.com on 2012-10-12T23:51:48.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nr5054, Chrome 23, Linux.\n\n<b>What steps will reproduce the problem?</b>\n1. Create and function F and run caja.markFunction(F).\n2. Set F.x = 4.\n3. Run caja.grantRead(F, 'x');\n4. Tame F and access  F.x from guest code.\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect F.x to be 4 in guest code, but unless F is marked as a constructor, it will be undefined.\n", "created": "2015-04-16 05:00:52"}, {"url": "https://github.com/google/caja/issues/1560", "closed": "2015-04-16 05:00:52", "ttf": 0.0002777777777777778, "title": "Support instanceof checks on guest-constructed standard objects", "commits": {}, "user": "kpreid", "labels": ["Component-Taming", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1560](https://code.google.com/p/google-caja/issues/detail?id=1560) created by maxus@google.com on 2012-10-12T19:52:03.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nr5054, SES mode.\n\n<b>What steps will reproduce the problem?</b>\n1. Create a tamed function with argument A that contains &quot;A instanceof Date&quot;.\n2. In the guest, create a Date object and pass it to the function.\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect the instanceof check in the host code to return true. Instead it returns false.\n\n<b>Please provide any additional information below.</b>\n\nQuoting Ihab Awad, a Caja developer, on the issue:\n\n&gt; This is a deliberate tradeoff.\n&gt; \n&gt; The guest code runs inside a hidden &lt;iframe&gt; that\n&gt; Caja creates for you. So Date in that iframe is not\n&gt; Date in the host page.\n&gt; \n&gt; We could translate by copying at the boundary\n&gt; (doing new Date(...) every time we cross), or we\n&gt; can just pass the object through.\n\n&gt; Copying means you get instanceof right but\n&gt; mutations to the object fail to make it back to\n&gt; the guest code, and vice versa.\n&gt;\n&gt; I should add -- there is already a precedent for\n&gt; pass-by-copy semantics across the taming boundary:\n&gt; Arrays are always pass-by-copy both ways. So it\n&gt; would not be _too_ strange to do that for builtins\n&gt; like Date and RegExp also.\n", "created": "2015-04-16 05:00:39"}, {"url": "https://github.com/google/caja/issues/1557", "closed": "2015-04-16 04:59:39", "ttf": 0.0002777777777777778, "title": "Don't generate unnecessarily large empty CajoledModule when cajoling empty JS blocks", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1557](https://code.google.com/p/google-caja/issues/detail?id=1557) created by jasvir on 2012-10-04T16:32:47.000Z:\n\nIn cases where input code has no javascript or has only empty script blocks, the cajoler generates unneeded CajoledModule wrapper around an empty block.  It should not do so when it is unnecessary.\n", "created": "2015-04-16 04:59:37"}, {"url": "https://github.com/google/caja/issues/1556", "closed": "2015-04-16 04:59:37", "ttf": 0.0002777777777777778, "title": "maybe the cajoler should put <style> inside <caja-v-head>", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1556](https://code.google.com/p/google-caja/issues/detail?id=1556) created by felix8a on 2012-10-01T21:41:29.000Z:\n\nthis is split from issue 1551.\n\nin the playground,\n\n&lt;style&gt;p {color:red}&lt;/style&gt;\n&lt;p&gt;hello&lt;/p&gt;\n\nwill produce static html like this:\n\n&lt;style type=&quot;text/css&quot;&gt;\n.CajaGadget1___ p {\ncolor: red\n}&lt;/style&gt;&lt;caja-v-html&gt;&lt;caja-v-head&gt;\n&lt;/caja-v-head&gt;&lt;caja-v-body&gt;&lt;p&gt;hello&lt;/p&gt;&lt;/caja-v-body&gt;&lt;/caja-v-html&gt;\n\n&lt;caja-v-html&gt; is the virtual documentElement, and the &lt;style&gt; is outside it, which messes up code that expects everything to be inside the documentElement.\n\nissue 1551 was fixed by modifying domado to ignore the &lt;style&gt; when looking for the documentElement, but perhaps we should move the &lt;style&gt; inside the &lt;caja-v-head&gt; in case a gadget expects to find its stylesheets. but there are several other reasons that gadgets will have problems accessing their own stylesheets, so this might not be worth doing.\n\nand if the cajoler isn't given a specific idClass, it will generate a cajoled gadget that will use emitCss(), which will put the stylesheet in the host page's head.  so that would have to be fixed too.\n", "created": "2015-04-16 04:59:34"}, {"url": "https://github.com/google/caja/issues/1554", "closed": "2015-04-16 04:59:34", "ttf": 0.0002777777777777778, "title": "Caja fails on FF3.6", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1554](https://code.google.com/p/google-caja/issues/detail?id=1554) created by jasvir on 2012-10-01T18:14:38.000Z:\n\nSnippet that fails in AppScript.\n\n// Simple callback test that fails on FF 3.6\nfunction doGet(e) {\n  return HtmlService.createHtmlOutput(\n    &quot;&lt;html&gt;&quot;\n    + &quot;  &lt;head&gt;&quot;\n    + &quot;    &lt;script&gt;&quot;\n    + &quot;      function write(content) {&quot;\n    + &quot;        document.getElementById('out').innerHTML = content;&quot;\n    + &quot;      }&quot;\n    + &quot;      function buttonClicked() {&quot;\n    + &quot;        google.script.run&quot;\n    + &quot;            .withSuccessHandler(write)&quot;\n    + &quot;            .withFailureHandler(write)&quot;\n    + &quot;            .echo(&quot;successfully called server&quot;);&quot;\n    + &quot;      }&quot;\n    + &quot;    &lt;/script&gt;&quot;\n    + &quot;  &lt;/head&gt;&quot;\n    + &quot;  &lt;body&gt;&quot;\n    + &quot;    &lt;div id='out'&gt;&lt;/div&gt;&quot;\n    + &quot;    &lt;input type='button' onclick='buttonClicked()'&gt;&quot;\n    + &quot;  &lt;/body&gt;&quot;\n    + &quot;&lt;/html&gt;&quot;);\n}\n\nfunction echo(param) {\n return param;\n}\n", "created": "2015-04-16 04:59:30"}, {"url": "https://github.com/google/caja/issues/1553", "closed": "2015-04-16 04:59:29", "ttf": 0.0002777777777777778, "title": "Within Caja, jquery dialog box not displaying with jquery 1.8.1  or 1.8.2 ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1553](https://code.google.com/p/google-caja/issues/detail?id=1553) created by mitch@lexmark.com on 2012-09-30T18:48:55.000Z:\n\nThe dialog box displays with jquery 1.7.2 but quit working with jQuery 1.8.1 and above.   All versions work without Caja (tested from Google Apps Script).\n", "created": "2015-04-16 04:59:18"}, {"url": "https://github.com/google/caja/issues/1552", "closed": "2015-04-16 04:59:18", "ttf": 0.0002777777777777778, "title": "Server returns 500 (timeout) when I try to cajole Accordion in Tabs", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1552](https://code.google.com/p/google-caja/issues/detail?id=1552) created by ales@holubec.net on 2012-09-29T00:06:10.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\n<b>What steps will reproduce the problem?</b>\n1. Load source code from http://jsbin.com/icebe/1/edit\n2. Click on Cajole\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\nI'd expect a JQuery accordion in tabs perfectly rendered. But I'm getting an 500 error from the server\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:59:11"}, {"url": "https://github.com/google/caja/issues/1551", "closed": "2015-04-16 04:59:11", "ttf": 0.0002777777777777778, "title": "having a <style> makes document.body false (which affects jquery $.ready)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1551](https://code.google.com/p/google-caja/issues/detail?id=1551) created by felix8a on 2012-09-28T01:25:47.000Z:\n\nin the playground, compare:\n\n&lt;div&gt;hi&lt;/div&gt;\n&lt;script&gt;alert(!!document.body);&lt;/script&gt;\n\nvs\n\n&lt;style&gt;p {color: red}&lt;/style&gt;\n&lt;script&gt;alert(!!document.body);&lt;/script&gt;\n\nthe first alerts true, the second alerts false.\n\nthis affects jquery's $(document).ready(), because it tries to make sure document.body exists before actually firing any of the ready functions.\n\nso.. the bug is either in how we're finding document.body, or in how we're constructing the pseudo-document.\n\nin the &lt;style&gt; example, the cajoled html looks like this:\n\n&lt;style type=&quot;text/css&quot;&gt;\n.CajaGadget4___ p {\ncolor: red\n}&lt;/style&gt;&lt;caja-v-html&gt;&lt;caja-v-head&gt;\n&lt;span id=&quot;id_2___&quot;&gt;&lt;/span&gt;&lt;/caja-v-head&gt;&lt;caja-v-body&gt;&lt;/caja-v-body&gt;&lt;/caja-v-html&gt;\n\nnote that the &lt;style&gt; is outside the &lt;caja-v-html&gt; element.\n\nTameHTMLDocument looks for .body as a child of .documentElement, and .documentElement is the first element node in the pseudo-document.  in this case, that would be the &lt;style&gt; element rather than &lt;caja-v-html&gt;, so the search for .body fails.\n\nso in the case of jquery $.ready, the simplest workaround is to use window.onload or window.addEventListener('load') instead.\n\nin the general case of document.body broken, document.getElementsByTagName('body')[0] works and seems like a not too obnoxious workaround.\n\nin the general case of document.documentElement broken, document.getElementsByTagName('html')[0] works but is kind of an icky workaround, but I can't think of anything better.\n", "created": "2015-04-16 04:59:00"}, {"url": "https://github.com/google/caja/issues/1550", "closed": "2015-04-16 04:59:00", "ttf": 0.0002777777777777778, "title": "xhtml doesn't really exist", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1550](https://code.google.com/p/google-caja/issues/detail?id=1550) created by felix8a on 2012-09-27T20:42:05.000Z:\n\nmaybe we should get rid of the xhtml parsing option, it's been a continual source of developer confusion, and it doesn't really exist in the wild. nobody bothers to do the things that will actually make a browser treat the input as xhtml, and most people who say xhtml don't really expect xml violations to be fatal errors.\n", "created": "2015-04-16 04:58:49"}, {"url": "https://github.com/google/caja/issues/1549", "closed": "2015-04-16 04:58:49", "ttf": 0.0002777777777777778, "title": "jQueryUI not loading in playground or Sites", "commits": {}, "user": "kpreid", "labels": ["Client-Sites", "Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1549](https://code.google.com/p/google-caja/issues/detail?id=1549) created by cgoldfeder@google.com on 2012-09-27T14:54:30.000Z:\n\nMinimal failure example:\n\n&lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;\n&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;\n\nRuntime error:\n\nUncaught script error: 'Cannot read property 'style_v___' of null' in source: 'precajole:///jqueryui/1.8.18/jquery-ui.js' at line: 0\nprecajole:///jqueryui/1.8.18/jquery-ui.js:0: Cannot read property 'style_v___' of null\n\nUser reporting:\nhttp://stackoverflow.com/questions/12615179/jquery-ui-library-not-loaded-served-by-google-cdn-from-the-google-site-insert-h\n             \u200b\n", "created": "2015-04-16 04:57:36"}, {"url": "https://github.com/google/caja/issues/1547", "closed": "2015-04-16 04:57:31", "ttf": 0.0002777777777777778, "title": "Caja Playground should be updated ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1547](https://code.google.com/p/google-caja/issues/detail?id=1547) created by dobkin@google.com on 2012-09-24T20:42:45.000Z:\n\nThere is a HIGH risk XSS vulnerability in your service. This bug is _publicly_ known.\n\nIt's anticipated you'll need to re-prioritize your existing work to ensure this bug is fixed promptly. Resolution for HIGH risk security bugs is typically measured in days.\n\n== Vulnerability details ==\n\nThe Caja Playground at \n\nhttp://caja.appspot.com/\n\nis currently vulnerable to the arbitrary JS execution issue described at\n\nhttp://code.google.com/p/google-caja/wiki/SecurityAdvisory20120919\n\nand should be updated to revision &gt; 5054.\n\nThis issue puts any third-party sites that load caja.appsport.com/caja.js at risk so should be treated with priority.\n", "created": "2015-04-16 04:57:26"}, {"url": "https://github.com/google/caja/issues/1544", "closed": "2015-04-16 04:56:48", "ttf": 0.0002777777777777778, "title": "Fix ES5 es53-test-client-uri-rewriting.js", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1544](https://code.google.com/p/google-caja/issues/detail?id=1544) created by kpreid.switchb.org on 2012-09-21T21:27:16.000Z:\n\nes53-test-client-uri-rewriting.js is disabled in ES5 mode for obsolete and possibly obsolete reasons; reenable it and debug.\n", "created": "2015-04-16 04:56:46"}, {"url": "https://github.com/google/caja/issues/1543", "closed": "2015-04-16 04:56:46", "ttf": 0.0002777777777777778, "title": "Fix ES5 es53-test-inline-script.html", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1543](https://code.google.com/p/google-caja/issues/detail?id=1543) created by kpreid.switchb.org on 2012-09-21T21:26:01.000Z:\n\nes53-test-inline-script.html is disabled in ES5 mode (and is an ES5-only test, so is completely useless) because it fails; fix it.\n", "created": "2015-04-16 04:56:41"}, {"url": "https://github.com/google/caja/issues/1542", "closed": "2015-04-16 04:56:41", "ttf": 0.0002777777777777778, "title": "document.forms may be broken in ES5 mode", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1542](https://code.google.com/p/google-caja/issues/detail?id=1542) created by kpreid.switchb.org on 2012-09-21T21:24:31.000Z:\n\nIn es53-test-domado-forms-guest.html, testDocumentForms and testFormElements are disabled in ES5 mode for unknown reasons; they should be enabled and debugged. (It may well be something like lack of browser proxy support, but we should at least make the comments say so.)\n", "created": "2015-04-16 04:56:37"}, {"url": "https://github.com/google/caja/issues/1540", "closed": "2015-04-16 04:56:32", "ttf": 0.0002777777777777778, "title": "A font-family CSS property with a list longer than 6 font family names generates a compiler warning", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1540](https://code.google.com/p/google-caja/issues/detail?id=1540) created by adam@simula.no on 2012-09-21T08:39:29.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nCaja Playground, Rev 5047 built on 2012-09-13 15:28:30\n(https://caja.appspot.com)\n\nSafari 6.0 (7536.25) and Firefox 14.0.1, both in Mac OS X.\n\n<b>What steps will reproduce the problem?</b>\nCompile this:\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      h1 {\n        font-family: A, B, C, D, E, sans-serif;  \n      }\n      h2 {\n        font-family: A, B, C, D, E, F, sans-serif;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;Hello&lt;/h1&gt;\n    &lt;h2&gt;World&lt;/h2&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n<b>What is the expected output? What do you see instead?</b>\n\nCompiling the code above should generate no warnings. However, this is what is printed in the compiler log:\n\nLOG T+2 msec: start ValidateCssStage:\nWARNING unknown:0+0: css property font-family has bad value: A , B , C , D , E , F , sans-serif:unknown:0: &lt;html&gt; \n\n<b>Please provide any additional information below.</b>\n\nThe font family names A to F could be any names you like. The warning is generated when 7 or more names are used.\n\nIn Google Apps Script, HtmlService prints &quot;World&quot; using a font with serifs. I assume that this is due to the Caja compiler warning. Removing one font family name, for example D, generates no compiler warnings in the Caja Playground, and makes HtmlService work correctly as well.\n", "created": "2015-04-16 04:56:25"}, {"url": "https://github.com/google/caja/issues/1539", "closed": "2015-04-16 04:56:25", "ttf": 0.0002777777777777778, "title": "a href=\"#\" opens page in new tab", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1539](https://code.google.com/p/google-caja/issues/detail?id=1539) created by metaweta on 2012-09-20T16:05:13.000Z:\n\nDid somebody change the URI policy?\n", "created": "2015-04-16 04:56:18"}, {"url": "https://github.com/google/caja/issues/1536", "closed": "2015-04-16 04:56:11", "ttf": 0.0002777777777777778, "title": "Reinstate viewProperties and tests", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1536](https://code.google.com/p/google-caja/issues/detail?id=1536) created by kpreid.switchb.org on 2012-09-19T19:22:44.000Z:\n\nElement virtualization (r5044) incidentally lost the application of the \u201cviewProperties\u201d to the HTML and BODY elements in Domado (as they were no longer special pseudo-elements). The tests for these properties are testResizing and testScrolling in es53-test-domado-special-guest.html, which were previously disabled for unrelated reasons.\n\nThe actual properties implemented are:\nclientLeft\nclientTop\nclientHeight\nclientWidth\noffsetLeft\noffsetTop\noffsetHeight\noffsetWidth\npageXOffset\npageYOffset\nscrollLeft\nscrollTop\nscrollHeight\nscrollWidth\n\nNote that many of these properties _should_ be available on all elements, not just the vicinity of the document root; therefore, new tests can and should be written to test their operation on non-root elements, which should then assist in getting the root facilities back to working. It would also be nice if es53-test-domado-special stopped being clipped and nonscrollable.\n", "created": "2015-04-16 04:56:02"}, {"url": "https://github.com/google/caja/issues/1535", "closed": "2015-04-16 04:56:02", "ttf": 0.0002777777777777778, "title": "Virtualized close tags missing from PipelineCacheTest", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1535](https://code.google.com/p/google-caja/issues/detail?id=1535) created by kpreid.switchb.org on 2012-09-19T19:16:43.000Z:\n\nIn PipelineCacheTest as of r5054, the REWRITTEN_HELLO_WORLD_HTML does not contain close tags for virtualized &lt;body&gt; and &lt;html&gt; (and the test passes, so that is the actual output). This suggests that there may be a bug where we are not properly finishing the document in some way. Look into that. (This is likely harmless, but sloppy.)\n", "created": "2015-04-16 04:56:00"}, {"url": "https://github.com/google/caja/issues/1532", "closed": "2015-04-16 04:55:48", "ttf": 0.0002777777777777778, "title": "setTimeout uses a blacklist for object type and allows arbitrary javascript when using an array literal argument", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1532](https://code.google.com/p/google-caja/issues/detail?id=1532) created by gazheyes on 2012-09-18T12:29:19.000Z:\n\nThe setTimeout function uses a blacklist to check for a string type but fails to account for an array literal.\n\n<b>What steps will reproduce the problem?</b>\n1.&lt;script&gt;setTimeout(['alert(location)'])&lt;/script&gt;\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\nExpected: String arguments are not allowed\n\nActual: Arbitrary javascript\n\n<b>Please provide any additional information below.</b>\nhttp://www.thespanner.co.uk/2012/09/18/hacking-caja-part-2/\n", "created": "2015-04-16 04:55:41"}, {"url": "https://github.com/google/caja/issues/1531", "closed": "2015-04-16 04:55:41", "ttf": 0.0002777777777777778, "title": "can't listen to 'change' event on a <div>", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1531](https://code.google.com/p/google-caja/issues/detail?id=1531) created by felix8a on 2012-09-16T16:42:30.000Z:\n\n&lt;div id=&quot;a&quot;&gt;\n  &lt;select&gt;\n    &lt;option&gt;1&lt;/option&gt;\n    &lt;option&gt;2&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n&lt;script&gt;\n  var a = document.getElementById('a');\n  a.addEventListener('change', onchange, false);\n  function onchange(e) {\n    alert('change ' + e.currentTarget.tagName);\n  }\n&lt;/script&gt;\n\nThat should work, but it doesn't, because of bridal tameEventType, which says that since &lt;div&gt; can't have an onchange attribute, 'change' is an unknown threat and instead we'll listen to 'change_custom__'.\n1. the standard html events need to be on a whitelist that isn't specific to an element, since events bubble.\n2. the html whitelist really should allow onchange etc for all elements, since it's valid to say\n   &lt;div onchange='...'&gt;\n   the html4 spec implies that the above doesn't work (and it doesn't work in chrome), but the html5 spec says that it should work (and it does work in firefox).\n\n(doing 2 might be sufficient to solve 1)\n", "created": "2015-04-16 04:55:39"}, {"url": "https://github.com/google/caja/issues/1529", "closed": "2015-04-16 04:55:32", "ttf": 0.0002777777777777778, "title": "Argument modifications lost in tamed functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1529](https://code.google.com/p/google-caja/issues/detail?id=1529) created by maxus@google.com on 2012-09-14T23:38:46.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nUbuntu, Chrome, r5045M.\n\n<b>What steps will reproduce the problem?</b>\n1. Receive an object argument A in a tamed function F from Cajoled code.\n2. Add a new property P to A inside F.\n3. Pass A to some untamed function G.\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect G to see P in A. In reality, inside G I see A as it was passed to F, without P.\n\n<b>Please provide any additional information below.</b>\n\nTest case attached. Output on my machine:\n[&quot;p&quot;]\n[&quot;weakmap:rand:ecfm83k5i9lcerxuspqif8cmy___&quot;]\n[&quot;x&quot;, &quot;weakmap:rand:ecfm83k5i9lcerxuspqif8cmy___&quot;]\n\nI can understand the weakmap properties being added (although I'd rather they weren't), but all three objects should have the &quot;p&quot; property.\n", "created": "2015-04-16 04:55:27"}, {"url": "https://github.com/google/caja/issues/1528", "closed": "2015-04-16 04:55:27", "ttf": 0.0002777777777777778, "title": "Argument modifications lost in tamed functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1528](https://code.google.com/p/google-caja/issues/detail?id=1528) created by maxus@google.com on 2012-09-14T23:38:46.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nUbuntu, Chrome, r5045M.\n\n<b>What steps will reproduce the problem?</b>\n1. Receive an object argument A in a tamed function F from Cajoled code.\n2. Add a new property P to A inside F.\n3. Pass A to some untamed function G.\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect G to see P in A. In reality, inside G I see A as it was passed to F, without P.\n\n<b>Please provide any additional information below.</b>\n\nTest case attached. Output on my machine:\n[&quot;p&quot;]\n[&quot;weakmap:rand:ecfm83k5i9lcerxuspqif8cmy___&quot;]\n[&quot;x&quot;, &quot;weakmap:rand:ecfm83k5i9lcerxuspqif8cmy___&quot;]\n\nI can understand the weakmap properties being added (although I'd rather they weren't), but all three objects should have the &quot;p&quot; property.\n", "created": "2015-04-16 04:55:14"}, {"url": "https://github.com/google/caja/issues/1526", "closed": "2015-04-16 04:55:09", "ttf": 0.0002777777777777778, "title": "Restore test coverage of CSS rewriter", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1526](https://code.google.com/p/google-caja/issues/detail?id=1526) created by kpreid.switchb.org on 2012-09-13T21:50:49.000Z:\n\nAs of r5047, tests/com/google/caja/plugin/CssDynamicExpressionRewriterTest.java testBodyMarker was designed to test the now-removed rewriting of &lt;body&gt; into .vdoc-body___; it should be revised or deleted according to what is useful test coverage in the post-element-virtualization world.\n", "created": "2015-04-16 04:55:05"}, {"url": "https://github.com/google/caja/issues/1525", "closed": "2015-04-16 04:55:04", "ttf": 0.0002777777777777778, "title": "Examine potentially obsolete code in CSS rewriter", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1525](https://code.google.com/p/google-caja/issues/detail?id=1525) created by kpreid.switchb.org on 2012-09-13T21:49:53.000Z:\n\nAs of r5047, the following files contain code with cases which may be obsolete since the removal of the &lt;BODY&gt; rewriting special cases. They should be reviewed with some care. Both are marked with TODO(kpreid) comments.\n\nsrc/com/google/caja/plugin/CssRewriter.java\nsrc/com/google/caja/plugin/CssValidator.java  \n", "created": "2015-04-16 04:55:02"}, {"url": "https://github.com/google/caja/issues/1524", "closed": "2015-04-16 04:55:02", "ttf": 0.0002777777777777778, "title": "-webkit-transform and similar CSS properties get stripped out by the sanitizer", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1524](https://code.google.com/p/google-caja/issues/detail?id=1524) created by maks@google.com on 2012-09-13T21:10:36.000Z:\n\nI am trying to use the following CSS properties in my App Script web app, but they all seem to get stripped out by the sanitizer:\n        transform:rotate(-40deg);\n        -ms-transform:rotate(-40deg); /\\* IE 9 _/\n        -moz-transform:rotate(-40deg); /_ Firefox _/\n        -webkit-transform: rotate(-40deg); /_ Safari and Chrome _/\n        -o-transform:rotate(-40deg); /_ Opera */\n\nAny way these could work in the same way other CSS properties do?\n", "created": "2015-04-16 04:54:53"}, {"url": "https://github.com/google/caja/issues/1523", "closed": "2015-04-16 04:54:53", "ttf": 0.0002777777777777778, "title": "cajoled jquery-1.8.1 has problems on chrome", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1523](https://code.google.com/p/google-caja/issues/detail?id=1523) created by felix8a on 2012-09-13T18:10:20.000Z:\n\ntry to run a jquery example in the playground on chrome, using jquery-1.8.1.\nchrome 22 (beta) ends up spinning cpu indefinitely, possibly an infinite loop, I killed it after a minute.\n", "created": "2015-04-16 04:54:50"}, {"url": "https://github.com/google/caja/issues/1522", "closed": "2015-04-16 04:54:50", "ttf": 0.0002777777777777778, "title": "Server returns 500 when I try to cajole JQuery examples", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1522](https://code.google.com/p/google-caja/issues/detail?id=1522) created by camilo@onswipe.com on 2012-09-13T03:31:27.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\n<b>What steps will reproduce the problem?</b>\n1. Select Accordion\n2. Click on Cajole\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\nI'd expect a JQuery accordion perfectly rendered. But I'm getting an 500 error from the server\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:54:43"}, {"url": "https://github.com/google/caja/issues/1521", "closed": "2015-04-16 04:54:43", "ttf": 0.0002777777777777778, "title": "Cajoler 500 error in code attempting to use ranges", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1521](https://code.google.com/p/google-caja/issues/detail?id=1521) created by shel.davis@cloudsherpas.com on 2012-09-11T16:00:02.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nCaja Playground\nGoogle Caja. Copyright (C) 2011, Google Inc. Rev 5002 built on 2012-08-02 14:58:24.\n(http://caja.appspot.com/)\n\nChrome 21.0.1180.89\nWindows 7, Home Premium\n\nTo do this test, I used RangyInputs... RangyInputs is a small cross-browser JavaScript library for obtaining and manipulating selections within &lt;textarea&gt; and &lt;input type=&quot;text&quot;&gt; HTML elements. (http://code.google.com/p/rangyinputs/)\n\n<b>What steps will reproduce the problem?</b>\n1. Copy the attached HTML into the Caja playground.\n2. Cajole it.\n3. See the server error 500.\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect to see a page like the RangyInputs demo page, where I can type into a TextArea and manipulate it. (http://rangyinputs.googlecode.com/svn/trunk/demos/textinputs_jquery.html)\n\nInstead, I see a server error 500.\n\n<b>Please provide any additional information below.</b>\n\nI've added RangyInputs into Apps Script applications as well, where I can see more feed back from the server. I get the following message, which I assume you'll see in your logs as well.\n\nTextInputs module for Rangy not supported in your browser.\nReason: No means of finding text input caret position \n\nSo, why is the caret position (or even &quot;selected text&quot;) being blocked by Caja?\n\nThanks in advance for your feedback on this issue.\n\n++++++++++++\n\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Rangyinputs jQuery plugin demo&lt;/title&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;http://rangyinputs.googlecode.com/files/textinputs_jquery.js&quot;&gt;&lt;/script&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        p.inputcontainer {\n            background-color: lightgoldenrodyellow;\n            border: solid 1px darkblue;\n            padding: 0.3125em;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Rangy Text Inputs jQuery Demo&lt;/h1&gt;\n\n&lt;br&gt;&lt;br&gt;\n\n&lt;p class=&quot;inputcontainer&quot;&gt;\n    &lt;input type=&quot;button&quot; class=&quot;unselectable&quot; value=&quot;get selection range&quot;\n           onmousedown=&quot;var sel = $('#ta').getSelection(); alert(sel.start + ',' + sel.end);&quot;&gt;\n\n```\n&lt;input type=&quot;button&quot; class=&quot;unselectable&quot; value=&quot;paste test text&quot;\n       onmousedown=&quot;$('#ta').replaceSelectedText('**Test**')&quot;&gt;\n\n&lt;input type=&quot;button&quot; class=&quot;unselectable&quot; value=&quot;extract selected text&quot;\n       onmousedown=&quot;alert($('#ta').extractSelectedText())&quot;&gt;\n\n&lt;input type=&quot;button&quot; class=&quot;unselectable&quot; value=&quot;surround selected text&quot;\n       onmousedown=&quot;$('#ta').surroundSelectedText('[Before]', '[After]', true); $('#ta').focus()&quot;&gt;\n\n&lt;input type=&quot;button&quot; class=&quot;unselectable&quot; value=&quot;replace selected text&quot;\n       onmousedown=&quot;$('#ta').replaceSelectedText('[Replacement text]'); $('#ta').focus()&quot;&gt;\n\n&lt;input type=&quot;button&quot; class=&quot;unselectable&quot; value=&quot;collapse to start&quot;\n       onmousedown=&quot;$('#ta').collapseSelection(true); $('#ta').focus()&quot;&gt;\n\n&lt;input type=&quot;button&quot; class=&quot;unselectable&quot; value=&quot;collapse to end&quot;\n       onmousedown=&quot;$('#ta').collapseSelection(false); $('#ta').focus()&quot;&gt;\n\n&lt;input type=&quot;button&quot; class=&quot;unselectable&quot; value=&quot;set selection&quot;\n       onmousedown=&quot;$('#ta').setSelection(+$('#ta_start')[0].value, +$('#ta_end')[0].value); $('#ta').focus()&quot;&gt;\n\nStart: &lt;input type=&quot;text&quot; id=&quot;ta_start&quot; size=&quot;3&quot; value=&quot;5&quot;&gt;\nEnd: &lt;input type=&quot;text&quot; id=&quot;ta_end&quot; size=&quot;3&quot; value=&quot;7&quot;&gt;\n\n&lt;br&gt;&lt;br&gt;\n&lt;textarea rows=&quot;15&quot; cols=&quot;80&quot; id=&quot;ta&quot;&gt;Some test text\n```\n\nThat has\n\nSome line breaks, including some trailing ones\n\n&lt;/textarea&gt;\n&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n", "created": "2015-04-16 04:54:39"}, {"url": "https://github.com/google/caja/issues/1520", "closed": "2015-04-16 04:54:38", "ttf": 0.0002777777777777778, "title": "WeakMaps implementation is insecure if two guest frames exchange", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1520](https://code.google.com/p/google-caja/issues/detail?id=1520) created by jasvir on 2012-09-07T21:42:27.000Z:\n\nWhile talking to Mark, we came to realize that the current WeakMaps implementation is vulnerable if two guest frames exchange WeakMaps.  Here is a demonstration of the leak.  This snippet should never call cajaVM.log but does on Chrome (which does not have a native implementation of WeakMap).\n\n  caja.initialize({ forceES5Mode: true });\n  var myMap = { value: undefined };\n\n  for (var content in [0,1]) {\n    caja.load(document.createElement('div'), undefined,\n        function(frame) {\n          frame.code(&quot;weakmaps-guest.js&quot;, &quot;text/javascript&quot;,\n    &quot;if (exchange.value) {&quot; +\n    &quot;  Object.getOwnPropertyNames(exchange.value)&quot; +\n    &quot;        .filter(function(x) { return /^rand/.test(x) })&quot; +\n    &quot;        .map(function(x) { cajaVM.log('fail!  Found secret ' + x) })&quot; +\n    &quot;} else {&quot; +\n    &quot;  exchange.value = new WeakMap;&quot; +\n    &quot;}&quot;)\n               .api(caja.tame({ exchange: myMap }))\n               .run()\n          });\n  }\n&lt;/script&gt;\n", "created": "2015-04-16 04:54:32"}, {"url": "https://github.com/google/caja/issues/1519", "closed": "2015-04-16 04:54:31", "ttf": 0.0002777777777777778, "title": "Taming of constructors exposes exophoric function", "commits": {}, "user": "kpreid", "labels": ["Component-Taming", "Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1519](https://code.google.com/p/google-caja/issues/detail?id=1519) created by ihab.awad on 2012-09-07T19:13:04.000Z:\n\nThe taming of a constructor currently exposes an exophoric function. Consider the following host code (from es53-test-taming-tamed.js):\n\n```\napi.readOnlyRecord = {\n  xo4aTestValue: 19,\n};\n\nframe.markReadOnlyRecord(api.readOnlyRecord);\n\napi.Ctor = function Ctor(x) {};\napi.Ctor.prototype.xo4aTestMethod = function(v) {\n  this.xo4aTestValue = v;\n};\n\nframe.markCtor(api.Ctor, Object, 'Ctor');\nframe.grantMethod(api.Ctor.prototype, 'xo4aTestMethod');\n```\n\nThe following test code will fail (from es53-test-taming-tamed-guest.html):\n\n```\nassertEquals(19, tamedApi.readOnlyRecord.xo4aTestValue);\nvar pd = Object.getOwnPropertyDescriptor(\n    tamedApi.Ctor.prototype, 'xo4aTestMethod');\nvar getter = pd.get;\ntry {\n  var method = getter.call(tamedApi.readOnlyRecord);\n  method(17);\n} catch (e) { }\nassertEquals(19, tamedApi.readOnlyRecord.xo4aTestValue);\npass('testMethodGetterXo4a');\n```\n\nThis is because the 'get' of the property descriptor of a method property on a constructor's prototype is vulnerable to being rebound to a new 'this' object without constraint. Looking at the implementation:\n\nhttp://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/plugin/taming-membrane.js?r=5017\n\nNote how on lines 356 and 360, makePrototypeMethod(...) is used to protect the getter and setter of the property descriptor of plain data properties. At line 335, the getter of a method property is not similarly protected.\n", "created": "2015-04-16 04:54:18"}, {"url": "https://github.com/google/caja/issues/1517", "closed": "2015-04-16 04:54:00", "ttf": 0.0002777777777777778, "title": "Shorthand properties don't support CSS functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1517](https://code.google.com/p/google-caja/issues/detail?id=1517) created by matt@easel.io on 2012-08-31T18:20:18.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nr4966\n\n<b>What steps will reproduce the problem?</b>\n1. Run `sanitizeStylesheet(&quot;.test{border: 1px solid rgb(0,0,0)&quot;, &quot;prefix&quot;, function(u){return(u)})`\n\n<b>What is the expected output? What do you see instead?</b>\nThe expected output is &quot;.prefix .test{border: 1px solid rgb(0,0,0);}&quot;\n\nHowever I receive &quot;.prefix .test{border: 1px solid;}&quot;&quot;\n\nAfter spending a couple hours of debugging this I believe that the style definitions are correct (ie the border css property definition is correct) but that the cssExtra regexp that is getting applied contains the rgb function defined twice. This is some how related to rule definitions which contain a || in them.\n", "created": "2015-04-16 04:53:51"}, {"numCommits": 1, "closed": "2015-05-21 23:39:49", "ttf": 35.000277777777775, "title": "ses.UnsafeError should not be accessible", "user": "kpreid", "filteredCommits": ["2c456854bb8584db53bbceaee919d204637e1724"], "commitsDetails": [{"commitGHEventType": "referenced", "authoredDateTime": "2015-06-24 10:11:29", "commitDateTime": "2015-06-30 14:17:02", "commitHash": "2c456854bb8584db53bbceaee919d204637e1724", "nameRev": "2c456854bb8584db53bbceaee919d204637e1724 tags/v6002-es53^2", "commitMessage": "Re-enable ses.UnsafeError.\nhttps://codereview.appspot.com/248500043\n\nApplications want to access Error.stackTraceLimit. This is a temporary\nmeasure until a proper safe API exists.\n\nContext:\nhttps://github.com/google/caja/issues/1516\nhttps://groups.google.com/forum/#!topic/google-caja-discuss/46_j5Rb6cTc\n\nR=erights@gmail.com\n", "spoonStatsSkippedReason": "", "commitParents": ["3ddbc0245f863d18be5d91b117211a505aeb8fa4"], "commitGitStats": [{"filePath": "src/com/google/caja/ses/debug.js", "lines": 14, "deletions": 0, "insertions": 14}], "commitSpoonAstDiffStats": [], "commitUser": "kpreid"}], "url": "https://github.com/google/caja/issues/1516", "created": "2015-04-16 04:53:40", "gitStatsSummary": {"gitFilesChange": 1, "lines": 14, "deletions": 0, "insertions": 14}, "changesInPackagesGIT": ["src/com/google/caja/ses/debug.js"], "spoonStatsSummary": {}, "commits": {"2c456854bb8584db53bbceaee919d204637e1724": {"commitGHEventType": "referenced", "commitUser": "kpreid"}}, "statsSkippedReason": "", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "body": "Original [issue 1516](https://code.google.com/p/google-caja/issues/detail?id=1516) created by justinlpombrio on 2012-08-31T17:36:06.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Initialize Ses\n2. Evaluate Ses.UnsafeError\n\n<b>What is the expected output? What do you see instead?</b>\n\nYou get a reference to the _unfrozen_ Error primordial. This should not be accessible after Ses has initialized.\n\nQuoth Mark Miller, &quot;That's a good point about ses.UnsafeError. Really, that shouldn't be accessible after initialization even to SES privileged code. Please file this as a bug, though not a security hole.&quot;\n", "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0, "moreThanOneParent": 0}}, {"url": "https://github.com/google/caja/issues/1513", "closed": "2015-04-16 04:53:22", "ttf": 0.0002777777777777778, "title": "debugging in es5/3 mode is broken in Chrome", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1513](https://code.google.com/p/google-caja/issues/detail?id=1513) created by metaweta on 2012-08-30T19:24:04.000Z:\n\n&lt;script&gt;\ndebugger;\n&lt;/script&gt;\n\nThe console throws this error whenever it tries to evaluate an expression:\n\nError: Internal: toxic function encountered! function () { return document.getElementById.apply(document, arguments) }\n", "created": "2015-04-16 04:53:13"}, {"url": "https://github.com/google/caja/issues/1512", "closed": "2015-04-16 04:53:13", "ttf": 0.0002777777777777778, "title": "No support for 'scroll' events", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1512](https://code.google.com/p/google-caja/issues/detail?id=1512) created by CHOCKALINGAM.R@ssomens.com on 2012-08-29T15:57:30.000Z:\n\nI have created a table in HTML and added the styles using CSS and added a scrolling element through javascript. i attached the sample source code with this post. The scrolling is not working when i place the code in google site.\n\nCoding in HTML file named &quot;table.html&quot; is below\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;style&gt;\n      table#table-body, table#table-header, table#table-footer\n      {\n        border-spacing:0;\n        border-collapse:collapse;\n        border:1px solid;\n        table-layout:fixed;\n        width:1000px;\n        border:1px solid #&nbsp;000;\n      }\n\n```\n  table#table-header th\n  {\n    background:#c2a1a1;\n  }\n\n  table#table-footer td\n  {\n    background:#a39393;\n  }\n\n  table#table-body td\n  {\n    background:#e1d9d9;\n  }\n\n  table#table-body td, table#table-header th, table#table-footer td\n  {\n    border:1px solid #&nbsp;000;\n    width:100px;\n    height:30px;\n    overflow:hidden;\n    white-space:nowrap; \n  }\n\n  div#header-container, div#footer-container\n  {\n    overflow:hidden;\n  }\n\n  div#scroll\n  {\n    width:500px;\n    overflow:hidden;\n    max-height:150px;\n    padding-left:1px;\n  }\n\n  div#fake-scroll-container\n  {\n    width:500px;\n    overflow:hidden;\n    position:relative;\n  }\n\n  div#y-fake-scroll\n  {\n    overflow-y:scroll; \n    overflow-x:hidden;\n    background:transparent; \n    position:absolute;\n    right:0;\n    position:absolute;\n    max-height:149px;\n    top:31px;\n  }\n\n  div#x-fake-scroll\n  {\n    height:40px;\n    margin-top:-23px;\n    overflow-x:auto;\n    overflow-y:hidden;\n    margin-top:expression('0px');/* IE 7 fix*/\n    height:expression('17px'); /* IE 7 fix*/\n  }\n\n  div#y-scroll\n  {\n    max-height:150px;\n    overflow-y:auto;\n    overflow-x:hidden;\n    overflow:scroll;\n    width:1010px;\n    padding:0px 1px 1px 1px;\n  }\n\n  div#header-container\n  {\n    padding:1px 1px 0 1px;\n  }\n\n  div#footer-container\n  {\n    padding:0 1px;\n  }      \n&lt;/style&gt;\n```\n\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div id=&quot;fake-scroll-container&quot;&gt;\n\n```\n  &lt;div id=&quot;header-container&quot;&gt;\n    &lt;table id=&quot;table-header&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;\n      &lt;tr&gt;\n        &lt;th&gt;Column 1&lt;/th&gt;\n        &lt;th&gt;Column 2&lt;/th&gt;\n        &lt;th&gt;Column 3&lt;/th&gt;\n        &lt;th&gt;Column 4&lt;/th&gt;\n        &lt;th&gt;Column 5&lt;/th&gt;\n        &lt;th&gt;Column 6&lt;/th&gt;\n        &lt;th&gt;Column 7&lt;/th&gt;\n        &lt;th&gt;Column 8&lt;/th&gt;\n        &lt;th&gt;Column 9&lt;/th&gt;\n        &lt;th&gt;Column 10&lt;/th&gt;\n      &lt;/tr&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n\n  &lt;div id=&quot;scroll&quot;&gt;\n    &lt;table id=&quot;table-body&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot;&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Cell 1.1&lt;/td&gt;\n        &lt;td&gt;Cell 1.2&lt;/td&gt;\n        &lt;td&gt;Cell 1.3&lt;/td&gt;\n        &lt;td&gt;Cell 1.4&lt;/td&gt;\n        &lt;td&gt;Cell 1.5&lt;/td&gt;\n        &lt;td&gt;Cell 1.6&lt;/td&gt;\n        &lt;td&gt;Cell 1.7&lt;/td&gt;\n        &lt;td&gt;Cell 1.8&lt;/td&gt;\n        &lt;td&gt;Cell 1.9&lt;/td&gt;\n        &lt;td&gt;Cell 1.10&lt;/td&gt;      \n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Cell 2.1&lt;/td&gt;\n        &lt;td&gt;Cell 2.2&lt;/td&gt;\n        &lt;td&gt;Cell 2.3&lt;/td&gt;\n        &lt;td&gt;Cell 2.4&lt;/td&gt;\n        &lt;td&gt;Cell 2.5&lt;/td&gt;\n        &lt;td&gt;Cell 2.6&lt;/td&gt;\n        &lt;td&gt;Cell 2.7&lt;/td&gt;\n        &lt;td&gt;Cell 2.8&lt;/td&gt;\n        &lt;td&gt;Cell 2.9&lt;/td&gt;\n        &lt;td&gt;Cell 2.10&lt;/td&gt;      \n      &lt;/tr&gt; \n      &lt;tr&gt;\n        &lt;td&gt;Cell 3.1&lt;/td&gt;\n        &lt;td&gt;Cell 3.2&lt;/td&gt;\n        &lt;td&gt;Cell 3.3&lt;/td&gt;\n        &lt;td&gt;Cell 3.4&lt;/td&gt;\n        &lt;td&gt;Cell 3.5&lt;/td&gt;\n        &lt;td&gt;Cell 3.6&lt;/td&gt;\n        &lt;td&gt;Cell 3.7&lt;/td&gt;\n        &lt;td&gt;Cell 3.8&lt;/td&gt;\n        &lt;td&gt;Cell 3.9&lt;/td&gt;\n        &lt;td&gt;Cell 3.10&lt;/td&gt;      \n      &lt;/tr&gt; \n      &lt;tr&gt;\n        &lt;td&gt;Cell 4.1&lt;/td&gt;\n        &lt;td&gt;Cell 4.2&lt;/td&gt;\n        &lt;td&gt;Cell 4.3&lt;/td&gt;\n        &lt;td&gt;Cell 4.4&lt;/td&gt;\n        &lt;td&gt;Cell 4.5&lt;/td&gt;\n        &lt;td&gt;Cell 4.6&lt;/td&gt;\n        &lt;td&gt;Cell 4.7&lt;/td&gt;\n        &lt;td&gt;Cell 4.8&lt;/td&gt;\n        &lt;td&gt;Cell 4.9&lt;/td&gt;\n        &lt;td&gt;Cell 4.10&lt;/td&gt;      \n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Cell 5.1&lt;/td&gt;\n        &lt;td&gt;Cell 5.2&lt;/td&gt;\n        &lt;td&gt;Cell 5.3&lt;/td&gt;\n        &lt;td&gt;Cell 5.4&lt;/td&gt;\n        &lt;td&gt;Cell 5.5&lt;/td&gt;\n        &lt;td&gt;Cell 5.6&lt;/td&gt;\n        &lt;td&gt;Cell 5.7&lt;/td&gt;\n        &lt;td&gt;Cell 5.8&lt;/td&gt;\n        &lt;td&gt;Cell 5.9&lt;/td&gt;\n        &lt;td&gt;Cell 5.10&lt;/td&gt;      \n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Cell 6.1&lt;/td&gt;\n        &lt;td&gt;Cell 6.2&lt;/td&gt;\n        &lt;td&gt;Cell 6.3&lt;/td&gt;\n        &lt;td&gt;Cell 6.4&lt;/td&gt;\n        &lt;td&gt;Cell 6.5&lt;/td&gt;\n        &lt;td&gt;Cell 6.6&lt;/td&gt;\n        &lt;td&gt;Cell 6.7&lt;/td&gt;\n        &lt;td&gt;Cell 6.8&lt;/td&gt;\n        &lt;td&gt;Cell 6.9&lt;/td&gt;\n        &lt;td&gt;Cell 6.10&lt;/td&gt;      \n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Cell 7.1&lt;/td&gt;\n        &lt;td&gt;Cell 7.2&lt;/td&gt;\n        &lt;td&gt;Cell 7.3&lt;/td&gt;\n        &lt;td&gt;Cell 7.4&lt;/td&gt;\n        &lt;td&gt;Cell 7.5&lt;/td&gt;\n        &lt;td&gt;Cell 7.6&lt;/td&gt;\n        &lt;td&gt;Cell 7.7&lt;/td&gt;\n        &lt;td&gt;Cell 7.8&lt;/td&gt;\n        &lt;td&gt;Cell 7.9&lt;/td&gt;\n        &lt;td&gt;Cell 7.10&lt;/td&gt;      \n      &lt;/tr&gt;\n      &lt;tr&gt;\n        &lt;td&gt;Cell 8.1&lt;/td&gt;\n        &lt;td&gt;Cell 8.2&lt;/td&gt;\n        &lt;td&gt;Cell 8.3&lt;/td&gt;\n        &lt;td&gt;Cell 8.4&lt;/td&gt;\n        &lt;td&gt;Cell 8.5&lt;/td&gt;\n        &lt;td&gt;Cell 8.6&lt;/td&gt;\n        &lt;td&gt;Cell 8.7&lt;/td&gt;\n        &lt;td&gt;Cell 8.8&lt;/td&gt;\n        &lt;td&gt;Cell 8.9&lt;/td&gt;\n        &lt;td&gt;Cell 8.10&lt;/td&gt;      \n      &lt;/tr&gt;\n    &lt;/table&gt;    \n  &lt;/div&gt;\n  &lt;div id=&quot;y-fake-scroll&quot;&gt;\n    &lt;div id=&quot;y-table-emulator&quot; style=&quot;width:40px;&quot;&gt;\n      &amp;nbsp;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;div id=&quot;x-fake-scroll&quot;&gt;\n    &lt;div id=&quot;x-table-emulator&quot;&gt;\n      &amp;nbsp;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;script&gt;\n    var YtableEmulator = document.getElementById('y-table-emulator');\n    var XtableEmulator = document.getElementById('x-table-emulator');\n    var table = document.getElementById('table-body');\n\n    YtableEmulator.style.height = table.clientHeight == 0 ? &quot;330px&quot; : table.clientHeight + &quot;px&quot;;\n    XtableEmulator.style.width = table.clientWidth + &quot;px&quot;;\n\n    var scrollablePanel = document.getElementById('scroll');\n    var headerContainer = document.getElementById('header-container');\n    var footerContainer = document.getElementById('footer-container');\n    var YfakeScrollablePanel = document.getElementById('y-fake-scroll');\n    var XfakeScrollablePanel = document.getElementById('x-fake-scroll');\n\n\n    YfakeScrollablePanel.style.top = headerContainer.clientHeight == 0 ? &quot;34px&quot; : headerContainer.clientHeight + &quot;px&quot;;\n    scrollablePanel.onscroll = function (e) {\n      XfakeScrollablePanel.scrollTop = scrollablePanel.scrollTop;\n    }\n      YfakeScrollablePanel.onscroll = function (e) {\n        scrollablePanel.scrollTop = YfakeScrollablePanel.scrollTop;\n      }\n        XfakeScrollablePanel.onscroll = function (e) {\n          scrollablePanel.scrollLeft = XfakeScrollablePanel.scrollLeft;\n          headerContainer.scrollLeft = XfakeScrollablePanel.scrollLeft;\n          footerContainer.scrollLeft = XfakeScrollablePanel.scrollLeft;\n        }\n          alert('but this is fine!');\n  &lt;/script&gt;\n&lt;/div&gt;\n```\n\n  &lt;/body&gt;\n&lt;/html&gt;\n\nCoding in the GAS file named &quot;Code.gs&quot; is here\n\nfunction doGet() {\n  return HtmlService.createTemplateFromFile('table').evaluate();\n}\n\nI think the .onscroll inside the script tag is not working while publishing the project.\n", "created": "2015-04-16 04:52:37"}, {"url": "https://github.com/google/caja/issues/1510", "closed": "2015-04-16 04:52:08", "ttf": 0.0002777777777777778, "title": "Can't support self-aware constructors", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1510](https://code.google.com/p/google-caja/issues/detail?id=1510) created by maxus@google.com on 2012-08-23T21:59:13.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nUbuntu, Chrome, r4969+\n\n<b>What steps will reproduce the problem?</b>\n1. Create a constructor C that checks if &quot;this&quot; is an instance of C, and if not, return new C().\n2. Mark it as a function or constructor and tame it.\n3. Access it as bot C() and new C().\n\n<b>What is the expected output? What do you see instead?</b>\n\nBoth C() and new C() should behave identically. In actuality, C() returns undefined.\n\n<b>Please provide any additional information below.</b>\n\nTest case attached. Output on my machine:\n\nMarkedCtor()\n  undefined\nnew MarkedCtor()\n  [object Object]\nMarkedFunc()\n  manual new MarkedFunc\n  undefined\nnew MarkedFunc()\n  manual new MarkedFunc\n  [object Object]\nMarkedXo4a()\nUncaught TypeError: Host object leaked without being tamed ses-taming-frame.opt.js:1072\nnew MarkedXo4a()\nUncaught TypeError: Untaming of guest constructed objects unsupported: [object Object] \n", "created": "2015-04-16 04:52:04"}, {"url": "https://github.com/google/caja/issues/1509", "closed": "2015-04-16 04:52:03", "ttf": 0.0002777777777777778, "title": "ES5/3 doesn't hoist global variable declarations properly.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1509](https://code.google.com/p/google-caja/issues/detail?id=1509) created by stay@google.com on 2012-08-22T23:18:42.000Z:\n\n&lt;script&gt;\nvar x = x || {};\n&lt;/script&gt;\n\nThis incorrectly throws a ReferenceError.\n", "created": "2015-04-16 04:52:01"}, {"url": "https://github.com/google/caja/issues/1508", "closed": "2015-04-16 04:52:01", "ttf": 0.0002777777777777778, "title": "sometimes hard to debug es5 in webkit browsers", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1508](https://code.google.com/p/google-caja/issues/detail?id=1508) created by felix8a on 2012-08-20T20:26:11.000Z:\n\nbecause the webkit debuggers rely on calling eval in the current script context, and es5 doesn't provide a usable eval in untrusted script contexts.\n\nthis could be fixed on the webkit side, so I've filed a bug\n  https://bugs.webkit.org/show_bug.cgi?id=94518\nbut that might be a wontfix because it's kind of a slippery slope.  the debugger relies on many things being undisturbed, and it might be hard to argue that eval should be handled specially.\n\nI haven't thought of a good plan B yet.\n\nthe debugger uses eval in many different ways:\nhttp://code.google.com/searchframe#OAMlx_jo-ck/src/third_party/WebKit/Source/WebCore/inspector/InjectedScriptSource.js&amp;type=cs\n", "created": "2015-04-16 04:51:48"}, {"url": "https://github.com/google/caja/issues/1506", "closed": "2015-04-16 04:51:34", "ttf": 0.0002777777777777778, "title": "JQuery $(selector)[.text .html etc] does not work if selector has multiple elements", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1506](https://code.google.com/p/google-caja/issues/detail?id=1506) created by hgabreu on 2012-08-17T17:57:29.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nr4969\nFirefox 14.0.1 and Chromium 21.0.1180.79 on GNU/Linux 3.4.9 x86_64\n\n<b>What steps will reproduce the problem?</b>\n1. Try the following code:\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script type=&quot;text/javascript&quot; src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js&quot;&gt;&lt;/script&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n      $(function() {\n        $('.foo').text('bar');\n      });\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h1&gt;jquery test&lt;/h1&gt;\n    &lt;p&gt;&lt;span class=&quot;foo&quot;&gt;foo&lt;/span&gt;\n      &lt;br&gt;&lt;span class=&quot;foo&quot;&gt;another foo&lt;/span&gt;\n      &lt;br&gt;\n      &lt;br&gt;&quot;bar&quot; means it worked, blank is the reproducible error&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nBoth &quot;foo&quot; texts should be replaced with &quot;bar&quot;.\nInstead, both span.foo tags are blank.\n\n<b>Please provide any additional information below.</b>\nIf the selector has only one element it does work. e.g. the html has only one tag with a &quot;foo&quot; class, or if we manually call selector.each, as in:\n\n$('.foo').each(function(){ $(this).text('bar'); });\n", "created": "2015-04-16 04:51:27"}, {"url": "https://github.com/google/caja/issues/1502", "closed": "2015-04-16 04:50:58", "ttf": 0.0002777777777777778, "title": "Cajoling service uses InputSource.UNKNOWN to compute file position information for POSTs", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1502](https://code.google.com/p/google-caja/issues/detail?id=1502) created by jasvir on 2012-08-09T17:17:48.000Z:\n\nThe cajoling service uses InputSource.UNKNOWN to fetch and identify textual content eg. CSS.  Since the inputsource is used subsequently to resolve relative urls, those urls resolve to having unknown:// scheme.\n", "created": "2015-04-16 04:50:56"}, {"url": "https://github.com/google/caja/issues/1501", "closed": "2015-04-16 04:50:55", "ttf": 0.0002777777777777778, "title": "forEach(fn, thisObj) converts primitive thisObj arguments to objects ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1501](https://code.google.com/p/google-caja/issues/detail?id=1501) created by metaweta on 2012-08-06T02:04:17.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. [1,2,3].forEach(function(){cajaVM.log(this)}, &quot;foo&quot;)\n\n<b>What is the expected output? What do you see instead?</b>\nExpect to see the primitive string &quot;foo&quot;; instead see a String object.\n\nAn implementation that does not convert needs to be supplied as part of repairES5.\n", "created": "2015-04-16 04:50:23"}, {"url": "https://github.com/google/caja/issues/1499", "closed": "2015-04-16 04:49:52", "ttf": 0.0002777777777777778, "title": "ES5 is broken in playground on FF", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1499](https://code.google.com/p/google-caja/issues/detail?id=1499) created by metaweta on 2012-07-25T22:43:40.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Switch to ES5 mode\n2. Type foo in the content box\n3. Press cajole\n\n<b>What is the expected output? What do you see instead?</b>\nfoo\nInstead I see a runtime error about how access is denied to the ___ property of one of the windows in the page\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:49:47"}, {"url": "https://github.com/google/caja/issues/1498", "closed": "2015-04-16 04:49:47", "ttf": 0.0002777777777777778, "title": "a = x[a]++ uses the new value of a when incrementing", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1498](https://code.google.com/p/google-caja/issues/detail?id=1498) created by metaweta on 2012-07-25T21:10:21.000Z:\n\nhttps://bugs.webkit.org/show_bug.cgi?id=91270\n\nIt doesn't take any shortcuts when setting it though, so for example if a setter accessor exists for the new value of a, it'll fire; it won't extend x if x is sealed.  We should just check that this unusual construct doesn't appear in our TCB.\n", "created": "2015-04-16 04:49:43"}, {"url": "https://github.com/google/caja/issues/1497", "closed": "2015-04-16 04:49:42", "ttf": 0.0002777777777777778, "title": "Google Visualization not working with google appscript", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1497](https://code.google.com/p/google-caja/issues/detail?id=1497) created by karan.saxena@apollomunichinsurance.com on 2012-07-24T10:57:08.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nRev 4960 built on 2012-07-03 09:30:51.\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\nThe expected output is the google chart.\nBut the chart does not render.\n\n<b>Please provide any additional information below.</b>\n\nFor more info Please refer the link below.\n\nhttp://stackoverflow.com/questions/11625604/google-visualization-not-working-with-appscript-html-service\n", "created": "2015-04-16 04:49:38"}, {"url": "https://github.com/google/caja/issues/1496", "closed": "2015-04-16 04:49:38", "ttf": 0.0002777777777777778, "title": "jQueryUI DatePicker doesn't allow you to click a date. ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1496](https://code.google.com/p/google-caja/issues/detail?id=1496) created by cgoldfeder@google.com on 2012-07-19T12:18:26.000Z:\n\n&lt;html&gt;\n  &lt;script src=&quot;http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.18/jquery-ui.min.js&quot;&gt;&lt;/script&gt;\n  &lt;link rel='stylesheet' href='http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.21/themes/redmond/jquery-ui.css'&gt;\n  &lt;script&gt;\n    $(function() {\n        $('#datepicker').datepicker();\n    });\n  &lt;/script&gt;\n  &lt;div style=&quot;height:500px&quot;&gt;\n    &lt;input type=&quot;text&quot; id=&quot;datepicker&quot;&gt;\n  &lt;/div&gt;\n&lt;/html&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n", "created": "2015-04-16 04:49:13"}, {"url": "https://github.com/google/caja/issues/1495", "closed": "2015-04-16 04:49:13", "ttf": 0.0002777777777777778, "title": "Method 'v___' not registered for base.ownerDocument on ie8/ie9", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1495](https://code.google.com/p/google-caja/issues/detail?id=1495) created by xlxkming on 2012-07-19T10:05:52.000Z:\n\nSCRIPT438: Object doesn't support property or method 'v___' \nes53-taming-frame.js?debug=1, line 9088 character 19\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nrevision: caja r4960\nbrowser: ie8 ie9\nOS: win7\n\n<b>What steps will reproduce the problem?</b>\nnormal use\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please provide any additional information below.</b>\nIn es53-taming-frame.js:\n\n```\n            function HtmlEmitter(makeDOMAccessible, base, opt_domicile,\n              opt_guestGlobal) {\n              var dis___ = this &amp;&amp; this.___? void 0: this;\n              var insertionPoint, bridal, baseUri, ...;\n\n              ...\n\n              baseUri = '' + (x0___ = base.ownerDocument_v___?   //9088\n                  base.ownerDocument: base.v___('ownerDocument'),\n                x0___.location_v___? x0___.location: x0___.v___('location')\n              );\n```\n\nSome debug information below:\n\n[+]base {...}   DispHTMLDivElement\n   base.ownerDocument_v___  undefined   Undefined\n[+]base.v___    {...}   Object\n[+]base.v___('ownerDocument')   {...}   DispHTMLDocument\n   base.v___('ownerDocument')===base.ownerDocument  true    [+]base.ownerDocument   {...}   DispHTMLDocument\n   base.ownerDocument.location_v___ undefined\n   base.ownerDocument.v___  undefined  //here is the cause\n\n---\n\n[+]base.ownerDocument.location  {...}   DispHTMLLocation\n   base.innerHTML   ---The content in the guest div\n   document == base.ownerDocument   false\n", "created": "2015-04-16 04:49:07"}, {"url": "https://github.com/google/caja/issues/1494", "closed": "2015-04-16 04:49:06", "ttf": 0.0002777777777777778, "title": "default is a reserved word in JavaScript", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1494](https://code.google.com/p/google-caja/issues/detail?id=1494) created by xlxkming on 2012-07-19T03:39:03.000Z:\n\nIn es53-frame-group.js\uff1a\n\n```\nvar targetAttributePresets = undefined;\nif (config.targetAttributePresets) {\n  targetAttributePresets = {};\n  targetAttributePresets.default = config.targetAttributePresets.default;\n  targetAttributePresets.whitelist =\n      Array.prototype.slice.call(config.targetAttributePresets.whitelist);\n  ___.whitelistAll(targetAttributePresets, true);\n}\n```\n\nThis piece of code execute failed on ie8.\nNotice that default is a reserved word in JavaScript, replace .default with ['default'] can work around.\n\n---\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nrevision\uff1a4905 or more earlier revision till now\nbrowser\uff1aie8+\uff0c other versions of ie not tested.\nOS: window\n\n<b>What steps will reproduce the problem?</b>\nJust import caja.js in a html, and open it on ie8\n\n<b>Please provide any additional information below.</b>\nA simple test:\n\n&lt;script&gt;\n(function(){\n  var a={};\n  a.default = 'b';\n  alert(a.default);\n})();\n&lt;/script&gt;\n\nThis will fail on ie8.\n\n&lt;script&gt;\n(function(){\n  var a={};\n  a[&quot;default&quot;] = &quot;abc&quot;;\n  alert(a[&quot;default&quot;]);\n})();\n&lt;/script&gt;\n\nThis works for all browser.\n", "created": "2015-04-16 04:48:55"}, {"url": "https://github.com/google/caja/issues/1493", "closed": "2015-04-16 04:48:55", "ttf": 0.0002777777777777778, "title": "Button doesn't render in Apps Script web app unless there is some text in the body", "commits": {}, "user": "kpreid", "labels": ["Client-AppScript", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1493](https://code.google.com/p/google-caja/issues/detail?id=1493) created by jkleinert@google.com on 2012-07-17T16:35:12.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Create a new Apps Script project from script.google.com with 2 files: \nCode.gs:\nfunction doGet() {\n  var htmlOutput = HtmlService.createHtmlOutputFromFile(&quot;isitdown&quot;);\n  return htmlOutput;\n}\n\nsimplehtml.html\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;input type=&quot;text&quot; id=&quot;url&quot;&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n      function doSomething() { alert('but this is fine!'); }\n      document.write('&lt;input type=&quot;button&quot; id=&quot;button1&quot;&gt;');\n      document.getElementById('button1').onclick = doSomething;\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nI expect to see a text box and a button. Instead, I just see a text box.\n\nNow replace the code in simplehtml.html with this:\n&lt;html&gt;\n  &lt;body&gt;\n    &lt;input type=&quot;text&quot; id=&quot;url&quot;&gt;\n    &lt;script type=&quot;text/javascript&quot;&gt;\n      function doSomething() { alert('but this is fine!'); }\n      document.write('&lt;input type=&quot;button&quot; id=&quot;button1&quot;&gt;');\n      document.getElementById('button1').onclick = doSomething;\n    &lt;/script&gt;\n    foo\n  &lt;/body&gt;\n&lt;/html&gt;\n\nNow it works and you see the text box, the button, and the word foo\n\nIf you need the docs on how to deploy a script as a web app, they're here: https://developers.google.com/apps-script/execution_web_apps#deploying\n", "created": "2015-04-16 04:48:22"}, {"url": "https://github.com/google/caja/issues/1491", "closed": "2015-04-16 04:48:11", "ttf": 0.0002777777777777778, "title": "Support for CSS3 linear-gradient", "commits": {}, "user": "kpreid", "labels": ["CSS", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1491](https://code.google.com/p/google-caja/issues/detail?id=1491) created by matt@easel.io on 2012-07-10T22:05:17.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\n<b>What steps will reproduce the problem?</b>\n1. Load the caja css bundle javascript (r4960).\n2. Run `sanitizeStylesheet(&quot;.test{background-image: linear-gradient(to bottom right, red, rgba(255,0,0,0));}&quot;, &quot;prefix&quot;, function(u){return(u)})`\n\n<b>What is the expected output? What do you see instead?</b>\nThe expected output is &quot;.prefix .test{background-image: linear-gradient(to bottom right, red, rgba(255,0,0,0));}&quot;\n\nHowever I receive &quot;.prefix .test{}&quot;&quot;\n", "created": "2015-04-16 04:47:57"}, {"url": "https://github.com/google/caja/issues/1489", "closed": "2015-04-16 04:47:55", "ttf": 0.0002777777777777778, "title": "non-CSS background attribute lost in cajoling", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1489](https://code.google.com/p/google-caja/issues/detail?id=1489) created by cgoldfeder@google.com on 2012-07-03T07:22:46.000Z:\n\nThis works fine in the sandbox:\n\n&lt;table&gt;&lt;tr&gt;&lt;td style='background:url(&quot;http://www.coreygoldfeder.com/images/menu.png&quot;)'&gt;foobar&lt;/td&gt;\n&lt;/tr&gt;&lt;/table&gt;\n\nBut this version loses the background image (it gets the caja-data- prefix, which is the kiss of death):\n\n&lt;table&gt;&lt;tr&gt;&lt;td background=&quot;http://www.coreygoldfeder.com/images/menu.png&quot;&gt;foobar&lt;/td&gt;\n&lt;/tr&gt;&lt;/table&gt;\n\nAs far as I can tell the latter syntax works on every browser. \n\u200b\n", "created": "2015-04-16 04:47:50"}, {"url": "https://github.com/google/caja/issues/1488", "closed": "2015-04-16 04:47:50", "ttf": 0.0002777777777777778, "title": "relative urls in external css fails", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1488](https://code.google.com/p/google-caja/issues/detail?id=1488) created by cgoldfeder@google.com on 2012-07-02T18:21:32.000Z:\n\nWhen including external CSS files, the code is inlined but relative URLS remain relative and are not rewritten to include the original URL and so fail\n", "created": "2015-04-16 04:47:43"}, {"url": "https://github.com/google/caja/issues/1487", "closed": "2015-04-16 04:47:43", "ttf": 0.0002777777777777778, "title": "Cajoler loses type=password on static cajoled inputs", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1487](https://code.google.com/p/google-caja/issues/detail?id=1487) created by cgoldfeder@google.com on 2012-07-02T14:08:17.000Z:\n\nCajoling this loses the type=password:\n\n&lt;input type='password' /&gt;\n\nHowever, this works:\n\n&lt;input id='abc' /&gt;&lt;script&gt;document.getElementById('abc').type='button'&lt;/script&gt;\n\nThis issue was first raised here:\n\nhttp://stackoverflow.com/questions/11283520/password-input-field-created-with-htmlservice-loses-type-password\n", "created": "2015-04-16 04:47:36"}, {"url": "https://github.com/google/caja/issues/1486", "closed": "2015-04-16 04:47:36", "ttf": 0.0002777777777777778, "title": "Domado's sanitizeAttrs/rewriteAttribute doesn't translate onxxx handlers quite right", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1486](https://code.google.com/p/google-caja/issues/detail?id=1486) created by metaweta on 2012-06-27T18:31:30.000Z:\n\ndocument.write('&lt;div onclick=&quot;foo(this)&quot;&gt;blah&lt;/div&gt;');\n\nWhen blah is clicked, foo gets invoked with _this_ bound to the node and _event_ as the argument.\n", "created": "2015-04-16 04:47:32"}, {"url": "https://github.com/google/caja/issues/1484", "closed": "2015-04-16 04:47:16", "ttf": 0.0002777777777777778, "title": "Array.prototype.slice does not invoke accessors on v8", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1484](https://code.google.com/p/google-caja/issues/detail?id=1484) created by metaweta on 2012-06-21T18:17:36.000Z:\n\nhttp://code.google.com/p/v8/issues/detail?id=2164\n", "created": "2015-04-16 04:47:05"}, {"url": "https://github.com/google/caja/issues/1483", "closed": "2015-04-16 04:47:05", "ttf": 0.0002777777777777778, "title": "Domado event handler pattern is not compatible with browser behavior", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1483](https://code.google.com/p/google-caja/issues/detail?id=1483) created by ihab.awad on 2012-06-20T21:00:09.000Z:\n\nIf a user enters HTML as follows:\n\n  &lt;div onclick=&quot;doit()&quot;&gt;clickme&lt;/div&gt;\n  &lt;script&gt;function doit() { alert(arguments.length); }&lt;/script&gt;\n\nThen both Caja and normal browsers alert &quot;0&quot;. If on the other hand the user enters:\n\n  &lt;div id=&quot;x&quot;&gt;&lt;/div&gt;\n  &lt;script&gt;\n    function doit() { alert(arguments.length); }\n    document.getElementById('x').innerHTML =\n      '&lt;div onclick=&quot;doit()&quot;&gt;clickme&lt;/div&gt;';\n  &lt;/script&gt;\n\u200b\nthen Caja alerts &quot;2&quot; while normal browsers alert &quot;0&quot;. It seems we are passing extra parameters above and beyond normal practice. It is not good for us to do this as Caja users might come to rely on it.\n", "created": "2015-04-16 04:46:47"}, {"url": "https://github.com/google/caja/issues/1480", "closed": "2015-04-16 04:46:46", "ttf": 0.0002777777777777778, "title": "make html/xml rendering more robust to misinterpretation", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1480](https://code.google.com/p/google-caja/issues/detail?id=1480) created by felix8a on 2012-06-16T05:43:09.000Z:\n\nRight now, when the cajoler outputs a dom tree, the security of the output strongly depends on whether we're rendering as html or as xml.  If someone requests html output but then interprets the output as xml (or vice versa), then it's possible that an attacker might be able to exploit the mismatched expectations and inject arbitrary script into the misinterpretation.\n\nThis is unnecessarily fragile.  We should try to emit html/xml that's harmless if misinterpreted.\n\nI've already done some work toward that.  There are a couple problems remaining, and most of them have testcases marked @FailureIsAnOption and TODO, in this file\nhttp://code.google.com/p/google-caja/source/browse/trunk/tests/com/google/caja/parser/html/NodesRenderTest.java\n", "created": "2015-04-16 04:46:44"}, {"url": "https://github.com/google/caja/issues/1479", "closed": "2015-04-16 04:46:44", "ttf": 0.0002777777777777778, "title": "Domado does not call onerror in event handlers", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1479](https://code.google.com/p/google-caja/issues/detail?id=1479) created by ihab.awad on 2012-06-14T21:02:50.000Z:\n\nWhen Domado dispatches an event which throws an exception, it does not call the user's onerror. plugin_dispatchToHandler() just doesn't contain the logic; I think this is a simple fix.\n", "created": "2015-04-16 04:46:37"}, {"url": "https://github.com/google/caja/issues/1478", "closed": "2015-04-16 04:46:37", "ttf": 0.0002777777777777778, "title": "body onload attribute not implemented in client-side mode", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1478](https://code.google.com/p/google-caja/issues/detail?id=1478) created by kevinchn@google.com on 2012-06-11T22:24:33.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nr4909\n\n<b>What steps will reproduce the problem?</b>\n1. Create a guest page which contains &quot;&lt;body onload=&quot;alert(1);&quot;&gt;foo&lt;/body&gt;&quot;\n2. Load the code using caja r4909 with ES5mode enables:\n\n```\n  caja.initialize({\n    cajaServer: './caja/',\n    forceES5Mode: true,\n    debug: true\n  });\n  caja.load(document.getElementById('guest'),caja.policy.net.ALL, function(frame) {\n    frame.code('./test.html',\n               'text/html')\n         .run();\n  });\n```\n1. Run it\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected output: foo and an alert: &quot;1&quot;;\nI see: foo shows up on the page but &quot;1&quot; won't.\n\n<b>Please provide any additional information below.</b>\n\nTwo files attached: \ntest.html: guest page\ntestman.html: caja.load. \n", "created": "2015-04-16 04:46:13"}, {"url": "https://github.com/google/caja/issues/1477", "closed": "2015-04-16 04:46:13", "ttf": 0.0002777777777777778, "title": "es53 could use Object.defineProperty to hide its bookkeeping properties", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1477](https://code.google.com/p/google-caja/issues/detail?id=1477) created by felix8a on 2012-06-05T21:58:49.000Z:\n\none of the painful bits of working with es53 is all the bookkeeping properties like o.foo_v___, o.ne_v___, etc., many of which are self-references, which means that caja-oblivious code that tries to traverse an object's descendants will get stuck in an infinite loop.\n\nso... on most supported browsers we could declare those properties non-enumerable.\n\nI just did an experiment with that, making only the recursive properties non-enumerable, and haven't managed to make it work yet.  it's more complicated than just replacing assignments with defineProperty, because there are several places in es53 where we rely on enumerating those bookkeeping properties.\n\nalso, using defineProperty extensively is going to make es53 startup a little slower.\n\nso at the moment I'm thinking that this might be a worthwhile thing to do, but only if the bookkeeping properties were moved to a sub-object, like instead of o.foo_v___ it would be o.**_.foo_v_**, which might be too expensive to be worth doing.\n", "created": "2015-04-16 04:46:10"}, {"url": "https://github.com/google/caja/issues/1476", "closed": "2015-04-16 04:46:10", "ttf": 0.0002777777777777778, "title": "Implement urlCajoled in caja.js", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1476](https://code.google.com/p/google-caja/issues/detail?id=1476) created by jasvir on 2012-06-04T18:04:16.000Z:\n\nThe common case going forward is modern browsers which support ES5 with a fallback to es53.  To reduce the size of the payload for the ES5 case, caja.js should only load precajoled content when it is necessary.  The easiest way to support this is to implement the currently stubbed out urlCajoled option in caja.js\n", "created": "2015-04-16 04:46:06"}, {"url": "https://github.com/google/caja/issues/1475", "closed": "2015-04-16 04:46:05", "ttf": 0.0002777777777777778, "title": "Support document.location", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1475](https://code.google.com/p/google-caja/issues/detail?id=1475) created by ihab.awad on 2012-06-01T17:48:24.000Z:\n\nThis is nonstandard but is used by scripts in the wild. It should be an alias to window.location. See:\n\n  https://developer.mozilla.org/en/document.location\n", "created": "2015-04-16 04:45:59"}, {"url": "https://github.com/google/caja/issues/1474", "closed": "2015-04-16 04:45:58", "ttf": 0.0002777777777777778, "title": "XSS in the cajoler web service with Internet Explorer", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1474](https://code.google.com/p/google-caja/issues/detail?id=1474) created by ivan.fratric on 2012-05-29T12:27:39.000Z:\n\nAnother Internet Explorer quirk that could potentially lead to security issues.\n\nCajoler web service (for example http://caja.appspot.com/cajole) normally responds with MIME type application/json. This normally causes the content of the response not to be interpreted as html. However, Internet Explorer sometimes ignores the MIME type provided by the server, depending on the filename and the content of the response. For example, if the filename contains .html and the response contains HTML tags, then the response will get rendered as html. This can lead to XSS in the cajoler web service if Internet Explorer is used.\n\nTo reproduce, visit\n\nhttp://caja.appspot.com/cajole;.html?url=&lt;script&gt;alert(1)&lt;/script&gt;\n\nwith Internet Explorer. Note that the IE's XSS filter must be turned off in order for the payload to be executed.\n\nTested with Internet Explorer 8 and 9.\n", "created": "2015-04-16 04:45:54"}, {"url": "https://github.com/google/caja/issues/1473", "closed": "2015-04-16 04:45:54", "ttf": 0.0002777777777777778, "title": "Sandbox escape with null-byte in Internet Explorer", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1473](https://code.google.com/p/google-caja/issues/detail?id=1473) created by ivan.fratric on 2012-05-29T11:56:39.000Z:\n\nInserting a null-byte between a '&lt;' character and a tag name (for opening tags) or between '&lt;' and '/' characters (for closing tags) causes Caja HTML parser not to interpret such sequences as opening/closing HTML tags. For most browsers, this is the correct behavior. However, Internet Explorer ignores the null-byte and will interpret such sequences as normal HTML tags.\n\nTested this on Caja Rev 4891 and Internet Explorer 8 and 9.\n\nSteps to reproduce:\n1. Prepare a file with the following content:\n\n&lt;noembed&gt;&lt;./noembed&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;/noembed&gt;\n\nwhere '.' should be replaced with a null-byte.\n1. Run a command-line cajoler on the file above. The resulting file will look like\n\n&lt;noembed class=&quot;cajaEmbed1&quot;&gt;&lt;./noembed&gt;&lt;script&gt;alert(1);&lt;/script&gt;&lt;/noembed&gt;\n\nwhere, again, '.' denotes a null-byte.\n1. Open the resulting HTML file in Internet Explorer. A message box should be displayed as the content inside the script tags get executed.\n\nSome additional notes:\n\nThe same thing will happen if a null-byte is inserted between a slash and a tag name for closing tags.\n\nI tried using this on sites.google.com, but fortunately there seems to be no easy way to smuggle in a null-byte there. However, there might be other use cases where this is applicable.\n\nAdding a null byte bypasses both parseToken() in com.google.caja.lexer.HtmlInputSplitter (HtmlLexer.java) and the check made in checkHtmlCdataCloseable() in com.google.caja.parser.html.Renderer (Nodes.java).\n", "created": "2015-04-16 04:45:45"}, {"url": "https://github.com/google/caja/issues/1472", "closed": "2015-04-16 04:45:45", "ttf": 0.0002777777777777778, "title": "test-taming-untamed::testForms fails under Chrome ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1472](https://code.google.com/p/google-caja/issues/detail?id=1472) created by metaweta on 2012-05-23T21:11:14.000Z:\n\nWhat revision of the cajoler exhibits the problem?  On what browser and OS?\nr4885\n\n<b>What steps will reproduce the problem?</b>\n1. ant runtests -Dtest.filter=Gen\\* -Dcaja.BrowserTestCase.startAndWait=true\n2. http://localhost:8000/ant-lib/com/google/caja/plugin/browser-test-case.html?test-driver=es53-test-taming-untamed.js&amp;es5=true\n\n<b>What is the expected output? What do you see instead?</b>\nExpect all tests to pass; instead, the feralByTame map returns an object whose 'node' property is undefined.\n", "created": "2015-04-16 04:45:42"}, {"url": "https://github.com/google/caja/issues/1471", "closed": "2015-04-16 04:45:42", "ttf": 0.0002777777777777778, "title": "'target' attribute handling loses programmer intent", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1471](https://code.google.com/p/google-caja/issues/detail?id=1471) created by ihab.awad on 2012-05-23T21:07:31.000Z:\n\nIn ES5/3, if the guest programmer specifies an HTML element that has a 'target' attribute like:\n\n  &lt;a href=&quot;http://example.com/&quot;&gt;example&lt;/a&gt;\n\nThe server side cajoler sees the lack of a 'target' and says, oh, let's give it the safest value possible in the static HTML we produce. We get something like:\n\n  &lt;a target=&quot;_blank&quot; href=&quot;...&quot;&gt;example&lt;/a&gt;\n\nIt then adds code to consult the client-side target attribute presets, which is a call to Domado internals like:\n\n  rewriteTargetAttribute___('_blank', 'a', 'href')\n\nThis is a sadness, though, because if the guest programmer had specifically requested '_blank', as in:\n\n  &lt;a target='_blank' href=&quot;http://example.com/&quot;&gt;example&lt;/a&gt;\n\nthe rewriteTargetAttribute___ call is constructed with exactly the same arguments. Consider the case where targetAttributePresets looks like:\n\n  {\n    default: 'foo',\n    whitelist: [ '_blank', 'bar', 'baz' ]\n  }\n\nWe would want the first case to rewrite to 'foo' (the default) and the second to '_blank' (a whitelisted value, as requested by the guest programmer). Currently, both of these rewrite to '_blank'.\n", "created": "2015-04-16 04:45:37"}, {"url": "https://github.com/google/caja/issues/1470", "closed": "2015-04-16 04:45:37", "ttf": 0.0002777777777777778, "title": "Var declarations are not hoisted out of catch blocks on FF", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1470](https://code.google.com/p/google-caja/issues/detail?id=1470) created by metaweta on 2012-05-21T20:12:12.000Z:\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=755099\n\ntry {\n  throw &quot;hi&quot;;\n} catch(e) {\n  var e=1;\n}\nalert(e); // ReferenceError\n\nWe need to look at how this affects SES, if at all.\n", "created": "2015-04-16 04:45:31"}, {"url": "https://github.com/google/caja/issues/1469", "closed": "2015-04-16 04:45:30", "ttf": 0.0002777777777777778, "title": "FF gets on Proxies are invoked too many times", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1469](https://code.google.com/p/google-caja/issues/detail?id=1469) created by metaweta on 2012-05-21T20:08:37.000Z:\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=753442\n\n  var c = 0;\n  var p = Proxy.create({has: function (id) { c++; }});\n  var obj = Object.create(p);\n  for (var i = 0; i &lt; 4; ++i)\n      obj.xyz;\n  assertEq(c, 4);\n\nIf Domado ever uses getters with side effects, this could potentially be a problem.\n", "created": "2015-04-16 04:45:28"}, {"url": "https://github.com/google/caja/issues/1467", "closed": "2015-04-16 04:45:21", "ttf": 0.0002777777777777778, "title": "ES5 working inconsistently with Date objects", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1467](https://code.google.com/p/google-caja/issues/detail?id=1467) created by jasvir on 2012-05-18T22:12:27.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nDate does not work correctly in ES5 mode.\n\nGo to http://caja.appspot.com/?es5=true\n\n&lt;div id=&quot;foo&quot;&gt;&lt;/div&gt;\n\u200b&lt;script&gt;\n  document.getElementById(&quot;foo&quot;).innerHTML = new Date();\n  try {\n    alert(new Date())\n  } catch(e) { alert(String(e)); }\n&lt;/script&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n\nThe DOM updates the date correctly but the alert fails with the following error:\nTypeError: Untaming of guest constructed objects unsupported: Fri May 18 2012 15:06:26 GMT-0700 (PDT)\n", "created": "2015-04-16 04:45:14"}, {"url": "https://github.com/google/caja/issues/1466", "closed": "2015-04-16 04:45:14", "ttf": 0.0002777777777777778, "title": "Non-nodes in a child frame have a constructor from the parent frame.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1466](https://code.google.com/p/google-caja/issues/detail?id=1466) created by metaweta on 2012-05-14T22:00:07.000Z:\n\nhttps://bugs.webkit.org/show_bug.cgi?id=81416\n\nIf we ever expose non-nodes directly, this could be an authority leak.\n", "created": "2015-04-16 04:45:12"}, {"url": "https://github.com/google/caja/issues/1465", "closed": "2015-04-16 04:45:11", "ttf": 0.0002777777777777778, "title": "In older FF browsers, for-in loops can repeat values", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1465](https://code.google.com/p/google-caja/issues/detail?id=1465) created by metaweta on 2012-05-14T21:17:37.000Z:\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=447673\n\n<b>What steps will reproduce the problem?</b>\nvar a={x:1};\nb=Object.create(a);\nb.x=2; \nfor (var i in b) { print (i + ': ' + b[i]); }\n\n<b>What is the expected output? What do you see instead?</b>\nShould print 'x: 2' only once; actually prints 'x: 2' twice.\n", "created": "2015-04-16 04:45:00"}, {"url": "https://github.com/google/caja/issues/1464", "closed": "2015-04-16 04:45:00", "ttf": 0.0002777777777777778, "title": "Need to explicitly return a value when finally is used", "commits": {}, "user": "kpreid", "labels": ["Component-Other", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1464](https://code.google.com/p/google-caja/issues/detail?id=1464) created by metaweta on 2012-05-14T21:15:06.000Z:\n\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=718531\n\n<b>What steps will reproduce the problem?</b>\n1. (function () {\n        try {\n            try {\n                return 12\n            } finally {\n                throw &quot;oh no you don't&quot;\n            }\n        } catch (e) { print (e); }\n        print(&quot;ha!&quot;);\n    })()\n\n<b>What is the expected output? What do you see instead?</b>\nExpect to see &quot;oh no you don't&quot; and &quot;ha!&quot; and get a return value of void 0.  Instead, both strings are printed, but the return value is 12.\n\nIf we add an explicit return statement after &quot;ha!&quot;, then we get the right behavior.\n", "created": "2015-04-16 04:44:47"}, {"url": "https://github.com/google/caja/issues/1463", "closed": "2015-04-16 04:44:47", "ttf": 0.0002777777777777778, "title": "maybe make WeakMap shim more defensive", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1463](https://code.google.com/p/google-caja/issues/detail?id=1463) created by felix8a on 2012-05-14T04:33:13.000Z:\n\nin an es-discuss thread\nhttps://mail.mozilla.org/pipermail/es-discuss/2012-May/022727.html\nBrandon Benvie mentions that he has a variant of the SES WeakMap shim that's more defensive.\n\nIn particular, the current WeakMap shim relies on attaching info to each object using a random key known to the WeakMap code, but hidden from other js code by patching Object.getOwnPropertyNames.  If an attacker somehow manages to bypass that and fully enumerate an object's properties, then the attacker can discover values associated with an object from any weakmap, not just weakmaps it has access to.\n\nBrandon's WeakMap implementation has several complications, but the one relevant to this issue is that instead of directly storing weakmap values on an object used as a key, he stores a function that returns the value when you supply the correct proof object from the specific weakmap for that key/value pairing.  So if an attacker wants to read an arbitrary weakmap value, he needs both the key object and the per-weakmap secret proof object, which is pretty much the same thing as having the weakmap itself.\n\nSo, that's clearly a defense-in-depth win, but it's not clear if it's worth doing.\n- It requires creating a new closure per weakmap value.\n- It might be significantly slower; Mark Miller mentions that SES startup time is pretty sensitive to efficiency of WeakMaps, and he arrived at this implementation of WeakMap after trying a more defensive one that turned out to be too slow.\n- &quot;Attacker can really enumerate an object's properties&quot; might not be a realistic attack scenario.  (At the moment, I think the most plausible case is if a container carelessly whitelists a function that will enumerate properties.)\n", "created": "2015-04-16 04:44:42"}, {"url": "https://github.com/google/caja/issues/1462", "closed": "2015-04-16 04:44:42", "ttf": 0.0002777777777777778, "title": "Clean up uses of slice.call(arguments, 0)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1462](https://code.google.com/p/google-caja/issues/detail?id=1462) created by metaweta on 2012-05-08T23:56:38.000Z:\n\nIt's unnecessary for actual arguments objects, and when using that pattern on something else, it deserves a comment.\n", "created": "2015-04-16 04:44:35"}, {"url": "https://github.com/google/caja/issues/1461", "closed": "2015-04-16 04:44:35", "ttf": 0.0002777777777777778, "title": "Error messages when using Caja in IE 7/8", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1461](https://code.google.com/p/google-caja/issues/detail?id=1461) created by marcus.thiesen on 2012-05-07T11:47:17.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nRevisions &gt;= 4796\nBrowser: IE7/8 on Win XP\n\n<b>What steps will reproduce the problem?</b>\n1. Cajoole Simple JS file (e.g. something that does getDocumentById and manipulates innerHTML) with HTML and CSS.\n2. Load in IE\n3. You get an Error Message (unexpected call to method or property access)\n\n<b>What is the expected output? What do you see instead?</b>\nA working cajooled Bundle.\n\n<b>Please provide any additional information below.</b>\n\nApparently the problem is due to IE not allowing to call all (?) methods on a DOM Node Object the same way. The applied workaround which is already in the source does not work in all cases.\n\nTo get it to work I currently added:\n    Index: src/com/google/caja/plugin/es53-frame-group.js\n    ===================================================================\n    --- src/com/google/caja/plugin/es53-frame-group.js      (Revision 4796)\n    +++ src/com/google/caja/plugin/es53-frame-group.js      (Arbeitskopie)\n    @@ -467,7 +467,7 @@\n             p = '' + p;\n             if (('' + (+p)) !== p &amp;&amp; !(/__$/).test(p)) {\n               var method = node[p];\n    -          if (typeof method === 'function') {\n    +          if (typeof method === 'function' || ( typeof method['apply'] === 'object' &amp;&amp; p !== 'appendChild' ) ) {\n                 return method.apply(node, as);\n               }\n               // IE&lt;=8 DOM methods are objects not functions\n", "created": "2015-04-16 04:44:33"}, {"url": "https://github.com/google/caja/issues/1460", "closed": "2015-04-16 04:44:33", "ttf": 0.0002777777777777778, "title": "caja minifier turns {a:1} into {'a':1}", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1460](https://code.google.com/p/google-caja/issues/detail?id=1460) created by felix8a on 2012-04-24T18:11:57.000Z:\n\nclosure compiler makes a distinction between quoted and unquoted property names, because it will aggressively rename unquoted names:\n  var o = {a: 1, 'b': 2};\n  use(o.a); // works\n  use(o['a']); // doesn't work\n  use(o['b']); // works\n  use(o.b); // doesn't work\n\ncaja's minifier always quotes keys in object literals:\n  var o={'a':1,'b':2};\nthus disturbing the delicate balance of the universe.\n", "created": "2015-04-16 04:44:30"}, {"url": "https://github.com/google/caja/issues/1459", "closed": "2015-04-16 04:44:30", "ttf": 0.0002777777777777778, "title": "Vulnerability in ES5/3 style attribute processing", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1459](https://code.google.com/p/google-caja/issues/detail?id=1459) created by ihab.awad on 2012-04-20T22:03:15.000Z:\n\nWhen the ES5/3 compiler compiles HTML of the following form:\n\n  &lt;div style=&quot;background-image: url(a.jpg);&quot;&gt;&lt;/div&gt;\n\nthe URL reference to &quot;a.jpg&quot; does not get processed by the URI policy on the client or the server.\n\nAttackers can use this to pass arbitrary URLs via CSS into containers.\n", "created": "2015-04-16 04:44:23"}, {"url": "https://github.com/google/caja/issues/1458", "closed": "2015-04-16 04:44:23", "ttf": 0.0002777777777777778, "title": "CSS with 'html' selector is rejected", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1458](https://code.google.com/p/google-caja/issues/detail?id=1458) created by ihab.awad on 2012-04-18T20:28:27.000Z:\n\nIn the playground, r4857, ES5/3 mode, enter:\n\n  \u200b&lt;style type=&quot;text/css&quot;&gt;\n- html .foo{ width:1px; }\n  &lt;/style&gt;\n  \u200b\n  We get the error:\n  \n  ERROR unknown:2+3 - 7: removing disallowed tag html:unknown:2: \\* html .foo { width:1px; }\n\nRemoving either the '.foo' or the '*' causes the CSS to parse properly.\n\nOriginally discovered by metaweta@; he volunteered to own this.\n", "created": "2015-04-16 04:44:21"}, {"url": "https://github.com/google/caja/issues/1457", "closed": "2015-04-16 04:44:21", "ttf": 0.0002777777777777778, "title": "Tamed records do not work correctly with JSON.stringify().", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1457](https://code.google.com/p/google-caja/issues/detail?id=1457) created by jasvir on 2012-04-12T20:22:48.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  On http://caja.appspot.com expose a new tamed record in the Policy tab\n    imports.whacky = frameGroup.tame({ &quot;a&quot;: 1});\n1.  In the playground:\n   &lt;script&gt;\n   alert(JSON.stringify({&quot;a&quot;: 1}));\n   alert(JSON.stringify(whacky));\n   &lt;/script&gt;\n   \u200b\n2.  Note that the second alert should be the same as the first but instead alerts only {}\n\nThis bug only manifests in ES5/3, not in ES5 mode\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:44:16"}, {"url": "https://github.com/google/caja/issues/1456", "closed": "2015-04-16 04:44:16", "ttf": 0.0002777777777777778, "title": "catch (e) may be unsafe on IE<=8", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1456](https://code.google.com/p/google-caja/issues/detail?id=1456) created by felix8a on 2012-03-24T01:55:29.000Z:\n\nThis is split off from issue 248\n\nIn IE&lt;=8, try{}catch(e){} binds e to the scope containing the try, not the scope of the catch.  So code like\n  try { throw f; } catch (e) {}\nis a method of setting e that bypasses caja's runtime checks.\n\nI think this means that every catch variable has to be alpha-renamed to a unique temp var declared in the containing scope.\n", "created": "2015-04-16 04:44:11"}, {"url": "https://github.com/google/caja/issues/1455", "closed": "2015-04-16 04:44:11", "ttf": 0.0002777777777777778, "title": "Caching seems to ignore errors", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1455](https://code.google.com/p/google-caja/issues/detail?id=1455) created by metaweta on 2012-03-23T21:24:12.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\n&lt;script src=&quot;http://code.jquery.com/ui/1.8.18/jquery-ui.min.js&quot;&gt;&lt;/script&gt;\nCajole this on a fresh server; there'll be various errors about masking.  Hit Cajole again and it'll work.\n\n<b>What is the expected output? What do you see instead?</b>\nIf you get errors once, you should get them again whether it's cached or not.\n", "created": "2015-04-16 04:44:02"}, {"url": "https://github.com/google/caja/issues/1453", "closed": "2015-04-16 04:43:55", "ttf": 0.0002777777777777778, "title": "Underscores allowed in function expression", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1453](https://code.google.com/p/google-caja/issues/detail?id=1453) created by gazheyes on 2012-03-23T15:12:21.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nRev 4819 built on 2012-03-21 23:57:38.\n\n<b>What steps will reproduce the problem?</b>\n1.&lt;script&gt;x=function __(){}&lt;/script&gt;\u200b\n\n<b>What is the expected output? What do you see instead?</b>\nEither the expression name is allowed or rewritten.\n\nFATAL_ERROR unknown:1+20 - 22: INTERNAL COMPILER ERROR. Illegal identifier passed through from rewriter: Identifier : __. Please report this error at: http://code.google.com/p/google-caja/issues/:unknown:1: &lt;script&gt;x=function __(){}&lt;/script&gt;\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:43:51"}, {"url": "https://github.com/google/caja/issues/1452", "closed": "2015-04-16 04:43:51", "ttf": 0.0002777777777777778, "title": "cajoler screws up order of operations when creating temp vars", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1452](https://code.google.com/p/google-caja/issues/detail?id=1452) created by felix8a on 2012-03-15T22:28:28.000Z:\n\n&lt;script&gt;\n  function f(a, b) {\n    alert(a + b);\n  }\n  function g() {\n    var a = ['a', 'b', 'c'];\n    var i = 1;\n    f.call(null, i, a[i++]);\n  }\n  g();\n&lt;/script&gt;\n\u200b\nThe above should alert &quot;1b&quot;, but when cajoled it alerts &quot;2b&quot;.\n\nThis affects jquery.each().  In some cases jquery.each will be off by one.\n\nThe cajoled code looks like this:\n\nfunction g() {\n  var a, i, x0___, x1___;\n  a = [ 'a', 'b', 'c' ];\n  i = 1;\n  x0___ = IMPORTS___.f_v___? IMPORTS___.f: **_.ri(IMPORTS**_, 'f'),\n  x1___ = a.v___(i++),\n  x0___.call_m___? x0___.call(null, i, x1___): x0___.m___('call', [ null, i, x1___ ]);\n}\n\nNote the i++ happens before the reference to i in the call.\n", "created": "2015-04-16 04:43:33"}, {"url": "https://github.com/google/caja/issues/1451", "closed": "2015-04-16 04:43:33", "ttf": 0.0002777777777777778, "title": "Overriding a function's caller property doesn't work sensibly", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1451](https://code.google.com/p/google-caja/issues/detail?id=1451) created by metaweta on 2012-03-09T16:58:25.000Z:\n\nIn ES5/3, the .caller property is an accessor inherited from Function.prototype; either getting or setting throws an error.  However, given function g(){}, we can call\n    Object.defineProperty(g, 'caller', {value:1})\nand override it, but it seems that something's broken there:\n    cajaVM.log(g.caller)\ndisplays &quot;null&quot;.\n\nOverriding should either be prohibited or work normally.\n", "created": "2015-04-16 04:43:24"}, {"url": "https://github.com/google/caja/issues/1450", "closed": "2015-04-16 04:43:24", "ttf": 0.0002777777777777778, "title": "Can't use prototype.js with Caja", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1450](https://code.google.com/p/google-caja/issues/detail?id=1450) created by mr.berker on 2012-03-08T13:44:12.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nCaja Playground\nGoogle Caja. Copyright (C) 2011, Google Inc. Rev 4796 built on 2012-02-28 23:35:00.\nGoogle Chrome   19.0.1061.1 (Official Build 125213) dev-m\nOS  Windows\n\n<b>What steps will reproduce the problem?</b>\n1. Visit http://caja.appspot.com/\n2. Enter &lt;script type=&quot;text/javascript&quot; src=&quot;http://google-caja.googlecode.com/svn/trunk/third_party/js/jqueryjs/test/otherlibs/prototype/1.6.0.2/prototype.js&quot;&gt;&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nExpected: No error in &quot;Compiler Messages&quot;\nInstead:\nLOG T+20 msec: start LegacyNamespaceFixupStage:\nLOG T+20 msec: start ResolveUriStage:\nLOG T+20 msec: start PrecajoleRewriteStage:\nLOG T+20 msec: start RewriteHtmlStage:\nLOG prototype.js:33+28: Semicolon inserted:\nLOG prototype.js:87+72: Semicolon inserted:\nLOG prototype.js:89+47: Semicolon inserted:\nLOG prototype.js:90+58: Semicolon inserted:\nLOG prototype.js:210+6: Semicolon inserted:\nLOG prototype.js:217+6: Semicolon inserted:\nLOG prototype.js:225+6: Semicolon inserted:\nLOG prototype.js:239+6: Semicolon inserted:\nLOG prototype.js:394+76: Semicolon inserted:\nLOG prototype.js:407+86: Semicolon inserted:\nLOG prototype.js:540+59: Semicolon inserted:\nLOG prototype.js:889+66: Semicolon inserted:\nLOG prototype.js:1078+4: Semicolon inserted:\nLOG prototype.js:1114+46: Semicolon inserted:\nLOG prototype.js:1115+61: Semicolon inserted:\nLOG prototype.js:1116+64: Semicolon inserted:\nLOG prototype.js:1153+53: Semicolon inserted:\nLOG prototype.js:1154+53: Semicolon inserted:\nLOG prototype.js:1269+72: Semicolon inserted:\nLOG prototype.js:1284+27: Semicolon inserted:\nLOG prototype.js:1332+30: Semicolon inserted:\nLOG prototype.js:1380+28: Semicolon inserted:\nLOG prototype.js:1388+30: Semicolon inserted:\nLOG prototype.js:1769+52: Semicolon inserted:\nLOG prototype.js:2434+77: Semicolon inserted:\nLOG prototype.js:2436+57: Semicolon inserted:\nLOG prototype.js:2463+79: Semicolon inserted:\nLOG prototype.js:2465+65: Semicolon inserted:\nLOG prototype.js:2485+49: Semicolon inserted:\nLOG prototype.js:3455+58: Semicolon inserted:\nLOG prototype.js:3771+63: Semicolon inserted:\nLOG prototype.js:3772+63: Semicolon inserted:\nLOG prototype.js:3773+63: Semicolon inserted:\nLOG prototype.js:3796+62: Semicolon inserted:\nLOG prototype.js:3797+62: Semicolon inserted:\nLOG prototype.js:3816+61: Semicolon inserted:\nLOG prototype.js:3817+61: Semicolon inserted:\nLOG prototype.js:3818+52: Semicolon inserted:\nLOG prototype.js:3887+72: Semicolon inserted:\nLOG T+875 msec: start RewriteFlashStage:\nLOG T+875 msec: start SanitizeHtmlStage:\nLOG T+875 msec: start InlineCssImportsStage:\nLOG T+875 msec: start ValidateCssStage:\nLOG T+875 msec: start RewriteCssStage:\nLOG T+875 msec: start HtmlToBundleStage:\nLOG T+2356 msec: start PipelineFetchStage:\nLOG T+2381 msec: start OptimizeJavascriptStage:\nLOG T+2410 msec: start ValidateJavascriptStage:\nFATAL_ERROR prototype.js:24+7 - 46: Properties cannot end in &quot;**&quot;: Rule &quot;readBadSuffix&quot;, SpecialOperation : MEMBER_ACCESS SpecialOperation : FUNCTION_CALL SpecialOperation : MEMBER_ACCESS Reference Identifier : document Reference Identifier : createElement StringLiteral : 'div' Reference Identifier : __proto**:\nFATAL_ERROR prototype.js:25+7 - 46: Properties cannot end in &quot;**&quot;: Rule &quot;readBadSuffix&quot;, SpecialOperation : MEMBER_ACCESS SpecialOperation : FUNCTION_CALL SpecialOperation : MEMBER_ACCESS Reference Identifier : document Reference Identifier : createElement StringLiteral : 'div' Reference Identifier : __proto**:\nFATAL_ERROR prototype.js:26+9 - 49: Properties cannot end in &quot;**&quot;: Rule &quot;readBadSuffix&quot;, SpecialOperation : MEMBER_ACCESS SpecialOperation : FUNCTION_CALL SpecialOperation : MEMBER_ACCESS Reference Identifier : document Reference Identifier : createElement StringLiteral : 'form' Reference Identifier : __proto**:\nERROR prototype.js:550+1 - 58: &quot;with&quot; blocks are not allowed:\nFATAL_ERROR prototype.js:2533+5 - 44: Properties cannot end in &quot;**&quot;: Rule &quot;readBadSuffix&quot;, SpecialOperation : MEMBER_ACCESS SpecialOperation : FUNCTION_CALL SpecialOperation : MEMBER_ACCESS Reference Identifier : document Reference Identifier : createElement StringLiteral : 'div' Reference Identifier : __proto**:\nFATAL_ERROR prototype.js:2535+34 - 73: Properties cannot end in &quot;**&quot;: Rule &quot;readBadSuffix&quot;, SpecialOperation : MEMBER_ACCESS SpecialOperation : FUNCTION_CALL SpecialOperation : MEMBER_ACCESS Reference Identifier : document Reference Identifier : createElement StringLiteral : 'div' Reference Identifier : __proto**:\nFATAL_ERROR prototype.js:2646+31 - 72: Properties cannot end in &quot;**&quot;: Rule &quot;readBadSuffix&quot;, SpecialOperation : MEMBER_ACCESS SpecialOperation : FUNCTION_CALL SpecialOperation : MEMBER_ACCESS Reference Identifier : document Reference Identifier : createElement Reference Identifier : tagName Reference Identifier : __proto**:\nFATAL_ERROR prototype.js:3837+42 - 86: Properties cannot end in &quot;**&quot;: Rule &quot;readBadSuffix&quot;, SpecialOperation : MEMBER_ACCESS SpecialOperation : FUNCTION_CALL SpecialOperation : MEMBER_ACCESS Reference Identifier : document Reference Identifier : createEvent StringLiteral : &quot;HTMLEvents&quot; Reference Identifier : __proto**:\nLOG T+7336 msec: compiler done:\n\n<b>Please provide any additional information below.</b>\nPrototype 1.7.0 is better with only one .**proto**, which I could resolve by using Object.GetPrototypeOf() instead. Then, however, I run into Runtime errors such as this:\nUncaught script error: 'The property 'sub' is not writable.' in source: 'prototype_17_.js' at line: 9\nprototype_17_.js:9: The property 'sub' is not writable.\n\nTo reproduce this, use &lt;script type=&quot;text/javascript&quot; src=&quot;http://something/prototype_17_.js&quot;&gt;&lt;/script&gt; with the attached file.\n", "created": "2015-04-16 04:43:10"}, {"url": "https://github.com/google/caja/issues/1449", "closed": "2015-04-16 04:43:10", "ttf": 0.0002777777777777778, "title": "maybe check for partial breaches of dom security", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1449](https://code.google.com/p/google-caja/issues/detail?id=1449) created by felix8a on 2012-03-07T23:07:05.000Z:\n\ndomado relies on a call makeDOMAccessible, which is a no-op in ses but whitelists a DOM object in es53.  In principle, makeDOMAccessible should be called only on DOM objects that are either descendants of the containing div or not attached to any document, but there isn't anything in particular enforcing this.\n\nit might be useful to enforce this in makeDOMAccessible.  check if the condition is violated and throw an error.  though I'm wary of adding more runtime overhead.\n\nalternatively we can add testcases that verify that makeDOMAccessible has not been called on unexpected nodes, perhaps after running some extensive testsuite like jquery.\n", "created": "2015-04-16 04:43:07"}, {"url": "https://github.com/google/caja/issues/1448", "closed": "2015-04-16 04:43:07", "ttf": 0.0002777777777777778, "title": "jquery wants mutable document.documentElement to test for nonstandard getElementByID", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1448](https://code.google.com/p/google-caja/issues/detail?id=1448) created by felix8a on 2012-03-01T09:19:51.000Z:\n\njquery-1.7.1 creates an element &lt;a name='foo'&gt;\nand then adds it with\n  document.documentElement.insertBefore(foo, null)\nin order to check if getElementByID('foo') will return that name='foo' element\n(which happens in IE&lt;=7).\n\nIf getElementByID has that broken behavior, jquery modifies a few of its functions\nto reliably reject the false hits.\n\nIn caja, the insertBefore complains to console,\nbecause documentElement is not mutable,\nbut silently proceeds (without inserting the node).\n\nBasically, this is harmless except in IE&lt;=7, where jquery will falsely believe that\ngetElementByID is standards-compliant.\n\nOptions:\n1. modify domado so that documentElement is mutable.  This should be safe to do, but probably requires adding another layer of &lt;div&gt;.\n2. modify domado so that getElementByID is standards-compliant on IE&lt;=7.\n3. modify jquery to use a different test that will work reliably in a Caja environment.\n4. ignore the issue since IE&lt;=7 is not well supported by Caja anyway.\n", "created": "2015-04-16 04:43:05"}, {"url": "https://github.com/google/caja/issues/1446", "closed": "2015-04-16 04:43:00", "ttf": 0.0002777777777777778, "title": "\"Untrusted content title\" often not appropriate", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1446](https://code.google.com/p/google-caja/issues/detail?id=1446) created by ihab.awad on 2012-02-15T22:51:54.000Z:\n\nEmbedders often do not want the &quot;title&quot; attribute of the &lt;div&gt; containing guest code to be &quot;Untrusted content title&quot;. At time of writing, passing the empty string for the title means the browser shows an empty tooltip.\n", "created": "2015-04-16 04:42:55"}, {"url": "https://github.com/google/caja/issues/1445", "closed": "2015-04-16 04:42:55", "ttf": 0.0002777777777777778, "title": "\"script is busy\" dialogs may allow resize/blur handlers to fire", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1445](https://code.google.com/p/google-caja/issues/detail?id=1445) created by felix8a on 2012-02-12T09:00:47.000Z:\n\n'the \u201cA script on this page may be busy...\u201d dialogue box, even if you choose to let the script continue to run, allows events like resize and blur to fire and be handled even whilst the script is in the middle of a busy-loop, except in Opera.'\n[ from http://stackoverflow.com/questions/2734025/is-javascript-guaranteed-to-be-single-threaded/2734311#&nbsp;2734311 ]\n\nI don't think handlers firing during an alert() is a problem, but handlers firing during a &quot;may be busy&quot; might be a problem.  can avoid that by forcing handlers to be deferring with setTimeout.\n", "created": "2015-04-16 04:42:48"}, {"url": "https://github.com/google/caja/issues/1443", "closed": "2015-04-16 04:42:26", "ttf": 0.0002777777777777778, "title": "Whitelist data-* attributes", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1443](https://code.google.com/p/google-caja/issues/detail?id=1443) created by metaweta on 2012-01-30T19:57:27.000Z:\n\nDomado strips unknown attributes.  We know data-\\* attributes are safe and are used all over the place in jQuery.\n\nThis'll require changing both Domado and the sanitizer.\n", "created": "2015-04-16 04:42:15"}, {"url": "https://github.com/google/caja/issues/1442", "closed": "2015-04-16 04:42:15", "ttf": 0.0002777777777777778, "title": "Guest HTML can overflow container-supplied boundary", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1442](https://code.google.com/p/google-caja/issues/detail?id=1442) created by ihab.awad on 2012-01-12T22:02:16.000Z:\n\nIt is possible to craft guest code creating visible content outside the boundary of the double-DIV sandbox enforced by Caja. For example:\n\n  &lt;div style=&quot;margin-left:-150px;margin-top:0px;width:110px;&quot;&gt;\n    &lt;div&gt;Phishing content&lt;/div&gt;\n  &lt;/div&gt;\n\nThis was introduced at r4374 due to the removal of a CSS property &quot;overflow: hidden&quot; in the caja.js styling of the container DIVs.\n\nThis vulnerability allows guest content authors to overlay and mimic the user interface of surrounding container content, and thus attempt to phish the end-user into entering into the guest content information that would normally only be revealed to the container.\n", "created": "2015-04-16 04:42:06"}, {"url": "https://github.com/google/caja/issues/1441", "closed": "2015-04-16 04:42:05", "ttf": 0.0002777777777777778, "title": "Dynamic style properties of domado bypasses url policy", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1441](https://code.google.com/p/google-caja/issues/detail?id=1441) created by jasvir on 2012-01-12T16:33:06.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Both:\n\ndocument.getElementById(&quot;foo&quot;).style.cssText = &quot;background: url(http://www.thinkfu.com/evil.gif)&quot;\nand\ndocument.getElementById(&quot;foo&quot;).innerHTML = &quot;&lt;div style=&quot;background: url(http://www.thinkfu.com/evil.gif)&quot;&gt;&lt;/div&gt;\n\nwill cause the fetch of evil.gif irrespective of the url policy.\n\n<b>What is the expected output? What do you see instead?</b>\n\nThe url policy should to be applied on all style urls.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:42:01"}, {"url": "https://github.com/google/caja/issues/1440", "closed": "2015-04-16 04:42:01", "ttf": 0.0002777777777777778, "title": "Writable properties on non-extensible objects are treated as non-writable.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1440](https://code.google.com/p/google-caja/issues/detail?id=1440) created by metaweta on 2012-01-10T17:18:12.000Z:\n\n<b>What steps will reproduce the problem?</b>\nvar o = {x: 1};\nObject.seal(o);\no.x = 2;\n\n<b>What is the expected output? What do you see instead?</b>\nExpect the assignment to succeed; instead, it throws a TypeError.\n", "created": "2015-04-16 04:41:54"}, {"url": "https://github.com/google/caja/issues/1438", "closed": "2015-04-16 04:41:49", "ttf": 0.0002777777777777778, "title": "Running the cajoled Clock demo (i.e., in the playground) doesn't work in Chrome 18 canary. ", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1438](https://code.google.com/p/google-caja/issues/detail?id=1438) created by erights on 2011-12-20T00:10:11.000Z:\n\nRunning the cajoled Clock demo (i.e., in the playground) doesn't work in Chrome 18 canary.\n\n(You can get a Chrome 18 canary at http://tools.google.com/dlpage/chromesxs .)\n\nChrome 18.0.975.0 canary\nUncaught TypeError: Object [object CSSStyleDeclaration] has no method 'HasProperty___'\nFails every time, after a refresh and after relaunching Chrome 18\nNo clock is ever visible\n\nThe full stack trace is\n\nUncaught TypeError: Object [object CSSStyleDeclaration] has no method 'HasProperty___'\nisInes53-taming-frame.opt.js:291\nCssPropertiesCollection$_methes53-taming-frame.opt.js:1246\nObject.m___es53-taming-frame.opt.js:460\nattachDocumentes53-taming-frame.opt.js:1089\nframeGroup.tamecaja.js:907\niframe.contentWindow.cajaIframeDone___caja.js:234\n(anonymous function)es53-guest-frame.opt.js:518\n\nWebKit nightly Version 5.1.2 (7534.52.7, r103236)\nTypeError: 'null' is not a function (evaluating 'initFeralFrame(window)')\ncaja.js:202\nHappened the first time, but works fine after a refresh\n\nOk:\n\nChrome 16.0.912.63 beta\nSafari Version 5.1.2 (7534.52.7)\nFF 8.0.1\nFF Nightly 11.0a1 (2011-12-19)\nOpera 11.60 build 1185\nOpera 12.00 alpha build 1193\n", "created": "2015-04-16 04:41:36"}, {"url": "https://github.com/google/caja/issues/1436", "closed": "2015-04-16 04:41:28", "ttf": 0.0002777777777777778, "title": "domado needs better support for onevent attributes", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1436](https://code.google.com/p/google-caja/issues/detail?id=1436) created by felix8a on 2011-12-12T20:08:14.000Z:\n\nses emits html using domado's document.write, which uses the client-side html sanitizer, which supports only a few forms of html onevent= attributes.\n", "created": "2015-04-16 04:41:19"}, {"url": "https://github.com/google/caja/issues/1435", "closed": "2015-04-16 04:41:19", "ttf": 0.0002777777777777778, "title": "Syntax errors in <script> tags fail silently under ES5 mode", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1435](https://code.google.com/p/google-caja/issues/detail?id=1435) created by ihab.awad on 2011-12-01T00:48:24.000Z:\n\nWhile testing at r4674, I noticed that a minor syntax error in the &lt;script&gt; of a guest HTML causes that &lt;script&gt; to never run, but there are no errors logged to the console. This silent failure was a source of much confusion and would likely be so for users as well.\n", "created": "2015-04-16 04:41:17"}, {"url": "https://github.com/google/caja/issues/1434", "closed": "2015-04-16 04:41:17", "ttf": 0.0002777777777777778, "title": "job cache blows up on large scripts", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1434](https://code.google.com/p/google-caja/issues/detail?id=1434) created by felix8a on 2011-11-29T06:38:52.000Z:\n\ntrying to use a jquery version that isn't precajoled in the playground, eg\n\n&lt;script src=&quot;http://code.jquery.com/jquery-1.7.1.js&quot;&gt;&lt;/script&gt;\n\nfails due to an exception raised by memcache put.  I suspect PipelineStoreStage is trying to store a key or a value too large for memcache and not catching the failure.  (appengine's memcache is limited to 1M values)\n\nfrom the logs:\n\ncom.google.appengine.api.memcache.MemcacheServiceException: Memcache put: Error setting single item (com.google.caja.demos.playground.server.AppEngineJobCacheKey@2a1f546b)\n    at com.google.appengine.api.memcache.AsyncMemcacheServiceImpl$7.transform(AsyncMemcacheServiceImpl.java:427)\n    at com.google.appengine.api.memcache.AsyncMemcacheServiceImpl$7.transform(AsyncMemcacheServiceImpl.java:419)\n    at com.google.appengine.api.memcache.MemcacheServiceApiHelper$RpcResponseHandler.convertResponse(MemcacheServiceApiHelper.java:59)\n    at com.google.appengine.api.memcache.MemcacheServiceApiHelper$1.wrap(MemcacheServiceApiHelper.java:98)\n    at com.google.appengine.api.memcache.MemcacheServiceApiHelper$1.wrap(MemcacheServiceApiHelper.java:92)\n    at com.google.appengine.api.utils.FutureWrapper.wrapAndCache(FutureWrapper.java:57)\n    at com.google.appengine.api.utils.FutureWrapper.get(FutureWrapper.java:98)\n    at com.google.appengine.api.memcache.MemcacheServiceImpl.quietGet(MemcacheServiceImpl.java:27)\n    at com.google.appengine.api.memcache.MemcacheServiceImpl.put(MemcacheServiceImpl.java:69)\n    at com.google.appengine.api.memcache.jsr107cache.GCache.put(Unknown Source)\n    at com.google.caja.demos.playground.server.AppEngineJobCache.store(AppEngineJobCache.java:70)\n    at com.google.caja.plugin.stages.PipelineStoreStage.apply(PipelineStoreStage.java:64)\n", "created": "2015-04-16 04:41:14"}, {"url": "https://github.com/google/caja/issues/1433", "closed": "2015-04-16 04:41:14", "ttf": 0.0002777777777777778, "title": "Client-side Caja does not handle uncaught exceptions correctly", "commits": {}, "user": "kpreid", "labels": ["Component-CajaJS", "Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1433](https://code.google.com/p/google-caja/issues/detail?id=1433) created by jasvir on 2011-11-28T19:30:22.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Cajole and run &quot;throw 'foo'&quot; in ES5/3 and SES.\n\nWhat is the expected output?\n\nNote that on ES5/3, if a callable onerror is provided by the host page, it is called with message, source and line number as arguments as described here: http://code.google.com/p/google-caja/wiki/UncaughtExceptionHandling\n\nIn the SES case (as configued by caja.js), the host page is not given the opportunity to catch top level exceptions thrown by guest code.\n\n What should you see instead?\n\nwrapperSrc in startSES.js should include a try-catch block wrapping which checks for the existence of a callable onerror on imports and calls it if present.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:40:47"}, {"url": "https://github.com/google/caja/issues/1431", "closed": "2015-04-16 04:40:42", "ttf": 0.0002777777777777778, "title": "getOwnPropertyDescriptor missing on IE8", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1431](https://code.google.com/p/google-caja/issues/detail?id=1431) created by jasvir on 2011-11-11T22:50:44.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Load a trivial cajoled page with access to domado on IE8 (eg. http://www.thinkfu.com/button-example.html) \n2. Note the exception thrown trying to run getOwnPropertyDescriptor corresponding to line 133 of domado.js\n", "created": "2015-04-16 04:40:38"}, {"url": "https://github.com/google/caja/issues/1430", "closed": "2015-04-16 04:40:37", "ttf": 0.0002777777777777778, "title": "cajoler is slow for nontrivial amounts of trivial html", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1430](https://code.google.com/p/google-caja/issues/detail?id=1430) created by felix8a on 2011-11-08T17:41:10.000Z:\n\ncajalarge3.html is an 18k file that has 800 &lt;img&gt; tags and nothing else.\nthe appspot /cajole endpoint takes about 16s or so to cajole that.\nthe appspot playground fails to cajole that, returning 500 server error, I think due to timeout.\n\nthis problem can also be triggered by large amounts of id= attributes, but it was easier to create a nice example with img tags.\n\nthis temporary link will exhibit the /cajole problem\n  http://caja.appspot.com/cajole?url=http%3A%2F%2Fcanids.net%2Fcajalarge3.html&amp;directive=ES53&amp;input-mime-type=text%2Fhtml\n\nso what happens is the html rewriter turns a bunch of things into javascript, like runtime id replacement, or runtime url policy, and the nontrivial amount of javascript runs into the problem that the javascript cajoler is slow.\n", "created": "2015-04-16 04:40:31"}, {"url": "https://github.com/google/caja/issues/1429", "closed": "2015-04-16 04:40:30", "ttf": 0.0002777777777777778, "title": "Flash examples do not work in the Playground", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1429](https://code.google.com/p/google-caja/issues/detail?id=1429) created by ihab.awad on 2011-11-07T23:20:09.000Z:\n\nIn r4658, running the Playground on FF 7.0.1, the Flash taming does not work.\n\n&quot;Embed Flash&quot; --&gt; press the button to see the error:\n\n  method is undefined\n  TypeError('Inheritance from proxies no...l(args,0))},proxy.e___=function(){var\n  es53-t....opt.js (line 393)\n\n&quot;Embed Flash 2&quot; --&gt; see the error:\n\n  String contains an invalid character\n  o.setAttribute(m, attObj[m]);\n  swfobject.js (line 448)\n", "created": "2015-04-16 04:40:23"}, {"url": "https://github.com/google/caja/issues/1428", "closed": "2015-04-16 04:40:23", "ttf": 0.0002777777777777778, "title": "ES53BrowserTest fails due to \"Canvas imagedata\" test on Firefox/Linux", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1428](https://code.google.com/p/google-caja/issues/detail?id=1428) created by mdempsky@google.com on 2011-10-25T22:50:55.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Run ant runtests -Dtest.filter=ES53BrowserTest -Dcaja.BrowserTestCase.startAndWait=true\n2. In Firefox 3.6 on Linux, visit http://localhost:8000/ant-lib/com/google/caja/plugin/browser-test-case.html?es5=false&amp;test-case=es53-test-domado-canvas-guest.html\n\n<b>What is the expected output? What do you see instead?</b>\n\nThe tests should pass.  The &quot;imagedata&quot; test fails and prints to the console:\n\nError: uncaught exception: [Exception... &quot;An invalid or illegal string was specified&quot;  code: &quot;12&quot; nsresult: &quot;0x8053000c (NS_ERROR_DOM_SYNTAX_ERR)&quot;  location: &quot;http://localhost:8000/caja/caja.js Line: 775&quot;]\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:40:14"}, {"url": "https://github.com/google/caja/issues/1427", "closed": "2015-04-16 04:40:14", "ttf": 0.0002777777777777778, "title": "com.google.caja.plugin.ES53BrowserTest: \"Canvas pointInPath\" test fails on Chrome/Linux", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1427](https://code.google.com/p/google-caja/issues/detail?id=1427) created by mdempsky@google.com on 2011-10-25T22:48:41.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Run ant runtests -Dtest.filter=ES53BrowserTest -Dcaja.BrowserTestCase.startAndWait=true\n2. In Chrome 15.0.874.92 beta on Linux, visit http://localhost:8000/ant-lib/com/google/caja/plugin/browser-test-case.html?es5=false&amp;test-case=es53-test-domado-canvas-guest.html\n\n<b>What is the expected output? What do you see instead?</b>\n\nAll tests should pass.  The &quot;Canvas pointInPath&quot; test fails printing:\n\nisPointInPath 3\nCall to assertFalse(boolean) with true\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:40:03"}, {"url": "https://github.com/google/caja/issues/1425", "closed": "2015-04-16 04:39:55", "ttf": 0.0002777777777777778, "title": "Necessary parentheses get lost", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1425](https://code.google.com/p/google-caja/issues/detail?id=1425) created by metaweta on 2011-10-25T00:42:51.000Z:\n\n(function() {\n  var x = {};\n  alert( (x &amp;&amp; x.y) ? 0 : 1 );\n})()\n\ngets cajoled to\n\nvar x;\nx = **_.iM([ ]);\n(IMPORTS**_.alert_v___? IMPORTS___.alert:**_.ri(IMPORTS**_, 'alert')).i___(\n  x &amp;&amp; (x.y_v___? x.y: x.v___('y')) ? 0: 1\n);\n\nand alerts 1 when we expect 0.\n\nNote that the parens around x and the translation of x.y are missing; since ? binds more tightly than &amp;&amp;, the semantics change.\n", "created": "2015-04-16 04:39:53"}, {"url": "https://github.com/google/caja/issues/1424", "closed": "2015-04-16 04:39:53", "ttf": 0.0002777777777777778, "title": "Plugin dispatch does not work with SES", "commits": {}, "user": "kpreid", "labels": ["Milestone-20111201", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1424](https://code.google.com/p/google-caja/issues/detail?id=1424) created by jasvir on 2011-10-24T18:00:48.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Under SES, the following works:\n\n&lt;button id=&quot;foo&quot;&gt;Hello&lt;/button&gt;\n&lt;script&gt;\n  function helloWorld () { alert('hi'); }\n  document.getElementById(&quot;foo&quot;).onclick = helloWorld;\n&lt;/script&gt;'\n\nHowever:\n\n&lt;script&gt;\n  function helloWorld () { alert('hi'); }\n&lt;/script&gt;\n&lt;button onclick=&quot;helloWorld()&quot; id=&quot;foo&quot;&gt;Hello&lt;/button&gt;\n\nresults in:\n\nUncaught ReferenceError: plugin_dispatchEvent___ is not defined\n", "created": "2015-04-16 04:39:50"}, {"url": "https://github.com/google/caja/issues/1423", "closed": "2015-04-16 04:39:50", "ttf": 0.0002777777777777778, "title": "{{} /a/} should be valid", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1423](https://code.google.com/p/google-caja/issues/detail?id=1423) created by felix8a on 2011-10-17T16:15:17.000Z:\n\n&lt;script&gt;\n  {{} /a/}\n&lt;/script&gt;\n\u200b\nERROR unknown:2+7 - 8: Unexpected token /:unknown:2: {{} /a/}\n\nCaja seems to be interpreting the / as division, not a regexp.\n\nThis is unlikely to turn up in real code, since it's useless to have a regexp there.\n", "created": "2015-04-16 04:39:46"}, {"url": "https://github.com/google/caja/issues/1422", "closed": "2015-04-16 04:39:45", "ttf": 0.0002777777777777778, "title": "Cajoling service returns 200 on build version error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1422](https://code.google.com/p/google-caja/issues/detail?id=1422) created by kpreid.switchb.org on 2011-10-02T18:35:22.000Z:\n\n<b>What steps will reproduce the problem?</b>\nSend a request to the cajoling service of the format that worked before versioning:\ncurl -i --data 'foo' 'http://caja.appspot.com/cajole?input-mime-type=text/html&amp;output-mime-type=application/json&amp;directive=ES53'\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected output: 400 Bad Request and a JSON structure with the error.\n\nI see instead a 200 OK, though with the proper structure:\n\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nAccess-Control-Allow-Origin: *\nVary: Accept-Encoding\nDate: Sun, 02 Oct 2011 18:32:50 GMT\nServer: Google Frontend\nCache-Control: private\nTransfer-Encoding: chunked\n\n{&quot;messages&quot;:[{&quot;level&quot;:6,&quot;name&quot;:&quot;FATAL_ERROR&quot;,&quot;type&quot;:&quot;MISSING_BUILD_VERSION&quot;,&quot;message&quot;:&quot;Build version missing&quot;}]}\n\nThis problem is preventing the corkboard from notifying the user of failures, as the response resembles success.\n", "created": "2015-04-16 04:39:43"}, {"url": "https://github.com/google/caja/issues/1421", "closed": "2015-04-16 04:39:43", "ttf": 0.0002777777777777778, "title": "Corkboard broken by versioning", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1421](https://code.google.com/p/google-caja/issues/detail?id=1421) created by kpreid.switchb.org on 2011-10-02T18:28:56.000Z:\n\nMarkM points out that the corkboard is broken. MarkM would like it fixed by Wednesday for a talk.\n\nMy examination shows that the Python interface to the cajoling service now gets this response: (The u's are because this is a Python structure at this point, though it was derived from JSON.)\n\n{u'messages': [{u'message': u'Build version missing', u'type': u'MISSING_BUILD_VERSION', u'name': u'FATAL_ERROR', u'level': 6}]}\n\nSomething should be done to adapt the corkboard to the new versioned API. I don't recall the design discussions myself enough to know what that should be. Note that the corkboard currently includes the caja.js loader and calls the cajoling service without caring about what version they are \u2014 the corkboard server does not itself store any versioned caja content except in cache.\n", "created": "2015-04-16 04:39:36"}, {"url": "https://github.com/google/caja/issues/1420", "closed": "2015-04-16 04:39:36", "ttf": 0.0002777777777777778, "title": "Code review: None  (28 added, 11 removed, 53 changed)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1420](https://code.google.com/p/google-caja/issues/detail?id=1420) created by kpy@google.com on 2011-09-22T02:24:37.000Z:\n\ngvn review None\n\nFactor out a replaceable tagPolicy to enable customization of the sanitizer.\nhttp://codereview.appspot.com/4641064\n\nThis exposes a hook named 'tagPolicy' in the sanitizer so that the\nsanitizer can be customized to accept or reject particular tags and\nalter their attributes (for example, to accept &lt;iframe&gt; tags with\nan acceptable SRC).\n\nmakeTagPolicy, sanitizeAttribs, and sanitizeWithPolicy are factored \nout so that they can be easily reused in custom tagPolicy functions.\n\nR=mikesamuel@gmail.com\n", "created": "2015-04-16 04:39:33"}, {"url": "https://github.com/google/caja/issues/1419", "closed": "2015-04-16 04:39:33", "ttf": 0.0002777777777777778, "title": "HTML document not extensible", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1419](https://code.google.com/p/google-caja/issues/detail?id=1419) created by metaweta on 2011-09-19T18:08:21.000Z:\n\n<b>What steps will reproduce the problem?</b>\nant jquery runserver\nhttp://localhost:8080/jquery/event.html\n\n<b>What is the expected output? What do you see instead?</b>\ntests 29-35 should pass; they all fail with the error\nDied on test #&nbsp;1: Could not create the property 'jQuery1316455394700': [domado object HTMLDocument] is not extensible.\n", "created": "2015-04-16 04:39:31"}, {"url": "https://github.com/google/caja/issues/1418", "closed": "2015-04-16 04:39:31", "ttf": 0.0002777777777777778, "title": "jquery event tests fail with too much recursion", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1418](https://code.google.com/p/google-caja/issues/detail?id=1418) created by metaweta on 2011-09-19T18:05:20.000Z:\n\n<b>What steps will reproduce the problem?</b>\nant clean jquery runserver\nhttp://localhost:8080/jquery/event.html\n\n<b>What is the expected output? What do you see instead?</b>\nI expect tests to pass; instead, most fail with &quot;too much recursion&quot;.\n", "created": "2015-04-16 04:39:26"}, {"url": "https://github.com/google/caja/issues/1417", "closed": "2015-04-16 04:39:26", "ttf": 0.0002777777777777778, "title": "jquery event tests fail with too much recursion", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1417](https://code.google.com/p/google-caja/issues/detail?id=1417) created by metaweta on 2011-09-19T18:05:11.000Z:\n\n<b>What steps will reproduce the problem?</b>\nant clean jquery runserver\nhttp://localhost:8080/jquery/event.html\n\n<b>What is the expected output? What do you see instead?</b>\nI expect tests to pass; instead, most fail with &quot;too much recursion&quot;.\n", "created": "2015-04-16 04:39:23"}, {"url": "https://github.com/google/caja/issues/1416", "closed": "2015-04-16 04:39:23", "ttf": 0.0002777777777777778, "title": "SES needs to allow overriding some primordial methods with assignment.", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1416](https://code.google.com/p/google-caja/issues/detail?id=1416) created by erights@google.com on 2011-09-17T23:03:22.000Z:\n\nOriginally discovered by Kevin Reid. \n\n function Point(x,y) {\n    this.x = x;\n    this.y = y;\n  }\n  Point.prototype.toString = function() {\n    return '&lt;' + this.x + ',' + this.y + '&gt;';\n  };\n  alert(new Point(3,5));\n\nWill not currently work in SES on a conforming ES5 (such as FF) because we lock down the primordial methods naively -- as non-writable non-configurable data properties. Instead, at least for select primordial methods clearly meant to be overridden, including all methods on Object.prototype, we should lock them down as accessors that allow the old override-by-assignment behavior on objects that inherit that method.\n\nSee https://mail.mozilla.org/pipermail/es-discuss/2011-September/016681.html\n\nI thought this bug was already reported but can't find it. If you do, please mark this bug as a duplicate of that one.\n", "created": "2015-04-16 04:39:14"}, {"url": "https://github.com/google/caja/issues/1415", "closed": "2015-04-16 04:39:14", "ttf": 0.0002777777777777778, "title": "Resurrect permissive mode", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1415](https://code.google.com/p/google-caja/issues/detail?id=1415) created by jasvir on 2011-09-15T23:12:14.000Z:\n\nFor cajita, we had permissive mode (http://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/permissive.js?r=3557) which would:\n1. log api calls which a program used\n2. allow essentially any program which cajoles to run\n\nThis was ideal for debugging an application and for evaluating the authority it used.\n\nThis is a feature request to resurrect it.\n", "created": "2015-04-16 04:39:12"}, {"url": "https://github.com/google/caja/issues/1414", "closed": "2015-04-16 04:39:11", "ttf": 0.0002777777777777778, "title": "jquery tests are broken at r4630", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1414](https://code.google.com/p/google-caja/issues/detail?id=1414) created by metaweta on 2011-09-15T22:44:50.000Z:\n\n<b>What steps will reproduce the problem?</b>\nant jquery runserver\npoint browser at localhost:8080/jquery/core.html\n\n<b>What is the expected output? What do you see instead?</b>\nI expect to see running jquery tests; instead I get a blank screen and an error on the console &quot;caja is not defined&quot;.\n", "created": "2015-04-16 04:39:09"}, {"url": "https://github.com/google/caja/issues/1413", "closed": "2015-04-16 04:39:09", "ttf": 0.0002777777777777778, "title": "trunk (@r4627) is broken", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1413](https://code.google.com/p/google-caja/issues/detail?id=1413) created by felix8a on 2011-09-15T22:00:35.000Z:\n\nES53BrowserTest fails.  browser starts and appears to hang, because our js throws an exception and nobody catches that.\n\nThe exception is &quot;window is not defined&quot; from readImport,\nbecause html-sanitizer.js now says\n  window['html'] = ...\nand we're cajoling html-sanitizer.js for domado.\n", "created": "2015-04-16 04:39:04"}, {"url": "https://github.com/google/caja/issues/1412", "closed": "2015-04-16 04:39:04", "ttf": 0.0002777777777777778, "title": "BrowserTests cause a lot of pain", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1412](https://code.google.com/p/google-caja/issues/detail?id=1412) created by jasvir on 2011-09-15T19:08:28.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. ant runtests\n- note that successful tests take ~12mins to run\n- on OSX 10.6.8 using FF5.01 and FF6.0.2 browser tests sometimes fail to start or fail non-determinsitically with timeouts\n- cross browser tests are missing\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:39:01"}, {"url": "https://github.com/google/caja/issues/1410", "closed": "2015-04-16 04:38:59", "ttf": 0.0002777777777777778, "title": "fix ie about domain and import style", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1410](https://code.google.com/p/google-caja/issues/detail?id=1410) created by yiminghe on 2011-09-14T11:23:59.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nr4622 on windows xp ie6\n\n<b>What steps will reproduce the problem?</b>\n1.set document.domain in container-trivial.html\n2.open container-trivial.html in ie6 at windows xp\n\n<b>What is the expected output? What do you see instead?</b>\n\nexpected: page layout is ok ,and works fine\nactual: page layout is not right , and there is error : &quot;permission denied&quot;\n\n<b>Please provide any additional information below.</b>\n\ni fixed it , please check attached file : patch_for_ie_20110914.patch\n", "created": "2015-04-16 04:38:56"}, {"url": "https://github.com/google/caja/issues/1409", "closed": "2015-04-16 04:38:56", "ttf": 0.0002777777777777778, "title": "jQuery tests fail ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1409](https://code.google.com/p/google-caja/issues/detail?id=1409) created by jasvir on 2011-09-12T14:12:30.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Apply http://codereview.appspot.com/4956076/\n2. Run ant jquery runserver\n3. Visit http://localhost:8080/jquery/\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect to see jQuery tests running and passing.  Most tests that involve the jQuery object fail with:\n\n  Object jQuery has no method 'i___'\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:38:52"}, {"url": "https://github.com/google/caja/issues/1408", "closed": "2015-04-16 04:38:52", "ttf": 0.0002777777777777778, "title": "On FF, defer taming of items in a NodeList until they are accessed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1408](https://code.google.com/p/google-caja/issues/detail?id=1408) created by metaweta on 2011-08-30T00:32:18.000Z:\n\njQuery uses the pattern getElementsByTagName('*') because browsers can respond quickly with all the objects; with our current implementation, this is exactly wrong, since we then have to tame all objects before returning them.\n\nOn most browsers, NodeLists must tame all elements in advance, since there's no support for intercepting numeric accesses even with an ES53 proxy.  \n\nRecent FF versions have native proxy support, so we can wrap the node list in a native proxy that lazily tames items.\n\nOn other ES5 implementations, when we're taming a particular NodeList n, we can put getters on TameNodeList.prototype up to n.length.\n", "created": "2015-04-16 04:38:49"}, {"url": "https://github.com/google/caja/issues/1407", "closed": "2015-04-16 04:38:49", "ttf": 0.0002777777777777778, "title": "Update the version of jQuery we use for testing", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1407](https://code.google.com/p/google-caja/issues/detail?id=1407) created by metaweta on 2011-08-30T00:00:48.000Z:\n\njquery's at 1.6.2, while the version we're using is 1.4.3pre\n", "created": "2015-04-16 04:38:47"}, {"url": "https://github.com/google/caja/issues/1406", "closed": "2015-04-16 04:38:46", "ttf": 0.0002777777777777778, "title": "Does Caja protect against browser DoS?", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1406](https://code.google.com/p/google-caja/issues/detail?id=1406) created by c70n3r on 2011-08-27T03:38:30.000Z:\n\nWhat revision of the cajoler exhibits the problem?  On what browser and OS? FF and Chrome\n\nDoes caja take care of JS DoS conditions? I could create infinite loop with following script when cajoled on http://caja.appspot.com. My browser consumption of CPU upped 50% due to this and  I had to close the tab (works on latest FF and Chrome)\n\n<b>What steps will reproduce the problem?</b>\nCajole the following code on appspot\n\n&lt;html&gt;\n &lt;head&gt;\n  Click to begin indefinite alerts.\n     &lt;script&gt;\n        function ding()\n        {\n\n```\n        setInterval(function() {alert(&quot;Try escaping me...&quot;)},50) \n    }\n&lt;/script&gt;\n```\n\n &lt;/head&gt;\n &lt;body onload=&quot;ding();&quot;&gt;\n\n &lt;/body&gt;\n&lt;/html&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nCaja should ideally throttle continuous alerts like FF and Chrome do natively. This doesn't create a DoS condition when run on these browsers natively through URL\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:38:44"}, {"url": "https://github.com/google/caja/issues/1405", "closed": "2015-04-16 04:38:44", "ttf": 0.0002777777777777778, "title": "Alert doesn't fire on caja homepage but fires on caja.appspot.com", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1405](https://code.google.com/p/google-caja/issues/detail?id=1405) created by c70n3r on 2011-08-27T03:33:56.000Z:\n\nWhat revision of the cajoler exhibits the problem?  On what browser and OS? FF and Chrome\n\nThe cajoled JS on http://code.google.com/p/google-caja/ doesn\u2019t trigger an alert with &lt;img src=f onerror=alert(0)&gt; but &lt;script&gt;alert(0)&lt;/script&gt; triggers one on http://caja.appspot.com/\n\n<b>What steps will reproduce the problem?</b>\n&lt;script&gt;alert(0)&lt;/script&gt; triggers one on http://caja.appspot.com/\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:38:41"}, {"url": "https://github.com/google/caja/issues/1404", "closed": "2015-04-16 04:38:41", "ttf": 0.0002777777777777778, "title": "Click() method missing on buttons", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1404](https://code.google.com/p/google-caja/issues/detail?id=1404) created by metaweta on 2011-08-25T22:56:59.000Z:\n\n&lt;button onclick=&quot;alert(1)&quot;&gt;clicky&lt;/button&gt;\n&lt;script&gt;document.getElementsByTagName('button')[0].click();&lt;/script&gt;\n\nExpected an alert, got &quot;Uncaught script error: 'click is not a function.'&quot;\n", "created": "2015-04-16 04:38:26"}, {"url": "https://github.com/google/caja/issues/1401", "closed": "2015-04-16 04:37:52", "ttf": 0.0002777777777777778, "title": "SES WeakMap emulation interacts poorly with <form> DOM nodes on Chrome", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1401](https://code.google.com/p/google-caja/issues/detail?id=1401) created by kpreid.switchb.org on 2011-08-18T17:00:05.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Load initSES.js (I used the es-lab explicit.html).\n2. Store and retrieve a &lt;form&gt; in a WeakMap, or in any other way have it looked at twice by a WeakMap:\n    var w = new WeakMap();\n    var f = document.createElement(&quot;form&quot;);\n    w.set(f, &quot;x&quot;);\n    w.get(f);\n\n<b>What is the expected output? What do you see instead?</b>\nExpected: &quot;x&quot;\nGot: TypeError: undefined is not a function\n\nThe source location is the call to id() in WeakMap, resulting from identity() having returned undefined. This appears to be due to misbehavior of attempts to set expando properties on &lt;form&gt; DOM nodes.\n", "created": "2015-04-16 04:37:30"}, {"url": "https://github.com/google/caja/issues/1398", "closed": "2015-04-16 04:37:07", "ttf": 0.0002777777777777778, "title": "ejectorsGuardsTrademarks.js invokes cajaVM.def too soon", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1398](https://code.google.com/p/google-caja/issues/detail?id=1398) created by kpreid.switchb.org on 2011-08-16T22:16:06.000Z:\n\ninitSESPlus.js crashes on Firefox 5.0.1 by failing to delete Function.prototype.isGenerator.\n\nMarkM's diagnosis:\nWhen ejectorsGuardsTrademarks() is called, it calls makeTrademark which calls cajaVM.def on an object. This results in Object.prototype and Function.prototype (at least) getting frozen before startSES has finished deleting things.\n\nFix:\nMove the cajaVM.def call from makeTrademark() to Trademark().\n\nIt seems to me, however, that it would be more robust to arrange so that the extensions() are constructed and the cajaVM object is created and frozen _after_ the primordial-freezing code has done its job, so that the extension code need not be so careful.\n", "created": "2015-04-16 04:36:58"}, {"url": "https://github.com/google/caja/issues/1395", "closed": "2015-04-16 04:36:14", "ttf": 0.0002777777777777778, "title": "Function proxies inherit from extensible Function.prototype, which does not work", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1395](https://code.google.com/p/google-caja/issues/detail?id=1395) created by erights@google.com on 2011-08-16T02:28:09.000Z:\n\n&lt;script&gt;\n  var f = Proxy.createFunction({}, function(){});\n  alert([typeof f, Object.isExtensible(Function.prototype)]);\n&lt;/script&gt;\n\u200b\nalerts '[function,true]', meaning that we successfully created a function proxy that inherits from an extensible Function.prototype. Our ES5/3 proxy implementation technique doesn't work in this case. I propose that we freeze Function.prototype and add that to the gotchas list at http://code.google.com/p/google-caja/wiki/DifferencesBetweenES5Over3AndES5\n", "created": "2015-04-16 04:36:03"}, {"url": "https://github.com/google/caja/issues/1394", "closed": "2015-04-16 04:36:03", "ttf": 0.0002777777777777778, "title": "Playground alerts in reverse order", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1394](https://code.google.com/p/google-caja/issues/detail?id=1394) created by erights@google.com on 2011-08-16T02:22:19.000Z:\n\n&lt;script&gt;\n  alert('a');\n  alert('b');\n  alert('c');\n&lt;/script&gt;\u200b\n\nin the playground alerts 'c', then 'b', then 'a'.\n", "created": "2015-04-16 04:35:56"}, {"url": "https://github.com/google/caja/issues/1392", "closed": "2015-04-16 04:35:54", "ttf": 0.0002777777777777778, "title": "Likely bug in tameRecord's [[Delete]] behavior", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1392](https://code.google.com/p/google-caja/issues/detail?id=1392) created by erights@google.com on 2011-08-12T07:31:06.000Z:\n\nAt line 709 in es53.js I see: \n\n   t.c___ = function (p) {  // [[Delete]]\n      p = '' + p;\n      if (!isNumericName(p) &amp;&amp; !endsWith__.test(p)) {\n        if (!isWhitelistedReadOnly(t)) {\n          if (t[p + '_v___']) {\n            // Delete the local property if present. This only happens when\n            // p is an accessor property on an eviscerated t.\n            return Object.prototype.c___.call(t, p);\n          } else {\n            if (delete f[p]) { return true; }\n          }\n          return;\n        }\n      }\n      throw new TypeError('Not deleteable: ' + p);\n    };\n\nI'm very suspicious of that bare &quot;return;&quot;. What is that case supposed to be doing?\n", "created": "2015-04-16 04:35:51"}, {"url": "https://github.com/google/caja/issues/1391", "closed": "2015-04-16 04:35:51", "ttf": 0.0002777777777777778, "title": "Caja Playground doesn't run on IE9 or IE10preview2", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1391](https://code.google.com/p/google-caja/issues/detail?id=1391) created by erights on 2011-08-12T03:37:07.000Z:\n\nIn both cases, nothing renders and the console shows only the error:\n\nSCRIPT5022: DOM Exception: INVALID_CHARACTER_ERR (5) \n06D72D17E36B43A5DF2AA4E282C2998C.cache.html, line 1064 character 98\n", "created": "2015-04-16 04:35:40"}, {"url": "https://github.com/google/caja/issues/1389", "closed": "2015-04-16 04:35:33", "ttf": 0.0002777777777777778, "title": "onclick attribute does not see variables in preceding script block as in scope", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1389](https://code.google.com/p/google-caja/issues/detail?id=1389) created by kpreid.switchb.org on 2011-08-10T21:55:12.000Z:\n\nCajoling the following content on the playground or corkboard fails:\n\n&lt;script&gt;var c=1;&lt;/script&gt;\n&lt;button id='b' onclick='document.getElementById(&quot;b&quot;).innerHTML=&quot;Clicks: &quot;+(c++);'&gt;Clicks: 0&lt;/button&gt;\n\nThe error:\n\nFATAL_ERROR unknown:2+76 - 77: Cannot assign to a free module variable: Rule &quot;setIncrDecr&quot;, Reference Identifier : c:unknown:2: &lt;button id='b' onclick='document.getElementById(&quot;b&quot;).innerHTML=&quot;Clicks: &quot;+(c++);\n\ncaja.appspot.com version: Rev 4554:4555 built on 2011-07-14 18:17:20\n", "created": "2015-04-16 04:35:29"}, {"url": "https://github.com/google/caja/issues/1388", "closed": "2015-04-16 04:35:28", "ttf": 0.0002777777777777778, "title": "Object.getOwnPropertyNames does not work on proxies in ES5/3", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1388](https://code.google.com/p/google-caja/issues/detail?id=1388) created by kpreid.switchb.org on 2011-07-28T01:36:05.000Z:\n\n<b>What steps will reproduce the problem?</b>\nIn the playground, r4573:\n\u200b&lt;script&gt;\n  var handler = {\n    getOwnPropertyNames: function () {\n      return ['a', 'b', 'c']; }\n  };\n\n  var p = Proxy.create(handler);\n  var q = Proxy.create(handler, Object.prototype);\n\n  alert(Object.getOwnPropertyNames(p) + &quot;; &quot; + Object.getOwnPropertyNames(q));\n&lt;/script&gt;\u200b\n\n<b>What is the expected output? What do you see instead?</b>\nI expect:\n    a,b,c; a,b,c\nI get:\n    ; undefined\n\nThere appear to be two problems:\n- Object.getOwnPropertyNames is defined as function ownKeys() in es53.js, which does not invoke any proxy trap. The function allKeys, exported as cajaVM.allKeys, should probably also be reviewed.\n- (More speculative) When a proxy is created, if it has a prototype specified, the logic which should be disabling fastpath for inherited properties is acting as if 'undefined' is a property of the prototype. I don't see why the code would be doing this.\n", "created": "2015-04-16 04:35:20"}, {"url": "https://github.com/google/caja/issues/1387", "closed": "2015-04-16 04:35:19", "ttf": 0.0002777777777777778, "title": "writing to the console doesn't work in the playground", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1387](https://code.google.com/p/google-caja/issues/detail?id=1387) created by metaweta on 2011-07-27T18:47:32.000Z:\n\ncajaVM.log('nada')\n\nShould write 'nada' to the runtime messages pane; instead nothing happens.\n", "created": "2015-04-16 04:35:17"}, {"url": "https://github.com/google/caja/issues/1386", "closed": "2015-04-16 04:35:17", "ttf": 0.0002777777777777778, "title": "ES5/3 proxies' m___ does not fall back to getOwnPropertyDescriptor", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1386](https://code.google.com/p/google-caja/issues/detail?id=1386) created by kpreid.switchb.org on 2011-07-26T19:37:31.000Z:\n\nThe m___ internal method for a proxy in ES5/3 invokes the handler's 'get' trap unconditionally. It should use the derived trap in the event that the proxy does not implement 'get' but only 'getOwnPropertyDescriptor'.\n", "created": "2015-04-16 04:35:12"}, {"url": "https://github.com/google/caja/issues/1385", "closed": "2015-04-16 04:35:12", "ttf": 0.0002777777777777778, "title": "Bound functions appear as toxic functions in ES5/3", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1385](https://code.google.com/p/google-caja/issues/detail?id=1385) created by kpreid.switchb.org on 2011-07-25T21:36:15.000Z:\n\nThe following throws &quot;Internal: toxic function encountered!&quot; when run with r4571, but not with r4555 (current playground):\n\n&lt;script&gt;\n  document.write({foo: (function (){}).bind(Number)});\n&lt;/script&gt;\u200b\n\nThe problem appears to be that the products of .bind have no ok___ property, because they are never marked as functions, and so Function.prototype.bind needs to be updated to reflect the changes to function properties by r4567 (introducing proxies).\n", "created": "2015-04-16 04:35:08"}, {"url": "https://github.com/google/caja/issues/1384", "closed": "2015-04-16 04:35:08", "ttf": 0.0002777777777777778, "title": "Complete breach due to <script>.innerText", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1384](https://code.google.com/p/google-caja/issues/detail?id=1384) created by kpreid.switchb.org on 2011-07-20T20:51:07.000Z:\n\nIt is possible to break our protection of the contents of &lt;script&gt; elements by using .innerText or (in theory) .innerHTML to access them. For example, cajoling the following in the playground will alert:\n\n&lt;script&gt;\n  var s = document.createElement('script');\n  s.innerText=&quot;alert('Oh dear.')&quot;;\n  document.body.appendChild(s);\n&lt;/script&gt;\n\nThe cause is that .innerText and .innerHTML test the editable flag rather than the childrenEditable flag, whereas the taming of &lt;script&gt; expects that childrenEditable protects the script text.\n\nI have prepared and tested a fix and will have it reviewed ASAP.\n", "created": "2015-04-16 04:34:57"}, {"url": "https://github.com/google/caja/issues/1383", "closed": "2015-04-16 04:34:56", "ttf": 0.0002777777777777778, "title": "User friendly error messages missing in es53", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1383](https://code.google.com/p/google-caja/issues/detail?id=1383) created by jasvir on 2011-07-17T00:09:58.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nIn each of the following cases, the reported error in the console references ___$ properties which are not meaningful to the end-user.  \n1. var y; y(); // Uncaught script error: 'Cannot call method 'i___' of undefined' ...\n2. var y; y.x;  // Uncaught script error: 'Cannot read property 'x_v___' of undefined' in ...\n3. var y; y.x = 1; // Uncaught script error: 'Cannot read property 'x_w___' of undefined' ...\n4. var y; new y(); // etc\n5. var y; delete y.x;\n\n<b>What is the expected output? What do you see instead?</b>\nThe error message on the console should report either that the properties are not whitelisted (if they exist) or that they do not exist.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:34:54"}, {"url": "https://github.com/google/caja/issues/1382", "closed": "2015-04-16 04:34:54", "ttf": 0.0002777777777777778, "title": "DOMContentLoaded not fired from TameHTMLDocument", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1382](https://code.google.com/p/google-caja/issues/detail?id=1382) created by jiangxw on 2011-07-13T22:31:51.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\ntrunk, FireFox\n\n<b>What steps will reproduce the problem?</b>\n1. create the following HTML file: domready.html\n&lt;input type=&quot;text&quot; id=&quot;myinput&quot; /&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\ndocument.addEventListener('DOMContentLoaded', function() {\n    var box = document.getElementById(&quot;myinput&quot;);\n    box.value += &quot;domready&quot;;\n}, false);\n&lt;/script&gt;\n1. cajole --input domready.html -j domready.out.js\n2. load domready.out.js with es53.html\n\n<b>What is the expected output? What do you see instead?</b>\n&quot;domready&quot; should appear in the textbox. Instead, the text box is empty.\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:34:38"}, {"url": "https://github.com/google/caja/issues/1381", "closed": "2015-04-16 04:34:38", "ttf": 0.0002777777777777778, "title": "goodParseInt(0) in es53.js returns NaN!", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1381](https://code.google.com/p/google-caja/issues/detail?id=1381) created by jiangxw on 2011-07-13T18:37:44.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nlatest trunk, both IE and FireFox\n\n<b>What steps will reproduce the problem?</b>\n1. the following code is copied from es53.js\nfunction goodParseInt(n) {\n n = '' + n;\n return parseInt(n.replace(/^\\s_([+-]?)\\s_0*/, ''));\n}\n1. call goodParseInt(0) returns NaN, goodParseInt(-1) returns -1!\n\n<b>What is the expected output? What do you see instead?</b>\nshould be 0 and -1.\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:34:32"}, {"url": "https://github.com/google/caja/issues/1380", "closed": "2015-04-16 04:34:31", "ttf": 0.0002777777777777778, "title": "addEventListener missing in TameHTMLDocument.documentElement", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1380](https://code.google.com/p/google-caja/issues/detail?id=1380) created by jiangxw on 2011-07-13T18:03:11.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nlatest trunk. both IE and FireFox\n\n<b>What steps will reproduce the problem?</b>\n1. create the following HTML document: event.html\n&lt;input type=&quot;text&quot; id=&quot;myinput&quot; /&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar callback = function(what) {\n    var box = document.getElementById(&quot;myinput&quot;);\n    box.value += &quot;App&quot;;\n}\ndocument.documentElement.addEventListener(&quot;click&quot;, callback, true);\n&lt;/script&gt;\n1. cajole --input event.html -j event.out.js\n2. load event.out.js with es53.html\n\n<b>What is the expected output? What do you see instead?</b>\nWhen we click on the text box, it should keep appending the word &quot;App&quot;. Instead we see &quot;addEventListener is not a function.&quot; in the FireBug console\n\n<b>Please provide any additional information below.</b>\nThe problem is that TameHTMLDocument.documentElement (which is tameHtmlElement) in domital.js doesn't expose the addEventListener and removeEventListener methods.\n", "created": "2015-04-16 04:34:27"}, {"url": "https://github.com/google/caja/issues/1379", "closed": "2015-04-16 04:34:27", "ttf": 0.0002777777777777778, "title": "Objective expandos are not tested", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1379](https://code.google.com/p/google-caja/issues/detail?id=1379) created by kpreid.switchb.org on 2011-07-13T17:45:07.000Z:\n\nThe Caja test suite does not test that expando properties and attributes set by the client of one virtual document are visible to the client of another document which shares underlying nodes with the first.\n", "created": "2015-04-16 04:34:20"}, {"url": "https://github.com/google/caja/issues/1378", "closed": "2015-04-16 04:34:20", "ttf": 0.0002777777777777778, "title": "Redundant plusses being emitted in numeric array optimization", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1378](https://code.google.com/p/google-caja/issues/detail?id=1378) created by metaweta on 2011-07-12T21:14:33.000Z:\n\n&lt;script&gt;\n  (function(){\n    var x = [];\n    var j=4;\n    x[+j]=1;\n  })();\n&lt;/script&gt;\n\ncajoles to\n\nmoduleResult___ = _**.f(function () {\n  var x, j;\n  x = [ ];\n  j = 4;\n  x.NUM____w**_ === x? (x[ + +j ] = 1): x.w___(+ +j, 1);\n}).i___();\n\nNotice the two plusses near j.\n", "created": "2015-04-16 04:34:17"}, {"url": "https://github.com/google/caja/issues/1377", "closed": "2015-04-16 04:34:17", "ttf": 0.0002777777777777778, "title": "\"insertionPoint is null\" error with document.write", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1377](https://code.google.com/p/google-caja/issues/detail?id=1377) created by jiangxw on 2011-07-12T05:58:25.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nlatest trunk, both FireFox and IE\n\n<b>What steps will reproduce the problem?</b>\n1. create following HTML document (docwrite.html)\n&lt;input id='myinput' type=&quot;text&quot; /&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\ndocument.write(&quot;Hello World!&quot;);\n&lt;/script&gt;\n1. cajole --input docwrite.html -j docwrite.out.js\n2. load docwrite.out.js with es53.html\n\n<b>What is the expected output? What do you see instead?</b>\nExpects to see no errors, instead we see &quot;insertionPoint is null&quot; in FireFox console.\n\n<b>Please provide any additional information below.</b>\nThe problem is that the generated docwrite.out.js calls emitter___.finish() too soon (which sets insertionPoint to null). So later, when we need to generate &quot;document.write&quot;, we get an null insertionPoint.\n", "created": "2015-04-16 04:34:11"}, {"url": "https://github.com/google/caja/issues/1376", "closed": "2015-04-16 04:34:10", "ttf": 0.0002777777777777778, "title": "can't overwrite properties defined in prototype", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1376](https://code.google.com/p/google-caja/issues/detail?id=1376) created by jiangxw on 2011-07-11T13:11:00.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nThe latest cajoler from trunk. Repro on both FireFox and IE\n\n<b>What steps will reproduce the problem?</b>\n1. cajole the following JS\n\n```\nfunction Foo() {\n}\n\nFoo.prototype.value = &quot;Hello World&quot;;\nvar foo = new Foo();\nfoo.value=&quot;This is new world&quot;;\n```\n1. load the output JS with es53.html\n\n<b>What is the expected output? What do you see instead?</b>\nExpects on errors, but you will see an error msg in FireBug console: &quot;The property 'value' is not writable.&quot;\n\n<b>Please provide any additional information below.</b>\nThe problem is the the Foo.prototype.value_gw___ points to Foo.prototype object. So when we try to change foo.value, we notice that foo.value_gw___ doesn't not point to foo itself and concluded (mistakenly) that it's not writtable\n", "created": "2015-04-16 04:34:04"}, {"url": "https://github.com/google/caja/issues/1374", "closed": "2015-04-16 04:34:01", "ttf": 0.0002777777777777778, "title": "Audit uses of ejector since SES does not allow uncatchable exceptions", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1374](https://code.google.com/p/google-caja/issues/detail?id=1374) created by mikesamuel on 2011-07-07T05:26:34.000Z:\n\nes53.js defines callWithEjector thus\n\n  function callWithEjector(attemptFunc, opt_failFunc) {\n    var failFunc = opt_failFunc || identity;\n    var disabled = false;\n    var token = new Token('ejection');\n    token.UNCATCHABLE___ = true;\n    ...\n  }\n\nUnfortunately, SES does not support uncatchable exceptions.\n\nWe need to audit uses of callWithEjector to make sure that unvetoable ejectors are OK or add uncatchable exceptions to SES.\n", "created": "2015-04-16 04:33:43"}, {"url": "https://github.com/google/caja/issues/1373", "closed": "2015-04-16 04:33:43", "ttf": 0.0002777777777777778, "title": "Try Caja rejects top-level variable modifications other than =", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1373](https://code.google.com/p/google-caja/issues/detail?id=1373) created by kpreid.switchb.org on 2011-07-04T19:46:55.000Z:\n\nIn &lt;http://caja.appspot.com/trycaja/&gt;:\n\n&gt; var x = 1\n1\n&gt; x++\nunknown:///unknown:1+3 - 4: Cannot assign to a free module variable: Rule &quot;setIncrDecr&quot;, Reference\nIdentifier : x\n&gt; x = 2\n2\n\nSurely if assignment succeeds, then increment should as well. *= and so on also fail, but &quot;x = x + 1&quot; succeeds.\n", "created": "2015-04-16 04:33:37"}, {"url": "https://github.com/google/caja/issues/1370", "closed": "2015-04-16 04:33:10", "ttf": 0.0002777777777777778, "title": "Code review: tagPolicy for sanitizer (27 added, 47 removed, 4 changed)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1370](https://code.google.com/p/google-caja/issues/detail?id=1370) created by zestyping on 2011-06-21T22:34:12.000Z:\n\nFactor out a replaceable tagPolicy to enable customization of the sanitizer.\nhttp://codereview.appspot.com/4641064\n\nThis exposes a hook named 'tagPolicy' in the sanitizer so that the\nsanitizer can be customized to accept or transform particular tags,\nfor example, to accept &lt;iframe&gt; tags with a specific SRC, or transform\n&lt;embed&gt; tags into &lt;iframe&gt; tags.\n\nmakeTagPolicy, sanitizeAttribs, and sanitizeWithPolicy are factored \nout so that they can be easily reused in custom tagPolicy functions.\n\nR=mikesamuel@gmail.com\n", "created": "2015-04-16 04:33:03"}, {"url": "https://github.com/google/caja/issues/1369", "closed": "2015-04-16 04:33:03", "ttf": 0.0002777777777777778, "title": "for-in loop cajoling fails on playground", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1369](https://code.google.com/p/google-caja/issues/detail?id=1369) created by metaweta on 2011-06-20T22:03:39.000Z:\n\n  var x={a:1, b:2};\n  for (var i in x) { document.write(i); }\n\nThrows an error on the server.\n", "created": "2015-04-16 04:32:58"}, {"url": "https://github.com/google/caja/issues/1367", "closed": "2015-04-16 04:32:38", "ttf": 0.0002777777777777778, "title": "caja.js missing api calls", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1367](https://code.google.com/p/google-caja/issues/detail?id=1367) created by jasvir on 2011-06-15T16:15:44.000Z:\n1. caja.js should be minified\n2. caja.js should include uri.js and export caja.uri.\\* needed for writing url policies\n", "created": "2015-04-16 04:32:36"}, {"url": "https://github.com/google/caja/issues/1363", "closed": "2015-04-16 04:32:24", "ttf": 0.0002777777777777778, "title": "Home page demo gadget usability", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1363](https://code.google.com/p/google-caja/issues/detail?id=1363) created by jasvir on 2011-06-06T16:46:12.000Z:\n- The demo gadget is currently hosted at http://www.thinkfu.com/ and should instead be checked into demos/ and sourced from there\n- The description of history scraping ought to be updated to reflect changes made by browsers to fix getComputedStyle\n", "created": "2015-04-16 04:32:19"}, {"url": "https://github.com/google/caja/issues/1362", "closed": "2015-04-16 04:32:19", "ttf": 0.0002777777777777778, "title": "Date.prototype provides ambient global communications channel", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1362](https://code.google.com/p/google-caja/issues/detail?id=1362) created by erights@google.com on 2011-05-30T04:01:07.000Z:\n\nEntering\n\n&lt;script&gt;\n  Object.freeze(Date.prototype);\n  Date.prototype.setFullYear(1957);\n  alert(Date.prototype.getFullYear());\n&lt;/script&gt;\n\u200b\ninto the playground alerts 1957. The problem here is that the underlying browser is correctly implementing either the ES3 or ES5 spec, both of which demand that Date.prototype is a valid Date object. Of all the ES5 primordial objects, Date.prototype is the only one with mutable _internal_ properties, which are therefore not made harmless by freezing.\n\nES5/3 should adopt the same solution already implemented by SES, which is to replace the built-in Date mutators with wrappers which refuse (with a TypeError) to mutate prototypical Dates.\n\nWe need to also get this corrected for the post-ES5 EcmaScript standard.\n", "created": "2015-04-16 04:31:57"}, {"url": "https://github.com/google/caja/issues/1361", "closed": "2015-04-16 04:31:57", "ttf": 0.0002777777777777778, "title": "moduleResult should come from finally block if it's the last to execute", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1361](https://code.google.com/p/google-caja/issues/detail?id=1361) created by metaweta on 2011-05-24T21:21:51.000Z:\n\neval(&quot;try{1}finally{2}&quot;) returns 2, whereas that string cajoles to a program in which moduleResult___ = 1.\n", "created": "2015-04-16 04:31:53"}, {"url": "https://github.com/google/caja/issues/1360", "closed": "2015-04-16 04:31:53", "ttf": 0.0002777777777777778, "title": "es53.js doesn't follow the [[CanPut]] logic correctly", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1360](https://code.google.com/p/google-caja/issues/detail?id=1360) created by metaweta on 2011-05-24T20:36:55.000Z:\n\nObjects inheriting from a prototype with a read-only property can only mask that property via Object.defineProperty, not by assignment.\n\nfunction F(){} \nObject.defineProperty(F.prototype, 'constructor', {writable:false}); \nvar G = function G(){}; \nG.prototype = Object.create(F.prototype); \nG.prototype.constructor = G; \ncajaVM.log(G.prototype.constructor);\n\nShould return F according to 8.12.4 step 8b., but returns G.\n", "created": "2015-04-16 04:31:48"}, {"url": "https://github.com/google/caja/issues/1359", "closed": "2015-04-16 04:31:48", "ttf": 0.0002777777777777778, "title": "ES53 prematurely casts thrown objects to strings", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1359](https://code.google.com/p/google-caja/issues/detail?id=1359) created by jasvir on 2011-05-22T01:35:31.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. In playground r4479:\n&lt;script&gt;\n  try {\n    throw { x: 1 }\n  } catch (e) {\n    alert(&quot;string&quot; == typeof(e));\n    alert(1 == e.x);\n  }\n&lt;/script&gt;\u200b\n\n<b>What is the expected output? What do you see instead?</b>\n\nExcept to catch the object that was thrown and be able to access it's properties.  Instead, tameException prematurely casts the object to a string, presumably because objects are not marked &quot;throwable___&quot;.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:31:37"}, {"url": "https://github.com/google/caja/issues/1358", "closed": "2015-04-16 04:31:37", "ttf": 0.0002777777777777778, "title": "html_sanitize is slow for large inputs on firefox 3.6, IE[678]", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1358](https://code.google.com/p/google-caja/issues/detail?id=1358) created by felix8a on 2011-05-18T23:24:41.000Z:\n\nfirefox4, safari5, chrome12, opera11 are all fine.\n\nfirefox 3.6 is slow.\n\nit's not the regexp matching that's slow.  basically, doing\n    s = s.substr(k);\nthousands of times in a loop takes noticeable time.\n\nchopping off the tail in a loop is fast, probably shares a data pointer with a different length.  chopping off the head in a loop is slow, probably copies the tail to a new allocation.\n\nfor firefox3, the regexp //y flag and lastIndex is probably a viable solution.\n\nneed to test IE.\n", "created": "2015-04-16 04:31:23"}, {"url": "https://github.com/google/caja/issues/1357", "closed": "2015-04-16 04:31:23", "ttf": 0.0002777777777777778, "title": "es53 is difficult to debug in webkit (chrome, safari)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1357](https://code.google.com/p/google-caja/issues/detail?id=1357) created by felix8a on 2011-05-16T21:48:27.000Z:\n\nwhen the chrome debugger is stopped in cajoled code, it's difficult to examine any objects, because chrome always shows them as having no properties.\n\nI suspect it's confused by es53's Object.getOwnPropertyNames, but haven't verified that.\n\nworkaround is to manually inspect objects with parent.Object.getOwnPropertyNames.\n", "created": "2015-04-16 04:31:10"}, {"url": "https://github.com/google/caja/issues/1356", "closed": "2015-04-16 04:31:10", "ttf": 0.0002777777777777778, "title": "Unicode escaping underscore partially bypasses the rewriter", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1356](https://code.google.com/p/google-caja/issues/detail?id=1356) created by jasvir on 2011-05-16T15:18:52.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nr4467\n\n<b>What steps will reproduce the problem?</b>\n1. In caja playground\n   &lt;script&gt;\n   \\u005F\\u005F=1\n   &lt;/script&gt;\n2. Cajole\n   FATAL_ERROR unknown:2+3 - 15: INTERNAL COMPILER ERROR. Illegal identifier passed through from rewriter: Identifier : __. Please report this error at: http://code.google.com/p/google-caja/issues/:unknown:2: \\u005F\\u005F=1\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:31:03"}, {"url": "https://github.com/google/caja/issues/1355", "closed": "2015-04-16 04:31:03", "ttf": 0.0002777777777777778, "title": "calling a tame xo4a in a tame record will get a useless this", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1355](https://code.google.com/p/google-caja/issues/detail?id=1355) created by felix8a on 2011-05-16T06:24:53.000Z:\n\na common js idiom is to construct an object with methods like this:\n  var a = {\n    x: 3,\n    f: function() { return this.x; }\n  };\n  alert(a.f());\nwhich will alert '3'.\n\nif you have a feral object like that and want to tame it, you do something like this:\n  imports.a = ___.tame(a);\n  ___.markTameAsXo4a(a.f, 'a.f');\n\nthe problem is, if cajoled code does alert(a.f()), the result is 'undefined' rather than 3, because tameRecord.m___ always passes USELESS as the 'this' argument.\n\nto reproduce in the Playground, replace the policy with this:\n        tamings___.push(function(**_, imports) {\n          parent.Object.FERAL_FRAME_OBJECT_** = parent.Object;\n          var a = new parent.Object;\n          a.x = 3;\n          a.f = new parent.Function('return this.x');\n          imports.outers.a = ___.tame(a);\n          ___.markTameAsXo4a(a.f, 'a.f');\n        });\nclick on 'Apply' in the policy window,\nthen cajole this:\n  &lt;script&gt;cajaVM.log(a.f());&lt;/script&gt;\n\nnote, changes to the policy seem to be ignored after the first cajole, so reload the page to fiddle with the policy.\n", "created": "2015-04-16 04:30:58"}, {"url": "https://github.com/google/caja/issues/1354", "closed": "2015-04-16 04:30:58", "ttf": 0.0002777777777777778, "title": "Mixed content warning on playground", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1354](https://code.google.com/p/google-caja/issues/detail?id=1354) created by erights@google.com on 2011-05-14T19:53:54.000Z:\n\nSee attached png.\n", "created": "2015-04-16 04:30:51"}, {"url": "https://github.com/google/caja/issues/1353", "closed": "2015-04-16 04:30:51", "ttf": 0.0002777777777777778, "title": "\"ant runserver\" fails", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "NotGreen", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1353](https://code.google.com/p/google-caja/issues/detail?id=1353) created by erights@google.com on 2011-05-14T19:49:52.000Z:\n\n&quot;ant clean&quot;, &quot;ant runserver&quot; fails with\n\nBUILD FAILED\n/Users/erights/src/svn-changes/ses-in-caja/google-caja/build.xml:640: The following error occurred while executing this line:\n/Users/erights/src/svn-changes/ses-in-caja/google-caja/build.xml:586: org.w3c.dom.DOMException: NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.\n    at com.sun.org.apache.xerces.internal.dom.ElementNSImpl.setName(ElementNSImpl.java:105)\n    at com.sun.org.apache.xerces.internal.dom.ElementNSImpl.&lt;init&gt;(ElementNSImpl.java:80)\n    at com.sun.org.apache.xerces.internal.dom.CoreDocumentImpl.createElementNS(CoreDocumentImpl.java:2095)\n    at com.sun.org.apache.xerces.internal.dom.DOMImplementationImpl.createDocument(DOMImplementationImpl.java:142)\n    at com.google.caja.parser.html.DomParser.makeDocument(DomParser.java:182)\n    at com.google.caja.parser.html.DomParser.parseFragment(DomParser.java:257)\n    at com.google.caja.parser.ParserContext.parse(ParserContext.java:290)\n    at com.google.caja.parser.ParserContext.build(ParserContext.java:319)\n    at com.google.caja.plugin.BuildServiceImplementation.cajole(BuildServiceImplementation.java:196)\n    at com.google.caja.tools.TransformAntTask.run(TransformAntTask.java:79)\n    at com.google.caja.tools.AbstractCajaAntTask$Output.build(AbstractCajaAntTask.java:200)\n    at com.google.caja.tools.AbstractCajaAntTask.execute(AbstractCajaAntTask.java:92)\n    at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n    at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n    at org.apache.tools.ant.Task.perform(Task.java:348)\n    at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68)\n    at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n    at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n    at org.apache.tools.ant.Task.perform(Task.java:348)\n    at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398)\n    at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n    at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n    at org.apache.tools.ant.Task.perform(Task.java:348)\n    at org.apache.tools.ant.Target.execute(Target.java:390)\n    at org.apache.tools.ant.Target.performTasks(Target.java:411)\n    at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n    at org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n    at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n    at org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n    at org.apache.tools.ant.Main.runBuild(Main.java:809)\n    at org.apache.tools.ant.Main.startAnt(Main.java:217)\n    at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n    at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n", "created": "2015-04-16 04:30:47"}, {"url": "https://github.com/google/caja/issues/1352", "closed": "2015-04-16 04:30:46", "ttf": 0.0002777777777777778, "title": "caja.js should call initFeralFrame() automatically", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1352](https://code.google.com/p/google-caja/issues/detail?id=1352) created by ihab.awad on 2011-05-09T18:36:26.000Z:\n\ncaja.js should call initFeralFrame() on the frame in which it is loaded automatically.\n", "created": "2015-04-16 04:30:42"}, {"url": "https://github.com/google/caja/issues/1351", "closed": "2015-04-16 04:30:42", "ttf": 0.0002777777777777778, "title": "Port best-effort support for Object.getPrototypeOf from cajita to es53", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1351](https://code.google.com/p/google-caja/issues/detail?id=1351) created by jasvir on 2011-05-02T15:26:31.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Use caja.js to construct a container page and render it in IE.\n2. Note the &quot;Not supported on this platform&quot; error that results.\n\nThis occurs because caja.js eventually calls Object.getPrototypeOf which currently only checks for **proto**.\n\n<b>What is the expected output? What do you see instead?</b>\n\ngetPrototypeOf should:\n1. Use the native O.getPrototypeOf if it exists\n2. Use **proto** if it exists\n3. Use the heuristics used in cajita to make a best effort guess at **proto**\n", "created": "2015-04-16 04:30:39"}, {"url": "https://github.com/google/caja/issues/1350", "closed": "2015-04-16 04:30:39", "ttf": 0.0002777777777777778, "title": "html_sanitize() is broken for string \"<a\\n\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1350](https://code.google.com/p/google-caja/issues/detail?id=1350) created by lazerka@google.com on 2011-04-28T03:52:37.000Z:\n\nWhat revision of the cajoler exhibits the problem? 4391, 4391 On what browser and OS? Any\n\n<b>What steps will reproduce the problem?</b>\n1. html_sanitize('&lt;a\\n');\n\n<b>What is the expected output? What do you see instead?</b>\nhtml_sanitizer.r4452.js:672 Uncaught TypeError: Cannot read property '0' of null\n", "created": "2015-04-16 04:30:28"}, {"url": "https://github.com/google/caja/issues/1349", "closed": "2015-04-16 04:30:28", "ttf": 0.0002777777777777778, "title": "var hoisting breaks directive prologue", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1349](https://code.google.com/p/google-caja/issues/detail?id=1349) created by erights@google.com on 2011-04-25T22:03:25.000Z:\n\nAt http://codereview.appspot.com/4249052/diff/2002/src/com/google/caja/ses/startSES.js#newcode67\nif we uncomment out the &quot;use strict&quot;, then we get the stack trace below. The problem seems to be that a var or multi-var declaration is being hoisted to the beginning of the function body, incorrectly displacing the &quot;use strict&quot; directive from that position, which then correctly complains about being misplaced.\n\n---\n\n$ ant MinifiedJs\n[...]\n\nMinifiedJs:\n[transform] building 5 files to /Users/erights/src/svn-changes/ses-in-caja/google-caja/ant-lib/com/google/caja/ses/initSES-minified.js\n[transform] java.lang.IllegalArgumentException: Misplaced directive prologoue startSES.js:67+3@3630 - 16@3643\n[transform]     at com.google.caja.parser.js.Block.childrenChanged(Block.java:68)\n[transform]     at com.google.caja.parser.AbstractParseTreeNode$MutationImpl.execute(AbstractParseTreeNode.java:408)\n[transform]     at com.google.caja.parser.AbstractParseTreeNode.insertBefore(AbstractParseTreeNode.java:114)\n[transform]     at com.google.caja.ancillary.opt.VarCollector.optimize(VarCollector.java:88)\n[transform]     at com.google.caja.ancillary.opt.VarCollector.optimize(VarCollector.java:95)\n[transform]     at com.google.caja.ancillary.opt.VarCollector.optimize(VarCollector.java:56)\n[transform]     at com.google.caja.ancillary.opt.JsOptimizer.optimize(JsOptimizer.java:121)\n[transform]     at com.google.caja.plugin.BuildServiceImplementation.cajole(BuildServiceImplementation.java:252)\n[transform]     at com.google.caja.tools.TransformAntTask.run(TransformAntTask.java:79)\n[transform]     at com.google.caja.tools.AbstractCajaAntTask$Output.build(AbstractCajaAntTask.java:200)\n[transform]     at com.google.caja.tools.AbstractCajaAntTask.execute(AbstractCajaAntTask.java:92)\n[transform]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n[transform]     at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n[transform]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[transform]     at java.lang.reflect.Method.invoke(Method.java:597)\n[transform]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n[transform]     at org.apache.tools.ant.Task.perform(Task.java:348)\n[transform]     at org.apache.tools.ant.Target.execute(Target.java:390)\n[transform]     at org.apache.tools.ant.Target.performTasks(Target.java:411)\n[transform]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n[transform]     at org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n[transform]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n[transform]     at org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n[transform]     at org.apache.tools.ant.Main.runBuild(Main.java:809)\n[transform]     at org.apache.tools.ant.Main.startAnt(Main.java:217)\n[transform]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n[transform]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n", "created": "2015-04-16 04:30:23"}, {"url": "https://github.com/google/caja/issues/1348", "closed": "2015-04-16 04:30:23", "ttf": 0.0002777777777777778, "title": "Minifier appears to produce syntactically invalid javascript", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1348](https://code.google.com/p/google-caja/issues/detail?id=1348) created by jasvir on 2011-04-25T04:13:33.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  Checkout r4450\n2.  Run ant and see es53-taming-frame.js around line 977\n3.  The minifier translates:\n    if (XMLHttpRequest &amp;&amp; 'withCredentials' in new XMLHttpRequest()) {\n      // FF 3.5+ and Safari 4\n      request = requestFunctions['w3cxhr'];\n    } else if (XDomainRequest) {\n      // IE8\n      request = requestFunctions['msxdr'];\n    } else {\n      // Older browser; fallback\n      request = requestFunctions['jsonp'];\n    }\n\nto syntatically invalid:\n\nXMLHttpRequest&amp;&amp;'withCredentials'in\nnew XMLHttpRequest?(request=requestFunctions.w3cxhr):(request=requestFunctions.(XDomainRequest?msxdr:jsonp))\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect it to minify to XMLHttpRequest&amp;&amp;'withCredentials'in\nnew XMLHttpRequest?(request=requestFunctions.w3cxhr):(request=requestFunctions[XDomainRequest?'msxdr':'jsonp'])\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:30:14"}, {"url": "https://github.com/google/caja/issues/1346", "closed": "2015-04-16 04:30:12", "ttf": 0.0002777777777777778, "title": "playground crashes some versions of ie9", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1346](https://code.google.com/p/google-caja/issues/detail?id=1346) created by felix8a on 2011-04-12T15:35:05.000Z:\n\nIE 9.0.8080.16413 crashes when loading the playground.  IE 9.0.8112.16421 works fine\n\nthis might be a wontfix if people update ie9 rapidly enough, but I haven't found a usage breakdown of ie9 versions yet.\n", "created": "2015-04-16 04:30:07"}, {"url": "https://github.com/google/caja/issues/1345", "closed": "2015-04-16 04:30:07", "ttf": 0.0002777777777777778, "title": "playground doesn't work on ie6", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1345](https://code.google.com/p/google-caja/issues/detail?id=1345) created by felix8a on 2011-04-12T15:33:02.000Z:\n\non IE6, the playground takes a long time to load, and when it does it throws some js exception.\n\nthis might be a wontfix.  as long as caja works on ie6, it doesn't really matter that the playground doesn't.\n", "created": "2015-04-16 04:29:58"}, {"url": "https://github.com/google/caja/issues/1344", "closed": "2015-04-16 04:29:58", "ttf": 0.0002777777777777778, "title": "problems running playground in IE", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1344](https://code.google.com/p/google-caja/issues/detail?id=1344) created by felix8a on 2011-04-12T00:09:57.000Z:\n\nplayground works in IE 9.0.8112.16421 (win7sp1)\n\nplayground never gets started on other IE versions:\n\nIE 9.0.8080.16413 crashes\n\nIE 8.0.7600.16385 fails on &quot;Object doesn't support this property or method&quot;.  it's trying to do addEventListener on a node that's in compatibility mode (needs attachEvent instead), which is odd since everything claims to be in standards mode.\n\nIE 6 fails on the same error, but IE 6 is not expected to have addEventListener.  what's odd is who's calling addEventListener, which seems to be code added by GWT, not sure where it comes from\n", "created": "2015-04-16 04:29:40"}, {"url": "https://github.com/google/caja/issues/1341", "closed": "2015-04-16 04:29:33", "ttf": 0.0002777777777777778, "title": "for (f in \"string\") throws TypeError", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1341](https://code.google.com/p/google-caja/issues/detail?id=1341) created by dynin@google.com on 2011-03-31T01:10:21.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nChrome, Firefox on Linux\n\n<b>What steps will reproduce the problem?</b>\n\nSee http://mishadynin.com/caja-for/\nThe offending snippet of code is\n    for (f in &quot;foo&quot;) {\n    }\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected: no exception; silently skip the loop body.\nGot: Got exception: TypeError: invalid &quot;in&quot; operand: foo\n\nThis behavior might be correct, but it's incompatible with browsers'\nimplementation.  Should at least be documented.\n", "created": "2015-04-16 04:29:27"}, {"url": "https://github.com/google/caja/issues/1340", "closed": "2015-04-16 04:29:26", "ttf": 0.0002777777777777778, "title": "Array.slice(null) in domita_test", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1340](https://code.google.com/p/google-caja/issues/detail?id=1340) created by felix8a on 2011-03-30T22:51:17.000Z:\n\ntestArraySlice in domita_test wants Array.slice(null) === null, and there's a comment saying that this behavior is necessary for some reason in valija.\n\nin firefox4, Array.slice(null) throws a type error, which conforms to es5, and matches the definition of Array.slice in es53.js\n", "created": "2015-04-16 04:29:24"}, {"url": "https://github.com/google/caja/issues/1338", "closed": "2015-04-16 04:29:17", "ttf": 0.0002777777777777778, "title": "es53 for-in loops are very slow", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1338](https://code.google.com/p/google-caja/issues/detail?id=1338) created by felix8a on 2011-03-24T20:32:49.000Z:\n\nthe string-fasta benchmark in the playground takes a huge amount of time.  on my macbook it takes 15s in Chrome 11, and several minutes in firefox 3.6\n\nalmost all of the slowness is due to this line of code that gets repeated thousands of times:\n    for (var c in table) {\nwhich is implemented by an eventual call to Object.Enumerate___\n\nChrome's profiler says Object.Enumerate___ is about 70% of the cpu time.\n", "created": "2015-04-16 04:29:13"}, {"url": "https://github.com/google/caja/issues/1337", "closed": "2015-04-16 04:29:12", "ttf": 0.0002777777777777778, "title": "constant regexps are always re-constructed every time they're used", "commits": {}, "user": "kpreid", "labels": ["Performance", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1337](https://code.google.com/p/google-caja/issues/detail?id=1337) created by felix8a on 2011-03-24T20:21:22.000Z:\n\nwhen js uses a constant regexp like\n\n```\ns = s.replace(/\\s+/, '');\n```\n\nthe es53 rewriter turns it into something like this:\n\n```\ns = (x0___ = new RegExp.new___('\\\\s+'), s.replace_m___?\n    s.replace(x0___, 'x'): s.m___('replace', [ x0___, 'x' ]\n```\n\nwhich means a new RegExp object is constructed every time that code is executed.\n\nRegExp construction is kind of expensive, not just the parse time of the RegExp.  each RegExp construction calls DefineOwnProperty___ five times, and DefineOwnProperty___ is kind of expensive.\n\n(this is one of of the reasons the markdown example is sluggish when cajoled.)\n", "created": "2015-04-16 04:29:01"}, {"url": "https://github.com/google/caja/issues/1336", "closed": "2015-04-16 04:29:01", "ttf": 0.0002777777777777778, "title": "cajole_html (PluginCompilerMain) isn't working", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1336](https://code.google.com/p/google-caja/issues/detail?id=1336) created by felix8a on 2011-03-24T19:29:00.000Z:\n\nI think r4398 broke PluginCompilerMain.  running\n  cajole_html -i foo.js -o out\nsays\n  java.lang.IllegalStateException: Not enough arguments to create a CharProducer\n    at com.google.caja.parser.ParserContext.guessCharProducer(ParserContext.java:214)\n    at com.google.caja.parser.ParserContext.build(ParserContext.java:321)\n    at com.google.caja.plugin.PluginCompilerMain.parseInputs(PluginCompilerMain.java:229)\n\nit looks to me like there's some logic missing in either ParserContext.guessCharProducer or PluginCompilerMain.parseInputs\n", "created": "2015-04-16 04:28:59"}, {"url": "https://github.com/google/caja/issues/1335", "closed": "2015-04-16 04:28:59", "ttf": 0.0002777777777777778, "title": "playground history uri failure", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1335](https://code.google.com/p/google-caja/issues/detail?id=1335) created by felix8a on 2011-03-23T22:25:11.000Z:\n\nif you load a uri like\n  http://caja.appspot.com/#examples/cajalife.html\ninto firefox or safari, the example will usually fail to load, and the console will show a js error like\n  'this.editor undefined'\n\nthe problem is codemirror has an odd startup sequence (due to its use of iframes).  CodeMirror.editor is not set in codemirror.js, it's set during an onload handler defined in editor.js\n\nin Playground.java onModuleLoad there's a call to History.fireCurrentHistoryState();\n\ngwt tries to fire onModuleLoad when the page's document is constructed, which might be before onload (which fires after images and other assets are loaded).\n\nso fireCurrentHistoryState will do an xhr to fetch the requested html, which can fire onsuccess before the page's onload fires.  onsuccess then tries to reference CodeMirror.editor, which hasn't been constructed yet.\n", "created": "2015-04-16 04:28:54"}, {"url": "https://github.com/google/caja/issues/1334", "closed": "2015-04-16 04:28:54", "ttf": 0.0002777777777777778, "title": "timer events after a gadget is unloaded", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1334](https://code.google.com/p/google-caja/issues/detail?id=1334) created by felix8a on 2011-03-23T21:18:00.000Z:\n\nif a gadget uses setTimeout or setInterval, the timer handler will still fire after the gadget has been 'unloaded'.  this is a pitfall that doesn't happen with iframed code.  this can be demonstrated in the Playground, eg with the clock demo.\n\nto avoid this resource leak, either\n- gadgets need to check if they're still alive in their timer handlers\n- caja should cancel pending timers when a gadget is unloaded\n", "created": "2015-04-16 04:28:52"}, {"url": "https://github.com/google/caja/issues/1333", "closed": "2015-04-16 04:28:52", "ttf": 0.0002777777777777778, "title": "flash resizing is broken", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1333](https://code.google.com/p/google-caja/issues/detail?id=1333) created by felix8a on 2011-03-22T23:43:46.000Z:\n\nin the playground flash demo, the flash movie should resize itself to the size of the embed.  like if you edit the js source and change the embedSWF width,height parameters to something like 100,100, the youtube video should resize itself to 100x100.  uncajoled outside the playground that works fine.  cajoled inside the playground, it doesn't work; the video gets clipped to 100x100 instead of resized.\n\nI'm guessing this is some problem with flashbridge.swf\n", "created": "2015-04-16 04:28:47"}, {"url": "https://github.com/google/caja/issues/1331", "closed": "2015-04-16 04:28:44", "ttf": 0.0002777777777777778, "title": "r4390 breaks 9 tests", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1331](https://code.google.com/p/google-caja/issues/detail?id=1331) created by felix8a on 2011-03-15T05:44:12.000Z:\n\nr4390 makes a distinction between quoted and unquoted property names, and it breaks 9 tests.  they seem to be all spurious failures.  they're comparing parse tree dumps of {foo:'bar'}, which used to be\n    ObjectConstructor\n      ValueProperty\n        StringLiteral : 'foo'\n        StringLiteral : 'bar'\nbut are now\n    ObjectConstructor\n      ValueProperty\n        StringLiteral : foo\n        StringLiteral : 'bar'\n\nmost of the failures can be fixed by fixing the golden text, but there are four in CajitaRewriterTest that are a bit messy, because the unquoted StringLiteral is being transformed into an array element.  eg,\n   {x:1}\nis transformed into\n   ___.iM(['x', 1])\nexcept the StringLiteral for 'x' is unquoted.  but parsing the golden text yields a parse tree with a StringLiteral 'x' that is quoted, so while the render-as-js values are the same, the parse-tree dumps are different, so the test fails.  I guess the simplest fix for that is to quote the keys in the source js, but that doesn't feel right.\n", "created": "2015-04-16 04:28:40"}, {"url": "https://github.com/google/caja/issues/1330", "closed": "2015-04-16 04:28:40", "ttf": 0.0002777777777777778, "title": "TextNode taming fails on IE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1330](https://code.google.com/p/google-caja/issues/detail?id=1330) created by awithers%drivedev.com@gtempaccount.com on 2011-03-14T01:08:20.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nRevision: r4390\nBrowser: IE 8\nOS: Windows 7\n\n<b>What steps will reproduce the problem?</b>\n1. Start IE JS debugger\n2. Open playground, paste the following on the source tab:\n\n&lt;div id=&quot;testbase&quot;&gt;Some text&lt;/div&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n  var el = document.getElementById('testbase');\n  debugger;\n  for (var i = 0; i &lt; el.childNodes.length; ++i) {\n  }\n  alert('done');\n&lt;/script&gt;\n1. Click ES5, Cajole\n2. Stopped at the debugger line, set a breakpoint on domita.js line 1625 (node.TAMED_TWIN___ = this;)\n3. Continue in the debugger\n4. At the breakpoint in domita.js now, observe that everything is as it should be (valid text node, etc)\n5. Step over and observe the &quot;Object doesn't support this property or method&quot; exception.\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected: Getting the childNodes of an element that happens to contain TextNodes on IE to behave as it would outside Caja.\n\nInstead: An attempt to set an invalid property on a text node that isn't allowed by IE.\n\n<b>Please provide any additional information below.</b>\n\nNote: Issues 1327 and 1328 need to be fixed before the playground will work in IE.\n", "created": "2015-04-16 04:28:28"}, {"url": "https://github.com/google/caja/issues/1329", "closed": "2015-04-16 04:28:28", "ttf": 0.0002777777777777778, "title": "TameCanvasElement breaks checks for actual canvas element support ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1329](https://code.google.com/p/google-caja/issues/detail?id=1329) created by awithers%drivedev.com@gtempaccount.com on 2011-03-12T23:43:06.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nRevision: r4390\nBrowser: IE 8\nOS: Windows 7\n\nNote: This depends on the ability to run the playground on IE, currently blocked by issues 1327 and 1328.\n\n<b>What steps will reproduce the problem?</b>\n1. Start IE debugger: Tools -&gt; Developer Tools\n2. Set a breakpoint in domita.js line 2712:\n\n  var context = node.getContext('2d');\n1. Paste the following in the source tab:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n    if (!document.createElement('canvas').getContext) {\n        alert('No canvas element');\n    }\n&lt;/script&gt;\n1. Click ES5, Cajole\n2. Should be stopped at domita.js 'node.getContext' line, step over\n3. Note the exception thrown\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect that creating a canvas element on a browser that doesn't support it will return a generic tamed element (one I can then check for getContext), not an exception to be thrown from simply calling document.createElement('canvas').\n\nThe canvas element check in step 3 comes directly from excanvas.js (http://code.google.com/p/explorercanvas/downloads/detail?name=excanvas_r3.zip&amp;can=2&amp;q=).\n\n<b>Please provide any additional information below.</b>\n\nMy workaround was to modify domita.js line 1125 (case 'canvas') to check that node.getContext is a function. If it is execute the existing code path, if not create a TameElement instead.\n", "created": "2015-04-16 04:28:21"}, {"url": "https://github.com/google/caja/issues/1328", "closed": "2015-04-16 04:28:21", "ttf": 0.0002777777777777778, "title": "es53.js relies on forEach before it may be available", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1328](https://code.google.com/p/google-caja/issues/detail?id=1328) created by awithers%drivedev.com@gtempaccount.com on 2011-03-12T19:37:51.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nRevision: r4390\nBrowser: IE 8\nOS: Windows 7\n\n<b>What steps will reproduce the problem?</b>\n1. ant production runserver\n2. Attempt to connect to localhost:8080 with IE\n3. Note the exception indicating forEach isn't available (es53.js line 2009)\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect playground page to display.\n\nI see a blank page with an exception indicating Array.forEach was used without it being available.\n\n<b>Please provide any additional information below.</b>\n\nIE 8 doesn't implement the Array.forEach extension. A check should be made to implement forEach when it isn't available or simply replace the use of forEach with a loop.\n\nThe offending line is:\n\n  deferredDefended.forEach(function(o) { addToDefended(o); });\n\nNote: To reach this execution point is is necessary to first fix issue 1327\n", "created": "2015-04-16 04:28:19"}, {"url": "https://github.com/google/caja/issues/1327", "closed": "2015-04-16 04:28:19", "ttf": 0.0002777777777777778, "title": "Issue with GWT, IE, and setCellHeight(x, \"0%\")", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1327](https://code.google.com/p/google-caja/issues/detail?id=1327) created by awithers%drivedev.com@gtempaccount.com on 2011-03-12T19:24:51.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nRevision: r4390\nBrowser: IE 8\nOS: Windows 7\n\n<b>What steps will reproduce the problem?</b>\n1. ant production runserver\n2. Connect to localhost:8080 with IE 8\n3. Note: JS invalid argument exception\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect to see the playground page load. Instead I see a blank page because PlaygroundView.java is calling setCellHeight with 0%.\n\nThere are two of these calls, introduced in r3996 and r4178.\n\n<b>Please provide any additional information below.</b>\n\nThere is a related GWT issue:\n\n  http://code.google.com/p/google-web-toolkit/issues/detail?id=2065\n\nMy current workaround is to pass &quot;1px&quot; instead of &quot;0%&quot;.\n", "created": "2015-04-16 04:28:16"}, {"url": "https://github.com/google/caja/issues/1326", "closed": "2015-04-16 04:28:16", "ttf": 0.0002777777777777778, "title": "SECURITY PATCH to circumvent an Adobe Flash Player vulnerability.", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1326](https://code.google.com/p/google-caja/issues/detail?id=1326) created by evn@google.com on 2011-03-08T02:07:40.000Z:\n\ngvn review None\n\nSECURITY PATCH to circumvent an Adobe Flash Player vulnerability.\nhttp://codereview.appspot.com/4261054\n\nHi reviewers!\n\nThis is a patch for an Adobe Flash Player vulnerability that Adobe hasn't fixed yet. The fix abuses another Adobe bug which they claim they will never fix. The reason I do that instead of just double encoding is because if we double escape that would create &quot;double escaping&quot; problems in the future when they fix this.. which may endup causing more problems. At least for the bug I'm abusing they have explicitely stated that will never be fixed.\n\nTo rever this changes if Adobe happens to fix this bug, we would just have to replace callJS with flash.external.ExternalInterface.call, and won't break the moment they fix the first vuln.\n\nR=metaweta\n", "created": "2015-04-16 04:28:03"}, {"url": "https://github.com/google/caja/issues/1325", "closed": "2015-04-16 04:28:03", "ttf": 0.0002777777777777778, "title": "IE9 shows an empty page in all modes when going to an SSL domain", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1325](https://code.google.com/p/google-caja/issues/detail?id=1325) created by iecompat on 2011-03-04T23:55:21.000Z:\n\nWhat revision of the cajoler exhibits the problem?  \n\nThis is occurring on Windows 7 and IE9 or IE8\n\nSteps to reproduce:\n1. Switch IE9 into IE9 standards mode.\n2. Go to https://caja.appspot.com \n\nEXPECTED RESULTS:\nNo crashing, I expected the page to render and be functional as it is in all other browsers, and previous versions of IE.\n\nACTUAL RESULTS:\n2nd chance AV in jscript9!Js::JavascriptOperators::StrictEqual+1d\n\nThere are a couple script errors that happen on page load:\n\nSCRIPT87: Invalid argument. \n75426540347B016F181187F11733FC05.cache.html, line 1915 character 758\nSCRIPT87: Invalid argument. \n75426540347B016F181187F11733FC05.cache.html, line 1918 character 426\n\nThe first is because of this line:\n    !!m&amp;&amp;(m[Wib]=Fjb,undefined);\n\nm is a TD, Wib == &quot;height&quot;, and Fjb == &quot;0%&quot;, so it's basically trying to do TD.height = &quot;0%&quot;, which throws an Invalid argument error (same in IE8 RTM).\n\nIf you step over that line of script and then continue execution, it then pops on that second error somewhere in this line:\n\n FS(c,(k=yU(new hU),AU(k,yk(a)),AU(k,(a.f=OQ(new zQ),a.f.z()[Vib]=vjb,EQ(a.f,Fk(a),wjb),EQ(a.f,(a.j=GW(new yW),a.i=DZ(new AZ,a.j),Cj(a.i.a,tl(new rl,a),(Vs(),Vs(),Us)),a.i.a.w[xjb]=yjb,a.i.w.style[Zib]=qjb,r=pO(new jO,zjb),Cj(r,yl(new wl,a),(Bs(),Bs(),As)),t=pO(new jO,Ajb),Cj(t,Dl(new Bl,a),As),q=pO(new jO,Bjb),Cj(q,Il(new Gl,a),As),p=LS(new IS,1,4),s=0,p.w[Vib]=Cjb,fS(p,0,s,a.i),xS(p.d,0,s++,Djb),fS(p,0,s++,t),fS(p,0,s++,q),fS(p,0,s++,r),p.w.style[Zib]=Ejb,a.k=Z$(new Q$),Kk(a,a.k),kj(a.k,Ejb,qjb),u=S0(new P0),u.w.style[Zib]=qjb,u.b=(QT(),PT),T0(u,p),v=uO(u,p),!!v&amp;&amp;(v[Wib]=Fjb,undefined),T0(u,a.k),w=uO(u,a.k),!!w&amp;&amp;(w[Wib]=qjb,undefined),u),Gjb),EQ(a.f,(x=ES(new CS),a.b=aT(new VS),kj(a.b,qjb,qjb),a.b.w.className=Hjb,FS(x,a.b),x),Ijb),EQ(a.f,(z=cR(new YQ,Jjb),z.w[Vib]=Cjb,a.m=b_(new _$),a.m.w.style[Zib]=qjb,dR(z,a.m),z.w.style[Zib]=qjb,a.l=aT(new VS),y=ES(new CS),mN(y,z,y.w),FS(y,a.l),kj(a.l,qjb,qjb),y),Kjb),EQ(a.f,(A=ES(new CS),A.w.style[Zib]=qjb,A.w.style[Wib]=qjb,a.c=kS(new OR),a.c.w.style[Zib]=qjb,FS(A,a.c),A),Ljb),EQ(a.f,(B=ES(new CS),B.w.style[Zib]=qjb,B.w.style[Wib]=qjb,a.n=kS(new OR),a.n.w.style[Zib]=qjb,FS(B,a.n),Tk(a),B),Mjb),Uk(a),kj(a.f,qjb,qjb),kj(a.f.a,qjb,qjb),tQ(a.f.b,(Zl(),Xl).e),a.f)),k.e=Njb,OU(k.b,Njb),k.w.style[Zib]=qjb,k.w.style[Wib]=qjb,k));\n\nAlso, there are some exceptions being thrown that the script catches which are likely to also play into why the conted doesn't render.\n", "created": "2015-04-16 04:28:00"}, {"url": "https://github.com/google/caja/issues/1324", "closed": "2015-04-16 04:28:00", "ttf": 0.0002777777777777778, "title": "IE9 shows an empty page in all modes when going to an SSL domain", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1324](https://code.google.com/p/google-caja/issues/detail?id=1324) created by iecompat on 2011-03-04T23:55:21.000Z:\n\nWhat revision of the cajoler exhibits the problem?  \n\nThis is occurring on Windows 7 and IE9 or IE8\n\nSteps to reproduce:\n1. Switch IE9 into IE9 standards mode.\n2. Go to https://caja.appspot.com \n\nEXPECTED RESULTS:\nNo crashing, I expected the page to render and be functional as it is in all other browsers, and previous versions of IE.\n\nACTUAL RESULTS:\n2nd chance AV in jscript9!Js::JavascriptOperators::StrictEqual+1d\n\nThere are a couple script errors that happen on page load:\n\nSCRIPT87: Invalid argument. \n75426540347B016F181187F11733FC05.cache.html, line 1915 character 758\nSCRIPT87: Invalid argument. \n75426540347B016F181187F11733FC05.cache.html, line 1918 character 426\n\nThe first is because of this line:\n    !!m&amp;&amp;(m[Wib]=Fjb,undefined);\n\nm is a TD, Wib == &quot;height&quot;, and Fjb == &quot;0%&quot;, so it's basically trying to do TD.height = &quot;0%&quot;, which throws an Invalid argument error (same in IE8 RTM).\n\nIf you step over that line of script and then continue execution, it then pops on that second error somewhere in this line:\n\n FS(c,(k=yU(new hU),AU(k,yk(a)),AU(k,(a.f=OQ(new zQ),a.f.z()[Vib]=vjb,EQ(a.f,Fk(a),wjb),EQ(a.f,(a.j=GW(new yW),a.i=DZ(new AZ,a.j),Cj(a.i.a,tl(new rl,a),(Vs(),Vs(),Us)),a.i.a.w[xjb]=yjb,a.i.w.style[Zib]=qjb,r=pO(new jO,zjb),Cj(r,yl(new wl,a),(Bs(),Bs(),As)),t=pO(new jO,Ajb),Cj(t,Dl(new Bl,a),As),q=pO(new jO,Bjb),Cj(q,Il(new Gl,a),As),p=LS(new IS,1,4),s=0,p.w[Vib]=Cjb,fS(p,0,s,a.i),xS(p.d,0,s++,Djb),fS(p,0,s++,t),fS(p,0,s++,q),fS(p,0,s++,r),p.w.style[Zib]=Ejb,a.k=Z$(new Q$),Kk(a,a.k),kj(a.k,Ejb,qjb),u=S0(new P0),u.w.style[Zib]=qjb,u.b=(QT(),PT),T0(u,p),v=uO(u,p),!!v&amp;&amp;(v[Wib]=Fjb,undefined),T0(u,a.k),w=uO(u,a.k),!!w&amp;&amp;(w[Wib]=qjb,undefined),u),Gjb),EQ(a.f,(x=ES(new CS),a.b=aT(new VS),kj(a.b,qjb,qjb),a.b.w.className=Hjb,FS(x,a.b),x),Ijb),EQ(a.f,(z=cR(new YQ,Jjb),z.w[Vib]=Cjb,a.m=b_(new _$),a.m.w.style[Zib]=qjb,dR(z,a.m),z.w.style[Zib]=qjb,a.l=aT(new VS),y=ES(new CS),mN(y,z,y.w),FS(y,a.l),kj(a.l,qjb,qjb),y),Kjb),EQ(a.f,(A=ES(new CS),A.w.style[Zib]=qjb,A.w.style[Wib]=qjb,a.c=kS(new OR),a.c.w.style[Zib]=qjb,FS(A,a.c),A),Ljb),EQ(a.f,(B=ES(new CS),B.w.style[Zib]=qjb,B.w.style[Wib]=qjb,a.n=kS(new OR),a.n.w.style[Zib]=qjb,FS(B,a.n),Tk(a),B),Mjb),Uk(a),kj(a.f,qjb,qjb),kj(a.f.a,qjb,qjb),tQ(a.f.b,(Zl(),Xl).e),a.f)),k.e=Njb,OU(k.b,Njb),k.w.style[Zib]=qjb,k.w.style[Wib]=qjb,k));\n\nAlso, there are some exceptions being thrown that the script catches which are likely to also play into why the conted doesn't render.\n", "created": "2015-04-16 04:27:53"}, {"url": "https://github.com/google/caja/issues/1323", "closed": "2015-04-16 04:27:53", "ttf": 0.0002777777777777778, "title": "Corkboard broken", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1323](https://code.google.com/p/google-caja/issues/detail?id=1323) created by erights@google.com on 2011-03-04T16:48:41.000Z:\n\nCorkboard scripting is broken in Mac Chrome and Safari, with this error in the console and no useful line info.\n\n Not writable: ([TameWindow]).Function\n\nJust reporting in case it hasn't been noticed yet. I don't have time now to look into it myself.\n\nReported by Kevin Reid at https://groups.google.com/d/topic/google-caja-discuss/zlPegw3SkVc/discussion\n", "created": "2015-04-16 04:27:51"}, {"url": "https://github.com/google/caja/issues/1322", "closed": "2015-04-16 04:27:51", "ttf": 0.0002777777777777778, "title": "\"ant runserver\" failed", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "NotGreen", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1322](https://code.google.com/p/google-caja/issues/detail?id=1322) created by erights@google.com on 2011-03-03T03:55:35.000Z:\n\n&quot;ant runserver&quot; failed with the following error. Are we not green?\n\njquery:\n[transform] building 1 files to /Users/erights/src/svn-changes/ses-in-caja/google-caja/ant-lib/js/jqueryjs/test/core-cajoled.js\n[transform] org.w3c.dom.DOMException: NAMESPACE_ERR: An attempt is made to create or change an object in a way which is incorrect with regard to namespaces.\n[transform]     at com.sun.org.apache.xerces.internal.dom.ElementNSImpl.setName(ElementNSImpl.java:105)\n[transform]     at com.sun.org.apache.xerces.internal.dom.ElementNSImpl.&lt;init&gt;(ElementNSImpl.java:80)\n[transform]     at com.sun.org.apache.xerces.internal.dom.CoreDocumentImpl.createElementNS(CoreDocumentImpl.java:2095)\n[transform]     at com.sun.org.apache.xerces.internal.dom.DOMImplementationImpl.createDocument(DOMImplementationImpl.java:142)\n[transform]     at com.google.caja.parser.html.DomParser.makeDocument(DomParser.java:182)\n[transform]     at com.google.caja.parser.html.DomParser.parseFragment(DomParser.java:257)\n[transform]     at com.google.caja.plugin.PluginCompilerMain.parseInput(PluginCompilerMain.java:286)\n[transform]     at com.google.caja.plugin.BuildServiceImplementation.parseInput(BuildServiceImplementation.java:333)\n[transform]     at com.google.caja.plugin.BuildServiceImplementation.cajole(BuildServiceImplementation.java:189)\n[transform]     at com.google.caja.tools.TransformAntTask.run(TransformAntTask.java:77)\n[transform]     at com.google.caja.tools.AbstractCajaAntTask$Output.build(AbstractCajaAntTask.java:196)\n[transform]     at com.google.caja.tools.AbstractCajaAntTask.execute(AbstractCajaAntTask.java:88)\n[transform]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n[transform]     at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n[transform]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[transform]     at java.lang.reflect.Method.invoke(Method.java:597)\n[transform]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n[transform]     at org.apache.tools.ant.Task.perform(Task.java:348)\n[transform]     at org.apache.tools.ant.taskdefs.Sequential.execute(Sequential.java:68)\n[transform]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n[transform]     at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n[transform]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[transform]     at java.lang.reflect.Method.invoke(Method.java:597)\n[transform]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n[transform]     at org.apache.tools.ant.Task.perform(Task.java:348)\n[transform]     at org.apache.tools.ant.taskdefs.MacroInstance.execute(MacroInstance.java:398)\n[transform]     at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n[transform]     at sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n[transform]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n[transform]     at java.lang.reflect.Method.invoke(Method.java:597)\n[transform]     at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n[transform]     at org.apache.tools.ant.Task.perform(Task.java:348)\n[transform]     at org.apache.tools.ant.Target.execute(Target.java:390)\n[transform]     at org.apache.tools.ant.Target.performTasks(Target.java:411)\n[transform]     at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1397)\n[transform]     at org.apache.tools.ant.Project.executeTarget(Project.java:1366)\n[transform]     at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n[transform]     at org.apache.tools.ant.Project.executeTargets(Project.java:1249)\n[transform]     at org.apache.tools.ant.Main.runBuild(Main.java:801)\n[transform]     at org.apache.tools.ant.Main.startAnt(Main.java:218)\n[transform]     at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n[transform]     at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n", "created": "2015-04-16 04:27:46"}, {"url": "https://github.com/google/caja/issues/1321", "closed": "2015-04-16 04:27:46", "ttf": 0.0002777777777777778, "title": "IE 9 + caja on ssl domains causes IE9 to shutdown", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1321](https://code.google.com/p/google-caja/issues/detail?id=1321) created by mark.story on 2011-03-02T21:13:09.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nUsing:\n- Windows 7 32bit version \n- IE9RC (9.0.8080.16413), go to a regular domain and set IE9 to  &quot;IE9 standards mode&quot; using the developer toolbar. \n\n<b>What steps will reproduce the problem?</b>\n1. Goto http://caja.appspot.com (No page renders, but the browser is still running)\n2. Change the URL to https://caja.appspot.com (switch to https)\n\nIE9 will crash.\n\n<b>What is the expected output? What do you see instead?</b>\n\nThe normal caja.appspot.com site.  Changing to ssl works fine with safari and firefox.\n\nI'll also be trying to file an issue report with Microsoft as well, as I'm fairly confident the issue is in IE9, but thought you would be interested as well.\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:27:37"}, {"url": "https://github.com/google/caja/issues/1320", "closed": "2015-04-16 04:27:37", "ttf": 0.0002777777777777778, "title": "In r4372 there is an inconsistency when referring to html4.ueffect(s) in taming.js", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1320](https://code.google.com/p/google-caja/issues/detail?id=1320) created by awithers%drivedev.com@gtempaccount.com on 2011-02-26T03:32:24.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nVersion: trunk r4379\nOS/Browser: Linux/FF Minefield b13, Chrome (latest stable)\n\n<b>What steps will reproduce the problem?</b>\n1. Launch playground, paste this in the Source tab:\n\n&lt;html&gt;\n&lt;body&gt;\n  &lt;a id=&quot;testid&quot; href=&quot;&quot;&gt;Test&lt;/a&gt;\n  &lt;script&gt;\n    var t = document.getElementById('testid');\n    t.href = &quot;http://www.google.com&quot;;\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n1. Check ES5\n2. Cajole\n3. Look at Runtime Warnings/Errors\n\n<b>What is the expected output? What do you see instead?</b>\n\nAn empty Runtime Warnings/Errors tab. Instead I see:\n\nCannot read property 'NEW_DOCUMENT' of undefined\nCannot read property 'NEW_DOCUMENT' of undefined\nException during exception handling.\n\n<b>Please provide any additional information below.</b>\n\nIt looks like in:\n\nhttp://codereview.appspot.com/4185047\n\nueffect was used, when comitted, ueffects was used consistently, except in uriPolicy of taming.js.\n\nEditing taming.js: uriPolicy to use ueffects works\n", "created": "2015-04-16 04:27:32"}, {"url": "https://github.com/google/caja/issues/1318", "closed": "2015-04-16 04:27:30", "ttf": 0.0002777777777777778, "title": "Event handlers and javascript urls fail under ES53", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1318](https://code.google.com/p/google-caja/issues/detail?id=1318) created by jasvir on 2011-02-20T08:47:18.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Inline javascript urls fail to cajole correctly: &lt;a href=&quot;javascript:alert(1);&quot;&gt;hello&lt;/a&gt;\n2. Inline event handlers fail to cajole correctly: &lt;a href=&quot;#&quot; onclick=&quot;function(){alert(1); return false}&quot;&gt;hello&lt;/a&gt;\n\nhttp://caja.appspot.com/?url=data:text/html;charset=utf-8;base64,PGEgaWQ9ImpzRmFpbHMiIGhyZWY9ImphdmFzY3JpcHQ6YWxlcnQoMSk7Ij5qcyBpbiBocmVmIGZhaWxzPC9hPjxicj4NCjxhIGlkPSJvbmNsaWNrRmFpbHMiIGhyZWY9IiMiIG9uY2xpY2s9ImZ1bmN0aW9uKCkgeyBhbGVydCgxKTsgcmV0dXJuIGZhbHNlOyB9Ij5pbmxpbmUgb25jbGljayBmYWlsczwvYT48YnI%2BDQo8YSBpZD0ib25jbGlja1dvcmtzIiBocmVmPSIjIj5keW5hbWljIG9uY2xpY2sgd29ya3M8L2E%2BPGJyPg0KPHNjcmlwdD4NCiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29uY2xpY2tXb3JrcycpLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7IGFsZXJ0KDEpOyByZXR1cm4gZmFsc2U7IH07DQo8L3NjcmlwdD4NCg%3D%3D#data:text/html;charset=utf-8;base64,PGEgaWQ9ImpzRmFpbHMiIGhyZWY9ImphdmFzY3JpcHQ6YWxlcnQoMSk7Ij5qcyBpbiBocmVmIGZhaWxzPC9hPjxicj4NCjxhIGlkPSJvbmNsaWNrRmFpbHMiIGhyZWY9IiMiIG9uY2xpY2s9ImZ1bmN0aW9uKCkgeyBhbGVydCgxKTsgcmV0dXJuIGZhbHNlOyB9Ij5pbmxpbmUgb25jbGljayBmYWlsczwvYT48YnI%252BDQo8YSBpZD0ib25jbGlja1dvcmtzIiBocmVmPSIjIj5keW5hbWljIG9uY2xpY2sgd29ya3M8L2E%252BPGJyPg0KPHNjcmlwdD4NCiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ29uY2xpY2tXb3JrcycpLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7IGFsZXJ0KDEpOyByZXR1cm4gZmFsc2U7IH07DQo8L3NjcmlwdD4NCg%253D%253D\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:27:19"}, {"url": "https://github.com/google/caja/issues/1316", "closed": "2015-04-16 04:27:07", "ttf": 0.0002777777777777778, "title": "\"do {;} while(false) false\" parses according to spec: as a syntax error", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1316](https://code.google.com/p/google-caja/issues/detail?id=1316) created by erights@google.com on 2011-02-09T01:33:00.000Z:\n\nhttp://caja.appspot.com/trycaja/index.html?input=do%20{%3b}%20while%28false%29%20false\n\nSee https://bugs.ecmascript.org/show_bug.cgi?id=8\n", "created": "2015-04-16 04:26:58"}, {"url": "https://github.com/google/caja/issues/1315", "closed": "2015-04-16 04:26:58", "ttf": 0.0002777777777777778, "title": "Markdown example description is wrong", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1315](https://code.google.com/p/google-caja/issues/detail?id=1315) created by benl@google.com on 2011-02-02T23:40:58.000Z:\n\nhttp://caja.appspot.com/#http://www.thinkfu.com/markdown.html\n\nDescription says links won't work, but they do (or maybe it means something else, in which case it is unclear) - and they lead to an error.\n", "created": "2015-04-16 04:26:56"}, {"url": "https://github.com/google/caja/issues/1314", "closed": "2015-04-16 04:26:56", "ttf": 0.0002777777777777778, "title": "Build breakage: \"ant runtests\" broken", "commits": {}, "user": "kpreid", "labels": ["NotGreen", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1314](https://code.google.com/p/google-caja/issues/detail?id=1314) created by erights@google.com on 2011-02-02T17:52:47.000Z:\n\nhttp://codereview.appspot.com/4079059/\n", "created": "2015-04-16 04:26:53"}, {"url": "https://github.com/google/caja/issues/1313", "closed": "2015-04-16 04:26:53", "ttf": 0.0002777777777777778, "title": "XMLHttpRequest apparently not working in Caja", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1313](https://code.google.com/p/google-caja/issues/detail?id=1313) created by mdynin on 2011-01-31T02:59:22.000Z:\n\nI've isolated the testcase and uploaded it to\n  http://mishadynin.com/caja-xhr/\n(also in attachment.)\n\nWhen testcase.html is loaded directly in the browser,\nit fetches its own source using XMLHttpRequest and\ndisplays it.\n\nWhen testcase.html is loaded in the container,\nit executes onreadystatechange events but\nstatus and responseText are not set correctly.\n", "created": "2015-04-16 04:26:46"}, {"url": "https://github.com/google/caja/issues/1312", "closed": "2015-04-16 04:26:46", "ttf": 0.0002777777777777778, "title": "Grammar allows anonymous function declarations without warnings", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1312](https://code.google.com/p/google-caja/issues/detail?id=1312) created by jasvir on 2011-01-28T18:42:28.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. In the playground run:\n&lt;script&gt;\nfunction () {}\n&lt;/script&gt;\n1. Note that no errors or warnings are generated.\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect a warning.  The ES5 grammar distinguishes between function expressions and declarations.  While anonymous function expressions are allowed, anonymous function declarations are not.  See Chapter 13 of the spec.\n\nFunctionDeclaration : function Identifier ( FormalParameterListopt ) { FunctionBody }\nFunctionExpression : function Identifieropt ( FormalParameterListopt ) { FunctionBody }\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:26:44"}, {"url": "https://github.com/google/caja/issues/1311", "closed": "2015-04-16 04:26:44", "ttf": 0.0002777777777777778, "title": "Taming error in Domita under ES53", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1311](https://code.google.com/p/google-caja/issues/detail?id=1311) created by jasvir on 2011-01-12T17:42:34.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  Cajole and run:\n\n&lt;canvas id=&quot;canvas&quot; width=&quot;150&quot; height=&quot;150&quot;&gt;&lt;/canvas&gt;\n&lt;script&gt;\n  var canvas = document.getElementById(&quot;canvas&quot;);\n  var ctx = canvas.getContext(&quot;2d&quot;);\n  ctx.fillStyle = &quot;red&quot;;\n  ctx.fillRect (0, 0, 50, 50);\n&lt;/script&gt;\n1. Under valija, this runs and renders a red box.  Under es53:\n\nThe property 'fillStyle' is not writable.\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:26:39"}, {"url": "https://github.com/google/caja/issues/1308", "closed": "2015-04-16 04:26:19", "ttf": 0.0002777777777777778, "title": "Rewriter tests don't test the whole pipeline", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1308](https://code.google.com/p/google-caja/issues/detail?id=1308) created by metaweta on 2011-01-06T21:58:13.000Z:\n\nissue1307 is an example of a bug we missed for months because rewriteAndExecute doesn't call the cajoler, just the JS rewriter.  We need to pass it through everything to see that it's working.\n", "created": "2015-04-16 04:26:12"}, {"url": "https://github.com/google/caja/issues/1307", "closed": "2015-04-16 04:26:12", "ttf": 0.0002777777777777778, "title": "Array optimization is borked on for-in loops", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1307](https://code.google.com/p/google-caja/issues/detail?id=1307) created by metaweta on 2011-01-06T21:55:43.000Z:\n\n(function(){\n  var x = {a:1, b:2};\n  for (var i in x) { alert(x[i]); }\n})();\n\nExpected:\n  alerts 1 then 2\nAcutal:\n  alerts undefined twice because x[i] gets cajoled to x[+i]\n\nCommonJsRewriterTest didn't catch it because rewriteAndExecute doesn't invoke the whole cajoler.\n", "created": "2015-04-16 04:26:05"}, {"url": "https://github.com/google/caja/issues/1306", "closed": "2015-04-16 04:26:05", "ttf": 0.0002777777777777778, "title": "Maven: caja maven repository fails to provide md5/sha1 checksum files", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1306](https://code.google.com/p/google-caja/issues/detail?id=1306) created by anchiornis@weingram.com on 2011-01-05T11:43:38.000Z:\n\nSummary:\n\nThe caja project provides a maven repository, but the repository fails to provide md5/sha1 checksum files for any of the caja resource files. \n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nThe issue is not version, browser or OS dependent\n\n<b>What steps will reproduce the problem?</b>\n\nFor each file in the maven repository, e.g. in:\nhttp://google-caja.googlecode.com/svn/maven/caja/caja/r3828/\nthere should be a md5 and/or a sha1 checksum file.\n\nSee the following example:\nhttp://repo2.maven.org/maven2/xerces/xercesImpl/2.9.1/\nRepo metadata:\nhttp://repo2.maven.org/maven2/xerces/xercesImpl/\n\n<b>What is the expected output? What do you see instead?</b>\n\nErroneous output:\nWhen building a project using maven, you see warning messages for Caja files, e.g.:\n[WARNING] **\\* CHECKSUM FAILED - Error retrieving checksum file for caja/caja/r3828/caja-r3828.pom - IGNORING\n\nCorrect output: \nThe message should not appear.\n\n<b>Please provide any additional information below.</b>\n\nThank you.\n", "created": "2015-04-16 04:26:01"}, {"url": "https://github.com/google/caja/issues/1304", "closed": "2015-04-16 04:25:32", "ttf": 0.0002777777777777778, "title": "Blank URL in playground causes IllegalArgumetnException", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1304](https://code.google.com/p/google-caja/issues/detail?id=1304) created by metaweta on 2010-12-10T22:23:14.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Empty the address line below the source tab\n2. Type something in the text area\n3. Hit cajole\n\nIt says the call fails on the server.  The server log says\n\n```\n [java] SEVERE: [1292019580890000] javax.servlet.ServletContext log: Exception while dispatching incoming RPC call\n [java] com.google.gwt.user.server.rpc.UnexpectedException: Service method 'public abstract com.google.caja.demos.playground.client.CajolingServiceResult com.google.caja.demos.playground.client.PlaygroundService.cajole(java.lang.String,java.lang.String,boolean)' threw an unexpected exception: java.lang.IllegalArgumentException: \n```\n", "created": "2015-04-16 04:25:25"}, {"url": "https://github.com/google/caja/issues/1303", "closed": "2015-04-16 04:25:25", "ttf": 0.0002777777777777778, "title": "ES5/3 inconsistently rejects assignments to undeclared globals", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1303](https://code.google.com/p/google-caja/issues/detail?id=1303) created by erights@google.com on 2010-12-08T04:14:52.000Z:\n\nIn the playground the following is rejected, complaining about the assignment by &quot;++&quot; to the c that isn't locally declared within : \n   &lt;script&gt;var c=1;&lt;/script&gt;\n    &lt;script&gt;c = ++c;&lt;/script&gt;\n    &lt;script&gt;alert(c);&lt;/script&gt;\n\u200b\nIf we replace that middle script with &quot;c += 1;&quot; it still fails. But &quot;c = c + 1;&quot; succeeds as it should. This source of the bug, I'm embarrassed to say, occurs at http://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/parser/quasiliteral/Rule.java?spec=svn4332&amp;r=4145#&nbsp;457 where an old TODO(erights) explains what needs to be fixed.\n", "created": "2015-04-16 04:25:20"}, {"url": "https://github.com/google/caja/issues/1302", "closed": "2015-04-16 04:25:20", "ttf": 0.0002777777777777778, "title": "Dynamically configurable URI policies", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 1302](https://code.google.com/p/google-caja/issues/detail?id=1302) created by jasvir on 2010-12-01T23:27:06.000Z:\n\nURI policies are defined twice - once in Java by implementing UriPolicy, and again in javascript as an argument to attachDocumentStub.\n1. The args to these two policies should be the same.  Currently the js version takes a mimetype rather than effect, loadertype and hints.\n2. If the function name of the javascript uriPolicy is passed to TemplateCompiler should not render urls in static html.  Instead it should generate a block of javascript which adds these attributes after the static html renderer wrapping each url with a call to the specified js uriPolicy function.\n\nThis makes the url policy configurable in javascript without relying on serverside execution of javascript.\n", "created": "2015-04-16 04:25:16"}, {"url": "https://github.com/google/caja/issues/1301", "closed": "2015-04-16 04:25:16", "ttf": 0.0002777777777777778, "title": "Rename USELESS to UNDEFINED", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1301](https://code.google.com/p/google-caja/issues/detail?id=1301) created by metaweta on 2010-11-22T19:37:04.000Z:\n\nSince the whole point of USELESS is to play the role of undefined as a &quot;this&quot; binding, we should change the name to make it clearer.  Also, it will make the gotcha that\n  (function(){return this}).call(cajaVM.UNDEFINED) === undefined\nless surprising.\n", "created": "2015-04-16 04:25:13"}, {"url": "https://github.com/google/caja/issues/1299", "closed": "2015-04-16 04:25:08", "ttf": 0.0002777777777777778, "title": "\"this\" bound to the function when called by xo4a instead of USELESS or undefined", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1299](https://code.google.com/p/google-caja/issues/detail?id=1299) created by jasvir on 2010-11-19T23:07:27.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  In the playground with ES53\n\n(function() {\n  alert(this);\n})();\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect to see either undefined or USELESS.  Instead I see:\n\nfunction () {\n                      var dis___ = this &amp;&amp; this.**_? void 0: this;\n                      (IMPORTS**_.alert_v___? IMPORTS___.alert:\n                       **_.ri(IMPORTS**_, 'alert')).i___(dis___);\n                    }\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:24:57"}, {"url": "https://github.com/google/caja/issues/1298", "closed": "2015-04-16 04:24:57", "ttf": 0.0002777777777777778, "title": "Building caja fails on windows", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1298](https://code.google.com/p/google-caja/issues/detail?id=1298) created by jasvir on 2010-11-16T22:01:09.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Pristine checkout and ant build on Windows\n2. Note that third_party\\java\\jetty\\lib\\jetty.jar fails to be found and the build fails.\n\nSubversion on Windows does not support symlinks.  Avoid symlinks for unnecessary build dependency on build.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:24:53"}, {"url": "https://github.com/google/caja/issues/1297", "closed": "2015-04-16 04:24:52", "ttf": 0.0002777777777777778, "title": "caja.appspot.com doesn't work in Chrome", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1297](https://code.google.com/p/google-caja/issues/detail?id=1297) created by sirdarckcat on 2010-11-14T00:02:03.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nGoogle Caja. Copyright (C) 2008, Google Inc. Rev 4323M built on 2010-11-03 13:13:03.\n\n<b>What steps will reproduce the problem?</b>\n1. Open Chrome 9.0.576.0 dev\n2. Try some demo (the stack trace is from the flash demo)\n3. Profit\n\n<b>What is the expected output? What do you see instead?</b>\nI expect it to work, it throws an exception of ___ is undefined\n\n<b>Please provide any additional information below.</b>\nXHR finished loading: &quot;https://caja.appspot.com/playground/cajole&quot;.\ntaming.js:58Uncaught ReferenceError: ___ is not defined\nenableCajitataming.js:58\nenabletaming.js:103\ngk2F58757ED7C280014480DB3F13D774A9.cache.html:1790\nCg2F58757ED7C280014480DB3F13D774A9.cache.html:1821\nFg2F58757ED7C280014480DB3F13D774A9.cache.html:785\nwJ2F58757ED7C280014480DB3F13D774A9.cache.html:1855\nKv2F58757ED7C280014480DB3F13D774A9.cache.html:1702\nmw2F58757ED7C280014480DB3F13D774A9.cache.html:1273\n(anonymous function)2F58757ED7C280014480DB3F13D774A9.cache.html:1387\nrn2F58757ED7C280014480DB3F13D774A9.cache.html:1501\n(anonymous function)2F58757ED7C280014480DB3F13D774A9.cache.html:1288\n", "created": "2015-04-16 04:24:44"}, {"url": "https://github.com/google/caja/issues/1295", "closed": "2015-04-16 04:24:32", "ttf": 0.0002777777777777778, "title": "Corkboard fail on Chrome 9, probably due to new Chrome bug", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1295](https://code.google.com/p/google-caja/issues/detail?id=1295) created by erights@google.com on 2010-11-07T19:17:32.000Z:\n\nWhen I try http://caja-corkboard.appspot.com/ on Chrome 9.0.572.0 dev (on Mac OSX 10.5.8), I notice that all the animations don't animate. When reloading with the debug console up, I get a \n\n```\nUncaught SyntaxError: Invalid preparser data for function\n```\n\nreported for caja-iframe.js:276\n\nwhich is the bare &quot;{&quot; line at\n\n---\n\n  try {\n    (function () {}).apply({}, { 'length': 0 });\n  } catch (ex) {\n    ex instanceof TypeError &amp;&amp; (Function.prototype.apply___ =\n      Function.prototype.apply, Function.prototype.apply = function\n      applyGuard(self, args) {\n        return args &amp;&amp; args.CLASS___ === 'Arguments' &amp;&amp; (args =\n          Array.slice(args, 0)), this.apply___(self, args);\n      });\n  }\n  Array.slice === void 0 &amp;&amp; (Array.slice = function (self, opt_start, opt_end)\n    {\n      return self &amp;&amp; typeof self === 'object'? (opt_end === void 0 &amp;&amp; (opt_end\n          = self.length), Array.prototype.slice.call(self, opt_start, opt_end))\n##         : [ ];\n\nThe above code is a somewhat minimizing transform of concatenated sources, where the corresponding problematic source line is at http://code.google.com/p/google-caja/source/browse/trunk/src/com/google/caja/cajita.js#&nbsp;132\n\nSearching on the mysterious error message, I found\nhttp://code.google.com/p/chromium/issues/detail?id=62123\nwhich indicates the problem is caused by a function declaration within an overly long catch block. Curiously, the line number reported for the error by Chrome occurs shortly after a long catch block that contains a named function expression. So either the line number reported for the error is off or the original diagnosis is way off.\n\nBtw, I also found http://groups.google.com/group/protovis/browse_thread/thread/38b83de9695abdf3 which may be relevant.\n", "created": "2015-04-16 04:24:26"}, {"url": "https://github.com/google/caja/issues/1293", "closed": "2015-04-16 04:24:19", "ttf": 0.0002777777777777778, "title": "ES53 ___.markFunc lies about error condition", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1293](https://code.google.com/p/google-caja/issues/detail?id=1293) created by ihab.awad on 2010-10-28T18:12:18.000Z:\n\nIf you call __.markFunc with a function defined in another frame, the error it report is &quot;already tamed&quot; when it should be saying something like, &quot;not one of my own functions!&quot;.\n", "created": "2015-04-16 04:24:16"}, {"url": "https://github.com/google/caja/issues/1292", "closed": "2015-04-16 04:24:16", "ttf": 0.0002777777777777778, "title": "NullPointerException provoked by ArrayIndexOptimization", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Maintainability", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1292](https://code.google.com/p/google-caja/issues/detail?id=1292) created by erights@google.com on 2010-10-28T01:09:25.000Z:\n\nIn a pristine checkout of r4316 do &quot;ant clean &amp;&amp; ant runserver&quot;. It fails with\n  [java] Invalid maximum heap size: -Xmx4096m\nedit build.xml to change this to 1096 and try again. The server starts. Visit http://localhost:8080/ , load Applications &gt;&gt; Game of Life, select ES5, and Cajole. The portion of stack trace that shows up on the &quot;ant runserver&quot; console that seems most relevant is:\n\n```\n [java] Caused by: java.lang.NullPointerException\n [java]     at com.google.caja.parser.quasiliteral.opt.ScopeTree$1.read(ScopeTree.java:90)\n [java]     at com.google.caja.parser.quasiliteral.opt.ScopeTree$1.read(ScopeTree.java:115)\n [java]     at com.google.caja.parser.js.scope.ScopeAnalyzer.handleUse(ScopeAnalyzer.java:191)\n [java]     at com.google.caja.parser.js.scope.ScopeAnalyzer.publishEvents(ScopeAnalyzer.java:178)\n [java]     at com.google.caja.parser.js.scope.ScopeAnalyzer.publishEvents(ScopeAnalyzer.java:177)\n [java]     at com.google.caja.parser.js.scope.ScopeAnalyzer.apply(ScopeAnalyzer.java:107)\n [java]     at com.google.caja.parser.quasiliteral.opt.ScopeTree.create(ScopeTree.java:119)\n [java]     at com.google.caja.parser.quasiliteral.opt.ArrayIndexOptimization.optimize(ArrayIndexOptimization.java:91)\n [java]     at com.google.caja.plugin.stages.OptimizeJavascriptStage.apply(OptimizeJavascriptStage.java:27)\n [java]     at com.google.caja.plugin.stages.OptimizeJavascriptStage.apply(OptimizeJavascriptStage.java:23)\n [java]     at com.google.caja.util.Pipeline.applyStage(Pipeline.java:41)\n```\n", "created": "2015-04-16 04:24:03"}, {"url": "https://github.com/google/caja/issues/1291", "closed": "2015-04-16 04:24:03", "ttf": 0.0002777777777777778, "title": "Need TameOpaqueElements", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1291](https://code.google.com/p/google-caja/issues/detail?id=1291) created by metaweta on 2010-10-22T19:20:37.000Z:\n\n<b>What steps will reproduce the problem?</b>\n&lt;style&gt;p { font-family:&quot;Times New Roman&quot;; font-size:20px; }&lt;/style&gt;\n&lt;script&gt;\n  var a = document.getElementsByTagName('style')[0];\n  cajaVM.log(a.getAttribute);\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nExpected: a function\nSaw: undefined\n\n<b>Please use labels and text to provide additional information.</b>\nWe need TameOpaqueElements that have the standard Element API.\n", "created": "2015-04-16 04:23:43"}, {"url": "https://github.com/google/caja/issues/1290", "closed": "2015-04-16 04:23:43", "ttf": 0.0002777777777777778, "title": "toString on various DOM objects not whitelisted properly in Cajita/Valija", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1290](https://code.google.com/p/google-caja/issues/detail?id=1290) created by metaweta on 2010-10-19T20:22:59.000Z:\n\n<b>What steps will reproduce the problem?</b>\ncajita.log(document.body + ', ' + document.body.toString());\n\n<b>What is the expected output? What do you see instead?</b>\nExpect &lt;BODY&gt;, &lt;BODY&gt; but see &lt;BODY&gt;, [object Object].\n", "created": "2015-04-16 04:23:38"}, {"url": "https://github.com/google/caja/issues/1289", "closed": "2015-04-16 04:23:38", "ttf": 0.0002777777777777778, "title": "Parent-most DOM object should have getElementById", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1289](https://code.google.com/p/google-caja/issues/detail?id=1289) created by metaweta on 2010-10-13T21:13:57.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nfor (d=document.body; d.parentNode; d=d.parentNode){}\nd.getElementById;\n\n<b>What is the expected output? What do you see instead?</b>\ndocument.body has no parent and has no getElementById.\n", "created": "2015-04-16 04:23:34"}, {"url": "https://github.com/google/caja/issues/1288", "closed": "2015-04-16 04:23:33", "ttf": 0.0002777777777777778, "title": "Non-obvious error on missing required \"action\" attribute on forms", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 1288](https://code.google.com/p/google-caja/issues/detail?id=1288) created by jasvir on 2010-10-12T04:07:52.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  Cajole the following:\n&lt;form id = &quot;myform&quot;&gt;\n        &lt;input id=&quot;query&quot; type=&quot;text&quot; name=&quot;query&quot; value=&quot;Hello World&quot; /&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;Search&quot; /&gt;\n&lt;/form&gt;\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected either understandable error message or a valid usable form.  Instead got the error: URI unknown:///unknown is malformed:unknown:1: &lt;form id = &quot;myform&quot;&gt;\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:23:27"}, {"url": "https://github.com/google/caja/issues/1287", "closed": "2015-04-16 04:23:27", "ttf": 0.0002777777777777778, "title": "Non-obvious error on missing required \"action\" attribute on forms", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 1287](https://code.google.com/p/google-caja/issues/detail?id=1287) created by jasvir on 2010-10-12T04:07:34.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  Cajole the following:\n&lt;form id = &quot;myform&quot;&gt;\n        &lt;input id=&quot;query&quot; type=&quot;text&quot; name=&quot;query&quot; value=&quot;Hello World&quot; /&gt;\n        &lt;input type=&quot;submit&quot; value=&quot;Search&quot; /&gt;\n&lt;/form&gt;\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected either understandable error message or a valid usable form.  Instead got the error: URI unknown:///unknown is malformed:unknown:1: &lt;form id = &quot;myform&quot;&gt;\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:23:24"}, {"url": "https://github.com/google/caja/issues/1286", "closed": "2015-04-16 04:23:24", "ttf": 0.0002777777777777778, "title": "TameElement.prototype.toString isn't whitelisted in es53", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1286](https://code.google.com/p/google-caja/issues/detail?id=1286) created by metaweta on 2010-10-08T23:29:59.000Z:\n\n<b>What steps will reproduce the problem?</b>\n&lt;input name='name' id='name'&gt;\n&lt;script&gt;\n  try {\n    cajaVM.log(document.getElementById('name').toString());\n  } catch (e) { cajaVM.log(e); }\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nExpect &lt;INPUT&gt;\nActual: toxic function error\n", "created": "2015-04-16 04:23:20"}, {"url": "https://github.com/google/caja/issues/1285", "closed": "2015-04-16 04:23:19", "ttf": 0.0002777777777777778, "title": "JSON does not work under ES53 and has no tests", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1285](https://code.google.com/p/google-caja/issues/detail?id=1285) created by metaweta on 2010-10-08T20:52:05.000Z:\n\n<b>What steps will reproduce the problem?</b>\n  cajaVM.log(JSON.parse('{&quot;test&quot;:1}').test);\n  cajaVM.log(JSON.stringify([33]));\n\n<b>What is the expected output? What do you see instead?</b>\nExpected\n1\n33\n\nActual\nundefined\nundefined\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:23:08"}, {"url": "https://github.com/google/caja/issues/1284", "closed": "2015-04-16 04:23:08", "ttf": 0.0002777777777777778, "title": "getElementsByTagName(\"*\") does not return html, head, title, body pseudoelements", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1284](https://code.google.com/p/google-caja/issues/detail?id=1284) created by metaweta on 2010-10-08T18:19:33.000Z:\n\n<b>What steps will reproduce the problem?</b>\ngetElementsByTagName(&quot;*&quot;)[0]\n\n<b>What is the expected output? What do you see instead?</b>\nShould see &lt;HTML&gt;; instead I see whatever tags are contained in the div where it renders its content.\n", "created": "2015-04-16 04:23:06"}, {"url": "https://github.com/google/caja/issues/1283", "closed": "2015-04-16 04:23:06", "ttf": 0.0002777777777777778, "title": "Constructed objects don't get their constructor property whitelisted.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1283](https://code.google.com/p/google-caja/issues/detail?id=1283) created by metaweta on 2010-10-07T22:03:00.000Z:\n\n<b>What steps will reproduce the problem?</b>\nfunction f(){}\nvar o = new f();\no.constructor;\n\n<b>What is the expected output? What do you see instead?</b>\nExpected to see f, saw undefined.\n", "created": "2015-04-16 04:22:48"}, {"url": "https://github.com/google/caja/issues/1282", "closed": "2015-04-16 04:22:48", "ttf": 0.0002777777777777778, "title": "HTML5 forward compatibility on IE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1282](https://code.google.com/p/google-caja/issues/detail?id=1282) created by mikesamuel on 2010-10-07T04:55:25.000Z:\n\nIf we want standard but non HTML4 tags like canvas to work on IE, we might need to use the html5 shiv that Chad Killingsworth's pointed out : http://remysharp.com/html5-enabling-script\n\nIn Internet Explorer 8 and lower, simply issuing document.createElement(&quot;unknowntag&quot;) helps the browser to correctly recognize unknown tags and allows the developer to style\nthem through css. Without it IE chokes on unknown tags.\n\nIt has to be done once per unknown tag type :\n\nvar html5_elements =[&quot;abbr&quot;,&quot;article&quot;,&quot;aside&quot;,&quot;audio&quot;,&quot;canvas&quot;];\nvar documentFragment = document.createDocumentFragment();\nfor (var i = 0; i &lt; html5_elements_array.length; i++) {\n document.createElement(html5_elements_array[i]);\n documentFragment.createElement(html5_elements_array[i]);\n}\n", "created": "2015-04-16 04:22:46"}, {"url": "https://github.com/google/caja/issues/1281", "closed": "2015-04-16 04:22:46", "ttf": 0.0002777777777777778, "title": "Modifying default DOM whitelists is difficult for containers", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 1281](https://code.google.com/p/google-caja/issues/detail?id=1281) created by jasvir on 2010-10-06T07:23:21.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Container wants to whitelist a particular html attribute that is different from the caja default\n\nEg. Container wishes to whitelist the target attribute of anchor tags for names other than &quot;_blank&quot; or &quot;_self&quot;.\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect: Configure the whitelist by modifying or extending a whitelist.\nInstead: Requires modifying both html-attributes.json (for static attributes) and modifying attachDocumentStub in domita.js.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:22:43"}, {"url": "https://github.com/google/caja/issues/1280", "closed": "2015-04-16 04:22:43", "ttf": 0.0002777777777777778, "title": "Style nodes don't have a getAttribute function", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1280](https://code.google.com/p/google-caja/issues/detail?id=1280) created by metaweta on 2010-10-04T22:15:00.000Z:\n\n<b>What steps will reproduce the problem?</b>\n&lt;div id=&quot;hi&quot;&gt;&lt;/div&gt;\n&lt;script&gt;cajaVM.log(document.getElementById('hi').style.getAttribute);&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nExpected:\nfunction getAttribute() {\n  [native code]\n}\nActual:\nundefined\n", "created": "2015-04-16 04:22:41"}, {"url": "https://github.com/google/caja/issues/1279", "closed": "2015-04-16 04:22:41", "ttf": 0.0002777777777777778, "title": "Can't get style nodes by id", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1279](https://code.google.com/p/google-caja/issues/detail?id=1279) created by metaweta on 2010-10-04T21:44:47.000Z:\n\n<b>What steps will reproduce the problem?</b>\n&lt;style id=&quot;hi&quot;&gt;&lt;/style&gt;\n&lt;script&gt;\nalert(document.getElementById(&quot;hi&quot;));\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nExpected: [object HTMLStyleElement]\nActual: null\n", "created": "2015-04-16 04:22:27"}, {"url": "https://github.com/google/caja/issues/1278", "closed": "2015-04-16 04:22:27", "ttf": 0.0002777777777777778, "title": "window.onload handler never gets called", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1278](https://code.google.com/p/google-caja/issues/detail?id=1278) created by tobie.langel on 2010-10-02T18:37:54.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nSVN revision 4293 with patch http://codereview.appspot.com/2206045/ applied.\n\nFirefox 3.5.13 on Mac OS 10.5.8\n\n<b>What steps will reproduce the problem?</b>\n\nset:\n\n```\nwindow.onload = function() { /* dostuff*/ };\n```\n\nhandler never gets called.\n\nLooks like the testing going on in domita.js around line 3348 isn't behaving as expected:\n\n  var onload = ((___.canRead(imports, '$v')\n                     &amp;&amp; ___.canCallPub(imports.$v, 'ros')\n                     &amp;&amp; imports.$v.ros('onload'))\n                    || (imports.window &amp;&amp;\n                        ___.readPub(imports.window, 'onload')));\n\nEspecially, ___.canRead(imports, '$v') returns false.\n", "created": "2015-04-16 04:22:23"}, {"url": "https://github.com/google/caja/issues/1277", "closed": "2015-04-16 04:22:22", "ttf": 0.0002777777777777778, "title": "console.log doesn't log", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1277](https://code.google.com/p/google-caja/issues/detail?id=1277) created by tobie.langel on 2010-10-02T17:05:37.000Z:\n\nWhat revision of the cajoler exhibits the problem?\n\n&gt;&gt;&gt; SVN revision 4293 with patch http://codereview.appspot.com/2206045/ applied.\n\nOn what browser and OS?\n\n&gt;&gt;&gt; Safari 5.0.1, Mac OS 10.5.8, but probably a general WebKit problem.\n\n<b>What steps will reproduce the problem?</b>\n\n&gt;&gt;&gt;Load a cajoled module. Try to use the console from regular JS code on the same page. Nothing is logged.\n\n<b>Please provide any additional information below.</b>\n&gt;&gt;&gt; It might have to do with how you're redefining the console when it's missing. There's always a bunch of problems with that, you might want to look into abstracting the console internally rather than trying to overwrite it if that's what you are doing.\n", "created": "2015-04-16 04:22:20"}, {"url": "https://github.com/google/caja/issues/1276", "closed": "2015-04-16 04:22:20", "ttf": 0.0002777777777777778, "title": "Top level \"arguments\" broken", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1276](https://code.google.com/p/google-caja/issues/detail?id=1276) created by erights on 2010-10-02T04:11:28.000Z:\n\n&lt;script&gt;arguments&lt;/script&gt;\n\nIn ES5/3: &quot;a___ is not defined&quot;\n\nIn Valija: &quot;Linkage warning: $caja$args not importable&quot;\n\nIn Cajita: &quot;a___ is not defined&quot;\n\nIn all cases, the problem is that the rewrite assumes without checking that the &quot;arguments&quot; occurrence appears within a function rather than at top level.\n\nDiscovered by Doug Crockford\n", "created": "2015-04-16 04:22:15"}, {"url": "https://github.com/google/caja/issues/1275", "closed": "2015-04-16 04:22:15", "ttf": 0.0002777777777777778, "title": "Javascript parser throws NumberFormatExceptions on large number literals", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1275](https://code.google.com/p/google-caja/issues/detail?id=1275) created by jasvir on 2010-09-29T22:26:02.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. var x= 99999999999999999999999;\n\n<b>What is the expected output? What do you see instead?</b>\n\nCaused by: java.lang.NumberFormatException: For input string: &quot;99999999999999999999999&quot;\n    at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n    at java.lang.Long.parseLong(Long.java:441)\n    at java.lang.Long.valueOf(Long.java:508)\n    at java.lang.Long.decode(Long.java:653)\n    at com.google.caja.parser.js.Parser.toIntegerLiteral(Parser.java:996)\n    at com.google.caja.parser.js.Parser.parseExpressionAtom(Parser.java:1026)\n    at com.google.caja.parser.js.Parser.parseOp(Parser.java:792)\n    at com.google.caja.parser.js.Parser.parseOp(Parser.java:858)\n    at com.google.caja.parser.js.Parser.parseExpressionInt(Parser.java:727)\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:22:11"}, {"url": "https://github.com/google/caja/issues/1274", "closed": "2015-04-16 04:22:11", "ttf": 0.0002777777777777778, "title": "Current \"virtualize\" strategy isn't safe", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1274](https://code.google.com/p/google-caja/issues/detail?id=1274) created by erights@google.com on 2010-09-26T21:02:14.000Z:\n\nThe current &quot;virtualize&quot; strategy generally leaves the original primordial method in place, and only virtually overrides it, from the perspective of guest code, by installing a visible accessor equivalent. We assumed that uncajoled host code could then continue to innocently access the original value of these properties at their original name, since the installed accessors are non-configurable and properly intercept [[Put]]s (assignments) to properties of the same name on derived objects.\n\nHowever, the accessors do not and should not intercept Object.defineProperty defining an overriding data property of the same on a derived object. Thus, we cannot protect such innocent usage by uncajoled code. Instead, the tamer must ensure that no innocent code that relies on such assumptions can encounter an object that might violate those assumptions.\n\nFor most currently &quot;virtualize&quot;d primordial methods, we should do objective replacement instead.\n", "created": "2015-04-16 04:21:42"}, {"url": "https://github.com/google/caja/issues/1273", "closed": "2015-04-16 04:21:42", "ttf": 0.0002777777777777778, "title": "createOrWrap wasn't marking installed functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1273](https://code.google.com/p/google-caja/issues/detail?id=1273) created by erights@google.com on 2010-09-26T17:38:46.000Z:\n\n&lt;script&gt;\n  [3,4,5].forEach(function(n){cajaVM.log(n);});\n&lt;/script&gt;\u200b\n\nprovokes\nUncaught Error: Internal: toxic function encountered!\n\nThe problem is that createOrWrap first calls virtualize, which does the marking, and then installs a (created or wrapped) replacement which it does not mark.\n\nFixed and pending in http://codereview.appspot.com/2225043/\n", "created": "2015-04-16 04:21:40"}, {"url": "https://github.com/google/caja/issues/1272", "closed": "2015-04-16 04:21:39", "ttf": 0.0002777777777777778, "title": "Node names seem to be converted to lower case", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1272](https://code.google.com/p/google-caja/issues/detail?id=1272) created by chiragshah1 on 2010-09-22T18:29:44.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\ncaja.htmlparser: r4209\ncaja.caja: r4251\n\n<b>What steps will reproduce the problem?</b>\nExample test case:\nInputSource is =  InputSource.UNKNOWN;\nHtmlLexer lexer = new HtmlLexer(CharProducer.Factory.fromString(&quot;&lt;OSData&gt;hi&lt;/OSData&gt;&quot;, is));\nMessageQueue mq = new SimpleMessageQueue();  \nTokenQueue&lt;HtmlTokenType&gt; tokenQueue = new TokenQueue&lt;HtmlTokenType&gt;(lexer, is);\nDomParser parser = new DomParser(tokenQueue, /*\\* xml */ false, mq);\nparser.setDomImpl(DOMImplementationRegistry.newInstance().getDOMImplementation(&quot;XML 1.0 Traversal 2.0&quot;));\nElement el = parser.parseDocument();\n\nSystem.out.println(&quot;As XML? &quot; + parser.asXml());\nSystem.out.println(&quot;Tag Name OSData: &quot; + el.getElementsByTagName(&quot;OSData&quot;).getLength()); // Prints 0\nSystem.out.println(&quot;Tag Name osdata: &quot; + el.getElementsByTagName(&quot;osdata&quot;).getLength()); // Prints 1\n\nThis impacts shindig because org.apache.shindig.gadgets.parse.SocialDataTags#getTags() calls getElementsByTagName(&quot;OSData&quot;)\n\n<b>What is the expected output? What do you see instead?</b>\nExpected el.getElementsByTagName(&quot;OSData&quot;).getLength() to print 1 instead of 0.\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:21:35"}, {"url": "https://github.com/google/caja/issues/1271", "closed": "2015-04-16 04:21:35", "ttf": 0.0002777777777777778, "title": "Not green: \"ant runtests\" failure in a pristine checkout", "commits": {}, "user": "kpreid", "labels": ["NotGreen", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1271](https://code.google.com/p/google-caja/issues/detail?id=1271) created by erights@google.com on 2010-09-16T16:01:07.000Z:\n\ntestCssParser   Failure Expected &lt;content (&quot;foo\\d \\a bar&quot;)&gt; (String) but was &lt;content (foo\\ bar)&gt; (String)\n\njunit.framework.AssertionFailedError: Expected &lt;content\n(&quot;foo\\d \\a bar&quot;)&gt; (String) but was &lt;content\n(foo\\\nbar)&gt; (String)\n    at com.google.caja.util.RhinoTestBed$JunitSandBoxSafe.fail(RhinoTestBed.java:289)\n    at org.mozilla.javascript.MemberBox.invoke(MemberBox.java:160)\n    at org.mozilla.javascript.NativeJavaMethod.call(NativeJavaMethod.java:243)\n    at org.mozilla.javascript.Interpreter.interpretLoop(Interpreter.java:3335)\n    at org.mozilla.javascript.Interpreter.interpret(Interpreter.java:2484)\n    at org.mozilla.javascript.InterpretedFunction.call(InterpretedFunction.java:162)\n    at org.mozilla.javascript.ContextFactory.doTopCall(ContextFactory.java:401)\n    at org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:3003)\n    at org.mozilla.javascript.InterpretedFunction.exec(InterpretedFunction.java:173)\n    at org.mozilla.javascript.Context.evaluateReader(Context.java:1119)\n    at com.google.caja.util.RhinoExecutor.runInContext(RhinoExecutor.java:235)\n    at com.google.caja.util.RhinoExecutor.run(RhinoExecutor.java:210)\n    at com.google.caja.util.RhinoTestBed.runJs(RhinoTestBed.java:83)\n    at com.google.caja.util.RhinoTestBed.runJsUnittestFromHtml(RhinoTestBed.java:203)\n    at com.google.caja.plugin.CssParserTest.testCssParser(CssParserTest.java:25)\n    at com.google.caja.util.CajaTestCase.runTest(CajaTestCase.java:475)\n", "created": "2015-04-16 04:21:30"}, {"url": "https://github.com/google/caja/issues/1270", "closed": "2015-04-16 04:21:30", "ttf": 0.0002777777777777778, "title": "Keyword list is stale. Includes non-ES5 keywords", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1270](https://code.google.com/p/google-caja/issues/detail?id=1270) created by erights on 2010-09-11T01:56:11.000Z:\n\nKeyword.java includes many identifiers based on lists from ES3 or ES4.\n", "created": "2015-04-16 04:21:28"}, {"url": "https://github.com/google/caja/issues/1269", "closed": "2015-04-16 04:21:28", "ttf": 0.0002777777777777778, "title": "Can't get the computed style of PseudoElements", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1269](https://code.google.com/p/google-caja/issues/detail?id=1269) created by metaweta on 2010-08-18T15:12:46.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  window.getComputedStyle(document.body, null);\n\n<b>What is the expected output? What do you see instead?</b>\nExpected: [object ComputedCSSStyleDeclaration]\nActual: element is undefined\n", "created": "2015-04-16 04:21:21"}, {"url": "https://github.com/google/caja/issues/1268", "closed": "2015-04-16 04:21:21", "ttf": 0.0002777777777777778, "title": "JSON syntax error in src/com/google/caja/lang/html/html4-attributes-extensions-defs.json", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1268](https://code.google.com/p/google-caja/issues/detail?id=1268) created by supersat@google.com on 2010-08-17T18:27:32.000Z:\n\nThere is an extra comma on line 26 of trunk/src/com/google/caja/lang/html/html4-attributes-extensions-defs.json that prevents it from being parsed by strict JSON loaders. This might not necessarily break Caja, but it can break things that reuse the Caja whitelists. I've attached a simple patch that removes it.\n", "created": "2015-04-16 04:21:16"}, {"url": "https://github.com/google/caja/issues/1267", "closed": "2015-04-16 04:21:16", "ttf": 0.0002777777777777778, "title": "DOMContentLoaded event", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1267](https://code.google.com/p/google-caja/issues/detail?id=1267) created by metaweta on 2010-08-14T17:40:02.000Z:\n\nThe standard jQuery idiom for invoking the function fn as soon as the document's done loading is\n   $(document).ready(fn)\nThe ready() method assumes that if addEventListener is available then it can listen for the DOMContentLoaded event to begin processing the page.\n", "created": "2015-04-16 04:21:07"}, {"url": "https://github.com/google/caja/issues/1266", "closed": "2015-04-16 04:21:07", "ttf": 0.0002777777777777778, "title": "runtime error: \"cssparser is undefined\" when setting style attribute of html element", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1266](https://code.google.com/p/google-caja/issues/detail?id=1266) created by michaeljohnthethird on 2010-08-14T04:37:36.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\n\u200b&lt;script type=&quot;text/javascript&quot;&gt;\n  var div = document.createElement('div');\n  div.style = 'font-size:12px;line-height:23px;'\n  alert(div.style.lineHeight);\n  alert(div.style.fontSize);\n&lt;/script&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expected 2 alerts containing '23px' and '12px', but received a runtime error instead. This is reproducible in the playground, which is currently at r4242, and on the latest revision, r4245.\n", "created": "2015-04-16 04:21:00"}, {"url": "https://github.com/google/caja/issues/1262", "closed": "2015-04-16 04:20:29", "ttf": 0.0002777777777777778, "title": "What does :minified\" mean?", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1262](https://code.google.com/p/google-caja/issues/detail?id=1262) created by lazerka@google.com on 2010-08-09T14:20:30.000Z:\n\nHi, wiki for JsHtmlSanitizer tells to use com/google/caja/plugin/html-sanitizer-minified.js\n\nI'm just curious, what does &quot;minified&quot; mean, if it actually bigger than regular com/google/caja/plugin/html-sanitizer.js ?\n", "created": "2015-04-16 04:20:25"}, {"url": "https://github.com/google/caja/issues/1261", "closed": "2015-04-16 04:20:24", "ttf": 0.0002777777777777778, "title": "rev broken?", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1261](https://code.google.com/p/google-caja/issues/detail?id=1261) created by lazerka@google.com on 2010-08-09T14:04:29.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n4232\n\n<b>What steps will reproduce the problem?</b>\n1. Checkout\n2. ant\n<b>3.</b>\n\nWhat is the expected output? \nbuilt cajoler\n\nWhat do you see instead?\nBuildfile: build.xml\n\ndirs:\n    [mkdir] Created dir: /home/lazerka/google-caja/ant-reports\n    [mkdir] Created dir: /home/lazerka/google-caja/ant-docs\n    [mkdir] Created dir: /home/lazerka/google-caja/ant-instr\n    [mkdir] Created dir: /home/lazerka/google-caja/ant-jars\n    [mkdir] Created dir: /home/lazerka/google-caja/ant-lib\n    [mkdir] Created dir: /home/lazerka/google-caja/ant-www\n    [mkdir] Created dir: /home/lazerka/google-caja/ant-war\n    [mkdir] Created dir: /home/lazerka/google-caja/ant-maven\n    [mkdir] Created dir: /home/lazerka/google-caja/third_party/java/htmlparser/lib\n\nPrimitives:\n    [javac] Compiling 37 source files to /home/lazerka/google-caja/ant-lib\n    [javac] /home/lazerka/google-caja/src/com/google/caja/util/RhinoExecutor.java:190: cannot find symbol\n    [javac] symbol  : variable FEATURE_ENHANCED_JAVA_ACCESS\n    [javac] location: class org.mozilla.javascript.Context\n    [javac]         case Context.FEATURE_ENHANCED_JAVA_ACCESS: return false;\n    [javac]                     ^\n    [javac] /home/lazerka/google-caja/src/com/google/caja/util/RhinoExecutor.java:205: cannot find symbol\n    [javac] symbol  : method enterContext()\n    [javac] location: class org.mozilla.javascript.ContextFactory\n    [javac]     Context context = SANDBOXINGFACTORY.enterContext();\n    [javac]                                        ^\n    [javac] 2 errors\n\nBUILD FAILED\n/home/lazerka/google-caja/build.xml:1141: Compile failed; see the compiler error output for details.\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:20:18"}, {"url": "https://github.com/google/caja/issues/1260", "closed": "2015-04-16 04:20:17", "ttf": 0.0002777777777777778, "title": "Firefox 4.0b2 beta seems to break Selenium's ability to runtests", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1260](https://code.google.com/p/google-caja/issues/detail?id=1260) created by erights on 2010-08-06T03:18:12.000Z:\n\nRecently I installed the Firefox 4.0b2 beta as my &quot;Firefox.app&quot;. This seems to break Selenium's ability to run tests using my Firefox installation.\n\n---\n\norg.openqa.selenium.WebDriverException: Failed to connect to binary FirefoxBinary(/Applications/Firefox.app/Contents/MacOS/firefox-bin) on port 7055; process output follows: \ufffd System info: os.name: 'Mac OS X', os.arch: 'i386', os.version: '10.5.8', java.version: '1.5.0_24' Driver info: driver.version: firefox System info: os.name: 'Mac OS X', os.arch: 'i386', os.version: '10.5.8', java.version: '1.5.0_24' Driver info: driver.version: firefox\n\norg.openqa.selenium.WebDriverException: org.openqa.selenium.WebDriverException: Failed to connect to binary FirefoxBinary(/Applications/Firefox.app/Contents/MacOS/firefox-bin) on port 7055; process output follows: \n\ufffd\nSystem info: os.name: 'Mac OS X', os.arch: 'i386', os.version: '10.5.8', java.version: '1.5.0_24'\nDriver info: driver.version: firefox\nSystem info: os.name: 'Mac OS X', os.arch: 'i386', os.version: '10.5.8', java.version: '1.5.0_24'\nDriver info: driver.version: firefox\n    at org.openqa.selenium.firefox.internal.ExtensionConnectionFactory.connectTo(ExtensionConnectionFactory.java:46)\n    at org.openqa.selenium.firefox.FirefoxDriver.connectTo(FirefoxDriver.java:137)\n    at org.openqa.selenium.firefox.FirefoxDriver.&lt;init&gt;(FirefoxDriver.java:127)\n    at org.openqa.selenium.firefox.FirefoxDriver.&lt;init&gt;(FirefoxDriver.java:89)\n    at com.google.caja.plugin.BrowserTestCase.runBrowserTest(BrowserTestCase.java:115)\n    at com.google.caja.plugin.HostToolsTest.testHostTools(HostToolsTest.java:33)\n    at com.google.caja.util.CajaTestCase.runTest(CajaTestCase.java:475)\nCaused by: org.openqa.selenium.WebDriverException: Failed to connect to binary FirefoxBinary(/Applications/Firefox.app/Contents/MacOS/firefox-bin) on port 7055; process output follows: \n\ufffd\nSystem info: os.name: 'Mac OS X', os.arch: 'i386', os.version: '10.5.8', java.version: '1.5.0_24'\nDriver info: driver.version: firefox\n    at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.connectToBrowser(NewProfileExtensionConnection.java:60)\n    at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.&lt;init&gt;(NewProfileExtensionConnection.java:49)\n    at org.openqa.selenium.firefox.internal.ExtensionConnectionFactory.connectTo(ExtensionConnectionFactory.java:44)\nCaused by: org.openqa.selenium.firefox.NotConnectedException: Failed to start up socket within 45000\n    at org.openqa.selenium.firefox.internal.AbstractExtensionConnection.connectToBrowser(AbstractExtensionConnection.java:143)\n    at org.openqa.selenium.firefox.internal.NewProfileExtensionConnection.connectToBrowser(NewProfileExtensionConnection.java:58)\n", "created": "2015-04-16 04:20:06"}, {"url": "https://github.com/google/caja/issues/1259", "closed": "2015-04-16 04:20:06", "ttf": 0.0002777777777777778, "title": "XMLHttpRequest instance properties should be writable", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1259](https://code.google.com/p/google-caja/issues/detail?id=1259) created by michaeljohnthethird on 2010-08-02T18:43:44.000Z:\n\nXMLHttpRequest instance methods (and possibly other, non-function properties), such as abort, should be writable. This does not mean that XMLHttpRequest.prototype properties should be writable, but properties of objects that are instances of XMLHttpRequest should be writable. A (not necessarily complete) list of these methods: abort, open, setRequestHeader, send, getResponseHeader, and getAllResponseHeaders.\n\n// A clear example\nvar xhr = new XMLHttpRequest;\nxhr.abort = function(){};\n", "created": "2015-04-16 04:20:00"}, {"url": "https://github.com/google/caja/issues/1258", "closed": "2015-04-16 04:19:59", "ttf": 0.0002777777777777778, "title": "ie8 JSON is buggy", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1258](https://code.google.com/p/google-caja/issues/detail?id=1258) created by felix8a on 2010-07-31T06:15:09.000Z:\n\nie8 has several bugs in its JSON implementation that are fixed in an update\nhttp://support.microsoft.com/kb/976662\n\nthe caja environment regularly triggers one of the bugs in JSON.stringify.  the symptom is, JSON.stringify will throw an exception &quot;String expected&quot;.\n\nI'm not sure how to replicate the bug outside the caja environment; most of my stripped-down examples work correctly.  the bug doesn't seem to be exactly like any of the bugs described near the bottom of this page:\nhttp://msdn.microsoft.com/library/cc836459%28VS.85%29.aspx\n\nin any case, cajita should check if JSON.stringify is buggy, and fall back to json-sans-eval when necessary.\n\nI have a patch, will submit a codereview.\n", "created": "2015-04-16 04:19:57"}, {"url": "https://github.com/google/caja/issues/1257", "closed": "2015-04-16 04:19:57", "ttf": 0.0002777777777777778, "title": "Runtime CSS font property pattern requires an optional component", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1257](https://code.google.com/p/google-caja/issues/detail?id=1257) created by kpreid.switchb.org on 2010-07-29T18:11:55.000Z:\n\nThe pattern for the font property (css-defs.js css.properties.font) has the  [ &lt;'font-style'&gt; || &lt;'font-variant'&gt; || &lt;'font-weight'&gt; ]? portion translated as non-optional. For example, this snippet given to the playground shows 50px instead of 500px text, unless you add &quot;italic&quot; (or some other style, variant, or weight term) to the property set from JS:\n\n&lt;div id=x style=&quot;font: 50px fantasy;&quot;&gt;foo&lt;/div&gt;\n&lt;script&gt;\ndocument.getElementById('x').style.font = &quot;500px monospace&quot;;\n&lt;/script&gt;\n\nThe cajoler does not have the same problem, only the JS runtime, so the problem is presumably in com.google.caja.lang.css.CssPropertyPatterns's algorithm.\n", "created": "2015-04-16 04:19:52"}, {"url": "https://github.com/google/caja/issues/1256", "closed": "2015-04-16 04:19:52", "ttf": 0.0002777777777777778, "title": "Allow data- attributes in the html sanitizer", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1256](https://code.google.com/p/google-caja/issues/detail?id=1256) created by vueringschristian on 2010-07-27T12:05:54.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.Create a div with a data property e.g. &lt;div data-path=&quot;testpath&quot;&gt;test&lt;/div&gt;\n2.Run the html sanitizer method on it ( html.makeHtmlSanitizer )\n\n<b>What is the expected output? What do you see instead?</b>\nThe expected output would be &lt;div data-path=&quot;testpath&quot;&gt;test&lt;/div&gt;, instead the data-path is being removed:\n&lt;div&gt;test&lt;/div&gt;\n", "created": "2015-04-16 04:19:46"}, {"url": "https://github.com/google/caja/issues/1248", "closed": "2015-04-16 04:19:08", "ttf": 0.0002777777777777778, "title": "Cajoler service returns no JSON in JSON mode if the input is empty", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 1248](https://code.google.com/p/google-caja/issues/detail?id=1248) created by kpreid.switchb.org on 2010-07-15T17:51:33.000Z:\n\nCajole the empty string as HTML via the POST input to the cajoling service:\ncurl -i -H'Content-Type:text/html' --data-binary '' 'http://localhost:8080/cajole?input-mime-type=text/html&amp;output-mime-type=application/json'\n\nThe result is a 200 OK with no content which claims to be JSON. Treating this case regularly (returning {&quot;html&quot;:&quot;&quot;, &quot;js&quot;:&quot;{___.loadModule...}&quot;} would be more convenient to clients, and more correct (the empty string is not a JSON document).\n\n(If shortcutting is desired, perhaps return a hardcoded trivial module whose text is constant?)\n\nCompare to the result of a POST including some HTML content:\ncurl -i -H'Content-Type:text/html' --data-binary '1' 'http://localhost:8080/cajole?input-mime-type=text/html&amp;output-mime-type=application/json'\n", "created": "2015-04-16 04:19:04"}, {"url": "https://github.com/google/caja/issues/1247", "closed": "2015-04-16 04:19:04", "ttf": 0.0002777777777777778, "title": "TransformAntTask depends on Xerces built into Ant which is not present in Ant 1.8.1", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1247](https://code.google.com/p/google-caja/issues/detail?id=1247) created by kpreid.switchb.org on 2010-07-08T19:04:28.000Z:\n\nTo reproduce: Build Caja with Ant 1.8.1.\n\nThe CajoledTests target will fail (with a NullPointerException unless http://codereview.appspot.com/1763041/show is applied), because the TransformAntTask runs in the Ant JVM, whose classpath is AFAICT not affected by anything we specify, so the existence of Xerces on the classpath is an accident of previous versions of Ant.\n\nPossible solutions:\n- arrange to run Ant with Xerces loaded -- which does not seem to be possible on an _automatic_ per-project basis, so it would have to either have the user change their config, or be 'tools/myant ...' or some such.\n- run the transformation in a different JVM or under a different ClassLoader with an appropriate classpath set up.\n", "created": "2015-04-16 04:18:57"}, {"url": "https://github.com/google/caja/issues/1245", "closed": "2015-04-16 04:18:46", "ttf": 0.0002777777777777778, "title": "Domita undocumented/unenforced requirement that the element have a class matching the idSuffix", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1245](https://code.google.com/p/google-caja/issues/detail?id=1245) created by kpreid.switchb.org on 2010-06-30T21:30:57.000Z:\n\nDomita expects that every node should have a class which is the idSuffix without the &quot;-&quot;, and manages this for nodes created through Domita, but it also assumes this of the vdoc body, but does not enforce it itself.\n\nDomita should either apply this class to the vdoc body itself, or assert that it is present, and the documentation for host pages should explain that Domita uses classes in this way.\n", "created": "2015-04-16 04:18:43"}, {"url": "https://github.com/google/caja/issues/1244", "closed": "2015-04-16 04:18:43", "ttf": 0.0002777777777777778, "title": "JSON.parse and JSON.stringify are never whitelisted", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1244](https://code.google.com/p/google-caja/issues/detail?id=1244) created by metaweta on 2010-06-30T20:32:21.000Z:\n\ncajita.js should (on line 4212 in the current revision) markFuncFreeze goodJSON.parse and stringify so they can be used.  We should also be testing that all the methods work somewhere.\n", "created": "2015-04-16 04:18:28"}, {"url": "https://github.com/google/caja/issues/1243", "closed": "2015-04-16 04:18:28", "ttf": 0.0002777777777777778, "title": "Do not require an \"outers\" property on IMPORTS___ for valija-cajita.js", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1243](https://code.google.com/p/google-caja/issues/detail?id=1243) created by metaweta on 2010-06-30T20:29:58.000Z:\n\nBefore loading valija.out.js, you have to supply a loader to grab the valijaMaker function.  As of 3846, you also now have to supply a useless outers property:\n\n```\n&lt;script type=&quot;text/javascript&quot;&gt;\n  (function(){\n    // Give the module a variable into which it can export the valija maker\n    var imports = ___.getNewModuleHandler().getImports();\n    imports.loader = {provide:___.markFuncFreeze(function(v){valijaMaker = v;})};\n    imports.outers = void 0; // THIS SHOULDN'T BE NECESSARY\n  })();\n&lt;/script&gt;\n```\n\nWe should remove that requirement.\n", "created": "2015-04-16 04:18:25"}, {"url": "https://github.com/google/caja/issues/1240", "closed": "2015-04-16 04:18:07", "ttf": 0.0002777777777777778, "title": "Playground dropping eval result", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1240](https://code.google.com/p/google-caja/issues/detail?id=1240) created by erights on 2010-06-28T23:51:57.000Z:\n\nTyping \n\n```\n&lt;script&gt;\n'use cajita'; // with or without\n2+3;\n&lt;/script&gt;\n```\n\ninto the playground and cajoling has a rendered output Eval Result of &quot;undefined&quot; rather than &quot;5&quot;.\n", "created": "2015-04-16 04:18:02"}, {"url": "https://github.com/google/caja/issues/1239", "closed": "2015-04-16 04:18:02", "ttf": 0.0002777777777777778, "title": "Virtualize rather than rejecting/folding unknown HTML elements", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1239](https://code.google.com/p/google-caja/issues/detail?id=1239) created by dotan%govirtualweb.com@gtempaccount.com on 2010-06-28T09:56:17.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nlatest\n\n<b>What steps will reproduce the problem?</b>\n1. use http://widgets.twimg.com/j/2/widget.js in playground\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\nerror with -webkit\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:17:36"}, {"url": "https://github.com/google/caja/issues/1238", "closed": "2015-04-16 04:17:36", "ttf": 0.0002777777777777778, "title": "second argument of Function.prototype.apply no longer accepts arguments array-like object", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1238](https://code.google.com/p/google-caja/issues/detail?id=1238) created by michaeljohnthethird on 2010-06-24T19:57:27.000Z:\n\nI believe the fix for issue 1230, which was committed as r4145, broke the functionality that allows for array-like objects to be used as the second argument to Function.prototype.apply.\n\nThis functionality is defined in section 15.3.4.3 of the ECMAscript 5th edition standard. In the standard, it states that the second argument must only have a length property (`n`) and that a value `length` iterates over the properties of the object such that 0 &lt;= length &lt; n.\n\nA test case:\n\nvar b = function(a,b){ return a===0 &amp;&amp; b===1; },\n    a = function(){ return b.apply(null,arguments); };\nb.apply(null,[0,1]);    // works\na.apply(null,[0,1]);    // does not\n\nNote that this defect is not yet reproducible at caja.appspot.com since caja revision 4126 is being used.\n", "created": "2015-04-16 04:17:29"}, {"url": "https://github.com/google/caja/issues/1237", "closed": "2015-04-16 04:17:29", "ttf": 0.0002777777777777778, "title": "problem with offsetWidth/offsetHeight/offsetLeft/offsetTop calculations", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1237](https://code.google.com/p/google-caja/issues/detail?id=1237) created by michaeljohnthethird on 2010-06-24T03:26:01.000Z:\n\nIn the MooTools test suite, a div is being appended to the body. The div is getting styles assigned through javascript of width:100px, height:100px, and some margin, padding, and border. When it accesses the offsetWidth in the cajoled suite, it gets the width of the entire viewport, while it gets ~100px with the uncajoled suite, as expected. When attempting to reproduce the problem at caja.appspot.com, the offsetWidth/offsetHeight/offsetLeft/offsetTop values are all zero, which is also incorrect, but not the same values I observed in the test suite.\n\nHere is my attempt at an analog to the code that is causing the problem, which is causing the separate but equally severe problem:\n\n&lt;div id=&quot;div&quot;&gt;content&lt;/div&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar div=document.getElementById('div');\nvar styles = {\n                 width:   '100px',\n                 height:  '100px',\n                 margin:  '10px',\n                 padding: '3px',\n                 border:  '1px solid black'\n             };\n\nfor(var style in styles)\n    div.style[style] = styles[style];\n\nvar checks = ['offsetWidth','offsetHeight','offsetLeft','offsetTop','offsetParent'];\nfor(var idx in checks) {\n    var log = document.createElement('div');\n    log.appendChild(document.createTextNode(checks[idx]+': '+String(div[checks[idx]])));\n    document.body.appendChild(log);\n}\n&lt;/script&gt;\n", "created": "2015-04-16 04:17:00"}, {"url": "https://github.com/google/caja/issues/1236", "closed": "2015-04-16 04:17:00", "ttf": 0.0002777777777777778, "title": "Calendar demo is broken: \"Error: Node is opaque\" from Domita", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1236](https://code.google.com/p/google-caja/issues/detail?id=1236) created by kpreid.switchb.org on 2010-06-24T01:30:54.000Z:\n\n&quot;ant calendar&quot;; open ant-www/calendar/demo-cajoled.html. The console will show &quot;Error: Node is opaque&quot;. Presumably it broke due to changes in Domita. I assume mikesamuel is better equipped to track this down being the original author.\n\nAlso, demo.html appears to need json_sans_eval added.\n", "created": "2015-04-16 04:16:58"}, {"url": "https://github.com/google/caja/issues/1235", "closed": "2015-04-16 04:16:58", "ttf": 0.0002777777777777778, "title": "\"ant jars\" does not put c.g.caja.service.* into jarfile", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1235](https://code.google.com/p/google-caja/issues/detail?id=1235) created by ihab.awad on 2010-06-24T00:35:19.000Z:\n\nAs of r4135, &quot;ant jars&quot; does not build our &quot;service&quot; classes into the target jarfile. It turns out that one has to run &quot;ant AllTests jars&quot; in order to get everything needed.\n", "created": "2015-04-16 04:16:49"}, {"url": "https://github.com/google/caja/issues/1234", "closed": "2015-04-16 04:16:49", "ttf": 0.0002777777777777778, "title": "NodeList should not appear to be an array", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1234](https://code.google.com/p/google-caja/issues/detail?id=1234) created by erights on 2010-06-23T22:43:48.000Z:\n\nSee issue 1230.\n", "created": "2015-04-16 04:16:33"}, {"url": "https://github.com/google/caja/issues/1233", "closed": "2015-04-16 04:16:33", "ttf": 0.0002777777777777778, "title": "Inability to set table.cellPadding, table.cellSpacing", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1233](https://code.google.com/p/google-caja/issues/detail?id=1233) created by michaeljohnthethird on 2010-06-23T20:11:24.000Z:\n\nI believe the cellPadding and cellSpacing properties need to be added to the whitelist for HTML table elements. Attempts to set these attributes silently fail. A simple test case:\n\nvar table = document.createElement('table'); \ntable.setAttribute('cellSpacing',5); \ntable.cellSpacing === undefined     // true \n\nNote: these properties also need to be allowed to be set to falsey values such as zero.\n", "created": "2015-04-16 04:16:11"}, {"url": "https://github.com/google/caja/issues/1231", "closed": "2015-04-16 04:16:09", "ttf": 0.0002777777777777778, "title": "Minifier produces incorrect syntax for empty else in function; module-promise-minified.js currently broken", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1231](https://code.google.com/p/google-caja/issues/detail?id=1231) created by kpreid.switchb.org on 2010-06-21T22:05:44.000Z:\n\nmodule-promise-minified.js as of r4138 contains a syntax error on line 46:\n    queue[head],++head,dequeue();else},script=document.createElement('script')...\nNote the &quot;else}&quot;. The original source has an &quot;else { }&quot; in that position.\n\nMinimal test case for the minifier:\nfunction () {\n  if (x) {\n  } else {\n  }\n}\nproducing:\n(function(){if(x);else})\n\nBizarrely, the output does not have the same error if (what I assume is) the same minifier is invoked as java -cp ant-lib com.google.caja.parser.js.Minify &lt;file&gt;.\n\nThis affects the lolcat-search and slides demos currently, and it is also relevant to my further demo work.\n", "created": "2015-04-16 04:16:02"}, {"url": "https://github.com/google/caja/issues/1230", "closed": "2015-04-16 04:16:02", "ttf": 0.0002777777777777778, "title": "inability to distinguish between arrays and array-like objects", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1230](https://code.google.com/p/google-caja/issues/detail?id=1230) created by michaeljohnthethird on 2010-06-18T23:06:32.000Z:\n\nCurrently, caja uses arrays to emulate array-like objects, which works (since they behave similarly) for most cases. One case when it doesn't work is when one is attempting to distinguish between a true array (whose constructor is Array) and an array-like object like the arguments object. The following code should help clarify the problem. Note that no falsey values should be printed to the console.\n\nvar collection = document.getElementsByTagName('*'); \nconsole.log('collection', collection.constructor !== Array, 'item' in collection); \nvar args = (function(){ return arguments; })(0,1); \nconsole.log('arguments', args.constructor !== Array, 'callee' in args); \nconsole.log('array', [].constructor === Array);\n\nThese array-like objects are not true arrays and should not inherit properties from Array.prototype, but they are being treated as plain old arrays within cajoled code. Currently, the only array-like objects I can think of are arguments and HTMLCollection, but more may exist.\n", "created": "2015-04-16 04:15:46"}, {"url": "https://github.com/google/caja/issues/1229", "closed": "2015-04-16 04:15:46", "ttf": 0.0002777777777777778, "title": "Cajoler service ignores HTTP status codes", "commits": {}, "user": "kpreid", "labels": ["CajolingService", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1229](https://code.google.com/p/google-caja/issues/detail?id=1229) created by kpreid.switchb.org on 2010-06-18T21:58:13.000Z:\n\nUsing the cajoling service on a URL that returns a non-200 code, the cajoler does not react appropriately. For example,\n\nhttp://localhost:8080/cajole?url=http%3A%2F%2Flocalhost%2Fdoes-not-exist&amp;input-mime-type=application/javascript&amp;output-mime-type=application/javascript\n  should fail more descriptively instead of complaining about the MIME type\n\nhttp://localhost:8080/cajole?url=http%3A%2F%2Flocalhost%2Fdoes-not-exist&amp;input-mime-type=text/html&amp;output-mime-type=application/javascript\n  should not succeed (by cajoling the error page)\n", "created": "2015-04-16 04:15:37"}, {"url": "https://github.com/google/caja/issues/1225", "closed": "2015-04-16 04:15:16", "ttf": 0.0002777777777777778, "title": "Project description has bad link", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1225](https://code.google.com/p/google-caja/issues/detail?id=1225) created by jbapple on 2010-06-16T03:36:30.000Z:\n\nThe front page, listing malicious actions an iframe can take, lists &quot;stopping the browser from working until the user downloads malware&quot;; the words &quot;downloads malware&quot; are linked to RedirectWithoutUserAction, which seems unrelated. I presume this is referring to a different vulnerability, as it is the same link provided by the previously listed vulnerability, &quot;redirection to phishing pages which could pretend to be a login page for the embedding application&quot;.\n", "created": "2015-04-16 04:15:12"}, {"url": "https://github.com/google/caja/issues/1224", "closed": "2015-04-16 04:15:12", "ttf": 0.0002777777777777778, "title": "\"use cajita\" in HTML script does not remove Valija dependency.", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1224](https://code.google.com/p/google-caja/issues/detail?id=1224) created by kpreid.switchb.org on 2010-06-15T00:37:54.000Z:\n\nIf I cajole strictly HTML then the output module does not mention Valija. If I add a script block starting with &quot;use cajita&quot;; then it does.\n\nTest case:\n&lt;p id=&quot;x&quot; style=&quot;width: 10em; height: 10em; border: .2em double gray; padding: 1em;&quot;&gt;This is a gadget.&lt;/p&gt;\n&lt;script&gt;\n  &quot;use cajita&quot;;\n&lt;/script&gt;\n", "created": "2015-04-16 04:15:03"}, {"url": "https://github.com/google/caja/issues/1223", "closed": "2015-04-16 04:15:03", "ttf": 0.0002777777777777778, "title": "form.submit() can be used to automatically redirect to URLs allowed by the URL policy", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1223](https://code.google.com/p/google-caja/issues/detail?id=1223) created by felix8a on 2010-06-14T23:02:08.000Z:\n\nright now there's nothing preventing a gadget from calling form.submit() and submitting a form without user intervention, which means a gadget could possibly redirect to arbitrary URLs without user intervention.\n\nin the past, caja rewrote &lt;form&gt; elements so that there's always an onsubmit='return false'.  however,\n1, this doesn't seem to be happening anymore.\n2, it doesn't prevent form.submit(), because form.submit() does not trigger onsubmit handlers.\n\nthe risk can be mitigated with a url policy that denies malicious URLs, or rewrites URLs to go through a proxy that filters malicious content.\n\nthis is related to bug 1129 and bug 881.\n\nI'm going to try to fix this with a modified version of isProcessingEvent___ handling.\n", "created": "2015-04-16 04:14:54"}, {"url": "https://github.com/google/caja/issues/1222", "closed": "2015-04-16 04:14:54", "ttf": 0.0002777777777777778, "title": "clear{Timeout,Interval} should noop on invalid values", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 1222](https://code.google.com/p/google-caja/issues/detail?id=1222) created by mikesamuel on 2010-06-14T21:37:21.000Z:\n\nvar fn = function(){ console.log('not cleared'); },\n \u00a0 \u00a0timeout \u00a0= setTimeout( fn, 1000 ),\n \u00a0 \u00a0interval = setInterval( fn, 1000 ),\n \u00a0 \u00a0each = [timeout,interval];\n\nfor(var i=0, l=each.length; i&lt;l; i++) {\n\u00a0 \u00a0clearTimeout( \u00a0each[i] );\n\u00a0 \u00a0clearInterval( each[i] );\n}\n\nshould clear the timeout and the interval without throwing an error.\n\nhttps://developer.mozilla.org/en/DOM/window.clearTimeout says:\n\n```\nNotes\n\nPassing an invalid ID to clearTimeout does not have any effect\n(and doesn't throw an exception).\n```\n\nCurrent behavior is to throw an exception.\n", "created": "2015-04-16 04:14:34"}, {"url": "https://github.com/google/caja/issues/1221", "closed": "2015-04-16 04:14:34", "ttf": 0.0002777777777777778, "title": "uri.js does not resolve ../foo relative URLs correctly.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1221](https://code.google.com/p/google-caja/issues/detail?id=1221) created by kpreid.switchb.org on 2010-06-14T20:59:06.000Z:\n\nuri.js seems to discard .. components which are at the beginning of a relative URL being resolved.\n\nTest case:\n  URI.resolve(URI.parse(&quot;http://example.com/foo/x.html&quot;), URI.parse(&quot;../bar/y.js&quot;))\n\nActual output:\n  http://example.com/foo/bar/y.js\n\nExpected output:\n  http://example.com/bar/y.js\n", "created": "2015-04-16 04:14:27"}, {"url": "https://github.com/google/caja/issues/1219", "closed": "2015-04-16 04:14:24", "ttf": 0.0002777777777777778, "title": "simple CSS3 rounded corner definitions function correctly but shorthand notation and specific corner targeting attributes produce warnings", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1219](https://code.google.com/p/google-caja/issues/detail?id=1219) created by tongzhu on 2010-06-10T16:58:53.000Z:\n\nThese definitions function:\n-moz-border-radius: 5px;\n-webkit-border-radius: 5px;\n\nThese definitions do not function:\n-moz-border-radius: 5px 5px;\n-webkit-border-radius: 5px 5px 5px 5px;\n\nThe following tags seem to have issues with either shorthand notation greater than 1 size or are flat out rejected:\n-moz-border-radius\n-moz-border-radius-topleft\n-moz-border-radius-topright\n-moz-border-radius-bottomleft\n-moz-border-radius-bottomright\n-webkit-border-radius\n-webkit-border-radius-topleft\n-webkit-border-radius-topright\n-webkit-border-radius-bottomleft\n-webkit-border-radius-bottomright\n\nThe above are specific browser type declarations of border-radius, but I believe the standard is defined here: http://www.w3.org/TR/2005/WD-css3-background-20050216/#the-border-radius and defines the tags as:\nborder-radius\nborder-radius-topleft\nborder-radius-topright\nborder-radius-bottomleft\nborder-radius-bottomright\n\nHere is a more complete set of warnings that was provided by a developer regarding the above issues using Yahoo's Caja integration.\n\nstdin:stdin:20: -moz-border-radius-topleft:4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:20+13 - 39: unknown css property -moz-border-radius-topleft\nstdin:stdin:21: -moz-border-radius-topright:4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:21+13 - 40: unknown css property -moz-border-radius-topright\nstdin:stdin:22: -moz-border-radius-bottomleft:0px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:22+13 - 42: unknown css property -moz-border-radius-bottomleft\nstdin:stdin:23: -moz-border-radius-bottomright:0px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:23+13 - 43: unknown css property -moz-border-radius-bottomright\nstdin:stdin:24: border-bottom-left-radius: 0px 0px;\n^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:24+13 - 38: unknown css property border-bottom-left-radius\nstdin:stdin:25: border-bottom-right-radius: 0px 0px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:25+13 - 39: unknown css property border-bottom-right-radius\nstdin:stdin:26: border-top-left-radius: 4px 4px;\n^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:26+13 - 35: unknown css property border-top-left-radius\nstdin:stdin:27: border-top-right-radius: 4px 4px;\n^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:27+13 - 36: unknown css property border-top-right-radius\nstdin:stdin:35: -moz-border-radius-topleft:4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:35+13 - 39: unknown css property -moz-border-radius-topleft\nstdin:stdin:36: -moz-border-radius-topright:4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:36+13 - 40: unknown css property -moz-border-radius-topright\nstdin:stdin:37: -moz-border-radius-bottomleft:4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:37+13 - 42: unknown css property -moz-border-radius-bottomleft\nstdin:stdin:38: -moz-border-radius-bottomright:4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:38+13 - 43: unknown css property -moz-border-radius-bottomright\nstdin:stdin:39: border-bottom-left-radius: 4px 4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:39+13 - 38: unknown css property border-bottom-left-radius\nstdin:stdin:40: border-bottom-right-radius: 4px 4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:40+13 - 39: unknown css property border-bottom-right-radius\nstdin:stdin:41: border-top-left-radius: 4px 4px;\n^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:41+13 - 35: unknown css property border-top-left-radius\nstdin:stdin:42: border-top-right-radius: 4px 4px;\n^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:42+13 - 36: unknown css property border-top-right-radius\nstdin:stdin:48: -moz-border-radius-topleft:4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:48+13 - 39: unknown css property -moz-border-radius-topleft\nstdin:stdin:49: -moz-border-radius-topright:4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:49+13 - 40: unknown css property -moz-border-radius-topright\nstdin:stdin:50: -moz-border-radius-bottomleft:4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:50+13 - 42: unknown css property -moz-border-radius-bottomleft\nstdin:stdin:51: -moz-border-radius-bottomright:4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:51+13 - 43: unknown css property -moz-border-radius-bottomright\nstdin:stdin:52: border-bottom-left-radius: 4px 4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:52+13 - 38: unknown css property border-bottom-left-radius\nstdin:stdin:53: border-bottom-right-radius: 4px 4px;\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:53+13 - 39: unknown css property border-bottom-right-radius\nstdin:stdin:54: border-top-left-radius: 0px 0px;\n^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:54+13 - 35: unknown css property border-top-left-radius\nstdin:stdin:55: border-top-right-radius: 0px 0px;\n^^^^^^^^^^^^^^^^^^^^^^^\nWARNING: stdin:stdin:55+13 - 36: unknown css property border-top-right-radius\n", "created": "2015-04-16 04:14:17"}, {"url": "https://github.com/google/caja/issues/1216", "closed": "2015-04-16 04:14:08", "ttf": 0.0002777777777777778, "title": "The content is not refreshing.. ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1216](https://code.google.com/p/google-caja/issues/detail?id=1216) created by gballesca on 2010-06-03T08:44:54.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\n<b>What steps will reproduce the problem?</b>\n1. Try to input the address of the file you want to load.\n2. The context of the file will load in the text area. \n3. Try to change the context of the file you load\n4. Then try to re-load the file again\n5. The content is not fetching the updated value from the file. \n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:14:03"}, {"url": "https://github.com/google/caja/issues/1215", "closed": "2015-04-16 04:14:03", "ttf": 0.0002777777777777778, "title": "FileSystemUriFetcher doesn't allow fetching files from the current directory", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1215](https://code.google.com/p/google-caja/issues/detail?id=1215) created by jasvir on 2010-05-27T22:31:15.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nI am attempting to cajole the mootools framework by including it in an\nhtml document. When trying to cajole a simple xhtml document with only\na single div in the body and script tag referencing an external JS\nfile in the head, I get a warning that says caja &quot;failed to load\nexternal uri&quot;.\n\nConsole output can be found here: http://pastebin.com/raw.php?i=RYJwmMfc\nThe document, mootools.htm, can be found here: http://pastebin.com/raw.php?i=cYwhZ94W\nThe JS file is in the same directory as the mootools.htm file.\n\ntl;dr How do I make caja successfully load a JS file referenced in an\n(X)HTML file?\n", "created": "2015-04-16 04:13:50"}, {"url": "https://github.com/google/caja/issues/1213", "closed": "2015-04-16 04:13:39", "ttf": 0.0002777777777777778, "title": "NPE when parsing a document without debug data", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1213](https://code.google.com/p/google-caja/issues/detail?id=1213) created by jasvir on 2010-05-24T07:02:05.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Create a DomParser\n2. setNeedsDebugData(false)\n3. parse an html fragment\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect a correct parse.  Instead there's a null pointer exception.\n\njava.lang.NullPointerException\n    at com.google.caja.parser.html.CajaTreeBuilder.getErrorLocation(CajaTreeBuilder.java:92)\n    at com.google.caja.parser.html.Html5ElementStack$1.report(Html5ElementStack.java:120)\n    at com.google.caja.parser.html.Html5ElementStack$1.error(Html5ElementStack.java:109)\n    at nu.validator.htmlparser.impl.TreeBuilder.err(TreeBuilder.java:461)\n    at nu.validator.htmlparser.impl.TreeBuilder.startTag(TreeBuilder.java:2745)\n    at com.google.caja.parser.html.Html5ElementStack.processTag(Html5ElementStack.java:422)\n    at com.google.caja.parser.html.DomParser.parseDom(DomParser.java:468)\n    at com.google.caja.parser.html.DomParser.parseDocument(DomParser.java:205)\n    at com.google.caja.parser.html.DomParser.parseDocument(DomParser.java:180)\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:13:32"}, {"url": "https://github.com/google/caja/issues/1212", "closed": "2015-04-16 04:13:32", "ttf": 0.0002777777777777778, "title": "Caja fails to parse fragments that end with a comment and no whitespace", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1212](https://code.google.com/p/google-caja/issues/detail?id=1212) created by jasvir on 2010-05-14T00:51:46.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  Cajole &quot;&lt;b&gt;Hello, world&lt;/b&gt;&lt;!----&gt;&quot;\nNote there are no spaces after the comment.\n1.  Cajole &quot;&lt;b&gt;Hello, world&lt;/b&gt;&lt;!----&gt; &quot;\n\n<b>What is the expected output? What do you see instead?</b>\n\nIn both cases, expected: &quot;Hello, world&quot; in bold\nActual #&nbsp;1: com.google.caja.lexer.ParseException: Unexpected end of input in \nunknown:///unknown\n\nActual #&nbsp;2 works as expected\n\n<b>Please use labels and text to provide additional information.</b>\nr4056\n", "created": "2015-04-16 04:13:25"}, {"url": "https://github.com/google/caja/issues/1211", "closed": "2015-04-16 04:13:25", "ttf": 0.0002777777777777778, "title": "Caja throws an exception when parsing XML namespaced scripts", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1211](https://code.google.com/p/google-caja/issues/detail?id=1211) created by jasvir on 2010-05-10T20:42:25.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Use CajaHtmlParser to parse:\n            &lt;script type=&quot;text/os-data&quot;\n                xmlns:os=&quot;http://ns.opensocial.org/2008/markup&quot;&gt;\n              &lt;os:ViewerRequest key=&quot;viewer&quot;/&gt;\n            &lt;/script&gt;\n<b>2.</b>\norg.w3c.dom.DOMException: NAMESPACE_ERR: An attempt is made to create or change an object \nin a way which is incorrect with regard to namespaces.\n    at org.apache.xerces.dom.CoreDocumentImpl.checkDOMNSErr(Unknown Source)\n    at org.apache.xerces.dom.AttrNSImpl.setName(Unknown Source)\n    at org.apache.xerces.dom.AttrNSImpl.&lt;init&gt;(Unknown Source)\n    at org.apache.xerces.dom.CoreDocumentImpl.createAttributeNS(Unknown Source)\n    at \ncom.google.caja.parser.html.CajaTreeBuilder.addAttributesToElement(CajaTreeBuilder.java:266)\n    at com.google.caja.parser.html.CajaTreeBuilder.createElement(CajaTreeBuilder.java:390)\n    at com.google.caja.parser.html.CajaTreeBuilder.createElement(CajaTreeBuilder.java:1)\n    at \nnu.validator.htmlparser.impl.TreeBuilder.appendToCurrentNodeAndPushElementMayFoster(TreeB\nuilder.java:4590)\n    at nu.validator.htmlparser.impl.TreeBuilder.startTag(TreeBuilder.java:2273)\n    at com.google.caja.parser.html.Html5ElementStack.processTag(Html5ElementStack.java:422)\n    at com.google.caja.parser.html.DomParser.parseDom(DomParser.java:468)\n    at com.google.caja.parser.html.DomParser.parseFragment(DomParser.java:287)\n    at com.google.caja.parser.html.DomParser.parseFragment(DomParser.java:255)\n    at \ncom.google.caja.parser.html.DomParserTest.assertParsedMarkup(DomParserTest.java:2376)\n    at \ncom.google.caja.parser.html.DomParserTest.assertParsedMarkup(DomParserTest.java:2348)\n    at \ncom.google.caja.parser.html.DomParserTest.assertParsedHtmlFragment(DomParserTest.java:2326\n)\n    at \ncom.google.caja.parser.html.DomParserTest.testOSTemplatesInScript(DomParserTest.java:2155)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:592)\n    at junit.framework.TestCase.runTest(TestCase.java:154)\n    at com.google.caja.util.CajaTestCase.runTest(CajaTestCase.java:434)\n    at junit.framework.TestCase.runBare(TestCase.java:127)\n    at junit.framework.TestResult$1.protect(TestResult.java:106)\n    at junit.framework.TestResult.runProtected(TestResult.java:124)\n    at junit.framework.TestResult.run(TestResult.java:109)\n    at junit.framework.TestCase.run(TestCase.java:118)\n    at \norg.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at \norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at \norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:13:18"}, {"url": "https://github.com/google/caja/issues/1210", "closed": "2015-04-16 04:13:18", "ttf": 0.0002777777777777778, "title": "Problems with mixed synthetic and non-synthetic declarations", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1210](https://code.google.com/p/google-caja/issues/detail?id=1210) created by ihab.awad on 2010-05-04T22:56:45.000Z:\n\nAs of r4066, cajole the following file as Valija:\n\n  x.y++;\n\nThe result is a runtime exception:\n\n  java.lang.ClassCastException: com.google.caja.parser.js.Declaration cannot be\n      cast to com.google.caja.parser.js.ExpressionStmt\n          at com.google.caja.parser.quasiliteral.CajitaRewriter$61.fire(CajitaRewriter.java:1973)\n          ...\n\nThis is because, at some point, the Valija rewriter produces a MultiDeclaration containing both a \nsynthetic variable and a non-synthetic variable. This in turn passes through rule \n&quot;multiDeclaration&quot; in CajitaRewriter. The synthetic part passes through the SyntheticRuleset \nunchanged, and returns to &quot;multiDeclaration&quot;, which barfs because the result is neither a Noop \nnor a plain initializer like &quot;x = 3&quot;.\n", "created": "2015-04-16 04:13:16"}, {"url": "https://github.com/google/caja/issues/1209", "closed": "2015-04-16 04:13:15", "ttf": 0.0002777777777777778, "title": "IDs not prefixed in html_sanitize", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1209](https://code.google.com/p/google-caja/issues/detail?id=1209) created by mikesamuel on 2010-04-28T21:12:09.000Z:\n\nOne of the backwards compatibility methods in html_sanitizer.js broke.\n\nPatch attached.\n", "created": "2015-04-16 04:13:09"}, {"url": "https://github.com/google/caja/issues/1208", "closed": "2015-04-16 04:13:09", "ttf": 0.0002777777777777778, "title": "Implement new ES5 get/set syntax", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1208](https://code.google.com/p/google-caja/issues/detail?id=1208) created by metaweta on 2010-04-27T23:11:57.000Z:\n\nUpdate the parser to handle getters and setters in object literals.  We can\nreject them in Cajita and Valija, but I need them in SESRewriter.\n", "created": "2015-04-16 04:13:00"}, {"url": "https://github.com/google/caja/issues/1207", "closed": "2015-04-16 04:13:00", "ttf": 0.0002777777777777778, "title": "ClassCastException when parsing invalid xml", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1207](https://code.google.com/p/google-caja/issues/detail?id=1207) created by felix8a on 2010-04-23T21:24:46.000Z:\n\ncajoling &quot;&lt;?xml ?&gt;&lt;html&gt;&lt;&quot; throws a ClassCastException \nin XmlElementStack(AbstractElementStack).getElement(int) line: 77   \n", "created": "2015-04-16 04:12:53"}, {"url": "https://github.com/google/caja/issues/1205", "closed": "2015-04-16 04:12:48", "ttf": 0.0002777777777777778, "title": "caja r4052 pom has incorrect dependencies", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1205](https://code.google.com/p/google-caja/issues/detail?id=1205) created by lindner+unused1@inuus.com on 2010-04-13T08:32:23.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. change shindig pom.xml to reference caja r4052\n2. build\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect clean build (with changes for API) instead get linking problems running tests, referencing \na very old version of nu.validators.htmlparser (1.0.7)\n\nPrevious versions used a custom htmlparser in caja, I think if you switch the version to 1.2.1 \neverything should work..\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:12:39"}, {"url": "https://github.com/google/caja/issues/1204", "closed": "2015-04-16 04:12:39", "ttf": 0.0002777777777777778, "title": "Cajita returns too many ownKeys for arrays", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1204](https://code.google.com/p/google-caja/issues/detail?id=1204) created by metaweta on 2010-04-09T22:28:00.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. var a = [];\n2. a.length = 1000;\n3. cajita.ownKeys(a);\n\n<b>What is the expected output? What do you see instead?</b>\n\nThere should be no ownkeys; instead there are 1000.\n", "created": "2015-04-16 04:12:35"}, {"url": "https://github.com/google/caja/issues/1202", "closed": "2015-04-16 04:12:34", "ttf": 0.0002777777777777778, "title": "caja may be too strict about html boolean attributes like \"disabled\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1202](https://code.google.com/p/google-caja/issues/detail?id=1202) created by felix8a on 2010-04-08T20:32:56.000Z:\n\nin all the major browsers, these all have the same effect:\n&lt;button disabled&gt;\n&lt;button disabled=&quot;disabled&quot;&gt;\n&lt;button disabled=&gt;\n&lt;button disabled=&quot;&quot;&gt;\n&lt;button disabled=&quot;0&quot;&gt;\n&lt;button disabled=&quot;false&quot;&gt;\n\nthe html spec says that the first two are equivalent, and the other forms are illegal\nhttp://www.w3.org/TR/html401/intro/sgmltut.html#didx-boolean_attribute\n\nin all the browsers I tried, it doesn't matter what value the attribute has, it only matters that the \nattribute is specified.\n\nso, this is not normally a problem, except when caja's html input is the output of some unfixable \nhtml processor that reads &lt;input checked&gt; and renders it as &lt;input checked=&quot;&quot;&gt;.  (it works in \nbrowsers, why does it need to be changed, etc)\n\nquick workaround for that is to add &quot;&quot; to the html attribute whitelist, but I'm thinking that since \ncaja already has a special flag for these boolean attributes, it could just ignore any specified \nvalue on input, and normalize on output.\n\nnote, the client-side html sanitizer already treats &lt;button disabled=&gt; as equivalent to &lt;button \ndisabled&gt;.  it's just the server-side html parser that complains.\n", "created": "2015-04-16 04:12:23"}, {"url": "https://github.com/google/caja/issues/1201", "closed": "2015-04-16 04:12:23", "ttf": 0.0002777777777777778, "title": "caja should not define a function named escape()", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1201](https://code.google.com/p/google-caja/issues/detail?id=1201) created by felix8a on 2010-04-08T10:36:29.000Z:\n\n&lt;script&gt;\ncajita.log(escape('!@#$%'));\n&lt;/script&gt;\n\nescape is not a standard function, but all the major browsers support it, and some developers use it.  \nin the caja environment, escape is redefined to a function that implements a form of call/ec, and \nwhen you try to use it as the browser's escape function, the error message is quite confusing.  \n(because eventually caja tries to call the string as a function, and fails with a confusing error \nmessage.)\n", "created": "2015-04-16 04:12:16"}, {"url": "https://github.com/google/caja/issues/1200", "closed": "2015-04-16 04:12:16", "ttf": 0.0002777777777777778, "title": "Whitelist construction of dynamic script tags vai the cajoling service", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1200](https://code.google.com/p/google-caja/issues/detail?id=1200) created by jasvir@google.com on 2010-04-05T21:26:52.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n4045\n\n<b>What steps will reproduce the problem?</b>\n1. http://caja.appspot.com\n<b>2.</b>\n&lt;script&gt;\nvar foo = document.createElement('script');\nfoo.src = &quot;http://www.google.com/calendar/feeds/developer-calendar@google.com/public/full?\nalt=json-in-script&amp;callback=bar&quot;;\n\nfunction bar(json) { alert(json); }\ndocument.body.appendChild(foo);\n&lt;/script&gt;\n\nThe url to foo.src ought to be rewritten to use the cajoling service invoking JsHandler.\n", "created": "2015-04-16 04:12:14"}, {"url": "https://github.com/google/caja/issues/1198", "closed": "2015-04-16 04:11:56", "ttf": 0.0002777777777777778, "title": "Apache 2.0 license is not GPLv2-compatible", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1198](https://code.google.com/p/google-caja/issues/detail?id=1198) created by davidsarah.hopwood on 2010-03-14T18:30:33.000Z:\n\nCaja is licensed under the Apache license, version 2.0.\nAccording to http://www.apache.org/licenses/GPL-compatibility.html :\n&lt;blockquote&gt;\nDespite our best efforts, the FSF has never considered the Apache License\nto be compatible with GPL version 2, citing the patent termination and\nindemnification provisions as restrictions not present in the older GPL\nlicense.\n&lt;/blockquote&gt;\n\nAn example of a GPLv2-licensed project that would like to incorporate Caja\ncode -- specifically the Cajita runtime -- is Tahoe-LAFS\n(www.allmydata.org). This issue means that it can't do so without switching\nto GPLv3, or including an exception for linking with the Cajita runtime.\n", "created": "2015-04-16 04:11:49"}, {"url": "https://github.com/google/caja/issues/1197", "closed": "2015-04-16 04:11:49", "ttf": 0.0002777777777777778, "title": "Caja should apply autocomplete=\"off\" on forms", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1197](https://code.google.com/p/google-caja/issues/detail?id=1197) created by erikeldridge on 2010-03-11T02:06:08.000Z:\n\nI'm using the caja playground (Rev 4007M built on 2010-03-08 15:51:45) in\nFF 3.6 on Mac 10.5.8, but this is just a general enhancement request for\naccess to the autocomplete attribute on input tags.  For what it's worth,\nthe attribute is standard in html 5 (\nhttp://www.w3.org/TR/html5/forms.html#the-autocomplete-attribute ).\n\nI'd like to be able to do something like this:\n&lt;input autocomplete=&quot;false&quot;/&gt;\n\nBut the cajoler removes it w/ this warning:\nWARNING http:///:1+8 - 20: removing unknown attribute autocomplete on\ninput:http:///:1: &lt;input autocomplete=&quot;false&quot;/&gt;\n\n<b>What steps will reproduce the problem?</b>\n1. open the caja playground in ff 3.6 on mac 10.5.8\n2. enter &lt;input autocomplete=&quot;false&quot;/&gt; in the source box\n3. click the &quot;Cajole&quot; button\n4. view the compile warnings/errors\n\nThanks\n", "created": "2015-04-16 04:11:18"}, {"url": "https://github.com/google/caja/issues/1196", "closed": "2015-04-16 04:11:18", "ttf": 0.0002777777777777778, "title": "GWT Playground does not work on IE", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1196](https://code.google.com/p/google-caja/issues/detail?id=1196) created by jasvir on 2010-03-08T22:34:07.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Load up IE7/8 on Windows\n2. http://caja.appspot.com/\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpect to see the Caja playground.  Instead the console records:\n\nMessage: Invalid argument.\nLine: 1805\nChar: 725\nCode: 0\nURI: \nhttp://caja.appspot.com/playground/7301DA768BF6D058BF30775DE8DD\nE18B.cache.html\n", "created": "2015-04-16 04:11:14"}, {"url": "https://github.com/google/caja/issues/1194", "closed": "2015-04-16 04:11:07", "ttf": 0.0002777777777777778, "title": "A mechanism to add a custom URI Rewriter is needed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1194](https://code.google.com/p/google-caja/issues/detail?id=1194) created by oancea@comcast.net on 2010-03-05T14:33:41.000Z:\n\nThis is an enhancement.\nThe URIs in the cajoled content are now processed from something like:\n  http://injob.easycruit.com/files/logo.gif\nfor example, to something like:\n  http://example.com/?mime-type=image%2f%2a&amp;amp;uri=http%3a%2f%\n2finjob.easycruit.com%2ffiles%2flogo.gif\n\nThe code that does this is in BuildServiceImplementation.java around line \n128, method rewriteUri().\n\nI believe there needs to be a means to provide a custom URI rewriter for \nthe host sites.\n\nThanks,\nGabriel\n", "created": "2015-04-16 04:10:58"}, {"url": "https://github.com/google/caja/issues/1191", "closed": "2015-04-16 04:10:44", "ttf": 0.0002777777777777778, "title": "Playground does not fetch external content", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1191](https://code.google.com/p/google-caja/issues/detail?id=1191) created by jasvir@google.com on 2010-02-26T17:16:43.000Z:\n\nWhat revision of the cajoler exhibits the problem?  On what browser and \nOS?\n\n3992\n\n<b>What steps will reproduce the problem?</b>\n1. http://caja.appspot.com\n2. &lt;script src=&quot;http://www.thinkfu.com/absoluteurl.js&gt;&lt;/script&gt;\n3. Cajole\n\n<b>What is the expected output? What do you see instead?</b>\nWarning http:///:1+13 - 52: failed to load external url absoluteurl.js\n\nShould load external resources\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:10:37"}, {"url": "https://github.com/google/caja/issues/1190", "closed": "2015-04-16 04:10:37", "ttf": 0.0002777777777777778, "title": "safeJSON parser does not parse simple JSON constructs correctly, and does not throw a SyntaxError for invalid JSON input", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1190](https://code.google.com/p/google-caja/issues/detail?id=1190) created by jasvir on 2010-02-25T00:48:14.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. http://caja.appspot.com\n<b>2.</b>\n\n&lt;script&gt;\nx = JSON.parse(&quot;{a:1, b:2}&quot;);\nalert(JSON.stringify(x));\n&lt;/script&gt;\n1. Cajole\n\n<b>What is the expected output? What do you see instead?</b>\n\nOn Chrome 5  on OSX10.5.8, this results in a &quot;Maximum call stack size \nexceeded&quot;.\n\nOn FF 3.0.8 on OSX10.5.8, this results in '{&quot;undefined&quot;: 2}'\n\nExpect '{&quot;a&quot;:1,&quot;b&quot;:2}'\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:10:22"}, {"url": "https://github.com/google/caja/issues/1189", "closed": "2015-04-16 04:10:21", "ttf": 0.0002777777777777778, "title": "Error: Not callable ([Object]).apply", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1189](https://code.google.com/p/google-caja/issues/detail?id=1189) created by pamela.fox on 2010-02-16T05:10:09.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nCurrent version. Chrome/Windows.\nRev 3965:3966M built on 2010-02-03 09:26:20.\n\n<b>What steps will reproduce the problem?</b>\n1. Load code\n2. Cajole\n3. See error:\nNot callable ([Object]).apply\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 04:10:15"}, {"url": "https://github.com/google/caja/issues/1188", "closed": "2015-04-16 04:10:15", "ttf": 0.0002777777777777778, "title": "embedSWF not working on Caja playground", "commits": {}, "user": "kpreid", "labels": ["Component-Playground", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1188](https://code.google.com/p/google-caja/issues/detail?id=1188) created by pamela.fox on 2010-02-16T05:05:12.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nTried on current and older version (3950).\n\n<b>What steps will reproduce the problem?</b>\n1. Put code in playground\n2. See error:\nCan't set innerHTML on null\n- It happens on embedSWF \n\nAlso, embedSWF example doesn't load the video.\n", "created": "2015-04-16 04:10:06"}, {"url": "https://github.com/google/caja/issues/1187", "closed": "2015-04-16 04:10:05", "ttf": 0.0002777777777777778, "title": "Getting \"expected function instead of defined\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1187](https://code.google.com/p/google-caja/issues/detail?id=1187) created by pamela.fox on 2010-02-16T03:26:31.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nhttp://caja.appspot.com/\nChrome/Windows\n\n<b>What steps will reproduce the problem?</b>\n1. Put code in first tab\n2. Cajole\n3. See error that points to the 'use cajita' line\n", "created": "2015-04-16 04:09:59"}, {"url": "https://github.com/google/caja/issues/1186", "closed": "2015-04-16 04:09:59", "ttf": 0.0002777777777777778, "title": "need tests for javascript: URLs", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1186](https://code.google.com/p/google-caja/issues/detail?id=1186) created by mikesamuel on 2010-02-16T03:01:16.000Z:\n\nThere is insufficient test coverage for javascript: URLs and we need to figure \nout what &quot;this&quot; and &quot;event&quot; means inside javascript: URLs.\n", "created": "2015-04-16 04:09:54"}, {"url": "https://github.com/google/caja/issues/1185", "closed": "2015-04-16 04:09:54", "ttf": 0.0002777777777777778, "title": "test private issue", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1185](https://code.google.com/p/google-caja/issues/detail?id=1185) created by msamuel@google.com on 2010-02-07T23:58:43.000Z:\n\nplease ignore.  Just testing that the private issue link creates an issue with the private label when \nused by a non-project member.\n", "created": "2015-04-16 04:09:52"}, {"url": "https://github.com/google/caja/issues/1184", "closed": "2015-04-16 04:09:52", "ttf": 0.0002777777777777778, "title": "Non-project-members can't responsibly disclose", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1184](https://code.google.com/p/google-caja/issues/detail?id=1184) created by eddie.beagle on 2010-02-07T21:30:27.000Z:\n\nThe Caja home page says:\n\n&gt; Please report bugs and potential vulnerabilities at the issue tracker. \n&gt; For security vulnerabilities, please mark your issue with the Private label. \n\nHowever, as a non-member of the Caja project, I am apparently unable to mark a reported issue \nwith any label. The normal intent of this prohibition is presumably so that project members can \nlater determine the proper label. Though sensible in general, this approach breaks the point of the \nPrivate label.\n", "created": "2015-04-16 04:09:45"}, {"url": "https://github.com/google/caja/issues/1183", "closed": "2015-04-16 04:09:45", "ttf": 0.0002777777777777778, "title": "___.sharedImports.escape should not be cajita.escape", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1183](https://code.google.com/p/google-caja/issues/detail?id=1183) created by erights on 2010-02-02T22:18:42.000Z:\n\nOriginally reported by Mike Stay at\nhttp://groups.google.com/group/google-caja-discuss/browse_frm/thread/4c2430ee2aae693a\n\nAgreed solution is to rename cajita.escape to cajita.callWithEjector.\n", "created": "2015-04-16 04:09:31"}, {"url": "https://github.com/google/caja/issues/1182", "closed": "2015-04-16 04:09:31", "ttf": 0.0002777777777777778, "title": "DOMita should provide window.toStaticHTML", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1182](https://code.google.com/p/google-caja/issues/detail?id=1182) created by mikesamuel on 2010-01-19T18:31:37.000Z:\n\nDOMita should provide an implementation of window.toStaticHTML as defined\nin http://msdn.microsoft.com/en-us/library/cc848922(VS.85).aspx\n\nThe behavior in that is rather ambiguous.  It doesn't say whether it strips\nscripts in style, or in javascript: or vbscript: urls.\n", "created": "2015-04-16 04:09:27"}, {"url": "https://github.com/google/caja/issues/1181", "closed": "2015-04-16 04:09:27", "ttf": 0.0002777777777777778, "title": "CSS capabilities exposed via Caja appear to allow covering content of the embedding page", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1181](https://code.google.com/p/google-caja/issues/detail?id=1181) created by maciej on 2010-01-13T19:40:20.000Z:\n\nI found this potential security vulnerability by code inspection, so I'm not sure if it is a real \nvulnerability or if I have merely misread the code.\n\nIn src/com/google/caja/lang/css/css21-whitelist.json, the CSS properties &quot;position&quot;, &quot;top&quot; and \n&quot;left&quot; are allowed (in addition to &quot;bottom&quot;, &quot;top&quot; and &quot;z-index&quot;).\n\nPer css21-defs.json in the same directory, it appears that for the &quot;position&quot; property, the values \n&quot;relative&quot;, &quot;absolute&quot; and &quot;fixed&quot; are allowed. It seems that this would be sufficient to allow \nCajoled content to be positioned outside of its natural contents, overlapping arbitrary other \ncontent in the embedding page. For example, if the embedding page has a password field, \nCajoled content could cover it with its own and trick users into giving up their passwords.\n\nI have not been able to get Caja running enough to attempt a proper proof-of-concept, so I \ndon't know if there is a mechanism to prevent this.\n", "created": "2015-04-16 04:08:58"}, {"url": "https://github.com/google/caja/issues/1180", "closed": "2015-04-16 04:08:58", "ttf": 0.0002777777777777778, "title": "If URICallback.rewrite for a url returns null, the cajoler rejects the entire input ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1180](https://code.google.com/p/google-caja/issues/detail?id=1180) created by jasvir@google.com on 2009-12-17T01:41:35.000Z:\n\nCajole:\nHello World\n&lt;a href=&quot;javascript:alert(1);&quot;&gt;foo&lt;/a&gt;\n\nNote the message queue contains an ERROR and as a result no output is \nproduced.  Its possible for the cajoler to remove the attribute entirely, issue a \nWARNING and continue.\n", "created": "2015-04-16 04:08:47"}, {"url": "https://github.com/google/caja/issues/1179", "closed": "2015-04-16 04:08:47", "ttf": 0.0002777777777777778, "title": "Errors not reported in applet-free testbed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1179](https://code.google.com/p/google-caja/issues/detail?id=1179) created by metaweta on 2009-12-11T22:12:29.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Cajole\n\nvar a=b[];\n1. Go to compiler warning/error panel.\n2. No error.\n", "created": "2015-04-16 04:08:44"}, {"url": "https://github.com/google/caja/issues/1178", "closed": "2015-04-16 04:08:44", "ttf": 0.0002777777777777778, "title": "spurious \"folding element head into parent\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1178](https://code.google.com/p/google-caja/issues/detail?id=1178) created by felix8a on 2009-12-11T01:10:31.000Z:\n\nprior to r3889, cajoling this:\n  &lt;html&gt;&lt;/html&gt;\nsucceeded without warnings.\n\nafter r3899, cajoling that emits 3 warnings:\n\nWARNING debug.html:1+1 - 14: folding element html into parent\ndebug.html:1: &lt;html&gt;&lt;/html&gt;\nWARNING debug.html:1+7: folding element head into parent\ndebug.html:1: &lt;html&gt;&lt;/html&gt;\nWARNING debug.html:1+7: folding element body into parent\ndebug.html:1: &lt;html&gt;&lt;/html&gt;\n", "created": "2015-04-16 04:08:40"}, {"url": "https://github.com/google/caja/issues/1177", "closed": "2015-04-16 04:08:40", "ttf": 0.0002777777777777778, "title": "NPE in Namespaces.java:131", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1177](https://code.google.com/p/google-caja/issues/detail?id=1177) created by gilles.devaux on 2009-12-08T18:19:01.000Z:\n\nCreate the internal DOM from an existing org.w3c.dom.DocumentFragment\n-&gt; compiler.addInput(AncestorChain.instance(new Dom(rootNode)));\n\ncompiler.run() throws NPE\n\nstack:\nat com.google.caja.parser.html.Namespaces.forUri(Namespaces.java:131)\n      at com.google.caja.parser.html.ElKey.forElement(ElKey.java:92)\n      at\ncom.google.caja.plugin.templates.TemplateSanitizer.sanitize(TemplateSanitizer.java:74)\n      at\ncom.google.caja.plugin.templates.TemplateSanitizer.sanitize(TemplateSanitizer.java:68)\n      at\ncom.google.caja.plugin.stages.SanitizeHtmlStage.apply(SanitizeHtmlStage.java:46)\n      at\ncom.google.caja.plugin.stages.SanitizeHtmlStage.apply(SanitizeHtmlStage.java:32)\n      at com.google.caja.util.Pipeline.applyStage(Pipeline.java:41)\n      at\ncom.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:122)\n      at\ncom.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:116)\n      at com.google.caja.util.Pipeline.apply(Pipeline.java:35)\n      at com.google.caja.plugin.PluginCompiler.run(PluginCompiler.java:194)\n\nIn ElKey.java:92 -&gt; \n90 String uri = el.getNamespaceURI();\n91 String localName = el.getLocalName();\n92 Namespaces ns = Namespaces.HTML_DEFAULT.forUri(uri);\n\n-&gt; uri is \u2018null\u2019, Namespaces.forUri(uri) does not like null\n", "created": "2015-04-16 04:08:15"}, {"url": "https://github.com/google/caja/issues/1176", "closed": "2015-04-16 04:08:15", "ttf": 0.0002777777777777778, "title": "Ant build target \"demos\" fails with build.xml format error", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1176](https://code.google.com/p/google-caja/issues/detail?id=1176) created by jwascroftleigh on 2009-12-03T21:25:51.000Z:\n\n&gt; What revision of the cajoler exhibits the problem?\n\nr3871\n\n&gt; On what browser and OS?\n\nWhatever cajadores.com uses\n\n&gt; What steps will reproduce the problem?\n1. Checkout using svn (or git-svn)\n2. (cd caja &amp;&amp; ant demos)\n\n&gt; What is the expected output? \n\nDon't know - but not an error\n\n&gt; What do you see instead?\n\nBUILD FAILED\n/opt/svn/google-caja/build.xml:1121: transform doesn't support the nested \n&quot;include&quot; element.\n\n&gt; Please provide any additional information below.\n\nCurrently shown on http://cajadores.com/target.html#demos\n\nI also recreated the problem on my Ubuntu Karmic x86_32 workstation using \nthe openjdk and ant which is standard for that platform.\n", "created": "2015-04-16 04:08:06"}, {"url": "https://github.com/google/caja/issues/1175", "closed": "2015-04-16 04:08:06", "ttf": 0.0002777777777777778, "title": "Make available a deterministic version of Cajita", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1175](https://code.google.com/p/google-caja/issues/detail?id=1175) created by jasvir on 2009-11-29T23:50:43.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1.  See http://code.google.com/p/google-\ncaja/wiki/SourcesOfNonDeterminism\n\n<b>What is the expected output? What do you see instead?</b>\n1. Remove access to the zero argument Date constructor (Issue 449)\n2. There should be versions of allKeys, ownKeys and getOwnProperty \n   names which return an deterministically ordered list. \n3. for..in loops in Cajita are currently disallowed.  It should get rewritten to \n   cajita.forAllKeys which in turn would use the determinisitic allKeys from (2)\n4. Unexpected errors should not be catchable in cajita (Issue 460)\n5. Implement a stable cajita.sort to expose to cajoled code as Array.sort\n", "created": "2015-04-16 04:07:46"}, {"url": "https://github.com/google/caja/issues/1174", "closed": "2015-04-16 04:07:46", "ttf": 0.0002777777777777778, "title": "bridal <button> clone in ie[67]", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1174](https://code.google.com/p/google-caja/issues/detail?id=1174) created by felix8a on 2009-11-23T23:57:34.000Z:\n\nie[67] doesn't let you change a button's type after it's created.  it's the same as the &lt;input&gt; type \nproblem, you have to specify the type in createElement.  bridal's cloneNode handles &lt;input&gt; \ncorrectly but not &lt;button.\n", "created": "2015-04-16 04:07:42"}, {"url": "https://github.com/google/caja/issues/1173", "closed": "2015-04-16 04:07:41", "ttf": 0.0002777777777777778, "title": "Can't implicitly set global variables in testbed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1173](https://code.google.com/p/google-caja/issues/detail?id=1173) created by metaweta on 2009-11-23T01:49:25.000Z:\n\nx=1;\n\nfails to cajole.\n", "created": "2015-04-16 04:07:37"}, {"url": "https://github.com/google/caja/issues/1172", "closed": "2015-04-16 04:07:37", "ttf": 0.0002777777777777778, "title": "window is undefined in the testbed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1172](https://code.google.com/p/google-caja/issues/detail?id=1172) created by metaweta on 2009-11-23T01:48:45.000Z:\n\n&lt;div onclick=&quot;this.innerHTML=window;&quot;&gt;asdads&lt;/div&gt;\n\nClicking on it changes the text to undefined.\n", "created": "2015-04-16 04:07:28"}, {"url": "https://github.com/google/caja/issues/1171", "closed": "2015-04-16 04:07:28", "ttf": 0.0002777777777777778, "title": "IE[67] throws when setting type of buttons", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1171](https://code.google.com/p/google-caja/issues/detail?id=1171) created by felix8a on 2009-11-21T00:33:10.000Z:\n\nUnlike other browsers, IE[67] doesn't let you change the\ntype of a &lt;button&gt; element.\n\nIn IE[67] without caja, el.setAttribute('type', 'button') silently fails.\nIn IE[67] using caja, el.setAttribute('type', 'button') throws an error.\nthe inconsistency is a problem.\nI think I'm going to make it silently fail.\n\nso.. there are three plausible methods of changing a button's type:\n\nSA\n    button.setAttribute('type', foo);\n\nSN\n    a = document.createAttribute('type');\n    a.value = foo;\n    button.setAttributeNode(a);\n\nSP\n   button.type = foo;\n\nand this is how browsers behave\n\nchrome 4.0.249.0\nsafari 4.0.4\nopera 10.01\n  SA ok, SN ok, SP ignored\n\nfirefox 3.0.15\nfirefox 3.5.5\n  SA ok, SN ok, SP ok\n\nie6\nie7\nie8-compat\n  SA ignored, SN throw &quot;Not implemented&quot;, SP throw &quot;Object doesn't support this action&quot;\n\nie8-std\n  SA ok, SN ok, SP throw &quot;Object doesn't support this action&quot;\n", "created": "2015-04-16 04:07:23"}, {"url": "https://github.com/google/caja/issues/1170", "closed": "2015-04-16 04:07:23", "ttf": 0.0002777777777777778, "title": "domita_test testUsemap fails on IE[67]", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1170](https://code.google.com/p/google-caja/issues/detail?id=1170) created by felix8a on 2009-11-20T07:59:15.000Z:\n\ntestUsemap fails on IE[67] because\nhtml source &lt;map name=&quot;foo&quot;&gt;\ngets transformed into &lt;map id=&quot;id_xxx___&quot;&gt;\nwith the name attribute set by html-emitter code,\nwhich is necessary to add the per-gadget-instance suffix.\n\nhowever, IE[67] doesn't ever let you change the name of\nan existing element, you have to pass in the name attribute\nwhen you do createElement.\n\nthis also affects IE8 in compatibility mode.\n", "created": "2015-04-16 04:07:19"}, {"url": "https://github.com/google/caja/issues/1169", "closed": "2015-04-16 04:07:18", "ttf": 0.0002777777777777778, "title": "assigning el.style.opacity = x has no effect in IE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1169](https://code.google.com/p/google-caja/issues/detail?id=1169) created by lucas.e.smith on 2009-11-20T07:11:04.000Z:\n\ndocument.getElementById('x').style.opacity = '.3';\n\nis not translated to\nstyle.filter = 'alpha(opacity=30)';\n\nfor IE.\n\nBeyond the simple case that could be addressed with classes, this affects\nopacity animations (fade in, fade out).\n", "created": "2015-04-16 04:07:10"}, {"url": "https://github.com/google/caja/issues/1168", "closed": "2015-04-16 04:07:09", "ttf": 0.0002777777777777778, "title": "domita_test is never \"Ready for testing\" on ie[67]", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1168](https://code.google.com/p/google-caja/issues/detail?id=1168) created by felix8a on 2009-11-18T03:32:33.000Z:\n\non ie[67] and ie8 in compatibility mode,\nthe &quot;Ready for testing&quot; div never turns green,\nbecause domita_test.html is using el.setAttribute('class'),\nwhich doesn't actually change the div's class.\n", "created": "2015-04-16 04:07:05"}, {"url": "https://github.com/google/caja/issues/1167", "closed": "2015-04-16 04:07:05", "ttf": 0.0002777777777777778, "title": "domita_test testCommonJsModule fails on opera 10", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1167](https://code.google.com/p/google-caja/issues/detail?id=1167) created by felix8a on 2009-11-18T03:27:50.000Z:\n\nfails @r3848\nsee spreadsheet in bug 1149\n", "created": "2015-04-16 04:07:00"}, {"url": "https://github.com/google/caja/issues/1166", "closed": "2015-04-16 04:07:00", "ttf": 0.0002777777777777778, "title": "domita_test testRowCell fails on opera 10", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1166](https://code.google.com/p/google-caja/issues/detail?id=1166) created by felix8a on 2009-11-18T03:26:24.000Z:\n\nfails @r3848\nsee spreadsheet in bug 1149\n", "created": "2015-04-16 04:06:55"}, {"url": "https://github.com/google/caja/issues/1165", "closed": "2015-04-16 04:06:55", "ttf": 0.0002777777777777778, "title": "domita_test testCustomEvent fails on opera 10", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1165](https://code.google.com/p/google-caja/issues/detail?id=1165) created by felix8a on 2009-11-18T03:25:19.000Z:\n\nfails @r3848\nsee spreadsheet in bug 1149\n", "created": "2015-04-16 04:06:51"}, {"url": "https://github.com/google/caja/issues/1164", "closed": "2015-04-16 04:06:51", "ttf": 0.0002777777777777778, "title": "domita_test testRecursiveModule fails in IE[67]", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1164](https://code.google.com/p/google-caja/issues/detail?id=1164) created by felix8a on 2009-11-18T03:24:10.000Z:\n\nfails @r3848\nsee spreadsheet in bug 1149\n\naffects ie6, ie7, and ie8 in compatibility mode\n", "created": "2015-04-16 04:06:48"}, {"url": "https://github.com/google/caja/issues/1163", "closed": "2015-04-16 04:06:48", "ttf": 0.0002777777777777778, "title": "domita_test testDocumentWrite fails on IE[678]", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1163](https://code.google.com/p/google-caja/issues/detail?id=1163) created by felix8a on 2009-11-18T03:22:33.000Z:\n\nfails @r3848\nsee spreadsheet in bug 1149\n\nthis seems to be just an issue with\nhtml normalization before comparing the result.\n", "created": "2015-04-16 04:06:44"}, {"url": "https://github.com/google/caja/issues/1162", "closed": "2015-04-16 04:06:44", "ttf": 0.0002777777777777778, "title": "domita_test testArraySlice fails on chrome, opera, safari", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1162](https://code.google.com/p/google-caja/issues/detail?id=1162) created by felix8a on 2009-11-18T03:20:09.000Z:\n\nfails @r3848\nsee spreadsheet in bug 1149\n", "created": "2015-04-16 04:06:35"}, {"url": "https://github.com/google/caja/issues/1161", "closed": "2015-04-16 04:06:35", "ttf": 0.0002777777777777778, "title": "Possible to support el.style.cssText = ...?", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI", "jQuery"], "commitsDetails": [], "body": "Original [issue 1161](https://code.google.com/p/google-caja/issues/detail?id=1161) created by lucas.e.smith on 2009-11-18T00:11:12.000Z:\n\nUpdating the cssText property of a style collection is useful to limit\nbrowser reflows.  It's also convenient to reduce code size, though this is\nprimarily a side effect.\n\nel.style.padding = '0';\nel.style.margin = '5px 10px';\n\ncan be rewritten as\nel.style.cssText += ';padding:0;margin:5px 10px;';\n", "created": "2015-04-16 04:06:21"}, {"url": "https://github.com/google/caja/issues/1160", "closed": "2015-04-16 04:06:21", "ttf": 0.0002777777777777778, "title": "el.style.backgroundColor = 'rgb(0,0,0)'; reports bad value", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1160](https://code.google.com/p/google-caja/issues/detail?id=1160) created by lucas.e.smith on 2009-11-17T23:54:23.000Z:\n\ndocument.getElementsByTagName('p')[0].style.backgroundColor = 'rgb(0,0,0)';\n\nAlso, considering the applied fix to 833\nhttp://code.google.com/p/google-caja/issues/detail?id=826&amp;can=1&amp;q=rgb#makechanges\n\n'rgba(n,n,n,n)' should be allowed as a value where appropriate.\n\nYUI uses rgb(..) syntax for color animations.\n", "created": "2015-04-16 04:06:12"}, {"url": "https://github.com/google/caja/issues/1159", "closed": "2015-04-16 04:06:12", "ttf": 0.0002777777777777778, "title": "missing json_simple reference in caja.pom", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1159](https://code.google.com/p/google-caja/issues/detail?id=1159) created by lindner+unused1@inuus.com on 2009-11-17T21:24:25.000Z:\n\nWhat revision of the cajoler exhibits the problem? r3828\n\nLooks like there's a missing dep in the caja-template.pom.  Can we add this?\n\n&lt;dependency&gt;\n    &lt;groupId&gt;com.googlecode.json-simple&lt;/groupId&gt;\n    &lt;artifactId&gt;json-simple&lt;/artifactId&gt;\n    &lt;version&gt;1.1&lt;/version&gt;\n&lt;/dependency&gt;\n", "created": "2015-04-16 04:06:05"}, {"url": "https://github.com/google/caja/issues/1158", "closed": "2015-04-16 04:06:05", "ttf": 0.0002777777777777778, "title": "ant out of memory", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1158](https://code.google.com/p/google-caja/issues/detail?id=1158) created by felix8a on 2009-11-16T03:57:53.000Z:\n\nsometime before @r3846, build from scratch started\nfailing for me, out of heap space.  ie,\n  $ ant clean\n  $ ant AllTests\ngets java.lang.OutOfMemoryError: Java heap space\nwhile transforming domita_test_untrusted.html\n\nincremental builds are usually ok.\nafter getting that failure, if I do\n  $ ant AllTests\nthen it succeeds.\n\nworkaround is to set ANT_OPTS, such as\n  $ env ANT_OPTS='-Xmx256m' ant AllTests\n", "created": "2015-04-16 04:06:01"}, {"url": "https://github.com/google/caja/issues/1157", "closed": "2015-04-16 04:06:01", "ttf": 0.0002777777777777778, "title": "Linter warns on use of Boolean expressions as conditionals", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1157](https://code.google.com/p/google-caja/issues/detail?id=1157) created by ihab.awad on 2009-11-13T22:50:01.000Z:\n\nIf I add to some of the files we now lint, like say cajita.js, the code:\n\n  (function() {  \n    function foo(x) {  \n      !!x &amp;&amp; x();  \n    }  \n  })();                                                                                                                                            \n\nI get the messages:\n\n  [genrule] WARNING : cajita.js:35+5 - 15: Operation has no effect\n  [genrule] cajita.js:35:     !!x &amp;&amp; x();\n  [genrule]                   ^^^^^^^^^^\n  [genrule]   1 NO_SIDE_EFFECT\n", "created": "2015-04-16 04:05:54"}, {"url": "https://github.com/google/caja/issues/1156", "closed": "2015-04-16 04:05:54", "ttf": 0.0002777777777777778, "title": "JSON.parse infinite loop in browsers with native JSON", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1156](https://code.google.com/p/google-caja/issues/detail?id=1156) created by lucas.e.smith on 2009-11-12T01:01:56.000Z:\n\nJSON.parse('{&quot;boom&quot;:1}');\n\nDifficult to debug this.  It is calling the reviver function passed in\ncajita.js:4110\n\nreturn nativeJSON.parse(text, function (key, value) {\n      return canSetPub(this, key) ? value : void 0;\n});\n\nbut IE8 dev tools break at the reviver only once for the proto___ property\nbefore throwing an &quot;Out of stack space&quot; error.  Safari crashes.  Firefox\n3.5 doesn't crash, and returns an object, but I haven't looked into the\nproperties or depth of the returned object (no console.log ftl)\n", "created": "2015-04-16 04:05:45"}, {"url": "https://github.com/google/caja/issues/1154", "closed": "2015-04-16 04:05:21", "ttf": 0.0002777777777777778, "title": "selectEl.options.selectedIndex is undefined", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1154](https://code.google.com/p/google-caja/issues/detail?id=1154) created by lucas.e.smith on 2009-11-04T21:47:13.000Z:\n\ndocument.getElementsByTagName('select')[0].onchange = function () {\n    cajita.log( this.options.selectedIndex );\n};\n\nThe options collection should mirror the selectedIndex property hung on the\nselect element.\n\nsel.selectedIndex should be equivalent to sel.options.selectedIndex.\n\nThis is used in YUI DataTable (today, but will be moved to\nsel.selectedIndex in the future).\n", "created": "2015-04-16 04:05:16"}, {"url": "https://github.com/google/caja/issues/1153", "closed": "2015-04-16 04:05:16", "ttf": 0.0002777777777777778, "title": "tdEl.cellIndex is undefined", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1153](https://code.google.com/p/google-caja/issues/detail?id=1153) created by lucas.e.smith on 2009-11-03T22:15:35.000Z:\n\n&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td id=&quot;x&quot;&gt;foo&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;\n&lt;script&gt;\ncajita.log(document.getElementById('x').cellIndex);\n&lt;/script&gt;\n\nEvery cell in a table has a cellIndex property marking its current position\nin the row.\n\nThis article itemizes the Table API fairly well:\nhttp://www.howtocreate.co.uk/tutorials/javascript/domtables\n\ncellIndex is referenced extensively in YUI DataTable\n", "created": "2015-04-16 04:05:07"}, {"url": "https://github.com/google/caja/issues/1152", "closed": "2015-04-16 04:05:07", "ttf": 0.0002777777777777778, "title": "r3794 breaks AllTests", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "NotGreen", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1152](https://code.google.com/p/google-caja/issues/detail?id=1152) created by ihab.awad on 2009-10-13T22:52:42.000Z:\n\nr3792 passes all tests\nr3794 breaks a few tests\n\nSome of the failures are listed below.\n\n```\n[junit] Running com.google.caja.parser.quasiliteral.CajitaRewriterTest\n[junit] ]\n[junit]     at /com/google/caja/cajita.js:2639 (handle)\n[junit]     at /com/google/caja/cajita.js:1739 (callPub)\n[junit]     at /com/google/caja/cajita.js:2735 (loadModule)\n[junit]     at testStringIndexing2-cajoled:2\n[junit] )\n[junit]   Reference\n[junit]     Identifier : x\n[junit]   StringLiteral : 'test')\n[junit] ]\n[junit]     at /com/google/caja/cajita.js:2639 (handle)\n[junit]     at /com/google/caja/cajita.js:1739 (callPub)\n[junit]     at /com/google/caja/cajita.js:2735 (loadModule)\n[junit]     at testRecordInheritance-cajoled:2\n[junit] )\n[junit]   Identifier : this)\n[junit] Tests run: 143, Failures: 4, Errors: 0, Time elapsed: 29,605 \n```\n\nsec\n    [junit] Test com.google.caja.parser.quasiliteral.CajitaRewriterTest \nFAILED\n    [junit] Running \ncom.google.caja.parser.quasiliteral.DefaultValijaRewriterTest\n    [junit] ]\n    [junit]     at ../../../../../js/jsunit/2.2/jsUnitCore.js:137 (_assert)\n    [junit]     at ../../../../../js/jsunit/2.2/jsUnitCore.js:174 \n(assertEquals)\n    [junit]     at testForIn1-post:1\n    [junit] )\n", "created": "2015-04-16 04:04:58"}, {"url": "https://github.com/google/caja/issues/1150", "closed": "2015-04-16 04:04:53", "ttf": 0.0002777777777777778, "title": "Add cross-browser webdriver tests", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1150](https://code.google.com/p/google-caja/issues/detail?id=1150) created by jasvir on 2009-10-12T19:05:46.000Z:\n\nRunning &quot;ant runtests&quot; only runs DomitaTest on Firefox.  \n- DomitaTest should be run on multiple available browsers (configurable)\n- Continuous builder should test Domita test on a farm of mutiple browsers \n  and OSs.\n", "created": "2015-04-16 04:04:42"}, {"url": "https://github.com/google/caja/issues/1149", "closed": "2015-04-16 04:04:42", "ttf": 0.0002777777777777778, "title": "domita_test browser failure summary", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1149](https://code.google.com/p/google-caja/issues/detail?id=1149) created by felix8a on 2009-10-08T01:45:20.000Z:\n\nI'm running domita_test.html manually,\nbuilt from @r3786 plus the patch at\nhttp://codereview.appspot.com/129045/show\n\nall\n    bug 1080 - testScriptLoading is disabled because it crashes ie[67]\n\nchrome-4.0.221.8\n    cajita: 1/105 fail, 96/105 pass, 8 missing\n        bug 1140 - 1 fail, testUsemap\n        bug 1145 - 7 missing, ModuleLoader tests\n        bug 1147 - 1 missing, onload doesn't fire\n    valija: 7/105 fail, 92/105 pass, 6 missing\n        bug 1140 - 1 fail, testUsemap\n        bug 1148 - 6 fail, regexp problem\n        bug 1145 - 5 missing, ModuleLoader tests\n        bug 1147 - 1 missing, onload doesn't fire\n\nfirefox-3.0.14 and\nfirefox-3.5.3\n    cajita: 0/105 fail, 98/105 pass, 7 missing\n        bug 1145 - 7 missing, ModuleLoader tests\n    valija: 0/105 fail, 100/105 pass, 5 missing\n        bug 1145 - 5 missing, ModuleLoader tests\n\nIE-6 and\nIE-7 and\nIE-8-compat\n    cajita: 7/105 fail, 93/105 pass, 5 missing\n        bug 1140 - 1 fail, testUsemap\n        bug 1143 - 1 fail, _testSideEffectTestFramework\n        bug 1144 - 5 fail, ModuleLoader failures\n        bug 1145 - 4 missing, ModuleLoader tests\n        bug 1147 - 1 missing, onload doesn't fire\n    valija: 8/105 fail, 95/105 pass, 2 missing\n        bug 1140 - 1 fail, testUsemap\n        bug 1143 - 1 fail, _testSideEffectTestFramework\n        bug 1144 - 6 fail, ModuleLoader failures\n        bug 1145 - 1 missing, ModuleLoader tests\n        bug 1147 - 1 missing, onload doesn't fire\n\nIE-8-standards\n    cajita: 9/105 fail, 91/105 pass, 5 missing\n        bug 1140 - 1 fail, testUsemap\n        bug 1142 - 2 fail, cloneNode\n        bug 1143 - 1 fail, _testSideEffectTestFramework\n        bug 1144 - 5 fail, ModuleLoader failures\n        bug 1145 - 4 missing, ModuleLoader tests\n        bug 1147 - 1 missing, onload doesn't fire\n    valija: 10/105 fail, 93/105 pass, 2 missing\n        bug 1140 - 1 fail, testUsemap\n        bug 1142 - 2 fail, cloneNode\n        bug 1143 - 1 fail, _testSideEffectTestFramework\n        bug 1144 - 6 fail, ModuleLoader failures\n        bug 1145 - 1 missing, ModuleLoader tests\n        bug 1147 - 1 missing, onload doesn't fire\n\nopera-9.26\n    bug 1138 - tests don't work\n\nopera-10.00\n    cajita: 7/105 fail, 90/105 pass, 8 missing\n        bug 1140 - 1 fail, testUsemap\n        bug 1141 - 6 fail, color normalization\n        bug 1145 - 7 missing, ModuleLoader tests\n        bug 1147 - 1 missing, onload doesn't fire\n    valija: 7/105 fail, 92/105 pass, 6 missing\n        bug 1140 - 1 fail, testUsemap\n        bug 1141 - 6 fail, color normalization\n        bug 1145 - 5 missing, ModuleLoader tests\n        bug 1147 - 1 missing, onload doesn't fire\n\nsafari-3.2.1\n    bug 1139 - tests don't work\n\nsafari-4.0.3\n    cajita: 1/105 fail, 96/105 pass, 8 missing\n        bug 1140 - 1 fail, testUsemap\n        bug 1145 - 7 missing, ModuleLoader tests\n        bug 1147 - 1 missing, onload doesn't fire\n    valija: 1/105 fail, 98/105 pass, 6 missing\n        bug 1140 - 1 fail, testUsemap\n        bug 1145 - 5 missing, ModuleLoader tests\n        bug 1147 - 1 missing, onload doesn't fire\n", "created": "2015-04-16 04:04:35"}, {"url": "https://github.com/google/caja/issues/1148", "closed": "2015-04-16 04:04:35", "ttf": 0.0002777777777777778, "title": "domita_test regexp.test() failure in chrome", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1148](https://code.google.com/p/google-caja/issues/detail?id=1148) created by felix8a on 2009-10-08T01:40:42.000Z:\n\nwhen running domita_test.html?valija=1 on chrome-4.0.221.8\n6 tests fail with an error message like:\n        callMethod: /^[&quot;']/ has no method test\n\nthey work fine in cajita mode.\n\nthe 6 failing tests are\n            testForms\n            testIdRefsRewriting\n            testInnerHtml\n            testPropsOnNodes\n            testReplaceChild\n            testSetStyle\n", "created": "2015-04-16 04:04:33"}, {"url": "https://github.com/google/caja/issues/1147", "closed": "2015-04-16 04:04:32", "ttf": 0.0002777777777777778, "title": "domita_test testOnloadListener fails on most browsers", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1147](https://code.google.com/p/google-caja/issues/detail?id=1147) created by felix8a on 2009-10-08T01:38:10.000Z:\n\ntestOnloadListener seems to only work on firefox.\nall the other browsers I try, it times out.\n\nthis might be due to some other test failing.\n", "created": "2015-04-16 04:04:30"}, {"url": "https://github.com/google/caja/issues/1146", "closed": "2015-04-16 04:04:30", "ttf": 0.0002777777777777778, "title": "domita_test attribute-related failures on IE[67]", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1146](https://code.google.com/p/google-caja/issues/detail?id=1146) created by felix8a on 2009-10-08T00:02:18.000Z:\n\non IE[67] domita_test doesn't run without this fix,\nwhich also fixes some problems with getAttribute and setAttribute:\n\nhttp://codereview.appspot.com/129045/show\n", "created": "2015-04-16 04:04:28"}, {"url": "https://github.com/google/caja/issues/1145", "closed": "2015-04-16 04:04:27", "ttf": 0.0002777777777777778, "title": "domita_test ModuleLoader tests don't work when run manually", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1145](https://code.google.com/p/google-caja/issues/detail?id=1145) created by felix8a on 2009-10-07T23:28:46.000Z:\n\nwhen I try to run domita_test.html manually,\nserved from a local apache,\nthe ModuleLoader tests don't fail, but don't pass.\n\nit's getting 404 for the files it's trying to load,\nbecause it's using the wrong path.\n\nI'm loading the page\n  http://localhost:8888/felix/caja/github/ant-lib/com/google/caja/plugin/domita_test.html\nand the module loader is trying to fetch\n  http://localhost:8888/ant-lib/com/google/caja/b.co.js\n", "created": "2015-04-16 04:04:23"}, {"url": "https://github.com/google/caja/issues/1144", "closed": "2015-04-16 04:04:23", "ttf": 0.0002777777777777778, "title": "domita_test ModuleLoader failures on IE[678]", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1144](https://code.google.com/p/google-caja/issues/detail?id=1144) created by felix8a on 2009-10-07T23:12:52.000Z:\n\ndomita_test has 5 ModuleLoader failures on IE\nexception is &quot;Object doesn't support this property or method&quot;\n\nI don't see any PASSes for any ModuleLoader test,\nso it might not work at all on IE.\n", "created": "2015-04-16 04:04:18"}, {"url": "https://github.com/google/caja/issues/1143", "closed": "2015-04-16 04:04:18", "ttf": 0.0002777777777777778, "title": "domita_test _testSideEffectTestFramework fails on IE[678]", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1143](https://code.google.com/p/google-caja/issues/detail?id=1143) created by felix8a on 2009-10-07T23:06:12.000Z:\n\nexception logged is &quot;Unknown runtime error&quot;\n", "created": "2015-04-16 04:04:14"}, {"url": "https://github.com/google/caja/issues/1142", "closed": "2015-04-16 04:04:13", "ttf": 0.0002777777777777778, "title": "domita_test cloneNode failures in ie8-std", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1142](https://code.google.com/p/google-caja/issues/detail?id=1142) created by felix8a on 2009-10-07T22:55:12.000Z:\n\nie8 in standards mode has two failures\nthat don't happen when ie8 is in compatibility mode\n\nFAIL: testCloneNodeDefaults\nFAIL: testCloneNodeListeners\n", "created": "2015-04-16 04:04:09"}, {"url": "https://github.com/google/caja/issues/1141", "closed": "2015-04-16 04:04:09", "ttf": 0.0002777777777777778, "title": "domita_test failures on opera-10.00", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1141](https://code.google.com/p/google-caja/issues/detail?id=1141) created by felix8a on 2009-10-07T22:49:09.000Z:\n\ndomita_test has 7 failures on opera-10.00\n\none is issue 1140\n\nthe other 6 are color normalization issues.\nopera's getComputedStyle returns colors\nin an unexpected format.\n", "created": "2015-04-16 04:04:04"}, {"url": "https://github.com/google/caja/issues/1140", "closed": "2015-04-16 04:04:04", "ttf": 0.0002777777777777778, "title": "domita_test testUsemap fails on some browsers", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1140](https://code.google.com/p/google-caja/issues/detail?id=1140) created by felix8a on 2009-10-07T22:46:54.000Z:\n\ndomita_test testUsemap fails on some browsers\ndue to case normalization.\n\nthe test is reading .innerHTML and expecting &quot;&lt;map ...&quot;\nbut in some browsers the value is &quot;&lt;MAP ...&quot;\n\nprobably can use the canonInnerHTML function in domita_test_untrusted.html\n", "created": "2015-04-16 04:04:00"}, {"url": "https://github.com/google/caja/issues/1139", "closed": "2015-04-16 04:03:59", "ttf": 0.0002777777777777778, "title": "domita_test fails to run on safari-3.2.1", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1139](https://code.google.com/p/google-caja/issues/detail?id=1139) created by felix8a on 2009-10-07T22:41:28.000Z:\n\non safari-3.2.1, domita_test.html aborts while\nhandling the XHR that tries to load the cajoled test page.\n\nI think this is low priority because domita_test runs on safari-4.0\nand safari-4.0 is A-grade,\nbut safari-3.2 is currently still A-grade too.\n", "created": "2015-04-16 04:03:57"}, {"url": "https://github.com/google/caja/issues/1138", "closed": "2015-04-16 04:03:57", "ttf": 0.0002777777777777778, "title": "domita_test fails to run on opera-9.64", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1138](https://code.google.com/p/google-caja/issues/detail?id=1138) created by felix8a on 2009-10-07T22:38:24.000Z:\n\ndomita_test.html causes opera-9.64 to get stuck spinning cpu.\nI have to kill -9.\n\nI think this is low-priority because domita_test does run on opera-10.00,\nbut at the moment opera-9.64 is an A-grade browser,\nand opera-10.00 is not.\n", "created": "2015-04-16 04:03:55"}, {"url": "https://github.com/google/caja/issues/1136", "closed": "2015-04-16 04:03:47", "ttf": 0.0002777777777777778, "title": "async load module clobbers new module handler", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1136](https://code.google.com/p/google-caja/issues/detail?id=1136) created by mikesamuel on 2009-10-03T02:06:46.000Z:\n\nThe async module loader installs a module handler that does not have a\nhandleUncaughtExceptionHandler installed.\n\nThis means that if a script loads a module asynchronously, and then fails\nwith an exception, that the uncaught exception handler is never invoked.\n", "created": "2015-04-16 04:03:45"}, {"url": "https://github.com/google/caja/issues/1135", "closed": "2015-04-16 04:03:45", "ttf": 0.0002777777777777778, "title": "Domita test broken on some systems from r3766", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1135](https://code.google.com/p/google-caja/issues/detail?id=1135) created by metaweta on 2009-10-02T23:19:00.000Z:\n\nOn my machine and on erights' machine, the webdriven domita test fails\nstarting with r3766.  It works on ihab's and mikesamuels' machines.\n", "created": "2015-04-16 04:03:40"}, {"url": "https://github.com/google/caja/issues/1134", "closed": "2015-04-16 04:03:40", "ttf": 0.0002777777777777778, "title": "Hang in Domita test", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "NotGreen", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1134](https://code.google.com/p/google-caja/issues/detail?id=1134) created by erights on 2009-10-02T22:46:28.000Z:\n\nOn a pristine checkout of head (r3772), running &quot;ant runtests&quot; hangs in the\nmidst of DomitaTest. It has happened several times but I'm not sure it\nhappens every time. Mike Stay got the same hang. Ihab did not.\n\nIt reproducibly hangs at 0/104 fail, 97/104 pass. The end of the rendered\ntest page shows:\n\n0/104 fail 87/104 pass - Domita (Netscape 5.0 (Macintosh; en-US))\nset onload b2\nPASS: script-module-loader-failure\nPASS: xhr-module-loader-failure\nPASS: xhr-module-loader\nPASS: script-module-loader\nPASS: xhr-unbundled-module-loader\nPASS: script-unbundled-module-loader\nPASS: xhr-module-loader-2\nPASS: script-module-loader-2\nPASS: recursive-module\nPASS: test-timeout-and-interval\n", "created": "2015-04-16 04:02:58"}, {"url": "https://github.com/google/caja/issues/1133", "closed": "2015-04-16 04:02:58", "ttf": 0.0002777777777777778, "title": "confusing error message: \"Can't use key lifetime on primitive keys\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1133](https://code.google.com/p/google-caja/issues/detail?id=1133) created by felix8a on 2009-10-01T21:08:41.000Z:\n\n&lt;div id=&quot;x&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\nvar x = document.getElementById('x');\nx.appendChild(null);\n&lt;/script&gt;\n\nappendChild tries to verify that its arg has a TameNode trademark.\nthe trademark checker tries to table.get(null).\ntable.get emits the error message &quot;Can't use key lifetime on primitive keys&quot;.\n\na developer unfamiliar with caja internals will probably have no idea what\ncaused the error or how to fix it.\n", "created": "2015-04-16 04:02:49"}, {"url": "https://github.com/google/caja/issues/1132", "closed": "2015-04-16 04:02:49", "ttf": 0.0002777777777777778, "title": "event.currentTarget is not settable", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1132](https://code.google.com/p/google-caja/issues/detail?id=1132) created by felix8a on 2009-10-01T21:02:41.000Z:\n\ndomita has a read handler for currentTarget,\nbut not a write handler.\n\nYUI tries to set a currentTarget value when\nit notices that it isn't set (such as in IE[678]),\nbut fails because currentTarget isn't writable.\n", "created": "2015-04-16 04:02:32"}, {"url": "https://github.com/google/caja/issues/1131", "closed": "2015-04-16 04:02:32", "ttf": 0.0002777777777777778, "title": "constructClone in bridal.js doesn't account for IE's setAttribute bugs", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1131](https://code.google.com/p/google-caja/issues/detail?id=1131) created by lucas.e.smith on 2009-10-01T05:42:40.000Z:\n\nIn IE node.setAttribute('class', 'foo') will set a property named 'class'\non the node, but will not update its className.  Similarly with\nsetAttribute('for', 'foo') not translating to node.htmlFor.  IE requires\nsetAttribute('className', 'foo') and setAttribute('htmlFor', 'foo').\n\nvar x = document.createElement('div');\nx.innerHTML = '&lt;p class=&quot;foo&quot;&gt;Lorem ipsum&lt;/p&gt;';\nvar y = x.cloneNode(true);\n\nThis affects a number of widgets in YUI when viewed in IE.\n", "created": "2015-04-16 04:02:05"}, {"url": "https://github.com/google/caja/issues/1130", "closed": "2015-04-16 04:02:05", "ttf": 0.0002777777777777778, "title": "domita.js setInnerHTML converts 0 and false to the empty string", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1130](https://code.google.com/p/google-caja/issues/detail?id=1130) created by lucas.e.smith on 2009-09-30T05:12:42.000Z:\n\nnode.innerHTML = 0; or = false;\n\nThe setter for innerHTML in domita.js includes this:\nsanitizedHtml = (htmlFragment instanceof Html\n    ? safeHtml(htmlFragment)\n    : sanitizeHtml(String(htmlFragment || '')));\n\nIn this case htmlFragment is number 0 or boolean false.\n\nThis doesn't directly affect YUI porting, but tag applied for tracking.\n", "created": "2015-04-16 04:02:03"}, {"url": "https://github.com/google/caja/issues/1129", "closed": "2015-04-16 04:02:03", "ttf": 0.0002777777777777778, "title": "js that performs user actions like submit() or click()", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1129](https://code.google.com/p/google-caja/issues/detail?id=1129) created by felix8a on 2009-09-29T20:27:50.000Z:\n\nthe YUI button class creates 'submit' buttons\nby creating an &lt;a&gt; with an onclick handler\nthat eventually calls form.submit().\n\nthere's also a keypress handler that will\ninvoke form.submit() when you press enter.\n\nin general it's not safe to let untrusted js\ncall submit (or click, or focus, etc.), since that\ncan be used to perform unintended actions\nas the user.\n\nhowever, it's pretty common for js to attach\nsubmit() or click() to UI controls, in a way that's\nexpected to work in response to user action.\n\ndomita currently does support focus(),\nlimiting it to firing when isProcessingEvent___,\nbut domita doesn't support submit() or click().\n\nok, first...\n\nat the moment, caja kind of assumes that form submit\ncan never happen.  form submit handlers get rewritten\nto always prevent the default action, and no submit()\nmethod is exposed.\n\nwhat I'd like instead is a way for the container to define\na form submit policy.  it's plausible that a container\nmight want to let gadgets do submit &quot;naturally&quot;, and\nthen simulate the behavior of a submit within the\nconfines of a sandbox.\n\nsecond...\n\nallowing untrusted js to call click() or submit() in\na safe way.\n1. maybe this isn't possible at all, and we just\n   have to document it.\n2. a plausible workaround in some cases is to\n   allow &quot;default&quot; handlers to fire.  so, untrusted js\n   wouldn't be able to invoke submit() directly, but\n   could allow the event to bubble to a default handler\n   set by the container.\n\nthis doesn't quite fix the YUI problem, because\nbrowser submit buttons have limited style/appearance\noptions.  YUI buttons can be &lt;a&gt; elements with\narbitrary appearance, and for those to act like\nsubmit buttons, they have to call form.submit() explicitly.\n1. submit() could use the same strategy as focus(),\n   and fire only when we know that it's in response to\n   a user event.\n\nthe problem is, isProcessingEvent___ is not a strong\nenough constraint.  like, I could call submit() on\na mousemove handler.\n\n(calling focus() on a mousemove handler might also\nbe a problem.)\n1. domita could check a form.submit() against the currently\n   dispatched event, and allow it only when the form and\n   the event are &quot;related&quot; in some way.\n\ndon't know what else.\n", "created": "2015-04-16 04:01:34"}, {"url": "https://github.com/google/caja/issues/1127", "closed": "2015-04-16 04:01:23", "ttf": 0.0002777777777777778, "title": "Numeric whitelisting seems broken", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1127](https://code.google.com/p/google-caja/issues/detail?id=1127) created by metaweta on 2009-09-24T18:31:00.000Z:\n\nfunction f() {\n  var i = [];\n  var j = 3;\n  i[j] = 1;\n  i[j&amp;(-1&gt;&gt;&gt;1)] = 2;\n  i[+j] = 3;\n}\n\nNone of the above attempts manage to trigger the numeric whitelisting.\n", "created": "2015-04-16 04:01:16"}, {"url": "https://github.com/google/caja/issues/1126", "closed": "2015-04-16 04:01:16", "ttf": 0.0002777777777777778, "title": "'offsetParent' attribute of DOM elements not exposed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1126](https://code.google.com/p/google-caja/issues/detail?id=1126) created by jasvir on 2009-09-17T02:02:52.000Z:\n\nPosting on behalf of moishe:\n\nWhen my code is cajoled, it loses the 'offsetParent' attribute of DOM \nelements.\n\nThe below gadget prints 'no' with caja required, 'yes' without it.\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;Module&gt;\n &lt;ModulePrefs title=&quot;caja test&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;\n   &lt;Require feature=&quot;caja&quot;/&gt;\n &lt;/ModulePrefs&gt;\n &lt;Content type=&quot;html&quot;&gt;&lt;![CDATA[\n   &lt;div id='outer' style='margin:10px;'&gt;\n     &lt;div id='inner' style='margin:10px;'/&gt;\n   &lt;/div&gt;\n   &lt;script type=&quot;text/javascript&quot;&gt;\n     var divTest = document.getElementById('inner');\n     divTest.innerHTML = divTest.offsetParent == null ? 'no' : 'yes';\n   &lt;/script&gt;\n ]]&gt;&lt;/Content&gt;\n&lt;/Module&gt;\n", "created": "2015-04-16 04:01:02"}, {"url": "https://github.com/google/caja/issues/1125", "closed": "2015-04-16 04:01:02", "ttf": 0.0002777777777777778, "title": "className property isn't cleared when set to ''", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1125](https://code.google.com/p/google-caja/issues/detail?id=1125) created by jasvir on 2009-09-17T02:01:15.000Z:\n\nPosting on behalf of Moishe:\n\nIf the below gadget requires feature 'caja', it shows 'foofoo'. If it doesn't \nrequire caja, it shows just 'foo'. This indicates that the className property \nisn't cleared when set to ''.\n\n&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;Module&gt;\n &lt;ModulePrefs title=&quot;hello world example&quot; width=&quot;300&quot; height=&quot;300&quot;&gt;\n   &lt;Require feature='caja'/&gt;\n &lt;/ModulePrefs&gt;\n &lt;Content type=&quot;html&quot;&gt;&lt;![CDATA[\n   &lt;div id='divTest' style='margin:10px;'&gt;hello&lt;/div&gt;\n   &lt;script type=&quot;text/javascript&quot;&gt;\n     var divTest = document.getElementById('divTest');\n     divTest.className = 'foo';\n     divTest.innerHTML = divTest.className;\n     divTest.className = '';\n     divTest.innerHTML += divTest.className;\n   &lt;/script&gt;\n ]]&gt;&lt;/Content&gt;\n&lt;/Module&gt;\n", "created": "2015-04-16 04:00:56"}, {"url": "https://github.com/google/caja/issues/1123", "closed": "2015-04-16 04:00:25", "ttf": 0.0002777777777777778, "title": "Allow Function in valija?", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1123](https://code.google.com/p/google-caja/issues/detail?id=1123) created by lucas.e.smith on 2009-09-15T22:08:54.000Z:\n\nThis ticket is a sibling of #&nbsp;1122.\n\nThe other means for dynamically resizing DataTable columns is using a\ndynamically created function to set the style.width on all rows in the\ntable in one shot.  The end result effectively looks like this:\n\nvar fn = new Function('oColumn','sWidth','sOverflow',\n    'var colIdx = oColumn.getKeyIndex(), rows = this._elTbody.rows;'+\n    'oColumn.getThLinerEl().style.overflow =\n    'rows[0].cells[colIdx].firstChild.style.overflow =\n    'rows[1].cells[colIdx].firstChild.style.overflow =\n\n```\n... (for all row indices in rows.length - 1)\n\n'rows[99].cells[colIdx].firstChild.style.overflow = sOverflow;'+\n\n'oColumn.getThLinerEl().style.width ='+\n'rows[0].cells[colIdx].firstChild.style.width ='+\n'rows[1].cells[colIdx].firstChild.style.width ='+\n\n... (for all row indices in rows.length - 1)\n\n'rows[99].cells[colIdx].firstChild.style.width = sWidth;');\n```\n\nWould it be possible to support the use of the Function constructor in this\ncapacity?\n", "created": "2015-04-16 03:59:43"}, {"url": "https://github.com/google/caja/issues/1122", "closed": "2015-04-16 03:59:43", "ttf": 0.0002777777777777778, "title": "Support for dynamic stylesheets?", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1122](https://code.google.com/p/google-caja/issues/detail?id=1122) created by lucas.e.smith on 2009-09-14T21:10:19.000Z:\n\nWould it be possible to support adding and modifying stylesheets?\n\nvar style = document.createElement('style');\nstyle.type = 'text/css';\ndocument.getElementsByTagName('head')[0].appendChild(style);\n\nstyle.appendChild(document.createTextNode('.stripe { background: #ffe; }'));\n\nstyle.sheet.cssRules[0].style.cssText += &quot;; font-weight: bold;&quot;;\nstyle.sheet.cssRules[0].style.cssFloat = &quot;left&quot;;\n\nThe use of dynamic stylesheets is one approach for updating column widths\nin YUI DataTable.\n\nMy hunch is &quot;no&quot;, but may as well ask.\n", "created": "2015-04-16 03:59:36"}, {"url": "https://github.com/google/caja/issues/1121", "closed": "2015-04-16 03:59:36", "ttf": 0.0002777777777777778, "title": "cajole_html's support for css/html whitelists", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1121](https://code.google.com/p/google-caja/issues/detail?id=1121) created by felix8a on 2009-09-09T20:24:42.000Z:\n\nthe caja testbed uses the extended css/html whitelists,\nbut the cajole_html script uses the basic css/html whitelists.\n1. cajole_html only lets you modify 3/4 of the whitelists.\n   it's missing a --css_fns_schema option.\n2. it's not clear to me that there's any value to having the\n   default be the basic css/html whitelists.\n3. the cajole_html whitelist options are kind of inconvenient.\n   if there's a real use-case for using cajole_html with both\n   the built-in basic and extended whitelists, then it might\n   be helpful to have a single shorthand option that sets all\n   the whitelists to the basic or extended set.\n", "created": "2015-04-16 03:59:31"}, {"url": "https://github.com/google/caja/issues/1120", "closed": "2015-04-16 03:59:31", "ttf": 0.0002777777777777778, "title": "document.compatMode and document.documentElement missing", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1120](https://code.google.com/p/google-caja/issues/detail?id=1120) created by lucas.e.smith on 2009-09-02T22:53:09.000Z:\n\ncajita.log(document.compatMode) is returning undefined.\n\nAm I correct in assuming Caja environments will always be CSS1Compat?\n\nUncajoled code that is forking on the compatMode may take the omission to\nindicate the page is in quirks.\n\nSpecific to YUI, forking on the compatMode triggers whether to look for the\nfollowing properties on document.body or document.documentElement:\nclientHeight\nclientWidth\nscrollHeight\nscrollWidth\nscrollTop\nscrollLeft\n\nI also note that document.documentElement is not provided.\n", "created": "2015-04-16 03:59:22"}, {"url": "https://github.com/google/caja/issues/1119", "closed": "2015-04-16 03:59:22", "ttf": 0.0002777777777777778, "title": "NPE cajoling with static \"includeScript\" of unknown module", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1119](https://code.google.com/p/google-caja/issues/detail?id=1119) created by ihab.awad on 2009-09-01T04:42:59.000Z:\n\nCajoling the attached file with the attached options throws an NPE.\n\nAt r3675.\n\njava.lang.NullPointerException\n    at \ncom.google.caja.parser.quasiliteral.CajitaRewriter$3.fire(CajitaRewriter.java\n:239)\n    at \ncom.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:89)\n    at com.google.caja.parser.quasiliteral.Rule.transform(Rule.java:465)\n    at \ncom.google.caja.parser.quasiliteral.CajitaRewriter$56.fire(CajitaRewriter.jav\na:1678)\n    at \ncom.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:89)\n    at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:167)\n    at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:158)\n    at \ncom.google.caja.parser.quasiliteral.CajitaRewriter$74.fire(CajitaRewriter.jav\na:2242)\n    at \ncom.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:89)\n    at \ncom.google.caja.parser.quasiliteral.CajitaRewriter$5.fire(CajitaRewriter.java\n:320)\n    at \ncom.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:89)\n    at \ncom.google.caja.parser.quasiliteral.CajitaRewriter$4.fire(CajitaRewriter.java\n:289)\n    at \ncom.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:89)\n    at \ncom.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:196)\n    at \ncom.google.caja.plugin.ExpressionSanitizerCaja.sanitize(ExpressionSanitize\nrCaja.java:51)\n    at \ncom.google.caja.plugin.stages.ValidateJavascriptStage.apply(ValidateJavascr\niptStage.java:52)\n    at \ncom.google.caja.plugin.stages.ValidateJavascriptStage.apply(ValidateJavascr\niptStage.java:35)\n    at com.google.caja.util.Pipeline.applyStage(Pipeline.java:41)\n    at \ncom.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:\n121)\n    at \ncom.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:\n112)\n    at com.google.caja.util.Pipeline.apply(Pipeline.java:35)\n    at \ncom.google.caja.plugin.PluginCompiler.run(PluginCompiler.java:192)\n    at \ncom.google.caja.plugin.PluginCompilerMain.run(PluginCompilerMain.java:1\n21)\n    at \ncom.google.caja.plugin.PluginCompilerMain.main(PluginCompilerMain.java:\n358)\n", "created": "2015-04-16 03:59:18"}, {"url": "https://github.com/google/caja/issues/1118", "closed": "2015-04-16 03:59:17", "ttf": 0.0002777777777777778, "title": "cajita.newTable() is confused by key inheritance", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1118](https://code.google.com/p/google-caja/issues/detail?id=1118) created by erights on 2009-08-31T04:33:54.000Z:\n\nThe commented lines below are the symptoms of the bug. Because we use these\ntables within our TCB (more so since my last commit), I'm tagging this high\npriority, security, private. But since all of our actual uses within our\nTCB seem safe so far, I'm not classifying this as critical. \n\nvar x = {};\nvar y = cajita.beget(x);\n\nvar t1 = cajita.newTable(true);\nt1.set(x, 33);\nt1.get(x);\nt1.get(y); // gives 33\nt1.set(y, 44);\nt1.get(x); // gives 44\nt1.get(y);\n\nvar t2 = cajita.newTable();\nt2.set(x, 55);\nt2.get(x);\nt2.get(y); // gives 55\nt2.set(y, 66);\nt2.get(x); // gives 66\nt2.get(y);\n\nThe tables used within the TCB are not exposed outside the TCB. No table\nwithin the TCB is ever purposely used on two keys, one of which might\ninherit from the other. The remaining cases are where an attacker might\ncause an object to inherits from an object used as a key and present the\nderived object to be tested as a key -- in which case it will falsely pass.\nSince Cajita code can only create new cajita-accessible objects that\ninherit from existing cajita-accessible objects by record inheritance, as\nin cajita.beget above, from inspection the vulnerabilities seem to be:\n- guards are stamped with the guard trademark so that they pass the guard\n  guard. Since guards are themselves records, this bug allows an attacker to\n  create a non-guard that inherits from a guard and have it pass the guard\n  guard. However, nothing yet actually uses the guard guard to test anything\n  useful.\n- TimeoutId and IntervalId objects are records stamped with their\n  respective trademarks. However, since the state obtained from a TimeoutId\n  or IntervalId after passing the trademark test is on an unmentionable\n  property name not used for anything else, it does not matter whether it is\n  instead obtained from a bogus derived object. In fact, because of this\n  naming, it looks like this trademark test isn't even needed.\n", "created": "2015-04-16 03:59:13"}, {"url": "https://github.com/google/caja/issues/1117", "closed": "2015-04-16 03:59:13", "ttf": 0.0002777777777777778, "title": "Caja HTML serializer strips DOM elements contained within <script> tags", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1117](https://code.google.com/p/google-caja/issues/detail?id=1117) created by louiscryan on 2009-08-27T17:05:39.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nr3638\n\n<b>What steps will reproduce the problem?</b>\nA common OpenSocial template block would look like\n\n..&lt;script type=&quot;text/os-template&quot;&gt;&lt;span&gt;Something&lt;/span&gt;&lt;os:SomeTag/&gt;&lt;/script&gt;\n\nIf the script element in the parsed DOM contains elements, Nodes.render will ignore them on \noutput. It is also not possible to override or extend the behavior of Nodes.render to achieve \nserialization as most of its functionality is in static methods.\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 03:58:53"}, {"url": "https://github.com/google/caja/issues/1116", "closed": "2015-04-16 03:58:53", "ttf": 0.0002777777777777778, "title": "Caja HTML parser doesnt retain the case of tag names.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1116](https://code.google.com/p/google-caja/issues/detail?id=1116) created by louiscryan on 2009-08-27T16:42:56.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nr3638\n\n<b>What steps will reproduce the problem?</b>\nCaja will convert the case of all tags to lower case when not parsing in XML mode. XML mode \nrequires the document to be well formed which is not compatible with HTML in the wild.\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 03:58:33"}, {"url": "https://github.com/google/caja/issues/1115", "closed": "2015-04-16 03:58:33", "ttf": 0.0002777777777777778, "title": "Caja HTML parser doesnt respect XML namespaces", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1115](https://code.google.com/p/google-caja/issues/detail?id=1115) created by louiscryan on 2009-08-27T16:41:04.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nr3638\n\n<b>What steps will reproduce the problem?</b>\nCreate an HTML document with namespace declarations e.g\n&lt;html&lt;body xmlns:os=&quot;http://ns.opensocial.org&quot;&gt;&lt;os:MyTag&gt;...&lt;/os:MyTag&gt;...\n\nCaja will parse MyTag with a DOM local name of &quot;os:MyTag&quot; instead of setting the namespace on \nthe tag and the name to &quot;MyTag&quot;\n\nThis makes Caja difficult to use for server-side templating systems that rely on XML namespace \nsupport such as OpenSocial's\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 03:58:09"}, {"url": "https://github.com/google/caja/issues/1114", "closed": "2015-04-16 03:58:09", "ttf": 0.0002777777777777778, "title": "Remaining JSON.toString() printing mystery", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1114](https://code.google.com/p/google-caja/issues/detail?id=1114) created by erights on 2009-08-27T03:53:45.000Z:\n\nIn issue 1086, in anticipation of committing 109074, I wrote:\n\n&gt; The reported problems are fixed, but I have a bit of a mystery we should \n&gt; understand before being willing to commit this (109074):\n&gt;\n&gt;     // Neither of the following tests pass in both Cajita and Valija.\n&gt;     // This does not block closing issue 1086, but is mysterious and so\n&gt;     // should be figured out first.\n&gt; //    rewriteAndExecute(&quot;assertTrue(JSON.toString() === '[object JSON]');&quot;);\n&gt; //    rewriteAndExecute(&quot;assertTrue(''+JSON === '[object JSON]');&quot;);\n&gt;\n&gt; I think I understand the last one. But the first of these is puzzling.\n\nSince this is indeed a separate mystery that we may leave open after\ncommitting 109074 and closing issue 1086, I'm filing it as a separate bug\nwith the same tags.\n", "created": "2015-04-16 03:58:00"}, {"url": "https://github.com/google/caja/issues/1112", "closed": "2015-04-16 03:57:55", "ttf": 0.0002777777777777778, "title": "Domita tests fail on zoomed browser", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1112](https://code.google.com/p/google-caja/issues/detail?id=1112) created by ihab.awad on 2009-08-25T00:27:38.000Z:\n\nThe Domita tests testScrolling and testSizeProperties fail if your\nbrowser window is zoomed (very specifically: on Firefox 3.5.1 on Mac\nOS X, zooming via \u2318-Plus or \u2318-Minus; I haven't tested anything else).\n", "created": "2015-04-16 03:57:53"}, {"url": "https://github.com/google/caja/issues/1111", "closed": "2015-04-16 03:57:52", "ttf": 0.0002777777777777778, "title": "\"use subset\" grammar in ES5 spec changed from what we implemented.", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1111](https://code.google.com/p/google-caja/issues/detail?id=1111) created by erights on 2009-08-24T19:48:36.000Z:\n\nReported by David-Sarah Hopwood.\n\nThe draft ES5 grammar we implemented would have one declare multiple\nsubsets, such as &quot;strict&quot; and &quot;cajita&quot;, by doing \n\n   &quot;use strict,cajita&quot;;\n   // strict cajita code\n\nThe currently agreed grammar which is unlikely to change would have one do\n\n   &quot;use strict&quot;;\n   &quot;use cajita&quot;;\n   // strict cajita code\n\nSince all Cajita and Valija code is assumed to already be in a &quot;use strict&quot;\ncontext, we could be compatible with the new spec while requiring only\n\n   &quot;use cajita&quot;;\n   // strict cajita code\n\nto say that the following code should be in Cajita.\n", "created": "2015-04-16 03:57:37"}, {"url": "https://github.com/google/caja/issues/1110", "closed": "2015-04-16 03:57:37", "ttf": 0.0002777777777777778, "title": "Exception var in remote script conflicts with page global var, preventing cajole", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1110](https://code.google.com/p/google-caja/issues/detail?id=1110) created by lucas.e.smith on 2009-08-21T22:08:33.000Z:\n\nfile x.js\n(function () {\n    try {} catch (x) {}\n})();\n\npage.html\n&lt;!doctype html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;\n&lt;script src=&quot;x.js&quot;&gt;&lt;/script&gt;\n&lt;script&gt;var x = 'boom';&lt;/script&gt;\n&lt;/body&gt;&lt;/html&gt;\n\nThis generates the following error from cajole_html:\n[exec] ERROR: x.js:2+19 - 20: Declaration of x masks declaration at\nbasic.html:10+5 - 6\n\nThere is no error for\n&lt;script&gt;(function () { var x = 'boom'; })();&lt;/script&gt;\n\nI'm attaching the YUI label only because it makes it easier for my\ntracking.  It does not affect our porting, so I'm marking this as a low\npriority.\n", "created": "2015-04-16 03:57:24"}, {"url": "https://github.com/google/caja/issues/1109", "closed": "2015-04-16 03:57:23", "ttf": 0.0002777777777777778, "title": "Add the missing pom for json_simple-r1.jar", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1109](https://code.google.com/p/google-caja/issues/detail?id=1109) created by aheritier on 2009-08-21T11:38:00.000Z:\n\nHi,\n\n In my company we are using your framework with maven. Each time we \nlaunch a build maven complains because it is unable to find a pom for the \njson_simple-r1.jar\n  Could you please add a pom for it ?\n  You just have to commit the attached file here : http://google-\ncaja.googlecode.com/svn/maven/caja/json_simple/r1/\n\n  Thanks a lot for us and for all your users though maven.\n", "created": "2015-04-16 03:57:15"}, {"url": "https://github.com/google/caja/issues/1108", "closed": "2015-04-16 03:57:14", "ttf": 0.0002777777777777778, "title": "caja now allows iframe src= in static html", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1108](https://code.google.com/p/google-caja/issues/detail?id=1108) created by felix8a on 2009-08-20T14:21:47.000Z:\n\nr3652 which added support for iframe shims\nalso allows iframes in static html.\nso if you cajole\n  &lt;iframe src=&quot;http://google.com&quot;&gt;\ncaja will happily emit that.\nthe urlpolicy gets to rewrite the url (as mimeType==&quot;text/html&quot;),\nbut this is new behavior.  a urlpolicy might not expect to\nhandle an iframe src url, and might do the wrong thing with it.\n", "created": "2015-04-16 03:57:03"}, {"url": "https://github.com/google/caja/issues/1107", "closed": "2015-04-16 03:57:03", "ttf": 0.0002777777777777778, "title": "Require a version of the testbed without dependency on applet", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1107](https://code.google.com/p/google-caja/issues/detail?id=1107) created by jasvir on 2009-08-20T04:54:00.000Z:\n\nThe applet used by testbed has several compatibility problems:\n- version of java installed on the client\n- openjdk's lack of support for liveconnect\n- caching of the applet without recourse if the client does not have java\n  console\n\nRequire a version of the testbed that uses the cajoling service instead of\nthe applet.\n", "created": "2015-04-16 03:56:59"}, {"url": "https://github.com/google/caja/issues/1106", "closed": "2015-04-16 03:56:59", "ttf": 0.0002777777777777778, "title": "Misparsed constructor operators", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1106](https://code.google.com/p/google-caja/issues/detail?id=1106) created by mikesamuel on 2009-08-19T17:11:32.000Z:\n\nWhen the first operand to a function call is an argumentless constructor:\n  (new Function)()\nwe misparse it to be equivalent to\n  new Function()\n\nThese are not equivalent since\n  typeof ((new Function)()) === 'undefined'\n  typeof ((new Function())) === 'function'\n\nThis is not a serious problem since our renderer outputs code with the\ninterpretation our parser chooses, and the first idiom is unlikely to be\nused in practice.\n\nBut we are producing incorrect (if not unsafe) code for the following:\n  function C() { return function () { return 8; }; }\n  (new C)() === 8\n  (new C()) !== 8\n", "created": "2015-04-16 03:56:54"}, {"url": "https://github.com/google/caja/issues/1105", "closed": "2015-04-16 03:56:54", "ttf": 0.0002777777777777778, "title": "Unsupported CSS properties and values", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1105](https://code.google.com/p/google-caja/issues/detail?id=1105) created by lucas.e.smith on 2009-08-18T23:53:25.000Z:\n\nCajoling all CSS used by YUI 2, the following items fall through:\n\nDisallowed selectors\nbody { ... } (discussed in bug 1103)\nhtml { ... } (used to set background-color and color)\n\nDisallowed properties\ncontent (commonly used for float clearing)\nfilter  (for IE's version of opacity)\nopacity\noverflow-x\noverflow-y\nword-wrap (word-wrap: break-word is IE's proprietary version of\nwhite-space: pre-wrap)\nzoom\n\nDisallowed property values\nfont: x-small; (quirks mode only, so not really relevant)\nfont: 100%;\nfont: arial;\nmin-height: auto;\npadding: auto;\n\nProperties disallowed inside :visited selector\nfont-size\nline-height\nmargin-left\nmin-height\noutline\npadding\ntext-decoration\n\nThe most troubling of these are opacity, zoom, and content.\n", "created": "2015-04-16 03:56:23"}, {"url": "https://github.com/google/caja/issues/1104", "closed": "2015-04-16 03:56:23", "ttf": 0.0002777777777777778, "title": "Cajita and Valija should not accept conflicting names in object literals", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1104](https://code.google.com/p/google-caja/issues/detail?id=1104) created by erights on 2009-08-17T04:17:02.000Z:\n\nAccording to ES3 and ES5-nonstrict, the object literal\n\n```\nvar x = {a: expr1, a: expr2};\n```\n\nevaluates both expr1 and expr2 in order, but the last definition wins so\nx.a is the value of expr2. Cajita and Valija currently behave likewise. \n\nHowever, ES5-strict requires such conflicting definitions to be statically\nrejected. Since Cajita and Valija are supposed to be subsets of ES5-strict,\nthey should statically reject these too. Low priority at least until ES5\nimplementations are widely deployed.\n", "created": "2015-04-16 03:56:12"}, {"url": "https://github.com/google/caja/issues/1103", "closed": "2015-04-16 03:56:12", "ttf": 0.0002777777777777778, "title": "style applied to body in css or cascading from body in cajoled source not working", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1103](https://code.google.com/p/google-caja/issues/detail?id=1103) created by lucas.e.smith on 2009-08-12T03:52:24.000Z:\n\nbody { font: 13px/1.231 Arial, helvetica, clean, sans-serif }\np { font: 83%; }\n\nThe cajoler removes the body declaration, making the p declaration relative\nto an inconsistent size across browsers.\n\nFor full html pages passed to cajole_html, pages that include link elements\nfor style, the resulting cajoled css omits the body rule rather than\nreassigning it to .gadget___ { font... }\n\nPerhaps there's an issue here with accepting 'inherit' as a value? \nRegardless, removing the rule altogether seems the wrong solution.\n\nThis affects at least YUI reset.css, fonts.css, and grids.css.  fonts.css\n(used to normalize element font sizes across browsers) specifically\nsurfaces a use case like that noted above.\n", "created": "2015-04-16 03:55:39"}, {"url": "https://github.com/google/caja/issues/1102", "closed": "2015-04-16 03:55:39", "ttf": 0.0002777777777777778, "title": "DOMita does not support document.write or document.writeln", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1102](https://code.google.com/p/google-caja/issues/detail?id=1102) created by mikesamuel on 2009-08-12T02:11:05.000Z:\n\nDocument.write is a widely used API for generating HTML.\n\nhttp://www.w3.org/TR/html5/dom.html#document.writeln specifies what\ndocument.write should do.\n\nWe should implement a version with a few differences\n(1) It uses the html sanitizer to tokenize the input stream and then uses\nDOM creation methods to manipulate the insertion point -- does not delegate\nto the real document.write\n(2) Does not implicitly call document.open.  Instead throws an exception if\nthe document has closed.\n", "created": "2015-04-16 03:55:32"}, {"url": "https://github.com/google/caja/issues/1101", "closed": "2015-04-16 03:55:32", "ttf": 0.0002777777777777778, "title": "StringInterpolation isn't hooked up right.", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1101](https://code.google.com/p/google-caja/issues/detail?id=1101) created by erights on 2009-08-10T21:42:01.000Z:\n\nThe cajole time step is part of our pipeline and looks like it is working\ncorrectly. However, the runtime support assumed by this translation is only\npresent at src/com/google/caja/demos/calendar/string-interpolation.js.\n\nSince it looks like I'll need it to make an adequately usable guard-based\ntaming system, I may move it. OTOH, it looks like StringInterpolation it\nmay bake in the assumption that the ultimate output is a string. Since this\ndoesn't match the needs of taming guards, I may do a special case for now\ninstead.\n", "created": "2015-04-16 03:55:30"}, {"url": "https://github.com/google/caja/issues/1098", "closed": "2015-04-16 03:55:18", "ttf": 0.0002777777777777778, "title": "In Cajita, one should be able to initialize static properties of functions using computed names.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1098](https://code.google.com/p/google-caja/issues/detail?id=1098) created by erights on 2009-08-09T02:25:38.000Z:\n\nIn Cajita,\n\n```\nfunction foo(){}\nfoo.bar = 8;\nfoo(); // freezes foo, as it should.\n```\n\nCreates a function foo, initializes its 'bar' property while it is still\nunfrozen, and then freezes foo on the first use or escaping occurrence of\nfoo. The initialization of 'bar' translates into a call to ___.setStatic(),\nwhich dynamically enforces restrictions specific to properties of\nfunctions. All is well so far.\n\nHowever, in\n\n```\nfunction foo(){}\nfoo['bar'] = 8;\nfoo();\n```\n\nthe second line is not currently recognized as a static initialization. As\na result, foo is frozen at that time causing the initialization to fail.\nLikewise, the assignment is translated into a ___.setPub(). We just need to\nadd the obvious setIndexStatic rule. There's no safety issue with not\nknowing the property name statically, since ___.setStatic() already does\nthe needed checking dynamically.\n\nThe reason it comes up is that the present restrictions prevent Cajita code\nfrom creating a membrane-like wrapping function whose properties are\nderived dynamically by enumerating (and wrapping) properties of the wrapped\nfunction.\n", "created": "2015-04-16 03:55:09"}, {"url": "https://github.com/google/caja/issues/1097", "closed": "2015-04-16 03:55:09", "ttf": 0.0002777777777777778, "title": "Cajita throw/catch coercion isn't idempotent", "commits": {}, "user": "kpreid", "labels": ["Client-CajaCapTP", "Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1097](https://code.google.com/p/google-caja/issues/detail?id=1097) created by erights on 2009-08-09T02:07:34.000Z:\n\nRelated to issue 1038.\n\nOriginally reported by Kevin Reid at http://paste.lisp.org/display/84710\n\nWhen Cajita code throws and catches a value, it is coerced through\n___.tameException. An Error coerces to a frozen record with &quot;name&quot;,\n&quot;message&quot;, and possibly &quot;stack&quot; properties but no other markings. When\nvanilla object is throws, such as that record, it is coerced to its printed\nform.\n\nWe do need coercion to ensure that the caught object is immutable (deeply\nfrozen) so that it does not leak authority. However, since the only\nwhitelisted properties of Errors are &quot;name&quot; and &quot;message&quot;, which are\napparently already coerced to strings, and Cajita code already can't mutate\nthese properties. Thus, to Cajita, all Error objects already are\neffectively immutable and so should be allowed through by ___.tameException().\n\nIf this logic does not hold and we must not pass Errors through for some\nreason, then we should at least add a &quot;throwable: true&quot; to the returned\nrecord so it will survive intact if rethrown.\n\nOTOH, if the above logic does hold, we can therefore also make Errors pass\nthe cajita.isFrozen test, closing out issue 1038 and helping the caja-captp\neffort.\n", "created": "2015-04-16 03:55:04"}, {"url": "https://github.com/google/caja/issues/1096", "closed": "2015-04-16 03:55:04", "ttf": 0.0002777777777777778, "title": "OpenSocial taming.js isn't secure", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1096](https://code.google.com/p/google-caja/issues/detail?id=1096) created by erights on 2009-08-07T18:47:07.000Z:\n\nWhile we don't know of anyone whose security currently depends on\n&lt;http://svn.apache.org/repos/asf/incubator/shindig/trunk/features/src/main/javascript/features/caja/taming.js&gt;,\nI am first disclosing this somewhat privately because we don't know who\nmight be. Unfortunately, we thus have no ability to responsibly disclose to\nthese unknown possible users. Given that the only people who could benefit\nfrom early disclosure can only be reached if we disclose openly, should we?\n\ntaming.js looks like it has several problems. At least:\n- Several property names ending in single underbar, especially &quot;super_&quot;,\n  look like they should have been hidden. I suspect these date from when a\n  single underbar hid properties in the Original-Caja language. This can be\n  trivially fixed by renaming these to end in wonderbar (triple underbar)\n  instead.\n- None of this taming should have made use of $v. The taming should all be\n  at the Cajita level but compatible with Valija, by calling back function\n  arguments with\n  \n  ___.callPub(callback, 'call', [...])\n\nThat works whether callback is a (Cajita) simple function or a (Valija)\ndisfunction.\n- The taming is done by replacing members of 'gadgets' and 'opensocial' in\n  place and then exporting those. Since these are records, this amounts to a\n  blcklisting approach, since all mentionable properties of records are\n  implicitly accessible. Instead, the exported 'gadgets' and 'opensocial'\n  should be membrane-like records of wrappers wrapping the unmodified members\n  of the original records.\n- Several of the new methods unnecessarily mention &quot;this&quot;, likely opening\n  up further holes, though I haven't tried to identify any concrete ones yet.\n", "created": "2015-04-16 03:54:51"}, {"url": "https://github.com/google/caja/issues/1095", "closed": "2015-04-16 03:54:51", "ttf": 0.0002777777777777778, "title": "anchor tags do not support blur()", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1095](https://code.google.com/p/google-caja/issues/detail?id=1095) created by lucas.e.smith on 2009-08-04T03:31:30.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. &lt;a id=&quot;a&quot; href=&quot;#&quot;&gt;foo&lt;/a&gt;\n2. document.getElementById(&quot;a&quot;).onclick = function (e) {\n    e.preventDefault();\n    this.blur();\n}\n\n<b>What is the expected output? What do you see instead?</b>\nError &quot;callMethod: &lt;A&gt; has no method blur&quot;\n\nIs this just a whitelist issue?\n\nThis affects the operation of YUI Calendar.\n", "created": "2015-04-16 03:54:42"}, {"url": "https://github.com/google/caja/issues/1094", "closed": "2015-04-16 03:54:42", "ttf": 0.0002777777777777778, "title": "Domita test fails IE7 @3602", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1094](https://code.google.com/p/google-caja/issues/detail?id=1094) created by ihab.awad on 2009-07-31T00:23:51.000Z:\n\nDomita test, IE7, fails:\n\n  testSideEffectTestFramework\n  testAttributeNodes\n  testCloneNodeStructure\n  testEventHandlerAttributes\n\nThis is true in both Valija and Cajita modes.\n", "created": "2015-04-16 03:54:28"}, {"url": "https://github.com/google/caja/issues/1093", "closed": "2015-04-16 03:54:28", "ttf": 0.0002777777777777778, "title": "Negative indices on many Firefox host objects expose static properties", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1093](https://code.google.com/p/google-caja/issues/detail?id=1093) created by metaweta on 2009-07-30T17:45:41.000Z:\n\nhttp://www.thespanner.co.uk/2009/07/14/hidden-firefox-properties-revisited/\n\nThe numeric whitelisting needs to be revisited in light of this.\n", "created": "2015-04-16 03:54:09"}, {"url": "https://github.com/google/caja/issues/1092", "closed": "2015-04-16 03:54:08", "ttf": 0.0002777777777777778, "title": "parentNode returns null for appended off-DOM node child of another off-DOM node", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1092](https://code.google.com/p/google-caja/issues/detail?id=1092) created by lucas.e.smith on 2009-07-28T22:44:01.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. var a = d.cE('div'), b = d.cE('div');\n2. a.appendChild(b);\n3. cajita.log(b.parentNode)\n\nb.parentNode should report a, but returns null.  b is a childNode of a, as\nconfirmed by a.childNodes.length == 1.\n", "created": "2015-04-16 03:54:04"}, {"url": "https://github.com/google/caja/issues/1091", "closed": "2015-04-16 03:54:04", "ttf": 0.0002777777777777778, "title": "<form> with ID causes html-emitter error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1091](https://code.google.com/p/google-caja/issues/detail?id=1091) created by ihab.awad on 2009-07-25T02:07:41.000Z:\n\nCajole the following\n\n  &lt;form id=&quot;x&quot;&gt;&lt;/form&gt;\n\nThe result is a runtime error, &quot;element is null&quot;, in bridal.js.\n\nThis seems to be because html-emitter buildIdMap() is not getting the\n&lt;form&gt; node when it does:\n\n var descs = base.getElementsByTagName('*');\n", "created": "2015-04-16 03:53:53"}, {"url": "https://github.com/google/caja/issues/1090", "closed": "2015-04-16 03:53:53", "ttf": 0.0002777777777777778, "title": "html-emitter confused by form <input name=id>", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1090](https://code.google.com/p/google-caja/issues/detail?id=1090) created by felix8a on 2009-07-25T01:20:59.000Z:\n\ncajoling this fails:\n\n&lt;form id='x'&gt;\n  &lt;input id='y' name='id'&gt;\n  &lt;div id='z'&gt;hello&lt;/div&gt;\n&lt;/form&gt;\n&lt;script&gt;\n  document.getElementById('z').innerHTML = 'world';\n&lt;/script&gt;\n\nnote in firebug the error message &quot;element is null&quot;.\n\nhtml-emitter is being confused because x.id is\nthe input element, not x.getAttribute('id').\n\nthe fix is:\n\n--- a/src/com/google/caja/plugin/html-emitter.js\n+++ b/src/com/google/caja/plugin/html-emitter.js\n@@ -43,7 +43,8 @@ function HtmlEmitter(base, opt_tameDocument) {\n     idMap = {};\n     var descs = base.getElementsByTagName('*');\n     for (var i = 0, desc; (desc = descs[i]); ++i) {\n-      if (desc.id) { idMap[desc.id] = desc; }\n-      var id = desc.getAttribute('id');\n-      if (id) { idMap[id] = desc; }\n   }\n  }\n  /**\n", "created": "2015-04-16 03:53:50"}, {"url": "https://github.com/google/caja/issues/1089", "closed": "2015-04-16 03:53:50", "ttf": 0.0002777777777777778, "title": "$dis gets bound to USELESS in event handlers", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1089](https://code.google.com/p/google-caja/issues/detail?id=1089) created by metaweta on 2009-07-24T23:21:12.000Z:\n\nOn Fri, Jul 24, 2009 at 3:40 PM, Felix&lt;fzl@yahoo-inc.com&gt; wrote:\n&gt; On 7/24/09 15:06, Mike Stay wrote:\n&gt;&gt; Yeah, sorry: in event handlers, &quot;this&quot; gets rewritten to thisNode___,\n&gt;&gt; not $dis.  So the first parameter gets ignored.\n&gt;\n&gt; but that's just if you have &lt;a onclick='...'&gt; right?\n&gt; if you say\n&gt;  el.addEventListener('click', f, false);\n&gt; the f is in valija and this becomes $dis.\n&gt; and it's getting the value USELESS.\n&gt;\n", "created": "2015-04-16 03:53:48"}, {"url": "https://github.com/google/caja/issues/1088", "closed": "2015-04-16 03:53:48", "ttf": 0.0002777777777777778, "title": "Object.prototype.toString !== {}.toString", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1088](https://code.google.com/p/google-caja/issues/detail?id=1088) created by lucas.e.smith on 2009-07-23T22:10:47.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. cajita.log(Object.prototype.toString === {}.toString);\n\n<b>What is the expected output? What do you see instead?</b>\nShould return true, but returns false.\n", "created": "2015-04-16 03:53:34"}, {"url": "https://github.com/google/caja/issues/1086", "closed": "2015-04-16 03:53:30", "ttf": 0.0002777777777777778, "title": "Can provided JSON object report Object.proto.toString.call(JSON) == '[object JSON]'?", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1086](https://code.google.com/p/google-caja/issues/detail?id=1086) created by lucas.e.smith on 2009-07-23T04:27:50.000Z:\n\nYUI's JSON util defers to the native implementation if the reported\n[[class]] of window.JSON is '[object JSON]'.  If the JSON object that Caja\nsupplies could report this from O.proto.toString.call(window.JSON), I\nwouldn't need to modify YUI's JSON util to sniff for Caja.\n\nIs this a reasonable request?\n", "created": "2015-04-16 03:52:48"}, {"url": "https://github.com/google/caja/issues/1085", "closed": "2015-04-16 03:52:48", "ttf": 0.0002777777777777778, "title": "can caja allow iframe shims", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1085](https://code.google.com/p/google-caja/issues/detail?id=1085) created by felix8a on 2009-07-22T23:57:58.000Z:\n\niframe shims do not need src= or document.write,\nit seems like it should be harmless to support\niframe shims.\n", "created": "2015-04-16 03:52:32"}, {"url": "https://github.com/google/caja/issues/1084", "closed": "2015-04-16 03:52:32", "ttf": 0.0002777777777777778, "title": "createDocumentFragment \"Node not editable\"", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1084](https://code.google.com/p/google-caja/issues/detail?id=1084) created by abe.music on 2009-07-22T14:21:44.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\ncajole_html =  Rev 3575 built on 2009-07-16 08:26:52.\nFirefox 3.5.1\nSafari 4.0.2 (5530.19)\nMac OSX 10.5.7\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\ndocument.createDocumentFragment().appendChild(document.createElement('div'));\n\n<b>What is the expected output? What do you see instead?</b>\n\nNothing. It should attach the created DIV to the document fragment. Instead\nI get an error thrown from domita.js (&quot;Node not editable.&quot;)\n\n<b>Please provide any additional information below.</b>\n\nFound while cajoling YUI's DataTable.\n", "created": "2015-04-16 03:52:21"}, {"url": "https://github.com/google/caja/issues/1083", "closed": "2015-04-16 03:52:21", "ttf": 0.0002777777777777778, "title": "HTMLTable and HTMLTableRow methods being cleansed", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1083](https://code.google.com/p/google-caja/issues/detail?id=1083) created by abe.music on 2009-07-21T16:23:00.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\ncajole_html =  Rev 3575 built on 2009-07-16 08:26:52.\nFirefox 3.5.1\nSafari 4.0.2 (5530.19)\nMac OSX 10.5.7\n\n<b>What steps will reproduce the problem?</b>\n\nThe following methods are undefined after cajoling...\n\nHTMLTableElement: createCaption, deleteCaption, insertRow, deleteRow;\nHTMLTableRowElement: insertCell, deleteCell\n\nThese are defined from https://developer.mozilla.org/en/Gecko_DOM_Reference\n\n<b>What is the expected output? What do you see instead?</b>\n\nBuilding a table using the methods above should work, but they are being removed by the cajoler \nand resulting in errors. I found this while trying to produce some cajoled gadgets using YUI's \nDataTable widget. I then created a smaller test case to confirm the results using just \ndocument.createElement for tables and table rows with the same results.\n", "created": "2015-04-16 03:52:12"}, {"url": "https://github.com/google/caja/issues/1082", "closed": "2015-04-16 03:52:12", "ttf": 0.0002777777777777778, "title": "'length' in '123' returns true in valija", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1082](https://code.google.com/p/google-caja/issues/detail?id=1082) created by felix8a on 2009-07-20T10:38:18.000Z:\n\n'length' in '123' throws a type error in native browsers,\nand in cajita, but not in valija.\n\nthere's a testcase for this in\n  quasiliteral.CommonJsRewriterTestCase.testIn()\nand CommonJsRewriterTestCase is inherited by DefaultValijaRewriterTest,\nbut DefaultValijaRewriterTest defines its own testIn(),\nso this case is never exercised.\n\nthis change http://codereview.appspot.com/96075/show\nunmasks the masked testcase, and comments out the\nassertion that fails.\n", "created": "2015-04-16 03:52:10"}, {"url": "https://github.com/google/caja/issues/1081", "closed": "2015-04-16 03:52:10", "ttf": 0.0002777777777777778, "title": "domita_test failures on IE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1081](https://code.google.com/p/google-caja/issues/detail?id=1081) created by felix8a on 2009-07-19T22:36:52.000Z:\n\nafter applying these two changes\nhttp://codereview.appspot.com/89076/show\nhttp://codereview.appspot.com/95079/show\n\nI get 3 domita_test failures on IE8, +1 on IE7, +1 on IE6\n\nin IE6, IE7, IE8:\n- _testSideEffectFramework\n  setting scriptNode.innerHTML throws an exception\n- testAttributeNodes\n  getAttributeNode('name') never returns null in IE.\n  some parts of domita check attr.specified, some don't.\n- testCloneNodeStructure\n  the node attributes include a cajita MAGIC_TOKEN,\n  and clone isn't expecting that.\n\nin IE6, IE7:\n- testTargetAttr\n  the test expects getAttribute('target') to return null,\n  but IE never returns null for that, it returns &quot;&quot; instead.\n\nin IE6:\n- testResizing\n  test expects &quot;600,400&quot;, but got &quot;1456,4046&quot;.\n", "created": "2015-04-16 03:51:50"}, {"url": "https://github.com/google/caja/issues/1080", "closed": "2015-04-16 03:51:50", "ttf": 0.0002777777777777778, "title": "domita_test crashes ie6/ie7", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1080](https://code.google.com/p/google-caja/issues/detail?id=1080) created by felix8a on 2009-07-19T22:13:32.000Z:\n\nrunning domita_test often crashes my ie6/ie7.\nsometimes it mysteriously doesn't crash, even with no code changes.\n\nin http://codereview.appspot.com/95079/show\nI disabled testScriptLoading in domita_test_untrusted.html\nbecause that test seems to be the culprit.\nwithout that test, I'm not getting crashes.\n\nI'm not sure why that test is problem.\nneed to narrow down the cause more.\n", "created": "2015-04-16 03:51:39"}, {"url": "https://github.com/google/caja/issues/1079", "closed": "2015-04-16 03:51:38", "ttf": 0.0002777777777777778, "title": "PluginEnvironment should have a getSafeUri()", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1079](https://code.google.com/p/google-caja/issues/detail?id=1079) created by felix8a on 2009-07-18T00:38:02.000Z:\n\nhttp://groups.google.com/group/google-caja-discuss/msg/387ead4807a03212\n", "created": "2015-04-16 03:51:32"}, {"url": "https://github.com/google/caja/issues/1078", "closed": "2015-04-16 03:51:31", "ttf": 0.0002777777777777778, "title": "inline onclick handler in markup not executed in IE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1078](https://code.google.com/p/google-caja/issues/detail?id=1078) created by lucas.e.smith on 2009-07-14T23:12:42.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. In markup &lt;input type=&quot;button&quot; onclick=&quot;cajita.log('CLICK');&quot;\nvalue=&quot;Click me&quot;&gt;\n2. click the button (in IE)\n\n<b>What is the expected output? What do you see instead?</b>\nShould output the log statement (FireBug Lite used for IE console), but\nnothing happens.\n\n<b>Please use labels and text to provide additional information.</b>\nThe log registers the click, but no handler logic is executed.  FF3.0,\nOp9.6, Saf4 all behave correctly.\n\nThis only affects some really old YUI examples, nothing in the library proper.\n", "created": "2015-04-16 03:51:23"}, {"url": "https://github.com/google/caja/issues/1077", "closed": "2015-04-16 03:51:22", "ttf": 0.0002777777777777778, "title": "fn.apply(o) throws error in Safari 4, Opera 9.6, IE6", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1077](https://code.google.com/p/google-caja/issues/detail?id=1077) created by lucas.e.smith on 2009-07-14T19:09:31.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. (function () { cajita.log(&quot;Applied&quot;) }).apply({});\n\n<b>What is the expected output? What do you see instead?</b>\nShould log &quot;Applied&quot; to the console.  This is what happens in FF3.0, but in\nall others, the arg array is not defaulted and triggers an error from\nArray.slice in cajita.js:98 which does not handle non-array-like values for\nself.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 03:50:58"}, {"url": "https://github.com/google/caja/issues/1076", "closed": "2015-04-16 03:50:58", "ttf": 0.0002777777777777778, "title": "\"name in obj\" succeeds even when obj is not an object or a function", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1076](https://code.google.com/p/google-caja/issues/detail?id=1076) created by metaweta on 2009-07-14T17:44:47.000Z:\n\n'length' in '' returns true instead of throwing a TypeError\n", "created": "2015-04-16 03:50:51"}, {"url": "https://github.com/google/caja/issues/1075", "closed": "2015-04-16 03:50:51", "ttf": 0.0002777777777777778, "title": "Focus and blur listeners not executed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1075](https://code.google.com/p/google-caja/issues/detail?id=1075) created by lucas.e.smith on 2009-07-13T18:44:43.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n3567\n\n<b>What steps will reproduce the problem?</b>\n1. textInput.addEventListener('focus',function () { cajita.log(&quot;focused&quot;);\n},false);\n2. tab or click into the input\n\n<b>What is the expected output? What do you see instead?</b>\nThe log statement should be added to the console, but nothing happens.  No\nerror, either.\n\n<b>Please provide any additional information below.</b>\ninput.onfocus = function () { this.value = &quot;focused&quot;; }\ncajoles but $dis is the USELESS object and throws an error at the .value\nassignment.\n\nSame expectation and failure for blur.  I didn't do isolated testing on\nother events.\n", "created": "2015-04-16 03:50:42"}, {"url": "https://github.com/google/caja/issues/1074", "closed": "2015-04-16 03:50:42", "ttf": 0.0002777777777777778, "title": "appendChild and insertBefore does not return the appended/inserted element", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1074](https://code.google.com/p/google-caja/issues/detail?id=1074) created by lucas.e.smith on 2009-07-11T01:00:01.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nLatest from Felix's GitHub port.  FF3.0x on Mac 10.5\n\n<b>What steps will reproduce the problem?</b>\n1. cajita.log(d.cE('div').appendChild(d.cE('span')));\n\n<b>What is the expected output? What do you see instead?</b>\nExpecting &lt;SPAN&gt;, but appendChild is returning undefined.\n\n<b>Please provide any additional information below.</b>\nSame result from div.insertBefore(span1,span2); and\ndiv.insertBefore(span1,null);\n", "created": "2015-04-16 03:50:36"}, {"url": "https://github.com/google/caja/issues/1072", "closed": "2015-04-16 03:50:13", "ttf": 0.0002777777777777778, "title": "Provide support for signed Caja modules", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1072](https://code.google.com/p/google-caja/issues/detail?id=1072) created by ihab.awad on 2009-07-10T23:45:37.000Z:\n\nThe cajoler needs to support signing of Caja modules. As MarkM suggested,\nthe cajoled module should look something like:\n\n  ___.loadModule({\n    ... cajoled stuff ...\n    signature: &quot;... signature ...&quot;\n  });\n\nwhere the signature is for all the textual output until the last 2 lines,\nwhich allows a consumer to verify the signature without having to lex the\nentire JavaScript, and allows consumers who don't care about a signature to\njust ignore it.\n\nThe cajoler should now accept a new callback from the caller: a signing\nobject that generates the signature.\n", "created": "2015-04-16 03:50:00"}, {"url": "https://github.com/google/caja/issues/1071", "closed": "2015-04-16 03:50:00", "ttf": 0.0002777777777777778, "title": "Cajoler resolves embedded URIs too early", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1071](https://code.google.com/p/google-caja/issues/detail?id=1071) created by ihab.awad on 2009-07-10T19:58:28.000Z:\n\nTemplateCompiler.inspectHtmlAttribute, in the URI case, resolves the\nembedded URI before handing it off to the PluginEnvironment. It should not\ndo that; the PluginEnvironment should be able to see exactly what was in\nthe original source so as to have the best chance at making the right decision.\n", "created": "2015-04-16 03:49:42"}, {"url": "https://github.com/google/caja/issues/1070", "closed": "2015-04-16 03:49:42", "ttf": 0.0002777777777777778, "title": "do browsers run event handlers at safe points?", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1070](https://code.google.com/p/google-caja/issues/detail?id=1070) created by felix8a on 2009-07-09T20:50:01.000Z:\n\nin firefox 3, calling el.focus() appears to call el's onfocus event handler\nbefore el.focus() returns.  this is somewhat surprising, and it's not\nclear what other event handlers might get run at that time.\nlike, does it also call other.blur()?  will pending mousemoves fire?\nwill pending timers fire?  etc.\n1.  are browsers allowed to run js event handlers as interrupts\n   at arbitrary points in a js script?  if so, domita might need to\n   have its own machinery for deferring execution of event handlers\n   until a safe point.\n2. are browsers allowed to run js event handlers during calls to\n   browser functions?  if so, domita needs to be checked for\n   reentrancy problems.\n", "created": "2015-04-16 03:49:33"}, {"url": "https://github.com/google/caja/issues/1069", "closed": "2015-04-16 03:49:33", "ttf": 0.0002777777777777778, "title": "runtime fontFamily assignment throws error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1069](https://code.google.com/p/google-caja/issues/detail?id=1069) created by lucas.e.smith on 2009-07-07T17:36:26.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nLatest from Felix's GitHub port.  Should be google-caja head from 7/7 or\n1-2 days prior.\n\n<b>What steps will reproduce the problem?</b>\n1. document.createElment('p').style.fontFamily = 'Arial';\n\n<b>What is the expected output? What do you see instead?</b>\nThrows an invalid value error.\n\nThis should not throw a runtime error.  If it must error, it should do so\nat compile time.  However, I don't see a reason for any value assigned to\nfont-family to be unacceptable, let alone throw an error.\n\n<b>Please provide any additional information below.</b>\nvalues 'serif', 'san-serif', and 'monospace' are accepted when provided by\nthemselves.  All other values that I tested, including 'Arial, sans-serif'\nthrew errors.\n", "created": "2015-04-16 03:49:16"}, {"url": "https://github.com/google/caja/issues/1068", "closed": "2015-04-16 03:49:15", "ttf": 0.0002777777777777778, "title": "Consider using nekohtml instead of htmlparser", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1068](https://code.google.com/p/google-caja/issues/detail?id=1068) created by lindner+unused1@inuus.com on 2009-07-06T22:33:40.000Z:\n\nnekohtml is a modern fast html parser that would remove the need for icu4j  \nas a transitive dependency.\n", "created": "2015-04-16 03:49:11"}, {"url": "https://github.com/google/caja/issues/1067", "closed": "2015-04-16 03:49:11", "ttf": 0.0002777777777777778, "title": "'length' in node returns true", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1067](https://code.google.com/p/google-caja/issues/detail?id=1067) created by lucas.e.smith on 2009-07-06T21:58:45.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nLatest version of Felix's GitHub port.  Should be google-caja head as of 7/6.\n\n<b>What steps will reproduce the problem?</b>\n1. cajita.log('length' in document.createElement('div'));\n\n<b>What is the expected output? What do you see instead?</b>\nExpected: false\nActual: true\n\n<b>Please provide any additional information below.</b>\nFor library code that may receive array-like structures or single nodes,\nthis can trip up the logic.\n", "created": "2015-04-16 03:48:49"}, {"url": "https://github.com/google/caja/issues/1066", "closed": "2015-04-16 03:48:49", "ttf": 0.0002777777777777778, "title": "label.setAttribute('for',x) does not propagate to label.htmlFor property", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1066](https://code.google.com/p/google-caja/issues/detail?id=1066) created by lucas.e.smith on 2009-07-06T20:30:26.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nLatest pull from Felix's port to GitHub.  I believe it's just a patched\nhead as of 7/6.\n\n<b>What steps will reproduce the problem?</b>\n1. var label = document.createElement('label');\n2. label.setAttribute('for','X');\n3. cajita.log(label.htmlFor);\n\n<b>What is the expected output? What do you see instead?</b>\nShould log 'X', but label.htmlFor returns undefined.\n\n<b>Please provide any additional information below.</b>\ngetAttribute('for') returns 'X', so this mostly impacts systems that have\nlibrary code that uses setAttribute but implementer code that uses the\nproperty.\n\nI didn't test the reverse, if label.htmlFor = 'X' would propagate to\ngetAttribute('for').\n", "created": "2015-04-16 03:48:37"}, {"url": "https://github.com/google/caja/issues/1065", "closed": "2015-04-16 03:48:37", "ttf": 0.0002777777777777778, "title": "Security hole: Dangerous Constructors still leaking", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1065](https://code.google.com/p/google-caja/issues/detail?id=1065) created by erights on 2009-07-05T21:47:29.000Z:\n\nIssue 1045 was closed prematurely. It turns out we didn't completely plug\nthe hole. I reviewed the flawed fix to issue 1045, so my apologies for not\ncatching this when I should have. Since Felix found an arbitrary code\nexecution exploit on issue 1045, I'm classifying this as critical; even\nthough I have not verified that Felix's exploit continues to work on this\nremaining leak.\n\nRegarding the responsible disclosure process, we have an unfortunate\nsituation, for which I make a second apology. After &quot;myvn up&quot;ing, I fixed a\nmerge conflict and refactored some for cleanliness. I then posted the CL\ncontaining these fixes and refactorings as a publicly visible incremental\nsnapshot to &lt;http://codereview.appspot.com/50041/show&gt;. At the time I did\nnot realize that this change also fixes a security hole, thereby revealing\nthat hole to astute observers. (At least those more astute that I on both\nthese occasions.)\n\nI suggest that the right methodology is to maintain my original motivation\nas the publicly visible cover story until we close this bug. Comments on\nthe CL consistent with this cover story should be posted to\ncodereview.appspot as normal, while other comments on the CL should appear\nonly privately as entries on this issue.\n\nI write the above suggestion knowing that it will become public once we\nclose this bug. Responsible disclosure situations cannot be subject to open\ncommunity review as it occurs. OTOH, we operate as an open source project\nin order to benefit from open community review and participation. The best\nwe can do to reconcile these goals is full retroactive disclosure of the\nprocess followed.\n\nI will detail the actual security problem in the next entry on this issue.\n", "created": "2015-04-16 03:48:04"}, {"url": "https://github.com/google/caja/issues/1064", "closed": "2015-04-16 03:48:04", "ttf": 0.0002777777777777778, "title": "document.forms and formNode.fieldName and formNode.elements.fieldName[0] return undefined", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1064](https://code.google.com/p/google-caja/issues/detail?id=1064) created by lucas.e.smith on 2009-07-02T22:55:44.000Z:\n\nAccessing form elements is only partly working and only via the\nformNode.elements collection.  The document.forms collection is not\nsupported, nor is direct field or field group access as properties of the\nform node.\n\nAlso, and more importantly, you cannot access checkbox 2-n or radio 2-n via\nelements.radioName[index].  elements.radioName is the first radio, not a\ncollection of inputs with the supplied name.\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nMac OS X 10.5.7.  FF 3.0.(latest)  I haven't tried other browsers yet.\nUnsure about the build#.  The build should be the head as of 7/1/2009 with\nsome minor patches added by felix.\n\n<b>What steps will reproduce the problem?</b>\nA simple test page is attached.  Any of these:\ndocument.forms\nformNode.someFieldName\nformNode.elements.someFieldName[someIndex]\n\n<b>What is the expected output? What do you see instead?</b>\ndocument.forms should return a collection of forms on the page\nformNode.someFieldName is shorthand for formNode.elements.someFieldName\nformNode.elements.someFieldName[someIndex] should return the someIndex-th\ninput with the name someFieldName (important for radio groups and checkboxes)\n\n<b>Please provide any additional information below.</b>\nPre-cajoled repro page attached.\n", "created": "2015-04-16 03:47:49"}, {"url": "https://github.com/google/caja/issues/1063", "closed": "2015-04-16 03:47:49", "ttf": 0.0002777777777777778, "title": "onload doesn't always fire", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1063](https://code.google.com/p/google-caja/issues/detail?id=1063) created by felix8a on 2009-06-30T22:12:38.000Z:\n1. the testbed doesn't pass the extra arg to HtmlEmitter, so onload never fires in the testbed.\n2. even when onload does fire, it sometimes doesn't fire.  cajole this:\n\n&lt;div&gt;foo&lt;/div&gt;\n&lt;script&gt;\nwindow.onload = function(){cajita.log(1);};\n1;\n&lt;/script&gt;\n\nnote that in the cajoled output, there are no calls to\nemitter___.signalLoaded();\n", "created": "2015-04-16 03:47:38"}, {"url": "https://github.com/google/caja/issues/1062", "closed": "2015-04-16 03:47:37", "ttf": 0.0002777777777777778, "title": "cajoler tries to wrap textarea content in a span", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1062](https://code.google.com/p/google-caja/issues/detail?id=1062) created by felix8a on 2009-06-30T05:59:21.000Z:\n\ncajole this:\n\n&lt;textarea&gt;hello&lt;/textarea&gt;\n&lt;script&gt;cajita.log(1)&lt;/script&gt;\n&lt;p&gt;hi&lt;/p&gt;\n\nthe cajoled gadget fails because the html emitted is:\n\n&lt;textarea&gt;&lt;span id=&quot;id_1___&quot;&gt;hello&lt;/span&gt;&lt;/textarea&gt;&lt;p&gt;hi&lt;/p&gt;\n", "created": "2015-04-16 03:47:26"}, {"url": "https://github.com/google/caja/issues/1061", "closed": "2015-04-16 03:47:26", "ttf": 0.0002777777777777778, "title": "experimental/prototype is busted - cannot run Prototype tests", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1061](https://code.google.com/p/google-caja/issues/detail?id=1061) created by ptwobrussell on 2009-06-26T20:00:46.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. First remove the -a option from the caja.rb file since the -a option no longer exists. \n   Otherwise, you just get a bunch of log files with usage screens as output\n2. Run build.sh (which in run runs Rakefile)\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected that you get good output showing that tests run w/o Exceptions\n\nInstead you see\n\njava.lang.StringIndexOutOfBoundsException: String index out of range: -1\n    at java.lang.String.substring(String.java:1768)\n    at com.google.caja.lang.html.HtmlSchema.elAndAttrib(HtmlSchema.java:268)\n    at com.google.caja.lang.html.HtmlSchema.&lt;init&gt;(HtmlSchema.java:104)\n    at com.google.caja.plugin.Config.getHtmlSchema(Config.java:172)\n    at com.google.caja.plugin.PluginCompilerMain.run(PluginCompilerMain.java:119)\n    at com.google.caja.plugin.PluginCompilerMain.main(PluginCompilerMain.java:358)\n\nThe fix is to go into whitelist/html_attrib.json and change : to :: for separators. Apparently, this \nfile didn't get updated when the separator changed in the past? Not sure what the history is on \nthat.\n\nI will attempt to use the upload.py tool for code review and all that as a learning experience, so \nplease - no one beat me to it :)\n\nPatch is inbound momentarily.\n", "created": "2015-04-16 03:47:20"}, {"url": "https://github.com/google/caja/issues/1060", "closed": "2015-04-16 03:47:19", "ttf": 0.0002777777777777778, "title": "html-emitter sometimes fails on ie7/ie8", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1060](https://code.google.com/p/google-caja/issues/detail?id=1060) created by felix8a on 2009-06-26T01:05:43.000Z:\n\ntry cajoling this:\n\n&lt;select id='a'&gt;\n  &lt;option id='b'&gt;b&lt;/option&gt;\n&lt;/select&gt;\nx\n&lt;script&gt;cajita.log(1)&lt;/script&gt;\ny\n&lt;script&gt;cajita.log(2);&lt;/script&gt;\nz\n\nthe &quot;z&quot; at the end is important.\non ie7/ie8 you should get an error: &quot;detached[...] is null or not an object&quot;.\n\nit seems to be blowing up here:\n    emitter___.unwrap(emitter___.attach('id_4___'));\nspecifically, the attach() call.\n\nid_4___ is the span that wraps the &quot;y&quot;,\nand at the point of the &quot;attach&quot; call,\nthe span doesn't actually contain &quot;y&quot;.\n\nI think what's happening is that sometimes when you\ndetach a element in ie7/8, rather than getting a node\nwith parentNode===null, you get a node with\nparentNode === a newly created temp node,\nsuch as a document fragment,\nand this unexpected structure is causing\nhtml-emitter to get confused about what it's doing.\n\nthis particular error is because it's trying to find\nan ancestor of the id_4___ node in the detached nodes list,\nbut the ancestor is not on the list at all,\nso it walks off the end of the list.\n", "created": "2015-04-16 03:47:13"}, {"url": "https://github.com/google/caja/issues/1059", "closed": "2015-04-16 03:47:12", "ttf": 0.0002777777777777778, "title": "cajita.newTable has no remove() method", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1059](https://code.google.com/p/google-caja/issues/detail?id=1059) created by metaweta on 2009-06-25T22:22:42.000Z:\n\nIt would be nice to be able to delete items from the map.\n", "created": "2015-04-16 03:47:06"}, {"url": "https://github.com/google/caja/issues/1058", "closed": "2015-04-16 03:47:06", "ttf": 0.0002777777777777778, "title": "useDebugSymbols screws up ___.grantRead", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1058](https://code.google.com/p/google-caja/issues/detail?id=1058) created by felix8a on 2009-06-25T21:44:50.000Z:\n\nwhen caja calls ___.useDebugSymbols(),\n___.grantRead() becomes replaced with a no-op.\nI think this used to make sense in an earlier version of the can/grant code,\nbut now it makes it difficult for subsequent code to do any grantRead.\n\ncajoled code seems to be largely unaffected,\nbecause everything that you can construct\nwill first have a grantSet, which is not a no-op,\nand that will effective do a grantRead,\nwithout actually calling grantRead.\n\nhowever,  my cajoled code might call a tamed function,\nwhich might create a complex object to return to me,\nand it might call grantRead on that complex object,\nwhich won't work, so the object I'll get will be mysteriously broken.\n\nI don't yet have an easy way to reproduce this in the testbed.\n", "created": "2015-04-16 03:47:01"}, {"url": "https://github.com/google/caja/issues/1057", "closed": "2015-04-16 03:47:01", "ttf": 0.0002777777777777778, "title": "valid class attributes are rejected", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1057](https://code.google.com/p/google-caja/issues/detail?id=1057) created by felix8a on 2009-06-25T12:53:27.000Z:\n\nthis is a regression.\nthis used to work in caja:\n  &lt;div class=&quot;*%!@$&quot;&gt;hi&lt;/div&gt;\nnow, caja says &quot;ERROR: ... illegal name *%!@$&quot;.\nhtml4.0.1 spec says class attribute is CDATA, no restrictions.\n", "created": "2015-04-16 03:46:50"}, {"url": "https://github.com/google/caja/issues/1056", "closed": "2015-04-16 03:46:50", "ttf": 0.0002777777777777778, "title": "NPE when cajoling <textarea>", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1056](https://code.google.com/p/google-caja/issues/detail?id=1056) created by felix8a on 2009-06-25T12:43:39.000Z:\n\nin a recent build (cajadores is not recent),\ncajole the following:\n  &lt;textarea&gt;&lt;/textarea&gt;\n\ncaja throws a NPE.\n\nthe problem is, in html-attributes-defs.json,\nTEXTAREA::COLS is specified as optional:false,\nbut there's no default value that matches the acceptance pattern,\n\nso in TemplateCompiler.inspectElement,\ncaja creates a cols= attribute node because it isn't optional,\nbut sets the value to null since there isn't a valid default,\nand later on, it calls Nodes.getFilePositionForValue(attr),\nwhich tries to dereference that null.\n\nthere are a few other elements and attributes that trigger the same problem.\n1. I think for TEXTAREA::COLS, changing it to optional::true is\n   a reasonable workaround.  html4.01 spec says it isn't optional,\n   but no browser actually cares.\n2. when a required attribute is missing and doesn't have a valid default,\n   inspectElement should emit a MISSING_ATTRIB error.\n", "created": "2015-04-16 03:46:45"}, {"url": "https://github.com/google/caja/issues/1055", "closed": "2015-04-16 03:46:45", "ttf": 0.0002777777777777778, "title": "Some ES3 reserved words will not be reserved in ES5; Caja should accept them", "commits": {}, "user": "kpreid", "labels": ["Client-CajaCapTP", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1055](https://code.google.com/p/google-caja/issues/detail?id=1055) created by kpreid.switchb.org on 2009-06-24T01:43:10.000Z:\n\nRevision 3540. The cajoler rejects code containing &quot;super&quot; as an identifier. According to MarkM \n(erights), this is a bug.\n\n$ echo &quot;var super = 1;&quot; &gt; test.js\n$ caja/bin/cajole_html --input test.js \nERROR: test.js:1+5 - 10: Reserved word super used as an identifier\n\nThe relevance of this is that I am using the following pattern for inheritance among Cajita record \nobjects:\n{{{\nfunction Bar() {\n  var super = new Foo();\n  var bar = cajita.copy(super);\n  bar.method = function () { ... super.method() };\n  return bar;\n}\n}}}\nexcept that I must use a variable name other than super.\n", "created": "2015-04-16 03:46:34"}, {"url": "https://github.com/google/caja/issues/1054", "closed": "2015-04-16 03:46:34", "ttf": 0.0002777777777777778, "title": "ES5 compliance for \"use strict\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1054](https://code.google.com/p/google-caja/issues/detail?id=1054) created by felix8a on 2009-06-23T18:54:48.000Z:\n\nes5 seems to have settled on literal &quot;use strict&quot; with no variation in the string.\nright now, caja interprets &quot;use strict,cajita&quot;, which will be meaningless in es5.\ncaja should probably be modified to also accept something like\n  &quot;use strict&quot;; &quot;use cajita&quot;;\n", "created": "2015-04-16 03:46:29"}, {"url": "https://github.com/google/caja/issues/1053", "closed": "2015-04-16 03:46:29", "ttf": 0.0002777777777777778, "title": "There should be a cajole_js", "commits": {}, "user": "kpreid", "labels": ["Client-CajaCapTP", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1053](https://code.google.com/p/google-caja/issues/detail?id=1053) created by kpreid.switchb.org on 2009-06-21T03:07:33.000Z:\n\nAs of revision 3540 there is no command-line entry point for cajoling a Cajita JavaScript file into a \nCajita module.\n\nIhab Awad says it should exist: http://groups.google.com/group/google-caja-\ndiscuss/msg/d4d336c8beb7ce65\n\n&quot;We should provide a cajole_js. Thus cajole_html would _only_ take HTML input, and always cajole \nit in Valija (because Cajita mode HTML does not work due to the semantics of &lt;script&gt; block \nvariable sharing). cajole_js would _only_ take JS input, and would either do it in Valija or Cajita \nmode.&quot;\n", "created": "2015-04-16 03:46:22"}, {"url": "https://github.com/google/caja/issues/1052", "closed": "2015-04-16 03:46:22", "ttf": 0.0002777777777777778, "title": "fastpath canSet test is inconsistent", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1052](https://code.google.com/p/google-caja/issues/detail?id=1052) created by felix8a on 2009-06-19T21:49:34.000Z:\n\nin cajita.js, canSet checks that the grant is for\nthe object itself, not inherited:\n    if (obj[name + '_canSet___'] === obj) { return true; }\n\nhowever, when you cajole something like this in cajita mode\n    function f(a) { a.x = 3; }\nthe fastpath test looks like\n    a.x_canSet___ ? (a.x = 3) : ___.setPub(a, &quot;x&quot;, 3); \nwhich can succeed if the grant is inherited.\n\nthis might lead to subtly different behavior in different\nconditions, eg, with/without debugging.\nit might also be exploitable, but I don't know of any\nparticular exploits.\n", "created": "2015-04-16 03:46:00"}, {"url": "https://github.com/google/caja/issues/1051", "closed": "2015-04-16 03:46:00", "ttf": 0.0002777777777777778, "title": "Property lookups on DOM elements broken", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1051](https://code.google.com/p/google-caja/issues/detail?id=1051) created by metaweta on 2009-06-19T17:11:24.000Z:\n\ndocument.createElement(&quot;div&quot;).id; // returns &quot;&quot;, as expected\ndocument.createElement(&quot;div&quot;).name; // throws an error\n\nthis.getGeometryDelegate___() is undefined\n", "created": "2015-04-16 03:45:53"}, {"url": "https://github.com/google/caja/issues/1050", "closed": "2015-04-16 03:45:53", "ttf": 0.0002777777777777778, "title": "cajoler sometimes calls htmlemitter.finish() too early", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1050](https://code.google.com/p/google-caja/issues/detail?id=1050) created by felix8a on 2009-06-18T01:03:53.000Z:\n\n&lt;div id=&quot;a&quot;&gt;a&lt;/div&gt;\n&lt;div id=&quot;b&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\n  cajita.log('c');\n&lt;/script&gt;\n\nnote that the cajoled output has:\n\nemitter___.setAttr(el___, 'id', 'a-' +\nIMPORTS___.getIdClass___());\nel___ = emitter___.finish();\nel___ = emitter___.byId('id_2___');\nemitter___.setAttr(el___, 'id', 'b-' +\nIMPORTS___.getIdClass___());\n\nthe call to finish() discards the ref to the base node,\nso the subsequent call to byId() throws an exception &quot;base is null&quot;.\n\nthe problem goes away if the 'b' div is non-empty.\n", "created": "2015-04-16 03:45:42"}, {"url": "https://github.com/google/caja/issues/1049", "closed": "2015-04-16 03:45:42", "ttf": 0.0002777777777777778, "title": "cajole_html doesn't emit static html", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1049](https://code.google.com/p/google-caja/issues/detail?id=1049) created by felix8a on 2009-06-17T22:55:25.000Z:\n\nthe cajole_html script doesn't have any way of emitting the static html portion of the cajoled \noutput.  it's not clear to me the best way to do so.\n\none way would be to emit two files, eg, foo.vo.js and foo.vo.html.  what's awkward about that is that \nhtml doesn't have an inclusion method, so there isn't a simple way for a static test container to \ninclude the cajoled html part.\n", "created": "2015-04-16 03:45:25"}, {"url": "https://github.com/google/caja/issues/1048", "closed": "2015-04-16 03:45:24", "ttf": 0.0002777777777777778, "title": "Domita does not assign DOM classes to 'imports'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1048](https://code.google.com/p/google-caja/issues/detail?id=1048) created by ihab.awad on 2009-06-17T22:35:01.000Z:\n\nDomita does not assign DOM classes (HTMLElement, ...) correctly to\n'imports'. These DOM classes are therefore only available as free module\nvariables if the module is compiled using Valija, since they _are_\ncorrectly assigned to the 'outers'.\n", "created": "2015-04-16 03:45:18"}, {"url": "https://github.com/google/caja/issues/1047", "closed": "2015-04-16 03:45:18", "ttf": 0.0002777777777777778, "title": "onload event no longer fires", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1047](https://code.google.com/p/google-caja/issues/detail?id=1047) created by felix8a on 2009-06-17T22:21:22.000Z:\n\nonload handling depended on html-emitter calling a\nsignalLoaded___ method when html-emitter is done.\nnow that html-emitter is gone, that function doesn't\nget called.\n\nthis shows up as a failure in domita_test in cajita mode.\n\nalso, onload handlers cause an error in valija mode,\nbecause the code calls ___.asFunc() on a disfunction.\n", "created": "2015-04-16 03:45:11"}, {"url": "https://github.com/google/caja/issues/1046", "closed": "2015-04-16 03:45:11", "ttf": 0.0002777777777777778, "title": "caja maven distribution includes lots of extra \"stuff\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1046](https://code.google.com/p/google-caja/issues/detail?id=1046) created by lindner+unused1@inuus.com on 2009-06-17T21:59:44.000Z:\n\nI think a lot of this does not belong in the caja jar file:\n\n```\n4646  Defl:N     1545  67%  06-01-09 19:40  f1041426  \n```\n\nant/etc/changelog.xsl\n   18668  Defl:N     4103  78%  06-01-09 19:40  9d69cf23  \nant/etc/coverage-frames.xsl\n   18816  Defl:N     3703  80%  06-01-09 19:40  bdc7dbc3  \nant/etc/jdepend-frames.xsl\n   11583  Defl:N     2472  79%  06-01-09 19:40  78f7b3c8  \nant/etc/jdepend.xsl\n   27666  Defl:N     5616  80%  06-01-09 19:40  b139bf96  ant/etc/junit-\nframes-xalan1.xsl\n   29546  Defl:N     5754  81%  06-01-09 19:40  3fd8d2d9  ant/etc/junit-\nframes.xsl\n   19742  Defl:N     4284  78%  06-01-09 19:40  92e82e16  ant/etc/junit-\nnoframes.xsl\n    6213  Defl:N     2042  67%  06-01-09 19:40  6edee088  ant/etc/log.xsl\n   18058  Defl:N     4347  76%  06-01-09 19:40  c10515f9  ant/etc/maudit-\nframes.xsl\n   37931  Defl:N     9003  76%  06-01-09 19:40  f7005edd  \nant/etc/mmetrics-frames.xsl\n    5885  Defl:N     1795  70%  06-01-09 19:40  72cf3c20  \nant/etc/tagdiff.xsl\n   92792  Defl:N    84521   9%  06-01-09 19:40  a95c259f  \njava/apache_ant/ant-junit.jar\n  433148  Defl:N   389844  10%  06-01-09 19:40  bfb7660b  \njava/emma/emma.jar\n   38761  Defl:N    33826  13%  06-01-09 19:40  4c583318  \njava/emma/emma_ant.jar\n    1415  Defl:N      763  46%  06-01-09 19:40  06b96765  \njava/htmlparser/LICENSE.txt\n      54  Defl:N       51   6%  06-01-09 19:40  f9949c8b  \njava/htmlparser/README.txt\n  179980  Defl:N   167432   7%  06-01-09 19:40  172b9818  \njava/htmlparser/htmlparser.jar\n   30117  Defl:N    27001  10%  06-01-09 19:40  4e2014ce  \njava/jakarta_commons/commons-cli.jar\n   11358  Defl:N     3949  65%  06-01-09 19:40  86e2b4b4  \njava/jetty/LICENSES/LICENSE.txt\n    1621  Defl:N      786  52%  06-01-09 19:40  5cf412cc  \njava/jetty/LICENSES/NOTICE.txt\n    4253  Defl:N     1750  59%  06-01-09 19:40  e1a0bfb3  \njava/jetty/README.txt\n  153504  Defl:N    49245  68%  06-01-09 19:40  93d4dc06  \njava/jetty/VERSION.txt\n  521380  Defl:N   493902   5%  06-01-09 19:40  825365f7  \njava/jetty/lib/jetty-6.1.15.jar\n  171775  Defl:N   160181   7%  06-01-09 19:40  45645a5e  \njava/jetty/lib/jetty-util-6.1.15.jar\n  171775  Defl:N   160181   7%  06-01-09 19:40  45645a5e  \njava/jetty/lib/jetty-util.jar\n  521380  Defl:N   493902   5%  06-01-09 19:40  825365f7  \njava/jetty/lib/jetty.jar\n    8794  Defl:N     3763  57%  06-01-09 19:40  f807e304  \njava/jsdk2.1/LICENSE\n    2932  Defl:N     1416  52%  06-01-09 19:40  b7a0c6e5  \njava/jsdk2.1/README\n     814  Defl:N      433  47%  06-01-09 19:40  551b55c6  \njava/jsdk2.1/default.cfg\n    1631  Defl:N      800  51%  06-01-09 19:40  6ab65e7e  \njava/jsdk2.1/etc/SimpleStartup.java\n   22562  Defl:N    19262  15%  06-01-09 19:40  9f6f986f  \njava/jsdk2.1/servlet.jar\n    1392  Defl:N      659  53%  06-01-09 19:40  265ad739  \njava/jsdk2.1/startserver\n     631  Defl:N      326  48%  06-01-09 19:40  e9e520aa  \njava/jsdk2.1/startserver.bat\n    1162  Defl:N      523  55%  06-01-09 19:40  1b790c8e  \njava/jsdk2.1/stopserver\n     621  Defl:N      326  48%  06-01-09 19:40  ddbe1b51  \njava/jsdk2.1/stopserver.bat\n      37  Defl:N       33  11%  06-01-09 19:40  8f4c120d  \njava/json_simple/AUTHORS.txt\n   26436  Defl:N     9363  65%  06-01-09 19:40  a699078e  \njava/json_simple/LICENSE.txt\n    5323  Defl:N     2017  62%  06-01-09 19:40  cd8f974d  \njava/json_simple/README.txt\n   14435  Defl:N    13184   9%  06-01-09 19:40  24ede6b6  \njava/json_simple/json_simple.jar\n  121070  Defl:N   108401  11%  06-01-09 19:40  59818260  \njava/junit/junit.jar\n   26497  Defl:N     8630  67%  06-01-09 19:40  96620432  \njava/rhino/LICENSE\n     255  Defl:N      190  26%  06-01-09 19:40  ece20797  \njava/rhino/README\n  756883  Defl:N   724591   4%  06-01-09 19:40  de5b5bd8  \njava/rhino/js.jar\n   11358  Defl:N     3949  65%  06-01-09 19:40  86e2b4b4  \njava/xerces/LICENSE\n     419  Defl:N      271  35%  06-01-09 19:40  3d8ec933  \njava/xerces/LICENSE-SAX.html\n    4240  Defl:N     2015  53%  06-01-09 19:40  38b4313c  \njava/xerces/LICENSE.DOM-software.html\n   11357  Defl:N     3948  65%  06-01-09 19:40  7b5d04bc  \njava/xerces/LICENSE.resolver.txt\n   11357  Defl:N     3948  65%  06-01-09 19:40  7b5d04bc  \njava/xerces/LICENSE.serializer.txt\n     895  Defl:N      368  59%  06-01-09 19:40  01d98be2  \njava/xerces/NOTICE\n     379  Defl:N      248  35%  06-01-09 19:40  2b0726f6  \njava/xerces/NOTICE.resolver.txt\n     846  Defl:N      348  59%  06-01-09 19:40  4bcf2d6a  \njava/xerces/NOTICE.serializer.txt\n    1621  Defl:N      864  47%  06-01-09 19:40  a2ef389c  \njava/xerces/Readme.html\n 1229125  Defl:N  1108046  10%  06-01-09 19:40  834cdd3f  \njava/xerces/xercesImpl.jar\n    1561  Defl:N      799  49%  06-01-09 19:40  78a424a1  \njs/firebug/LICENSE\n     409  Defl:N      262  36%  06-01-09 19:40  9a017b75  \njs/firebug/README\n     336  Defl:N      197  41%  06-01-09 19:40  0d2c6f0e  \njs/firebug/firebugx.js\n    1074  Defl:N      634  41%  06-01-09 19:40  f8393895  \njs/jqueryjs/runtest/LICENSE\n     245  Defl:N      171  30%  06-01-09 19:40  63023099  \njs/jqueryjs/runtest/README\n   21394  Defl:N     5448  75%  06-01-09 19:40  5d46c759  \njs/jqueryjs/runtest/env.js\n    1368  Defl:N      681  50%  06-01-09 19:40  44dbe587  \njs/jsfunfuzz/about.txt\n     315  Defl:N      211  33%  06-01-09 19:40  198d1c11  \njs/jsfunfuzz/jsfunfuzz.html\n   76608  Defl:N    20109  74%  06-01-09 19:40  e6d85e06  \njs/jsfunfuzz/jsfunfuzz.js\n    3977  Defl:N     1647  59%  06-01-09 19:40  307e913f  \njs/jsfunfuzz/multi_timed_run.py\n    1541  Defl:N      674  56%  06-01-09 19:40  ade4eb71  \njs/jsfunfuzz/using.txt\n    9265  Defl:N     3499  62%  06-01-09 19:40  f14a9da8  \njs/json_sans_eval/LICENSE.txt\n    1466  Defl:N      727  50%  06-01-09 19:40  3dfc169a  \njs/json_sans_eval/README.txt\n    8272  Defl:N     3097  63%  06-01-09 19:40  6f3702e7  \njs/json_sans_eval/json_sans_eval.js\n   19216  Defl:N     3890  80%  06-01-09 19:40  47a6740c  \njs/jsunit/2.2/jsUnitCore.js\n   26387  Defl:N     8882  66%  06-01-09 19:40  f58f1290  \njs/jsunit/2.2/license.html\n     110  Defl:N       97  12%  06-01-09 19:40  a6d35a8a  js/prettify/LICENSE\n    2422  Defl:N     1192  51%  06-01-09 19:40  5a0856e3  js/prettify/lang-\ncss.js\n     689  Defl:N      267  61%  06-01-09 19:40  78741d00  \njs/prettify/prettify.css\n   52209  Defl:N    16123  69%  06-01-09 19:40  3d47572d  \njs/prettify/prettify.js\n    1496  Defl:N      774  48%  06-01-09 19:40  64475992  js/v8-\nbenchmark/LICENSE\n     492  Defl:N      270  45%  06-01-09 19:40  5d3e2c33  js/v8-\nbenchmark/README.txt\n    6834  Defl:N     2532  63%  06-01-09 19:40  f11e7e11  js/v8-\nbenchmark/base.js\n   49276  Defl:N    14445  71%  06-01-09 19:40  30e28e00  js/v8-\nbenchmark/crypto.js\n   26556  Defl:N     7061  73%  06-01-09 19:40  11f3f886  js/v8-\nbenchmark/deltablue.js\n  199881  Defl:N    28155  86%  06-01-09 19:40  2daff273  js/v8-\nbenchmark/earley-boyer.js\n  102736  Defl:N    21555  79%  06-01-09 19:40  a488e5d0  js/v8-\nbenchmark/raytrace.js\n   16292  Defl:N     4282  74%  06-01-09 19:40  642023fc  js/v8-\nbenchmark/richards.js\n    3908  Defl:N     1581  60%  06-01-09 19:40  0b77b61b  js/v8-\nbenchmark/run.html\n    2022  Defl:N      977  52%  06-01-09 19:40  cd661bd0  js/v8-\nbenchmark/run.js\n   24293  Defl:N    24303   0%  06-01-09 19:40  cbffbafb  js/v8-\n## benchmark/v8-logo.png\n", "created": "2015-04-16 03:44:59"}, {"url": "https://github.com/google/caja/issues/1045", "closed": "2015-04-16 03:44:58", "ttf": 0.0002777777777777778, "title": "Domita tame node constructors callable by cajoled code", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1045](https://code.google.com/p/google-caja/issues/detail?id=1045) created by ihab.awad on 2009-06-17T21:31:04.000Z:\n\nPlaceholder\n", "created": "2015-04-16 03:44:41"}, {"url": "https://github.com/google/caja/issues/1043", "closed": "2015-04-16 03:44:32", "ttf": 0.0002777777777777778, "title": "node.attributes[] allows arbitrary script execution", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1043](https://code.google.com/p/google-caja/issues/detail?id=1043) created by felix8a on 2009-06-12T18:44:10.000Z:\n\nplaceholder\n", "created": "2015-04-16 03:43:59"}, {"url": "https://github.com/google/caja/issues/1042", "closed": "2015-04-16 03:43:59", "ttf": 0.0002777777777777778, "title": "sometimes it's helpful to know the real browser version", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1042](https://code.google.com/p/google-caja/issues/detail?id=1042) created by felix8a on 2009-06-12T17:46:15.000Z:\n\ncaja sometimes exposes browser quirks that are\nharmless and probably not worth the effort to normalize.\n\nexample 1:\n  &lt;table&gt;&lt;tr&gt;&lt;td id='a'&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n  &lt;script&gt;\n    alert(document.getElementById('a').align);\n  &lt;/script&gt;\nin firefox, the result is 'left'.  in other browsers, the result is ''.\n\nexample 2:\n  &lt;script&gt;\n    var a = document.createElement('div');\n    a.setAttribute('title', '  123  ');\n    alert(a.title.length);\n  &lt;/script&gt;\nin opera, the result is 3.  in other browsers, the result is 7.\n\nI think this is mainly a problem for testsuites.\na test case might want to account for a known quirk\nby sniffing the browser version.  however, in a caja\nsandbox, the navigator object only mentions caja,\nit doesn't expose any info about the real browser.\n\ngiven that the caja sandbox doesn't prevent indirect\nsniffing of the real browser version, I don't think there's\nmuch risk in exposing the real browser version\nsomewhere in the navigator object.\n", "created": "2015-04-16 03:43:48"}, {"url": "https://github.com/google/caja/issues/1041", "closed": "2015-04-16 03:43:48", "ttf": 0.0002777777777777778, "title": "expando policy is inconsistent", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1041](https://code.google.com/p/google-caja/issues/detail?id=1041) created by felix8a on 2009-06-12T17:23:44.000Z:\n\nright now, if you have\n  &lt;div expando='x'&gt;&lt;/div&gt;\nboth the cajoler and the clientside innerHTML sanitizer\nwill remove the expando attribute.\n\nhowever, this works:\n  &lt;div id='a'&gt;&lt;/div&gt;\n  &lt;script&gt;\n    var a = document.getElementById('a');\n    a.setAttribute('expando', 'x');\n  &lt;/script&gt;\n\nit seems strange to have one work but not the other.\n1. it's unsafe to attach an unknown attribute to a dom node,\n   because it has unknown security implications.\n2. expando setAttribute was added for jquery, issue 933.\n   the implementation is safe, because unknown attributes do\n   not get attached to the node, they get stored in a separate\n   table.\n3. the clientside innerHTML sanitizer can use the same policy\n   for unknown attributes.\n4. the cajoler is the tricky case.  the cajoler's html emitter\n   currently doesn't require domita, and it feels a little strange\n   to make it require domita.  maybe it can emit expando\n   attributes to a js function call after the html.   the base\n   implementation can ignore the expando attrs, and a\n   domita-enabled sandbox can add the attributes to the\n   right table.\n", "created": "2015-04-16 03:43:34"}, {"url": "https://github.com/google/caja/issues/1040", "closed": "2015-04-16 03:43:34", "ttf": 0.0002777777777777778, "title": "testbed on trunk doesn't emit html", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1040](https://code.google.com/p/google-caja/issues/detail?id=1040) created by felix8a on 2009-06-10T22:13:01.000Z:\n\nthe testbed doesn't know to emit static html from\nthe cajoler. it runs just the script block.\n", "created": "2015-04-16 03:43:28"}, {"url": "https://github.com/google/caja/issues/1039", "closed": "2015-04-16 03:43:27", "ttf": 0.0002777777777777778, "title": "__.grantTypedGeneric masks a handleRead___ for Valija", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1039](https://code.google.com/p/google-caja/issues/detail?id=1039) created by ihab.awad on 2009-06-10T22:12:01.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Define a class in uncajoled JS, and tame it as follows:\n\n  function TameStyle() { ... }\n  TameStyle.prototype.handleRead___ = function(propName) {\n    // Some application specific behavior\n  };\n  TameStyle.prototype.getPropertyValue = function() { ... };\n  ___.grantTypedGeneric(TameStyle.prototype, 'getPropertyValue');\n1. Observe that, for some instance of that class 'aStyle' under access from\n   Cajita, the following works fine:\n   \n   aStyle.getPropertyValue();\n2. Observe that, for the same instance under access from Valija, the same\n   code causes the exception:\n   \n   callMethod: [Fake Style] has no method getPropertyValue\n   ---\n\nThe basic problem is that **_.grantTypedGeneric is installing a handler\nthat calls handleRead**_() on the object. This faults into the application\nspecific read handler, which does not understand that it needs to deal with\nthe property 'getPropertyValue' specially.\n\nThis is all well and fine -- we can trick up the application specific read\nhandler like so:\n\n  TameStyle.prototype.handleRead___ = function(propName) {\n    if (String(propName) === 'getPropertyValue) {\n      return TameStyle.prototype.getPropertyValue;\n    }\n    // Some application specific behavior\n  };\n\nbut now we're doing something really scary -- we have code in there that\ndeliberately returns a bare (possibly exophoric) function to cajoled code\nif that code were to utter:\n\n  aStyle.getPropertyValue\n", "created": "2015-04-16 03:43:16"}, {"url": "https://github.com/google/caja/issues/1037", "closed": "2015-04-16 03:42:56", "ttf": 0.0002777777777777778, "title": "clearTimeout(garbage) or clearInterval(garbage) throws error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1037](https://code.google.com/p/google-caja/issues/detail?id=1037) created by lucas.e.smith on 2009-06-03T03:39:58.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n3496 FF3/Mac OS X 10.5\n\n<b>What steps will reproduce the problem?</b>\nclearTimeout(not_a_timer_id); // e.g. clearTimeout(undefined)\n\n<b>What is the expected output? What do you see instead?</b>\nNothing.  Instead, threw an error.\n\n<b>Please provide any additional information below.</b>\nclearTimeout and clearInterval should silently return if anything that\ndoesn't correspond to a timer id is passed as the arg.\n\nIt is not uncommon to just call clearTimeout(foo) in a function if during\nsome executions foo may be set.  The obvious workaround is to ensure that\nfoo is set before calling clearTimeout/clearInterval.  This still leaves\nthe edge case of foo being reused and still triggering the error.\n", "created": "2015-04-16 03:42:37"}, {"url": "https://github.com/google/caja/issues/1036", "closed": "2015-04-16 03:42:36", "ttf": 0.0002777777777777778, "title": "Can't create and test instanceof Error extensions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1036](https://code.google.com/p/google-caja/issues/detail?id=1036) created by lucas.e.smith on 2009-05-29T20:31:02.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n3496 FF3/OSX 10.5\n\n<b>What steps will reproduce the problem?</b>\n1. function MyException() { Error.apply(this,arguments); }\n2. var e = new MyException(&quot;Results in: Constructors can't be called as\nsimple functions: function Error() { [native code] }&quot;);\n\nConsole shows this error:\nConstructors can't be called as simple functions: function Error() {\n[native code] }\n\nThe error suggests that Error was called via function invocation, not apply\ninvocation.\n\nChaining custom exceptions back to Error's constructor is used in YUI's\nTest module.\n\nAlso exception related, custom Error subclasses thrown do not pass\ninstanceof checks in the catch block:\n\nfunction Err() {}\nErr.prototype = (function () {\n    function F(){}\n    F.prototype = Error.prototype;\n    return new F();\n})();\n\ntry {\n    throw new Err(&quot;should be instanceof Err&quot;);\n}\ncatch(e) {\n    cajita.log(e instanceof Err);  // Should be true\n}\n\nYUITest uses instanceof checks on the exception passed to the catch block\nto determine proper course of action.\n\nThe attached error_gadget.html can be run independently.\n", "created": "2015-04-16 03:42:25"}, {"url": "https://github.com/google/caja/issues/1035", "closed": "2015-04-16 03:42:25", "ttf": 0.0002777777777777778, "title": "Object.prototype.toString.apply(function(){}) produces '[object Object]'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1035](https://code.google.com/p/google-caja/issues/detail?id=1035) created by amoore on 2009-05-29T00:26:04.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n3496 FF OSX\n\n<b>What steps will reproduce the problem?</b>\ncajita.log(Object.prototype.toString.apply(function(){}));\n\nWhat is the expected output? \n[object Function]\n\nWhat do you see instead?\n[object Object]\n\n<b>Please provide any additional information below.</b>\nThis technique is useful for typeof issues across frame boundaries, and \nMark Miller has talked about it with regard to arrays (this technique does \nwork for arrays under caja).  I've updated the YUI source tree to defend \nagainst this so that the issue doesn't block us.\n", "created": "2015-04-16 03:42:16"}, {"url": "https://github.com/google/caja/issues/1034", "closed": "2015-04-16 03:42:16", "ttf": 0.0002777777777777778, "title": "domita_test.html?valija=1 broken @r3511", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1034](https://code.google.com/p/google-caja/issues/detail?id=1034) created by felix8a on 2009-05-21T23:45:56.000Z:\n\nthis has 8 errors:\nhttp://www.cajadores.com/snapshot/com/google/caja/plugin/domita_test.html?valija=1\n\nthis is fine:\nhttp://www.cajadores.com/snapshot/com/google/caja/plugin/domita_test.html\n", "created": "2015-04-16 03:41:59"}, {"url": "https://github.com/google/caja/issues/1033", "closed": "2015-04-16 03:41:58", "ttf": 0.0002777777777777778, "title": "previously working environment completely broken in revision 3511 (___ is undefined)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1033](https://code.google.com/p/google-caja/issues/detail?id=1033) created by amoore on 2009-05-21T00:21:17.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n3511, OSX, FF3\n\n<b>What steps will reproduce the problem?</b>\n1. http://github.com/apm/yui-caja/tree/master\n2. Use the quick start instructions on that page to set up YUI2, Caja, and\nyui-caja.  Compile Caja, compile yui-caja tests, run any *_host.html page\nin the tests directory.\n\n<b>What is the expected output? What do you see instead?</b>\n\njsonParse is not defined\n[Break on this error] JSON = { parse: jsonParse };\ncajita.js (line 123)\ncajita is undefined\n[Break on this error] var orig = cajita.copy(___);\ncajita-d...ugmode.js (line 51)\ncajita is undefined\n[Break on this error] var tameNodeTrademark = cajita.Trademark('tameNode');\ndomita.js (line 299)\n___ is undefined\n[Break on this error] var imports = **_.copy(**_.sharedImports);\ncore_host.html (line 25)\n___ is undefined\n[Break on this error] ___.loadModule({\nvalija.co.js (line 2)\n___ is undefined\n[Break on this error] var testImports = **_.copy(**_.sharedImports);\ncore_host.html (line 40)\n___ is undefined\n[Break on this error] ___.loadModule({\nutilities.vo.js (line 2)\n___ is undefined\n[Break on this error] ___.loadModule({\n\n<b>Please provide any additional information below.</b>\n\nI've been continuing to use my old simple_host copy.  Has there been\nsomething changed where I need to change my host environment (or anything\nelse?  It isn't clear to me how find out when I need to do anything extra\nto get a given revision to work.\n", "created": "2015-04-16 03:41:43"}, {"url": "https://github.com/google/caja/issues/1032", "closed": "2015-04-16 03:41:43", "ttf": 0.0002777777777777778, "title": "Work around catch variable scoping bug on IE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1032](https://code.google.com/p/google-caja/issues/detail?id=1032) created by davidsarah.hopwood on 2009-05-20T04:26:49.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nCajole and run the following example on IE:\n\n  (function() {\n    var f;\n    for (var i = 0; i &lt; 2; i++) {\n      try {\n        throw i;\n      } catch (e) {\n        if (i === 0) { f = function() { return e; }; }\n      }\n    }\n    return f();\n  })();\n\n<b>What is the expected output? What do you see instead?</b>\n\nThis code should return 0, because e should be lexically scoped\nto the catch block. It returns 1 in IE, because IE is incorrectly\nhoisting the declaration of e to the top-level of the outer function\n(i.e. there is only one instance of e created by the function,\nrather than one for each iteration of the loop).\n\nCaja could work around this by rewriting the catch block as follows\n(this workaround is harmless on JS implementations that don't have\nthe bug):\n\n  (function() {\n    var f;\n    for (var i = 0; i &lt; 2; i++) {\n      try {\n        throw i;\n      } catch (e___) {\n        (function(e) {\n          if (i === 0) { f = function() { return e; }; }\n        })(e___);\n      }\n    }\n    return f();\n  })();\n", "created": "2015-04-16 03:41:34"}, {"url": "https://github.com/google/caja/issues/1031", "closed": "2015-04-16 03:41:34", "ttf": 0.0002777777777777778, "title": "Testbed doesn't work on Opera", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1031](https://code.google.com/p/google-caja/issues/detail?id=1031) created by erights on 2009-05-17T19:14:01.000Z:\n\nTestbed http://cajadores.com/demos/testbed/debug.html\nRev 3494M built on 2009-05-14 19:33:32.\non Opera 9.64, Java 1.5.0_16\nMac OS X 10.5.6\n\nCajoling even &quot;2+3;&quot;, even in cajita mode, causes:\n\njava.lang.NullPointerException\n    at com.google.caja.parser.html.DomParser.makeDocument\n(DomParser.java:126)\n    at com.google.caja.opensocial.DefaultGadgetRewriter.parseHtml\n(DefaultGadgetRewriter.java:182)\n    at com.google.caja.opensocial.DefaultGadgetRewriter.rewriteContent\n(DefaultGadgetRewriter.java:143)\n    at com.google.caja.opensocial.DefaultGadgetRewriter.rewriteContent\n(DefaultGadgetRewriter.java:134)\n    at com.google.caja.demos.applet.CajaApplet.runCajoler\n(CajaApplet.java:177)\n    at com.google.caja.demos.applet.CajaApplet.cajole\n(CajaApplet.java:130)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:585)\n    at com.opera.LCInvoke.invoke(LCInvoke.java:14)\n    at sun.reflect.GeneratedMethodAccessor5.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:585)\n    at com.opera.PrivilegedInvoke.run\n(LiveConnectPrivilegedActions.java:219)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at com.opera.PrivilegedThread.run\n(LiveConnectPrivilegedActions.java:290)\n    at java.lang.Thread.run(Thread.java:613)\n", "created": "2015-04-16 03:41:31"}, {"url": "https://github.com/google/caja/issues/1029", "closed": "2015-04-16 03:41:15", "ttf": 0.0002777777777777778, "title": "Css UriLiterals do not clone properly if URI has no scheme", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1029](https://code.google.com/p/google-caja/issues/detail?id=1029) created by louiscryan on 2009-05-13T23:33:51.000Z:\n\nCssTree.StyleSheet css = &lt;parse&gt;(&quot;span {\nbackground-image:url('//www.example.org/image.gif'); }&quot;\ncss.clone(); &lt;-- throws exception\n\nthis is causing a serious performance bottleneck using Caja as a CSS parser\nin Shindig.\n", "created": "2015-04-16 03:41:11"}, {"url": "https://github.com/google/caja/issues/1028", "closed": "2015-04-16 03:41:11", "ttf": 0.0002777777777777778, "title": "Inlined cajoled gadget can make visual changes to the container.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1028](https://code.google.com/p/google-caja/issues/detail?id=1028) created by jasvir on 2009-05-13T20:42:52.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. http://cajadores.com/demos/testbed\n2. Enter:\n&lt;style type=&quot;text/css&quot;&gt;\np.phishing {\n  position:fixed;\n  top:30px;\n  right:5px;\n}\n&lt;/style&gt;\n\n&lt;p class=&quot;phishing&quot;&gt;\nEnter your testbed password:&lt;input&gt;\n&lt;/p&gt;\n1. Note the password box appears outside the rendered output and is fixed\n   relative to the viewport.  This remains the case even if the renderoutput\n   is styled with the recommended &quot;overflow: hidden&quot;\n\nThis allows a cajoled gadget to style the surrounding container.\n\nThis issue is not an immediate threat while cajoled output is confined to\nan iframe since the iframe will clip the output.\n", "created": "2015-04-16 03:41:00"}, {"url": "https://github.com/google/caja/issues/1027", "closed": "2015-04-16 03:41:00", "ttf": 0.0002777777777777778, "title": "Testbed does not work on the latest version of FF3", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1027](https://code.google.com/p/google-caja/issues/detail?id=1027) created by jasvir on 2009-05-10T06:03:36.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Load http://cajadores.com/demos/testbed\n2. On FF 3.08 on Linux and FF 3.0.10 Mac, LiveConnect fails with an error:\n&quot;getVersion.getCajoler is not a function&quot; and the copyright notice and\nversion fail to appear.  It works correctly on FF 2.0.17 on Windows.\n", "created": "2015-04-16 03:40:55"}, {"url": "https://github.com/google/caja/issues/1026", "closed": "2015-04-16 03:40:55", "ttf": 0.0002777777777777778, "title": "Computed Styles and :link, :visited pseudo CSS classes", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1026](https://code.google.com/p/google-caja/issues/detail?id=1026) created by mikesamuel on 2009-05-08T05:22:47.000Z:\n\nTo prevent history mining, we currently seriously curtail the use of\ngetComputedStyle/currentStyle, and we restrict what style properties can\nappear in a rule that affects selectors like a:link and a:visited.\n\nCurtailing use of getComputedStyle and currentStyle hurts a lot of\nframeworks which use them to reflect on the DOM to make layout decisions.\n\nSites frequently use :link and :visited pseudo classes to affect the color\nof links but very rarely set other properties using those classes.\n\nThe two are entangled because if a malicious author can cause a link to be\nstyled or laid-out differently, and detect that difference by\ngetComputedStyle, currentStyle, offsetLeft, then they can mine user history\ninformation and use that info to target social engineering attacks.\n\nI suggest we\n(1) Look at default browser stylesheets to determine how visited links\ndiffer style-wise from unvisited links by default.  Firebug's CSS inspector\nshows this info for Firefox.\n(2) Whitelist those properties that already differ for link and visited.\n(3) For those properties (and any composite properties (e.g. background vs\nbackground-color) that depend on them), disallow direct access computed\nstyle, and instead use the emulation scheme below.\n(4) Update our container documentation to recommend not styling visited\nlinks in a way that affects layout or other detectable properties.\n(5) Look at HTML5 to determine whether it allows :link and :visited pseudo\nclasses to be used more widely than just &lt;a&gt; elements\n\nEmulating unvisited style\n(1) On a system that supports getComputedStyle we can just make sure to\nalways pass in the 'link' pseudo class wherever appropriate.\n(2) On systems that support only computedStyle we could set the href to an\nunvisitable address, query the computedStyle, and set it back.\n(3) Alternatively we could return a known safe value.\nUnder no circumstances should we return an invalid value for that property\n(such as undefined).\n\nDiscarded solutions:\nIf we required that all external page links go through a proxy, then\nattackers could only glean whether a site had been visited via a gadget\nthat uses that proxy, and we could further mitigate by including random\nnumbers in proxy query strings.\nBut that encourages use of open-redirectors, and disallows URL policies\nthat don't always proxy certain classes of links.\n", "created": "2015-04-16 03:40:50"}, {"url": "https://github.com/google/caja/issues/1025", "closed": "2015-04-16 03:40:50", "ttf": 0.0002777777777777778, "title": "caja doesn't allow in page navigational urls", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1025](https://code.google.com/p/google-caja/issues/detail?id=1025) created by matt.sweeney@yahoo.com on 2009-05-08T00:34:28.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nmaster\n\n<b>What steps will reproduce the problem?</b>\n1. gadget has &lt;a href=&quot;#foo&quot;&gt;foo&lt;/a&gt;, which jumps to &lt;div id=&quot;foo&quot;&gt;foo&lt;/\ndiv&gt;\n2. cajole gadget\n\n<b>What is the expected output? What do you see instead?</b>\nExpect jump links to be intact.  &quot;FATAL_ERROR: tabview_test.html:19+42 - \n49: url #foo cannot be linked to&quot;\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 03:40:46"}, {"url": "https://github.com/google/caja/issues/1024", "closed": "2015-04-16 03:40:45", "ttf": 0.0002777777777777778, "title": "getComputedStyle() returns incorrect values", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1024](https://code.google.com/p/google-caja/issues/detail?id=1024) created by matt.sweeney@yahoo.com on 2009-05-06T00:52:12.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nr3467 Firefox\n\n<b>What steps will reproduce the problem?</b>\n1. run attached test file\n2. cajole and run from the attached host file\n3. compare results\n\n<b>What is the expected output? What do you see instead?</b>\n\nIt appears that some CSS properties are not being allowed access via \ncomputedStyle, and are returning undefined.  Other values are being \ncomputed incorrectly.\n\nCaja is also throwing an error when attempting to use getComputedStyle \nwith document.body.\n\n<b>Please provide any additional information below.</b>\n\nWhen a style has not been set inline, getComputedStyle is the fallback for \nstyle state access, so we need this generally available for any CSS \nproperty.\n", "created": "2015-04-16 03:40:19"}, {"url": "https://github.com/google/caja/issues/1023", "closed": "2015-04-16 03:40:19", "ttf": 0.0002777777777777778, "title": "CSS shorthand property not accepted", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1023](https://code.google.com/p/google-caja/issues/detail?id=1023) created by amoore on 2009-05-05T22:34:20.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n3467, FireFox OSX\n\n<b>What steps will reproduce the problem?</b>\n1. Create an element in script\n2. elementRef.style.border = '2px solid black';\n\nWhat is the expected output? \nThat it would accept the value for the shorthand CSS property.\n\nWhat do you see instead?\nRuntime error:\nbad value `2px solid black` for CSS property border - domita.js (line 3112)\n\n<b>Please provide any additional information below.</b>\nI tried switching the order around in case that was the problem, but that \ndoesn't work either.\n", "created": "2015-04-16 03:40:06"}, {"url": "https://github.com/google/caja/issues/1022", "closed": "2015-04-16 03:40:05", "ttf": 0.0002777777777777778, "title": "attachDocumentStub problem", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1022](https://code.google.com/p/google-caja/issues/detail?id=1022) created by thomas.michael31 on 2009-05-05T07:56:45.000Z:\n\nHi,\n\nI need to retrieve content on another site.\nFor that, I used the class gadgets.io.makerequest.\nI get the content but When I want to save the recovered content in a &quot;div&quot;\n\ndocument.getElementById(&quot;contenu1&quot;).innerHTML = response.text; // Error\n\nI have the following error in Firebug:\n\nd is undefined\nhttp://l.yimg.com/kj/yap/caja/js/y80273/do...AomZZh59iKw-.js\nLine 1\n\nThanks \n", "created": "2015-04-16 03:40:01"}, {"url": "https://github.com/google/caja/issues/1021", "closed": "2015-04-16 03:40:01", "ttf": 0.0002777777777777778, "title": "CSS attribute selectors rejected", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1021](https://code.google.com/p/google-caja/issues/detail?id=1021) created by mikesamuel on 2009-05-05T02:40:56.000Z:\n# <b>What steps will reproduce the problem?</b>\n1. Cajole &lt;style&gt;input[@type='radio'] { border: 1px solid }&lt;/style&gt;\n# <b>What is the expected output? What do you see instead?</b>\n\nThe rule with the [@type='radio'] is removed since attribute selectors are\nrejected.\n\nAttribute selectors don't work on IE 6, but YUI uses them in a few places,\nso we should probably allow those places.\n\nSpecifically, we should allow attribute selectors where the selector is\npreceded by an element name, and the element/attribute pair is allowed in\nthe HTML schema, and the value matched is allowed by the HTML schema, and\nthat type of attribute does not need to be rewritten.\n\nIf that condition is hard to check for, we should at least allow\n  input[@type=...]\nand maybe things like\n  input[@checked=...]\n  option[@selected=...]\n  ul[@type='square']\n\nAs testcases, the following should pass:\n  input[@type='radio']\n  input.foo.bar[@type='text']\n  input#my-checkbox[@type='checkbox']\nand the following should not\n  input [@type='text']\n  *[@type='radio']\n  #foo[@type='radio']\n  script[@type='text/vbscript']\n  object[@type='bogus']\n  link[@type='text/css']\n  bogus[@type='radio']\n  a[@href='http://www.google.com/']\n  span[@id='foo']\n", "created": "2015-04-16 03:39:54"}, {"url": "https://github.com/google/caja/issues/1020", "closed": "2015-04-16 03:39:53", "ttf": 0.0002777777777777778, "title": "URL policy change effecting XHR in cajoled gadget", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1020](https://code.google.com/p/google-caja/issues/detail?id=1020) created by amoore on 2009-05-01T19:50:45.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\n3465, FF3, OSX 10.5\n\nYUI has an abstraction layer for XHR requests that was working previously\n(YAHOO.util.Connect).  It is being used to issue a simple 'get' request to\na local url.  The request is being dispatched to the brower XHR system, but\nthe URL is resolving to null, causing FireFox to throw.\n", "created": "2015-04-16 03:39:34"}, {"url": "https://github.com/google/caja/issues/1019", "closed": "2015-04-16 03:39:34", "ttf": 0.0002777777777777778, "title": "InnocentCodeRewriter causes valid ES5-strict code to fail", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 1019](https://code.google.com/p/google-caja/issues/detail?id=1019) created by erights on 2009-04-29T20:49:53.000Z:\n\nOriginally reported by Adam Moore:\n\nOn Thu, Apr 23, 2009 at 5:53 PM, Adam Moore &lt;adamoore@yahoo-inc.com&gt; wrote:\n&gt;[...]\n&gt; YUI = function(o) {\n&gt;\n&gt;    var Y = this;\n&gt;\n&gt;    // Allow instantiation without the new operator\n&gt;    if (!(Y instanceof YUI)) {\n&gt;        return new YUI(o);\n&gt;    } else {\n&gt;[...]\n\nThe pattern above is valid in Valija, ES5-strict, ES5-nonstrict, and ES3.\nIf YUI is called as a function rather than a method or\nconstructor, then\n- in ES3 or ES5-nonstrict, 'this' will be the global object.\n- in ES5-strict, 'this' will be 'undefined'.\n- in Valija today, 'this' will be cajita.USELESS. (But we should also fix\n  Valija to track ES5-strict.)\n\nAll the above cases work because all of these values are not &quot;instanceof YUI&quot;.\n\nHowever, as Adam reports, it does not currently work as transformed by the\nInnocentCodeRewriter. Currently, to protect against a privilege escalation\nattack, the InnocentCodeRewriter rewrites all functions containing 'this'\nto throw if their 'this' is bound to the global object. Now that we\nunderstand how this causes valid ES5-strict code to fail, we should fix the\ninnocent code transformer here so to track ES5-strict. \n\nWe should rewrite all occurrences of 'this' in these functions so that, if\nthe real 'this' was bound to the global object, their rewritten 'this' will\ninstead be bound to 'undefined'.\n\nI'm classifying this as Security relevant, since this bug inhibits use of\nthe InnocentCodeRewriter, thereby creating a security hazard.\n", "created": "2015-04-16 03:39:27"}, {"url": "https://github.com/google/caja/issues/1018", "closed": "2015-04-16 03:39:27", "ttf": 0.0002777777777777778, "title": "Misc issues with JS Html Sanitizer on JScript", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1018](https://code.google.com/p/google-caja/issues/detail?id=1018) created by mikesamuel on 2009-04-29T17:47:35.000Z:\n\nRichB reports\n\nI've been playing with the JavaScript HTML sanitizer in Caja on\nWindows outside of a browser. Some things I've learnt:\n\n1) It works great on Windows under the Windows Script Host.\n2) It works server-side in Classic ASP using the JScript language,\nonly if you concatenate the &lt;!-- in OUTSIDE_TAG_TOKEN so it doesn't\nlook like an SGML comment...\n3) It compiles in JScript.Net if eqRe is defined as /\\=/g instead of /\n=/g (!).\n4) It throws an exception if you do something like &lt;div\nstyle1='xxx'&gt;blah&lt;/div&gt; It seems to barf on the '1'.\n", "created": "2015-04-16 03:39:22"}, {"url": "https://github.com/google/caja/issues/1017", "closed": "2015-04-16 03:39:22", "ttf": 0.0002777777777777778, "title": "Build broken under JDK1.5", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1017](https://code.google.com/p/google-caja/issues/detail?id=1017) created by mikesamuel on 2009-04-29T17:46:14.000Z:\n\nRichB reports\nHi,\n\nI've got a build error compiling Caja. I checked out the head from svn\nand ran Ant and got this. I'm not a Java coder so apologies if this is\na newbie mistake. Could someone please point me in the right\ndirection.\n\nPluginCompiler:\n   [javac] Compiling 28 source files to /Users/rbirkby/src/google-\ncaja-read-only/ant-lib\n   [javac] /Users/rbirkby/src/google-caja-read-only/src/com/google/\ncaja/plugin/Dom.java:43: method does not override a method from its\nsuperclass\n   [javac]   @Override\n   [javac]    ^\n   [javac] /Users/rbirkby/src/google-caja-read-only/src/com/google/\ncaja/plugin/Dom.java:49: method does not override a method from its\nsuperclass\n   [javac]   @Override\n   [javac]    ^\n   [javac] 2 errors\n", "created": "2015-04-16 03:39:15"}, {"url": "https://github.com/google/caja/issues/1016", "closed": "2015-04-16 03:39:15", "ttf": 0.0002777777777777778, "title": "Applet broken, perhaps because of new Xerces dependency", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1016](https://code.google.com/p/google-caja/issues/detail?id=1016) created by erights on 2009-04-27T03:05:47.000Z:\n\nWhen I try to use the testbed, I get a\n\njava.lang.NullPointerException\n    at com.google.caja.parser.html.DomParser.makeDocument(DomParser.java:126)\n    at\ncom.google.caja.opensocial.DefaultGadgetRewriter.parseHtml(DefaultGadgetRewriter.java:182)\n    at\ncom.google.caja.opensocial.DefaultGadgetRewriter.rewriteContent(DefaultGadgetRewriter.java:143)\n    at\ncom.google.caja.opensocial.DefaultGadgetRewriter.rewriteContent(DefaultGadgetRewriter.java:134)\n    at\ncom.google.caja.opensocial.applet.CajaApplet.runCajoler(CajaApplet.java:183)\n    at com.google.caja.opensocial.applet.CajaApplet.cajole(CajaApplet.java:135)\n\nThe NPE occurs on the impl.createDocument(..) call on the last line of\nmakeDocument(..) below:\n\n  public static Document makeDocument(DocumentType doctype, String features) {\n    if (features == null) { features = &quot;XML 1.0 Traversal&quot;; }\n    DOMImplementation impl;\n    try {\n      impl = DOMImplementationRegistry.newInstance()\n          .getDOMImplementation(features);\n    } catch (ClassNotFoundException ex) {\n      throw new RuntimeException(\n          &quot;Missing DOM implementation.  Is Xerces on the classpath?&quot;, ex);\n    } catch (IllegalAccessException ex) {\n      throw new RuntimeException(\n          &quot;Missing DOM implementation.  Is Xerces on the classpath?&quot;, ex);\n    } catch (InstantiationException ex) {\n      throw new RuntimeException(\n          &quot;Missing DOM implementation.  Is Xerces on the classpath?&quot;, ex);\n    }\n    return impl.createDocument(null, null, doctype);\n  }\n\ngetDOMImplementation() is documented as returning null if it doesn't find\nanything, but makeDocument() doesn't check for null. From the text of the\nother error messages above, I'm guessing we now depend on having Xerces on\nour classpath. How does one do so for a browser applet?\n", "created": "2015-04-16 03:39:06"}, {"url": "https://github.com/google/caja/issues/1015", "closed": "2015-04-16 03:39:06", "ttf": 0.0002777777777777778, "title": "NPE on some invalid object literals", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1015](https://code.google.com/p/google-caja/issues/detail?id=1015) created by felix8a on 2009-04-16T23:48:26.000Z:\n\ncajoling this:\n  &lt;script&gt; var x = { valueOf: 3, b: 4 }; &lt;/script&gt;\ncauses a NullPointerException.\n\nthe culprit is Rule mapPlural in CajitaRewriter.\nmapPlural uses Rule.substSingleMap to do expansion on each\nkey:value pair individually.\n\nthis individual expansion triggers the rule that denies &quot;valueOf&quot;,\nso the expansion doesn't return any values.\n\nmapPlural complains, continues, adds nulls to the list it's building,\nwhich it will substitute into &quot;___.initializeMap[@items*]&quot;\n\nthe finished list gets handed to ParseTreeNodeContainer,\nwhich checks for null elements and throws an NPE.\n\nthis patch fixes the NPE and also changes the alarming\nMAP_RECURSION_FAILED message, which looks like this:\n\nFATAL_ERROR: x.html:2+11 - 18: The valueOf property must not be set: Rule \n&quot;mapBadKeyValueOf&quot;, StringLiteral : 'valueOf'\nFATAL_ERROR: x.html:2+9 - 30: INTERNAL COMPILER ERROR. Object literal decomposition did \nnot match any rules at: ObjectConstructor\n  StringLiteral : 'valueOf'\n  IntegerLiteral : 3\n  StringLiteral : 'foo'\n  IntegerLiteral : 4. Please report this error at: http://code.google.com/p/google-caja/issues/\n\nthe INTERNAL COMPILER ERROR is redundant in this case,\nbut it's not clear to me that it will always be redundant,\nso I reworded it to something meaningful but less alarming.\n", "created": "2015-04-16 03:39:01"}, {"url": "https://github.com/google/caja/issues/1014", "closed": "2015-04-16 03:39:01", "ttf": 0.0002777777777777778, "title": "ArrayIndexOutOfBoundsException on some invalid css", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1014](https://code.google.com/p/google-caja/issues/detail?id=1014) created by felix8a on 2009-04-16T21:54:08.000Z:\n\nthis code:\n  &lt;style&gt;html {color:#&nbsp;000;} html {background:#fff;}&lt;/style&gt;\ncauses an ArrayIndexOutOfBoundsException.\n\n'html' is an invalid selector,\nit gets marked as invalid,\nand then the css rewriter cleans the tree by\nremoving invalid selectors and blocks without selectors.\n\nthis cleaning phase is buggy because it uses acceptPostOrder wrong.\nthe cleaning visitor returns false when it finds an\ninvalid element, which stops the whole PostOrder traversal,\nso only the first invalid node gets removed.\n\nat the end if all the sanitization, the css tree looks like this:\n\nStyleSheet\n  RuleSet\n    Declaration\n      Property : background\n      Expr\n        Term\n          HashLiteral : #fff\n\nCssTree.RuleSet.render() doesn't expect a Declaration as child 0,\nit tries to index the previous element, causing the exception.\n", "created": "2015-04-16 03:38:52"}, {"url": "https://github.com/google/caja/issues/1013", "closed": "2015-04-16 03:38:52", "ttf": 0.0002777777777777778, "title": "java.lang.IndexOutOfBoundsException cajoling HTML with sidebyside option", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1013](https://code.google.com/p/google-caja/issues/detail?id=1013) created by amoore on 2009-04-03T02:06:13.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n3382 FF3 OSX\n\n<b>What steps will reproduce the problem?</b>\n1. cajole_html -a -r sidebyside -i gadget.html -o gadget.vo.js\n\nWhat is the expected output? \nNo Error\n\nWhat do you see instead?\njava.lang.IndexOutOfBoundsException: Index: 271, Size: 271\n    at java.util.ArrayList.RangeCheck(ArrayList.java:546)\n    at java.util.ArrayList.get(ArrayList.java:321)\n    at \ncom.google.caja.render.SourceSnippetRenderer.addEvidenceForCurrentMark\n(SourceSnippetRenderer.java:243)\n    at com.google.caja.render.SourceSnippetRenderer.processCurrentMark\n(SourceSnippetRenderer.java:225)\n    at com.google.caja.render.SourceSnippetRenderer.noMoreTokens\n(SourceSnippetRenderer.java:196)\n    at com.google.caja.plugin.PluginCompilerMain.writeFileNonDebug\n(PluginCompilerMain.java:243)\n    at com.google.caja.plugin.PluginCompilerMain.writeFile\n(PluginCompilerMain.java:212)\n    at com.google.caja.plugin.PluginCompilerMain.run\n(PluginCompilerMain.java:125)\n    at com.google.caja.plugin.PluginCompilerMain.main\n(PluginCompilerMain.java:329)\n\n<b>Please provide any additional information below.</b>\n\nWorks fine without the sidebyside option.  sidebyside option works when \ncajoling script files.\n", "created": "2015-04-16 03:38:47"}, {"url": "https://github.com/google/caja/issues/1012", "closed": "2015-04-16 03:38:47", "ttf": 0.0002777777777777778, "title": "Debug mode line mapping arrays should not end with a comma", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1012](https://code.google.com/p/google-caja/issues/detail?id=1012) created by ihab.awad on 2009-04-02T01:34:57.000Z:\n\nThe debug mode output specifies that this is a valid construct:\n\n```\n[3,,,4,,,]\n```\n\nAs reported by Mike Samuel, this is interpreter dependent:\n\n  // On Firefox\n  [,].length === 1\n  // On IE6\n  [,].length === 2\n\nModify the module format spec, and our code, so that we always fill in the last array element.\n", "created": "2015-04-16 03:38:45"}, {"url": "https://github.com/google/caja/issues/1011", "closed": "2015-04-16 03:38:45", "ttf": 0.0002777777777777778, "title": "Errors show original HTML unsanitized", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1011](https://code.google.com/p/google-caja/issues/detail?id=1011) created by ben@links.org on 2009-03-26T16:30:56.000Z:\n\nWhen a gadget has compile-time errors, the errors shown in shindig include\nunsanitised HTML.\n\nPresumably this can lead to an attack.\n", "created": "2015-04-16 03:38:25"}, {"url": "https://github.com/google/caja/issues/1010", "closed": "2015-04-16 03:38:25", "ttf": 0.0002777777777777778, "title": "Debugging compile problems as a user of Shindig is impossible!", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1010](https://code.google.com/p/google-caja/issues/detail?id=1010) created by ben@links.org on 2009-03-26T14:57:48.000Z:\n\nCheck out revision 00aad473e17f of the mercurial repo.\n\nTry the horoscopes gadget\n(javascript/samplecontainer/examples/caja/horoscope/horoscopes.xml) and see\nthat what you get in the browser is utterly inadequate to debug the problem.\n\nThe log on the running server isn't so useful, either!\n", "created": "2015-04-16 03:38:16"}, {"url": "https://github.com/google/caja/issues/1009", "closed": "2015-04-16 03:38:16", "ttf": 0.0002777777777777778, "title": "document.createElement('script') should not be fatal", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1009](https://code.google.com/p/google-caja/issues/detail?id=1009) created by ben@links.org on 2009-03-19T14:06:13.000Z:\n\nFor consistency with html_sanitize, and for faster results with legacy\ncode, an attempt to create a script element should result in a warning\nrather than a fatal error. For bonus points a DOM element showing what the\nscript would have been should be inserted instead.\n\nAlso, a &lt;Require feature=&quot;caja-strict&quot;/&gt; could be used to switch on fatal\nerrors for such events.\n", "created": "2015-04-16 03:38:09"}, {"url": "https://github.com/google/caja/issues/1008", "closed": "2015-04-16 03:38:09", "ttf": 0.0002777777777777778, "title": "failure to use -o causes an exception", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1008](https://code.google.com/p/google-caja/issues/detail?id=1008) created by ben@links.org on 2009-03-19T14:02:59.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. bin/cajole_gadget -i &lt;some gadget&gt;\n\nLeads to...\n\nException in thread &quot;main&quot; java.lang.NullPointerException\n        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:172)\n        at java.io.FileOutputStream.&lt;init&gt;(FileOutputStream.java:131)\n        at java.io.FileWriter.&lt;init&gt;(FileWriter.java:73)\n        at\ncom.google.caja.opensocial.GadgetRewriterMain.run(GadgetRewriterMain.java:76)\n        at\ncom.google.caja.opensocial.GadgetRewriterMain.main(GadgetRewriterMain.java:56)\n", "created": "2015-04-16 03:38:07"}, {"url": "https://github.com/google/caja/issues/1006", "closed": "2015-04-16 03:37:57", "ttf": 0.0002777777777777778, "title": "Gadget envelope causes incorrect handling of global variables", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1006](https://code.google.com/p/google-caja/issues/detail?id=1006) created by ihab.awad on 2009-03-10T20:58:04.000Z:\n\nSee attached sample gadget file. If I add the following test to DefaultGadgetRewriterTest:\n\n  public void testGlobalVars() throws Exception {\n    assertRewritePasses(&quot;message-minimal.xml&quot;, MessageLevel.WARNING);\n  }\n\nthe cajoler fails with the error:\n\nFATAL_ERROR:message-minimal.xml:7+1 - 4: Cannot assign to a free module variable: Rule \n&quot;setBadFreeVariable&quot;, AssignOperation : ASSIGN\n  Reference\n    Identifier : x\n  IntegerLiteral : 3\n\nHowever, if I add the following test to HtmlCompiledPluginTest:\n\n  public void testGlobalVars() throws Exception {\n    execGadget(\n        &quot;&lt;script type=&quot;text/javascript&quot;&gt;&lt;!--\\n&quot; +\n        &quot;x=3;\\n&quot; +\n        &quot;//--&gt;\\n&quot; +\n        &quot;&lt;/script&gt;\\n&quot;,\n        &quot;&quot;,\n        true);\n  }\n\ncajoling proceeds without errors.\n", "created": "2015-04-16 03:37:54"}, {"url": "https://github.com/google/caja/issues/1004", "closed": "2015-04-16 03:37:47", "ttf": 0.0002777777777777778, "title": "We need a non-minified target", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1004](https://code.google.com/p/google-caja/issues/detail?id=1004) created by ben@links.org on 2009-03-10T16:51:26.000Z:\n\nFor debugging, it is useful to build pluginc.jar without minification.\n\nCurrently, this can be achieved by s/minify/pretty/g in build.xml, but\nthere should be a target for it.\n", "created": "2015-04-16 03:37:36"}, {"url": "https://github.com/google/caja/issues/1003", "closed": "2015-04-16 03:37:36", "ttf": 0.0002777777777777778, "title": "Things that fetch a whole new page should cajole", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1003](https://code.google.com/p/google-caja/issues/detail?id=1003) created by ben@links.org on 2009-03-10T15:17:52.000Z:\n\nIf a gadget replaces itself with a whole new page, for example by the user\nsubmitting a form in the gadget, then that page should just be cajoled and\nserved up instead of the operation being banned.\n\nYes, this is a container problem, really, but we need to show the\ncontainers how.\n", "created": "2015-04-16 03:37:27"}, {"url": "https://github.com/google/caja/issues/1002", "closed": "2015-04-16 03:37:27", "ttf": 0.0002777777777777778, "title": "Not all inputs are cajoled", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1002](https://code.google.com/p/google-caja/issues/detail?id=1002) created by ben@links.org on 2009-03-09T16:32:26.000Z:\n\nInputs in some contexts are passed through without cajoling. In particular,\narguments to constructors are not processed. As a result, arbitrary\nJavascript can be run by an attacker.\n\nObviously this represents a complete break.\n\nAlso, there was supposed to have been a check for this mistake (i.e. a\ncheck that all output is the result of processing), so the check is clearly\nfailing.\n", "created": "2015-04-16 03:37:02"}, {"url": "https://github.com/google/caja/issues/1001", "closed": "2015-04-16 03:37:02", "ttf": 0.0002777777777777778, "title": "Mismatched types being compared with .equals()", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1001](https://code.google.com/p/google-caja/issues/detail?id=1001) created by jasvir on 2009-03-05T04:12:45.000Z:\n\nBufferedRendering.mark(FilePosition) does a .equals test on mismatched\ntypes which will always be false.  The result is occasionally noisy\ndebugging output.  \n", "created": "2015-04-16 03:37:00"}, {"url": "https://github.com/google/caja/issues/1000", "closed": "2015-04-16 03:37:00", "ttf": 0.0002777777777777778, "title": "Removing topmost block in Caja modules causes error", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1000](https://code.google.com/p/google-caja/issues/detail?id=1000) created by ihab.awad on 2009-03-02T04:21:43.000Z:\n\nIn FF 3.1, removing the topmost block around a Caja module, in other words, doing:\n\n   ___.loadModule(...);\n\ninstead of:\n\n  { ___.loadModule(...); }\n\ncauses parse errors. See:\n\n  http://groups.google.com/group/google-caja-\ndiscuss/browse_thread/thread/8c27f70b193099db\n\nAt time of writing, the module format contains the outermost block, to make things work. \nHowevr, it would be nice to get to the bottom of this strange behavior.\n", "created": "2015-04-16 03:36:53"}, {"url": "https://github.com/google/caja/issues/999", "closed": "2015-04-16 03:36:47", "ttf": 0.0002777777777777778, "title": "Cajita should allow ES5 syntax for getters and setters in object literals", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 999](https://code.google.com/p/google-caja/issues/detail?id=999) created by davidsarah.hopwood on 2009-02-26T14:34:09.000Z:\n\nThis is an enhancement request for Cajita to allow getters and setters\nusing the 'get' and 'set' syntax defined in section 11.1.5 of the ES3.1 draft.\n\n'this' would be allowed as an rvalue in the immediate getter/setter body\n(excluding the bodies of nested functions). Since Cajita code is always\nstrict code, the 'this' value passed to the getter/setter body will always\nbe the value on which the property was accessed, which the accessing code\nmust already have. (See step 6 of [[Get]] in section 8.2.3, and step 5a of\n[[ThrowingPut]] in section 8.12.5.)\n\nI think that JS implementations that do not support the get/set syntax\nthrow a SyntaxError, i.e. they fail safe. However I've only tested this for\nIE 7.0.6001.18000, and it should be tested on other implementations.\n\nRelated to issues 997 and 998.\n", "created": "2015-04-16 03:36:36"}, {"url": "https://github.com/google/caja/issues/998", "closed": "2015-04-16 03:36:36", "ttf": 0.0002777777777777778, "title": "Valija can't virtualize catchalls", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 998](https://code.google.com/p/google-caja/issues/detail?id=998) created by erights on 2009-02-25T22:28:37.000Z:\n\nAs an illustrative (but stupid) example of a catchall, say uncajoled code does\n\n```\nDate.prototype.handleRead___ = function(name) {\n  return this['get' + name](); \n};\n```\n\nCajita code &quot;(new Date()).FullYear;&quot; will then (as of this writing) return\n2009 as expected. However,\n\n```\ncajita.getProtoPropertyNames(Date);\n```\n\nwill, of course, return a list which doesn't contain 'FullYear'. Therefore,\nthe current virtualization strategy in valija-cajita.js will fail to\nvirtualize this catchall. Further, both\n\n```\ncajita.canReadPub(new Date(), 'FullYear')\n```\n\nand\n    'FullYear' in (new Date()) // in Cajita\n\nwill return false.\n\nAs with issue 997, this affects Valija's virtualization of domita, since\ndomita uses such catchalls.\n", "created": "2015-04-16 03:36:27"}, {"url": "https://github.com/google/caja/issues/997", "closed": "2015-04-16 03:36:27", "ttf": 0.0002777777777777778, "title": "Valija shadows a prototype's getHandler by calling it on the prototype.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 997](https://code.google.com/p/google-caja/issues/detail?id=997) created by erights on 2009-02-25T21:59:22.000Z:\n\nFor example, if you first do an uncajoled\n\n```\n___.useGetHandler(Date.prototype, 'fullYear', \n                  function(){return this.getFullYear();});\n```\n\nand then do a \n\n```\n(new Date().fullYear;\n```\n\nin Cajita, it returns (as of this writing) 2009, as you'd expect. But if\nyou do a\n\n```\nDate.prototype.fullYear;\n```\n\nin Valija, it returns NaN. (If issue 953 is fixed before this one is, then\n&quot;(new Date().fullYear;&quot; in Valija would also return NaN.) The reason is\nthat valija-cajita.js, in order to initialize this shadow prototype, first\ndoes a\n\n```\n cajita.getProtoPropertyNames(Date)\n```\n\nwhich returns a list of all the names to shadow. This list includes\n'fullYear' as it should. valija-cajita.js then does a\n\n```\n cajita.getProtoPropertyValue(Date, 'fullYear')\n```\n\nwhich internally does a readPub(Date.prototype, 'fullYear'), which invokes\nthe fullYear getter with Date.prototype bound to the getter's this.\n\nTo fix this, Cajita's prototype inspection would need to return a\npseudo-function representing the original getter, which Valija would need\nto use to install a corresponding getter on the shadow prototype. \n\nSince valija-cajita.js is itself written in Cajita, we'll either need to \n1) enable Cajita code to define getters (and presumably the other handlers\nas well), or we'd need to \n2) establish a separate Valija-level handling convention for Valija-level\naccesses to recognize. \n\nOne of these will be necessary in any case in order for Valija to grow into\na full emulation of ES3.1, which has getters and setters. Even if we do\noption #&nbsp;1, we'll still need to change the Valija property lookup logic to\ninvoke these virtualized getters with the right this. Currently, $v.r()\ndoes a lookup on the shadow prototype chain simply by doing a &quot;return\nstepParent[name]&quot;, where stepParent is the object's first shadow prototype.\nThe problem here is, if a getter is looked up, it will be invoked with\nstepParent as its this rather than the original object.\n", "created": "2015-04-16 03:36:07"}, {"url": "https://github.com/google/caja/issues/996", "closed": "2015-04-16 03:36:07", "ttf": 0.0002777777777777778, "title": "Refactor rendering pipeline to always pass tokens *and* marks", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 996](https://code.google.com/p/google-caja/issues/detail?id=996) created by ihab.awad on 2009-02-25T19:18:05.000Z:\n\nRefactor rendering pipeline so that it always passes consume() _and_ mark() events in a \nheterogeneous stream until the last possible step. Concretely this means --\n- Spacer and Indenter, as currently used from JsPrettyPrinter, accept _and return_ a mixed list of \n  tokens and positions.\n- All rendering pipelines end with some form of Concatenator.\n- The SourceSpansRenderer and SourceSnippetRenderer no longer need to communicate position \n  information across a delegate renderer by inserting &quot;/_@n_/&quot; comments, since this information \n  would be preserved.\n- Whatever remains of the SourceSpansRenderer would be a &quot;last step&quot; Concatenator that collects \n  position information, concatenates to text, and builds the debug maps indexing into the \n  concatenated text.\n", "created": "2015-04-16 03:35:51"}, {"url": "https://github.com/google/caja/issues/995", "closed": "2015-04-16 03:35:51", "ttf": 0.0002777777777777778, "title": "Testbed should not fail silently when Java isn't enabled", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 995](https://code.google.com/p/google-caja/issues/detail?id=995) created by erights on 2009-02-25T18:18:32.000Z:\n\nI just got private email from someone experimenting with Caja by using the\ntestbed. He said &quot;When I hit the Cajole button, nothing happens.&quot; Turns out\nhe doesn't have Java enabled, but nothing about the testbed led him to\nsuspect that was relevant.\n", "created": "2015-04-16 03:35:49"}, {"url": "https://github.com/google/caja/issues/993", "closed": "2015-04-16 03:35:46", "ttf": 0.0002777777777777778, "title": "Caja CSS DOM parser not tolerant of common CSS idiosyncracies", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 993](https://code.google.com/p/google-caja/issues/detail?id=993) created by louiscryan on 2009-02-18T23:16:40.000Z:\n\nCaja's CSS parser does'nt tolerate CSS that is in common use or at least\nthat browsers ignore.\n\ne.g\n...{\nfilter: progid:DXImageTransform.Microsoft.Alpha(opacity=80);\n}\n\nOR\n\nbody, input, td {\n  Arial, sans-serif;\n}\n\nOR\n\nbody { font : bold; } \n//A comment\nA { font : bold; }\n\nOR\n\nli{list-style:none;.padding-bottom:4px;}\n\nOR\n\n.iepngfix {\n  behavior: expression(IEPNGFIX.fix(this));\n}\n", "created": "2015-04-16 03:35:33"}, {"url": "https://github.com/google/caja/issues/992", "closed": "2015-04-16 03:35:32", "ttf": 0.0002777777777777778, "title": "Rewrite Escaping.normalizeUri", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 992](https://code.google.com/p/google-caja/issues/detail?id=992) created by mikesamuel on 2009-02-18T00:33:06.000Z:\n\nEscaping.normalizeUri does not take into account different escaping\nconventions for different URI parts, so will not reliably escape ':'s in\npaths, and cannot normalize '+' since it has a different meaning in\ndifferent parts.\n\nIt should be rewritten to take a URI as argument, and to take advantage of\nURI structure to do a stricter normalization, and to rewrite '+' to %20 or\n%2B as appropriate.\n\nIt should also be used in rewriting HTML, not just in CSS rendering.\n", "created": "2015-04-16 03:35:28"}, {"url": "https://github.com/google/caja/issues/989", "closed": "2015-04-16 03:35:10", "ttf": 0.0002777777777777778, "title": "Valija is no longer statically rejecting forbidden names", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-Defect", "Usability"], "commitsDetails": [], "body": "Original [issue 989](https://code.google.com/p/google-caja/issues/detail?id=989) created by erights on 2009-02-13T03:49:32.000Z:\n\nAs of &quot;3247M built on 2009-02-12 16:53:16.&quot;, \n\n```\nvar a___ = [b___, x.c___];\n```\n\nin Valija cajoles without even a warning to\n\n```\n$v.so('a___', [ $v.ro('b___'),\n                $v.r($v.ro('x'), 'c___') ]);\n```\n\nThis is dynamically safe, but should have been statically rejected. As is,\nwithout even a warning, it makes it harder to spot issues in porting code\nto Caja.\n\nCajita is unaffected.\n", "created": "2015-04-16 03:35:07"}, {"url": "https://github.com/google/caja/issues/988", "closed": "2015-04-16 03:35:07", "ttf": 0.0002777777777777778, "title": "HTMLElements missing properties", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 988](https://code.google.com/p/google-caja/issues/detail?id=988) created by jasvir on 2009-02-09T22:06:04.000Z:\n\nProperties used to determine window and document size seem to be missing:\ndocument.body.clientWidth, document.body.clientHeight,\ndocument.body.scrollWidth, document.body.scrollHeight (these are actually\nneeded on all HTMLElements including document.documentElement)\n", "created": "2015-04-16 03:35:03"}, {"url": "https://github.com/google/caja/issues/987", "closed": "2015-04-16 03:35:02", "ttf": 0.0002777777777777778, "title": "Domita needs an implementation of element.getBoundingClientRect()", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 987](https://code.google.com/p/google-caja/issues/detail?id=987) created by jasvir on 2009-02-09T22:04:52.000Z:\n\nDomita needs a bridal implementation of &quot;element.getBoundingClientRect()&quot;:\n This gives precise document position for elements.  Implemented in all\na-grade except safari (where we crawl offsetParents and adds up\noffsetTop/Left to brute compute)\n", "created": "2015-04-16 03:34:45"}, {"url": "https://github.com/google/caja/issues/986", "closed": "2015-04-16 03:34:45", "ttf": 0.0002777777777777778, "title": "Domita needs an implementation of element.contains()", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 986](https://code.google.com/p/google-caja/issues/detail?id=986) created by jasvir on 2009-02-09T22:03:11.000Z:\n\ndomita needs a bridal implementation of &quot;element.contains()&quot;: All A-grade\nnow has this natively except gecko, which can use its proprietary\nelement.compareDocumentPosition to do the job\n", "created": "2015-04-16 03:34:14"}, {"url": "https://github.com/google/caja/issues/985", "closed": "2015-04-16 03:34:14", "ttf": 0.0002777777777777778, "title": "Caja CSS DOM fails to clone properly", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 985](https://code.google.com/p/google-caja/issues/detail?id=985) created by louiscryan on 2009-02-09T19:10:40.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Parse the following CSS and the try to clone the tree\n\n```\n #helloworlds {\n   margin: 20px;\n   font-family: arial, sans-serif;\n   width: 310px;\n }\n\n div.person img {\n   margin-bottom: 10px;\n }\n\n div.bubble {\n   background-image:\n```\n\nurl(/gadgets/files/samplecontainer/examples/bubble.gif);\n       background-repeat: no-repeat;\n       width: 202px;\n       height: 66px;\n       padding: 12px 0px 0px 12px;\n       font-weight: bold;\n       font-size: 18px;\n       float: right;\n     }\n\n```\n .c0 { color: #&nbsp;008000; }\n .c1 { color: #FF8A00; }\n .c2 { color: #&nbsp;7777CC; }\n .c3 { color: #&nbsp;008000; }\n .c4 { color: #CC0000; }\n .c5 { color: #&nbsp;73A6FF; }\n\n div.name {\n   width: 150px;\n   text-align: right;\n   font-weight: normal;\n   font-size: 12px;\n   color: #&nbsp;999;\n   position:relative;\n   top: 10px;\n   right: -35px;\n }\n```\n\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\nGet the following exception\njava.lang.RuntimeException: Cannot find clone ctor for node class\ncom.google.caja.parser.css.CssTree$IdLiteral\n    at\ncom.google.caja.parser.ParseTreeNodes.findCloneCtor(ParseTreeNodes.java:103)\n    at\ncom.google.caja.parser.ParseTreeNodes.newNodeInstance(ParseTreeNodes.java:48)\n    at\ncom.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:345)\n    at\ncom.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:343)\n    at\ncom.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:343)\n    at\ncom.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:343)\n    at\ncom.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:343)\n\n<b>What version of the product are you using? On what operating system?</b>\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 03:34:01"}, {"url": "https://github.com/google/caja/issues/983", "closed": "2015-04-16 03:31:34", "ttf": 0.0002777777777777778, "title": "Testbed load page works only intermittently", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 983](https://code.google.com/p/google-caja/issues/detail?id=983) created by jasvir on 2009-01-29T08:41:44.000Z:\n\nFirefox 3.0.5 on Windows XP SP2 with Firebug 1.3.0 - upload script on the\ntestbed works only intermittently.  In particular, an error in the url\nsyntax results in nothing being loaded, no error messages and no further\nattempts to load work.\n\n-- Reported by Tanvi Vyas\n", "created": "2015-04-16 03:31:32"}, {"url": "https://github.com/google/caja/issues/981", "closed": "2015-04-16 03:31:27", "ttf": 0.0002777777777777778, "title": "fake style object needs getPropertyValue", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 981](https://code.google.com/p/google-caja/issues/detail?id=981) created by metaweta on 2009-01-27T23:47:04.000Z:\n\nFrom http://www.w3.org/TR/DOM-Level-2-Style/css.html\n\ngetPropertyValue\n    Used to retrieve the value of a CSS property if it has been explicitly\nset within this declaration block.\n    Parameters\n\n```\npropertyName of type DOMString\n    The name of the CSS property. See the CSS property index.\n\nReturn Value\n\nDOMString\n\n\nReturns the value of the property if it has been explicitly set for\n```\n\nthis declaration block. Returns the empty string if the property has not\nbeen set.\n    No Exceptions\n", "created": "2015-04-16 03:31:18"}, {"url": "https://github.com/google/caja/issues/980", "closed": "2015-04-16 03:31:18", "ttf": 0.0002777777777777778, "title": "document event handlers", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 980](https://code.google.com/p/google-caja/issues/detail?id=980) created by mikesamuel on 2009-01-27T22:46:54.000Z:\n\nNeed to support addEventListener and removeEventListener on the document\nobject.\n\nYUI uses these to do various things like modal dialog overlays.\n\nThis is different from adding to the body since Firefox includes frame\nscrollbars in the document but not as part of the body.\n", "created": "2015-04-16 03:31:07"}, {"url": "https://github.com/google/caja/issues/979", "closed": "2015-04-16 03:31:07", "ttf": 0.0002777777777777778, "title": "Event factory is bypassable in Valija mode", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 979](https://code.google.com/p/google-caja/issues/detail?id=979) created by metaweta on 2009-01-27T18:42:04.000Z:\n\nnew Event() succeeds in domita_test_untrusted.html when it should fail.\n", "created": "2015-04-16 03:31:02"}, {"url": "https://github.com/google/caja/issues/978", "closed": "2015-04-16 03:31:02", "ttf": 0.0002777777777777778, "title": "Filter parsed JSON properties in a way that works with native JSON.parse.", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 978](https://code.google.com/p/google-caja/issues/detail?id=978) created by erights on 2009-01-27T06:39:13.000Z:\n\nOur newly provided safe JSON library is JSON safe but not Caja safe. If the\nJSON string to be parsed includes property names that end in double\nunderscore, JSON will (correctly, by the JSON spec) unparse it. However,\nthis violates the security assumptions of the Cajita runtime. For example,\nalthough Cajita does not whitelist Object.prototype.toSource, on FF in the\ntestbed, \n\n```\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar x = JSON.parse('{&quot;toSource_canCall___&quot;: true}');\nx.toSource();\n&lt;/script&gt;\n```\n\ncajoled as Cajita, results in\n\n```\n&quot;({toSource_canCall___:true})&quot;\n```\n\nThis is potentially a very serious hole, so I'm &quot;responsibly disclosing&quot;\nthis Private.\n\nGiven the way the JSON APIs use the reviver and replacer APIs, we should be\nable wrap the real JSON with a wrapper that conjoins our sanitizing\nreplacer/reviver with any supplied by the user.\n", "created": "2015-04-16 03:30:27"}, {"url": "https://github.com/google/caja/issues/976", "closed": "2015-04-16 03:29:59", "ttf": 0.0002777777777777778, "title": "Testbed swallowing exceptions silently", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 976](https://code.google.com/p/google-caja/issues/detail?id=976) created by erights on 2009-01-19T23:48:45.000Z:\n\nThe new testbed looks great!\n\nHowever, since it shows sections named &quot;Runtime Warnings and Errors&quot; and\n&quot;Cajita Stacks&quot;, I was surprised to see no diagnostics for code that threw\nerrors. Testing, I found that even\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nthrow &quot;foo&quot;;\n&lt;/script&gt;\n\nresulted in no diagnostics shown in these areas, whether Cajita or Valija,\nand whether debug symbols were on or off. (The console did still show\ndiagnostics, but that's a separate matter.)\n", "created": "2015-04-16 03:29:54"}, {"url": "https://github.com/google/caja/issues/975", "closed": "2015-04-16 03:29:54", "ttf": 0.0002777777777777778, "title": "object type no entiendo", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 975](https://code.google.com/p/google-caja/issues/detail?id=975) created by alexsandovalv on 2009-01-16T23:26:57.000Z:\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 03:29:51"}, {"url": "https://github.com/google/caja/issues/974", "closed": "2015-04-16 03:29:51", "ttf": 0.0002777777777777778, "title": "alphavalue isn't being rendered properly in css-defs", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 974](https://code.google.com/p/google-caja/issues/detail?id=974) created by metaweta on 2009-01-10T00:07:47.000Z:\n\n&lt;div id=&quot;a&quot;&gt;hello&lt;/div&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\ndocument.getElementById(&quot;a&quot;).style.opacity=0.5;\n&lt;/script&gt;\n", "created": "2015-04-16 03:29:47"}, {"url": "https://github.com/google/caja/issues/973", "closed": "2015-04-16 03:29:47", "ttf": 0.0002777777777777778, "title": "getComputedStyle does not accept empty string as 2nd arg", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 973](https://code.google.com/p/google-caja/issues/detail?id=973) created by matsuini01 on 2009-01-07T23:20:46.000Z:\n\nwindow.getComputedStyle(document.body, null).width; // works\nwindow.getComputedStyle(document.body, '').width; // fails as &quot;Bad pseudo \nclass&quot;\n\nTechinically caja is right per the spec:\n\n&quot;pseudoElt of type DOMString\nThe pseudo-element or null if none.&quot;\n\nhttp://www.w3.org/TR/DOM-Level-2-Style/css.html#CSS-OverrideAndComputed\n\nBut Mozilla docs contradict this:\n&quot;pseudoElt is a string specifying the pseudo-element to match. Should be \nan empty string for regular elements.&quot;\nhttps://developer.mozilla.org/En/DOM:window.getComputedStyle\n\nHowever, all browsers that implement computedStyle accept either form (and \npossibly other falsey values).\n", "created": "2015-04-16 03:29:37"}, {"url": "https://github.com/google/caja/issues/972", "closed": "2015-04-16 03:29:37", "ttf": 0.0002777777777777778, "title": "Domita is missing document.defaultView", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 972](https://code.google.com/p/google-caja/issues/detail?id=972) created by jasvir on 2009-01-07T22:45:42.000Z:\n\nThis is used by some js libraries.\n\nhttp://www.w3.org/TR/DOM-Level-2-Views/views.html\n\nThis is missing on IE and will need to be emulated in bridal using element\nparentView.\n", "created": "2015-04-16 03:29:22"}, {"url": "https://github.com/google/caja/issues/971", "closed": "2015-04-16 03:29:22", "ttf": 0.0002777777777777778, "title": "Cannot link to '#'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 971](https://code.google.com/p/google-caja/issues/detail?id=971) created by ihab.awad on 2009-01-07T19:31:38.000Z:\n\nThe following HTML --\n\n   &lt;a href=&quot;#&quot;&gt;...&lt;/a&gt;\n\nproduces the following error --\n\n  FATAL_ERROR: selector_gadget.html:15+67 - 71: url # cannot be linked to\n\nThis is a common idiom. Need to investigate and come up with a solution.\n", "created": "2015-04-16 03:29:19"}, {"url": "https://github.com/google/caja/issues/970", "closed": "2015-04-16 03:29:19", "ttf": 0.0002777777777777778, "title": "CSS fancy 'filter' string rejected", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 970](https://code.google.com/p/google-caja/issues/detail?id=970) created by ihab.awad on 2009-01-07T19:27:33.000Z:\n\nThe following text in CSS --\n# op2 { opacity:0.5;filter:alpha(opacity=50)progid:DXImageTransform.Microsoft.Blur(strength=10);}\n\ngives the cajoler error --\n\n  ERROR: fixtures/dom.css:17+50 - 51: Expected !important not :\n\nHow can we address this?\n", "created": "2015-04-16 03:29:17"}, {"url": "https://github.com/google/caja/issues/969", "closed": "2015-04-16 03:29:17", "ttf": 0.0002777777777777778, "title": "clearInterval etc should be null tolerant", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 969](https://code.google.com/p/google-caja/issues/detail?id=969) created by erights on 2009-01-07T00:10:27.000Z:\n\nWhile working together to get YUI cajoled, we found that YUI calls the\nglobal clearInterval with a null argument. The spec docs are silent on the\nbehavior of clearInterval when given anything other than the result of\nsetInterval. Domita's tamed clearInterval currently rejects any other value\nwith a thrown error.\n\nBrowsers apparently implement clearInterval(null) to be a no op. The fact\nthat this YUI code is well tested and used across browsers is strong\nevidence for this. Anything all four browsers agree on is more of a\nstandard than the spec documents. And there's no security issue in making\nclearInterval be null tolerant.\n\nOpen questions:\n- What other parts of the browser APIs are also universally null tolerant.\n  One suspects clearTimeout is as well, but what else?\n- Are these things also undefined tolerant?\n- Has anyone else already asked and answered these questions?\n", "created": "2015-04-16 03:29:08"}, {"url": "https://github.com/google/caja/issues/968", "closed": "2015-04-16 03:29:08", "ttf": 0.0002777777777777778, "title": "TameFormElements need to intercept numeric access", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 968](https://code.google.com/p/google-caja/issues/detail?id=968) created by metaweta on 2008-12-22T23:01:00.000Z:\n\n&lt;form id=&quot;form&quot;&gt;&lt;input type=&quot;text&quot;&gt;&lt;/form&gt;\n&lt;script&gt;\nx = document.getElementById(&quot;form&quot;)[0];\n&lt;/script&gt;\n\nuncajoled, x is the input element; cajoled, x is undefined (since there's\nno 0 property on the wrapper).\n", "created": "2015-04-16 03:29:03"}, {"url": "https://github.com/google/caja/issues/967", "closed": "2015-04-16 03:29:03", "ttf": 0.0002777777777777778, "title": "embedded rendering mode should parenthesize post-decrement inside comparisons", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 967](https://code.google.com/p/google-caja/issues/detail?id=967) created by mikesamuel on 2008-12-20T00:16:18.000Z:\n\nThe code\n  x-- &gt; 3\nis valid javascript.\n\nHTML 4 says of the grammar for comments:\n    White space is not permitted between the markup declaration open\n    delimiter(&quot;&lt;!&quot;) and the comment open delimiter (&quot;--&quot;), but is\n    permitted between the comment close delimiter (&quot;--&quot;) and the\n    markup declaration close delimiter (&quot;&gt;&quot;).\n\nSo the -- &gt; in the javascript snippet above could end an HTML comment, thus\ndefeating embedded mode guarantees.  This can be solved by rendering it as\n  (x--) &gt; 3.\n\nThis has to be done for post-decrement ops as the left hand argument to the\nfollowing operators &gt;, &gt;=, &gt;&gt;, &gt;&gt;&gt;, &gt;&gt;=, &gt;&gt;&gt;=.\n\nThis may be a security issue if clients use embedding and browsers\nimplement escaping text spans using the same grammar as HTML4 comments.\n\nHTML5 has a tighter syntax for comments, and so a strict HTML5 parser would\n not lose embedding.\n", "created": "2015-04-16 03:28:54"}, {"url": "https://github.com/google/caja/issues/966", "closed": "2015-04-16 03:28:54", "ttf": 0.0002777777777777778, "title": "Support full JSON2 API", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 966](https://code.google.com/p/google-caja/issues/detail?id=966) created by ihab.awad on 2008-12-19T21:44:36.000Z:\n\nCurrent support for JSON in cajita.js is only a subset of JSON2.\n", "created": "2015-04-16 03:28:41"}, {"url": "https://github.com/google/caja/issues/965", "closed": "2015-04-16 03:28:41", "ttf": 0.0002777777777777778, "title": "need form.length (should return the number of elements in the form)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 965](https://code.google.com/p/google-caja/issues/detail?id=965) created by metaweta on 2008-12-19T00:43:09.000Z:\n\n&lt;form id=&quot;form&quot;&gt;\n&lt;input type=text&gt;\n&lt;input type=text&gt;\n&lt;/form&gt;\n&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\ndocument.getElementById(&quot;result&quot;).innerHTML=document.getElementById(&quot;form&quot;).length;\n&lt;/script&gt;\n\nSets result to &quot;2&quot; when uncajoled, &quot;undefined&quot; when cajoled.\n", "created": "2015-04-16 03:28:36"}, {"url": "https://github.com/google/caja/issues/964", "closed": "2015-04-16 03:28:36", "ttf": 0.0002777777777777778, "title": "arguments is not correctly emulated", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 964](https://code.google.com/p/google-caja/issues/detail?id=964) created by ben@links.org on 2008-12-18T17:14:48.000Z:\n\nConsider:\n\nvar args = (function() { return [].concat(arguments) })(1, 2, 3);\n\nin pure JS, this returns:\n\n[obj]\n\nwhere obj is an array-like object that is the value of arguments.\n\nSo, for example, args[0][0] == 1.\n\nUnder Caja, this returns\n\n[1, 2, 3]\n\nso args[0][0] != 1.\n", "created": "2015-04-16 03:28:34"}, {"url": "https://github.com/google/caja/issues/963", "closed": "2015-04-16 03:28:33", "ttf": 0.0002777777777777778, "title": "Bad error message when set{Timeout,Interval} called with string instead of function", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 963](https://code.google.com/p/google-caja/issues/detail?id=963) created by mikesamuel on 2008-12-17T02:26:08.000Z:\n\nUncajoled,\n  setTimout('alert(&quot;hello world&quot;);', 1000);\nand\n  setTimout(function () { alert(&quot;hello world&quot;); }, 1000);\nwould be the same (modulo redefinition of alert).\n\nOnly the latter works cajoled though.  We should give a useful error\nmessage for the former.\n", "created": "2015-04-16 03:28:27"}, {"url": "https://github.com/google/caja/issues/962", "closed": "2015-04-16 03:28:27", "ttf": 0.0002777777777777778, "title": "TameEvent printing weirdness", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 962](https://code.google.com/p/google-caja/issues/detail?id=962) created by erights on 2008-12-16T21:53:17.000Z:\n\nIn Cajita\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nnew Event().toString();\n&lt;/script&gt;\n\nresults in &quot;Not a real event&quot;, as it should, since domita.js defines:\n\n```\nTameEvent.prototype.toString = function () { return 'Not a real event'; };\n```\n\nHowever, the same source, run as Valija, results in &quot;[object Object]&quot;. \n", "created": "2015-04-16 03:28:13"}, {"url": "https://github.com/google/caja/issues/961", "closed": "2015-04-16 03:28:13", "ttf": 0.0002777777777777778, "title": "java.text.Normalizer usage breaks Java 1.5 compatiblity", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 961](https://code.google.com/p/google-caja/issues/detail?id=961) created by ihab.awad on 2008-12-10T22:17:21.000Z:\n\nAs of r3114, we still use java.text.Normalizer which is @since 1.6 and therefore causes our stuff to \nbreak under Java 1.5. Tobie Langel is held up by this since he uses Mac OS 10.4 which does not \nsupport Java 1.6. Filing bug to track ongoing CL by mikesamuel that fixes the problem --\n\n  http://codereview.appspot.com/10061\n", "created": "2015-04-16 03:28:09"}, {"url": "https://github.com/google/caja/issues/960", "closed": "2015-04-16 03:28:08", "ttf": 0.0002777777777777778, "title": "testEditabilityInNodeLists fails @3112", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 960](https://code.google.com/p/google-caja/issues/detail?id=960) created by ihab.awad on 2008-12-09T23:14:30.000Z:\n\ndomita_test_untrusted.js testEditabilityInNodeLists fails in r3112.\n", "created": "2015-04-16 03:28:04"}, {"url": "https://github.com/google/caja/issues/959", "closed": "2015-04-16 03:28:04", "ttf": 0.0002777777777777778, "title": "DebugMode output contains absolute paths", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 959](https://code.google.com/p/google-caja/issues/detail?id=959) created by plus.ajg on 2008-12-09T13:12:52.000Z:\n\nThis is possibly a security issue, in addition to an aesthetic one.\n\n<b>What steps will reproduce the problem?</b>\n1. Cajole a module that refers to other files using setDebugMode(true).\n2. Inspect debug output such as that fed to useDebugSymbols.\n\n<b>What is the expected output? What do you see instead?</b>\n\nSome paths are outputted absolutely (some are not), which could be a\nsecurity concern if it reveals too much server filesystem information. It\nis also inconvenient and unwieldy if the file is in a deeply nested directory.\n\nAs Ihab pointed out, the expected output isn't immediately clear. It could\nbe only the filename, or some path up to some common root. I personally\nthink the latter is better. The &quot;root&quot; could either be determined\nautomagically by the Cajoler, and/or a setCommonRoot/setBaseURI method\ncould be provided in order to make it explicit.\n\n<b>What version of the product are you using? On what operating system?</b>\n\nLinux x86_64, rev 3112.\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 03:27:57"}, {"url": "https://github.com/google/caja/issues/958", "closed": "2015-04-16 03:27:57", "ttf": 0.0002777777777777778, "title": "Domita TameElement#getAttribute et al. need to go through BRIDAL.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 958](https://code.google.com/p/google-caja/issues/detail?id=958) created by plus.ajg on 2008-12-09T12:37:00.000Z:\n\nIn short: reading className silently fails in IE.\n\n<b>What steps will reproduce the problem?</b>\n\nCurrently, domita's TameElement#setAttribute correctly defers to\nbridal.setAttribute to perform the actual property setting. Bridal takes\ncare of IE's className idiosyncrasies, as well as other things.\n\nHowever, TameElement#getAttribute (as well as #hasAttribute and\n# removeAttribute, possibly others) do _not_ go through bridal, so they\n\ndon't handle className correctly. So, something as simple as getting an\nelement's className fails in IE. E.g.\n\n&lt;div id=&quot;foo&quot; class=&quot;bar&quot;&gt;&lt;/div&gt;\n\n&lt;script&gt;\nconsole.log('className=', document.getElementById('foo').className);\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\n\nclassName=bar in all browsers except IE, where it is empty. It shouldn't \nbe empty. It's also worth noting that\n\ndocument.getElementById('foo').getAttribute('class')\n\nfails as well.\n\n<b>What version of the product are you using? On what operating system?</b>\n\nLinux x86_64 rev 3112. IE7 on Vista 32 is the failing browser.\n\n<b>Please provide any additional information below.</b>\n\nBridal does not currently provide (get|has|remove)Attribute, so first those\nneed to be implemented. Then, domita needs to defer to them.\n", "created": "2015-04-16 03:27:48"}, {"url": "https://github.com/google/caja/issues/957", "closed": "2015-04-16 03:27:48", "ttf": 0.0002777777777777778, "title": "`document.createElement('script');` throws error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 957](https://code.google.com/p/google-caja/issues/detail?id=957) created by kangax on 2008-12-09T08:15:02.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. run `document.createElement('script');` in testbed (FF3,OSX10.5)\n\n<b>What is the expected output? What do you see instead?</b>\nI would expect a tamed script element to be created. Instead, an error is\nbeing thrown.\n\n<b>What version of the product are you using? On what operating system?</b>\ntestbed\n\n<b>Please provide any additional information below.</b>\nIs this by design? If so, perhaps a more descriptive error could be provided?\n", "created": "2015-04-16 03:27:35"}, {"url": "https://github.com/google/caja/issues/956", "closed": "2015-04-16 03:27:34", "ttf": 0.0002777777777777778, "title": "JSONContainer exemption vs Record inheritance", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 956](https://code.google.com/p/google-caja/issues/detail?id=956) created by erights on 2008-12-09T02:13:50.000Z:\n\nCurrently, when uncajoled code exports a JSON container (a record or an\narray) to cajoled code, it need not explicitly allow access to any of the\nown properties of the JSON container. Instead, cajita.js has explicit\nexemptions for JSON containers. For example, an uncajoled\ncajita.canReadPub({a: 8}, 'a') will return true slowly, and in the process\nwill set a_canRead___ so the next time the same test can return true quickly.\n\nSo long as all records inherited directly from Object.prototype, this was a\nnice convenience. However, as part of the Valija revolution, we introduced\nrecord inheritance. One record can now inherit directly from another\nrecord. However, we did not revisit that the JSON container exemption was\nonly for own properties, and did not apply even to properties inherited\nfrom another record. To demonstrate the problem, after copying cajita.js\ninto a squarefree shell, we have the following session:\n\n```\nvar x = {a: 8};\n\nvar y = cajita.beget(x);\n\ncajita.canReadPub(y, 'a');\nfalse\n\ncajita.canReadPub(x, 'a');\ntrue\n\ncajita.canReadPub(y, 'a');\ntrue\n```\n\nThe first canReadPub test said no, since 'a' is neither explicitly allowed\n(no a_canRead___ is set) and it is not an own property of y. The second\ntest succeeds, since 'a' is an own property of x, and in the process sets\nthe a_canRead___ fastpath flag to x, to memoize this decision. The third\ntest now succeeds because the fastpath flag is set. The fastpath\noptimization, which should have been unobservable, has leaked.\n\nI have not marked this Priority-Critical because only uncajoled code can\ncreate this situation, and we currently do not know of any uncajoled code\nwhich does. When cajoled code makes JSON containers, all non-numeric\nproperties of these containers will have their fastpath flags set at\nconstruction time, and so they do not need this exemption. The right\nsolution -- which also helps prepare us for ES3.1 -- is to remove the\nblanket taming exemption for JSON containers. Instead, we should provide a\nhelper taming function which will enumerate and explicitly allow all own\nproperties on its argument. Uncajoled code would then need to write, for\nexample,\n\n```\nvar x = ___.record({a: 8})\n```\n\nin order to preserve the intended semantics of the first line above.\n", "created": "2015-04-16 03:27:17"}, {"url": "https://github.com/google/caja/issues/955", "closed": "2015-04-16 03:27:17", "ttf": 0.0002777777777777778, "title": "Parity error: Unowned property", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 955](https://code.google.com/p/google-caja/issues/detail?id=955) created by erights on 2008-12-09T01:44:19.000Z:\n\nIn testbed.js:\n\n```\n    if (!name &amp;&amp; ('name' in ctor) &amp;&amp; !___.hasOwnProp(ctor, 'name')) {\n      name = ctor.name;\n    }\n```\n\nappears in a context where ctor is a genuine constructor function. This\nwill only be true when Function.prototype has a 'name' property (as it does\nat least on FF, where it is the empty string) and ctor does not override it\nwith its own 'name' property. I suspect you meant not to &quot;!&quot; the hasOwnProp\ntest.\n", "created": "2015-04-16 03:27:12"}, {"url": "https://github.com/google/caja/issues/954", "closed": "2015-04-16 03:27:12", "ttf": 0.0002777777777777778, "title": "domita needs cloneNode", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 954](https://code.google.com/p/google-caja/issues/detail?id=954) created by metaweta on 2008-12-08T20:32:47.000Z:\n\nIt's used in wrap, wrapAll, wrapInner, and all the methods that delegate to\ndomManip.\n", "created": "2015-04-16 03:27:07"}, {"url": "https://github.com/google/caja/issues/953", "closed": "2015-04-16 03:27:07", "ttf": 0.0002777777777777778, "title": "Subjective vs Record inheritance", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 953](https://code.google.com/p/google-caja/issues/detail?id=953) created by erights on 2008-12-06T00:57:42.000Z:\n\nCurrently, the read() function valija-cajita.js (also known as $v.r()) has\nthe following alarming bit of code:\n\n```\n// BUG TODO(erights): figure out why things break when the\n// following line (which really shouldn't be there) is deleted.\nif (name in obj) { return obj[name];}\n```\n\nThe presence of this line had not been a problem till now, and (since it's\nin teh Valija runtime), can't cause a security problem. But Ihab just ran\ninto a case where it is causing the cajoling of Prototype to fail. I just\nfigured out why things break if it is removed -- it suppresses record\ninheritance as seen from Valija. More later...\n", "created": "2015-04-16 03:26:43"}, {"url": "https://github.com/google/caja/issues/952", "closed": "2015-04-16 03:26:43", "ttf": 0.0002777777777777778, "title": "Temporaries optimized away too aggressively. Dodged TOCTTOU bullet. Wounded by out-of-order evaluation.", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 952](https://code.google.com/p/google-caja/issues/detail?id=952) created by erights on 2008-12-05T23:19:42.000Z:\n\nThe nextfruit CL (committed as of r2956) generates far fewer temporaries\nvariables. Of course, the intent is to generate far fewer _unneeded_\ntemporary variables. But the check performed by Rule#reuse() is not safe:\n\n```\nif (rhs instanceof Reference || rhs instanceof Literal) {\n```\n\nIt says &quot;if the expression that would be repeated by the expansion is a\nsimple variable name or a literal&quot;, then repeat it. Otherwise, do the safe\nthing: evaluating the expression, store its value in a new temporary, and\nrepeat the temporary.\n\nThe problem (which Mike Samuel alerted me to) is that if any of the\nexpressions evaluated between these repetitions much cause this variable to\nbe modified (which can happen even if they don't mention it), then the\nrepeated evaluations of this variable name might give different results.\nSince these representations sometimes appears in the expansion in order to\ncheck permission and then use verified permission, this might open up a\nTOCTTOU (Time of check to time of use) security hole.\n\nThis temporary avoidance logic is used in three places, the Cajita\ntranslation rules: readPublic, setPublic, and callPublic. Fortuitously,\nnone are vulnerable to the above TOCTOU problem, downgrading this bug to a\nhigh priority documentation defect. \n\nHowever, callPublic suffers from a related hazard. For example:\n\n```\nvar f1 = function(){return 8;}\nvar f2 = function(){return 9;}\nf1.call({}, f1=f2);\n```\n\ncajita-cajoles to\n\n```\nvar x0___;\nvar f1 = ___.frozenFunc(function(){return 8;});\nvar f2 = ___.frozenFunc(function(){return 9;});\n(x0___ = f1 = f2, \n f1.call_canCall___ ? \n        f1.call(null, x0___) : \n        ___.callPub(f1, 'call', [ null, x0___ ]));\n```\n\nThe problem here is that the argument was evaluated early and saved in a\ntemporary, as it should be, but the expression for the function being\ncalled -- f1 -- was &quot;optimized&quot; into just using the variable directly where\nit appears. This means that the variable is inadvertantly read after the\narguments are evaluated. \n\nAs a result, this program incorrectly returns 9 when cajoled but correctly\nreturns 8 uncajoled. Unlike the above TOCTTOU hazard, this problem doesn't\nthreaten a direct breach of Cajita's security properties, but it does\nthreaten the integrity of programs written in Cajita.\n", "created": "2015-04-16 03:26:27"}, {"url": "https://github.com/google/caja/issues/951", "closed": "2015-04-16 03:26:27", "ttf": 0.0002777777777777778, "title": "editability not passed to nodelists", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 951](https://code.google.com/p/google-caja/issues/detail?id=951) created by metaweta on 2008-12-05T18:57:07.000Z:\n\n&lt;div&gt;blah&lt;/div&gt;\n&lt;script&gt;\ndivs = document.getElementsByTagName(&quot;div&quot;);\ndivs[0].title = &quot;hi&quot;; // fails because divs[0] not editable\n&lt;/script&gt;\n", "created": "2015-04-16 03:26:25"}, {"url": "https://github.com/google/caja/issues/950", "closed": "2015-04-16 03:26:25", "ttf": 0.0002777777777777778, "title": "java.Text.Normalizer requires Java 1.6", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 950](https://code.google.com/p/google-caja/issues/detail?id=950) created by ben@links.org on 2008-12-05T12:36:10.000Z:\n\nI thought we were targeting 1.5?\n", "created": "2015-04-16 03:26:22"}, {"url": "https://github.com/google/caja/issues/949", "closed": "2015-04-16 03:26:22", "ttf": 0.0002777777777777778, "title": "Domita does not allow code to set 'href' attribute", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 949](https://code.google.com/p/google-caja/issues/detail?id=949) created by ihab.awad on 2008-12-05T01:21:00.000Z:\n\nClient code expects to set this attribute.\n", "created": "2015-04-16 03:26:18"}, {"url": "https://github.com/google/caja/issues/948", "closed": "2015-04-16 03:26:18", "ttf": 0.0002777777777777778, "title": "Domita document.appendChild() throws", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 948](https://code.google.com/p/google-caja/issues/detail?id=948) created by ihab.awad on 2008-12-05T01:03:47.000Z:\n\nDomita document.appendChild() complains that the element is not editable.\n", "created": "2015-04-16 03:26:15"}, {"url": "https://github.com/google/caja/issues/947", "closed": "2015-04-16 03:26:15", "ttf": 0.0002777777777777778, "title": "HTML emitter vs. getAttribute() inconsistent", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 947](https://code.google.com/p/google-caja/issues/detail?id=947) created by ihab.awad on 2008-12-05T00:53:41.000Z:\n\nOne of the Prototype tests creates literal HTML looking like --\n\n  &lt;a href=&quot;test.html&quot; accesskey=&quot;L&quot; ...&gt;\n\nThe HTML compiler generates the correct code --\n\n  a('id', ...).a('href', 'test.html').a('accesskey', 'L') ...\n\nhowever, via Domita, doing the following on the same element --\n\n  element.getAttribute('accessKey')\n\nreturns nothing (actually, ''). This seems to be because the html4 defs don't contain the \n'accesskey' attribute. So two questions --\n1. Why did the HTML compiler generate the setters if Domita does not accept them; and\n2. This is a special case of Issue 933.\n", "created": "2015-04-16 03:26:13"}, {"url": "https://github.com/google/caja/issues/946", "closed": "2015-04-16 03:26:13", "ttf": 0.0002777777777777778, "title": "String value of script attribute", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 946](https://code.google.com/p/google-caja/issues/detail?id=946) created by ihab.awad on 2008-12-05T00:28:40.000Z:\n\nIf a Domita client requests the value of a script-valued attribute, like &quot;onClick&quot;, it gets the string \nvalue of the cajoled code, as in 'return plugin_dispatchEvent___ ...'. Clients expect the exact un-\ncajoled version of the code instead.\n", "created": "2015-04-16 03:26:10"}, {"url": "https://github.com/google/caja/issues/945", "closed": "2015-04-16 03:26:10", "ttf": 0.0002777777777777778, "title": "document.getElementsByTagName(\"body\") should return document.body", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 945](https://code.google.com/p/google-caja/issues/detail?id=945) created by metaweta on 2008-12-04T21:41:51.000Z:\n\ndocument.getElementsByTagName(&quot;body&quot;) currently returns undefined.\n", "created": "2015-04-16 03:26:06"}, {"url": "https://github.com/google/caja/issues/944", "closed": "2015-04-16 03:26:06", "ttf": 0.0002777777777777778, "title": "document.getElementsByTagName(\"body\") should return document.body", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 944](https://code.google.com/p/google-caja/issues/detail?id=944) created by metaweta on 2008-12-04T21:41:51.000Z:\n\ndocument.getElementsByTagName(&quot;body&quot;) currently returns undefined.\n", "created": "2015-04-16 03:25:52"}, {"url": "https://github.com/google/caja/issues/942", "closed": "2015-04-16 03:25:41", "ttf": 0.0002777777777777778, "title": "TypeError being thrown when trying to access nonexistent property", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 942](https://code.google.com/p/google-caja/issues/detail?id=942) created by metaweta on 2008-12-02T22:07:13.000Z:\n\n&lt;div id=&quot;hi&quot;&gt;hello&lt;/div&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\nd=document.getElementById(&quot;hi&quot;);\nd.style.nodeType; // should return undefined; TypeError thrown\n&lt;/script&gt;\n", "created": "2015-04-16 03:25:34"}, {"url": "https://github.com/google/caja/issues/941", "closed": "2015-04-16 03:25:34", "ttf": 0.0002777777777777778, "title": "domita nodes need nodeType", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 941](https://code.google.com/p/google-caja/issues/detail?id=941) created by metaweta on 2008-12-02T20:12:24.000Z:\n\nhttps://developer.mozilla.org/en/DOM/element.nodeType\n", "created": "2015-04-16 03:25:32"}, {"url": "https://github.com/google/caja/issues/940", "closed": "2015-04-16 03:25:32", "ttf": 0.0002777777777777778, "title": "Access to FileSystemEnvironment", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 940](https://code.google.com/p/google-caja/issues/detail?id=940) created by plus.ajg on 2008-12-02T09:05:45.000Z:\n\nHi,\n\nWhile the class FileSystemEnvironment is public, its only constructor\nisn't, which means there's currently no way to derive from it outside of\nthe caja.plugin package. Is this by design? It's a useful base class and\nit'd be nice to be able to take advantage of it.\n\nSimilarly, it'd be pretty useful if PluginCompilerMain's private\nCachingEnvironment were factored out into an independent public class.\n\nThanks.\n\n[rev 3049]\n", "created": "2015-04-16 03:25:21"}, {"url": "https://github.com/google/caja/issues/939", "closed": "2015-04-16 03:25:20", "ttf": 0.0002777777777777778, "title": "URLs that consist of just \"#\" are disallowed.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 939](https://code.google.com/p/google-caja/issues/detail?id=939) created by jasvir on 2008-12-02T00:10:42.000Z:\n\nCaja currently disallows linking to &quot;#&quot; eg &lt;a href=&quot;#&quot;&gt;x&lt;/a&gt;.  This can be\nrelaxed to removing &quot;#&quot; urls and rewriting &quot;#X&quot; urls using the id rewriting\nrules. \n", "created": "2015-04-16 03:25:14"}, {"url": "https://github.com/google/caja/issues/938", "closed": "2015-04-16 03:25:14", "ttf": 0.0002777777777777778, "title": "Setting background-image does not work on IE6/7", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 938](https://code.google.com/p/google-caja/issues/detail?id=938) created by jasvir on 2008-12-01T23:14:56.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Cajole and load the following:\n&lt;style type=&quot;text/css&quot;&gt;\ndiv {\n  background-image:url(&quot;http://thinkfu.com/evil.gif&quot;);\n}\ndiv span {display:none;}\n&lt;/style&gt;\n&lt;div&gt;&lt;span&gt;Hello world!&lt;/span&gt;&lt;/div&gt;\n1. On FF this loads an image.\n2. On IE6/7 nothing is shown.\n", "created": "2015-04-16 03:24:54"}, {"url": "https://github.com/google/caja/issues/935", "closed": "2015-04-16 03:24:46", "ttf": 0.0002777777777777778, "title": "DOMita getElementsByClassName missing unittests", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 935](https://code.google.com/p/google-caja/issues/detail?id=935) created by mikesamuel on 2008-11-24T19:31:12.000Z:\n\nNeed tests for getElementsByClassName in domita_test.html.\n\nIf we need a default implementation, maybe use Dustin Diaz's at\nhttp://ejohn.org/blog/getelementsbyclassname-speed-comparison/\n", "created": "2015-04-16 03:24:00"}, {"url": "https://github.com/google/caja/issues/934", "closed": "2015-04-16 03:24:00", "ttf": 0.0002777777777777778, "title": "\"Alice\" and \"Bob\" have an identity crisis", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 934](https://code.google.com/p/google-caja/issues/detail?id=934) created by davidsarah.hopwood on 2008-11-22T01:38:46.000Z:\n\nIn cajita.js (current SVN, revision 3012):\n\n  /**\n- Are x and y not observably distinguishable?\n  */\n  function identical(x, y) {\n    if (x === y) {\n      // 0 === -0, but they are not identical\n      return x !== 0 || 1/x === 1/y;\n    } else {\n      // NaN !== NaN, but they are identical\n      return isNaN(x) &amp;&amp; isNaN(y);\n    }\n  }\n\nisNaN coerces its argument using ToNumber. Therefore, isNaN(undefined),\nisNaN(&quot;nonnumber&quot;), etc. are true. (The name of the function is quite\nmisleading, and I will report that as a bug against ES3.1.)\n\nAs a result the above implementation of identical returns true for any \npair of values that coerce to NaN, including 'identical(&quot;Alice&quot;, &quot;Bob&quot;)'.\n\nIt should be:\n\n  /**\n- Are x and y not observably distinguishable?\n  */\n  function identical(x, y) {\n    if (x === y) {\n      // 0 === -0, but they are not identical\n      return x !== 0 || 1/x === 1/y;\n    } else {\n      // NaN !== NaN, but they are identical\n      return x !== x &amp;&amp; y !== y;\n    }\n  }\n\nThis implementation will still work correctly for a JS interpreter\nthat supports Decimal.\n\nThis does not appear to be exploitable because 'identical' is only used by \nthe TCB in the non-critical 'indexOf' and 'lastIndexOf' implementations. \n(Although the 'newTable' hashtable has a spec defined in terms \nof 'identical', the implementation does not actually use it.)\n\nThorough unit tests for identical are needed, testing each combination of \nargument types in a similar way to the existing 'browser-expectations' \ntests.\n", "created": "2015-04-16 03:23:58"}, {"url": "https://github.com/google/caja/issues/933", "closed": "2015-04-16 03:23:58", "ttf": 0.0002777777777777778, "title": "jQuery expects \"expando\" attributes", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Medium", "Prototype", "Security", "Type-Defect", "YUI", "jQuery"], "commitsDetails": [], "body": "Original [issue 933](https://code.google.com/p/google-caja/issues/detail?id=933) created by metaweta on 2008-11-20T23:48:20.000Z:\n\njQuery expects\n\n  myDiv.setAttribute('foo','bar')\n\nto behave like\n\n  myDiv.foo = bar\n\neven though foo is a property, not an attribute.  At the moment, we throw\nan Error().\n\nShould we keep this behavior, or fail silently, or set the property?\n", "created": "2015-04-16 03:22:39"}, {"url": "https://github.com/google/caja/issues/932", "closed": "2015-04-16 03:22:39", "ttf": 0.0002777777777777778, "title": "Domita elements need getAttributeNode method", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 932](https://code.google.com/p/google-caja/issues/detail?id=932) created by metaweta on 2008-11-20T22:40:26.000Z:\n\nDomita elements need getAttributeNode method\n", "created": "2015-04-16 03:22:36"}, {"url": "https://github.com/google/caja/issues/931", "closed": "2015-04-16 03:22:36", "ttf": 0.0002777777777777778, "title": "'arguments' should no longer be an array", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 931](https://code.google.com/p/google-caja/issues/detail?id=931) created by erights on 2008-11-20T22:01:14.000Z:\n\nfunction foo() {\n    return [1].concat(arguments);\n}\nfoo('a', 'b');\n\nIn ES3 or ES3.1-non-strict, this evaluates to\n\n[1, ['a', 'b']]\n\nwhereas in ES3.1-strict as of the Kona draft and Cajita and Valija, it\nevaluates to\n\n[1, 'a', 'b']\n\nsince in these, 'arguments' evaluates to a genuine array, changing the\nbehavior of concat. However, the EcmaScript committee just decided that\n'arguments' in ES3.1-strict is no longer a genuine array, so Cajita and\nValija must either change to conform or document this as a gotcha as\ncompared to ES3.1-strict.\n", "created": "2015-04-16 03:22:12"}, {"url": "https://github.com/google/caja/issues/930", "closed": "2015-04-16 03:22:12", "ttf": 0.0002777777777777778, "title": "Error cajoling empty or trivial files.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 930](https://code.google.com/p/google-caja/issues/detail?id=930) created by plus.ajg on 2008-11-17T17:37:34.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Create an empty JS file; or, e.g. a file with only comments.\n2. Cajole either through the shell using bin/cajole_html or \nprogrammatically via the PluginCompiler class.\n3. Inspect error:\n\n(shell) ERROR: Unexpected end of input in &lt;file&gt;.js\n\nor:\n\n(Java) com.google.caja.lexer.ParseException: Unexpected end of input in \n&lt;file&gt;.js\n\n<b>What is the expected output? What do you see instead?</b>\n\nAn empty module and no errors.\n\n<b>What version of the product are you using? On what operating system?</b>\n\nRev 3002, Linux x86_64.\n\n<b>Please provide any additional information below.</b>\n\nIt seems like empty files should cajole as &quot;nothing&quot; without any errors. \nOr at most with only a warning.\n", "created": "2015-04-16 03:22:01"}, {"url": "https://github.com/google/caja/issues/929", "closed": "2015-04-16 03:22:01", "ttf": 0.0002777777777777778, "title": "Security hole opened by interim tameNode() cache", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 929](https://code.google.com/p/google-caja/issues/detail?id=929) created by erights on 2008-11-15T20:46:06.000Z:\n\nThe current code for tameNode() in HEAD is:\n\n```\nfunction tameNode(node, editable) {\n  if (node === null || node === void 0) { return null; }\n  // TODO(mikesamuel): make sure it really is a DOM node\n\n  // TODO(benl): replace this with a proper cache\n  if (node.tamed___)\nreturn node.tamed___;\n```\n\nThe above naive caching code means that if dom node A is, for example,\nfirst wrapped with an editable wrapper, a later attempt to wrap A with a\nread-only wrapper may instead return the editable wrapper, subverting the\nattempted attenuation of authority. \n\nFor other possible problems, see the discussion thread at\n&lt;http://groups.google.com/group/google-caja-discuss/browse_thread/thread/6d03a2bfd9163b72&gt;.\n\nAt the time of this writing, the testbed applet is the only container we\nknow of that allows the sharing that the above cache code breaks, so I'm\nreporting this bug publicly. No &quot;responsible disclosure&quot; is needed for this\ncase.\n\nI wonder: Perhaps we should have a responsible disclosure fire drill next\ntime we have a currently-mostly-harmless security bug such as this one? Or\nperhaps we should carry out the fire drill in public using this bug itself,\nso that everyone can observe our responsible disclosure process in action?\n", "created": "2015-04-16 03:21:56"}, {"url": "https://github.com/google/caja/issues/928", "closed": "2015-04-16 03:21:56", "ttf": 0.0002777777777777778, "title": "Implement TameXMLHTTPRequest", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 928](https://code.google.com/p/google-caja/issues/detail?id=928) created by ben@links.org on 2008-11-15T13:24:38.000Z:\n\nThere are stubs, but no implementation, in domita.js.\n", "created": "2015-04-16 03:21:49"}, {"url": "https://github.com/google/caja/issues/927", "closed": "2015-04-16 03:21:49", "ttf": 0.0002777777777777778, "title": "Array.indexOf and Array.lastIndexOf are incomplete", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 927](https://code.google.com/p/google-caja/issues/detail?id=927) created by ben@links.org on 2008-11-15T12:24:11.000Z:\n\nPatch here: http://codereview.appspot.com/8674\n", "created": "2015-04-16 03:21:46"}, {"url": "https://github.com/google/caja/issues/926", "closed": "2015-04-16 03:21:46", "ttf": 0.0002777777777777778, "title": "Cajita cannot access or assign global variables defined by Valija code", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 926](https://code.google.com/p/google-caja/issues/detail?id=926) created by mikesamuel on 2008-11-15T03:49:05.000Z:\n\n&lt;script&gt;  'use strict';              var x;     &lt;/script&gt;\n&lt;script&gt;  'use strict,cajita';       x = 1;     &lt;/script&gt;\n&lt;script&gt;  'use strict';              alert(x);  &lt;/script&gt;\n\nIn the above, valija code, the first script block declares a variable,\nwhich the second sets, and the third reads and reports the value.\n\nThis fails currently because the assignment is never seen.\nThe sequence of calls looks like\n## $v.initOuter('x');\n\nvar x = **_.readImport(IMPORTS**_, 'x');\n## x = 1;\n\n$v.cf($v.ro('alert), $v.ro('x'));\n\nThe valija code is all fine, but the cajita code should be able to interact\nwith global variables defined in valija code that are part of the same module.\n\nWe can fix this by\n(1) When computing scopes, keep track of whether global variables are\ndeclared in valija or not.\n(2) Change the DefaultValijaRewriter, to, when processing Cajita code,\nrewrite global valija variable references to $v.ro and $v.so as\nappropriate.  Currently the DefaultValijaRewriter doesn't touch cajita code\nat all.\n\nThis will require rewriting compound assignments in Cajita code as well.\n", "created": "2015-04-16 03:21:35"}, {"url": "https://github.com/google/caja/issues/922", "closed": "2015-04-16 03:21:25", "ttf": 0.0002777777777777778, "title": "NPE in Valija code using \"use strict,cajita\";", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 922](https://code.google.com/p/google-caja/issues/detail?id=922) created by erights on 2008-11-13T21:48:32.000Z:\n\nIn the testbed\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n&quot;use strict,cajita&quot;;\nvar foo;\n(function (){\n    foo = function () { return 8; };\n})();\nfoo();\n&lt;/script&gt;\n\nworks with the Valija checkbox off, but with it on gives:\n\njava.lang.NullPointerException\n    at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:108)\n    at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:193)\n    at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:183)\n    at\ncom.google.caja.parser.quasiliteral.DefaultValijaRewriter$52.fire(DefaultValijaRewriter.java:1379)\n", "created": "2015-04-16 03:21:18"}, {"url": "https://github.com/google/caja/issues/920", "closed": "2015-04-16 03:21:04", "ttf": 0.0002777777777777778, "title": "input.type has wrong value", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 920](https://code.google.com/p/google-caja/issues/detail?id=920) created by felix8a on 2008-11-12T19:02:31.000Z:\n\ncajole this in the testbed:\n\n&lt;input id=&quot;x&quot;&gt;\n&lt;script&gt;\nvar x = document.getElementById('x');\n'type = '+x.type;\n&lt;/script&gt;\n\nthe expected value is 'type = text'\nthe testbed value is 'type = null'\n\ndomita.js says\n    TameInputElement.prototype.getType = function () {\n      return this.getAttribute('type');\n    };\n\nin general, node.x is not the same as node.getAttribute('x').\nthe method should return String(this.node___.type) instead.\n\nthere are other places domita uses this.getAttribute(),\nwhich might also be wrong.\n", "created": "2015-04-16 03:20:42"}, {"url": "https://github.com/google/caja/issues/919", "closed": "2015-04-16 03:20:42", "ttf": 0.0002777777777777778, "title": "Parent redirect to potential malicious site", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 919](https://code.google.com/p/google-caja/issues/detail?id=919) created by jmcreynol on 2008-11-12T18:14:27.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. parent.location.href=&quot;http://www.cnn.com&quot;;\n\n<b>What is the expected output? What do you see instead?</b>\n\nThe above makes the parent redirect to a different page. This can be used\nto redirect to a phishing page.\n\n<b>What version of the product are you using? On what operating system?</b>\n\nTested on the caja test page located here: http://cajadores.com/demos/testbed/\n", "created": "2015-04-16 03:20:35"}, {"url": "https://github.com/google/caja/issues/915", "closed": "2015-04-16 03:20:19", "ttf": 0.0002777777777777778, "title": "error snippets are too long for minified source", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 915](https://code.google.com/p/google-caja/issues/detail?id=915) created by felix8a on 2008-11-11T21:25:06.000Z:\n\nsomeone tries to cajole 100k of minified html, which has the 100k on a\nsingle line.  the html has several hundred warnings and errors.  we emit\nsource snippets for errors, so we're reprinting the 100k line for each\nerror, and the resulting output is several hundred megabytes.\n\nthis patch trims source snippets to a maximum width around the error,\ndefault 80.\n", "created": "2015-04-16 03:20:12"}, {"url": "https://github.com/google/caja/issues/912", "closed": "2015-04-16 03:20:02", "ttf": 0.0002777777777777778, "title": "Valija broken in testbed", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 912](https://code.google.com/p/google-caja/issues/detail?id=912) created by erights on 2008-11-10T23:50:29.000Z:\n\nhttp://cajadores.com/demos/testbed/\n\nAs of this report, it says Rev 2914M built on 2008-11-07 21:23:13.\n\nBetween the script tags, type &quot;3;&quot;. Cajole with valija. The cajoled\ntranslation looks correct, but no 3 gets printed out. The error console\nreports:\n\nReferenceError: Can't find variable: valijaMaker cajita-combined-min.js\n(line 592)\n", "created": "2015-04-16 03:19:58"}, {"url": "https://github.com/google/caja/issues/911", "closed": "2015-04-16 03:19:58", "ttf": 0.0002777777777777778, "title": "document.getElementById(x) returns different objects when called twice", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Prototype", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 911](https://code.google.com/p/google-caja/issues/detail?id=911) created by ben@links.org on 2008-11-10T15:29:56.000Z:\n\nbecause the underlying node gets wrapped in a TameNode, and a new one is \ncreated each time.\n\nNot sure whether this is a bug, but it seems suboptimal. And it breaks a \nunit test in Prototype.\n", "created": "2015-04-16 03:19:44"}, {"url": "https://github.com/google/caja/issues/908", "closed": "2015-04-16 03:19:30", "ttf": 0.0002777777777777778, "title": "document needs a body", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Prototype", "Type-Defect", "jQuery"], "commitsDetails": [], "body": "Original [issue 908](https://code.google.com/p/google-caja/issues/detail?id=908) created by ben@links.org on 2008-11-07T13:33:30.000Z:\n\nPrototype expects to be able to use document.body - domita.js doesn't \nprovide one, though.\n", "created": "2015-04-16 03:19:04"}, {"url": "https://github.com/google/caja/issues/907", "closed": "2015-04-16 03:19:04", "ttf": 0.0002777777777777778, "title": "ClassCastException in DebuggingSymbolsStage", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 907](https://code.google.com/p/google-caja/issues/detail?id=907) created by felix8a on 2008-11-06T22:52:41.000Z:\n\ncajole this invalid html:\n\n   &lt;style&gt;{}&lt;/style&gt;\n\nwith debug symbols off, caja reports the error.\nwith debug symbols on, caja throws a ClassCastException.\n", "created": "2015-04-16 03:18:48"}, {"url": "https://github.com/google/caja/issues/906", "closed": "2015-04-16 03:18:48", "ttf": 0.0002777777777777778, "title": "image/svg+xml should be rejected by sanitizing proxies", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 906](https://code.google.com/p/google-caja/issues/detail?id=906) created by mikesamuel on 2008-11-06T22:48:55.000Z:\n\nimage/svg+xml loads an image specified in XML format.\n\nXML suffers from XXE attacks, and so a sanitizing proxy should reject SVG\nimages or take care to rewrite URLs in them.\n", "created": "2015-04-16 03:18:46"}, {"url": "https://github.com/google/caja/issues/904", "closed": "2015-04-16 03:18:39", "ttf": 0.0002777777777777778, "title": "need cloneNode implementation", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 904](https://code.google.com/p/google-caja/issues/detail?id=904) created by ben@links.org on 2008-11-06T16:55:04.000Z:\n\nPrototype uses cloneNode in the Element constructor (see src/dom.js).\n\nI've worked around it by eliminating the cache, so currently non-urgent.\n", "created": "2015-04-16 03:18:26"}, {"url": "https://github.com/google/caja/issues/903", "closed": "2015-04-16 03:18:25", "ttf": 0.0002777777777777778, "title": "new Element('div') dies mysteriously", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 903](https://code.google.com/p/google-caja/issues/detail?id=903) created by ben@links.org on 2008-11-06T16:38:53.000Z:\n\nPut\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nnew Element('div');\n&lt;/script&gt;\n\nin the testbed and cajole - error is:\n\n({message:&quot;&quot;, \nstack:&quot;Error()@:0\\nassert(false)@http://cajadores.com/demos/testbed/cajita-\ncombined-min.js:357...\n", "created": "2015-04-16 03:18:21"}, {"url": "https://github.com/google/caja/issues/902", "closed": "2015-04-16 03:18:21", "ttf": 0.0002777777777777778, "title": "cajita.js still has old caja function calls", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 902](https://code.google.com/p/google-caja/issues/detail?id=902) created by jasvir on 2008-11-06T06:26:21.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. grep isMethod cajita.js\n\n<b>What is the expected output? What do you see instead?</b>\nI don't expect to see isMethod.\n", "created": "2015-04-16 03:18:18"}, {"url": "https://github.com/google/caja/issues/901", "closed": "2015-04-16 03:18:18", "ttf": 0.0002777777777777778, "title": "toJSON not settable on TameElement instance", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 901](https://code.google.com/p/google-caja/issues/detail?id=901) created by ben@links.org on 2008-11-05T17:01:53.000Z:\n\nPrototype contains this unit test (the element with id &quot;test&quot; is a div, as \nthe text suggests):\n\n```\nvar element = $('test');\nthis.assertUndefined(Object.toJSON(element));\nelement.toJSON = function(){return 'I\\'m a div with id test'};\nthis.assertEqual('I\\'m a div with id test', Object.toJSON(element));\n```\n\nthe third line fails with:\n\nError: Not settable: ([TameElement]).toJSON([object Object])\n\nI'm guessing it shouldn't!\n", "created": "2015-04-16 03:18:05"}, {"url": "https://github.com/google/caja/issues/900", "closed": "2015-04-16 03:18:05", "ttf": 0.0002777777777777778, "title": "All demos are broken on Cajadores", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 900](https://code.google.com/p/google-caja/issues/detail?id=900) created by jasvir on 2008-11-04T19:46:00.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Visit http://cajadores.com/demos/\n2. Note that none of calendar, lolcat or springgraph are working\n", "created": "2015-04-16 03:17:54"}, {"url": "https://github.com/google/caja/issues/899", "closed": "2015-04-16 03:17:54", "ttf": 0.0002777777777777778, "title": "Exception backtrace information is not available in SpiderMonkey/Firebug", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 899](https://code.google.com/p/google-caja/issues/detail?id=899) created by benl+legacy@google.com on 2008-11-04T18:35:43.000Z:\n\na thrown error gets cajoled to something like:\n\nthrow ___.construct(ReferenceError, [ 'not found: ' + name ]);\n\n(real live example from valija.co.js).\n\nbecause the exception is actually construction in construct(), the reported \nerror line is in construct. In firebug, at least, this results in an error \ninside construct() and no stack backtrace.\n\n&quot;not found: navigator                  cajita.js (line 2606)\n[Break on this error] case 1: return new ctor(args[0]);&quot;\n", "created": "2015-04-16 03:17:30"}, {"url": "https://github.com/google/caja/issues/898", "closed": "2015-04-16 03:17:29", "ttf": 0.0002777777777777778, "title": "Caja violates block scoping of named functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 898](https://code.google.com/p/google-caja/issues/detail?id=898) created by erights on 2008-11-03T19:51:38.000Z:\n\nvar a = [];\nfor (var i = 0; i &lt; 3; i++) {\n  function f(){return g;}\n  function g(){return f;}\n  a.push(f);\n  a.push(g);\n}\na[0]() === a[1];\n\nES3 technically disallows named function declarations from appearing in\nnested blocks, like above. However, all major browsers accept it, so all\nmust. Uncajoled, the last expression above will return either true or false\ntoday, depending on the browser. \n\nES3.1 sought to give this an agreed meaning, but had to back off mostly\nbecause we ran out of time. ES-Harmony will spec this to do proper\nblock-level letrec-like lexical scoping, in which case the last expression\nabove must return true. \n\nIn Cajita and Valija today, the last expression above always returns false,\nindependent of browser. This is because \n1) We hoist the variable representing the function name to the enclosing body.\n2) We hoist the initialization of this variable to the beginning of the\nenclosing block.\n3) A nested function captures the variables in scope, not their values.\n", "created": "2015-04-16 03:17:12"}, {"url": "https://github.com/google/caja/issues/897", "closed": "2015-04-16 03:17:12", "ttf": 0.0002777777777777778, "title": "Fix indent on output", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 897](https://code.google.com/p/google-caja/issues/detail?id=897) created by ben@links.org on 2008-11-02T16:48:50.000Z:\n\nThe output (as seen on Yahoo!'s site, for example) is stupidly indented, \nbecause it tries to line up function bodies with their &quot;function ...&quot; \ndeclaration.\n\nInstead, just indent two spaces per indent level.\n", "created": "2015-04-16 03:17:01"}, {"url": "https://github.com/google/caja/issues/895", "closed": "2015-04-16 03:16:51", "ttf": 0.0002777777777777778, "title": "Be strict about valid id's when parsing", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 895](https://code.google.com/p/google-caja/issues/detail?id=895) created by metaweta on 2008-11-02T00:19:09.000Z:\n\n&lt;div id=1&gt;This works fine.&lt;/div&gt;\n&lt;script&gt;\ndiv.id = 2; // fails to set the id, since &quot;2&quot; is not a valid xml name\n&lt;/script&gt;\n\nAlso, setting the id dynamically fails to give any indication that\nsomething went wrong.\n", "created": "2015-04-16 03:16:49"}, {"url": "https://github.com/google/caja/issues/888", "closed": "2015-04-16 03:15:59", "ttf": 0.0002777777777777778, "title": "Crossbrowser testing broken in trunk", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 888](https://code.google.com/p/google-caja/issues/detail?id=888) created by jasvir on 2008-10-30T23:21:23.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Load google-caja/ant-lib/com/google/caja/plugin/domita_test.html in FF3\n\n<b>What is the expected output? What do you see instead?</b>\nExpecting lots of green tests.  Instead an exception is thrown &quot;0/0 failed&quot;\n\ndomita_test.html is not tested by &quot;ant runtests&quot; and as a result can break\nas a result of cajoler changes without the committer being aware of the\nbreakage.\n", "created": "2015-04-16 03:15:56"}, {"url": "https://github.com/google/caja/issues/883", "closed": "2015-04-16 03:15:35", "ttf": 0.0002777777777777778, "title": "uncategorized changes to domita.js", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 883](https://code.google.com/p/google-caja/issues/detail?id=883) created by felix8a on 2008-10-29T13:54:34.000Z:\n\nthis is an uncategorized diff of our domita.js changes.  most of the\nchanges add missing bits of dom support.  it's poorly structured and lacks\ntests, so I need to clean it up sometime before submitting it for real. \nI'm filing this now mainly to give some idea of the extent of our local\nchanges.\n\nI'm wondering if it might be worth waiting for modularization of domita\nbefore re-integration.\n\nalso, I think it would be helpful if domita explicitly supported extending\nfunctionality via monkeypatching or something similar.  it's kind of\nawkward to maintain extended functionality as patches (merging independent\nadditions almost always has conflicts).\n", "created": "2015-04-16 03:15:26"}, {"url": "https://github.com/google/caja/issues/882", "closed": "2015-04-16 03:15:26", "ttf": 0.0002777777777777778, "title": "<!doctype> is a fatal error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 882](https://code.google.com/p/google-caja/issues/detail?id=882) created by felix8a on 2008-10-29T13:26:36.000Z:\n\ncaja tends to consider &lt;!doctype&gt; directives fatal errors, even correctly\nplaced ones.\n\nthe attached trivial patch makes caja ignore any directives.\n", "created": "2015-04-16 03:15:22"}, {"url": "https://github.com/google/caja/issues/881", "closed": "2015-04-16 03:15:22", "ttf": 0.0002777777777777778, "title": "form onsubmit policy is difficult to override", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 881](https://code.google.com/p/google-caja/issues/detail?id=881) created by felix8a on 2008-10-29T13:12:39.000Z:\n\nat the moment, we allow forms to submit using the default onsubmit action.\n that might change sometime in the future, but right now it's supported\nbehavior.\n\nthat's awkward to do in current caja, because caja aggressively forces\nforms to have onsubmit handlers that always return false.  so we have a\nlocal patch to caja that removes the constraint in\nDomAttributeConstraint.java and domita.js.  obviously, that shouldn't go\ninto trunk.\n\nnot sure caja really needs to support this.  I'm filing this issue mainly\nto help keep track of the local patch.\n", "created": "2015-04-16 03:15:19"}, {"url": "https://github.com/google/caja/issues/879", "closed": "2015-04-16 03:15:14", "ttf": 0.0002777777777777778, "title": "Add a function to the autogenerated css-defs.js that maps between CSS property names and DOM2 Style node property names", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 879](https://code.google.com/p/google-caja/issues/detail?id=879) created by mikesamuel on 2008-10-28T17:21:24.000Z:\n\nIn domita.js (and domita_test.html) we use a horrible hack\n  cssPropertyName.replace(\n      /-([a-z])/g,\n      function (_, ltr) { return ltr.toUpperCase(); });\nto map between CSS property names (e.g. font-size, background-color) and\nDOM2 CSS Style Node names.\n\nConsolidate this code and extend it to handle exceptions to the rule such\nas float&lt;-&gt;cssFloat (see http://beradrian.wordpress.com/tag/cssfloat/ )\n", "created": "2015-04-16 03:15:08"}, {"url": "https://github.com/google/caja/issues/878", "closed": "2015-04-16 03:15:08", "ttf": 0.0002777777777777778, "title": "Recognize \"use strict,cajita\" in script blocks to switch between Cajita and Valija mode", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 878](https://code.google.com/p/google-caja/issues/detail?id=878) created by mikesamuel on 2008-10-28T17:14:39.000Z:\n\nThe current ES3.1 proposal uses a string literal at the beginning of a\nprogram unit to indicate that a program unit is in strict mode instead of\nthe default backwards-compatibility mode.\n\nWhen the ConsolidateCodeStage takes multiple program units and combines\nthem together, we need to make a determination about which blocks are\nValija and which are Cajita.  It should look for a structure like\n  Block\n    ExpressionStmt\n      StringLiteral : s\nwhere s matches /^use\\s+strict\\s_,(?:._,\\s*)?cajita\\b/.\n\nIf there is a match, it should create a pseudo-node that marks the contents\nas Cajita\n\nModify the Valija to Cajita rewriter add a rule that matches the\npseudo-node and returns its sole child without expanding it.\n\nMark, can you point to any docs which describe the &quot;use strict&quot; pragma?\n", "created": "2015-04-16 03:14:54"}, {"url": "https://github.com/google/caja/issues/876", "closed": "2015-04-16 03:14:49", "ttf": 0.0002777777777777778, "title": "Some inputs (function hoisting?) crash side by side renderer", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 876](https://code.google.com/p/google-caja/issues/detail?id=876) created by ihab.awad on 2008-10-28T01:11:31.000Z:\n\nSome inputs (possibly those that induce function hoisting) cause an exception in the side by side \nrenderer. The attached zipfile contains a set of inputs and a script to run the cajoler against \nthem.\n\nNOTE: This bug is being filed against a pending change in ihab/de-lado-a-lado@2806. Will \nupdate the bug report when the change is committed.\n\nThis is the stack trace of the failure at time of writing:\n\njava.lang.IllegalArgumentException: fromIndex(823) &gt; toIndex(820)\n    at java.util.SubList.&lt;init&gt;(AbstractList.java:604)\n    at java.util.RandomAccessSubList.&lt;init&gt;(AbstractList.java:758)\n    at java.util.AbstractList.subList(AbstractList.java:468)\n    at \ncom.google.caja.render.SideBySideRenderer.originalSourceSnippet(SideBySideRenderer.java:145)\n    at com.google.caja.render.SideBySideRenderer.emitLine(SideBySideRenderer.java:122)\n    at com.google.caja.render.SideBySideRenderer.consume(SideBySideRenderer.java:89)\n    at com.google.caja.parser.js.Identifier.render(Identifier.java:57)\n    at com.google.caja.parser.js.Reference.render(Reference.java:72)\n    at com.google.caja.parser.js.Operation.renderParam(Operation.java:163)\n    at com.google.caja.parser.js.Operation.render(Operation.java:100)\n    at com.google.caja.parser.js.Operation.renderParam(Operation.java:163)\n    at com.google.caja.parser.js.Operation.render(Operation.java:124)\n    at com.google.caja.parser.js.Conditional.render(Conditional.java:72)\n    at com.google.caja.parser.js.Block.renderBlock(Block.java:67)\n    at com.google.caja.parser.js.FunctionConstructor.render(FunctionConstructor.java:101)\n    at com.google.caja.parser.js.Operation.render(Operation.java:135)\n    at com.google.caja.parser.js.Operation.render(Operation.java:135)\n    at com.google.caja.parser.js.Declaration.renderShort(Declaration.java:96)\n    at com.google.caja.parser.js.Declaration.render(Declaration.java:75)\n    at com.google.caja.parser.js.Block.renderBlock(Block.java:67)\n    at com.google.caja.parser.js.FunctionConstructor.render(FunctionConstructor.java:101)\n    at com.google.caja.parser.js.Operation.render(Operation.java:135)\n    at com.google.caja.parser.js.Operation.render(Operation.java:135)\n    at com.google.caja.parser.js.Operation.renderParam(Operation.java:163)\n    at com.google.caja.parser.js.Operation.render(Operation.java:124)\n    at com.google.caja.parser.js.Operation.render(Operation.java:135)\n    at com.google.caja.parser.js.ExpressionStmt.render(ExpressionStmt.java:75)\n    at com.google.caja.parser.js.Block.renderBlock(Block.java:67)\n    at com.google.caja.parser.js.Block.render(Block.java:78)\n    at com.google.caja.parser.js.Block.renderBlock(Block.java:67)\n    at com.google.caja.parser.js.TryStmt.render(TryStmt.java:76)\n    at com.google.caja.parser.js.Block.renderBlock(Block.java:67)\n    at com.google.caja.parser.js.FunctionConstructor.render(FunctionConstructor.java:101)\n    at com.google.caja.parser.js.Operation.render(Operation.java:135)\n    at com.google.caja.parser.js.ExpressionStmt.render(ExpressionStmt.java:75)\n    at com.google.caja.parser.js.Block.renderBlock(Block.java:67)\n    at com.google.caja.parser.js.Block.render(Block.java:78)\n    at com.google.caja.plugin.PluginCompilerMain.writeFile(PluginCompilerMain.java:222)\n    at com.google.caja.plugin.PluginCompilerMain.run(PluginCompilerMain.java:110)\n    at com.google.caja.plugin.PluginCompilerMain.main(PluginCompilerMain.java:308)\n", "created": "2015-04-16 03:14:45"}, {"url": "https://github.com/google/caja/issues/870", "closed": "2015-04-16 03:14:23", "ttf": 0.0002777777777777778, "title": "The Runaway Bridal -- ReferenceError in testbed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 870](https://code.google.com/p/google-caja/issues/detail?id=870) created by erights on 2008-10-25T04:11:30.000Z:\n\nWhen trying to cajole the MS WebSandbox benchmark in the testbed, I get\n\u00abReferenceError: Can't find variable: bridal\u00bb. Ihab confirmed that the\ntestbed still worked on this as of r2758.\n\nComparing at\nhttp://code.google.com/p/google-caja/source/diff?spec=svn2683&amp;old=2627&amp;r=2769&amp;format=side&amp;path=%2Ftrunk%2Fbuild.xml\nWe see at line 363 on the left the line\n   &lt;include file=&quot;${src}/com/google/caja/plugin/bridal.js&quot;/&gt;\nwhich doesn't appear on the right.\n\nHowever, this wasn't the problem. Even with that line added back in, my\ntestbed still gives the same complaint.\n\nAny idea what's going on, or where to look next?\n", "created": "2015-04-16 03:14:21"}, {"url": "https://github.com/google/caja/issues/868", "closed": "2015-04-16 03:14:14", "ttf": 0.0002777777777777778, "title": "domita.js has errors not caught by runtime tests", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 868](https://code.google.com/p/google-caja/issues/detail?id=868) created by jasvir on 2008-10-24T22:38:40.000Z:\n\nLine 917 of domita.js is accidentally a nop valid statement\n", "created": "2015-04-16 03:14:09"}, {"url": "https://github.com/google/caja/issues/867", "closed": "2015-04-16 03:14:09", "ttf": 0.0002777777777777778, "title": "vertical spacing problem with html-emitter", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 867](https://code.google.com/p/google-caja/issues/detail?id=867) created by felix8a on 2008-10-23T01:43:25.000Z:\n\nrun this in the testbed in ie7, cajoled and uncajoled:\n\n&lt;div style=&quot;border: 1px solid red;width:100px;&quot;&gt;\n&lt;p id=&quot;a&quot;&gt;test&lt;/p&gt;\n&lt;/div&gt;\n\ncajoled, there's extra vertical space above and below the 'test'\n\nthe cause is pretty strange, I don't understand it.  it happens only with\nspecific dom manipulation sequences.  the attached file explores this a little.\n", "created": "2015-04-16 03:14:00"}, {"url": "https://github.com/google/caja/issues/866", "closed": "2015-04-16 03:14:00", "ttf": 0.0002777777777777778, "title": "caja testbed is in quirks mode", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 866](https://code.google.com/p/google-caja/issues/detail?id=866) created by felix8a on 2008-10-23T00:28:04.000Z:\n\nrunning html/css tests in the testbed is a little misleading because the\npage and the uncajoled iframe are in quirks mode.\n\nhow about adding &lt;!doctype html&gt; (html5) to the page and to the iframe?\n", "created": "2015-04-16 03:13:55"}, {"url": "https://github.com/google/caja/issues/865", "closed": "2015-04-16 03:13:55", "ttf": 0.0002777777777777778, "title": "Radio buttons are not selectable in IE", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 865](https://code.google.com/p/google-caja/issues/detail?id=865) created by naitiks on 2008-10-22T20:49:56.000Z:\n\nThis example:\n  &lt;input type=&quot;radio&quot;&gt;\n\nProduces a radio button which cannot be toggled in IE. FF works as expected.\n", "created": "2015-04-16 03:13:22"}, {"url": "https://github.com/google/caja/issues/864", "closed": "2015-04-16 03:13:22", "ttf": 0.0002777777777777778, "title": "htmlparser doesn't think \\r is whitespace", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 864](https://code.google.com/p/google-caja/issues/detail?id=864) created by felix8a on 2008-10-22T14:56:14.000Z:\n\nrun this in a shell:\n\nprintf '\\n&lt;body&gt;&lt;/body&gt;\\n' &gt; t1.html\nprintf '\\r\\n&lt;body&gt;&lt;/body&gt;\\r\\n' &gt; t2.html\ncaja -i t1.html -j t1.js\ncaja -i t2.html -j t2.js\n\nthe second caja run spits out these errors:\n\nLINT: t2.html:2+1 - 7: 'body' start tag found but the 'body' element is\nalready open.\nLINT: t2.html:2+14 - 3+1: Non-space character after body.\n\nthis looks like a bug in htmlparser.\nin nu.validator.htmlparser.impl.TreeBuilder.characters()\nit doesn't include '\\r' in the list of whitespace chars.\n\nthe html spec says that \\r is a linebreak char, and linebreaks are\nwhitespace chars.\nhttp://www.w3.org/TR/html401/struct/text.html#didx-white_space-1\n", "created": "2015-04-16 03:13:18"}, {"url": "https://github.com/google/caja/issues/856", "closed": "2015-04-16 03:12:31", "ttf": 0.0002777777777777778, "title": "In testbed uncajoled and cajoled code behave differently", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 856](https://code.google.com/p/google-caja/issues/detail?id=856) created by jasvir on 2008-10-21T00:17:08.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. In the testbed:\n\n&lt;div id=&quot;xxx&quot;&gt;&lt;/div&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\ndocument.getElementById(&quot;xxx&quot;).innerHTML = &quot;hello&quot;;\n&lt;/script&gt;\n1. Run uncajoled\n2. Run cajoled\n\n<b>What is the expected output? What do you see instead?</b>\nThe above snippet works cajoled but doesn't work uncajoled.  These should\nwork the same.  (It works the same if wrapped in a &lt;body&gt; tag)\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 03:12:27"}, {"url": "https://github.com/google/caja/issues/855", "closed": "2015-04-16 03:12:27", "ttf": 0.0002777777777777778, "title": "ie7, html-emitter doesn't set input defaultValue", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 855](https://code.google.com/p/google-caja/issues/detail?id=855) created by felix8a on 2008-10-20T22:37:16.000Z:\n\n&lt;form&gt;\n&lt;input type='text' value='one'&gt;\n&lt;input type='reset'&gt;\n&lt;/form&gt;\n&lt;form&gt;\n&lt;input id='x' type='text' value='two'&gt;\n&lt;input type='reset'&gt;\n&lt;/form&gt;\n\nrun that in the testbed.\ntype something in the input boxes.\nclick on each 'reset' button.\n\nin IE7, 'one' will be reset, but 'two' will become blank.\n\nthe problem is, when html-emitter can't use innerHTML,\nit uses setAttribute('value',...),\nand in IE7 that only sets input.value,\nit doesn't set input.defaultValue.\n\nin other browsers, setAttribute('value',...)\nwill set both input.value and input.defaultValue.\n", "created": "2015-04-16 03:12:18"}, {"url": "https://github.com/google/caja/issues/854", "closed": "2015-04-16 03:12:18", "ttf": 0.0002777777777777778, "title": "confusing error message for (undefined.x)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 854](https://code.google.com/p/google-caja/issues/detail?id=854) created by felix8a on 2008-10-20T21:53:06.000Z:\n\n&lt;script&gt;\nundefined.x;\n&lt;/script&gt;\n\nin ff3, the error message in firebug console is:\n\nDiscovery of direct constructors for foreign begotten objects not\nimplemented on this platform.\n\nthat's a very strange error message to get for that code.\n\nthis turns up a lot.  for example:\n   document.getElementById('typo').value\n\nit might be helpful to have a separate error message specifically for\ntrying to access properties of null and undefined.\n", "created": "2015-04-16 03:12:11"}, {"url": "https://github.com/google/caja/issues/850", "closed": "2015-04-16 03:11:55", "ttf": 0.0002777777777777778, "title": "Default checkbox state does not work in IE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 850](https://code.google.com/p/google-caja/issues/detail?id=850) created by naitiks on 2008-10-20T18:28:12.000Z:\n\nThis example:\n  &lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot;&gt;\n\nShows up correctly as a checkbox with a check in Firefox. But in IE, it\nshows up as a checkbox without the check. The problem is the conflicting\nbroken setAttribute in IE. For this to work correctly in IE, the sequence\nof calls must look like:\n\nvar el = document.createElement('input')\nel.setAttribute('type', 'checkbox');\ndocument.appendChild(el);\nel.setAttribute('checked', 'checked');\n\nThat is, the checked attribute only works after the element has been added\nto the DOM. (But type can only be set before the element has been added to\nthe DOM.)\n", "created": "2015-04-16 03:11:48"}, {"url": "https://github.com/google/caja/issues/847", "closed": "2015-04-16 03:11:25", "ttf": 0.0002777777777777778, "title": "html-sanitizer.js:131+9 - 52: escape \\w is redundant in a quoted string ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 847](https://code.google.com/p/google-caja/issues/detail?id=847) created by felix8a on 2008-10-19T19:54:55.000Z:\n\nlint message from 'ant MinifiedJs'\n\nthe net effect is that this does the wrong thing when cajoled:\n\n&lt;div id=&quot;a&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\ndocument.getElementById('a').innerHTML='&lt;!doctype html&gt;hello';\n&lt;/script&gt;\n", "created": "2015-04-16 03:11:19"}, {"url": "https://github.com/google/caja/issues/846", "closed": "2015-04-16 03:11:19", "ttf": 0.0002777777777777778, "title": "Style classes do not work", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype.js", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 846](https://code.google.com/p/google-caja/issues/detail?id=846) created by ihab.awad on 2008-10-19T03:26:26.000Z:\n\nEntering the below into the testbed, the &quot;Style class&quot; text has default\nbackground, while the &quot;Style attribute&quot; text has styled (green) background.\n\nTestbed built from r2660 trunk.\n\n&lt;style type=&quot;text/css&quot;&gt;\n  .s { background-color: #ff0000; }\n&lt;/style&gt;\n\n&lt;div class=&quot;s&quot;&gt;Style class.&lt;/div&gt;\n\n&lt;div style=&quot;background-color: #&nbsp;00ff00;&quot;&gt;Style attribute.&lt;/div&gt;\n", "created": "2015-04-16 03:11:10"}, {"url": "https://github.com/google/caja/issues/845", "closed": "2015-04-16 03:11:10", "ttf": 0.0002777777777777778, "title": "IE can't set innerHTML of table element", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 845](https://code.google.com/p/google-caja/issues/detail?id=845) created by mikesamuel on 2008-10-18T01:44:19.000Z:\n\nhtml-emitter's ih method fails with an unknown error when used to inject\nthe content of a table element.\n\nThis fails on IE in squarefree shell and in domita_test.html:\nvar table = document.createElement('table');\ntable.innerHTML = '\\n   &lt;tbody&gt;&lt;tr&gt;\\n   &lt;td&gt;&lt;strong&gt;Click me if this is\nred&lt;/strong&gt;&lt;/td&gt;\\n   &lt;/tr&gt;\\n  &lt;/tbody&gt;';\nError: Unknown runtime error\n", "created": "2015-04-16 03:11:01"}, {"url": "https://github.com/google/caja/issues/844", "closed": "2015-04-16 03:11:00", "ttf": 0.0002777777777777778, "title": "Fatal Privilege Escalation introduced by erights/no-xo4a", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 844](https://code.google.com/p/google-caja/issues/detail?id=844) created by erights on 2008-10-18T01:29:51.000Z:\n\nWhen a method is tamed as a generic method and then reified, it is\nextracted as a malfunction -- a record with call, bind, and apply members.\nHowever, if these call, bind, or apply members are called with null or\nundefined for its first (this-value) argument, the original tamed method\nwill run with its this-value bound to the real global object.\n", "created": "2015-04-16 03:10:54"}, {"url": "https://github.com/google/caja/issues/843", "closed": "2015-04-16 03:10:54", "ttf": 0.0002777777777777778, "title": "Testbed no longer showing script output", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 843](https://code.google.com/p/google-caja/issues/detail?id=843) created by erights on 2008-10-18T01:25:52.000Z:\n\nPlacing an expression in a script block and hitting &quot;cajole&quot; -- nothing is\ndisplayed for the expression's value on the right. This breakage happened\nvery recently. It may be browser specific -- Mike Stay isn't seeing the\nproblem on an up-to-date testbed using FF on Mac.\n", "created": "2015-04-16 03:10:41"}, {"url": "https://github.com/google/caja/issues/842", "closed": "2015-04-16 03:10:40", "ttf": 0.0002777777777777778, "title": "Testbed self-labeling on cajadores is confused", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 842](https://code.google.com/p/google-caja/issues/detail?id=842) created by erights on 2008-10-18T01:20:12.000Z:\n\nWhen I fetch http://cajadores.com/demos/testbed/ in my FF3, at the top of\nthe page I see\n\nGoogle Caja. Copyright (C) 2008, Google Inc. Rev svn: This client is too\nold to work with working copy '.'; please get a newer Subversion client\nbuilt on 2008-10-16 21:57:32.  \n", "created": "2015-04-16 03:10:34"}, {"url": "https://github.com/google/caja/issues/840", "closed": "2015-04-16 03:10:25", "ttf": 0.0002777777777777778, "title": "accessing properties of document throws an error instead of returning undefined", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 840](https://code.google.com/p/google-caja/issues/detail?id=840) created by metaweta on 2008-10-17T23:55:22.000Z:\n\n&lt;script&gt;document.body&lt;/script&gt;\n\nor\n\n&lt;script&gt;document.addEventListener&lt;/script&gt;\n\nresults in \n\n&quot;this.node___ is undefined&quot;\n", "created": "2015-04-16 03:10:22"}, {"url": "https://github.com/google/caja/issues/836", "closed": "2015-04-16 03:10:08", "ttf": 0.0002777777777777778, "title": "Need lint warning on nonstandard attributes of script blocks", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 836](https://code.google.com/p/google-caja/issues/detail?id=836) created by metaweta on 2008-10-17T19:15:06.000Z:\n\nLike the &quot;for&quot; attribute of scripts under IE:\nhttp://msdn.microsoft.com/en-us/library/ms533870.aspx\n", "created": "2015-04-16 03:10:04"}, {"url": "https://github.com/google/caja/issues/834", "closed": "2015-04-16 03:09:41", "ttf": 0.0002777777777777778, "title": "array.sort(fn) fails in valija", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 834](https://code.google.com/p/google-caja/issues/detail?id=834) created by felix8a on 2008-10-16T23:09:46.000Z:\n\n&lt;script&gt;\nvar v = [1, 2, 3, 4, 5];\nvar cmp = function (a, b) {\n  return (a &lt; b) ? -1 : (b &lt; a) ? +1 : 0;\n};\nv.sort(cmp);\n&lt;/script&gt;\n\nrun in the testbed, it throws an exception\nmessage:&quot;expected function instead of object: function (a, b) {\\n [cajoled\ncode]\\n}&quot;\n", "created": "2015-04-16 03:09:28"}, {"url": "https://github.com/google/caja/issues/832", "closed": "2015-04-16 03:09:25", "ttf": 0.0002777777777777778, "title": "NPE with uppercase <IMG SRC=...>", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 832](https://code.google.com/p/google-caja/issues/detail?id=832) created by felix8a on 2008-10-16T10:15:06.000Z:\n\nin the testbed, these cause NPE\n&lt;img SRC=&quot;abc&quot;&gt;\n&lt;IMG src=&quot;abc&quot;&gt;\n\nit's only with tag/attrs that are URIs.\nthe NPE is in guessMimeType.\n", "created": "2015-04-16 03:09:14"}, {"url": "https://github.com/google/caja/issues/831", "closed": "2015-04-16 03:09:14", "ttf": 0.0002777777777777778, "title": "\"ant CajoledTests\" doesn't copy js files", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 831](https://code.google.com/p/google-caja/issues/detail?id=831) created by felix8a on 2008-10-16T04:42:08.000Z:\n\n&quot;ant runtests&quot; takes a while,\nso if you're just testing domita changes,\nyou might want to run &quot;ant CajoledTests&quot;.\n\nhowever, files like cajita.js are copied into\nant-lib only in the AllTests target.\nso if you run &quot;ant clean CajoledTests&quot;,\nthen ant-lib/com/google/caja/plugin/domita_test.html\ndoesn't have the support files to run correctly.\n", "created": "2015-04-16 03:09:09"}, {"url": "https://github.com/google/caja/issues/828", "closed": "2015-04-16 03:08:56", "ttf": 0.0002777777777777778, "title": "event handlers mess up the debugmode stack", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 828](https://code.google.com/p/google-caja/issues/detail?id=828) created by felix8a on 2008-10-15T22:43:15.000Z:\n\nrun this in ff3 in the testbed:\n\n&lt;body&gt;\n&lt;input type=&quot;text&quot; id=&quot;a&quot; value=&quot;init&quot; onfocus=&quot;gotFocus()&quot;&gt;\n&lt;script&gt;\nfunction gotFocus() {}\nfunction f() {\n    document.getElementById('a').focus();\n    return 'ok';\n}\nf();\n&lt;/script&gt;\n&lt;/body&gt;\n\nwith debugmode off, the return value is 'ok'.\nwith debugmode on, the return value is an exception.\n\nthe exception is in cajita-debugmode.js popFrame().\nit's trying to pop a stack frame when the stack is empty.\n\nthe stack is empty because in domita.js,\nplugin_dispatchEvent___ calls ___.startCallerStack(),\nwhich wipes out the existing stack,\nand the browser calls the event handler before f() returns.\n", "created": "2015-04-16 03:08:51"}, {"url": "https://github.com/google/caja/issues/827", "closed": "2015-04-16 03:08:51", "ttf": 0.0002777777777777778, "title": "Static path permits-table stale", "commits": {}, "user": "kpreid", "labels": ["Performance", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 827](https://code.google.com/p/google-caja/issues/detail?id=827) created by erights on 2008-10-15T22:39:20.000Z:\n\nThe static paths rooted in &quot;caja&quot; should have been changed to &quot;cajita&quot;.\nThis staleness doesn't cause any loss of correctness, but it does expand\nthe size of valija-cajoled.js (as of this writing) from 51195 to 56288.\n(Not a big deal, but not bad for a two character change ;).)\n", "created": "2015-04-16 03:08:46"}, {"url": "https://github.com/google/caja/issues/826", "closed": "2015-04-16 03:08:46", "ttf": 0.0002777777777777778, "title": "`rgba` as a CSS color property value", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 826](https://code.google.com/p/google-caja/issues/detail?id=826) created by kangax on 2008-10-15T21:40:33.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Run the following snippet:\n\n(function(){\n  var el = document.createElement('div');\n  el.style.color = 'rgba(0,0,0,0.5)';\n  // browsers supporting RGBA will set property value; others ignore it\n  this.IS_RGBA_SUPPORTED = /^rgba/.test(el.style.color);\n  el = null;\n})();\n\n<b>What is the expected output? What do you see instead?</b>\nExpecting boolean value. Instead an error is thrown:\n&quot;bad value `rgba(0,0,0,0.5)` for CSS property color&quot; \n\n<b>What version of the product are you using? On what operating system?</b>\nhttp://cajadores.com/demos/testbed/\n## <b>Please provide any additional information below.</b>\n", "created": "2015-04-16 03:08:37"}, {"url": "https://github.com/google/caja/issues/825", "closed": "2015-04-16 03:08:37", "ttf": 0.0002777777777777778, "title": "Inline event handlers do not work in IE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 825](https://code.google.com/p/google-caja/issues/detail?id=825) created by naitiks on 2008-10-15T21:06:24.000Z:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n  function buttonClick() {\n    document.getElementById('results').innerHTML = 'button clicked';\n  }\n&lt;/script&gt;\n\n&lt;input type=&quot;button&quot; value=&quot;Click Me&quot; onclick=&quot;buttonClick();&quot;&gt;\n&lt;div id=&quot;results&quot;&gt;&lt;/div&gt;\n\nTested on http://cajadores.com/demos/testbed/. Works as expected in FF3.\nFails in IE7 without any messages.\n", "created": "2015-04-16 03:08:24"}, {"url": "https://github.com/google/caja/issues/824", "closed": "2015-04-16 03:08:24", "ttf": 0.0002777777777777778, "title": "toString shouldn't be used in tests to structural equivalence", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 824](https://code.google.com/p/google-caja/issues/detail?id=824) created by erights on 2008-10-15T20:51:38.000Z:\n\nReported by Mike Samuel during review of erights/no-xo4a:\n\nDoing an assertConsistent comparing two pieces of code that should produce\n[1, 2], we need two strings to compare. Currently, many of our test cases\ncompare these using xxx.toString() or ''+xxx. However, this will just [1,\n2] as consistent with [[1, 2]] and [[1], [2]] etc. Once JSON.stringify is\navailable to cajoled code, we should use that.\n", "created": "2015-04-16 03:08:17"}, {"url": "https://github.com/google/caja/issues/823", "closed": "2015-04-16 03:08:17", "ttf": 0.0002777777777777778, "title": "Feature Request: Add support for __noSuchMethod__ / method_missing", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 823](https://code.google.com/p/google-caja/issues/detail?id=823) created by naitiks on 2008-10-15T20:29:52.000Z:\n\nThis is basically the ability to optionally give an Object a last chance to handle property access \nbefore failing. I generally prefer to avoid this, and I know it would make the TCB harder to reason \nabout, but there's a use case that I'm not sure can be solved without it. Certain DOM elements, \n'select' for instance, allows access to its children via numeric indexes. Our current suggestion to \ndevelopers is going to be &quot;use the options property instead&quot; - but it would be nice to support this. I \nalso believe if we had this functionality, it could simplify (and might even increase initial load \nperformance of) the Tamed DOM implementation.\n", "created": "2015-04-16 03:08:15"}, {"url": "https://github.com/google/caja/issues/822", "closed": "2015-04-16 03:08:14", "ttf": 0.0002777777777777778, "title": "can't add a read handler for .length", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 822](https://code.google.com/p/google-caja/issues/detail?id=822) created by felix8a on 2008-10-15T20:09:36.000Z:\n\nsome dom nodes have a meaningful .length attribute, however it doesn't seem\npossible to set a .length handler that will get called.\n\nI think what's happening is: cajita.js says\n  grantRead(Object.prototype, 'length');\nwhich sets the fastpath .length_canRead___ flag, which gets checked before\nany get handler.\n", "created": "2015-04-16 03:08:03"}, {"url": "https://github.com/google/caja/issues/820", "closed": "2015-04-16 03:07:59", "ttf": 0.0002777777777777778, "title": "disfunction.apply(x, arguments)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 820](https://code.google.com/p/google-caja/issues/detail?id=820) created by felix8a on 2008-10-15T04:57:06.000Z:\n\nthis is a problem with writing container code.  all these js examples\nshould run uncajoled.  I'm using ff3+firebug.\n\nconsider this normal js:\n\nvar f = function (x, y) {\n  console.log([x, y]);\n}\nvar g = function () {\n  f.apply(this, arguments);\n}\ng(3, 4);\n\nthat prints [3, 4]\n\nhowever if f is a disfunction:\n\nvar $v = valijaMaker({});\nvar f = $v.dis(___.simpleFrozenFunc(\n  function ($dis, x, y) {\n    console.log([x, y]);\n  }\n));\nvar g = function () {\n  f.apply(this, arguments);\n}\ng(3, 4);\n\nthat prints [Object toLocaleString_grantCall___=true, undefined]\n\nbasically, within f, x is now g's arguments, rather than g's arguments[0].\n\nthe reason is, valija-cajita.js says this:\n\n  function dis(callFn, opt_name) {\n    ...\n    result.apply = function(self, args) {\n      return callFn.apply(cajita.USELESS, [self].concat(args));\n    };\n\n[self].concat(args) behaves differently when args is an array vs when args\nis an arguments object.  here's a stripped-down example:\n\nvar a = function(args) {\n    return [1].concat(args);\n};\nvar b1 = function () {\n    return a(arguments);\n};\nvar b2 = function () {\n    var args = Array.prototype.slice.call(arguments);\n    return a(args);\n};\nconsole.log(b1(2, 3));\nconsole.log(b2(2, 3));\n\nthe workaround is for container code to avoid passing arguments to\ndisfunctions.\n", "created": "2015-04-16 03:07:54"}, {"url": "https://github.com/google/caja/issues/815", "closed": "2015-04-16 03:07:37", "ttf": 0.0002777777777777778, "title": "Inline style= attributes don't work in ie", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 815](https://code.google.com/p/google-caja/issues/detail?id=815) created by naitiks on 2008-10-14T20:37:44.000Z:\n\nThis is similar to Issue 636, except its in html-emitter and not domita.\n\n&lt;div style=&quot;border: 1px solid red;&quot;&gt;foo&lt;/div&gt;\n\nHow about moving this setAttribute logic to bridal and sharing it between\nhtml-emitter and domita?\n", "created": "2015-04-16 03:07:24"}, {"url": "https://github.com/google/caja/issues/814", "closed": "2015-04-16 03:07:24", "ttf": 0.0002777777777777778, "title": "'typeof [].push' is 'object' in Cajita.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 814](https://code.google.com/p/google-caja/issues/detail?id=814) created by erights on 2008-10-11T03:58:45.000Z:\n\nDavid-Sarah Hopwood replied to the bug803 thread. I originally thought I\nwould do this as part of fixing bug803. But things got interesting, as I\nwill explain in this thread. In the interests of committing erights/no-xo4a\nsooner rather than later, I'm breaking off this as a separate\nto-be-resolved issue.\n\n&gt;&gt; [Cajita typeof is not quite a fail-stop subset of JavaScript typeof] \n&gt;&gt; since &quot;typeof [].push&quot; in Cajita will evaluate to 'object'.\n&gt;\n&gt; That's easy to fix:\n&gt;\n&gt;  function disfunction(callFn) {\n&gt;    function result() { throw &quot;not a callable function&quot;; }\n&gt;    result.call = callFn;\n&gt;    result.apply = function(self, args) {\n&gt;      return callFn.apply(cajita.USELESS, [self].concat(args));\n&gt;    };\n&gt;    result.bind = ...\n&gt;    return result;\n&gt;  }\n&gt;\n&gt; A further improvement would be for the Valija-&gt;Cajita translation to\n&gt; translate functions that statically do not refer to 'this' as themselves.\n&gt; In that case,\n&gt;  - Valija code could pass simple functions, and lexically encapsulated\n&gt;   objects that use simple functions as methods, to Cajita code without\n&gt;   problems;\n&gt;  - Valija would not need to rewrite simple function calls or 'typeof'.\n&gt;\n&gt; (This assumes that ES3.1-strict allows a function that refers to 'this'\n&gt; to immediately throw when called as a simple function, which I think\n&gt; it should.)\n", "created": "2015-04-16 03:07:06"}, {"url": "https://github.com/google/caja/issues/813", "closed": "2015-04-16 03:07:06", "ttf": 0.0002777777777777778, "title": "Calling valueOf on literals throws an error.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 813](https://code.google.com/p/google-caja/issues/detail?id=813) created by tobie.langel on 2008-10-09T09:39:06.000Z:\n- What steps will reproduce the problem?\n  in testbed:\n  &lt;script type=&quot;text/javascript&quot;&gt;\n  'foo'.valueOf();\n  &lt;/script&gt;\n- What is the expected output?\n  The above should evaluate to the string literal 'foo'\n- What do you see instead?\n  The following error is thrown: \n  \u00abError: Untamed functions can't be called as simple functions: function valueOf() {\n  [native code]\n  }\u00bb\n- What version of the product are you using?\n  rev 2528\n- On what operating system?\n  Safari 3.1.2, Mac OS 10.4.11.\n", "created": "2015-04-16 03:07:04"}, {"url": "https://github.com/google/caja/issues/806", "closed": "2015-04-16 03:06:29", "ttf": 0.0002777777777777778, "title": "starting with r2419, cajita.js still calls attach() but no longer defines it", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 806](https://code.google.com/p/google-caja/issues/detail?id=806) created by erights on 2008-10-08T01:41:46.000Z:\n\nThis was noticed only reading source. Since attach() is only called when\nencountering a property that callCallPub but not canReadPub, it's not yet\nclear whether this case can still dynamically happen. However, this case\nbecomes relevant to fixing bug 803.\n", "created": "2015-04-16 03:06:25"}, {"url": "https://github.com/google/caja/issues/803", "closed": "2015-04-16 03:06:17", "ttf": 0.0002777777777777778, "title": "Remaining (tamed) exophoric functions still dangerous", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 803](https://code.google.com/p/google-caja/issues/detail?id=803) created by erights on 2008-10-07T21:43:29.000Z:\n\nGiven (presumed defensive) Cajita code\nouter.setListener = function(newListener) {\n  inner.listener = newListener;\n};\nouter.trigger = function(arg) {\n  inner.listener(arg);\n};\n\nA Cajita attacker can\n\nouter.setListener([].push);\nouter.trigger(3);\n\nstoring a 0:3 into inner, which outer intended to encapsulate.\n", "created": "2015-04-16 03:05:55"}, {"url": "https://github.com/google/caja/issues/802", "closed": "2015-04-16 03:05:55", "ttf": 0.0002777777777777778, "title": "Weird behavior from [].push in cajita", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 802](https://code.google.com/p/google-caja/issues/detail?id=802) created by metaweta on 2008-10-07T21:00:22.000Z:\n\nvar x={blue:&quot;green&quot;};\n[].push.apply(x, [3,4,5]);\n\ncajita.getOwnPropertyNames(x) does not include 0,1,2, or length, though\nthey are readable.\n", "created": "2015-04-16 03:05:48"}, {"url": "https://github.com/google/caja/issues/799", "closed": "2015-04-16 03:05:26", "ttf": 0.0002777777777777778, "title": "Array.prototype.push generic doesn't work on objects", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 799](https://code.google.com/p/google-caja/issues/detail?id=799) created by metaweta on 2008-10-07T00:44:20.000Z:\n\nx={};\nArray.prototype.push.apply(x, [3,4,5]);\n\nx should be\n({0:3, 1:4, 2:5, length:3})\nbut instead we get an error &quot;x2___ is undefined&quot;.\n\nAllowing this method to act on objects poses no security risk.  It's\nnecessary to implement since jQuery uses this pattern.\n", "created": "2015-04-16 03:05:19"}, {"url": "https://github.com/google/caja/issues/795", "closed": "2015-04-16 03:04:58", "ttf": 0.0002777777777777778, "title": "e4x", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 795](https://code.google.com/p/google-caja/issues/detail?id=795) created by metaweta on 2008-10-03T17:56:46.000Z:\n\nWe haven't considered e4x at all in our discussions.  On firefox, \n  typeof &lt;x /&gt; === &quot;xml&quot;\nis true, and I don't think we've considered that case when we're doing\ntypeof tests.\n\nCaja doesn't have any way that I know of to create such objects (it causes\na parse error on all the tests I've tried), but caja code may be handed one.\n\nXML object properties behave strangely:\n(&lt;x&gt;&lt;length&gt;5&lt;/length&gt;&lt;/x&gt;).length === 5\n(&lt;x&gt;&lt;length&gt;5&lt;/length&gt;&lt;/x&gt;).length() === 1\n((&lt;x&gt;&lt;length&gt;5&lt;/length&gt;&lt;/x&gt;).length)() === 1\n(true &amp;&amp; &lt;x&gt;&lt;length&gt;5&lt;/length&gt;&lt;/x&gt;).length) === 5\n\nThe read/check/execute pattern we have in caja seems to preclude the\nability to call any of the methods of an xml object; reading a property of\nan xml object always returns an xml object, which can't be invoked.\n", "created": "2015-04-16 03:04:54"}, {"url": "https://github.com/google/caja/issues/781", "closed": "2015-04-16 03:03:27", "ttf": 0.0002777777777777778, "title": "many html attributes don't work because IE setAttribute is case sensitive", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 781](https://code.google.com/p/google-caja/issues/detail?id=781) created by felix8a on 2008-10-01T09:16:04.000Z:\n\nthis doesn't work right in IE when cajoled:\n\n&lt;table&gt;&lt;tr&gt;&lt;td id=&quot;t1&quot; bgcolor=&quot;red&quot;&gt;t1&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;\n\nbecause of the way html-emitter calls setAttribute.\n\nin IE, setAttribute is case sensitive, and often doesn't behave like other\nbrowsers.\n\nfor example, run this in IE, uncajoled:\n\n&lt;!doctype html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;table border=1&gt;\n &lt;tr&gt;\n  &lt;td id=&quot;t1&quot;&gt;t1&lt;/td&gt;\n  &lt;td id=&quot;t2&quot;&gt;t2&lt;/td&gt;\n  &lt;td id=&quot;t3&quot;&gt;t3&lt;/td&gt;\n &lt;/tr&gt;\n&lt;/table&gt;\n&lt;script&gt;\n  var t1 = document.getElementById('t1');\n  var t2 = document.getElementById('t2');\n  var t3 = document.getElementById('t3');\n  t1.setAttribute('bgcolor', 'red');\n  t2.setAttribute('bgColor', 'red');\n  t3.setAttribute('bgcolor', 'red', 0);\n&lt;/script&gt;\n&lt;body&gt;\n&lt;/html&gt;\n\nin most browsers, all three table cells are red, but in IE, t1 isn't red.\n\nI think the best fix is to have html-emitter always pass the third arg 0 to\nsetAttribute, which is an IE-specific extension, documented here:\nhttp://msdn.microsoft.com/en-us/library/ms536739(VS.85).aspx\n\nthere might be other uses of setAttribute that need to be fixed.\n", "created": "2015-04-16 03:03:18"}, {"url": "https://github.com/google/caja/issues/777", "closed": "2015-04-16 03:02:55", "ttf": 0.0002777777777777778, "title": "Domita event handling", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype.js", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 777](https://code.google.com/p/google-caja/issues/detail?id=777) created by ihab.awad on 2008-09-29T23:00:00.000Z:\n\nOriginally reported by Tobie Langel. Cross-browser event handling with\nproper binding of the handler to the currentTarget and ability to remove\nhandlers (despite the wrapping required by the binding).\n\n[ Requires investigation. I think he's talking about the fact that domita\ndoes not deal with Valija style event handlers. ]\n", "created": "2015-04-16 03:02:51"}, {"url": "https://github.com/google/caja/issues/770", "closed": "2015-04-16 03:01:54", "ttf": 0.0002777777777777778, "title": "Domita ( HtmlFormElement, ... ) --> HtmlElement", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype.js", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 770](https://code.google.com/p/google-caja/issues/detail?id=770) created by ihab.awad on 2008-09-29T22:43:28.000Z:\n\nHtmlFormElement and other Element subtypes per W3C DOM spec should inherit\nfrom Element.\n", "created": "2015-04-16 03:01:41"}, {"url": "https://github.com/google/caja/issues/769", "closed": "2015-04-16 03:01:41", "ttf": 0.0002777777777777778, "title": "Domita ( HTMLElement, Document ) --> Node", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype.js", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 769](https://code.google.com/p/google-caja/issues/detail?id=769) created by ihab.awad on 2008-09-29T22:42:24.000Z:\n\nHTMLElement and Document should inherit from Node.\n", "created": "2015-04-16 03:01:27"}, {"url": "https://github.com/google/caja/issues/765", "closed": "2015-04-16 03:01:07", "ttf": 0.0002777777777777778, "title": "testbed has quadruplicates", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 765](https://code.google.com/p/google-caja/issues/detail?id=765) created by felix8a on 2008-09-26T00:24:56.000Z:\n\napplet/setup-valija.js and applet/life.html have the same code repeated 4x.\n", "created": "2015-04-16 03:01:04"}, {"url": "https://github.com/google/caja/issues/763", "closed": "2015-04-16 03:01:02", "ttf": 0.0002777777777777778, "title": "domita_test.js canonInnerHtml may be subverted", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 763](https://code.google.com/p/google-caja/issues/detail?id=763) created by ihab.awad on 2008-09-25T00:49:54.000Z:\n\n(Originally found by Mike Stay.) The regex in domita_test.js canonInnerHtml\nthat says:\n\n  new RegExp('(&lt;\\w+)\\s+([^\\s&gt;][^&gt;]*)&gt;', 'g'),\n\ndoes not match the case where there are angle brackets _inside_ an\nattribute, as in:\n\n  &lt;div id=&quot;&gt;&quot;&gt;\n\nIt seems that some browsers may get weird with escaping angle brackets\n(though Firefox 3 does the safe thing); see:\n\n  http://groups.google.com/group/opera.beta/msg/32380d8ca64c3096\n\nIn any case, maybe worth a look to make sure we don't get spuriously\nfailing or (worse) succeeding tests when regressing on multiple browsers.\n", "created": "2015-04-16 03:00:53"}, {"url": "https://github.com/google/caja/issues/762", "closed": "2015-04-16 03:00:52", "ttf": 0.0002777777777777778, "title": "cajita.js has wrong Attribute regexp", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 762](https://code.google.com/p/google-caja/issues/detail?id=762) created by ihab.awad on 2008-09-25T00:27:52.000Z:\n\nIn cajita.js, we have --\n\n  var Attribute = new RegExp(\n    '^(.*)_(?:canRead|canCall|getter|handler)___$');\n\nMike Stay noticed that the regular expression '.' doesn't match end-of-line\ncharacters, so &quot;x['\\n'] = 5&quot; would set a property that does not appear in\ngetOwnPropertyNames.\n\nNot sure if this is exploitable but should be fixed. Is this fix trivial,\nor are there other characters that are not matched by '.'?\n", "created": "2015-04-16 03:00:39"}, {"url": "https://github.com/google/caja/issues/761", "closed": "2015-04-16 03:00:39", "ttf": 0.0002777777777777778, "title": "global scope in disjoint script elements", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 761](https://code.google.com/p/google-caja/issues/detail?id=761) created by felix8a on 2008-09-24T23:33:03.000Z:\n\n&lt;script&gt;var x = 3;&lt;/script&gt;\n&lt;script&gt;x = x + 1;&lt;/script&gt;\n\nin browsers, all scripts are in the same global scope, so all those x's are\nthe same object.\n\nin the testbed with valija off, it complains &quot;Cannot assign to a free\nmodule variable&quot;.  this makes it hard to use onevent= attributes, since in\nthis code:\n\n&lt;a onclick=&quot;clicky()&quot;&gt;click&lt;/a&gt;\n&lt;script&gt;function clicky(e) { return true; }&lt;/script&gt;\n\nthe two clickys are not the same object.\n\nvalija doesn't have this problem, so I think the fix is &quot;finish valija&quot;.\n\nbut maybe there should be a test case for this anyway.\n", "created": "2015-04-16 03:00:30"}, {"url": "https://github.com/google/caja/issues/757", "closed": "2015-04-16 03:00:09", "ttf": 0.0002777777777777778, "title": "Valija/Domita: setting element.onclick fails.", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 757](https://code.google.com/p/google-caja/issues/detail?id=757) created by plus.ajg on 2008-09-23T05:58:42.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Load a container with caja/valija-cajoled and domita.\n2. Cajole a module that sets the onclick handler of an element:\n\neither:\ndocument.getElementById('foo').onclick = function() {};\nor:\ndocument.getElementById('foo').addEventListener('click', function() {}, \ntrue);\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected: the handler is set to the function passed in.\nInstead: an error, &quot;Expected function not object&quot; is displayed.\n\n<b>What version of the product are you using? On what operating system?</b>\n\nWindows vista x64, Firefox 3, Firebug 1.2, caja svn HEAD.\n\n<b>Please provide any additional information below.</b>\n\nI suspect the caja rewriter transforms functions into objects of some \nsort, and the javascript interpreter cannot &quot;execute&quot; these objects as \nhandlers. So, a closure that wraps the right object method might be the \nsolution.\n", "created": "2015-04-16 02:59:52"}, {"url": "https://github.com/google/caja/issues/755", "closed": "2015-04-16 02:59:38", "ttf": 0.0002777777777777778, "title": "HtmlEmitter incorrectly creates text nodes for newlines in input HTML", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 755](https://code.google.com/p/google-caja/issues/detail?id=755) created by mikesamuel on 2008-09-22T11:47:28.000Z:\n# AJG says\n\nHere's an example that shows the problem:\n\n&lt;style type=&quot;text/css&quot;&gt;\n# outer {\n\n   width:  100%;\n   height: 100%;\n   text-align: center;\n}\n# top {\n\n   width: 10em;\n   height: 10em;\n   margin: auto;\n   background-color: blue;\n}\n# middle {\n\n   width: 10em;\n   height: 10em;\n   margin: auto;\n   background-color: green;\n}\n# bottom {\n\n   text-align: center;\n   width:  10em;\n   display: inline-block;\n   background-color: yellow;\n}\n\n&lt;/style&gt;\n\n&lt;div id=&quot;outer&quot;&gt;\n   &lt;div id=&quot;top&quot;&gt; &lt;/div&gt;\n   &lt;div id=&quot;middle&quot;&gt; &lt;/div&gt;\n   &lt;span id=&quot;bottom&quot;&gt; Text &lt;/span&gt;\n&lt;/div&gt;\n\nUncajoled, the result should be 3 boxes (blue, green, yellow) stacked\non top of each other, with nothing in between them. However, when\ncajoled, the result is still 3 boxes, but:\n\na) There's a space before the top box.\nb) There's a space between top and middle.\nc) The bottom box is shifted to the right.\n\nIf I comment out the code in the HtmlEmitter.pc() function, or make it\nemit only spaces (no newlines), the issues go away.  (I tested this w/\nIE6, IE7, IE8, FF2, FF3, OP9.5, SF3.1).\n\nIt looks like the HTML produced by HtmlEmitter is somewhat quirky. Or\nrather, it's rendered a bit quirkily by browsers. Comparing the\noriginal (visually) to what is output by HtmlEmitter shows small\ndifferences here and there. So what I did was replace the HtmlEmitter\nwith my own emitter which uses innerHTML to be more faithful to the\noriginal. This helped tremendously, especially cross-browser.\n\nHere's the code:\n\nhttp://pastebin.com/m741b0dd5\n\nMy questions are:\n\na) Is it 'safe' to use innerHTML instead of the DOM methods? My\nimpression is that the cajoler has already sanitized the HTML for us,\nso I don't see why it shouldn't.\n\nb) Would it be possible to have the caja HTML rewriter output\na .flush() call at the end of the HTML stream, so that the emitter\ninterface knows when it has reached the end of the stream, and that it\nshould write out the content? As it is, I have to manually hack the\ngenerated code to add it.\n# Felix says\n\nno, using innerHTML like that isn't safe because of quoting issues.\nwhat html are you finding that has quirky rendering?\n\nI'm not able to duplicate the behavior you see in firefox3.1,\nsafari3.1.2, opera9.5.1.  the result looks the same to me whether\ncajoled or uncajoled.  are you testing in standards mode or quirks mode?\n", "created": "2015-04-16 02:59:36"}, {"url": "https://github.com/google/caja/issues/754", "closed": "2015-04-16 02:59:36", "ttf": 0.0002777777777777778, "title": "Would be useful to have a way of getting original line number information for reporting run-time errors", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 754](https://code.google.com/p/google-caja/issues/detail?id=754) created by Mitsu.Hadeishi on 2008-09-19T17:22:50.000Z:\n\nWhen there is a runtime error in generated source code, at present there\nseems to be no easy way to get at the original line number information in\nthe original, un-cajoled source code.  Ideally, if an error occurs at\nruntime, we would be able to quickly refer to some object or data structure\nassociated with the original parse which would be able to give us back at\nsome line number or other location in the original source code.\n", "created": "2015-04-16 02:59:31"}, {"url": "https://github.com/google/caja/issues/752", "closed": "2015-04-16 02:59:18", "ttf": 0.0002777777777777778, "title": "Code review: jasvir/adam-updated-testbed  (47 added, 5 removed, 42 changed)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 752](https://code.google.com/p/google-caja/issues/detail?id=752) created by jasvir on 2008-09-18T22:53:32.000Z:\n\ngvn review jasvir/adam-updated-testbed\n\n*jasvir/adam-updated-testbed@2370 | jasvir | 2008-09-18 14:51:43 -0800\n(Thu, 18 Sep 2008)\n\nDescription:\n\nChanges Adam Sah made to make the testbed work with less latency (minifying js)\nand better UI experience.\n\nAffected Paths:\n   M //trunk/build.xml\n   M //trunk/src/com/google/caja/caja-debugmode.js\n   M //trunk/src/com/google/caja/opensocial/applet/index.html\n   M //trunk/src/com/google/caja/opensocial/applet/testbed.js\n", "created": "2015-04-16 02:59:13"}, {"url": "https://github.com/google/caja/issues/748", "closed": "2015-04-16 02:58:59", "ttf": 0.0002777777777777778, "title": "Unexpected end of input in stdin", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 748](https://code.google.com/p/google-caja/issues/detail?id=748) created by felix8a on 2008-09-13T19:49:35.000Z:\n\ncajoling this:\n\n  &lt;script&gt;{&lt;/script&gt;\n\nproduces this:\n\n  ERROR: Unexpected end of input in stdin\n\nthere's no line number info, and the error message is mysteriously vague. \nI had to use binary subdivision of a large html file to figure out that the\nerror was malformed js.\n", "created": "2015-04-16 02:58:54"}, {"url": "https://github.com/google/caja/issues/746", "closed": "2015-04-16 02:58:47", "ttf": 0.0002777777777777778, "title": "Cajoler wrongly identifies \"namespace\" as a keyword.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 746](https://code.google.com/p/google-caja/issues/detail?id=746) created by tobie.langel on 2008-09-13T07:37:45.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nin testbed:\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar namespace;\n&lt;/script&gt;\n\nWhat is the expected output?\n\nThis should not be rejected by the cajoler. &quot;namespace&quot; is thankfully neither a keyword nor \nreserved in either of ES 3 or ES 3.1. \n\nWhat do you see instead?\n\nERROR index.html:2+5 - 14: Reserved word namespace used as an identifier\nindex.html:2: var namespace;\n", "created": "2015-04-16 02:58:43"}, {"url": "https://github.com/google/caja/issues/745", "closed": "2015-04-16 02:58:43", "ttf": 0.0002777777777777778, "title": "In valija, a constructed object's constructor property is enumerable", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 745](https://code.google.com/p/google-caja/issues/detail?id=745) created by tobie.langel on 2008-09-13T07:22:34.000Z:\n\n<b>What steps will reproduce the problem?</b>\nIn testbed, with valija turned on:\n&lt;script type=&quot;text/javascript&quot;&gt;\n(function() {\n  function Obj() {\n  }\n  var obj = new Obj(), properties = [];\n  for(var prop in obj) {\n    properties.push(prop);\n  }\n  return properties;\n})();\n&lt;/script&gt;\n\nWhat is the expected output?\n\nThis should return an empty array.\n\nWhat do you see instead?\n\nThis returns the following: ['constructor']\n\nNote however that if the constructor is explicitly set _on the constructed object itself_ (but not \non the constructor's prototype), it should be enumerable.\n", "created": "2015-04-16 02:58:27"}, {"url": "https://github.com/google/caja/issues/744", "closed": "2015-04-16 02:58:27", "ttf": 0.0002777777777777778, "title": "minor: Recursive madness in testbed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 744](https://code.google.com/p/google-caja/issues/detail?id=744) created by tobie.langel on 2008-09-13T06:52:19.000Z:\n\n<b>What steps will reproduce the problem?</b>\nIn testbed, in valija mode:\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction foo() {}\nfoo;\n&lt;/script&gt;\n\nWhat is the expected output?\n\nThis should just print the result of calling toString on foo.\n\nWhat do you see instead?\n\nThis prints some recursive madness ending with the following line: &quot;This object is recursive, so \nwe're not going to try to print it.&quot;\n\nThis object is recursive, so we're not going to try to print it\n", "created": "2015-04-16 02:58:18"}, {"url": "https://github.com/google/caja/issues/742", "closed": "2015-04-16 02:58:16", "ttf": 0.0002777777777777778, "title": "accessing methods of Date prototypes causes a type error.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype.js", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 742](https://code.google.com/p/google-caja/issues/detail?id=742) created by tobie.langel on 2008-09-12T01:11:51.000Z:\n\n<b>What steps will reproduce the problem?</b>\nPut the following in the testbed with Valija mode switched to on.\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n(new Date()).getTime();\n&lt;/script&gt;\n\nThis throws a type error.\n", "created": "2015-04-16 02:58:02"}, {"url": "https://github.com/google/caja/issues/741", "closed": "2015-04-16 02:58:02", "ttf": 0.0002777777777777778, "title": "java.lang.NullPointerException when cajoling link tag that has a media attribute but no type attribute", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 741](https://code.google.com/p/google-caja/issues/detail?id=741) created by tobie.langel on 2008-09-12T00:37:25.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\ncajole the attached index.html file in either of cajita or valija mode.\n\nthis throws the following error:\n\njava.lang.NullPointerException\n        at com.google.caja.plugin.stages.RewriteHtmlStage.extractStyles(RewriteHtmlStage.java:338)\n        at \ncom.google.caja.plugin.stages.RewriteHtmlStage.rewriteLinkTag(RewriteHtmlStage.java:274)\n        at com.google.caja.plugin.stages.RewriteHtmlStage.access$200(RewriteHtmlStage.java:79)\n        at com.google.caja.plugin.stages.RewriteHtmlStage$1.visit(RewriteHtmlStage.java:115)\n        at \ncom.google.caja.parser.AbstractParseTreeNode.acceptPreOrder(AbstractParseTreeNode.java:304)\n        at \ncom.google.caja.parser.AbstractParseTreeNode.visitChildren(AbstractParseTreeNode.java:282)\n        at \ncom.google.caja.parser.AbstractParseTreeNode.acceptPreOrder(AbstractParseTreeNode.java:311)\n        at \ncom.google.caja.plugin.stages.RewriteHtmlStage.rewriteDomTree(RewriteHtmlStage.java:123)\n        at com.google.caja.plugin.stages.RewriteHtmlStage.apply(RewriteHtmlStage.java:90)\n        at com.google.caja.plugin.stages.RewriteHtmlStage.apply(RewriteHtmlStage.java:79)\n        at com.google.caja.util.Pipeline.applyStage(Pipeline.java:41)\n        at com.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:121)\n        at com.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:115)\n        at com.google.caja.util.Pipeline.apply(Pipeline.java:35)\n        at com.google.caja.plugin.PluginCompiler.run(PluginCompiler.java:176)\n        at com.google.caja.plugin.PluginCompilerMain.run(PluginCompilerMain.java:93)\n        at com.google.caja.plugin.PluginCompilerMain.main(PluginCompilerMain.java:257)\n", "created": "2015-04-16 02:57:56"}, {"url": "https://github.com/google/caja/issues/740", "closed": "2015-04-16 02:57:55", "ttf": 0.0002777777777777778, "title": "Valija translates top-level functions incorrectly.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 740](https://code.google.com/p/google-caja/issues/detail?id=740) created by erights on 2008-09-11T23:18:57.000Z:\n\n(Actually reported verbally by Metaweta)\n\nfunction f(){return f;}\nreturn f()===void 0;\n\nin Valija cajoles to \n\nvar f;\nvalija.setOuter('f', valija.dis(___.simpleFrozenFunc(function ($dis) {\nreturn f;\n}), 'f'));\n;\nreturn valija.callFunc(valija.readOuter('f'), [ ]) === void 0;\n\nwhich partially treats 'f' correctly as a Valija outer variable, translated\ninto calls to valija.readOuter('f'). But in other ways, it mistranslates it\ninto a simple variable named 'f' which it never initializes.\n\nFrom a brief look, it seems the disfuncNamedGlobalDecl rule in\nDefaultValijaRewriter is doing the right thing, so the problem may be in\nthe scope analysis done prior to expanding the program.\n", "created": "2015-04-16 02:57:51"}, {"url": "https://github.com/google/caja/issues/739", "closed": "2015-04-16 02:57:51", "ttf": 0.0002777777777777778, "title": "Adding a method to RegExp.prototype does not seem to work once cajoled in Safari only.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype.js", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 739](https://code.google.com/p/google-caja/issues/detail?id=739) created by tobie.langel on 2008-09-11T19:18:13.000Z:\n\n<b>What steps will reproduce the problem?</b>\nRun the following in testbed with valija mode turned on:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n  RegExp.prototype.someMethod = function() { return 'some method'; };\n  (/f/).someMethod();\n&lt;/script&gt;\n\nWhat is the expected output?\nThis should output the string: &quot;some method&quot;\n\nWhat do you see instead?\nThis throws a type error.\n\nNote: this seems to be a Safari only issue.\n", "created": "2015-04-16 02:57:40"}, {"url": "https://github.com/google/caja/issues/738", "closed": "2015-04-16 02:57:39", "ttf": 0.0002777777777777778, "title": "Cajoler trips on combined IE CSS filters", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 738](https://code.google.com/p/google-caja/issues/detail?id=738) created by tobie.langel on 2008-09-11T06:03:39.000Z:\n\n<b>What steps will reproduce the problem?</b>\nInput the following in the testbed in any mode:\n&lt;style&gt;\ndiv {\n  filter:alpha(opacity=50)progid:DXImageTransform.Microsoft.Blur(strength=10);\n}\n&lt;/style&gt;\n\nOutputs the following error:\n\nERROR index.html:3+33 - 34: Expected !important not :\nindex.html:3:   filter:alpha(opacity=50)progid:DXImageTransform.Microsoft.Blur(strength=10);\n", "created": "2015-04-16 02:57:28"}, {"url": "https://github.com/google/caja/issues/737", "closed": "2015-04-16 02:57:28", "ttf": 0.0002777777777777778, "title": "java.lang.IllegalArgumentException", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 737](https://code.google.com/p/google-caja/issues/detail?id=737) created by tobie.langel on 2008-09-11T05:56:54.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nInput the following in the testbed in Valija mode:\n&lt;script type=&quot;text/javascript&quot;&gt;\n  var a, b, c;\n&lt;/script&gt;\n\nThis throws an java.lang.IllegalArgumentException:\n\njava.lang.IllegalArgumentException: Too many children 3 for operator COMMA\n    at com.google.caja.parser.js.Operation.childrenChanged(Operation.java:46)\n    at \ncom.google.caja.parser.AbstractParseTreeNode$MutationImpl.execute(AbstractParseTreeNode.ja\nva:395)\n    at com.google.caja.parser.js.Operation.&lt;init&gt;(Operation.java:35)\n    at com.google.caja.parser.js.SpecialOperation.&lt;init&gt;(SpecialOperation.java:30)\n    at com.google.caja.parser.js.Operation.create(Operation.java:58)\n    at \ncom.google.caja.parser.quasiliteral.DefaultValijaRewriter$43.fire(DefaultValijaRewriter.java:1223)\n    at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:102)\n    at \ncom.google.caja.parser.quasiliteral.DefaultValijaRewriter$12.fire(DefaultValijaRewriter.java:320)\n    at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:102)\n    at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:194)\n    at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:184)\n    at \ncom.google.caja.parser.quasiliteral.DefaultValijaRewriter$47.fire(DefaultValijaRewriter.java:1302)\n    at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:102)\n    at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:194)\n    at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:184)\n    at \ncom.google.caja.parser.quasiliteral.DefaultValijaRewriter$47.fire(DefaultValijaRewriter.java:1302)\n    at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:102)\n    at com.google.caja.parser.quasiliteral.Rule.expandEntry(Rule.java:171)\n    at com.google.caja.parser.quasiliteral.Rule.expandEntries(Rule.java:179)\n    at \ncom.google.caja.parser.quasiliteral.DefaultValijaRewriter$9.fire(DefaultValijaRewriter.java:233)\n    at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:102)\n    at \ncom.google.caja.parser.quasiliteral.DefaultValijaRewriter$11.fire(DefaultValijaRewriter.java:281)\n    at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:102)\n    at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:83)\n    at com.google.caja.plugin.ExpressionSanitizerCaja.sanitize(ExpressionSanitizerCaja.java:44)\n    at \ncom.google.caja.plugin.stages.ValidateJavascriptStage.apply(ValidateJavascriptStage.java:41)\n    at \ncom.google.caja.plugin.stages.ValidateJavascriptStage.apply(ValidateJavascriptStage.java:31)\n    at com.google.caja.util.Pipeline.applyStage(Pipeline.java:41)\n    at com.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:121)\n    at com.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:115)\n    at com.google.caja.util.Pipeline.apply(Pipeline.java:35)\n    at com.google.caja.plugin.PluginCompiler.run(PluginCompiler.java:176)\n    at \ncom.google.caja.opensocial.DefaultGadgetRewriter.compileGadget(DefaultGadgetRewriter.java:22\n0)\n    at \ncom.google.caja.opensocial.DefaultGadgetRewriter.rewriteContent(DefaultGadgetRewriter.java:14\n3)\n    at \ncom.google.caja.opensocial.DefaultGadgetRewriter.rewriteContent(DefaultGadgetRewriter.java:12\n8)\n    at com.google.caja.opensocial.applet.CajaApplet.runCajoler(CajaApplet.java:182)\n    at com.google.caja.opensocial.applet.CajaApplet.cajole(CajaApplet.java:135)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at \nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:585)\n    at sun.plugin.javascript.invoke.JSInvoke.invoke(JSInvoke.java:19)\n    at sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)\n    at \nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:585)\n    at sun.plugin.javascript.JSClassLoader.invoke(JSClassLoader.java:44)\n    at sun.plugin.liveconnect.PrivilegedCallMethodAction.run(SecureInvocation.java:638)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at sun.plugin.liveconnect.SecureInvocation$2.run(SecureInvocation.java:215)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at sun.plugin.liveconnect.SecureInvocation.CallMethod(SecureInvocation.java:193)\n    at sun.plugin.liveconnect.SecureInvocation.access$300(SecureInvocation.java:52)\n    at \nsun.plugin.liveconnect.SecureInvocation$CallMethodThread.run(SecureInvocation.java:124)\n", "created": "2015-04-16 02:57:23"}, {"url": "https://github.com/google/caja/issues/736", "closed": "2015-04-16 02:57:23", "ttf": 0.0002777777777777778, "title": "domita plugin_dispatchEvent__ calls event handler with wrong args", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 736](https://code.google.com/p/google-caja/issues/detail?id=736) created by felix8a on 2008-09-10T22:38:24.000Z:\n\n&lt;div id=&quot;a&quot;&gt;clicky&lt;/div&gt;\n&lt;script&gt;\nfunction clicky(ev) {\n  ev.target.innerHTML += ' **';\n}\nvar a = document.getElementById('a');\na.addEventListener('click', clicky, false);\n&lt;/script&gt;\n\nthat works when uncajoled, but fails when cajoled.\nerror in firebug is &quot;Not readable: ([TameElement]).target&quot;\n\nin domita.js, plugin_dispatchEvent__ calls the event handler with two args\n(node, event).\n\nDOM event handlers are only supposed to get one arg (event).\nhttp://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventListener\n", "created": "2015-04-16 02:57:14"}, {"url": "https://github.com/google/caja/issues/735", "closed": "2015-04-16 02:57:14", "ttf": 0.0002777777777777778, "title": "domita: attachDocumentStub fails silently when it is passed an id suffix that does not start with \"-\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 735](https://code.google.com/p/google-caja/issues/detail?id=735) created by tobie.langel on 2008-09-10T22:15:41.000Z:\n\n<b>What steps will reproduce the problem?</b>\n- Pass a string which does not start with &quot;-&quot; as a first argument to attachDocumentStub. \n  document.getElementById will not return any elements whatsoever.\n\nWhat is the expected output?\n- attachDocumentStub should accept any kind of id suffix, or throw an error if the idSufix \n  doesn't correspond to the allowed format.\n\nWhat do you see instead?\n- No error message is thrown by attachDocumentStub, and document.getElementById will  stop \n  working.\n\nIssue is in the startTag method of the innerHtmlTamer object which trims the id one character \ntoo much because of the missing &quot;-&quot; char.\n", "created": "2015-04-16 02:57:10"}, {"url": "https://github.com/google/caja/issues/731", "closed": "2015-04-16 02:56:53", "ttf": 0.0002777777777777778, "title": "IE7 doesn't let you change <input> type after the UI is rendered", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 731](https://code.google.com/p/google-caja/issues/detail?id=731) created by felix8a on 2008-09-10T00:23:56.000Z:\n\nthis fails when cajoled in IE7:\n\n  &lt;form&gt;&lt;input id='x' type='radio'&gt;&lt;/form&gt;\n\nthe problem is, this sequence fails (uncajoled):\n\n  &lt;form id='a'&gt;&lt;/form&gt;\n  &lt;script&gt;\n    var a = document.getElementById('a');\n    var i = document.createElement('input');\n    a.appendChild(i);                   // line A\n    i.setAttribute('type', 'radio');    // line B\n  &lt;/script&gt;\n\nbut it works if the order of line A and line B is reversed.\n\nso I think a simple fix would be to have html-emitter defer attaching the\ndom nodes to the real document, perhaps in f(), or perhaps later.\n", "created": "2015-04-16 02:56:44"}, {"url": "https://github.com/google/caja/issues/730", "closed": "2015-04-16 02:56:44", "ttf": 0.0002777777777777778, "title": "IE7 is cranky about <option> in .innerHTML", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 730](https://code.google.com/p/google-caja/issues/detail?id=730) created by felix8a on 2008-09-10T00:00:55.000Z:\n\nthis fails to show any options when cajoled:\n\n  &lt;form&gt;&lt;select id='x'&gt;&lt;option&gt;abc&lt;/option&gt;&lt;/select&gt;&lt;/form&gt;\n\nin contrast, this does work:\n\n  &lt;form&gt;&lt;select&gt;&lt;option&gt;abc&lt;/option&gt;&lt;/select&gt;&lt;/form&gt;\n\nthe problem is, version 1 cajoles to\n\n   .ih('&lt;option&gt;abc&lt;/option&gt;')\n\nand ie7 strips out the leading option tag there,\nmaybe because it thinks that option is invalid in that context.\nversion 2 cajoles to\n\n   .ih('&lt;select&gt;&lt;option&gt;abc&lt;/option&gt;&lt;/select&gt;')\n\nwhich works fine.\n\nexample (run this without cajoling):\n\n&lt;html&gt;\n&lt;body&gt;\n&lt;form id=&quot;f1&quot;&gt;&lt;/form&gt;\n&lt;form id=&quot;f2&quot;&gt;&lt;select id=&quot;s2&quot;&gt;&lt;/select&gt;&lt;/form&gt;\n&lt;script&gt;\n  var f1 = document.getElementById('f1');\n  f1.innerHTML = '&lt;select&gt;&lt;option&gt;abc&lt;/option&gt;&lt;/select&gt;';\n  alert('f1 is ' + f1.innerHTML);\n\n  var f2 = document.getElementById('f2');\n  f2.s2.innerHTML = '&lt;option&gt;abc&lt;/option&gt;';\n  alert('f2 is ' + f2.innerHTML);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n", "created": "2015-04-16 02:56:35"}, {"url": "https://github.com/google/caja/issues/728", "closed": "2015-04-16 02:56:31", "ttf": 0.0002777777777777778, "title": "changes in named arguments aren't reflected in the arguments identifier", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 728](https://code.google.com/p/google-caja/issues/detail?id=728) created by tobie.langel on 2008-09-05T18:13:23.000Z:\n\n<b>What steps will reproduce the problem?</b>\n&lt;script type=&quot;text/javascript&quot;&gt;\n  function foo(arg_1) {\n    arg_1 = 'foo';\n    return arguments[0];\n  }\n  foo('hello world');\n&lt;/script&gt;\n\nWhat is the expected output?\n\nThis should return 'foo'\n\nWhat do you see instead?\n\nThis returns 'hellow world'\n", "created": "2015-04-16 02:56:26"}, {"url": "https://github.com/google/caja/issues/727", "closed": "2015-04-16 02:56:26", "ttf": 0.0002777777777777778, "title": "caja test bed does not work in Chrome", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 727](https://code.google.com/p/google-caja/issues/detail?id=727) created by billchuUNCC on 2008-09-05T17:24:01.000Z:\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>What version of the product are you using? On what operating system?</b>\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 02:56:19"}, {"url": "https://github.com/google/caja/issues/726", "closed": "2015-04-16 02:56:19", "ttf": 0.0002777777777777778, "title": "Domita does not support element.childNodes", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Prototype", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 726](https://code.google.com/p/google-caja/issues/detail?id=726) created by tobie.langel on 2008-09-05T06:42:35.000Z:\n\nIn testbed:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n  var child = document.createElement('div');\n  var container = document.createElement('div');\n  container.appendChild(child);\n  container.childNodes[0];\n&lt;/script&gt;\n\nexpected output:\n\nundefined undefined\n\u00ab&lt;DIV&gt;\u00bb  TameElement\n\nactual output:\n\n\u00abTypeError: Value undefined (result of expression obj) is not an object. Cannot be used with 'in' \noperator.\u00bb TypeError\nundefined  undefined\n", "created": "2015-04-16 02:56:04"}, {"url": "https://github.com/google/caja/issues/724", "closed": "2015-04-16 02:55:57", "ttf": 0.0002777777777777778, "title": "<html> tag in .innerHTML", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 724](https://code.google.com/p/google-caja/issues/detail?id=724) created by felix8a on 2008-09-03T14:45:41.000Z:\n\nsay you use XHR to fetch some html which you assign to .innerHTML.  if the\nhtml you fetch is a complete document with an &lt;html&gt; tag, all of it\ndisappears, because the &lt;html&gt; tag is not allowed by the .innerHTML\nsanitizer, and sanitization removes the contents of the tag.\n\nthis is different from what happens if you do the same thing without caja,\nand the difference is somewhat mysterious, it's not immediately obvious why\nthe output disappears.\n\nmaybe the sanitizer needs a flag for 'remove tag but keep contents'.\n\nmaybe the sanitizer should gripe more to the console.\n", "created": "2015-04-16 02:55:50"}, {"url": "https://github.com/google/caja/issues/723", "closed": "2015-04-16 02:55:50", "ttf": 0.0002777777777777778, "title": "allowing target=_top", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 723](https://code.google.com/p/google-caja/issues/detail?id=723) created by felix8a on 2008-09-03T02:14:16.000Z:\n\ncurrently, there isn't an easy way for a container to allow gadgets to say\n&lt;a target=&quot;_top&quot;&gt;, because the target policy is hardcoded in\nDomAttributeConstraint.Factory\n\nsimilarly, it's difficult for a container to allow normal form submissions.\n\nis there a security risk in allowing those?  I can't think of anything in\nparticular.  it seems mostly a UI issue, whether a container wants to allow\nor disallow navigating the page when the user clicks.\n", "created": "2015-04-16 02:55:47"}, {"url": "https://github.com/google/caja/issues/722", "closed": "2015-04-16 02:55:47", "ttf": 0.0002777777777777778, "title": "form onsubmit= isn't wrapped properly", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 722](https://code.google.com/p/google-caja/issues/detail?id=722) created by felix8a on 2008-09-03T01:24:43.000Z:\n\n&lt;form&gt; without onsubmit will emit onsubmit='return false'.\nthat's fine.\n\n&lt;form onsubmit=&quot;&quot;&gt; will emit the form tag without onsubmit.\n&lt;form onsubmit=&quot;return true&quot;&gt; will emit the form tag with a handler that\nwill allow the form to submit normally.\nthose are both problems.\n\nreason:\n1. plugin.DomAttributeConstraint.Factory.forTag() returns a constraint for\n   form elements that includes this method:\n   \n   public Pair&lt;String, String&gt; attributeValueHtml(String attribName) {\n     if (&quot;ONSUBMIT&quot;.equalsIgnoreCase(attribName)) {\n       return Pair.pair(&quot;try { &quot;, &quot; } finally { return false; }&quot;);\n     }\n       return Pair.pair(&quot;&quot;, &quot;&quot;);\n     }\n   }\n2. plugin.HtmlCompiler.compileDom() calls\n   Pair&lt;String, String&gt; wrapper = constraint.attributeValueHtml(name);\n\nand later on, it ignores the wrapper returned, because xformForAttribute()\nreturns non-null.\n", "created": "2015-04-16 02:55:40"}, {"url": "https://github.com/google/caja/issues/721", "closed": "2015-04-16 02:55:40", "ttf": 0.0002777777777777778, "title": "Valija optimization", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 721](https://code.google.com/p/google-caja/issues/detail?id=721) created by metaweta on 2008-08-29T22:23:00.000Z:\n\nUse &quot;$v&quot; instead of &quot;valija&quot; and QuotedExpression and forbid shadowing of\n$v to optimize space &amp; time.\n\nI.e. \n\nx.y; \n\ncurrently bloats into\n\nvar x0___;\nvar x1___;\nvar x2___;\nvar x3___;\nvar x4___;\nx4___ = valija, (x0___ = (x2___ = valija, x1___ = 'x',\nx2___.readOuter_canCall___? x2___.readOuter(x1___): **_.callPub(x2**_,\n'readOuter', [ x1___ ])), x3___ = 'y'), x4___.read_canCall___?\nx4___.read(x0___, x3___): **_.callPub(x4**_, 'read', [ x0___, x3___ ]);\n\nThis optimization would turn it into\n\n$v.read(x, 'y');\n\nand since $v is an import and frozen, you can't assign to it or its\nproperties, which means that if you prevent it from being shadowed, you can\nuse it as-is without rewriting.\n", "created": "2015-04-16 02:55:34"}, {"url": "https://github.com/google/caja/issues/718", "closed": "2015-04-16 02:55:26", "ttf": 0.0002777777777777778, "title": "<style> doesn't work in safari 3.1.2", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 718](https://code.google.com/p/google-caja/issues/detail?id=718) created by felix8a on 2008-08-29T00:24:39.000Z:\n\n&lt;style&gt;p { color: red; }&lt;/style&gt;\n&lt;p&gt;hi&lt;/p&gt;\n\ncajoled, the style gets applied in ff, but not safari 3.1.2, and possibly\nother safari versions.\n\nfix is easy.  apparently safari wants you to add new style nodes into the\ndocument head.  so change domita getCssContainer___ from\n  document.body\nto\n  document.getElementsByTagName('head')[0]\n\nsome more details on adding stylesheets dynamically here:\n  http://yuiblog.com/blog/2007/06/07/style/\n", "created": "2015-04-16 02:55:22"}, {"url": "https://github.com/google/caja/issues/716", "closed": "2015-04-16 02:55:12", "ttf": 0.0002777777777777778, "title": "Need valija-specific taming of built-in objects", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 716](https://code.google.com/p/google-caja/issues/detail?id=716) created by metaweta on 2008-08-27T23:21:12.000Z:\n\n<b>What steps will reproduce the problem?</b>\nArray.prototype.sort\n\nWhat is the expected output?\na disfunction\n\nWhat do you see instead?\nundefined\n\nFor each property of the builtin objects' prototypes, we need a\ncorresponding property on the shadow prototype.\n", "created": "2015-04-16 02:55:08"}, {"url": "https://github.com/google/caja/issues/714", "closed": "2015-04-16 02:55:01", "ttf": 0.0002777777777777778, "title": "el.innerHTML = undefined;", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 714](https://code.google.com/p/google-caja/issues/detail?id=714) created by felix8a on 2008-08-26T20:23:10.000Z:\n\n&lt;div id=&quot;el&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\nvar el = document.getElementById('el');\nel.innerHTML = undefined;\n&lt;/script&gt;\n\nin browsers, that stringifies undefined and you see 'undefined'.\nin caja, domita.js setInnerHTML says\n  sanitizeHtml(String(htmlFragment || ''))\nwhich turns undefined into '' instead.\n\nthis is mostly an issue of developer-friendliness.  eg, someone says\n  el.innerHTML = foo();\nand expects that to show something helpful, even if foo() is buggy. \ninstead, it shows nothing, and it's unclear whether the call to foo()\nhappened at all.\n", "created": "2015-04-16 02:54:54"}, {"url": "https://github.com/google/caja/issues/711", "closed": "2015-04-16 02:54:45", "ttf": 0.0002777777777777778, "title": "default rewriter doesn't handle css @import", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 711](https://code.google.com/p/google-caja/issues/detail?id=711) created by felix8a on 2008-08-22T20:20:18.000Z:\n\n&lt;style&gt;\n@import url('test');\n&lt;/style&gt;\n\nI expect that to complain about unable to load the url,\nbut in the testbed, it says &quot;@import not allowed here&quot;,\n\n@import is supposed to be rewritten by InlineCssImportsStage,\nand there's a testsuite for it,\nbut nothing actually instantiates that stage.\n", "created": "2015-04-16 02:54:38"}, {"url": "https://github.com/google/caja/issues/707", "closed": "2015-04-16 02:54:17", "ttf": 0.0002777777777777778, "title": "caja runtests exit status", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 707](https://code.google.com/p/google-caja/issues/detail?id=707) created by felix8a on 2008-08-20T00:48:32.000Z:\n\nright now, &quot;ant runtests&quot; will say &quot;BUILD SUCCESSFUL&quot; and exit with status\n0, whether or not tests fail, and it's a little awkward to fetch the\ntesting status from the test reports.\n\nhow about making it exit nonzero if any tests fail?\n\none method is with junit failureproperty, something like this\n\n  &lt;junit failureproperty=&quot;test.failed&quot; ...&gt;\n    ...\n  &lt;/junit&gt;\n  ...\n  &lt;fail if=&quot;test.failed&quot; /&gt;\n", "created": "2015-04-16 02:54:11"}, {"url": "https://github.com/google/caja/issues/703", "closed": "2015-04-16 02:53:48", "ttf": 0.0002777777777777778, "title": "caja rejects <!-- comments --> within <script>s", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 703](https://code.google.com/p/google-caja/issues/detail?id=703) created by felix8a on 2008-08-19T19:53:08.000Z:\n\n&lt;script&gt;\nvar a = 3;\n&lt;!-- comment --&gt;\nalert(a);\n&lt;/script&gt;\n\nthat works on 4/4 browsers, but caja rejects it.\n\nERROR: :3+1 - 2: Unexpected token &lt;\n", "created": "2015-04-16 02:53:41"}, {"url": "https://github.com/google/caja/issues/700", "closed": "2015-04-16 02:53:21", "ttf": 0.0002777777777777778, "title": "parsing anomaly with '</' in script", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 700](https://code.google.com/p/google-caja/issues/detail?id=700) created by felix8a on 2008-08-18T02:09:56.000Z:\n\n&lt;script&gt;\nvar b1 = '&lt;/b&gt;';      // ok\nvar b2 = '&lt;/b'+'&gt;';   // ok\nvar b3 = '&lt;/b' + '&gt;'; // causes error\n&lt;/script&gt;\n\nerror is:\nLINT: :5+10: End of file seen and there were open elements.\nERROR: :5+1 - 2: Unexpected token &lt;\n\nbrowsers are fine with all three.  I'm not sure what's going on, it seems\nto be somewhere in the htmlparser lib.\n", "created": "2015-04-16 02:53:18"}, {"url": "https://github.com/google/caja/issues/683", "closed": "2015-04-16 02:51:10", "ttf": 0.0002777777777777778, "title": "\"End of file seen\" message could be more helpful", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 683](https://code.google.com/p/google-caja/issues/detail?id=683) created by felix8a on 2008-08-13T23:16:51.000Z:\n\nthis is low priority.  when cajoling something like\n   &lt;div /&gt;\n   abc\n   def\n\ncaja complains\n   LINT :3+4: End of file seen and there were open elements.\n\nwhich is a bit cryptic.  it would help if caja told you which elements are\nstill open, and where in the source they are.\n", "created": "2015-04-16 02:51:08"}, {"url": "https://github.com/google/caja/issues/681", "closed": "2015-04-16 02:51:03", "ttf": 0.0002777777777777778, "title": "html attributes don't allow 3-hex-digit colors", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 681](https://code.google.com/p/google-caja/issues/detail?id=681) created by felix8a on 2008-08-13T00:48:08.000Z:\n\nthe css validator allows colors like &quot;#f00&quot;\nbut the html validator rejects them.\n\nthe regexp patterns for color values are in com.google.caja.lang.html\nfile html4-attributes-defs.json\n", "created": "2015-04-16 02:50:57"}, {"url": "https://github.com/google/caja/issues/669", "closed": "2015-04-16 02:49:32", "ttf": 0.0002777777777777778, "title": "<table width=\"100%\"> is a fatal error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 669](https://code.google.com/p/google-caja/issues/detail?id=669) created by felix8a on 2008-08-01T09:27:29.000Z:\n\nin html4-attributes-defs.json,\nthe pattern used for %Length is /[0-9]+/\nhtml spec allows %Length to be percentages.\nhttp://www.w3.org/TR/REC-html40/types.html#type-length\n\nmaybe the pattern should be /[0-9]+%?/\n", "created": "2015-04-16 02:49:23"}, {"url": "https://github.com/google/caja/issues/667", "closed": "2015-04-16 02:49:14", "ttf": 0.0002777777777777778, "title": "target=_new should be target=_blank", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 667](https://code.google.com/p/google-caja/issues/detail?id=667) created by felix8a on 2008-07-30T02:00:49.000Z:\n\ncom.google.caja.plugin.DomAttributeConstraint enforces target=&quot;_new&quot;\n\n&quot;_new&quot; means a specific window named &quot;_new&quot;, not a new window.\nit should be &quot;_blank&quot; instead.\n", "created": "2015-04-16 02:49:07"}, {"url": "https://github.com/google/caja/issues/664", "closed": "2015-04-16 02:48:51", "ttf": 0.0002777777777777778, "title": "xo4a in non-warts mode gives an internal compiler error", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 664](https://code.google.com/p/google-caja/issues/detail?id=664) created by jasvir on 2008-07-29T20:37:40.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. In the testbed with warts mode off, cajole:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction() { this.x = 1 }\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nExpect one fatal error - that implicit xo4a only allowed in warts mode. \nInstead I get two fatal errors - the second one an internal compiler error:\nFATAL_ERROR :2+1 - 26: INTERNAL COMPILER ERROR. Node did not match any\nrules at: FunctionConstructor\n", "created": "2015-04-16 02:48:44"}, {"url": "https://github.com/google/caja/issues/663", "closed": "2015-04-16 02:48:44", "ttf": 0.0002777777777777778, "title": "emitHtml is more fragile than normal html", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 663](https://code.google.com/p/google-caja/issues/detail?id=663) created by felix8a on 2008-07-29T06:21:09.000Z:\n\nconsider something like this:\n\n&lt;div&gt;\n  &lt;script&gt;throw 'x'; alert(1);&lt;/script&gt;\n  hello\n  &lt;script&gt;alert(2);&lt;/script&gt;\n&lt;/div&gt;\n\nwhen you feed that to a browser, the throw stops script execution, and you\ndon't see the alert(1), but the browser still renders 'hello', and runs the\nalert(2).\n\nwhen cajoled, the throw stops everything.  you don't get the hello or the\nalert(2).\n", "created": "2015-04-16 02:48:37"}, {"url": "https://github.com/google/caja/issues/661", "closed": "2015-04-16 02:48:35", "ttf": 0.0002777777777777778, "title": "DefaultCajaRewriter should not use 'instanceof'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 661](https://code.google.com/p/google-caja/issues/detail?id=661) created by ihab.awad on 2008-07-29T00:24:26.000Z:\n\nThe current DefaultCajaRewriter uses 'instanceof' to check the class of\nnodes it is accepting. This means that any subclasses pass through\nunnoticed. Hence anyone can write subclasses upstream of the rewriter and\ntunnel through stuff that renders to any strange weirdness.\n\nDefaultCajaRewriter and all similar TCB code should be checking for exact\nclass matches on its inputs, not 'instanceof'.\n", "created": "2015-04-16 02:48:21"}, {"url": "https://github.com/google/caja/issues/660", "closed": "2015-04-16 02:48:21", "ttf": 0.0002777777777777778, "title": "Testbed doesn't work using file: URL on Firefox2 on Mac", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 660](https://code.google.com/p/google-caja/issues/detail?id=660) created by mikesamuel on 2008-07-26T02:33:55.000Z:\n\nRun\n$ ant testbed\nto build the testbed\n\nStart Firefox and browse to\nfile:///path/to/svn-root/google-caja/ant-www/testbed/index.html\n\nThe testbed should load fine, but try cajoling anything and the cajoler\nwill fail with an exception\n  java.lang.RuntimeException: java.io.FileNotFoundException:\nresource:///com/google/caja/lang/css/css21.json\n\nThis exception originates in ConfigUtil.openConfigResource.\n\nThat resource is on the classpath.\n", "created": "2015-04-16 02:48:10"}, {"url": "https://github.com/google/caja/issues/658", "closed": "2015-04-16 02:47:59", "ttf": 0.0002777777777777778, "title": "eof parsing anomaly", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 658](https://code.google.com/p/google-caja/issues/detail?id=658) created by felix8a on 2008-07-23T18:08:53.000Z:\n\nthis anomaly is harmless.  I don't think it needs to be fixed.  I'm\nreporting it because I wasn't sure it was safe, so I tracked down the cause.\n1. if you cajole &quot;&lt;div\\n&quot;, you get\n   Fatal Exception: com.google.caja.lexer.ParseException:\n     Unexpected end of input\n   which is fine.\n2. if you cajole &quot;&lt;div&quot; without a trailing newline, you get\n   IMPORTS___.htmlEmitter___.pc('\\074div');\n   which is strange, but harmless.\n\nwhat's happening:\n\nin case 2, when HtmlInputSplitter.parseToken sees eof, it converts the\npending token into a TEXT token.\n\nin case 1, HtmlInputSplitter.parseToken sees the newline, returns a\nTAGSTART token, and then DomParser.parseDom keeps requesting tokens until\nit sees a TAGEND.  the tokens come from a TokenQueue&lt;&gt;, which throws the\nexception at eof.\n", "created": "2015-04-16 02:47:50"}, {"url": "https://github.com/google/caja/issues/657", "closed": "2015-04-16 02:47:50", "ttf": 0.0002777777777777778, "title": "Eclipse JUnit shows green when \"ant runtests\" doesn't.", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 657](https://code.google.com/p/google-caja/issues/detail?id=657) created by erights on 2008-07-17T14:16:51.000Z:\n\nOn Mon, Jul 14, 2008 at 12:12 PM, &lt;mikesamuel@gmail.com&gt; wrote:\n&gt;     if (Array.slice === (void 0)) {\n&gt;      /*\\* In anticipation of ES4, and because it's useful. */\n&gt;      Array.slice = function(self, start, end) {\n&gt;    -    return Array.prototype.slice.call(self, start, end);\n&gt;    +    return Array.prototype.slice.call(self, start || 0, end ||\nself.length);\n&gt;      };\n&gt;     }\n\nI introduced and committed the build-breaking version Mike Samuel just\nrepaired. The reason? I was checking whether I'm green by running the JUnit\ntests from Eclipse. I just verified that without Mike's fix Eclise shows\ngreen but &quot;ant runtests&quot; does not. With Mike's fix, they both run green. I\nhave no idea why. Until we do, please always verify your greenness with\n&quot;ant runtests&quot; before committing to trunk.\n", "created": "2015-04-16 02:47:48"}, {"url": "https://github.com/google/caja/issues/649", "closed": "2015-04-16 02:47:06", "ttf": 0.0002777777777777778, "title": "Testbed on Safari on Windows reading http:// and FF on Mac reading file:// fails to cajole", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 649](https://code.google.com/p/google-caja/issues/detail?id=649) created by erights on 2008-07-12T01:55:49.000Z:\n\nTestbed at http://cajadores.com/demos/testbed/ on Caja r1969 on Safari\n3.1.2 on Windows XP SP3 on VMWare 1.1.2 on MAC OSX 10.5.4 repeatedly fails\nto cajole anything with the failure below. The exact same error repeatedly\nhappens in Firefox 2.0.0.15 on MAC OSX when running the testbed using\nfile:///.../ant-www/testbed/index.html\n\nStrangely, when running the testbed on Safari running directly on Mac OSX\nusing either the http: or file:, everything works fine. Also, in Windows \non VMWare, IE, Firefox, and Opera do fine with the http: testbed.\n I have not tested trying the file: testbed on Windows.\n\njava.lang.RuntimeException: java.io.FileNotFoundException:\nresource:///com/google/caja/lang/css/css21.json\n    at com.google.caja.lang.css.CssSchema.getDefaultCss21Schema(CssSchema.java:78)\n    at com.google.caja.plugin.PluginCompiler.&lt;init&gt;(PluginCompiler.java:66)\n    at\ncom.google.caja.opensocial.DefaultGadgetRewriter.createPluginCompiler(DefaultGadgetRewriter.java:236)\n    at\ncom.google.caja.opensocial.applet.CajaApplet$2.createPluginCompiler(CajaApplet.java:172)\n    at\ncom.google.caja.opensocial.DefaultGadgetRewriter.compileGadget(DefaultGadgetRewriter.java:210)\n    at\ncom.google.caja.opensocial.DefaultGadgetRewriter.rewriteContent(DefaultGadgetRewriter.java:137)\n    at\ncom.google.caja.opensocial.DefaultGadgetRewriter.rewriteContent(DefaultGadgetRewriter.java:122)\n    at\ncom.google.caja.opensocial.applet.CajaApplet.runCajoler(CajaApplet.java:194)\n    at com.google.caja.opensocial.applet.CajaApplet.cajole(CajaApplet.java:130)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n    at java.lang.reflect.Method.invoke(Unknown Source)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n    at java.lang.reflect.Method.invoke(Unknown Source)\n    at sun.plugin.javascript.JSInvoke.invoke(Unknown Source)\n    at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n    at java.lang.reflect.Method.invoke(Unknown Source)\n    at sun.plugin.javascript.JSClassLoader.invoke(Unknown Source)\n    at sun.plugin.liveconnect.PrivilegedCallMethodAction.run(Unknown Source)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at sun.plugin.liveconnect.SecureInvocation$2.run(Unknown Source)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at sun.plugin.liveconnect.SecureInvocation.CallMethod(Unknown Source)\nCaused by: java.io.FileNotFoundException:\nresource:///com/google/caja/lang/css/css21.json\n    at com.google.caja.config.ConfigUtil.openConfigResource(ConfigUtil.java:101)\n    at com.google.caja.lang.css.CssSchema.getDefaultCss21Schema(CssSchema.java:69)\n    ... 26 more\n", "created": "2015-04-16 02:47:04"}, {"url": "https://github.com/google/caja/issues/647", "closed": "2015-04-16 02:46:54", "ttf": 0.0002777777777777778, "title": "Reading an inherited simple function attaches it, but shouldn't", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 647](https://code.google.com/p/google-caja/issues/detail?id=647) created by erights on 2008-07-10T00:04:56.000Z:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction F(){}\nF.prototype.g = function() {return 3;};\nvar a = new F();\nvar g1 = a.g;\ng1();\n&lt;/script&gt;\n\ncajoles correctly by causes:\n\n&gt; Method function () { \n&gt;   return 3; \n&gt; } is already attached. \n&gt; this: [object Window] \n&gt; that: [object Object]\n\nThe reason being that setMember() in caja.js tests the member in the\nfollowing order:\n\n```\nif (isMethod(member) || isXo4aFunc(member)) {\n  fastpathCall(proto, name);\n  fastpathEnumOnly(proto, name);\n} else if (isSimpleFunc(member)) {\n  fastpathCall(proto, name);\n  fastpathRead(proto, name);\n  fastpathEnum(proto, name);\n```\n\nbut currently isXo4aFunc() returns true when its argument is a\nsimple-function, so the second branch is never taken.\n", "created": "2015-04-16 02:46:52"}, {"url": "https://github.com/google/caja/issues/644", "closed": "2015-04-16 02:46:36", "ttf": 0.0002777777777777778, "title": "Testbed has a JS error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 644](https://code.google.com/p/google-caja/issues/detail?id=644) created by ben@links.org on 2008-07-08T15:14:08.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Install FF3.0 and Firebug 1.2.0b4\n2. Go to http://cajadores.com/demos/testbed/\n3. Enable Firebug.\n4. Cajole the code\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nloadModule(&quot;keystoneKop&quot;).f();\n&lt;/script&gt;\n\nI then get the expected error: &quot;Not callable: ([Object]).f&quot; followed by an\nactual JS error: &quot;{}[&quot;\\nError: &quot; + str] is not a function\nhttp://cajadores.com/demos/testbed/log-to-console.js\nLine 39&quot;\n\nNote that this only appears to occur on a fresh load of the testbed.\n", "created": "2015-04-16 02:46:33"}, {"url": "https://github.com/google/caja/issues/642", "closed": "2015-04-16 02:46:31", "ttf": 0.0002777777777777778, "title": "Code review: metaweta/accesskey", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 642](https://code.google.com/p/google-caja/issues/detail?id=642) created by metaweta on 2008-07-03T21:05:41.000Z:\n\nRemove the accesskey attribute from the whitelist.  Fixes issue523.\n\nAffected Paths:\n   M\n//changes/metaweta/accesskey/trunk/src/com/google/caja/lang/html/html4-attributes-whitelist.json\n   M\n//changes/metaweta/accesskey/trunk/src/com/google/caja/plugin/html4-defs.js\n", "created": "2015-04-16 02:46:26"}, {"url": "https://github.com/google/caja/issues/641", "closed": "2015-04-16 02:46:26", "ttf": 0.0002777777777777778, "title": "Verify use of typeof wrt functions and regexp objects", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 641](https://code.google.com/p/google-caja/issues/detail?id=641) created by metaweta on 2008-07-02T22:34:42.000Z:\n\nMake sure that all the uses of typeof x === 'function' consider the case of\nregexp literals.\n", "created": "2015-04-16 02:46:17"}, {"url": "https://github.com/google/caja/issues/639", "closed": "2015-04-16 02:46:15", "ttf": 0.0002777777777777778, "title": "Eclipse build tests are broken after the great renaming", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 639](https://code.google.com/p/google-caja/issues/detail?id=639) created by jasvir on 2008-06-26T21:45:11.000Z:\n1. Clean checkout.\n2. Create .project with tools/myvn eclipse\n3. Import project\n4. Run JUnit tests\n", "created": "2015-04-16 02:46:12"}, {"url": "https://github.com/google/caja/issues/637", "closed": "2015-04-16 02:45:52", "ttf": 0.0002777777777777778, "title": "debugmode isn't usable more than once", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 637](https://code.google.com/p/google-caja/issues/detail?id=637) created by felix8a on 2008-06-26T18:03:12.000Z:\n\nin the testbed,\nI cajole a gadget with debugging on,\nthen cajole it again.\n\nthe second time, I get the message:\n&quot;___ reused with different debug symbols&quot;\n", "created": "2015-04-16 02:45:46"}, {"url": "https://github.com/google/caja/issues/636", "closed": "2015-04-16 02:45:45", "ttf": 0.0002777777777777778, "title": "style= attributes don't work in ie7", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 636](https://code.google.com/p/google-caja/issues/detail?id=636) created by felix8a on 2008-06-26T03:40:20.000Z:\n\n&lt;div style=&quot;border: 1px solid red&quot;&gt;foo&lt;/div&gt;\n\nthe problem is, ie7 doesn't seem to do anything with\n  el.setAttribute('style', x)\ninstead you have to do\n  el.style.cssText = x;\n\nnote, .cssText is another way of calling eval.\n", "created": "2015-04-16 02:45:39"}, {"url": "https://github.com/google/caja/issues/635", "closed": "2015-04-16 02:45:39", "ttf": 0.0002777777777777778, "title": "className: ie6+ie7 versus the world", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 635](https://code.google.com/p/google-caja/issues/detail?id=635) created by felix8a on 2008-06-26T00:20:23.000Z:\n\nin ie6+ie7, cajoling &lt;div class=&quot;x&quot;&gt; will not set class to &quot;x&quot;.\n\namong other things, stylesheet rules that use &quot;.x&quot; will appear to fail.\n\nthe basic problem is ie6+ie7 handles the 'class' vs 'className' issue\ndifferently from the world:\n\n  el.className === el.getAttribute('className');   // ie6+ie7\n  el.className === el.getAttribute('class');       // the world\n\nwhich also affects setAttribute, which affects how html-emitter constructs\nhtml.\n\nie8 is in &quot;the world&quot;.\nie8 in ie7-emulation-mode is in &quot;the world&quot;.\n\nthe attached example file produces this:\n\n(ie6+ie7)\n\n0,,c0,c0\n1,c1,c0,c0\n2,c1,c2,c2\n3,c1,c3,c3\n\n(the world)\n\n0,c0,,c0\n1,c1,,c1\n2,c1,c2,c1\n3,c3,c2,c3\n", "created": "2015-04-16 02:45:28"}, {"url": "https://github.com/google/caja/issues/631", "closed": "2015-04-16 02:45:11", "ttf": 0.0002777777777777778, "title": "Java NPE in testbed when given a bad CSS link", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 631](https://code.google.com/p/google-caja/issues/detail?id=631) created by adriennefelt on 2008-06-19T21:44:10.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nIn the testbed, put:\n&lt;LINK REL=&quot;stylesheet&quot; HREF=&quot;style.css&quot; TYPE=&quot;text/css&quot;&gt;\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected output is some kind of user-friendly error.  Instead, it prompts a\njava.lang.NullPointerException.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 02:45:09"}, {"url": "https://github.com/google/caja/issues/630", "closed": "2015-04-16 02:45:09", "ttf": 0.0002777777777777778, "title": "Review ihab/cleanclean@1871", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-CodeReview", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 630](https://code.google.com/p/google-caja/issues/detail?id=630) created by ihab.awad on 2008-06-19T20:35:04.000Z:\n\nFix Issue 629.\n", "created": "2015-04-16 02:45:06"}, {"url": "https://github.com/google/caja/issues/629", "closed": "2015-04-16 02:45:06", "ttf": 0.0002777777777777778, "title": "Undead old-fangled source directories", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 629](https://code.google.com/p/google-caja/issues/detail?id=629) created by ihab.awad on 2008-06-19T20:34:26.000Z:\n\nAt r1870, after The Great Renaming, we have the following remaining\nartifacts of the Bad Old Days:\n\n  -/src/java/ -- undead\n  -/src/js/com/google/caja/ -- undead\n  -/src/e/... -- files still need to be moved up into -/src/\n", "created": "2015-04-16 02:45:04"}, {"url": "https://github.com/google/caja/issues/625", "closed": "2015-04-16 02:44:42", "ttf": 0.0002777777777777778, "title": "Code review: metaweta/valueOf", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 625](https://code.google.com/p/google-caja/issues/detail?id=625) created by metaweta on 2008-06-18T18:05:53.000Z:\n\nDisallows setting and deleting the valueOf property of objects.  Partly\naddresses issue323\n", "created": "2015-04-16 02:44:40"}, {"url": "https://github.com/google/caja/issues/622", "closed": "2015-04-16 02:44:26", "ttf": 0.0002777777777777778, "title": "ant runtests, out of memory", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 622](https://code.google.com/p/google-caja/issues/detail?id=622) created by felix8a on 2008-06-17T05:59:24.000Z:\n\nDefaultGadgetRewriterTest is failing for me on out of memory.\nI fixed it by adding maxmemory=&quot;256m&quot; to the junit statement in build.xml\n", "created": "2015-04-16 02:44:19"}, {"url": "https://github.com/google/caja/issues/618", "closed": "2015-04-16 02:43:58", "ttf": 0.0002777777777777778, "title": "readImport should probably read only own properties of the imports object", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 618](https://code.google.com/p/google-caja/issues/detail?id=618) created by erights on 2008-06-16T14:13:15.000Z:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\ntoString;\n&lt;/script&gt;\ncorrectly cajoles to\n\n&lt;script type=&quot;text/javascript&quot;&gt;{\n  **_.loadModule(function (**_, IMPORTS___) {\n                   {\n                     var toString = **_.readImport(IMPORTS**_, 'toString');\n                     IMPORTS___[ 'yield' ](toString);\n                   }\n                 });\n}&lt;/script&gt;\n\nwhich evaluates to an attached method. This is presumably the\nObject.prototype.toString method as attached to the IMPORTS___ object.\n\nThis is currently harmless, but is quite surprising.\n", "created": "2015-04-16 02:43:53"}, {"url": "https://github.com/google/caja/issues/617", "closed": "2015-04-16 02:43:53", "ttf": 0.0002777777777777778, "title": "Named function expressions insanely placed on scope chain", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 617](https://code.google.com/p/google-caja/issues/detail?id=617) created by erights on 2008-06-16T06:50:51.000Z:\n\nOn FF 2.0.0.14 on Mac OX X 10.5.3 in the testbed applet r1779\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n(function() { \n  var propertyIsEnumerable = 0;\n  return (function f() {\n    return propertyIsEnumerable;\n  })();\n})();\n&lt;/script&gt;\n\ncajoles (apparently) correctly but evaluates to\n\n\u00abfunction propertyIsEnumerable() { [native code] }\u00bb\n\nrather than 0.\n\nThis is due to insane behavior specified in ES3 and implemented in some\nbrowsers. See\n&lt;https://mail.mozilla.org/pipermail/es4-discuss/2008-June/003018.html&gt;.\n", "created": "2015-04-16 02:43:42"}, {"url": "https://github.com/google/caja/issues/616", "closed": "2015-04-16 02:43:42", "ttf": 0.0002777777777777778, "title": "Cajoled output for callFuncInlineMethodCall and callFuncInlineMethodApply mentions this", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 616](https://code.google.com/p/google-caja/issues/detail?id=616) created by davidsarah.hopwood on 2008-06-14T01:45:58.000Z:\n\n```\n        return substV(\n            &quot;(function (@formals*) { @fh*; @stmts*; @body*; })&quot;\n            + &quot;.apply(this, @arg);&quot;,\n```\n\nShould be &quot;.apply(t___, @arg);&quot;,\n\nand similarly for call.\n\nIf the &quot;restricted AST&quot; approach were used, it would be possible to have a\nnode representing &quot;var t___ = this;&quot;, and then assert that no other nodes\nmention &quot;this&quot;.\n\nDon't know whether this is security-relevant or not, so marking it so\npending review.\n", "created": "2015-04-16 02:43:35"}, {"url": "https://github.com/google/caja/issues/615", "closed": "2015-04-16 02:43:35", "ttf": 0.0002777777777777778, "title": "ReservedNames still mentions \"Super\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 615](https://code.google.com/p/google-caja/issues/detail?id=615) created by davidsarah.hopwood on 2008-06-14T01:21:03.000Z:\n\n  public static final String SUPER = &quot;Super&quot;;\n\nAhem. Should be &quot;super&quot; _and should be used_.\n", "created": "2015-04-16 02:43:24"}, {"url": "https://github.com/google/caja/issues/613", "closed": "2015-04-16 02:43:12", "ttf": 0.0002777777777777778, "title": "Should the \"block\" rule keep the block curlies in the output?", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 613](https://code.google.com/p/google-caja/issues/detail?id=613) created by davidsarah.hopwood on 2008-06-14T01:07:03.000Z:\n\nmatches=&quot;{@ss_;}&quot;,\nsubstitutes=&quot;@startStmts_; @ss*;&quot;\n\nIt's not obvious that this shouldn't be substitutes=&quot;@startStmts_; {@ss_;}&quot;.\n", "created": "2015-04-16 02:43:10"}, {"url": "https://github.com/google/caja/issues/611", "closed": "2015-04-16 02:43:07", "ttf": 0.0002777777777777778, "title": "TameInputElement.prototype.setValue() doesn't work", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 611](https://code.google.com/p/google-caja/issues/detail?id=611) created by google@web.dwdw.me on 2008-06-14T00:52:45.000Z:\n\nI didn't get enough time to check out TameInputElement.setAttribute()\ncarefully, but I had some concerns/uncertainties about it.\n\n1    TameInputElement.prototype.setValue = function (newValue) {\n2      if (!this.editable___) { throw new Error(); }\n3      // == matches undefined\n4      this.node___.value = (newValue == null ? '' : '' + value);\n5      return newValue;\n6    };\n\nConcern:\n1. What does the &quot;value&quot; on on the right side of line 4 refer to?  What is\n   it bound to?  It's not the parameter to this function (that's named\n   &quot;newValue&quot;).  Does it refer to something in a wider scope?  (And is it\n   supposed to?)  Is it just going to return &quot;undefined&quot;?  Smells like a bug\n   to me.  Not sure if it could be a security bug (perhaps if &quot;value&quot; could\n   get bound to something in the global scope this could be quite dangerous).\n\nI'm going to assume you'll replace &quot;'' + value&quot; with &quot;'' + newValue&quot;.  With\nthat change, one more concern:\n1. This function does not check that its input (newValue) is of the\n   expected type (namely, String, I suppose?) and does not coerce its input to\n   the expected type.  Do I have to worry about TOCTTOU attacks?  Suppose that\n   I write malicious Caja code that creates a malicious object with a\n   malicious toValue() or toString() method: the first time this method is\n   called, it returns something other than null or undefined; the second time,\n   it returns null or undefined.  In that case you will execute\n   \n   this.node___.value = null;  (or: undefined)\n\nSo we're setting the browser's DOM node to null or undefined.  Does that\nhave any funny side effects?  I'm 99% sure this has no security\nconsequences but wanted to write it down anyway just in case.\n", "created": "2015-04-16 02:42:56"}, {"url": "https://github.com/google/caja/issues/609", "closed": "2015-04-16 02:42:49", "ttf": 0.0002777777777777778, "title": "domita may allow gadgets to navigate the current web page", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 609](https://code.google.com/p/google-caja/issues/detail?id=609) created by google@web.dwdw.me on 2008-06-14T00:39:33.000Z:\n\nIn domita.js's runtime HTML sanitization,\nsanitizeHtml()/elementPolicies.a() seem to implement the following: If you\nsee an A tag, append a TARGET=&quot;_blank&quot; attribute to the end of its\nattribute list.  Problem: If the original A tag already contains another\nTARGET attribute, say A TARGET=&quot;_parent&quot;, then the sanitized version seems\nto be A TARGET=&quot;_parent&quot; &quot;_blank&quot;.  In other words, the original TARGET\nattribute does not seem to be removed and I couldn't see any obvious\nduplicate elimination.  I didn't test this, so this needs to be checked.\n", "created": "2015-04-16 02:42:36"}, {"url": "https://github.com/google/caja/issues/606", "closed": "2015-04-16 02:42:18", "ttf": 0.0002777777777777778, "title": "Stale \"Super\" in setStatic rule.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 606](https://code.google.com/p/google-caja/issues/detail?id=606) created by erights on 2008-06-13T22:04:40.000Z:\n\nIn the setStatic rule, there's a static test against the property name\n&quot;Super&quot; that's a holdover from an earlier design where this name was\nspecial. Also, other such stale names should be checked for.\n", "created": "2015-04-16 02:42:13"}, {"url": "https://github.com/google/caja/issues/605", "closed": "2015-04-16 02:42:13", "ttf": 0.0002777777777777778, "title": "Stylesheets can contain ]]>", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 605](https://code.google.com/p/google-caja/issues/detail?id=605) created by zestyping on 2008-06-13T18:19:00.000Z:\n\nCajoling this:\n\n&lt;style&gt;\ndiv[id=']]&gt;/*'] { color: #f00; }\n&lt;/style&gt;\n\nproduces a stylesheet containing the magic string ]]&gt;, which might\ncause problems on IE because the stylesheet is emitted in an innerHTML\nattribte (see domita.js:960).\n\nRequires further investigation.\n", "created": "2015-04-16 02:42:02"}, {"url": "https://github.com/google/caja/issues/604", "closed": "2015-04-16 02:42:02", "ttf": 0.0002777777777777778, "title": "<![CDATA[ is misspelled on domita.js:960", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 604](https://code.google.com/p/google-caja/issues/detail?id=604) created by zestyping on 2008-06-13T18:16:38.000Z:\n\n&lt;![CDATA[ is misspelled as &lt;![CDATA[[ in the emitCss__ method.\n", "created": "2015-04-16 02:41:57"}, {"url": "https://github.com/google/caja/issues/602", "closed": "2015-04-16 02:41:46", "ttf": 0.0002777777777777778, "title": "Domita dynamic HTML sanitizer does not mangle NAME or CLASS attributes", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 602](https://code.google.com/p/google-caja/issues/detail?id=602) created by google@web.dwdw.me on 2008-06-13T17:51:35.000Z:\n\nIn domita.js, rewriteAttribute() does not name-mangle any attribute with\nhtml4.atype.NAME or html4.atype.NMTOKENS (including, e.g., NAME= or CLASS=\nattributes).  This means that any gadget can declare itself to have any\nname or any class -- including can associate itself with CSS stylesheets of\nother gadgets or of the container.  The issues with NAME= have been\ndocumented separately and explored in detail by the team.  The issue with\nCLASS= can lead to a communication channel between two gadgets, and might\nin some highly obscure cases enable more serious containment breaches (if\nthe container declares a stylesheet that contains Javascript, and if the\ngadget can create a DOM node whose CLASS= attribute points to that\nstylesheet, does the Javascript execute in the context of the gadget?).\n", "created": "2015-04-16 02:41:39"}, {"url": "https://github.com/google/caja/issues/600", "closed": "2015-04-16 02:41:32", "ttf": 0.0002777777777777778, "title": "Static cajoler rewrites \"name\" attribute, html sanitizer does not", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 600](https://code.google.com/p/google-caja/issues/detail?id=600) created by collin.jackson on 2008-06-13T17:26:42.000Z:\n\nWhen an element is created with innerHTML, its name property is not\nrewritten the way that the it is when the static cajoler is used.\n\nExample:\n\n&lt;div id=&quot;foo&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\ndocument.getElementById(&quot;foo&quot;).innerHTML = &quot;&lt;form name='body'&gt;&lt;/form&gt;&quot;;\n&lt;/script&gt;\n\nWhat is the expected output? \n\nThe form's name is suffixed with the module ID.\n\nWhat do you see instead?\n\ndocument.body is overwritten.\n", "created": "2015-04-16 02:41:25"}, {"url": "https://github.com/google/caja/issues/599", "closed": "2015-04-16 02:41:25", "ttf": 0.0002777777777777778, "title": "Test bed embeds unsanitized HTML in its error messages", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 599](https://code.google.com/p/google-caja/issues/detail?id=599) created by zestyping on 2008-06-13T17:14:57.000Z:\n\nCajole this:\n\n&lt;style&gt;\n.foo { background: url(&quot;http://foo/&lt;h1&gt;bar&lt;/h1&gt;&quot;); }\n&lt;/style&gt;\n\nThe error message will contain the &lt;h1&gt; tag unescaped.  This probably means\nyou can fool the testbed into embedding arbitrary unsanitized HTML into its\nerror messages.\n", "created": "2015-04-16 02:41:12"}, {"url": "https://github.com/google/caja/issues/598", "closed": "2015-04-16 02:41:12", "ttf": 0.0002777777777777778, "title": "Forms colliding on the document.forms[name] array may confuse the container", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 598](https://code.google.com/p/google-caja/issues/detail?id=598) created by collin.jackson on 2008-06-13T16:38:38.000Z:\n\nAlthough the document.forms object is off-limits to modules, it can be\naccessed by the container. The modules may create forms that are\nidentically named to existing container forms, potentially overwriting\nelements of this object. Thus, a container might think that it's accessing\nits own form with document.forms['myform'](or the shortcut\ndocument.myform), but actually be accessing the module's form.\n\nMangling form names (as suggested in issue 525) could solve this problem.\n", "created": "2015-04-16 02:41:09"}, {"url": "https://github.com/google/caja/issues/597", "closed": "2015-04-16 02:41:09", "ttf": 0.0002777777777777778, "title": "maybe do a browser version test at runtime", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 597](https://code.google.com/p/google-caja/issues/detail?id=597) created by felix8a on 2008-06-13T14:23:51.000Z:\n\nif the browser isn't supported, refuse to run cajoled code.\nlike perhaps safari2 is too buggy to enforce caja security,\nbut we don't care about supporting safari2,\nbut there might be enough safari2 users to be an interesting attack target.\n\npotentially, ie6 could be removed from the whitelist someday.\n", "created": "2015-04-16 02:41:05"}, {"url": "https://github.com/google/caja/issues/596", "closed": "2015-04-16 02:41:05", "ttf": 0.0002777777777777778, "title": "domita.js etc. should be more careful about its use of regexps", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 596](https://code.google.com/p/google-caja/issues/detail?id=596) created by google@web.dwdw.me on 2008-06-13T08:47:03.000Z:\n\ndomita.js (and similar .js files) are not written in Caja.  Therefore they\nmust be careful about their use of regexps, to avoid the crazy behaviors.\n\nBackground (as I understand it): The hazards of Regexp are described in\nissue #&nbsp;528, if r is a RegExp, then r.exec() and r.test() leak information\nabout _other_ strings passed to other RegExp objects (even in other gadgets).\n\nI suspect that r.exec(undefined) will be equivalent to r.exec(), and\nsimilarly for r.test().  If this is right, it means that everywhere that\nyour Javascript uses RegExp.exec(s) or RegExp.test(s), you must first test\nto make sure that s !== undefined.\n\nThere are various places that call RegExp.test(x) in domita.js and\nhtml-sanitizer.js.  I did not find any where it's possible to have\nx===undefined, but this pattern is slightly fragile, so I thought I'd\nmention it here as a hazard.\n\nPerhaps this is an argument for writing that code in Caja so that it\nbenefits from however issue #&nbsp;528 is resolved?\n", "created": "2015-04-16 02:40:51"}, {"url": "https://github.com/google/caja/issues/595", "closed": "2015-04-16 02:40:51", "ttf": 0.0002777777777777778, "title": "TameInputElement.blur() should be whitelisted", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 595](https://code.google.com/p/google-caja/issues/detail?id=595) created by google@web.dwdw.me on 2008-06-13T06:52:15.000Z:\n\ndomita.js defines a blur() method on TameInputElement but forgets to call\n___.allowMethod() on blur, so it won't be callable by Caja code (if I\nunderstand correctly).  Is this an oversight?\n", "created": "2015-04-16 02:40:47"}, {"url": "https://github.com/google/caja/issues/592", "closed": "2015-04-16 02:40:33", "ttf": 0.0002777777777777778, "title": "tameException can have a more informative fallback", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 592](https://code.google.com/p/google-caja/issues/detail?id=592) created by erights on 2008-06-13T01:29:27.000Z:\n\nWhen it fails to tame, it currently returns (void 0). Instead, caja.js\ncould statically pre-allocate an exception-of-last-resort object, so that\ntameException, when it fails to tame, can return that instead.\n", "created": "2015-04-16 02:40:31"}, {"url": "https://github.com/google/caja/issues/591", "closed": "2015-04-16 02:40:30", "ttf": 0.0002777777777777778, "title": "tameNode should not accept a value that is not a DOM node", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 591](https://code.google.com/p/google-caja/issues/detail?id=591) created by mikesamuel on 2008-06-13T01:25:35.000Z:\n\ntameNode in domita.js does not check its input type.\n\nFind some way to check that the argument is a hosted object backed by a DOM\ntree.  Perhaps see JQuery for ways to determine whether a reference refers\nto a DOM node.\n\nIf tameNode could be called with a user-defined object, DOMita would act as\na confused deputy since it does not use ___.readPub et al.\n", "created": "2015-04-16 02:40:17"}, {"url": "https://github.com/google/caja/issues/590", "closed": "2015-04-16 02:40:17", "ttf": 0.0002777777777777778, "title": "canDeletePub() should disallow if ending with single \"_\", not double", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 590](https://code.google.com/p/google-caja/issues/detail?id=590) created by erights on 2008-06-13T01:22:28.000Z:\n\nReported by David Wagner\n\nCurrently, it looks like canDeletePub() will allow clients of an object to\ndelete its deletable protected properties.\n", "created": "2015-04-16 02:40:10"}, {"url": "https://github.com/google/caja/issues/589", "closed": "2015-04-16 02:40:10", "ttf": 0.0002777777777777778, "title": "tameNode should not return a functional node for an unrecognized or unsafe element", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 589](https://code.google.com/p/google-caja/issues/detail?id=589) created by mikesamuel on 2008-06-13T01:21:46.000Z:\n\ntameNode will return a TamedElement for any element regardless of whether\nthe element name is recognized and safe.\n\nIf it isn't, we still need to return a node so that tree traversal works,\nbut should not return an editable node, or one that exposes details of the\nnode.\n", "created": "2015-04-16 02:39:59"}, {"url": "https://github.com/google/caja/issues/588", "closed": "2015-04-16 02:39:59", "ttf": 0.0002777777777777778, "title": "onclick within innerHTML doesn't work", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 588](https://code.google.com/p/google-caja/issues/detail?id=588) created by felix8a on 2008-06-13T01:19:28.000Z:\n\n&lt;div id=&quot;x&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\nfunction foo() {\n  caja.log('clicky');\n}\nvar x = document.getElementById('x');\nx.innerHTML = '&lt;a onclick=&quot;return foo()&quot;&gt;clicky&lt;/a&gt;';\n&lt;/script&gt;\n\nit looks to me like the innerHTML rewrite is reasonable, but\nplugin_dispatchEvent is failing to find the function, because the name is\ngetting looked up in imports, and cajoled global scope is not in imports\nany more.\n", "created": "2015-04-16 02:39:52"}, {"url": "https://github.com/google/caja/issues/586", "closed": "2015-04-16 02:39:47", "ttf": 0.0002777777777777778, "title": "non-uniformity: xo4a() doesn't enforce lack of conflicting markings", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 586](https://code.google.com/p/google-caja/issues/detail?id=586) created by erights on 2008-06-13T01:02:54.000Z:\n\nsimpleFunc(), ctor(), and method(), all enforce that a function is only\nmarked as one kind of function. xo4a() should but doesn't.\n", "created": "2015-04-16 02:39:45"}, {"url": "https://github.com/google/caja/issues/585", "closed": "2015-04-16 02:39:45", "ttf": 0.0002777777777777778, "title": "charset attribute is whitelisted", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 585](https://code.google.com/p/google-caja/issues/detail?id=585) created by tyler.close on 2008-06-13T00:55:55.000Z:\n\nThe charset attribute is whitelisted and is valid for the A element. Only\nbad things can come of this. I don't know if browsers actually use this\nattribute, but we shouldn't give 'em the opportunity.\n", "created": "2015-04-16 02:39:34"}, {"url": "https://github.com/google/caja/issues/584", "closed": "2015-04-16 02:39:34", "ttf": 0.0002777777777777778, "title": "Unclear compiler error about for-in loop that assigns to a module free variable", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 584](https://code.google.com/p/google-caja/issues/detail?id=584) created by tobie.langel on 2008-06-13T00:47:36.000Z:\n\nNote: in warps mode.\n\nFATAL_ERROR: built-in:///js-quasi-literals:1+1: Cannot assign to a free module variable: Rule \n&quot;setBadFreeVariable&quot;, AssignOperation : ASSIGN\n  Reference\n    Identifier : property\n  Reference\n    Identifier : x1___\nFATAL_ERROR: built-in:///js-quasi-literals:1+1: Cannot assign to a free module variable: Rule \n&quot;setBadFreeVariable&quot;, AssignOperation : ASSIGN\n  Reference\n    Identifier : property\n  Reference\n    Identifier : x6___\n", "created": "2015-04-16 02:39:27"}, {"url": "https://github.com/google/caja/issues/583", "closed": "2015-04-16 02:39:27", "ttf": 0.0002777777777777778, "title": "html4-defs.js's UNSAFE flag is a blacklist", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 583](https://code.google.com/p/google-caja/issues/detail?id=583) created by google@web.dwdw.me on 2008-06-13T00:37:08.000Z:\n\nAdding an UNSAFE flag to tag names that Domita should not be able to\ninstantiate is arguably a blacklist.  Errors of omission (forgetting to put\nan UNSAFE flag on a tag listed in html4-defs.js) fails safe.  Fortunately,\nthis is a blacklist of a closed set, not of an open set: omitting a tag\nname entirely from html4-defs.js is safe.\n\nOne might consider whether this is a good decision.  It might be defensible\n(given that this is a closed set that can be audited carefully).\n", "created": "2015-04-16 02:39:22"}, {"url": "https://github.com/google/caja/issues/582", "closed": "2015-04-16 02:39:22", "ttf": 0.0002777777777777778, "title": "html4-defs.js is a blacklist", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 582](https://code.google.com/p/google-caja/issues/detail?id=582) created by metaweta on 2008-06-13T00:34:10.000Z:\n\nWe should have a whitelist instead.\n", "created": "2015-04-16 02:39:20"}, {"url": "https://github.com/google/caja/issues/581", "closed": "2015-04-16 02:39:20", "ttf": 0.0002777777777777778, "title": "Need to autogenerate html4-defs from the lang/html", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 581](https://code.google.com/p/google-caja/issues/detail?id=581) created by metaweta on 2008-06-13T00:33:24.000Z:\n\nThis is currently done by hand.\n", "created": "2015-04-16 02:39:11"}, {"url": "https://github.com/google/caja/issues/580", "closed": "2015-04-16 02:39:11", "ttf": 0.0002777777777777778, "title": "get(Next|Previous)Sibling is a cuckoo", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 580](https://code.google.com/p/google-caja/issues/detail?id=580) created by metaweta on 2008-06-13T00:28:31.000Z:\n\nGadget1:\n&lt;div id=&quot;mary&quot;&gt;Mary&lt;/div&gt;&lt;div id=&quot;fred&quot;&gt;Fred&lt;/div&gt;\n&lt;button onclick=&quot;exports.fred.getNextSibling().innerHTML='hi';&quot;&gt;clicky&lt;/button&gt;\n&lt;script&gt;\nexports.fred = document.getElementById('fred');\n&lt;/script&gt;\n\nGadget2:\n&lt;div id=&quot;parent&quot;&gt;\n&lt;div id=&quot;george&quot;&gt;George&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar fred = loadModule('gadget.1').fred;\nvar parent = document.getElementById('parent');\nvar george = document.getElementById('george');\nparent.appendChild(fred);\nparent.appendChild(george);\n&lt;/script&gt;\n\nCajole 1 then 2, then click in gadget 1.  George in gadget 2 is changed to\n&quot;hi&quot;.\n\nTo fix, we either need to disable them or present proof that we know the\nparent.\n", "created": "2015-04-16 02:38:55"}, {"url": "https://github.com/google/caja/issues/577", "closed": "2015-04-16 02:38:28", "ttf": 0.0002777777777777778, "title": "Domita: Several toString() functions aren't whitelisted for Caja", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 577](https://code.google.com/p/google-caja/issues/detail?id=577) created by google@web.dwdw.me on 2008-06-13T00:13:04.000Z:\n\nTameTextNode.toString() and TameCommentNode.toString() cannot be called by\nCaja code (I think) because they have never been whitelisted.  Probably\nshould call makeSimpleFunction() on them so that Caja can call them.  Or\nmaybe setMethod() -- does that work?\n\nI think there may be other cases of this -- I didn't check carefully.\n\nThis is a functionality issue only, I think: no security implications.\n", "created": "2015-04-16 02:38:24"}, {"url": "https://github.com/google/caja/issues/576", "closed": "2015-04-16 02:38:24", "ttf": 0.0002777777777777778, "title": "addEventListener does not whitelist event type.", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 576](https://code.google.com/p/google-caja/issues/detail?id=576) created by tyler.close on 2008-06-13T00:12:08.000Z:\n\naddEventListener takes a string name for the event to register for and only\nensures that the argument is a string. Any string value is accepted. In\ncontrast, setAttribute requires that the attribute name be a known value.\nConsequently, some kinds of event handlers can be registered through\naddEventListener, but not setAttribute.\n", "created": "2015-04-16 02:38:17"}, {"url": "https://github.com/google/caja/issues/575", "closed": "2015-04-16 02:38:17", "ttf": 0.0002777777777777778, "title": "getPrevSibling should be getPreviousSibling", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 575](https://code.google.com/p/google-caja/issues/detail?id=575) created by metaweta on 2008-06-13T00:10:49.000Z:\n\nmisspelled\n", "created": "2015-04-16 02:38:15"}, {"url": "https://github.com/google/caja/issues/574", "closed": "2015-04-16 02:38:14", "ttf": 0.0002777777777777778, "title": "Don't bless result of getInnerHtml()", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 574](https://code.google.com/p/google-caja/issues/detail?id=574) created by google@web.dwdw.me on 2008-06-13T00:08:38.000Z:\n\nDomita must not bless the result of getInnerHtml().  It's tempting to bless\nits output so that you can call setInnerHtml() on that without validating\nit.  Don't do that.  It introduces crazy vulnerabilities: it'll copy script\nfrom one gadget to another (which means that the plugin_event_dispatcher\nwill refer to the wrong gadget), and it may copy mangled named.\n", "created": "2015-04-16 02:38:10"}, {"url": "https://github.com/google/caja/issues/573", "closed": "2015-04-16 02:38:10", "ttf": 0.0002777777777777778, "title": "Container has no say over what kinds of events a gadget sees", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 573](https://code.google.com/p/google-caja/issues/detail?id=573) created by google@web.dwdw.me on 2008-06-13T00:02:59.000Z:\n\nThere is a hardcoded policy for what kinds of events a gadget sees:\nbasically, if it is listed in html-defs.js as a SCRIPT and if the browser\nis willing to send the event to the gadget's node, then the gadget will\nreceive that event, otherwise it won't.  This has two implications:\n\n1) The container has no say over this.  The container cannot provide policy\nto restrict what kinds of events the gadget will see.  The container cannot\nreliably observe what events the gadget will see (due to stopPropagation()).\n\n2) We are relying upon the browser not to send a gadget events that it\ndoesn't deserve to receive, and not to send it events with a .target that\nrefers to a DOM node outside of its own DOM subtree (since the\nplugin_event_dispatcher by default sets .editable___ to true on all target\nnodes of events).\n\nSuggestions: 1) Consider ways for the container to interpose policy upon\nwhat kinds of events a gadget can see.\n\n2) Think about whether there are any ways that you can reduce your reliance\nupon the browser, e.g., by doing additional checks.  For instance,\nplugin_event_dispatcher might be able to walk up the ancestor hierachy in\nthe DOM tree to make sure that event.target refers to a DOM node within the\nrecipient gadget's DOM subtree.\n", "created": "2015-04-16 02:38:05"}, {"url": "https://github.com/google/caja/issues/572", "closed": "2015-04-16 02:38:05", "ttf": 0.0002777777777777778, "title": "insertBefore has only one parameter", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 572](https://code.google.com/p/google-caja/issues/detail?id=572) created by metaweta on 2008-06-12T23:59:17.000Z:\n\nIt should take two.\n", "created": "2015-04-16 02:37:58"}, {"url": "https://github.com/google/caja/issues/571", "closed": "2015-04-16 02:37:58", "ttf": 0.0002777777777777778, "title": "domita.js assumes browser node types won't change", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 571](https://code.google.com/p/google-caja/issues/detail?id=571) created by google@web.dwdw.me on 2008-06-12T23:47:29.000Z:\n\ndomita.js relies upon browsers to never change the type (or tag name) of a\nDOM node.  The reason is that TameNodes check the node___.nodeType once\nwhen the wrapper and assume it remains unchanged.  For instance, if I call\ntameNode() on a text node, I get back a TameTextNode n, and\nn.setNodeValue() will allow me to set n.node___.nodeValue to arbitrary\nstrings.  This is safe for as long as n.node___ remains a text node.  But\nif the type of that underlying DOM node can ever change (e.g., some other\nJavascript in the container that I'm interacting with mutates it without\nintending to cause any harm), then I may be able to write arbitrary text\ninto what is no longer a text node.\n\nThis is not a defect, merely an observation of a place where domita.js is\nrelying upon properties of the browser.  You might consider reducing this\nreliance, e.g., by checking node___.nodeType everywhere that you use the\nnode and where it's needed, though I don't know the performance\nimplications of that.\n", "created": "2015-04-16 02:37:54"}, {"url": "https://github.com/google/caja/issues/568", "closed": "2015-04-16 02:37:38", "ttf": 0.0002777777777777778, "title": "Domita: TameNodes need to consistently check editable___", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 568](https://code.google.com/p/google-caja/issues/detail?id=568) created by google@web.dwdw.me on 2008-06-12T23:41:36.000Z:\n\nTameNode.appendChild(), .insertBefore(), and removeChild() do not check\neditable___ on either the receiver or the child-argument.  (It should check\non both.)  As a result, if some other gadget gives me a non-editable\nTameNode n that wraps one of its DOM nodes, I can launder it into an\neditable TameNode: I call myNode.appendChild(n), then ask for the children\nof myNode, and assuming myNode is editable, I've got an editable wrapper for n.\n\nRecommendation: Audit every method in domita.js that can mutate a node and\nensure that it checks editable___.  I haven't done such a careful audit.\n", "created": "2015-04-16 02:37:29"}, {"url": "https://github.com/google/caja/issues/567", "closed": "2015-04-16 02:37:29", "ttf": 0.0002777777777777778, "title": "domita innerHtml turns class=\"\" into class=\"class\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 567](https://code.google.com/p/google-caja/issues/detail?id=567) created by felix8a on 2008-06-12T23:37:53.000Z:\n\n&lt;div id=&quot;x&quot;&gt;&lt;/div&gt;\n&lt;script&gt;\nvar x = document.getElementById('x');\nx.innerHTML = '&lt;div id=&quot;y&quot; onclick=&quot;&quot;&gt;&lt;/div&gt;';\nvar y = document.getElementById('y');\ncaja.log(y.className);\n&lt;/script&gt;\n\nin html-sanitizer.js, makeSaxParser,\nwhen matching on attributes,\nline 161 says\n            var encodedValue = m[2] || m[3] || m[4];\n\nm is the result of a regexp match.\nin the test case, m[2] === &quot;&quot;, which is false,\nso encodedValue gets m[4] === undefined.\n\nline 164 says\n  if (encodedValue != null)\nto test if the attribute value is absent,\nin order to normalize\n&lt;input checked&gt; into\n&lt;input checked=&quot;checked&quot;&gt;\n\nso cajita fails to distinguish the case where the attr value is specified\nas &quot;&quot;, and replaces it with the attr name.\n\nthis doesn't look exploitable.\nid=&quot;id&quot; and class=&quot;class&quot; are harmless.\nsrc=&quot;src&quot; etc will go through the uri policy.\nonclick=&quot;onclick&quot; etc is filtered out.\nstyle=&quot;style&quot; is harmless.\n", "created": "2015-04-16 02:37:22"}, {"url": "https://github.com/google/caja/issues/565", "closed": "2015-04-16 02:37:13", "ttf": 0.0002777777777777778, "title": "Domita doesn't attempt to hide browser differences", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 565](https://code.google.com/p/google-caja/issues/detail?id=565) created by davidsarah.hopwood on 2008-06-12T23:17:31.000Z:\n\nFor example\n\n```\nTameEvent.prototype.getButton = function () {\n  var e = this.event___;\n  return e.button &amp;&amp; Number(e.button);\n};\n```\n\nbut the meaning of the Event.button property differs between browsers:\nhttp://www.quirksmode.org/dom/w3c_events.html#miscprop\n\nThere are probably many cases like this.\n", "created": "2015-04-16 02:37:04"}, {"url": "https://github.com/google/caja/issues/564", "closed": "2015-04-16 02:37:04", "ttf": 0.0002777777777777778, "title": "Consider authority to receive events when node to which handler is added is cloned", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 564](https://code.google.com/p/google-caja/issues/detail?id=564) created by mikesamuel on 2008-06-12T23:11:04.000Z:\n\nplugin_dispatchEvent___ assumes that, since a node has authority to edit a\nnode, any event handlers it adds have edit authority on the target node of\nevents received by that handler.\n\nNode.cloneNode can create a clone of a subtree that (might) contain event\nhandlers added to the original.\n\nShould these event handlers receive events where the target node is in the\ncloned tree.\n", "created": "2015-04-16 02:37:01"}, {"url": "https://github.com/google/caja/issues/563", "closed": "2015-04-16 02:37:01", "ttf": 0.0002777777777777778, "title": "Domita doesn't always validate the types of values it returns from DOM objects", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 563](https://code.google.com/p/google-caja/issues/detail?id=563) created by davidsarah.hopwood on 2008-06-12T23:08:48.000Z:\n\nFor example consider\n\n  TameImageElement.prototype.getSrc = function () {\n    return this.node___.src;\n  };\n\nThe .src property _should_ be a string, but we are depending on the browser\nnot to return some wierd object that looks like a string but that might\ngrant extra authority. Coercing to a string (or whatever other type) would\nbe safer.\n", "created": "2015-04-16 02:36:54"}, {"url": "https://github.com/google/caja/issues/562", "closed": "2015-04-16 02:36:54", "ttf": 0.0002777777777777778, "title": "Domita tamed node lists do not reflect changes in the original node list", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 562](https://code.google.com/p/google-caja/issues/detail?id=562) created by davidsarah.hopwood on 2008-06-12T23:03:52.000Z:\n\ntameNodeList copies the original node list. This is probably mostly\nharmless, but is a difference in semantics from the underlying DOM API.\n", "created": "2015-04-16 02:36:48"}, {"url": "https://github.com/google/caja/issues/560", "closed": "2015-04-16 02:36:43", "ttf": 0.0002777777777777778, "title": "tameNodeList gives access to a bare function", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 560](https://code.google.com/p/google-caja/issues/detail?id=560) created by davidsarah.hopwood on 2008-06-12T22:19:30.000Z:\n\nfunction tameNodeList in domita.js says:\n\n  var tamed = [];\n[...]\n  tamed.item = function (k) {\n    k &amp;= 0x7fffffff;\n    if (isNaN(k)) { throw new Error(); }\n    return this[k] || null;\n  };\n  return tamed;\n\nIf we enter the following in the testbed:\n\n  &lt;form id=&quot;myform&quot;&gt;&lt;/form&gt;\n  &lt;script type=&quot;text/javascript&quot;&gt;\n  var item = document.getElementById('myform').getElements().item;\n  &lt;/script&gt;\n\nthen item is a reference to a bare function. In conjunction with the (now\nfixed) bind bug or similar, this allows referencing properties of the\nglobal object:\n\n  item.bind()(k);\n\nexcept that k must be an integer because of the 'k &amp;= 0x7fffffff' line above.\n", "created": "2015-04-16 02:36:32"}, {"url": "https://github.com/google/caja/issues/559", "closed": "2015-04-16 02:36:31", "ttf": 0.0002777777777777778, "title": "directConstructor changes the iteration order on an object that declares a property with name 'constructor'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 559](https://code.google.com/p/google-caja/issues/detail?id=559) created by tyler.close on 2008-06-12T22:03:13.000Z:\n\nThe implementation of directConstructor() removes and then adds back a\nproperty named 'constructor', in order to get at the constructor that is\npart of the inheritance hierarchy. This operation changes the iteration\norder on an object, even if that object is frozen.\n", "created": "2015-04-16 02:36:20"}, {"url": "https://github.com/google/caja/issues/558", "closed": "2015-04-16 02:36:20", "ttf": 0.0002777777777777778, "title": "Optional HTML attributes whose value is the empty string should not cause parse errors", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 558](https://code.google.com/p/google-caja/issues/detail?id=558) created by mikesamuel on 2008-06-12T21:29:11.000Z:\n\nThe HTML\n  &lt;input accesskey=&quot;&quot;&gt;\nissues a warning.  This should be a LINT message at most but the attribute\nshould be removed before rendering.\n", "created": "2015-04-16 02:36:18"}, {"url": "https://github.com/google/caja/issues/557", "closed": "2015-04-16 02:36:18", "ttf": 0.0002777777777777778, "title": "verify javascript toUpperCase is independent of locale", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 557](https://code.google.com/p/google-caja/issues/detail?id=557) created by felix8a on 2008-06-12T19:43:22.000Z:\n\nes3 specifies a separate method toLocaleUpperCase, but it's not clear from\nthe description of toUpperCase that it's guaranteed to be\nlocale-independent.  need to verify this for the common browsers.\n", "created": "2015-04-16 02:35:56"}, {"url": "https://github.com/google/caja/issues/556", "closed": "2015-04-16 02:35:56", "ttf": 0.0002777777777777778, "title": "Incorrect parsing of </ that doesn't represent a closing tag", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 556](https://code.google.com/p/google-caja/issues/detail?id=556) created by collin.jackson on 2008-06-12T19:41:40.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n&quot;&lt;/d&quot;;\n&lt;/script&gt;\n\nWhat is the expected output? \n\n'\\074/d';\n\nWhat do you see instead?\n\nLINT :4+10: End of file seen and there were open elements.\n:4: &lt;/script&gt;\nERROR :4+1 - 2: Unexpected token &lt;\n:4: &lt;/script&gt;\n\nI ran into this issue trying to represent &quot;&lt;script&gt;&lt;/scr&quot; + &quot;ipt&gt;&quot;;\n\nThis issue might lead to a different parse tree being generated than the\none that the module owner intended.\n", "created": "2015-04-16 02:35:49"}, {"url": "https://github.com/google/caja/issues/555", "closed": "2015-04-16 02:35:49", "ttf": 0.0002777777777777778, "title": "Domita nodes won't function correctly if used by non-Caja code", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 555](https://code.google.com/p/google-caja/issues/detail?id=555) created by google@web.dwdw.me on 2008-06-12T19:08:38.000Z:\n\nIf a reference to a Domita TamedNode should happen to leak to non-Caja\nnon-Cajoled Javascript, and if that Javascript starts trying to do DOM\noperations on that TamedNode, some of them will succeed, but some others\nmay behave unexpectedly.  For instance, tn.setInnerHtml() will work as\nexpected but tn.innerHtml = &quot;...&quot; will fail, if called by Javascript and if\ntn is a TamedNode.\n", "created": "2015-04-16 02:35:34"}, {"url": "https://github.com/google/caja/issues/554", "closed": "2015-04-16 02:35:33", "ttf": 0.0002777777777777778, "title": "Domita: TamedNode provides more authority than one might expect", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 554](https://code.google.com/p/google-caja/issues/detail?id=554) created by google@web.dwdw.me on 2008-06-12T18:50:10.000Z:\n\nCurrently in Domita, a reference to a TamedNode provides authority to\naccess not only the subtree rooted at that node but also its sibling nodes\nand the subtrees rooted at those subtrees (due to getNextSibling etc.). \nThis is more than one might normally expect.  At a minimum it should be\ndocumented as a hazard or as part of the interface of a TamedNode, but it\nmight be nice to think about whether there are any better solutions to\navoid excess authority.\n\nDavid-Sarah suggested one approach: a Cursor object C is a pair of a\nreference R to a &quot;current node&quot; and a child-closed set S (child-closed\nmeans if x is in S then all children of x are in S).  Invariant: the\nsubtree rooted at R must be contained in the set of nodes described by S. \nOperations on C operate on the node referenced by R.  Also we can support\nC.getParent() which checks that the parent is contained in S and returns\nanother cursor C' = (R.getParent(),S).  Similarly one can support\ngetNextSibling() etc.  Also one supports an operation C.attenuate(T), which\nreturns the new cursor C' = (R,T) if T is a child-closed subset of S and\notherwise fails; and an operation C.strengthen(T), which returns the new\ncursor C' = (R,T) if T is a child-closed set of nodes (perhaps specified as\nthe root of a subtree, or a forest of subtrees) and if S is a subset of T.\n Now the cursor C = (R,S) provides authority to all nodes in S, but refers\n(&quot;points at&quot;) to node R.  Think of S as a &quot;high water mark&quot; of what cursors\nderived from S (ignoring attenuate/strengthen) can refer to.  The Gadget\nwould initially receive a cursor that refers to its entire subtree and has\nits entire subtree as high water mark.  An event handler would receive a\ncursor that refers to the DOM node where the event occured and has the\nsubtree rooted at that DOM node as high water mark.  when gadgets\ncommunicate with each other, they'd have to attenuate all their cursors so\nthat their high water mark is the subtree of nodes is the same as the node\nthat it refers so (as a feature, we might make C.attenuate() return such a\ncursor).  Tradeoffs: This might provide a way to support\ngetParent()/getNextSibling() for legacy code, without modifications to\nlegacy code, but on the other hand it might introduce opportunities for\nsecurity bugs where we forget to call attenuate() on all cursors before\npassing them across a security boundary (e.g., to another gadget).\n\nRecommendation: Think about this issue and its security consequences a bit\nfurther, and document what you decide somewhere so that programmers know\nwhat to expect.\n", "created": "2015-04-16 02:35:24"}, {"url": "https://github.com/google/caja/issues/549", "closed": "2015-04-16 02:34:50", "ttf": 0.0002777777777777778, "title": "hasTrademark arguments are backwards", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 549](https://code.google.com/p/google-caja/issues/detail?id=549) created by ping@zesty.ca on 2008-06-12T17:51:37.000Z:\n\nhasTrademark(a, b) should be read correctly as &quot;a hasTrademark b&quot;, i.e. b\nshould be the trademark.  This would be consistent with any other use of an\ninfix operator as a prefix, or with the equivalence:\n\n obj op arg &lt;-&gt; obj.op(arg) &lt;-&gt; op(obj, arg)\n", "created": "2015-04-16 02:34:44"}, {"url": "https://github.com/google/caja/issues/548", "closed": "2015-04-16 02:34:44", "ttf": 0.0002777777777777778, "title": "@f.prototype.constructor is settable", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 548](https://code.google.com/p/google-caja/issues/detail?id=548) created by metaweta on 2008-06-12T17:29:13.000Z:\n\nfunction x(){this;}\ncaja.def(x,Object,{constructor:1});\n", "created": "2015-04-16 02:34:39"}, {"url": "https://github.com/google/caja/issues/545", "closed": "2015-04-16 02:34:06", "ttf": 0.0002777777777777778, "title": "call and apply handlers should be on Function.prototype instead of Object.prototype", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 545](https://code.google.com/p/google-caja/issues/detail?id=545) created by metaweta on 2008-06-12T16:57:45.000Z:\n\nFor cleanliness; no exploit is known.\n", "created": "2015-04-16 02:34:01"}, {"url": "https://github.com/google/caja/issues/543", "closed": "2015-04-16 02:33:46", "ttf": 0.0002777777777777778, "title": "caja security faq", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 543](https://code.google.com/p/google-caja/issues/detail?id=543) created by felix8a on 2008-06-12T16:38:31.000Z:\n\nin the review, there have been many questions that fall into the form:\n&quot;javascript/html/etc lets me do x, which is a problem.  how does caja\nprevent that?&quot;  and the answer is not always obvious.\n\nsomeone should collect these into an FAQ.\n", "created": "2015-04-16 02:33:43"}, {"url": "https://github.com/google/caja/issues/541", "closed": "2015-04-16 02:33:32", "ttf": 0.0002777777777777778, "title": "Failure to load an external script is not fatal", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 541](https://code.google.com/p/google-caja/issues/detail?id=541) created by felix8a on 2008-06-12T14:42:04.000Z:\n\nif &lt;script src=&quot;...&quot;&gt; doesn't NPE (issue 540)\nand the external js can't be loaded,\ncaja emits PluginMessageType.FAILED_TO_LOAD_EXTERNAL_URL,\nwhich is a warning.\n\nI don't think this can break the sandbox,\nbut it might interfere with security assumptions of gadgets,\nsince I can sometimes artificially force your server to fail while your\ngadget is being cajoled.\n", "created": "2015-04-16 02:33:23"}, {"url": "https://github.com/google/caja/issues/540", "closed": "2015-04-16 02:33:23", "ttf": 0.0002777777777777778, "title": "NPE using script src= in testbed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 540](https://code.google.com/p/google-caja/issues/detail?id=540) created by felix8a on 2008-06-12T14:29:31.000Z:\n\n&lt;script src=&quot;abc&quot;&gt;&lt;/script&gt;\n\njava.lang.NullPointerException\n    at\ncom.google.caja.lexer.CharProducer$Factory$CharProducerImpl.read(CharProducer.java:147)\n    at\ncom.google.caja.lexer.LineContinuingCharProducer.read(LineContinuingCharProducer.java:57)\n    at\ncom.google.caja.lexer.InputElementSplitter.produce(InputElementSplitter.java:76)\n    at\ncom.google.caja.lexer.AbstractTokenStream.hasNext(AbstractTokenStream.java:29)\n    at\ncom.google.caja.lexer.InputElementJoiner.produce(InputElementJoiner.java:47)\n    at\ncom.google.caja.lexer.AbstractTokenStream.hasNext(AbstractTokenStream.java:29)\n    at com.google.caja.lexer.JsLexer$WordClassifier.hasNext(JsLexer.java:138)\n    at com.google.caja.lexer.JsLexer.hasNext(JsLexer.java:65)\n    at com.google.caja.lexer.TokenQueue.fetch(TokenQueue.java:89)\n    at com.google.caja.lexer.TokenQueue.isEmpty(TokenQueue.java:62)\n    at\ncom.google.caja.plugin.stages.RewriteHtmlStage.parseJs(RewriteHtmlStage.java:495)\n", "created": "2015-04-16 02:33:20"}, {"url": "https://github.com/google/caja/issues/539", "closed": "2015-04-16 02:33:20", "ttf": 0.0002777777777777778, "title": "Create tests to ensure that no untested JavaScript constructs appear in cajoler output", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 539](https://code.google.com/p/google-caja/issues/detail?id=539) created by zestyping on 2008-06-12T06:57:06.000Z:\n\nIt's important not to let the cajoler get out of sync with your\nspecification and test suite for the subset of JavaScript used\nin cajoled code.  So, create a suite of tests that checks that the\ncajoler produces only the constructs you expect.  (For example, give\nseveral samples of large Caja programs as input, and parse the\ncajoled output to verify that it contains only constructs from the\nset of JavaScript constructs you have specified and tested.)\n", "created": "2015-04-16 02:33:18"}, {"url": "https://github.com/google/caja/issues/538", "closed": "2015-04-16 02:33:18", "ttf": 0.0002777777777777778, "title": "Create tests to ensure that no untested JavaScript constructs appear in cajoler output", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 538](https://code.google.com/p/google-caja/issues/detail?id=538) created by zestyping on 2008-06-12T06:55:27.000Z:\n\nIt's important not to let the cajoler get out of sync with your\nspecification and test suite for the subset of JavaScript used\nin cajoled code.  So, create a suite of tests that checks that the\ncajoler produces only the constructs you expect.  (For example, give\nseveral samples of large Caja programs as input, and parse the\ncajoled output to verify that it contains only constructs from the\nset of JavaScript constructs you have specified and tested.)\n", "created": "2015-04-16 02:33:05"}, {"url": "https://github.com/google/caja/issues/537", "closed": "2015-04-16 02:33:04", "ttf": 0.0002777777777777778, "title": "Create tests for the expected behaviour of all Javascript constructs used in cajoled code", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 537](https://code.google.com/p/google-caja/issues/detail?id=537) created by zestyping on 2008-06-12T06:52:36.000Z:\n\nTests are, in a sense, an executable specification of the behaviours\nyou expect; creating them will help ensure that everyone knows what\nthose expectations are.  If you run them on all the browsers you care\nabout, you'll be much more likely to discover whether your assumptions\nhave been violated, and whether they become violated when new versions\nof browsers come out.\n\nKeeping these tests in sync with changes to the cajoler is important;\nyou should also create a suite of tests that checks that the cajoler\nproduces only the constructs you expect.  (For example, give several\nsamples of large Caja programs as input, and parse the cajoled output\nto verify that it contains only constructs from the set of JavaScript\nconstructs you have specified and tested.)\n", "created": "2015-04-16 02:32:53"}, {"url": "https://github.com/google/caja/issues/536", "closed": "2015-04-16 02:32:53", "ttf": 0.0002777777777777778, "title": "invisible modification of for-in targets", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 536](https://code.google.com/p/google-caja/issues/detail?id=536) created by felix8a on 2008-06-12T06:41:03.000Z:\n\nwhen a caja program writes a loop like\n  for (var k in x) {...}\nwhere the ... code does not modify x,\nwe expect that it will visit all enumerable properties.\n\nhowever, cajoled code may actually modify x\nas a side effect of setting fastpath x.k_canRead__.\n\nit's unclear whether browsers will enumerate all the properties that\nexisted before x was modified.\n1. someone should examine the source code of various browsers and see if\n   enumeration does something sensible in this case.\n2. caja could implement guaranteed enumeration by creating a list of\n   enumerable properties before executing the body of the for loop.\n", "created": "2015-04-16 02:32:40"}, {"url": "https://github.com/google/caja/issues/532", "closed": "2015-04-16 02:32:06", "ttf": 0.0002777777777777778, "title": "Swallowing exception in directConstructor", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 532](https://code.google.com/p/google-caja/issues/detail?id=532) created by davidsarah.hopwood on 2008-06-12T00:05:17.000Z:\n\nIn directConstructor in caja.js, we have\n    try {\n      [...]\n    } catch (ex) {\n      return (void 0);\n    }\nWe shouldn't be throwing the exception on the floor.\n\nIn general, caja.js etc. should be reviewed for similar cases.\n", "created": "2015-04-16 02:31:55"}, {"url": "https://github.com/google/caja/issues/531", "closed": "2015-04-16 02:31:55", "ttf": 0.0002777777777777778, "title": "RegExp save static state which can be access by other instances of RegExp", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 531](https://code.google.com/p/google-caja/issues/detail?id=531) created by jasvir on 2008-06-12T00:04:16.000Z:\n\nRegExp use static variables input, multiline, lastMatch, lastParen,\nleftContext, rightContext, and $1 through $9.  As a result, a RegExp.exec\nand RegExp.test which don't take an input string are able to access prior\nregexp state and input including matches which happen in a different gadget.\n\nThese static variables must be unset before executing a match.\n", "created": "2015-04-16 02:31:51"}, {"url": "https://github.com/google/caja/issues/530", "closed": "2015-04-16 02:31:50", "ttf": 0.0002777777777777778, "title": "Be careful about locales", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 530](https://code.google.com/p/google-caja/issues/detail?id=530) created by google@web.dwdw.me on 2008-06-11T23:58:07.000Z:\n\nThere are places in the code that do something like\n   if (&quot;SCRIPT&quot;.equals(tagName.toUpperCase())) {\n      .. rip out the script tag, do something to make everyone safe ...\n   }\nProblem: If the Cajoler is running in the Turkish locale, then\n&quot;SCRIPT&quot;.equals(&quot;script&quot;.toUpperCase()) is false.  &quot;i&quot;.toUpperCase() does\nnot return what you might expect: it returns a capital I with a dot on top\nof it.\n\nImpact: the Cajoler may be insecure in Turkey.\n\nIn general, you should be careful about locales.\n\nOne possible fix: replace all of these uses of uppercasing with a call to a\nlocale-independent uppercase method that does what you'd expect.\n", "created": "2015-04-16 02:31:39"}, {"url": "https://github.com/google/caja/issues/528", "closed": "2015-04-16 02:31:28", "ttf": 0.0002777777777777778, "title": "exec and test methods of regexps should not be whitelisted", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 528](https://code.google.com/p/google-caja/issues/detail?id=528) created by metaweta on 2008-06-11T23:34:33.000Z:\n\nx=new RegExp(&quot;(.|\\r|\\n)*&quot;,&quot;&quot;);\nx.exec();\n// returns the last input to a regular expression (even in another gadget)\n\nor\n\nx=new RegExp(&quot;abc&quot;,&quot;&quot;);\nx.test();\n// returns true if the last input to a regexp contained abc (even in\nanother gadget)\n", "created": "2015-04-16 02:31:08"}, {"url": "https://github.com/google/caja/issues/527", "closed": "2015-04-16 02:31:08", "ttf": 0.0002777777777777778, "title": "Password autofill allows modules to steal usernames and passwords", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 527](https://code.google.com/p/google-caja/issues/detail?id=527) created by collin.jackson on 2008-06-11T23:33:47.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\n&lt;form&gt;\n&lt;input name=&quot;username&quot;&gt;\n&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;\n&lt;/form&gt;\n\nWhat is the expected output? \n\nForm has autocomplete=off\n\nWhat do you see instead?\n\nForm is prefilled with user's password, and can be read by the module using\ndomita.\n", "created": "2015-04-16 02:30:57"}, {"url": "https://github.com/google/caja/issues/526", "closed": "2015-04-16 02:30:57", "ttf": 0.0002777777777777778, "title": "IMG USEMAP= is not sanitized properly", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 526](https://code.google.com/p/google-caja/issues/detail?id=526) created by google@web.dwdw.me on 2008-06-11T23:28:27.000Z:\n\nIn the Cajoler: IMG USEMAP= is subject only to the constraint that it start\nwith a # character.  (See html4-attributes-defs.json.)  Currently, nothing\nseems to prevent one Gadget from listing a value of the form #xxx where xxx\nrefers to a name defined by some other Gadget or by the container.  The\nintent appears to be that the value of the USEMAP attribute should be\ntreated as an IDREF and hence name-mangled or whatever to ensure that one\nCaja applet can only refer to its own names.  However this does not seem to\nbe implemented yet.\n\nIn Domita: The value of the USEMAP attribute is subject only to constraint\nthat it be rewritten like any other URI (per the UriPolicy).  This is not\nconsistent with what the Cajoler requires: Domita allows you to specify\nUSEMAP attribute values that the Cajoler does not allow you to specify. \nThere is no Domita restriction that the value of the USEMAP attribute start\nwith a # character.\n\nIn general, it seems that html4-defs.js should be generated based upon the\nhtml4-*-defs.json schemas, perhaps with additional constraints.\n", "created": "2015-04-16 02:30:43"}, {"url": "https://github.com/google/caja/issues/524", "closed": "2015-04-16 02:30:26", "ttf": 0.0002777777777777778, "title": "StringLiteral should not admit both quoted and unquoted strings", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 524](https://code.google.com/p/google-caja/issues/detail?id=524) created by mikesamuel on 2008-06-11T23:12:20.000Z:\n\nStringLiterals are used for barewords in\n  ({ a: 4 })\n\nThis cause unnecessary complexity in getUnquotedValue.\n\nMaybe audit all clients of StringLiteral, have getValue return the\nunescaped value.\nReplace uses of the public StringLiteral constructor with factory factions\nfromQuotedValue, fromUnquotedValue.\nCreate a BareStringLiteral type that can be used in ObjectConstructors.\n", "created": "2015-04-16 02:30:23"}, {"url": "https://github.com/google/caja/issues/523", "closed": "2015-04-16 02:30:23", "ttf": 0.0002777777777777778, "title": "accesskey attribute probably shouldn't be whitelisted", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 523](https://code.google.com/p/google-caja/issues/detail?id=523) created by felix8a on 2008-06-11T23:07:39.000Z:\n\nhtml4-attributes-whitelist.json\nwhitelists a:accesskey, etc.\nI think it's unlikely that any container would want to allow that,\nsince a gadget could interfere with the container's accesskeys,\nand there isn't a way to negotiate accesskeys for multiple gadgets on a page.\n", "created": "2015-04-16 02:30:12"}, {"url": "https://github.com/google/caja/issues/522", "closed": "2015-04-16 02:30:12", "ttf": 0.0002777777777777778, "title": "application/x-www-form-urlencoded has no space in it", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 522](https://code.google.com/p/google-caja/issues/detail?id=522) created by google@web.dwdw.me on 2008-06-11T22:52:37.000Z:\n\nIn html4-attributes-defs.json, we have:\n\n```\n  { &quot;key&quot;: &quot;FORM:ACTION&quot;, &quot;description&quot;: &quot;server-side form handler&quot;,\n    &quot;mimeTypes&quot;: &quot;application/x-www- form-urlencoded&quot;, &quot;type&quot;: &quot;URI&quot;,\n```\n\n&quot;optional&quot;: false },\n\nNotice the space in the value of mimeTypes.  There should be no space. \nThis error is in the Perl script at the top, too.  Cut-and-paste error?\n\nCheck for other cut-and-paste errors, too?\n", "created": "2015-04-16 02:30:07"}, {"url": "https://github.com/google/caja/issues/521", "closed": "2015-04-16 02:30:07", "ttf": 0.0002777777777777778, "title": "The HTML attribute whitelist contains whitelisted attributes on blacklisted elements", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 521](https://code.google.com/p/google-caja/issues/detail?id=521) created by google@web.dwdw.me on 2008-06-11T22:50:57.000Z:\n\nThere are many cases in the HTML attribute whitelist where an attribute is\nwhitelisted on an element that is blacklisted in the HTML element\nwhitelist.  Examples: SCRIPT:CHARSET is whitelisted (in the attribute list)\nbut SCRIPT is blacklisted (in the element list).  Similar for OBJECT:DATA,\nAPPLET:CODE, and many many others.  This is inconsistent and a hazard for\nmaintenance.\n\nSuggested fix: For every tag T that is not whitelisted in the HTML element\nwhitelist, ensure that there is no attribute A such that T:A is whitelisted\nin the HTML attribute whitelist.\n", "created": "2015-04-16 02:30:05"}, {"url": "https://github.com/google/caja/issues/520", "closed": "2015-04-16 02:30:05", "ttf": 0.0002777777777777778, "title": "Static RegExp properties have bizarre mutability properties on Firefox", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 520](https://code.google.com/p/google-caja/issues/detail?id=520) created by erights on 2008-06-11T22:49:23.000Z:\n\nIt just so happens that Firefox defines a mutable static RegExp.multiline\nproperty with bizarre behavior\n&lt;http://www.devguru.com/Technologies/ecmascript/QuickRef/regexp.html#multiline&gt;\nwhich we may need to work around even after we repair bug 519.\n", "created": "2015-04-16 02:29:51"}, {"url": "https://github.com/google/caja/issues/519", "closed": "2015-04-16 02:29:51", "ttf": 0.0002777777777777778, "title": "Whitelisted static properties of RegExp rather than instance methods", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 519](https://code.google.com/p/google-caja/issues/detail?id=519) created by erights on 2008-06-11T22:46:59.000Z:\n\nAs mentioned in bug 516\n\n  all2(grantRead, RegExp, [\n    'source', 'global', 'ignoreCase', 'multiline', 'lastIndex'\n  ]);\n\nshould be\n\n  all2(grantRead, RegExp.prototype, [\n    'source', 'global', 'ignoreCase', 'multiline', 'lastIndex'\n  ]);\n", "created": "2015-04-16 02:29:44"}, {"url": "https://github.com/google/caja/issues/517", "closed": "2015-04-16 02:29:40", "ttf": 0.0002777777777777778, "title": "ensure input doesn't reach output without sanitization", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 517](https://code.google.com/p/google-caja/issues/detail?id=517) created by felix8a on 2008-06-11T22:43:17.000Z:\n\nright now, it's too easy to accidentally pass an unsanitized input node\nthrough the pipeline unchanged and emit it verbatim, which violates the\nwhitelist principle.\n\nthe js stage has a phase that verifies there are no unsanitized nodes at\nthe end, but there isn't a similar check for html and css nodes.\n\nthis could be done with a flag on nodes, but we also discussed a number of\nways of doing this in the type system instead.  a rationale for doing it\nwith types is it reduces the amount of code that has to be audited to\nverify the sandboxing claim.\n\none proposal is to parameterize Nodes with a class that marks which\nlifecycle wave the node belongs to, so you might have\nParseTreeNode&lt;ParsedWave&gt;\nwhere ParsedWave inherits from LifeCycleWave, etc.\nand then various transformations would rewrite to Node&lt;NormalizedWave&gt; and\nthen to Node&lt;SafeWave&gt;.\n\n('wave' is a bad name, but the normal name 'stage' already means something\nelse.)\n", "created": "2015-04-16 02:29:28"}, {"url": "https://github.com/google/caja/issues/516", "closed": "2015-04-16 02:29:28", "ttf": 0.0002777777777777778, "title": "grantMethod/grantRead naming convention confusing. Led to bug.", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 516](https://code.google.com/p/google-caja/issues/detail?id=516) created by erights on 2008-06-11T22:34:01.000Z:\n\nOn the one hand, grantMethod() and grantMutator() does the grant on\n&lt;first-arg&gt;.prototype[&lt;second-arg&gt;], whereas grantRead() and others does\nthe grant on &lt;first-arg&gt;[&lt;second-arg&gt;]. This confusion led to the\nwhitelisting in caja.js accidentally doing a \n\n  all2(grantRead, RegExp, [\n    'source', 'global', 'ignoreCase', 'multiline', 'lastIndex'\n  ]);\n\nwhen what was intended was a\n\n  all2(grantRead, RegExp.prototype, [\n    'source', 'global', 'ignoreCase', 'multiline', 'lastIndex'\n  ]);\n\n(that particular bug to be filed separately)\n\nThe suggested solution is to remove the hidden &quot;.prototype&quot; following, and\nmake grantMethod/grantMutator follow the convention of grantRead, etc.\n", "created": "2015-04-16 02:29:24"}, {"url": "https://github.com/google/caja/issues/515", "closed": "2015-04-16 02:29:24", "ttf": 0.0002777777777777778, "title": "DomProcessingEvents.cdata should never be reached and is dangerous", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 515](https://code.google.com/p/google-caja/issues/detail?id=515) created by mikesamuel on 2008-06-11T22:27:34.000Z:\n\nWe do not whitelist any elements that take CDATA content.\n\nRemove DomProcessingEvents.cdata, and make it's client issue an error if an\ncdata node is seen by CompileHtml.\n", "created": "2015-04-16 02:29:19"}, {"url": "https://github.com/google/caja/issues/514", "closed": "2015-04-16 02:29:19", "ttf": 0.0002777777777777778, "title": "Sanity check embeddable mode content invariants on rendered code", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 514](https://code.google.com/p/google-caja/issues/detail?id=514) created by mikesamuel on 2008-06-11T21:58:23.000Z:\n\nOur embeddable mode renderer tries to maintain the invariant that nothing\nthat looks like a tag will appear in rendered text.\nAny '&lt;' that appears in code should be followed by a space or be escaped,\nmodulo &lt;= and &lt;&lt; operators.\n\nWe could check that our output is 7-bit ascii and has this property by\n(1) encoding to 7-bit\n(2) translating bytes directly to chars\n(4) s/&lt;{2,}/&lt;/g\n(3) matching on the regexp.  die $&amp; if /&lt;\\/?[^ \\r\\n=]/\n", "created": "2015-04-16 02:29:14"}, {"url": "https://github.com/google/caja/issues/512", "closed": "2015-04-16 02:29:07", "ttf": 0.0002777777777777778, "title": "Need a global configuration flag for \"enable insecure mode\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 512](https://code.google.com/p/google-caja/issues/detail?id=512) created by google@web.dwdw.me on 2008-06-11T21:30:26.000Z:\n\nRight now there are some uncounted number of configuration flags/settings\nthat if set causes Caja to be insecure in subtle ways.  (e.g., set\nembeddable mode to false, enable non 7-bit-printable-ASCII output, enable\ndebug mode).  There should be a master\nI_really_want_to_be_horribly_insecure flag.  If this flag is not set, and\nany of the other &quot;shoot yourself in the foot in a subtle way&quot; flags is set,\nthen the Cajoler should error out, report a configuration error, and refuse\nto Cajole its input.\n", "created": "2015-04-16 02:29:01"}, {"url": "https://github.com/google/caja/issues/511", "closed": "2015-04-16 02:29:00", "ttf": 0.0002777777777777778, "title": "deprecated element names in html4-elements-whitelist.js", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 511](https://code.google.com/p/google-caja/issues/detail?id=511) created by tyler.close on 2008-06-11T21:22:23.000Z:\n\nSome deprecated HTML elements, such as DIR and MENU are currently allowed.\nIt's safer to disallow these elements, since a browser may associate\nsurprising behaviour with them, such as making them equivalent to an\nelement that Caja tries to disallow.\n", "created": "2015-04-16 02:28:58"}, {"url": "https://github.com/google/caja/issues/510", "closed": "2015-04-16 02:28:58", "ttf": 0.0002777777777777778, "title": "Metavariables in match-substitute rules should match the variable name in the Java code", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "Type-Refactoring"], "commitsDetails": [], "body": "Original [issue 510](https://code.google.com/p/google-caja/issues/detail?id=510) created by davidsarah.hopwood on 2008-06-11T21:21:04.000Z:\n\nFor example, in the funcCtor rule, there is a metavariable @f_init \ncorresponding to f_init___ in the Java code, and a metavariable @r \ncorresponding to result in the Java code.\n\nMost other metavariables have the same name as the Java variable, which \nimproves understandability of the code.\n", "created": "2015-04-16 02:28:56"}, {"url": "https://github.com/google/caja/issues/509", "closed": "2015-04-16 02:28:55", "ttf": 0.0002777777777777778, "title": "INPUT:TYPE is whitelisted and perhaps should not be", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 509](https://code.google.com/p/google-caja/issues/detail?id=509) created by google@web.dwdw.me on 2008-06-11T21:15:36.000Z:\n\nIt looks like the .json whitelist may allow INPUT TYPE=&quot;file&quot; and INPUT\nTYPE=&quot;password&quot; as HTML tags.  It's not clear whether this is a completely\nharmless thing to allow.  For instance, with INPUT TYPE=&quot;file&quot;, one can\nimagine focus-stealing attacks that trick the user into sending keyboard\nevents to that textfield that cause a sensitive file to be uploaded\n(without the user's knowledge or consent), and one can imagine the\nfake-CAPTCHA attack where the user thinks they are typing in characters\nfrom a CAPTCHA into a text-entry field, but the browser will actually\ninterpret that as a filename to be uploaded.  INPUT TYPE=&quot;password&quot; is less\ndangerous but might enable phishing.\n\nThere should probably be some consideration of this risk.  It's not obvious\nwhat the right thing to do is.\n\nP.S. This is an interesting case, because the TYPE= attribute is safe on\nsome other tags.  If you were to deny INPUT TYPE= (but continue to allow\nTYPE= on other HTML tags), then we'd have a case where a particular\nattribute is allowable (whitelisted/safe) on some tags but disallowed\n(blacklisted/considered unsafe) on other tags.  That in turn would mean\nthat we need to be really sure that html-emitter.js and\nSanitizeHtmlStage/CompileHtmlStage cannot be tricked into emitting a TYPE=\nattribute on the wrong tag (from the sanitizer's perspective, it appeared\nto be on a tag where it is safe, but it actually got stuck on a INPUT tag\nwhere it is not supposed to appear).\n\nThis was discovered together with Tyler Close.\n", "created": "2015-04-16 02:28:47"}, {"url": "https://github.com/google/caja/issues/508", "closed": "2015-04-16 02:28:46", "ttf": 0.0002777777777777778, "title": "Comments in caja.js still refer to allow*", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 508](https://code.google.com/p/google-caja/issues/detail?id=508) created by davidsarah.hopwood on 2008-06-11T20:57:09.000Z:\n\nallow\\* functions in caja.js were renamed to grant*, but the comments were \nnot updated.\n", "created": "2015-04-16 02:28:44"}, {"url": "https://github.com/google/caja/issues/506", "closed": "2015-04-16 02:28:39", "ttf": 0.0002777777777777778, "title": "Consider separating rewriting from validation in Cajoler", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 506](https://code.google.com/p/google-caja/issues/detail?id=506) created by google@web.dwdw.me on 2008-06-11T19:03:43.000Z:\n\nSome pipeline stages in the Cajoler (e.g., SanitizeHTMLStage,\nValidateCSSStage) mix both rewriting (transformation/normalization/other\nkinds of nontrivial modification to tree) and validation (yes/no checking\nthat the tree is &quot;safe&quot; or otherwise OK, possibly combined with removing\nentire subtrees that are not safe/OK).  It's not clear to me whether this\nis a good architectural decision.\n\nPoints to consider: It might be easier to do security review if these are\nclearly separated.  It might eliminate some maintenance hazards: changes to\nthe rewriting/normalization/transformation are less likely to introduce\nsecurity breaches that allow one to write unsafe HTML/CSS.  It might reduce\nthe likelihood of mutation-related bugs, where you validate some HTML/CSS\nparse tree and then the tree gets mutated afterwards (e.g., by\ntransformation).  On the other hand, this might cause code blowup or\nduplication.\n", "created": "2015-04-16 02:28:28"}, {"url": "https://github.com/google/caja/issues/505", "closed": "2015-04-16 02:28:28", "ttf": 0.0002777777777777778, "title": "Avoid static mutables in Cajoler", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 505](https://code.google.com/p/google-caja/issues/detail?id=505) created by google@web.dwdw.me on 2008-06-11T18:44:32.000Z:\n\nThe Cajoler code (Java code) seems to contain some static mutables. This\nshould be avoided.  The Cajoler might be called by a multithreaded\nwebserver (i.e., one thread might call the Cajoler while another thread is\nin the middle of also calling the Cajoler).  Static mutable state in the\nCajoler is a hazard, given this.  Therefore, all static mutable variables\nshould be eliminated.\n\nSpotted by Tyler Close.\n", "created": "2015-04-16 02:28:17"}, {"url": "https://github.com/google/caja/issues/504", "closed": "2015-04-16 02:28:17", "ttf": 0.0002777777777777778, "title": "Cajoler should be deterministic", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 504](https://code.google.com/p/google-caja/issues/detail?id=504) created by google@web.dwdw.me on 2008-06-11T18:42:02.000Z:\n\nCajoler code seems to use bare HashMaps in some places.  Should use\nLinkedHashMaps (which have a deterministic iteration order) to ensure that\nthe cajoler is deterministically replayable.\n\nIn particular, the goal is that: Given the gadget input; and given\neverything returned by the UriPolicy (UriCallback), it should be possible\nto regenerate the output of the Cajoler (the output of the Cajoler should\nbe a deterministic function of those inputs).  Bare HashMaps can break this\nproperty because the iteration order is nondeterministic.\n\nSpotted by Tyler Close.\n", "created": "2015-04-16 02:28:08"}, {"url": "https://github.com/google/caja/issues/503", "closed": "2015-04-16 02:28:08", "ttf": 0.0002777777777777778, "title": "Move deferred script tags to the bottom", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 503](https://code.google.com/p/google-caja/issues/detail?id=503) created by adriennefelt on 2008-06-11T18:38:17.000Z:\n\nCurrently, scripts with the defer attribute set are not actually deferred - they need to be moved to \nthe bottom of the page.  (Think this should be done during the RewriteHtmlStage.)\n", "created": "2015-04-16 02:28:03"}, {"url": "https://github.com/google/caja/issues/498", "closed": "2015-04-16 02:27:16", "ttf": 0.0002777777777777778, "title": "Missing rewriter rules callCajaDef1 and callCajaDef1bad", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 498](https://code.google.com/p/google-caja/issues/detail?id=498) created by collin.jackson on 2008-06-11T17:21:52.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\ncaja.def(42);\n\nWhat is the expected output? \n\nSome kind of error complaining that the argument isn't a function.\n\nWhat do you see instead?\n\nvar caja = **_.readImport(IMPORTS**_, 'caja');\nvar x0___;\nvar x1___;\nIMPORTS___[ 'yield' ](%28x1___ = caja, x0___ = 42, x1___.def_canCall___? x1___.def%28x0___%29: \n___.callPub%28x1___, 'def', [ x0___ ])));\n", "created": "2015-04-16 02:27:03"}, {"url": "https://github.com/google/caja/issues/497", "closed": "2015-04-16 02:27:03", "ttf": 0.0002777777777777778, "title": "<input> element leaks pointer to parent <form> node", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 497](https://code.google.com/p/google-caja/issues/detail?id=497) created by collin.jackson on 2008-06-11T17:14:02.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nTwo Caja modules inside the same form tag can access each other's DOM using the &quot;form&quot; property \nof input elements in side the Caja module.\n\nWhat is the expected output?\n\nMaybe we should provide guidance to containers not to do this. Or maybe we could verify that the \nform tag is inside the module where the input element resides.\n\nWhat do you see instead?\n\nFull access between modules using the form tag.\n", "created": "2015-04-16 02:26:58"}, {"url": "https://github.com/google/caja/issues/495", "closed": "2015-04-16 02:26:47", "ttf": 0.0002777777777777778, "title": "version checking", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 495](https://code.google.com/p/google-caja/issues/detail?id=495) created by felix8a on 2008-06-11T04:10:04.000Z:\n\nsecurity of a cajoled gadget is dependent on caja.js staying in sync with\nthe output of the cajoler.  so, a container could put the caja version\nnumber in the url for caja.js.  and it can also attach caja version to the\ncajoled output, so that the container's runtime code can do a version check\nbefore allowing the cajoled gadget to run.\n\nmaybe this integrity check should be a part of caja.\n", "created": "2015-04-16 02:26:42"}, {"url": "https://github.com/google/caja/issues/494", "closed": "2015-04-16 02:26:42", "ttf": 0.0002777777777777778, "title": "Assignment to valid is dead in HtmlSanitizer.java:122", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 494](https://code.google.com/p/google-caja/issues/detail?id=494) created by google@web.dwdw.me on 2008-06-11T02:24:12.000Z:\n\nConsider the following excerpt from HtmlSanitizer.sanitize():\n\n if (null == a ) {\n        boolean savedValid = valid;\n        valid = false;\n        mq.getMessages().add(new Message(\n            PluginMessageType.UNKNOWN_ATTRIBUTE, MessageLevel.WARNING,\n            t.getFilePosition(), MessagePart.Factory.valueOf(attrName),\n            MessagePart.Factory.valueOf(tagName)));\n        valid = removeUnknownAttribute(tag, attrName) &amp; savedValid;\n        break;\n      }\n\nThe assignment to &quot;valid = false&quot; (line 122) is dead code -- the local\nvariable &quot;valid&quot; is never read before being assigned a few lines down (line\n127).  Why is that dead code there?  I suggest reviewing this code\ncarefully to double-check for possible logic errors.  It's suspicious to\nsee code that seems to be trying to mark part of the HTML as not valid, to\nno actual effect.\n", "created": "2015-04-16 02:26:38"}, {"url": "https://github.com/google/caja/issues/493", "closed": "2015-04-16 02:26:38", "ttf": 0.0002777777777777778, "title": "Identifier lengths not limited", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 493](https://code.google.com/p/google-caja/issues/detail?id=493) created by mikesamuel on 2008-06-11T02:04:45.000Z:\n\nvar a = 'a';\nwhile (true) {\n  if (a.length !== eval(\n      '(function () { var o = { ' + a + ': 1 }; for (var k in o) { return\nk.length; } })()'\n      )) {\n    print(a.length);\n    break;\n  }\n  a += a;\n  print('still running ' + a.length);\n}\nwhere print dumps to a log.\n\nThe above will stop when parse fails on a long identifier or when the\nparser truncates a long identifier.\n\nOn Firefox 2.0.0.14, the limit is above 2**28, and on IE somewhere above\n2**25.  Safari crashes hard.\n\nMake sure that we reject any identifiers above some limit (1024 code units).\n\nThis will prevent attacks where an identifier close to some truncating\nlimit can't have a suffix added.\n", "created": "2015-04-16 02:26:35"}, {"url": "https://github.com/google/caja/issues/492", "closed": "2015-04-16 02:26:35", "ttf": 0.0002777777777777778, "title": "container-writing guide needs a clear list of hazards", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 492](https://code.google.com/p/google-caja/issues/detail?id=492) created by felix8a on 2008-06-11T01:14:40.000Z:\n\na list of best practices, and a list of things that are dangerous.\n", "created": "2015-04-16 02:26:31"}, {"url": "https://github.com/google/caja/issues/489", "closed": "2015-04-16 02:26:10", "ttf": 0.0002777777777777778, "title": "Rewritten event handlers not scoped properly", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 489](https://code.google.com/p/google-caja/issues/detail?id=489) created by mikesamuel on 2008-06-11T01:05:49.000Z:\n\n&lt;a href=&quot;#&quot; onclidk=&quot;foo()&quot;&gt; cajoles to a function with an &quot;event&quot; parameter.\n\nThis function is marked synthetic and so DefaultCajaRewriter does not\nintroduce a new scope.\n\nFix that, and change the function body rewriting to use the Exophoric\nfunction body rewriter which issues useful warnings.\n", "created": "2015-04-16 02:26:08"}, {"url": "https://github.com/google/caja/issues/488", "closed": "2015-04-16 02:26:08", "ttf": 0.0002777777777777778, "title": "JS identifier length not limited (was Risk of too many spicy wunderbars)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 488](https://code.google.com/p/google-caja/issues/detail?id=488) created by jasvir on 2008-06-11T01:02:58.000Z:\n\nThe length of identifiers is browser dependent.  If an identifier is too\nlong and does not generate a syntax error or gets truncated, it may be used\nto prevent trailing underbars on a variable from being applied.\n\nCaja should enforce a short identifier length.\n", "created": "2015-04-16 02:25:54"}, {"url": "https://github.com/google/caja/issues/487", "closed": "2015-04-16 02:25:54", "ttf": 0.0002777777777777778, "title": "Stylesheet imports are not sanitized", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 487](https://code.google.com/p/google-caja/issues/detail?id=487) created by collin.jackson on 2008-06-11T01:02:49.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\n&lt;STYLE&gt;@import 'http://crypto.stanford.edu/~collinj/test/caja/xss.css';&lt;/STYLE&gt;\n\nWhat is the expected output? \n\nImport is not allowed.\n\nWhat do you see instead?\n\nThe stylesheet is loaded without being rewritten. The page's header turns\nread. Potentially, the stylesheet could run script using expression or\n-moz-binding.\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed\n", "created": "2015-04-16 02:25:45"}, {"url": "https://github.com/google/caja/issues/486", "closed": "2015-04-16 02:25:45", "ttf": 0.0002777777777777778, "title": "(event || window.event) problematic in inline event-handlers", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 486](https://code.google.com/p/google-caja/issues/detail?id=486) created by mikesamuel on 2008-06-11T01:00:51.000Z:\n\nThe (window.event || event) idiom is used by inline event handlers to get\naccess to the current event across browsers.\n\nFirefox interprets inline event handlers with the current boilerplate\n  (function (event) {\n    ...\n  }).call(/\\* target of the current event _/, /_ current event */);\n\nIE puts the event at window.event and has different boilerplate\n  with (/\\* target of current event */) {\n    ...\n  }\n\nSince IE does with, the free names &quot;event&quot; and &quot;window&quot; might be part of\nthe target node.\n\nSpecifically, does &quot;iframe&quot; have a &quot;window&quot; member.\n", "created": "2015-04-16 02:25:32"}, {"url": "https://github.com/google/caja/issues/485", "closed": "2015-04-16 02:25:32", "ttf": 0.0002777777777777778, "title": "Forms with no action attribute don't use the proxy", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 485](https://code.google.com/p/google-caja/issues/detail?id=485) created by collin.jackson on 2008-06-11T00:40:26.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\n&lt;form onsubmit=&quot;&quot;&gt;&lt;input type=&quot;submit&quot;&lt;/form&gt;\n\nWhat is the expected output?\n\nForm with button that does nothing when you click it (or uses the proxy)\n\nWhat do you see instead?\n\nForm with button that submits to the current page when you click it\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed\n\n<b>Please provide any additional information below.</b>\n\nI think the intent of elementPolicies.form is to cancel submissions of\nforms that have no action attribute.\n", "created": "2015-04-16 02:25:25"}, {"url": "https://github.com/google/caja/issues/484", "closed": "2015-04-16 02:25:25", "ttf": 0.0002777777777777778, "title": "All auto-generated variable names should have underscores in them", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 484](https://code.google.com/p/google-caja/issues/detail?id=484) created by google@web.dwdw.me on 2008-06-11T00:37:36.000Z:\n\nIn the Cajoled output of example.xml, we find this code:\n\nIMPORTS___.c_1___ = **_.simpleFunc(\n                       function (thisNode**_, event) {\n                         **_.asSimpleFunc(**_.primFreeze(handleClicky))();\n                       });\n\nwhich is the Cajoled output that came from\n\n```\n&lt;p&gt;&lt;a onclick=&quot;handleClicky()&quot;&gt;Paragraph 3&lt;/a&gt;&lt;/p&gt;\n```\n\nThe (synthetic) variable name &quot;event&quot; is poorly chosen.  It should have\nunderscores in it to make sure that it is unmentionable by Caja.  For\ninstance, this almost created a world of misery.\n\nFor instance, consider what would have happened had we had:\n\n```\n&lt;p&gt;&lt;a onclick=&quot;event()&quot;&gt;Paragraph 3&lt;/a&gt;&lt;/p&gt;\n```\n\nin the uncajoled input.\n\nSuggested principle: all synthetically generated variable names should have\nlots of underscores in them, to avoid any name overlap with Caja-defined names.\n", "created": "2015-04-16 02:25:16"}, {"url": "https://github.com/google/caja/issues/480", "closed": "2015-04-16 02:24:59", "ttf": 0.0002777777777777778, "title": "Local variable named Array (for example) allows calling functions directly", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 480](https://code.google.com/p/google-caja/issues/detail?id=480) created by davidsarah.hopwood on 2008-06-10T23:23:58.000Z:\n\n(function() {var Array = function() { alert('xyz'); }; [];})();\n\nThis alerts 'xyz' in Firefox 2.0.0.x (not Firefox 3 or IE), when run in\nsquarefree shell or in an HTML page. The '[]' literal acts as a shallow\nreference to 'Array' in the local scope, i.e. effectively as syntactic\nsugar for 'Array()'.\n\nIf we cajole the following:\n\n  var Array = loadModule('keystoneKop').f;\n  [];\n\nthen we get something which appears as though it should be an exploit:\n\n  **_.loadModule(function (**_, IMPORTS___) {\n                   {\n                     var loadModule = **_.readImport(IMPORTS**_, 'loadModule');\n                     var x0___;\n                     var Array = (x0___ =\n**_.asSimpleFunc(loadModule)('keystoneKop'), x0**_.f_canRead___? x0___.f:\n**_.readPub(x0**_, 'f'));\n                     IMPORTS___[ 'yield' ]([ ]);\n                   }\n                 });\n\nFor some reason that is not understood, this does not actually alert in the\ntestbed applet (it would be good to understand why not).\n\nIn any case, we need to prevent use of Array as a local variable name.\n\nObject, Function, String and RegExp don't seem to be exploitable in the\nsame way, but we should prevent use of those as local variable names as\nwell, and arguably the same for all of the other constructors (e.g. *Error)\navailable in the global scope.\n", "created": "2015-04-16 02:24:48"}, {"url": "https://github.com/google/caja/issues/479", "closed": "2015-04-16 02:24:48", "ttf": 0.0002777777777777778, "title": "try/catch behavior differs between Firefox and IE", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 479](https://code.google.com/p/google-caja/issues/detail?id=479) created by collin.jackson on 2008-06-10T23:04:09.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\ntry { throw 42; } \ncatch (foo) { }\nvar y = foo; \n\nWhat is the expected output? \n\ny will be assigned to  **_.readImport(IMPORTS**_, 'foo');\n\nWhat do you see instead?\n\ny will be assigned to 42 on Internet Explorer (but not Firefox)\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed on Firefox and IE7\n\n<b>Please provide any additional information below.</b>\n\nCajoled code should behave the same on all browsers. \n", "created": "2015-04-16 02:24:37"}, {"url": "https://github.com/google/caja/issues/478", "closed": "2015-04-16 02:24:37", "ttf": 0.0002777777777777778, "title": "Abstract all name-mangling operations", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 478](https://code.google.com/p/google-caja/issues/detail?id=478) created by zestyping on 2008-06-10T22:21:34.000Z:\n\nTo make the code easier to review and maintain, I suggest replacing all the\nname-mangling string operations in Caja with calls to a small number of\nfunctions for manipulating identifiers.  If you document these functions\nand keep them in one place, it will be easier to tell whether any\nname-manipulation operations can lead to collisions, misinterpretations,\nviolations of namespace boundaries, etc.\n", "created": "2015-04-16 02:24:28"}, {"url": "https://github.com/google/caja/issues/476", "closed": "2015-04-16 02:24:23", "ttf": 0.0002777777777777778, "title": "After Cajoling, statically check that there are no free variables in global function", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 476](https://code.google.com/p/google-caja/issues/detail?id=476) created by google@web.dwdw.me on 2008-06-10T22:13:53.000Z:\n\nThe following is intended to be an invariant of the output of the Cajoler:\nthe body of the anonymous function passed to ___.loadModule() supposedly\nhas no free variables (it refers only to its two arguments, namely, ___ and\nIMPORTS___, but does not refer to any other names).\n\nThis would be a good property to check.  Some ideas to consider:\n\n1) After Cajoling, take the String output and re-parse it using your\nJavascript parser and statically check that it appears to have no free\nvariables.\n\n2) Do the same as 1), but with an independent Javascript parser (or a\ncollection of Javascript parsers).\n\n3) Record the output of everything that's ever Cajoled, so that you can\nlater do after-the-fact analysis with a suite of Javascript parsers along\nthe lines of 2).  This differs from 2) only in that it can be done long\nafter the initial Cajoling.\n\n4) Try to recognize any use of free variables dynamically, rather than\nstatically, to whatever extent you are able to.  For instance, on browsers\nwhere you can set a nosuch-method on an object (which gets called whether\nyou try to call a non-existent method on that object), create an object to\nbe inserted into the scope chain just above this function with no defined\nmethods and set a nosuch-method which detects any unexpected method\ninvocations and logs them to Google (sends them over http to Google) and\nterminates the Caja script.  I'm not sure whether this is workable; could\nthink about whether there are any clever tricks you could do here.\n\nThe idea is that this would not be a primary security mechanism but rather\na fallback/defense-in-depth mechanism.\n\nIf you include these checks into the Cajoler, then they will automatically\nget applied to all fuzz tests.  If they're not included into the Cajoler,\nthen apply them during fuzz testing.\n\nAlso, think about whether there is any even better way to check this\nproperty during fuzz testing (during fuzz testing, you control the\nenvironment and the interpreter so may be able to take extra steps to check\nthat this property holds which wouldn't be feasible for all deployed\nCajoled code).\n", "created": "2015-04-16 02:24:16"}, {"url": "https://github.com/google/caja/issues/475", "closed": "2015-04-16 02:24:16", "ttf": 0.0002777777777777778, "title": "URICallback issues", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 475](https://code.google.com/p/google-caja/issues/detail?id=475) created by jasvir on 2008-06-10T22:05:40.000Z:\n1. Clarify the documention for URICallback retrieve such that:\n   - it is clear that the transformations done on retrieved content that it\n     is decided by the container\n   - the transformations which the container should never do\n2. Change the URICallback API so that retrieval or rewriting is done\n   at the same time as the decision is taken.\n3. URL and mimetype may not be sufficient for a container to decide\n   whether or not to retrieve and whether to cajole the retrieved content\n   because the context it is used in is not completely captured by the\n   mimetype.  Possible contexts include:\n   - img\n   - script\n   - raw bytes (for example when a JSON object is retrieved but not evaled)\n4. A container should never retrieve and cajole a script because the\n   cajoled output will be inlined into an already cajoled script --\n   something which will probably not work correctly.\n", "created": "2015-04-16 02:24:10"}, {"url": "https://github.com/google/caja/issues/474", "closed": "2015-04-16 02:24:09", "ttf": 0.0002777777777777778, "title": "Fatal compiler error masking declaration", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 474](https://code.google.com/p/google-caja/issues/detail?id=474) created by collin.jackson on 2008-06-10T22:04:51.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nvar f;\nfunction f() { }\n\nWhat is the expected output?\n\nERROR :3+10 - 11: f originally defined at :2+5 - 6\n\nWhat do you see instead?\n\nFATAL_ERROR :2+1 - 6: INTERNAL COMPILER ERROR. Node did not match any \nrules at: Declaration\n  Identifier : f. Please report this error at: \nhttp://code.google.com/p/google-caja/issues/\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed\n\n<b>Please provide any additional information below.</b>\n\nIt's fine for this to be an error, but it shouldn't be an internal \ncompiler error.\n", "created": "2015-04-16 02:24:05"}, {"url": "https://github.com/google/caja/issues/472", "closed": "2015-04-16 02:23:49", "ttf": 0.0002777777777777778, "title": "Write tests for each of the Cajoler transformation stages", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 472](https://code.google.com/p/google-caja/issues/detail?id=472) created by zestyping on 2008-06-10T21:41:05.000Z:\n\nIn javatests/com/google/caja/plugin/stages there are four tests so far --\nplease add unit tests for the other transformation stages.\n", "created": "2015-04-16 02:23:38"}, {"url": "https://github.com/google/caja/issues/471", "closed": "2015-04-16 02:23:38", "ttf": 0.0002777777777777778, "title": "Prefer to avoid hiding/shadowing of variable names?", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 471](https://code.google.com/p/google-caja/issues/detail?id=471) created by google@web.dwdw.me on 2008-06-10T19:37:44.000Z:\n\nThere seem to be more than a few instances of hidden/shadowed variable\nnames in the Java code.  These arguably introduce a risk of confusion,\nwhich could potentially hide security bugs, could potentially lead to\ninsecurity under maintenance, or which might potentially make code review a\nbit harder.\n\nExample: DefaultGadgetRewriter.java:183 defines local variable content\nwhich is defined in an enclosing scope (line 175).\n", "created": "2015-04-16 02:23:31"}, {"url": "https://github.com/google/caja/issues/470", "closed": "2015-04-16 02:23:31", "ttf": 0.0002777777777777778, "title": "Java code should compile clean, with no compiler warnings", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 470](https://code.google.com/p/google-caja/issues/detail?id=470) created by google@web.dwdw.me on 2008-06-10T19:11:54.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Import Caja into Eclipse as a Java project (note: you will have to\ndelete the tools/ directory and BuildServiceImplementation; you will have\nto manually add all of the .jar's under third_party/ as\nthird-party/external jars in Eclipse's UI)\n2. Let Eclipse build the project\n3. Notice the warnings\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected output: No warnings.  Actual: 31 warnings.\n\n<b>What version of the product are you using? On what operating system?</b>\n\nEclipse 3.3.2, default settings.\n", "created": "2015-04-16 02:23:29"}, {"url": "https://github.com/google/caja/issues/469", "closed": "2015-04-16 02:23:29", "ttf": 0.0002777777777777778, "title": "Freeze properties of the caja API", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 469](https://code.google.com/p/google-caja/issues/detail?id=469) created by collin.jackson on 2008-06-10T19:11:33.000Z:\n\nIt might be possible to exploit the fact that properties of the\nmodule-accessible &quot;caja&quot; API are not frozen, for example using caja.def. It\nseems safer to freeze them.\n", "created": "2015-04-16 02:23:15"}, {"url": "https://github.com/google/caja/issues/468", "closed": "2015-04-16 02:23:15", "ttf": 0.0002777777777777778, "title": "Shadowed generic type parameter in AncestorChain.java", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 468](https://code.google.com/p/google-caja/issues/detail?id=468) created by google@web.dwdw.me on 2008-06-10T19:09:47.000Z:\n\nAncestorChain shadows the type parameter T.  This is confusing.\n\nThe class is declared as:\n\npublic final class AncestorChain&lt;T extends ParseTreeNode&gt; {\n\nHowever the cast() method is declared like this:\n\n@SuppressWarnings(&quot;unchecked&quot;)\n  public &lt;T extends ParseTreeNode&gt; AncestorChain&lt;T&gt; cast(Class&lt;T&gt; clazz) {\n\nThis code might be easier to review if you avoid shadowing the name T. \nJust use a different name for the type parameter in cast().\n", "created": "2015-04-16 02:23:13"}, {"url": "https://github.com/google/caja/issues/467", "closed": "2015-04-16 02:23:13", "ttf": 0.0002777777777777778, "title": "Testbed: error message isn't always cleared for a new trial", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 467](https://code.google.com/p/google-caja/issues/detail?id=467) created by zestyping on 2008-06-10T18:57:33.000Z:\n\nI am having trouble finding a reproducible test case.  But sometimes, the\nfirst box on the right, where errors appear, lingers around.  If a first\ntrial (enter code, click on &quot;Cajole&quot;) produces an error, and then a second\ntrial produces no error, sometimes the error message from the first trial\nremains present.\n", "created": "2015-04-16 02:23:06"}, {"url": "https://github.com/google/caja/issues/466", "closed": "2015-04-16 02:23:06", "ttf": 0.0002777777777777778, "title": "Unused variable warnings in Java code", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 466](https://code.google.com/p/google-caja/issues/detail?id=466) created by tyler.close on 2008-06-10T18:32:17.000Z:\n\n<b>Please provide any additional information below.</b>\n\nUnclear whether these unused declarations represent poor cleanup from past\nchanges, or as yet unimplemented but needed functionality.\n", "created": "2015-04-16 02:23:04"}, {"url": "https://github.com/google/caja/issues/465", "closed": "2015-04-16 02:23:03", "ttf": 0.0002777777777777778, "title": "html4-attributes-whitelist has attributes of prohibited elements", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 465](https://code.google.com/p/google-caja/issues/detail?id=465) created by adriennefelt on 2008-06-10T18:31:43.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Go to caja.lang.html4-attributes-whitelist.json\n2. Look at the file\n\n<b>What is the expected output? What do you see instead?</b>\nAttributes of prohibited elements are on the attribute whitelist, such as all of the &lt;OBJECT&gt; \nattributes (codebase, align, etc.).  I can't see any way to exploit this at the moment (since the tag \nwill still be denied based on the OBJECT name) but it seems like something that ought to be fixed.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 02:22:55"}, {"url": "https://github.com/google/caja/issues/464", "closed": "2015-04-16 02:22:54", "ttf": 0.0002777777777777778, "title": "Reading the apply property of a function throws internal error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 464](https://code.google.com/p/google-caja/issues/detail?id=464) created by collin.jackson on 2008-06-10T18:02:08.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nfunction f() {}\nf.apply;\n\nWhat is the expected output? \n\nA non-internal error.\n\nWhat do you see instead?\n\nError: Internal: attach should not see non-methods: function apply() {\n    [native code]\n}\nSource File: http://cajadores.com/demos/testbed/caja.js\nLine: 180\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed\n\n<b>Please provide any additional information below.</b>\n\nInternal exceptions should be used only indicate bugs in Caja, not security\nrestrictions.\n", "created": "2015-04-16 02:22:48"}, {"url": "https://github.com/google/caja/issues/463", "closed": "2015-04-16 02:22:48", "ttf": 0.0002777777777777778, "title": "Compile error in JsLexer.java", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 463](https://code.google.com/p/google-caja/issues/detail?id=463) created by google@web.dwdw.me on 2008-06-10T17:57:29.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. svn update\n2. ant\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect a clean build.  Instead, I got a compile error:\n\nPrimitives:\n    [javac] Compiling 19 source files to\n/home/daw/research/caja/google-caja-read-only/src/ant-lib\n\nReporting:\n    [javac] Compiling 14 source files to\n/home/daw/research/caja/google-caja-read-only/src/ant-lib\n\nLexer:\n    [javac] Compiling 25 source files to\n/home/daw/research/caja/google-caja-read-only/src/ant-lib\n    [javac] ----------\n    [javac] 1. ERROR in\n/home/daw/research/caja/google-caja-read-only/src/java/com/google/caja/lexer/JsLexer.java\n(at line 102)\n    [javac]     sb.append(Pattern.quote(validPreceders[i]));\n    [javac]                       ^^^^^\n    [javac] The method quote(String) is undefined for the type Pattern\n    [javac] ----------\n    [javac] 1 problem (1 error)\n\nBUILD FAILED\n/home/daw/research/caja/google-caja-read-only/src/build.xml:539: Compile\nfailed; see the compiler error output for details.\n\nTotal time: 11 minutes 11 seconds\n\n<b>What version of the product are you using? On what operating system?</b>\n\nSvn revision 1787.  Linux Fedora 9, x86_64.  Sun JDK 1.6.0_10.\n\n<b>Please provide any additional information below.</b>\n\nI have no idea why this happens.  The Sun API docs clearly state that\njava.util.regex.Pattern has a quote(String) method (since 1.5).  I wonder\nif there is some problem with my Java install on my machine.\n", "created": "2015-04-16 02:22:36"}, {"url": "https://github.com/google/caja/issues/461", "closed": "2015-04-16 02:22:32", "ttf": 0.0002777777777777778, "title": "Java code can swallow nondeterministic exceptions, potentially leaving the thrower in an inconsistent state", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 461](https://code.google.com/p/google-caja/issues/detail?id=461) created by tyler.close on 2008-06-10T17:43:56.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Create a Caja input program that causes the parser to eat up enough of\nits Java invocation stack that a StackOverflowError is cause inside the\nimplementation of the method called on line 396.\n2. The called object is left in an inconsistent state because assignment\noperations are not executed.\n3. The finally block on line 397 eats the VirtuallyMachineError by instead\nthrowing the RuntimeException held in the ex variable.\n\n<b>What is the expected output? What do you see instead?</b>\nIt's possible a particular Caja program could put the Caja transformer into\nan inconsistent state, leading to incorrect output.\n", "created": "2015-04-16 02:22:18"}, {"url": "https://github.com/google/caja/issues/459", "closed": "2015-04-16 02:21:43", "ttf": 0.0002777777777777778, "title": "javadoc errors", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 459](https://code.google.com/p/google-caja/issues/detail?id=459) created by google@web.dwdw.me on 2008-06-10T17:34:36.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. svn update\n2. ant\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected a successful build.  Instead, javadoc gives many parse errors. \ne.g., here is one:\n\n  [javadoc] Parsing\n/home/daw/research/caja/google-caja-read-only/src/java/com/google/caja/config/ConfigMessageType.java\n  [javadoc]\n/home/daw/research/caja/google-caja-read-only/src/java/com/google/caja/config/ConfigMessageType.java:39:\nSyntax error (14)\n  [javadoc]   ;\n  [javadoc]   ^\n  [javadoc] Couldn't repair and continue parse at character 1532 of input\n...\n  [javadoc] 31 errors.\n\n<b>What version of the product are you using? On what operating system?</b>\n\nSubversion revision 1786, Linux Fedora 9, default install.\n\n$ javadoc -version\nsinjdoc: No packages or classes specified.\n1 error.\n$ java -version\njava version &quot;1.5.0&quot;\ngij (GNU libgcj) version 4.3.0 20080428 (Red Hat 4.3.0-8)\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 02:21:36"}, {"url": "https://github.com/google/caja/issues/458", "closed": "2015-04-16 02:21:36", "ttf": 0.0002777777777777778, "title": "Fasttrack flags can be inappropriately inherited", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 458](https://code.google.com/p/google-caja/issues/detail?id=458) created by davidsarah.hopwood on 2008-06-10T17:24:58.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. In the testbed applet, enter\n\nvar f = loadModule('keystoneKop').f;\n({isPrototypeOf: f}).isPrototypeOf();\n\nAlerts 'You get a cookie'.\n\nThe problem is that isPrototypeOf is whitelisted on Object.prototype (the\ncanCall fasttrack flag is set). If isPrototypeOf is overridden, the\nfasttrack flag is inherited, even though it might not be appropriate for\nthe inheriting object.\n\nThere are many possible variations on this bug. It seems like it should not\never be possible for an object that has fasttrack flags set on it to be\nused as a prototype, since the flags can't be consistent for two different\nobjects.\n\nWhat version of the product are you using?\n\nTestbed Rev 1779 built on 2008-06-08 22:45:24\n", "created": "2015-04-16 02:21:32"}, {"url": "https://github.com/google/caja/issues/457", "closed": "2015-04-16 02:21:32", "ttf": 0.0002777777777777778, "title": "Methods flagged _grantCall___ on Object can be overridden", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 457](https://code.google.com/p/google-caja/issues/detail?id=457) created by zestyping on 2008-06-10T17:16:43.000Z:\n\n<b>What steps will reproduce the problem?</b>\n&lt;script&gt;\nvar f = loadModule('keystoneKop').f;\n({toString: f}) + &quot;&quot;;\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nExpected: Nothing.\nActual: &quot;You get a cookie&quot; alert dialog.\n", "created": "2015-04-16 02:21:27"}, {"url": "https://github.com/google/caja/issues/456", "closed": "2015-04-16 02:21:27", "ttf": 0.0002777777777777778, "title": "toLocaleString and isPrototypeOf allow calling uncallable methods", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 456](https://code.google.com/p/google-caja/issues/detail?id=456) created by collin.jackson on 2008-06-10T17:14:19.000Z:\n\nvar obj = { toLocaleString: loadModule(&quot;keystoneKop&quot;).f };\nobj.toLocaleString();\n\nWhat is the expected output?\n\nError: Not callable: ([Object]).toLocaleString\n\nWhat do you see instead?\n\nYou get a cookie\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed\n\n<b>Please provide any additional information below.</b>\n\nisPrototypeOf has the same problem.\n", "created": "2015-04-16 02:21:14"}, {"url": "https://github.com/google/caja/issues/455", "closed": "2015-04-16 02:21:13", "ttf": 0.0002777777777777778, "title": "Confusing diagnostic", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 455](https://code.google.com/p/google-caja/issues/detail?id=455) created by erights on 2008-06-10T17:06:11.000Z:\n\nCajoling a script containing &quot;Object.prototype.toString.call(a);&quot; under\nfirebug produces the following diagnostic on the firebug console:\n\nNot readable: ((function Object() { [native code] }:function)).prototype\nx4___ has no properties\n\nThe problem is indeed that the prototype property isn't readable, as the\ndiagnostic above does report. But it's easy to misread.\n", "created": "2015-04-16 02:21:09"}, {"url": "https://github.com/google/caja/issues/454", "closed": "2015-04-16 02:21:09", "ttf": 0.0002777777777777778, "title": "dashboard should build jsdoc for html-emitter.js", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 454](https://code.google.com/p/google-caja/issues/detail?id=454) created by mikesamuel on 2008-06-10T17:03:15.000Z:\n\njava/.../plugin/html-emitter.js\n", "created": "2015-04-16 02:21:04"}, {"url": "https://github.com/google/caja/issues/453", "closed": "2015-04-16 02:21:04", "ttf": 0.0002777777777777778, "title": "cajadores.com needs doc links to JSDoc and Rules", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 453](https://code.google.com/p/google-caja/issues/detail?id=453) created by mikesamuel on 2008-06-10T17:01:25.000Z:\n\nThe docs link on cajadores.com goes to the Javadoc.  The js and rules\nsibling directories are undiscoverable.\n", "created": "2015-04-16 02:21:02"}, {"url": "https://github.com/google/caja/issues/452", "closed": "2015-04-16 02:21:02", "ttf": 0.0002777777777777778, "title": "\"run uncajoled\" in testbed", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 452](https://code.google.com/p/google-caja/issues/detail?id=452) created by felix8a on 2008-06-10T16:59:13.000Z:\n\nso it would be convenient if there was a button that would run the input\nbox without cajoling.\n", "created": "2015-04-16 02:20:55"}, {"url": "https://github.com/google/caja/issues/451", "closed": "2015-04-16 02:20:55", "ttf": 0.0002777777777777778, "title": "Should fastpathEnumOnly() test for null?", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 451](https://code.google.com/p/google-caja/issues/detail?id=451) created by google@web.dwdw.me on 2008-06-10T05:35:04.000Z:\n\nAll of the fastpath_() methods have enforce(obj != null, ...) as their\nfirst line -- except fastpathEnumOnly(), which does not have any such check\nfor nullity of its first argument.  Should it be parallel to the other\nfastpath_() methods?  If not, should there be documentation to explain why\nthe enforce() is not needed here?   Seems pretty minor.\n", "created": "2015-04-16 02:20:46"}, {"url": "https://github.com/google/caja/issues/449", "closed": "2015-04-16 02:20:41", "ttf": 0.0002777777777777778, "title": "Consider wrapping/virtualizing Date zero-arg constructor", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 449](https://code.google.com/p/google-caja/issues/detail?id=449) created by google@web.dwdw.me on 2008-06-10T01:20:29.000Z:\n\nConsider providing a wrapper for the Date constructor so that the zero-arg\nconstructor does not provide access to the current date, while the n-arg\nconstructors (for n&gt;0) still work just as before.  MarkM thinks he has a\nclever scheme so that &quot;instanceof&quot; will continue to work and Caja code\nwon't be able to tell that Date has been wrapped (i.e., it has been\nsuccessfully virtualized).\n", "created": "2015-04-16 02:20:32"}, {"url": "https://github.com/google/caja/issues/448", "closed": "2015-04-16 02:20:32", "ttf": 0.0002777777777777778, "title": "Consider wrapping Math.random()", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 448](https://code.google.com/p/google-caja/issues/detail?id=448) created by google@web.dwdw.me on 2008-06-10T01:18:58.000Z:\n\nConsider replacing or wrapping Math.random() with a pseudorandom number\ngenerator that you provide that you can be sure is cryptographically\npseudorandom and does not introduce communication channels or a hazard of\nunintentional side channels.\n\nDavid-Sarah suggests that this should be up to the container provider, who\ncan either whitelist Math.random() or not.\n", "created": "2015-04-16 02:20:21"}, {"url": "https://github.com/google/caja/issues/447", "closed": "2015-04-16 02:20:21", "ttf": 0.0002777777777777778, "title": "Need to sanitize NAME=... attribute on HTML tags", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 447](https://code.google.com/p/google-caja/issues/detail?id=447) created by google@web.dwdw.me on 2008-06-10T01:17:38.000Z:\n\nCurrently there is no sanitization of the value of NAME attributes.  A\ndocument can use NAME=&quot;jimbob&quot;, and then Javascript adds a property named\njimbob to the global scope.  Of course, a malicious content provider could\nprovide some other name -- like something with trailing underscores or with\na trusted name like &quot;caja&quot; or &quot;window&quot;.  Should fix this to validate the\nvalue of all NAME attributes so that they are subject to the same\nrestrictions on variable names as Caja code is.\n\nMaybe need to do the same to ID (and perhaps CLASS) attributes??\n", "created": "2015-04-16 02:20:08"}, {"url": "https://github.com/google/caja/issues/446", "closed": "2015-04-16 02:20:08", "ttf": 0.0002777777777777778, "title": "Default log function (myLogFunc_) should be frozen", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 446](https://code.google.com/p/google-caja/issues/detail?id=446) created by google@web.dwdw.me on 2008-06-10T00:35:45.000Z:\n\nIn caja.js, the default logging function myLogFunc_ was never frozen:\n  &gt;&gt;&gt; ___.isFrozen(caja.getLogFunc());\n  false\nFor general hygiene, it should probably be frozen.\n", "created": "2015-04-16 02:19:57"}, {"url": "https://github.com/google/caja/issues/445", "closed": "2015-04-16 02:19:56", "ttf": 0.0002777777777777778, "title": "Parsing of <textarea><!--</textarea>--></textarea> does not match browser", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 445](https://code.google.com/p/google-caja/issues/detail?id=445) created by collin.jackson on 2008-06-09T23:59:42.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nCajole this HTML: &lt;textarea&gt;&lt;!--&lt;/textarea&gt;--&gt;&lt;/textarea&gt;\n\nWhat is the expected output?\n\nA textarea containing &quot;&lt;!--&quot; followed by a text node &quot;--&gt;&quot;.\n\nWhat do you see instead?\n\nA textarea containing the string &quot;&lt;!--&lt;/textarea&gt;--&gt;&quot;\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed\n\n<b>Please provide any additional information below.</b>\n\nDoesn't seem to be exploitable, since Caja escapes the contents of the \ntextarea, but deviates from normal HTML parsing. \n", "created": "2015-04-16 02:19:43"}, {"url": "https://github.com/google/caja/issues/444", "closed": "2015-04-16 02:19:43", "ttf": 0.0002777777777777778, "title": "caja.each() should protect against possible plan interference hazard", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 444](https://code.google.com/p/google-caja/issues/detail?id=444) created by google@web.dwdw.me on 2008-06-09T23:45:04.000Z:\n\ncaja.each(o, f) can give unexpected results if calling f() can cause side\neffects on o.  It's an obligation on the caller of caja.each() to avoid\nthis situation; failure to respect this obligation may introduce the\npossibility of plan interference, which is a potential security hazard. \nArguably, the documentation for caja.each() should warn of this hazard or\nshould state this obligation on the caller. \n", "created": "2015-04-16 02:19:30"}, {"url": "https://github.com/google/caja/issues/443", "closed": "2015-04-16 02:19:30", "ttf": 0.0002777777777777778, "title": "Eliminate uses of == and != in caja.js", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 443](https://code.google.com/p/google-caja/issues/detail?id=443) created by collin.jackson on 2008-06-09T23:42:57.000Z:\n\nThis line in isJSONContainer in caja.js should use === instead of ==:\n\nif (obj == null) { return false; } // Match null and undefined\n\nAlso, tameException uses == in a three places where === would be better.\n\nThere are also != in five places: fastPathEnum, fastPathRead, \nfastPathCall, fastPathSet, fastPathDelete. These should probably be !==.\n\nIt might be worth auditing other files as well.\n", "created": "2015-04-16 02:19:19"}, {"url": "https://github.com/google/caja/issues/441", "closed": "2015-04-16 02:19:12", "ttf": 0.0002777777777777778, "title": "!= used in fastpath* functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 441](https://code.google.com/p/google-caja/issues/detail?id=441) created by zestyping on 2008-06-09T23:30:59.000Z:\n\nSee lines 604, 610, 625, 640, 659 in caja.js.\n", "created": "2015-04-16 02:19:09"}, {"url": "https://github.com/google/caja/issues/440", "closed": "2015-04-16 02:19:09", "ttf": 0.0002777777777777778, "title": "Overzealous styling in pink", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 440](https://code.google.com/p/google-caja/issues/detail?id=440) created by jasvir on 2008-06-09T23:24:57.000Z:\n\nSetting the css style in the testbed is leaky and setting the css in one\ngadget causes changes in the other.\n\n<b>What steps will reproduce the problem?</b>\n1. Run the testbed.\n2. Set the style of gadget 1 and display some text\n3. Note the text is styled correctly\n4. Set the style of gadget 2 and display some tet\n5. Note the text in gadget 1 is now styled according to gadget 2\n", "created": "2015-04-16 02:19:02"}, {"url": "https://github.com/google/caja/issues/439", "closed": "2015-04-16 02:19:02", "ttf": 0.0002777777777777778, "title": "tweaks to testbed-proxy.py", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 439](https://code.google.com/p/google-caja/issues/detail?id=439) created by felix8a on 2008-06-09T23:23:46.000Z:\n\ntwo small changes.\n1. BaseHTTPServer does a DNS lookup to get hostname for the log output,\n   which is a noticeable delay on many requests.\n\noverride address_string() to emit dotted quads instead of full hostname.\n1. log output goes to stderr.  /log request handler prints to stdout, which\n   is buffered separately.  when redirecting stdout and stderr to the same\n   file, the output doesn't get interleaved meaningfully.\n\nadd a flush call.\n", "created": "2015-04-16 02:18:58"}, {"url": "https://github.com/google/caja/issues/438", "closed": "2015-04-16 02:18:57", "ttf": 0.0002777777777777778, "title": "UndefinedLiteral class should not exist", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 438](https://code.google.com/p/google-caja/issues/detail?id=438) created by collin.jackson on 2008-06-09T22:59:59.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nCajole this:\nreturn undefined;\n\nWhat is the expected output?\n\nvar undefined = **_.readImport(IMPORTS**_, 'undefined');\nreturn undefined;\n\nWhat do you see instead?\n\nreturn undefined;\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed\n\n<b>Please provide any additional information below.</b>\n\nAlthough browsers typically define a variable in the global scope \ncalled &quot;undefined&quot;, there is no there is no &quot;undefined&quot; literal in \nJavaScript. We should treat the &quot;undefined&quot; literal the same as NaN, \nforcing the cajoled module to obtain it through the IMPORTS___.\n", "created": "2015-04-16 02:18:49"}, {"url": "https://github.com/google/caja/issues/437", "closed": "2015-04-16 02:18:48", "ttf": 0.0002777777777777778, "title": "Put testbed sandboxed trees inside proper double-hulled divs", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 437](https://code.google.com/p/google-caja/issues/detail?id=437) created by mikesamuel on 2008-06-09T22:35:40.000Z:\n\nIt is hard for security testers to determine whether they've managed to get\nUI outside the sandboxed DOM areas.\n\nPut in a double hulled div with a visible border.\n", "created": "2015-04-16 02:18:46"}, {"url": "https://github.com/google/caja/issues/436", "closed": "2015-04-16 02:18:46", "ttf": 0.0002777777777777778, "title": "Cajoled module can call window.onerror", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 436](https://code.google.com/p/google-caja/issues/detail?id=436) created by collin.jackson on 2008-06-09T22:19:36.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nthrow 42;\n// this also works:\nthrow { toString: function() { return &quot;42&quot;; } };\n\nWhat is the expected output?\n\nCaja catches the exception and passes it off to some container-specific \nerror handler, if there is one.\n\nWhat do you see instead?\n\nThe window.onerror handler is called with the argument &quot;uncaught \nexception: 42&quot;\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed\n\n<b>Please provide any additional information below.</b>\n\nI don't have any specific attacks based on the current behavior, but there \ndoesn't seem to be a built-in way for the onerror handler to determine \nwhere the uncaught exception came from, and it's potentially leaking \ninformation out of the Caja module without going through the approved \nchannels. \n", "created": "2015-04-16 02:18:37"}, {"url": "https://github.com/google/caja/issues/435", "closed": "2015-04-16 02:18:37", "ttf": 0.0002777777777777778, "title": "Testbed fails on IE 6 and Safari", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 435](https://code.google.com/p/google-caja/issues/detail?id=435) created by mikesamuel on 2008-06-09T22:16:57.000Z:\n\nLoad cajadores.com/demos/testbed\nClick instructions\nChoose the first code sample\nHit Cajole\n", "created": "2015-04-16 02:18:28"}, {"url": "https://github.com/google/caja/issues/434", "closed": "2015-04-16 02:18:28", "ttf": 0.0002777777777777778, "title": "Null pointer exception in lexer cajoling script or stylesheet include", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 434](https://code.google.com/p/google-caja/issues/detail?id=434) created by collin.jackson on 2008-06-09T21:58:32.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\n&lt;link rel=&quot;stylesheet&quot; href=&quot;foo.css&quot;&gt;\n\nWhat is the expected output? \n\nSome cajoled output.\n\nWhat do you see instead?\n\njava.lang.NullPointerException\n    at com.google.caja.lexer.CharProducer$Factory$CharProducerImpl.read\n(CharProducer.java:147)\n    at com.google.caja.lexer.LookaheadCharProducer.fetch\n(LookaheadCharProducer.java:148)\n    at com.google.caja.lexer.LookaheadCharProducer.lookahead\n(LookaheadCharProducer.java:113)\n    at com.google.caja.lexer.CssSplitter.produce(CssLexer.java:250)\n    at com.google.caja.lexer.CssSplitter.hasNext(CssLexer.java:221)\n    at com.google.caja.lexer.CssLexer.hasNext(CssLexer.java:60)\n    at com.google.caja.lexer.TokenQueue.fetch(TokenQueue.java:89)\n    at com.google.caja.lexer.TokenQueue.isEmpty(TokenQueue.java:62)\n    at com.google.caja.plugin.stages.RewriteHtmlStage.parseCss\n(RewriteHtmlStage.java:513)\n    at com.google.caja.plugin.stages.RewriteHtmlStage.extractStyles\n(RewriteHtmlStage.java:294)\n    at com.google.caja.plugin.stages.RewriteHtmlStage.rewriteLinkTag\n(RewriteHtmlStage.java:274)\n    at com.google.caja.plugin.stages.RewriteHtmlStage.access$200\n(RewriteHtmlStage.java:79)\n    at com.google.caja.plugin.stages.RewriteHtmlStage$1.visit\n(RewriteHtmlStage.java:115)\n    at com.google.caja.parser.AbstractParseTreeNode.acceptPreOrder\n(AbstractParseTreeNode.java:303)\n    at com.google.caja.parser.AbstractParseTreeNode.visitChildren\n(AbstractParseTreeNode.java:281)\n    at com.google.caja.parser.AbstractParseTreeNode.acceptPreOrder\n(AbstractParseTreeNode.java:310)\n    at com.google.caja.plugin.stages.RewriteHtmlStage.rewriteDomTree\n(RewriteHtmlStage.java:123)\n    at com.google.caja.plugin.stages.RewriteHtmlStage.apply\n(RewriteHtmlStage.java:90)\n    at com.google.caja.plugin.stages.RewriteHtmlStage.apply\n(RewriteHtmlStage.java:79)\n    at com.google.caja.util.Pipeline.applyStage(Pipeline.java:41)\n    at com.google.caja.plugin.PluginCompiler$1.applyStage\n(PluginCompiler.java:123)\n    at com.google.caja.plugin.PluginCompiler$1.applyStage\n(PluginCompiler.java:114)\n    at com.google.caja.util.Pipeline.apply(Pipeline.java:35)\n    at com.google.caja.plugin.PluginCompiler.run\n(PluginCompiler.java:180)\n    at com.google.caja.opensocial.DefaultGadgetRewriter.compileGadget\n(DefaultGadgetRewriter.java:213)\n    at com.google.caja.opensocial.DefaultGadgetRewriter.rewriteContent\n(DefaultGadgetRewriter.java:137)\n    at com.google.caja.opensocial.DefaultGadgetRewriter.rewriteContent\n(DefaultGadgetRewriter.java:122)\n    at com.google.caja.opensocial.applet.CajaApplet.runCajoler\n(CajaApplet.java:185)\n    at com.google.caja.opensocial.applet.CajaApplet.cajole\n(CajaApplet.java:122)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n    at java.lang.reflect.Method.invoke(Unknown Source)\n    at sun.plugin.javascript.JSInvoke.invoke(Unknown Source)\n    at sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n    at java.lang.reflect.Method.invoke(Unknown Source)\n    at sun.plugin.javascript.JSClassLoader.invoke(Unknown Source)\n    at sun.plugin.liveconnect.PrivilegedCallMethodAction.run(Unknown \nSource)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at sun.plugin.liveconnect.SecureInvocation$2.run(Unknown Source)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at sun.plugin.liveconnect.SecureInvocation.CallMethod(Unknown \nSource)\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed\n", "created": "2015-04-16 02:18:21"}, {"url": "https://github.com/google/caja/issues/433", "closed": "2015-04-16 02:18:21", "ttf": 0.0002777777777777778, "title": "NUL code units not escaped in Cajoled strings", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 433](https://code.google.com/p/google-caja/issues/detail?id=433) created by collin.jackson on 2008-06-09T21:45:37.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nReplace the ? in the below expression with null bytes and cajole it:\nreturn &quot;&lt;/scr?ipt&gt;&lt;script&gt;alert(document.cookie)&lt;/scr?ipt&gt;&quot;;\n\nWhat is the expected output? \n\nreturn &quot;&lt;/scr\\000ipt&gt;&lt;script&gt;alert(document.cookie)&lt;/scr\\000ipt&gt;&quot;;\n\nWhat do you see instead?\n\nFirefox: return &quot;&lt;/scr?ipt&gt;&lt;script&gt;alert(document.cookie)&lt;/scr?ipt&gt;&quot;;\nIE: return &quot;&lt;/script&gt;&lt;script&gt;alert(document.cookie)&lt;/script&gt;&quot;;\n\nThe IE version will alert document.cookie.\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed. I wasn't able to get the test bed to run on IE, so I'm not \n100% sure this attack works, but there should be a test for it regardless.\n", "created": "2015-04-16 02:18:03"}, {"url": "https://github.com/google/caja/issues/432", "closed": "2015-04-16 02:18:03", "ttf": 0.0002777777777777778, "title": "arguments at top level weirdness", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 432](https://code.google.com/p/google-caja/issues/detail?id=432) created by metaweta on 2008-06-09T21:31:25.000Z:\n\narguments=arguments;\n\ncajoles to\n\nIMPORTS___[ 'yield' ](arguments = a___);\n\nThis has two problems: arguments appearing freely at the top level should\ncome from IMPORTS___ (it's undefined in JavaScript's top level), and a___\nis not defined.\n", "created": "2015-04-16 02:17:50"}, {"url": "https://github.com/google/caja/issues/431", "closed": "2015-04-16 02:17:49", "ttf": 0.0002777777777777778, "title": "Image proxy may proxy scripts", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 431](https://code.google.com/p/google-caja/issues/detail?id=431) created by jasvir on 2008-06-09T20:07:47.000Z:\n\nThe image proxy may proxy images which end up being interpreted by some\nbrowsers as scripts.  Ensure that the proxy checks images are in fact images.\n", "created": "2015-04-16 02:17:45"}, {"url": "https://github.com/google/caja/issues/430", "closed": "2015-04-16 02:17:45", "ttf": 0.0002777777777777778, "title": "Octal escapes not part of ES3.   See appendix B", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 430](https://code.google.com/p/google-caja/issues/detail?id=430) created by mikesamuel on 2008-06-09T19:51:32.000Z:\n\nES3 does not include octal escapes in the language, but describes them in\nAppendix B.\n\nCheck that our use of octal escapes in literal rendering agrees with that\nallowed by ES3.\n", "created": "2015-04-16 02:17:36"}, {"url": "https://github.com/google/caja/issues/429", "closed": "2015-04-16 02:17:36", "ttf": 0.0002777777777777778, "title": "Update flow diagram in wiki", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 429](https://code.google.com/p/google-caja/issues/detail?id=429) created by mikesamuel on 2008-06-09T19:50:37.000Z:\n\nhttp://code.google.com/p/google-caja/wiki/PipelineConfiguration is out of\ndate.  Check it against the existing pipeline.  The outputs currently\ninclude both CSS and JS, but the cajoler only emits JS.\n", "created": "2015-04-16 02:17:33"}, {"url": "https://github.com/google/caja/issues/428", "closed": "2015-04-16 02:17:33", "ttf": 0.0002777777777777778, "title": "Testbed styles bleed across gadgets", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 428](https://code.google.com/p/google-caja/issues/detail?id=428) created by mikesamuel on 2008-06-09T19:47:03.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. In cajadores.com/demos/testbed, enter &lt;style&gt;p { color: purple\n}&lt;/style&gt;&lt;p&gt;Hello World&lt;/p&gt;\n2. In the second form enter the same but with color: #f88\n3. Cajole both\n\n<b>What is the expected output? What do you see instead?</b>\nI expect to see &quot;Hello World&quot; in purple in one, and in pink in the other\n\nInstead, both are pink.\n", "created": "2015-04-16 02:17:29"}, {"url": "https://github.com/google/caja/issues/426", "closed": "2015-04-16 02:17:13", "ttf": 0.0002777777777777778, "title": "Semicolon insertion does not match ES3 or browsers", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 426](https://code.google.com/p/google-caja/issues/detail?id=426) created by collin.jackson on 2008-06-09T18:00:51.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nreturn\n0;\n\nWhat is the expected output? \n\nreturn undefined;\nIMPORTS___[ 'yield' ](0);\n\nWhat do you see instead?\n\nreturn 0;\n\n<b>What version of the product are you using? On what operating system?</b>\n\nCaja Test Bed \n", "created": "2015-04-16 02:17:02"}, {"url": "https://github.com/google/caja/issues/425", "closed": "2015-04-16 02:17:02", "ttf": 0.0002777777777777778, "title": "CSS rules escape gadget.2 and override rules in gadget.1", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 425](https://code.google.com/p/google-caja/issues/detail?id=425) created by zestyping on 2008-06-09T17:48:09.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Go to http://cajadores.com/demos/testbed/.\n2. In the top box, enter &quot;&lt;style&gt;p { color: #f00; }&lt;/style&gt; &lt;p&gt; Red.&quot;\n3. In the bottom box, enter &quot;&lt;style&gt;p { color: #&nbsp;00f; }&lt;/style&gt; &lt;p&gt; Blue.&quot;\n4. Click &quot;Cajole&quot; for both boxes.\n\n<b>What is the expected output? What do you see instead?</b>\n- Expected: &quot;Red&quot; should be in red and &quot;Blue&quot; should be in blue.\n- Actual: No matter what order you click the buttons in, both words appear\n  in blue.\n\n<b>What version of the product are you using? On what operating system?</b>\n- Google Caja. Copyright (C) 2008, Google Inc. Rev 1779 built on 2008-06-08\n  22:45:24.\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 02:16:57"}, {"url": "https://github.com/google/caja/issues/423", "closed": "2015-04-16 02:16:53", "ttf": 0.0002777777777777778, "title": "Caja provides no isolation", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 423](https://code.google.com/p/google-caja/issues/detail?id=423) created by erights on 2008-06-09T02:50:39.000Z:\n\ngetLogFunc() and especially setLogFunc() should have been available only on\n___, not caja. Because they are available as caja.getLogFunc() and\ncaja.setLogFunc(), Caja currently provides no isolation. In the top pane of\nthe testbed applet, cajole\n\n&lt;script type=&quot;text/javascript&quot;&gt;\ncaja.setLogFunc(function(){return 3469;});\n&lt;/script&gt;\n\nThen, in the bottom pane, cajole\n\n&lt;script type=&quot;text/javascript&quot;&gt;\ncaja.getLogFunc()();\n&lt;/script&gt;\n\nIt prints 3469, demonstrating a trivial and total breach of isolation.\n", "created": "2015-04-16 02:16:46"}, {"url": "https://github.com/google/caja/issues/422", "closed": "2015-04-16 02:16:46", "ttf": 0.0002777777777777778, "title": "makeSealerUnsealerPair() forgot to mark exposed simple-function as such, or to freeze them.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 422](https://code.google.com/p/google-caja/issues/detail?id=422) created by erights on 2008-06-09T02:24:26.000Z:\n\nIn the original Cajita version, seal, unseal, and box are all\nsimple-function, and are frozen by the time they escape. The manual\ncajoling resulting in the makeSealerUnsealerPair() in caja.js forgot to\nmark these as simple-functions, and forgot to freeze them. Both of these\nseem to cause only lost functionality rather than lost security. (Note that\nbox need not be marked as a simple-function for either functionality or\nsecurity. However, it is needed for fidelity to the original Cajita\ndefinition.)\n", "created": "2015-04-16 02:16:37"}, {"url": "https://github.com/google/caja/issues/421", "closed": "2015-04-16 02:16:37", "ttf": 0.0002777777777777778, "title": "Trademarking completely broken. Also violates freezing constraints.", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 421](https://code.google.com/p/google-caja/issues/detail?id=421) created by erights on 2008-06-09T02:13:58.000Z:\n\nvar x = caja.freeze({});\nvar y = caja.freeze({});\ncaja.hasTrademark(x, y); // returns false\ncaja.audit(x, y);\ncaja.hasTrademark(x, y); // returns true\n\nThe problem is that audit() was made accessible as caja.audit, enabling\nanyone to claim that anything is audited as anything. Besides making\ntrademarking completely pointless, audit() also applies its trademark to\nalready-constructed objects whether they are frozen or not. Above we\ndemonstrate a visible difference of behavior after invoking a supposedly\nimmutable object (caja) with only immutable arguments.\n\naudit() should be renamed stamp(). It should be accessible only as\n___.stamp(), and it should only be able to apply a trademark to a\nconstructed object if applied during construction.\n", "created": "2015-04-16 02:16:32"}, {"url": "https://github.com/google/caja/issues/420", "closed": "2015-04-16 02:16:32", "ttf": 0.0002777777777777778, "title": "enforceMatchable() in caja.js doesn't ensure that a non-regexp is a string.", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 420](https://code.google.com/p/google-caja/issues/detail?id=420) created by erights on 2008-06-09T02:03:46.000Z:\n\nenforceMatchable() in caja.js is defined as\n\n  /**\n- Verifies that regexp is something that can appear as a\n- parameter to a Javascript method that would use it in a match.\n- &lt;p&gt;\n- If it is a RegExp, then this match might mutate it, which must\n- not be allowed if regexp is frozen.\n  */\n  function enforceMatchable(regexp) {\n    if (regexp instanceof RegExp) {\n      if (isFrozen(regexp)) {\n        fail(&quot;Can't match with frozen RegExp: &quot;, regexp);\n      }\n    }\n  }\n\nIt is used in the call-handler-wrapper around various built-in string\nmethods (replace, search, split) to ensure that these built ins do not\nmutate a frozen regexp.\n\nHowever, the above code does not ensure that, if the value isn't a regexp,\nthat it is instead a string. If it is neither, but its valueOf() is a\nregexp, then this might be a way to evade the test and get the primitive to\nmutate a supposedly frozen regexp object.\n\nSince regexps should be considered constructed objects, it is unclear\nwhether it is currently possible for Caja code to freeze one. If it is,\nthen this bug must be fixed. If we decide that regexps can't be frozen, the\nenforceMatchable becomes unnecessary and should be removed.\n", "created": "2015-04-16 02:16:30"}, {"url": "https://github.com/google/caja/issues/419", "closed": "2015-04-16 02:16:29", "ttf": 0.0002777777777777778, "title": "Check Escaping.java's set of must-escape codepoints against [:Cf:]", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 419](https://code.google.com/p/google-caja/issues/detail?id=419) created by mikesamuel on 2008-06-09T01:56:38.000Z:\n\nAs David-Sarah Hopwood reports, some codepoints from\nhttp://unicode.org/cldr/utility/list-unicodeset.jsp?a=%5B:Cf:%5D are not\nlisted in ALLOW_NON_ASCII in Escaping.java.\n\nThese are empirically not ignored on SpiderMonkey, and seems to be due to\nUnicode 5 changes.\n\nSince interpreters for ES3.x and ES4.0 will be treating [:Cf:] as\nsignificant, this is unlikely to be a security hole.\n\nEither add them to the list or comment why not.\n", "created": "2015-04-16 02:16:25"}, {"url": "https://github.com/google/caja/issues/418", "closed": "2015-04-16 02:16:25", "ttf": 0.0002777777777777778, "title": "useGetAndCallHandlers() based on stale exophoric assumptions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 418](https://code.google.com/p/google-caja/issues/detail?id=418) created by erights on 2008-06-09T01:44:01.000Z:\n\nIn caja.js, useGetAndCallHandlers is defined as\n\n  function useGetAndCallHandlers(constr, name, func) {\n    useGetHandler(constr, name, function() { return func; });\n    useCallHandler(constr, name, func);\n  }\n\nit is then used throught the rest of caja.js to whitelist so-called generic\nfunctions, or handlers around such functions, such that an attempt to read\nthat function will produce a function value that isn't attached to the\ninstance. The problem is that many of the functions in question mention\n&quot;this&quot;, or are primitive functions whose semantics imply they use their\n&quot;this&quot; argument.\n\nBack when we thought we were going to support explicit exophoric function\nvalues as part of official wart-free Caja, this was a good plan. (And the\nproblematic functions in question are all tagged as xo4a.) However, we\ndropped that plan because the existence of exophoric values creates too\nmany dangers elsewhere. These uses of useGetAndCallHandlers continue to\nmake these hazards available.\n", "created": "2015-04-16 02:16:11"}, {"url": "https://github.com/google/caja/issues/417", "closed": "2015-04-16 02:16:11", "ttf": 0.0002777777777777778, "title": "Should deleteFieldEntirely() also delete own grant flag properties?", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 417](https://code.google.com/p/google-caja/issues/detail?id=417) created by erights on 2008-06-09T01:30:23.000Z:\n\ndeleteFieldEntirely() used to delete all the internal properties associated\nwith a deleted Caja property. It now deletes only the fastpath flags,\nleaving the grant flags when these are different (grantSet and grantCall).\nShould these be deleted too? Probably. Do we currently have a security risk\nbecause they aren't? Probably.\n", "created": "2015-04-16 02:16:02"}, {"url": "https://github.com/google/caja/issues/416", "closed": "2015-04-16 02:16:02", "ttf": 0.0002777777777777778, "title": "The Token constructor can leak mutability", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 416](https://code.google.com/p/google-caja/issues/detail?id=416) created by erights on 2008-06-09T01:23:23.000Z:\n\n  /**\n- Returns a new object whose only utility is its identity and (for\n- diagnostic purposes only) its name.\n  */\n  function Token(name) {\n    return primFreeze({\n          toString: primFreeze(simpleFunc(function() { return name; }))\n        });\n  }\n  primFreeze(simpleFunc(Token));\n\nThe above code in caja.js accepts any object as the name, and neither\nensures that it is immutable nor coerces it to something immutable. We\nshould add a first line &quot;name = String(name);&quot;.\n\nSince the Token constructor currently does not escape, this is low priority\nand not yet a security issue.\n", "created": "2015-04-16 02:15:56"}, {"url": "https://github.com/google/caja/issues/415", "closed": "2015-04-16 02:15:55", "ttf": 0.0002777777777777778, "title": "asSimpleFunc() shouldn't allow attached methods.", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 415](https://code.google.com/p/google-caja/issues/detail?id=415) created by erights on 2008-06-09T01:08:39.000Z:\n\nIf foo is an attached method, asSimpleFunc(foo) will return foo rather than\nfailing. This cannot cause the attached method to be successfully called\nwhen it shouldn't be, but it violates the notion of a simple-function. An\nattached method can still sense and react to its &quot;this&quot; binding, which a\nsimple-function shouldn't be able to do. \n", "created": "2015-04-16 02:15:49"}, {"url": "https://github.com/google/caja/issues/414", "closed": "2015-04-16 02:15:49", "ttf": 0.0002777777777777778, "title": "debugReference() in caja.js is too gullible re argument object.", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 414](https://code.google.com/p/google-caja/issues/detail?id=414) created by erights on 2008-06-09T01:02:14.000Z:\n\ndebugReference() prints obj.constructor.name, where obj may be some\narbitrary cajoled but untrusted object. We do not reserve the property name\n&quot;constructor&quot;, so the debug output has no authenticity. Since we currently\nmake no claims about such authenticity, this is low priority. But it is a\nsecurity weakness that we used &quot;.constructor&quot; on an untrusted object rather\nthan directorConstructor(). The subsequent use of &quot;.name&quot; is also\nproblematic, as the existence of a &quot;name&quot; property on functions is not a\nstandard part of ES3. Thus, even on a function, a static &quot;name&quot; might be\nused instead.\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n({constructor: {name: &quot;&lt;I am god&gt;&quot;}}).foo;\n&lt;/script&gt;\n\nwhen run in the testbed, correctly evaluates to undefined. However, it also\n logs &quot;([&lt;I am god&gt;]).foo&quot; in the firebug log. The same issues came up in\ndiagnostic printing in the testbed applet, where it was solved. That\nsolution should be applied here.\n\nNote that debugReference() also implicitly coerces both\nobj.constructor.name and obj itself to strings, thereby implicitly calling\ntheir toString() methods. However, the issues raised by this are already\ncovered by issue 323.\n", "created": "2015-04-16 02:15:44"}, {"url": "https://github.com/google/caja/issues/407", "closed": "2015-04-16 02:15:12", "ttf": 0.0002777777777777778, "title": "Error reporting is too broad", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 407](https://code.google.com/p/google-caja/issues/detail?id=407) created by metaweta on 2008-06-06T22:13:18.000Z:\n\nvar x=1;\nthis;\n\nFATAL_ERROR :2+1 - 3+6: &quot;this&quot; cannot be used in the global context\n:2: var x=1;\n\nThe error should be 3+1 - 3+6.\n", "created": "2015-04-16 02:15:03"}, {"url": "https://github.com/google/caja/issues/406", "closed": "2015-04-16 02:15:03", "ttf": 0.0002777777777777778, "title": "Semantics differ around returning a value from a constructor", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 406](https://code.google.com/p/google-caja/issues/detail?id=406) created by metaweta on 2008-06-06T22:04:34.000Z:\n\nfunction Foo(r) { this.x = 1; return r; }\na = {y:3}\nUncajoled we get (new Foo(a)===a) but cajoled new Foo(a) is {x:1}\n", "created": "2015-04-16 02:14:52"}, {"url": "https://github.com/google/caja/issues/403", "closed": "2015-04-16 02:14:31", "ttf": 0.0002777777777777778, "title": "Caja.js has no forEach() method", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 403](https://code.google.com/p/google-caja/issues/detail?id=403) created by metaweta on 2008-06-06T18:37:04.000Z:\n\nCaja.js has no forEach() method, though it's mentioned in the spec.\n", "created": "2015-04-16 02:14:27"}, {"url": "https://github.com/google/caja/issues/402", "closed": "2015-04-16 02:14:27", "ttf": 0.0002777777777777778, "title": "Caja.js has no isArray() method", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 402](https://code.google.com/p/google-caja/issues/detail?id=402) created by metaweta on 2008-06-06T18:35:28.000Z:\n\nCaja.js has no isArray() method, though it's mentioned in the spec.\n", "created": "2015-04-16 02:14:20"}, {"url": "https://github.com/google/caja/issues/401", "closed": "2015-04-16 02:14:20", "ttf": 0.0002777777777777778, "title": "Eclipse build broken if using bin as compiled class output directory", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 401](https://code.google.com/p/google-caja/issues/detail?id=401) created by jasvir on 2008-06-06T04:26:43.000Z:\n\nCL ihab/scripts@1621 creates a directory called bin/ which interacts badly\nwith eclipse bin/ directory where its generated classes go.  Depending on\nyour configuration, this severely breaks eclipse with unhelpful error messages.\n", "created": "2015-04-16 02:14:07"}, {"url": "https://github.com/google/caja/issues/394", "closed": "2015-04-16 02:13:36", "ttf": 0.0002777777777777778, "title": "Missing translation case for rejecting assignment to a declared function name", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 394](https://code.google.com/p/google-caja/issues/detail?id=394) created by erights on 2008-06-05T17:21:35.000Z:\n\nIn the testbed for r1621M\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction foo(){\n  function bar(){\n    foo = 3;\n  }\n}\n&lt;/script&gt;\n\ncauses \n\njava.lang.RuntimeException: Unimplemented case involving: AssignOperation :\nASSIGN\n    at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:121)\n    at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:196)\n    at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:186)\n    at\ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$77.fire(DefaultCajaRewriter.java:2172)\n", "created": "2015-04-16 02:13:32"}, {"url": "https://github.com/google/caja/issues/393", "closed": "2015-04-16 02:13:31", "ttf": 0.0002777777777777778, "title": "Minor new usability annoyance in testbed applet", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 393](https://code.google.com/p/google-caja/issues/detail?id=393) created by erights on 2008-06-05T17:12:55.000Z:\n\nIt used to be that a refresh on the testbed applet would \n- wipe out all the generated info, \n- but preserve the contents of the input forms.\n\nBoth these behaviors were nice. As of r1621M on FF2.0.0.14 on a Mac,\nrefresh now wipes out both. This can be frustrating.\n", "created": "2015-04-16 02:13:25"}, {"url": "https://github.com/google/caja/issues/392", "closed": "2015-04-16 02:13:25", "ttf": 0.0002777777777777778, "title": "Internal compiler error when cajoling prototype.js", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 392](https://code.google.com/p/google-caja/issues/detail?id=392) created by tobie.langel on 2008-06-05T16:54:49.000Z:\n\nGetting the following error when cajoling prototype.js (with -w option):\n\nFATAL_ERROR: prototype.js:846+3 - 853+4: INTERNAL COMPILER ERROR. Node did not match \nany rules at: AssignOperation : ASSIGN\n  Reference\n    Identifier : $A\n  FunctionConstructor\n    Identifier\n    FormalParam\n      Identifier : iterable\n    Block\n      Conditional\n        SimpleOperation : NOT\n          Reference\n            Identifier : iterable\n        ReturnStmt\n          ArrayConstructor\n      Conditional\n        ControlOperation : LOGICAL_AND\n          SimpleOperation : NOT\n            ControlOperation : LOGICAL_AND\n              SpecialOperation : FUNCTION_CALL\n                SpecialOperation : MEMBER_ACCESS\n                  Reference\n                    Identifier : Object\n                  Reference\n                    Identifier : isFunction\n                Reference\n                  Identifier : iterable\n              SimpleOperation : EQUAL\n                Reference\n                  Identifier : iterable\n                StringLiteral : '[object NodeList]'\n          SpecialOperation : MEMBER_ACCESS\n            Reference\n              Identifier : iterable\n            Reference\n              Identifier : toArray\n        ReturnStmt\n          SpecialOperation : FUNCTION_CALL\n            SpecialOperation : MEMBER_ACCESS\n              Reference\n                Identifier : iterable\n              Reference\n                Identifier : toArray\n      MultiDeclaration\n        Declaration\n          Identifier : length\n          ControlOperation : LOGICAL_OR\n            SpecialOperation : MEMBER_ACCESS\n              Reference\n                Identifier : iterable\n              Reference\n                Identifier : length\n            IntegerLiteral : 0\n        Declaration\n          Identifier : results\n          SpecialOperation : FUNCTION_CALL\n            SpecialOperation : CONSTRUCTOR\n              Reference\n                Identifier : Array\n            Reference\n              Identifier : length\n      WhileLoop : \n        AssignOperation : POST_DECREMENT\n          Reference\n            Identifier : length\n        ExpressionStmt\n          AssignOperation : ASSIGN\n            SpecialOperation : SQUARE_BRACKET\n              Reference\n                Identifier : results\n              Reference\n                Identifier : length\n            SpecialOperation : SQUARE_BRACKET\n              Reference\n                Identifier : iterable\n              Reference\n                Identifier : length\n      ReturnStmt\n        Reference\n          Identifier : results. Please report this error at: http://code.google.com/p/google-\ncaja/issues/\n", "created": "2015-04-16 02:13:17"}, {"url": "https://github.com/google/caja/issues/391", "closed": "2015-04-16 02:13:17", "ttf": 0.0002777777777777778, "title": "Invalid HTML causes Caja lexer to generate incorrect token stream for subsequent tags", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 391](https://code.google.com/p/google-caja/issues/detail?id=391) created by louiscryan on 2008-06-05T16:15:27.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Feeding \n&lt;div id='search' style=width: 565px; position: relative'&gt;&lt;div id=&quot;x&quot;&gt;\ninto the Caja lexer will cause it to start generating incorrect tokens. The style attribute without \ncorrect quoting causes all subsequent tokens to be incorrectly recognized. This issue was found \nduring development of the HTML rewriter for Shindig. \n\n<b>What is the expected output? What do you see instead?</b>\nThe lexer should terminate the attribute when it sees the &gt; which seems to be consistent with \nbrowser behavior\n\n<b>What version of the product are you using? On what operating system?</b>\nr820\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 02:13:02"}, {"url": "https://github.com/google/caja/issues/389", "closed": "2015-04-16 02:12:52", "ttf": 0.0002777777777777778, "title": "Ensure mentionability without calling expand().", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 389](https://code.google.com/p/google-caja/issues/detail?id=389) created by erights on 2008-06-05T01:55:44.000Z:\n\n```\n            // Make sure @p and @clazz are mentionable.\n            expand(p, scope, mq);\n            expand(clazz, scope, mq);\n```\n\nThe above code is a terrible way to ensure mentionability. Also, because\nexpanding with a scope can side effect the scope, it is dangerous. (Though\nit happens to be ok here.) \n", "created": "2015-04-16 02:12:46"}, {"url": "https://github.com/google/caja/issues/387", "closed": "2015-04-16 02:12:39", "ttf": 0.0002777777777777778, "title": "asMethod in caja.js is not used.", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 387](https://code.google.com/p/google-caja/issues/detail?id=387) created by mikesamuel on 2008-06-04T23:31:49.000Z:\n\n___.asMethod does not seem to be used.\n\n$ find java js -name *.java -o -name *.js | xargs egrep -n '\\basMethod\\b'\njs/com/google/caja/caja.js:904:  function asMethod(meth) {\njs/com/google/caja/caja.js:2364:    method: method,               asMethod:\nasMethod,\n\nCan it be removed?\n", "created": "2015-04-16 02:12:32"}, {"url": "https://github.com/google/caja/issues/386", "closed": "2015-04-16 02:12:32", "ttf": 0.0002777777777777778, "title": "Delete the asMethod() function from caja.js", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 386](https://code.google.com/p/google-caja/issues/detail?id=386) created by erights on 2008-06-04T23:31:01.000Z:\n\nThe asMethod() function in caja.js seems to be dead code. If it is expected\nto remain unused, it should be removed.\n", "created": "2015-04-16 02:12:29"}, {"url": "https://github.com/google/caja/issues/385", "closed": "2015-04-16 02:12:29", "ttf": 0.0002777777777777778, "title": "Quasi patterns match function declarations with null identiifer value", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 385](https://code.google.com/p/google-caja/issues/detail?id=385) created by ihab.awad on 2008-06-04T23:10:54.000Z:\n\nUnder some circumstances, a quasi pattern such as:\n\n  function @f() {}\n\ncan match code like:\n\n  function() {}\n\nwith the binding &quot;f&quot; set to an identifier with a null value. This issue\ncalls on us to:\n1. Investigate the circumstances under which function constructors without\n   a name can parse to a function declaration, and fixing any bugs found;\n2. Audit rewriter rules to determine where this is a vulnerability and if\n   we need to add null checks; and\n3. Determine if the quasi matching should be modified so that an Identifier\n   node should only match if its value is non-null.\n", "created": "2015-04-16 02:12:18"}, {"url": "https://github.com/google/caja/issues/383", "closed": "2015-04-16 02:12:16", "ttf": 0.0002777777777777778, "title": "Function initialization often hoisted too far.", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 383](https://code.google.com/p/google-caja/issues/detail?id=383) created by erights on 2008-06-04T22:21:41.000Z:\n\nFor example\n\n&lt;script type=&quot;text/javascript&quot;&gt;\ntry {\n  var x = 3;\n  function foo(){}\n} finally {\n  x = 5;\n  function foo(){}\n}\n&lt;/script&gt;\n\nshould and does hoist the declaration of the &quot;foo&quot; variable into the\nenclosing body. However, each initialization of this variable to a function\nshould be hoisted only to the top of the block in which that named function\ndeclaration appears. Instead, these initializations are hoisted to the top\nof the enclosing block, resulting in:\n\n&lt;script type=&quot;text/javascript&quot;&gt;{\n  **_.loadModule(function (**_, IMPORTS___) {\n                   {\n                     var foo;\n                     foo = ___.simpleFunc(function foo() {\n                                          });\n                     var foo;\n                     foo = ___.simpleFunc(function foo() {\n                                          });\n                     try {\n                       var x = 3;\n                       ;\n                     } finally {\n                       x = 5;\n                       ;\n                     }\n                   }\n                 });\n}&lt;/script&gt;\n\nThe problem is that the rewriter rule is currently:\n\n```\n      matches=&quot;try { @s0*; } finally { @s1*; }&quot;,\n      substitutes=&quot;try { @s0*; } finally { @s1*; }&quot;)\n```\n\nrather than\n          matches=&quot;try @s0 finally @s1;&quot;,\n          substitutes=&quot;try @s0 finally @s1;&quot;\nIf it were the latter, then expansion would automagically invoke the block\nexpansion rule, which would do the right thing. Unfortunately, the latter\nformulation can't be parsed with a JavaScript parser, since try/finally\ninsists on the curlies.\n\nIn any case, everywhere that the curlies appear explicitly in a match rule,\nwe need to check whether we treat the enclosed statements as a distinct block.\n", "created": "2015-04-16 02:11:40"}, {"url": "https://github.com/google/caja/issues/381", "closed": "2015-04-16 02:11:37", "ttf": 0.0002777777777777778, "title": "Is 328's fix to 308 overly conservative?", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 381](https://code.google.com/p/google-caja/issues/detail?id=381) created by erights on 2008-06-04T20:17:55.000Z:\n\nThe fastpathCall() clears both canSet and grantSet. Symmetrically, the\nfastpathSet\nclears both canCall and grantCall. I'm suspicious that it's incorrect\nto clear the\ngrant flags, but I'm not sure. In any case, if it is incorrect, it fails\nsafe, so this is no longer a security issue.\n", "created": "2015-04-16 02:11:24"}, {"url": "https://github.com/google/caja/issues/377", "closed": "2015-04-16 02:11:04", "ttf": 0.0002777777777777778, "title": "Single underscore allowed for functions but not for variables", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 377](https://code.google.com/p/google-caja/issues/detail?id=377) created by ihab.awad on 2008-06-03T23:52:20.000Z:\n\nAt the top-level scope of a Caja module, the following is legal:\n\n  function f_() {}\n  f_();\n\nbut the following is not legal:\n\n  var x_;\n  x_ = 3;\n\nWe need both to be consistent.\n", "created": "2015-04-16 02:11:01"}, {"url": "https://github.com/google/caja/issues/375", "closed": "2015-04-16 02:10:48", "ttf": 0.0002777777777777778, "title": "Decide whether to allow writes to (local snapshot of) import variables", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 375](https://code.google.com/p/google-caja/issues/detail?id=375) created by ihab.awad on 2008-06-03T22:49:36.000Z:\n\nTo support the JS idiom of feature testing --\n\n  if (!foo) {\n    foo = function() { ... }\n  }\n\nwe should allow variables obtained from IMPORTS___ to be written to, and\nreadImport(...) should just return 'undefined' if some import variable is\nnot provided by the container.\n\nOptionally, we can provide a way for a module author to specify that a\ngiven import variable is &quot;required&quot;.\n", "created": "2015-04-16 02:10:28"}, {"url": "https://github.com/google/caja/issues/374", "closed": "2015-04-16 02:10:28", "ttf": 0.0002777777777777778, "title": "Fail with a better error if node not matched by any rule", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 374](https://code.google.com/p/google-caja/issues/detail?id=374) created by ihab.awad on 2008-06-03T22:13:33.000Z:\n\nWhen a node does not match any rules, should output a better error message\nincluding the FilePosition, not just a runtime exception.\n", "created": "2015-04-16 02:10:26"}, {"url": "https://github.com/google/caja/issues/370", "closed": "2015-04-16 02:10:07", "ttf": 0.0002777777777777778, "title": "Confusion between imported variable and per-module variable", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 370](https://code.google.com/p/google-caja/issues/detail?id=370) created by erights on 2008-06-03T06:11:55.000Z:\n\nIn r1541\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction foo(){return b;}\nvar b;\n&lt;/script&gt;\n\ncajoles to\n\n&lt;script type=&quot;text/javascript&quot;&gt;{\n  **_.loadModule(function (**_, IMPORTS___) {\n                   {\n                     var b = **_.readImports(IMPORTS**_, 'b');\n                     var foo;\n                     foo = ___.simpleFunc(function foo() {\n                                            return b;\n                                          });\n                     ;\n                     var b;\n                   }\n                 });\n}&lt;/script&gt;\n\nb should be considered per-module and not imported.\n", "created": "2015-04-16 02:10:02"}, {"url": "https://github.com/google/caja/issues/368", "closed": "2015-04-16 02:09:58", "ttf": 0.0002777777777777778, "title": "Caja constructors can no longer inherit well from simple functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 368](https://code.google.com/p/google-caja/issues/detail?id=368) created by erights on 2008-06-03T01:05:00.000Z:\n\nAs of ihab/sharply, the new way for a subclass constructor to call a\nsuperclass constructor is\n &lt;ctor&gt;.super(this, args...); \n\nThe super() method called here is added by caja.def() to the subclass\nconstructor. It should do a &lt;sup&gt;.apply(this, args) to the superclass\nconstructor. However, splitCtor() was defined to add a call() method to be\ncalled by subclasses rather than an apply() method. Instead of fixing\nsplitCtor to define an apply() method, super() was instead fixed to call\n&lt;sup&gt;.init___.apply(this, args). This works fine for the obvious case. But\nif the superclass is actually a simple-function rather than a constructor,\nit will fail, since simple-functions don't have an init___.\n\nFortunately, when this bug causes a failure, it fails safe.\n", "created": "2015-04-16 02:09:55"}, {"url": "https://github.com/google/caja/issues/367", "closed": "2015-04-16 02:09:55", "ttf": 0.0002777777777777778, "title": "caja.js ctor(...) does not work with simple functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 367](https://code.google.com/p/google-caja/issues/detail?id=367) created by ihab.awad on 2008-06-03T00:30:27.000Z:\n\nThe function created in the 'super' property created in function ctor(...)\nin caja.js does not work with simple functions: it assumes opt_Sup has an\ninit___ property.\n", "created": "2015-04-16 02:09:48"}, {"url": "https://github.com/google/caja/issues/366", "closed": "2015-04-16 02:09:48", "ttf": 0.0002777777777777778, "title": "Figure out how to fix POE bugs and add POE back into caja.js", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 366](https://code.google.com/p/google-caja/issues/detail?id=366) created by metaweta on 2008-06-02T23:52:52.000Z:\n\nSee issue345 for background.\n", "created": "2015-04-16 02:09:42"}, {"url": "https://github.com/google/caja/issues/362", "closed": "2015-04-16 02:09:25", "ttf": 0.0002777777777777778, "title": "Update wiki pages", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 362](https://code.google.com/p/google-caja/issues/detail?id=362) created by mikesamuel on 2008-06-02T20:51:44.000Z:\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 02:09:12"}, {"url": "https://github.com/google/caja/issues/361", "closed": "2015-04-16 02:09:12", "ttf": 0.0002777777777777778, "title": "Update wiki pages", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 361](https://code.google.com/p/google-caja/issues/detail?id=361) created by mikesamuel on 2008-06-02T20:50:23.000Z:\n\nCajaCajole.wiki 0002:metaweta 0003:ihab.awad\n", "created": "2015-04-16 02:09:09"}, {"url": "https://github.com/google/caja/issues/360", "closed": "2015-04-16 02:09:09", "ttf": 0.0002777777777777778, "title": "Update wiki pages", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 360](https://code.google.com/p/google-caja/issues/detail?id=360) created by mikesamuel on 2008-06-02T20:48:51.000Z:\n\nCajolingRules.wiki 0008:jasvir\nInconsistentlyReservedKeywords.wiki 0001:jasvir\nReadBadInternalRule.wiki 0001:jasvir\nVarBadGlobalSuffixRule.wiki 0001:jasvir\nVarBadSuffixDeclarationRule.wiki 0001:jasvir\nVarBadSuffixRule.wiki 0001:jasvir\nVarGlobalRule.wiki 0001:jasvir\nWithRule.wiki 0001:jasvir\n", "created": "2015-04-16 02:09:05"}, {"url": "https://github.com/google/caja/issues/359", "closed": "2015-04-16 02:09:05", "ttf": 0.0002777777777777778, "title": "Update wiki pages", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 359](https://code.google.com/p/google-caja/issues/detail?id=359) created by mikesamuel on 2008-06-02T20:47:21.000Z:\n\nCajaEasyIntro.wiki 0002:erights 0003:gwt.team.dpeterson 0027:metaweta\nCajaHostingModules.wiki 0001:mikesamuel 0014:metaweta\nCajaModule.wiki 0004:metaweta\nRefactoringToolFeatureRequests.wiki 0005:metaweta\n", "created": "2015-04-16 02:09:00"}, {"url": "https://github.com/google/caja/issues/357", "closed": "2015-04-16 02:08:57", "ttf": 0.0002777777777777778, "title": "Narrow callCajaDef* rules to declared functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 357](https://code.google.com/p/google-caja/issues/detail?id=357) created by ihab.awad on 2008-06-02T19:52:12.000Z:\n\n&quot;callCajaDef*&quot; rules were allowing any function to be named as the first\nargument. Decided it is less confusing to narrow to a declared function. In\nother words --\n\n  function foo() { ... }\n  caja.def(foo, ...);\n\nworks, but --\n\n  var x = function foo() {\n    caja.def(foo, ...);\n  }\n\ndoes not. If the narrower case ends up seeming problematic, we can always\nwiden for cause.\n", "created": "2015-04-16 02:08:53"}, {"url": "https://github.com/google/caja/issues/356", "closed": "2015-04-16 02:08:53", "ttf": 0.0002777777777777778, "title": "Rename '___.readImports' to '___.readImport'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 356](https://code.google.com/p/google-caja/issues/detail?id=356) created by ihab.awad on 2008-06-02T19:48:58.000Z:\n\nSimple change that MarkM and I made while pairing last week. Recording so\ncan be referred to by CL description.\n", "created": "2015-04-16 02:08:51"}, {"url": "https://github.com/google/caja/issues/355", "closed": "2015-04-16 02:08:50", "ttf": 0.0002777777777777778, "title": "Add test for multiple named functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 355](https://code.google.com/p/google-caja/issues/detail?id=355) created by ihab.awad on 2008-06-02T19:10:24.000Z:\n\nThe following should be rejected and we should test that it is --\n\n  function foo() {}\n  function foo() {}\n", "created": "2015-04-16 02:08:48"}, {"url": "https://github.com/google/caja/issues/354", "closed": "2015-04-16 02:08:48", "ttf": 0.0002777777777777778, "title": "Add test for multiple named functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 354](https://code.google.com/p/google-caja/issues/detail?id=354) created by ihab.awad on 2008-06-02T19:09:34.000Z:\n\nThe following should be rejected and we should test that it is --\n\n  function foo() {}\n  function foo() {}\n", "created": "2015-04-16 02:08:43"}, {"url": "https://github.com/google/caja/issues/353", "closed": "2015-04-16 02:08:43", "ttf": 0.0002777777777777778, "title": "Runtime warts mode support", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 353](https://code.google.com/p/google-caja/issues/detail?id=353) created by ihab.awad on 2008-06-02T19:04:26.000Z:\n\nAdd caja.js support for runtime &quot;warts mode&quot; switch, currently enabling or\ndisabling POE support. Depends on Issue 352.\n", "created": "2015-04-16 02:08:32"}, {"url": "https://github.com/google/caja/issues/352", "closed": "2015-04-16 02:08:32", "ttf": 0.0002777777777777778, "title": "Cajoler module output format", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 352](https://code.google.com/p/google-caja/issues/detail?id=352) created by ihab.awad on 2008-06-02T19:02:58.000Z:\n\nChange cajoler module format to be an object literal containing the module\nfunction, the version of the cajoler used, and whether the module was\ncompiled with &quot;warts mode&quot; turned on.\n", "created": "2015-04-16 02:08:21"}, {"url": "https://github.com/google/caja/issues/351", "closed": "2015-04-16 02:08:21", "ttf": 0.0002777777777777778, "title": "Attach warts mode to command line", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 351](https://code.google.com/p/google-caja/issues/detail?id=351) created by ihab.awad on 2008-06-02T19:01:24.000Z:\n\nAdd command line flags to enable/disable warts mode.\n", "created": "2015-04-16 02:08:16"}, {"url": "https://github.com/google/caja/issues/350", "closed": "2015-04-16 02:08:16", "ttf": 0.0002777777777777778, "title": "java.lang.RuntimeException: Unimplemented case involving: AssignOperation", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 350](https://code.google.com/p/google-caja/issues/detail?id=350) created by tobie.langel on 2008-06-02T15:01:41.000Z:\n\nWhen attempting to cajole prototype.js on revision 1579.\n\nNote meta.setWartsMode(true); manually (by adding it to line 94 of PluginCompilerMain.java.\n\nFull error:\n\njava.lang.RuntimeException: Unimplemented case involving: AssignOperation : ASSIGN\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:121)\n        at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:196)\n        at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:186)\n        at com.google.caja.parser.quasiliteral.DefaultCajaRewriter$76.fire(DefaultCajaRewriter.java:2145)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:103)\n        at com.google.caja.parser.quasiliteral.DefaultCajaRewriter$3.fire(DefaultCajaRewriter.java:136)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:103)\n        at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:196)\n        at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:186)\n        at com.google.caja.parser.quasiliteral.DefaultCajaRewriter$76.fire(DefaultCajaRewriter.java:2145)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:103)\n        at com.google.caja.parser.quasiliteral.DefaultCajaRewriter$1.fire(DefaultCajaRewriter.java:94)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:103)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:87)\n        at com.google.caja.plugin.ExpressionSanitizerCaja.sanitize(ExpressionSanitizerCaja.java:41)\n        at com.google.caja.plugin.stages.ValidateJavascriptStage.apply(ValidateJavascriptStage.java:40)\n        at com.google.caja.plugin.stages.ValidateJavascriptStage.apply(ValidateJavascriptStage.java:31)\n        at com.google.caja.util.Pipeline.applyStage(Pipeline.java:41)\n        at com.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:123)\n        at com.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:117)\n        at com.google.caja.util.Pipeline.apply(Pipeline.java:35)\n        at com.google.caja.plugin.PluginCompiler.run(PluginCompiler.java:180)\n        at com.google.caja.plugin.PluginCompilerMain.run(PluginCompilerMain.java:100)\n        at com.google.caja.plugin.PluginCompilerMain.main(PluginCompilerMain.java:337)\n", "created": "2015-04-16 02:08:10"}, {"url": "https://github.com/google/caja/issues/348", "closed": "2015-04-16 02:08:05", "ttf": 0.0002777777777777778, "title": "POE breaks caja.result. Does it break debugmode?", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 348](https://code.google.com/p/google-caja/issues/detail?id=348) created by erights on 2008-06-01T02:44:32.000Z:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\ncaja.result(&quot;foo&quot;);\n&lt;/script&gt;\n\nused to work, but no longer does. The r1541 testbed applet defines\ncaja.result by:\n\n  caja.result = ___.simpleFunc(function (o) {\n   ...\n\nwith the global caja object. Within the applet (eval.html in the current\nversion), caja.result is no longer callable. I suspect that's because\neval.html is depending on the isJSONContainer-ness of the global &quot;caja&quot;\nobject to provide access, whereas caja.js is explicitly calling allowCall\non it. Either would work on the global caja object itself. But POE instead\nprovides the plugin with a beget of the caja object. This per-plugin caja\nobject mistakenly passes isJSONContainer (as explained elsewhere). But\n&quot;result&quot; isn't an own property of it, so unless it's globally whitelisted,\nit's not accessible.\n\nAFAICT, this has no security risk and is only a minor annoyance, so I'm\ngiving it a low priority. However, I wonder if there might be similar bad\ninteractions between POE and debugmode, so I am flagging this as\nsecurity-relevant.\n", "created": "2015-04-16 02:07:58"}, {"url": "https://github.com/google/caja/issues/347", "closed": "2015-04-16 02:07:58", "ttf": 0.0002777777777777778, "title": "'in' needs to translate to canReadPub/canReadProp", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 347](https://code.google.com/p/google-caja/issues/detail?id=347) created by erights on 2008-06-01T02:33:29.000Z:\n\nIn r1541\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n'**_FROZEN**_' in Object;\n&lt;/script&gt;\n\ncajoles to\n\n&lt;script type=&quot;text/javascript&quot;&gt;{\n  **_.loadModule(function (**_, IMPORTS___) {\n                   {\n                     var Object = **_.readImports(IMPORTS**_, 'Object');\n                     caja.result('**_FROZEN**_' in Object);\n                   }\n                 });\n}&lt;/script&gt;\n\nwhich evaluates to true. The problem is that we aren't translating 'in'\n(beyond expanding its operands). This allows Caja code to test which\nproperty names are actually present on the object at the uncajoled level,\nwhich should be hidden.\n", "created": "2015-04-16 02:07:49"}, {"url": "https://github.com/google/caja/issues/346", "closed": "2015-04-16 02:07:49", "ttf": 0.0002777777777777778, "title": "Caja still does not encapsulate supposedly protected properties", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 346](https://code.google.com/p/google-caja/issues/detail?id=346) created by erights on 2008-06-01T00:43:39.000Z:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction EncapsulatedObject(o) {\n  this.myO_ = o;\n  this.publiclyWritableField = null;\n}\ncaja.def(EncapsulatedObject,Object,{\n  toString: function(){return &quot;friend&quot;;}\n});\nvar eo = new EncapsulatedObject(3469);\n\nfunction Attacker(){}\ncaja.def(Attacker,Object,{\n  toString: function(){return &quot;foe&quot;;},\n  attack: function(){return this.myO_;}\n});\nvar p = Attacker.prototype.attack;\neo.publiclyWritableField = p;\neo.publiclyWritableField();\n&lt;/script&gt;\n\nin the testbed applet prints 3469. I don't understand the problem yet, but\nat least a contributory vulnerability for my mistaken whitelisting (from\nlong ago) of Function.prototype. However, by itself, this shouldn't have\ncaused the problem. For some reason, Attacker.prototype.attack seems to\nprovide direct access to the unattached attack method, rather than\nattaching it to the prototype.\n", "created": "2015-04-16 02:07:42"}, {"url": "https://github.com/google/caja/issues/345", "closed": "2015-04-16 02:07:42", "ttf": 0.0002777777777777778, "title": "Security holes in POE", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 345](https://code.google.com/p/google-caja/issues/detail?id=345) created by erights on 2008-05-31T21:53:45.000Z:\n\n&lt;script&gt;\n(true &amp;&amp; caja.readPub)({}, 'foo');\n&lt;/script&gt;\n\nin the testbed applet r1541 correctly cajoles, and incorrectly results in\n\nthis.getExtension is not a function\nhttp://cajadores.com/demos/testbed/caja.js\nLine 1071\n\nThis particular symptom is mostly harmless, but the problems it's a symptom\nof are scary. Fortunately, we expect to make POE conditional on warts mode.\nOnce we do, the following security hole should only apply with warts on and\nwe can then lower its priority. However, currently, POE is not yet\nconditional on warts mode, so I'm classifying this as high priority.\n\nIhab, IIUC, you're expecting to make POE conditional on warts, so I'm\nassigning this to you. Once you do, please lower its priority and reassign\nto metaweta.\n\nPOE requires per-plugin state (the POE table), and it requires certain\nmembers of the &quot;caja&quot; and &quot;___&quot; objects to make use of that state.\nTherefore, the default new-module handler creates fresh per-plugin\ninstances of caja and ___. To access this per-plugin state, various members\nof caja and ___, such as readPub(), were modified to use &quot;this&quot; internally.\nHowever, at least readPub is still whitelisted as a simple-function. The\nabove code abuses the resulting ability to call it as a simple-function,\ncausing it to be invoked with its &quot;this&quot; bound to the global object.\n\nreadPub() assumes its &quot;this&quot; is bound to the per-plugin &quot;___&quot;. However, as\nshown above, it is also a member of the per-plugin &quot;caja&quot; object.\nTherefore, the following fails in the same way for a different reason:\n\n&lt;script&gt;\ncaja.readPub({},'foo');\n&lt;/script&gt;\n\nThis calls readPub() with its &quot;this&quot; bound to the per-plugin &quot;caja&quot; rather\nthan the per-plugin &quot;___&quot;.\n\nOther related problems: The per-plugin &quot;caja&quot; is a beget of the global caja\nrather than copy. The beget code is\n\n  function begetCajaObjects() {\n    function beget(obj) { function F(){} F.prototype=obj; return new F; }\n    return { caja: beget(caja), **_: copy(**_) };\n  }\n\nSince the per-plugin &quot;caja&quot; directly inherits from neither Array.prototype\nnor Object.prototype,\n\n&lt;script&gt;\ncaja.isJSONContainer(caja);\n&lt;/script&gt;\n\nshould be false. Instead it's true. I believe the problem is that the above\nbeget code violates assumptions made in the Caja runtime. In particular,\nthe prototype of the per-plugin caja object should have its &quot;constructor&quot;\nproperty set to point to a function whose &quot;prototype&quot; property points back\nat it.\n\nWe need to ensure that none these POE problems endanger the integrity of\nwartless Caja, once we have the runtime warts flag.\n", "created": "2015-04-16 02:07:31"}, {"url": "https://github.com/google/caja/issues/343", "closed": "2015-04-16 02:07:13", "ttf": 0.0002777777777777778, "title": "Class is not required to call 'super' in its ctor", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 343](https://code.google.com/p/google-caja/issues/detail?id=343) created by ihab.awad on 2008-05-31T00:43:37.000Z:\n\nWe do not enforce that a ctor must call 'super'.\n", "created": "2015-04-16 02:06:57"}, {"url": "https://github.com/google/caja/issues/342", "closed": "2015-04-16 02:06:57", "ttf": 0.0002777777777777778, "title": "Cannot declare a 'final' class in Caja", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Low", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 342](https://code.google.com/p/google-caja/issues/detail?id=342) created by ihab.awad on 2008-05-31T00:42:25.000Z:\n\nCaja provides no way for a programmer to declare a class 'final', i.e.,\nmake it impossible to be subclassed.\n", "created": "2015-04-16 02:06:41"}, {"url": "https://github.com/google/caja/issues/341", "closed": "2015-04-16 02:06:41", "ttf": 0.0002777777777777778, "title": "Cajoling of event handler functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 341](https://code.google.com/p/google-caja/issues/detail?id=341) created by ihab.awad on 2008-05-31T00:36:51.000Z:\n\nEvent handler functions, since they are SYNTHETIC, are not properly\ntraversed in scope analysis -- they are treated as though they were plain\nblocks -- so the output is not correct. (Specifically: event is treated as\nthough it is a free module variable, not a function parameter, and the\ntranslation of arguments to a___ is not done.) We can fix this by specific\nhacks on the symbols in the function body, but we would prefer to simply\nmake the actual generated FunctionConstructor node non-SYNTHETIC so that\nscope analysis in the rewriter automatically does the right thing.\n", "created": "2015-04-16 02:06:37"}, {"url": "https://github.com/google/caja/issues/340", "closed": "2015-04-16 02:06:36", "ttf": 0.0002777777777777778, "title": "Assignments to functions fails with unhelpful error", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 340](https://code.google.com/p/google-caja/issues/detail?id=340) created by ihab.awad on 2008-05-31T00:36:03.000Z:\n\nGiven the definition:\n\n  function foo() {}\n\nthe following statements (correctly) fail to cajole but with unhelpful errors:\n\n  foo = 3;\n  foo++;\n", "created": "2015-04-16 02:06:32"}, {"url": "https://github.com/google/caja/issues/339", "closed": "2015-04-16 02:06:32", "ttf": 0.0002777777777777778, "title": "Break up rules in DefaultCajaRewriter", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 339](https://code.google.com/p/google-caja/issues/detail?id=339) created by ihab.awad on 2008-05-31T00:35:02.000Z:\n\nBreak up the rules in DefaultCajaRewriter to allow easier reviewability.\n", "created": "2015-04-16 02:06:30"}, {"url": "https://github.com/google/caja/issues/336", "closed": "2015-04-16 02:06:05", "ttf": 0.0002777777777777778, "title": "___.setStatic() allows setting a property on a frozen function", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 336](https://code.google.com/p/google-caja/issues/detail?id=336) created by ihab.awad on 2008-05-30T20:31:59.000Z:\n\n___.setStatic() allows setting a property on a frozen function\n", "created": "2015-04-16 02:06:03"}, {"url": "https://github.com/google/caja/issues/335", "closed": "2015-04-16 02:06:02", "ttf": 0.0002777777777777778, "title": "___.setStatic() allows setting a property on a frozen function", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 335](https://code.google.com/p/google-caja/issues/detail?id=335) created by ihab.awad on 2008-05-30T20:25:55.000Z:\n\n___.setStatic() allows setting a property on a frozen function\n", "created": "2015-04-16 02:06:00"}, {"url": "https://github.com/google/caja/issues/334", "closed": "2015-04-16 02:06:00", "ttf": 0.0002777777777777778, "title": "___.setStatic() allows setting a property on a frozen function", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 334](https://code.google.com/p/google-caja/issues/detail?id=334) created by ihab.awad on 2008-05-30T20:20:26.000Z:\n\n___.setStatic() allows setting a property on a frozen function\n", "created": "2015-04-16 02:05:55"}, {"url": "https://github.com/google/caja/issues/333", "closed": "2015-04-16 02:05:55", "ttf": 0.0002777777777777778, "title": "Code review: jasvir/jsfunfuzz@1514", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 333](https://code.google.com/p/google-caja/issues/detail?id=333) created by jasvir on 2008-05-30T20:11:04.000Z:\n\nDescription:\n- Changed EOL characters in the original package from \\r to \\n\n- Changed the magic line to not use env\n- Added JsFunFuzz which fetches a fuzzed line of javascript, parses it\n  and checks that the only expception thrown is a child of\n  ParseException\n- Updated jsfunfuzz so it does not run the fuzzed javascript \n\nAffected Paths:\n   A //trunk/src/javatests/com/google/caja/parser/js/JsFunFuzz.java\n   M //trunk/src/third_party/js/jsfunfuzz/about.txt\n   M //trunk/src/third_party/js/jsfunfuzz/jsfunfuzz.js\n   M //trunk/src/third_party/js/jsfunfuzz/multi_timed_run.py\n   M //trunk/src/third_party/js/jsfunfuzz/using.txt\n", "created": "2015-04-16 02:05:53"}, {"url": "https://github.com/google/caja/issues/332", "closed": "2015-04-16 02:05:53", "ttf": 0.0002777777777777778, "title": "Confirm caja.def statically checks type of 1st argument, not second", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 332](https://code.google.com/p/google-caja/issues/detail?id=332) created by ihab.awad on 2008-05-30T18:51:14.000Z:\n\nPls confirm that, given 1st class ctors, caja.def(...) now no longer needs\nto check the type (function, declared function, ...) of either of its\nfunction args (representing the subclass and superclass).\n", "created": "2015-04-16 02:05:35"}, {"url": "https://github.com/google/caja/issues/330", "closed": "2015-04-16 02:05:26", "ttf": 0.0002777777777777778, "title": "CajolingServiceTest needs to cajole input", "commits": {}, "user": "kpreid", "labels": ["Component-Test", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 330](https://code.google.com/p/google-caja/issues/detail?id=330) created by ihab.awad on 2008-05-30T18:47:58.000Z:\n\nThe current CajolingServiceTest test fixture does not cajole its input.\n", "created": "2015-04-16 02:05:17"}, {"url": "https://github.com/google/caja/issues/329", "closed": "2015-04-16 02:05:17", "ttf": 0.0002777777777777778, "title": "Audit variables ending in single underscore", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 329](https://code.google.com/p/google-caja/issues/detail?id=329) created by ihab.awad on 2008-05-30T18:47:09.000Z:\n\nDo we want to allow plain variables (&quot;var&quot; declarations and exception\nvariables) ending in a single underscore? This seems secure but may be\nconfusing.\n", "created": "2015-04-16 02:05:15"}, {"url": "https://github.com/google/caja/issues/323", "closed": "2015-04-16 02:04:14", "ttf": 0.0002777777777777778, "title": "obj.valueOf and/or toString gets called by call(obj, ...) and apply(obj, ...)", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 323](https://code.google.com/p/google-caja/issues/detail?id=323) created by metaweta on 2008-05-28T21:55:22.000Z:\n\nIf an attacker gets a reference to a function that can't be called from\ncaja code, he can assign it to the valueOf property of an object obj.  The\nfunction readPub() and its cousins use call or apply with obj as the first\nparameter.\n\nvar counter=0; \nfunction countUseFunction(x) { \n  return function () { \n    ++counter; \n    return x; \n  }; \n}\nvar o = { valueOf: countUseFunction('x') };\n\n(function(){}).apply(o)\n// counter === 1\n\n(function(){}).call(o)\n// counter === 2\n", "created": "2015-04-16 02:03:45"}, {"url": "https://github.com/google/caja/issues/320", "closed": "2015-04-16 02:03:14", "ttf": 0.0002777777777777778, "title": "ant.jar is missing from third_party", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 320](https://code.google.com/p/google-caja/issues/detail?id=320) created by ben@links.org on 2008-05-27T14:34:54.000Z:\n\nWhat it says on the tin (needed for AbstractCajaAntTask, amongst others).\n\nI had to add a local copy to my Eclipse setup.\n", "created": "2015-04-16 02:03:05"}, {"url": "https://github.com/google/caja/issues/319", "closed": "2015-04-16 02:03:05", "ttf": 0.0002777777777777778, "title": "Ant build is broken", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 319](https://code.google.com/p/google-caja/issues/detail?id=319) created by ben@links.org on 2008-05-27T14:04:18.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. cd src\n2. ant\n\nTwo sets of errors:\n\n [javadoc]\n/home/benl/work/google-caja/src/java/com/google/caja/opensocial/service/CajolingService.java:19:\npackage com.sun.net.httpserver does not exist\n  [javadoc] import com.sun.net.httpserver.Headers;\n  [javadoc]                               ^\n  [javadoc]\n/home/benl/work/google-caja/src/java/com/google/caja/opensocial/service/CajolingService.java:20:\npackage com.sun.net.httpserver does not exist\n  [javadoc] import com.sun.net.httpserver.HttpContext;\n  [javadoc]                               ^\n  [javadoc]\n/home/benl/work/google-caja/src/java/com/google/caja/opensocial/service/CajolingService.java:21:\npackage com.sun.net.httpserver does not exist\n  [javadoc] import com.sun.net.httpserver.HttpExchange;\n  [javadoc]                               ^\n  [javadoc]\n/home/benl/work/google-caja/src/java/com/google/caja/opensocial/service/CajolingService.java:22:\npackage com.sun.net.httpserver does not exist\n  [javadoc] import com.sun.net.httpserver.HttpHandler;\n  [javadoc]                               ^\n  [javadoc]\n/home/benl/work/google-caja/src/java/com/google/caja/opensocial/service/CajolingService.java:23:\npackage com.sun.net.httpserver does not exist\n  [javadoc] import com.sun.net.httpserver.HttpServer;\n  [javadoc]                               ^\n  [javadoc]\n/home/benl/work/google-caja/src/java/com/google/caja/opensocial/service/CajolingService.java:52:\ncannot find symbol\n  [javadoc] symbol: class HttpHandler\n  [javadoc] public class CajolingService implements HttpHandler {\n  [javadoc]                                         ^\n  [javadoc]\n/home/benl/work/google-caja/src/java/com/google/caja/opensocial/service/CajolingService.java:55:\ncannot find symbol\n  [javadoc] symbol  : class HttpServer\n  [javadoc] location: class com.google.caja.opensocial.service.CajolingService\n  [javadoc]   private HttpServer server;\n  [javadoc]           ^\n  [javadoc]\n/home/benl/work/google-caja/src/java/com/google/caja/opensocial/service/CajolingService.java:96:\ncannot find symbol\n  [javadoc] symbol  : class HttpExchange\n  [javadoc] location: class com.google.caja.opensocial.service.CajolingService\n  [javadoc]   private void closeBadRequest(HttpExchange ex) throws\nIOException {\n  [javadoc]                                ^\n  [javadoc]\n/home/benl/work/google-caja/src/java/com/google/caja/opensocial/service/CajolingService.java:101:\ncannot find symbol\n  [javadoc] symbol  : class HttpExchange\n  [javadoc] location: class com.google.caja.opensocial.service.CajolingService\n  [javadoc]   public void handle(HttpExchange ex) throws IOException {\n  [javadoc]                      ^\n  [javadoc] Standard Doclet version 1.5.0_13\n  [javadoc] Building tree for all the packages and classes...\n  [javadoc]\n/home/benl/work/google-caja/src/java/com/google/caja/parser/AbstractParseTreeNode.java:374:\nforeach not applicable to expression type\n  [javadoc]       for (ParseTreeNode node : nodes) {\n  [javadoc]                                 ^\n  [javadoc] Building index for all the packages and classes...\n  [javadoc] Building index for all classes...\n  [javadoc] Generating\n/home/benl/work/google-caja/src/ant-docs/stylesheet.css...\n  [javadoc] 1 error\n  [javadoc] 9 warnings\n\nand\n\nPluginCompiler:\n    [javac] Compiling 4 source files to /home/benl/work/google-caja/src/ant-lib\n    [javac]\n/home/benl/work/google-caja/src/java/com/google/caja/plugin/stages/InferFilePositionsStage.java:54:\ninferFilePositions(com.google.caja.parser.ParseTreeNode) in\ncom.google.caja.plugin.stages.InferFilePositionsStage cannot be applied to\n(capture of ?)\n    [javac]       inferFilePositions(job.getRoot().node);\n    [javac]       ^\n    [javac]\n/home/benl/work/google-caja/src/java/com/google/caja/plugin/stages/InferFilePositionsStage.java:55:\ninferFilePositions(com.google.caja.parser.ParseTreeNode) in\ncom.google.caja.plugin.stages.InferFilePositionsStage cannot be applied to\n(capture of ?)\n    [javac]       inferFilePositions(job.getRoot().node);\n    [javac]       ^\n    [javac] 2 errors\n", "created": "2015-04-16 02:02:56"}, {"url": "https://github.com/google/caja/issues/315", "closed": "2015-04-16 02:02:24", "ttf": 0.0002777777777777778, "title": "freeze_ is undefined for uncajoled code", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 315](https://code.google.com/p/google-caja/issues/detail?id=315) created by metaweta on 2008-05-25T05:22:01.000Z:\n\nThe expression \n  this.freeze_(); \nshould be a no-op for uncajoled code.  Instead, it's an error because\nfreeze_ isn't defined.\n", "created": "2015-04-16 02:02:13"}, {"url": "https://github.com/google/caja/issues/313", "closed": "2015-04-16 02:02:06", "ttf": 0.0002777777777777778, "title": "No masking symbol error for free variables", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 313](https://code.google.com/p/google-caja/issues/detail?id=313) created by ihab.awad on 2008-05-24T00:41:48.000Z:\n\nThe following code does not generate a MASKING_SYMBOL message at severity\nlevel ERROR, but it should. This is because the exception variable 'e' is\nseen first, then the scope is popped, then the compiler detects and records\nthe fact that 'e' is a free variable in the module.\n\n  try {\n  } catch (e) {\n  }\n  e;\n", "created": "2015-04-16 02:01:55"}, {"url": "https://github.com/google/caja/issues/311", "closed": "2015-04-16 02:01:43", "ttf": 0.0002777777777777778, "title": "Attachment problems", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 311](https://code.google.com/p/google-caja/issues/detail?id=311) created by erights on 2008-05-23T16:47:39.000Z:\n\nwhen run in the testbed applet\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction Point() {}\nPoint.prototype.getX = function(){return 3;}\nvar p = new Point();\np.getX;\n&lt;/script&gt;\n\nfails with an &quot;Internal: attach should not see non-methods: &quot; which\nindicates two other bugs:\n- attach should never have been called, since getX_canRead___ should have\n  been set by setMember.\n- attach of a simple-function should just return the simple-function rather\n  than complaining\n", "created": "2015-04-16 02:01:41"}, {"url": "https://github.com/google/caja/issues/308", "closed": "2015-04-16 02:01:29", "ttf": 0.0002777777777777778, "title": "Separate property read/set/call/enum grants from fasttrack ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 308](https://code.google.com/p/google-caja/issues/detail?id=308) created by mikesamuel on 2008-05-23T00:09:07.000Z:\n\nhttp://code.google.com/p/google-caja/wiki/ObjectProperties describes a\nscheme for managing access property access.\n\nOur current implementations of readPub,readProp,setPub,setProp,etc. don't\ndistinguish between grants where a container does\n  ___.allowRead(object, 'propertyName);\nand the fasttrack optimization whereby\n  ___.readPub(object, 'propertyName')\nmemoizes the fact that 'propertyName' was found to be readable.\n\nThis may cause problems whereby a property may be settable and callable at\nthe same time leading to methods being callable cross-class.\n\ncaja.js needs to be changed to separate the bookkeeping properties that\nrecord that a property is readable and ones that \n", "created": "2015-04-16 02:01:16"}, {"url": "https://github.com/google/caja/issues/307", "closed": "2015-04-16 02:01:16", "ttf": 0.0002777777777777778, "title": "Remove regexp/division-op abiguity in rendered code", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 307](https://code.google.com/p/google-caja/issues/detail?id=307) created by mikesamuel on 2008-05-22T22:26:12.000Z:\n\nIf we parenthesize the left operand to all division operators, and rewrite\nregular expression literals to (new RegExp(...)) to shut off ne vector of\nlexical ambiguity exploits.\n", "created": "2015-04-16 02:01:11"}, {"url": "https://github.com/google/caja/issues/301", "closed": "2015-04-16 02:00:17", "ttf": 0.0002777777777777778, "title": "Need to prevent shadowing of caja.def", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 301](https://code.google.com/p/google-caja/issues/detail?id=301) created by erights on 2008-05-21T00:43:49.000Z:\n\nBecause the cajoler has special exemptions for calls to caja.def, in effect\nrelying on it, but does not currently prohibit shadowing caja, as a result\nCaja's object encapsulation is easily thwarted. Caja does not yet have any\nencapsulation of protected object properties. The following code run in the\nCaja testbed applet prints 3469.\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction EncapsulatedObject(o) {\n  this.myO_ = o;\n  this.publiclyWritableField = null;\n}\nvar eo = new EncapsulatedObject(3469);\n\nfunction attacker() {\n  var caja = { def: function(sub, sup, methods) {\n    return methods.opener;\n  }};\n  var canOpener = caja.def(attacker, Object, {\n    opener: function() {\n      return this.myO_;\n    }\n  });\n  eo.publiclyWritableField = canOpener;\n  return eo.publiclyWritableField();\n}\nattacker();  \n&lt;/script&gt;\n", "created": "2015-04-16 02:00:06"}, {"url": "https://github.com/google/caja/issues/298", "closed": "2015-04-16 01:59:56", "ttf": 0.0002777777777777778, "title": "Hash value of #OOOOOO causes CssParser to crash", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 298](https://code.google.com/p/google-caja/issues/detail?id=298) created by jasvir on 2008-05-20T20:48:23.000Z:\n\nA color value of #OOOOOO (with the letter O rather than the number zero)\ncauses the CssParser to crash rather than add a message to the message queue.\n\nThis actually occurs in a real existing gadget.\n", "created": "2015-04-16 01:59:45"}, {"url": "https://github.com/google/caja/issues/297", "closed": "2015-04-16 01:59:45", "ttf": 0.0002777777777777778, "title": "cajoled recursive functions fail in IE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 297](https://code.google.com/p/google-caja/issues/detail?id=297) created by felix8a on 2008-05-20T20:06:58.000Z:\n\n```\nfunction foo(x) {\n    return x == 0 ? 0 : foo(0);\n}\nfoo(1);\n```\n\ncajoled, that works fine in firefox, but fails in IE7\n&quot;Untamed functions can't be called as simple functions&quot;.\nit's complaining about the inner call to foo().\n\nthe problem is, this statement\n\n```\nvar x = function y() { return y; };\n```\n\ncreates two different function objects, x and y.\n    x !== y\n    x !== x()\n    y === y()\n\nthe function foo cajoles to this:\n\n```\nIMPORTS___.foo = undefined;\nvar x0___;\nx0___ = ___.simpleFunc(function foo(x) {\n    return x == 0? 0: ___.asSimpleFunc(___.primFreeze(foo))(0);\n}),\nIMPORTS___.foo_canSet___\n   ? (IMPORTS___.foo = x0___)\n   : ___.setPub(IMPORTS___, 'foo', x0___);\n```\n\nIE creates two copies of the foo function.\n\none is the return value of the function expression, which gets passed to\nsimpleFunc, which attaches the **_SIMPLE_FUNC_** attribute.  and then that\nfunction gets assigned to IMPORTS___.foo.\n\nthe other is assigned to the local var foo.  it's the one used in the\nprimFreeze call, and it doesn't have the **_SIMPLE_FUNC_** attribute.\n", "created": "2015-04-16 01:59:23"}, {"url": "https://github.com/google/caja/issues/294", "closed": "2015-04-16 01:58:19", "ttf": 0.0002777777777777778, "title": "Caja produces pages that don't work if Javascript is disabled", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 294](https://code.google.com/p/google-caja/issues/detail?id=294) created by ben@links.org on 2008-05-20T12:15:56.000Z:\n\nThe problem is that, in order to preserve execution order properties, we\nemit HTML (and CSS?) as Javascript that builds the page.\n\nWe need to also (optionally) output just the HTML and CSS in a &lt;noscript&gt; tag.\n", "created": "2015-04-16 01:58:03"}, {"url": "https://github.com/google/caja/issues/292", "closed": "2015-04-16 01:57:48", "ttf": 0.0002777777777777778, "title": "\"abc\"[0] inconsistency", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 292](https://code.google.com/p/google-caja/issues/detail?id=292) created by felix8a on 2008-05-20T02:35:22.000Z:\n\nin firefox and safari, (str[k] === str.charAt(k))\nin IE and caja, (str[k] === undefined)\n\nthis is confusing mainly in that code which works uncajoled on\nfirefox/webkit will fail when cajoled, and it's difficult to peer into the\ncajoled code to figure out why it's failing.\n\nmaybe caja could emit a runtime warning for this?  I think it's unlikely\nthat anyone would write str[k] and expect it to do something other than\nstr.charAt(k).\n", "created": "2015-04-16 01:57:35"}, {"url": "https://github.com/google/caja/issues/291", "closed": "2015-04-16 01:57:34", "ttf": 0.0002777777777777778, "title": "regexp properties not whitelisted", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 291](https://code.google.com/p/google-caja/issues/detail?id=291) created by felix8a on 2008-05-20T01:20:14.000Z:\n\n&lt;script&gt;\nvar x = /abc/;\nx.source;\n&lt;/script&gt;\n\ncajoled, the result is undefined.\nthe expected result is 'abc'.\n\nes3 says x.prototype is RegExp.prototype, not RegExp.\n\nbut caja.js says\n  all2(allowRead, RegExp, [\n    'source', 'global', 'ignoreCase', 'multiline', 'lastIndex'\n  ]);\n\nso x.source isn't whitelisted, so it gets undefined.\n", "created": "2015-04-16 01:57:28"}, {"url": "https://github.com/google/caja/issues/290", "closed": "2015-04-16 01:57:28", "ttf": 0.0002777777777777778, "title": "Parser falls over with adding messages to the message queue", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 290](https://code.google.com/p/google-caja/issues/detail?id=290) created by jasvir on 2008-05-20T00:42:43.000Z:\n\nIn the following cases the parser throws a runtime exception which is not\ninherited from ParseException.  This borks the cajoling pipeline, gives no\nuseful error messages and fails to produce cajoled output.\n\nExamples:\n\nL:for(x in ((x = false)((x = undefined++))))export x;\njava.lang.IllegalArgumentException: UndefinedLiteral : undefined not an lvalue\n\nif([-0 for (y in window)]--) {with({window: @foo}){var x;{} } } else  if\n(new /\\* CONSTRUCT */ new Iterator(\nx.x = (/a/gi).apply)(void (let (x=3,y=\n4) x = 033))) break ;\n\njava.lang.IllegalArgumentException: ArrayConstructor not an lvalue\n\nswitch(false.throw(1e81)++) { case 0: case 1: L:if(({y:5, toString:\n&lt;&gt;&lt;x&gt;&lt;y/&gt;&lt;/x&gt;&lt;/&gt;})) {function (x) { return \n0; }import x.this; } else  if ((({y:5, toString: function() { return this;\n} }))) {export x;return x; } else {export _; };break; case 2: /_ HOISTY2\n*/M:for(let [x, x] = (&lt;x&gt;&lt;y/&gt;&lt;/x&gt;()) in  '' ) const y = .2;; case 3: import\nwindow.x\nM:switch(window) { case &lt;x&gt;&lt;y/&gt;&lt;/x&gt;: let window =  /x/g ; case &lt;y&gt;&lt;z/&gt;&lt;/y&gt;:\nvar this; } ; default: L:for(var x in ((function(id2) { return id2; })(\n/x/g )))return; }\njava.lang.IllegalArgumentException: SpecialOperation : FUNCTION_CALL not an\nlvalue\n", "created": "2015-04-16 01:57:21"}, {"url": "https://github.com/google/caja/issues/287", "closed": "2015-04-16 01:57:15", "ttf": 0.0002777777777777778, "title": "some rules assume matched subtrees are references without checking", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 287](https://code.google.com/p/google-caja/issues/detail?id=287) created by erights on 2008-05-18T00:19:55.000Z:\n\n&lt;script&gt;\ncaja.def(1+2,3+4);\n&lt;/script&gt;\n\ncauses\n\njava.lang.ClassCastException: com.google.caja.parser.js.SimpleOperation\n    at com.google.caja.parser.quasiliteral.Rule.getReferenceName(Rule.java:406)\n    at\ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$52.fire(DefaultCajaRewriter.java:1400)\n\nbecause rule callCajaDef2 calls getReferenceName without first testing\nwhether the args to caja.def are references (i.e., simple variable name\nexpressions).\n", "created": "2015-04-16 01:57:09"}, {"url": "https://github.com/google/caja/issues/286", "closed": "2015-04-16 01:57:09", "ttf": 0.0002777777777777778, "title": "*ViaThis rules should be after *BadInternal rules", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 286](https://code.google.com/p/google-caja/issues/detail?id=286) created by erights on 2008-05-17T23:34:24.000Z:\n\n&lt;script&gt;\nthis.freeze_;\n&lt;/script&gt;\n\nshould be rejected, since the &quot;this&quot; refers to IMPORTS___'s public\ninterface. Instead it cajoles to\n\n&lt;script type=&quot;text/javascript&quot;&gt;{\n  **_.loadModule(function (**_, IMPORTS___) {\n                   {\n                     caja.result(IMPORTS___.freeze__canRead___?\nIMPORTS___.freeze_: **_.readPub(IMPORTS**_, 'freeze_'));\n                   }\n                 });\n}&lt;/script&gt;\n\nwhich is at least harmless in this case, since freeze_ is not canRead.\nHowever, if IMPORTS___ has protected data members, they will be exposed.\n\nSimilarly,\n\n&lt;script&gt;\nthis.freeze_();\n&lt;/script&gt;\n\ncajoles to\n\n&lt;script type=&quot;text/javascript&quot;&gt;{\n  **_.loadModule(function (**_, IMPORTS___) {\n                   {\n                     caja.result((undefined, IMPORTS___.freeze__canCall___?\nIMPORTS___.freeze_(): **_.callPub(IMPORTS**_, 'freeze_', [ ])));\n                   }\n                 });\n}&lt;/script&gt;\n\nwhich is not harmless.\n", "created": "2015-04-16 01:57:06"}, {"url": "https://github.com/google/caja/issues/285", "closed": "2015-04-16 01:57:06", "ttf": 0.0002777777777777778, "title": "delete rules forgot to check for global this", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 285](https://code.google.com/p/google-caja/issues/detail?id=285) created by erights on 2008-05-17T23:25:57.000Z:\n\n&lt;script&gt;\ndelete this['x_'];\n&lt;/script&gt;\n\ncajoles to\n\n&lt;script type=&quot;text/javascript&quot;&gt;{\n  **_.loadModule(function (**_, IMPORTS___) {\n                   {\n                     caja.result(**_.deleteProp(IMPORTS**_, 'x_'));\n                   }\n                 });\n}&lt;/script&gt;\n\nwhich inappropriately uses deleteProp rather than deletePub. This is a\nsecurity hole.\n", "created": "2015-04-16 01:56:57"}, {"url": "https://github.com/google/caja/issues/284", "closed": "2015-04-16 01:56:57", "ttf": 0.0002777777777777778, "title": "Missing setIndexGlobal", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 284](https://code.google.com/p/google-caja/issues/detail?id=284) created by erights on 2008-05-17T23:01:30.000Z:\n\n&lt;script&gt;\nthis['x_'] = 3;\n&lt;/script&gt;\n\nshould be caught by a prior setIndexGlobal rule, but instead falls through\nto setIndexInternal, which cajoles it to\n\n&lt;script type=&quot;text/javascript&quot;&gt;{\n  **_.loadModule(function (**_, IMPORTS___) {\n                   {\n                     caja.result(**_.setProp(t**_, 'x_', 3));\n                   }\n                 });\n}&lt;/script&gt;\n\nwhich fails because t___ isn't defined.\n", "created": "2015-04-16 01:56:50"}, {"url": "https://github.com/google/caja/issues/283", "closed": "2015-04-16 01:56:50", "ttf": 0.0002777777777777778, "title": "Duplication of temporary variables", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 283](https://code.google.com/p/google-caja/issues/detail?id=283) created by davidsarah.hopwood on 2008-05-17T18:17:42.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Cajole\n\nvar obj = {i:0, m:function() {return this.i;}};\n\n<b>What is the expected output? What do you see instead?</b>\n\nThe actual output is\n  **_.loadModule(function (**_, IMPORTS___) {\n                   {\n                     var x0___;\n                     var x1___;\n                     x1___ = {\n                       'i': 0,\n                       'm': **_.xo4a(function () {\n                                       var t**_ = this;\n                                       var t___ = this;\n                                       return x0___ = t___,\nx0___.i_canRead___? x0___.i: **_.readPub(x0**_, 'i');\n                                     })\n                     }, IMPORTS___.obj_canSet___? (IMPORTS___.obj = x1___):\n**_.setPub(IMPORTS**_, 'obj', x1___);\n                   }\n                 });\n\nI did not expect 'var t___ = this;' to be duplicated. The duplication seems\nto be cosmetic in this case (the variables will be merged and then 'this'\nwill be assigned twice), but I'm not sure whether it is possible for the\nRHS to have side-effects.\n\n<b>What version of the product are you using? On what operating system?</b>\n\nTestbed applet, Rev 1369M built on 2008-05-14 03:02:50.\n", "created": "2015-04-16 01:56:46"}, {"url": "https://github.com/google/caja/issues/282", "closed": "2015-04-16 01:56:45", "ttf": 0.0002777777777777778, "title": "Static members don't take", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 282](https://code.google.com/p/google-caja/issues/detail?id=282) created by erights on 2008-05-17T01:15:06.000Z:\n\nFor example, cajoling the following in the Caja Testbed Applet in Firefox\nwith Firebug turned on results in the error &quot;Not settable: ((function\nPoint(var_args) { return new Point.make___(arguments); }:function)).area&quot;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction Point(x,y) {\n  this.x_ = x;\n  this.y_ = y;\n}\ncaja.def(Point, Object, {\n  toString: function() { return '&lt;'+this.x_+','+this.y_+'&gt;'; },\n  getX: function() {return this.x_;},\n  getY: function() {return this.y_;}\n}, {\n  area: function(pt) {\n    return pt.getX() \\* pt.getY();\n  }\n});\nvar pt1 = new Point(3,4)\n&lt;/script&gt;\n", "created": "2015-04-16 01:56:19"}, {"url": "https://github.com/google/caja/issues/277", "closed": "2015-04-16 01:56:00", "ttf": 0.0002777777777777778, "title": "spurious error messages for x__", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 277](https://code.google.com/p/google-caja/issues/detail?id=277) created by felix8a on 2008-05-15T09:52:28.000Z:\n\n&lt;script&gt;\nx__;\n&lt;/script&gt;\n\nFATAL_ERROR :2+1 - 4: Variables cannot end in &quot;**&quot;: Rule &quot;varBadSuffix&quot;,\nReference Identifier : x**\n:2: x__;\nFATAL_ERROR :2+4: INTERNAL COMPILER ERROR. Illegal identifier passed\nthrough from rewriter: Identifier : x__. Please report this error at:\nhttp://code.google.com/p/google-caja/\n:2: x__;\n\nthe second message is alarming and unnecessary.  maybe skip that stage if\nthere are already errors?\n", "created": "2015-04-16 01:55:51"}, {"url": "https://github.com/google/caja/issues/273", "closed": "2015-04-16 01:55:35", "ttf": 0.0002777777777777778, "title": "CajolingServiceTest cannot find Http classes", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 273](https://code.google.com/p/google-caja/issues/detail?id=273) created by ihab.awad on 2008-05-14T00:07:53.000Z:\n\nAs of r1366, CajolingServiceTest cannot find some Http classes when invoked\nvia &quot;ant runtests&quot;.\n\nAllTests:\n    [javac] Compiling 60 source files to\n/Users/ihab/svnclients/caja/google-caja/src/ant-lib\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:21:\npackage com.sun.net.httpserver does not exist\n    [javac] import com.sun.net.httpserver.HttpContext;\n    [javac]                               ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:22:\npackage com.sun.net.httpserver does not exist\n    [javac] import com.sun.net.httpserver.HttpExchange;\n    [javac]                               ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:23:\npackage com.sun.net.httpserver does not exist\n    [javac] import com.sun.net.httpserver.HttpHandler;\n    [javac]                               ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:24:\npackage com.sun.net.httpserver does not exist\n    [javac] import com.sun.net.httpserver.HttpServer;\n    [javac]                               ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:52:\ncannot find symbol\n    [javac] symbol  : class CajolingService\n    [javac] location: class\ncom.google.caja.opensocial.service.CajolingServiceTest\n    [javac]   private CajolingService service;\n    [javac]           ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:53:\ncannot find symbol\n    [javac] symbol  : class HttpServer\n    [javac] location: class\ncom.google.caja.opensocial.service.CajolingServiceTest\n    [javac]   private HttpServer httpServer;\n    [javac]           ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:56:\ncannot find symbol\n    [javac] symbol  : class HttpHandler\n    [javac] location: class\ncom.google.caja.opensocial.service.CajolingServiceTest\n    [javac]   private class TestingHttpHandler implements HttpHandler {\n    [javac]                                               ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:67:\ncannot find symbol\n    [javac] symbol  : class HttpExchange\n    [javac] location: class\ncom.google.caja.opensocial.service.CajolingServiceTest.TestingHttpHandler\n    [javac]    public void handle(HttpExchange ex) throws IOException {\n    [javac]                       ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:71:\npackage HttpStatus does not exist\n    [javac]      ex.sendResponseHeaders(HttpStatus.OK.value(), 0);\n    [javac]                                       ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:85:\ncannot find symbol\n    [javac] symbol  : class CajolingService\n    [javac] location: class\ncom.google.caja.opensocial.service.CajolingServiceTest\n    [javac]     service = new CajolingService();\n    [javac]                   ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:86:\ncannot find symbol\n    [javac] symbol  : variable HttpServer\n    [javac] location: class\ncom.google.caja.opensocial.service.CajolingServiceTest\n    [javac]     httpServer = HttpServer.create(new\nInetSocketAddress(HTTP_TEST_PORT),0);\n    [javac]                  ^\n    [javac]\n/Users/ihab/svnclients/caja/google-caja/src/javatests/com/google/caja/opensocial/service/CajolingServiceTest.java:88:\ncannot find symbol\n    [javac] symbol  : class HttpContext\n    [javac] location: class\ncom.google.caja.opensocial.service.CajolingServiceTest\n    [javac]     HttpContext ctx =\nhttpServer.createContext(&quot;/cajaservicetest&quot;, httpService);\n    [javac]     ^\n    [javac] 12 errors\n", "created": "2015-04-16 01:55:24"}, {"url": "https://github.com/google/caja/issues/269", "closed": "2015-04-16 01:55:11", "ttf": 0.0002777777777777778, "title": "Do not create bindings object in DefaultCajaRewriter rules", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 269](https://code.google.com/p/google-caja/issues/detail?id=269) created by ihab.awad on 2008-05-12T18:30:16.000Z:\n\nCurrent DefaultCajaRewriter rules create a new bindings object as part of\nboilerplate. This is unnecessary.\n", "created": "2015-04-16 01:55:07"}, {"url": "https://github.com/google/caja/issues/268", "closed": "2015-04-16 01:55:07", "ttf": 0.0002777777777777778, "title": "Dependency on apache ant breaks IDE build", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 268](https://code.google.com/p/google-caja/issues/detail?id=268) created by ihab.awad on 2008-05-12T17:39:57.000Z:\n\nAt r1357:\n- Class -.tools.AbstractCajaAntTask requires various org.apache.tools.ant\n  classes.\n- Class -.plugin.BuildServiceImplementation requires -.tools.BuildService.\n- The third_party/ directory does not contain JARs for Apache Ant.\n\nThis means there is not enough information in the source tree to easily\nbuild in an IDE without implicitly including Ant.\n", "created": "2015-04-16 01:54:56"}, {"url": "https://github.com/google/caja/issues/267", "closed": "2015-04-16 01:54:56", "ttf": 0.0002777777777777778, "title": "Attached methods can't be invoked reflectively.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 267](https://code.google.com/p/google-caja/issues/detail?id=267) created by mikesamuel on 2008-05-11T04:22:28.000Z:\n\n&lt;script&gt;\n  function C() {}\n  caja.def(C, Object, { method: function () {} });\n  var c = new C();\n  c.method.apply(c, []);\n&lt;/script&gt;\nfails with &quot;Internal: attach should not see non-methods: function () { }&quot;\n\nwhile adding this to method's body results in the error &quot;Methods can't be\ncalled as simple functions&quot;\n", "created": "2015-04-16 01:54:49"}, {"url": "https://github.com/google/caja/issues/266", "closed": "2015-04-16 01:54:49", "ttf": 0.0002777777777777778, "title": "call handlers cannot be applied reflectively", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 266](https://code.google.com/p/google-caja/issues/detail?id=266) created by mikesamuel on 2008-05-11T04:12:00.000Z:\n\n&lt;script&gt;\n  var arr = [];\n  arr.push.apply(arr, [1, 2, 3]);\n&lt;/script&gt;\n\nFails with an error because arr.push yields undefined.\n\ncaja.js uses a callHandler to make sure that the array is not frozen\n  ctor(Array, Object, 'Array');\n  all2(allowMethod, Array, [\n    'concat', 'join', 'slice', 'indexOf', 'lastIndexOf'\n  ]);\n  all2(allowMutator, Array, [\n    'pop', 'push', 'reverse', 'shift', 'splice', 'unshift'\n  ]);\nand this defeats attempts to use Array.push reflectively\n", "created": "2015-04-16 01:54:38"}, {"url": "https://github.com/google/caja/issues/265", "closed": "2015-04-16 01:54:38", "ttf": 0.0002777777777777778, "title": "Legal to declare function f_() but illegal to call.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 265](https://code.google.com/p/google-caja/issues/detail?id=265) created by mikesamuel on 2008-05-10T23:25:12.000Z:\n\nThe following cajoles in the testbed\n\n&lt;script&gt;\nfunction f_() {}\n&lt;/script&gt;\n\nbut the following\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nfunction f_() {}\nf_();\n&lt;/script&gt;\n\nfails with\n\nFATAL_ERROR :3+1 - 3: Globals cannot end in &quot;_&quot;: Rule &quot;varBadGlobalSuffix&quot;,\nReference\n  Identifier : f_\n:3: f_();\n    ^^\n", "created": "2015-04-16 01:54:31"}, {"url": "https://github.com/google/caja/issues/260", "closed": "2015-04-16 01:54:18", "ttf": 0.0002777777777777778, "title": "custom ant tasks broke 'ant jars' for me", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 260](https://code.google.com/p/google-caja/issues/detail?id=260) created by felix8a on 2008-05-09T06:52:06.000Z:\n\nMinifiedJs:\n\nBUILD FAILED\ngoogle-caja/trunk/src/build.xml:246: java.lang.IllegalAccessException:\nClass org.apache.tools.ant.IntrospectionHelper$CreateNestedCreator can not\naccess a member of class com.google.caja.tools.AbstractCajaAntTask with\nmodifiers &quot;public&quot;\n\nthis is with ant 1.7.0 and java 1.5 on Mac OS X 10.4.11\n\nfix is to declare AbstractCajaAntTask public\n", "created": "2015-04-16 01:54:10"}, {"url": "https://github.com/google/caja/issues/259", "closed": "2015-04-16 01:54:09", "ttf": 0.0002777777777777778, "title": "Review ihab/fix-static", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 259](https://code.google.com/p/google-caja/issues/detail?id=259) created by ihab.awad on 2008-05-08T23:59:56.000Z:\n\nAdded proper modifiers on a public constant and rewrapped some lines.\n", "created": "2015-04-16 01:54:07"}, {"url": "https://github.com/google/caja/issues/257", "closed": "2015-04-16 01:54:04", "ttf": 0.0002777777777777778, "title": "jasvir/fix-missing-classes@1310", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 257](https://code.google.com/p/google-caja/issues/detail?id=257) created by jasvir on 2008-05-08T22:27:11.000Z:\n\nDescription:\n\nAdded missing class which should have been part of the previous CL.\n- Fixes the resulting build breakage.\n", "created": "2015-04-16 01:54:02"}, {"url": "https://github.com/google/caja/issues/256", "closed": "2015-04-16 01:54:02", "ttf": 0.0002777777777777778, "title": "Missing class -.opensocial.service.UnsupportedContentTypeException", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 256](https://code.google.com/p/google-caja/issues/detail?id=256) created by ihab.awad on 2008-05-08T21:50:57.000Z:\n\nBreaks the build in IDEs. eep.\n", "created": "2015-04-16 01:53:57"}, {"url": "https://github.com/google/caja/issues/253", "closed": "2015-04-16 01:53:52", "ttf": 0.0002777777777777778, "title": "Eclipse plugin does no markup when there is an error parsing javascript", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 253](https://code.google.com/p/google-caja/issues/detail?id=253) created by jasvir on 2008-05-07T23:31:42.000Z:\n\nFelix pointed out that in the Eclipse plugin:\n\nordinary javascript errors seem to make it fail.\nif I have this:\n       a.x__ = 3;\n       aaa bbb ccc;\nI don't get any errors or warnings.\nif I delete the second line, I get an error about x__.\n", "created": "2015-04-16 01:53:43"}, {"url": "https://github.com/google/caja/issues/252", "closed": "2015-04-16 01:53:43", "ttf": 0.0002777777777777778, "title": "caja and domita disagree on id suffixes", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 252](https://code.google.com/p/google-caja/issues/detail?id=252) created by felix8a on 2008-05-07T23:03:51.000Z:\n\ncaja emits\n  a('id', 'foo-' + **_OUTERS**_.getIdClass___())\nit inserts a '-' before the suffix\n\ndomita getElementById does\n  id += idSuffix;\nit doesn't insert a '-' before the suffix.\n", "created": "2015-04-16 01:53:39"}, {"url": "https://github.com/google/caja/issues/249", "closed": "2015-04-16 01:53:27", "ttf": 0.0002777777777777778, "title": "JsLexer.isRegexp problem", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 249](https://code.google.com/p/google-caja/issues/detail?id=249) created by grayscale on 2008-05-07T11:53:12.000Z:\n\n&lt;script&gt;\na = min / max;\n&lt;/script&gt;\n\nFATAL_ERROR: a1.html:2+9 - 3+1: Unclosed string\n\n1, the error message is a little confusing, it's an unclosed regexp, not an\nunclosed string.\n\n2, the js lexer thinks the / is a regexp, because JsLexer.isRegexp is\nchecking if the previous token is a keyword using find() instead of\nmatches().  so 'min' matches the pattern, because 'in' is a keyword.\n", "created": "2015-04-16 01:53:18"}, {"url": "https://github.com/google/caja/issues/248", "closed": "2015-04-16 01:53:18", "ttf": 0.0002777777777777778, "title": "local var with same name as function", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect", "jQueryUI"], "commitsDetails": [], "body": "Original [issue 248](https://code.google.com/p/google-caja/issues/detail?id=248) created by felix8a on 2008-05-07T04:12:31.000Z:\n\nI keep running into this.  there are two cases\n\n<b>1.</b>\nfunction f() {}\nfunction g() { var f; }\n\nthat generates a lint warning\n  declaration of f masks declaration at ...\nI think it's a useless warning, because presumably someone declaring a\nlocal variable intends it to be local.\n\n2a. function f(f) {}\n2b. function f() { var f; }\n\nthose are fatal errors\n  f originally defined at ...\n\nwhile I'm not fond of that usage, it seems to be legal ecma-262.  it would\nbe nice if it were allowed, but I don't feel too strongly about this case,\nmainly because it doesn't happen that often.\n", "created": "2015-04-16 01:52:39"}, {"url": "https://github.com/google/caja/issues/245", "closed": "2015-04-16 01:52:16", "ttf": 0.0002777777777777778, "title": "r1275 caused 2 failing tests", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 245](https://code.google.com/p/google-caja/issues/detail?id=245) created by ihab.awad on 2008-05-06T05:24:58.000Z:\n\nCompiledPluginTest.{testLoop,testAttr} failing. Log below from test run at\nr1277. Assigning to submitter of CL causing the breakage.\n\n```\n *   *   *   *   *\n```\n\nLOG:Checkpoint: RewriteHtmlStage at T+0.048847 seconds\nLOG:Checkpoint: SanitizeHtmlStage at T+0.051039 seconds\nLOG:Checkpoint: CompileHtmlStage at T+0.054971 seconds\nLOG:Checkpoint: OpenTemplateStage at T+0.084395 seconds\nLOG:Checkpoint: ValidateCssStage at T+0.08487 seconds\nLOG:Checkpoint: CompileCssStage at T+0.092597 seconds\nLOG:Checkpoint: CompileGxpsStage at T+0.093025 seconds\nLOG:Checkpoint: CompileCssTemplatesStage at T+0.09759 seconds\nLOG:Checkpoint: ConsolidateCodeStage at T+0.097998 seconds\nLOG:Checkpoint: ValidateJavascriptStage at T+0.109 seconds\nLOG:Checkpoint: CheckForErrorsStage at T+0.285761 seconds\n{\n  _**.loadModule(function (___OUTERS**_) {\n                 });\n}\n\nCHECKPOINT : RewriteHtmlStage\nCHECKPOINT : SanitizeHtmlStage\nCHECKPOINT : CompileHtmlStage\nCHECKPOINT : OpenTemplateStage\nCHECKPOINT : ValidateCssStage\nCHECKPOINT : CompileCssStage\nCHECKPOINT : CompileGxpsStage\nCHECKPOINT : CompileCssTemplatesStage\nCHECKPOINT : ConsolidateCodeStage\nCHECKPOINT : ValidateJavascriptStage\nCHECKPOINT : CheckForErrorsStage\nconsole: testing test framework.  'foo' != 'bar'\njava.lang.Throwable\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at\nsun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n    at\nsun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n    at org.mozilla.javascript.MemberBox.newInstance(MemberBox.java:179)\n    at\norg.mozilla.javascript.NativeJavaClass.constructSpecific(NativeJavaClass.java:274)\n    at org.mozilla.javascript.NativeJavaClass.construct(NativeJavaClass.java:193)\n    at org.mozilla.javascript.ScriptRuntime.newObject(ScriptRuntime.java:2132)\n    at org.mozilla.javascript.gen.c6._c6(console-stubs.js:84)\n    at org.mozilla.javascript.gen.c6.call(console-stubs.js)\n    at org.mozilla.javascript.optimizer.OptRuntime.callProp0(OptRuntime.java:119)\n    at org.mozilla.javascript.gen.c13._c1(asserts.js:25)\n    at org.mozilla.javascript.gen.c13.call(asserts.js)\n    at org.mozilla.javascript.optimizer.OptRuntime.callName(OptRuntime.java:97)\n    at org.mozilla.javascript.gen.c13._c2(asserts.js:79)\n    at org.mozilla.javascript.gen.c13.call(asserts.js)\n    at org.mozilla.javascript.optimizer.OptRuntime.callName(OptRuntime.java:97)\n    at org.mozilla.javascript.gen.c16._c0(testTestFramework-tests.js:2)\n    at org.mozilla.javascript.gen.c16.call(testTestFramework-tests.js)\n    at org.mozilla.javascript.ContextFactory.doTopCall(ContextFactory.java:393)\n    at org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:2834)\n    at org.mozilla.javascript.gen.c16.call(testTestFramework-tests.js)\n    at org.mozilla.javascript.gen.c16.exec(testTestFramework-tests.js)\n    at org.mozilla.javascript.Context.evaluateReader(Context.java:1227)\n    at com.google.caja.util.RhinoTestBed.runJs(RhinoTestBed.java:73)\n    at\ncom.google.caja.plugin.CompiledPluginTest.execPlugin(CompiledPluginTest.java:399)\n    at\ncom.google.caja.plugin.CompiledPluginTest.testTestFramework(CompiledPluginTest.java:69)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at junit.framework.TestCase.runTest(TestCase.java:154)\n    at junit.framework.TestCase.runBare(TestCase.java:127)\n    at junit.framework.TestResult$1.protect(TestResult.java:106)\n    at junit.framework.TestResult.runProtected(TestResult.java:124)\n    at junit.framework.TestResult.run(TestResult.java:109)\n    at junit.framework.TestCase.run(TestCase.java:118)\n    at junit.framework.TestSuite.runTest(TestSuite.java:208)\n    at junit.framework.TestSuite.run(TestSuite.java:203)\n    at junit.framework.TestSuite.runTest(TestSuite.java:208)\n    at junit.framework.TestSuite.run(TestSuite.java:203)\n    at junit.textui.TestRunner.doRun(TestRunner.java:116)\n    at\ncom.intellij.rt.execution.junit.IdeaTestRunner.doRun(IdeaTestRunner.java:65)\n    at junit.textui.TestRunner.doRun(TestRunner.java:109)\n    at\ncom.intellij.rt.execution.junit.IdeaTestRunner.startRunnerWithArgs(IdeaTestRunner.java:24)\n    at\ncom.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:118)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)\nconsole: &lt;&lt;#foo#&gt;&gt; != &lt;&lt;#bar#&gt;&gt;\nLOG:Checkpoint: RewriteHtmlStage at T+2.2E-5 seconds\nLOG:Checkpoint: SanitizeHtmlStage at T+7.2E-4 seconds\nLOG:Checkpoint: CompileHtmlStage at T+0.001005 seconds\nLOG:Checkpoint: OpenTemplateStage at T+0.001372 seconds\nLOG:Checkpoint: ValidateCssStage at T+0.003625 seconds\nLOG:Checkpoint: CompileCssStage at T+0.014532 seconds\nLOG:Checkpoint: CompileGxpsStage at T+0.024913 seconds\nLOG:Checkpoint: CompileCssTemplatesStage at T+0.031342 seconds\nLOG:Checkpoint: ConsolidateCodeStage at T+0.031702 seconds\nLOG:Checkpoint: ValidateJavascriptStage at T+0.032205 seconds\nLOG:Checkpoint: CheckForErrorsStage at T+0.131537 seconds\n{\n  ___.loadModule(function (**_OUTERS**_) {\n                   **_OUTERS**_.main = undefined;\n                   var x0___;\n                   x0___ = **_.simpleFunc(function main() {\n                                            var x0**_;\n                                            var x1___;\n                                            var x2___;\n                                            var x3___;\n                                            x0___ = (x3___ =\n**_OUTERS**_.document_canRead___? **_OUTERS**_.document:\n_**.readPub(___OUTERS**_, 'document', true), x2___ = 'hello-base',\nx3___.getElementById_canCall___? x3___.getElementById(x2___):\n**_.callPub(x3**_, 'getElementById', [ x2___ ])), x1___ =\n**_.asSimpleFunc(**_.primFreeze(**_OUTERS**_.sayHello_canRead___?\n**_OUTERS**_.sayHello: _**.readPub(___OUTERS**_, 'sayHello', true)))(),\nx0___.innerHTML_canSet___? (x0___.innerHTML = x1___): **_.setPub(x0**_,\n'innerHTML', x1___);\n                                          }), **_OUTERS**_.main_canSet___?\n(**_OUTERS**_.main = x0___): _**.setPub(___OUTERS**_, 'main', x0___);\n                   **_OUTERS**_.sayHello = undefined;\n                   var x1___;\n                   x1___ = **_.simpleFunc(function sayHello() {\n                                            var out**_ = [ ];\n                                            out___.push('&lt;h1&gt;Hello\nWorld&lt;/h1&gt;');\n                                            return\n**_OUTERS**_.blessHtml___(out___.join(''));\n                                          }),\n**_OUTERS**_.sayHello_canSet___? (**_OUTERS**_.sayHello = x1___):\n_**.setPub(___OUTERS**_, 'sayHello', x1___);\n                   **_OUTERS**_.emitCss___([ '.', ' h1 {\\n  color: black;\\n\n background: white\\n}' ].join(**_OUTERS**_.getIdClass___()));\n                   ;\n                   ;\n                   var c1___ =\n_**.primFreeze(___OUTERS**_.sayHello_canRead___? **_OUTERS**_.sayHello:\n_**.readPub(___OUTERS**_, 'sayHello', true));\n                 });\n}\n\nCHECKPOINT : RewriteHtmlStage\nCHECKPOINT : SanitizeHtmlStage\nCHECKPOINT : CompileHtmlStage\nCHECKPOINT : OpenTemplateStage\nCHECKPOINT : ValidateCssStage\nCHECKPOINT : CompileCssStage\nCHECKPOINT : CompileGxpsStage\nCHECKPOINT : CompileCssTemplatesStage\nCHECKPOINT : ConsolidateCodeStage\nCHECKPOINT : ValidateJavascriptStage\nCHECKPOINT : CheckForErrorsStage\nLOG:Checkpoint: RewriteHtmlStage at T+1.9E-5 seconds\nLOG:Checkpoint: SanitizeHtmlStage at T+7.16E-4 seconds\nLOG:Checkpoint: CompileHtmlStage at T+0.001009 seconds\nLOG:Checkpoint: OpenTemplateStage at T+0.001297 seconds\nLOG:Checkpoint: ValidateCssStage at T+0.001765 seconds\nLOG:Checkpoint: CompileCssStage at T+0.002072 seconds\nLOG:Checkpoint: CompileGxpsStage at T+0.002322 seconds\nLOG:Checkpoint: CompileCssTemplatesStage at T+0.004429 seconds\nLOG:Checkpoint: ConsolidateCodeStage at T+0.005899 seconds\nLOG:Checkpoint: ValidateJavascriptStage at T+0.006471 seconds\nLOG:Checkpoint: CheckForErrorsStage at T+0.068658 seconds\n{\n  _**.loadModule(function (___OUTERS**_) {\n                   **_OUTERS**_.main = undefined;\n                   var x0___;\n                   x0___ = **_.simpleFunc(function main(c) {\n                                            var x0**_;\n                                            var x1___;\n                                            var x2___;\n                                            var x3___;\n                                            x1___ = (x3___ =\n**_OUTERS**_.document_canRead___? **_OUTERS**_.document:\n_**.readPub(___OUTERS**_, 'document', true), x2___ = 'base',\nx3___.getElementById_canCall___? x3___.getElementById(x2___):\n**_.callPub(x3**_, 'getElementById', [ x2___ ])), x0___ =\n**_.asSimpleFunc(**_.primFreeze(**_OUTERS**_.test_canRead___?\n**_OUTERS**_.test: _**.readPub(___OUTERS**_, 'test', true)))(c),\nx1___.setInnerHTML_canCall___? x1___.setInnerHTML(x0___):\n**_.callPub(x1**_, 'setInnerHTML', [ x0___ ]);\n                                          }), **_OUTERS**_.main_canSet___?\n(**_OUTERS**_.main = x0___): _**.setPub(___OUTERS**_, 'main', x0___);\n                   **_OUTERS**_.test = undefined;\n                   var x1___;\n                   x1___ = **_.simpleFunc(function test(c) {\n                                            var out**_ = [ ];\n                                            if (c) {\n                                              out___.push('Branch A');\n                                            } else {\n                                              out___.push('Branch B');\n                                            }\n                                            return\n**_OUTERS**_.blessHtml___(out___.join(''));\n                                          }), **_OUTERS**_.test_canSet___?\n(**_OUTERS**_.test = x1___): _**.setPub(___OUTERS**_, 'test', x1___);\n                   ;\n                   ;\n                   var c1___ = _**.primFreeze(___OUTERS**_.test_canRead___?\n**_OUTERS**_.test: _**.readPub(___OUTERS**_, 'test', true));\n                 });\n}\n\nCHECKPOINT : RewriteHtmlStage\nCHECKPOINT : SanitizeHtmlStage\nCHECKPOINT : CompileHtmlStage\nCHECKPOINT : OpenTemplateStage\nCHECKPOINT : ValidateCssStage\nCHECKPOINT : CompileCssStage\nCHECKPOINT : CompileGxpsStage\nCHECKPOINT : CompileCssTemplatesStage\nCHECKPOINT : ConsolidateCodeStage\nCHECKPOINT : ValidateJavascriptStage\nCHECKPOINT : CheckForErrorsStage\nLOG:Checkpoint: RewriteHtmlStage at T+2.1E-5 seconds\nLOG:Checkpoint: SanitizeHtmlStage at T+3.21E-4 seconds\nLOG:Checkpoint: CompileHtmlStage at T+7.08E-4 seconds\nLOG:Checkpoint: OpenTemplateStage at T+9.48E-4 seconds\nLOG:Checkpoint: ValidateCssStage at T+0.001277 seconds\nLOG:Checkpoint: CompileCssStage at T+0.001752 seconds\nLOG:Checkpoint: CompileGxpsStage at T+0.001985 seconds\nLOG:Checkpoint: CompileCssTemplatesStage at T+0.0049 seconds\nLOG:Checkpoint: ConsolidateCodeStage at T+0.005248 seconds\nLOG:Checkpoint: ValidateJavascriptStage at T+0.006062 seconds\nLOG:Checkpoint: CheckForErrorsStage at T+0.046983 seconds\n{\n  _**.loadModule(function (___OUTERS**_) {\n                   **_OUTERS**_.main = undefined;\n                   var x0___;\n                   x0___ = **_.simpleFunc(function main(items) {\n                                            var x0**_;\n                                            var x1___;\n                                            var x2___;\n                                            var x3___;\n                                            x1___ = (x3___ =\n**_OUTERS**_.document_canRead___? **_OUTERS**_.document:\n_**.readPub(___OUTERS**_, 'document', true), x2___ = 'base',\nx3___.getElementById_canCall___? x3___.getElementById(x2___):\n**_.callPub(x3**_, 'getElementById', [ x2___ ])), x0___ =\n**_.asSimpleFunc(**_.primFreeze(**_OUTERS**_.test_canRead___?\n**_OUTERS**_.test: _**.readPub(___OUTERS**_, 'test', true)))(items),\nx1___.setInnerHTML_canCall___? x1___.setInnerHTML(x0___):\n**_.callPub(x1**_, 'setInnerHTML', [ x0___ ]);\n                                          }), **_OUTERS**_.main_canSet___?\n(**_OUTERS**_.main = x0___): _**.setPub(___OUTERS**_, 'main', x0___);\n                   **_OUTERS**_.test = undefined;\n                   var x1___;\n                   x1___ = **_.simpleFunc(function test(items) {\n                                            var out**_ = [ ];\n                                            out___.push('&lt;ul&gt;');\n                                            var c2___ = items;\n                                            if (c2___) {\n                                              for (var c3___ in c2___) {\n                                                if (!**_.canEnumPub(c2**_,\nc3___)) continue;\n                                                var item = c2___[ c3___ ];\n                                                out___.push('&lt;li&gt;',\n**_OUTERS**_.html___(item), '&lt;/li&gt;');\n                                              }\n                                            }\n                                            out___.push('&lt;/ul&gt;');\n                                            return\n**_OUTERS**_.blessHtml___(out___.join(''));\n                                          }), **_OUTERS**_.test_canSet___?\n(**_OUTERS**_.test = x1___): _**.setPub(___OUTERS**_, 'test', x1___);\n                   ;\n                   ;\n                   var c1___ = _**.primFreeze(___OUTERS**_.test_canRead___?\n**_OUTERS**_.test: _**.readPub(___OUTERS**_, 'test', true));\n                 });\n}\n\nCHECKPOINT : RewriteHtmlStage\nCHECKPOINT : SanitizeHtmlStage\nCHECKPOINT : CompileHtmlStage\nCHECKPOINT : OpenTemplateStage\nCHECKPOINT : ValidateCssStage\nCHECKPOINT : CompileCssStage\nCHECKPOINT : CompileGxpsStage\nCHECKPOINT : CompileCssTemplatesStage\nCHECKPOINT : ConsolidateCodeStage\nCHECKPOINT : ValidateJavascriptStage\nCHECKPOINT : CheckForErrorsStage\n[Fatal Error] :1:44: The element type &quot;li&quot; must be terminated by the\nmatching end-tag &quot;&lt;/li&gt;&quot;.\n\norg.mozilla.javascript.WrappedException: Wrapped\norg.xml.sax.SAXParseException: The element type &quot;li&quot; must be terminated by\nthe matching end-tag &quot;&lt;/li&gt;&quot;. (/js/jqueryjs/runtest/env.js#&nbsp;137)\n    at org.mozilla.javascript.Context.throwAsScriptRuntimeEx(Context.java:1757)\n    at org.mozilla.javascript.MemberBox.invoke(MemberBox.java:170)\n    at org.mozilla.javascript.NativeJavaMethod.call(NativeJavaMethod.java:243)\n    at org.mozilla.javascript.optimizer.OptRuntime.call1(OptRuntime.java:66)\n    at org.mozilla.javascript.gen.c41._c19(/js/jqueryjs/runtest/env.js:137)\n    at org.mozilla.javascript.gen.c41.call(/js/jqueryjs/runtest/env.js)\n    at org.mozilla.javascript.BaseFunction.construct(BaseFunction.java:308)\n    at org.mozilla.javascript.ScriptRuntime.newObject(ScriptRuntime.java:2132)\n    at org.mozilla.javascript.gen.c41._c62(/js/jqueryjs/runtest/env.js:355)\n    at org.mozilla.javascript.gen.c41.call(/js/jqueryjs/runtest/env.js)\n    at org.mozilla.javascript.ScriptableObject.putImpl(ScriptableObject.java:2035)\n    at org.mozilla.javascript.ScriptableObject.put(ScriptableObject.java:312)\n    at org.mozilla.javascript.IdScriptableObject.put(IdScriptableObject.java:419)\n    at\norg.mozilla.javascript.ScriptableObject.putProperty(ScriptableObject.java:1656)\n    at org.mozilla.javascript.ScriptRuntime.setObjectProp(ScriptRuntime.java:1477)\n    at org.mozilla.javascript.ScriptRuntime.setObjectProp(ScriptRuntime.java:1467)\n    at org.mozilla.javascript.gen.c47._c51(domita.js:555)\n    at org.mozilla.javascript.gen.c47.call(domita.js)\n    at org.mozilla.javascript.optimizer.OptRuntime.call1(OptRuntime.java:66)\n    at org.mozilla.javascript.gen.c51._c2(testLoop-plugin.js:10)\n    at org.mozilla.javascript.gen.c51.call(testLoop-plugin.js)\n    at org.mozilla.javascript.optimizer.OptRuntime.call1(OptRuntime.java:66)\n    at org.mozilla.javascript.gen.c52._c0(testLoop-tests.js:6)\n    at org.mozilla.javascript.gen.c52.call(testLoop-tests.js)\n    at org.mozilla.javascript.ContextFactory.doTopCall(ContextFactory.java:393)\n    at org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:2834)\n    at org.mozilla.javascript.gen.c52.call(testLoop-tests.js)\n    at org.mozilla.javascript.gen.c52.exec(testLoop-tests.js)\n    at org.mozilla.javascript.Context.evaluateReader(Context.java:1227)\n    at com.google.caja.util.RhinoTestBed.runJs(RhinoTestBed.java:73)\n    at\ncom.google.caja.plugin.CompiledPluginTest.execPlugin(CompiledPluginTest.java:399)\n    at\ncom.google.caja.plugin.CompiledPluginTest.testLoop(CompiledPluginTest.java:148)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)\nCaused by: org.xml.sax.SAXParseException: The element type &quot;li&quot; must be\nterminated by the matching end-tag &quot;&lt;/li&gt;&quot;.\n    at\ncom.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:239)\n    at\ncom.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:283)\n    at javax.xml.parsers.DocumentBuilder.parse(DocumentBuilder.java:124)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at org.mozilla.javascript.MemberBox.invoke(MemberBox.java:155)\n    ... 50 more\n\nLOG:Checkpoint: RewriteHtmlStage at T+2.2E-5 seconds\nLOG:Checkpoint: SanitizeHtmlStage at T+2.91E-4 seconds\nLOG:Checkpoint: CompileHtmlStage at T+5.11E-4 seconds\nLOG:Checkpoint: OpenTemplateStage at T+7.39E-4 seconds\nLOG:Checkpoint: ValidateCssStage at T+0.00114 seconds\nLOG:Checkpoint: CompileCssStage at T+0.001681 seconds\nLOG:Checkpoint: CompileGxpsStage at T+0.001909 seconds\nLOG:Checkpoint: CompileCssTemplatesStage at T+0.036986 seconds\nLOG:Checkpoint: ConsolidateCodeStage at T+0.047038 seconds\nLOG:Checkpoint: ValidateJavascriptStage at T+0.048265 seconds\nLOG:Checkpoint: CheckForErrorsStage at T+0.094021 seconds\n{\n  _**.loadModule(function (___OUTERS**_) {\n                   **_OUTERS**_.main = undefined;\n                   var x0___;\n                   x0___ = **_.simpleFunc(function main() {\n                                            var x0**_;\n                                            var x1___;\n                                            var x2___;\n                                            var x3___;\n                                            x1___ = (x3___ =\n**_OUTERS**_.document_canRead___? **_OUTERS**_.document:\n_**.readPub(___OUTERS**_, 'document', true), x2___ = 'base',\nx3___.getElementById_canCall___? x3___.getElementById(x2___):\n**_.callPub(x3**_, 'getElementById', [ x2___ ])), x0___ =\n**_.asSimpleFunc(**_.primFreeze(**_OUTERS**_.test_canRead___?\n**_OUTERS**_.test: _**.readPub(___OUTERS**_, 'test',\ntrue)))('foo.html?a=b&amp;c=d', '&quot;hover text&quot;', [ 'class1', 'class2' ]),\nx1___.setInnerHTML_canCall___? x1___.setInnerHTML(x0___):\n**_.callPub(x1**_, 'setInnerHTML', [ x0___ ]);\n                                          }), **_OUTERS**_.main_canSet___?\n(**_OUTERS**_.main = x0___): _**.setPub(___OUTERS**_, 'main', x0___);\n                   **_OUTERS**_.test = undefined;\n                   var x1___;\n                   x1___ = **_.simpleFunc(function test(url, altText,\nclasses) {\n                                            var out**_ = [ ];\n                                            out___.push('&lt;a href=&quot;');\n                                            var c2___ = [ ];\n                                            c2___.push(url);\n\nout___.push(**_OUTERS**_.htmlAttr___(**_OUTERS**_.rewriteUri___(c2___.join(''))),\n'&quot; title=&quot;', **_OUTERS**_.htmlAttr___(altText), '&quot; id=&quot;');\n                                            var c3___ = [ ];\n                                            c3___.push('id');\n\nout___.push(**_OUTERS**_.htmlAttr___(**_OUTERS**_.suffix___(c3___.join(''))),\n'&quot; class=&quot;');\n                                            var c4___ = [ ];\n                                            var c5___ = classes;\n                                            if (c5___) {\n                                              for (var c6___ in c5___) {\n                                                if (!**_.canEnumPub(c5**_,\nc6___)) continue;\n                                                var className = c5___[ c6___ ];\n                                                c4___.push(className, ' ');\n                                              }\n                                            }\n\nout___.push(**_OUTERS**_.htmlAttr___(**_OUTERS**_.ident___(c4___.join(''))),\n'&quot; target=&quot;_new&quot;&gt;Clicky\\n  &lt;/a&gt;');\n                                            return\n___OUTERS___.blessHtml___(out___.join(''));\n                                          }), **_OUTERS**_.test_canSet___?\n(**_OUTERS**_.test = x1___): _**.setPub(___OUTERS**_, 'test', x1___);\n                   ;\n                   ;\n                   var c1___ = _**.primFreeze(___OUTERS**_.test_canRead___?\n**_OUTERS**_.test: _**.readPub(___OUTERS**_, 'test', true));\n                 });\n}\n\nCHECKPOINT : RewriteHtmlStage\nCHECKPOINT : SanitizeHtmlStage\nCHECKPOINT : CompileHtmlStage\nCHECKPOINT : OpenTemplateStage\nCHECKPOINT : ValidateCssStage\nCHECKPOINT : CompileCssStage\nCHECKPOINT : CompileGxpsStage\nCHECKPOINT : CompileCssTemplatesStage\nCHECKPOINT : ConsolidateCodeStage\nCHECKPOINT : ValidateJavascriptStage\nCHECKPOINT : CheckForErrorsStage\njava.lang.Throwable\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at\nsun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n    at\nsun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:513)\n    at org.mozilla.javascript.MemberBox.newInstance(MemberBox.java:179)\n    at\norg.mozilla.javascript.NativeJavaClass.constructSpecific(NativeJavaClass.java:274)\n    at org.mozilla.javascript.NativeJavaClass.construct(NativeJavaClass.java:193)\n    at org.mozilla.javascript.ScriptRuntime.newObject(ScriptRuntime.java:2132)\n    at org.mozilla.javascript.gen.c54._c6(console-stubs.js:84)\n    at org.mozilla.javascript.gen.c54.call(console-stubs.js)\n    at org.mozilla.javascript.optimizer.OptRuntime.callProp0(OptRuntime.java:119)\n    at org.mozilla.javascript.gen.c61._c1(asserts.js:25)\n    at org.mozilla.javascript.gen.c61.call(asserts.js)\n    at org.mozilla.javascript.optimizer.OptRuntime.callName(OptRuntime.java:97)\n    at org.mozilla.javascript.gen.c61._c2(asserts.js:79)\n    at org.mozilla.javascript.gen.c61.call(asserts.js)\n    at org.mozilla.javascript.optimizer.OptRuntime.callName(OptRuntime.java:97)\n    at org.mozilla.javascript.gen.c64._c0(testAttr-tests.js:7)\n    at org.mozilla.javascript.gen.c64.call(testAttr-tests.js)\n    at org.mozilla.javascript.ContextFactory.doTopCall(ContextFactory.java:393)\n    at org.mozilla.javascript.ScriptRuntime.doTopCall(ScriptRuntime.java:2834)\n    at org.mozilla.javascript.gen.c64.call(testAttr-tests.js)\n    at org.mozilla.javascript.gen.c64.exec(testAttr-tests.js)\n    at org.mozilla.javascript.Context.evaluateReader(Context.java:1227)\n    at com.google.caja.util.RhinoTestBed.runJs(RhinoTestBed.java:73)\n    at\ncom.google.caja.plugin.CompiledPluginTest.execPlugin(CompiledPluginTest.java:399)\n    at\ncom.google.caja.plugin.CompiledPluginTest.testAttr(CompiledPluginTest.java:181)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at junit.framework.TestCase.runTest(TestCase.java:154)\n    at junit.framework.TestCase.runBare(TestCase.java:127)\n    at junit.framework.TestResult$1.protect(TestResult.java:106)\n    at junit.framework.TestResult.runProtected(TestResult.java:124)\n    at junit.framework.TestResult.run(TestResult.java:109)\n    at junit.framework.TestCase.run(TestCase.java:118)\n    at junit.framework.TestSuite.runTest(TestSuite.java:208)\n    at junit.framework.TestSuite.run(TestSuite.java:203)\n    at junit.framework.TestSuite.runTest(TestSuite.java:208)\n    at junit.framework.TestSuite.run(TestSuite.java:203)\n    at junit.textui.TestRunner.doRun(TestRunner.java:116)\n    at\ncom.intellij.rt.execution.junit.IdeaTestRunner.doRun(IdeaTestRunner.java:65)\n    at junit.textui.TestRunner.doRun(TestRunner.java:109)\n    at\ncom.intellij.rt.execution.junit.IdeaTestRunner.startRunnerWithArgs(IdeaTestRunner.java:24)\n    at\ncom.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:118)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)\nconsole: &lt;&lt;&lt;a class=&quot;class1 class2&quot;\nhref=&quot;http://proxy/?uri=#foo.htmlundefinedundefinedundefinedundefined&quot;\nid=&quot;id-post&quot; target=&quot;_new#&quot; title=&quot;&amp;quot;hover text&amp;quot;&quot;&gt;Clicky\nconsole:   &lt;/a&gt;&gt;&gt; != &lt;&lt;&lt;a class=&quot;class1 class2&quot;\nhref=&quot;http://proxy/?uri=#httpundefinedundefinedundefinedundefinedundefinedundefined.htmlundefinedundefinedundefinedundefined&quot;\nid=&quot;id-post-post&quot; target=&quot;_blank#&quot; title=&quot;&amp;quot;hover text&amp;quot;&quot;&gt;Clicky\nconsole:   &lt;/a&gt;&gt;&gt;\n\njunit.framework.AssertionFailedError: Error: &lt;&lt;&lt;a class=&quot;class1 class2&quot;\nhref=&quot;http://proxy/?uri=#foo.html%3fa%3db%26c%3dd&quot; id=&quot;id-post&quot;\ntarget=&quot;_new#&quot; title=&quot;&amp;quot;hover text&amp;quot;&quot;&gt;Clicky\n  &lt;/a&gt;&gt;&gt; != &lt;&lt;&lt;a class=&quot;class1 class2&quot;\nhref=&quot;http://proxy/?uri=#http%3a%2f%2fproxy%2f%3furi%3dfoo.html%253fa%253db%2526c%253dd&quot;\nid=&quot;id-post-post&quot; target=&quot;_blank#&quot; title=&quot;&amp;quot;hover text&amp;quot;&quot;&gt;Clicky\n  &lt;/a&gt;&gt;&gt;\n    at asserts.js:28\n    at asserts.js:79\n    at testAttr-tests.js:7\n\n```\nat com.google.caja.util.RhinoTestBed.runJs(RhinoTestBed.java:79)\nat\n```\n\ncom.google.caja.plugin.CompiledPluginTest.execPlugin(CompiledPluginTest.java:399)\n    at\ncom.google.caja.plugin.CompiledPluginTest.testAttr(CompiledPluginTest.java:181)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)\n\nLOG:Checkpoint: RewriteHtmlStage at T+2.0E-5 seconds\nLOG:Checkpoint: SanitizeHtmlStage at T+4.14E-4 seconds\nLOG:Checkpoint: CompileHtmlStage at T+6.43E-4 seconds\nLOG:Checkpoint: OpenTemplateStage at T+8.92E-4 seconds\nLOG:Checkpoint: ValidateCssStage at T+0.001193 seconds\nLOG:Checkpoint: CompileCssStage at T+0.001549 seconds\nLOG:Checkpoint: CompileGxpsStage at T+0.001772 seconds\nLOG:Checkpoint: CompileCssTemplatesStage at T+0.006316 seconds\nLOG:Checkpoint: ConsolidateCodeStage at T+0.006603 seconds\nLOG:Checkpoint: ValidateJavascriptStage at T+0.007125 seconds\nLOG:Checkpoint: CheckForErrorsStage at T+0.088157 seconds\n{\n  _**.loadModule(function (___OUTERS**_) {\n                   **_OUTERS**_.main = undefined;\n                   var x0___;\n                   x0___ = **_.simpleFunc(function main() {\n                                            var x0**_;\n                                            var x1___;\n                                            var x2___;\n                                            var x3___;\n                                            x1___ = (x3___ =\n**_OUTERS**_.document_canRead___? **_OUTERS**_.document:\n_**.readPub(___OUTERS**_, 'document', true), x2___ = 'base',\nx3___.getElementById_canCall___? x3___.getElementById(x2___):\n**_.callPub(x3**_, 'getElementById', [ x2___ ])), x0___ =\n**_.asSimpleFunc(**_.primFreeze(**_OUTERS**_.callerTemplate_canRead___?\n**_OUTERS**_.callerTemplate: _**.readPub(___OUTERS**_, 'callerTemplate',\ntrue)))(), x1___.setInnerHTML_canCall___? x1___.setInnerHTML(x0___):\n**_.callPub(x1**_, 'setInnerHTML', [ x0___ ]);\n                                          }), **_OUTERS**_.main_canSet___?\n(**_OUTERS**_.main = x0___): _**.setPub(___OUTERS**_, 'main', x0___);\n                   **_OUTERS**_.callerTemplate = undefined;\n                   var x1___;\n                   x1___ = **_.simpleFunc(function callerTemplate() {\n                                            var out**_ = [ ];\n\nout___.push(**_OUTERS**_.html___(c2___.call(**_OUTERS**_, 1, 2)),\n**_OUTERS**_.html___(c2___.call(**_OUTERS**_, 1, 2)));\n                                            return\n**_OUTERS**_.blessHtml___(out___.join(''));\n                                          }),\n**_OUTERS**_.callerTemplate_canSet___? (**_OUTERS**_.callerTemplate =\nx1___): _**.setPub(___OUTERS**_, 'callerTemplate', x1___);\n                   **_OUTERS**_.calleeTemplate = undefined;\n                   var x2___;\n                   x2___ = **_.simpleFunc(function calleeTemplate(x, y) {\n                                            var out**_ = [ ];\n                                            out___.push('(',\n**_OUTERS**_.html___(x), ',', **_OUTERS**_.html___(y), ')');\n                                            return\n**_OUTERS**_.blessHtml___(out___.join(''));\n                                          }),\n**_OUTERS**_.calleeTemplate_canSet___? (**_OUTERS**_.calleeTemplate =\nx2___): _**.setPub(___OUTERS**_, 'calleeTemplate', x2___);\n                   ;\n                   ;\n                   var c1___ =\n_**.primFreeze(___OUTERS**_.callerTemplate_canRead___?\n**_OUTERS**_.callerTemplate: _**.readPub(___OUTERS**_, 'callerTemplate',\ntrue));\n                   ;\n                   var c2___ =\n_**.primFreeze(___OUTERS**_.calleeTemplate_canRead___?\n**_OUTERS**_.calleeTemplate: _**.readPub(___OUTERS**_, 'calleeTemplate',\ntrue));\n                 });\n}\n\nCHECKPOINT : RewriteHtmlStage\nCHECKPOINT : SanitizeHtmlStage\nCHECKPOINT : CompileHtmlStage\nCHECKPOINT : OpenTemplateStage\nCHECKPOINT : ValidateCssStage\nCHECKPOINT : CompileCssStage\nCHECKPOINT : CompileGxpsStage\nCHECKPOINT : CompileCssTemplatesStage\nCHECKPOINT : ConsolidateCodeStage\nCHECKPOINT : ValidateJavascriptStage\nCHECKPOINT : CheckForErrorsStage\nLOG:Checkpoint: RewriteHtmlStage at T+1.9E-5 seconds\nLOG:Checkpoint: SanitizeHtmlStage at T+2.68E-4 seconds\nLOG:Checkpoint: CompileHtmlStage at T+4.84E-4 seconds\nLOG:Checkpoint: OpenTemplateStage at T+7.13E-4 seconds\nLOG:Checkpoint: ValidateCssStage at T+0.001021 seconds\nLOG:Checkpoint: CompileCssStage at T+0.004457 seconds\nLOG:Checkpoint: CompileGxpsStage at T+0.004751 seconds\nLOG:Checkpoint: CompileCssTemplatesStage at T+0.005497 seconds\nLOG:Checkpoint: ConsolidateCodeStage at T+0.015564 seconds\nLOG:Checkpoint: ValidateJavascriptStage at T+0.016447 seconds\nLOG:Checkpoint: CheckForErrorsStage at T+0.063846 seconds\n{\n  _**.loadModule(function (___OUTERS**_) {\n                   **_OUTERS**_.styles = undefined;\n                   var x0___;\n                   x0___ = _**.simpleFunc(function styles(left, right,\nmargin, light, dark) {\n                                            return\n___OUTERS**_.blessCss___('left', **_OUTERS**_.cssNumber___(left + margin) +\n'px', 'width', **_OUTERS**_.cssNumber___(right - left - 2 \\* margin) + 'px',\n'margin', **_OUTERS**_.cssNumber___(margin) + 'px' + ' ' +\n**_OUTERS**_.cssNumber___(margin) + 'px' + ' ' +\n**_OUTERS**_.cssNumber___(margin) + 'px' + ' ' +\n**_OUTERS**_.cssNumber___(margin) + 'px', 'color',\n**_OUTERS**_.cssColor___((light + dark) / 2));\n                                          }),\n**_OUTERS**_.styles_canSet___? (**_OUTERS**_.styles = x0___):\n_**.setPub(___OUTERS**_, 'styles', x0___);\n                   **_OUTERS**_.main = undefined;\n                   var x1___;\n                   x1___ = **_.simpleFunc(function main() {\n                                            var x0**_;\n                                            var x1___;\n                                            var x2___;\n                                            var x3___;\n                                            x1___ = (x3___ =\n**_OUTERS**_.document_canRead___? **_OUTERS**_.document:\n_**.readPub(___OUTERS**_, 'document', true), x2___ = 'base',\nx3___.getElementById_canCall___? x3___.getElementById(x2___):\n**_.callPub(x3**_, 'getElementById', [ x2___ ])), x0___ =\n**_.asSimpleFunc(**_.primFreeze(**_OUTERS**_.styles_canRead___?\n**_OUTERS**_.styles: _**.readPub(___OUTERS**_, 'styles', true)))(20, 60, 5,\n8425632, 12636384), x1___.setStyle_canCall___? x1___.setStyle(x0___):\n**_.callPub(x1**_, 'setStyle', [ x0___ ]);\n                                          }), **_OUTERS**_.main_canSet___?\n(**_OUTERS**_.main = x1___): _**.setPub(___OUTERS**_, 'main', x1___);\n                   ;\n                   ;\n                 });\n}\n\nCHECKPOINT : RewriteHtmlStage\nCHECKPOINT : SanitizeHtmlStage\nCHECKPOINT : CompileHtmlStage\nCHECKPOINT : OpenTemplateStage\nCHECKPOINT : ValidateCssStage\nCHECKPOINT : CompileCssStage\nCHECKPOINT : CompileGxpsStage\nCHECKPOINT : CompileCssTemplatesStage\nCHECKPOINT : ConsolidateCodeStage\nCHECKPOINT : ValidateJavascriptStage\nCHECKPOINT : CheckForErrorsStage\n", "created": "2015-04-16 01:52:12"}, {"url": "https://github.com/google/caja/issues/243", "closed": "2015-04-16 01:52:09", "ttf": 0.0002777777777777778, "title": "caja.freeze should accept functions", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 243](https://code.google.com/p/google-caja/issues/detail?id=243) created by erights on 2008-05-05T22:09:48.000Z:\n\nRight now, caja.freeze only accepts JSON-containers (objects that directly\ninherit from Object or Array). It should also accept functions, so that\nthey can be frozen whether the code is cajoled or not. Right now, functions\nwill often be implicitly frozen by cajoled code, but wont be if the code is\nrun uncajoled.\n", "created": "2015-04-16 01:52:02"}, {"url": "https://github.com/google/caja/issues/242", "closed": "2015-04-16 01:52:02", "ttf": 0.0002777777777777778, "title": "Virtually add Function.prototype.bind() to caja.js for caja code", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 242](https://code.google.com/p/google-caja/issues/detail?id=242) created by erights on 2008-05-02T23:43:28.000Z:\n\nYet another element from the obsolete erights/first-class branch that needs\nto be revived for trunk.\n\nBy &quot;virtually add&quot;, we mean: use the fault handler so that it appears to be\nthere for Caja code but is absent for uncajoled Javascript code.\n", "created": "2015-04-16 01:51:53"}, {"url": "https://github.com/google/caja/issues/234", "closed": "2015-04-16 01:51:13", "ttf": 0.0002777777777777778, "title": "Compiler: OutOfMemoryError", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 234](https://code.google.com/p/google-caja/issues/detail?id=234) created by tobie.langel on 2008-04-30T01:32:10.000Z:\n\nGetting the following error when compiling the attached file:\n\nException in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space\n        at java.lang.Class.getDeclaredConstructors0(Native Method)\n        at java.lang.Class.privateGetDeclaredConstructors(Class.java:2357)\n        at java.lang.Class.getDeclaredConstructors(Class.java:1808)\n        at com.google.caja.parser.ParseTreeNodes.declaredCtors(ParseTreeNodes.java:122)\n        at com.google.caja.parser.ParseTreeNodes.findCloneCtor(ParseTreeNodes.java:108)\n        at com.google.caja.parser.ParseTreeNodes.newNodeInstance(ParseTreeNodes.java:52)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:344)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at com.google.caja.parser.AbstractParseTreeNode.clone(AbstractParseTreeNode.java:342)\n        at \ncom.google.caja.parser.quasiliteral.MultipleQuasiHole.createSubstitutes(MultipleQuasiHole.java:4\n9)\n        at \ncom.google.caja.parser.quasiliteral.SimpleQuasiNode.createSubstitutes(SimpleQuasiNode.java:90\n)\n        at com.google.caja.parser.quasiliteral.QuasiNode.substituteHere(QuasiNode.java:85)\n        at com.google.caja.parser.quasiliteral.QuasiBuilder.subst(QuasiBuilder.java:105)\n        at com.google.caja.parser.quasiliteral.QuasiBuilder.substV(QuasiBuilder.java:126)\n        at \ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$1.fire(DefaultCajaRewriter.java:99)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:90)\n", "created": "2015-04-16 01:50:53"}, {"url": "https://github.com/google/caja/issues/233", "closed": "2015-04-16 01:50:53", "ttf": 0.0002777777777777778, "title": "compiler throws java.lang.IllegalArgumentException", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 233](https://code.google.com/p/google-caja/issues/detail?id=233) created by tobie.langel on 2008-04-29T17:05:54.000Z:\n\nWhen compiling attached file, the following error is thrown.\n\njava.lang.IllegalArgumentException: Too many children 3 for operator COMMA\n        at com.google.caja.parser.js.Operation.childrenChanged(Operation.java:45)\n        at \ncom.google.caja.parser.AbstractParseTreeNode$MutationImpl.execute(AbstractParseTreeNode.ja\nva:389)\n        at com.google.caja.parser.js.Operation.&lt;init&gt;(Operation.java:34)\n        at com.google.caja.parser.js.SpecialOperation.&lt;init&gt;(SpecialOperation.java:30)\n        at com.google.caja.parser.js.Operation.create(Operation.java:86)\n        at \ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$69.fire(DefaultCajaRewriter.java:1947)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:90)\n        at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:161)\n        at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:151)\n        at \ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$74.fire(DefaultCajaRewriter.java:2088)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:90)\n        at \ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$63.fire(DefaultCajaRewriter.java:1712)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:90)\n        at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:161)\n        at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:151)\n        at \ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$74.fire(DefaultCajaRewriter.java:2088)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:90)\n        at \ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$68.fire(DefaultCajaRewriter.java:1886)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:90)\n        at com.google.caja.parser.quasiliteral.Rule.reuse(Rule.java:242)\n        at com.google.caja.parser.quasiliteral.Rule.reuseAll(Rule.java:264)\n        at \ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$56.fire(DefaultCajaRewriter.java:1511)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:90)\n        at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:161)\n        at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:151)\n        at \ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$74.fire(DefaultCajaRewriter.java:2088)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:90)\n        at \ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$1.fire(DefaultCajaRewriter.java:94)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:90)\n        at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:72)\n        at com.google.caja.plugin.ExpressionSanitizerCaja.sanitize(ExpressionSanitizerCaja.java:37)\n        at \ncom.google.caja.plugin.stages.ValidateJavascriptStage.apply(ValidateJavascriptStage.java:40)\n        at \ncom.google.caja.plugin.stages.ValidateJavascriptStage.apply(ValidateJavascriptStage.java:31)\n        at com.google.caja.util.Pipeline.applyStage(Pipeline.java:41)\n        at com.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:121)\n        at com.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:115)\n        at com.google.caja.util.Pipeline.apply(Pipeline.java:35)\n        at com.google.caja.plugin.PluginCompiler.run(PluginCompiler.java:176)\n        at com.google.caja.plugin.PluginCompilerMain.run(PluginCompilerMain.java:98)\n        at com.google.caja.plugin.PluginCompilerMain.main(PluginCompilerMain.java:335)\n", "created": "2015-04-16 01:50:41"}, {"url": "https://github.com/google/caja/issues/232", "closed": "2015-04-16 01:50:41", "ttf": 0.0002777777777777778, "title": "Compiler: unclear error message", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 232](https://code.google.com/p/google-caja/issues/detail?id=232) created by tobie.langel on 2008-04-29T17:02:14.000Z:\n\nWhen compiling the attached file, the following message appears. Issue is unclear.\n\nLINT: prototype.js:44+22: Declaration of klass masks declaration at prototype.js:44+5\n", "created": "2015-04-16 01:50:39"}, {"url": "https://github.com/google/caja/issues/231", "closed": "2015-04-16 01:50:39", "ttf": 0.0002777777777777778, "title": "Compiler doesn't allow reference to __proto__ property of elements.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 231](https://code.google.com/p/google-caja/issues/detail?id=231) created by tobie.langel on 2008-04-29T16:29:04.000Z:\n\nFATAL_ERROR: prototype.js:24+7 - 46: Properties cannot end in &quot;**&quot;: Rule &quot;readBadSuffix&quot;, \nSpecialOperation : MEMBER_ACCESS\n  SpecialOperation : FUNCTION_CALL\n    SpecialOperation : MEMBER_ACCESS\n      Reference\n        Identifier : document\n      Reference\n        Identifier : createElement\n    StringLiteral : 'div'\n  Reference\n    Identifier : __proto**\n\nFor reference: line 24 of prototype.js reads:\n\n  document.createElement('div').**proto** &amp;&amp;\n", "created": "2015-04-16 01:50:28"}, {"url": "https://github.com/google/caja/issues/228", "closed": "2015-04-16 01:50:23", "ttf": 0.0002777777777777778, "title": "Revert RuleDoclet", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 228](https://code.google.com/p/google-caja/issues/detail?id=228) created by jasvir on 2008-04-28T22:54:55.000Z:\n\nDoclets dependence on tools.jar breaks the build on eclipse and IntelliJ\n(but not ant).\n\nFor now:\n- Reverting RuleDoclet\n- Adding task to reorganize build directory\n", "created": "2015-04-16 01:50:20"}, {"url": "https://github.com/google/caja/issues/221", "closed": "2015-04-16 01:49:50", "ttf": 0.0002777777777777778, "title": "Refactor rewrite rules such that each has only one match/substitute line", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 221](https://code.google.com/p/google-caja/issues/detail?id=221) created by jasvir on 2008-04-27T21:33:20.000Z:\n\nMany rewrite rules have more than one match/subst.  This is a problem if\nwe're going to use annotations to generate documentation for the rules. \nPropose to rewrite the rules to have exactly one match and substitute line\neven if this means the number of explicit rules grow.\n\nRelated to Issue 205.\n\nMight have performance consequences.\n", "created": "2015-04-16 01:49:32"}, {"url": "https://github.com/google/caja/issues/218", "closed": "2015-04-16 01:49:25", "ttf": 0.0002777777777777778, "title": "Packaged contructors defined using caja.def are not able to be used directly in a new expression", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 218](https://code.google.com/p/google-caja/issues/detail?id=218) created by metaweta on 2008-04-24T17:58:14.000Z:\n\nStart with\n\n```\nvar pkg = {};\n(function(){\n  function Foo(x) {\n    this.x_ = x;\n  }\n  caja.def(Foo, Object, {getX:function(){return this.x_;}});\n  pkg.Foo=Foo;\n})();\n```\n\nThen \n    var foo = new pkg.Foo(5);\nfails with a &quot;not callable&quot; message, while\n    var Foo = pkg.Foo;\n    var foo = new Foo(5);\nworks fine.\n\nAlso, when not using caja.def, \n\n```\nvar pkg = {};\n(function(){\n  function Foo(x) {\n    this.x_ = x;\n  }\n  Foo.prototype.getX = function(){return this.x_;}});\n  pkg.Foo=Foo;\n})();\n\nvar foo = new pkg.Foo(5);\n```\n\nworks fine.\n", "created": "2015-04-16 01:49:20"}, {"url": "https://github.com/google/caja/issues/217", "closed": "2015-04-16 01:49:20", "ttf": 0.0002777777777777778, "title": "Prevent functions marked as simple from being marked as constructors as well.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 217](https://code.google.com/p/google-caja/issues/detail?id=217) created by metaweta on 2008-04-24T17:17:25.000Z:\n\nasCtor allows simple functions and constructors to appear after new.\n\nBut caja.def calls ctor, which used to prohibit simple functions in the\nfirst position.  (The check was removed in metaweta/attached-methods.) \nThis leaves the possibility that a function might be marked both as a\ncontructor and a simple function, which messes with the function species table:\n  http://code.google.com/p/google-caja/wiki/FunctionSpecies\n", "created": "2015-04-16 01:49:13"}, {"url": "https://github.com/google/caja/issues/216", "closed": "2015-04-16 01:49:13", "ttf": 0.0002777777777777778, "title": "Regular expression ambiguity in JS Lexer", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 216](https://code.google.com/p/google-caja/issues/detail?id=216) created by mikesamuel on 2008-04-24T03:45:42.000Z:\n\nFelix reports that\n  (x = ++/a/i)\nintroduces a regular expression literal.\n\nOur current lexer and parser treats the /a/i as three tokens.\n\nI don't know whether there is a valid expression that will parse\nincorrectly, but we should probably err on the side of over-parenthesizing\nthe left operand to / and /= when generating output.\n\nWe should parenthesize the left hand side unless it is\n- a function call, or '.' or '[]' operation\n- a number literal\n- a reference\n", "created": "2015-04-16 01:49:09"}, {"url": "https://github.com/google/caja/issues/213", "closed": "2015-04-16 01:48:57", "ttf": 0.0002777777777777778, "title": "Add check that expansion has fired on all nodes", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 213](https://code.google.com/p/google-caja/issues/detail?id=213) created by ihab.awad on 2008-04-23T22:49:31.000Z:\n\nImplement the following algorithm around the JS rewriter to make sure that\nwe did not simply miss calling expand(...) on some subtree:\n\nMark all tree nodes with UNEXPANDED.\nApply rules\n   Rule.expand removes UNEXPANDED from its return value.\n   ParseTreeNodes.clone does not clone UNEXPANDED.\nWalk tree making sure no nodes are UNEXPANDED\n", "created": "2015-04-16 01:48:50"}, {"url": "https://github.com/google/caja/issues/211", "closed": "2015-04-16 01:48:43", "ttf": 0.0002777777777777778, "title": "minor nits, plugin/caps/wrap_capability_test", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 211](https://code.google.com/p/google-caja/issues/detail?id=211) created by felix8a on 2008-04-23T13:15:25.000Z:\n\nhttp://code.google.com/p/google-caja/source/browse/trunk/src/javatests/com/google/caja/plugin/caps/wrap_capability_test.js#&nbsp;93\nthere's a typo &quot;arguemnts&quot;.  the typo doesn't raise an error, because the\ncode is never reached, because arguments is empty.\n\nI find the use of the term &quot;replay attack&quot; here a little confusing.  the\nscenario being tested seems to me more like a man-in-the-middle attack.\n", "created": "2015-04-16 01:48:36"}, {"url": "https://github.com/google/caja/issues/198", "closed": "2015-04-16 01:47:47", "ttf": 0.0002777777777777778, "title": "Allow YUI.namespace in input", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 198](https://code.google.com/p/google-caja/issues/detail?id=198) created by mikesamuel on 2008-04-16T19:20:36.000Z:\n\n'namespace' is a contextually reserved word in ES4.\n\nYAHOO.namespace is a function in YUI.\n\n'namespace' cannot appear at the top level, but can appear as a member name\naccording to the ES4 reference implementation.\n\nECMAScript Edition 4 RI v0.0M2 (Tue Feb 12 15:23:13 2008)\n&gt;&gt; namespace\n**ERROR** ParseError: expecting 'identifier' before 'eof' (near &lt;no\nfilename&gt;:1:1-1.9)\n&gt;&gt; namespace = 0\n**ERROR** ParseError: expecting 'identifier' before '=' (near &lt;no\nfilename&gt;:1:1-1.9)\n&gt;&gt; var foo = {}\n&gt;&gt; foo.namespace\n&gt;&gt; foo.namespace = 0\n0\n&gt;&gt; 'namespace' in foo\ntrue\n&gt;&gt;\n\nWe should allow namespace as a member name, but rewrite from foo.namespace\n to foo['namespace'].\n\nAlso see bug 93 discussion on google-caja-discuss.\n", "created": "2015-04-16 01:47:36"}, {"url": "https://github.com/google/caja/issues/194", "closed": "2015-04-16 01:47:13", "ttf": 0.0002777777777777778, "title": "empty elements like <hr> cajole wrong (exploitable)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 194](https://code.google.com/p/google-caja/issues/detail?id=194) created by felix8a on 2008-04-14T09:29:03.000Z:\n\n&lt;hr&gt; onmouseover=alert(1)\nbecomes\n**_OUTERS**_.emitHtml___('\\074hr onmouseover=alert(1)\\n');\n\n&lt;hr id=&quot;x&quot;&gt; cajoles correctly\n", "created": "2015-04-16 01:47:08"}, {"url": "https://github.com/google/caja/issues/193", "closed": "2015-04-16 01:47:08", "ttf": 0.0002777777777777778, "title": "cosmetic problems with css errors", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 193](https://code.google.com/p/google-caja/issues/detail?id=193) created by felix8a on 2008-04-14T08:49:36.000Z:\n\nlow priority, no security issues.\n\n&lt;div style=&quot;color:&quot;&gt;&lt;/div&gt;\nsays &quot;Unexpected end of input&quot;, and doesn't report line number, so it may\nbe hard to find and fix the problem.\n\n&lt;div style=&quot;color:e#&quot;&gt;&lt;/div&gt;\nsays &quot;Expected !important not #&quot;, which is kind of misleading, since either\n!important or ; or eof would be ok.\n\n&lt;div style=&quot;color:@&quot;&gt;&lt;/div&gt;\nsays &quot;Unexpected token @&quot; and stops.  it would be nice if it could recover\nand continue to report errors.\n\n&lt;div style=&quot;color:/*&quot;&gt;&lt;/div&gt;\nsays &quot;Unclosed comment&quot; and stops.  it would be nice if it could continue.\n\n&lt;div style=&quot;color:\\205&quot;&gt;&lt;/div&gt;\nthat's a literal \\205 character, not the 4-char backslash escape.  that\ncauses IllegalArgumentException.\n\n&lt;div style=&quot;color:&quot;&gt;&lt;/div&gt;\nmessage is &quot;bad value: ==&gt;\\20 &lt;==&quot;, which is a little confusing, but harmless.\n\n&lt;div style=&quot;background:url(abc&quot;&gt;&lt;/div&gt;\nmessage is &quot;Expected ) not -1&quot;, which is a little confusing, but harmless.\n", "created": "2015-04-16 01:47:01"}, {"url": "https://github.com/google/caja/issues/185", "closed": "2015-04-16 01:46:26", "ttf": 0.0002777777777777778, "title": "Innocent code transformer", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 185](https://code.google.com/p/google-caja/issues/detail?id=185) created by mikesamuel on 2008-04-07T17:42:49.000Z:\n\nA transformer for trusted code that fixes for-each loops and adds (this !=\nglobalScope) assertion at top of functions that haveFreeThis().\n\nThis will let us get prototype and jquery running in the presence of\ncaja.js while we focus our efforts on debugging runtime problems with gadgets.\n", "created": "2015-04-16 01:46:15"}, {"url": "https://github.com/google/caja/issues/178", "closed": "2015-04-16 01:45:21", "ttf": 0.0002777777777777778, "title": "Make sure identifiers only contain ascii characters", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 178](https://code.google.com/p/google-caja/issues/detail?id=178) created by mikesamuel on 2008-04-05T03:11:33.000Z:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\u0103 = 4&lt;/script&gt; cajoles fine.\n\nNon latin characters open us up to character encoding attacks.\n", "created": "2015-04-16 01:44:56"}, {"url": "https://github.com/google/caja/issues/172", "closed": "2015-04-16 01:44:20", "ttf": 0.0002777777777777778, "title": "reserved words 'override' and 'namespace'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 172](https://code.google.com/p/google-caja/issues/detail?id=172) created by felix8a on 2008-04-03T09:13:20.000Z:\n\nReserved word override used as an identifier\nReserved word namespace used as an identifier\n\nthose are the two that turn up most often for me.\nthey're used in the YUI library.\noverride could be eliminated, I think it's only used in private contexts.\nnamespace is a problem, it's a method in the public api.\n\nnot sure what's a good solution to that.\n", "created": "2015-04-16 01:44:17"}, {"url": "https://github.com/google/caja/issues/171", "closed": "2015-04-16 01:44:17", "ttf": 0.0002777777777777778, "title": "spurious warning, constructor masks own declaration", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 171](https://code.google.com/p/google-caja/issues/detail?id=171) created by felix8a on 2008-04-03T08:40:54.000Z:\n\n&lt;script&gt;\nfunction Foo() {\n    this.x = 3;\n}\n&lt;/script&gt;\n\nLINT: x1.html:2+16: Declaration of Foo masks declaration at x1.html:2+1\nLINT: x1.html:2+16: Declaration of Foo masks declaration at x1.html:2+1\n", "created": "2015-04-16 01:44:11"}, {"url": "https://github.com/google/caja/issues/170", "closed": "2015-04-16 01:44:10", "ttf": 0.0002777777777777778, "title": "can sometimes construct unmentionable names with unicode escapes", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 170](https://code.google.com/p/google-caja/issues/detail?id=170) created by felix8a on 2008-04-03T08:08:01.000Z:\n\n\\u005f is _\n\n&lt;script&gt;\nx.___FROZEN__\\u005f = false;\n&lt;/script&gt;\n\ncajoles to this\n\nvar x___ = **_OUTERS**_.x_canRead___? **_OUTERS**_.x:\n_**.readPub(___OUTERS**_, 'x', true);\nvar x0___ = false;\nreturn x___.___FROZEN__\\u005f_canSet___? (x___.___FROZEN__\\u005f = x0___):\n**_.setPub(x**_, '___FROZEN__\\u005f', x0___);\n\nnote, this exploit doesn't actually work because of the doubled backslash\nin the call to setPub.\n\nin some contexts, unicode escapes just get mangled and cause a fatal\ntranslation error.\n", "created": "2015-04-16 01:43:55"}, {"url": "https://github.com/google/caja/issues/169", "closed": "2015-04-16 01:43:55", "ttf": 0.0002777777777777778, "title": "string literals mangle hex escapes", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 169](https://code.google.com/p/google-caja/issues/detail?id=169) created by felix8a on 2008-04-03T07:38:45.000Z:\n\n&lt;script&gt;\n'\\x41';\n&lt;/script&gt;\n\ncajoles to\n\n'x41';\n\nthis is a little annoying, but seems to be harmless\n", "created": "2015-04-16 01:43:46"}, {"url": "https://github.com/google/caja/issues/168", "closed": "2015-04-16 01:43:46", "ttf": 0.0002777777777777778, "title": "Ihab segfaults on confusing algorithm descriptions", "commits": {}, "user": "kpreid", "labels": ["Humor", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 168](https://code.google.com/p/google-caja/issues/detail?id=168) created by erights on 2008-04-03T04:53:11.000Z:\n\n<b>What steps will reproduce the problem?</b>\n&gt;  So walk the tree and set a synthetic attribute on each node which is\n&gt;  removed when expand is called and is not present on cloned node, and\n&gt;  then walk the tree checking for that attribute?\n\nWhat is the expected output? \n\n   Unclear\n\nWhat do you see instead?\n\n&gt; I just segfaulted. Please re-algorithmize. -- Ihab\n", "created": "2015-04-16 01:43:41"}, {"url": "https://github.com/google/caja/issues/166", "closed": "2015-04-16 01:43:34", "ttf": 0.0002777777777777778, "title": "Check unmentionables are synthetic", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 166](https://code.google.com/p/google-caja/issues/detail?id=166) created by ihab.awad on 2008-04-03T04:38:20.000Z:\n\nAdd an extra check after JS rewriting to make sure that any mention of\nreferences not available to Caja code (e.g., things ending with double\nunderscores) are marked synthetic.\n", "created": "2015-04-16 01:43:30"}, {"url": "https://github.com/google/caja/issues/164", "closed": "2015-04-16 01:43:22", "ttf": 0.0002777777777777778, "title": "successful use of unmentionable names", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 164](https://code.google.com/p/google-caja/issues/detail?id=164) created by felix8a on 2008-04-03T00:54:53.000Z:\n\n&lt;script&gt;\nfunction f() {\n  for (var ___ in a) {}\n}\n&lt;/script&gt;\n\ncajoles to this\n\nvar x0___ = **_OUTERS**_.a_canRead___? **_OUTERS**_.a:\n_**.readPub(___OUTERS**_, 'a', true);\n  var x1___ = undefined;\n  var **_;\n  for (x1**_ in x0___) {\n    if (**_.canEnumPub(x0**_, x1___)) {\n      ___ = x1___;\n      {\n      }\n    }\n  }\n\nwhich lets me subvert caja security\n", "created": "2015-04-16 01:43:15"}, {"url": "https://github.com/google/caja/issues/162", "closed": "2015-04-16 01:43:11", "ttf": 0.0002777777777777778, "title": "delete gives access to globals", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 162](https://code.google.com/p/google-caja/issues/detail?id=162) created by felix8a on 2008-04-01T20:39:32.000Z:\n\n&lt;script&gt;\ndelete alert(1)[alert(2)];\n&lt;/script&gt;\n\ncajoles to this:\n\n{\n  _**.loadModule(function (___OUTERS**_) {\n                   {\n                     _**.deletePub(alert(1), alert(2));\n                   }\n                   ___OUTERS**_.emitHtml___('\\n');\n                 });\n}\n\nI think the deleteProp and deletePub rules need calls to expand()\n", "created": "2015-04-16 01:42:57"}, {"url": "https://github.com/google/caja/issues/157", "closed": "2015-04-16 01:42:30", "ttf": 0.0002777777777777778, "title": "Can't assign to static members of global class", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 157](https://code.google.com/p/google-caja/issues/detail?id=157) created by metaweta on 2008-04-01T17:44:25.000Z:\n\nfunction Foo() {}\nFoo.prototype.x = 1;\n\nFoo in the second line is not being rewritten to **_OUTERS**_.Foo\n", "created": "2015-04-16 01:42:27"}, {"url": "https://github.com/google/caja/issues/156", "closed": "2015-04-16 01:42:27", "ttf": 0.0002777777777777778, "title": "Support 'new' of arbitrary expressions", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 156](https://code.google.com/p/google-caja/issues/detail?id=156) created by ihab.awad on 2008-04-01T15:24:43.000Z:\n\nNow that we have first-class ctors, we need to retool our rules to allow\n'new' of arbitrary expressions, not just symbols that are statically known\nto be 'declared functions'.\n", "created": "2015-04-16 01:42:25"}, {"url": "https://github.com/google/caja/issues/150", "closed": "2015-04-16 01:41:54", "ttf": 0.0002777777777777778, "title": "Rule setMember fails when left of prototype is not a Reference.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 150](https://code.google.com/p/google-caja/issues/detail?id=150) created by mikesamuel on 2008-03-30T02:53:42.000Z:\n\n```\naddRule(new Rule(&quot;setMember&quot;, this) {\n...\n    if (match(&quot;@fname.prototype.@p = @m;&quot;, node, bindings)) {\n      String fname = getReferenceName(bindings.get(&quot;fname&quot;));\n      if (scope.isDeclaredFunction(getReferenceName(fname))) {\n```\n\nfails with a ClassCastException if @fname is not a reference as in\n  foo.bar.prototype.baz = boo;\n", "created": "2015-04-16 01:41:50"}, {"url": "https://github.com/google/caja/issues/149", "closed": "2015-04-16 01:41:50", "ttf": 0.0002777777777777778, "title": "fix CSS background property signature", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 149](https://code.google.com/p/google-caja/issues/detail?id=149) created by mikesamuel on 2008-03-30T02:46:41.000Z:\n\nbackground:#F7F7F7 url(/images/foo.gif) no-repeat scroll left top;\nresults in an error message:\n   css property background has bad value\nbut it looks fine.\n", "created": "2015-04-16 01:41:41"}, {"url": "https://github.com/google/caja/issues/148", "closed": "2015-04-16 01:41:41", "ttf": 0.0002777777777777778, "title": "Treat BOM as whitespace in Javascript lexer", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 148](https://code.google.com/p/google-caja/issues/detail?id=148) created by mikesamuel on 2008-03-30T02:39:08.000Z:\n\nRight now, we fail to cajole Javascript and other files that start with a\nBOM, codepoint FEFF.\n", "created": "2015-04-16 01:41:19"}, {"url": "https://github.com/google/caja/issues/147", "closed": "2015-04-16 01:41:19", "ttf": 0.0002777777777777778, "title": "Parse `with` properly then reject it in the cajoler", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 147](https://code.google.com/p/google-caja/issues/detail?id=147) created by mikesamuel on 2008-03-30T02:38:19.000Z:\n\nThe parser does not currently recognize `with`.\n\nRight now, it's interpreted as an identifier, and the parser issues a\n  &quot;Reserved keyword used as an identifier&quot;\nerror which is wrong.\n", "created": "2015-04-16 01:41:14"}, {"url": "https://github.com/google/caja/issues/145", "closed": "2015-04-16 01:41:11", "ttf": 0.0002777777777777778, "title": "Reference error vs. undefined at global scope", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 145](https://code.google.com/p/google-caja/issues/detail?id=145) created by metaweta on 2008-03-28T20:42:10.000Z:\n\nIf x is not a declared variable,\n  var y = x;\nshould be a reference error, whereas\n  var y = this.x;\n(where &quot;this&quot; is bound to the global scope) should be undefined.  \n\nRight now, the latter also gives a reference error.\n", "created": "2015-04-16 01:41:05"}, {"url": "https://github.com/google/caja/issues/143", "closed": "2015-04-16 01:40:53", "ttf": 0.0002777777777777778, "title": "Rewriter doesn't allow anonymous functions referring to \"this\" within a class definition", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 143](https://code.google.com/p/google-caja/issues/detail?id=143) created by metaweta on 2008-03-28T19:12:09.000Z:\n\nfunction Foo() { this.f = function(){ return this; }; }\n\nWill Mark's first-class methods take care of this?\n", "created": "2015-04-16 01:40:40"}, {"url": "https://github.com/google/caja/issues/142", "closed": "2015-04-16 01:40:40", "ttf": 0.0002777777777777778, "title": "Enumerating properties of an object does not include methods added in caja.def", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 142](https://code.google.com/p/google-caja/issues/detail?id=142) created by metaweta on 2008-03-28T19:10:14.000Z:\n\nfunction Foo() {\n  this.x_ = 1;\n  this.y = 2;\n}\ncaja.def(Foo, Object, {\n  test: function () {\n    var y = {};\n    var result = [];\n    for (y.k in this) {\n      result.push(y.k);\n    }\n    return result;\n  }});\nvar obj = new Foo();\n\n// should return ['test', 'x_', 'y'] \n// but only returns ['x_', 'y']\nobj.test().sort()\n", "created": "2015-04-16 01:40:27"}, {"url": "https://github.com/google/caja/issues/141", "closed": "2015-04-16 01:40:27", "ttf": 0.0002777777777777778, "title": "Enable [ctor].prototype = [value]", "commits": {}, "user": "kpreid", "labels": ["OriginalCajaOnly", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 141](https://code.google.com/p/google-caja/issues/detail?id=141) created by ihab.awad on 2008-03-28T18:30:15.000Z:\n\nTo enable programmers to populate &quot;classes&quot; in a JS-idiomatic way, without\nhaving to enclose everything in a big Caja.def(...), we need to enable them\nto directly assign to the prototype of a ctor (before its first use).\n\nWe had this enabled previously, but we deep sixed it because (iirc) it was\nnot secure when multiple modules had shared access to **_OUTERS**_. With\nour new directions for a module scheme that imposes stricter isolation,\nmaybe this is no longer an issue.\n", "created": "2015-04-16 01:39:47"}, {"url": "https://github.com/google/caja/issues/138", "closed": "2015-04-16 01:39:42", "ttf": 0.0002777777777777778, "title": "pkg.myclass doesn't work", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 138](https://code.google.com/p/google-caja/issues/detail?id=138) created by felix8a on 2008-03-26T23:45:22.000Z:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar pkg = {};\npkg.myclass = function() {   // line x\n    this.a = 3;\n};\nvar b = new pkg.myclass();   // line y\n&lt;/script&gt;\n\nthat's two different fatal errors:\nat line x, Method in non-method context\nat line y, Cannot invoke &quot;new&quot; on an arbitrary expression\n\nis this going to be supported?\n", "created": "2015-04-16 01:38:49"}, {"url": "https://github.com/google/caja/issues/136", "closed": "2015-04-16 01:38:47", "ttf": 0.0002777777777777778, "title": "Normalize tree so that all curlies but object literals are actual blocks", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 136](https://code.google.com/p/google-caja/issues/detail?id=136) created by metaweta on 2008-03-26T18:53:10.000Z:\n\nTo support issue 135\n", "created": "2015-04-16 01:38:18"}, {"url": "https://github.com/google/caja/issues/135", "closed": "2015-04-16 01:38:18", "ttf": 0.0002777777777777778, "title": "Forward references throw a reference error instead of returning undefined", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 135](https://code.google.com/p/google-caja/issues/detail?id=135) created by metaweta on 2008-03-26T18:51:36.000Z:\n\nvar Bar = Foo;\nfunction Foo() {}\n\nBar should get undefined, not throw a reference error.  To support this, we\nhave to put &quot;var Foo;&quot; at the top of the block in which Foo is defined.  To\ndo that, we have to have syntactic curlies be an actual block (filed as a\nseparate issue).\n", "created": "2015-04-16 01:37:49"}, {"url": "https://github.com/google/caja/issues/134", "closed": "2015-04-16 01:37:49", "ttf": 0.0002777777777777778, "title": "Extract <body onload> handler and run it after all other gadget script.", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 134](https://code.google.com/p/google-caja/issues/detail?id=134) created by mikesamuel on 2008-03-26T18:34:04.000Z:\n\nSome gadgets use the onload attribute of body to execute initialization script.\n\nWe disallow &lt;body&gt; tags since HTML 5 specifies that extra bodies attributes\nare folded into the global body element so have global effect.\n\nRight now the HtmlSanitizer ignores a body without attributes, so if we\nremove the onload, then we can allow the gadget below to function as the\nauthor intended:\n\n  &lt;body onload=&quot;init()&quot;&gt;\n    &lt;script&gt;function init() { console.log('hello world'); }&lt;/script&gt;\n  &lt;/body&gt;\n", "created": "2015-04-16 01:37:45"}, {"url": "https://github.com/google/caja/issues/132", "closed": "2015-04-16 01:37:29", "ttf": 0.0002777777777777778, "title": "Improve performance of temporary variables", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 132](https://code.google.com/p/google-caja/issues/detail?id=132) created by ihab.awad on 2008-03-25T18:14:29.000Z:\n\nAt the moment, we create a single-use anonymous function for any case where\nour rewriter needs to generate temporary variables. So, for example --\n\n  (function() {\n    var x0___ = /\\* something _/;\n    /_ use x0___ in some way */\n  })();\n\nThis creates a significant runtime overhead.\n\nChange the idiom to use temporary variables allocated from the Scope object\ninstead. If possible, add code that nulls out the temporaries right after\nthey are used.\n", "created": "2015-04-16 01:37:26"}, {"url": "https://github.com/google/caja/issues/129", "closed": "2015-04-16 01:37:15", "ttf": 0.0002777777777777778, "title": "Implement canDeleteProp in caja.js", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 129](https://code.google.com/p/google-caja/issues/detail?id=129) created by mikesamuel on 2008-03-24T02:35:57.000Z:\n\nFrom caja.js:\n  /**\n- Can a Caja constructed object delete the named property?\n- &lt;p&gt;\n- BUG TODO(erights): This is not yet supported. The precise\n- enabling conditions are not yet determined, as is the implied\n- bookkeeping. \n  */\n  function canDeleteProp(that, name) {\n    fail('TODO(erights): deletion not yet supported');\n    return false;\n  }\n\nThis needs to be implemented.\n", "created": "2015-04-16 01:37:10"}, {"url": "https://github.com/google/caja/issues/127", "closed": "2015-04-16 01:36:51", "ttf": 0.0002777777777777778, "title": "Regression: *=, +=, style operators fail to cajole with RuntimeException", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 127](https://code.google.com/p/google-caja/issues/detail?id=127) created by mikesamuel on 2008-03-22T03:07:19.000Z:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\nvar x = 2;\n$(x *= 2);\n&lt;/script&gt;\n\nfails with\n\njava.lang.RuntimeException: Unimplemented case involving: AssignOperation :\nASSIGN_MUL\n    at com.google.caja.parser.quasiliteral.Rewriter.expand(Rewriter.java:92)\n    at com.google.caja.parser.quasiliteral.Rule.expandAllTo(Rule.java:158)\n    at com.google.caja.parser.quasiliteral.Rule.expandAll(Rule.java:148)\n    at\ncom.google.caja.parser.quasiliteral.DefaultCajaRewriter$57.fire(DefaultCajaRewriter.java:1106)\n        ...\n", "created": "2015-04-16 01:36:45"}, {"url": "https://github.com/google/caja/issues/126", "closed": "2015-04-16 01:36:45", "ttf": 0.0002777777777777778, "title": "Include JS files needed by containers in pluginc.jar", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 126](https://code.google.com/p/google-caja/issues/detail?id=126) created by mikesamuel on 2008-03-22T00:52:55.000Z:\n\nCassie doll says,\n\nWe would like to pull your js files from maven instead of having them\nhardcoded in our repository. To do this the js files need to be in your\nmaven jar, can you guys do that? For now we can just use unminified js\nfiles, although eventually minified ones might be good to include as well.\n", "created": "2015-04-16 01:36:40"}, {"url": "https://github.com/google/caja/issues/118", "closed": "2015-04-16 01:36:13", "ttf": 0.0002777777777777778, "title": "\"rel\" attribute on LINK element causes an java.util.NoSuchElementException when cajoling", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 118](https://code.google.com/p/google-caja/issues/detail?id=118) created by tobie.langel on 2008-03-20T18:30:01.000Z:\n\nAttempting to cajole the attached file causes the following exception:\n\njava.util.NoSuchElementException: child not in parent\n        at \ncom.google.caja.parser.AbstractParseTreeNode$Removal.apply(AbstractParseTreeNode.java:490)\n        at \ncom.google.caja.parser.AbstractParseTreeNode$MutationImpl.execute(AbstractParseTreeNode.ja\nva:391)\n        at \ncom.google.caja.parser.AbstractParseTreeNode.removeChild(AbstractParseTreeNode.java:108)\n        at \ncom.google.caja.plugin.stages.RewriteHtmlStage.rewriteLinkTag(RewriteHtmlStage.java:243)\n        at com.google.caja.plugin.stages.RewriteHtmlStage.access$200(RewriteHtmlStage.java:65)\n        at com.google.caja.plugin.stages.RewriteHtmlStage$1.visit(RewriteHtmlStage.java:101)\n        at \ncom.google.caja.parser.AbstractParseTreeNode.acceptPreOrder(AbstractParseTreeNode.java:308)\n        at \ncom.google.caja.parser.AbstractParseTreeNode.visitChildren(AbstractParseTreeNode.java:286)\n        at \ncom.google.caja.parser.AbstractParseTreeNode.acceptPreOrder(AbstractParseTreeNode.java:315)\n        at \ncom.google.caja.plugin.stages.RewriteHtmlStage.rewriteDomTree(RewriteHtmlStage.java:107)\n        at com.google.caja.plugin.stages.RewriteHtmlStage.apply(RewriteHtmlStage.java:76)\n        at com.google.caja.plugin.stages.RewriteHtmlStage.apply(RewriteHtmlStage.java:65)\n        at com.google.caja.util.Pipeline.applyStage(Pipeline.java:41)\n        at com.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:121)\n        at com.google.caja.plugin.PluginCompiler$1.applyStage(PluginCompiler.java:115)\n        at com.google.caja.util.Pipeline.apply(Pipeline.java:35)\n        at com.google.caja.plugin.PluginCompiler.run(PluginCompiler.java:185)\n        at com.google.caja.plugin.PluginCompilerMain.run(PluginCompilerMain.java:99)\n        at com.google.caja.plugin.PluginCompilerMain.main(PluginCompilerMain.java:334)\n\nRemoving the &quot;rel&quot; attribute solves the problem.\n", "created": "2015-04-16 01:36:09"}, {"url": "https://github.com/google/caja/issues/117", "closed": "2015-04-16 01:36:08", "ttf": 0.0002777777777777778, "title": "Compiler doesn't handle META element", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 117](https://code.google.com/p/google-caja/issues/detail?id=117) created by tobie.langel on 2008-03-20T14:00:13.000Z:\n\nAttempting to cajole the attached file yields the following errors:\n\nDisallowing meta\nLOG: Checkpoint: RewriteHtmlStage at T+0.008728 seconds\nLOG: Checkpoint: SanitizeHtmlStage at T+0.010909 seconds\nERROR: meta.html:2+2 - 70: tag meta is not allowed\n", "created": "2015-04-16 01:35:57"}, {"url": "https://github.com/google/caja/issues/116", "closed": "2015-04-16 01:35:57", "ttf": 0.0002777777777777778, "title": "compiler doesn't handle attributes in HTML element", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 116](https://code.google.com/p/google-caja/issues/detail?id=116) created by tobie.langel on 2008-03-20T13:55:52.000Z:\n\nAttempting to cajole the attached file yields the following errors:\n\nDisallowing html\nDisallowing head\nDisallowing body\nLOG: Checkpoint: RewriteHtmlStage at T+0.008599 seconds\nLOG: Checkpoint: SanitizeHtmlStage at T+0.01079 seconds\nWARNING: html.html:1+1 - 2+8: folding element html into parent\nERROR: html.html:1+7 - 12: unknown attribute xmlns on html\nERROR: html.html:1+44 - 52: unknown attribute xml:lang on html\nWARNING: html.html:2+1: folding element head into parent\nWARNING: html.html:2+1: folding element body into parent\nERROR: html.html:1+7 - 12: cannot fold attribute xmlns on html into parent\nERROR: html.html:1+44 - 52: cannot fold attribute xml:lang on html into parent\nERROR: html.html:1+58 - 62: cannot fold attribute lang on html into parent\n", "created": "2015-04-16 01:35:46"}, {"url": "https://github.com/google/caja/issues/115", "closed": "2015-04-16 01:35:46", "ttf": 0.0002777777777777778, "title": "Compiler cannot find external JS files.", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 115](https://code.google.com/p/google-caja/issues/detail?id=115) created by tobie.langel on 2008-03-20T13:29:12.000Z:\n\n<b>What steps will reproduce the problem?</b>\nTry cajoling the attached file. Yields the following errors.\n\ntobie-langels-computer:~/Code/clients/google/caja/svn/src tobie$ java -cp ant-jars/pluginc.jar:`find third_party/ -name '*.jar' | tr '\\n' :` \ncom.google.caja.plugin.PluginCompilerMain -i prototype/test/unit/array.html -p array.html\nLOG: Checkpoint: RewriteHtmlStage at T+0.009872 seconds\nWARNING: array.html:5+11 - 14: failed to load external url ../../dist/prototype.js\nWARNING: array.html:6+11 - 14: failed to load external url ../lib/unittest.js\n\nNOTE: Doctype removed until #&nbsp;112 is fixed.\n", "created": "2015-04-16 01:35:28"}, {"url": "https://github.com/google/caja/issues/114", "closed": "2015-04-16 01:35:28", "ttf": 0.0002777777777777778, "title": "Parsing \"function(){..}\" throws NPE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 114](https://code.google.com/p/google-caja/issues/detail?id=114) created by metaweta on 2008-03-18T23:21:35.000Z:\n\nTry to parse &quot;function(){..}&quot; and you get a NullPointerException.\n", "created": "2015-04-16 01:35:21"}, {"url": "https://github.com/google/caja/issues/113", "closed": "2015-04-16 01:35:21", "ttf": 0.0002777777777777778, "title": "Failing tests in r763", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 113](https://code.google.com/p/google-caja/issues/detail?id=113) created by ihab.awad on 2008-03-17T05:41:16.000Z:\n\nConfigUtilTest.testUnresolvedAmbiguousDefinition\nCssParserTest.TestCssParser3\n", "created": "2015-04-16 01:35:16"}, {"url": "https://github.com/google/caja/issues/112", "closed": "2015-04-16 01:35:16", "ttf": 0.0002777777777777778, "title": "Caja can't compile an HTML DOCTYPE", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 112](https://code.google.com/p/google-caja/issues/detail?id=112) created by tobie.langel on 2008-03-16T22:08:30.000Z:\n\nTry compiling any HTML page with a Doctype: \n\nLOG: Google Caja. Copyright (C) 2008, Google Inc. Rev 759 built on 2008-03-16 21:33:24.\nFATAL_ERROR: array.html:1+1 - 2+67: malformed xhtml: &lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD \nXHTML 1.0 Transitional//EN&quot;\n        &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;\n", "created": "2015-04-16 01:35:01"}, {"url": "https://github.com/google/caja/issues/111", "closed": "2015-04-16 01:35:00", "ttf": 0.0002777777777777778, "title": "Weird lvalues parse correctly", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 111](https://code.google.com/p/google-caja/issues/detail?id=111) created by ihab.awad on 2008-03-15T00:05:36.000Z:\n\nThe following 2 cases parse without error --\n\n  (x ? y : z) = 4;\n\n  x() = 4;\n\nThe SquareFree shell rejects both.\n", "created": "2015-04-16 01:34:58"}, {"url": "https://github.com/google/caja/issues/110", "closed": "2015-04-16 01:34:58", "ttf": 0.0002777777777777778, "title": "Rewriting 'typeof' too strictly", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 110](https://code.google.com/p/google-caja/issues/detail?id=110) created by ihab.awad on 2008-03-14T23:23:48.000Z:\n\nThe current rewriting of 'typeof' on a global is too strict. For global\nsymbol 'foo', the code --\n\n  typeof foo\n\nwill be rewritten to --\n\n  typeof _**.readPub(___OUTERS**_, 'foo', true)\n\nwhich will fail if 'foo' is undefined. We should instead do --\n\n  typeof _**.readPub(___OUTERS**_, 'foo')\n", "created": "2015-04-16 01:34:51"}, {"url": "https://github.com/google/caja/issues/109", "closed": "2015-04-16 01:34:51", "ttf": 0.0002777777777777778, "title": "Consolidate main methods", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 109](https://code.google.com/p/google-caja/issues/detail?id=109) created by mikesamuel on 2008-03-14T19:58:35.000Z:\n\nWe have 3 main methods, and it's causing confusion, and a maintenance headache.\n\nDeprecated PluginCompilerMain and HtmlPluginCompilerMain in favor of\nGadgetRewriterMain.\n", "created": "2015-04-16 01:34:46"}, {"url": "https://github.com/google/caja/issues/105", "closed": "2015-04-16 01:34:25", "ttf": 0.0002777777777777778, "title": "Rewriter does not recognize naked blocks", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 105](https://code.google.com/p/google-caja/issues/detail?id=105) created by ihab.awad on 2008-03-13T23:46:10.000Z:\n\nIf code is written like --\n\n  for (var x in y) z;\n\nit does not parse to the same thing as --\n\n  for (var x in y) { z; }\n\nin other words, in the first case, there is not a Block node enclosing the\nstatement &quot;z;&quot;. This causes some rules (notably &quot;foreach&quot; handling, and\nmaybe others) to fail to recognize otherwise correct input.\n\nWe should do one of (a) change the rewriter rules; (b) add a tree\nnormalizing pass after parsing; or (c) change the way we parse.\n\nThe first item of business will be to look at the rewriter rules and see if\nany of them would work incorrectly if they were rewritten without explicit\ncurly braces.\n", "created": "2015-04-16 01:34:14"}, {"url": "https://github.com/google/caja/issues/104", "closed": "2015-04-16 01:34:14", "ttf": 0.0002777777777777778, "title": "References to primordial objects are scoped to ___OUTERS___", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 104](https://code.google.com/p/google-caja/issues/detail?id=104) created by ihab.awad on 2008-03-13T22:47:51.000Z:\n\nReferences to primordial objects like Function and Object are rewritten to\nread, **_OUTERS**_.Function and **_OUTERS**_.Object. No such objects exist.\n", "created": "2015-04-16 01:34:07"}, {"url": "https://github.com/google/caja/issues/103", "closed": "2015-04-16 01:34:07", "ttf": 0.0002777777777777778, "title": "r729 broke DefaultGadgetRewriter", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 103](https://code.google.com/p/google-caja/issues/detail?id=103) created by ben@links.org on 2008-03-13T17:52:52.000Z:\n\nIt removed the ability to fetch a gadget from a URL rather than a file.\n", "created": "2015-04-16 01:33:58"}, {"url": "https://github.com/google/caja/issues/102", "closed": "2015-04-16 01:33:58", "ttf": 0.0002777777777777778, "title": "css parser doesn't like lists of negative numbers", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 102](https://code.google.com/p/google-caja/issues/detail?id=102) created by felix8a on 2008-03-13T13:40:25.000Z:\n\n&lt;style&gt;\np { margin: -3px -3px }\n&lt;/style&gt;\n\nERROR :2+18 - 19: Expected !important not -\n:2: p { margin: -3px -3px }\n", "created": "2015-04-16 01:33:47"}, {"url": "https://github.com/google/caja/issues/101", "closed": "2015-04-16 01:33:46", "ttf": 0.0002777777777777778, "title": "css parser does not parse functions with \"=\" in the expression correctly", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 101](https://code.google.com/p/google-caja/issues/detail?id=101) created by jasvir on 2008-03-12T21:48:12.000Z:\n\n&lt;style&gt;\n# xxx {\n\n  filter:alpha(opacity=50);\n}\n&lt;/style&gt;\n\ncomplains &quot;ERROR: Expected ) not =&quot;\n\nFirefox uses the property opacity:x for transparency, while IE uses\nfilter:alpha(opacity=x).  According to W3 this is not yet a CSS standard.\nHowever, it works in all modern browsers, and is a part of the W3C CSS 3\nrecommendation.\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 01:33:26"}, {"url": "https://github.com/google/caja/issues/100", "closed": "2015-04-16 01:33:26", "ttf": 0.0002777777777777778, "title": "Code Review: mikesamuel/fix-css-escaping-text-spans-12-Mar-2008 : <!-- in <style> section is flagged as an error", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 100](https://code.google.com/p/google-caja/issues/detail?id=100) created by ben@links.org on 2008-03-12T15:49:06.000Z:\n\nAccording to at least one expert, the effect should be to prevent a\n&lt;/script&gt; from closing the &lt;style&gt; section before the --&gt; is seen.\n\nNot that I've seen it used in this way...\n\nNote that I am aware that CSS comments look like /\\* ... */. The theory is\nthat the &lt;!-- somehow apply to tag interpretation but not to processing the\nCSS commands. Sounds like nonsense to me.\n", "created": "2015-04-16 01:33:11"}, {"url": "https://github.com/google/caja/issues/99", "closed": "2015-04-16 01:33:11", "ttf": 0.0002777777777777778, "title": "<noscript> breaks stuff", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 99](https://code.google.com/p/google-caja/issues/detail?id=99) created by ben@links.org on 2008-03-12T14:43:07.000Z:\n\n&lt;noscript&gt;blah&lt;/noscript&gt; causes:\n\nException in thread &quot;main&quot; java.lang.AssertionError: UNESCAPED\n        at com.google.caja.plugin.HtmlValidator.validate(HtmlValidator.java:94)\n\n...\n", "created": "2015-04-16 01:32:55"}, {"url": "https://github.com/google/caja/issues/98", "closed": "2015-04-16 01:32:55", "ttf": 0.0002777777777777778, "title": "Line numbers are wrong for gadget Content section", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 98](https://code.google.com/p/google-caja/issues/detail?id=98) created by ben@links.org on 2008-03-12T13:04:15.000Z:\n\nWhen an error is shown for the Content section of a gadget, the line number\nis an offset from the beginning of the section instead of from the\nbeginning of the gadget spec.\n", "created": "2015-04-16 01:32:44"}, {"url": "https://github.com/google/caja/issues/97", "closed": "2015-04-16 01:32:44", "ttf": 0.0002777777777777778, "title": "More attribute whitelisting needed?", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 97](https://code.google.com/p/google-caja/issues/detail?id=97) created by ben@links.org on 2008-03-11T16:46:32.000Z:\n\nSo far I've noticed the following, probably harmless, non-standard\nattributes being rejected:\n\nTag      Attr\ntable    height\nspan     align\ntable    xbgcolor\ntd       xbgcolor\n", "created": "2015-04-16 01:32:24"}, {"url": "https://github.com/google/caja/issues/96", "closed": "2015-04-16 01:32:24", "ttf": 0.0002777777777777778, "title": "Can't cajole gadgets with content type 'url'", "commits": {}, "user": "kpreid", "labels": ["Gadget", "Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 96](https://code.google.com/p/google-caja/issues/detail?id=96) created by ben@links.org on 2008-03-11T12:30:46.000Z:\n\nThe problem here is that when the gadget content URL is fetched it needs\nparameters that say where to get its libraries from.\n", "created": "2015-04-16 01:32:20"}, {"url": "https://github.com/google/caja/issues/94", "closed": "2015-04-16 01:32:15", "ttf": 0.0002777777777777778, "title": "Array.sort allows confused deputy attacks", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 94](https://code.google.com/p/google-caja/issues/detail?id=94) created by mikesamuel on 2008-03-10T21:52:34.000Z:\n\ncaja.js calls allowMutator on Array.prototype.sort.\n\nArray.sort invokes the comparator with this bound to the global scope.\n\nNothing forces the comparator to be called as a simple function, so a\nfunction received on an object passed in can be invoked with this bound to\nthe global scope.\n\nConsider the object passed in\n  outers.deputy = {\n      f: function (a) { return this.alert(a); },\n      alert: function (s) { /\\* something innocuous */ }\n  };\nand the caja\n  ['hello world', 'hello world'].sort(deputy.f);\n", "created": "2015-04-16 01:31:59"}, {"url": "https://github.com/google/caja/issues/93", "closed": "2015-04-16 01:31:59", "ttf": 0.0002777777777777778, "title": "\"override\" and \"namespace\" not allowed as identifiers", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 93](https://code.google.com/p/google-caja/issues/detail?id=93) created by ben@links.org on 2008-03-10T20:14:55.000Z:\n\nfor example, x.is() gives an error. It shouldn't.\n", "created": "2015-04-16 01:31:31"}, {"url": "https://github.com/google/caja/issues/92", "closed": "2015-04-16 01:31:30", "ttf": 0.0002777777777777778, "title": "? : parsing is incorrect", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 92](https://code.google.com/p/google-caja/issues/detail?id=92) created by ben@links.org on 2008-03-10T17:45:40.000Z:\n\na ? b=c : d;                                                              \n\ngives\n\nERROR: xx.html:2+6 - 7: Expected : not =\n", "created": "2015-04-16 01:31:24"}, {"url": "https://github.com/google/caja/issues/91", "closed": "2015-04-16 01:31:24", "ttf": 0.0002777777777777778, "title": "for...in loop fails to cajole", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 91](https://code.google.com/p/google-caja/issues/detail?id=91) created by mikesamuel on 2008-03-09T03:30:46.000Z:\n\n&lt;script&gt;\n  for (var k in this) {\n    $(k);\n  }\n&lt;/script&gt;\ncajoles to\n&lt;script type=&quot;text/javascript&quot;&gt;\n{\n  _**.loadModule(function (___OUTERS**_) {\n      {\n        **_OUTERS**_.x0___ = **_OUTERS**_;\n        **_OUTERS**_.x1___ = undefined;\n        **_OUTERS**_.k;\n        for (x1___ in x0___) {\n          if (**_.canEnumProp(x0**_, x1___)) {\n            **_OUTERS**_.k = x1___;\n            _**.asSimpleFunc(___OUTERS**_.$)(**_OUTERS**_.k);\n          }\n        }\n      }\n    });\n}&lt;/script&gt;\n\nNote that the var x0 is recajoled to **_OUTERS**_.x0___\n", "created": "2015-04-16 01:31:12"}, {"url": "https://github.com/google/caja/issues/89", "closed": "2015-04-16 01:31:07", "ttf": 0.0002777777777777778, "title": "Parser error when statements are rammed together", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 89](https://code.google.com/p/google-caja/issues/detail?id=89) created by ben@links.org on 2008-03-07T14:43:07.000Z:\n\nif(a)a=b;c=d;\n\nproduces the error &quot;Expected ; not c&quot;\n", "created": "2015-04-16 01:31:01"}, {"url": "https://github.com/google/caja/issues/77", "closed": "2015-04-16 01:29:06", "ttf": 0.0002777777777777778, "title": "Using readProp on ___OUTERS___ opens security hole", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 77](https://code.google.com/p/google-caja/issues/detail?id=77) created by ihab.awad on 2008-03-03T00:13:51.000Z:\n\nPlease review and comment on the following behavior:\n\nWhen Caja code in the global scope makes a reference to 'this' --\n\n  this.x;\n  this.x_;\n\nwe translate that to references to **_OUTERS**_ using 'readProp', precisely\nas though the synthetic global scope is the 'this object' of the global\ncode, e.g. --\n\n  **_OUTERS**_.x_canRead___ ?\n    **_OUTERS**_.x :\n    _**.readProp(___OUTERS**_, 'x');\n", "created": "2015-04-16 01:28:51"}, {"url": "https://github.com/google/caja/issues/76", "closed": "2015-04-16 01:28:50", "ttf": 0.0002777777777777778, "title": "Quasi rewriter should mark all generated nodes synthetic", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 76](https://code.google.com/p/google-caja/issues/detail?id=76) created by ihab.awad on 2008-02-22T04:13:24.000Z:\n\nQuasiliteral rewriter should mark _all_ generated nodes synthetic. The\nstuff inserted into a substV(...) should not be changed, but the nodes\ngenerated _de novo_ by evaluation of a pattern, or by explicit construction\ninside a rule, should be synthetic.\n", "created": "2015-04-16 01:28:48"}, {"url": "https://github.com/google/caja/issues/75", "closed": "2015-04-16 01:28:48", "ttf": 0.0002777777777777778, "title": "Callless constructors fail to cajole", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 75](https://code.google.com/p/google-caja/issues/detail?id=75) created by mikesamuel on 2008-02-21T23:14:03.000Z:\n\nThe code\n  (new Date())\ncajoles fine, but the semantically equivalent\n  (new Date)\ndoes not.\n\nIt fails with the error:\n     FATAL_ERROR:plugin-main.js:130+16 - 20: Constructors are not first\nclass: Rule &quot;varBadCtorLeak&quot;, Reference\n          [java]   Identifier : Date\n", "created": "2015-04-16 01:28:39"}, {"url": "https://github.com/google/caja/issues/74", "closed": "2015-04-16 01:28:39", "ttf": 0.0002777777777777778, "title": "Rewriter mesages must have file position at start", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 74](https://code.google.com/p/google-caja/issues/detail?id=74) created by ihab.awad on 2008-02-21T04:46:14.000Z:\n\nIn RewriterMessageType.java, all messages should be of the form --\n\n  %s: &lt;Message text here&gt;\n\nwhere the first interpolation contains a file position\n", "created": "2015-04-16 01:28:34"}, {"url": "https://github.com/google/caja/issues/72", "closed": "2015-04-16 01:28:30", "ttf": 0.0002777777777777778, "title": "Caja does not work right on IE", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 72](https://code.google.com/p/google-caja/issues/detail?id=72) created by sirredd on 2008-02-15T22:57:22.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Create an application using the following code. \n\n&lt;div id=&quot;output&quot;&gt;output&lt;/div&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\ndocument.getElementById(&quot;output&quot;).innerHTML = &quot;hello caja&quot;;\n&lt;/script&gt;\n1. The error occurs in the following line of code in caja.js:\n   \n   if (result.prototype.constructor === result)\n2. The way the app renders on IE as different from the way it renders on\n   Fire Fox. \n\n<b>What is the expected output? What do you see instead?</b>\n\nThe expected output is &quot;Hello Caja&quot; on both IE and Fire Fox.\nOn Fire Fox the output is correct (&quot;Hello Caja&quot;). But on IE, the output is\nWRONG (&quot;output&quot; instead of &quot;Hello Caja&quot;)\n\n<b>What version of the product are you using? On what operating system?</b>\n\nIE 7 and FF 2.0\nWindows XP Professional\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 01:28:19"}, {"url": "https://github.com/google/caja/issues/71", "closed": "2015-04-16 01:28:18", "ttf": 0.0002777777777777778, "title": "Property assignment expression doesn't evaluate to the right value", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 71](https://code.google.com/p/google-caja/issues/detail?id=71) created by erights on 2008-02-14T01:58:56.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Cajole: &lt;script&gt;var x = {}; x.a = x.b = 2;&lt;/script&gt;\n<b>2.</b>\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\nCajoling this currently yields:\n\n{\n  _**.loadModule(function (___OUTERS**_) {\n      **_OUTERS**_.x = {\n      };\n      (function () {\n          var x___ = **_OUTERS**_.x;\n          var x0___ = (function () {\n              var x___ = **_OUTERS**_.x;\n              var x0___ = 2;\n              x___.b_canSet___ ? (x___.b = x0___) : **_.setPub(x**_, 'b',\nx0___);\n            })();\n          x___.a_canSet___ ? (x___.a = x0___) : **_.setPub(x**_, 'a', x0___);\n        })();\n    });\n}\n\nThe problem is that the last statement within the synthetic function should\nbe a &quot;return ...&quot;. Since it isn't, x.a is assigned the value &quot;undefined&quot;.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 01:28:07"}, {"url": "https://github.com/google/caja/issues/69", "closed": "2015-04-16 01:27:56", "ttf": 0.0002777777777777778, "title": "Members in ___OUTERS___ not whitelisted", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 69](https://code.google.com/p/google-caja/issues/detail?id=69) created by mikesamuel on 2008-02-12T06:09:02.000Z:\n\nWe don't currently prevent access to implicit members of **_OUTERS**_.\n\nThese members include eval, watch, and unwatch on Firefox.\n\nThe current code\n  eval('alert(&quot;foo&quot;)');\ncajoles to\n  _**.asSimpleFunc(___OUTERS**_.eval)('alert(&quot;foo'&quot;));\n\nThis doesn't lead to a directly exploitable vulnerability, since we never\nmark eval as a simple function, but being able to get a handle to eval\nmight still allow mischief.\n", "created": "2015-04-16 01:27:43"}, {"url": "https://github.com/google/caja/issues/68", "closed": "2015-04-16 01:27:42", "ttf": 0.0002777777777777778, "title": "Parser does not accept \"for (a.k in x) { ... }\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 68](https://code.google.com/p/google-caja/issues/detail?id=68) created by ihab.awad on 2008-02-11T22:11:56.000Z:\n\nParser does not accept a property as the key variable in a foreach, despite\nthe fact that JavaScript (at least Firefox) permits it. An example and the\nstacktrace are pasted below. ECMA-262 section 12.6.4 specifies the syntax as --\n\n  for ( &lt;LeftHandSideExpression&gt; in &lt;Expression&gt; ) &lt;Statement&gt;\n\n```\n *   *   *   *   *\n```\n\nParsing: for (a.k in x) { k; }\n\ncom.google.caja.lexer.ParseException: source:1+14 - 15: Expected ; not )\n    at com.google.caja.lexer.TokenQueue.expectToken(TokenQueue.java:251)\n    at com.google.caja.lexer.JsTokenQueue.expectToken(JsTokenQueue.java:69)\n    at com.google.caja.parser.js.Parser.parseLoopOrSwitch(Parser.java:376)\n    at\ncom.google.caja.parser.js.Parser.parseStatementWithoutLabel(Parser.java:481)\n    at com.google.caja.parser.js.Parser.parseStatement(Parser.java:310)\n    at com.google.caja.parser.js.Parser.parseTerminatedStatement(Parser.java:1175)\n    at com.google.caja.parser.js.Parser.parse(Parser.java:266)\n        ...\n", "created": "2015-04-16 01:27:33"}, {"url": "https://github.com/google/caja/issues/67", "closed": "2015-04-16 01:27:33", "ttf": 0.0002777777777777778, "title": "GWT output crashes the cajoler", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 67](https://code.google.com/p/google-caja/issues/detail?id=67) created by spoon+personal@google.com on 2008-02-08T16:52:30.000Z:\n\nIf I run the following, the cajoler crashes:\n\ncajoler -i http://www.lexspoon.org/rpccalc-tmp/gadget.xml -o gadget-caja.xml\n\nAttached is a zip of the rpccalc-tmp directory for archival purposes.  Note\nthat it contains absolute URLs, so if you rehost it you must edit the\ngadget file.\n\nI used a cajoler compiled from the trunk, subversion revision 490.\n", "created": "2015-04-16 01:27:07"}, {"url": "https://github.com/google/caja/issues/66", "closed": "2015-04-16 01:27:07", "ttf": 0.0002777777777777778, "title": "caja doesn't rewrite uri fragment identifiers", "commits": {}, "user": "kpreid", "labels": ["Component-Domado", "Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 66](https://code.google.com/p/google-caja/issues/detail?id=66) created by felix8a on 2008-02-06T15:08:29.000Z:\n\n&lt;map name=&quot;map1&quot;&gt;...&lt;/map&gt;\n&lt;img usemap=&quot;#map1&quot; src=&quot;...&quot; /&gt;\n\nthe map name= gets changed to &quot;$namespace-map1&quot;\nthe img usemap= doesn't.\n", "created": "2015-04-16 01:26:56"}, {"url": "https://github.com/google/caja/issues/65", "closed": "2015-04-16 01:26:56", "ttf": 0.0002777777777777778, "title": "how about adding version+build to the jar manifest?", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 65](https://code.google.com/p/google-caja/issues/detail?id=65) created by felix8a on 2008-02-06T13:42:09.000Z:\n\nit would be helpful if the ant build.xml automatically added svn revision\nand current time to the jar manifest.  and maybe also a --version arg in\nthe main classes.\n", "created": "2015-04-16 01:26:47"}, {"url": "https://github.com/google/caja/issues/64", "closed": "2015-04-16 01:26:47", "ttf": 0.0002777777777777778, "title": "Proof on http://google-caja.googlecode.com/svn/changes/mikesamuel/string-interpolation-29-Jan-2008/trunk/src/js/com/google/caja/interp/index.html", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 64](https://code.google.com/p/google-caja/issues/detail?id=64) created by oyasumi on 2008-02-03T15:18:24.000Z:\n\nIn section &quot;Implementing Context Scanners using State Machines&quot;, the state\nmachine is (amusingly) not HTML quoted, making the close_tag_start: else\ncase throughout the else case of tag_name: fold as a close tag in (at\nleast) Firefox. (Was that entire pre tag intended to be an xmp tag?)\n\nThe code in section &quot;Memoizing Escaper Results to Improve Performance&quot; will\nonly flush the cache once; fix:\nif (++size === 100) { cache = {}; size = 0; }\n\nThe document talks very much seems to talk about a javascript\nimplementation but only links to a state machine description\nhttp://google-caja.googlecode.com/svn/changes/mikesamuel/string-interpolation-29-Jan-2008/trunk/src/js/com/google/caja/interp/html/fsm.txt\n-- incomplete, or just forgotten linkage?\n", "created": "2015-04-16 01:26:44"}, {"url": "https://github.com/google/caja/issues/62", "closed": "2015-04-16 01:26:29", "ttf": 0.0002777777777777778, "title": "Partial tags cause GadgetRewriteException in DOMParser", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 62](https://code.google.com/p/google-caja/issues/detail?id=62) created by mikesamuel on 2008-01-31T08:56:17.000Z:\n\nAs reported by JasonH\n# Input\n\n&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;UTF-8&quot;&quot;?&gt;&lt;Module&gt;&lt;ModulePrefs\ntitle=&quot;&quot;Hello, OpenSocial&quot;&quot;&gt;&lt;Require\nfeature=&quot;&quot;opensocial-0.5&quot;&quot;&gt;&lt;/Require&gt;&lt;/ModulePrefs&gt;&lt;Content type=&quot;&quot;html&quot;&quot;&gt;\n&lt;![CDATA[\n&lt;script&gt;&lt;\n]]&gt;\n# &lt;/Content&gt;&lt;/Module&gt;\n", "created": "2015-04-16 01:26:24"}, {"url": "https://github.com/google/caja/issues/61", "closed": "2015-04-16 01:26:24", "ttf": 0.0002777777777777778, "title": "HTMLPluginCompiler --js_name option seems useless", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 61](https://code.google.com/p/google-caja/issues/detail?id=61) created by felix8a on 2008-01-31T04:47:16.000Z:\n\nHTMLPluginCompilerMain requires you to supply a --js_name option, but\nsetting it to anything but **_OUTERS**_ seems to be useless.\n\ngiven foo.html:\n\n&lt;script&gt;\nvar a = foo();\n&lt;/script&gt;\n\nrunning:\njava -jar pluginc.jar foo.html --js_name abc -p def -r ghi\n\nproduces this foo.js:\n{\n  _**.loadModule(function (abc) {\n      ___OUTERS**_.a = _**.asSimpleFunc(___OUTERS**_.foo)();\n      **_OUTERS**_.emitHtml___('\\n');\n    });\n}\n", "created": "2015-04-16 01:26:17"}, {"url": "https://github.com/google/caja/issues/60", "closed": "2015-04-16 01:26:17", "ttf": 0.0002777777777777778, "title": "IndexOutOfBoundsException when rewriting css 'body' selector", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 60](https://code.google.com/p/google-caja/issues/detail?id=60) created by felix8a on 2008-01-30T20:12:18.000Z:\n\n&lt;style&gt;\nbody div { margin: 0; } /\\* this works _/\nbody { margin: 0; } /_ this fails */\n&lt;style&gt;\n", "created": "2015-04-16 01:26:10"}, {"url": "https://github.com/google/caja/issues/59", "closed": "2015-04-16 01:26:10", "ttf": 0.0002777777777777778, "title": "css parser should allow multi-word font names", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 59](https://code.google.com/p/google-caja/issues/detail?id=59) created by felix8a on 2008-01-30T20:11:02.000Z:\n\n&lt;style&gt;\ndiv { font-family: &quot;Courier New&quot;; } /\\* this works _/\ndiv { font-family: Courier New; } /_ this fails */\n&lt;/style&gt;\n", "created": "2015-04-16 01:25:55"}, {"url": "https://github.com/google/caja/issues/58", "closed": "2015-04-16 01:25:55", "ttf": 0.0002777777777777778, "title": "css parser should allow _prop and *prop hacks", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect", "YUI"], "commitsDetails": [], "body": "Original [issue 58](https://code.google.com/p/google-caja/issues/detail?id=58) created by felix8a on 2008-01-30T20:10:22.000Z:\n\nexample is:\n\n&lt;style&gt;\ndiv { _margin: 0; }\ndiv { *margin: 0; }\n&lt;/style&gt;\n\nthese are used to workaround IE bugs.\nbrowsers other than IE&lt;=6 ignore &quot;_prop&quot;.\nbrowsers other than IE&lt;=7 ignore &quot;*prop&quot;.\n\nthere are other hacks that might be nice to have, but those two are pretty\nsimple and cover most of the common cases.\n", "created": "2015-04-16 01:25:31"}, {"url": "https://github.com/google/caja/issues/57", "closed": "2015-04-16 01:25:31", "ttf": 0.0002777777777777778, "title": "NullPointerException when rewriting css * selector", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 57](https://code.google.com/p/google-caja/issues/detail?id=57) created by felix8a on 2008-01-30T19:59:01.000Z:\n\nexample is:\n\n&lt;style&gt;\ndiv \\* { margin: 0; }\n&lt;/style&gt;\n", "created": "2015-04-16 01:25:22"}, {"url": "https://github.com/google/caja/issues/56", "closed": "2015-04-16 01:25:22", "ttf": 0.0002777777777777778, "title": "'Unexpected end of input' when parsing empty <style> sections", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 56](https://code.google.com/p/google-caja/issues/detail?id=56) created by felix8a on 2008-01-30T19:58:06.000Z:\n\nexample is:\n&lt;style&gt;&lt;/style&gt;\n", "created": "2015-04-16 01:25:08"}, {"url": "https://github.com/google/caja/issues/55", "closed": "2015-04-16 01:25:08", "ttf": 0.0002777777777777778, "title": "'varBadSuffix' when cajoling 'onclick=\"foo(this)\"'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 55](https://code.google.com/p/google-caja/issues/detail?id=55) created by felix8a on 2008-01-30T19:56:25.000Z:\n\n&lt;a onclick=&quot;foo(this)&quot;&gt;hi&lt;/a&gt;\n\nresult is:\n\nFATAL_ERROR: Variables cannot end in &quot;**&quot;: Rule &quot;varBadSuffix&quot;, Reference\n  Identifier : thisNode_**\n", "created": "2015-04-16 01:25:01"}, {"url": "https://github.com/google/caja/issues/54", "closed": "2015-04-16 01:25:01", "ttf": 0.0002777777777777778, "title": "'Unrecognized node: ForEachLoop' when cajoling 'for (k in x)'", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 54](https://code.google.com/p/google-caja/issues/detail?id=54) created by felix8a on 2008-01-30T19:55:30.000Z:\n\n&lt;script&gt;\nvar x = {};\nfor (var k in x) {}\n&lt;/script&gt;\n", "created": "2015-04-16 01:24:44"}, {"url": "https://github.com/google/caja/issues/53", "closed": "2015-04-16 01:24:44", "ttf": 0.0002777777777777778, "title": "ClassCastException when cajoling 'new A.b()'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 53](https://code.google.com/p/google-caja/issues/detail?id=53) created by felix8a on 2008-01-30T19:54:20.000Z:\n\n&lt;script&gt;\nvar x = new A.b();\n&lt;/script&gt;\n\nresult is:\n\nException in thread &quot;main&quot; java.lang.ClassCastException:\ncom.google.caja.parser.js.Operation\nat\ncom.google.caja.parser.quasiliteral.JsRewriter.getReferenceName(JsRewriter.java:226)\n...\n", "created": "2015-04-16 01:24:39"}, {"url": "https://github.com/google/caja/issues/52", "closed": "2015-04-16 01:24:39", "ttf": 0.0002777777777777778, "title": "css parser doesn't like _ in identifiers", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 52](https://code.google.com/p/google-caja/issues/detail?id=52) created by felix8a on 2008-01-30T19:53:04.000Z:\n\n&lt;style&gt;\n# a_b {}\n\n.a_b {}\n&lt;/style&gt;\n\ncomplains &quot;ERROR: Expected { not _&quot;\n\n_ isn't valid in the CSS2 spec, but it was added to the CSS2.1 spec.\nI think browsers have always supported _ in identifiers, and it's commonly\nused by webdevs.\n", "created": "2015-04-16 01:24:32"}, {"url": "https://github.com/google/caja/issues/51", "closed": "2015-04-16 01:24:32", "ttf": 0.0002777777777777778, "title": "_gel('foo').bar fails due to firefox 2.x hasOwnProperty bug", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 51](https://code.google.com/p/google-caja/issues/detail?id=51) created by felix8a on 2008-01-30T17:28:41.000Z:\n\nthe symptom is, something like _gel('foo').bar cajoled in firefox will\noften generate a delayed exception &quot;Illegal operation on WrappedNative\nprototype object&quot; in caja.js hasOwnProp().\n\nwhat happens is:\n_gel('foo').bar when cajoled\ncalls canReadPub(foo, bar)\ncalls isJSONContainer(foo)\ncalls directConstructor(foo)\ncalls foo.hasOwnProperty('__proto__')\n\n**proto** for any dom node is an XPCNativeWrapper, and that triggers the\nhasOwnProperty bug.\n\nthe bug is here\nhttps://bugzilla.mozilla.org/show_bug.cgi?id=375344\n\nit's still broken in firefox 2.0.0.11.\nit should be fixed in the next release of firefox 2.x.\nit's fixed in firefox 3 beta 2.\n\ncaja.js tries to workaround the problem in canCallHasOwnProperty(), but\nthat only checks for HTMLDivElement, so it's still possible to get the\nexception with code like this:\n\n&lt;span id=&quot;foo&quot;&gt;abc&lt;/span&gt;\n&lt;script&gt; _gel('abc').bar; &lt;/script&gt;\n", "created": "2015-04-16 01:24:21"}, {"url": "https://github.com/google/caja/issues/49", "closed": "2015-04-16 01:23:56", "ttf": 0.0002777777777777778, "title": "catch blocks do not sanitize the exception", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 49](https://code.google.com/p/google-caja/issues/detail?id=49) created by ihab.awad on 2008-01-28T23:18:03.000Z:\n\nCatch blocks do not sanitize the exception thrown. \n", "created": "2015-04-16 01:23:48"}, {"url": "https://github.com/google/caja/issues/48", "closed": "2015-04-16 01:23:47", "ttf": 0.0002777777777777778, "title": "try/catch/finally not implemented", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 48](https://code.google.com/p/google-caja/issues/detail?id=48) created by ihab.awad on 2008-01-28T23:15:52.000Z:\n\nRewriter does not implement try/catch/finally.\n", "created": "2015-04-16 01:23:43"}, {"url": "https://github.com/google/caja/issues/47", "closed": "2015-04-16 01:23:43", "ttf": 0.0002777777777777778, "title": "onerror is not implemented", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 47](https://code.google.com/p/google-caja/issues/detail?id=47) created by sshjason on 2008-01-25T23:04:42.000Z:\n\nthe onerror attribute is not implemented.\n", "created": "2015-04-16 01:23:25"}, {"url": "https://github.com/google/caja/issues/46", "closed": "2015-04-16 01:23:25", "ttf": 0.0002777777777777778, "title": "Flash Attributes", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 46](https://code.google.com/p/google-caja/issues/detail?id=46) created by sshjason on 2008-01-25T22:20:27.000Z:\n\nThe following Flash Attributes need to be added:\n\nallowScriptAccess\nallowNetworking\n", "created": "2015-04-16 01:23:19"}, {"url": "https://github.com/google/caja/issues/40", "closed": "2015-04-16 01:22:41", "ttf": 0.0002777777777777778, "title": "html_sanitize expects a string", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 40](https://code.google.com/p/google-caja/issues/detail?id=40) created by metaweta on 2008-01-18T01:29:13.000Z:\n\n```\n&lt;div id=&quot;output&quot;&gt;Hi&lt;/div&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\n```\n\n   var o ={ match: function() {\n                return new Array(\n                    {\n                        length:0,\n                        toString:function(){\n                            return 'unsanitized control over innerHTML';\n                        }\n                    }\n                );\n            },\n            substring: function() { return ''; }\n          };\n   document.getElementById(&quot;output&quot;).innerHTML= o;\n&lt;/script&gt;\n", "created": "2015-04-16 01:22:32"}, {"url": "https://github.com/google/caja/issues/39", "closed": "2015-04-16 01:22:32", "ttf": 0.0002777777777777778, "title": "javascript urls aren't sanitized", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 39](https://code.google.com/p/google-caja/issues/detail?id=39) created by metaweta on 2008-01-18T00:42:08.000Z:\n\n&lt;div id=&quot;1&quot;&gt;&lt;/div&gt;\n&lt;script type=&quot;text/javascript&quot;&gt;\ndocument.getElementById(&quot;1&quot;).innerHTML=&quot;&lt;a\nhref='javascript:alert(1)'&gt;blah&lt;/a&gt;&quot;;\n&lt;/script&gt;\n", "created": "2015-04-16 01:22:21"}, {"url": "https://github.com/google/caja/issues/38", "closed": "2015-04-16 01:22:21", "ttf": 0.0002777777777777778, "title": "Reassigning \"this\" in global scope", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 38](https://code.google.com/p/google-caja/issues/detail?id=38) created by metaweta on 2008-01-17T01:28:17.000Z:\n\nthis=function(){}\nthis();\n\nYou can replace your global scope; I don't know if that causes problems,\nbut it's weird.\n", "created": "2015-04-16 01:22:10"}, {"url": "https://github.com/google/caja/issues/37", "closed": "2015-04-16 01:22:10", "ttf": 0.0002777777777777778, "title": "Invoking 'new' on an expression causes ClassCastException", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 37](https://code.google.com/p/google-caja/issues/detail?id=37) created by ihab.awad on 2008-01-17T00:59:19.000Z:\n\nAs of rev 402. Cajoling the expression --\n\n  new foo.bar\n\ncauses &quot;ClassCastException: Operation&quot;. This is because the rule that accepts the &quot;new&quot; operator \nassumes the RHS to be a Reference, and bombs out when that's not the case. Should be rewritten to \ntwo separate rules: one that handles &quot;new [Reference]&quot;, and one that prints a meaningful error \nmessage saying something like, &quot;Cannot invoke new on the result of an arbitrary expression&quot;.\n", "created": "2015-04-16 01:21:59"}, {"url": "https://github.com/google/caja/issues/36", "closed": "2015-04-16 01:21:59", "ttf": 0.0002777777777777778, "title": "Global constructor names aren't being rewritten as properties of __OUTERS__", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 36](https://code.google.com/p/google-caja/issues/detail?id=36) created by metaweta on 2008-01-17T00:11:31.000Z:\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\n        function F() {};\n        f = new F();\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected:\n{\n  **_OUTERS**_.F = _**.simpleFunc(function () {\n    });\n  ___OUTERS**_.f = new (_**.asCtor(___OUTERS**_.F))();\n}\n\nActual:\n{\n  **_OUTERS**_.F = _**.simpleFunc(function () {\n    });\n  ___OUTERS**_.f = new (___.asCtor(F))();\n}\n", "created": "2015-04-16 01:21:54"}, {"url": "https://github.com/google/caja/issues/35", "closed": "2015-04-16 01:21:54", "ttf": 0.0002777777777777778, "title": "caja.def unrecognized", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Security", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 35](https://code.google.com/p/google-caja/issues/detail?id=35) created by metaweta on 2008-01-17T00:01:16.000Z:\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\n                function F(x) { this.x_ = x; }\n                caja.def(F, Object, {});\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect the cajoler to recognize the special form caja.def(derived, base,\nmethods).  Instead I get\n\nConstructors are not first class: Rule &quot;varBadCtorLeak&quot;, Reference\n  Identifier : F\n", "created": "2015-04-16 01:21:45"}, {"url": "https://github.com/google/caja/issues/34", "closed": "2015-04-16 01:21:45", "ttf": 0.0002777777777777778, "title": "Increment and decrement on object fields produces bogus javascript", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 34](https://code.google.com/p/google-caja/issues/detail?id=34) created by mikesamuel on 2008-01-15T05:49:01.000Z:\n\nThe following\n  var o = { x: 0 };\n  o.x++;\ncajoles to the following illegal javascript\n  {\n    **_OUTERS**_.o = {\n      'x': 0\n    };\n    (function () {\n        var x___ = **_OUTERS**_.o;\n        return x___.x_canRead___ ? x___.x : **_.readPub(x**_, 'x');\n      })()++;\n  }\n\nNote the lack of a x_canSetPub___, and the ++ applied to a function call.\n", "created": "2015-04-16 01:21:34"}, {"url": "https://github.com/google/caja/issues/33", "closed": "2015-04-16 01:21:34", "ttf": 0.0002777777777777778, "title": "MultiDeclarations don't cajole", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 33](https://code.google.com/p/google-caja/issues/detail?id=33) created by mikesamuel on 2008-01-15T05:41:04.000Z:\n\nBoth of the following statements fail to cajole\n  var a, b;\n  for (var i = 0, j = 10; i &lt; j; ++i, --j);\n\nwith\n    Exception in thread &quot;main&quot; java.lang.RuntimeException:\n    Unrecognized node: MultiDeclaration\n        at ...AbstractRewriter.expand(AbstractRewriter.java:135)\n        ...\n", "created": "2015-04-16 01:21:29"}, {"url": "https://github.com/google/caja/issues/31", "closed": "2015-04-16 01:21:27", "ttf": 0.0002777777777777778, "title": "'instanceof' should not completely expand RHS", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 31](https://code.google.com/p/google-caja/issues/detail?id=31) created by ihab.awad on 2008-01-15T01:27:55.000Z:\n\nIf I have --\n\n  function foo() {}\n  ... x instanceof foo ...\n\nthe current expansion will expand the RHS of the 2nd line completely, to --\n\n  ... x instanceof _**.primFreeze(___OUTERS**_.foo)) ...\n\nwe need an expansion which re-scopes to **_OUTERS**_ but does not prematurely freeze.\n", "created": "2015-04-16 01:21:20"}, {"url": "https://github.com/google/caja/issues/30", "closed": "2015-04-16 01:21:20", "ttf": 0.0002777777777777778, "title": "'this' not allowed in methods declared inside caja.freeze", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 30](https://code.google.com/p/google-caja/issues/detail?id=30) created by andrea.campi on 2008-01-14T22:04:47.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nTranslate:\n\nfunction Foo() {\n  return caja.freeze({\n    getSelf: function() { return this; }\n  });\n}\n\n<b>What is the expected output? What do you see instead?</b>\n\nFATAL_ERROR: Method in non-method context: Rule &quot;funcBadMethod&quot;, FunctionConstructor\n  Identifier\n  Block\n    ReturnStmt\n      Reference\n        Identifier : this\n\nThis should be equivalent to:\n\nfunction Foo() {\n  return caja.freeze({\n  });\n}\nFoo.prototype.getSelf = function() { return this; }\n\n<b>What version of the product are you using? On what operating system?</b>\n\nr359\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 01:21:18"}, {"url": "https://github.com/google/caja/issues/29", "closed": "2015-04-16 01:21:17", "ttf": 0.0002777777777777778, "title": "Parsing of '<' is problematic", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 29](https://code.google.com/p/google-caja/issues/detail?id=29) created by andrea.campi on 2008-01-14T18:04:20.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nTranslate:\n\nvar Foo = function() {\n      var arr;\n      for (var i=0; i&lt;arr.length; i++) {}\n};\n\nOr:\n\nvar Foo = function() {\n      if (a&lt;b) {}\n};\n\n<b>What is the expected output? What do you see instead?</b>\n\nTranslation fails with: ERROR: Unexpected end of input in script%3E\n\nNote that it doesn't fail is a space is inserted after the '&lt;'\n\n<b>What version of the product are you using? On what operating system?</b>\n\nr359\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 01:21:11"}, {"url": "https://github.com/google/caja/issues/28", "closed": "2015-04-16 01:21:10", "ttf": 0.0002777777777777778, "title": "ClassCastException: com.google.caja.parser.js.FunctionConstructor", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 28](https://code.google.com/p/google-caja/issues/detail?id=28) created by andrea.campi on 2008-01-14T17:42:53.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nTranslate:\n\nvar Singleton = new (function() {\n})();\n\n<b>What is the expected output? What do you see instead?</b>\n\njava.lang.ClassCastException: com.google.caja.parser.js.FunctionConstructor\n\nThe expected behavior would be equivalent to:\n\nvar Singleton = (function() {\n})();\n\nwhich is translated to:\n\n{\n  _**.loadModule(function (___OUTERS**_) {\n      **_OUTERS**_.Singleton = **_.asSimpleFunc(**_.primFreeze(___.simpleFunc(function () {\n            })))();\n    });\n}\n\n<b>What version of the product are you using? On what operating system?</b>\n\nr359\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 01:21:04"}, {"url": "https://github.com/google/caja/issues/27", "closed": "2015-04-16 01:21:04", "ttf": 0.0002777777777777778, "title": "switch() is not recognized", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 27](https://code.google.com/p/google-caja/issues/detail?id=27) created by andrea.campi on 2008-01-14T14:01:57.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nTranslate:\n\nvar foo = 1;\n\nswitch (foo) {\n  case 1: break;\n  default: break;\n}\n\n<b>What is the expected output? What do you see instead?</b>\n\njava.lang.RuntimeException: Unrecognized node: SwitchStmt : \n\n<b>What version of the product are you using? On what operating system?</b>\n\nr359\n\n<b>Please provide any additional information below.</b>\n", "created": "2015-04-16 01:20:55"}, {"url": "https://github.com/google/caja/issues/26", "closed": "2015-04-16 01:20:55", "ttf": 0.0002777777777777778, "title": "Calling Javascript type-cast constructors as simple-functions must work cajoled, but doesn't", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 26](https://code.google.com/p/google-caja/issues/detail?id=26) created by erights on 2008-01-11T03:31:43.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Cajole &quot;foo = String(bar);&quot;\n2. Run the result\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\nThis should work cajoled just as it does uncajoled.\nHowever, the current translation and runtime spec correctly cause it fail,\ncomplaining that String is a constructor, and so can't be called as a\nsimple-function. The current implementation correctly implements this\nbroken implication of the current spec.\n\nOriginally reported by Andrea Campi at\nhttp://groups.google.com/group/google-caja-discuss/browse_thread/thread/4a9a5e2fbe18be39#\n", "created": "2015-04-16 01:20:52"}, {"url": "https://github.com/google/caja/issues/25", "closed": "2015-04-16 01:20:52", "ttf": 0.0002777777777777778, "title": "JSON arrays cause an error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 25](https://code.google.com/p/google-caja/issues/detail?id=25) created by andrea.campi on 2008-01-10T14:55:44.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nTry translating either of these:\n\nvar foo = [];\n\nvar foo = {meta: []};\n\n<b>What is the expected output? What do you see instead?</b>\n\nAll I get is:\n\njava.lang.RuntimeException: Unrecognized node: ArrayConstructor\n\n<b>What version of the product are you using? On what operating system?</b>\n\ntrunk r337\n", "created": "2015-04-16 01:20:41"}, {"url": "https://github.com/google/caja/issues/24", "closed": "2015-04-16 01:20:41", "ttf": 0.0002777777777777778, "title": "Bad reference to other functions in same module", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 24](https://code.google.com/p/google-caja/issues/detail?id=24) created by andrea.campi on 2008-01-10T13:49:19.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nTranslate:\n\n&lt;script&gt;\nfunction Foo() {\n  return caja.freeze({\n  });\n}\n\nfunction Bar() {\n  var foo = new Foo();\n\n  return caja.freeze({\n  });\n}\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\n\n{\n  _**.loadModule(function (___OUTERS**_) {\n      **_OUTERS**_.Foo = **_.simpleFunc(function () {\n          return (function () {\n              var x**_ = **_OUTERS**_.caja;\n              var x0___ = {\n              };\n              x___.freeze_canCall___ ? x___.freeze(x0___) : **_.callPub(x**_, 'freeze', [x0___]);\n            })();\n        });\n      **_OUTERS**_.Bar = **_.simpleFunc(function () {\n          var foo = new (**_.asCtor(Foo))();\n          return (function () {\n              var x___ = **_OUTERS**_.caja;\n              var x0___ = {\n              };\n              x___.freeze_canCall___ ? x___.freeze(x0___) : **_.callPub(x**_, 'freeze', [x0___]);\n            })();\n        });\n    });\n}\n\nNote how Foo is accessed unqualified. It needs to be accessed via **_OUTERS**_; or, \nalternatively, we could use:\n\n{\n  _**.loadModule(function (___OUTERS**_) {\n      var Foo = _**.simpleFunc(function () {\n      ....\n      }\n      ___OUTERS**_.Foo = Foo;\n}\n\nwhich would make it OK to refer to Foo in subsequent code in the same module. Foo wouldn't \nescaped the current module, but I'm not sure whether there could be a risk of other unintended \nside effects.\n\n<b>What version of the product are you using? On what operating system?</b>\n\ntrunk as of Jan 9, r337.\n", "created": "2015-04-16 01:20:36"}, {"url": "https://github.com/google/caja/issues/23", "closed": "2015-04-16 01:20:36", "ttf": 0.0002777777777777778, "title": "log-to-console.js causes error", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 23](https://code.google.com/p/google-caja/issues/detail?id=23) created by andrea.campi on 2008-01-09T14:55:52.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nAfter loading caja.js and log-to-console.js, call:\n\ncaja.log(&quot;test&quot;);\n\nThen load the page with Firefox with Firebug.\n\n<b>What is the expected output? What do you see instead?</b>\n\nInstead of getting &quot;test&quot; in the log, you will see &quot;uncaught exception:\nPermission denied to get property Function.**parent**\n\nI am not sure what is the reason for the message, but a simple fix is to\nchange log-to-console.js to:\n\n```\n___.setLogFunc(function(str) {\n  global.console.log(str);\n})\n```\n\n<b>What version of the product are you using? On what operating system?</b>\n\nJan 9 = r337\n", "created": "2015-04-16 01:20:31"}, {"url": "https://github.com/google/caja/issues/22", "closed": "2015-04-16 01:20:31", "ttf": 0.0002777777777777778, "title": "Missing return in translation of member access", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 22](https://code.google.com/p/google-caja/issues/detail?id=22) created by andrea.campi on 2008-01-09T14:21:43.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nTraslate the following code:\n\nvar foo = bar.baz;\n\nThis will result in:\n\n{\n  _**.loadModule(function (o) {\n      ___OUTERS**_.foo = (function () {\n          var x___ = **_OUTERS**_.bar;\n          x___.baz_canRead___ ? x___.baz : **_.readPub(x**_, 'baz');\n        })();\n    });\n}\n\n<b>What is the expected output? What do you see instead?</b>\n\nLine 5 is missing a return; the expected output is:\n\n{\n  _**.loadModule(function (o) {\n      ___OUTERS**_.foo = (function () {\n          var x___ = **_OUTERS**_.bar;\n          return x___.baz_canRead___ ? x___.baz : **_.readPub(x**_, 'baz');\n        })();\n    });\n}\n\n<b>What version of the product are you using? On what operating system?</b>\n\ntrunk as of January 9, r337.\n", "created": "2015-04-16 01:20:14"}, {"url": "https://github.com/google/caja/issues/16", "closed": "2015-04-16 01:19:48", "ttf": 0.0002777777777777778, "title": "The caja rewriter fails on catch blocks", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 16](https://code.google.com/p/google-caja/issues/detail?id=16) created by mikesamuel on 2007-12-22T05:48:22.000Z:\n\nCatch blocks have a parse tree like\n  TryStmt\n    Block\n      ...\n    CatchStmt\n      Declaration\n        Identifier : ex\n      Block\n        ...\n\nThe current rewrite rules rewrite the Declaration to an assignment but this\nis incorrect.\n\nPreviously, aaja rewrite\n  catch (ex) { foo }\nto\n  catch (tmp_1__) {\n    var ex = '' + tmp_1__;\n    foo;\n  }\n\nwhere conversion to a string was used as a poor man's sanitization.\n", "created": "2015-04-16 01:19:41"}, {"url": "https://github.com/google/caja/issues/15", "closed": "2015-04-16 01:19:41", "ttf": 0.0002777777777777778, "title": "local__ is accepted", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 15](https://code.google.com/p/google-caja/issues/detail?id=15) created by andrea.campi on 2007-12-10T14:20:18.000Z:\n\n<b>What steps will reproduce the problem?</b>\n\nTranslate the following (with the online translator, for instance):\n\n&lt;script&gt;\nvar foo__ = &quot;bar&quot;;\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\n\nI expect the above to be statically refused. Instead I get:\n\n{\n  _**.loadModule(function (___OUTERS**_) {\n      var foo__ = &quot;bar&quot;;\n    });\n}\n", "created": "2015-04-16 01:19:34"}, {"url": "https://github.com/google/caja/issues/14", "closed": "2015-04-16 01:19:34", "ttf": 0.0002777777777777778, "title": "Current Caja translator doesn't protect encapsulated state", "commits": {}, "user": "kpreid", "labels": ["Priority-Critical", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 14](https://code.google.com/p/google-caja/issues/detail?id=14) created by erights on 2007-12-05T18:34:15.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. I fed the following text into Andrea's online translator page:\n\n&lt;script&gt;x.foo_;\n&lt;/script&gt;\n\nWhat is the expected output? \n\nI expected to see a failure report. This text must be statically rejected\nby the Caja translator, because it's accessing an internal property name\n(one ending in &quot;_&quot;) without using &quot;this.&quot;.\n\nWhat do you see instead?\n\n{\n  _**.loadModule(function (___OUTERS**_) {\n      (function () {\n          var x___ = **_OUTERS**_.x;\n          return x___.foo__canRead___ ? x___.foo_ : **_.readPub(x**_, 'foo_');\n        })();\n    });\n}\n\nIf x does have an internal &quot;foo_&quot; property for which the canRead fastpath\nflag is already set, this translated code will innappropriately succeed,\nresulting in a security breach.\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 01:19:32"}, {"url": "https://github.com/google/caja/issues/12", "closed": "2015-04-16 01:19:22", "ttf": 0.0002777777777777778, "title": "Adding a method is translated incorrectly", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 12](https://code.google.com/p/google-caja/issues/detail?id=12) created by andrea.campi on 2007-12-03T14:39:39.000Z:\n\nExample:\n\nfunction Point(x, y) {\n  this.x_ = x;\n};\nPoint.prototype.toString = function() { \n  return &quot;&lt;&quot; + this.getX() + &quot;,&quot; + this.getY() + &quot;&gt;&quot;; \n};\n\nFrom MarkM:\n\nthe relevant rule from expand.emaker is\n\n```\n       match js`@fname.prototype.@p = @m` ?\n             (fname.isFuncName() &amp;&amp;\n              `$p` !~ `constructor`)       { def m2 :=\n```\n\nexpandMember(fname, m, scope)\n\njs`___.setMember($fname, ${`$p`}, $m2)`\n                                               }\n\nAs you see, for this case, you should be calling setMember by itself\nrather than readPub+setPub. The full translation of Andrea's example,\nignoring the fast-path stuff for brevity, should be\n\nvar Point = ___.ctor(function(x,y) {\n   ___.setProp(this,'_x',x);\n});\n\n**_.setMember(Point,'toString',**_.method(Point,function() {\n   return &quot;&lt;&quot; + ___.callProp(this,'getX',[]) + ',' +\n                     ___.callProp(this,'getY',[]) + '&gt;';\n}));\n", "created": "2015-04-16 01:19:18"}, {"url": "https://github.com/google/caja/issues/11", "closed": "2015-04-16 01:19:18", "ttf": 0.0002777777777777778, "title": "Constructors are frozen prematurely", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 11](https://code.google.com/p/google-caja/issues/detail?id=11) created by andrea.campi on 2007-12-03T14:36:58.000Z:\n\n(I don't have a detailed description, but I'm still logging this to keep track of the conversation with \nMarkM, who has a WIP patch that fixes the issue).\n", "created": "2015-04-16 01:19:13"}, {"url": "https://github.com/google/caja/issues/10", "closed": "2015-04-16 01:19:13", "ttf": 0.0002777777777777778, "title": "build.xml 'demos' target is outdated", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 10](https://code.google.com/p/google-caja/issues/detail?id=10) created by andrea.campi on 2007-12-03T14:34:08.000Z:\n\n'demos' calls HtmlPluginCompilerMain with the wrong parameters.\n", "created": "2015-04-16 01:19:06"}, {"url": "https://github.com/google/caja/issues/9", "closed": "2015-04-16 01:19:06", "ttf": 0.0002777777777777778, "title": "caja.freeze can't be called", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 9](https://code.google.com/p/google-caja/issues/detail?id=9) created by andrea.campi on 2007-12-03T14:31:07.000Z:\n\nFrom mailing list thread http://groups.google.com/group/google-caja-\ndiscuss/browse_thread/thread/7bc023f1413f6384/\n\nMarkM:\n\nThat's a bug in caja.js. The intention is that all functions exported\nto 'caja' be callable. I won't be able to fix this till tonight.\n", "created": "2015-04-16 01:18:59"}, {"url": "https://github.com/google/caja/issues/8", "closed": "2015-04-16 01:18:59", "ttf": 0.0002777777777777778, "title": "Error translating constructor invocation", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 8](https://code.google.com/p/google-caja/issues/detail?id=8) created by andrea.campi on 2007-12-03T14:27:54.000Z:\n\nFrom mailing list thread: http://groups.google.com/group/google-caja-\ndiscuss/browse_thread/thread/7bc023f1413f6384/\n\nTranslating the following:\n\nfunction F(x) { this.x_ = x; }\nF.make = function(x) {\n  return new F(x);\n};\n\nproduces:\n\n{\n  ___.loadModule(function (p) {\n      p.F = ___.ctor(function (x) {\n          var t___ = this;\n          t___.x_ = x;\n        });\n      (function () {\n          var x___ = p.F;\n          return x___.make_canSet___ ? (x___.make = function (x) {\n              return ___.callNew(p.F, [x]);\n            }) : ___.setPub(x___, 'make', function (x) {\n              return ___.callNew(p.F, [x]);\n            });\n        })();\n      return p;\n    });\n}\n\n___.callNew doesn't exist, the body of F.make should be:\n\n```\n      ___.setMember(plugin.F,'make',___.method(plugin.F,function(x) {\n        return new (___.asCtor(plugin.F))(x);\n      }));\n```\n", "created": "2015-04-16 01:18:55"}, {"url": "https://github.com/google/caja/issues/7", "closed": "2015-04-16 01:18:54", "ttf": 0.0002777777777777778, "title": "[PATCH] Null namespaceName should be disallowed", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 7](https://code.google.com/p/google-caja/issues/detail?id=7) created by andrea.campi on 2007-12-03T14:23:48.000Z:\n\nCreating a new PluginMeta instance with a null (for instance, by passing a null nsName to HtmlPluginCompiler) causes bad generated code, so we may as well disallow it.\n", "created": "2015-04-16 01:18:50"}, {"url": "https://github.com/google/caja/issues/6", "closed": "2015-04-16 01:18:50", "ttf": 0.0002777777777777778, "title": "Trivial: typo in comment", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 6](https://code.google.com/p/google-caja/issues/detail?id=6) created by andrea.campi on 2007-12-03T14:20:25.000Z:\n\nSee attached diff\n", "created": "2015-04-16 01:18:45"}, {"url": "https://github.com/google/caja/issues/5", "closed": "2015-04-16 01:18:45", "ttf": 0.0002777777777777778, "title": "warnings are fatal", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 5](https://code.google.com/p/google-caja/issues/detail?id=5) created by andrea.campi on 2007-12-03T14:18:49.000Z:\n\nFrom mailing list thread: http://groups.google.com/group/google-caja-\ndiscuss/browse_thread/thread/4d55528621d84b06\n\nWarning messages (MessageLevel.WARNING) are fatal and abort the translation. The expected \nbehavior is for a warning to be emitted, but translation to proceed.\n\nTo reproduce the issue, try translating the following code:\n\nvar a =  {\n foo: &quot;bar&quot;,\n};\n\nThe attached diff fixes this by aborting only if the level is MessageLevel.CRITICAL_WARNING or \nabove; this is a somewhat arbitrary choice that can be changed.\nAlso, messages are emitted to System.err only if the error level is high enough to abort \ntranslation; callers of this API should IMHO call getErrors() themselves to collect any warning, so \nthey can present them to the user in a better way.\n", "created": "2015-04-16 01:18:41"}, {"url": "https://github.com/google/caja/issues/4", "closed": "2015-04-16 01:18:40", "ttf": 0.0002777777777777778, "title": "Typo: wrong variable name", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 4](https://code.google.com/p/google-caja/issues/detail?id=4) created by erights on 2007-11-11T00:14:24.000Z:\n\nReported by Sol at:\nhttp://groups.google.com/group/google-caja-discuss/browse_thread/thread/8e75113d0b3e9573\n(Thanks). Sol says:\n\nThe following code in\nhttp://google-caja.googlecode.com/svn/trunk/src/js/com/google/caja/ca...\nis incorrect.\nThe variable &quot;length&quot; in the for loop is  undefined. So indexOf will\nalways return -1.\nI think you meant to use &quot;len&quot; instead.\n\n```\n...\nArray.prototype.indexOf = function(specimen) {\n    ...\n    var len = this.length;\n    for (var i = 0; i &lt; length; i += 1) {\n        ...\n```\n", "created": "2015-04-16 01:18:38"}, {"url": "https://github.com/google/caja/issues/3", "closed": "2015-04-16 01:18:38", "ttf": 0.0002777777777777778, "title": "'int' values are serialized as 'null'", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 3](https://code.google.com/p/google-caja/issues/detail?id=3) created by erights on 2007-11-01T19:30:30.000Z:\n\nReported by Donovan Walker. Thanks!\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\n2. JSON.serialize(3)\n<b>3.</b>\n\n<b>What is the expected output? What do you see instead?</b>\n\nShould see\n\n   3\n\ndid see\n\n   null\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 01:18:36"}, {"url": "https://github.com/google/caja/issues/2", "closed": "2015-04-16 01:18:35", "ttf": 0.0002777777777777778, "title": "the first indice of an array is 0 not 1 ", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 2](https://code.google.com/p/google-caja/issues/detail?id=2) created by sylvain.pointeau on 2007-10-19T14:04:29.000Z:\n\nin JSON.js\nmethod serialize\nfor an array\nthe loop should begin at 0\n\n```\n        function serialize(value) {\n```\n\n....\n                        for (i = 0; i &lt; len; i += 1) {     &lt;---- here\n                            v = filter(value, i);\n                            if (v !== undefined) {\n                                if (needComma) {\n                                    out.push(',');\n                                } else {\n\nCheers,\nSylvain Pointeau \n", "created": "2015-04-16 01:18:33"}, {"url": "https://github.com/google/caja/issues/1", "closed": "2015-04-16 01:18:33", "ttf": 0.0002777777777777778, "title": "doesn't handle null value in the defaultFilter", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-Defect"], "commitsDetails": [], "body": "Original [issue 1](https://code.google.com/p/google-caja/issues/detail?id=1) created by sylvain.pointeau on 2007-10-19T13:41:54.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. calling the serialize on an object with a null property\n\n<b>What is the expected output? What do you see instead?</b>\none error in firebug\n\nplease find below a fix for the defaultFilter.\n\n/\\* default filter */\n    function defaultFilter(baseObj, key) {\n        var result;\n\n```\n    if (typeof key === 'string') {\n        if (!Object.prototype.hasOwnProperty.call(baseObj, key)) {\n            return undefined;\n        }\n    } else if (typeof key === 'number') {\n        if (!(baseObj instanceof Array)) {\n            return undefined;\n        }\n    } else {\n        return undefined;\n    }\n    result = baseObj[key];\n\n    if(!result) { return undefined; }        \n\n    if (typeof result.toJSON === 'function') {\n        return result.toJSON();\n    } else {\n        return result;\n    }\n}\n```\n", "created": "2015-04-16 01:18:30"}, {"url": "https://github.com/google/caja/issues/1849", "closed": "2015-04-16 05:42:24", "ttf": 0.0002777777777777778, "title": "Prune old documentation", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1851](https://code.google.com/p/google-caja/issues/detail?id=1851) created by kpreid.switchb.org on 2013-09-03T21:49:29.000Z:\n\nThere's a good bit of stuff in /trunk/doc/ which has nothing to do with modern Caja. We should sort through all these docs and delete anything that isn't worth keeping with a historical note or updating.\n", "created": "2015-04-16 05:42:20"}, {"url": "https://github.com/google/caja/issues/1834", "closed": "2015-04-16 05:40:18", "ttf": 0.0002777777777777778, "title": "Document canRepair: false", "commits": {}, "user": "kpreid", "labels": ["Component-SES", "Priority-Low", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1836](https://code.google.com/p/google-caja/issues/detail?id=1836) created by kpreid.switchb.org on 2013-08-08T18:48:38.000Z:\n\nIn SES, some problems are marked canRepair: false, not because no possible repair exists, but because we no longer expect to see that problem and so the repair code is not worth keeping around (r5524).\n\nI propose to add to every canRepair: false a comment explaining why no repair is present.\n", "created": "2015-04-16 05:40:11"}, {"url": "https://github.com/google/caja/issues/1711", "closed": "2015-04-16 05:23:50", "ttf": 0.0002777777777777778, "title": "Tame object found on feral side of taming membrane: [object Object]. The membrane has previously been compromised.", "commits": {}, "user": "kpreid", "labels": ["Component-Taming", "Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1711](https://code.google.com/p/google-caja/issues/detail?id=1711) created by Marcus.Abrahamsson13 on 2013-04-19T06:20:55.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\nthe one that is run by the examples on https://developers.google.com/caja/docs/callingguestcode/. chrome windows 7\n\n<b>What steps will reproduce the problem?</b>\n1. run the example on https://developers.google.com/caja/docs/callingguestcode/\n\n<b>What is the expected output? What do you see instead?</b>\n\nA printout of the current time. I get the following error message\n\nTypeError: Tame object found on feral side of taming membrane: [object Object]. The membrane has previously been compromised.\nhttps://caja.appspot.com/5330/es53-taming-frame.js?debug=1\nLine 31286\n", "created": "2015-04-16 05:23:39"}, {"url": "https://github.com/google/caja/issues/1447", "closed": "2015-04-16 04:43:04", "ttf": 0.0002777777777777778, "title": "Verify that developer docs show host code interacting with guest code through the membrane.", "commits": {}, "user": "kpreid", "labels": ["Component-Taming", "Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1447](https://code.google.com/p/google-caja/issues/detail?id=1447) created by metaweta on 2012-02-21T21:34:47.000Z:\n\n1274 is a non-issue if host code interacts with guest code through the taming membrane.   All our code examples should use this pattern.\n", "created": "2015-04-16 04:43:00"}, {"url": "https://github.com/google/caja/issues/1426", "closed": "2015-04-16 04:40:02", "ttf": 0.0002777777777777778, "title": "com.google.caja.plugin.ES53BrowserTest: \"cajaVM is undefined\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1426](https://code.google.com/p/google-caja/issues/detail?id=1426) created by mdempsky@google.com on 2011-10-25T22:26:12.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. ant runtests -Dtest.filter=ES53BrowserTest -Dcaja.BrowserTestCase.startAndWait=true\n2. Using Firefox 3.6 on Linux, go to http://localhost:8000/ant-lib/com/google/caja/plugin/browser-test-case.html?es5=true&amp;test-driver=es53-test-cajajs-invocation.js\n\n<b>What is the expected output? What do you see instead?</b>\n\nTests should run (and hopefully pass).  Tests hang, and console prints:\n\nError: redeclaration of var console\nSource File: http://localhost:8000/ant-lib/com/google/caja/plugin/browser-test-case.html?es5=true&amp;test-driver=es53-test-cajajs-invocation.js\nLine: 0\n\nError: cajaVM is undefined\nSource File: http://localhost:8000/caja/4643M/ses-taming-frame.js\nLine: 9216\n\nError: cajaVM is undefined\nSource File: http://localhost:8000/caja/4643M/ses-taming-frame.js\nLine: 9216\n\n<b>Please use labels and text to provide additional information.</b>\n", "created": "2015-04-16 04:39:56"}, {"url": "https://github.com/google/caja/issues/1400", "closed": "2015-04-16 04:37:30", "ttf": 0.0002777777777777778, "title": "Expunge \u201cDomita\u201d from codebase", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1400](https://code.google.com/p/google-caja/issues/detail?id=1400) created by kpreid.switchb.org on 2011-08-17T22:15:15.000Z:\n\nThe codebase should be reviewed for uses of the name \u201cDomita\u201d which should be deleted or replaced with \u201cDomado\u201d.\n\nSuch uses occur in at least:\n- ES53BrowserTest.java, in the names of test methods and files\n- domado.js, the domitaModules object\n\nRelatedly, since r4593, ES53BrowserTest is now also testing the ES5 case and therefore misnamed.\n", "created": "2015-04-16 04:37:23"}, {"url": "https://github.com/google/caja/issues/1393", "closed": "2015-04-16 04:35:56", "ttf": 0.0002777777777777778, "title": "Issue labels are outdated", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1393](https://code.google.com/p/google-caja/issues/detail?id=1393) created by kpreid.switchb.org on 2011-08-15T16:41:48.000Z:\n\nThe issue labels offered in this issue tracker are somewhat outdated. The existing labels should be reviewed for applicability to our current goals, and new labels should be created to reflect current goals.\n\nNotably obsolete labels:\n  Type-CodeReview -- we are using codereview.appspot.com\n  DOMado -- Domado is live\n  OriginalCajaOnly -- Original Caja is dead and so is Valija\n", "created": "2015-04-16 04:35:54"}, {"url": "https://github.com/google/caja/issues/1390", "closed": "2015-04-16 04:35:40", "ttf": 0.0002777777777777778, "title": "Caja wiki table of contents messed up", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1390](https://code.google.com/p/google-caja/issues/detail?id=1390) created by erights@google.com on 2011-08-11T22:54:23.000Z:\n\nSee attached screenshot\n", "created": "2015-04-16 04:35:33"}, {"url": "https://github.com/google/caja/issues/1375", "closed": "2015-04-16 04:34:04", "ttf": 0.0002777777777777778, "title": "e___ property of ES5/3 is not documented.", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1375](https://code.google.com/p/google-caja/issues/detail?id=1375) created by kpreid.switchb.org on 2011-07-07T23:26:04.000Z:\n\nThe e___ property used by the ES5/3 runtime is not documented in es53.js, in the /*\\* Caja-specific properties */ comment or anywhere else.\n", "created": "2015-04-16 04:34:01"}, {"url": "https://github.com/google/caja/issues/1342", "closed": "2015-04-16 04:29:36", "ttf": 0.0002777777777777778, "title": "Update wiki docs with es53 examples rather than cajita/valija", "commits": {}, "user": "kpreid", "labels": ["Priority-High", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1342](https://code.google.com/p/google-caja/issues/detail?id=1342) created by jasvir on 2011-03-31T02:08:53.000Z:\n- Wiki docs on the following pages (possibly others) should be update with the new api:\n- http://code.google.com/p/google-caja/wiki/HostingModules\n- http://code.google.com/p/google-caja/wiki/InteractingModulesExample\n- http://code.google.com/p/google-caja/wiki/ModuleLoading\n- The following pages should add reference to ES53\n- http://code.google.com/p/google-caja/wiki/CajaLexicon\n- http://code.google.com/p/google-caja/wiki/CajaOverview\n- http://code.google.com/p/google-caja/wiki/CajitaValues (or add a new page for ES53)\n- The following pages should probably be deprecated\n- http://code.google.com/p/google-caja/wiki/HostTools\n", "created": "2015-04-16 04:29:33"}, {"url": "https://github.com/google/caja/issues/1300", "closed": "2015-04-16 04:25:13", "ttf": 0.0002777777777777778, "title": "\"ant doc\" broken?", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Maintainability", "Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1300](https://code.google.com/p/google-caja/issues/detail?id=1300) created by erights@google.com on 2010-11-20T19:16:09.000Z:\n\nWhen doing an &quot;ant doc&quot;, at the end I get:\n\njsdocs:\n    [mkdir] Created dir: /Users/erights/src/svn-changes/pristine/google-caja/ant-docs/js\n  [genrule] building 10 files to /Users/erights/src/svn-changes/pristine/google-caja/ant-docs/js\n\nBUILD FAILED\n/Users/erights/src/svn-changes/pristine/google-caja/build.xml:309: java.lang.LinkageError: com/google/caja/util/Strings\n    at com.google.caja.util.SetupUrlHandlers$1.createURLStreamHandler(RhinoExecutor.java:451)\n    at java.net.URL.getURLStreamHandler(URL.java:1104)\n    at java.net.URL.&lt;init&gt;(URL.java:571)\n    at java.net.URL.&lt;init&gt;(URL.java:463)\n    at java.net.URL.&lt;init&gt;(URL.java:412)\n    at org.apache.tools.ant.util.FileUtils.getFileURL(FileUtils.java:142)\n    at org.apache.tools.ant.AntClassLoader.defineClassFromData(AntClassLoader.java:1117)\n    at org.apache.tools.ant.AntClassLoader.getClassFromStream(AntClassLoader.java:1295)\n    at org.apache.tools.ant.AntClassLoader.findClassInComponents(AntClassLoader.java:1351)\n    at org.apache.tools.ant.AntClassLoader.findClass(AntClassLoader.java:1311)\n    at org.apache.tools.ant.AntClassLoader.loadClass(AntClassLoader.java:1064)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:252)\n    at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:375)\n    at com.google.caja.util.SetupUrlHandlers$1.createURLStreamHandler(RhinoExecutor.java:451)\n    at java.net.URL.getURLStreamHandler(URL.java:1104)\n    at java.net.URL.&lt;init&gt;(URL.java:571)\n    at java.net.URL.&lt;init&gt;(URL.java:463)\n    at java.net.URL.&lt;init&gt;(URL.java:412)\n    at org.apache.tools.ant.util.FileUtils.getFileURL(FileUtils.java:142)\n    at org.apache.tools.ant.AntClassLoader.defineClassFromData(AntClassLoader.java:1117)\n    at org.apache.tools.ant.AntClassLoader.getClassFromStream(AntClassLoader.java:1295)\n    at org.apache.tools.ant.AntClassLoader.findClassInComponents(AntClassLoader.java:1351)\n    at org.apache.tools.ant.AntClassLoader.findClass(AntClassLoader.java:1311)\n    at org.apache.tools.ant.AntClassLoader.loadClass(AntClassLoader.java:1064)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:252)\n    at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:375)\n    at com.google.caja.ancillary.jsdoc.JsdocMain$Builder.build(JsdocMain.java:132)\n    at com.google.caja.tools.GenRuleAntTask.run(GenRuleAntTask.java:43)\n    at com.google.caja.tools.AbstractCajaAntTask$Output.build(AbstractCajaAntTask.java:196)\n    at com.google.caja.tools.AbstractCajaAntTask.execute(AbstractCajaAntTask.java:88)\n    at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:592)\n    at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n    at org.apache.tools.ant.Task.perform(Task.java:348)\n    at org.apache.tools.ant.Target.execute(Target.java:390)\n    at org.apache.tools.ant.Target.performTasks(Target.java:411)\n    at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1397)\n    at org.apache.tools.ant.Project.executeTarget(Project.java:1366)\n    at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n    at org.apache.tools.ant.Project.executeTargets(Project.java:1249)\n    at org.apache.tools.ant.Main.runBuild(Main.java:801)\n    at org.apache.tools.ant.Main.startAnt(Main.java:218)\n    at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n    at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n", "created": "2015-04-16 04:25:09"}, {"url": "https://github.com/google/caja/issues/1255", "closed": "2015-04-16 04:19:45", "ttf": 0.0002777777777777778, "title": "Establish consistency on \"URI policy\" vs. \"URL policy\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1255](https://code.google.com/p/google-caja/issues/detail?id=1255) created by kpreid.switchb.org on 2010-07-23T21:10:04.000Z:\n\nThe code and documentation uses both &quot;URI policy&quot; and &quot;URL policy&quot;; particularly, note the wiki page names UrlPolicy and UriPolicyExamples. We should consistently use one or the other, since there does not seem to be a semantic distinction, and it will cause missed results for anyone searching the code or documentation.\n", "created": "2015-04-16 04:19:34"}, {"url": "https://github.com/google/caja/issues/1254", "closed": "2015-04-16 04:19:34", "ttf": 0.0002777777777777778, "title": "InteractingModulesExample needs updating for iframe reality", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1254](https://code.google.com/p/google-caja/issues/detail?id=1254) created by kpreid.switchb.org on 2010-07-23T01:24:06.000Z:\n\nwiki/InteractingModulesExample should be updated to match demos/container/container-interaction.html which now uses caja.js. Much of the discussion will then no longer apply since it is about details hidden by caja.js/HostTools; insofar as it is useful as internals documentation it should be kept around.\n", "created": "2015-04-16 04:19:32"}, {"url": "https://github.com/google/caja/issues/1253", "closed": "2015-04-16 04:19:32", "ttf": 0.0002777777777777778, "title": "Create documentation of cajoling options", "commits": {}, "user": "kpreid", "labels": ["CajolingService", "Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1253](https://code.google.com/p/google-caja/issues/detail?id=1253) created by kpreid.switchb.org on 2010-07-23T01:18:26.000Z:\n\nwiki/CajaCajole should contain or link to explanation of all the interesting parameters and modes of the cajoling operation, and secondarily how they are specified in the command-line and web-service interfaces, rather than having sketchy information on each one separately.\n", "created": "2015-04-16 04:19:25"}, {"url": "https://github.com/google/caja/issues/1218", "closed": "2015-04-16 04:14:17", "ttf": 0.0002777777777777778, "title": "Bad link to build instructions ", "commits": {}, "user": "kpreid", "labels": ["Component-Build", "Priority-High", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1218](https://code.google.com/p/google-caja/issues/detail?id=1218) created by kpreid.switchb.org on 2010-06-06T00:25:03.000Z:\n\nThe front page links to wiki/GettingStarted as &quot;How to build Caja&quot;, whereas it should be \nwiki/RunningCaja . This needs to be fixed by a project owner.\n\nThere do not seem to be any other prominent links to RunningCaja, so the build instructions are \ncurrently unfindable except by all pages/search.\n", "created": "2015-04-16 04:14:13"}, {"url": "https://github.com/google/caja/issues/1217", "closed": "2015-04-16 04:14:13", "ttf": 0.0002777777777777778, "title": "Explain the difference between a \"module\" and a \"gadget\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1217](https://code.google.com/p/google-caja/issues/detail?id=1217) created by kpreid.switchb.org on 2010-06-05T00:50:25.000Z:\n\nThe terms &quot;module&quot; and &quot;gadget&quot; are used apparently arbitrarily. There should be an explanation in \nintroductory materials and a glossary of what, if anything, the difference between them is.\n", "created": "2015-04-16 04:14:08"}, {"url": "https://github.com/google/caja/issues/1192", "closed": "2015-04-16 04:10:51", "ttf": 0.0002777777777777778, "title": "Tamed functions which call JSON.stringify", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1192](https://code.google.com/p/google-caja/issues/detail?id=1192) created by jasvir on 2010-03-03T18:07:07.000Z:\n\nTamed functions call the browser provided version of JSON.stringify directly.  \nThis function sees Caja specific properties as well as runs into problems with \nthe *_TWIN___ cycle.  The innocent code transformer is not in a position to \nfilter out these properties.\n\nDocumentation for container writers should recommend filtering these \nproperties out using JSON.stringify's replacer or to monkey patch \nJSON.stringify to use safeJSON.stringify.\n", "created": "2015-04-16 04:10:44"}, {"url": "https://github.com/google/caja/issues/1151", "closed": "2015-04-16 04:04:58", "ttf": 0.0002777777777777778, "title": "Provide a means/documentation to report vulnerabilities responsibly", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1151](https://code.google.com/p/google-caja/issues/detail?id=1151) created by jasvir on 2009-10-13T00:41:05.000Z:\n\nWhen external vulnerabilities are found, reporters should have documentation \non how to proceed responsibly as well as how cajadores will respond.\n", "created": "2015-04-16 04:04:53"}, {"url": "https://github.com/google/caja/issues/1030", "closed": "2015-04-16 03:41:31", "ttf": 0.0002777777777777778, "title": "Assignment to a function declaration identifier", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 1030](https://code.google.com/p/google-caja/issues/detail?id=1030) created by kangax on 2009-05-17T17:48:24.000Z:\n\n<b>What revision of the cajoler exhibits the problem?  On what browser and OS?</b>\n\nTestbed, 3494M revision (2009-05-14), using Caja (not Valija)\n\n<b>What steps will reproduce the problem?</b>\n1. Execute the following:\n\nfunction f(){ return 1; };\nif (true) {\n  f = function(){ return 2; };\n}\nf();\n\n<b>What is the expected output? What do you see instead?</b>\n\nExpected: 2\nActual: An error is thrown - FATAL_ERROR testbed/:4+3 - 30: Cannot assign\nto a function name: Rule &quot;setBadAssignToFunctionName&quot;, AssignOperation : ASSIGN\n\n<b>Please provide any additional information below.</b>\n\nI'm curious about rationale behind this restriction. I couldn't find\nanything similar in a list of ES5 strict mode restrictions.\n\nDeclaring a function and then reassigning its identifier is a pretty common\npattern, especially in browser scripting where functions often need to be\nforked based on environment feature tests. It is of course possible to\ninitially use function expression, instead of a function declaration (which\neliminates an issue with cajoler) but then you end up with an anonymous\nfunction (instead of having a meaningful identifier). It's also possible to\nuse named function expressions, but those have their own discrepancies\namong the browsers which need to be taken care of as well.\n\nSo, what is the rationale behind this?\n\nThank you.\n", "created": "2015-04-16 03:41:16"}, {"url": "https://github.com/google/caja/issues/943", "closed": "2015-04-16 03:25:52", "ttf": 0.0002777777777777778, "title": "valija breaks cajita's setBadFreeVariable rule", "commits": {}, "user": "kpreid", "labels": ["Priority-Low", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 943](https://code.google.com/p/google-caja/issues/detail?id=943) created by felix8a on 2008-12-02T22:09:51.000Z:\n\nI don't think this is an exploitable problem, but there's\nsomething wrong in some security assumption somewhere.\n\nsetBadFreeVariable is rule 34 in\nhttp://cajadores.com/docs/rules/DefaultCajaRewriter.html\nit's the rule that prevents cajita programs from saying 'x = 3'\nwithout first declaring x in some scope.\n\nso, this rule is pointless if valija is enabled, because\n\nplugin.js effectively does:\n    imports.outers = imports;\n    valijaMaker(imports);\n\nand domita.js effectively does:\n    imports.outers.window = imports.outers;\n\nwhich means cajita code can modify its imports by setting\nproperties of its window object.  eg, 'x = 3' is rejected at\ncompile-time, but 'window.x = 3' works and does the same thing.\n\nthere's code in domita.js that says, if valija isn't enabled,\n    cajita.freeze(tameWindow);\n    imports.window = tameWindow;\n\nbut that never happens in the testbed, because the testbed\nonly builds imports once for each gadget, and the first build\nis always with valija enabled.\n\nin any case, this violates the principle that valija is\n&quot;as secure&quot; as cajita.\n\nI think, either\n\na, setBadFreeVariable is not preserving an important security\nproperty, and it should be removed.\n\nb, valija setup should be changed to something like:\n    imports.outers = ___.copy(imports);\n    valijaMaker(imports.outers);\nwhich would isolate valija's mutable external scope from cajita's\nimmutable external scope.  this might have implications elsewhere\nat cajita/valija boundaries.\n", "created": "2015-04-16 03:25:41"}, {"url": "https://github.com/google/caja/issues/835", "closed": "2015-04-16 03:10:03", "ttf": 0.0002777777777777778, "title": "Error while assigning to a property of a global object (referenced via `this`)", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 835](https://code.google.com/p/google-caja/issues/detail?id=835) created by kangax on 2008-10-16T23:47:31.000Z:\n\n<b>What steps will reproduce the problem?</b>\n1. Run the following code:\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n\n(function(){\n  window.foo = 'bar'; // works\n  this.foo = 'bar'; // error: &quot;Not settable: ([Object]).foo&quot;\n})();\n\nwindow.foo = 'bar'; // 'bar'\nthis.foo = 'bar'; // 'bar'\n(function(){return this})().foo = 'bar'; // error: &quot;Not settable:\n([Object]).foo&quot;\n\n&lt;/script&gt;\n\n<b>What is the expected output? What do you see instead?</b>\nErrors are thrown. I'm not sure if this is an expected behavior but\nwhatever happens now is not quite intuitive.\n\n<b>What version of the product are you using? On what operating system?</b>\ntest bed (http://cajadores.com/demos/testbed/) in FF 3.0.3 on Mac OS X 10.5\n## Please provide any additional information below:\n", "created": "2015-04-16 03:09:41"}, {"url": "https://github.com/google/caja/issues/603", "closed": "2015-04-16 02:41:57", "ttf": 0.0002777777777777778, "title": "Specify what the html4.eflags mean", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 603](https://code.google.com/p/google-caja/issues/detail?id=603) created by zestyping on 2008-06-13T18:12:16.000Z:\n\nThe flags OPTIONAL_ENDTAG, BREAKS_FLOW, EMPTY, NAVIGATES, CDATA, RCDATA,\nand UNSAFE in html4-defs.js have security-critical effects, but their\nmeaning isn't specified or documented.  Please specify them so reviewers\ncan determine whether the html4.ELEMENTS table is correct.\n", "created": "2015-04-16 02:41:46"}, {"url": "https://github.com/google/caja/issues/553", "closed": "2015-04-16 02:35:24", "ttf": 0.0002777777777777778, "title": "Container writers' document should make recommendations about visual containment", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 553](https://code.google.com/p/google-caja/issues/detail?id=553) created by davidsarah.hopwood on 2008-06-12T18:14:35.000Z:\n\nThere are many subtle visual design issues relating to how to securely\nindicate containment of gadgets. Need to do user studies of what works.\n", "created": "2015-04-16 02:35:18"}, {"url": "https://github.com/google/caja/issues/552", "closed": "2015-04-16 02:35:17", "ttf": 0.0002777777777777778, "title": "makeSealerUnsealerPair() should document plan interference hazard", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 552](https://code.google.com/p/google-caja/issues/detail?id=552) created by google@web.dwdw.me on 2008-06-12T18:12:45.000Z:\n\nmakeSealerUnsealerPair() should probably document that calling unseal(box)\non a box you got from an untrusted source can potentially expose you to\nplan interference hazard -- i.e., it can cause the execution of code\nprovided by the provider of box.\n", "created": "2015-04-16 02:35:04"}, {"url": "https://github.com/google/caja/issues/550", "closed": "2015-04-16 02:34:55", "ttf": 0.0002777777777777778, "title": "Document assumptions made by DOMita for correctness", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 550](https://code.google.com/p/google-caja/issues/detail?id=550) created by ping@zesty.ca on 2008-06-12T18:02:39.000Z:\n\nAssumptions mentioned so far:\n- container must have a double-div surrounding the gadget\n- cajoler must ensure that events are directed only to the current gadget\n- cajoler must ensure that gadgets receive no window-global events\n- cajoler must rewrite CSS rules to restrict them to the gadget's div\n- cajoler must rewrite classes and ids so that getElement methods, CSS\n  rules, etc. can only refer to that gadget's elements\n- what else?\n\nPlease fully document these.\n", "created": "2015-04-16 02:34:51"}, {"url": "https://github.com/google/caja/issues/547", "closed": "2015-04-16 02:34:39", "ttf": 0.0002777777777777778, "title": "Should you document why primFreeze isn't needed in certain circumstances?", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 547](https://code.google.com/p/google-caja/issues/detail?id=547) created by google@web.dwdw.me on 2008-06-12T17:10:03.000Z:\n\nIn setMember() in caja.js, should you add a comment/document why you don't\nneed to primFreeze the member?\n\nMore generally, should there be some place that documents when primFreeze\nis and isn't needed, or the invariants surrounding whose responsibility it\nis to primFreeze, for purposes of security maintenance and enabling code\nreview?\n", "created": "2015-04-16 02:34:26"}, {"url": "https://github.com/google/caja/issues/546", "closed": "2015-04-16 02:34:26", "ttf": 0.0002777777777777778, "title": "Document that number-ish property names are unprotected", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 546](https://code.google.com/p/google-caja/issues/detail?id=546) created by google@web.dwdw.me on 2008-06-12T17:07:40.000Z:\n\nIf typeof n === number, then many things will allow unrestricted ability to\nread/write o[n].  Note that this is true even if n is 5.7, or Nan, or\nInfinity, in which case this allows you to set o[&quot;Nan&quot;] or o[&quot;Infinity&quot;]\neven if those aren't whitelisted.  Consequence: These property names cannot\nbe made non-public members.\n\nMarkM tried to explain to me the invariant: something like if\n  x === String(Number(x))\nthen x is a number-ish string, and all property names that qualify\nnumber-ish strings are unprotected -- or something, but I'm sure I've\nforgotten.\n", "created": "2015-04-16 02:34:06"}, {"url": "https://github.com/google/caja/issues/544", "closed": "2015-04-16 02:34:01", "ttf": 0.0002777777777777778, "title": "Cajoled libraries might make stronger assumptions than the Caja runtime about .constructor, .prototype etc.", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 544](https://code.google.com/p/google-caja/issues/detail?id=544) created by davidsarah.hopwood on 2008-06-12T16:54:40.000Z:\n\nLibraries such as Prototype, YUI, Dojo etc. define their own\nmini-object-systems, and therefore are likely to make assumptions about\nproperties like .constructor and .prototype. These assumptions might be\nstronger than the Caja runtime enforces and requires itself. For example,\nCaja allows the .constructor and .prototype properties to be read and set\non JSON containers.\n\nWhat such libraries can rely on needs to be documented.\n", "created": "2015-04-16 02:33:46"}, {"url": "https://github.com/google/caja/issues/542", "closed": "2015-04-16 02:33:43", "ttf": 0.0002777777777777778, "title": ".constructor and .prototype are subtle", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-High", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 542](https://code.google.com/p/google-caja/issues/detail?id=542) created by google@web.dwdw.me on 2008-06-12T16:37:54.000Z:\n\nCaja should document the invariants, assumptions, obligations, and theory\nof operation surrounding .constructor and .prototype properties.  For instance:\n\n1) You should document what are the obligations of writers of Javascript\nlibraries.  Apparently, one of the intended invariants is that Caja code\nshould never be able to get its hands on a prototypical object.  This\nimposes obligations on JS library writers: they must never leak access to a\nprototypical object.  (It would also be nice to have documentation of any\nother requirements on JS library writers.  For instance, it's apparently\nalso important that JS library writers must never leak access to a host\nobject to Caja.)\n\n2) It would help to document the invariants that Caja maintains about\n.constructor and .prototype.  For instance, I believe it's something like:\nCaja trusts the value of .constructor on prototypical objects but never\notherwise; Caja code must never be able to set .constructor on prototypical\nobjects (because it can't get its hands on a prototypical object); Caja\nnever trusts or cares about the value of .prototype except on objects of\ntype Function; you ensure that Caja code can never set the .prototype\nproperty on something of type Function (by ensuring that .prototype is not\nwhitelisted on Function).\n\n3) It would be a good idea, for maintainability and code review purposes,\nto do a better job of documenting the tricky things you are doing in\ncaja.js where you do them.  I'm thinking especially of the implementation\nof directConstructor(), but also why canSetPub()/setPub() lets anything go\non JSON containers.\n", "created": "2015-04-16 02:33:32"}, {"url": "https://github.com/google/caja/issues/535", "closed": "2015-04-16 02:32:40", "ttf": 0.0002777777777777778, "title": "Specify the expected behaviour of all JavaScript constructs used in cajoled code", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 535](https://code.google.com/p/google-caja/issues/detail?id=535) created by zestyping on 2008-06-12T06:08:56.000Z:\n\nMany of the bugs discovered so far in the Caja review are due to\nmismatches between the expected behaviour of certain JavaScript\nconstructs and the actual behaviour in particular browsers.\n\nThe Caja team should identify all the JavaScript constructs that\ncan ever come to appear in cajoled code, and document the expected\nbehaviour of each construct (the behaviour upon which the cajoler\nand Caja runtime rely, both in order to produce correct program\nbehaviour according to Caja semantics, and in order to enforce the\nsecurity restrictions between gadgets and within a container).\n\nSuch a specification is necessary not only for finding bugs now;\nit is also necessary in order to maintain the code moving forward.\nEveryone on the team needs to have the same understanding of what\nthese behavioural expectations are.  When new versions of browsers\ncome out, you need to be able to agree on whether they violate any\nof your previous assumptions.  And as you change the cajoler, you\nneed to be able to tell whether you've introduced any new constructs\ninto cajoled code beyond what you've fully understood and specified\nup to that point.\n", "created": "2015-04-16 02:32:22"}, {"url": "https://github.com/google/caja/issues/534", "closed": "2015-04-16 02:32:22", "ttf": 0.0002777777777777778, "title": "Document the assumptions caja makes about browser features", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 534](https://code.google.com/p/google-caja/issues/detail?id=534) created by jasvir on 2008-06-12T05:02:26.000Z:\n\nCaja makes asssumptions about the features a browser provides which are not\ndocumented.  These should be documented as a series of js, html and css\ntests which can be run on existing and new browsers to establish on which\nones Caja assumptions hold and thus the ones on which cajoled code executes\nsecurely.\n", "created": "2015-04-16 02:32:13"}, {"url": "https://github.com/google/caja/issues/529", "closed": "2015-04-16 02:31:39", "ttf": 0.0002777777777777778, "title": "PARAM VALUETYPE=ref VALUE=... should be more clearly banned", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 529](https://code.google.com/p/google-caja/issues/detail?id=529) created by google@web.dwdw.me on 2008-06-11T23:42:23.000Z:\n\nhtml4-elements-whitelist.json currently says:\n\n```\n  { &quot;key&quot;: &quot;PARAM&quot;,\n    &quot;reason&quot;: &quot;useless since applet and object banned&quot; },\n```\n\nThis makes it sound like it would be harmless to enable PARAM (to add it to\nthe HTML element whitelist).  That's not the case.  Currently\nPARAM:VALUETYPE and PARAM:VALUE are whitelisted in the attribute whitelist.\n The value PARAM VALUETYPE=&quot;ref&quot; is one of the allowed values of the\nVALUETYPE attribute.  There are no restrictions on the value of the VALUE\nattribute, and it is not treated as a URI.  However, in PARAM\nVALUETYPE=&quot;ref&quot; VALUE=&quot;xxx&quot;, &quot;xxx&quot; will be treated by the client as a URI,\nso &quot;xxx&quot; needs to be rewritten and subject to the UriPolicy.  The current\ncode would fail to meet this requirement if PARAM were ever added to the\nHTML element whitelist.\n\nThis is a maintenance hazard, because one can imagine a maintainer adding\nPARAM to the element whitelist (thinking it's OK, based upon the &quot;reason&quot;\nin html4-elements-whitelist.json).  If they did that, there'd be a breach:\nVALUE VALUETYPE=&quot;ref&quot; VALUE=&quot;javascript:alert(1)&quot; would break security.\n\nSuggested resolution: Change the &quot;reason&quot; for PARAM to make clear that\nPARAM is unsafe e.g. due to VALUETYPE=ref to document the risk of enabling\nPARAM.  Remove PARAM:VALUE and PARAM:VALUETYPE from the attribute whitelist.\n", "created": "2015-04-16 02:31:28"}, {"url": "https://github.com/google/caja/issues/499", "closed": "2015-04-16 02:27:23", "ttf": 0.0002777777777777778, "title": "misleading comment in RewriteHtmlStage.java", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 499](https://code.google.com/p/google-caja/issues/detail?id=499) created by felix8a on 2008-06-11T17:26:17.000Z:\n\ncomment at top says &quot;extracts {@code onclick} and other handlers,&quot;\nbut it looks like that currently happens at a later stage.\n", "created": "2015-04-16 02:27:16"}, {"url": "https://github.com/google/caja/issues/490", "closed": "2015-04-16 02:26:21", "ttf": 0.0002777777777777778, "title": "Need \"best practices for container writers\"", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Medium", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 490](https://code.google.com/p/google-caja/issues/detail?id=490) created by google@web.dwdw.me on 2008-06-11T01:11:05.000Z:\n\nCaja needs a document that describes best practices for container writers.\n Intended audience would be container writers.  It should describe what\ncontainer writers must do to be secure, what they should and shouldn't do\nwhen writing their container, and some important hazards that they must avoid.\n", "created": "2015-04-16 02:26:10"}, {"url": "https://github.com/google/caja/issues/473", "closed": "2015-04-16 02:24:05", "ttf": 0.0002777777777777778, "title": "Document the postconditions for each Cajoler transformation stage", "commits": {}, "user": "kpreid", "labels": ["Maintainability", "Priority-Low", "Security", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 473](https://code.google.com/p/google-caja/issues/detail?id=473) created by zestyping on 2008-06-10T21:43:44.000Z:\n\nFor each stage in java/com/google/caja/plugin/stages, please document the\npostconditions that transformation stage is supposed to provide (e.g. XYZ\nshould not be present in the output, etc.)\n", "created": "2015-04-16 02:23:49"}, {"url": "https://github.com/google/caja/issues/293", "closed": "2015-04-16 01:58:03", "ttf": 0.0002777777777777778, "title": "Missing gotcha in Spec doc: \"in\"", "commits": {}, "user": "kpreid", "labels": ["Priority-Medium", "Type-DocDefect"], "commitsDetails": [], "body": "Original [issue 293](https://code.google.com/p/google-caja/issues/detail?id=293) created by erights on 2008-05-20T02:53:14.000Z:\n\nReported by David-Sarah Hopwood:\n\nBTW, there is a &quot;gotcha&quot; missing from the spec: 'bar in foo' can return\nfalse for a property that exists, but is private. Returning false\ninstead of true is not fail-stop subsetting.\n", "created": "2015-04-16 01:57:48"}], "bugLabels": ["Type-Defect", "Type-DocDefect"], "projectName": "google/caja"}