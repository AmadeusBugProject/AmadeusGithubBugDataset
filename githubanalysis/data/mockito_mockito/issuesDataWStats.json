{"projectName": "mockito/mockito", "bugLabels": ["bug"], "captureTime": "Sat Jul  4 15:32:09 2020", "issues": [{"title": "RETURNS_DEEP_STUBS causes \"Raw extraction not supported for : 'null'\" in some cases", "body": "When trying to mock the [Hadoop Mapper.Context](https://github.com/apache/hadoop/blob/release-2.6.0/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/Mapper.java#L105) class with Mockito 2.24.0, exception `org.mockito.exceptions.base.MockitoException: Raw extraction not supported for : 'null'` is thrown when calling one of the methods that returns a generic type.  \r\n\r\nActual mocking is taking place inside the [MRUnit library](https://mrunit.apache.org/), as seen in [MockMapContextWrapper](https://github.com/apache/attic-mrunit/blob/release-1.1.0/src/main/java/org/apache/hadoop/mrunit/internal/mapreduce/MockMapContextWrapper.java#L75): \r\n\r\n    final Mapper<KEYIN, VALUEIN, KEYOUT, VALUEOUT>.Context context = mock(org.apache.hadoop.mapreduce.Mapper.Context.class, Mockito.RETURNS_DEEP_STUBS);\r\n\r\nContext is an abstract inner class of Mapper, and implements the [MapContext](https://github.com/apache/hadoop/blob/release-2.6.0/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/MapContext.java) interface, which extends the [TaskInputOutputContext](https://github.com/apache/hadoop/blob/release-2.6.0/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/TaskInputOutputContext.java) interface, which extends several other non-generic interfaces. \r\n\r\nException is thrown later when calling the [`context.getCurrentKey()`](https://github.com/apache/hadoop/blob/release-2.6.0/hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/TaskInputOutputContext.java#L51) method on the mock, which returns generic type `KEYIN`.\r\n\r\nThis works fine with Mockito 1.\r\n\r\nMRUnit project is abandoned, so it is not possible to change the mock.  It by default uses old Mockito 1.9.5, and works with 1.10.19.  I am attempting to exclude its dependencies on old Mockito and Powermock, and instead provide latest Mockito 2.24.0 and Powermock 2.0.0 so that my project using MRUnit and Mockito will not be permanently stuck on Mockito 1. \r\n\r\nThe only time these problem methods appear to be [called within MRUnit is to set up stubbing](https://github.com/apache/attic-mrunit/blob/release-1.1.0/src/main/java/org/apache/hadoop/mrunit/internal/mapreduce/MockMapContextWrapper.java#L96), so it doesn't really matter what the return value is in this case.  Should this even work with Mockito, or was this just a bug in Mockito 1 that MRUnit exploited? \r\n\r\n----\r\n\r\nHere is a minimal example that reproduces the issue:\r\n\r\n```Java\r\npackage example;\r\n\r\nimport org.junit.Before;\r\nimport org.junit.Test;\r\n\r\nimport static org.mockito.Mockito.RETURNS_DEEP_STUBS;\r\nimport static org.mockito.Mockito.mock;\r\n\r\npublic class Example {\r\n\r\n    public interface FirstInterface<T> {\r\n        boolean normal();\r\n        T generic();\r\n    }\r\n\r\n    public interface SecondInterface<T> extends FirstInterface<T> { }\r\n\r\n    public class TestClass<T> {\r\n        public abstract class AbstractInner implements SecondInterface<T> { }\r\n    }\r\n\r\n    private TestClass.AbstractInner testMock;\r\n\r\n    @Before\r\n    public void setup() {\r\n        testMock = mock(TestClass.AbstractInner.class, RETURNS_DEEP_STUBS);\r\n    }\r\n\r\n    @Test\r\n    public void works() {\r\n        testMock.normal();\r\n    }\r\n\r\n    @Test\r\n    public void fails() {\r\n        testMock.generic();\r\n    }\r\n}\r\n```\r\n\r\nhttps://github.com/zman0900/mockito-example has this code with a gradle build.\r\n\r\nBoth tests pass with Mockito 1.10.19, but one fails with 2.24.0.  Changing TestClass.AbstractInner to implement FirstInterface instead of SecondInterface causes the same failure with both Mockito 1 and 2.", "url": "https://github.com/mockito/mockito/issues/1621", "user": "zman0900", "labels": ["bug"], "created": "2019-02-13 23:49:49", "closed": "2019-03-04 15:20:44", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "Nested spies cause memory leaks ", "body": "Seems like nested spies can cause memory leaks since such objects are kept in memory without purging. Not sure if it can be resolved at all. Should it be avoided? Is there a mention about this in docs? Anyway, the code speaks better and fortunately I\u2019ve been able to create a self-contained sample.\r\n\r\nBTW I can provide a `.hprof` file if you are interested.\r\n\r\n#### Versions\r\n\r\n```\r\norg.mockito:mockito-core:2.22.0\r\norg.mockito:mockito-inline:2.22.0\r\n```\r\n```\r\njava version \"1.8.0_181\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_181-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)\r\n```\r\n\r\n#### Gradle\r\n\r\nHeap is set to 64 MB.\r\n\r\n```groovy\r\ntasks.withType<Test> {\r\n    maxHeapSize = \"64m\"\r\n    jvmArgs(\"-XX:+HeapDumpOnOutOfMemoryError\")\r\n\r\n    failFast = true\r\n}\r\n```\r\n```\r\n$ ./gradlew :module:cleanTestDebugUnitTest :module:testDebugUnitTest --tests \"com.github.sample.NestedSpiesMemoryLeakSpec\"\r\n```\r\n\r\n#### Code\r\n\r\n```kotlin\r\npackage com.github.sample\r\n\r\nimport com.jakewharton.rxrelay2.BehaviorRelay\r\nimport io.reactivex.functions.Consumer\r\nimport org.jetbrains.spek.api.Spek\r\nimport org.jetbrains.spek.api.dsl.it\r\nimport org.junit.platform.runner.JUnitPlatform\r\nimport org.junit.runner.RunWith\r\nimport org.mockito.Mockito\r\n\r\n@RunWith(JUnitPlatform::class)\r\nclass NestedSpiesMemoryLeakSpec : Spek({\r\n\r\n    repeat(10_000) { iteration ->\r\n\r\n        it(\"iteration [$iteration]\") {\r\n            Mockito.spy(Service())\r\n        }\r\n\r\n    }\r\n\r\n}) {\r\n\r\n    class Service {\r\n        // Remove Mockito.spy and OOM disappears.\r\n        val value = Mockito.spy(Consumer<Int> {\r\n            // This closure keeps a reference to Service.\r\n            streams.size\r\n        })\r\n\r\n        // See at as a mass to fill the RAM.\r\n        val streams = (0..1_000).map { BehaviorRelay.create<Int>() }\r\n    }\r\n\r\n}\r\n```\r\n```\r\n> Task :module:testDebugUnitTest\r\njava.lang.OutOfMemoryError: GC overhead limit exceeded\r\nDumping heap to java_pid23350.hprof ...\r\nHeap dump file created [99857779 bytes in 0.356 secs]\r\n\r\ncom.github.sample.NestedSpiesMemoryLeakSpec > it iteration [187] STANDARD_ERROR\r\n    java.lang.OutOfMemoryError: GC overhead limit exceeded\r\n    \tat com.jakewharton.rxrelay2.BehaviorRelay.<init>(BehaviorRelay.java:99)\r\n    \tat com.jakewharton.rxrelay2.BehaviorRelay.create(BehaviorRelay.java:77)\r\n    \tat com.github.sample.NestedSpiesMemoryLeakSpec$Service.<init>(NestedSpiesMemoryLeakSpec.kt:32)\r\n    \tat com.github.sample.NestedSpiesMemoryLeakSpec$1$1$1.invoke(NestedSpiesMemoryLeakSpec.kt:17)\r\n    \tat com.github.sample.NestedSpiesMemoryLeakSpec$1$1$1.invoke(NestedSpiesMemoryLeakSpec.kt:12)\r\n    \tat org.jetbrains.spek.engine.Scope$Test.execute(Scope.kt:102)\r\n    \tat org.jetbrains.spek.engine.Scope$Test.execute(Scope.kt:80)\r\n    \tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:105)\r\n    \tat org.junit.platform.engine.support.hierarchical.NodeTestTask$$Lambda$82/547193480.execute(Unknown Source)\r\n    \tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n    \tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:95)\r\n    \tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:71)\r\n\r\ncom.github.sample.NestedSpiesMemoryLeakSpec > it iteration [187] FAILED\r\n    java.lang.OutOfMemoryError\r\n\r\n> Task :module:testDebugUnitTest FAILED\r\n```\r\n\r\n#### Eclipse Memory Analyzer\r\n\r\n<img width=\"1238\" alt=\"screen shot 2018-11-14 at 19 09 53\" src=\"https://user-images.githubusercontent.com/200401/48495384-e574fb00-e840-11e8-886e-c9ae00dcf291.png\">\r\n<img width=\"1238\" alt=\"screen shot 2018-11-14 at 19 08 59\" src=\"https://user-images.githubusercontent.com/200401/48495395-ec9c0900-e840-11e8-9b02-cec1c8db43c0.png\">\r\n<img width=\"1238\" alt=\"screen shot 2018-11-14 at 19 09 09\" src=\"https://user-images.githubusercontent.com/200401/48495404-f291ea00-e840-11e8-8c5f-2680047c6947.png\">\r\n\r\n---\r\n\r\nSeems like this happens:\r\n\r\n* `Service` is a spy.\r\n* `Service` contains a `Consumer`, it is a `spy` as well.\r\n* `Consumer` is a closure and has an implicit reference to `Service`.\r\n* Mockito keeps both spies and cannot remove them from memory since there is a cross-reference (I guess).\r\n\r\n\r\n", "url": "https://github.com/mockito/mockito/issues/1532", "user": "arturdryomov", "labels": ["bug"], "created": "2018-11-14 16:20:13", "closed": "2019-03-05 16:10:18", "commits": {}, "ttf": 110.00027777777778, "commitsDetails": []}, {"title": "Mockito remains in unfinished stubbing state if a stubbing fails", "body": "If one of `doThrow` instructions failed due to InstantiationError, Mockito remains in \"unfinished stubbing\" state and can no longer mock anything.\r\n\r\nI had this issue in a single JUnit 4 test, but the fact that Mockito remained in \"unfinished stubbing\" state used to result in _all_ tests being marked as failed (I couldn't reproduce the last effect with the latest Mockito neither in JUnit 4 nor with JUnit 5 now, so the issue is applicable to a single test invocation only).\r\n\r\n```java\r\nimport java.util.List;\r\nimport org.junit.jupiter.api.RepeatedTest;\r\nimport org.junit.jupiter.api.RepetitionInfo;\r\nimport org.mockito.Mockito;\r\n\r\nclass UninstantiableTest {\r\n\r\n  @RepeatedTest(2)\r\n  void tryThrow01(RepetitionInfo i) {\r\n    if (i.getCurrentRepetition() == 1) {\r\n      // Stub using uninstantiable exception.\r\n      try {\r\n        List mock = Mockito.mock(List.class);\r\n\r\n        Mockito.doThrow(UninstantiableException.class).when(mock).clear();\r\n      } catch (InstantiationError expected) {\r\n        // Get a j.l.InstantiationError.\r\n      }\r\n    }\r\n\r\n    // Try to stub another mock, this time using a valid exception type.\r\n    {\r\n      List mock = Mockito.mock(List.class);\r\n\r\n      // The following operation results in \"UnfinishedStubbing\"\r\n      Mockito.doThrow(RuntimeException.class).when(mock).clear();\r\n    }\r\n  }\r\n\r\n  abstract static class UninstantiableException extends RuntimeException {}\r\n}\r\n```\r\n\r\nMockito version 2.23.0\r\n\r\n\r\ncheck that\r\n\r\n - [x] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [x] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [x] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/master/.github/CONTRIBUTING.md)\r\n\r\n\r\n", "url": "https://github.com/mockito/mockito/issues/1514", "user": "dmitry-timofeev", "labels": ["bug"], "created": "2018-10-09 18:09:07", "closed": "2018-12-02 03:55:09", "commits": {"93540e729c72eda6c1b957e739c8bcaeee217111": {"commitGHEventType": "referenced", "commitUser": "mockitoguy"}}, "ttf": 53.000277777777775, "commitsDetails": [{"commitHash": "93540e729c72eda6c1b957e739c8bcaeee217111", "commitGHEventType": "referenced", "commitUser": "mockitoguy", "commitParents": ["30d3127ee2c4e41452787a058a31b7a553ba3b00"], "nameRev": "93540e729c72eda6c1b957e739c8bcaeee217111 tags/v2.23.9~1^2", "commitMessage": "Fixed issue with stubbing state\n\nWhen stubbing with bad throwables we were leaving state behind. Fixes #1514\n", "commitDateTime": "2018-11-27 08:53:10", "authoredDateTime": "2018-11-27 08:53:10", "commitGitStats": [{"filePath": "src/main/java/org/mockito/internal/stubbing/StubberImpl.java", "insertions": 8, "deletions": 4, "lines": 12}, {"filePath": "src/test/java/org/mockitousage/stubbing/StubbingWithBadThrowablesTest.java", "insertions": 37, "deletions": 0, "lines": 37}, {"filePath": "subprojects/junit-jupiter/src/test/java/org/mockitousage/UninstantiableThrowableTest.java", "insertions": 31, "deletions": 0, "lines": 31}], "commitSpoonAstDiffStats": [{"spoonFilePath": "StubberImpl.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.StubberImpl.doThrow(java.lang.Class)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "StubbingWithBadThrowablesTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.stubbing.StubbingWithBadThrowablesTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "UninstantiableThrowableTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.UninstantiableThrowableTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["93540e729c72eda6c1b957e739c8bcaeee217111"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 4, "lines": 12, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/mockito/internal/stubbing"], "changesInPackagesSPOON": ["org.mockito.internal.stubbing.StubberImpl.doThrow(java.lang.Class)"]}, {"title": "Mockito not able to be built with OracleJDK8u181-b13", "body": "Oracle has released [JDK8u181-b13](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html) today. I tried to build Mockito with JDK8u181 but some of the Mockito unit tests failed at the build.\r\n\r\n```\r\norg.mockitousage.basicapi.MocksSerializationForAnnotationTest > should_serialize_object_mock FAILED\r\n    java.io.InvalidClassException: org.mockito.internal.matchers.Any$MockitoMock$1346699744; no valid constructor\r\n        at java.io.ObjectStreamClass$ExceptionInfo.newInvalidClassException(ObjectStreamClass.java:169)\r\n        at java.io.ObjectStreamClass.checkDeserialize(ObjectStreamClass.java:874)\r\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2043)\r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)\r\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)\r\n        at org.mockitoutil.SimpleSerializationUtil.deserializeMock(SimpleSerializationUtil.java:27)\r\n        at org.mockitoutil.SimpleSerializationUtil.deserializeMock(SimpleSerializationUtil.java:23)\r\n        at org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialize_object_mock(MocksSerializationForAnnotationTest.java:277)\r\n\r\norg.mockitousage.basicapi.MocksSerializationForAnnotationTest > should_serialize_real_partial_mock FAILED\r\n    java.io.InvalidClassException: org.mockito.internal.matchers.Any$MockitoMock$122170722; no valid constructor\r\n        at java.io.ObjectStreamClass$ExceptionInfo.newInvalidClassException(ObjectStreamClass.java:169)\r\n        at java.io.ObjectStreamClass.checkDeserialize(ObjectStreamClass.java:874)\r\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2043)\r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)\r\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)\r\n        at org.mockitoutil.SimpleSerializationUtil.deserializeMock(SimpleSerializationUtil.java:27)\r\n        at org.mockitoutil.SimpleSerializationUtil.deserializeMock(SimpleSerializationUtil.java:23)\r\n        at org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialize_real_partial_mock(MocksSerializationForAnnotationTest.java:289)\r\n\r\norg.mockitousage.basicapi.MocksSerializationForAnnotationTest > should_serialization_work FAILED\r\n    java.io.InvalidClassException: org.mockito.internal.matchers.Any$MockitoMock$1346699744; no valid constructor\r\n        at java.io.ObjectStreamClass$ExceptionInfo.newInvalidClassException(ObjectStreamClass.java:169)\r\n        at java.io.ObjectStreamClass.checkDeserialize(ObjectStreamClass.java:874)\r\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2043)\r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)\r\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287)\r\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211)\r\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)\r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)\r\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287)\r\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211)\r\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)\r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)\r\n        at java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2287)\r\n        at java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:2211)\r\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2069)\r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)\r\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)\r\n        at org.mockitoutil.SimpleSerializationUtil.deserializeMock(SimpleSerializationUtil.java:27)\r\n        at org.mockitoutil.SimpleSerializationUtil.deserializeMock(SimpleSerializationUtil.java:23)\r\n        at org.mockitoutil.SimpleSerializationUtil.serializeAndBack(SimpleSerializationUtil.java:17)\r\n        at org.mockitousage.basicapi.MocksSerializationForAnnotationTest.should_serialization_work(MocksSerializationForAnnotationTest.java:176)\r\n\r\norg.mockitousage.basicapi.MocksSerializationTest > should_serialize_object_mock FAILED\r\n    java.io.InvalidClassException: org.mockito.internal.matchers.Any$MockitoMock$1346699744; no valid constructor\r\n        at java.io.ObjectStreamClass$ExceptionInfo.newInvalidClassException(ObjectStreamClass.java:169)\r\n        at java.io.ObjectStreamClass.checkDeserialize(ObjectStreamClass.java:874)\r\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2043)\r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)\r\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)\r\n        at org.mockitoutil.SimpleSerializationUtil.deserializeMock(SimpleSerializationUtil.java:27)\r\n        at org.mockitoutil.SimpleSerializationUtil.deserializeMock(SimpleSerializationUtil.java:23)\r\n        at org.mockitousage.basicapi.MocksSerializationTest.should_serialize_object_mock(MocksSerializationTest.java:302)\r\n\r\norg.mockitousage.basicapi.MocksSerializationTest > should_serialize_real_partial_mock FAILED\r\n    java.io.InvalidClassException: org.mockito.internal.matchers.Any$MockitoMock$122170722; no valid constructor\r\n        at java.io.ObjectStreamClass$ExceptionInfo.newInvalidClassException(ObjectStreamClass.java:169)\r\n        at java.io.ObjectStreamClass.checkDeserialize(ObjectStreamClass.java:874)\r\n        at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2043)\r\n        at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1573)\r\n        at java.io.ObjectInputStream.readObject(ObjectInputStream.java:431)\r\n        at org.mockitoutil.SimpleSerializationUtil.deserializeMock(SimpleSerializationUtil.java:27)\r\n        at org.mockitoutil.SimpleSerializationUtil.deserializeMock(SimpleSerializationUtil.java:23)\r\n        at org.mockitousage.basicapi.MocksSerializationTest.should_serialize_real_partial_mock(MocksSerializationTest.java:315)\r\n\r\n1888 tests completed, 5 failed, 47 skipped\r\n\r\n```\r\n\r\nI roughly looked at the cause of the failure and found that `org.mockito.internal.matchers.Any` class has a private constructor. In [Oracle doc for Serializable interface](https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html), it states:\r\n\r\n> During deserialization, the fields of non-serializable classes will be initialized using the public or protected no-arg constructor of the class. A no-arg constructor must be accessible to the subclass that is serializable. The fields of serializable subclasses will be restored from the stream.\r\n\r\nThis could be the cause of the issue when `Any.class` is mocked by `deserializeMock`.\r\n\r\n\r\nJava version:\r\n\r\n```\r\njava version \"1.8.0_181\"\r\nJava(TM) SE Runtime Environment (build 1.8.0_181-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)\r\n```\r\n\r\nThe problem is reproducible by setting OracleJDK8u181 as JAVA_HOME and run `./gradlew build` in Mockito root.\r\n\r\n", "url": "https://github.com/mockito/mockito/issues/1431", "user": "ghost", "labels": ["bug", "build", "java-10", "java-8"], "created": "2018-07-18 01:44:11", "closed": "2018-07-18 15:13:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Unable to mock interfaces in Android instrumentation tests", "body": "Consider the following Android instrumentation test:\r\n\r\n```\r\n@Test\r\npublic void testMockito() {\r\n    final Collection mockCollection = Mockito.mock(Collection.class);\r\n\r\n    Assert.assertTrue(true);\r\n}\r\n```\r\n\r\nWhen run, I see the following output:\r\n\r\n```\r\nTesting started at 21:54 ...\r\n\r\n04/08 21:54:01: Launching testMockito()\r\nNo apk changes detected since last installation, skipping installation of D:\\Code\\TestApp\\app\\build\\outputs\\apk\\debug\\app-debug.apk\r\n$ adb push D:\\Code\\TestApp\\app\\build\\outputs\\apk\\androidTest\\debug\\app-debug-androidTest.apk /data/local/tmp/com.example.zolbr.testapp.test\r\n$ adb shell pm install -t -r \"/data/local/tmp/com.example.zolbr.testapp.test\"\r\nSuccess\r\n\r\n\r\nRunning tests\r\n\r\n$ adb shell am instrument -w -r   -e debug false -e class 'com.example.zolbr.testapp.ExampleInstrumentedTest#testMockito' com.example.zolbr.testapp.test/android.support.test.runner.AndroidJUnitRunner\r\nClient not ready yet..\r\nStarted running tests\r\n\r\norg.mockito.exceptions.base.MockitoException:\r\nMockito cannot mock this class: interface java.util.Collection.\r\n\r\nMockito can only mock non-private & non-final classes.\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\n\r\n\r\nIMPORTANT INFORMATION FOR ANDROID USERS:\r\n\r\nThe regular Byte Buddy mock makers cannot generate code on an Android VM!\r\nTo resolve this, please use the 'mockito-android' dependency for your application:\r\nhttp://search.maven.org/#search%7Cga%7C1%7Ca%3A%22mockito-android%22%20g%3A%22org.mockito%22\r\n\r\nJava               : 0.9\r\nJVM vendor name    : The Android Project\r\nJVM vendor version : 2.1.0\r\nJVM name           : Dalvik\r\nJVM version        : 0.9\r\nJVM info           : null\r\nOS name            : Linux\r\nOS version         : 3.18.56+\r\n\r\n\r\nUnderlying exception : java.lang.IllegalArgumentException: Could not create type\r\nat com.example.zolbr.testapp.ExampleInstrumentedTest.testMockito(ExampleInstrumentedTest.java:40)\r\nat java.lang.reflect.Method.invoke(Native Method)\r\nat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\nat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\nat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\nat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\nat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\nat org.junit.runners.Suite.runChild(Suite.java:128)\r\nat org.junit.runners.Suite.runChild(Suite.java:27)\r\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\nat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\nat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\nat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\r\nat android.support.test.internal.runner.TestExecutor.execute(TestExecutor.java:58)\r\nat android.support.test.runner.AndroidJUnitRunner.onStart(AndroidJUnitRunner.java:375)\r\nat android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:2074)\r\nCaused by: java.lang.IllegalArgumentException: Could not create type\r\nat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:139)\r\nat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:345)\r\nat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:160)\r\nat net.bytebuddy.TypeCache$WithInlineExpunction.findOrInsert(TypeCache.java:354)\r\nat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:32)\r\nat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMockType(SubclassByteBuddyMockMaker.java:71)\r\nat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMock(SubclassByteBuddyMockMaker.java:42)\r\nat org.mockito.android.internal.creation.AndroidByteBuddyMockMaker.createMock(AndroidByteBuddyMockMaker.java:39)\r\nat org.mockito.internal.util.MockUtil.createMock(MockUtil.java:35)\r\nat org.mockito.internal.MockitoCore.mock(MockitoCore.java:65)\r\nat org.mockito.Mockito.mock(Mockito.java:1875)\r\nat org.mockito.Mockito.mock(Mockito.java:1784)\r\n... 28 more\r\nCaused by: java.lang.IncompatibleClassChangeError: The method 'int java.lang.Object.hashCode()' was expected to be of type interface but instead was found to be of type virtual (declaration of 'net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation' appears in /data/app/com.example.zolbr.testapp.test-OVcvUgjejP8CYF6lGYt9Pg==/base.apk)\r\nat net.bytebuddy.dynamic.scaffold.MethodRegistry$Handler$ForImplementation.hashCode(Unknown Source:2)\r\nat java.util.HashMap.hash(HashMap.java:338)\r\nat java.util.HashMap.put(HashMap.java:611)\r\nat java.util.HashSet.add(HashSet.java:219)\r\nat net.bytebuddy.dynamic.scaffold.MethodRegistry$Default.prepare(MethodRegistry.java:409)\r\nat net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:162)\r\nat net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:155)\r\nat net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase.make(DynamicType.java:2669)\r\nat org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(SubclassBytecodeGenerator.java:123)\r\nat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:37)\r\nat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$1.call(TypeCachingBytecodeGenerator.java:34)\r\nat net.bytebuddy.TypeCache.findOrInsert(TypeCache.java:137)\r\n... 39 more\r\n```\r\n\r\nThis only occurs when using mockito-android 2.18.0:\r\n\r\n```\r\nandroidTestImplementation 'org.mockito:mockito-android:2.18.0'\r\n```\r\n\r\nDowngrading to 2.17.0 fixes this issue.\r\n\r\nThis occurs on a Windows 10 dev machine running Android Studio 3.1.", "url": "https://github.com/mockito/mockito/issues/1364", "user": "ZOlbrys", "labels": ["android", "bug", "byte-buddy-1.8.0"], "created": "2018-04-09 01:57:37", "closed": "2018-04-15 20:50:43", "commits": {"f73871d53e96ae2c3b5177a1f763d8a8949925fa": {"commitGHEventType": "referenced", "commitUser": "raphw"}, "6aa36ae19418b933eee390c48635bf3f6c95b67a": {"commitGHEventType": "referenced", "commitUser": "szpak"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "f73871d53e96ae2c3b5177a1f763d8a8949925fa", "commitGHEventType": "referenced", "commitUser": "raphw", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "6aa36ae19418b933eee390c48635bf3f6c95b67a", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": ["217ef4d11dbb64847ff12ca78c436614be380d0e"], "nameRev": "6aa36ae19418b933eee390c48635bf3f6c95b67a tags/v2.18.2~1", "commitMessage": "Performance improvements: Use less expensive method graph compiler for inline mock maker. Update Byte Buddy for general performance improvements and bug fixes. Fixes #1364. Also fixes javadoc warning. (#1369)\n\n", "commitDateTime": "2018-04-15 22:50:42", "authoredDateTime": "2018-04-15 22:50:42", "commitGitStats": [{"filePath": "gradle/dependencies.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InlineBytecodeGenerator.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "MockitoExtension.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Different mocks are used for @Mock and @InjectMock in the same test class with JUnit 5 extension", "body": "I've been playing with the new JUnit 5 support in Mockito 2.17.0. I have found that with `@Mock` and `@InjectMocks` used in the same test class different mocks are injected. I would expect to have the same mock reused (as it works with JUnit 4 or manual `@Mock` initialization).\r\n\r\nSample code:\r\n```\r\n@ExtendWith(MockitoExtension.class)\r\npublic class SpaceShip5BugMiniTest {\r\n\r\n    @InjectMocks\r\n    private SpaceShip spaceShip;\r\n\r\n    @Mock\r\n    private TacticalStation tacticalStation;\r\n\r\n    @Test\r\n    public void shouldInjectMocks() {\r\n        assertThat(tacticalStation).isNotNull();\r\n        assertThat(spaceShip.getTacticalStation()).isEqualTo(tacticalStation);  \r\n        //Bug \u2191 - different mocks are use in @Mock and @InjectMock\r\n    }\r\n}\r\n```\r\n\r\nError message:\r\n```\r\norg.opentest4j.AssertionFailedError: \r\nExpecting:\r\n <\"tacticalStation (TacticalStation$MockitoMock$991606095@61d6015a)\">\r\nto be equal to:\r\n <\"tacticalStation (TacticalStation$MockitoMock$991606095@b62d79)\">\r\nbut was not.\r\nExpected :tacticalStation\r\nActual   :tacticalStation\r\n```\r\n\r\nThe minimal (non-)working example is available [here](https://github.com/szpak/code-examples-and-poc/tree/mockito2junit5-bug/mockito2-junit5).\r\n\r\n@TimvdLippe Do you have an idea what could be wrong?\r\n\r\nMockito 2.17.0 (2.17.1 is not being released due to (https://github.com/mockito/shipkit/issues/679), junit-jupiter 5.1.0, OpenJDK 1.8.0_161, Linux.\r\n\r\n### Checklist:\r\n - [x] The mockito message in the stacktrace have useful information, but it didn't help\r\n - [x] The problematic code (if that's possible) is copied here;\r\n       Note that some configuration are impossible to mock via Mockito\r\n - [x] Provide versions (mockito / jdk / os / any other relevant information)\r\n - [x] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue\r\n       (same as any question on stackoverflow.com)\r\n - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/master/.github/CONTRIBUTING.md)\r\n", "url": "https://github.com/mockito/mockito/issues/1346", "user": "szpak", "labels": ["bug", "injection", "junit5"], "created": "2018-03-25 12:31:24", "closed": "2018-03-26 10:28:52", "commits": {"d10a54335d0cc6c0e65d747c01b1cef281ef6ae8": {"commitGHEventType": "referenced", "commitUser": "TimvdLippe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "d10a54335d0cc6c0e65d747c01b1cef281ef6ae8", "commitGHEventType": "referenced", "commitUser": "TimvdLippe", "commitParents": ["34877f1d9641e44b566dd95af1869aa9a9537cc0"], "nameRev": "d10a54335d0cc6c0e65d747c01b1cef281ef6ae8 tags/v2.17.2~1", "commitMessage": "Fix #1346 - Different mocks are used for @Mock and @InjectMocks in the same test class with JUnit 5 extension (#1349)\n\n", "commitDateTime": "2018-03-26 12:28:51", "authoredDateTime": "2018-03-26 13:28:51", "commitGitStats": [{"filePath": "subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java", "insertions": 5, "deletions": 6, "lines": 11}, {"filePath": "subprojects/junit-jupiter/src/test/java/org/mockitousage/JunitJupiterTest.java", "insertions": 18, "deletions": 2, "lines": 20}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MockitoExtension.java", "spoonMethods": [{"spoonMethodName": "org.mockito.junit.jupiter.MockitoExtension.beforeEach(org.junit.jupiter.api.extension.ExtensionContext)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.junit.jupiter.MockitoExtension.collectParentTestInstances(org.junit.jupiter.api.extension.ExtensionContext,java.util.List)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JunitJupiterTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.JunitJupiterTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.JunitJupiterTest.should_be_injected_correct_instance_of_mock()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.JunitJupiterTest.ClassWithDependency", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Wanted but not invoked on 2.12.0, but not on 2.11.0", "body": "After updating Mockito from 2.11.0 to 2.12.0 the following test fails with `Wanted but not invoked`.\r\n\r\nThe weird thing is this happens only when running tests using Gradle. Android Studio runs the same test as successful. Just like #1183.\r\n\r\n```java\r\npackage package.redacted;\r\n\r\nimport org.junit.Test;\r\nimport org.mockito.Mockito;\r\n\r\npublic class ViewModelTest {\r\n\r\n    class View {\r\n        private Runnable actionCallback = null;\r\n\r\n        void callAction(Runnable callback) {\r\n            actionCallback = callback;\r\n        }\r\n\r\n        void simulateActionCalled() {\r\n            if (actionCallback != null) {\r\n                actionCallback.run();\r\n            }\r\n        }\r\n\r\n        void showResult() {\r\n        }\r\n    }\r\n\r\n    class ViewModel {\r\n\r\n        public ViewModel(final View view) {\r\n            view.callAction(new Runnable() {\r\n                @Override\r\n                public void run() {\r\n                    view.showResult();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    @Test public void test() {\r\n        View view = Mockito.spy(new View());\r\n        ViewModel viewModel = new ViewModel(view);\r\n\r\n        view.simulateActionCalled();\r\n\r\n        Mockito.verify(view).showResult();\r\n    }\r\n}\r\n```\r\n```\r\nWanted but not invoked:\r\nview.showResult();\r\n-> at package.redacted.ViewModelTest$View.showResult(ViewModelTest.java:22)\r\n\r\nHowever, there were exactly 2 interactions with this mock:\r\nview.callAction(\r\n    package.redacted.ViewModelTest$ViewModel$1@26645040\r\n);\r\n-> at package.redacted.ViewModelTest$ViewModel.<init>(ViewModelTest.java:28)\r\n\r\nview.simulateActionCalled();\r\n-> at package.redacted.ViewModelTest.test(ViewModelTest.java:41)\r\n\r\n\r\n\tat package.redacted.ViewModelTest$View.showResult(ViewModelTest.java:22)\r\n\tat package.redacted.ViewModelTest.test(ViewModelTest.java:43)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:114)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:57)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:66)\r\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)\r\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)\r\n\tat com.sun.proxy.$Proxy1.processTestClass(Unknown Source)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:108)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:146)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:128)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:404)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)\r\n\tat org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:46)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:55)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```", "url": "https://github.com/mockito/mockito/issues/1254", "user": "arturdryomov", "labels": ["bug"], "created": "2017-11-10 10:07:26", "closed": "2017-11-28 21:54:53", "commits": {"6452c49ee481a3cb9c2bb54e9d1b4661f035adf0": {"commitGHEventType": "referenced", "commitUser": "raphw"}, "be1ebe5ce949296cde2ec6c6127cfb2d63ed4fac": {"commitGHEventType": "referenced", "commitUser": "raphw"}, "6139ed18a5520fc7f16e1f466ea31dcc9da94f6b": {"commitGHEventType": "referenced", "commitUser": "raphw"}, "dad7ca814ea76937b1c9af35f02ad97ba5f9b3c5": {"commitGHEventType": "referenced", "commitUser": "raphw"}}, "ttf": 18.00027777777778, "commitsDetails": [{"commitHash": "6452c49ee481a3cb9c2bb54e9d1b4661f035adf0", "commitGHEventType": "referenced", "commitUser": "raphw", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "be1ebe5ce949296cde2ec6c6127cfb2d63ed4fac", "commitGHEventType": "referenced", "commitUser": "raphw", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "6139ed18a5520fc7f16e1f466ea31dcc9da94f6b", "commitGHEventType": "referenced", "commitUser": "raphw", "commitParents": ["907e3de8a47c3733220c1ebf58741945c21df899"], "nameRev": "6139ed18a5520fc7f16e1f466ea31dcc9da94f6b tags/v2.12.2~1^2", "commitMessage": "Fixes #1254 and #1256: improved check for self-invocation.\n", "commitDateTime": "2017-11-21 22:37:00", "authoredDateTime": "2017-11-13 22:28:59", "commitGitStats": [{"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java", "insertions": 16, "deletions": 13, "lines": 29}, {"filePath": "src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "subprojects/inline/src/test/java/org/mockitoinline/RecursionTest.java", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "subprojects/inline/src/test/java/org/mockitoinline/SuperCallTest.java", "insertions": 33, "deletions": 0, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MockMethodAdvice.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.SelfCallInfo.isSelfInvocation(java.lang.Object)", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.RealMethodCall.invoke()", "TOT": 5, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.SelfCallInfo.replace(java.lang.Object)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.isMocked(java.lang.Object)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.isMock(java.lang.Object)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "WeakConcurrentMap.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.concurrent.WeakConcurrentMap", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RecursionTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitoinline.RecursionTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SuperCallTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitoinline.SuperCallTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "dad7ca814ea76937b1c9af35f02ad97ba5f9b3c5", "commitGHEventType": "referenced", "commitUser": "raphw", "commitParents": ["f92f9e3a8709f3fe2c97ef57b1fb2fe62d653540", "6139ed18a5520fc7f16e1f466ea31dcc9da94f6b"], "nameRev": "dad7ca814ea76937b1c9af35f02ad97ba5f9b3c5 tags/v2.12.2~1", "commitMessage": "Merge pull request #1257 from mockito/self-invoke-fix\n\nFixes #1254 and #1256: improved check for self-invocation.", "commitDateTime": "2017-11-28 22:54:52", "authoredDateTime": "2017-11-28 22:54:52", "commitGitStats": [{"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java", "insertions": 16, "deletions": 13, "lines": 29}, {"filePath": "src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "subprojects/inline/src/test/java/org/mockitoinline/RecursionTest.java", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "subprojects/inline/src/test/java/org/mockitoinline/SuperCallTest.java", "insertions": 33, "deletions": 0, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MockMethodAdvice.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.SelfCallInfo.isSelfInvocation(java.lang.Object)", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.RealMethodCall.invoke()", "TOT": 5, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.SelfCallInfo.replace(java.lang.Object)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.isMocked(java.lang.Object)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodAdvice.isMock(java.lang.Object)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "WeakConcurrentMap.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.concurrent.WeakConcurrentMap", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RecursionTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitoinline.RecursionTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SuperCallTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitoinline.SuperCallTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 2, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Provide Java 10 compatibility", "body": "I ran the JUnit 5 build on jdk-10-ea and encountered a Mockito-related issue.\r\n\r\n```\r\n  JUnit Jupiter:TestFactoryTestDescriptorTests:streamsFromTestFactoriesShouldBeClosed()\r\n    MethodSource [className = 'org.junit.jupiter.engine.descriptor.TestFactoryTestDescriptorTests', methodName = 'streamsFromTestFactoriesShouldBeClosed', methodParameterTypes = '']\r\n    => org.mockito.exceptions.base.MockitoException: \r\n\r\nMockito cannot mock this class: interface org.junit.jupiter.api.extension.ExtensionContext.\r\n\r\nMockito can only mock non-private & non-final classes.\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\nJava               : 10\r\nJVM vendor name    : Oracle Corporation\r\nJVM vendor version : 10-ea+29\r\nJVM name           : Java HotSpot(TM) 64-Bit Server VM\r\nJVM version        : 10-ea+29\r\nJVM info           : mixed mode\r\nOS name            : Linux\r\nOS version         : 4.11.6-041106-generic\r\n\r\nUnderlying exception : java.lang.UnsupportedOperationException: Cannot define class using reflection\r\n```\r\n\r\nSee full log at: https://travis-ci.org/junit-team/junit5/builds/296747184\r\nSee JUnit 5 issue that tracks JDK-9+ related issues at: https://github.com/junit-team/junit5/issues/1063\r\n\r\nI guess, there's command line switch that transforms the exception into a warning.\r\n\r\n\r\n", "url": "https://github.com/mockito/mockito/issues/1243", "user": "sormuras", "labels": ["bug", "continuous integration", "java-10"], "created": "2017-11-03 12:32:39", "closed": "2017-11-06 22:14:48", "commits": {"6beac5229733c7c65f581fb651ff0750b7f6b8fc": {"commitGHEventType": "closed", "commitUser": "raphw"}, "9cf900f606a261ebec8d7041312fe8847bd77f4b": {"commitGHEventType": "referenced", "commitUser": "raphw"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "6beac5229733c7c65f581fb651ff0750b7f6b8fc", "commitGHEventType": "closed", "commitUser": "raphw", "commitParents": ["84c82ca356b7b1245c1ff264c06ac88c2912dd5d"], "nameRev": "6beac5229733c7c65f581fb651ff0750b7f6b8fc tags/v2.11.7~1^2", "commitMessage": "Fixes #1243: Support for new version number 10.\n", "commitDateTime": "2017-11-06 23:13:59", "authoredDateTime": "2017-11-06 23:13:59", "commitGitStats": [{"filePath": "gradle/dependencies.gradle", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "9cf900f606a261ebec8d7041312fe8847bd77f4b", "commitGHEventType": "referenced", "commitUser": "raphw", "commitParents": ["84c82ca356b7b1245c1ff264c06ac88c2912dd5d", "6beac5229733c7c65f581fb651ff0750b7f6b8fc"], "nameRev": "9cf900f606a261ebec8d7041312fe8847bd77f4b tags/v2.11.7~1", "commitMessage": "Merge pull request #1250 from mockito/java-10\n\nFixes #1243: Support for new version number 10.", "commitDateTime": "2017-11-06 23:14:46", "authoredDateTime": "2017-11-06 23:14:46", "commitGitStats": [{"filePath": "gradle/dependencies.gradle", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6beac5229733c7c65f581fb651ff0750b7f6b8fc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["gradle"]}, {"title": "Unnecessary release was triggered", "body": "It seems that Shipkit was not able to avoid unnecessary release (see the [release notes](https://github.com/mockito/mockito/blob/release/2.x/doc/release-notes/official.md)). I will look into that. Our goal is not avoid shipping new version if binaries don't change.", "url": "https://github.com/mockito/mockito/issues/1144", "user": "mockitoguy", "labels": ["bug", "continuous integration"], "created": "2017-07-06 17:56:32", "closed": "2017-07-09 08:25:33", "commits": {"6e0cfdcdf9ca5898eade8f709185a22748005b38": {"commitGHEventType": "referenced", "commitUser": "mockitoguy"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "6e0cfdcdf9ca5898eade8f709185a22748005b38", "commitGHEventType": "referenced", "commitUser": "mockitoguy", "commitParents": ["48856d8fc844d70b21c804d55f5be624d3687ac3"], "nameRev": "6e0cfdcdf9ca5898eade8f709185a22748005b38 tags/v2.8.54~3^2", "commitMessage": "Bumped shipkit\n\nAddresses issue #1144\n", "commitDateTime": "2017-07-06 11:20:00", "authoredDateTime": "2017-07-06 11:19:55", "commitGitStats": [{"filePath": "gradle.properties", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6e0cfdcdf9ca5898eade8f709185a22748005b38"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["gradle.properties"]}, {"title": "No release build for 2.8.39 - possible bug in Travis CI", "body": "For some reason, Travis CI did not trigger the main build for version 2.8.39. In the travis dashboard for that build I can see only [3 child jobs](https://travis-ci.org/mockito/mockito/builds/237813636) whereas normally there are [4 child jobs](https://travis-ci.org/mockito/mockito/builds/237433149).\r\n\r\n@szpak, have you seen something like that before? I'm restarting the build, let's see what happens :)", "url": "https://github.com/mockito/mockito/issues/1107", "user": "mockitoguy", "labels": ["bug", "continuous integration"], "created": "2017-06-01 17:03:21", "closed": "2017-06-05 07:55:36", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Release commits do not trigger code coverage report", "body": "Found out at https://github.com/mockito/mockito/pull/980#issuecomment-285124740\r\nThis was initially fixed in #493, but I think the adoption of the new mockito-release-tools repository introduced this regression. All pull requests now have a failing status as CodeCov is unable to provide any feedback.\r\n\r\nCommits should instead of `[ci skip]` use `[ci skip-release]`. Therefore Travis will kick off, but the release mechanism is not triggered.", "url": "https://github.com/mockito/mockito/issues/984", "user": "TimvdLippe", "labels": ["bug", "continuous integration"], "created": "2017-03-09 12:08:08", "closed": "2017-09-18 20:39:46", "commits": {"71c188c6556c3b0d0227405a20c157ad62e25e88": {"commitGHEventType": "referenced", "commitUser": "mockitoguy"}, "adb7a06e2534ff78389aab02437b9544ad0b429c": {"commitGHEventType": "referenced", "commitUser": "mockitoguy"}, "1d860bbed44a932c295401f84f9f567969e17f0c": {"commitGHEventType": "referenced", "commitUser": "mockitoguy"}, "e22e348fb3e2d5d01210db5f58829687f053bb87": {"commitGHEventType": "referenced", "commitUser": "TimvdLippe"}}, "ttf": 193.00027777777777, "commitsDetails": [{"commitHash": "71c188c6556c3b0d0227405a20c157ad62e25e88", "commitGHEventType": "referenced", "commitUser": "mockitoguy", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "adb7a06e2534ff78389aab02437b9544ad0b429c", "commitGHEventType": "referenced", "commitUser": "mockitoguy", "commitParents": ["b32ad4bcb343bf4ae200cdbcdf17934d224a9049"], "nameRev": "adb7a06e2534ff78389aab02437b9544ad0b429c tags/v2.8.23~26^2", "commitMessage": "Fixed problems with releases\n\n- fixed the logic that determines if the release is notable or not.\nWe shipped a couple of releases to wrong Bintray repo but we should be ok :)\nI plan to make this configuration simpler but now it has to be this way.\n- bumped to new version of tools to pick up a couple of improvements\nincluding the fix for #984\n- configured commit message postfix that will ensure that\ncode coverage is collected after CI automated commits (see #984)\n- disabled automatic publication because it's still not ready\n", "commitDateTime": "2017-04-27 20:20:59", "authoredDateTime": "2017-04-27 20:12:09", "commitGitStats": [{"filePath": "gradle.properties", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "gradle/root/release.gradle", "insertions": 3, "deletions": 2, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "1d860bbed44a932c295401f84f9f567969e17f0c", "commitGHEventType": "referenced", "commitUser": "mockitoguy", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "e22e348fb3e2d5d01210db5f58829687f053bb87", "commitGHEventType": "referenced", "commitUser": "TimvdLippe", "commitParents": ["b94b736f34d141e42226a324eabe854c237b5a8b"], "nameRev": "e22e348fb3e2d5d01210db5f58829687f053bb87 tags/v2.8.23~6", "commitMessage": "Enabled releasing without using skip-release keyword (#1061)\n\n1. This change enables automatic releases to 'mockito-development'\r\nwithout exposing us to endless loop bug I planted earlier\r\n(https://github.com/mockito/mockito/issues/1059).\r\n2. The skip-release behavior will be fixed soon, pr is open:\r\nhttps://github.com/mockito/mockito-release-tools/pull/103\r\nIf it is fixed, we can reapply the skip-release behavior for mockito,\r\nwhich will fix the codecov issue:\r\nhttps://github.com/mockito/mockito/issues/984", "commitDateTime": "2017-05-01 00:44:16", "authoredDateTime": "2017-04-30 15:44:16", "commitGitStats": [{"filePath": ".travis.yml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "gradle/root/release.gradle", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["adb7a06e2534ff78389aab02437b9544ad0b429c", "e22e348fb3e2d5d01210db5f58829687f053bb87"], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 6.0, "deletions": 5.0, "lines": 11.0, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["gradle/root", ".travis.yml", "gradle.properties"]}, {"title": "Break cyclical compile time dependency on hideRecursiveCall", "body": "I am working on upgrading the version of mockito in AOSP to 2.7.13 using byte buddy and byte buddy android rather than dexmaker.\r\n\r\nAs part of that I need to exclude a number of classes which will not compile on Android because it does not support Java agents/instrumentation. The mockito code has always been very well organized and made that very simple to do but in the latest version I found a minor issue.\r\n\r\nThe files I need to exclude are:\r\n- src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java\r\n- src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java\r\n- src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java\r\n\r\nUnfortunately, when I do that I get a compile error because MockMethodAdvice is trying to use hideRecursiveCall from InlineByteBuddyMockMaker. I looked at the code and it seems as though InlineByteBuddyMockMaker depends on InlineBytecodeGenerator which depends on MockMethodAdvice which depends on hideRecursiveCall from InlineByteBuddyMockMaker.\r\n\r\nThe only places that actually use hideRecursiveCall are MockMethodAdvice and InlineByteBuddyMockMakerTest. That depends on InlineByteBuddyMockMaker which depends on InlineBytecodeGenerator which depends on MockMethodAdvice which depends on hideRecursiveCall from InlineByteBuddyMockMaker.\r\n\r\nSo, moving hideRecursiveCall from InlineByteBuddyMockMaker to MockMethodAdvice breaks a dependency cycle and allows the InlineByteBuddyMockMaker.java file to be excluded without problem. Also, MockMethodAdvice seems to be a better place for it.\r\n\r\nIf you are happy with this proposal or can suggest a better place for hideRecursiveCall then I am happy to submit a fix for this.", "url": "https://github.com/mockito/mockito/issues/982", "user": "paulduffin", "labels": ["1.* incompatible", "bug"], "created": "2017-03-08 11:30:26", "closed": "2017-03-09 11:56:44", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Invalid property reported by mocks and partial mocks", "body": "Hi,\r\n\r\nWe migrated to Mockito 2.x not so long ago and we came across a test that used to works back in Mockito 2.1.0 and no longer works with the latest 2.x version (2.7.11).\r\n\r\nHere is the SSCCE to replicate the issue:\r\n\r\n```\r\npackage com.some.company;\r\n\r\nimport static org.junit.Assert.*;\r\n\r\nimport java.beans.BeanInfo;\r\nimport java.beans.IntrospectionException;\r\nimport java.beans.Introspector;\r\nimport java.beans.PropertyDescriptor;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport org.junit.Test;\r\nimport org.mockito.Mockito;\r\n\r\npublic class Mockito2Issue\r\n{\r\n\tpublic class SomeClass\r\n\t{\r\n\t\tString property;\r\n\r\n\t\tpublic String getAProperty()\r\n\t\t{\r\n\t\t\treturn property;\r\n\t\t}\r\n\r\n\t\tprotected String getNotAProperty()\r\n\t\t{\r\n\t\t\treturn \"abc\";\r\n\t\t}\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testMockBug() throws IntrospectionException\r\n\t{\r\n\t\tSomeClass someClassMock = Mockito.mock(SomeClass.class);\r\n\r\n\t\tBeanInfo info = Introspector.getBeanInfo(someClassMock.getClass());\r\n\r\n\t\tMap<String, PropertyDescriptor> mockPropertyDescriptors = new HashMap<>();\r\n\t\tfor (PropertyDescriptor propertyDescriptor : info.getPropertyDescriptors())\r\n\t\t{\r\n\t\t\tmockPropertyDescriptors.put(propertyDescriptor.getName(), propertyDescriptor);\r\n\t\t}\r\n\r\n\t\tassertTrue(mockPropertyDescriptors.containsKey(\"AProperty\"));\r\n\t\tassertFalse(mockPropertyDescriptors.containsKey(\"notAProperty\"));\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testSpyBug() throws IntrospectionException\r\n\t{\r\n\t\tSomeClass someClassSpy = Mockito.spy(new SomeClass());\r\n\r\n\t\tBeanInfo info = Introspector.getBeanInfo(someClassSpy.getClass());\r\n\r\n\t\tMap<String, PropertyDescriptor> spyPropertyDescriptors = new HashMap<>();\r\n\t\tfor (PropertyDescriptor propertyDescriptor : info.getPropertyDescriptors())\r\n\t\t{\r\n\t\t\tspyPropertyDescriptors.put(propertyDescriptor.getName(), propertyDescriptor);\r\n\t\t}\r\n\r\n\t\tassertTrue(spyPropertyDescriptors.containsKey(\"AProperty\"));\r\n\t\tassertFalse(spyPropertyDescriptors.containsKey(\"notAProperty\"));\r\n\t}\r\n}\r\n```\r\n\r\n**Before (1.10.19):**\r\nUsed to works\r\n\r\n**After (2.7.11)**\r\nBoth tests fail on `assertFalse(mockPropertyDescriptors.containsKey(\"notAProperty\"));`\r\n\r\nIt seems that although the `getNotAProperty` method is `protected`, the most recent version of Mockito 2.x consider this as valid property getter, but not the very first 2.x stable release (2.1.0).\r\n\r\nCan you take a look at this?\r\n\r\n\r\nEnvironment details:\r\n\r\nComponent | Version\r\n--------- | ------\r\nOS | Ubuntu 16.10\r\nJava | Oracle Java(TM) SE Runtime Environment (build 1.8.0_101-b13)\r\nEclipse | Neon.2\r\nJUnit | 4.8.2\r\nMockito | 2.1.0 (before), 2.7.11 (after)", "url": "https://github.com/mockito/mockito/issues/963", "user": "domtoupin", "labels": ["bug"], "created": "2017-02-23 19:51:19", "closed": "2017-02-25 23:21:24", "commits": {"d77379e4aa9857f6645a35c5c3c1678a92f8f5cb": {"commitGHEventType": "referenced", "commitUser": "raphw"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "d77379e4aa9857f6645a35c5c3c1678a92f8f5cb", "commitGHEventType": "referenced", "commitUser": "raphw", "commitParents": ["a59cc571674ba23acedc47003a09d129603a98c6"], "nameRev": "d77379e4aa9857f6645a35c5c3c1678a92f8f5cb tags/v2.7.12~1", "commitMessage": "Update Byte Buddy and do no longer expand to public visibility, fixes #944 and #963\n", "commitDateTime": "2017-02-26 00:20:41", "authoredDateTime": "2017-02-26 00:20:41", "commitGitStats": [{"filePath": "build.gradle", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SubclassBytecodeGenerator.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(org.mockito.internal.creation.bytebuddy.MockFeatures)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Mockito 2.7.0 build did not execute git commands", "body": "The current `release/2.x` branch was not updated by the release bot since the `git` command failed. See https://travis-ci.org/mockito/mockito/jobs/196275405#L596", "url": "https://github.com/mockito/mockito/issues/913", "user": "TimvdLippe", "labels": ["bug", "continuous integration"], "created": "2017-01-29 12:52:23", "closed": "2017-02-03 04:33:21", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Overridden abstract methods using generics are not longer called for partial mock (working with Mockito 1.10.19)", "body": "Hi,\r\n\r\nWe migrated to Mockito 2.x not so long ago and we came across a test that used to works back in Mockito 1 (1.10.19) and no longer works with the latest 2.x version (2.5.6).\r\n\r\nHere is the SSCCE to replicate the issue:\r\n\r\n```\r\npackage com.some.company;\r\n\r\nimport static org.junit.Assert.*;\r\nimport static org.mockito.Mockito.*;\r\n\r\nimport java.io.IOException;\r\nimport java.lang.reflect.InvocationTargetException;\r\n\r\nimport javax.swing.JButton;\r\n\r\nimport org.junit.Test;\r\n\r\npublic class Mockito2Issue\r\n{\r\n\tpublic abstract class SomeAbstractClass<T>\r\n\t{\r\n\t\tprotected abstract String getRealValue(T value);\r\n\r\n\t\tpublic String getValue(T value)\r\n\t\t{\r\n\t\t\treturn getRealValue(value);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class SomeConcreteClass<T extends java.awt.Component> extends SomeAbstractClass<T>\r\n\t{\r\n\t\t@Override\r\n\t\tprotected String getRealValue(T value)\r\n\t\t{\r\n\t\t\treturn \"RealValue\";\r\n\t\t}\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void testBug() throws IOException, InstantiationException, IllegalAccessException, InvocationTargetException\r\n\t{\r\n\t\tSomeConcreteClass<java.awt.Component> testBug = spy(new SomeConcreteClass<java.awt.Component>());\r\n\t\tassertEquals(\"RealValue\", testBug.getValue(new JButton()));\r\n\t}\r\n}\r\n```\r\n\r\n**Before (1.10.19):**\r\nUsed to works\r\n\r\n**After (2.5.6)**\r\n```\r\njava.lang.AssertionError: expected:<RealValue> but was:<null>\r\n\tat org.junit.Assert.fail(Assert.java:91)\r\n\tat org.junit.Assert.failNotEquals(Assert.java:645)\r\n\tat org.junit.Assert.assertEquals(Assert.java:126)\r\n\tat org.junit.Assert.assertEquals(Assert.java:145)\r\n\tat com.some.company.Mockito2Issue.testBug(Mockito2Issue.java:43)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\r\n```\r\n\r\nWe performed a few side tests and here are the results:\r\n- if we change the method `getRealValue` in class `SomeAbstractClass` to be non-abstract but rather throw an exception, the test pass:\r\n```\r\n\t\tprotected String getRealValue(T value)\r\n\t\t{\r\n\t\t\tthrow new UnsupportedOperationException();\r\n\t\t}\r\n```\r\n- if we no longer use generic on the method (e.g. using Object rather than T), the test pass.\r\n\r\nCan you take a look at this?\r\n\r\n\r\nEnvironment details:\r\n\r\nComponent | Version\r\n--------- | ------\r\nOS | Ubuntu 16.10\r\nJava | Oracle Java(TM) SE Runtime Environment (build 1.8.0_101-b13)\r\nEclipse | Neon.2\r\nJUnit | 4.8.2\r\nMockito | 1.10.19 (before), 2.5.6 (after)", "url": "https://github.com/mockito/mockito/issues/874", "user": "domtoupin", "labels": ["bug"], "created": "2017-01-10 16:28:01", "closed": "2017-01-19 17:06:30", "commits": {"65916a6e09e03bef4fa40926c8713f53e4b72087": {"commitGHEventType": "referenced", "commitUser": "bric3"}}, "ttf": 9.000277777777777, "commitsDetails": [{"commitHash": "65916a6e09e03bef4fa40926c8713f53e4b72087", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["46aab5420904b731c4351c6fcd250f647a8f90ba"], "nameRev": "65916a6e09e03bef4fa40926c8713f53e4b72087 tags/v2.6.5~1", "commitMessage": "Adds test for #874 / #891\n\nSigned-off-by: Brice Dutheil <brice.dutheil@gmail.com>\n", "commitDateTime": "2017-01-21 13:53:09", "authoredDateTime": "2017-01-21 13:53:09", "commitGitStats": [{"filePath": "src/test/java/org/mockitousage/bugs/ImplementationOfGenericAbstractMethodNotInvokedOnSpyTest.java", "insertions": 30, "deletions": 0, "lines": 30}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ImplementationOfGenericAbstractMethodNotInvokedOnSpyTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.ImplementationOfGenericAbstractMethodNotInvokedOnSpyTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Travis builds from non-core developers fail on assertEnvVariables", "body": "Example build: https://travis-ci.org/mockito/mockito/jobs/188911380\r\n\r\nSeems that this does not affect core developers, as my build has been succesful: https://travis-ci.org/mockito/mockito/builds/188321204 as well as those in #865 and #859", "url": "https://github.com/mockito/mockito/issues/871", "user": "TimvdLippe", "labels": ["bug", "continuous integration"], "created": "2017-01-06 14:41:43", "closed": "2017-01-15 19:13:01", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "When custom exception fillInstackTrace() returns null, Exception mock cannot work properly", "body": "```java\r\npublic class CustomException extends Exception {\r\n\r\n    public CustomException() {\r\n        super();\r\n    }\r\n\r\n    @Override\r\n    public Exception fillInStackTrace() {\r\n        return null;\r\n    }\r\n}\r\n```\r\n\r\nTestCase like this\r\n```java\r\n when(demo.process()).thenThrow(new CustomException())\r\n\r\n//... test code\r\n```\r\n\r\n```\r\njava.lang.NullPointerException\r\n\tat org.mockito.internal.exceptions.stacktrace.ConditionalStackTraceFilter.filter(ConditionalStackTraceFilter.java:23)\r\n\tat org.mockito.internal.stubbing.answers.ThrowsException.answer(ThrowsException.java:32)\r\n\tat org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:35)\r\n\tat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:95)\r\n```\r\n", "url": "https://github.com/mockito/mockito/issues/866", "user": "wuwen5", "labels": ["bug"], "created": "2017-01-03 08:29:31", "closed": "2017-01-04 16:58:43", "commits": {"f86a598594e4c732a13193fc95a00b5775099631": {"commitGHEventType": "referenced", "commitUser": "bric3"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "f86a598594e4c732a13193fc95a00b5775099631", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["d972c99572ed038078c5a755c4afd41b0e8f9d28", "4225851e169b65d9de9b064e998f6b762ae4e65d"], "nameRev": "f86a598594e4c732a13193fc95a00b5775099631 tags/v2.5.4~1", "commitMessage": "Merge pull request #867 from wuwen5/issues-866\n\nFixes #866 should not throw NPE, when custom Exception fillInStackTrace returns null", "commitDateTime": "2017-01-04 17:58:42", "authoredDateTime": "2017-01-04 17:58:42", "commitGitStats": [{"filePath": "src/main/java/org/mockito/internal/stubbing/answers/ThrowsException.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "src/test/java/org/mockitousage/bugs/NPEWhenCustomExceptionStackTraceReturnNullTest.java", "insertions": 32, "deletions": 0, "lines": 32}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ThrowsException.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.answers.ThrowsException.answer(org.mockito.invocation.InvocationOnMock)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NPEWhenCustomExceptionStackTraceReturnNullTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.NPEWhenCustomExceptionStackTraceReturnNullTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Broken InlineByteBuddyMockMakerTest with Java 9", "body": "After #861 merge it turned out that InlineByteBuddyMockMakerTest fails with Java 9 (tested locally with 9-ea+146).\r\n\r\n```\r\norg.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMakerTest > should_create_mock_from_hashmap FAILED\r\n    org.junit.ComparisonFailure: expected:<\"bar\"> but was:<null>\r\n        at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(java.base@9-ea/Native Method)\r\n        at jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(java.base@9-ea/NativeConstructorAccessorImpl.java:62)\r\n        at jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(java.base@9-ea/DelegatingConstructorAccessorImpl.java:45)\r\n        at org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMakerTest.should_create_mock_from_hashmap(InlineByteBuddyMockMakerTest.java:79)\r\n```\r\n\r\nhttps://travis-ci.org/mockito/mockito/jobs/187897096#L586", "url": "https://github.com/mockito/mockito/issues/862", "user": "szpak", "labels": ["bug", "java-9"], "created": "2016-12-31 14:17:58", "closed": "2017-01-01 22:49:26", "commits": {"ae06051c35c9b0e5efeba3b450978e5e1ddc37f3": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "770c1c5eaa311ca4c0a78e924ab69319be523384": {"commitGHEventType": "referenced", "commitUser": "TimvdLippe"}, "76bf991288530203794eedbbdac80dc07de72550": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "19f02e7031cfcc3e5ece44ccfa611fd7d5b90484": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "b66b87bd6c804f42af6075fb7e695c8c60e8239a": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "2935202230545cb7f077d326d0dd21ebf701bc8a": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "215914d07acc4333ff291e7dd45723ee5d1795b8": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "ee1d168cdd2600ca566494881ab5e820c5a9c6fb": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "33fa01219a56c8eee387eea99bce11440c0fcf43": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "73b15cf585493549fcebf8d70ab50e6b063f2463": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "c0a98e3a4a5d4f3a4b0d3ef710690c3ee661713d": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "16f3ecac890df74ac46c90ad892132f221c37d18": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "29a6e9b3495ed97b8659cf1eba952708b3c68e8d": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "4d07ec6786a197c8abe482745ed0bf1716b9463b": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "19514af5110c3d5c1415bddd5c54b88723364a1a": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "e6a60b036dd556642466d10580e7172853beba9f": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "d49eb5e062466fc41ca07ca3cc778fe9c874cfd7": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "9c37a94a63c2f3edc60987ae38a97d3b458cc17d": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "1c096cc9cf911296158803c02102a705ebe89001": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "0ec0fc7030badc77f323d47e49c2229ac9dc5960": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "fc778f7f5b71a9051fbba99a7f575a00a86d332d": {"commitGHEventType": "referenced", "commitUser": "szpak"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "ae06051c35c9b0e5efeba3b450978e5e1ddc37f3", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "770c1c5eaa311ca4c0a78e924ab69319be523384", "commitGHEventType": "referenced", "commitUser": "TimvdLippe", "commitParents": ["b5b087e1ca7868e0c0e187ae955526884b8ff136"], "nameRev": "770c1c5eaa311ca4c0a78e924ab69319be523384 remotes/origin/old-3.x~20", "commitMessage": "Backport 'release/2.x' changes to master (20161231) + fix for #860 (#861)\n\n* Merge branch 'release/2.x'\r\n\r\nConflicts:\r\n      .travis.yml\r\n      build.gradle\r\n      version.properties\r\n\r\n* [#860] Workaround for broken tests with Jacoco 0.7.8\r\n\r\nRelated to classloader and the new plugin mechanism.\r\n\r\n* [#862] Disable BB test broken with Java 9\r\n\r\nDue to a lack of the new ASM version.\r\n\r\nThe umbrella issue to reenable disabled tests: #863.\r\n", "commitDateTime": "2017-01-02 00:00:50", "authoredDateTime": "2017-01-02 00:00:50", "commitGitStats": [{"filePath": ".travis.yml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "build.gradle", "insertions": 27, "deletions": 105, "lines": 132}, {"filePath": "doc/release-notes/official.md", "insertions": 191, "deletions": 0, "lines": 191}, {"filePath": "gradle/java-library.gradle", "insertions": 35, "deletions": 0, "lines": 35}, {"filePath": "gradle/mockito-core/inline-mock.gradle", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "gradle/{ => mockito-core}/javadoc.gradle", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "gradle/{ => mockito-core}/license.gradle", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "gradle/{ => mockito-core}/osgi.gradle", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "gradle/mockito-core/testing.gradle", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "gradle/pom.gradle", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "gradle/publish.gradle", "insertions": 12, "deletions": 4, "lines": 16}, {"filePath": "gradle/publishable-java-library.gradle", "insertions": 53, "deletions": 0, "lines": 53}, {"filePath": "gradle/{ => root}/coverage.gradle", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "gradle/{ => root}/gradle-fix.gradle", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "gradle/{ => root}/ide.gradle", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "gradle/{ => root}/release.gradle", "insertions": 46, "deletions": 12, "lines": 58}, {"filePath": "gradle/{ => root}/version.gradle", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "settings.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "src/main/java/org/mockito/ArgumentMatchers.java", "insertions": 27, "deletions": 2, "lines": 29}, {"filePath": "src/main/java/org/mockito/Mockito.java", "insertions": 28, "deletions": 0, "lines": 28}, {"filePath": "src/main/java/org/mockito/MockitoAnnotations.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "src/main/java/org/mockito/configuration/AnnotationEngine.java", "insertions": 15, "deletions": 12, "lines": 27}, {"filePath": "src/main/java/org/mockito/configuration/DefaultMockitoConfiguration.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/configuration/IMockitoConfiguration.java", "insertions": 12, "deletions": 1, "lines": 13}, {"filePath": "src/main/java/org/mockito/exceptions/base/MockitoAssertionError.java", "insertions": 14, "deletions": 2, "lines": 16}, {"filePath": "src/main/java/org/mockito/exceptions/base/MockitoException.java", "insertions": 8, "deletions": 6, "lines": 14}, {"filePath": "src/main/java/org/mockito/exceptions/base/MockitoInitializationException.java", "insertions": 19, "deletions": 0, "lines": 19}, {"filePath": "src/main/java/org/mockito/exceptions/misusing/PotentialStubbingProblem.java", "insertions": 72, "deletions": 0, "lines": 72}, {"filePath": "src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "src/main/java/org/mockito/internal/MockitoCore.java", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java", "insertions": 13, "deletions": 3, "lines": 16}, {"filePath": "src/main/java/org/mockito/internal/configuration/{DefaultAnnotationEngine.java => IndependentAnnotationEngine.java}", "insertions": 7, "deletions": 8, "lines": 15}, {"filePath": "src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java", "insertions": 7, "deletions": 9, "lines": 16}, {"filePath": "src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java", "insertions": 5, "deletions": 6, "lines": 11}, {"filePath": "src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java", "insertions": 29, "deletions": 14, "lines": 43}, {"filePath": "src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/configuration/plugins/Plugins.java", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java", "insertions": 102, "deletions": 46, "lines": 148}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java", "insertions": 9, "deletions": 26, "lines": 35}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodDispatcher.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java", "insertions": 10, "deletions": 4, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java", "insertions": 13, "deletions": 3, "lines": 16}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassInjectionLoader.java", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassLoader.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/internal/creation/settings/CreationSettings.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "src/main/java/org/mockito/internal/exceptions/Reporter.java", "insertions": 67, "deletions": 10, "lines": 77}, {"filePath": "src/main/java/org/mockito/internal/handler/MockHandlerImpl.java", "insertions": 16, "deletions": 5, "lines": 21}, {"filePath": "src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java", "insertions": 57, "deletions": 0, "lines": 57}, {"filePath": "src/main/java/org/mockito/internal/junit/DefaultTestFinishedEvent.java", "insertions": 25, "deletions": 0, "lines": 25}, {"filePath": "src/main/java/org/mockito/internal/junit/JUnitRule.java", "insertions": 45, "deletions": 61, "lines": 106}, {"filePath": "src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java", "insertions": 39, "deletions": 0, "lines": 39}, {"filePath": "src/main/java/org/mockito/internal/junit/MockitoTestListener.java", "insertions": 12, "deletions": 0, "lines": 12}, {"filePath": "src/main/java/org/mockito/internal/junit/NoOpTestListener.java", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "src/main/java/org/mockito/internal/junit/RuleStubbingHintsReporter.java", "insertions": 0, "deletions": 31, "lines": 31}, {"filePath": "src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "src/main/java/org/mockito/internal/junit/TestFinishedEvent.java", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "src/main/java/org/mockito/internal/junit/UniversalTestListener.java", "insertions": 82, "deletions": 0, "lines": 82}, {"filePath": "src/main/java/org/mockito/internal/junit/UnusedStubbings.java", "insertions": 17, "deletions": 0, "lines": 17}, {"filePath": "src/main/java/org/mockito/internal/junit/util/TestName.java", "insertions": 13, "deletions": 0, "lines": 13}, {"filePath": "src/main/java/org/mockito/internal/listeners/StubbingLookupListener.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "src/main/java/org/mockito/internal/matchers/And.java", "insertions": 11, "deletions": 26, "lines": 37}, {"filePath": "src/main/java/org/mockito/internal/matchers/Matches.java", "insertions": 11, "deletions": 7, "lines": 18}, {"filePath": "src/main/java/org/mockito/internal/matchers/Not.java", "insertions": 7, "deletions": 7, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/matchers/Or.java", "insertions": 11, "deletions": 25, "lines": 36}, {"filePath": "src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java", "insertions": 41, "deletions": 56, "lines": 97}, {"filePath": "src/main/java/org/mockito/internal/progress/MockingProgress.java", "insertions": 13, "deletions": 4, "lines": 17}, {"filePath": "src/main/java/org/mockito/internal/progress/MockingProgressImpl.java", "insertions": 24, "deletions": 4, "lines": 28}, {"filePath": "src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java", "insertions": 84, "deletions": 0, "lines": 84}, {"filePath": "src/main/java/org/mockito/internal/runners/DefaultTestFinishedEvent.java", "insertions": 31, "deletions": 0, "lines": 31}, {"filePath": "src/main/java/org/mockito/internal/runners/{RunnerImpl.java => InternalRunner.java}", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/internal/runners/RunnerFactory.java", "insertions": 36, "deletions": 2, "lines": 38}, {"filePath": "src/main/java/org/mockito/internal/runners/SilentJUnitRunner.java", "insertions": 0, "deletions": 49, "lines": 49}, {"filePath": "src/main/java/org/mockito/internal/runners/StrictRunner.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "src/main/java/org/mockito/internal/runners/util/FrameworkUsageValidator.java", "insertions": 0, "deletions": 40, "lines": 40}, {"filePath": "src/main/java/org/mockito/internal/runners/util/RunnerProvider.java", "insertions": 8, "deletions": 5, "lines": 13}, {"filePath": "src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java", "insertions": 13, "deletions": 9, "lines": 22}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/AnswersValidator.java", "insertions": 0, "deletions": 109, "lines": 109}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java", "insertions": 12, "deletions": 2, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidator.java", "insertions": 23, "deletions": 0, "lines": 23}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java", "insertions": 12, "deletions": 2, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/{MethodInfo.java => InvocationInfo.java}", "insertions": 5, "deletions": 9, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/Returns.java", "insertions": 26, "deletions": 6, "lines": 32}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java", "insertions": 18, "deletions": 6, "lines": 24}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/ThrowsException.java", "insertions": 19, "deletions": 5, "lines": 24}, {"filePath": "src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java", "insertions": 10, "deletions": 4, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/util/Platform.java", "insertions": 22, "deletions": 5, "lines": 27}, {"filePath": "src/main/java/org/mockito/internal/util/Supplier.java", "insertions": 16, "deletions": 0, "lines": 16}, {"filePath": "src/main/java/org/mockito/internal/util/collections/ListUtil.java", "insertions": 18, "deletions": 0, "lines": 18}, {"filePath": "src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java", "insertions": 24, "deletions": 3, "lines": 27}, {"filePath": "src/main/java/org/mockito/internal/verification/VerificationEventImpl.java", "insertions": 36, "deletions": 0, "lines": 36}, {"filePath": "src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java", "insertions": 7, "deletions": 19, "lines": 26}, {"filePath": "src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java", "insertions": 6, "deletions": 19, "lines": 25}, {"filePath": "src/main/java/org/mockito/invocation/InvocationOnMock.java", "insertions": 9, "deletions": 4, "lines": 13}, {"filePath": "src/main/java/org/mockito/junit/MockitoJUnit.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "src/main/java/org/mockito/junit/MockitoJUnitRunner.java", "insertions": 12, "deletions": 8, "lines": 20}, {"filePath": "src/main/java/org/mockito/junit/MockitoRule.java", "insertions": 68, "deletions": 1, "lines": 69}, {"filePath": "src/main/java/org/mockito/listeners/VerificationListener.java", "insertions": 20, "deletions": 0, "lines": 20}, {"filePath": "src/main/java/org/mockito/plugins/AnnotationEngine.java", "insertions": 29, "deletions": 0, "lines": 29}, {"filePath": "src/main/java/org/mockito/quality/Strictness.java", "insertions": 43, "deletions": 0, "lines": 43}, {"filePath": "src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "src/main/java/org/mockito/stubbing/ValidableAnswer.java", "insertions": 93, "deletions": 0, "lines": 93}, {"filePath": "src/main/java/org/mockito/verification/VerificationEvent.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "src/test/java/org/mockito/StateMaster.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "src/test/java/org/mockito/configuration/MockitoConfiguration.java", "insertions": 4, "deletions": 23, "lines": 27}, {"filePath": "src/test/java/org/mockito/internal/configuration/GlobalConfigurationTest.java", "insertions": 55, "deletions": 0, "lines": 55}, {"filePath": "src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java", "insertions": 22, "deletions": 6, "lines": 28}, {"filePath": "src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java", "insertions": 72, "deletions": 2, "lines": 74}, {"filePath": "src/test/java/org/mockito/internal/invocation/InvocationBuilder.java", "insertions": 35, "deletions": 14, "lines": 49}, {"filePath": "src/test/java/org/mockito/internal/junit/JUnitRuleTest.java", "insertions": 20, "deletions": 111, "lines": 131}, {"filePath": "src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java", "insertions": 8, "deletions": 12, "lines": 20}, {"filePath": "src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java", "insertions": 0, "deletions": 224, "lines": 224}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/CallsRealMethodsTest.java", "insertions": 67, "deletions": 0, "lines": 67}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidatorTest.java", "insertions": 40, "deletions": 0, "lines": 40}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/DoesNothingTest.java", "insertions": 28, "deletions": 0, "lines": 28}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/InvocationInfoTest.java", "insertions": 85, "deletions": 0, "lines": 85}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/MethodInfoTest.java", "insertions": 0, "deletions": 31, "lines": 31}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java", "insertions": 77, "deletions": 1, "lines": 78}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/ReturnsTest.java", "insertions": 51, "deletions": 0, "lines": 51}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/ThrowsExceptionTest.java", "insertions": 78, "deletions": 0, "lines": 78}, {"filePath": "src/test/java/org/mockito/internal/util/PlatformTest.java", "insertions": 39, "deletions": 2, "lines": 41}, {"filePath": "src/test/java/org/mockito/internal/util/SimpleMockitoLogger.java", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "src/test/java/org/mockito/junit/TestableJUnitRunner.java", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "src/test/java/org/mockitousage/bugs/ArgumentCaptorDontCapturePreviouslyVerifiedTest.java", "insertions": 28, "deletions": 0, "lines": 28}, {"filePath": "src/test/java/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java", "insertions": 34, "deletions": 1, "lines": 35}, {"filePath": "src/test/java/org/mockitousage/configuration/SmartMock.java", "insertions": 0, "deletions": 15, "lines": 15}, {"filePath": "src/test/java/org/mockitousage/debugging/InvocationListenerCallbackTest.java", "insertions": 19, "deletions": 16, "lines": 35}, {"filePath": "src/test/java/org/mockitousage/debugging/VerificationListenerCallBackTest.java", "insertions": 185, "deletions": 0, "lines": 185}, {"filePath": "src/test/java/org/mockitousage/jls/JLS_15_12_2_5Test.java", "insertions": 240, "deletions": 0, "lines": 240}, {"filePath": "src/test/java/org/mockitousage/junitrule/LenientJUnitRuleTest.java", "insertions": 39, "deletions": 0, "lines": 39}, {"filePath": "src/test/java/org/mockitousage/junitrule/MutableStrictJUnitRuleTest.java", "insertions": 71, "deletions": 0, "lines": 71}, {"filePath": "src/test/java/org/mockitousage/junitrule/SilentJUnitRuleTest.java", "insertions": 0, "deletions": 24, "lines": 24}, {"filePath": "src/test/java/org/mockitousage/junitrule/StrictJUnitRuleTest.java", "insertions": 161, "deletions": 0, "lines": 161}, {"filePath": "src/test/java/org/mockitousage/junitrule/StubbingWarningsJUnitRuleTest.java", "insertions": 133, "deletions": 187, "lines": 320}, {"filePath": "src/test/java/org/mockitousage/junitrule/StubbingWarningsMultiThreadingTest.java", "insertions": 37, "deletions": 46, "lines": 83}, {"filePath": "src/test/java/org/mockitousage/junitrunner/DeepStubbingWithJUnitRunnerTest.java", "insertions": 41, "deletions": 0, "lines": 41}, {"filePath": "src/test/java/org/mockitousage/junitrunner/SilentRunnerTest.java", "insertions": 22, "deletions": 2, "lines": 24}, {"filePath": "src/test/java/org/mockitousage/junitrunner/StubbingWarningsJUnitRunnerTest.java", "insertions": 122, "deletions": 0, "lines": 122}, {"filePath": "src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java", "insertions": 37, "deletions": 1, "lines": 38}, {"filePath": "src/test/java/org/mockitousage/matchers/MatchersTest.java", "insertions": 27, "deletions": 15, "lines": 42}, {"filePath": "src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java", "insertions": 8, "deletions": 4, "lines": 12}, {"filePath": "src/test/java/org/mockitoutil/ClassLoaders.java", "insertions": 179, "deletions": 33, "lines": 212}, {"filePath": "src/test/java/org/mockitoutil/ClassLoadersTest.java", "insertions": 139, "deletions": 20, "lines": 159}, {"filePath": "src/test/java/org/mockitoutil/JUnitResultAssert.java", "insertions": 32, "deletions": 2, "lines": 34}, {"filePath": "src/test/java/org/mockitoutil/SafeJUnitRule.java", "insertions": 102, "deletions": 0, "lines": 102}, {"filePath": "src/test/java/org/mockitoutil/SafeJUnitRuleTest.java", "insertions": 136, "deletions": 0, "lines": 136}, {"filePath": "src/test/java/org/mockitoutil/TestBase.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "subprojects/android/android.gradle", "insertions": 18, "deletions": 0, "lines": 18}, {"filePath": "subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidByteBuddyMockMaker.java", "insertions": 31, "deletions": 0, "lines": 31}, {"filePath": "subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidLoadingStrategy.java", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidTempFileLocator.java", "insertions": 93, "deletions": 0, "lines": 93}, {"filePath": "subprojects/android/src/main/resources/mockito-extensions/org.mockito.plugins.MockMaker", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "subprojects/extTest/extTest.gradle", "insertions": 11, "deletions": 4, "lines": 15}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}, {"commitHash": "76bf991288530203794eedbbdac80dc07de72550", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "19f02e7031cfcc3e5ece44ccfa611fd7d5b90484", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "b66b87bd6c804f42af6075fb7e695c8c60e8239a", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "2935202230545cb7f077d326d0dd21ebf701bc8a", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "215914d07acc4333ff291e7dd45723ee5d1795b8", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "ee1d168cdd2600ca566494881ab5e820c5a9c6fb", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "33fa01219a56c8eee387eea99bce11440c0fcf43", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "73b15cf585493549fcebf8d70ab50e6b063f2463", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "c0a98e3a4a5d4f3a4b0d3ef710690c3ee661713d", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "16f3ecac890df74ac46c90ad892132f221c37d18", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "29a6e9b3495ed97b8659cf1eba952708b3c68e8d", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "4d07ec6786a197c8abe482745ed0bf1716b9463b", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "19514af5110c3d5c1415bddd5c54b88723364a1a", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "e6a60b036dd556642466d10580e7172853beba9f", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "d49eb5e062466fc41ca07ca3cc778fe9c874cfd7", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "9c37a94a63c2f3edc60987ae38a97d3b458cc17d", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "1c096cc9cf911296158803c02102a705ebe89001", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "0ec0fc7030badc77f323d47e49c2229ac9dc5960", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "fc778f7f5b71a9051fbba99a7f575a00a86d332d", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 20, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Jacoco 0.7.8 breaks tests for the new plugin mechanism", "body": "Jacoco 0.7.8 breaks the tests for the new plugin mechanism (#811) with:\r\n\r\n```\r\n:test\r\n\r\norg.mockitoutil.ClassLoadersTest > cannot_load_runnable_in_given_classloader_if_some_type_cant_be_loaded FAILED\r\n    java.lang.AssertionError: \r\n    Expecting a throwable with cause being an instance of:\r\n     <java.lang.NoClassDefFoundError>\r\n    but was an instance of:\r\n     <java.lang.IllegalStateException: java.lang.IllegalAccessException: Class org.mockitoutil.ClassLoaders$ClassLoaderExecutor can not access a member of class org.mockitoutil.ClassLoadersTest$2 with modifiers \"private static transient\">\r\n        at org.mockitoutil.ClassLoadersTest.cannot_load_runnable_in_given_classloader_if_some_type_cant_be_loaded(ClassLoadersTest.java:324)\r\n\r\norg.mockitoutil.ClassLoadersTest > can_run_in_given_classloader FAILED\r\n    java.lang.IllegalStateException: Given task could not be loaded properly in the given classloader 'org.mockitoutil.ClassLoadersTest$1@46dcdf84', error 'java.lang.IllegalAccessException: Class org.mockitoutil.ClassLoaders$ClassLoaderExecutor can not access a member of class org.mockitoutil.ClassLoadersTest$1 with modifiers \"private static transient\"\r\n\r\n        Caused by:\r\n        java.lang.IllegalStateException: java.lang.IllegalAccessException: Class org.mockitoutil.ClassLoaders$ClassLoaderExecutor can not access a member of class org.mockitoutil.ClassLoadersTest$1 with modifiers \"private static transient\"\r\n\r\n            Caused by:\r\n            java.lang.IllegalAccessException: Class org.mockitoutil.ClassLoaders$ClassLoaderExecutor can not access a member of class org.mockitoutil.ClassLoadersTest$1 with modifiers \"private static transient\"\r\n\r\norg.mockito.internal.configuration.GlobalConfigurationTest > returns_mockito_annotation_engine_of_Plugins_if_no_MockitoConfiguration FAILED\r\n    java.lang.IllegalStateException: Given task could not be loaded properly in the given classloader 'org.mockito.internal.configuration.GlobalConfigurationTest$1@5adb485', error 'java.lang.IllegalAccessException: Class org.mockitoutil.ClassLoaders$ClassLoaderExecutor can not access a member of class org.mockito.internal.configuration.GlobalConfigurationTest$1 with modifiers \"private static transient\"\r\n\r\n        Caused by:\r\n        java.lang.IllegalStateException: java.lang.IllegalAccessException: Class org.mockitoutil.ClassLoaders$ClassLoaderExecutor can not access a member of class org.mockito.internal.configuration.GlobalConfigurationTest$1 with modifiers \"private static transient\"\r\n\r\n            Caused by:\r\n            java.lang.IllegalAccessException: Class org.mockitoutil.ClassLoaders$ClassLoaderExecutor can not access a member of class org.mockito.internal.configuration.GlobalConfigurationTest$1 with modifiers \"private static transient\"\r\n\r\n1701 tests completed, 3 failed, 42 skipped\r\n:test FAILED\r\n```\r\n\r\nThe corresponding Travis build: https://travis-ci.org/mockito/mockito/jobs/187043982#L431", "url": "https://github.com/mockito/mockito/issues/860", "user": "szpak", "labels": ["bug"], "created": "2016-12-31 14:05:49", "closed": "2017-01-04 15:02:32", "commits": {"8391362dcbcf84fa804c4797483d3718cf81b35b": {"commitGHEventType": "referenced", "commitUser": "szpak"}, "770c1c5eaa311ca4c0a78e924ab69319be523384": {"commitGHEventType": "referenced", "commitUser": "TimvdLippe"}, "730e246f00834680480bc9282ad7aa84ed985b37": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "64c2f61274a59eb3d86f1f122d71a80d9a1231be": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "d972c99572ed038078c5a755c4afd41b0e8f9d28": {"commitGHEventType": "referenced", "commitUser": "bric3"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "8391362dcbcf84fa804c4797483d3718cf81b35b", "commitGHEventType": "referenced", "commitUser": "szpak", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "770c1c5eaa311ca4c0a78e924ab69319be523384", "commitGHEventType": "referenced", "commitUser": "TimvdLippe", "commitParents": ["b5b087e1ca7868e0c0e187ae955526884b8ff136"], "nameRev": "770c1c5eaa311ca4c0a78e924ab69319be523384 remotes/origin/old-3.x~20", "commitMessage": "Backport 'release/2.x' changes to master (20161231) + fix for #860 (#861)\n\n* Merge branch 'release/2.x'\r\n\r\nConflicts:\r\n      .travis.yml\r\n      build.gradle\r\n      version.properties\r\n\r\n* [#860] Workaround for broken tests with Jacoco 0.7.8\r\n\r\nRelated to classloader and the new plugin mechanism.\r\n\r\n* [#862] Disable BB test broken with Java 9\r\n\r\nDue to a lack of the new ASM version.\r\n\r\nThe umbrella issue to reenable disabled tests: #863.\r\n", "commitDateTime": "2017-01-02 00:00:50", "authoredDateTime": "2017-01-02 00:00:50", "commitGitStats": [{"filePath": ".travis.yml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "build.gradle", "insertions": 27, "deletions": 105, "lines": 132}, {"filePath": "doc/release-notes/official.md", "insertions": 191, "deletions": 0, "lines": 191}, {"filePath": "gradle/java-library.gradle", "insertions": 35, "deletions": 0, "lines": 35}, {"filePath": "gradle/mockito-core/inline-mock.gradle", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "gradle/{ => mockito-core}/javadoc.gradle", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "gradle/{ => mockito-core}/license.gradle", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "gradle/{ => mockito-core}/osgi.gradle", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "gradle/mockito-core/testing.gradle", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "gradle/pom.gradle", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "gradle/publish.gradle", "insertions": 12, "deletions": 4, "lines": 16}, {"filePath": "gradle/publishable-java-library.gradle", "insertions": 53, "deletions": 0, "lines": 53}, {"filePath": "gradle/{ => root}/coverage.gradle", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "gradle/{ => root}/gradle-fix.gradle", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "gradle/{ => root}/ide.gradle", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "gradle/{ => root}/release.gradle", "insertions": 46, "deletions": 12, "lines": 58}, {"filePath": "gradle/{ => root}/version.gradle", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "settings.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "src/main/java/org/mockito/ArgumentMatchers.java", "insertions": 27, "deletions": 2, "lines": 29}, {"filePath": "src/main/java/org/mockito/Mockito.java", "insertions": 28, "deletions": 0, "lines": 28}, {"filePath": "src/main/java/org/mockito/MockitoAnnotations.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "src/main/java/org/mockito/configuration/AnnotationEngine.java", "insertions": 15, "deletions": 12, "lines": 27}, {"filePath": "src/main/java/org/mockito/configuration/DefaultMockitoConfiguration.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/configuration/IMockitoConfiguration.java", "insertions": 12, "deletions": 1, "lines": 13}, {"filePath": "src/main/java/org/mockito/exceptions/base/MockitoAssertionError.java", "insertions": 14, "deletions": 2, "lines": 16}, {"filePath": "src/main/java/org/mockito/exceptions/base/MockitoException.java", "insertions": 8, "deletions": 6, "lines": 14}, {"filePath": "src/main/java/org/mockito/exceptions/base/MockitoInitializationException.java", "insertions": 19, "deletions": 0, "lines": 19}, {"filePath": "src/main/java/org/mockito/exceptions/misusing/PotentialStubbingProblem.java", "insertions": 72, "deletions": 0, "lines": 72}, {"filePath": "src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "src/main/java/org/mockito/internal/MockitoCore.java", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java", "insertions": 13, "deletions": 3, "lines": 16}, {"filePath": "src/main/java/org/mockito/internal/configuration/{DefaultAnnotationEngine.java => IndependentAnnotationEngine.java}", "insertions": 7, "deletions": 8, "lines": 15}, {"filePath": "src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java", "insertions": 7, "deletions": 9, "lines": 16}, {"filePath": "src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java", "insertions": 5, "deletions": 6, "lines": 11}, {"filePath": "src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java", "insertions": 29, "deletions": 14, "lines": 43}, {"filePath": "src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/configuration/plugins/Plugins.java", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java", "insertions": 102, "deletions": 46, "lines": 148}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java", "insertions": 9, "deletions": 26, "lines": 35}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodDispatcher.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java", "insertions": 10, "deletions": 4, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java", "insertions": 13, "deletions": 3, "lines": 16}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassInjectionLoader.java", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassLoader.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/internal/creation/settings/CreationSettings.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "src/main/java/org/mockito/internal/exceptions/Reporter.java", "insertions": 67, "deletions": 10, "lines": 77}, {"filePath": "src/main/java/org/mockito/internal/handler/MockHandlerImpl.java", "insertions": 16, "deletions": 5, "lines": 21}, {"filePath": "src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java", "insertions": 57, "deletions": 0, "lines": 57}, {"filePath": "src/main/java/org/mockito/internal/junit/DefaultTestFinishedEvent.java", "insertions": 25, "deletions": 0, "lines": 25}, {"filePath": "src/main/java/org/mockito/internal/junit/JUnitRule.java", "insertions": 45, "deletions": 61, "lines": 106}, {"filePath": "src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java", "insertions": 39, "deletions": 0, "lines": 39}, {"filePath": "src/main/java/org/mockito/internal/junit/MockitoTestListener.java", "insertions": 12, "deletions": 0, "lines": 12}, {"filePath": "src/main/java/org/mockito/internal/junit/NoOpTestListener.java", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "src/main/java/org/mockito/internal/junit/RuleStubbingHintsReporter.java", "insertions": 0, "deletions": 31, "lines": 31}, {"filePath": "src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "src/main/java/org/mockito/internal/junit/TestFinishedEvent.java", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "src/main/java/org/mockito/internal/junit/UniversalTestListener.java", "insertions": 82, "deletions": 0, "lines": 82}, {"filePath": "src/main/java/org/mockito/internal/junit/UnusedStubbings.java", "insertions": 17, "deletions": 0, "lines": 17}, {"filePath": "src/main/java/org/mockito/internal/junit/util/TestName.java", "insertions": 13, "deletions": 0, "lines": 13}, {"filePath": "src/main/java/org/mockito/internal/listeners/StubbingLookupListener.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "src/main/java/org/mockito/internal/matchers/And.java", "insertions": 11, "deletions": 26, "lines": 37}, {"filePath": "src/main/java/org/mockito/internal/matchers/Matches.java", "insertions": 11, "deletions": 7, "lines": 18}, {"filePath": "src/main/java/org/mockito/internal/matchers/Not.java", "insertions": 7, "deletions": 7, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/matchers/Or.java", "insertions": 11, "deletions": 25, "lines": 36}, {"filePath": "src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java", "insertions": 41, "deletions": 56, "lines": 97}, {"filePath": "src/main/java/org/mockito/internal/progress/MockingProgress.java", "insertions": 13, "deletions": 4, "lines": 17}, {"filePath": "src/main/java/org/mockito/internal/progress/MockingProgressImpl.java", "insertions": 24, "deletions": 4, "lines": 28}, {"filePath": "src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java", "insertions": 84, "deletions": 0, "lines": 84}, {"filePath": "src/main/java/org/mockito/internal/runners/DefaultTestFinishedEvent.java", "insertions": 31, "deletions": 0, "lines": 31}, {"filePath": "src/main/java/org/mockito/internal/runners/{RunnerImpl.java => InternalRunner.java}", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/internal/runners/RunnerFactory.java", "insertions": 36, "deletions": 2, "lines": 38}, {"filePath": "src/main/java/org/mockito/internal/runners/SilentJUnitRunner.java", "insertions": 0, "deletions": 49, "lines": 49}, {"filePath": "src/main/java/org/mockito/internal/runners/StrictRunner.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "src/main/java/org/mockito/internal/runners/util/FrameworkUsageValidator.java", "insertions": 0, "deletions": 40, "lines": 40}, {"filePath": "src/main/java/org/mockito/internal/runners/util/RunnerProvider.java", "insertions": 8, "deletions": 5, "lines": 13}, {"filePath": "src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java", "insertions": 13, "deletions": 9, "lines": 22}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/AnswersValidator.java", "insertions": 0, "deletions": 109, "lines": 109}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java", "insertions": 12, "deletions": 2, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidator.java", "insertions": 23, "deletions": 0, "lines": 23}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java", "insertions": 12, "deletions": 2, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/{MethodInfo.java => InvocationInfo.java}", "insertions": 5, "deletions": 9, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/Returns.java", "insertions": 26, "deletions": 6, "lines": 32}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java", "insertions": 18, "deletions": 6, "lines": 24}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/ThrowsException.java", "insertions": 19, "deletions": 5, "lines": 24}, {"filePath": "src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java", "insertions": 10, "deletions": 4, "lines": 14}, {"filePath": "src/main/java/org/mockito/internal/util/Platform.java", "insertions": 22, "deletions": 5, "lines": 27}, {"filePath": "src/main/java/org/mockito/internal/util/Supplier.java", "insertions": 16, "deletions": 0, "lines": 16}, {"filePath": "src/main/java/org/mockito/internal/util/collections/ListUtil.java", "insertions": 18, "deletions": 0, "lines": 18}, {"filePath": "src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java", "insertions": 24, "deletions": 3, "lines": 27}, {"filePath": "src/main/java/org/mockito/internal/verification/VerificationEventImpl.java", "insertions": 36, "deletions": 0, "lines": 36}, {"filePath": "src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java", "insertions": 7, "deletions": 19, "lines": 26}, {"filePath": "src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java", "insertions": 6, "deletions": 19, "lines": 25}, {"filePath": "src/main/java/org/mockito/invocation/InvocationOnMock.java", "insertions": 9, "deletions": 4, "lines": 13}, {"filePath": "src/main/java/org/mockito/junit/MockitoJUnit.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "src/main/java/org/mockito/junit/MockitoJUnitRunner.java", "insertions": 12, "deletions": 8, "lines": 20}, {"filePath": "src/main/java/org/mockito/junit/MockitoRule.java", "insertions": 68, "deletions": 1, "lines": 69}, {"filePath": "src/main/java/org/mockito/listeners/VerificationListener.java", "insertions": 20, "deletions": 0, "lines": 20}, {"filePath": "src/main/java/org/mockito/plugins/AnnotationEngine.java", "insertions": 29, "deletions": 0, "lines": 29}, {"filePath": "src/main/java/org/mockito/quality/Strictness.java", "insertions": 43, "deletions": 0, "lines": 43}, {"filePath": "src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "src/main/java/org/mockito/stubbing/ValidableAnswer.java", "insertions": 93, "deletions": 0, "lines": 93}, {"filePath": "src/main/java/org/mockito/verification/VerificationEvent.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "src/test/java/org/mockito/StateMaster.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "src/test/java/org/mockito/configuration/MockitoConfiguration.java", "insertions": 4, "deletions": 23, "lines": 27}, {"filePath": "src/test/java/org/mockito/internal/configuration/GlobalConfigurationTest.java", "insertions": 55, "deletions": 0, "lines": 55}, {"filePath": "src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java", "insertions": 22, "deletions": 6, "lines": 28}, {"filePath": "src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java", "insertions": 72, "deletions": 2, "lines": 74}, {"filePath": "src/test/java/org/mockito/internal/invocation/InvocationBuilder.java", "insertions": 35, "deletions": 14, "lines": 49}, {"filePath": "src/test/java/org/mockito/internal/junit/JUnitRuleTest.java", "insertions": 20, "deletions": 111, "lines": 131}, {"filePath": "src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java", "insertions": 8, "deletions": 12, "lines": 20}, {"filePath": "src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java", "insertions": 0, "deletions": 224, "lines": 224}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/CallsRealMethodsTest.java", "insertions": 67, "deletions": 0, "lines": 67}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidatorTest.java", "insertions": 40, "deletions": 0, "lines": 40}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/DoesNothingTest.java", "insertions": 28, "deletions": 0, "lines": 28}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/InvocationInfoTest.java", "insertions": 85, "deletions": 0, "lines": 85}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/MethodInfoTest.java", "insertions": 0, "deletions": 31, "lines": 31}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java", "insertions": 77, "deletions": 1, "lines": 78}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/ReturnsTest.java", "insertions": 51, "deletions": 0, "lines": 51}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/ThrowsExceptionTest.java", "insertions": 78, "deletions": 0, "lines": 78}, {"filePath": "src/test/java/org/mockito/internal/util/PlatformTest.java", "insertions": 39, "deletions": 2, "lines": 41}, {"filePath": "src/test/java/org/mockito/internal/util/SimpleMockitoLogger.java", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "src/test/java/org/mockito/junit/TestableJUnitRunner.java", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "src/test/java/org/mockitousage/bugs/ArgumentCaptorDontCapturePreviouslyVerifiedTest.java", "insertions": 28, "deletions": 0, "lines": 28}, {"filePath": "src/test/java/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java", "insertions": 34, "deletions": 1, "lines": 35}, {"filePath": "src/test/java/org/mockitousage/configuration/SmartMock.java", "insertions": 0, "deletions": 15, "lines": 15}, {"filePath": "src/test/java/org/mockitousage/debugging/InvocationListenerCallbackTest.java", "insertions": 19, "deletions": 16, "lines": 35}, {"filePath": "src/test/java/org/mockitousage/debugging/VerificationListenerCallBackTest.java", "insertions": 185, "deletions": 0, "lines": 185}, {"filePath": "src/test/java/org/mockitousage/jls/JLS_15_12_2_5Test.java", "insertions": 240, "deletions": 0, "lines": 240}, {"filePath": "src/test/java/org/mockitousage/junitrule/LenientJUnitRuleTest.java", "insertions": 39, "deletions": 0, "lines": 39}, {"filePath": "src/test/java/org/mockitousage/junitrule/MutableStrictJUnitRuleTest.java", "insertions": 71, "deletions": 0, "lines": 71}, {"filePath": "src/test/java/org/mockitousage/junitrule/SilentJUnitRuleTest.java", "insertions": 0, "deletions": 24, "lines": 24}, {"filePath": "src/test/java/org/mockitousage/junitrule/StrictJUnitRuleTest.java", "insertions": 161, "deletions": 0, "lines": 161}, {"filePath": "src/test/java/org/mockitousage/junitrule/StubbingWarningsJUnitRuleTest.java", "insertions": 133, "deletions": 187, "lines": 320}, {"filePath": "src/test/java/org/mockitousage/junitrule/StubbingWarningsMultiThreadingTest.java", "insertions": 37, "deletions": 46, "lines": 83}, {"filePath": "src/test/java/org/mockitousage/junitrunner/DeepStubbingWithJUnitRunnerTest.java", "insertions": 41, "deletions": 0, "lines": 41}, {"filePath": "src/test/java/org/mockitousage/junitrunner/SilentRunnerTest.java", "insertions": 22, "deletions": 2, "lines": 24}, {"filePath": "src/test/java/org/mockitousage/junitrunner/StubbingWarningsJUnitRunnerTest.java", "insertions": 122, "deletions": 0, "lines": 122}, {"filePath": "src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java", "insertions": 37, "deletions": 1, "lines": 38}, {"filePath": "src/test/java/org/mockitousage/matchers/MatchersTest.java", "insertions": 27, "deletions": 15, "lines": 42}, {"filePath": "src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java", "insertions": 8, "deletions": 4, "lines": 12}, {"filePath": "src/test/java/org/mockitoutil/ClassLoaders.java", "insertions": 179, "deletions": 33, "lines": 212}, {"filePath": "src/test/java/org/mockitoutil/ClassLoadersTest.java", "insertions": 139, "deletions": 20, "lines": 159}, {"filePath": "src/test/java/org/mockitoutil/JUnitResultAssert.java", "insertions": 32, "deletions": 2, "lines": 34}, {"filePath": "src/test/java/org/mockitoutil/SafeJUnitRule.java", "insertions": 102, "deletions": 0, "lines": 102}, {"filePath": "src/test/java/org/mockitoutil/SafeJUnitRuleTest.java", "insertions": 136, "deletions": 0, "lines": 136}, {"filePath": "src/test/java/org/mockitoutil/TestBase.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "subprojects/android/android.gradle", "insertions": 18, "deletions": 0, "lines": 18}, {"filePath": "subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidByteBuddyMockMaker.java", "insertions": 31, "deletions": 0, "lines": 31}, {"filePath": "subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidLoadingStrategy.java", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidTempFileLocator.java", "insertions": 93, "deletions": 0, "lines": 93}, {"filePath": "subprojects/android/src/main/resources/mockito-extensions/org.mockito.plugins.MockMaker", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "subprojects/extTest/extTest.gradle", "insertions": 11, "deletions": 4, "lines": 15}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}, {"commitHash": "730e246f00834680480bc9282ad7aa84ed985b37", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["770c1c5eaa311ca4c0a78e924ab69319be523384"], "nameRev": "730e246f00834680480bc9282ad7aa84ed985b37 remotes/origin/old-3.x~19^2", "commitMessage": "Fixes #860, jacaco synthetic fields are not anymore final in 0.7.8\n", "commitDateTime": "2017-01-04 15:51:18", "authoredDateTime": "2017-01-04 15:51:18", "commitGitStats": [{"filePath": "gradle/root/coverage.gradle", "insertions": 0, "deletions": 7, "lines": 7}, {"filePath": "src/test/java/org/mockitoutil/ClassLoaders.java", "insertions": 4, "deletions": 2, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ClassLoaders.java", "spoonMethods": [{"spoonMethodName": "org.mockitoutil.ClassLoaders.ClassLoaderExecutor.reloadTaskInClassLoader(java.lang.Runnable)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "64c2f61274a59eb3d86f1f122d71a80d9a1231be", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["770c1c5eaa311ca4c0a78e924ab69319be523384", "730e246f00834680480bc9282ad7aa84ed985b37"], "nameRev": "64c2f61274a59eb3d86f1f122d71a80d9a1231be remotes/origin/old-3.x~19", "commitMessage": "Merge pull request #868 from mockito/investigate-860\n\nFixes #860, jacaco synthetic fields are not anymore final in 0.7.8", "commitDateTime": "2017-01-04 16:02:14", "authoredDateTime": "2017-01-04 16:02:14", "commitGitStats": [{"filePath": "gradle/root/coverage.gradle", "insertions": 0, "deletions": 7, "lines": 7}, {"filePath": "src/test/java/org/mockitoutil/ClassLoaders.java", "insertions": 4, "deletions": 2, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ClassLoaders.java", "spoonMethods": [{"spoonMethodName": "org.mockitoutil.ClassLoaders.ClassLoaderExecutor.reloadTaskInClassLoader(java.lang.Runnable)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "d972c99572ed038078c5a755c4afd41b0e8f9d28", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["c2261b5d6df55a68302875a5b70503856c51a296"], "nameRev": "d972c99572ed038078c5a755c4afd41b0e8f9d28 tags/v2.5.4~2", "commitMessage": "Backport #860 fix\n\nSigned-off-by: Brice Dutheil <brice.dutheil@gmail.com>\n", "commitDateTime": "2017-01-04 15:52:28", "authoredDateTime": "2017-01-04 15:39:52", "commitGitStats": [{"filePath": "src/test/java/org/mockitoutil/ClassLoaders.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ClassLoaders.java", "spoonMethods": [{"spoonMethodName": "org.mockitoutil.ClassLoaders.ClassLoaderExecutor.reloadTaskInClassLoader(java.lang.Runnable)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["730e246f00834680480bc9282ad7aa84ed985b37", "d972c99572ed038078c5a755c4afd41b0e8f9d28"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 2, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 0.0, "deletions": 7.0, "lines": 7.0, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2.0, "UPD": 0.0, "INS": 2.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["gradle/root"], "changesInPackagesSPOON": ["org.mockitoutil.ClassLoaders.ClassLoaderExecutor.reloadTaskInClassLoader(java.lang.Runnable)"]}, {"title": "[VarArgs] unexpected behaviour of returnsArgAt(int)", "body": "I stumble about a test that failed after refactoring an array parameter to an varargs.\r\n\r\nThe following test succeed:\r\n```java\r\ninterface Foo{\r\n        int[] getOdd(int[] input);\r\n}\r\n\r\n@Test\r\npublic void test() throws Exception {\r\n    when(foo.getOdd(any())).then(returnsArgAt(0));\r\n        \r\n    int[] odd = mock.getOdd(new int[]{1,3,5});\r\n    assertThat(odd).contains(1,3,5);\r\n}\r\n```\r\nNow lets change the parameter _input_ to an varargs.\r\n```java\r\ninterface Foo{\r\n        int[] getOdd(int... input);\r\n}\r\n```\r\nThe test fails now with:\r\n\r\n```\r\norg.mockito.exceptions.misusing.WrongTypeOfReturnValue: \r\nThe argument of type 'int' cannot be returned because the following \r\nmethod should return the type 'int[]'\r\n -> foo.getOdd()\r\n```\r\n\r\nThis is not expected cause the change is source and binary(?) compatible, an varargs-parameter is still an array. ReturnsArgumentAt interprets the vararg array items as real parameters. In other words it tries to return an element type where the array type is required.\r\n\r\nCan the behaviour of interpreting vararg elements like parameters be changed so an vararg is treated as an array? E.g. in Mockito 3? There are several other cases were the current vararg handling leads to unexpected behaviour.", "url": "https://github.com/mockito/mockito/issues/820", "user": "ChristianSchwarz", "labels": ["bug"], "created": "2016-12-14 14:40:38", "closed": "2017-01-06 11:14:51", "commits": {"dfb9a959354b392dca05e7233db0919ef862a5de": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "02678525ab50a39cb0cd2e033a38e5201c7acc9a": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "a3dec8c6a27ef6c2899640d1bd387433b9e2948e": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "b3e9568fa19bb6c4781e76b0753bd3dd0b4e8d0e": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "1d285102bb01150f6399604aa900bd3f3365e4e7": {"commitGHEventType": "closed", "commitUser": "bric3"}, "40ab88b61d0a37c55d3f0bc39e07bb5c9efb8a49": {"commitGHEventType": "referenced", "commitUser": "bric3"}}, "ttf": 22.00027777777778, "commitsDetails": [{"commitHash": "dfb9a959354b392dca05e7233db0919ef862a5de", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "02678525ab50a39cb0cd2e033a38e5201c7acc9a", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "a3dec8c6a27ef6c2899640d1bd387433b9e2948e", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "b3e9568fa19bb6c4781e76b0753bd3dd0b4e8d0e", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "1d285102bb01150f6399604aa900bd3f3365e4e7", "commitGHEventType": "closed", "commitUser": "bric3", "commitParents": ["c2261b5d6df55a68302875a5b70503856c51a296"], "nameRev": "1d285102bb01150f6399604aa900bd3f3365e4e7 tags/v2.5.5~1^2", "commitMessage": "Fixes #820 ReturnsArgAt to handle returning vararg as arrays\n\nSigned-off-by: Brice Dutheil <brice.dutheil@gmail.com>\n", "commitDateTime": "2017-01-04 14:40:04", "authoredDateTime": "2016-12-14 18:56:46", "commitGitStats": [{"filePath": "src/main/java/org/mockito/AdditionalAnswers.java", "insertions": 123, "deletions": 15, "lines": 138}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java", "insertions": 68, "deletions": 59, "lines": 127}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java", "insertions": 69, "deletions": 9, "lines": 78}, {"filePath": "src/test/java/org/mockitousage/IMethods.java", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "src/test/java/org/mockitousage/MethodsImpl.java", "insertions": 12, "deletions": 0, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AdditionalAnswers.java", "spoonMethods": [{"spoonMethodName": "org.mockito.AdditionalAnswers", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 3}, {"spoonMethodName": "org.mockito.AdditionalAnswers.returnsFirstArg()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.AdditionalAnswers.returnsSecondArg()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.AdditionalAnswers.returnsLastArg()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "ReturnsArgumentAt.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.actualArgumentPosition(org.mockito.invocation.InvocationOnMock)", "TOT": 8, "UPD": 2, "INS": 0, "MOV": 6, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.lastArgumentIndexOf(org.mockito.invocation.InvocationOnMock)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.checkWithinAllowedRange(int)", "TOT": 6, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.validateIndexWithinInvocationRange(org.mockito.invocation.InvocationOnMock)", "TOT": 9, "UPD": 7, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.argumentPositionInRange(org.mockito.invocation.InvocationOnMock)", "TOT": 13, "UPD": 5, "INS": 0, "MOV": 8, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.returnedTypeOnSignature(org.mockito.invocation.InvocationOnMock)", "TOT": 11, "UPD": 7, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.validateFor(org.mockito.invocation.InvocationOnMock)", "TOT": 12, "UPD": 0, "INS": 0, "MOV": 9, "DEL": 3}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.answer(org.mockito.invocation.InvocationOnMock)", "TOT": 12, "UPD": 0, "INS": 5, "MOV": 6, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.returningLastArg()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.argumentIndexOf(org.mockito.invocation.InvocationOnMock)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.wantedArgumentPosition()", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.wantedArgumentPositionIsValidForInvocation(org.mockito.invocation.InvocationOnMock,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.inferWantedArgumentPosition(org.mockito.invocation.InvocationOnMock)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.validateIndexWithinInvocationRange(org.mockito.invocation.InvocationOnMock,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.inferWantedArgumentType(org.mockito.invocation.InvocationOnMock,int)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ReturnsArgumentAtTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_identify_bad_parameter_type_for_invocation()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_not_scream_when_mixed_vararg_parameter_is_compatible_with_invocation()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_handle_returning_vararg_as_array()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "IMethods.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.mixedVarargsReturningString(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.mixedVarargsReturningStringArray(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.mixedVarargsReturningObjectArray(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MethodsImpl.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.MethodsImpl.mixedVarargsReturningString(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.MethodsImpl.mixedVarargsReturningStringArray(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.MethodsImpl.mixedVarargsReturningObjectArray(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "40ab88b61d0a37c55d3f0bc39e07bb5c9efb8a49", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["d13dfa0adbb6cbb1544e40aff5eed8b3d16979ad", "1d285102bb01150f6399604aa900bd3f3365e4e7"], "nameRev": "40ab88b61d0a37c55d3f0bc39e07bb5c9efb8a49 tags/v2.5.5~1", "commitMessage": "Merge pull request #821 from mockito/fixes-returnsargat-with-array-return-type\n\nFixes #820 ReturnsArgAt to handle returning vararg as arrays", "commitDateTime": "2017-01-06 12:14:49", "authoredDateTime": "2017-01-06 12:14:49", "commitGitStats": [{"filePath": "src/main/java/org/mockito/AdditionalAnswers.java", "insertions": 123, "deletions": 15, "lines": 138}, {"filePath": "src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java", "insertions": 68, "deletions": 59, "lines": 127}, {"filePath": "src/test/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java", "insertions": 69, "deletions": 9, "lines": 78}, {"filePath": "src/test/java/org/mockitousage/IMethods.java", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "src/test/java/org/mockitousage/MethodsImpl.java", "insertions": 12, "deletions": 0, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AdditionalAnswers.java", "spoonMethods": [{"spoonMethodName": "org.mockito.AdditionalAnswers", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 3}, {"spoonMethodName": "org.mockito.AdditionalAnswers.returnsFirstArg()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.AdditionalAnswers.returnsSecondArg()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.AdditionalAnswers.returnsLastArg()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "ReturnsArgumentAt.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.actualArgumentPosition(org.mockito.invocation.InvocationOnMock)", "TOT": 8, "UPD": 2, "INS": 0, "MOV": 6, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.lastArgumentIndexOf(org.mockito.invocation.InvocationOnMock)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.checkWithinAllowedRange(int)", "TOT": 6, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.validateIndexWithinInvocationRange(org.mockito.invocation.InvocationOnMock)", "TOT": 9, "UPD": 7, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.argumentPositionInRange(org.mockito.invocation.InvocationOnMock)", "TOT": 13, "UPD": 5, "INS": 0, "MOV": 8, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.returnedTypeOnSignature(org.mockito.invocation.InvocationOnMock)", "TOT": 11, "UPD": 7, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.validateFor(org.mockito.invocation.InvocationOnMock)", "TOT": 12, "UPD": 0, "INS": 0, "MOV": 9, "DEL": 3}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.answer(org.mockito.invocation.InvocationOnMock)", "TOT": 12, "UPD": 0, "INS": 5, "MOV": 6, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.returningLastArg()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.argumentIndexOf(org.mockito.invocation.InvocationOnMock)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.wantedArgumentPosition()", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.wantedArgumentPositionIsValidForInvocation(org.mockito.invocation.InvocationOnMock,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.inferWantedArgumentPosition(org.mockito.invocation.InvocationOnMock)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.validateIndexWithinInvocationRange(org.mockito.invocation.InvocationOnMock,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.inferWantedArgumentType(org.mockito.invocation.InvocationOnMock,int)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ReturnsArgumentAtTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_identify_bad_parameter_type_for_invocation()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_not_scream_when_mixed_vararg_parameter_is_compatible_with_invocation()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.ReturnsArgumentAtTest.should_handle_returning_vararg_as_array()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "IMethods.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.mixedVarargsReturningString(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.mixedVarargsReturningStringArray(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.mixedVarargsReturningObjectArray(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MethodsImpl.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.MethodsImpl.mixedVarargsReturningString(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.MethodsImpl.mixedVarargsReturningStringArray(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.MethodsImpl.mixedVarargsReturningObjectArray(java.lang.Object,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1d285102bb01150f6399604aa900bd3f3365e4e7"], "filteredCommitsReason": {"duplicated": 4, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 191.0, "deletions": 74.0, "lines": 265.0, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 107.0, "UPD": 25.0, "INS": 19.0, "MOV": 47.0, "DEL": 16.0, "spoonFilesChanged": 4, "spoonMethodsChanged": 26}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/mockito/internal/stubbing/answers", "src/main/java/org/mockito"], "changesInPackagesSPOON": ["org.mockito.internal.stubbing.answers.ReturnsArgumentAt.validateIndexWithinInvocationRange(org.mockito.invocation.InvocationOnMock,int)", "org.mockito.AdditionalAnswers.returnsFirstArg()", "org.mockito.AdditionalAnswers", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.returnedTypeOnSignature(org.mockito.invocation.InvocationOnMock)", "org.mockito.AdditionalAnswers.returnsSecondArg()", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.wantedArgumentPosition()", "org.mockitousage.MethodsImpl.mixedVarargsReturningString(java.lang.Object,java.lang.String[])", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.returningLastArg()", "org.mockitousage.mixedVarargsReturningObjectArray(java.lang.Object,java.lang.String[])", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.argumentPositionInRange(org.mockito.invocation.InvocationOnMock)", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.actualArgumentPosition(org.mockito.invocation.InvocationOnMock)", "org.mockitousage.MethodsImpl.mixedVarargsReturningObjectArray(java.lang.Object,java.lang.String[])", "org.mockitousage.MethodsImpl.mixedVarargsReturningStringArray(java.lang.Object,java.lang.String[])", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.inferWantedArgumentPosition(org.mockito.invocation.InvocationOnMock)", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.validateFor(org.mockito.invocation.InvocationOnMock)", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.answer(org.mockito.invocation.InvocationOnMock)", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.validateIndexWithinInvocationRange(org.mockito.invocation.InvocationOnMock)", "org.mockito.AdditionalAnswers.returnsLastArg()", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.inferWantedArgumentType(org.mockito.invocation.InvocationOnMock,int)", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.wantedArgumentPositionIsValidForInvocation(org.mockito.invocation.InvocationOnMock,int)", "org.mockitousage.mixedVarargsReturningString(java.lang.Object,java.lang.String[])", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.lastArgumentIndexOf(org.mockito.invocation.InvocationOnMock)", "org.mockitousage.mixedVarargsReturningStringArray(java.lang.Object,java.lang.String[])", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.checkWithinAllowedRange(int)", "org.mockito.internal.stubbing.answers.ReturnsArgumentAt.argumentIndexOf(org.mockito.invocation.InvocationOnMock)"]}, {"title": "StackOverflow occurs when mocking a HashMap with mockmaker", "body": "As investigated in #752, mocking a `HashMap` halts with a stack overflow when using `mock-maker-inline`:\r\n\r\n```\r\nMockito.mock(HashMap.class);\r\n\r\nException in thread \"Reference Handler\" java.lang.StackOverflowError\r\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\r\n\tat java.lang.Class.getDeclaredMethod(Class.java:2128)\r\n\tat java.util.HashMap.get(HashMap.java:556)\r\n\tat sun.reflect.Reflection.filterMethods(Reflection.java:291)\r\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\r\n\tat java.lang.Class.getDeclaredMethod(Class.java:2128)\r\n\tat java.util.HashMap.get(HashMap.java:556)\r\n\tat sun.reflect.Reflection.filterMethods(Reflection.java:291)\r\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\r\n\tat java.lang.Class.getDeclaredMethod(Class.java:2128)\r\n\tat java.util.HashMap.get(HashMap.java:556)\r\n\tat sun.reflect.Reflection.filterMethods(Reflection.java:291)\r\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\r\n\tat java.lang.Class.getDeclaredMethod(Class.java:2128)\r\n\tat java.util.HashMap.get(HashMap.java:556)\r\n\tat sun.reflect.Reflection.filterMethods(Reflection.java:291)\r\n```\r\n\r\nThis does not occur when mocking `Map`.\r\nVerified against Mockito 2.2.28.", "url": "https://github.com/mockito/mockito/issues/818", "user": "nhaarman", "labels": ["bug", "final-class-or-methods"], "created": "2016-12-13 21:17:11", "closed": "2016-12-15 10:16:59", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Release 2.3.1 has broken POM file - no dependencies declared", "body": "Release `2.3.0` has the following info in [mockito-core-2.3.0.pom](http://jcenter.bintray.com/org/mockito/mockito-core/2.3.0/:mockito-core-2.3.0.pom):\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <groupId>org.mockito</groupId>\r\n  <artifactId>mockito-core</artifactId>\r\n  <version>2.3.0</version>\r\n  <dependencies>\r\n    <dependency>\r\n      <groupId>net.bytebuddy</groupId>\r\n      <artifactId>byte-buddy</artifactId>\r\n      <version>1.5.5</version>\r\n      <scope>runtime</scope>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>net.bytebuddy</groupId>\r\n      <artifactId>byte-buddy-agent</artifactId>\r\n      <version>1.5.5</version>\r\n      <scope>runtime</scope>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>org.objenesis</groupId>\r\n      <artifactId>objenesis</artifactId>\r\n      <version>2.4</version>\r\n      <scope>runtime</scope>\r\n    </dependency>\r\n  </dependencies>\r\n  <name>Mockito</name>\r\n  <packaging>jar</packaging>\r\n  <url>http://mockito.org</url>\r\n  <description>Mock objects library for java</description>\r\n  <licenses>\r\n    <license>\r\n      <name>The MIT License</name>\r\n      <url>http://github.com/mockito/mockito/blob/master/LICENSE</url>\r\n      <distribution>repo</distribution>\r\n    </license>\r\n  </licenses>\r\n  <scm>\r\n    <url>http://github.com/mockito/mockito</url>\r\n  </scm>\r\n  <issueManagement>\r\n    <url>https://github.com/mockito/mockito/issues</url>\r\n    <system>GitHub issues</system>\r\n  </issueManagement>\r\n  <ciManagement>\r\n    <url>https://travis-ci.org/mockito/mockito</url>\r\n    <system>TravisCI</system>\r\n  </ciManagement>\r\n  <developers>\r\n    <developer>\r\n      <id>szczepiq</id>\r\n      <name>Szczepan Faber</name>\r\n      <roles>\r\n        <role>Core developer</role>\r\n      </roles>\r\n    </developer>\r\n    <developer>\r\n      <id>bric3</id>\r\n      <name>Brice Dutheil</name>\r\n      <roles>\r\n        <role>Core developer</role>\r\n      </roles>\r\n    </developer>\r\n    <developer>\r\n      <id>raphw</id>\r\n      <name>Rafael Winterhalter</name>\r\n      <roles>\r\n        <role>Core developer</role>\r\n      </roles>\r\n    </developer>\r\n    <developer>\r\n      <id>TimvdLippe</id>\r\n      <name>Tim van der Lippe</name>\r\n      <roles>\r\n        <role>Core developer</role>\r\n      </roles>\r\n    </developer>\r\n  </developers>\r\n</project>\r\n```\r\nHowever release `2.3.1` has only the following info in [mockito-core-2.3.1.pom](http://jcenter.bintray.com/org/mockito/mockito-core/2.3.1/:mockito-core-2.3.1.pom):\r\n```xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <groupId>org.mockito</groupId>\r\n  <artifactId>mockito-core</artifactId>\r\n  <version>2.3.1</version>\r\n  <name>mockito-core</name>\r\n  <packaging>jar</packaging>\r\n  <url>http://mockito.org</url>\r\n  <description>Mockito mock objects library core API and implementation</description>\r\n  <licenses>\r\n    <license>\r\n      <name>The MIT License</name>\r\n      <url>http://github.com/mockito/mockito/blob/master/LICENSE</url>\r\n      <distribution>repo</distribution>\r\n    </license>\r\n  </licenses>\r\n  <scm>\r\n    <url>http://github.com/mockito/mockito</url>\r\n  </scm>\r\n  <issueManagement>\r\n    <url>https://github.com/mockito/mockito/issues</url>\r\n    <system>GitHub issues</system>\r\n  </issueManagement>\r\n  <ciManagement>\r\n    <url>https://travis-ci.org/mockito/mockito</url>\r\n    <system>TravisCI</system>\r\n  </ciManagement>\r\n  <developers>\r\n    <developer>\r\n      <id>szczepiq</id>\r\n      <name>Szczepan Faber</name>\r\n      <roles>\r\n        <role>Core developer</role>\r\n      </roles>\r\n    </developer>\r\n    <developer>\r\n      <id>bric3</id>\r\n      <name>Brice Dutheil</name>\r\n      <roles>\r\n        <role>Core developer</role>\r\n      </roles>\r\n    </developer>\r\n    <developer>\r\n      <id>raphw</id>\r\n      <name>Rafael Winterhalter</name>\r\n      <roles>\r\n        <role>Core developer</role>\r\n      </roles>\r\n    </developer>\r\n    <developer>\r\n      <id>TimvdLippe</id>\r\n      <name>Tim van der Lippe</name>\r\n      <roles>\r\n        <role>Core developer</role>\r\n      </roles>\r\n    </developer>\r\n  </developers>\r\n</project>\r\n```\r\n", "url": "https://github.com/mockito/mockito/issues/816", "user": "vyazelenko", "labels": ["bug", "continuous integration", "question"], "created": "2016-12-13 14:09:25", "closed": "2016-12-13 14:14:20", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Mockito 2 fails when running on IBM J9 (SR1 FP10) VM", "body": "Mocking an interface fails when running on IBM's JDK with the error attached below. \r\nWorks well on Oracle JDK 1.8.0_91.\r\n\r\nAttaching a small project that can be used to reproduce the issue: [mockito-ibm-jdk-test.zip](https://github.com/mockito/mockito/files/633253/mockito-ibm-jdk-test.zip)\r\n\r\nOriginal Mailing list post: https://groups.google.com/forum/#!topic/mockito/IWPQj2bg280\r\n\r\nOutput from `java -version` of the failing version:\r\n```\r\njava version \"1.8.0\"\r\nJava(TM) SE Runtime Environment (build pwa6480sr1fp10-20150711_01(SR1 FP10))\r\nIBM J9 VM (build 2.8, JRE 1.8.0 Windows 7 amd64-64 Compressed References 20150630_255633 (JIT enabled, AOT enabled)\r\nJ9VM - R28_jvm.28_20150630_1742_B255633\r\nJIT  - tr.r14.java_20150625_95081.01\r\nGC   - R28_jvm.28_20150630_1742_B255633_CMPRSS\r\nJ9CL - 20150630_255633)\r\nJCL - 20150711_01 based on Oracle jdk8u51-b15\r\n```\r\nError message and stack trace:\r\n```\r\norg.mockito.exceptions.base.MockitoException: \r\nMockito cannot mock this class: interface service.Service.\r\n\r\nMockito can only mock non-private & non-final classes.\r\nIf you're not sure why you're getting this error, please report to the mailing list.\r\n\r\nJava               : 1.8\r\nJVM vendor name    : IBM Corporation\r\nJVM vendor version : 2.8\r\nJVM name           : IBM J9 VM\r\nJVM version        : pwa6480sr1fp10-20150711_01 (SR1 FP10)\r\nJVM info           : JRE 1.8.0 Windows 7 amd64-64 Compressed References 20150630_255633 (JIT enabled, AOT enabled)\r\nJ9VM - R28_jvm.28_20150630_1742_B255633\r\nJIT  - tr.r14.java_20150625_95081.01\r\nGC   - R28_jvm.28_20150630_1742_B255633_CMPRSS\r\nJ9CL - 20150630_255633\r\nOS name            : Windows 7\r\nOS version         : 6.1\r\n\r\n\r\nUnderlying exception : java.lang.IllegalArgumentException: object is not an instance of declaring class\r\n\tat org.mockito.internal.runners.SilentJUnitRunner$1.withBefores(SilentJUnitRunner.java:29)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:276)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.mockito.internal.runners.SilentJUnitRunner.run(SilentJUnitRunner.java:39)\r\n\tat org.mockito.internal.runners.StrictRunner.run(StrictRunner.java:39)\r\n\tat org.mockito.junit.MockitoJUnitRunner.run(MockitoJUnitRunner.java:103)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\r\nCaused by: java.lang.IllegalArgumentException: object is not an instance of declaring class\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:95)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:55)\r\n\tat java.lang.reflect.Method.invoke(Method.java:507)\r\n\tat net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForTypeArgument.resolve(TypeDescription.java:3843)\r\n\tat net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator$Chained.resolve(TypeDescription.java:3468)\r\n\tat net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$ForTypeArgument.resolve(TypeDescription.java:3803)\r\n\tat net.bytebuddy.description.type.TypeDescription$Generic$AnnotationReader$Delegator.asList(TypeDescription.java:3439)\r\n\tat net.bytebuddy.description.type.TypeDescription$Generic$OfNonGenericType$ForLoadedType.getDeclaredAnnotations(TypeDescription.java:4208)\r\n\tat net.bytebuddy.implementation.attribute.AnnotationAppender$ForTypeAnnotations.apply(AnnotationAppender.java:720)\r\n\tat net.bytebuddy.implementation.attribute.AnnotationAppender$ForTypeAnnotations.onNonGenericType(AnnotationAppender.java:701)\r\n\tat net.bytebuddy.implementation.attribute.AnnotationAppender$ForTypeAnnotations.onNonGenericType(AnnotationAppender.java:415)\r\n\tat net.bytebuddy.description.type.TypeDescription$Generic$OfNonGenericType.accept(TypeDescription.java:4075)\r\n\tat net.bytebuddy.implementation.attribute.AnnotationAppender$ForTypeAnnotations.onParameterizedType(AnnotationAppender.java:682)\r\n\tat net.bytebuddy.implementation.attribute.AnnotationAppender$ForTypeAnnotations.onParameterizedType(AnnotationAppender.java:415)\r\n\tat net.bytebuddy.description.type.TypeDescription$Generic$OfParameterizedType.accept(TypeDescription.java:4998)\r\n\tat net.bytebuddy.implementation.attribute.MethodAttributeAppender$ForInstrumentedMethod.apply(MethodAttributeAppender.java:195)\r\n\tat net.bytebuddy.implementation.attribute.MethodAttributeAppender$Compound.apply(MethodAttributeAppender.java:490)\r\n\tat net.bytebuddy.dynamic.scaffold.TypeWriter$MethodPool$Record$ForDefinedMethod$WithBody.applyBody(TypeWriter.java:612)\r\n\tat net.bytebuddy.dynamic.scaffold.TypeWriter$MethodPool$Record$ForDefinedMethod.apply(TypeWriter.java:533)\r\n\tat net.bytebuddy.dynamic.scaffold.TypeWriter$Default$ForCreation.create(TypeWriter.java:3910)\r\n\tat net.bytebuddy.dynamic.scaffold.TypeWriter$Default.make(TypeWriter.java:1693)\r\n\tat net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:172)\r\n\tat net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:153)\r\n\tat net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase.make(DynamicType.java:2568)\r\n\tat net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase$Delegator.make(DynamicType.java:2670)\r\n\tat org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(SubclassBytecodeGenerator.java:84)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$CachedBytecodeGenerator.getOrGenerateMockClass(TypeCachingBytecodeGenerator.java:91)\r\n\tat org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:38)\r\n\tat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMockType(SubclassByteBuddyMockMaker.java:68)\r\n\tat org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMock(SubclassByteBuddyMockMaker.java:39)\r\n\tat org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(ByteBuddyMockMaker.java:26)\r\n\tat org.mockito.internal.util.MockUtil.createMock(MockUtil.java:35)\r\n\tat org.mockito.internal.MockitoCore.mock(MockitoCore.java:63)\r\n\tat org.mockito.Mockito.mock(Mockito.java:1637)\r\n\tat org.mockito.internal.configuration.MockAnnotationProcessor.process(MockAnnotationProcessor.java:33)\r\n\tat org.mockito.internal.configuration.MockAnnotationProcessor.process(MockAnnotationProcessor.java:16)\r\n\tat org.mockito.internal.configuration.DefaultAnnotationEngine.createMockFor(DefaultAnnotationEngine.java:39)\r\n\tat org.mockito.internal.configuration.DefaultAnnotationEngine.process(DefaultAnnotationEngine.java:63)\r\n\tat org.mockito.internal.configuration.InjectingAnnotationEngine.processIndependentAnnotations(InjectingAnnotationEngine.java:59)\r\n\tat org.mockito.internal.configuration.InjectingAnnotationEngine.process(InjectingAnnotationEngine.java:43)\r\n\tat org.mockito.MockitoAnnotations.initMocks(MockitoAnnotations.java:67)\r\n\t... 19 more\r\n```\r\n", "url": "https://github.com/mockito/mockito/issues/801", "user": "grimsa", "labels": ["bug", "wontfix"], "created": "2016-12-06 08:18:25", "closed": "2016-12-06 16:13:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Deep stubbing and UnnecessaryStubbingException", "body": "Mocks that return deep stubs sometimes cause UnnecessaryStubbingExceptions to be thrown, when I don't think that they should. Here's a small self-contained example.\r\n\r\n```\r\npackage some.package;\r\n\r\nimport org.jboss.netty.channel.ChannelFuture;\r\nimport org.junit.Test;\r\nimport org.junit.runner.RunWith;\r\nimport org.mockito.Answers;\r\nimport org.mockito.Mock;\r\nimport org.mockito.runners.MockitoJUnitRunner;\r\n\r\n@RunWith(MockitoJUnitRunner.class)\r\npublic class MockitoDeepStubsTest {\r\n\r\n    private final ClassUnderTest classUnderTest = new ClassUnderTest();\r\n\r\n    @Mock(answer = Answers.RETURNS_DEEP_STUBS) private ChannelFuture mockChannelFuture;\r\n\r\n    @Test\r\n    public void shouldAllowDeepStubsUnnecessaryStubbing() {\r\n        classUnderTest.methodUnderTest(mockChannelFuture);\r\n    }\r\n\r\n    public static class ClassUnderTest {\r\n\r\n        public void methodUnderTest(ChannelFuture future) {\r\n            future.getChannel().close();\r\n        }\r\n\r\n    }\r\n}\r\n```\r\nRunning this test prints the following output:\r\n```\r\norg.mockito.exceptions.misusing.UnnecessaryStubbingException: \r\nUnnecessary stubbings detected in test class: MockitoDeepStubsTest\r\nClean & maintainable test code requires zero unnecessary code.\r\nFollowing stubbings are unnecessary (click to navigate to relevant line of code):\r\n  1. -> at some.package.MockitoDeepStubsTest$ClassUnderTest.methodUnderTest(MockitoDeepStubsTest.java:25)\r\nPlease remove unnecessary stubbings. More info: javadoc for UnnecessaryStubbingException class.\r\n\r\n\tat org.mockito.internal.exceptions.Reporter.formatUnncessaryStubbingException(Reporter.java:838)\r\n\tat org.mockito.internal.junit.UnnecessaryStubbingsReporter.validateUnusedStubs(UnnecessaryStubbingsReporter.java:30)\r\n\tat org.mockito.internal.runners.StrictRunner.run(StrictRunner.java:45)\r\n\tat org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:104)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:262)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:84)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\r\n```\r\n\r\nVersions: Mockito 2.2.8\r\nJDK: OpenJDK 1.8.0_111\r\nOS: CentOS 7\r\nNetty: 3.10.6.Final\r\n\r\nI know that I can suppress the error with the Silent runner, but I like the unnecessary stubbing checking and don't really want to disable it. For now, we're working around it, but this doesn't seem like correct behaviour.", "url": "https://github.com/mockito/mockito/issues/756", "user": "bschelberg", "labels": ["bug"], "created": "2016-11-14 22:01:19", "closed": "2016-12-02 13:40:36", "commits": {}, "ttf": 17.00027777777778, "commitsDetails": []}, {"title": "The mechanism to provide MockitoConfiguration is not compatible with java 9 jigsaw", "body": "Error on mockito 2.2.9\r\n\r\nIf your module is a test module it cannot export a package that is already exported by another package,\r\n\r\nit is not possible to create the `org.mockito.configuration.MockitoConfiguration` inside a jigsaw module\r\n\r\n```\r\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-compiler-plugin:3.6.0:testCompile (default-testCompile) on project sfm-datastax: Compilation failure: Compilation failure:\r\n[ERROR] /home/aroger/dev/github/SimpleFlatMapper/sfm-datastax/src/test/java/org/mockito/configuration/MockitoConfiguration.java:[1] error: package exists in another module: mockito.core\r\n[ERROR] /home/aroger/dev/github/SimpleFlatMapper/sfm-datastax/src/test/java/org/mockito/configuration/MockitoConfiguration.java:[3,42] error: cannot find symbol\r\n[ERROR] symbol: class DefaultMockitoConfiguration\r\n[ERROR] /home/aroger/dev/github/SimpleFlatMapper/sfm-datastax/src/test/java/org/mockito/configuration/MockitoConfiguration.java:[4,4] error: method does not override or implement a method from a supertype\r\n```", "url": "https://github.com/mockito/mockito/issues/732", "user": "arnaudroger", "labels": ["bug", "java-9"], "created": "2016-11-03 12:04:27", "closed": "2016-11-12 14:18:44", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "Handle type inference change in JDK 8 (most specific overload method chosen by the compiler)", "body": "#635 introduced improved matching for varargs. However, this failed on master since our sourceTarget is Java 8, while `release/2.x` has sourceTarget 6.\n\nIt seems that the type matching incorrectly matches  on `String` which should be `Object`, in the corresponding `VarArgTest`. https://github.com/mockito/mockito/commit/c42f86bb476133baec93502f0238476091275b76 fixed these compilation failures, but we should fix this to not require a generic type in the method call.\n", "url": "https://github.com/mockito/mockito/issues/717", "user": "TimvdLippe", "labels": ["bug", "docs", "java-8", "wontfix"], "created": "2016-10-27 10:44:10", "closed": "2017-01-11 10:31:45", "commits": {"a6198d55ee89052873905e32ff8a2bf5c1a1099b": {"commitGHEventType": "referenced", "commitUser": "bric3"}}, "ttf": 75.00027777777778, "commitsDetails": [{"commitHash": "a6198d55ee89052873905e32ff8a2bf5c1a1099b", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["de7ba2077f44bae5c285fb16d11960cf9758be6f"], "nameRev": "a6198d55ee89052873905e32ff8a2bf5c1a1099b tags/v2.3.4~2", "commitMessage": "Document #717 with specific code that will only execute if the class has been compiled with specific version of Java.\n\nSigned-off-by: Brice Dutheil <brice.dutheil@gmail.com>\n", "commitDateTime": "2016-12-14 16:49:23", "authoredDateTime": "2016-12-14 16:49:23", "commitGitStats": [{"filePath": "src/test/java/org/mockitousage/jls/JLS_15_12_2_5Test.java", "insertions": 240, "deletions": 0, "lines": 240}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JLS_15_12_2_5Test.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.jls.JLS_15_12_2_5Test", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a6198d55ee89052873905e32ff8a2bf5c1a1099b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Improve usability of arity Answers with regards to checked exceptions", "body": "Recently introduced Answer1 style answers don't declare Throwable. They should! Otherwise the user is forced to add boilerplate code to AnswerX implementations, whenever they use methods that declare checked exceptions. Plus, AnswerX should behave exactly as good old Answer interface!\n\nReported via the [mailing-list](https://groups.google.com/d/msgid/mockito/82d08ba9-5536-495e-90db-78c1062b6400%40googlegroups.com)\n", "url": "https://github.com/mockito/mockito/issues/707", "user": "bric3", "labels": ["bug"], "created": "2016-10-21 22:28:34", "closed": "2016-10-24 10:59:15", "commits": {"cda47c1637358eab6186c0c5bcfe3b731057969b": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "5d74ab11bc7358b195429e275c9fe8f29fb55ffe": {"commitGHEventType": "referenced", "commitUser": "TimvdLippe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "cda47c1637358eab6186c0c5bcfe3b731057969b", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "5d74ab11bc7358b195429e275c9fe8f29fb55ffe", "commitGHEventType": "referenced", "commitUser": "TimvdLippe", "commitParents": ["f9f6d21974d530030ea731f21ad2da016ce14ada"], "nameRev": "5d74ab11bc7358b195429e275c9fe8f29fb55ffe tags/v2.2.8~1", "commitMessage": "Fixes #707, adds throwable to arity answers, also improved javadoc (#711)\n\n", "commitDateTime": "2016-10-24 12:59:15", "authoredDateTime": "2016-10-24 12:59:15", "commitGitStats": [{"filePath": "src/main/java/org/mockito/stubbing/Answer1.java", "insertions": 27, "deletions": 4, "lines": 31}, {"filePath": "src/main/java/org/mockito/stubbing/Answer2.java", "insertions": 29, "deletions": 5, "lines": 34}, {"filePath": "src/main/java/org/mockito/stubbing/Answer3.java", "insertions": 32, "deletions": 6, "lines": 38}, {"filePath": "src/main/java/org/mockito/stubbing/Answer4.java", "insertions": 34, "deletions": 7, "lines": 41}, {"filePath": "src/main/java/org/mockito/stubbing/Answer5.java", "insertions": 35, "deletions": 8, "lines": 43}, {"filePath": "src/main/java/org/mockito/stubbing/VoidAnswer1.java", "insertions": 25, "deletions": 4, "lines": 29}, {"filePath": "src/main/java/org/mockito/stubbing/VoidAnswer2.java", "insertions": 27, "deletions": 5, "lines": 32}, {"filePath": "src/main/java/org/mockito/stubbing/VoidAnswer3.java", "insertions": 29, "deletions": 6, "lines": 35}, {"filePath": "src/main/java/org/mockito/stubbing/VoidAnswer4.java", "insertions": 32, "deletions": 7, "lines": 39}, {"filePath": "src/main/java/org/mockito/stubbing/VoidAnswer5.java", "insertions": 34, "deletions": 8, "lines": 42}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Answer1.java", "spoonMethods": [{"spoonMethodName": "org.mockito.stubbing", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.stubbing.answer(java.lang.Object)", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Answer2.java", "spoonMethods": [{"spoonMethodName": "org.mockito.stubbing", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.stubbing.answer(java.lang.Object,java.lang.Object)", "TOT": 5, "UPD": 4, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Answer3.java", "spoonMethods": [{"spoonMethodName": "org.mockito.stubbing", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.stubbing.answer(java.lang.Object,java.lang.Object,java.lang.Object)", "TOT": 7, "UPD": 6, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Answer4.java", "spoonMethods": [{"spoonMethodName": "org.mockito.stubbing", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.stubbing.answer(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)", "TOT": 9, "UPD": 8, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Answer5.java", "spoonMethods": [{"spoonMethodName": "org.mockito.stubbing", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.stubbing.answer(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)", "TOT": 11, "UPD": 10, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "VoidAnswer1.java", "spoonMethods": [{"spoonMethodName": "org.mockito.stubbing", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.stubbing.answer(java.lang.Object)", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "VoidAnswer2.java", "spoonMethods": [{"spoonMethodName": "org.mockito.stubbing", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.stubbing.answer(java.lang.Object,java.lang.Object)", "TOT": 5, "UPD": 4, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "VoidAnswer3.java", "spoonMethods": [{"spoonMethodName": "org.mockito.stubbing", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.stubbing.answer(java.lang.Object,java.lang.Object,java.lang.Object)", "TOT": 7, "UPD": 6, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "VoidAnswer4.java", "spoonMethods": [{"spoonMethodName": "org.mockito.stubbing", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.stubbing.answer(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)", "TOT": 9, "UPD": 8, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "VoidAnswer5.java", "spoonMethods": [{"spoonMethodName": "org.mockito.stubbing", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.stubbing.answer(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)", "TOT": 11, "UPD": 10, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Mockito 2 cannot mock kohsuke/github-api classes", "body": "A user (Adam) on the [mailing list](https://groups.google.com/d/msgid/mockito/4cbdcec2-19d6-4757-b135-2cf515ed785f%40googlegroups.com) wasn't sure if he misused mockito. So he reached us via the mailing-list.\n\n> Hi guys, a super simple test that creates a new mock of a public non-final class `org.kohsuke.github.GHIssue` from https://github.com/kohsuke/github-api version 1.77, source https://github.com/kohsuke/github-api/blob/github-api-1.77/src/main/java/org/kohsuke/github/GHIssue.java fails with:\n\n```\nmock(GHIssue.class);\n```\n\n> ```\n> org.mockito.exceptions.base.MockitoException: \n> Mockito cannot mock this class: class org.kohsuke.github.GHIssue.\n> \n> Mockito can only non-private & non-final classes.\n> If you're not sure why you're getting this error, please report to the mailing list.\n> \n> Java               : 1.8\n> JVM vendor name    : Oracle Corporation\n> JVM vendor version : 25.101-b13\n> JVM name           : Java HotSpot(TM) 64-Bit Server VM\n> JVM version        : 1.8.0_101-b13\n> JVM info           : mixed mode\n> OS name            : Mac OS X\n> OS version         : 10.11.6\n> \n> \n> Underlying exception : java.lang.IllegalArgumentException: Cannot cast to primitive type: void\n> \n>     at com.siemion.mockito.AppTest.test(AppTest.java:12)\n>     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n>     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n>     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n>     at java.lang.reflect.Method.invoke(Method.java:498)\n>     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n>     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n>     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n>     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n>     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n>     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n>     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n>     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n>     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n>     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n>     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n>     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n>     at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n>     at org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n>     at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n>     at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)\n>     at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)\n>     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n>     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n>     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n>     at java.lang.reflect.Method.invoke(Method.java:498)\n>     at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\n> Caused by: java.lang.IllegalArgumentException: Cannot cast to primitive type: void\n>     at net.bytebuddy.implementation.bytecode.assign.TypeCasting.to(TypeCasting.java:39)\n>     at net.bytebuddy.dynamic.scaffold.TypeWriter$MethodPool$Record$AccessBridgeWrapper.apply(TypeWriter.java:1100)\n>     at net.bytebuddy.dynamic.scaffold.TypeWriter$Default$ForCreation.create(TypeWriter.java:3802)\n>     at net.bytebuddy.dynamic.scaffold.TypeWriter$Default.make(TypeWriter.java:1618)\n>     at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:172)\n>     at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:153)\n>     at net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase.make(DynamicType.java:2568)\n>     at net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase$Delegator.make(DynamicType.java:2670)\n>     at org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(SubclassBytecodeGenerator.java:80)\n>     at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$CachedBytecodeGenerator.getOrGenerateMockClass(TypeCachingBytecodeGenerator.java:87)\n>     at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:34)\n>     at org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMockType(SubclassByteBuddyMockMaker.java:64)\n>     at org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMock(SubclassByteBuddyMockMaker.java:35)\n>     at org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(ByteBuddyMockMaker.java:22)\n>     at org.mockito.internal.util.MockUtil.createMock(MockUtil.java:35)\n>     at org.mockito.internal.MockitoCore.mock(MockitoCore.java:63)\n>     at org.mockito.Mockito.mock(Mockito.java:1629)\n>     at org.mockito.Mockito.mock(Mockito.java:1542)\n>     ... 27 more\n> ```\n\nOr\n\n```\nmock(GHRepository.class);\n```\n\n> ```\n> java.lang.VerifyError: Bad type on operand stack\n> Exception Details:\n>   Location:\n>     org/kohsuke/github/GHRepository$MockitoMock$667330966.getId()Ljava/lang/String; @4: checkcast\n>   Reason:\n>     Type integer (current frame, stack[0]) is not assignable to 'java/lang/Object'\n>   Current Frame:\n>     bci: @4\n>     flags: { }\n>     locals: { 'org/kohsuke/github/GHRepository$MockitoMock$667330966' }\n>     stack: { integer }\n>   Bytecode:\n>     0x0000000: 2ab6 003d c000 2eb0                    \n> \n> \n>     at sun.reflect.GeneratedSerializationConstructorAccessor1.newInstance(Unknown Source)\n>     at java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n>     at org.objenesis.instantiator.sun.SunReflectionFactoryInstantiator.newInstance(SunReflectionFactoryInstantiator.java:45)\n>     at org.objenesis.ObjenesisBase.newInstance(ObjenesisBase.java:73)\n>     at org.mockito.internal.creation.instance.ObjenesisInstantiator.newInstance(ObjenesisInstantiator.java:14)\n> ```\n\nRelated classes declaration\n\n```\n    <dependency>\n      <groupId>org.kohsuke</groupId>\n      <artifactId>github-api</artifactId>\n      <version>1.77</version>\n    </dependency>\n```\n\n---\n\nAfter investigation on the project created by Adam Siemon [here](https://github.com/adamsiemion/mockito-bug). I\u2019ve reproduced the issue you are seeing with mockito 2.2.3 (bb 1.4.26) and 2.2.5 (bb 1.4.33), regardless of the JDK version. It seems related to how [kohsuke/github-api](https://github.com/kohsuke/github-api) generates bridge method in the byte code for backward compatibility ; this seems highly unusual, it may produce valid bytecode but with _unmet_ bytecode patterns for mockito / bytebuddy.\nFor reference the tool is called [bridge-method-injector](https://github.com/infradna/bridge-method-injector), more on the [website](http://bridge-method-injector.infradna.com/)\n\nThe classes you are mentioning are modified by this tool :\n- [`GHIssues`](https://github.com/kohsuke/github-api/blob/github-api-1.77/src/main/java/org/kohsuke/github/GHIssue.java#L151-L154) annotated by `@WithBridgeMethods(void.class)`\n- `GHRepository` that inherits [`GHObject`](https://github.com/kohsuke/github-api/blob/github-api-1.77/src/main/java/org/kohsuke/github/GHObject.java#L66-L69) which also annotated by `@WithBridgeMethods(value=String.class, adapterMethod=\"intToString\")`\n\nIt works with 1.10.19 because CGLIB is far less intelligent regarding bridge methods.\n", "url": "https://github.com/mockito/mockito/issues/701", "user": "bric3", "labels": ["bug"], "created": "2016-10-18 17:19:50", "closed": "2016-10-25 20:08:52", "commits": {"1aedbf7766a8ae686aa7104fc24de922d767ce78": {"commitGHEventType": "closed", "commitUser": "raphw"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "1aedbf7766a8ae686aa7104fc24de922d767ce78", "commitGHEventType": "closed", "commitUser": "raphw", "commitParents": ["3cb96bf0904b4b30713eb7fe733371f7f80bce5e"], "nameRev": "1aedbf7766a8ae686aa7104fc24de922d767ce78 tags/v2.2.9~1", "commitMessage": "Updated Byte Buddy to version 1.5.0:\n\n- Fixes #701\n- Suppresses type annotations on old Java 8 releases rather than failing the instrumentation.\n", "commitDateTime": "2016-10-25 22:08:44", "authoredDateTime": "2016-10-25 22:08:44", "commitGitStats": [{"filePath": "build.gradle", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1aedbf7766a8ae686aa7104fc24de922d767ce78"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": [""]}, {"title": "Fails to create mock of inner class hierarchy with type variable from outer class", "body": "Reported on the mailing-list [here](https://groups.google.com/d/msg/mockito/KkErqUKB8PQ/LanMehSpAQAJ) by Thang\n\nThis bug exists in Mockito 2.1.0 and does not exists in 1.10.19. The issue seems related to how ByteBuddy gather type variables.\n\nHere's how to I reproduced the issue : \n\n``` java\npublic abstract class AbstractOuter<InputT, OutputT> {\n    public abstract class AbstractInnerParent {\n        public abstract InputT input();\n        public abstract void output(OutputT output);\n    }\n\n    public abstract class AbstractInnerParentChild extends AbstractInnerParent { }\n}\n```\n\n``` java\n@Test\npublic void should_not_fail_creating_mock_of_inner_class_with_type_variable_of_outer() {\n    mock(AbstractOuter.AbstractInnerParentChild.class,\n         withSettings().outerInstance(AbstractOuter.class));\n}\n```\n\nThis code produces the following stacktraces, VM is irrelevant here.\n\n```\norg.mockito.exceptions.base.MockitoException: \nMockito cannot mock this class: class AbstractOuter$AbstractInnerParentChild.\n\nMockito can only non-private & non-final classes.\nIf you're not sure why you're getting this error, please report to the mailing list.\n\n\nJava               : 1.8\nJVM vendor name    : Azul Systems, Inc.\nJVM vendor version : 25.102-b14\nJVM name           : OpenJDK 64-Bit Server VM\nJVM version        : 1.8.0_102-b14\nJVM info           : mixed mode\nOS name            : Mac OS X\nOS version         : 10.11.6\n\n\nUnderlying exception : java.lang.IllegalStateException: Unknown type variable: OutputT\n\n    at BugTest.should_not_fail_creating_mock_of_inner_class_with_type_variable_of_outer(BugTest.java:16)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n    at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\nCaused by: java.lang.IllegalStateException: Unknown type variable: OutputT\n    at net.bytebuddy.description.type.TypeDescription$Generic$Visitor$Substitutor$ForTypeVariableBinding$TypeVariableSubstitutor.onType(TypeDescription.java:2183)\n    at net.bytebuddy.description.type.TypeDescription$Generic$Visitor$Substitutor$ForTypeVariableBinding$TypeVariableSubstitutor.onType(TypeDescription.java:2163)\n    at net.bytebuddy.description.type.TypeDescription$AbstractBase.accept(TypeDescription.java:7221)\n    at net.bytebuddy.description.type.TypeDescription$Generic$Visitor$Substitutor$ForTypeVariableBinding.onTypeVariable(TypeDescription.java:2136)\n    at net.bytebuddy.description.type.TypeDescription$Generic$Visitor$Substitutor$ForTypeVariableBinding.onTypeVariable(TypeDescription.java:2095)\n    at net.bytebuddy.description.type.TypeDescription$Generic$OfTypeVariable.accept(TypeDescription.java:5416)\n    at net.bytebuddy.description.type.TypeDescription$Generic$LazyProjection.accept(TypeDescription.java:5857)\n    at net.bytebuddy.description.method.ParameterDescription$TypeSubstituting.getType(ParameterDescription.java:858)\n    at net.bytebuddy.description.method.ParameterList$AbstractBase.asTypeList(ParameterList.java:86)\n    at net.bytebuddy.description.method.MethodDescription$AbstractBase.asTypeToken(MethodDescription.java:675)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$Default$Key$Harmonized.of(MethodGraph.java:862)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$Default$Key$Store.registerTopLevel(MethodGraph.java:1059)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$Default.doAnalyze(MethodGraph.java:569)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$Default.analyze(MethodGraph.java:529)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$Default.analyzeNullable(MethodGraph.java:548)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$Default.doAnalyze(MethodGraph.java:562)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$Default.analyze(MethodGraph.java:529)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$Default.analyzeNullable(MethodGraph.java:548)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$Default.doAnalyze(MethodGraph.java:562)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$Default.compile(MethodGraph.java:502)\n    at net.bytebuddy.dynamic.scaffold.MethodGraph$Compiler$AbstractBase.compile(MethodGraph.java:423)\n    at net.bytebuddy.dynamic.scaffold.MethodRegistry$Default.prepare(MethodRegistry.java:478)\n    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:160)\n    at net.bytebuddy.dynamic.scaffold.subclass.SubclassDynamicTypeBuilder.make(SubclassDynamicTypeBuilder.java:153)\n    at net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase.make(DynamicType.java:2568)\n    at net.bytebuddy.dynamic.DynamicType$Builder$AbstractBase$Delegator.make(DynamicType.java:2670)\n    at org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(SubclassBytecodeGenerator.java:80)\n    at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator$CachedBytecodeGenerator.getOrGenerateMockClass(TypeCachingBytecodeGenerator.java:87)\n    at org.mockito.internal.creation.bytebuddy.TypeCachingBytecodeGenerator.mockClass(TypeCachingBytecodeGenerator.java:34)\n    at org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMockType(SubclassByteBuddyMockMaker.java:64)\n    at org.mockito.internal.creation.bytebuddy.SubclassByteBuddyMockMaker.createMock(SubclassByteBuddyMockMaker.java:35)\n    at org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(ByteBuddyMockMaker.java:22)\n    at org.mockito.internal.util.MockUtil.createMock(MockUtil.java:35)\n    at org.mockito.internal.MockitoCore.mock(MockitoCore.java:63)\n    at org.mockito.Mockito.mock(Mockito.java:1620)\n    ... 28 more\n```\n\n---\n\nOriginal issue with Google Dataflow SDK\n\n``` xml\n<dependency>\n  <groupId>com.google.cloud.dataflow</groupId>\n  <artifactId>google-cloud-dataflow-java-sdk-all</artifactId> \n  <version>1.8.0</version> \n</dependency> \n```\n\nMocked classe : [`DoFn.ProcessContext`](https://github.com/GoogleCloudPlatform/DataflowJavaSDK/blob/v1.8.0/sdk/src/main/java/com/google/cloud/dataflow/sdk/transforms/DoFn.java)\n\n``` java\nDoFn<String, ETEvent>.ProcessContext mockContext = \n    mock(DoFn.ProcessContext.class, withSettings().stubOnly().outerInstance(DoFn.class));\n```\n\n```\norg.mockito.exceptions.base.MockitoException: \nMockito cannot mock this class: class com.google.cloud.dataflow.sdk.transforms.DoFn$ProcessContext.\n\nMockito can only non-private & non-final classes.\nIf you're not sure why you're getting this error, please report to the mailing list.\n\n\nJava               : 1.8\nJVM vendor name    : Oracle Corporation\nJVM vendor version : 25.91-b14\nJVM name           : Java HotSpot(TM) 64-Bit Server VM\nJVM version        : 1.8.0_91-b14\nJVM info           : mixed mode\nOS name            : Mac OS X\nOS version         : 10.11.6\n\n\nUnderlying exception : java.lang.IllegalStateException: Unknown type variable: OutputT\n```\n", "url": "https://github.com/mockito/mockito/issues/699", "user": "bric3", "labels": ["bug"], "created": "2016-10-17 09:06:29", "closed": "2016-10-17 15:30:45", "commits": {"80454145c6fa1449719bea5ac1f19e29462d9570": {"commitGHEventType": "closed", "commitUser": "raphw"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "80454145c6fa1449719bea5ac1f19e29462d9570", "commitGHEventType": "closed", "commitUser": "raphw", "commitParents": ["a002a673de13d0f28a7451efc535a6cf344d4498"], "nameRev": "80454145c6fa1449719bea5ac1f19e29462d9570 tags/v2.2.4~1", "commitMessage": "Updated Byte Buddy to latest version (fixes #699). Attempt to read class file from class loader for parameter retention (fixes #695).\n", "commitDateTime": "2016-10-17 17:32:29", "authoredDateTime": "2016-10-17 17:32:29", "commitGitStats": [{"filePath": "build.gradle", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java", "insertions": 4, "deletions": 1, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InlineBytecodeGenerator.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.transform(java.lang.ClassLoader,java.lang.String,java.lang.Class,java.security.ProtectionDomain,byte[])", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Enabled mocking interface clone method", "body": "Mocking a `clone()` method on an interface appears to no longer be working with **Mockito 2.1.0**. The below code works fine with **Mockito 1.10.19** but throws an `IllegalAccessError` with **Mockito 2.1.0**:\n\n```\npublic interface CloneableInterface extends Cloneable {\n   CloneableInterface clone();\n}\n\npublic class CloneableInterfaceTest {\n\n   @Test\n   public void test() {      \n      CloneableInterface i = Mockito.mock(CloneableInterface.class);\n      Mockito.when(i.clone()).thenReturn(i); // Throws IllegalAccessError\n   }\n}\n```\n\nResult of running above test:\n\n```\njava.lang.IllegalAccessError: CloneableInterface$MockitoMock$833899610.clone()LCloneableInterface;\n```\n\nEnvironment: **JDK 1.8.0_102, JUnit 4.11, Mockito 2.1.0, Gradle 3.0, Windows 10**\n\nEDIT: Link to [SO post](http://stackoverflow.com/questions/39967723/mocking-interface-clone-method)\n", "url": "https://github.com/mockito/mockito/issues/688", "user": "jpenglert", "labels": ["bug"], "created": "2016-10-11 14:48:16", "closed": "2016-10-11 18:12:25", "commits": {"0938ff432f81ff038d2f0469a3d56fc31dce6aaf": {"commitGHEventType": "referenced", "commitUser": "raphw"}, "a9e1e7f1ebad912e6ce8a5ae6b6d8ac3bc9c8e29": {"commitGHEventType": "referenced", "commitUser": "TimvdLippe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "0938ff432f81ff038d2f0469a3d56fc31dce6aaf", "commitGHEventType": "referenced", "commitUser": "raphw", "commitParents": ["af7df6105951fe8bf6e86125bfff3dc48d8f81b3"], "nameRev": "0938ff432f81ff038d2f0469a3d56fc31dce6aaf tags/v2.2.1~1", "commitMessage": "Mock methods should always be public, fixes #688.\n", "commitDateTime": "2016-10-11 17:23:33", "authoredDateTime": "2016-10-11 17:23:33", "commitGitStats": [{"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SubclassBytecodeGenerator.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(org.mockito.internal.creation.bytebuddy.MockFeatures)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "a9e1e7f1ebad912e6ce8a5ae6b6d8ac3bc9c8e29", "commitGHEventType": "referenced", "commitUser": "TimvdLippe", "commitParents": ["0fe2644767b4526e4db961b511f9c59c34158e6c"], "nameRev": "a9e1e7f1ebad912e6ce8a5ae6b6d8ac3bc9c8e29 tags/v2.7.20~2", "commitMessage": "Verifies #688: Acceptance test to prevent future regression (#972)\n\n", "commitDateTime": "2017-03-29 00:46:10", "authoredDateTime": "2017-03-28 15:46:10", "commitGitStats": [{"filePath": "src/test/java/org/mockitousage/bugs/EnabledMockingInterfaceCloneMethodTest.java", "insertions": 20, "deletions": 0, "lines": 20}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EnabledMockingInterfaceCloneMethodTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.EnabledMockingInterfaceCloneMethodTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0938ff432f81ff038d2f0469a3d56fc31dce6aaf"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/mockito/internal/creation/bytebuddy"], "changesInPackagesSPOON": ["org.mockito.internal.creation.bytebuddy.SubclassBytecodeGenerator.mockClass(org.mockito.internal.creation.bytebuddy.MockFeatures)"]}, {"title": "SKIP_RELEASE=true must override custom released version", "body": "When releasing with a commit message containing `[ci-release]`, SKIP_RELEASE has a higher priority. E.g. on multiple jobs, only 1 should succeed.\n", "url": "https://github.com/mockito/mockito/issues/668", "user": "TimvdLippe", "labels": ["bug", "continuous integration"], "created": "2016-10-03 12:34:50", "closed": "2017-11-04 15:26:49", "commits": {}, "ttf": 397.0002777777778, "commitsDetails": []}, {"title": "Remove 2.2.0-beta.1 from bintray", "body": "https://bintray.com/szczepiq/maven/mockito/2.2.0-beta.1# was incorrectly generated by the delivery drone and must be removed asap from Bintray. Within 24 hours this is still possible, see https://bintray.com/docs/usermanual/uploads/uploads_deletingcontent.html\n\nOnly @szczepiq can do this because it is his account and not the Mockito organization.\n", "url": "https://github.com/mockito/mockito/issues/667", "user": "TimvdLippe", "labels": ["bug", "continuous integration"], "created": "2016-10-03 12:24:49", "closed": "2016-10-03 14:03:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "publish.gradle is unaware of commit message version", "body": "I just tried to release a custom version with the command line, but this failed because the publish task does not honor the commit message version.\n\nhttps://github.com/mockito/mockito/blob/master/gradle/publish.gradle#L9 should be changed roughly to https://github.com/mockito/mockito/blob/master/gradle/release.gradle#L114-L115\n", "url": "https://github.com/mockito/mockito/issues/666", "user": "TimvdLippe", "labels": ["bug", "continuous integration"], "created": "2016-10-03 12:21:32", "closed": "2017-11-04 15:26:23", "commits": {}, "ttf": 397.0002777777778, "commitsDetails": []}, {"title": "ArgumentCaptor: NPE when an null array is passed to a varargs method", "body": "A NullPointerException is thrown if an null array is passed to a varargs method.\n\n```\n@Test\npublic void shouldCaptureVarArgs_nullArrayArg() {\n        String[] argArray = null;\n        mock.varargs(argArray);\n\n        verify(mock).varargs(captor.capture()); //<- Kaboom NPE\n}\n```\n\nSince an vararg is simply an array the ArgumentCaptor should reject it silently. This relates to #565.\n\n```\njava.lang.NullPointerException\n    at java.lang.reflect.Array.getLength(Native Method)\n    at org.mockito.internal.invocation.InvocationMatcher.captureVarargsPart(InvocationMatcher.java:142)\n    at org.mockito.internal.invocation.InvocationMatcher.captureArgumentsFrom(InvocationMatcher.java:122)\n    at org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:24)\n    at org.mockito.internal.invocation.InvocationMarker.markVerified(InvocationMarker.java:18)\n    at org.mockito.internal.verification.checkers.NumberOfInvocationsChecker.check(NumberOfInvocationsChecker.java:43)\n    at org.mockito.internal.verification.Times.verify(Times.java:40)\n    at org.mockito.internal.verification.MockAwareVerificationMode.verify(MockAwareVerificationMode.java:21)\n    at org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:73)\n    at org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:32)\n    at org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:37)\n    at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:36)\n    at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.access$0(MockMethodInterceptor.java:32)\n    at org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$DispatcherDefaultingToRealMethod.interceptAbstract(MockMethodInterceptor.java:113)\n    at org.mockitousage.IMethods$MockitoMock$81506210.varargs(Unknown Source)\n    at org.mockitousage.matchers.VarargsTest.shouldCaptureVarArgs_nullArrayArg(VarargsTest.java:182)\n```\n", "url": "https://github.com/mockito/mockito/issues/583", "user": "ChristianSchwarz", "labels": ["bug"], "created": "2016-08-23 11:26:41", "closed": "2016-10-17 16:29:52", "commits": {}, "ttf": 55.000277777777775, "commitsDetails": []}, {"title": "Mockito.when() fails when method could originate from superclass or interface ", "body": "I was testing/rebuilding a project with the latest mockito 2.0-beta when I noticed a couple of tests had started failing. Looked into why and was able to reduce the issue to [a reproducible test case](https://github.com/hansjoachim/mockito/blob/confusedSignature/src/test/java/org/mockito/ConfusedSignatureTest.java). \n\nIt looks like the problem is somehow caused by the method signature for `getFoo()`. The subclass gets this method from two places, the superclass with generic return type and from the interface with a concrete one, and this seems to be confusing Mockito. \n\nThe test works with 1.10.19, but fails with 2.0.90-beta (/latest HEAD).\n\nPS. Feel free to replace the title with something more descriptive.\n", "url": "https://github.com/mockito/mockito/issues/508", "user": "hansjoachim", "labels": ["bug"], "created": "2016-07-26 18:14:39", "closed": "2016-07-28 01:55:12", "commits": {"c95d3af2791d4d513edbca74720e1a5e84930102": {"commitGHEventType": "closed", "commitUser": "raphw"}, "66f4c8d95704b7c8ee5465e6a1f069f8c4bf2fa9": {"commitGHEventType": "referenced", "commitUser": "raphw"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "c95d3af2791d4d513edbca74720e1a5e84930102", "commitGHEventType": "closed", "commitUser": "raphw", "commitParents": ["82fecd8b6bee81565eedbbf90753cac0b389caea"], "nameRev": "c95d3af2791d4d513edbca74720e1a5e84930102 tags/v2.0.91-beta~1", "commitMessage": "Updated Byte Buddy to version 1.4.16.\n\nFixes #508. Retains instrumented class's protection domain.\n", "commitDateTime": "2016-07-28 03:55:06", "authoredDateTime": "2016-07-28 03:55:06", "commitGitStats": [{"filePath": "build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MockBytecodeGenerator.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator.generateMockClass(org.mockito.internal.creation.bytebuddy.MockFeatures)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "66f4c8d95704b7c8ee5465e6a1f069f8c4bf2fa9", "commitGHEventType": "referenced", "commitUser": "raphw", "commitParents": ["c952a0460eb578025e6622a862d8f6499785cae7"], "nameRev": "66f4c8d95704b7c8ee5465e6a1f069f8c4bf2fa9 tags/v2.0.95-beta~3", "commitMessage": "Add regression test for #508 (#525)\n\n* Reduced testcase/example\r\n\r\n* The error message mentioned mocking methods on non-public parent classes wasn't\r\nsupported. Make everything public to rule it out.\r\n\r\n* Move test to mockitousage/bugs as suggested\r\n\r\n* Slightly more descriptive test name\r\n", "commitDateTime": "2016-07-31 20:12:58", "authoredDateTime": "2016-07-31 20:12:58", "commitGitStats": [{"filePath": "src/test/java/org/mockitousage/bugs/ConfusedSignatureTest.java", "insertions": 43, "deletions": 0, "lines": 43}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConfusedSignatureTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.ConfusedSignatureTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c95d3af2791d4d513edbca74720e1a5e84930102"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 2, "lines": 5, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/mockito/internal/creation/bytebuddy", ""], "changesInPackagesSPOON": ["org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator.generateMockClass(org.mockito.internal.creation.bytebuddy.MockFeatures)"]}, {"title": "Restore depecated Answers.get() method", "body": "Commit da5e750957b494e7fa0548bf1286d67b8b0386d5 removed the deprecated `Answers.get()` method, however the method was only deprecated in the 2.0 BETA line and never made it into a GA release. It would be helpful if the method could remain in the deprecated form in 2.0 to give people an opportunity to move away from it.\n\n(originally raise by a Spring Boot user [here](https://github.com/spring-projects/spring-boot/pull/6323))\n", "url": "https://github.com/mockito/mockito/issues/482", "user": "philwebb", "labels": ["bug"], "created": "2016-07-06 21:22:33", "closed": "2016-07-11 13:16:44", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Stubbing with some AdditionalMatchers can NPE with null actuals", "body": "``` java\nimport static org.hamcrest.MatcherAssert.assertThat;\nimport static org.hamcrest.Matchers.is;\nimport static org.mockito.AdditionalMatchers.leq;\nimport static org.mockito.Matchers.eq;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.when;\n\nimport org.junit.Test;\n\npublic class BlahTest\n{\n    @Test\n    public void test()\n    {\n        final BoolResult mockBoolResult = mock(BoolResult.class);\n\n        when(mockBoolResult.getResult(eq(5))).thenReturn(true);  // Succeeds as expected\n        when(mockBoolResult.getResult(leq(5))).thenReturn(true); // Fails with an NPE - as of v2.0.64 - unexpected!\n\n        assertThat(mockBoolResult.getResult(null), is(false));\n    }\n\n    interface BoolResult\n    {\n        boolean getResult(Integer value);\n    }\n}\n```\n", "url": "https://github.com/mockito/mockito/issues/457", "user": "kidnme", "labels": ["bug"], "created": "2016-06-23 17:38:12", "closed": "2016-07-05 14:56:00", "commits": {"118bed80d2dc42153ea3218a9698d65de073724a": {"commitGHEventType": "closed", "commitUser": "TimvdLippe"}}, "ttf": 11.000277777777777, "commitsDetails": [{"commitHash": "118bed80d2dc42153ea3218a9698d65de073724a", "commitGHEventType": "closed", "commitUser": "TimvdLippe", "commitParents": ["ac084d71b2d01f761d8bc556aead1ea0cb091dde"], "nameRev": "118bed80d2dc42153ea3218a9698d65de073724a tags/v2.0.80-beta~1", "commitMessage": "Squashed commit of the following:\n\ncommit 6e8a4779cedc046d1343c9067f5fd15fcbeee80a\nAuthor: Tim van der Lippe <tvanderlippe@gmail.com>\nDate:   Tue Jul 5 16:55:04 2016 +0200\n\n    Add two tests to verify subclass extension for generic type retrieval\n\ncommit e39c2bc66b4d76f8fe51ecfa62a02ce7e2223c2d\nAuthor: Christian Schwarz <chriss.dev@github>\nDate:   Fri Jul 1 22:16:24 2016 +0200\n\n    Fixes #457 added type compability checks to CompareTo and\n    ArgumentsComparator\n\n    Added tests to HashCodeAndEqualsSafeSetTest to satisfy codecov\n", "commitDateTime": "2016-07-05 16:55:43", "authoredDateTime": "2016-07-05 16:55:43", "commitGitStats": [{"filePath": "src/main/java/org/mockito/AdditionalMatchers.java", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "src/main/java/org/mockito/internal/invocation/ArgumentsComparator.java", "insertions": 64, "deletions": 13, "lines": 77}, {"filePath": "src/main/java/org/mockito/internal/matchers/CompareEqual.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/internal/matchers/CompareTo.java", "insertions": 17, "deletions": 9, "lines": 26}, {"filePath": "src/main/java/org/mockito/internal/matchers/GreaterOrEqual.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/internal/matchers/GreaterThan.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/internal/matchers/LessOrEqual.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/mockito/internal/matchers/LessThan.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/test/java/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java", "insertions": 81, "deletions": 16, "lines": 97}, {"filePath": "src/test/java/org/mockitousage/bugs/CompareMatcherTest.java", "insertions": 131, "deletions": 0, "lines": 131}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AdditionalMatchers.java", "spoonMethods": [{"spoonMethodName": "org.mockito.AdditionalMatchers.geq(java.lang.Comparable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.AdditionalMatchers.leq(java.lang.Comparable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.AdditionalMatchers.gt(java.lang.Comparable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.AdditionalMatchers.lt(java.lang.Comparable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.AdditionalMatchers.cmpEq(java.lang.Comparable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ArgumentsComparator.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.invocation.ArgumentsComparator.argumentsMatch(org.mockito.internal.invocation.InvocationMatcher,org.mockito.invocation.Invocation)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.invocation.ArgumentsComparator.matches(org.mockito.ArgumentMatcher,java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.invocation.ArgumentsComparator.isCompatible(org.mockito.ArgumentMatcher,java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.invocation.ArgumentsComparator.getArgumentType(org.mockito.ArgumentMatcher)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.invocation.ArgumentsComparator.isMatchesMethod(java.lang.reflect.Method)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.invocation.ArgumentsComparator.argumentsMatch(org.mockito.internal.invocation.InvocationMatcher,java.lang.Object[])", "TOT": 6, "UPD": 0, "INS": 4, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.invocation.ArgumentsComparator.varArgsMatch(org.mockito.internal.invocation.InvocationMatcher,org.mockito.invocation.Invocation)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CompareEqual.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.matchers.CompareEqual", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CompareTo.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.matchers.CompareTo", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.matchers.CompareTo.matches(java.lang.Comparable)", "TOT": 8, "UPD": 0, "INS": 6, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.matchers.CompareTo.toString()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "GreaterOrEqual.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.matchers.GreaterOrEqual", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "GreaterThan.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.matchers.GreaterThan", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "LessOrEqual.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.matchers.LessOrEqual", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "LessThan.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.matchers.LessThan", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "HashCodeAndEqualsSafeSetTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.toArray_just_work()", "TOT": 21, "UPD": 6, "INS": 3, "MOV": 8, "DEL": 4}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_add_mock_that_have_failing_hashCode_method()", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.mock_with_failing_hashCode_method_can_be_added()", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_remove()", "TOT": 4, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_add_a_collection()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_retain_a_collection()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_remove_a_collection()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.can_iterate()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.mock_with_failing_equals_method_can_be_used()", "TOT": 9, "UPD": 0, "INS": 4, "MOV": 2, "DEL": 3}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.cloneIsNotSupported()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.isEmptyAfterClear()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.isEqualToItself()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.isNotEqualToAnOtherTypeOfSetWithSameContent()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.isNotEqualWhenContentIsDifferent()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.hashCodeIsEqualIfContentIsEqual()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.toStringIsNotNullOrEmpty()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.collections.HashCodeAndEqualsSafeSetTest.removeByIterator()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CompareMatcherTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.CompareMatcherTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["118bed80d2dc42153ea3218a9698d65de073724a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 91, "deletions": 32, "lines": 123, "gitFilesChange": 8}, "spoonStatsSummary": {"TOT": 34, "UPD": 12, "INS": 17, "MOV": 3, "DEL": 2, "spoonFilesChanged": 8, "spoonMethodsChanged": 20}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/mockito", "src/main/java/org/mockito/internal/matchers", "src/main/java/org/mockito/internal/invocation"], "changesInPackagesSPOON": ["org.mockito.internal.invocation.ArgumentsComparator.getArgumentType(org.mockito.ArgumentMatcher)", "org.mockito.internal.matchers.GreaterOrEqual", "org.mockito.AdditionalMatchers.lt(java.lang.Comparable)", "org.mockito.internal.matchers.CompareTo.matches(java.lang.Comparable)", "org.mockito.internal.matchers.LessThan", "org.mockito.AdditionalMatchers.leq(java.lang.Comparable)", "org.mockito.internal.matchers.GreaterThan", "org.mockito.internal.matchers.CompareEqual", "org.mockito.internal.invocation.ArgumentsComparator.matches(org.mockito.ArgumentMatcher,java.lang.Object)", "org.mockito.internal.invocation.ArgumentsComparator.varArgsMatch(org.mockito.internal.invocation.InvocationMatcher,org.mockito.invocation.Invocation)", "org.mockito.AdditionalMatchers.gt(java.lang.Comparable)", "org.mockito.AdditionalMatchers.geq(java.lang.Comparable)", "org.mockito.internal.invocation.ArgumentsComparator.isCompatible(org.mockito.ArgumentMatcher,java.lang.Object)", "org.mockito.AdditionalMatchers.cmpEq(java.lang.Comparable)", "org.mockito.internal.matchers.LessOrEqual", "org.mockito.internal.matchers.CompareTo.toString()", "org.mockito.internal.invocation.ArgumentsComparator.isMatchesMethod(java.lang.reflect.Method)", "org.mockito.internal.invocation.ArgumentsComparator.argumentsMatch(org.mockito.internal.invocation.InvocationMatcher,java.lang.Object[])", "org.mockito.internal.matchers.CompareTo", "org.mockito.internal.invocation.ArgumentsComparator.argumentsMatch(org.mockito.internal.invocation.InvocationMatcher,org.mockito.invocation.Invocation)"]}, {"title": "Can't click \"release notes\" link from mockito.org", "body": "The \"release notes\" link on mockito.org that links to GitHub fails to load on Chrome 50 OS X with this error in the console:\n\n`Refused to display 'https://github.com/mockito/mockito/blob/master/doc/release-notes/official.md' in a frame because an ancestor violates the following Content Security Policy directive: \"frame-ancestors 'none'\".`\n", "url": "https://github.com/mockito/mockito/issues/393", "user": "adamv-dev9", "labels": ["bug", "docs"], "created": "2016-04-15 17:51:58", "closed": "2016-10-17 13:37:50", "commits": {}, "ttf": 184.00027777777777, "commitsDetails": []}, {"title": "Mockito JAR is not a valid OSGi bundle because illegal version format", "body": "Hi,\n\nThe current Mockito JAR is not a valid OSGi-bundle because it uses an illegal version for exporting its packages. I get the following error when I run my PAX-EXAM tests with the latest Mockito version:\n\norg.ops4j.pax.exam.TestContainerException: Problem starting test container.\nCaused by: org.osgi.framework.BundleException: Could not create bundle object.\nCaused by: java.lang.IllegalArgumentException: invalid version \"2.0.44-beta\": non-numeric \"44-beta\"\nCaused by: java.lang.NumberFormatException: For input string: \"44-beta\"\n\nThe version should be **2.0.44.beta** (with a dot instead a dash). This is since 2.0.28-beta, the last valid bundle was 2.0.27-beta.\n", "url": "https://github.com/mockito/mockito/issues/383", "user": "SourcePond", "labels": ["1.* incompatible", "bug"], "created": "2016-04-06 16:25:56", "closed": "2016-04-18 00:34:59", "commits": {}, "ttf": 11.000277777777777, "commitsDetails": []}, {"title": "Mocking a function with a default implementation but no concrete implementation generates an error", "body": "This behavior worked in 2.0.26-beta but causes an error in 2.0.33-beta.  \n\nSee https://github.com/emosesSfdc/mockito-default-mock-repro for a repro case.  Its tests pass in .26, but one of them fails in .33 with the error:\n\n```\nCannot call abstract real method on java object!\nCalling real methods is only possible when mocking non abstract method.\n  //correct example:\n  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();\norg.mockito.exceptions.base.MockitoException: \nCannot call abstract real method on java object!\nCalling real methods is only possible when mocking non abstract method.\n  //correct example:\n  when(mockOfConcreteClass.nonAbstractMethod()).thenCallRealMethod();\n    at mockitoTest.ApplicationTest.testGetValue(ApplicationTest.java:16)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n...\n```\n\nIf you have an interface \n\n```\npublic interface I {\n    default String m() { return \"m\"; }\n}\n```\n\nAnd a concrete implementation that doesn't override `m()`, \n\n```\npublic class Impl implements I {}\n```\n\nThen if you try \n\n```\nI i = Mockito.spy(new Impl());\nMocktio.when(i.m()).thenReturn(\"other\");\ni.m();\n```\n\nYou'll get the above error.\n", "url": "https://github.com/mockito/mockito/issues/329", "user": "emosesSfdc", "labels": ["bug"], "created": "2015-12-22 23:09:34", "closed": "2016-01-04 13:08:41", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "mocking method an interface inherits from its parent interface is not working when the method is re-stated in extending interface", "body": "I was trying to build a function that can return a mock of any interface extending a generic parent interface. The extending interface specifies the generic parameters.\n\nI've found that if the extending interface does not re-declare the method, then it works as expected (the mock object exhibits mocked behavior when the method is invoked.) \n\nIf the extending interface does re-declare the method, then the mock object does not exhibit the mocked behavior when the method is invoked on the mock.\n\nHopefully the example below helps clarify:\n\n```\npackage mockitotest;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\nimport org.mockito.Mockito;\n\n// Test case demonstrating a perceived defect in Mockito\npublic class MockBuilderTest {\n\n    // 1. Create an object to use for a return type\n    public class ReturnType {\n\n        String name;\n\n        public String getName() {\n            return name;\n        }\n\n        public void setName(String name) {\n            this.name = name;\n        }\n\n    }\n\n    // 2. Define an interface\n    public interface OriginalInterface<N,O> {\n\n        // contains a templated method\n        O doSomething(N n);\n\n    };\n\n    // 3. Create an extending interface which specifies the templated arguments\n    public interface ExtendingInterfaceObject extends OriginalInterface<String, ReturnType> {\n\n        // 4. The method would be inherited, but I re-state it, mostly to add additional\n        //      documentation inside the interface\n        @Override\n        ReturnType doSomething(String n);\n\n    };\n\n    // 5. For demonstration purposes, create an extending interface which does specify the\n    //      templated arguments, but does not re-state the method\n    public interface ExtendingInterfaceObjectNoRedef extends OriginalInterface<String, ReturnType> {}\n\n    // A function to build a mocked object, the type of object is specified as a method argument\n    // the value that should be returned (O) is also provided as an argument\n    <N,O,T extends OriginalInterface<N,O>> T buildMock(Class<T> cls, final O o) {\n        Class<N> n = null;\n\n        // create a mocked object of the specified class\n        T t = Mockito.mock(cls, Mockito.withSettings().verboseLogging());\n\n        // override the doSomething function to return the desired value\n        Mockito.when(t.doSomething(Mockito.any(n))).thenReturn(o);\n        return t;\n    }\n\n    // Example A: I would expect that 'r' be returned by the resulting mocked object, but\n    //      mockito doesn't seem to match up the invocation with an overriden method\n    @Test\n    public void testBuild_object() {\n        ReturnType r = new ReturnType();\n        r.setName(\"testBuild\");\n\n        ExtendingInterfaceObject i = buildMock(ExtendingInterfaceObject.class, r);\n\n        assertTrue(i instanceof ExtendingInterfaceObject);\n        assertEquals(r, i.doSomething(\"TEST\"));\n    }\n\n    // Example B: like example A, but this uses the extending interface which *does not*\n    //      re-state the method. This example completes successfully.\n    @Test\n    public void testBuild_object_no_redef() {\n        ReturnType r = new ReturnType();\n        r.setName(\"testBuild\");\n\n        ExtendingInterfaceObjectNoRedef i = buildMock(ExtendingInterfaceObjectNoRedef.class, r);\n\n        assertTrue(i instanceof ExtendingInterfaceObjectNoRedef);\n        assertEquals(r, i.doSomething(\"TEST\"));\n    }\n\n}\n```\n", "url": "https://github.com/mockito/mockito/issues/305", "user": "ryanluedders", "labels": ["bug"], "created": "2015-10-19 15:42:47", "closed": "2015-11-10 12:32:00", "commits": {}, "ttf": 21.00027777777778, "commitsDetails": []}, {"title": "Problem verifying bridge methods", "body": "Hello, I think there might be a bug in mockito when verifying bridge methods.\nThe bug is present both in version 2.0.31-beta, and in version 1.10.19.\n\n``` java\nimport java.io.Serializable;\nimport org.junit.Test;\nimport static org.mockito.Mockito.mock;\nimport static org.mockito.Mockito.verify;\n\npublic class MockitoBridgeTest {\n\n    @Test\n    public void test() {\n        Extended ext = mock(Extended.class);\n        ext.test(\"123\");\n        verify(ext).test(\"123\"); // Passes\n        ((Base<String>)ext).test(\"456\");\n        verify(ext).test(\"456\"); // Fails\n    }\n\n    public interface Base<T extends Serializable> {\n        int test(T value);\n    }\n\n    public interface Extended extends Base<String> {\n        @Override\n        int test(String value);\n    }\n\n}\n```\n", "url": "https://github.com/mockito/mockito/issues/304", "user": "fbaro", "labels": ["bug"], "created": "2015-10-13 08:56:57", "closed": "2016-06-19 11:43:27", "commits": {"72ebdc06ab615728cda4229e6a0d1ac223a7aded": {"commitGHEventType": "referenced", "commitUser": "raphw"}}, "ttf": 250.00027777777777, "commitsDetails": [{"commitHash": "72ebdc06ab615728cda4229e6a0d1ac223a7aded", "commitGHEventType": "referenced", "commitUser": "raphw", "commitParents": ["80d13ef5e3bb5d3be05afa55d351c6033abd16a9"], "nameRev": "72ebdc06ab615728cda4229e6a0d1ac223a7aded tags/v2.0.32-beta~10", "commitMessage": "#304: Reproduction of described problem as a unit test.\n", "commitDateTime": "2015-11-12 11:01:40", "authoredDateTime": "2015-11-12 11:01:40", "commitGitStats": [{"filePath": "src/test/java/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java", "insertions": 25, "deletions": 4, "lines": 29}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BridgeMethodsHitAgainTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.BridgeMethodsHitAgainTest", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.bugs.BridgeMethodsHitAgainTest.testBridgeInvocationIsRecordedForInterceptedMethod()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["72ebdc06ab615728cda4229e6a0d1ac223a7aded"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Memory leak", "body": "I get memory leaks in my project whenever I use Mockito. I have a hunch this is because Mockito uses the wrong classloader, but I'm not quite sure. Please see the sample project I made to reproduce this:\n\nhttps://github.com/benmccann/play-mockito-bug\n", "url": "https://github.com/mockito/mockito/issues/299", "user": "benmccann", "labels": ["bug"], "created": "2015-10-05 19:48:58", "closed": "2015-10-08 01:29:15", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "StackOverflowError in MockitoSerializationIssue.java", "body": "In MockitoSerializationIssue.filterStackTrace(), it calls `filter.filter(this)`, which then calls getStackTrace() again, causing an infinite recursion.\n", "url": "https://github.com/mockito/mockito/issues/244", "user": "fluentfuture", "labels": ["bug"], "created": "2015-06-26 19:20:58", "closed": "2015-07-10 19:05:20", "commits": {}, "ttf": 13.000277777777777, "commitsDetails": []}, {"title": "MockUtil.isMock() no longer checks null", "body": "In version 1.9.5, MockUtil.isMock() is defined as:\n\n```\nreturn instance != null && isMockitoMock(instance);\n```\n\nIn v1.10.19 and HEAD, the `instance != null` check is gone.\n\nThis method is called by MockScanner when injecting mock instances on fields, where field values can be null.\n\nIs this a bug? Or it's up to MockMaker.getHandler() to check for null?\n\nIf it's a bug, I can fix it. But then we'll need to wait for v2.0 before upgrading Mockito for the company's code base. \n\nIf it's up to the mock maker, then I guess we need to fix Google's DexmakerMockMaker to add a line of `if (mock == null) return null;`\n", "url": "https://github.com/mockito/mockito/issues/243", "user": "fluentfuture", "labels": ["bug"], "created": "2015-06-26 18:57:40", "closed": "2015-08-06 11:56:01", "commits": {}, "ttf": 40.000277777777775, "commitsDetails": []}, {"title": "mockito 2.0.14 fails to mock jetty httpclient", "body": "this fails:\n\n<pre>\n     import org.eclipse.jetty.client.HttpClient;\n    HttpClient httpClient = mock(HttpClient.class);\n</pre>\n\n(jetty 9.2.10.v20150310)\n\nwith mockito 2.0.2-beta i can mock that class without a problem. \n\nstacktrace:\n\n<pre>\njava.lang.IllegalAccessError: tried to access class org.eclipse.jetty.util.component.ContainerLifeCycle$Managed from class org.eclipse.jetty.client.HttpClient$MockitoMock$362486671\n    at org.eclipse.jetty.client.HttpClient$MockitoMock$362486671.<clinit>(Unknown Source)\n    at sun.reflect.GeneratedSerializationConstructorAccessor2.newInstance(Unknown Source)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:408)\n    at org.objenesis.instantiator.sun.SunReflectionFactoryInstantiator.newInstance(SunReflectionFactoryInstantiator.java:45)\n    at org.objenesis.ObjenesisBase.newInstance(ObjenesisBase.java:73)\n    at org.mockito.internal.creation.instance.ObjenesisInstantiator.newInstance(ObjenesisInstantiator.java:14)\n    at org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(ByteBuddyMockMaker.java:27)\n    at org.mockito.internal.util.MockUtil.createMock(MockUtil.java:33)\n    at org.mockito.internal.MockitoCore.mock(MockitoCore.java:59)\n    at org.mockito.Mockito.mock(Mockito.java:1392)\n    at org.mockito.Mockito.mock(Mockito.java:1270)\n</pre>\n", "url": "https://github.com/mockito/mockito/issues/233", "user": "christophsturm", "labels": ["bug"], "created": "2015-06-18 06:24:45", "closed": "2015-06-18 16:45:13", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "2.0.8-beta -> 2.0.9-beta 'Unable to initialize @Spy annotated field", "body": "No test failures when using 2.0.8-beta, but when incrementing to 2.0.9-beta, the following error occurs:\n\n```\norg.mockito.exceptions.base.MockitoException: Unable to initialize @Spy annotated field 'monitorTaskScheduler'.\nUnable to create mock instance of type 'MonitorTaskScheduler'\n    at net.project.dash.monitor.MonitorTaskScheduler$MockitoMock$1184625981.getExecutorService(Unknown Source)\n    at net.project.dash.monitor.MonitorTaskScheduler.<init>(MonitorTaskScheduler.java:39)\n    at net.project.dash.monitor.MonitorTaskScheduler$MockitoMock$1184625981.<init>(Unknown Source)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:422)\n    at org.mockito.internal.creation.instance.ConstructorInstantiator.invokeConstructor(ConstructorInstantiator.java:42)\n    at org.mockito.internal.creation.instance.ConstructorInstantiator.noArgConstructor(ConstructorInstantiator.java:66)\n    at org.mockito.internal.creation.instance.ConstructorInstantiator.newInstance(ConstructorInstantiator.java:17)\n    at org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(ByteBuddyMockMaker.java:27)\n    at org.mockito.internal.util.MockUtil.createMock(MockUtil.java:33)\n    at org.mockito.internal.MockitoCore.mock(MockitoCore.java:59)\n    at org.mockito.Mockito.mock(Mockito.java:1284)\n    at org.mockito.internal.configuration.SpyAnnotationEngine.newSpyInstance(SpyAnnotationEngine.java:117)\n    at org.mockito.internal.configuration.SpyAnnotationEngine.process(SpyAnnotationEngine.java:67)\n    at org.mockito.internal.configuration.InjectingAnnotationEngine.processIndependentAnnotations(InjectingAnnotationEngine.java:73)\n    at org.mockito.internal.configuration.InjectingAnnotationEngine.process(InjectingAnnotationEngine.java:55)\n    at org.mockito.MockitoAnnotations.initMocks(MockitoAnnotations.java:108)\n    at net.project.dash.monitor.MonitorTaskSchedulerTest.setUp(MonitorTaskSchedulerTest.java:38)\n```\n\nRelevant code (MonitorTaskSchedulerTest.java)\n\n``` java\n@Spy\nMonitorTaskScheduler monitorTaskScheduler;\n\n@Before\npublic void setUp()\n{\n    MockitoAnnotations.initMocks(this);\n}\n```\n\nRelevant code (MonitorTaskScheduler.java)\n\n``` java\npublic class MonitorTaskScheduler\n{\n    public MonitorTaskScheduler()\n    {\n        this.futureToTaskMap = new ConcurrentHashMap<>();\n    }\n}\n```\n", "url": "https://github.com/mockito/mockito/issues/220", "user": "brcolow", "labels": ["bug"], "created": "2015-06-04 07:29:05", "closed": "2015-06-20 00:05:46", "commits": {"2d036ecf1d7170b4ec7346579a1ef8904109530a": {"commitGHEventType": "closed", "commitUser": "bric3"}, "ce6b3c9e4ee33e00d2ed442d4d2c6587ab75e306": {"commitGHEventType": "referenced", "commitUser": "bric3"}}, "ttf": 15.000277777777777, "commitsDetails": [{"commitHash": "2d036ecf1d7170b4ec7346579a1ef8904109530a", "commitGHEventType": "closed", "commitUser": "bric3", "commitParents": ["ea121e9102e6df9ab12da437dc95560c4977b5ba"], "nameRev": "2d036ecf1d7170b4ec7346579a1ef8904109530a tags/v2.0.16-beta~1^2~1", "commitMessage": "Fixes #220 : Constructors invoking methods may fail to instantiate using Spy annotation\n", "commitDateTime": "2015-06-19 21:07:54", "authoredDateTime": "2015-06-19 20:20:11", "commitGitStats": [{"filePath": "mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java", "insertions": 24, "deletions": 14, "lines": 38}, {"filePath": "mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java", "insertions": 52, "deletions": 13, "lines": 65}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MockBytecodeGenerator.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator.generateMockClass(org.mockito.internal.creation.bytebuddy.MockFeatures)", "TOT": 20, "UPD": 5, "INS": 5, "MOV": 7, "DEL": 3}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator.allMockedTypes(org.mockito.internal.creation.bytebuddy.MockFeatures)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MockMethodInterceptor.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptSuperCallable(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],java.util.concurrent.Callable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptDefaultCallable(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],java.util.concurrent.Callable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.InterceptionDispatcher", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "ce6b3c9e4ee33e00d2ed442d4d2c6587ab75e306", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["ad0b7e88056eb662ead86885667be6055708e67d", "4b20bf0d57ae1b8fa5fd51b3257bf672f057cdc2"], "nameRev": "ce6b3c9e4ee33e00d2ed442d4d2c6587ab75e306 tags/v2.0.16-beta~1", "commitMessage": "Merge pull request #235 from bric3/issue220-constructor-invoking-methods\n\nFixes #220 constructor invoking methods raise NPE", "commitDateTime": "2015-06-20 02:05:45", "authoredDateTime": "2015-06-20 02:05:45", "commitGitStats": [{"filePath": "gradle/javadoc.gradle", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java", "insertions": 7, "deletions": 5, "lines": 12}, {"filePath": "mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java", "insertions": 28, "deletions": 15, "lines": 43}, {"filePath": "mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java", "insertions": 52, "deletions": 13, "lines": 65}, {"filePath": "test/org/mockitousage/bugs/ConstructorInvokingMethodShouldNotRaiseExceptionTest.java", "insertions": 46, "deletions": 0, "lines": 46}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ByteBuddyMockMaker.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(org.mockito.mock.MockCreationSettings,org.mockito.invocation.MockHandler)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.getHandler(java.lang.Object)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MockBytecodeGenerator.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator.generateMockClass(org.mockito.internal.creation.bytebuddy.MockFeatures)", "TOT": 25, "UPD": 6, "INS": 5, "MOV": 9, "DEL": 5}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator.allMockedTypes(org.mockito.internal.creation.bytebuddy.MockFeatures)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MockMethodInterceptor.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptSuperCallable(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],java.util.concurrent.Callable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptDefaultCallable(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],java.util.concurrent.Callable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.DispatcherDefaultingToRealMethod", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ConstructorInvokingMethodShouldNotRaiseExceptionTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.ConstructorInvokingMethodShouldNotRaiseExceptionTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2d036ecf1d7170b4ec7346579a1ef8904109530a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 76, "deletions": 27, "lines": 103, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 27, "UPD": 7, "INS": 9, "MOV": 7, "DEL": 4, "spoonFilesChanged": 2, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy"], "changesInPackagesSPOON": ["org.mockito.internal.creation.bytebuddy.MockMethodInterceptor", "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator.allMockedTypes(org.mockito.internal.creation.bytebuddy.MockFeatures)", "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator", "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptSuperCallable(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],java.util.concurrent.Callable)", "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.interceptDefaultCallable(java.lang.Object,java.lang.reflect.Method,java.lang.Object[],java.util.concurrent.Callable)", "org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.InterceptionDispatcher", "org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator.generateMockClass(org.mockito.internal.creation.bytebuddy.MockFeatures)"]}, {"title": "Regression when mocking a type in a signed package", "body": "I just tried to upgrade from 2.0.8-beta to 2.0.9-beta (and then 2.0.10-beta). One of our tests started failing:\n\n```\norg.mockito.exceptions.base.MockitoException: \nMockito cannot mock this class: interface com.microsoft.windowsazure.services.servicebus.ServiceBusContract\n\nMockito can only mock visible & non-final classes.\nIf you're not sure why you're getting this error, please report to the mailing list.\n    at java.lang.ClassLoader.checkCerts(ClassLoader.java:895)\n    at java.lang.ClassLoader.preDefineClass(ClassLoader.java:665)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:758)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at net.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$ClassLoadingAction.run(ClassInjector.java:336)\n    at net.bytebuddy.dynamic.loading.ClassInjector$UsingReflection$ClassLoadingAction.run(ClassInjector.java:306)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at net.bytebuddy.dynamic.loading.ClassInjector$UsingReflection.inject(ClassInjector.java:122)\n    at net.bytebuddy.dynamic.loading.ClassLoadingStrategy$Default$5.load(ClassLoadingStrategy.java:144)\n    at net.bytebuddy.dynamic.DynamicType$Default$Unloaded.load(DynamicType.java:3380)\n    at org.mockito.internal.creation.bytebuddy.MockBytecodeGenerator.generateMockClass(MockBytecodeGenerator.java:55)\n    at org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator$CachedBytecodeGenerator.generate(CachingMockBytecodeGenerator.java:72)\n    at org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator$CachedBytecodeGenerator.getOrGenerateMockClass(CachingMockBytecodeGenerator.java:64)\n    at org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator.get(CachingMockBytecodeGenerator.java:27)\n    at org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createProxyClass(ByteBuddyMockMaker.java:49)\n    at org.mockito.internal.creation.bytebuddy.ByteBuddyMockMaker.createMock(ByteBuddyMockMaker.java:22)\n    at org.mockito.internal.util.MockUtil.createMock(MockUtil.java:33)\n    at org.mockito.internal.MockitoCore.mock(MockitoCore.java:59)\n    at org.mockito.Mockito.mock(Mockito.java:1378)\n    at org.mockito.Mockito.mock(Mockito.java:1256)\n```\n\nI thought this was odd, since the mentioned type (`ServiceBusContract`) is a public interface. So I put a breakpoint at `org.mockito.internal.creation.bytebuddy.CachingMockBytecodeGenerator:85`. The underlying error turns out to be:\n\n```\njava.lang.SecurityException: class \"com.microsoft.windowsazure.services.servicebus.models.BrokeredMessage$MockitoMock$931493758$auxiliary$gVJxoE2i\"'s signer information does not match signer information of other classes in the same package\n```\n\nIf I understand correctly, Mockito just switched from GCLIB to Byte Buddy. Perhaps this is an edge case that the new library doesn't cover yet?\n", "url": "https://github.com/mockito/mockito/issues/218", "user": "Stephan202", "labels": ["bug"], "created": "2015-06-03 21:40:46", "closed": "2015-06-04 08:48:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NoJUnitDependenciesTest is failing on Windows machine.", "body": "I found NoJUnitDependenciesTest unit test is the only unit test that fails when you run the build on windows machine (I have also Ubuntu, and it is fine for some reason on Unix platform).\n\nRoot cause: Caused by: java.lang.NoClassDefFoundError: org\\mockito\\internal\\invocation\\InvocationMarker (wrong name: org/mockito/internal/invocation/InvocationMarker)\n\nFull Stacktrace:\n\njava.lang.AssertionError: 'org\\mockito\\internal\\invocation\\InvocationMarker' has some dependency to JUnit\n    at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:36)\n    at org.mockitointegration.NoJUnitDependenciesTest.pure_mockito_should_not_depend_JUnit(NoJUnitDependenciesTest.java:28)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)\n    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)\n    at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:69)\n    at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:48)\n    at sun.reflect.GeneratedMethodAccessor37.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n    at org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)\n    at org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)\n    at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\n    at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:105)\n    at sun.reflect.GeneratedMethodAccessor36.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:601)\n    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n    at org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n    at org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)\n    at org.gradle.internal.concurrent.DefaultExecutorFactory$StoppableExecutorImpl$1.run(DefaultExecutorFactory.java:64)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n    at java.lang.Thread.run(Thread.java:722)\nCaused by: java.lang.NoClassDefFoundError: org\\mockito\\internal\\invocation\\InvocationMarker (wrong name: org/mockito/internal/invocation/InvocationMarker)\n    at java.lang.ClassLoader.defineClass1(Native Method)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:791)\n    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)\n    at java.net.URLClassLoader.defineClass(URLClassLoader.java:449)\n    at java.net.URLClassLoader.access$100(URLClassLoader.java:71)\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:361)\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:355)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:354)\n    at org.mockitoutil.ClassLoaders$LocalExcludingURLClassLoader.findClass(ClassLoaders.java:156)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:423)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:356)\n    at java.lang.Class.forName0(Native Method)\n    at java.lang.Class.forName(Class.java:266)\n    at org.mockitointegration.NoJUnitDependenciesTest.checkDependency(NoJUnitDependenciesTest.java:34)\n    ... 41 more\n", "url": "https://github.com/mockito/mockito/issues/206", "user": "lukasz-szewc", "labels": ["bug"], "created": "2015-05-07 09:32:15", "closed": "2015-06-06 21:27:30", "commits": {}, "ttf": 30.00027777777778, "commitsDetails": []}, {"title": "Mockito.after() method accepts negative timeperiods and subsequent verifications always pass", "body": "e.g.\n\n```\nRunnable runnable = Mockito.mock(Runnable.class);\nMockito.verify(runnable, Mockito.never()).run(); // passes as expected\nMockito.verify(runnable, Mockito.after(1000).never()).run(); // passes as expected\nMockito.verify(runnable, Mockito.after(-1000).atLeastOnce()).run(); // passes incorrectly\n```\n", "url": "https://github.com/mockito/mockito/issues/197", "user": "nathanmbrown", "labels": ["bug"], "created": "2015-04-13 14:33:49", "closed": "2015-05-13 12:59:15", "commits": {"80452c7a42777513c35fd30c4e12bcd7ee438fb9": {"commitGHEventType": "closed", "commitUser": "bric3"}, "ce3d2fbb79a33fc5881dfd5348fa3ce378a76afa": {"commitGHEventType": "referenced", "commitUser": "bric3"}}, "ttf": 29.00027777777778, "commitsDetails": [{"commitHash": "80452c7a42777513c35fd30c4e12bcd7ee438fb9", "commitGHEventType": "closed", "commitUser": "bric3", "commitParents": ["d30450fa1172d79cc051b2fe8064744c2ac7a003"], "nameRev": "80452c7a42777513c35fd30c4e12bcd7ee438fb9 tags/v2.0.8-beta~1^2~2", "commitMessage": "Fixes #197 : Blocks ability to use negative value for timeout() and after() method.\n", "commitDateTime": "2015-05-08 21:08:46", "authoredDateTime": "2015-05-08 21:08:46", "commitGitStats": [{"filePath": "src/org/mockito/exceptions/Reporter.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "src/org/mockito/internal/util/Timer.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "test/org/mockito/internal/util/TimerTest.java", "insertions": 20, "deletions": 5, "lines": 25}, {"filePath": "test/org/mockito/verification/NegativeDurationTest.java", "insertions": 29, "deletions": 0, "lines": 29}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Reporter.java", "spoonMethods": [{"spoonMethodName": "org.mockito.exceptions.Reporter.cannotCreateTimerWithNegativeDurationTime(long)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Timer.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.Timer.validateInput(long)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.Timer", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TimerTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.TimerTest.should_return_false_if_task_is_outside_the_acceptable_time_bounds()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.TimerTest.should_return_true_if_task_is_in_acceptable_time_bounds()", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 2}, {"spoonMethodName": "org.mockito.internal.util.TimerTest.should_throw_friendly_reminder_exception_when_duration_is_negative()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.TimerTest.oneMillisecondPasses()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.TimerTest.should_return_false_when_time_run_out()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NegativeDurationTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.verification.NegativeDurationTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "ce3d2fbb79a33fc5881dfd5348fa3ce378a76afa", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["d30450fa1172d79cc051b2fe8064744c2ac7a003", "b324bcf197fa8bf39a5a192ce48f66f43f261fd8"], "nameRev": "ce3d2fbb79a33fc5881dfd5348fa3ce378a76afa tags/v2.0.8-beta~1", "commitMessage": "Merge pull request #207 from lukasz-szewc/issue197\n\nFixes #197 : Blocks ability to use negative value for timeout() and after() method.", "commitDateTime": "2015-05-13 14:59:14", "authoredDateTime": "2015-05-13 14:59:14", "commitGitStats": [{"filePath": "src/org/mockito/exceptions/Reporter.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "src/org/mockito/internal/util/Timer.java", "insertions": 13, "deletions": 0, "lines": 13}, {"filePath": "src/org/mockito/internal/verification/VerificationOverTimeImpl.java", "insertions": 7, "deletions": 19, "lines": 26}, {"filePath": "src/org/mockito/verification/After.java", "insertions": 8, "deletions": 4, "lines": 12}, {"filePath": "src/org/mockito/verification/Timeout.java", "insertions": 10, "deletions": 7, "lines": 17}, {"filePath": "test/org/mockito/internal/util/TimerTest.java", "insertions": 20, "deletions": 5, "lines": 25}, {"filePath": "test/org/mockito/verification/NegativeDurationTest.java", "insertions": 29, "deletions": 0, "lines": 29}, {"filePath": "test/org/mockito/verification/TimeoutTest.java", "insertions": 5, "deletions": 24, "lines": 29}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Reporter.java", "spoonMethods": [{"spoonMethodName": "org.mockito.exceptions.Reporter.cannotCreateTimerWithNegativeDurationTime(long)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Timer.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.Timer.validateInput(long)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.Timer.duration()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.Timer", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "VerificationOverTimeImpl.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.verification.VerificationOverTimeImpl.getDuration()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.verification.VerificationOverTimeImpl.getDelegate()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.verification.VerificationOverTimeImpl", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 4}, {"spoonMethodName": "org.mockito.internal.verification.VerificationOverTimeImpl.sleep(long)", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 4, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.verification.VerificationOverTimeImpl.getPollingPeriod()", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.verification.VerificationOverTimeImpl.copyWithVerificationMode(org.mockito.verification.VerificationMode)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "After.java", "spoonMethods": [{"spoonMethodName": "org.mockito.verification.After.copySelfWithNewVerificationMode(org.mockito.verification.VerificationMode)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.verification.After", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "Timeout.java", "spoonMethods": [{"spoonMethodName": "org.mockito.verification.Timeout.copySelfWithNewVerificationMode(org.mockito.verification.VerificationMode)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.verification.Timeout", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 2}]}, {"spoonFilePath": "TimerTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.TimerTest.should_return_false_if_task_is_outside_the_acceptable_time_bounds()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.TimerTest.should_return_true_if_task_is_in_acceptable_time_bounds()", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 2}, {"spoonMethodName": "org.mockito.internal.util.TimerTest.should_throw_friendly_reminder_exception_when_duration_is_negative()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.TimerTest.oneMillisecondPasses()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.TimerTest.should_return_false_when_time_run_out()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NegativeDurationTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.verification.NegativeDurationTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TimeoutTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.verification.TimeoutTest.should_pass_when_verification_passes()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.verification.TimeoutTest.should_fail_because_verification_fails()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.verification.TimeoutTest.should_pass_even_if_first_verification_fails()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.verification.TimeoutTest.should_try_to_verify_correct_number_of_times()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.verification.TimeoutTest.should_create_correctly_configured_timeout()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.verification.TimeoutTest.assertTimeoutCorrectlyConfigured(org.mockito.verification.VerificationMode,java.lang.Class,long,long,java.lang.Class)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["80452c7a42777513c35fd30c4e12bcd7ee438fb9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 18, "deletions": 0, "lines": 18, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/org/mockito/exceptions", "src/org/mockito/internal/util"], "changesInPackagesSPOON": ["org.mockito.internal.util.Timer.validateInput(long)", "org.mockito.internal.util.Timer", "org.mockito.exceptions.Reporter.cannotCreateTimerWithNegativeDurationTime(long)"]}, {"title": "ArgumentCaptor no longer working for varargs", "body": "I ran into the issue described here: http://stackoverflow.com/questions/27303562/why-does-upgrading-mockito-from-1-9-5-to-1-10-8-break-this-captor\n", "url": "https://github.com/mockito/mockito/issues/188", "user": "vadims", "labels": ["bug"], "created": "2015-04-01 00:16:10", "closed": "2015-06-05 14:18:58", "commits": {}, "ttf": 65.00027777777778, "commitsDetails": []}, {"title": "java.lang.ClassCastException: java.lang.Class cannot be cast to java.lang.String", "body": "Exception throws on verifyZeroInteractions when using mock with default answer.\nchecked on versions 1.10.5-2.0.5\nall ok on 1.9.5\n", "url": "https://github.com/mockito/mockito/issues/187", "user": "mktitov", "labels": ["bug"], "created": "2015-03-24 13:14:54", "closed": "2015-04-19 18:42:56", "commits": {"42b391d4209024292b6101048389570e4ec36b2a": {"commitGHEventType": "closed", "commitUser": "bric3"}, "f0b7797ae7834cb6eb7749ab5f32de7c37eed23b": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "48ba6087824e2831698de1252040f55e67afafdc": {"commitGHEventType": "referenced", "commitUser": "bric3"}}, "ttf": 26.00027777777778, "commitsDetails": [{"commitHash": "42b391d4209024292b6101048389570e4ec36b2a", "commitGHEventType": "closed", "commitUser": "bric3", "commitParents": ["c25cb6bff7eb4774efda345e8bf9eaad4c66a652"], "nameRev": "42b391d4209024292b6101048389570e4ec36b2a tags/v2.0.7-beta~1^2~2", "commitMessage": "Fixes #187 : print mock name even when default answer is bogus\n", "commitDateTime": "2015-04-19 18:50:25", "authoredDateTime": "2015-04-17 11:45:21", "commitGitStats": [{"filePath": "src/org/mockito/exceptions/Reporter.java", "insertions": 21, "deletions": 9, "lines": 30}, {"filePath": "test/org/mockito/exceptions/ReporterTest.java", "insertions": 67, "deletions": 7, "lines": 74}, {"filePath": "test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java", "insertions": 26, "deletions": 0, "lines": 26}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Reporter.java", "spoonMethods": [{"spoonMethodName": "org.mockito.exceptions.Reporter.delegatedMethodHasWrongReturnType(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Object,java.lang.Object)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.cannotInjectDependency(java.lang.reflect.Field,java.lang.Object,java.lang.Exception)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.invalidArgumentPositionRangeAtInvocationTime(org.mockito.invocation.InvocationOnMock,boolean,int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.wrongTypeOfArgumentToReturn(org.mockito.invocation.InvocationOnMock,java.lang.String,java.lang.Class,int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.exceptionCauseMessageIfAvailable(java.lang.Exception)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.safelyGetMockName(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.delegatedMethodDoesNotExistOnDelegate(java.lang.reflect.Method,java.lang.Object,java.lang.Object)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.noMoreInteractionsWanted(org.mockito.invocation.Invocation,java.util.List)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.noMoreInteractionsWantedInOrder(org.mockito.invocation.Invocation)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "ReporterTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.exceptions.ReporterTest.shouldLetPassingNullLastActualStackTrace()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.shouldThrowCorrectExceptionForNullInvocationListener()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_invalid_argument_position()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_wrong_argument_to_return()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_delegate_method_dont_exists()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_delegate_method_has_wrong_return_type()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.someField()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ClassCastExOnVerifyZeroInteractionsTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "f0b7797ae7834cb6eb7749ab5f32de7c37eed23b", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["14366365c800e14e3d062b0565523c849e350e8d"], "nameRev": "f0b7797ae7834cb6eb7749ab5f32de7c37eed23b tags/v2.0.7-beta~1^2", "commitMessage": "Ensure the default answer actually returns a compatible result. Related to #187\n", "commitDateTime": "2015-04-19 20:34:21", "authoredDateTime": "2015-04-19 20:34:21", "commitGitStats": [{"filePath": "src/org/mockito/exceptions/Reporter.java", "insertions": 12, "deletions": 0, "lines": 12}, {"filePath": "src/org/mockito/internal/handler/MockHandlerImpl.java", "insertions": 12, "deletions": 7, "lines": 19}, {"filePath": "src/org/mockito/internal/invocation/InvocationImpl.java", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "src/org/mockito/internal/stubbing/answers/AnswersValidator.java", "insertions": 22, "deletions": 11, "lines": 33}, {"filePath": "src/org/mockito/invocation/Invocation.java", "insertions": 8, "deletions": 0, "lines": 8}, {"filePath": "test/org/mockito/internal/handler/MockHandlerImplTest.java", "insertions": 17, "deletions": 0, "lines": 17}, {"filePath": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java", "insertions": 43, "deletions": 16, "lines": 59}, {"filePath": "test/org/mockito/internal/verification/NoMoreInteractionsTest.java", "insertions": 58, "deletions": 56, "lines": 114}, {"filePath": "test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java", "insertions": 13, "deletions": 1, "lines": 14}, {"filePath": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java", "insertions": 15, "deletions": 16, "lines": 31}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Reporter.java", "spoonMethods": [{"spoonMethodName": "org.mockito.exceptions.Reporter.wrongTypeReturnedByDefaultAnswer(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MockHandlerImpl.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.handler.MockHandlerImpl", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImpl.getInvocationContainer()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImpl.handle(org.mockito.invocation.Invocation)", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImpl.createVerificationData(org.mockito.internal.handler.InvocationContainerImpl,org.mockito.internal.invocation.InvocationMatcher)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "InvocationImpl.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.invocation.InvocationImpl.getRawReturnType()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AnswersValidator.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidator.validateDefaultAnswerReturnedValue(org.mockito.invocation.Invocation,java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Invocation.java", "spoonMethods": [{"spoonMethodName": "org.mockito.invocation.getRawReturnType()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MockHandlerImplTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.handler.MockHandlerImplTest.should_report_bogus_default_answer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImplTest.AWrongType", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AnswersValidatorTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_validate_null_throwable()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_when_calling_real_method_on_interface()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_if_returned_value_of_answer_is_incompatible_with_return_type()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_not_fail_if_returned_value_of_answer_is_null()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.AWrongType", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NoMoreInteractionsTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.verification.NoMoreInteractionsTest.noMoreInteractionsExceptionMessageShouldDescribeMock()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.verification.NoMoreInteractionsTest.noMoreInteractionsInOrderExceptionMessageShouldDescribeMock()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ClassCastExOnVerifyZeroInteractionsTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.should_not_throw_a_ClassCastException()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest.should_report_bogus_default_answer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DescriptiveMessagesWhenVerificationFailsTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.setup()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "48ba6087824e2831698de1252040f55e67afafdc", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["4b5a03d1516778084e669f2f74ffbb9f9fc086f1", "f0b7797ae7834cb6eb7749ab5f32de7c37eed23b"], "nameRev": "48ba6087824e2831698de1252040f55e67afafdc tags/v2.0.7-beta~1", "commitMessage": "Merge pull request #202 from mockito/gh-187\n\nBetter protection against incompatible returned value of default answer, and get safely mock name", "commitDateTime": "2015-04-19 20:42:54", "authoredDateTime": "2015-04-19 20:42:54", "commitGitStats": [{"filePath": "src/org/mockito/exceptions/Reporter.java", "insertions": 60, "deletions": 30, "lines": 90}, {"filePath": "src/org/mockito/internal/handler/MockHandlerImpl.java", "insertions": 12, "deletions": 7, "lines": 19}, {"filePath": "src/org/mockito/internal/invocation/InvocationImpl.java", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "src/org/mockito/internal/stubbing/answers/AnswersValidator.java", "insertions": 22, "deletions": 11, "lines": 33}, {"filePath": "src/org/mockito/invocation/Invocation.java", "insertions": 8, "deletions": 0, "lines": 8}, {"filePath": "test/org/mockito/exceptions/ReporterTest.java", "insertions": 67, "deletions": 7, "lines": 74}, {"filePath": "test/org/mockito/internal/handler/MockHandlerImplTest.java", "insertions": 80, "deletions": 69, "lines": 149}, {"filePath": "test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java", "insertions": 43, "deletions": 16, "lines": 59}, {"filePath": "test/org/mockito/internal/verification/NoMoreInteractionsTest.java", "insertions": 58, "deletions": 56, "lines": 114}, {"filePath": "test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java", "insertions": 38, "deletions": 0, "lines": 38}, {"filePath": "test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java", "insertions": 15, "deletions": 16, "lines": 31}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Reporter.java", "spoonMethods": [{"spoonMethodName": "org.mockito.exceptions.Reporter.wantedButNotInvoked(org.mockito.invocation.DescribedInvocation,java.util.List)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.tooManyActualInvocations(int,int,org.mockito.invocation.DescribedInvocation,org.mockito.invocation.Location)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.tooLittleActualInvocations(org.mockito.internal.reporting.Discrepancy,org.mockito.invocation.DescribedInvocation,org.mockito.invocation.Location)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.delegatedMethodHasWrongReturnType(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Object,java.lang.Object)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.cannotInjectDependency(java.lang.reflect.Field,java.lang.Object,java.lang.Exception)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.invalidArgumentPositionRangeAtInvocationTime(org.mockito.invocation.InvocationOnMock,boolean,int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.wrongTypeOfArgumentToReturn(org.mockito.invocation.InvocationOnMock,java.lang.String,java.lang.Class,int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.wrongTypeReturnedByDefaultAnswer(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.exceptionCauseMessageIfAvailable(java.lang.Exception)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.safelyGetMockName(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.delegatedMethodDoesNotExistOnDelegate(java.lang.reflect.Method,java.lang.Object,java.lang.Object)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.noMoreInteractionsWanted(org.mockito.invocation.Invocation,java.util.List)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.Reporter.noMoreInteractionsWantedInOrder(org.mockito.invocation.Invocation)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "MockHandlerImpl.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.handler.MockHandlerImpl", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImpl.getInvocationContainer()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImpl.handle(org.mockito.invocation.Invocation)", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImpl.createVerificationData(org.mockito.internal.handler.InvocationContainerImpl,org.mockito.internal.invocation.InvocationMatcher)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "InvocationImpl.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.invocation.InvocationImpl.getRawReturnType()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AnswersValidator.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidator.validateDefaultAnswerReturnedValue(org.mockito.invocation.Invocation,java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Invocation.java", "spoonMethods": [{"spoonMethodName": "org.mockito.invocation.getRawReturnType()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ReporterTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.exceptions.ReporterTest.shouldLetPassingNullLastActualStackTrace()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.shouldThrowCorrectExceptionForNullInvocationListener()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_invalid_argument_position()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_wrong_argument_to_return()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_delegate_method_dont_exists()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_delegate_method_has_wrong_return_type()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.exceptions.ReporterTest.someField()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MockHandlerImplTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.handler.MockHandlerImplTest.shouldRemoveVerificationModeEvenWhenInvalidMatchers()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImplTest.shouldThrowMockitoExceptionWhenInvocationHandlerThrowsAnything()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImplTest.createCorrectlyStubbedHandler(org.mockito.listeners.InvocationListener)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImplTest.stubOrdinaryInvocationWithGivenReturnValue(org.mockito.internal.handler.MockHandlerImpl)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImplTest.stubOrdinaryInvocationWithInvocationMatcher(org.mockito.internal.handler.MockHandlerImpl,org.mockito.internal.stubbing.StubbedInvocationMatcher)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImplTest.createHandlerWithListeners(org.mockito.listeners.InvocationListener[])", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImplTest.should_report_bogus_default_answer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.handler.MockHandlerImplTest.AWrongType", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AnswersValidatorTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_validate_null_throwable()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_when_calling_real_method_on_interface()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_fail_if_returned_value_of_answer_is_incompatible_with_return_type()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.should_not_fail_if_returned_value_of_answer_is_null()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.answers.AnswersValidatorTest.AWrongType", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NoMoreInteractionsTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.verification.NoMoreInteractionsTest.noMoreInteractionsExceptionMessageShouldDescribeMock()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.internal.verification.NoMoreInteractionsTest.noMoreInteractionsInOrderExceptionMessageShouldDescribeMock()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ClassCastExOnVerifyZeroInteractionsTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.ClassCastExOnVerifyZeroInteractionsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DescriptiveMessagesWhenVerificationFailsTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.verification.DescriptiveMessagesWhenVerificationFailsTest.setup()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["42b391d4209024292b6101048389570e4ec36b2a", "f0b7797ae7834cb6eb7749ab5f32de7c37eed23b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 80, "deletions": 28, "lines": 108, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 26, "UPD": 9, "INS": 11, "MOV": 6, "DEL": 0, "spoonFilesChanged": 5, "spoonMethodsChanged": 17}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/org/mockito/exceptions", "src/org/mockito/internal/stubbing/answers", "src/org/mockito/internal/invocation", "src/org/mockito/invocation", "src/org/mockito/internal/handler"], "changesInPackagesSPOON": ["org.mockito.exceptions.Reporter.delegatedMethodDoesNotExistOnDelegate(java.lang.reflect.Method,java.lang.Object,java.lang.Object)", "org.mockito.exceptions.Reporter.noMoreInteractionsWantedInOrder(org.mockito.invocation.Invocation)", "org.mockito.internal.invocation.InvocationImpl.getRawReturnType()", "org.mockito.internal.handler.MockHandlerImpl.getInvocationContainer()", "org.mockito.exceptions.Reporter.wrongTypeReturnedByDefaultAnswer(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)", "org.mockito.exceptions.Reporter.wrongTypeOfArgumentToReturn(org.mockito.invocation.InvocationOnMock,java.lang.String,java.lang.Class,int)", "org.mockito.internal.handler.MockHandlerImpl.createVerificationData(org.mockito.internal.handler.InvocationContainerImpl,org.mockito.internal.invocation.InvocationMatcher)", "org.mockito.internal.handler.MockHandlerImpl.handle(org.mockito.invocation.Invocation)", "org.mockito.exceptions.Reporter.cannotInjectDependency(java.lang.reflect.Field,java.lang.Object,java.lang.Exception)", "org.mockito.exceptions.Reporter.invalidArgumentPositionRangeAtInvocationTime(org.mockito.invocation.InvocationOnMock,boolean,int)", "org.mockito.exceptions.Reporter.safelyGetMockName(java.lang.Object)", "org.mockito.exceptions.Reporter.exceptionCauseMessageIfAvailable(java.lang.Exception)", "org.mockito.internal.handler.MockHandlerImpl", "org.mockito.exceptions.Reporter.delegatedMethodHasWrongReturnType(java.lang.reflect.Method,java.lang.reflect.Method,java.lang.Object,java.lang.Object)", "org.mockito.invocation.getRawReturnType()", "org.mockito.internal.stubbing.answers.AnswersValidator.validateDefaultAnswerReturnedValue(org.mockito.invocation.Invocation,java.lang.Object)", "org.mockito.exceptions.Reporter.noMoreInteractionsWanted(org.mockito.invocation.Invocation,java.util.List)"]}, {"title": "Mockito 1.10.x timeout verification needs JUnit classes (VerifyError, NoClassDefFoundError)", "body": "If JUnit is not on the classpath and mockito is version 1.10.x (as of now 1.10.1 up to 1.10.19) and the code is using the timeout verification which is not supposed to be related to JUnit, then the JVM may fail with a `VerifyError` or a `NoClassDefFoundError`.\n\nThis issue has been reported on the [mailing list](https://groups.google.com/forum/#!topic/mockito/A6D7myKiD5k) and on [StackOverflow](http://stackoverflow.com/questions/27721621/java-lang-verifyerror-with-mockito-1-10-17)\n\nA simple test like that with **TestNG** (and no JUnit in the class path of course) exposes the issue:\n\n```\nimport org.testng.annotations.Test;\nimport java.util.Observable;\nimport static org.mockito.Mockito.*;\n\npublic class VerifyErrorOnVerificationWithTimeoutTest {\n    @Test public void should_not_throw_VerifyError() {\n        verify(mock(Observable.class), timeout(500)).countObservers();\n    }\n}\n```\n\nWith TestNG 5.13.1, the stack trace is :\n\n```\njava.lang.VerifyError: (class: org/mockito/internal/verification/VerificationOverTimeImpl, method: verify signature: (Lorg/mockito/internal/verification/api/VerificationData;)V) Incompatible argument to function\n    at org.mockito.verification.Timeout.<init>(Timeout.java:32)\n    at org.mockito.verification.Timeout.<init>(Timeout.java:25)\n    at org.mockito.Mockito.timeout(Mockito.java:2103)\n    at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)\n```\n\nTestNG includes a dependency on JUnit 3.8.1, which has the `junit.framework.ComparisonFailure`, but the JVM cannot perform the linking at runtime (`VerifyError` extends `LinkageError`), probably because for the JVM there's some incompatible changes in this class between version 3.x and 4.x.\nNote that Mockito is compiled against JUnit 4.x. This also reveal that Mockito is not anymore compatible with JUnit 3.x.\n\nWith TestNG 6.8.13, the stack trace is :\n\n```\njava.lang.NoClassDefFoundError: junit/framework/ComparisonFailure\n    at java.lang.ClassLoader.defineClass1(Native Method)\n    at java.lang.ClassLoader.defineClassCond(ClassLoader.java:637)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:621)\n    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:141)\n    at java.net.URLClassLoader.defineClass(URLClassLoader.java:283)\n    at java.net.URLClassLoader.access$000(URLClassLoader.java:58)\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:197)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n    at org.mockito.verification.Timeout.<init>(Timeout.java:32)\n    at org.mockito.verification.Timeout.<init>(Timeout.java:25)\n    at org.mockito.Mockito.timeout(Mockito.java:2103)\n    at com.example.UserServiceImplTest.test(UserServiceImplTest.java:26)\nCaused by: java.lang.ClassNotFoundException: junit.framework.ComparisonFailure\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:202)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:190)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:301)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:247)\n    ... 49 more\n```\n\nIndeed JUnit is not anymore a dependency of TestNG.\n\nIn this specific case the issue is that the `Timeout` class wraps a `VerficationOverTimeImpl` that uses in try/catch block the exception `org.mockito.exceptions.verification.junit.ArgumentsAreDifferent` which extends `junit.framework.ComparisonFailure`.\n\nAt this time it seems to be the only place where JUnit is needed, this affect the following public API : \n\n``` java\nMockito.timeout(...)\nMockito.after(...)\n```\n", "url": "https://github.com/mockito/mockito/issues/152", "user": "bric3", "labels": ["bug"], "created": "2015-01-02 13:02:35", "closed": "2015-01-20 20:24:16", "commits": {"b3f864a1b58043d1b40ecfffb2ea2308e6e5d50f": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "611aadad684ed247741da29ae42cb32c1eec5ee6": {"commitGHEventType": "closed", "commitUser": "bric3"}}, "ttf": 18.00027777777778, "commitsDetails": [{"commitHash": "b3f864a1b58043d1b40ecfffb2ea2308e6e5d50f", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "611aadad684ed247741da29ae42cb32c1eec5ee6", "commitGHEventType": "closed", "commitUser": "bric3", "commitParents": ["76e253885e6ad4bc6eab28aaf390e2acc5ed0249"], "nameRev": "611aadad684ed247741da29ae42cb32c1eec5ee6 tags/v2.0.3-beta~1^2", "commitMessage": "fixes #152, removes the dependency to junit in VerificationOverTimeImpl\n\nAdded test verify that non JUnit related classes of mockito can be loaded without JUnit in the classpath\n", "commitDateTime": "2015-01-20 21:12:17", "authoredDateTime": "2015-01-02 19:09:45", "commitGitStats": [{"filePath": "src/org/mockito/internal/verification/VerificationOverTimeImpl.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "test/org/mockitointegration/NoJUnitDependenciesTest.java", "insertions": 39, "deletions": 0, "lines": 39}], "commitSpoonAstDiffStats": [{"spoonFilePath": "VerificationOverTimeImpl.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.verification.VerificationOverTimeImpl.verify(org.mockito.internal.verification.api.VerificationData)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NoJUnitDependenciesTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitointegration.NoJUnitDependenciesTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["611aadad684ed247741da29ae42cb32c1eec5ee6"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1.0, "deletions": 2.0, "lines": 3.0, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1.0, "UPD": 1.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/org/mockito/internal/verification"], "changesInPackagesSPOON": ["org.mockito.internal.verification.VerificationOverTimeImpl.verify(org.mockito.internal.verification.api.VerificationData)"]}, {"title": "Investigate why #125 did not trigger release", "body": "Investigate why #125 did not trigger release\n", "url": "https://github.com/mockito/mockito/issues/151", "user": "mockitoguy", "labels": ["bug", "continuous integration"], "created": "2014-12-30 13:43:45", "closed": "2015-10-10 18:02:05", "commits": {}, "ttf": 284.0002777777778, "commitsDetails": []}, {"title": "Argument matcher anyXxx() (i.e. anyString(), anyList()) should not match nulls", "body": "This is a bug I'm seeing in 1.10.8 version (older version has the same issue - tested with 1.9.0).\n\nGiven:\n\n``` java\nFunction<Object, Integer> function = Mockito.mock(Function.class);\nwhen(function.apply(Mockito.anyString())).thenReturn(1);\nInteger result = function.apply(2);\n```\n\nExpected behavior:\n\n``` java\nresult == null;\n```\n\nActual behavior:\n\n``` java\nresult == 1;\n```\n\nNote that the function is called with an integer (not a string), and still the mocked function return the value which it should return only when a string is passed. The same works when using anyBoolean() or any other methof from any\\* family.\n", "url": "https://github.com/mockito/mockito/issues/134", "user": "alexo", "labels": ["1.* incompatible", "bug"], "created": "2014-12-12 10:20:31", "closed": "2015-01-02 13:53:26", "commits": {"dc205824dbc289acbcde919e430176ad72da847f": {"commitGHEventType": "closed", "commitUser": "mockitoguy"}}, "ttf": 21.00027777777778, "commitsDetails": [{"commitHash": "dc205824dbc289acbcde919e430176ad72da847f", "commitGHEventType": "closed", "commitUser": "mockitoguy", "commitParents": ["a7ba606944563adcdc631a2c04463a8124d26b02"], "nameRev": "dc205824dbc289acbcde919e430176ad72da847f tags/v2.0.0-beta~10", "commitMessage": "Stop anyX() methods matching null inputs\n\nFixes #134\n", "commitDateTime": "2015-01-02 14:51:26", "authoredDateTime": "2014-12-15 23:30:26", "commitGitStats": [{"filePath": "src/org/mockito/Matchers.java", "insertions": 21, "deletions": 20, "lines": 41}, {"filePath": "src/org/mockito/internal/matchers/Any.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "test/org/mockitousage/IMethods.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "test/org/mockitousage/MethodsImpl.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "test/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java", "insertions": 16, "deletions": 16, "lines": 32}, {"filePath": "test/org/mockitousage/matchers/MatchersTest.java", "insertions": 14, "deletions": 4, "lines": 18}, {"filePath": "test/org/mockitousage/matchers/NewMatchersTest.java", "insertions": 20, "deletions": 20, "lines": 40}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Matchers.java", "spoonMethods": [{"spoonMethodName": "org.mockito.Matchers.any(java.lang.Class)", "TOT": 5, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyObject()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockito.Matchers.anyListOf(java.lang.Class)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.mockito.Matchers.anySetOf(java.lang.Class)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.mockito.Matchers.anyMapOf(java.lang.Class,java.lang.Class)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.Matchers.anyBoolean()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyByte()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyChar()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyInt()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyLong()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyFloat()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyDouble()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyShort()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.any()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyString()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyList()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anySet()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyMap()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyCollection()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyCollectionOf(java.lang.Class)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.mockito.Matchers.anyVararg()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "Any.java", "spoonMethods": []}, {"spoonFilePath": "IMethods.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.forObject(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MethodsImpl.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.MethodsImpl.forObject(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AnyXMatchersAcceptNullsTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldAnyXMatchersAcceptNull()", "TOT": 7, "UPD": 7, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.matchers.AnyXMatchersAcceptNullsTest.shouldAcceptNullsInAllPrimitiveWrapperAnyMatchers()", "TOT": 9, "UPD": 9, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MatchersTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.matchers.MatchersTest.anyMatcher()", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.matchers.MatchersTest.anyStringMatcher()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NewMatchersTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyList()", "TOT": 5, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyCollection()", "TOT": 5, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnyMap()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.mockitousage.matchers.NewMatchersTest.shouldAllowAnySet()", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["dc205824dbc289acbcde919e430176ad72da847f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 28, "deletions": 21, "lines": 49, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 60, "UPD": 6, "INS": 18, "MOV": 20, "DEL": 16, "spoonFilesChanged": 3, "spoonMethodsChanged": 23}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/org/mockito/internal/matchers", "src/org/mockito", "test/org/mockitousage"], "changesInPackagesSPOON": ["org.mockito.Matchers.anyFloat()", "org.mockito.Matchers.anyMapOf(java.lang.Class,java.lang.Class)", "org.mockito.Matchers.anySetOf(java.lang.Class)", "org.mockito.Matchers.anyDouble()", "org.mockito.Matchers.anyCollectionOf(java.lang.Class)", "org.mockito.Matchers.anyBoolean()", "org.mockito.Matchers.anyMap()", "org.mockito.Matchers.anyString()", "org.mockito.Matchers.anyByte()", "org.mockitousage.forObject(java.lang.Object)", "org.mockito.Matchers.anySet()", "org.mockito.Matchers.anyCollection()", "org.mockito.Matchers.any(java.lang.Class)", "org.mockitousage.MethodsImpl.forObject(java.lang.Object)", "org.mockito.Matchers.anyList()", "org.mockito.Matchers.anyVararg()", "org.mockito.Matchers.anyListOf(java.lang.Class)", "org.mockito.Matchers.anyLong()", "org.mockito.Matchers.any()", "org.mockito.Matchers.anyChar()", "org.mockito.Matchers.anyInt()", "org.mockito.Matchers.anyObject()", "org.mockito.Matchers.anyShort()"]}, {"title": "Mockito can't spy on object loaded in parent classloader", "body": "I have encountered issue with Mockito (I have tested this on 1.10.14) and usage of different classloaders - running tests in SBT 0,13.\n\nI have got empty class _TestClass_ and following test:\n\n``` Java\n    @Test\n    public void runTest() {\n        Mockito.spy(new TestClass(){\n\n        });\n    }\n```\n\nThis test fails with following: \n\n```\nCaused by: org.mockito.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException-->null\n[error]     at org.mockito.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:238)\n[error]     at org.mockito.cglib.proxy.Enhancer.createHelper(Enhancer.java:378)\n[error]     at org.mockito.cglib.proxy.Enhancer.createClass(Enhancer.java:318)\n[error]     at org.mockito.internal.creation.cglib.ClassImposterizer.createProxyClass(ClassImposterizer.java:123)\n[error]     at org.mockito.internal.creation.cglib.ClassImposterizer.imposterise(ClassImposterizer.java:57)\n[error]     at org.mockito.internal.creation.cglib.ClassImposterizer.imposterise(ClassImposterizer.java:49)\n[error]     at org.mockito.internal.creation.cglib.CglibMockMaker.createMock(CglibMockMaker.java:24)\n[error]     at org.mockito.internal.util.MockUtil.createMock(MockUtil.java:33)\n[error]     at org.mockito.internal.MockitoCore.mock(MockitoCore.java:59)\n[error]     at org.mockito.Mockito.spy(Mockito.java:1367)\n[error]     ... 56 more\n[error] Caused by: java.lang.reflect.InvocationTargetException\n[error]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[error]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n[error]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n[error]     at java.lang.reflect.Method.invoke(Method.java:606)\n[error]     at org.mockito.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:385)\n[error]     at org.mockito.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:220)\n[error]     ... 65 more\n[error] Caused by: java.lang.IllegalAccessError: class TestMock$1$$EnhancerByMockitoWithCGLIB$$7c797c20 cannot access its superclass TestMock$1\n[error]     at java.lang.ClassLoader.defineClass1(Native Method)\n[error]     at java.lang.ClassLoader.defineClass(ClassLoader.java:800)\n```\n\nLooks like there is class loader issue - in sbt, the default classloader is the one for the sbt launcher, but you are \"run\" in a sub classloader.\n\nFollowing calls give different result: _Thread.currentThread().getContextClassLoader().getClass();_ and _TestClass.class.getClassLoader().getClass();_ \nThe second one is the parent of the first one.\n\nOf course there is no issue running this piece of code in IDE, but in my opinion this is Mockito's problem, something which could be improved. \n\nIs it possible to have this fixed in Mockito? I would say so because changing current classloader to the one used to load the class solves the issue. \n", "url": "https://github.com/mockito/mockito/issues/133", "user": "akomisarek", "labels": ["bug", "enhancement", "wontfix"], "created": "2014-12-10 19:57:49", "closed": "2016-08-22 13:02:15", "commits": {}, "ttf": 620.0002777777778, "commitsDetails": []}, {"title": "Deep stubbing with generic responses in the call chain is not working", "body": "Deep stubbing will throw an Exception if multiple generics occur in the call chain. For instance, consider having a mock `myMock1` that provides a function that returns a generic `T`. If `T` also has a function that returns a generic, an Exception with the message \"Raw extraction not supported for : 'null'\" will be thrown.\n\nAs an example the following test will throw an Exception:\n\n``` Java\npublic class MockitoGenericsDeepStubTest {\n\n    @Test\n    public void discoverDeepMockingOfGenerics() {\n        MyClass1 myMock1 = mock(MyClass1.class, RETURNS_DEEP_STUBS);\n\n        when(myMock1.getNested().getNested().returnSomething()).thenReturn(\"Hello World.\");\n    }\n\n    public static interface MyClass1 <MC2 extends MyClass2> {\n        public MC2 getNested();\n    }\n\n    public static interface MyClass2<MC3 extends MyClass3> {\n        public MC3 getNested();\n    }\n\n    public static interface MyClass3 {\n        public String returnSomething();\n    }\n}\n```\n\nYou can make this test run if you step into the class `ReturnsDeepStubs` and change the method `withSettingsUsing` to return `MockSettings` with `ReturnsDeepStubs` instead of `ReturnsDeepStubsSerializationFallback` as default answer:\n\n``` Java\nprivate MockSettings withSettingsUsing(GenericMetadataSupport returnTypeGenericMetadata, MockCreationSettings parentMockSettings) {\n    MockSettings mockSettings = returnTypeGenericMetadata.hasRawExtraInterfaces() ?\n            withSettings().extraInterfaces(returnTypeGenericMetadata.rawExtraInterfaces())\n            : withSettings();\n\n    return propagateSerializationSettings(mockSettings, parentMockSettings)\n            .defaultAnswer(this);\n}\n```\n\nHowever, this breaks other tests and features.\n\nI think, the issue is that further generics are not possible to be mocked by `ReturnsDeepStubsSerializationFallback` since the `GenericMetadataSupport` is \"closed\" at this point.\n\nThanks and kind regards\nTobias\n", "url": "https://github.com/mockito/mockito/issues/128", "user": "tmuehl", "labels": ["bug"], "created": "2014-12-01 15:14:20", "closed": "2014-12-31 16:39:52", "commits": {"3ca1ba3757dc8ecda0e7292599306ab94a611ad6": {"commitGHEventType": "closed", "commitUser": "mockitoguy"}}, "ttf": 30.00027777777778, "commitsDetails": [{"commitHash": "3ca1ba3757dc8ecda0e7292599306ab94a611ad6", "commitGHEventType": "closed", "commitUser": "mockitoguy", "commitParents": ["3c8892b8a077598ecf988115214e5e01c310b08b", "eea214c6e9444568542eb9210327f195087407b0"], "nameRev": "3ca1ba3757dc8ecda0e7292599306ab94a611ad6 tags/v1.10.19~1^2", "commitMessage": "Merged pbielicki-bug#128 onto the master\n\nFixes #128\n", "commitDateTime": "2014-12-31 17:37:36", "authoredDateTime": "2014-12-31 17:37:36", "commitGitStats": [{"filePath": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "test/org/mockitousage/bugs/deepstubs/DeepStubFailingWhenGenricNestedAsRawTypeTest.java", "insertions": 28, "deletions": 0, "lines": 28}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GenericMetadataSupport.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.reflection.GenericMetadataSupport.registerTypeParametersOn(java.lang.reflect.TypeVariable[])", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.reflection.GenericMetadataSupport.TypeVariableReturnType.readTypeVariables()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "GenericMetadataSupportTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.reflection.GenericMetadataSupportTest", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "DeepStubFailingWhenGenricNestedAsRawTypeTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.deepstubs.DeepStubFailingWhenGenricNestedAsRawTypeTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Problem spying on abstract classes", "body": "There's a problem with spying on abstract classes when the real implementation calls out to the abstract method. More details: #121 \n", "url": "https://github.com/mockito/mockito/issues/122", "user": "mockitoguy", "labels": ["bug"], "created": "2014-11-22 21:12:51", "closed": "2014-11-22 21:14:13", "commits": {"31f908029b8cd9b1f32bed3a41651b30ebb47b9f": {"commitGHEventType": "referenced", "commitUser": "mockitoguy"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "31f908029b8cd9b1f32bed3a41651b30ebb47b9f", "commitGHEventType": "referenced", "commitUser": "mockitoguy", "commitParents": ["f45c2dc0c21f365218fa093106e45dbb0b54746a"], "nameRev": "31f908029b8cd9b1f32bed3a41651b30ebb47b9f tags/v1.10.13~3", "commitMessage": "Changed CallsRealMethods to delegate to default answer for abstract methods.\n\nFixes #122\n", "commitDateTime": "2014-11-22 22:13:29", "authoredDateTime": "2014-11-22 10:36:41", "commitGitStats": [{"filePath": "src/org/mockito/internal/stubbing/answers/CallsRealMethods.java", "insertions": 10, "deletions": 5, "lines": 15}, {"filePath": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java", "insertions": 28, "deletions": 1, "lines": 29}], "commitSpoonAstDiffStats": [{"spoonFilePath": "CallsRealMethods.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.answers.CallsRealMethods.answer(org.mockito.invocation.InvocationOnMock)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CreatingMocksWithConstructorTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.AbstractThing", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.abstractMethodReturnsDefault()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.abstractMethodStubbed()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockitousage.constructor.CreatingMocksWithConstructorTest.testCallsRealInterfaceMethod()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["31f908029b8cd9b1f32bed3a41651b30ebb47b9f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 5, "lines": 15, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/org/mockito/internal/stubbing/answers"], "changesInPackagesSPOON": ["org.mockito.internal.stubbing.answers.CallsRealMethods.answer(org.mockito.invocation.InvocationOnMock)"]}, {"title": "1.10 regression (StackOverflowError) with interface where generic type has itself as upper bound", "body": "Add this to `GenericMetadataSupportTest`:\n\n``` java\n    interface GenericsSelfReference<T extends GenericsSelfReference<T>> {\n        T self();\n    }\n\n    @Test\n    public void typeVariable_of_self_type() {\n        GenericMetadataSupport genericMetadata = inferFrom(GenericsSelfReference.class).resolveGenericReturnType(firstNamedMethod(\"self\", GenericsSelfReference.class));\n\n        assertThat(genericMetadata.rawType()).isEqualTo(GenericsSelfReference.class);\n    }\n```\n\nIt fails on master and 1.10.8 with this:\n\n```\njava.lang.StackOverflowError\n    at sun.reflect.generics.reflectiveObjects.TypeVariableImpl.hashCode(TypeVariableImpl.java:201)\n    at java.util.HashMap.hash(HashMap.java:338)\n    at java.util.HashMap.get(HashMap.java:556)\n    at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:193)\n    at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:196)\n    at org.mockito.internal.util.reflection.GenericMetadataSupport.getActualTypeArgumentFor(GenericMetadataSupport.java:196)\n```\n\nIt worked on 1.9.5. May be caused by the changes in ab9e9f3 (cc @bric3).\n\n(Also note that while the above interface looks strange, it is commonly used for builder hierarchies, where base class methods want to return this with a more specific type.)\n", "url": "https://github.com/mockito/mockito/issues/114", "user": "robinst", "labels": ["bug"], "created": "2014-10-28 02:56:25", "closed": "2014-12-30 07:28:02", "commits": {"5a03bf5d0c9aedac9cfbf074833167c1eca6439f": {"commitGHEventType": "referenced", "commitUser": "mockitoguy"}}, "ttf": 63.000277777777775, "commitsDetails": [{"commitHash": "5a03bf5d0c9aedac9cfbf074833167c1eca6439f", "commitGHEventType": "referenced", "commitUser": "mockitoguy", "commitParents": ["9fb7d8b62814f959ceca6096d785b96c11bdfd0a"], "nameRev": "5a03bf5d0c9aedac9cfbf074833167c1eca6439f tags/v1.10.18~1", "commitMessage": "Fixes issue #114\n", "commitDateTime": "2014-12-29 22:59:47", "authoredDateTime": "2014-12-15 14:56:02", "commitGitStats": [{"filePath": "src/org/mockito/internal/util/reflection/GenericMetadataSupport.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java", "insertions": 10, "deletions": 1, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GenericMetadataSupport.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.reflection.GenericMetadataSupport.registerTypeVariablesOn(java.lang.reflect.Type)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "GenericMetadataSupportTest.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.util.reflection.GenericMetadataSupportTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.util.reflection.GenericMetadataSupportTest.typeVariable_of_self_type()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5a03bf5d0c9aedac9cfbf074833167c1eca6439f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/org/mockito/internal/util/reflection"], "changesInPackagesSPOON": ["org.mockito.internal.util.reflection.GenericMetadataSupport.registerTypeVariablesOn(java.lang.reflect.Type)"]}, {"title": "Jar contains duplicate txt files", "body": "To reproduce attempt unzipping the jar file.\n", "url": "https://github.com/mockito/mockito/issues/110", "user": "mockitoguy", "labels": ["bug"], "created": "2014-10-23 22:44:30", "closed": "2014-11-22 12:42:52", "commits": {}, "ttf": 29.00027777777778, "commitsDetails": []}, {"title": "Documentation mentions non-existing version 1.9.8 in few places", "body": "Documentation mentions non-existing version 1.9.8 in few places.\n", "url": "https://github.com/mockito/mockito/issues/101", "user": "mockitoguy", "labels": ["bug"], "created": "2014-10-08 18:13:11", "closed": "2014-10-08 18:24:14", "commits": {"440ce5a4ac3acaa85af0f351216726ddec6639e4": {"commitGHEventType": "closed", "commitUser": "mockitoguy"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "440ce5a4ac3acaa85af0f351216726ddec6639e4", "commitGHEventType": "closed", "commitUser": "mockitoguy", "commitParents": ["407c84963477d441cc6e4b44421b440db0ed5d46"], "nameRev": "440ce5a4ac3acaa85af0f351216726ddec6639e4 tags/v1.10.7~4", "commitMessage": "Fixed #101 removed non-existing version from docs\n", "commitDateTime": "2014-10-08 20:16:46", "authoredDateTime": "2014-10-08 20:16:46", "commitGitStats": [{"filePath": "src/org/mockito/MockSettings.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/org/mockito/Mockito.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MockSettings.java", "spoonMethods": []}, {"spoonFilePath": "Mockito.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["440ce5a4ac3acaa85af0f351216726ddec6639e4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/org/mockito"]}, {"title": "RETURNS_DEEP_STUBS automatically tries to create serializable mocks", "body": "I am just migrating from mockito 1.9.5 to 1.10.5\n\nThe following code runs fine with version 1.9.5. but breaks now:\n\n``` java\n\n  @Test\n  public void test() {\n    ToBeMocked mock = mock(ToBeMocked.class, RETURNS_DEEP_STUBS);\n    assertThat(mock.getSomething()).isNotNull();\n  }\n\n  public static class ToBeMocked {\n\n    NotSerializableReturnValue field1;\n\n    public ToBeMocked(NotSerializableReturnValue field1) {\n      this.field1 = field1;\n    }\n\n    public NotSerializableReturnValue getSomething() {\n      return field1;\n    }\n  }\n\n  public static class NotSerializableReturnValue {\n\n    String field1 = \"\";\n\n    public NotSerializableReturnValue(String field1) {\n      this.field1 = field1;\n    }\n\n    public String getSomething2() {\n      return field1;\n    }\n  }\n```\n\norg.mockito.exceptions.base.MockitoException: \nYou are using the setting 'withSettings().serializable()' however the type you are trying to mock 'NotSerializableReturnValue'\ndo not implement Serializable AND do not have a no-arg constructor.\n", "url": "https://github.com/mockito/mockito/issues/99", "user": "joerg-pfruender-hp", "labels": ["bug"], "created": "2014-10-08 13:49:48", "closed": "2014-10-10 02:26:28", "commits": {"e54756598483b9f9cbe80bf20344edad1191d777": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "1beeae39ac9f79d6a0db285dec311b78025ac062": {"commitGHEventType": "referenced", "commitUser": "bric3"}, "386aa276d427cfa827b2345fa80b57a3ed7698a9": {"commitGHEventType": "referenced", "commitUser": "bric3"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "e54756598483b9f9cbe80bf20344edad1191d777", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["6bdc52da79cadc0bc4f4e0b514e9f89ffcc170cc"], "nameRev": "e54756598483b9f9cbe80bf20344edad1191d777 tags/v1.10.8~1^2", "commitMessage": "Fixes issue #99 deep stubs where automatically marked as serializable\n\nWith this commit children mocks will use the serialization mode their parent\n", "commitDateTime": "2014-10-09 16:22:32", "authoredDateTime": "2014-10-09 16:15:37", "commitGitStats": [{"filePath": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java", "insertions": 14, "deletions": 6, "lines": 20}, {"filePath": "test/org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java", "insertions": 32, "deletions": 0, "lines": 32}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ReturnsDeepStubs.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.withSettingsUsing(org.mockito.internal.util.reflection.GenericMetadataSupport)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.propagateSerializationSettings(org.mockito.MockSettings,org.mockito.mock.MockCreationSettings)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.newDeepStubMock(org.mockito.internal.util.reflection.GenericMetadataSupport,java.lang.Object)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.withSettingsUsing(org.mockito.internal.util.reflection.GenericMetadataSupport,org.mockito.mock.MockCreationSettings)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.deepStub(org.mockito.invocation.InvocationOnMock,org.mockito.internal.util.reflection.GenericMetadataSupport)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DeepStubsWronglyReportsSerializationProblemsTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "1beeae39ac9f79d6a0db285dec311b78025ac062", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["b00a6d252f87c886e5f8830bbdb6c1af2bd0ee9c", "e54756598483b9f9cbe80bf20344edad1191d777"], "nameRev": "1beeae39ac9f79d6a0db285dec311b78025ac062 tags/v1.10.8~1", "commitMessage": "Merge pull request #103 from mockito/fixes-issue-99\n\nFixes issue #99", "commitDateTime": "2014-10-10 02:44:43", "authoredDateTime": "2014-10-10 02:44:43", "commitGitStats": [{"filePath": "src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java", "insertions": 27, "deletions": 17, "lines": 44}, {"filePath": "test/org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java", "insertions": 32, "deletions": 0, "lines": 32}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ReturnsDeepStubs.java", "spoonMethods": [{"spoonMethodName": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.withSettingsUsing(org.mockito.internal.util.reflection.GenericMetadataSupport)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.propagateSerializationSettings(org.mockito.MockSettings,org.mockito.mock.MockCreationSettings)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.newDeepStubMock(org.mockito.internal.util.reflection.GenericMetadataSupport,java.lang.Object)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.withSettingsUsing(org.mockito.internal.util.reflection.GenericMetadataSupport,org.mockito.mock.MockCreationSettings)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.deepStub(org.mockito.invocation.InvocationOnMock,org.mockito.internal.util.reflection.GenericMetadataSupport)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DeepStubsWronglyReportsSerializationProblemsTest.java", "spoonMethods": [{"spoonMethodName": "org.mockitousage.bugs.DeepStubsWronglyReportsSerializationProblemsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "386aa276d427cfa827b2345fa80b57a3ed7698a9", "commitGHEventType": "referenced", "commitUser": "bric3", "commitParents": ["2afff7b59f5cf7286d6f21d56c7f048b1ddd0391"], "nameRev": "386aa276d427cfa827b2345fa80b57a3ed7698a9 tags/v1.10.9~17", "commitMessage": "Reuse message of issue #99 for PR #103\n\n[ci skip]", "commitDateTime": "2014-10-10 05:48:00", "authoredDateTime": "2014-10-10 05:48:00", "commitGitStats": [{"filePath": "doc/release-notes/official.md", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e54756598483b9f9cbe80bf20344edad1191d777"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 2, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 14, "deletions": 6, "lines": 20, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7.0, "UPD": 1.0, "INS": 6.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 1, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/org/mockito/internal/stubbing/defaultanswers"], "changesInPackagesSPOON": ["org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.deepStub(org.mockito.invocation.InvocationOnMock,org.mockito.internal.util.reflection.GenericMetadataSupport)", "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.newDeepStubMock(org.mockito.internal.util.reflection.GenericMetadataSupport,java.lang.Object)", "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.withSettingsUsing(org.mockito.internal.util.reflection.GenericMetadataSupport,org.mockito.mock.MockCreationSettings)", "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.withSettingsUsing(org.mockito.internal.util.reflection.GenericMetadataSupport)", "org.mockito.internal.stubbing.defaultanswers.ReturnsDeepStubs.propagateSerializationSettings(org.mockito.MockSettings,org.mockito.mock.MockCreationSettings)"]}, {"title": "Ensure continuous deployment process does not produce \"-dev\" versions", "body": "I used \"-dev\" postfix for versions when developing the continuous deployment process. Now it should not be used.\n", "url": "https://github.com/mockito/mockito/issues/88", "user": "mockitoguy", "labels": ["bug"], "created": "2014-09-26 16:26:11", "closed": "2014-09-26 16:28:15", "commits": {"8fe651b992013cb752bdfec437969b7507dd6c1f": {"commitGHEventType": "closed", "commitUser": "mockitoguy"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "8fe651b992013cb752bdfec437969b7507dd6c1f", "commitGHEventType": "closed", "commitUser": "mockitoguy", "commitParents": ["78f4fc0c4007242c012d3159bb8760590f43575f"], "nameRev": "8fe651b992013cb752bdfec437969b7507dd6c1f tags/v1.10.2~2", "commitMessage": "Fixed #88 the continuous deployment should not product \"-dev\" versions\n\nRemoved the hack from version.gradle that had a TODO attached to remove it before the release :)\n", "commitDateTime": "2014-09-26 18:26:53", "authoredDateTime": "2014-09-26 18:26:53", "commitGitStats": [{"filePath": "gradle/version.gradle", "insertions": 2, "deletions": 3, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8fe651b992013cb752bdfec437969b7507dd6c1f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 3, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["gradle"]}]}