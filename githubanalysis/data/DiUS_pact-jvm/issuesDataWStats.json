{"projectName": "DiUS/pact-jvm", "bugLabels": ["bug"], "captureTime": "Sat Jul  4 02:20:10 2020", "issues": [{"title": "Content-Type header check is case sensitive", "body": "I was getting anomalous behavior where the Content-Type header wasn't matching; when I had the expected value as \"application/json\" it would tell me it was failing to match \"application/json; charset=UTF-8\" and when I expected the latter it would tell me it was failing to match the former. I finally discovered that there were two Content-[Tt]ype headers in the received request. \r\n\r\nIt turns out that my client was sending only one Content-type header, but that there is a case-sensitive check in PactDslRequestWithPath in the body(DslPart) method which says that if the request headers do not contain the key \"Content-Type\" to add it. This is a case-sensitive match and results in two headers on the request if the client is sending the header with a different case.", "url": "https://github.com/DiUS/pact-jvm/issues/1121", "user": "psfblair", "labels": ["bug"], "created": "2020-06-13 04:32:44", "closed": "2020-06-20 06:56:09", "commits": {"0fa689f26396ee3f7cc965cd77501c50309ae9e9": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "0fa689f26396ee3f7cc965cd77501c50309ae9e9", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["04236db95c683f3a683df9d9a1f7e774df3cd8d2"], "nameRev": "0fa689f26396ee3f7cc965cd77501c50309ae9e9 tags/4_1_2~12", "commitMessage": "fix: content type header check must be case insenstive #1121\n", "commitDateTime": "2020-06-14 11:18:53", "authoredDateTime": "2020-06-14 11:18:53", "commitGitStats": [{"filePath": "consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestBase.java", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 9, "deletions": 9, "lines": 18}, {"filePath": "consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java", "insertions": 8, "deletions": 8, "lines": 16}, {"filePath": "consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslResponse.java", "insertions": 19, "deletions": 10, "lines": 29}, {"filePath": "consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslRequestWithPathSpec.groovy", "insertions": 16, "deletions": 0, "lines": 16}, {"filePath": "consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPathSpec.groovy", "insertions": 19, "deletions": 0, "lines": 19}, {"filePath": "consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslResponseSpec.groovy", "insertions": 16, "deletions": 0, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslRequestBase.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestBase.isContentTypeHeaderNotSet()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestBase.getContentTypeHeader()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.json.JSONObject)", "TOT": 7, "UPD": 1, "INS": 2, "MOV": 1, "DEL": 3}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String,org.apache.http.entity.ContentType)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier,org.apache.http.entity.ContentType)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 3}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.w3c.dom.Document)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 3}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.xml.PactXmlBuilder)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 3}]}, {"spoonFilePath": "PactDslRequestWithoutPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.json.JSONObject)", "TOT": 8, "UPD": 2, "INS": 2, "MOV": 2, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 8, "UPD": 2, "INS": 2, "MOV": 2, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.w3c.dom.Document)", "TOT": 8, "UPD": 2, "INS": 2, "MOV": 2, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(au.com.dius.pact.consumer.xml.PactXmlBuilder)", "TOT": 8, "UPD": 2, "INS": 2, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "PactDslResponse.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(au.com.dius.pact.consumer.xml.PactXmlBuilder)", "TOT": 8, "UPD": 3, "INS": 2, "MOV": 2, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(org.json.JSONObject)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(org.w3c.dom.Document)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.isContentTypeHeaderNotSet()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.getContentTypeHeader()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0fa689f26396ee3f7cc965cd77501c50309ae9e9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 46, "deletions": 27, "lines": 73, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 86, "UPD": 12, "INS": 33, "MOV": 11, "DEL": 30, "spoonFilesChanged": 4, "spoonMethodsChanged": 19}, "statsSkippedReason": "", "changesInPackagesGIT": ["consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier,org.apache.http.entity.ContentType)", "au.com.dius.pact.consumer.dsl.PactDslRequestBase.isContentTypeHeaderNotSet()", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath", "au.com.dius.pact.consumer.dsl.PactDslResponse.isContentTypeHeaderNotSet()", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(au.com.dius.pact.consumer.xml.PactXmlBuilder)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(au.com.dius.pact.consumer.xml.PactXmlBuilder)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String,org.apache.http.entity.ContentType)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.w3c.dom.Document)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.xml.PactXmlBuilder)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(org.json.JSONObject)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(org.w3c.dom.Document)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.w3c.dom.Document)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.json.JSONObject)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.json.JSONObject)", "au.com.dius.pact.consumer.dsl.PactDslResponse.getContentTypeHeader()", "au.com.dius.pact.consumer.dsl.PactDslRequestBase.getContentTypeHeader()"]}, {"title": "Provider 4.1.0 verifies only first tag from the list", "body": "Hi,\r\n\r\nI have updated to latest provider 4.1.0 and looks like it broke verification for multiple tags.\r\n```\r\n'au.com.dius.pact.provider:junit5:4.1.0'\r\n'au.com.dius.pact.provider:spring:4.1.0'\r\n'au.com.dius.pact.provider:junit5spring:4.1.0'\r\n```\r\nWhen there is more then one tag e.g `systemProperty 'pactbroker.tags', 'dev,master'` then only first seems to be verified. Please see below examples where `dev` tagged contract has 2 interactions and `master` 1.\r\n**provider 4.0.10:**\r\n![4 0 10](https://user-images.githubusercontent.com/32245059/83750998-6df6fe80-a666-11ea-9813-221772481b0e.png)\r\n**provider 4.1.0:**\r\nOnly `dev` tag is verified\r\n![4 1 0](https://user-images.githubusercontent.com/32245059/83751236-c928f100-a666-11ea-9aa9-34ef0781ec8e.png)\r\n\r\nNot sure if it's related to **Bug** https://github.com/DiUS/pact-jvm/issues/1086\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/1113", "user": "s1apped", "labels": ["bug"], "created": "2020-06-04 11:29:21", "closed": "2020-06-12 00:05:52", "commits": {"174acc0bd067ffd5a8441d4fce215359e0bfbcd4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "174acc0bd067ffd5a8441d4fce215359e0bfbcd4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["7204b9cd1b570434e37b32192ca6ba1ac71a6a2e", "5d22eda45eb0ef5b9bd9228b3bee5d8fb5c5d29a"], "nameRev": "174acc0bd067ffd5a8441d4fce215359e0bfbcd4 tags/4_1_2~20", "commitMessage": "Merge pull request #1116 from anto-ac/fix-1113-verify-all-tags\n\nfix: #1113 verify all tags and not just the first", "commitDateTime": "2020-06-12 10:05:51", "authoredDateTime": "2020-06-12 10:05:51", "commitGitStats": [{"filePath": "core/pactbroker/src/main/kotlin/au/com/dius/pact/core/pactbroker/PactBrokerClient.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/pactbroker/src/test/groovy/au/com/dius/pact/core/pactbroker/PactBrokerClientSpec.groovy", "insertions": 30, "deletions": 0, "lines": 30}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Provider verification succeeds only for the first tag of a consumer", "body": "I have Pact provider verification tests which is verifying two tags of each consumer from the Pact Broker: `@PactBroker(\r\n        host = \"...\",\r\n        port = \".\",\r\n        tags = \"master,prod\"\r\n)`\r\n\r\nThe test execution goes fine: for each interaction, there are two tests run (one for the `master` tag, the other for the `prod` tag).\r\n\r\nAs expected, the penultimate state test prints that there's 1 more interaction to verify for both the tags (it's a pity the tag names are not printed, but it's a different issue).\r\n\r\n```\r\nVerifying a pact between my-consumer and my-provider\r\n  Given employee list exists\r\n  list retrieval\r\nDEBUG  [CALL] Completed filtering of request -> GET /my-url\r\n    returns a response which\r\n      has status code 200 (OK)\r\n      has a matching body (OK)\r\n\r\nWARN   [DefaultTestResultAccumulator] Not all of the 31 were verified. The following were missing:\r\nWARN   [DefaultTestResultAccumulator]     customer history retrieval\r\n\r\n\r\nVerifying a pact between my-consumer and my-provider\r\n  Given employee list exists\r\n  list retrieval\r\nDEBUG  [CALL] Completed filtering of request ->  GET /my-url\r\n    returns a response which\r\n      has status code 200 (OK)\r\n      has a matching body (OK)\r\n\r\nWARN   [DefaultTestResultAccumulator] Not all of the 31 were verified. The following were missing:\r\nWARN   [DefaultTestResultAccumulator]     customer history retrieval\r\n```\r\n\r\nThings get interesting on the last test. The first pact with the first tag gets their pacts verified (result is not published because I'm running tests locally), but the the pact with the second tag gets its verified interactions count reset and the pact is not verified.\r\n\r\n```\r\nVerifying a pact between my-consumer and my-provider\r\n  Given customer history exist for customer #1\r\n  customer history retrieval\r\nDEBUG  [CALL] Completed filtering of request -> GET /my-url-2\r\n    returns a response which\r\n      has status code 200 (OK)\r\n      has a matching body (OK)\r\n\r\nWARN   [DefaultTestResultAccumulator] Skipping publishing of verification results as it has been disabled (pact.verifier.publishResults is not 'true')\r\n\r\n\r\nVerifying a pact between my-consumer and my-provider\r\n  Given customer history exist for customer #1\r\n  customer history retrieval\r\nDEBUG  [CALL] Completed filtering of request -> GET GET /my-url-2\r\n    returns a response which\r\n      has status code 200 (OK)\r\n      has a matching body (OK)\r\n\r\nWARN   [DefaultTestResultAccumulator] Not all of the 31 were verified. The following were missing:\r\nWARN   [DefaultTestResultAccumulator]     get API version\r\nWARN   [DefaultTestResultAccumulator]     login with valid credentials\r\n... The list continues with 28 more unverified interactions\r\n\r\n```\r\n\r\nI dug into the code a bit and it seems the problem is that `DefaultTestResultAccumulator` uses hash of a Pact to store interaction results. The hash is calculated using only consumer and provider name:\r\n\r\n```  fun calculatePactHash(pact: Pact<out Interaction>) =\r\n    HashCodeBuilder().append(pact.consumer.name).append(pact.provider.name).toHashCode()\r\n```\r\n\r\nThis means that differently tagged pacts of the same consumer have the same hash. Then, once one pact is fully verified, pact hash is removed from the `testResults` map: https://github.com/DiUS/pact-jvm/blob/master/provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/TestResultAccumulator.kt#L60 \r\n\r\nIt seems like a solution could be to change the `calculatePactHash` to also take into account tag or consumer version.", "url": "https://github.com/DiUS/pact-jvm/issues/1086", "user": "pkuras", "labels": ["bug"], "created": "2020-05-07 13:08:04", "closed": "2020-06-22 10:56:06", "commits": {"1be98473d67950c759cf007283884d8832f928b4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 45.000277777777775, "commitsDetails": [{"commitHash": "1be98473d67950c759cf007283884d8832f928b4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["14d39dc0d6268713fe49193c13c97aaefa3520b9"], "nameRev": "1be98473d67950c759cf007283884d8832f928b4 tags/4_1_0~3^2~10", "commitMessage": "fix: include any tag when accumulating JUnit test results #1086\n", "commitDateTime": "2020-05-10 12:14:08", "authoredDateTime": "2020-05-10 12:14:08", "commitGitStats": [{"filePath": "provider/pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/InteractionRunner.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "provider/pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/InteractionRunnerSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/PactJUnit5VerificationProvider.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/TestResultAccumulator.kt", "insertions": 27, "deletions": 10, "lines": 37}, {"filePath": "provider/pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/TestResultAccumulatorSpec.groovy", "insertions": 47, "deletions": 13, "lines": 60}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1be98473d67950c759cf007283884d8832f928b4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider", "provider/pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider"]}, {"title": "When using valueFromProviderState within array, the generated index starts with -1", "body": "I have a POST request to get status of the list of users as below:\r\n\r\n.path(\"/userStatus\")\r\n.method(POST)\r\n\r\nBody:\r\n{\r\n    \"userIds\":[\"id1\", \"id2\"]\r\n}\r\n\r\n\r\nwhere id1, id2 are retrieved from provider states\r\n\r\nI define the pact by using valueFromProviderState to inject values from provider state : \r\n.path(\"/userStatus\")\r\n.method(POST)\r\n.body(new PactDslJsonBody()\r\n        .array(\"userIds\")\r\n        .valueFromProviderState(\"${id1}\",\"John\")\r\n        .valueFromProviderState(\"${id2}\",\"Marry\")\r\n            .closeArray()\r\n)\r\n\r\nAnd Pact generated like:\r\n\r\n\"body\": {\r\n          \"userIds\": [\r\n            \"John\",\r\n            \"Marry\"\r\n          ]\r\n        },\r\n        \"generators\": {\r\n          \"body\": {\r\n            \"$.userIds[-1]\": {\r\n              \"type\": \"ProviderState\",\r\n              \"expression\": \"${id1}\"\r\n            },\r\n            \"$.userIds[0]\": {\r\n              \"type\": \"ProviderState\",\r\n              \"expression\": \"${id2}\"\r\n            }\r\n          }\r\n        }\r\n\t\t}\r\n\r\nThe index \"-1\" makes the pact Verification error. I tried updating the indexes to start with 0 manually and it works correctly. \r\n\r\nPlease help to update the framework so that the index starts with 0 in this case. Thanks\r\n\r\nI am using version 3.6.14", "url": "https://github.com/DiUS/pact-jvm/issues/1074", "user": "tainguyenvn", "labels": ["bug"], "created": "2020-04-22 08:17:01", "closed": "2020-05-04 08:34:31", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "java.lang.NoClassDefFoundError: com.amazonaws.services.s3.AmazonS3", "body": "When trying to make Spring Cloud Contract work with 4.0.8 version of Pact JVM Consumer, I get the following exception\r\n\r\n```\r\nCaused by: org.codehaus.groovy.control.MultipleCompilationErrorsException: startup failed:\r\nGeneral error during instruction selection: java.lang.NoClassDefFoundError: com.amazonaws.services.s3.AmazonS3                                                       \r\n                                                                                                                                                                     \r\njava.lang.RuntimeException: java.lang.NoClassDefFoundError: com.amazonaws.services.s3.AmazonS3                                                                       \r\n        at org.codehaus.groovy.control.CompilationUnit.convertUncaughtExceptionToCompilationError(CompilationUnit.java:1118)                                         \r\n        at org.codehaus.groovy.control.CompilationUnit.applyToPrimaryClassNodes(CompilationUnit.java:1098)                                                           \r\n        at org.codehaus.groovy.control.CompilationUnit.doPhaseOperation(CompilationUnit.java:640)                                                                    \r\n        at org.codehaus.groovy.control.CompilationUnit.processPhaseOperations(CompilationUnit.java:618)                                                              \r\n        at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:595)                                                                             \r\n        at org.codehaus.groovy.control.CompilationUnit.compile(CompilationUnit.java:574)                                                                             \r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)                                                                                               \r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)                                                                             \r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)                                                                     \r\n        at java.lang.reflect.Method.invoke(Method.java:498)                                                                                                          \r\n        at org.codehaus.gmavenplus.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:213)   \r\n```\r\n\r\nWhen checking the dependencies I can see that I have a dependency on `AmazonS3`. \r\n\r\n```\r\n[INFO] +- au.com.dius:pact-jvm-consumer-java8:jar:4.0.8:compile\r\n[INFO] |  \\- au.com.dius:pact-jvm-consumer:jar:4.0.8:compile\r\n[INFO] |     +- com.googlecode.java-diff-utils:diffutils:jar:1.3.0:compile\r\n[INFO] |     +- dk.brics.automaton:automaton:jar:1.11-8:compile\r\n[INFO] |     +- org.json:json:jar:20160212:compile\r\n[INFO] |     +- io.netty:netty-handler:jar:4.1.48.Final:compile\r\n[INFO] |     |  +- io.netty:netty-common:jar:4.1.48.Final:compile\r\n[INFO] |     |  +- io.netty:netty-resolver:jar:4.1.48.Final:compile\r\n[INFO] |     |  +- io.netty:netty-buffer:jar:4.1.48.Final:compile\r\n[INFO] |     |  +- io.netty:netty-transport:jar:4.1.48.Final:compile\r\n[INFO] |     |  \\- io.netty:netty-codec:jar:4.1.48.Final:compile\r\n[INFO] |     +- org.apache.httpcomponents:httpmime:jar:4.5.12:compile\r\n[INFO] |     +- au.com.dius:pact-jvm-core-model:jar:4.0.8:compile\r\n[INFO] |     |  +- com.github.zafarkhaja:java-semver:jar:0.9.0:compile\r\n[INFO] |     |  +- org.apache.commons:commons-collections4:jar:4.1:compile\r\n[INFO] |     |  +- com.github.mifmif:generex:jar:1.0.2:compile\r\n[INFO] |     |  \\- com.amazonaws:aws-java-sdk-s3:jar:1.11.587:runtime\r\n[INFO] |     |     +- com.amazonaws:aws-java-sdk-kms:jar:1.11.587:runtime\r\n[INFO] |     |     +- com.amazonaws:aws-java-sdk-core:jar:1.11.587:runtime\r\n[INFO] |     |     |  +- software.amazon.ion:ion-java:jar:1.0.2:runtime\r\n[INFO] |     |     |  +- com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:jar:2.10.3:runtime\r\n[INFO] |     |     |  \\- joda-time:joda-time:jar:2.8.1:runtime\r\n[INFO] |     |     \\- com.amazonaws:jmespath-java:jar:1.11.587:runtime\r\n```\r\n\r\nOf course I don't use `AmazonS3` at all. Can you mark this as optional or maybe I'm doing something wrong?", "url": "https://github.com/DiUS/pact-jvm/issues/1063", "user": "marcingrzejszczak", "labels": ["bug"], "created": "2020-04-02 14:56:42", "closed": "2020-05-07 00:51:35", "commits": {"3b00d9ec3bcd16169fbac43f8a72133adbf778d8": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "d57fcefa3157e101bea42d5d45094b62f86ed3ae": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 34.000277777777775, "commitsDetails": [{"commitHash": "3b00d9ec3bcd16169fbac43f8a72133adbf778d8", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["2ed86d39aceddc76325b9b2b7ec5d30c6bc50a04"], "nameRev": "3b00d9ec3bcd16169fbac43f8a72133adbf778d8 tags/4_0_9~7", "commitMessage": "fix: removed dependency on Amazon S3 #1063\n", "commitDateTime": "2020-04-04 14:59:34", "authoredDateTime": "2020-04-04 14:59:22", "commitGitStats": [{"filePath": "core/model/build.gradle", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/PactReader.kt", "insertions": 16, "deletions": 11, "lines": 27}, {"filePath": "provider/pact-jvm-provider-gradle/README.md", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "d57fcefa3157e101bea42d5d45094b62f86ed3ae", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["3b00d9ec3bcd16169fbac43f8a72133adbf778d8"], "nameRev": "d57fcefa3157e101bea42d5d45094b62f86ed3ae tags/4_0_9~6", "commitMessage": "fix: correct test classpath after removing Amazon S3 #1063\n", "commitDateTime": "2020-04-04 15:23:02", "authoredDateTime": "2020-04-04 15:23:02", "commitGitStats": [{"filePath": "consumer/pact-jvm-consumer-junit/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "consumer/pact-jvm-consumer/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "core/model/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3b00d9ec3bcd16169fbac43f8a72133adbf778d8", "d57fcefa3157e101bea42d5d45094b62f86ed3ae"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 19, "deletions": 12, "lines": 31, "gitFilesChange": 4}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/model", "core/model/src/main/kotlin/au/com/dius/pact/core", "consumer/pact-jvm-consumer", "consumer/pact-jvm-consumer-junit"]}, {"title": "No values are injected into response headers and response bodies from state callbacks", "body": "Pact verification: pact-jvm-provider-junit5  version: 4.0.8\r\n\r\nPact fragment:\r\n```\r\n\"response\": {\r\n        \"status\": 201,\r\n        \"headers\": {\r\n          \"Location\": \"http://localhost:8080/accounts/4beb44f1-53f7-4281-a78b-12c06d682067\"\r\n        },\r\n        \"generators\": {\r\n          \"header\": {\r\n            \"Location\": {\r\n              \"type\": \"ProviderState\",\r\n              \"expression\": \"http://localhost:${port}/accounts/${accountId}\"\r\n            }\r\n          }\r\n        }\r\n      }\r\n```\r\n\r\nThe actual failure:\r\n```\r\nExpected header 'Location' to have value 'http://localhost:8080/accounts/4beb44f1-53f7-4281-a78b-12c06d682067' but was 'http://localhost:35071/accounts/0904b207-491a-4691-80fd-51c673e2f214'\r\n```\r\n\r\nIt seems that value generators are not taken into account for responses.\r\n\r\nPlease note that it works well with `pact-jvm-provider-junit`", "url": "https://github.com/DiUS/pact-jvm/issues/1060", "user": "sdobrovolschi", "labels": ["bug"], "created": "2020-03-26 20:20:08", "closed": "2020-04-15 17:55:28", "commits": {"2ed86d39aceddc76325b9b2b7ec5d30c6bc50a04": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "860ed08b8535096594c16958aaadbb9e6a169b0a": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 19.00027777777778, "commitsDetails": [{"commitHash": "2ed86d39aceddc76325b9b2b7ec5d30c6bc50a04", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["8997d01d74c8a3ff3ae49cbb17a154433b425c90"], "nameRev": "2ed86d39aceddc76325b9b2b7ec5d30c6bc50a04 tags/4_0_9~8", "commitMessage": "fix: JUnit 5 No values are injected into response headers and response bodies from state callbacks #1060\n", "commitDateTime": "2020-04-04 13:58:05", "authoredDateTime": "2020-04-04 13:43:29", "commitGitStats": [{"filePath": "provider/pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/target/HttpTarget.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "provider/pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/InjectedHeadersContractTest.groovy", "insertions": 55, "deletions": 0, "lines": 55}, {"filePath": "provider/pact-jvm-provider-junit/src/test/resources/pacts/contract-with-injected-headers.json", "insertions": 45, "deletions": 0, "lines": 45}, {"filePath": "provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/PactJUnit5VerificationProvider.kt", "insertions": 9, "deletions": 3, "lines": 12}, {"filePath": "provider/pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/PactVerificationContextSpec.groovy", "insertions": 9, "deletions": 2, "lines": 11}, {"filePath": "provider/pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/StateInjectedHeadersProviderTest.groovy", "insertions": 63, "deletions": 0, "lines": 63}, {"filePath": "provider/pact-jvm-provider-junit5/src/test/resources/pacts/contract-with-injected-headers.json", "insertions": 45, "deletions": 0, "lines": 45}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "860ed08b8535096594c16958aaadbb9e6a169b0a", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["178364ff3eddc697ec6fa4b30ec5ea16ffe06a55"], "nameRev": "860ed08b8535096594c16958aaadbb9e6a169b0a tags/3_6_15~13", "commitMessage": "fix: JUnit 5 No values are injected into response headers and response bodies from state callbacks #1060\n\n(cherry picked from commit 2ed86d39aceddc76325b9b2b7ec5d30c6bc50a04)\n", "commitDateTime": "2020-04-29 12:17:39", "authoredDateTime": "2020-04-04 13:43:29", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/target/HttpTarget.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/InjectedHeadersContractTest.groovy", "insertions": 55, "deletions": 0, "lines": 55}, {"filePath": "pact-jvm-provider-junit/src/test/resources/pacts/contract-with-injected-headers.json", "insertions": 45, "deletions": 0, "lines": 45}, {"filePath": "pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/PactJUnit5VerificationProvider.kt", "insertions": 9, "deletions": 3, "lines": 12}, {"filePath": "pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/PactVerificationContextSpec.groovy", "insertions": 9, "deletions": 2, "lines": 11}, {"filePath": "pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/StateInjectedHeadersProviderTest.groovy", "insertions": 63, "deletions": 0, "lines": 63}, {"filePath": "pact-jvm-provider-junit5/src/test/resources/pacts/contract-with-injected-headers.json", "insertions": 45, "deletions": 0, "lines": 45}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2ed86d39aceddc76325b9b2b7ec5d30c6bc50a04"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 4, "lines": 14, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider", "provider/pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider"]}, {"title": "Incorrect \"validated\" state on Broker when provider test fails with runtime error", "body": "When the provider verification test fails due to a runtime error - most commonly we have MissingStateChangeMethod due to getting the state match up wrong - the results still get published to the broker and incorrectly show as verified.\r\n\r\nThis is pretty misleading, because actually the verification test didn't run so we don't know if it would have passed or not - we've had cases where it wouldn't.\r\n\r\nCould you help me problem solve this? Is it a bug or is there a setting I can tweak so that this shows as \"not run\" or something else on the broker? Our main requirement is that it doesn't show as \"passed\"\r\n\r\nHere's an example using the public broker as suggested - nb the consumer and provider tests are both in the same project for convenience here!\r\n\r\nI've added steps to recreate to the readme, let me know if anything is unclear.\r\n\r\nhttps://github.com/csbiggar/pact-example/blob/master/README.md\r\n\r\n Many thanks for any help", "url": "https://github.com/DiUS/pact-jvm/issues/1058", "user": "csbiggar", "labels": ["bug"], "created": "2020-03-25 23:03:17", "closed": "2020-05-07 00:52:11", "commits": {"aead5fa0e679249d80d3267bfede7a77d57ca11e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "e187e22cdfe3c08aa0b4cf91256de3c477ef3584": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 42.000277777777775, "commitsDetails": [{"commitHash": "aead5fa0e679249d80d3267bfede7a77d57ca11e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["6d88608d22b8beab92f87a58cda6de35f1865978"], "nameRev": "aead5fa0e679249d80d3267bfede7a77d57ca11e tags/4_0_10~9", "commitMessage": "fix: JUNIT 5 - Successful test result was being published after state change method failed #1058\n", "commitDateTime": "2020-04-10 12:28:09", "authoredDateTime": "2020-04-10 12:28:09", "commitGitStats": [{"filePath": "provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/PactJUnit5VerificationProvider.kt", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "provider/pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/PactVerificationStateChangeExtensionSpec.groovy", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "e187e22cdfe3c08aa0b4cf91256de3c477ef3584", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["813e7bab020eecbd079ebc997937928c277776d4"], "nameRev": "e187e22cdfe3c08aa0b4cf91256de3c477ef3584 tags/3_6_15~4", "commitMessage": "fix: JUNIT 5 - Successful test result was being published after state change method failed #1058\n\n(cherry picked from commit aead5fa0e679249d80d3267bfede7a77d57ca11e)\n", "commitDateTime": "2020-04-29 12:47:29", "authoredDateTime": "2020-04-10 12:28:09", "commitGitStats": [{"filePath": "pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/PactJUnit5VerificationProvider.kt", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/PactVerificationStateChangeExtensionSpec.groovy", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["aead5fa0e679249d80d3267bfede7a77d57ca11e"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 3, "lines": 7, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider"]}, {"title": "Deferred PactRunner initialization causes JUnit 4.13 to not pick up any pacts", "body": "The changes from #1021 are causing the test runner to not have any children when `getFilteredChildren()` in JUnit is called when the runner is configured by JUnit. `getFilteredChildren()` does a one-time initialization of the `filteredChildren` field, but gets called before `PactRunner.run()` does. I'm seeing this with the Maven Surefire plugin and with IntelliJ's JUnit runner on JUnit 4.13. JUnit 4.12 doesn't exhibit this behavior because of a change in the `getFilteredChildren()` method.\r\n\r\nOne solution is to call `initialize()` when `getChildren()` is called, but that may counteract the changes in #1020/#1021.", "url": "https://github.com/DiUS/pact-jvm/issues/1035", "user": "mikahjc", "labels": ["bug"], "created": "2020-02-28 18:40:00", "closed": "2020-03-09 17:16:43", "commits": {"0c83bcb4ff5107023c302eab210df5ce3c963cc6": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 9.000277777777777, "commitsDetails": [{"commitHash": "0c83bcb4ff5107023c302eab210df5ce3c963cc6", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["436a5e85680778dd5d4514b6d4071c41e61e3db7"], "nameRev": "0c83bcb4ff5107023c302eab210df5ce3c963cc6 tags/4_0_7~8", "commitMessage": "fix: get test runner working with JUnit 4.13 #1035\n", "commitDateTime": "2020-03-07 17:15:07", "authoredDateTime": "2020-03-07 17:15:07", "commitGitStats": [{"filePath": "gradle.properties", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "provider/pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/InteractionRunner.kt", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "provider/pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/PactRunner.kt", "insertions": 7, "deletions": 11, "lines": 18}, {"filePath": "provider/pact-jvm-provider-spring/src/main/kotlin/au/com/dius/pact/provider/spring/SpringEnvironmentResolver.kt", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "provider/pact-jvm-provider-spring/src/main/kotlin/au/com/dius/pact/provider/spring/SpringInteractionRunner.kt", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0c83bcb4ff5107023c302eab210df5ce3c963cc6"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 17, "deletions": 18, "lines": 35, "gitFilesChange": 5}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["provider/pact-jvm-provider-spring/src/main/kotlin/au/com/dius/pact/provider", "gradle.properties", "provider/pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider"]}, {"title": "The request body is escaped after it is rebuilt by using value injected from provider state", "body": "I define Pact for the POST request. The request body uses the existing value (e.g. IDs), or sometimes it should use a unique value (e.g create an entity where the entity name must be unique). So I use value injected from provider state. The body also contains data in XML format. My problem is after provider injects value and rebuild the body, the XML string is escaped, so it make the request fail. Below is details:\r\n\r\nDefine Pact in Consumer:\r\nResouceName.json file defines body in JSON format\r\n```\r\n{\r\n  \"entityName\": \"${eName}\",\r\n  \"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"\r\n}\r\n```\r\n\r\nCreate pact:\r\n```\r\nString strBody = Resources.toString(Resources.getResource(\"/ResouceName.json\"), Charsets.UTF_8);\r\n\r\n@Pact(\r\n        provider = \"Test_Provider\",\r\n        consumer = \"Test_Consumer\"\r\n    )\r\n    public RequestResponsePact createEntity(PactDslWithProvider builder)\r\n    {\r\n        return builder\r\n            .given(\"A entity name not exists\")\r\n            .uponReceiving(\"A request to create new entity\")\r\n            .path(/test)\r\n            .method(HttpMethod.POST.name())\r\n            .headers(ImmutableMap.of(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE))\r\n            .body(PactDslRootValue\r\n                .valueFromProviderState(strBody,strBody.replace(\"${eName}\",\"mock-name\")))\r\n            .willRespondWith()\r\n            .status(HttpStatus.OK.value())\r\n            .body(new PactDslJsonBody()\r\n                .stringType(\"entityName\",\"mock-name\")\r\n            )\r\n            .toPact();\r\n    }\r\n```\r\n\r\nFrom Provider:\r\n```\r\n@State(\"A entity name not exists\")\r\n    public Map<String, Object> generateUniqueName() throws Exception\r\n    {\r\n        String name = RandomStringUtils.random(5, true, true);  \r\n        HashMap<String, Object> map = new HashMap<>();\r\n        map.put(\"eName\", name);\r\n        return map;\r\n    }\r\n\r\n```\r\nWhen executing test from provider, the value injected successfully but the body is escaped like as:\r\n\r\n`{\\r\\n  \\\"entityName\\\": \\\"dGcna\\\",\\r\\n  \\\"xml\\\": \\\"<?xml version=\\\\\\\"1.0\\\\\\\" encoding=\\\\\\\"UTF-8\\\\\\\"?>\\\\n\\\"\\r\\n}`\r\n\r\nI expect it should be:\r\n`\"{\"entityName\": \"dGcna\",\"xml\": \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\"}\"`\r\n\r\nThat's why it makes the request fail. \r\nI am using **au.com.dius:pact-jvm-provider-junit_2.12:3.6.14**\r\n\r\nCould anyone help me to resolve this issue? Thanks\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/1031", "user": "tainguyenvn", "labels": ["bug"], "created": "2020-02-27 13:05:55", "closed": "2020-03-30 03:03:11", "commits": {"afe807b44e40011986fa6c0a383218a3fceda7e7": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "c9ef690c44ecf7acc48f4920d46b0b1238b17fdc": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "c085270e7c4155522dcb13b3dd2cf76d3cf192c8": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "6f30f34fbcfb62ecf5f0eb1c8885bca582b662df": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 31.00027777777778, "commitsDetails": [{"commitHash": "afe807b44e40011986fa6c0a383218a3fceda7e7", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["0fefe31c795acb3916d823ca4252b1f80509997c"], "nameRev": "afe807b44e40011986fa6c0a383218a3fceda7e7 tags/4_0_7~2", "commitMessage": "chore: disable escaping of HTML and XML embedded in JSON #1031\n", "commitDateTime": "2020-03-08 12:52:21", "authoredDateTime": "2020-03-08 12:52:21", "commitGitStats": [{"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/generators/Generators.kt", "insertions": 8, "deletions": 8, "lines": 16}, {"filePath": "core/model/src/test/groovy/au/com/dius/pact/core/model/PactReaderTransformSpec.groovy", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "core/support/src/main/kotlin/au/com/dius/pact/core/support/Json.kt", "insertions": 6, "deletions": 2, "lines": 8}, {"filePath": "provider/pact-jvm-provider-junit5/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "provider/pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/StateInjectedProviderTest.groovy", "insertions": 76, "deletions": 0, "lines": 76}, {"filePath": "provider/pact-jvm-provider-junit5/src/test/resources/pacts/xml-in-json-pact.json", "insertions": 51, "deletions": 0, "lines": 51}, {"filePath": "provider/pact-jvm-provider-maven/src/test/groovy/au/com/dius/pact/provider/maven/PactPublishMojoSpec.groovy", "insertions": 0, "deletions": 1, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "c9ef690c44ecf7acc48f4920d46b0b1238b17fdc", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a8d6ea2efd6d21c3bebd6aac8f107f1c36713f7d"], "nameRev": "c9ef690c44ecf7acc48f4920d46b0b1238b17fdc tags/4_0_8~14", "commitMessage": "test: add tests for generated values with XML within JSON #1031\n", "commitDateTime": "2020-03-21 13:23:06", "authoredDateTime": "2020-03-21 13:23:06", "commitGitStats": [{"filePath": "core/model/src/test/groovy/au/com/dius/pact/core/model/PactReaderSpec.groovy", "insertions": 21, "deletions": 1, "lines": 22}, {"filePath": "core/model/src/test/groovy/au/com/dius/pact/core/model/generators/ProviderStateGeneratorSpec.groovy", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "core/model/src/test/resources/encoded-values-pact.json", "insertions": 66, "deletions": 0, "lines": 66}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "c085270e7c4155522dcb13b3dd2cf76d3cf192c8", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["ca8634c1b27a9ab4a59d67633470db9786968c76"], "nameRev": "c085270e7c4155522dcb13b3dd2cf76d3cf192c8 tags/3_6_15~26", "commitMessage": "chore: disable escaping of HTML and XML embedded in JSON #1031\n\n(cherry picked from commit afe807b44e40011986fa6c0a383218a3fceda7e7)\n", "commitDateTime": "2020-04-29 10:07:21", "authoredDateTime": "2020-03-08 12:52:21", "commitGitStats": [{"filePath": "core/model/src/test/groovy/au/com/dius/pact/core/model/PactReaderTransformSpec.groovy", "insertions": 260, "deletions": 0, "lines": 260}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators/Generators.kt", "insertions": 8, "deletions": 8, "lines": 16}, {"filePath": "pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/StateInjectedProviderTest.groovy", "insertions": 76, "deletions": 0, "lines": 76}, {"filePath": "pact-jvm-provider-junit5/src/test/resources/pacts/xml-in-json-pact.json", "insertions": 51, "deletions": 0, "lines": 51}, {"filePath": "pact-jvm-support/src/main/kotlin/au/com/dius/pact/support/Json.kt", "insertions": 7, "deletions": 2, "lines": 9}, {"filePath": "provider/pact-jvm-provider-junit5/build.gradle", "insertions": 17, "deletions": 0, "lines": 17}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "6f30f34fbcfb62ecf5f0eb1c8885bca582b662df", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["371e0ad5a528befe94c9d6b9aa6a120810e23e6e"], "nameRev": "6f30f34fbcfb62ecf5f0eb1c8885bca582b662df tags/3_6_15~20", "commitMessage": "test: add tests for generated values with XML within JSON #1031\n\n(cherry picked from commit c9ef690c44ecf7acc48f4920d46b0b1238b17fdc)\n", "commitDateTime": "2020-04-29 11:37:06", "authoredDateTime": "2020-03-21 13:23:06", "commitGitStats": [{"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactReaderSpec.groovy", "insertions": 40, "deletions": 0, "lines": 40}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/generators/ProviderStateGeneratorSpec.groovy", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "pact-jvm-model/src/test/resources/encoded-values-pact.json", "insertions": 66, "deletions": 0, "lines": 66}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["afe807b44e40011986fa6c0a383218a3fceda7e7", "c9ef690c44ecf7acc48f4920d46b0b1238b17fdc"], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 10, "lines": 25, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["provider/pact-jvm-provider-junit5", "core/model/src/main/kotlin/au/com/dius/pact/core", "core/support/src/main/kotlin/au/com/dius/pact/core"]}, {"title": "fromProviderState on path doesn't work in pact-jvm-consumer-groovy", "body": "I used fromProviderState on path parameter, but it doesn't work:\r\nwithAttributes(method: 'get', path: fromProviderState('/shoppingCart/v2.0/shoppingCart/${shoppingcartId}', '/shoppingCart/v2.0/shoppingCart/ShoppingCart_05540051-1155-4557-8080-008a802200aa'), \r\n            query: ([mask: 'returnStockInformation,returnNote', includeExpiredShoppingCart: 'false', excludePrices: 'true']))\r\n\r\nI see that the contract is generated wrongly. The generator for the path is created on the response instead of on the request. When I modify the contract manually, it's working.", "url": "https://github.com/DiUS/pact-jvm/issues/1022", "user": "yaelhol", "labels": ["bug"], "created": "2020-02-17 22:10:46", "closed": "2020-05-07 00:53:20", "commits": {"6bf77f3cf95e77577df1884473a9881abc27d1ad": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "0be41423ef09cbe1f99a367c93d15f3bb93834d3": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 79.00027777777778, "commitsDetails": [{"commitHash": "6bf77f3cf95e77577df1884473a9881abc27d1ad", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["0da658100d9d033e95cbd8fdc52c602a4a7865be"], "nameRev": "6bf77f3cf95e77577df1884473a9881abc27d1ad tags/4_0_7~22", "commitMessage": "fix: fromProviderState on path doesnt work in pact-jvm-consumer-groovy #1022\n", "commitDateTime": "2020-02-22 16:16:04", "authoredDateTime": "2020-02-22 16:16:04", "commitGitStats": [{"filePath": "consumer/pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBuilder.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "consumer/pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/ProviderStateInjectedPactTest.groovy", "insertions": 12, "deletions": 3, "lines": 15}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "0be41423ef09cbe1f99a367c93d15f3bb93834d3", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["2eed20a8cc366eea801ec513088eb1b9949e39c7"], "nameRev": "0be41423ef09cbe1f99a367c93d15f3bb93834d3 tags/3_6_15~29", "commitMessage": "fix: fromProviderState on path doesnt work in pact-jvm-consumer-groovy #1022\n\n(cherry picked from commit 6bf77f3cf95e77577df1884473a9881abc27d1ad)\n", "commitDateTime": "2020-04-26 17:48:28", "authoredDateTime": "2020-02-22 16:16:04", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBuilder.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/ProviderStateInjectedPactTest.groovy", "insertions": 12, "deletions": 3, "lines": 15}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6bf77f3cf95e77577df1884473a9881abc27d1ad"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["consumer/pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer"]}, {"title": "Request query gets mangled/encoded", "body": "I'm using pact-jvm-consumer 4.0.2 (protocol version 2) to write some consumer-side pact logic and produce a JSON file.  If I specify a url/query like this:\r\n\r\n```\r\n                .uponReceiving(\"A request for favorite courses\")\r\n                .path(favoriteCoursesPath)\r\n                .method(\"GET\")\r\n             .query(\"include[]=term&include[]=total_scores&include[]=license&include[]=is_public&include[]=needs_grading_count&include[]=permissions&include[]=current_grading_period_scores&include[]=course_image&include[]=favorites\")\r\n                .headers(DEFAULT_REQUEST_HEADERS)\r\n```\r\n\r\nI get this generated in the json contract file:\r\n\r\n```\r\n        \"query\": \"include[]\\u003dterm%2C+include%5B%5D%3Dtotal_scores%2C+include%5B%5D%3Dlicense%2C+include%5B%5D%3Dis_public%2C+include%5B%5D%3Dneeds_grading_count%2C+include%5B%5D%3Dpermissions%2C+include%5B%5D%3Dcurrent_grading_period_scores%2C+include%5B%5D%3Dcourse_image%2C+include%5B%5D%3Dfavorites\"\r\n```\r\n\r\n(If I use encodedQuery() instead of query(), I get the same thing.)\r\n\r\nThis query isn't interpreted correctly by our server logic, so we don't get the right fields back in our result, so our pact tests fail.\r\n\r\nWhen I was using version 3.5.12 of the pact-jvm-consumer, it just echoed my query verbatim to the json file.  How can I do that (i.e., avoid encoding) in v4.0.2?  (I had to move to 4.0.2 to get the fix for https://github.com/DiUS/pact-jvm/issues/958.)", "url": "https://github.com/DiUS/pact-jvm/issues/1018", "user": "joehoag", "labels": ["bug"], "created": "2020-02-10 16:07:00", "closed": "2020-05-20 07:24:59", "commits": {"0da658100d9d033e95cbd8fdc52c602a4a7865be": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 99.00027777777778, "commitsDetails": [{"commitHash": "0da658100d9d033e95cbd8fdc52c602a4a7865be", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1b2de39e6305dec2e0543dcc057b910abcf246e0"], "nameRev": "0da658100d9d033e95cbd8fdc52c602a4a7865be tags/4_0_7~23", "commitMessage": "fix: Request query gets mangled/encoded when generating V2 pact file #1018\n", "commitDateTime": "2020-02-22 15:57:31", "authoredDateTime": "2020-02-22 15:57:31", "commitGitStats": [{"filePath": "consumer/pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslRequestWithPathSpec.groovy", "insertions": 26, "deletions": 0, "lines": 26}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/RequestResponseInteraction.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/model/src/test/groovy/au/com/dius/pact/core/model/PactWriterSpec.groovy", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "core/model/src/test/groovy/au/com/dius/pact/core/model/RequestResponseInteractionSpec.groovy", "insertions": 21, "deletions": 2, "lines": 23}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0da658100d9d033e95cbd8fdc52c602a4a7865be"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/model/src/main/kotlin/au/com/dius/pact/core"]}, {"title": "pact-jvm-consumer-groovy generates incorrect contents in message pact file", "body": "Version `4.0.2` of `pact-jvm-consumer-groovy` seems to have introduced a bug where the generated message pact file contains incorrect `contents`. Rather than being a JSON object, `contents` is a String representation of the expected JSON.\r\n\r\nWith this code:\r\n\r\n```\r\ndef pactMessageBuilder = new PactMessageBuilder().with {\r\n    serviceConsumer 'consumer'\r\n    hasPactWith 'provider'\r\n    expectsToReceive 'feed entry'\r\n    withMetaData(contentType: 'application/json')\r\n    withContent(contentType: 'application/json') {\r\n        type 'foo'\r\n        data {\r\n            reference {\r\n                id string('abc')\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n`4.0.2` generates:\r\n\r\n```\r\n{\r\n  \"consumer\": {\r\n    \"name\": \"consumer\"\r\n  },\r\n  \"provider\": {\r\n    \"name\": \"provider\"\r\n  },\r\n  \"messages\": [\r\n    {\r\n      \"description\": \"feed entry\",\r\n      \"metaData\": {\r\n        \"contentType\": \"application/json\"\r\n      },\r\n      \"contents\": \"{\\n    \\\"type\\\": \\\"foo\\\",\\n    \\\"data\\\": {\\n        \\\"reference\\\": {\\n            \\\"id\\\": \\\"abc\\\"\\n        }\\n    }\\n}\",\r\n      \"matchingRules\": {\r\n        \"body\": {\r\n          \"$.data.reference.id\": {\r\n            \"matchers\": [\r\n              {\r\n                \"match\": \"type\"\r\n              }\r\n            ],\r\n            \"combine\": \"AND\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"metadata\": {\r\n    \"pactSpecification\": {\r\n      \"version\": \"3.0.0\"\r\n    },\r\n    \"pact-jvm\": {\r\n      \"version\": \"4.0.2\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nwhereas `4.0.1` generates:\r\n\r\n```\r\n{\r\n  \"consumer\": {\r\n    \"name\": \"consumer\"\r\n  },\r\n  \"provider\": {\r\n    \"name\": \"provider\"\r\n  },\r\n  \"messages\": [\r\n    {\r\n      \"description\": \"feed entry\",\r\n      \"metaData\": {\r\n        \"contentType\": \"application/json\"\r\n      },\r\n      \"contents\": {\r\n        \"type\": \"foo\",\r\n        \"data\": {\r\n          \"reference\": {\r\n            \"id\": \"abc\"\r\n          }\r\n        }\r\n      },\r\n      \"matchingRules\": {\r\n        \"body\": {\r\n          \"$.data.reference.id\": {\r\n            \"matchers\": [\r\n              {\r\n                \"match\": \"type\"\r\n              }\r\n            ],\r\n            \"combine\": \"AND\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"metadata\": {\r\n    \"pactSpecification\": {\r\n      \"version\": \"3.0.0\"\r\n    },\r\n    \"pact-jvm\": {\r\n      \"version\": \"4.0.1\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nI have created a repo to reproduce the issue here: https://github.com/qmg-rbass/pact-bug", "url": "https://github.com/DiUS/pact-jvm/issues/1011", "user": "qmg-rbass", "labels": ["bug"], "created": "2020-01-31 13:35:16", "closed": "2020-03-28 01:25:11", "commits": {"c29549aa3eedc09f9df886443d07cc29c6a9b9e5": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "19b975e64f3c4842fbc600fb68c0b1f1d0051c2e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 56.000277777777775, "commitsDetails": [{"commitHash": "c29549aa3eedc09f9df886443d07cc29c6a9b9e5", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["fc6fe468cf8049a1f1dae3d842c681e1f4011939"], "nameRev": "c29549aa3eedc09f9df886443d07cc29c6a9b9e5 tags/4_0_6~8", "commitMessage": "fix: message pacts with JSON contents were being formatted as strings #1011\n", "commitDateTime": "2020-02-09 14:54:21", "authoredDateTime": "2020-02-09 14:54:21", "commitGitStats": [{"filePath": "consumer/pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/messaging/PactMessageBuilder.groovy", "insertions": 8, "deletions": 2, "lines": 10}, {"filePath": "consumer/pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/messaging/PactMessageBuilderSpec.groovy", "insertions": 34, "deletions": 2, "lines": 36}, {"filePath": "consumer/pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MessagePactBuilder.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/RequestResponseInteraction.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/messaging/Message.kt", "insertions": 34, "deletions": 19, "lines": 53}, {"filePath": "core/model/src/test/groovy/au/com/dius/pact/core/model/messaging/MessageSpec.groovy", "insertions": 35, "deletions": 1, "lines": 36}, {"filePath": "provider/pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/ResponseComparisonSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "provider/pact-jvm-provider-junit/src/test/resources/amqp_pacts/message_test_consumer-test_provider.json", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "provider/pact-jvm-provider-junit5/src/test/resources/amqp_pacts/message_test_consumer-test_provider.json", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ResponseComparison.kt", "insertions": 10, "deletions": 9, "lines": 19}, {"filePath": "provider/pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/MessageComparisonSpec.groovy", "insertions": 3, "deletions": 4, "lines": 7}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "19b975e64f3c4842fbc600fb68c0b1f1d0051c2e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["981943c7c11e0351a944eacbb7d4cf39c875fa3d"], "nameRev": "19b975e64f3c4842fbc600fb68c0b1f1d0051c2e tags/4_0_7~12", "commitMessage": "chore: set consumer/pact-jvm-consumer-groovy to use Groovy 2.5 #1011\n", "commitDateTime": "2020-03-07 14:30:28", "authoredDateTime": "2020-03-07 14:30:28", "commitGitStats": [{"filePath": "build.gradle", "insertions": 1, "deletions": 21, "lines": 22}, {"filePath": "consumer/pact-jvm-consumer-groovy/build.gradle", "insertions": 13, "deletions": 8, "lines": 21}, {"filePath": "consumer/pact-jvm-consumer-java8/build.gradle", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "consumer/pact-jvm-consumer-junit/build.gradle", "insertions": 8, "deletions": 3, "lines": 11}, {"filePath": "consumer/pact-jvm-consumer-junit5/build.gradle", "insertions": 7, "deletions": 2, "lines": 9}, {"filePath": "consumer/pact-jvm-consumer-specs2/build.gradle", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "consumer/pact-jvm-consumer/build.gradle", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "core/matchers/build.gradle", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "core/model/build.gradle", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "core/pact-broker/build.gradle", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "core/support/build.gradle", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "gradle.properties", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-server/build.gradle", "insertions": 13, "deletions": 8, "lines": 21}, {"filePath": "pact-publish/build.gradle", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-specification-test/build.gradle", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "provider/pact-jvm-provider-junit/build.gradle", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "provider/pact-jvm-provider-junit5/build.gradle", "insertions": 13, "deletions": 8, "lines": 21}, {"filePath": "provider/pact-jvm-provider-lein/build.gradle", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "provider/pact-jvm-provider-maven/build.gradle", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "provider/pact-jvm-provider-scalasupport/build.gradle", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "provider/pact-jvm-provider-scalatest/build.gradle", "insertions": 6, "deletions": 5, "lines": 11}, {"filePath": "provider/pact-jvm-provider-spring/build.gradle", "insertions": 12, "deletions": 7, "lines": 19}, {"filePath": "provider/pact-jvm-provider/build.gradle", "insertions": 10, "deletions": 1, "lines": 11}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c29549aa3eedc09f9df886443d07cc29c6a9b9e5", "19b975e64f3c4842fbc600fb68c0b1f1d0051c2e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 213, "deletions": 103, "lines": 316, "gitFilesChange": 28}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["consumer/pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer", "provider/pact-jvm-provider-junit", "consumer/pact-jvm-consumer-groovy", "consumer/pact-jvm-consumer-junit5", "provider/pact-jvm-provider-junit5", "consumer/pact-jvm-consumer-specs2", "core/support", "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider", "consumer/pact-jvm-consumer", "pact-jvm-server", "provider/pact-jvm-provider-spring", "consumer/pact-jvm-consumer-java8", "provider/pact-jvm-provider-lein", "core/model/src/main/kotlin/au/com/dius/pact/core", "pact-specification-test", "core/matchers", "pact-publish", "consumer/pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer", "provider/pact-jvm-provider-scalasupport", "core/model", "provider/pact-jvm-provider-maven", "provider/pact-jvm-provider", "consumer/pact-jvm-consumer-junit", "gradle.properties", "core/pact-broker", "", "provider/pact-jvm-provider-scalatest"]}, {"title": "JUnit5 provider tests contain pact broker password in the logs ", "body": "Hey,\r\nI am using `pact-jvm-provider-junit5`, version 4.0.4. The source is configured with `@PactBroker` annotation. Test logs contain the password to our pact broker\r\n```\r\nVerifying a pact between ...\r\n  [Using PactBrokerSource(host=${PACT_BROKER_HOST}, port=${pactbroker.port:}, scheme=https, pacts={Consumer(name=...\r\n... options={authentication=[basic, username, password]}, tag=null))]})]\r\n```\r\n\r\nThese logs are stored in CI and local logs might be sent over slack. This kind of logging should be turned on explicitly if developers need it for debugging.\r\n\r\nWe have slf4j in the project and yet I don't see the logger name in above line, so I can't filter it out. I also checked root logger setup and it is set to INFO in prod and test.\r\n\r\nI will appreciate any ideas if this log statement doesn't appear in your standard setup.\r\nThanks!", "url": "https://github.com/DiUS/pact-jvm/issues/1009", "user": "verkhoro", "labels": ["bug"], "created": "2020-01-29 17:44:14", "closed": "2020-02-22 04:45:46", "commits": {}, "ttf": 23.00027777777778, "commitsDetails": []}, {"title": "Pact server fails for requests that don't have Content-Type header", "body": "I tried to update my current pact-jvm-server from 3.6.1 to 4.0.4, but for GET requests it fails with 500. Looking in the stacktrace I see there is a problem at au.com.dius.pact.server.Conversions.unfilteredRequestToPactRequest. This method reads Content-Type header for all types of requests. I think a better way is to check if this header exists and if it is missing use some default values like text/plain with charset UTF-8.\r\n\r\nBelow is the stacktrace from pact-jvm-server:4.0.4:\r\n```\r\njava.util.NoSuchElementException\r\n\tat java.util.AbstractList$Itr.next(AbstractList.java:364)\r\n\tat scala.collection.convert.Wrappers$JIteratorWrapper.next(Wrappers.scala:40)\r\n\tat au.com.dius.pact.server.Conversions$.unfilteredRequestToPactRequest(Conversions.scala:53)\r\n\tat au.com.dius.pact.server.UnfilteredMockProvider$Routes$.convertRequest(UnfilteredMockProvider.scala:27)\r\n\tat au.com.dius.pact.server.UnfilteredMockProvider$Routes$$anonfun$intent$1.applyOrElse(UnfilteredMockProvider.scala:24)\r\n\tat au.com.dius.pact.server.UnfilteredMockProvider$Routes$$anonfun$intent$1.applyOrElse(UnfilteredMockProvider.scala:23)\r\n\tat scala.PartialFunction$Lifted.apply(PartialFunction.scala:224)\r\n\tat scala.PartialFunction$Lifted.apply(PartialFunction.scala:220)\r\n\tat unfiltered.response.Pass$PartialAttempt.attemptWithPass(pass.scala:72)\r\n\tat unfiltered.response.Pass$PassingAttempt.attempt(pass.scala:65)\r\n\tat unfiltered.response.Pass$PassingAttempt.attempt$(pass.scala:65)\r\n\tat unfiltered.response.Pass$PartialAttempt.attempt(pass.scala:67)\r\n\tat unfiltered.response.Pass$.$anonfun$fold$1(pass.scala:48)\r\n\tat unfiltered.response.Pass$FunctionAttempt.apply(pass.scala:77)\r\n\tat unfiltered.netty.cycle.Plan.$anonfun$channelRead$3(plans.scala:68)\r\n\tat unfiltered.netty.cycle.Plan.catching(plans.scala:41)\r\n\tat unfiltered.netty.cycle.Plan.catching$(plans.scala:40)\r\n\tat au.com.dius.pact.server.UnfilteredMockProvider$Routes$.catching(UnfilteredMockProvider.scala:19)\r\n\tat unfiltered.netty.cycle.Plan.$anonfun$channelRead$2(plans.scala:67)\r\n\tat unfiltered.netty.cycle.SynchronousExecution.executeIntent(deferrals.scala:23)\r\n\tat unfiltered.netty.cycle.SynchronousExecution.executeIntent$(deferrals.scala:23)\r\n\tat au.com.dius.pact.server.UnfilteredMockProvider$Routes$.executeIntent(UnfilteredMockProvider.scala:19)\r\n\tat unfiltered.netty.cycle.Plan.$anonfun$channelRead$1(plans.scala:66)\r\n\tat unfiltered.netty.cycle.Plan.catching(plans.scala:41)\r\n\tat unfiltered.netty.cycle.Plan.catching$(plans.scala:40)\r\n\tat au.com.dius.pact.server.UnfilteredMockProvider$Routes$.catching(UnfilteredMockProvider.scala:19)\r\n\tat unfiltered.netty.cycle.Plan.channelRead(plans.scala:65)\r\n\tat unfiltered.netty.cycle.Plan.channelRead$(plans.scala:61)\r\n\tat au.com.dius.pact.server.UnfilteredMockProvider$Routes$.channelRead(UnfilteredMockProvider.scala:19)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:295)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\r\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:697)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:632)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:549)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:511)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/1008", "user": "octavian-h", "labels": ["bug"], "created": "2020-01-27 13:50:48", "closed": "2020-05-07 00:53:05", "commits": {"ab61bac90872e934297396f58e8db667f3e52007": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "896e82e0314313cff82c197bcee9a09ee80b6441": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "2eed20a8cc366eea801ec513088eb1b9949e39c7": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 100.00027777777778, "commitsDetails": [{"commitHash": "ab61bac90872e934297396f58e8db667f3e52007", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["5d14f17f74b77700f049693fcfe175cdeaf79999"], "nameRev": "ab61bac90872e934297396f58e8db667f3e52007 tags/4_0_7~25", "commitMessage": "fix: Pact server fails for requests that dont have Content-Type header #1008\n", "commitDateTime": "2020-02-22 14:34:50", "authoredDateTime": "2020-02-22 14:34:50", "commitGitStats": [{"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/ContentType.kt", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Conversions.scala", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "pact-jvm-server/src/test/groovy/au/com/dius/pact/server/ConversionsSpec.groovy", "insertions": 32, "deletions": 0, "lines": 32}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "896e82e0314313cff82c197bcee9a09ee80b6441", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1095b788aa61cfa822b5f128e922639f9402770f"], "nameRev": "896e82e0314313cff82c197bcee9a09ee80b6441 tags/4_0_7~18", "commitMessage": "fix: do not convert the bodies to strings #1008\n", "commitDateTime": "2020-02-23 09:27:30", "authoredDateTime": "2020-02-23 09:27:30", "commitGitStats": [{"filePath": "pact-jvm-server/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Conversions.scala", "insertions": 11, "deletions": 5, "lines": 16}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "2eed20a8cc366eea801ec513088eb1b9949e39c7", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["dbd25536fc1668e1319c83f5c6d28d2a12fa87d7"], "nameRev": "2eed20a8cc366eea801ec513088eb1b9949e39c7 tags/3_6_15~30", "commitMessage": "fix: Pact server fails for requests that dont have Content-Type header #1008\n\n(cherry picked from commit ab61bac90872e934297396f58e8db667f3e52007)\n", "commitDateTime": "2020-04-26 17:47:55", "authoredDateTime": "2020-02-22 14:34:50", "commitGitStats": [{"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/ContentType.kt", "insertions": 42, "deletions": 0, "lines": 42}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/model/unfiltered/Conversions.scala", "insertions": 9, "deletions": 4, "lines": 13}, {"filePath": "pact-jvm-server/src/test/groovy/au/com/dius/pact/server/ConversionsSpec.groovy", "insertions": 32, "deletions": 0, "lines": 32}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ab61bac90872e934297396f58e8db667f3e52007", "896e82e0314313cff82c197bcee9a09ee80b6441"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 21, "deletions": 7, "lines": 28, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-server/src/main/scala/au/com/dius/pact/server/Conversions.scala", "pact-jvm-server", "core/model/src/main/kotlin/au/com/dius/pact/core"]}, {"title": "A `TestTemplateInvocationContextProvider` must not return an empty stream", "body": "The javadoc of `TestTemplateInvocationContextProvider# provideTestTemplateInvocationContexts` says: This method is only called by the framework if `#supportsTestTemplate` previously returned `true` for the same `ExtensionContext`. Thus, this method must not return an empty `Stream`.\r\n\r\nBut the junit5 `PactVerificationInvocationContextProvider` returns an empty stream if it doesn't find any pacts. This results in the cryptic error message from JUnit 5: `org.junit.platform.commons.PreconditionViolationException: No supporting TestTemplateInvocationContextProvider provided an invocation context`\r\n\r\nCan we throw an exception instead.", "url": "https://github.com/DiUS/pact-jvm/issues/1007", "user": "t1", "labels": ["bug"], "created": "2020-01-27 09:22:37", "closed": "2020-05-07 00:53:33", "commits": {"fc6fe468cf8049a1f1dae3d842c681e1f4011939": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "7a9733fd4f8a02a82f0ce818a2c8fde7a5941b61": {"commitGHEventType": "referenced", "commitUser": "anto-ac"}}, "ttf": 100.00027777777778, "commitsDetails": [{"commitHash": "fc6fe468cf8049a1f1dae3d842c681e1f4011939", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["913bcf32e3197464ec84ad9d6c3715ddf32818a5"], "nameRev": "fc6fe468cf8049a1f1dae3d842c681e1f4011939 tags/4_0_6~9", "commitMessage": "fix: JUnit 5 test provider now throws an exception if there are no Pacts to verify #1007\n", "commitDateTime": "2020-02-09 12:45:38", "authoredDateTime": "2020-02-09 12:45:38", "commitGitStats": [{"filePath": "provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/PactJUnit5VerificationProvider.kt", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "provider/pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/PactVerificationInvocationContextProviderSpec.groovy", "insertions": 22, "deletions": 0, "lines": 22}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "7a9733fd4f8a02a82f0ce818a2c8fde7a5941b61", "commitGHEventType": "referenced", "commitUser": "anto-ac", "commitParents": ["89e0db2805f6f5dc83003d0da815f6b62b56d67b", "2810b0bb8ec58701f0e93268d45142a1846c467c"], "nameRev": "7a9733fd4f8a02a82f0ce818a2c8fde7a5941b61 tags/4_1_4~1", "commitMessage": "Merge pull request #1141 from anto-ac/add-more-backwards-compatibility-with-dates\n\nfix: backward compatibily with legacy date formats #1007", "commitDateTime": "2020-06-19 13:44:54", "authoredDateTime": "2020-06-19 13:44:54", "commitGitStats": [{"filePath": "core/matchers/src/main/kotlin/au/com/dius/pact/core/matchers/MatcherExecutor.kt", "insertions": 19, "deletions": 8, "lines": 27}, {"filePath": "core/matchers/src/test/groovy/au/com/dius/pact/core/matchers/MatcherExecutorSpec.groovy", "insertions": 18, "deletions": 14, "lines": 32}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fc6fe468cf8049a1f1dae3d842c681e1f4011939"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 0, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider"]}, {"title": "pact-jvm-consumer: Message should return metadata as Map<String, Object>", "body": "I am using au.com.dius:pact-jvm-consumer-junit5 in version 4.0.4.\r\n\r\nWhen defining a pact with the MessagePactBuilder dsl, you can provide metadata through withMetadata giving a Map<String, Object>, where Object can be a raw value, a Matcher or a Generator. But the resulting Message returns its metadata as Map<String, String>.\r\n\r\n\t@Pact(consumer = \"MyConsumer\")\r\n\tpublic MessagePact somethingHappend(final MessagePactBuilder builder) {\r\n\r\n\t\tfinal Map<String, Object> expectedMetadata = new HashMap<>();\r\n\t\texpectedMetadata.put(\"myLongProperty\", 10L);\r\n\r\n\t\treturn builder.given(\"something happend\")\r\n\t\t\t\t.expectsToReceive(\"MyEvent\")\r\n\t\t\t\t.withMetadata(expectedMetadata)\r\n\t\t\t\t.toPact();\r\n\t}\r\n\r\n\t@Test\r\n\tpublic void myEventIsReceived(final List<Message> messages) {\r\n\t\tfinal Message message = Iterables.getOnlyElement(messages);\r\n\t\tfinal Map<String, String> metaData = message.getMetaData();\r\n\t\t// expected Map<String, Object> here, but this contains the String \"10\"\r\n\t\t// for key \"myLongProperty\" => no chance to convert it back\r\n\t}\r\n\r\nThis is a problem when integrating with messaging frameworks that also provide metadata with raw Object values instead of String (like IMessage of azure servicebus in my case) because you can't translate the pact Message to such a message representation then (at least not with hard workarounds.)\r\n\r\nShouldn't Message just return the raw metadata. To keep the API compatible I would propose to add something like getRawMetadata that returns Map<String, Object>.", "url": "https://github.com/DiUS/pact-jvm/issues/1006", "user": "msa-itsonix", "labels": ["bug"], "created": "2020-01-24 07:59:06", "closed": "2020-05-07 00:53:45", "commits": {"b0b07b0fb8f6912a50d3815897b8d8847b10b59e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "913bcf32e3197464ec84ad9d6c3715ddf32818a5": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 103.00027777777778, "commitsDetails": [{"commitHash": "b0b07b0fb8f6912a50d3815897b8d8847b10b59e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["86f5e80519a94a297f7832fff3255c246a468e8d"], "nameRev": "b0b07b0fb8f6912a50d3815897b8d8847b10b59e tags/4_0_5~11", "commitMessage": "fix: Message should return metadata as Map<String, Object> #1006\n", "commitDateTime": "2020-01-25 17:26:21", "authoredDateTime": "2020-01-25 17:26:21", "commitGitStats": [{"filePath": "consumer/pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/junit/MessagePactProviderRule.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "consumer/pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MessagePactBuilder.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/matchers/src/main/kotlin/au/com/dius/pact/core/matchers/Matching.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/messaging/Message.kt", "insertions": 4, "deletions": 4, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessagePactProviderRule.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}, {"commitHash": "913bcf32e3197464ec84ad9d6c3715ddf32818a5", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d30509c36b713de5eec2a8c57092088a95187f71"], "nameRev": "913bcf32e3197464ec84ad9d6c3715ddf32818a5 tags/4_0_6~10", "commitMessage": "fix: message pact builder was converting metadata values to strings #1006\n", "commitDateTime": "2020-02-09 12:34:29", "authoredDateTime": "2020-02-09 12:34:29", "commitGitStats": [{"filePath": "consumer/pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/MessagePactBuilderSpec.groovy", "insertions": 24, "deletions": 0, "lines": 24}, {"filePath": "consumer/pact-jvm-consumer-junit5/src/test/java/au/com/dius/pact/consumer/junit5/MessageWithMetadataConsumerTest.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "consumer/pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MessagePactBuilder.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "core/model/src/test/groovy/au/com/dius/pact/core/model/PactWriterSpec.groovy", "insertions": 25, "deletions": 2, "lines": 27}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessageWithMetadataConsumerTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.junit5.MessageWithMetadataConsumerTest.createPact(au.com.dius.pact.consumer.MessagePactBuilder)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.junit5.MessageWithMetadataConsumerTest.test(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b0b07b0fb8f6912a50d3815897b8d8847b10b59e", "913bcf32e3197464ec84ad9d6c3715ddf32818a5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 10, "deletions": 10, "lines": 20, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["consumer/pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer", "core/matchers/src/main/kotlin/au/com/dius/pact/core", "consumer/pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer", "core/model/src/main/kotlin/au/com/dius/pact/core"], "changesInPackagesSPOON": []}, {"title": "BigDecimal.ZERO not considered a \"decimal\"", "body": "Hello, ran into a bit of an issue today, migrating from Pact 3.6.11 to 4.0.4 (for JDK 11 support).\r\n\r\nIt does seem that the new core matchers, specifically for numbers, will not consider `BigDecimal#ZERO` to be a decimal?\r\n\r\nSpecifically the issue is in the [following snippet](https://github.com/DiUS/pact-jvm/blob/master/core/matchers/src/main/kotlin/au/com/dius/pact/core/matchers/MatcherExecutor.kt#L237-L248) :\r\n```kotlin\r\nfun matchDecimal(actual: Any?): Boolean {\r\n  val result = when {\r\n    actual == 0 -> true\r\n    actual is Float -> true\r\n    actual is Double -> true\r\n    actual is BigDecimal && actual.precision() > 0 -> true\r\n    actual is JsonPrimitive && actual.isNumber -> decimalRegex.matches(actual.toString())\r\n    else -> false\r\n  }\r\n  logger.debug { \"${valueOf(actual)} (${typeOf(actual)}) matches decimal number -> $result\" }\r\n  return result\r\n}\r\n```\r\n\r\nWhich does check for BigDecimal, but in conjunction with a precision > 0 when `BigDecimal#ZERO` is defined [as follows](https://github.com/AdoptOpenJDK/openjdk-jdk11/blob/master/src/java.base/share/classes/java/math/BigDecimal.java#L338) (at least in OpenJDK 11) \r\n```java\r\n    // Constants\r\n    /**\r\n     * The value 0, with a scale of 0.\r\n     *\r\n     * @since  1.5\r\n     */\r\n    public static final BigDecimal ZERO =\r\n        ZERO_THROUGH_TEN[0];\r\n\r\n    /**\r\n     * The value 1, with a scale of 0.\r\n     *\r\n     * @since  1.5\r\n     */\r\n    public static final BigDecimal ONE =\r\n        ZERO_THROUGH_TEN[1];\r\n\r\n    /**\r\n     * The value 10, with a scale of 0.\r\n     *\r\n     * @since  1.5\r\n     */\r\n    public static final BigDecimal TEN =\r\n        ZERO_THROUGH_TEN[10];\r\n```\r\n\r\nWhich causes an issue because the previous matcher (in 3.6.11 at least) was as follows:\r\n```kotlin\r\nNumberTypeMatcher.NumberType.DECIMAL -> {\r\n  logger.debug { \"comparing type of ${valueOf(actual)} to a decimal at $path\" }\r\n  if (actual !is Float && actual !is Double && actual !is BigDecimal && actual != 0) {\r\n    return listOf(mismatchFactory.create(expected, actual,\r\n      \"Expected ${valueOf(actual)} to be a decimal number\",\r\n      path))\r\n  }\r\n}\r\n```\r\n\r\nwhere just being the BigDecimal type was enough to match the \"decimal\" PACT kind.\r\n\r\nI suppose this might have been asked before, but I wasn't quite able to find info on how you would recommend proceeding? (assuming this is voluntary, that is)\r\n\r\nBest regards", "url": "https://github.com/DiUS/pact-jvm/issues/1001", "user": "Tristan971", "labels": ["bug"], "created": "2020-01-21 00:16:58", "closed": "2020-06-12 16:43:48", "commits": {"afba8a6a9b23e3cb0feed2738377ca63e16983dd": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 143.00027777777777, "commitsDetails": [{"commitHash": "afba8a6a9b23e3cb0feed2738377ca63e16983dd", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e70525b0db375781c52147005d49882d4b5800a7"], "nameRev": "afba8a6a9b23e3cb0feed2738377ca63e16983dd tags/4_0_5~14", "commitMessage": "fix: BigDecimal comparison should use scale and include BigDecimal.ZERO #1001\n", "commitDateTime": "2020-01-25 16:32:44", "authoredDateTime": "2020-01-25 16:32:44", "commitGitStats": [{"filePath": "core/matchers/src/main/kotlin/au/com/dius/pact/core/matchers/MatcherExecutor.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "core/matchers/src/test/groovy/au/com/dius/pact/core/matchers/MatcherExecutorSpec.groovy", "insertions": 5, "deletions": 2, "lines": 7}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["afba8a6a9b23e3cb0feed2738377ca63e16983dd"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/matchers/src/main/kotlin/au/com/dius/pact/core"]}, {"title": "PACT verification fails when header has comma separated values", "body": "I have following PACT file:\r\n\r\n```\r\n\"response\": {\r\n        \"status\": 200,\r\n        \"headers\": {\r\n          \"Access-Control-Expose-Headers\": \"content-length,content-type\",\r\n          \"X-XSS-Protection\": \"1; mode=block\"\r\n        },\r\n\r\n```\r\n\r\nWhen I start pact provider test I recieve assertionError:\r\n\r\n```\r\njava.lang.AssertionError: \r\n0 - Expected header 'Access-Control-Expose-Headers' to have value 'content-length' but was 'content-length,content-type', Expected header 'Access-Control-Expose-Headers' to have value 'content-type' but was ''\r\n\r\n```\r\n\r\nI am using spring-boot:2.2.2 and pact-jvm-provider-spring:4.0.4.", "url": "https://github.com/DiUS/pact-jvm/issues/997", "user": "PatrickNestmeyer", "labels": ["bug"], "created": "2020-01-07 16:14:10", "closed": "2020-03-08 02:08:06", "commits": {"7e6b8c00d0d05a0fd0e59ebca310cc7da61ac88d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "de122a053d6bca6ab9cdbac2f46ef372c96e5e44": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 60.000277777777775, "commitsDetails": [{"commitHash": "7e6b8c00d0d05a0fd0e59ebca310cc7da61ac88d", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["6eee48267d2c81d7472ac8426752cb3ccd265581"], "nameRev": "7e6b8c00d0d05a0fd0e59ebca310cc7da61ac88d tags/4_0_5~20", "commitMessage": "fix: handle headers with comma-seprated values #997\n", "commitDateTime": "2020-01-22 16:46:17", "authoredDateTime": "2020-01-22 16:46:17", "commitGitStats": [{"filePath": "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderClient.kt", "insertions": 7, "deletions": 5, "lines": 12}, {"filePath": "provider/pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/groovysupport/ProviderClientSpec.groovy", "insertions": 24, "deletions": 0, "lines": 24}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "de122a053d6bca6ab9cdbac2f46ef372c96e5e44", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e131c4e063aa9fe6af5ccce8d62eb4559072db46"], "nameRev": "de122a053d6bca6ab9cdbac2f46ef372c96e5e44 tags/3_6_15~41", "commitMessage": "fix: handle headers with comma-seprated values #997\n\n(cherry picked from commit 7e6b8c00d0d05a0fd0e59ebca310cc7da61ac88d)\n", "commitDateTime": "2020-04-26 17:37:27", "authoredDateTime": "2020-01-22 16:46:17", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderClient.kt", "insertions": 7, "deletions": 5, "lines": 12}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/groovysupport/ProviderClientSpec.groovy", "insertions": 24, "deletions": 0, "lines": 24}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7e6b8c00d0d05a0fd0e59ebca310cc7da61ac88d"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 5, "lines": 12, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider"]}, {"title": "IndexOutOfBoundsException without providerStates", "body": "I tried upgrading a pact maven demo and ran into an issue:\r\nhttps://github.com/uglyog/pact-maven-amqp-test/compare/master...crummy:master\r\n\r\n```\r\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\r\n\r\n\tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\r\n\tat java.util.ArrayList.get(ArrayList.java:433)\r\n\tat au.com.dius.pact.consumer.junit.MessagePactProviderRule.parsePacts(MessagePactProviderRule.java:194)\r\n\tat au.com.dius.pact.consumer.junit.MessagePactProviderRule.access$500(MessagePactProviderRule.java:28)\r\n```\r\n\r\nI was able to resolve it by changing line 26 to include a providerState (change to return `builder.given(\"bar\")`) and line 33 to the same (change to `@PactVerification({\"foo\", \"bar\"}`)), however - as if a providerState is now required?\r\n\r\nFrom talking to @uglyog I think I should be able to run the test after upgrading the library without any code changes.", "url": "https://github.com/DiUS/pact-jvm/issues/982", "user": "crummy", "labels": ["bug"], "created": "2019-11-22 05:20:06", "closed": "2020-03-08 02:07:09", "commits": {"a57e75891618b0ca59f6c6b8e7bbc52f183fc224": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "3caa7de91d87d21614c3aacce37d2522b4391d9c": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 106.00027777777778, "commitsDetails": [{"commitHash": "a57e75891618b0ca59f6c6b8e7bbc52f183fc224", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["7f44c37f9843ebcb2443b7093674b50be77f06b1"], "nameRev": "a57e75891618b0ca59f6c6b8e7bbc52f183fc224 tags/4_0_4~5", "commitMessage": "fix: MessagePactProviderRule fails if there are no provider states #982\n", "commitDateTime": "2019-11-24 13:56:56", "authoredDateTime": "2019-11-24 13:56:56", "commitGitStats": [{"filePath": "consumer/pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/junit/MessagePactProviderRule.java", "insertions": 7, "deletions": 2, "lines": 9}, {"filePath": "consumer/pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/junit/MessagePactProviderRuleSpec.groovy", "insertions": 54, "deletions": 0, "lines": 54}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessagePactProviderRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.junit.MessagePactProviderRule.parsePacts()", "TOT": 7, "UPD": 1, "INS": 3, "MOV": 3, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "3caa7de91d87d21614c3aacce37d2522b4391d9c", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["cf2f2a6380f2a29c415bf2c29264c7b3ff3a7455"], "nameRev": "3caa7de91d87d21614c3aacce37d2522b4391d9c tags/3_6_15~48", "commitMessage": "fix: MessagePactProviderRule fails if there are no provider states #982\n\n(cherry picked from commit a57e75891618b0ca59f6c6b8e7bbc52f183fc224)\n", "commitDateTime": "2020-04-26 16:53:08", "authoredDateTime": "2019-11-24 13:56:56", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/MessagePactProviderRule.java", "insertions": 7, "deletions": 2, "lines": 9}, {"filePath": "pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/junit/MessagePactProviderRuleSpec.groovy", "insertions": 0, "deletions": 0, "lines": 0}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessagePactProviderRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MessagePactProviderRule.parsePacts()", "TOT": 6, "UPD": 2, "INS": 2, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a57e75891618b0ca59f6c6b8e7bbc52f183fc224"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 2, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7, "UPD": 1, "INS": 3, "MOV": 3, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["consumer/pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.junit.MessagePactProviderRule.parsePacts()"]}, {"title": "pact-jvm-core-matchers 4.0.3: JsonNull does not match the type of JsonNull", "body": "I have two `JsonNull` instances that are reported as not having the same type:\r\n\r\n```\r\nmismatches={$.0.link=[BodyMismatch(expected=null, actual=null, mismatch=Expected null (JsonNull) to be the same type as null (JsonNull), path=$.0.link, diff=null)] ...}\r\n```\r\n\r\nThe bug seems to be in `MatcherExecutor::matchType`. `JsonNull` is never handled there.", "url": "https://github.com/DiUS/pact-jvm/issues/981", "user": "audunhalland", "labels": ["bug"], "created": "2019-11-19 00:36:54", "closed": "2020-02-22 23:02:56", "commits": {"14fd2586c2f463f18fd3ad49a6b03bfc363abe65": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 95.00027777777778, "commitsDetails": [{"commitHash": "14fd2586c2f463f18fd3ad49a6b03bfc363abe65", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["afba8a6a9b23e3cb0feed2738377ca63e16983dd"], "nameRev": "14fd2586c2f463f18fd3ad49a6b03bfc363abe65 tags/4_0_5~13", "commitMessage": "fix: correct the type matcher to treat JsonNull as a null #981\n", "commitDateTime": "2020-01-25 16:47:41", "authoredDateTime": "2020-01-25 16:47:41", "commitGitStats": [{"filePath": "core/matchers/src/main/kotlin/au/com/dius/pact/core/matchers/MatcherExecutor.kt", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "core/matchers/src/test/groovy/au/com/dius/pact/core/matchers/MatcherExecutorSpec.groovy", "insertions": 23, "deletions": 16, "lines": 39}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["14fd2586c2f463f18fd3ad49a6b03bfc363abe65"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/matchers/src/main/kotlin/au/com/dius/pact/core"]}, {"title": "Reports contain null values in pact-jvm-provider version 4", "body": "After upgrading pact-jvm-provider to version 4 (4.0.3), I noticed some problems with the generated reports, which do not show correctly the path and failure. I am using xml for request and response, not sure if it matters. This is what we currently see in our reports (markdown, json, console) when there is a failed interaction:\r\n\r\nMarkdown:\r\n| Path | Failure |\r\n| ---- | ------- |\r\n|$|null|\r\n\r\nJson:\r\n\"body\": null\r\n\r\nConsole:\r\nScenario 1 returns a response which has a matching body\r\n      Scenario 1 returns a response which has a matching body=BodyComparisonResult(mismatches={$.node.node1.node2=[BodyMismatch(expected=[node2: null], actual=[node2: null], mismatch=Expected <node2> to match 'VALUE2', path=$.node.node1.node2, diff=null)]}, diff=[-<node>\t<node1>\t\t<node2>VALUE1<node2>\t<node1><node>, +<node>\t<node1>\t\t<node2>VALUE2<node2>\t<node1><node>, +])", "url": "https://github.com/DiUS/pact-jvm/issues/980", "user": "anddreiu", "labels": ["bug"], "created": "2019-11-15 06:16:50", "closed": "2020-02-22 22:34:21", "commits": {"cd1d14dc8f3b5334675907e037f5fcccd52bb809": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "7f44c37f9843ebcb2443b7093674b50be77f06b1": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 99.00027777777778, "commitsDetails": [{"commitHash": "cd1d14dc8f3b5334675907e037f5fcccd52bb809", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["4b2c3f6d2620f9b8262270d15b9ef275e4cc63fb"], "nameRev": "cd1d14dc8f3b5334675907e037f5fcccd52bb809 tags/4_0_4~7", "commitMessage": "fix: JSON reporter was generated incorrect failure JSON #980\n", "commitDateTime": "2019-11-24 11:25:56", "authoredDateTime": "2019-11-24 11:25:56", "commitGitStats": [{"filePath": "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ResponseComparison.kt", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/reporters/JsonReporter.kt", "insertions": 20, "deletions": 3, "lines": 23}, {"filePath": "provider/pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/reporters/JsonReporterSpec.groovy", "insertions": 84, "deletions": 1, "lines": 85}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "7f44c37f9843ebcb2443b7093674b50be77f06b1", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["cd1d14dc8f3b5334675907e037f5fcccd52bb809"], "nameRev": "7f44c37f9843ebcb2443b7093674b50be77f06b1 tags/4_0_4~6", "commitMessage": "fix: correct the markdown rendering of verification errors #980\n", "commitDateTime": "2019-11-24 12:15:41", "authoredDateTime": "2019-11-24 12:09:09", "commitGitStats": [{"filePath": "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/reporters/MarkdownReporter.kt", "insertions": 50, "deletions": 19, "lines": 69}, {"filePath": "provider/pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/reporters/MarkdownReporterSpec.groovy", "insertions": 119, "deletions": 1, "lines": 120}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cd1d14dc8f3b5334675907e037f5fcccd52bb809", "7f44c37f9843ebcb2443b7093674b50be77f06b1"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 77, "deletions": 23, "lines": 100, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider"]}, {"title": "XmlBodyMatcher: Reading text values that cointan special characters from elements fails with pact-jvm-provider-junit version 4.0.2", "body": "_Description:_\r\nWe have pact-jvm-provider-junit_2.12 with version 3.6.14 and we used XmlBodyMatcher to match response values in our provider side and all the rules passed smothly :)\r\nWe tried to updated to pact-jvm-provider-junit (version 4.0.2) and we noticed that rules for fields that contained special characters like: (\"[\", \"!\", \"*\",\"]\") fail to pass anymore.\r\n_Example:_\r\n - provider response:\r\n```\r\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n <providerService version=\"1.0\">\r\n   <attribute1>\r\n     <newattribute>\r\n         <date month=\"11\" year=\"2019\"/>\r\n       <name><![CDATA[Surname Name]]></name>\r\n     </newattribute>\r\n     <newattribute2>\r\n       <countryCode>RO</countryCode>\r\n       <hiddenData>ABCD***************010101</hiddenData>\r\n     </newattribute2>\r\n   </attribute1>\r\n </providerService>\r\n```\r\n - defined pact rules:\r\n```\r\n\"$.providerService.attribute1.newattribute.name\":{\r\n \"matchers\": [\r\n     {\r\n     \"match\": \"equality\"\r\n     }\r\n     ],\r\n     \"combine\": \"AND\"\r\n     },\r\n },\r\n \"$.body.providerService.attribute1.newattribute2.hiddenData\": {\r\n     \"matchers\": [\r\n     {\r\n       \"match\": \"equality\"\r\n     }\r\n   ],\r\n   \"combine\": \"AND\"\r\n  }\r\n```\r\nError message:\r\n```\r\njava.lang.AssertionError: \r\n0 - BodyComparisonResult(mismatches={$.providerService.attribute1.newattribute.name=[BodyMismatch(expected=[name: null], actual=[name: null], mismatch=Expected [name: null] to equal [name: null], \r\npath=$.providerService.attribute1.newattribute.name, diff=null)],\r\n $.\"$.body.providerService.attribute1.newattribute2.hiddenData=[BodyMismatch(expected=[hiddenData: null], actual=[hiddenData: null], mismatch=Expected [hiddenData: null] to equal [hiddenData: null],\r\npath=$.body.providerService.attribute1.newattribute2.hiddenData, diff=null)]}, diff=[- <?xml version=\"1.0\" encoding=\"UTF-8\"?><providerService version=\"1.0\"><attribute1><newattribute><date month=\"11\" year=\"2019\"/><name><![CDATA[Surname Name]]></name></newattribute><newattribute2>\r\n<countryCode>RO</countryCode><hiddenData>ABCD***************010101</hiddenData></newattribute2></attribute1></providerService>, +])\r\n\r\n\tat au.com.dius.pact.provider.junit.target.BaseTarget.getAssertionError(BaseTarget.kt:72)\r\n\tat au.com.dius.pact.provider.junit.target.HttpTarget.testInteraction(HttpTarget.kt:80)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner$interactionBlock$statement$1.evaluate(InteractionRunner.kt:208)\r\n\tat au.com.dius.pact.provider.junit.RunStateChanges.evaluate(RunStateChanges.kt:20)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner.run(InteractionRunner.kt:149)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.kt:137)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.kt:51)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n```\r\n\r\n  \r\n  Instead of match: equality I also tried with  regex \r\n   ```\r\n\"match\": \"regex\",\r\n  \"regex\": \"^.ABCD*[\\\\*]{15}010101.*$\"\r\n```\r\nbut I received same error message", "url": "https://github.com/DiUS/pact-jvm/issues/975", "user": "vasile21", "labels": ["bug"], "created": "2019-11-05 08:09:56", "closed": "2020-02-22 23:03:02", "commits": {"b5c7486905179160f8a048d3d1515b9da82c6e21": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 109.00027777777778, "commitsDetails": [{"commitHash": "b5c7486905179160f8a048d3d1515b9da82c6e21", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["8aea916db73d6d8d2159d7ea42ae14c3e808e6d4"], "nameRev": "b5c7486905179160f8a048d3d1515b9da82c6e21 tags/4_0_3~4", "commitMessage": "fix: correctly handle XML node types when comparing with matchers #975\n", "commitDateTime": "2019-11-09 13:16:03", "authoredDateTime": "2019-11-09 13:16:03", "commitGitStats": [{"filePath": "consumer/pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/junit/Defect975XMLTest.groovy", "insertions": 74, "deletions": 0, "lines": 74}, {"filePath": "core/matchers/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/matchers/src/main/kotlin/au/com/dius/pact/core/matchers/MatcherExecutor.kt", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "core/matchers/src/main/kotlin/au/com/dius/pact/core/matchers/XmlBodyMatcher.kt", "insertions": 7, "deletions": 4, "lines": 11}, {"filePath": "core/matchers/src/test/groovy/au/com/dius/pact/core/matchers/XmlBodyMatcherSpec.groovy", "insertions": 66, "deletions": 0, "lines": 66}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b5c7486905179160f8a048d3d1515b9da82c6e21"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 6, "lines": 21, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/matchers/src/main/kotlin/au/com/dius/pact/core", "core/matchers"]}, {"title": "Junit 5 constructor parameter injection fails with PactConsumerTestExt extension", "body": "Junit 5 constructor injection fails when @ExtendWith(PactConsumerTestExt.class) is used on a test class. Below is an example class to replicate this. \r\n\r\n```\r\nimport static org.springframework.http.HttpHeaders.CONTENT_TYPE;\r\n\r\nimport au.com.dius.pact.consumer.dsl.DslPart;\r\nimport au.com.dius.pact.consumer.dsl.PactDslJsonBody;\r\nimport au.com.dius.pact.consumer.dsl.PactDslWithProvider;\r\nimport au.com.dius.pact.consumer.junit5.PactConsumerTestExt;\r\nimport au.com.dius.pact.consumer.junit5.PactTestFor;\r\nimport au.com.dius.pact.consumer.junit5.ProviderType;\r\nimport au.com.dius.pact.core.model.RequestResponsePact;\r\nimport au.com.dius.pact.core.model.annotations.Pact;\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.api.TestInfo;\r\nimport org.junit.jupiter.api.extension.ExtendWith;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.web.client.RestTemplate;\r\n\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\n@ExtendWith(PactConsumerTestExt.class)\r\n@PactTestFor(providerName = \"provider\", port = \"9000\", providerType = ProviderType.SYNCH)\r\nclass PactBugApplicationTests {\r\n\r\n    private final TestInfo testInfo;\r\n\r\n    PactBugApplicationTests(TestInfo testInfo) {\r\n\r\n        this.testInfo = testInfo;\r\n    }\r\n\r\n    @Test\r\n    @PactTestFor(providerName = \"provider\", pactMethod = \"getPact\")\r\n    void testPact() {\r\n\r\n        final RestTemplate restTemplate = new RestTemplate();\r\n\r\n        final String forObject = restTemplate.getForObject(\"http://localhost:9000/test\", String.class);\r\n\r\n        Assertions.assertNotNull(forObject);\r\n    }\r\n\r\n    @Pact(provider = \"provider\", consumer = \"consumer\")\r\n    RequestResponsePact getPact(PactDslWithProvider builder) {\r\n\r\n        final DslPart message = new PactDslJsonBody().object(\"test\").stringType(\"message\").closeObject();\r\n\r\n        final Map<String, String> headers = new HashMap<>();\r\n        headers.put(CONTENT_TYPE, MediaType.APPLICATION_JSON_UTF8_VALUE);\r\n\r\n        return builder.given(\"a state\")\r\n                      .uponReceiving(\"a message\")\r\n                      .method(\"GET\")\r\n                      .path(\"/test\")\r\n                      .willRespondWith()\r\n                      .headers(headers)\r\n                      .status(200)\r\n                      .body(message)\r\n                      .toPact();\r\n    }\r\n}\r\n```\r\n\r\nRunning the above pact test fails with the following stack trace:\r\n\r\n```\r\norg.junit.jupiter.api.extension.ParameterResolutionException: Failed to resolve parameter [org.junit.jupiter.api.TestInfo testInfo] in executable [org.alexp.pactbug.PactBugApplicationTests(org.junit.jupiter.api.TestInfo)]\r\n\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.resolveParameter(ExecutableInvoker.java:221)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.resolveParameters(ExecutableInvoker.java:174)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.resolveParameters(ExecutableInvoker.java:135)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:61)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateTestClass(ClassTestDescriptor.java:208)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.instantiateAndPostProcessTestInstance(ClassTestDescriptor.java:195)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$0(ClassTestDescriptor.java:185)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$1(ClassTestDescriptor.java:189)\r\n\tat java.base/java.util.Optional.orElseGet(Optional.java:369)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$testInstanceProvider$2(ClassTestDescriptor.java:188)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:81)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.prepare(TestMethodTestDescriptor.java:58)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$prepare$0(NodeTestTask.java:83)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.prepare(NodeTestTask.java:83)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:69)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$4(NodeTestTask.java:112)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:98)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:220)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:188)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:202)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:181)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:128)\r\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:74)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\nCaused by: kotlin.TypeCastException: null cannot be cast to non-null type au.com.dius.pact.consumer.junit5.ProviderInfo\r\n\tat au.com.dius.pact.consumer.junit5.PactConsumerTestExt.supportsParameter(PactConsumerTestExt.kt:138)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$resolveParameter$0(ExecutableInvoker.java:185)\r\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:176)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:177)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:312)\r\n\tat java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)\r\n\tat java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.resolveParameter(ExecutableInvoker.java:186)\r\n\t... 39 more\r\n\r\n\r\njava.lang.AssertionError: The following methods annotated with @Pact were not executed during the test: PactBugApplicationTests.getPact\r\nIf these are currently a work in progress, and a @Disabled annotation to the method\r\n\r\n\r\n\tat au.com.dius.pact.consumer.junit5.PactConsumerTestExt.afterAll(PactConsumerTestExt.kt:340)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeAfterAllCallbacks$9(ClassTestDescriptor.java:262)\r\n\tat org.junit.jupiter.engine.execution.ThrowableCollector.execute(ThrowableCollector.java:40)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.lambda$invokeAfterAllCallbacks$10(ClassTestDescriptor.java:262)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.invokeAfterAllCallbacks(ClassTestDescriptor.java:262)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.after(ClassTestDescriptor.java:177)\r\n\tat org.junit.jupiter.engine.descriptor.ClassTestDescriptor.after(ClassTestDescriptor.java:65)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:118)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:72)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:118)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:74)\r\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1540)\r\n```\r\n\r\nPom for reference:\r\n\r\n```\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <parent>\r\n        <groupId>org.springframework.boot</groupId>\r\n        <artifactId>spring-boot-starter-parent</artifactId>\r\n        <version>2.1.9.RELEASE</version>\r\n        <relativePath/>\r\n    </parent>\r\n    <groupId>org.alexp</groupId>\r\n    <artifactId>pact-bug</artifactId>\r\n    <version>0.0.1-SNAPSHOT</version>\r\n    <name>pact-bug</name>\r\n\r\n    <properties>\r\n        <java.version>11</java.version>\r\n    </properties>\r\n\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.springframework.boot</groupId>\r\n            <artifactId>spring-boot-starter-web</artifactId>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>au.com.dius</groupId>\r\n            <artifactId>pact-jvm-consumer-junit5</artifactId>\r\n            <version>4.0.2</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter-engine</artifactId>\r\n            <version>5.2.0</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n\r\n        <dependency>\r\n            <groupId>org.jetbrains.kotlin</groupId>\r\n            <artifactId>kotlin-stdlib</artifactId>\r\n            <version>1.3.50</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.jetbrains.kotlin</groupId>\r\n            <artifactId>kotlin-reflect</artifactId>\r\n            <version>1.3.50</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.jetbrains.kotlin</groupId>\r\n            <artifactId>kotlin-stdlib-jdk8</artifactId>\r\n            <version>1.3.50</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.springframework.boot</groupId>\r\n                <artifactId>spring-boot-maven-plugin</artifactId>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n\r\n</project>\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/971", "user": "ajpask", "labels": ["bug"], "created": "2019-10-30 10:56:10", "closed": "2019-11-14 17:45:51", "commits": {"cd1df8dd8272c61205f939cdf0f823a3101841c5": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "9573326faebe9fcd2a0f1e1df1483e83aeac8057": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 15.000277777777777, "commitsDetails": [{"commitHash": "cd1df8dd8272c61205f939cdf0f823a3101841c5", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a2c5211513957755d9567d868e694b9904c769d6"], "nameRev": "cd1df8dd8272c61205f939cdf0f823a3101841c5 tags/4_0_3~6", "commitMessage": "fix: support tests with injected constructor parameters #971\n", "commitDateTime": "2019-11-04 14:11:32", "authoredDateTime": "2019-11-04 14:11:32", "commitGitStats": [{"filePath": "consumer/pact-jvm-consumer-junit5/src/main/kotlin/au/com/dius/pact/consumer/junit5/PactConsumerTestExt.kt", "insertions": 36, "deletions": 28, "lines": 64}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "9573326faebe9fcd2a0f1e1df1483e83aeac8057", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1f77e65d5109c0911b091331bbd7ad95a86c441f"], "nameRev": "9573326faebe9fcd2a0f1e1df1483e83aeac8057 tags/3_6_15~54", "commitMessage": "fix: support tests with injected constructor parameters #971\n\n(cherry picked from commit cd1df8dd8272c61205f939cdf0f823a3101841c5)\n", "commitDateTime": "2020-04-26 16:28:17", "authoredDateTime": "2019-11-04 14:11:32", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit5/src/main/kotlin/au/com/dius/pact/consumer/junit5/PactConsumerTestExt.kt", "insertions": 36, "deletions": 28, "lines": 64}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cd1df8dd8272c61205f939cdf0f823a3101841c5"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "XmlBodyMatcher - Interactions that contains rules with invalid syntax are not marked as failed", "body": "I am using pact-jvm-provider-junit_2.12,version 3.6.10 and I have a problem with verifying if defined rules by provider are valid.\r\nOur application is having an XML request body and response and I am trying to verify if a specific field is having a value for an attribute. \r\nThe following rule:\r\n```\r\n\"$.serviceNode.entity.status.thirdNode['@description]\": {\r\n          \"match\": \"regex\",\r\n          \"regex\": \"^.*Not eligible.*$\"\r\n        },\r\n```\r\nhas a synstax error due to the fact that description attribute is not enclosed with `''`, valid syntax would be ['@description']\r\nIn console there is a WARN about this:\r\n`[main] WARN  au.com.dius.pact.matchers.Matchers \u2013 Path expression $.serviceNode.entity.status.thirdNode['@description] is invalid, ignoring: [1.76] failure: `'' expected but end of source found`\r\n\r\nPACT framework is ingoring the rule due to invalid syntax and publish all interactions being passed in PACT broker.\r\nSouldn't interactions that contains rules with invalid syntax to be marked as failed? \r\nBecause with the current behaviour is very hard to track each modification what we do in our pact file (we see all interactions had passed even tho there are some rules that were not executed due to invalid syntax)\r\nAlso if rule has invalid syntax would be more nice to have an `ERROR` logged instead of a `WARN`.\r\n\r\nThis might be related with changes performed in: https://github.com/DiUS/pact-jvm/issues/899\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/957", "user": "vasile21", "labels": ["bug"], "created": "2019-10-16 12:41:37", "closed": "2020-03-08 02:10:29", "commits": {"7d83a956a4b0dcc35618ee33277d34ec37b0f4f6": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 143.00027777777777, "commitsDetails": [{"commitHash": "7d83a956a4b0dcc35618ee33277d34ec37b0f4f6", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["05ca602918f1a3fa54c632028b72692e532fe8dd"], "nameRev": "7d83a956a4b0dcc35618ee33277d34ec37b0f4f6 tags/4_0_2~8", "commitMessage": "fix: let invalid path exceptions propogate so verification fails #957\n", "commitDateTime": "2019-10-27 13:33:20", "authoredDateTime": "2019-10-27 13:33:20", "commitGitStats": [{"filePath": "core/matchers/src/main/kotlin/au/com/dius/pact/core/matchers/Matchers.kt", "insertions": 12, "deletions": 23, "lines": 35}, {"filePath": "core/matchers/src/test/groovy/au/com/dius/pact/core/matchers/MatchersSpec.groovy", "insertions": 17, "deletions": 0, "lines": 17}, {"filePath": "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderVerifier.kt", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "provider/pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ProviderVerifierSpec.groovy", "insertions": 45, "deletions": 0, "lines": 45}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7d83a956a4b0dcc35618ee33277d34ec37b0f4f6"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 25, "lines": 40, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider", "core/matchers/src/main/kotlin/au/com/dius/pact/core"]}, {"title": "Body encoding in OptionalBody not used", "body": "In pact 4.0.0 https://github.com/DiUS/pact-jvm/issues/941 was fixed, however pact tests with alternative encodings still do not work. There are two places in the code that look suspicious:\r\n\r\nOptionalBody.kt:\r\n```kotlin\r\noverride fun toString(): String {\r\n  return when (state) {\r\n    State.PRESENT -> \"PRESENT(${value!!.toString(Charset.defaultCharset())})\"\r\n    State.EMPTY -> \"EMPTY\"\r\n    State.NULL -> \"NULL\"\r\n    State.MISSING -> \"MISSING\"\r\n  }\r\n}\r\n\r\nfun valueAsString(): String {\r\n  return when (state) {\r\n    State.PRESENT -> value!!.toString(Charset.defaultCharset())\r\n    State.EMPTY -> \"\"\r\n    State.NULL -> \"\"\r\n    State.MISSING -> \"\"\r\n  }\r\n}\r\n```\r\nHere `Charset.defaultCharset()` is used instead of the charset encoded in the field `contentType` in `OptionalBody`. This leads to the string being incorrectly serialized in the `parseBody(...)` method of the class `RequestResponseInteraction`.\r\n\r\nRequest.kt / Response.kt\r\n```kotlin\r\njson[\"body\"].isJsonPrimitive && json[\"body\"].asJsonPrimitive.isString ->\r\n  OptionalBody.body(json[\"body\"].asJsonPrimitive.asString.toByteArray())\r\nelse -> OptionalBody.body(json[\"body\"].toString().toByteArray())\r\n```\r\n\r\nIn this code the `Content-Type` header is not being added to the body. I am however not sure, if this is required.", "url": "https://github.com/DiUS/pact-jvm/issues/956", "user": "ogalimov", "labels": ["bug"], "created": "2019-10-15 15:06:31", "closed": "2020-02-22 22:57:17", "commits": {"05ca602918f1a3fa54c632028b72692e532fe8dd": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 130.00027777777777, "commitsDetails": [{"commitHash": "05ca602918f1a3fa54c632028b72692e532fe8dd", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["b37c6d7712ce3ef4e9a2229b8615f3d8ebc88769"], "nameRev": "05ca602918f1a3fa54c632028b72692e532fe8dd tags/4_0_2~9", "commitMessage": "chore: use the charset from the content type when converting bodies #956\n", "commitDateTime": "2019-10-27 11:58:43", "authoredDateTime": "2019-10-27 11:58:43", "commitGitStats": [{"filePath": "consumer/pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 34, "deletions": 11, "lines": 45}, {"filePath": "consumer/pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java", "insertions": 38, "deletions": 20, "lines": 58}, {"filePath": "consumer/pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslResponse.java", "insertions": 46, "deletions": 26, "lines": 72}, {"filePath": "consumer/pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/KTorMockServer.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "consumer/pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MessagePactBuilder.kt", "insertions": 10, "deletions": 8, "lines": 18}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/ContentType.kt", "insertions": 16, "deletions": 9, "lines": 25}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/OptionalBody.kt", "insertions": 2, "deletions": 4, "lines": 6}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/Request.kt", "insertions": 9, "deletions": 2, "lines": 11}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/Response.kt", "insertions": 9, "deletions": 2, "lines": 11}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/generators/Generators.kt", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/messaging/Message.kt", "insertions": 19, "deletions": 13, "lines": 32}, {"filePath": "core/model/src/test/groovy/au/com/dius/pact/core/model/messaging/MessageSpec.groovy", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Conversions.scala", "insertions": 8, "deletions": 6, "lines": 14}, {"filePath": "provider/pact-jvm-provider-scalasupport/src/main/scala/au/com/dius/pact/provider/unfiltered/Conversions.scala", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderVerifier.kt", "insertions": 12, "deletions": 6, "lines": 18}, {"filePath": "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ResponseComparison.kt", "insertions": 5, "deletions": 2, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 18, "UPD": 1, "INS": 4, "MOV": 11, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.w3c.dom.Document)", "TOT": 15, "UPD": 1, "INS": 5, "MOV": 8, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.json.JSONObject)", "TOT": 9, "UPD": 0, "INS": 2, "MOV": 6, "DEL": 1}]}, {"spoonFilePath": "PactDslRequestWithoutPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.json.JSONObject)", "TOT": 10, "UPD": 1, "INS": 2, "MOV": 5, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 10, "UPD": 1, "INS": 2, "MOV": 5, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.w3c.dom.Document)", "TOT": 11, "UPD": 0, "INS": 3, "MOV": 5, "DEL": 3}]}, {"spoonFilePath": "PactDslResponse.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 16, "UPD": 2, "INS": 6, "MOV": 6, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(org.json.JSONObject)", "TOT": 10, "UPD": 1, "INS": 2, "MOV": 5, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(org.w3c.dom.Document)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["05ca602918f1a3fa54c632028b72692e532fe8dd"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 214, "deletions": 115, "lines": 329, "gitFilesChange": 15}, "spoonStatsSummary": {"TOT": 101, "UPD": 7, "INS": 27, "MOV": 52, "DEL": 15, "spoonFilesChanged": 3, "spoonMethodsChanged": 9}, "statsSkippedReason": "", "changesInPackagesGIT": ["consumer/pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer", "core/model/src/main/kotlin/au/com/dius/pact/core", "consumer/pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer", "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Conversions.scala", "provider/pact-jvm-provider-scalasupport/src/main/scala/au/com/dius/pact/provider", "provider/pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.json.JSONObject)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.json.JSONObject)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.w3c.dom.Document)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(org.w3c.dom.Document)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(org.json.JSONObject)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.w3c.dom.Document)"]}, {"title": "class PactDslResponse does not handle encoding correctly", "body": "In pact-jvm-consumer:4.0.0-beta.6\r\n\r\n```java\r\npublic PactDslResponse body(String body, String mimeType) {\r\n  responseBody = OptionalBody.body(body.getBytes(), new au.com.dius.pact.core.model.ContentType(mimeType));\r\n  responseHeaders.put(CONTENT_TYPE, Collections.singletonList(mimeType));\r\n  return this;\r\n}\r\n```\r\n\r\nThis code is a bit dubious when it comes to encoding. Because the body has a charset, that is possibly encoded in the mimeType, but the method body.getBytes() uses system encoding. As there is no method `public PactDslResponse body(byte[] body, String mimeType)`, there is no workaround.", "url": "https://github.com/DiUS/pact-jvm/issues/941", "user": "ogalimov", "labels": ["bug"], "created": "2019-09-23 08:55:22", "closed": "2020-02-22 22:59:36", "commits": {"f0acf0a714c2aa2c63988658c7c6a18a1754dc1c": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 152.00027777777777, "commitsDetails": [{"commitHash": "f0acf0a714c2aa2c63988658c7c6a18a1754dc1c", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["63fed4ca180828a1d7bb5ed2e18c5c2f9c9fd618"], "nameRev": "f0acf0a714c2aa2c63988658c7c6a18a1754dc1c tags/3_6_14~1", "commitMessage": "fix: use the charset from the content type when converting bodies to bytes #941\n", "commitDateTime": "2019-09-27 18:24:48", "authoredDateTime": "2019-09-27 18:24:48", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 25, "deletions": 22, "lines": 47}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java", "insertions": 25, "deletions": 22, "lines": 47}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslResponse.java", "insertions": 31, "deletions": 25, "lines": 56}, {"filePath": "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MockHttpServer.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators/Generators.kt", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String,java.lang.String)", "TOT": 7, "UPD": 3, "INS": 1, "MOV": 3, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String,org.apache.http.entity.ContentType)", "TOT": 10, "UPD": 4, "INS": 3, "MOV": 3, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier,java.lang.String)", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.bodyWithSingleQuotes(java.lang.String,java.lang.String)", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 3, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.bodyWithSingleQuotes(java.lang.String,org.apache.http.entity.ContentType)", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 3, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier,org.apache.http.entity.ContentType)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "PactDslRequestWithoutPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.lang.String,java.lang.String)", "TOT": 7, "UPD": 3, "INS": 1, "MOV": 3, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.lang.String,org.apache.http.entity.ContentType)", "TOT": 11, "UPD": 4, "INS": 3, "MOV": 3, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.util.function.Supplier,java.lang.String)", "TOT": 5, "UPD": 3, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.bodyWithSingleQuotes(java.lang.String,java.lang.String)", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 3, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.bodyWithSingleQuotes(java.lang.String,org.apache.http.entity.ContentType)", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 3, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.util.function.Supplier,org.apache.http.entity.ContentType)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "PactDslResponse.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.lang.String,java.lang.String)", "TOT": 7, "UPD": 3, "INS": 1, "MOV": 3, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.lang.String,org.apache.http.entity.ContentType)", "TOT": 11, "UPD": 3, "INS": 3, "MOV": 4, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.util.function.Supplier,java.lang.String)", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.bodyWithSingleQuotes(java.lang.String,java.lang.String)", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.bodyWithSingleQuotes(java.lang.String,org.apache.http.entity.ContentType)", "TOT": 7, "UPD": 3, "INS": 1, "MOV": 3, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.util.function.Supplier,org.apache.http.entity.ContentType)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f0acf0a714c2aa2c63988658c7c6a18a1754dc1c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 85, "deletions": 72, "lines": 157, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 109, "UPD": 42, "INS": 23, "MOV": 39, "DEL": 5, "spoonFilesChanged": 3, "spoonMethodsChanged": 18}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl", "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MockHttpServer.kt", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.bodyWithSingleQuotes(java.lang.String,org.apache.http.entity.ContentType)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.bodyWithSingleQuotes(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.util.function.Supplier,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.lang.String,org.apache.http.entity.ContentType)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.util.function.Supplier,org.apache.http.entity.ContentType)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.bodyWithSingleQuotes(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslResponse.bodyWithSingleQuotes(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslResponse.bodyWithSingleQuotes(java.lang.String,org.apache.http.entity.ContentType)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier,org.apache.http.entity.ContentType)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.lang.String,org.apache.http.entity.ContentType)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.bodyWithSingleQuotes(java.lang.String,org.apache.http.entity.ContentType)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.util.function.Supplier,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.util.function.Supplier,org.apache.http.entity.ContentType)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String,org.apache.http.entity.ContentType)"]}, {"title": "GET on pact-jvm-server root (http://localhost:29999) delivers broken json", "body": "###### Environment\r\nJDK: 1.8.0, 11, 12\r\npact-jvm-server: 3.5.15++ (issue raises perhaps with the merge of PR [#666])\r\n\r\n###### Description\r\nA call to `/` delivers broken json response if a mock is created before.\r\n\r\n\r\n###### Example\r\n\r\n1. start pact-jvm-server: `bin\\pact-jvm-server.bat --host 0.0.0.0 --mock-port-lower 30000 --mock-port-upper 30999 --pact-version 3 --debug 29999`\r\n1. create mock: `curl --request POST \\\r\n                   --url 'http://localhost:29999/create?state=Basistestfixture&path=%2Fresource' \\\r\n                   --header 'content-type: application/json' \\\r\n                   --data '{\r\n                   \"consumer\": {\r\n                     \"name\": \"pact-consumer\"\r\n                   },\r\n                   \"provider\": {\r\n                     \"name\": \"pact-provider\"\r\n                   },\r\n                   \"interactions\": [\r\n                     {\r\n                       \"description\": \"get time\",\r\n                       \"request\": {\r\n                         \"method\": \"GET\",\r\n                         \"path\": \"/resource/time/current\",\r\n                 \t\t\t\t\"query\": {\r\n                 \t\t\t\t\t\"locale\": [\"de\"]\r\n                 \t\t\t\t}\r\n                       },\r\n                       \"response\": {\r\n                         \"body\": {\r\n                           \"time\": \"13:00:34.890\"\r\n                          },\r\n                         \"status\": 200\r\n                       },\r\n                       \"providerStates\": [\r\n                         {\r\n                           \"name\": \"Basistestfixture\"\r\n                         }\r\n                       ]\r\n                     }\r\n                   ],\r\n                   \"metadata\": {\r\n                     \"pact-specification\": {\r\n                       \"version\": \"3.0.0\"\r\n                     }\r\n                   }\r\n                 }'` \\\r\n                 -> response: `{ \"port\": 30633 }`\r\n1. call `http://localhost:29999/` to retrieve all created mocks (ports): `curl --request GET --url http://localhost:29999/` \\\r\n    -> response: header: `Content-Type: application/json`; body: `{ \"ports\": [ 30633, /resource ] }` (which not valid json) \\\r\n    => expected `{ \"ports\": [ 30633, \"/resource\" ] }`\r\n    * Why is the `path`-fragment contained in `ports` array?\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/938", "user": "hstamminger", "labels": ["bug"], "created": "2019-09-10 11:24:40", "closed": "2020-02-22 23:01:53", "commits": {"c5a9e0500527f02b1e7971248282b99330bb9621": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 165.00027777777777, "commitsDetails": [{"commitHash": "c5a9e0500527f02b1e7971248282b99330bb9621", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["72bbfaa14f79f24506c9d09b9484f33b6b85d90c"], "nameRev": "c5a9e0500527f02b1e7971248282b99330bb9621 tags/3_6_14~3", "commitMessage": "fix: GET on pact-jvm-server root delivers broken json #938\n", "commitDateTime": "2019-09-27 16:29:20", "authoredDateTime": "2019-09-27 16:29:20", "commitGitStats": [{"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Server.scala", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c5a9e0500527f02b1e7971248282b99330bb9621"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 1, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-server/src/main/scala/au/com/dius/pact/server/Server.scala"]}, {"title": "java.lang.ClassCastException: class java.lang.AssertionError cannot be cast to class java.lang.Exception", "body": "In 4.0.0-beta.6 I get the following exception when I try to execute the provider tests:\r\n```\r\njava.lang.ClassCastException: class java.lang.AssertionError cannot be cast to class java.lang.Exception (java.lang.AssertionError and java.lang.Exception are in module java.base of loader 'bootstrap')\r\n\r\n\tat au.com.dius.pact.core.pactbroker.PactBrokerClient.buildPayload(PactBrokerClient.kt:243)\r\n\tat au.com.dius.pact.core.pactbroker.PactBrokerClient.publishVerificationResults(PactBrokerClient.kt:167)\r\n\tat au.com.dius.pact.core.pactbroker.PactBrokerClient.publishVerificationResults$default(PactBrokerClient.kt:162)\r\n\tat au.com.dius.pact.provider.DefaultVerificationReporter.publishResult(VerificationReporter.kt:45)\r\n\tat au.com.dius.pact.provider.DefaultVerificationReporter.reportResults(VerificationReporter.kt:32)\r\n\tat au.com.dius.pact.provider.VerificationReporter$DefaultImpls.reportResults$default(VerificationReporter.kt:14)\r\n\tat au.com.dius.pact.provider.DefaultTestResultAccumulator.updateTestResult(TestResultAccumulator.kt:48)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner.run(InteractionRunner.kt:157)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.kt:137)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.kt:51)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n```\r\nWhy dont we just cast to Throwable which is base class for both Exception and Error?", "url": "https://github.com/DiUS/pact-jvm/issues/935", "user": "dimovelev", "labels": ["bug"], "created": "2019-09-05 13:49:31", "closed": "2020-02-22 22:58:08", "commits": {"af88262288c754ac9c4ac4d85b488aa51531dfcf": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 170.00027777777777, "commitsDetails": [{"commitHash": "af88262288c754ac9c4ac4d85b488aa51531dfcf", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["705c35cedef64fb7d297971d30f89b8053332ad5"], "nameRev": "af88262288c754ac9c4ac4d85b488aa51531dfcf tags/4_0_0~9", "commitMessage": "fix: for AssertionError cannot be cast to class java.lang.Exception #935\n", "commitDateTime": "2019-09-08 13:50:12", "authoredDateTime": "2019-09-08 13:36:23", "commitGitStats": [{"filePath": "core/pact-broker/src/main/kotlin/au/com/dius/pact/core/pactbroker/PactBrokerClient.kt", "insertions": 7, "deletions": 3, "lines": 10}, {"filePath": "core/pact-broker/src/test/groovy/au/com/dius/pact/core/pactbroker/PactBrokerClientSpec.groovy", "insertions": 17, "deletions": 0, "lines": 17}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["af88262288c754ac9c4ac4d85b488aa51531dfcf"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 3, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/pact-broker/src/main/kotlin/au/com/dius/pact/core"]}, {"title": "Failed verification results not being published when state is missing on provider side", "body": "Dependencies used in the provider tests:\r\nimport au.com.dius.pact.provider.junit.Provider;\r\nimport au.com.dius.pact.provider.junit.State;\r\nimport au.com.dius.pact.provider.junit.loader.PactBroker;\r\nimport au.com.dius.pact.provider.junit5.HttpTestTarget;\r\nimport au.com.dius.pact.provider.junit5.PactVerificationContext;\r\nimport au.com.dius.pact.provider.junit5.PactVerificationInvocationContextProvider;\r\n\r\nTest output: \r\n\r\nContract.Provider.ProviderTests > pactVerificationTestTemplate(PactVerificationContext)[3] STANDARD_OUT\r\n\r\n    Verifying a pact between consumer and provider\r\n      Valid Request\r\n        returns a response which\r\n          has status code 200 (OK)\r\n          includes headers\r\n            \"Content-Type\" with value \"application/json; charset=utf-8\" (OK)\r\n          has a matching body (OK)\r\n\r\n    2019-08-29 14:11:49.009  INFO 19043 --- [    Test worker] a.c.d.p.p.DefaultVerificationReporter    : Published verification result of 'au.com.dius.pact.pactbroker.TestResult$Ok@1d6b0542' for consumer 'Consumer(name=consumer)'\r\nContract.Provider.ProviderTests > pactVerificationTestTemplate(PactVerificationContext)[4] STANDARD_OUT\r\n    2019-08-29 14:11:49.015  INFO 19043 --- [    Test worker] a.c.d.p.p.DefaultTestResultAccumulator   : Not all of the #3 were verified.\r\nContract.Provider.ProviderTests > pactVerificationTestTemplate(PactVerificationContext)[4] FAILED\r\n    au.com.dius.pact.provider.junit.MissingStateChangeMethod: Did not find a test class method annotated with  @ State(\"Some State\")\r\n\r\n(...)\r\n\r\nNotice that in this last case the failure is not Published which means the contract is seen as being verified when it is not the case. \r\n\r\n\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/930", "user": "DavidMendesOS", "labels": ["bug"], "created": "2019-08-30 10:02:26", "closed": "2020-02-22 23:02:18", "commits": {"97a076d3fa6143472dbe1de80728a451745153c7": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 176.00027777777777, "commitsDetails": [{"commitHash": "97a076d3fa6143472dbe1de80728a451745153c7", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["241c7f5614cc23ac6aba169ff82a4f7aa40b4000"], "nameRev": "97a076d3fa6143472dbe1de80728a451745153c7 tags/3_6_13~1", "commitMessage": "fix: mark the test result as failed if a state change callback fails #930\n", "commitDateTime": "2019-09-08 11:38:54", "authoredDateTime": "2019-09-08 11:38:54", "commitGitStats": [{"filePath": "pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/PactJUnit5VerificationProvider.kt", "insertions": 16, "deletions": 5, "lines": 21}, {"filePath": "pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/PactVerificationStateChangeExtensionSpec.groovy", "insertions": 38, "deletions": 1, "lines": 39}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/TestResultAccumulator.kt", "insertions": 12, "deletions": 4, "lines": 16}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/TestResultAccumulatorSpec.groovy", "insertions": 45, "deletions": 0, "lines": 45}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["97a076d3fa6143472dbe1de80728a451745153c7"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 16, "deletions": 5, "lines": 21, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5"]}, {"title": "pact-jvm-server v3.6.3 onwards: Exception when request contains cookie", "body": "java: 1.8.0, 11, 12\r\npact-jvm-server: 3.6.3+ \r\ncommand-line: `bin\\pact-jvm-server_2.12.bat --debug --pact-version 3`\r\n\r\nWe get an exception in the pact-jvm-server (resulting in 500 response) when a request contains a cookie. The last working version is 3.6.2. \r\n\r\n---\r\n\r\nExample:\r\n**Request 'create mock'**\r\n`curl --request POST \\\r\n  --url 'http://localhost:29999/create?state=Basistestfixture&path=' \\\r\n  --header 'content-type: application/json' \\\r\n  --data '{ \"consumer\": { \"name\": \"pact-consumer\" }, \"provider\": { \"name\": \"pact-provider\" }, \"interactions\": [ { \"description\": \"get time\", \"request\": { \"method\": \"GET\", \"path\": \"/resource/time/current\", \"query\": { \"locale\": [ \"de\" ] } }, \"response\": { \"body\": { \"time\": \"13:00:34.890\" }, \"status\": 200 }, \"providerStates\": [ { \"name\": \"Basistestfixture\" } ] } ], \"metadata\": { \"pact-specification\": { \"version\": \"3.0.0\" } } }'`\r\n\r\n**Response 'create mock':**\r\n{\"port\": 27537}\r\n\r\n\r\n**Request to created mock:** \r\n`curl --request GET \r\n  --url 'http://localhost:34228/resource/time/current?locale=de' \r\n  --header 'cookie: test=12345'\r\n\r\n**Response:** 500 - Internal Server Error\r\n\r\n\r\nException in pact-jvm-server:\r\n```\r\nException caught handling request:\r\ngroovy.lang.MissingMethodException: No signature of method: scala.collection.convert.Wrappers$SeqWrapper.split() is applicable for argument types: (String) values: [;]\r\nPossible solutions: split(groovy.lang.Closure), split(groovy.lang.Closure), split(groovy.lang.Closure), wait(), init(), init()\r\n        at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.unwrap(ScriptBytecodeAdapter.java:70)\r\n        at org.codehaus.groovy.vmplugin.v7.IndyGuardsFiltersAndSignatures.unwrap(IndyGuardsFiltersAndSignatures.java:175)\r\n        at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:234)\r\n        at au.com.dius.pact.model.Request.cookie(Request.groovy:92)\r\n        at au.com.dius.pact.model.RequestMatching$.requestMismatches(RequestMatching.scala:55)\r\n        at au.com.dius.pact.model.RequestMatching$.compareRequest(RequestMatching.scala:44)\r\n        at au.com.dius.pact.model.RequestMatching.compareToActual$1(RequestMatching.scala:12)\r\n        at au.com.dius.pact.model.RequestMatching.$anonfun$matchInteraction$1(RequestMatching.scala:13)\r\n        at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:233)\r\n        at scala.collection.Iterator.foreach(Iterator.scala:937)\r\n        at scala.collection.Iterator.foreach$(Iterator.scala:937)\r\n        at scala.collection.AbstractIterator.foreach(Iterator.scala:1425)\r\n        at scala.collection.IterableLike.foreach(IterableLike.scala:70)\r\n        at scala.collection.IterableLike.foreach$(IterableLike.scala:69)\r\n        at scala.collection.AbstractIterable.foreach(Iterable.scala:54)\r\n        at scala.collection.TraversableLike.map(TraversableLike.scala:233)\r\n        at scala.collection.TraversableLike.map$(TraversableLike.scala:226)\r\n        at scala.collection.AbstractTraversable.map(Traversable.scala:104)\r\n        at au.com.dius.pact.model.RequestMatching.matchInteraction(RequestMatching.scala:13)\r\n        at au.com.dius.pact.consumer.PactSession.receiveRequest(PactSession.scala:50)\r\n        at au.com.dius.pact.consumer.StatefulMockProvider.handleRequest(MockProvider.scala:74)\r\n        at au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$$anonfun$intent$1.applyOrElse(UnfilteredMockProvider.scala:24)\r\n        at au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$$anonfun$intent$1.applyOrElse(UnfilteredMockProvider.scala:23)\r\n        at scala.PartialFunction$Lifted.apply(PartialFunction.scala:224)\r\n        at scala.PartialFunction$Lifted.apply(PartialFunction.scala:220)\r\n        at unfiltered.response.Pass$PartialAttempt.attemptWithPass(pass.scala:72)\r\n        at unfiltered.response.Pass$PassingAttempt.attempt(pass.scala:65)\r\n        at unfiltered.response.Pass$PassingAttempt.attempt$(pass.scala:65)\r\n        at unfiltered.response.Pass$PartialAttempt.attempt(pass.scala:67)\r\n        at unfiltered.response.Pass$.$anonfun$fold$1(pass.scala:48)\r\n        at unfiltered.response.Pass$FunctionAttempt.apply(pass.scala:77)\r\n        at unfiltered.netty.cycle.Plan.$anonfun$channelRead$3(plans.scala:68)\r\n        at unfiltered.netty.cycle.Plan.catching(plans.scala:41)\r\n        at unfiltered.netty.cycle.Plan.catching$(plans.scala:40)\r\n        at au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$.catching(UnfilteredMockProvider.scala:19)\r\n        at unfiltered.netty.cycle.Plan.$anonfun$channelRead$2(plans.scala:67)\r\n        at unfiltered.netty.cycle.SynchronousExecution.executeIntent(deferrals.scala:23)\r\n        at unfiltered.netty.cycle.SynchronousExecution.executeIntent$(deferrals.scala:23)\r\n        at au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$.executeIntent(UnfilteredMockProvider.scala:19)\r\n        at unfiltered.netty.cycle.Plan.$anonfun$channelRead$1(plans.scala:66)\r\n        at unfiltered.netty.cycle.Plan.catching(plans.scala:41)\r\n        at unfiltered.netty.cycle.Plan.catching$(plans.scala:40)\r\n        at au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$.catching(UnfilteredMockProvider.scala:19)\r\n        at unfiltered.netty.cycle.Plan.channelRead(plans.scala:65)\r\n        at unfiltered.netty.cycle.Plan.channelRead$(plans.scala:61)\r\n        at au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$.channelRead(UnfilteredMockProvider.scala:19)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:323)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:297)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1434)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:965)\r\n        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\r\n        at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644)\r\n        at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:579)\r\n        at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:496)\r\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:458)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n        at java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\n---\r\nComplete logfile from pact-jvm-server: [pact-jvm-server.log](https://github.com/DiUS/pact-jvm/files/3554700/pact-jvm-server.log)\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/928", "user": "hstamminger", "labels": ["bug"], "created": "2019-08-29 09:02:41", "closed": "2019-09-10 10:48:43", "commits": {"f80d82a9d085abc39f85d2bffaffdfc6afef8810": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 12.000277777777777, "commitsDetails": [{"commitHash": "f80d82a9d085abc39f85d2bffaffdfc6afef8810", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["87df5116eba8218beea70a9576273d67b863fe76"], "nameRev": "f80d82a9d085abc39f85d2bffaffdfc6afef8810 tags/3_6_13~3", "commitMessage": "fix: from 3.6.3 header values are now a list #928\n", "commitDateTime": "2019-09-07 15:09:15", "authoredDateTime": "2019-09-07 15:09:15", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/util/CollectionUtils.scala", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Request.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/RequestSpec.groovy", "insertions": 12, "deletions": 0, "lines": 12}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f80d82a9d085abc39f85d2bffaffdfc6afef8810"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Request.groovy", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/util"]}, {"title": "Wrong inline formatting in version: '4.0.0-beta.3'", "body": "The 4.0.0-beta.3 DSL is formatting the pact file as follows: (some content is omitted as I don't see it as relevant)\r\n```\r\n...\r\n\"contents\": \"{\\n  \\\"hometeamScore\\\": 0,\\n  \\\"ownerId\\\": 0,\\n  \\\"foreignteamScore\\\": 0,\\n  \\\"matchId\\\": 0\\n}\",\r\n...\r\n```\r\nWhen it should be formatted like this (to resemble a JSON object):\r\n```\r\n...\r\n\"contents\": {\"hometeamScore\": 0,\"ownerId\": 0,\"foreignteamScore\": 0,\"matchId\": 0},\r\n...\r\n```\r\nThe issue exists with both DSL. The java8 one and the old generator.\r\n\r\n[Link](https://pact-foundation.slack.com/archives/C5F4KFKR8/p1562581863420600) to the slack thread", "url": "https://github.com/DiUS/pact-jvm/issues/909", "user": "Mastermindaxe", "labels": ["bug"], "created": "2019-07-14 11:02:43", "closed": "2019-08-12 11:47:21", "commits": {"bc2055738c35071ed21e9772234fd48ba3b6cd2a": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 29.00027777777778, "commitsDetails": [{"commitHash": "bc2055738c35071ed21e9772234fd48ba3b6cd2a", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["6baedf2449c8f080fc0fe149fd318e9124285c09"], "nameRev": "bc2055738c35071ed21e9772234fd48ba3b6cd2a tags/4_0_0-beta_4~12", "commitMessage": "fix: message bodies should be inlined for JSON contents #909\n", "commitDateTime": "2019-07-20 18:02:03", "authoredDateTime": "2019-07-20 18:02:03", "commitGitStats": [{"filePath": "core/model/src/main/kotlin/au/com/dius/pact/core/model/messaging/Message.kt", "insertions": 22, "deletions": 3, "lines": 25}, {"filePath": "core/model/src/test/groovy/au/com/dius/pact/core/model/messaging/MessageSpec.groovy", "insertions": 4, "deletions": 2, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bc2055738c35071ed21e9772234fd48ba3b6cd2a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 22, "deletions": 3, "lines": 25, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/model/src/main/kotlin/au/com/dius/pact/core"]}, {"title": "Provider JVM doesn't execute states in the order they are specified", "body": "Given I have a pact with multiple states, for example:\r\n```\r\n\"providerStates\": [\r\n        {\r\n          \"name\": \"account exists\",\r\n          \"params\": {\r\n            \"account_id\": \"x\r\n          }\r\n        }, \r\n       {\r\n          \"name\": \"payment exists\",\r\n          \"params\": {\r\n            \"payment_id\": \"y\"\r\n          }\r\n        }\r\n      ]\r\n```\r\nthey don't seem to be executed in order when run against the jvm provider. In this case the account would need to exist before a payment can exist as a payment is associated with an account.", "url": "https://github.com/DiUS/pact-jvm/issues/897", "user": "oswaldquek", "labels": ["bug"], "created": "2019-06-21 12:11:19", "closed": "2019-07-18 10:14:29", "commits": {"cf7a3afd89e57827ba09616b8d269deab30b78a3": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 26.00027777777778, "commitsDetails": [{"commitHash": "cf7a3afd89e57827ba09616b8d269deab30b78a3", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1eab4db3bd1c3740115823a624383d0432756a9a"], "nameRev": "cf7a3afd89e57827ba09616b8d269deab30b78a3 tags/3_6_11~11", "commitMessage": "fix: make sure JUnit tests execute the provider states in the correct order #897\n", "commitDateTime": "2019-07-06 16:09:05", "authoredDateTime": "2019-07-06 15:51:25", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/InteractionRunner.kt", "insertions": 7, "deletions": 4, "lines": 11}, {"filePath": "pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/target/HttpTarget.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider-junit/src/test/kotlin/au/com/dius/pact/provider/junit/MultipleStatesContractTest.kt", "insertions": 126, "deletions": 0, "lines": 126}, {"filePath": "pact-jvm-provider-junit/src/test/resources/pacts/contract-with-multiple-states.json", "insertions": 61, "deletions": 0, "lines": 61}, {"filePath": "pact-jvm-provider-junit5/src/test/kotlin/au/com/dius/pact/provider/junit5/MultipleStatesContractTest.kt", "insertions": 147, "deletions": 0, "lines": 147}, {"filePath": "pact-jvm-provider-junit5/src/test/resources/pacts/contract-with-multiple-states.json", "insertions": 61, "deletions": 0, "lines": 61}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cf7a3afd89e57827ba09616b8d269deab30b78a3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 6, "lines": 15, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit"]}, {"title": "pact-jvm 3.6.8 occasionally fails to start provider tests", "body": "From what I've tested, it only fails to start if the pact contains a decimal matcher. It started just fine on tests that only used integers.\r\n```\r\ngroovy.lang.MissingMethodException: No signature of method: java.math.BigDecimal.toInt() is applicable for argument types: () values: []\r\nPossible solutions: print(java.io.PrintWriter), print(java.lang.Object), toLong(), round(), trunc(), round(java.math.MathContext)\r\n\r\n\tat org.codehaus.groovy.runtime.ScriptBytecodeAdapter.unwrap(ScriptBytecodeAdapter.java:70)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyGuardsFiltersAndSignatures.unwrap(IndyGuardsFiltersAndSignatures.java:175)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:234)\r\n\tat au.com.dius.pact.model.Response$_fromMap_closure1.doCall(Response.groovy:28)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)\r\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)\r\n\tat groovy.lang.Closure.call(Closure.java:405)\r\n\tat groovy.lang.Closure.call(Closure.java:421)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.with(DefaultGroovyMethods.java:369)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.with(DefaultGroovyMethods.java:316)\r\n\tat org.codehaus.groovy.runtime.dgm$827.doMethodInvoke(Unknown Source)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:234)\r\n\tat au.com.dius.pact.model.Response.fromMap(Response.groovy:26)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:234)\r\n\tat au.com.dius.pact.model.PactReader.extractResponse(PactReader.groovy:96)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:234)\r\n\tat au.com.dius.pact.model.PactReader$_loadV3Pact_closure1.doCall(PactReader.groovy:60)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)\r\n\tat org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:263)\r\n\tat groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1041)\r\n\tat groovy.lang.Closure.call(Closure.java:405)\r\n\tat groovy.lang.Closure.call(Closure.java:421)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3540)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3525)\r\n\tat org.codehaus.groovy.runtime.DefaultGroovyMethods.collect(DefaultGroovyMethods.java:3625)\r\n\tat org.codehaus.groovy.runtime.dgm$87.doMethodInvoke(Unknown Source)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:234)\r\n\tat au.com.dius.pact.model.PactReader.loadV3Pact(PactReader.groovy:58)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:234)\r\n\tat au.com.dius.pact.model.PactReader.loadPact(PactReader.groovy:41)\r\n\tat au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPact(PactBrokerLoader.java:181)\r\n\tat au.com.dius.pact.provider.junit.loader.PactBrokerLoader.lambda$loadPactsForProvider$3(PactBrokerLoader.java:164)\r\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\r\n\tat java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1654)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\r\n\tat au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(PactBrokerLoader.java:165)\r\n\tat au.com.dius.pact.provider.junit.loader.PactBrokerLoader.load(PactBrokerLoader.java:84)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.<init>(PactRunner.kt:79)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)\r\n\tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\r\n\tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\r\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\r\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n\tat org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:49)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/896", "user": "mikahjc", "labels": ["bug"], "created": "2019-06-19 17:59:20", "closed": "2019-06-21 21:26:02", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "Extra $ in TypeMatcher when using a PactDslJsonObject as DslPart in object(String name, DslPart value)", "body": "When I use a (closed) PctDslJsonBody as DslPart argument in the object method of PactDslJsonBody, I get an extra $ in the matcher in the generated contract. In this case for a Messaging contract.\r\n\r\n**Using:**\r\npact-jvm-consumer-junit_2.12 - Version 3.6.2\r\npact-jvm-consumer-java8_2.12 - Version 3.6.2\r\n\r\n**The contract:**\r\nPactDslJsonBody body = new PactDslJsonBody();\r\n        body.object(\"headers\")\r\n            .stringValue(\"bestandstype\", \"foo\")\r\n            .stringValue(\"Content-Type\", \"application/json\")\r\n            .closeObject();\r\n        payload = new PactDslJsonBody();\r\n        payload.stringValue(\"bestandstype\", \"foo\")\r\n               .stringValue(\"bestandsid\", EXAMPLE_FOO_FILE_NAME)\r\n               .closeObject();\r\n        **_body.object(\"payload\", payload);_**\r\n\r\n**MatchingRule in the contract:**\r\n```json\r\n\"matchingRules\": {\r\n                \"body\": {\r\n                    \"$.payload$.bestandsid\": {\r\n                        \"matchers\": [\r\n                            {\r\n                                \"match\": \"type\"\r\n                            }\r\n                        ],\r\n                        \"combine\": \"AND\"\r\n                    }\r\n                }\r\n            }\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/895", "user": "gvaatstra", "labels": ["bug"], "created": "2019-06-19 06:58:17", "closed": "2019-07-21 01:42:16", "commits": {"acbd05af8acaba9fd9fe1f63bc9bfe846850dff8": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "50776054267ac0274ccdda6176f91264b43072bc": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 31.00027777777778, "commitsDetails": [{"commitHash": "acbd05af8acaba9fd9fe1f63bc9bfe846850dff8", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d653b6c292aa00c57f19673c015d01e42e9921b2"], "nameRev": "acbd05af8acaba9fd9fe1f63bc9bfe846850dff8 tags/3_6_9~6", "commitMessage": "fix: drop any dollar prefix when using composition with Java DSL #895\n", "commitDateTime": "2019-06-20 12:41:14", "authoredDateTime": "2019-06-20 12:41:14", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonBodySpec.groovy", "insertions": 30, "deletions": 0, "lines": 30}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules/Category.kt", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/matchingrules/CategorySpec.groovy", "insertions": 20, "deletions": 0, "lines": 20}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "50776054267ac0274ccdda6176f91264b43072bc", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["acbd05af8acaba9fd9fe1f63bc9bfe846850dff8"], "nameRev": "50776054267ac0274ccdda6176f91264b43072bc tags/3_6_9~5", "commitMessage": "fix: drop any dollar prefix when using composition with generators with Java DSL #895\n", "commitDateTime": "2019-06-20 12:57:57", "authoredDateTime": "2019-06-20 12:57:57", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonBodySpec.groovy", "insertions": 10, "deletions": 6, "lines": 16}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators/Generators.kt", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/generators/GeneratorsSpec.groovy", "insertions": 18, "deletions": 0, "lines": 18}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["acbd05af8acaba9fd9fe1f63bc9bfe846850dff8", "50776054267ac0274ccdda6176f91264b43072bc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 8, "deletions": 8, "lines": 16, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators"]}, {"title": "Error in provider verify DSL (stateChangeUrl = url(...))", "body": "tl;dr: class cast error thrown when using `stateChangeUrl = url('http://...')`\r\n\r\nPlugin config: `{ id 'au.com.dius.pact' version '3.6.8' }`\r\n\r\nFrom [Slack message](https://pact-foundation.slack.com/archives/C9UN99H24/p1560904683048200):\r\n____\r\n\r\nhowdy, just setting up a gradle verify, following instructions on https://github.com/DiUS/pact-jvm/tree/master/provider/pact-jvm-provider-gradle#using-a-state-change-url, but getting an unexpected error:\r\n```\r\n> Cannot cast object 'UrlSource(url=http://localhost:8080/pact-state-change, pact=null)'\r\nwith class 'au.com.dius.pact.model.UrlSource' to class 'java.net.URL'\r\n```\r\n\r\nMy gradle file looks like\r\n```\r\npact {\r\n  serviceProviders {\r\n    'app-api' {\r\n      startProviderTask = startProvider\r\n      terminateProviderTask = stopProvider\r\n\r\n      hasPactWith('app-ui') {\r\n        pactSource = file('pacts/app-ui-app-api.json')\r\n        stateChangeUrl = url('http://localhost:8080/pact-state-change')\r\n      }\r\n    }\r\n  }\r\n}\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/894", "user": "abubics", "labels": ["bug"], "created": "2019-06-19 00:48:36", "closed": "2019-07-21 01:42:44", "commits": {"aa4831291ed8d8b1da3ca3cf3ad8f607bd426a01": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "0a095e9bf65e027d6999c7ea4fb3137897d2ff07": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "2c111f090a26aeb305ee269e04f2d12377b69c71": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 32.000277777777775, "commitsDetails": [{"commitHash": "aa4831291ed8d8b1da3ca3cf3ad8f607bd426a01", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["50776054267ac0274ccdda6176f91264b43072bc"], "nameRev": "aa4831291ed8d8b1da3ca3cf3ad8f607bd426a01 tags/3_6_9~4", "commitMessage": "fix: allow setting the state change URL at the consumer level in the Gradle plugin #894\n", "commitDateTime": "2019-06-20 14:12:54", "authoredDateTime": "2019-06-20 14:12:54", "commitGitStats": [{"filePath": "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven/Consumer.groovy", "insertions": 0, "deletions": 8, "lines": 8}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderClient.kt", "insertions": 9, "deletions": 7, "lines": 16}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "0a095e9bf65e027d6999c7ea4fb3137897d2ff07", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["aa4831291ed8d8b1da3ca3cf3ad8f607bd426a01"], "nameRev": "0a095e9bf65e027d6999c7ea4fb3137897d2ff07 tags/3_6_9~3", "commitMessage": "fix: failing test #894\n", "commitDateTime": "2019-06-20 14:29:09", "authoredDateTime": "2019-06-20 14:29:09", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/PactPluginTest.groovy", "insertions": 5, "deletions": 6, "lines": 11}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "2c111f090a26aeb305ee269e04f2d12377b69c71", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["2832d4dfad5a23213e2af3d784b1b3561dbe1024"], "nameRev": "2c111f090a26aeb305ee269e04f2d12377b69c71 tags/3_6_9~1", "commitMessage": "fix: deprecation warning #894\n", "commitDateTime": "2019-06-20 14:42:02", "authoredDateTime": "2019-06-20 14:42:02", "commitGitStats": [{"filePath": "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven/Consumer.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["aa4831291ed8d8b1da3ca3cf3ad8f607bd426a01", "0a095e9bf65e027d6999c7ea4fb3137897d2ff07", "2c111f090a26aeb305ee269e04f2d12377b69c71"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 10, "deletions": 16, "lines": 26, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven", "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderClient.kt"]}, {"title": "json and markdown reports don't show multiple interaction", "body": "I am using pact-jvm-provider-junit_2.12 version 3.6.5. I have two interactions in my pact file, but when I run the provider test, in the json and markdown generated reports it appears just the last interaction.\r\n\r\nThis is how my pact file looks like:\r\n\r\n`{\r\n\t\"provider\": {\r\n\t\t\"name\": \"provider1\"\r\n\t},\r\n\t\"consumer\": {\r\n\t\t\"name\": \"consumer1\"\r\n\t},\r\n\t\"interactions\": [\r\n\t\t{\r\n\t\t\t\"description\": \"First interaction\",\r\n                        ............\r\n                },\r\n                {\r\n\t\t\t\"description\": \"Second interaction\",\r\n                        ............\r\n                }\r\n          ]\r\n`\r\n\r\nAfter running the test, just the second iteration is displayed in the json and markdown reports. Below you can see an example from the markdown report.\r\n\r\n`# provider1\r\n\r\n| Description    | Value |\r\n| -------------- | ----- |\r\n| Date Generated | Fri Jun 14 15:29:26 EEST 2019 |\r\n| Pact Version   | 3.6.5 |\r\n\r\n## Verifying a pact between consumer1 and provider1\r\n\r\nGiven **Second interaction**  \r\n......\r\n`\r\nIs this an issue or am I doing something wrong?", "url": "https://github.com/DiUS/pact-jvm/issues/893", "user": "anddreiu", "labels": ["bug"], "created": "2019-06-14 12:38:03", "closed": "2019-06-20 06:30:36", "commits": {"5c87868b6cd002be3134133ca6ce440e5716284e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "136f67c090ffe5257eb05a9b2b3aeaa6c779958f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "13dd0e1ede1a990f0290b1f4d14d1553c9f5a467": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "74bd10e7c593542cca2485521af15e5dd6e7953e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "087884da0b799fd3404a2277520fd5c987ef854c": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "5c87868b6cd002be3134133ca6ce440e5716284e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["5bafefe11a9426ae0032b4396546679d045e2887"], "nameRev": "5c87868b6cd002be3134133ca6ce440e5716284e tags/3_6_8~3", "commitMessage": "fix: JsonReporter should merge results not overwrite them #893\n", "commitDateTime": "2019-06-15 14:39:51", "authoredDateTime": "2019-06-15 14:32:25", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/test/java/au/com/dius/pact/provider/junit/MultipleInteractionsContractTest.java", "insertions": 51, "deletions": 0, "lines": 51}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/JsonReporter.groovy", "insertions": 13, "deletions": 1, "lines": 14}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/reporters/JsonReporterSpec.groovy", "insertions": 74, "deletions": 0, "lines": 74}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MultipleInteractionsContractTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.MultipleInteractionsContractTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "136f67c090ffe5257eb05a9b2b3aeaa6c779958f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["5c87868b6cd002be3134133ca6ce440e5716284e"], "nameRev": "136f67c090ffe5257eb05a9b2b3aeaa6c779958f tags/3_6_8~2", "commitMessage": "fix: MarkdownReporter should append results not overwrite them #893\n", "commitDateTime": "2019-06-15 15:07:24", "authoredDateTime": "2019-06-15 15:07:24", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/MarkdownReporter.groovy", "insertions": 84, "deletions": 86, "lines": 170}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/reporters/MarkdownReporterSpec.groovy", "insertions": 30, "deletions": 0, "lines": 30}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "13dd0e1ede1a990f0290b1f4d14d1553c9f5a467", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["136f67c090ffe5257eb05a9b2b3aeaa6c779958f"], "nameRev": "13dd0e1ede1a990f0290b1f4d14d1553c9f5a467 tags/3_6_8~1", "commitMessage": "fix: Codenarc errors #893\n", "commitDateTime": "2019-06-15 15:16:10", "authoredDateTime": "2019-06-15 15:16:10", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/MarkdownReporter.groovy", "insertions": 8, "deletions": 6, "lines": 14}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/reporters/MarkdownReporterSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "74bd10e7c593542cca2485521af15e5dd6e7953e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a30fb4508e6b071e3f64bfbd18787ae7aa3a45d7"], "nameRev": "74bd10e7c593542cca2485521af15e5dd6e7953e tags/3_6_9~11", "commitMessage": "fix: conversion of BigDecimal to Integer of the response status #893\n", "commitDateTime": "2019-06-18 09:57:39", "authoredDateTime": "2019-06-18 09:57:39", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Response.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/ResponseSpec.groovy", "insertions": 10, "deletions": 0, "lines": 10}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "087884da0b799fd3404a2277520fd5c987ef854c", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["74bd10e7c593542cca2485521af15e5dd6e7953e"], "nameRev": "087884da0b799fd3404a2277520fd5c987ef854c tags/3_6_9~10", "commitMessage": "fix: codenarc failure #893\n", "commitDateTime": "2019-06-18 10:40:45", "authoredDateTime": "2019-06-18 10:40:45", "commitGitStats": [{"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/ResponseSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5c87868b6cd002be3134133ca6ce440e5716284e", "136f67c090ffe5257eb05a9b2b3aeaa6c779958f", "13dd0e1ede1a990f0290b1f4d14d1553c9f5a467", "74bd10e7c593542cca2485521af15e5dd6e7953e", "087884da0b799fd3404a2277520fd5c987ef854c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 4, "gitStatsSummary": {"insertions": 106, "deletions": 94, "lines": 200, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Response.groovy"], "changesInPackagesSPOON": []}, {"title": "[pact-jvm-provider-maven]  mvn pact:verify command  cannot detect pact files(No pact files were found for provider 'wProvider')", "body": "I am using pact 3.6.7 and mvn pact:verify detects no pact files in <pactFileDirectory>, even tho I can run the test from Intellij without error.\r\n\r\nPom.xml set up:\r\n`<plugin>\r\n\t<configuration>\r\n        <groupId>au.com.dius</groupId>\r\n        <artifactId>pact-jvm-provider-maven_2.12</artifactId>\r\n        <version>3.6.7</version>\r\n        <configuration>\r\n            <serviceProviders>\r\n                <serviceProvider>\r\n                    <name>wProvider</name>\r\n                    <protocol>http</protocol>\r\n                    <host>http://localhost</host>\r\n                    <port>80</port>\r\n\t\t\t\t\t<insecure>true</insecure>\r\n                    <pactFileDirectory>/home/username/workspace/pactjava/projectName/pacts/</pactFileDirectory>\r\n                </serviceProvider>\r\n        </serviceProviders>\r\n    </configuration>\r\n</plugin>`\r\n\r\nConsole output:\r\n\r\n> Loading pact files for provider wProvider from /home/username/workspace/pactjava/projectName/pacts/\r\n>Found 0 pact files\r\n>.......\r\n>[ERROR] Failed to execute goal au.com.dius:pact-jvm-provider-maven_2.12:3.6.7:verify (default-cli) on project producer: No pact files were found for provider 'wProvider' -> [Help 1]\r\n\r\nPact file location: /home/username/workspace/pactjava/projectName/pacts/tConsumer-wProvider\r\n\r\n  \"provider\": {\r\n    \"name\": \"wProvider\"\r\n  },\r\n  \"consumer\": {\r\n    \"name\": \"tConsumer\"\r\n  },\r\n......\r\n  \"metadata\": {\r\n    \"pactSpecification\": {\r\n      \"version\": \"3.0.0\"\r\n    },\r\n    \"pact-jvm\": {\r\n      \"version\": \"3.6.7\"\r\n    }\r\n  }\r\n\r\nI someone experiencing this issue (mvn pact:verify not detecting the pact files for provider, but being able to run tests from IDE)?\r\n\r\nThanks :)", "url": "https://github.com/DiUS/pact-jvm/issues/885", "user": "vasile21", "labels": ["bug"], "created": "2019-05-29 13:26:28", "closed": "2019-07-21 01:43:55", "commits": {"eec764bbd511710c6ffc12c213f4151a3212a5e1": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 52.000277777777775, "commitsDetails": [{"commitHash": "eec764bbd511710c6ffc12c213f4151a3212a5e1", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["836208a1b9426cb63ce708e0b50bf2c75e2222dd"], "nameRev": "eec764bbd511710c6ffc12c213f4151a3212a5e1 tags/3_6_8~14", "commitMessage": "fix: correct the loading of pacts with the Maven plugin #885\n", "commitDateTime": "2019-06-02 12:32:27", "authoredDateTime": "2019-06-02 12:32:27", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderUtils.kt", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["eec764bbd511710c6ffc12c213f4151a3212a5e1"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 1, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderUtils.kt"]}, {"title": "dependencies.dependency au.com.dius:pact-jvm-model:3.6.5' for au.com.dius:pact-jvm-model:3.6.5 is referencing itself. @ line 170, column 17", "body": "```\r\nMe@HERE: <CURRENT-WORKING-DIR>\r\n$> mvn surefire-report:report test site\r\n[INFO] -------------------------------------------------------\r\n[INFO]  T E S T S\r\n[INFO] -------------------------------------------------------\r\n[INFO] Running com.example.ExampleTest\r\n<...>\r\n46 Scenarios (46 passed)\r\n107 Steps (107 passed)\r\n\r\n[FATAL] 'dependencies.dependency au.com.dius:pact-jvm-model:3.6.5' for au.com.dius:pact-jvm-model:3.6.5 is referencing itself. @ line 170, column 17\r\n for project au.com.dius:pact-jvm-model:3.6.5\r\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:165)\r\n\tat org.apache.maven.project.DefaultProjectBuilder.build(DefaultProjectBuilder.java:327)\r\n\tat org.apache.maven.report.projectinfo.dependencies.RepositoryUtils.getMavenProjectFromRepository(RepositoryUtils.java:125)\r\n\tat org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderArtifactRow(DependenciesRenderer.java:799)\r\n\tat org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderDependenciesForScope(DependenciesRenderer.java:749)\r\n\tat org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderDependenciesForAllScopes(DependenciesRenderer.java:413)\r\n\tat org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderSectionProjectTransitiveDependencies(DependenciesRenderer.java:438)\r\n\tat org.apache.maven.report.projectinfo.dependencies.renderer.DependenciesRenderer.renderBody(DependenciesRenderer.java:219)\r\n\tat org.apache.maven.reporting.AbstractMavenReportRenderer.render(AbstractMavenReportRenderer.java:80)\r\n\tat org.apache.maven.report.projectinfo.DependenciesReport.executeReport(DependenciesReport.java:162)\r\n\tat org.apache.maven.reporting.AbstractMavenReport.generate(AbstractMavenReport.java:251)\r\n\tat org.apache.maven.plugins.site.render.ReportDocumentRenderer.renderDocument(ReportDocumentRenderer.java:230)\r\n\tat org.apache.maven.doxia.siterenderer.DefaultSiteRenderer.render(DefaultSiteRenderer.java:349)\r\n\tat org.apache.maven.plugins.site.render.SiteMojo.renderLocale(SiteMojo.java:198)\r\n\tat org.apache.maven.plugins.site.render.SiteMojo.execute(SiteMojo.java:147)\r\n\tat org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:154)\r\n\tat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:146)\r\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)\r\n\tat org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:81)\r\n\tat org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:56)\r\n\tat org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:128)\r\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:305)\r\n\tat org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:192)\r\n\tat org.apache.maven.DefaultMaven.execute(DefaultMaven.java:105)\r\n\tat org.apache.maven.cli.MavenCli.execute(MavenCli.java:956)\r\n\tat org.apache.maven.cli.MavenCli.doMain(MavenCli.java:290)\r\n\tat org.apache.maven.cli.MavenCli.main(MavenCli.java:194)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\r\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\r\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\r\n\tat org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\r\nCaused by: org.apache.maven.model.building.ModelBuildingException: 1 problem was encountered while building the effective model for au.com.dius:pact-jvm-model:3.6.5\r\n```\r\n\r\nHi, so the above occurs after maven has run the tests (which run successfully) but before Surefire Report generates. (Which also runs successfully)\r\n\r\nHere's my POM:\r\n\r\n```\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n  <modelVersion>4.0.0</modelVersion>\r\n  <groupId>[REDACTED]</groupId>\r\n  <artifactId>[REDACTED]</artifactId>\r\n  <version>0.0.1-SNAPSHOT</version>\r\n\t<properties>\r\n    \t<maven.compiler.source>1.8</maven.compiler.source>\r\n    \t<maven.compiler.target>1.8</maven.compiler.target>\r\n  \t</properties>\r\n  <build>\r\n  <plugins>\r\n    <plugin>\r\n      <groupId>org.apache.maven.plugins</groupId>\r\n      <artifactId>maven-site-plugin</artifactId>\r\n      <version>3.7.1</version>\r\n    </plugin>\r\n    <plugin>\r\n      <artifactId>maven-compiler-plugin</artifactId>\r\n      <version>3.1</version>\r\n    </plugin>\r\n    <plugin>\r\n      <groupId>org.apache.maven.plugins</groupId>\r\n      <artifactId>maven-surefire-plugin</artifactId>\r\n      <version>3.0.0-M3</version>\r\n    </plugin>\r\n    <plugin>\r\n        <groupId>org.codehaus.mojo</groupId>\r\n        <artifactId>exec-maven-plugin</artifactId>\r\n        <version>1.2.1</version>\r\n        <executions>\r\n            <execution>\r\n                <goals>\r\n                    <goal>exec</goal>\r\n                </goals>\r\n                <configuration>\r\n                    <classpathScope>test</classpathScope>\r\n                    <executable>java</executable>\r\n                    <arguments>\r\n                        <argument>-classpath</argument>\r\n                        <classpath />\r\n                        <argument>cucumber.api.cli.Main</argument>\r\n                        <argument>--plugin</argument>\r\n                        <argument>json:${project.build.directory}/cuke-results.json</argument>\r\n                        <argument>--glue</argument>\r\n                        <argument>com.example</argument>\r\n                        <argument>--strict</argument>\r\n                        <argument>${basedir}/src/test/java/com/example</argument>\r\n                    </arguments>\r\n                </configuration>\r\n            </execution>\r\n        </executions>\r\n    </plugin>\r\n  </plugins>\r\n  </build>\r\n  <dependencies>\r\n\t<dependency>\r\n\t    <groupId>au.com.dius</groupId>\r\n\t    <artifactId>pact-jvm-consumer-junit_2.12</artifactId>\r\n\t    <version>3.6.5</version>\r\n\t</dependency>\r\n    <dependency>\r\n      <groupId>io.rest-assured</groupId>\r\n\t  <artifactId>rest-assured</artifactId>\r\n\t  <version>3.3.0</version>\r\n\t</dependency>\r\n    <dependency>\r\n      <groupId>junit</groupId>\r\n      <artifactId>junit</artifactId>\r\n      <version>4.11</version>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>info.cukes</groupId>\r\n      <artifactId>cucumber-java</artifactId>\r\n      <version>1.2.3</version>\r\n    </dependency>\r\n    <dependency>\r\n      <groupId>info.cukes</groupId>\r\n      <artifactId>cucumber-junit</artifactId>\r\n      <version>1.2.3</version>\r\n    </dependency>\r\n    <dependency>\r\n\t  <groupId>org.json</groupId>\r\n\t  <artifactId>json</artifactId>\r\n\t  <version>20180813</version>\r\n\t</dependency>\r\n  </dependencies>\r\n</project>\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/884", "user": "Sam-Levene", "labels": ["bug"], "created": "2019-05-28 14:44:32", "closed": "2019-07-21 01:44:21", "commits": {"300c2d75e43a23187030e5172191f0d220129d53": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 53.000277777777775, "commitsDetails": [{"commitHash": "300c2d75e43a23187030e5172191f0d220129d53", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["f49a6f9b0645f23b89c247601655f3452e437e3d"], "nameRev": "300c2d75e43a23187030e5172191f0d220129d53 tags/3_6_8~18", "commitMessage": "fix: removed pact-jvm-model reference to itself in the generated POM #884\n", "commitDateTime": "2019-06-01 18:43:13", "authoredDateTime": "2019-06-01 18:43:13", "commitGitStats": [{"filePath": "build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/build.gradle", "insertions": 12, "deletions": 1, "lines": 13}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["300c2d75e43a23187030e5172191f0d220129d53"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 2, "lines": 15, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["", "pact-jvm-model"]}, {"title": "PactDslJsonRootValue as request body fails", "body": "I'm trying to use `PactDslJsonRootValue.stringType(\"\\\"example\\\"\")` as the request body.\r\nI believe this fails because the `PactDslRequestWithPath#body` method calling `toString` on the body parameter and `PactDslJsonRootValue` does not override `toString`.\r\n\r\nThe equivalent method in `PactDslResponse` explicitly deals with `PactDslJsonRootValue` and uses `parent.getBody().toString()` instead of `parent.toString()`.\r\n\r\nCan you confirm if this is a bug or if my usage is incorrect?\r\n\r\nThanks.\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/883", "user": "sjcetx", "labels": ["bug"], "created": "2019-05-23 10:42:15", "closed": "2019-07-21 01:44:37", "commits": {"f49a6f9b0645f23b89c247601655f3452e437e3d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 58.000277777777775, "commitsDetails": [{"commitHash": "f49a6f9b0645f23b89c247601655f3452e437e3d", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["0ee714d733eabd7a922b692b7d94b7767d7ce222"], "nameRev": "f49a6f9b0645f23b89c247601655f3452e437e3d tags/3_6_8~19", "commitMessage": "fix: request with PactDslRootValue as body was not being applied correctly #883\n", "commitDateTime": "2019-06-01 17:42:35", "authoredDateTime": "2019-06-01 17:41:59", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 10, "deletions": 1, "lines": 11}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslRequestWithPathSpec.groovy", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators/Generators.kt", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules/Category.kt", "insertions": 7, "deletions": 1, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 7, "UPD": 0, "INS": 3, "MOV": 3, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f49a6f9b0645f23b89c247601655f3452e437e3d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 24, "deletions": 3, "lines": 27, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 3, "MOV": 3, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules", "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.dsl.DslPart)"]}, {"title": "Invalid `$.header.<...>` value for headers matching rule in V2.", "body": "Hi,\r\n\r\nI'm using `au.com.dius:pact-jvm-consumer-junit_2.12:3.6.7` to generate V2 pact files. These files fails to be properly consumed by the `pact-ruby-standalone` provider (used by [pact-go](https://github.com/pact-foundation/pact-go) among others).\r\n\r\nIt seems like `pact-ruby-standalone` expects the header matching rules to have the format `$.headers.<...>`, but `pact-jvm` generates them like `$.header.<...>` (notice the missing `s`).\r\n\r\nThis has been mentioned in the following issue: https://github.com/pact-foundation/pact-net/issues/184#issuecomment-460595883\r\n\r\nAny chance this might get fixed in an upcoming release? Currently we're forced to manually edit all pact files, which is not sustainable.", "url": "https://github.com/DiUS/pact-jvm/issues/882", "user": "skaggmannen", "labels": ["bug"], "created": "2019-05-22 13:27:48", "closed": "2019-07-21 01:44:47", "commits": {"40f97e9b93422c14e35e6e15f8b4a9c0106ca3a6": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 59.000277777777775, "commitsDetails": [{"commitHash": "40f97e9b93422c14e35e6e15f8b4a9c0106ca3a6", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["107afe45ea455ca87811f3f584a4be6e495917ca"], "nameRev": "40f97e9b93422c14e35e6e15f8b4a9c0106ca3a6 tags/3_6_8~24", "commitMessage": "fix: when writing pact specs in V2 format, header matchers must be pluralised #882\n", "commitDateTime": "2019-06-01 14:05:58", "authoredDateTime": "2019-06-01 14:05:58", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/V2MatchingHeaderTest.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules/Category.kt", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules/MatchingRulesImpl.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/matchingrules/CategorySpec.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/matchingrules/MatchingRulesSpec.groovy", "insertions": 18, "deletions": 1, "lines": 19}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["40f97e9b93422c14e35e6e15f8b4a9c0106ca3a6"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 3, "lines": 9, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules"]}, {"title": "encoding-problem with pact-jvm-consumer-junit5 3.6.x and windows", "body": "lets have this code in the cdc-test\r\n`\r\nbuilder.uponReceiving(\"Request f\u00fcr ping\")\r\n`\r\nnote the umlaut '\u00fc'!\r\n\r\n\r\nwith version 3.5.x we find this in the generated pact-files (generates 1 interaction)\r\n```\r\n\"description\": \"Request f\\u00fcr ping\",\r\n```\r\ndoes not change if re-running the cdc-tests\r\n\r\n\r\nbut with version 3.6.x we find this in the generated pact-files\r\n1st execution of test (generates 1 interaction)\r\n```\r\n      \"description\": \"Request f\u00c3\u00bcr ping\",\r\n```\r\n2nd execution of cdc-test (generates 2 interactions)\r\n```\r\n      \"description\": \"Request f\u00c3\u00bcr ping\",\r\n      \"description\": \"Request f\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u00bcr ping\",\r\n```\r\n3rd execution of cdc-test (generates 3 interactions)\r\n```\r\n      \"description\": \"Request f\u00c3\u00bcr ping\",\r\n      \"description\": \"Request f\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u00bcr ping\",\r\n      \"description\": \"Request f\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u0083\u00c3\u0083\u00c2\u0082\u00c3\u0082\u00c2\u0083\u00c3\u0083\u00c2\u0083\u00c3\u0082\u00c2\u0082\u00c3\u0083\u00c2\u0082\u00c3\u0082\u00c2\u00bcr ping\",\r\n```\r\nand so on", "url": "https://github.com/DiUS/pact-jvm/issues/879", "user": "octopus-prime", "labels": ["bug"], "created": "2019-05-15 09:21:35", "closed": "2019-07-21 01:45:00", "commits": {"d1d85e98cb69b8bbf0d209609665867cedebeab9": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "1511fedecc6b603b437a638ffd3a980206b7d589": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 66.00027777777778, "commitsDetails": [{"commitHash": "d1d85e98cb69b8bbf0d209609665867cedebeab9", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["33f729f1cd6b1f9eb91454a4d45e7e84ce400d3e"], "nameRev": "d1d85e98cb69b8bbf0d209609665867cedebeab9 tags/3_6_8~21", "commitMessage": "fix: when merging pact files, read the existing file as UTF-8 #879\n", "commitDateTime": "2019-06-01 17:03:41", "authoredDateTime": "2019-06-01 17:03:41", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/SpecialCharsTest.java", "insertions": 37, "deletions": 0, "lines": 37}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactWriter.kt", "insertions": 11, "deletions": 7, "lines": 18}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactWriterSpec.groovy", "insertions": 19, "deletions": 0, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SpecialCharsTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.SpecialCharsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "1511fedecc6b603b437a638ffd3a980206b7d589", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["ac6cb64972f742416d35f4e9fe46dfc33babf052"], "nameRev": "1511fedecc6b603b437a638ffd3a980206b7d589 tags/3_6_8~16", "commitMessage": "fix: only covert bytes to a string at the end #879\n", "commitDateTime": "2019-06-02 11:49:13", "authoredDateTime": "2019-06-02 11:49:13", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactWriter.kt", "insertions": 4, "deletions": 4, "lines": 8}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d1d85e98cb69b8bbf0d209609665867cedebeab9", "1511fedecc6b603b437a638ffd3a980206b7d589"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 15, "deletions": 11, "lines": 26, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactWriter.kt"], "changesInPackagesSPOON": []}, {"title": "Pact jvm consumer doesn't publish json values with \"null\"", "body": "I upgraded the `pact-jvm-consumer-junit_2.12` library from version 3.6.2 to version 3.6.7 (https://github.com/alphagov/pay-publicapi/pull/468). This seems to have the effect of not publishing \"null\" values. for example, I had a pact (https://github.com/alphagov/pay-publicapi/blob/master/src/test/resources/pacts/publicapi-connector-get-payment-with-gateway-transaction-id.json#L63-L64) that defined the following:\r\n\r\n```\r\n          \"settlement_summary\": {\r\n            \"capture_submit_time\": null,\r\n            \"captured_date\": null\r\n          }\r\n```\r\nHowever what gets published in \r\n```\r\n\"settlement_summary\": {}\r\n```\r\nThis causes matching to fail on the provider side if what the provider actually returns is\r\n```\r\n          \"settlement_summary\": {\r\n            \"capture_submit_time\": null,\r\n            \"captured_date\": null\r\n          }\r\n```\r\neven both are equivalent.", "url": "https://github.com/DiUS/pact-jvm/issues/877", "user": "oswaldquek", "labels": ["bug"], "created": "2019-05-14 10:18:51", "closed": "2019-07-21 01:45:15", "commits": {"107afe45ea455ca87811f3f584a4be6e495917ca": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 67.00027777777778, "commitsDetails": [{"commitHash": "107afe45ea455ca87811f3f584a4be6e495917ca", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["7ae625857e5dd6b6eae8294eef56b976b09d1cc5"], "nameRev": "107afe45ea455ca87811f3f584a4be6e495917ca tags/3_6_8~25", "commitMessage": "fix: configure GSon to serialise null values #877\n", "commitDateTime": "2019-06-01 13:30:33", "authoredDateTime": "2019-06-01 13:30:33", "commitGitStats": [{"filePath": "gradle.properties", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "pact-jvm-model/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactWriter.kt", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactWriterSpec.groovy", "insertions": 23, "deletions": 0, "lines": 23}, {"filePath": "pact-jvm-pact-broker/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["107afe45ea455ca87811f3f584a4be6e495917ca"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 3, "lines": 9, "gitFilesChange": 4}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model", "gradle.properties", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactWriter.kt", "pact-jvm-pact-broker"]}, {"title": "Feature: query parameter datetime pattern", "body": "currently I could not find a way to match query parameters against time formats. the alternative with regex is error prone and not sufficient. any plans to support this?", "url": "https://github.com/DiUS/pact-jvm/issues/876", "user": "dimovelev", "labels": ["bug"], "created": "2019-05-01 19:34:17", "closed": "2019-05-12 06:38:19", "commits": {"cf937f44957f72719c2dc57ff5146219f63f3731": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "ac704677fb20da426b1c2e6f3feb4827de184ee4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "d074382607154715da0ae930c9d8ce2d64e1a8f3": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "cf937f44957f72719c2dc57ff5146219f63f3731", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["3c5c65b7006527ca013e1e212642aed225cb61c3"], "nameRev": "cf937f44957f72719c2dc57ff5146219f63f3731 tags/3_6_6~8", "commitMessage": "fix: correct the use of matchers with query parameters #876\n", "commitDateTime": "2019-05-03 18:05:48", "authoredDateTime": "2019-05-03 18:05:48", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/ExampleGroovyConsumerV3PactTest.groovy", "insertions": 8, "deletions": 5, "lines": 13}, {"filePath": "pact-jvm-matchers/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/MatcherExecutor.kt", "insertions": 33, "deletions": 18, "lines": 51}, {"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/Mismatches.kt", "insertions": 19, "deletions": 0, "lines": 19}, {"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/QueryMatcher.kt", "insertions": 80, "deletions": 0, "lines": 80}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/QueryMatcher.scala", "insertions": 0, "deletions": 62, "lines": 62}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/Matching.scala", "insertions": 5, "deletions": 13, "lines": 18}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/QueryMatcherSpec.groovy", "insertions": 32, "deletions": 0, "lines": 32}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "ac704677fb20da426b1c2e6f3feb4827de184ee4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["cf937f44957f72719c2dc57ff5146219f63f3731"], "nameRev": "ac704677fb20da426b1c2e6f3feb4827de184ee4 tags/3_6_6~7", "commitMessage": "fix: for failing build #876\n", "commitDateTime": "2019-05-03 18:21:50", "authoredDateTime": "2019-05-03 18:21:50", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactResultSpec.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/QueryMatcher.kt", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/model/MatchingSpec.groovy", "insertions": 9, "deletions": 8, "lines": 17}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "d074382607154715da0ae930c9d8ce2d64e1a8f3", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e7f4c81989146a16760fca627650fa93cc80fa45"], "nameRev": "d074382607154715da0ae930c9d8ce2d64e1a8f3 tags/3_6_7~2", "commitMessage": "feat: add query parameter date/time matching to the Java DSL #876\n", "commitDateTime": "2019-05-12 12:50:58", "authoredDateTime": "2019-05-12 12:50:58", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/QueryParameterMatchingTest.java", "insertions": 45, "deletions": 0, "lines": 45}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestBase.java", "insertions": 40, "deletions": 5, "lines": 45}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 111, "deletions": 0, "lines": 111}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java", "insertions": 110, "deletions": 0, "lines": 110}], "commitSpoonAstDiffStats": [{"spoonFilePath": "QueryParameterMatchingTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.QueryParameterMatchingTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestBase.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestBase", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestBase.queryMatchingDateBase(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestBase.queryMatchingTimeBase(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestBase.queryMatchingDatetimeBase(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingDate(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingDate(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingTime(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingTime(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingDatetime(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingDatetime(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingISODate(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingISODate(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingISOTime(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingTime(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingISODatetime(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingISODatetime(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestWithoutPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingDate(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingDate(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingTime(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingTime(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingDatetime(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingDatetime(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingISODate(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingISODate(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingISOTime(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingTime(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingISODatetime(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingISODatetime(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cf937f44957f72719c2dc57ff5146219f63f3731", "ac704677fb20da426b1c2e6f3feb4827de184ee4", "d074382607154715da0ae930c9d8ce2d64e1a8f3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 3, "gitStatsSummary": {"insertions": 402, "deletions": 99, "lines": 501, "gitFilesChange": 9}, "spoonStatsSummary": {"TOT": 30.0, "UPD": 2.0, "INS": 28.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 3, "spoonMethodsChanged": 28}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/QueryMatcher.kt", "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/MatcherExecutor.kt", "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/QueryMatcher.scala", "pact-jvm-matchers", "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/Mismatches.kt", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/Matching.scala"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingISODatetime(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingISODate(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingTime(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingISODate(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingDatetime(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestBase.queryMatchingTimeBase(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingISODate(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingISODatetime(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingDatetime(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingTime(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingISODatetime(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestBase.queryMatchingDatetimeBase(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingDate(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingDatetime(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingTime(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingISODatetime(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingTime(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingISODate(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingISOTime(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingDate(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestBase", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingDate(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingDatetime(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingDate(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingTime(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.queryMatchingISOTime(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestBase.queryMatchingDateBase(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.queryMatchingTime(java.lang.String)"]}, {"title": "Message pact fails after upgrade to 3.6.5", "body": "I was glad to see that metadata verification had been implemented in 3.6.5 and wanted to try it out, but after upgrading from 3.6.4 to 3.6.5 I ran into some issues. The short summary is that to me it seems like the handling of content-type and contents has changed.\r\n\r\nHere's the fragment setup from my provider:\r\n```java\r\n@Pact(provider = PROVIDER, consumer = CONSUMER)\r\npublic MessagePact fragment_systemAccessCreated(MessagePactBuilder builder) {\r\n    return builder\r\n            .given(\"A system access is created\")\r\n            .expectsToReceive(\"SystemAccessCreated message\")\r\n            .withContent(\r\n                    new PactDslJsonBody()\r\n                            .stringValue(\"origin\", \"staff-access\")\r\n                            .uuid(\"correlationId\")\r\n                            .stringValue(\"type\", \"SystemAccessCreated\")\r\n                            .object(\"version\")\r\n                            .numberValue(\"major\", 1)\r\n                            .numberType(\"minor\", 0)\r\n                            .closeObject()\r\n                            .object(\"payload\")\r\n                            .uuid(\"systemId\", \"3e850e12-8d81-4be2-a0cf-3080bd63af7b\")\r\n                            .uuid(\"userId\")\r\n                            .closeObject()\r\n            )\r\n            .toPact();\r\n}\r\n```\r\n\r\nwhen using 3.6.4 the following json file is generated\r\n\r\n```json\r\n{\r\n  \"consumer\": {\r\n    \"name\": \"operator-service\"\r\n  },\r\n  \"provider\": {\r\n    \"name\": \"system-access-change-events\"\r\n  },\r\n  \"messages\": [\r\n    {\r\n      \"description\": \"SystemAccessCreated message\",\r\n      \"metaData\": {\r\n        \"Content-Type\": \"application/json; charset\\u003dUTF-8\"\r\n      },\r\n      \"contents\": {\r\n        \"payload\": {\r\n          \"systemId\": \"3e850e12-8d81-4be2-a0cf-3080bd63af7b\",\r\n          \"userId\": \"e2490de5-5bd3-43d5-b7c4-526e33f71304\"\r\n        },\r\n        \"origin\": \"staff-access\",\r\n        \"correlationId\": \"e2490de5-5bd3-43d5-b7c4-526e33f71304\",\r\n        \"type\": \"SystemAccessCreated\",\r\n        \"version\": {\r\n          \"major\": 1,\r\n          \"minor\": 0\r\n        }\r\n      },\r\n      \"providerStates\": [\r\n        {\r\n          \"name\": \"A system access is created\"\r\n        }\r\n      ],\r\n      \"matchingRules\": {\r\n        \"body\": {\r\n          \"$.correlationId\": {\r\n            \"matchers\": [\r\n              {\r\n                \"match\": \"regex\",\r\n                \"regex\": \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"\r\n              }\r\n            ],\r\n            \"combine\": \"AND\"\r\n          },\r\n          \"$.version.minor\": {\r\n            \"matchers\": [\r\n              {\r\n                \"match\": \"number\"\r\n              }\r\n            ],\r\n            \"combine\": \"AND\"\r\n          },\r\n          \"$.payload.systemId\": {\r\n            \"matchers\": [\r\n              {\r\n                \"match\": \"regex\",\r\n                \"regex\": \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"\r\n              }\r\n            ],\r\n            \"combine\": \"AND\"\r\n          },\r\n          \"$.payload.userId\": {\r\n            \"matchers\": [\r\n              {\r\n                \"match\": \"regex\",\r\n                \"regex\": \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"\r\n              }\r\n            ],\r\n            \"combine\": \"AND\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"metadata\": {\r\n    \"pactSpecification\": {\r\n      \"version\": \"3.0.0\"\r\n    },\r\n    \"pact-jvm\": {\r\n      \"version\": \"3.6.4\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nwhile 3.6.5 gives the following\r\n```json\r\n{\r\n  \"consumer\": {\r\n    \"name\": \"operator-service\"\r\n  },\r\n  \"provider\": {\r\n    \"name\": \"system-access-change-events\"\r\n  },\r\n  \"messages\": [\r\n    {\r\n      \"description\": \"SystemAccessCreated message\",\r\n      \"metaData\": {\r\n        \"Content-Type\": \"application/json; charset\\u003dUTF-8\"\r\n      },\r\n      \"contents\": \"\\\"\\\\\\\"{\\\\\\\\\\\\\\\"payload\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"systemId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"3e850e12-8d81-4be2-a0cf-3080bd63af7b\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"userId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"e2490de5-5bd3-43d5-b7c4-526e33f71304\\\\\\\\\\\\\\\"},\\\\\\\\\\\\\\\"origin\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"staff-access\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"correlationId\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"e2490de5-5bd3-43d5-b7c4-526e33f71304\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"type\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"SystemAccessCreated\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"version\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"major\\\\\\\\\\\\\\\":1,\\\\\\\\\\\\\\\"minor\\\\\\\\\\\\\\\":0}}\\\\\\\"\\\"\",\r\n      \"providerStates\": [\r\n        {\r\n          \"name\": \"A system access is created\"\r\n        }\r\n      ],\r\n      \"matchingRules\": {\r\n        \"body\": {\r\n          \"$.correlationId\": {\r\n            \"matchers\": [\r\n              {\r\n                \"match\": \"regex\",\r\n                \"regex\": \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"\r\n              }\r\n            ],\r\n            \"combine\": \"AND\"\r\n          },\r\n          \"$.version.minor\": {\r\n            \"matchers\": [\r\n              {\r\n                \"match\": \"number\"\r\n              }\r\n            ],\r\n            \"combine\": \"AND\"\r\n          },\r\n          \"$.payload.systemId\": {\r\n            \"matchers\": [\r\n              {\r\n                \"match\": \"regex\",\r\n                \"regex\": \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"\r\n              }\r\n            ],\r\n            \"combine\": \"AND\"\r\n          },\r\n          \"$.payload.userId\": {\r\n            \"matchers\": [\r\n              {\r\n                \"match\": \"regex\",\r\n                \"regex\": \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"\r\n              }\r\n            ],\r\n            \"combine\": \"AND\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"metadata\": {\r\n    \"pactSpecification\": {\r\n      \"version\": \"3.0.0\"\r\n    },\r\n    \"pact-jvm\": {\r\n      \"version\": \"3.6.5\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nusing the following verification in my consumer:\r\n```java\r\n@PactVerifyProvider(\"SystemAccessCreated message\")\r\n    public String verifySystemAccessCreatedMessage() {\r\n        List<PublishRequest> publishedRequests = snsStub.getPublishedRequests(SnsSystemAccessChangeEventPublisher.SYSTEM_ACCESS_CHANGE_TOPIC_NAME);\r\n        return publishedRequests.get(0).getMessage();\r\n    }\r\n\r\n    @TestTarget\r\n    public final Target target = new AmqpTarget(singletonList(this.getClass().getPackage().getName() + \".*\"));\r\n```\r\n\r\nworks fine on 3.6.4 (provider and consumer), but after upgrading to 3.6.5 I get the following:\r\n```\r\n\r\nVerifying a pact between operator-service and system-access-change-events\r\n  Given A system access is created\r\n  SystemAccessCreated message\r\n2019-04-24 11:28:09.439UTC INFO  [main] [AAH-Correlation-Id=fb3cc959-6b0a-4159-8d35-2760148a5210] o.r.Reflections - Reflections took 176 ms to scan 228 urls, producing 4 keys and 10 values \r\n    generates a message which\r\n      has a matching body (FAILED)\r\n\r\nFailures:\r\n\r\n0) SystemAccessCreated message generates a message which has a matching body\r\n      / -> mismatch\r\n\r\n\r\n\r\njava.lang.AssertionError: \r\n0 - / -> [{mismatch=mismatch, diff=}]\r\n\r\n\tat au.com.dius.pact.provider.junit.target.BaseTarget.getAssertionError(BaseTarget.kt:71)\r\n\tat au.com.dius.pact.provider.junit.target.AmqpTarget.testInteraction(AmqpTarget.kt:50)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner$interactionBlock$statement$1.evaluate(InteractionRunner.kt:197)\r\n\tat au.com.dius.pact.provider.junit.RunStateChanges.evaluate(RunStateChanges.kt:17)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner.run(InteractionRunner.kt:144)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.kt:137)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.kt:51)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\r\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n```\r\n\r\nI did some debugging and noted that in `ResponseComparison#compareMessageBody` no body matcher is found due to `message.contentType` being `application/json; charset=UTF-8` in 3.6.5, while with 3.6.4 it is `application/json`.\r\n\r\nTo temporarily get around this I manually removed the charset from the content-type in the pact file and re-ran the verification, but then I encountered this error:\r\n```\r\n\r\nVerifying a pact between operator-service and system-access-change-events\r\n  Given A system access is created\r\n  SystemAccessCreated message\r\n2019-04-24 11:32:27.494UTC INFO  [main] [AAH-Correlation-Id=33049b2b-30d2-4c23-ba3d-139eb32a4f7c] o.r.Reflections - Reflections took 172 ms to scan 228 urls, producing 4 keys and 10 values \r\n    generates a message which\r\n      has a matching body (FAILED)\r\n\r\nFailures:\r\n\r\n0) SystemAccessCreated message generates a message which has a matching body\r\n      $ -> Expected '\"\\\"{\\\\\\\"payload\\\\\\\":{\\\\\\\"systemId\\\\\\\":\\\\\\\"3e850e12-8d81-4be2-a0cf-3080bd63af7b\\\\\\\",\\\\\\\"userId\\\\\\\":\\\\\\\"e2490de5-5bd3-43d5-b7c4-526e33f71304\\\\\\\"},\\\\\\\"origin\\\\\\\":\\\\\\\"staff-access\\\\\\\",\\\\\\\"correlationId\\\\\\\":\\\\\\\"e2490de5-5bd3-43d5-b7c4-526e33f71304\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"SystemAccessCreated\\\\\\\",\\\\\\\"version\\\\\\\":{\\\\\\\"major\\\\\\\":1,\\\\\\\"minor\\\\\\\":0}}\\\"\"' but received Map(payload -> Map(systemId -> f535038c-89c2-4754-821a-2fbbc314616d, userId -> e34963ab-bcb8-49af-9f39-d71d9ad7999f), version -> Map(major -> 1, minor -> 0), origin -> staff-access, correlationId -> 33049b2b-30d2-4c23-ba3d-139eb32a4f7c, type -> SystemAccessCreated)\r\n\r\n\r\n\r\njava.lang.AssertionError: \r\n0 - $ -> [{mismatch=Expected '\"\\\"{\\\\\\\"payload\\\\\\\":{\\\\\\\"systemId\\\\\\\":\\\\\\\"3e850e12-8d81-4be2-a0cf-3080bd63af7b\\\\\\\",\\\\\\\"userId\\\\\\\":\\\\\\\"e2490de5-5bd3-43d5-b7c4-526e33f71304\\\\\\\"},\\\\\\\"origin\\\\\\\":\\\\\\\"staff-access\\\\\\\",\\\\\\\"correlationId\\\\\\\":\\\\\\\"e2490de5-5bd3-43d5-b7c4-526e33f71304\\\\\\\",\\\\\\\"type\\\\\\\":\\\\\\\"SystemAccessCreated\\\\\\\",\\\\\\\"version\\\\\\\":{\\\\\\\"major\\\\\\\":1,\\\\\\\"minor\\\\\\\":0}}\\\"\"' but received Map(payload -> Map(systemId -> f535038c-89c2-4754-821a-2fbbc314616d, userId -> e34963ab-bcb8-49af-9f39-d71d9ad7999f), version -> Map(major -> 1, minor -> 0), origin -> staff-access, correlationId -> 33049b2b-30d2-4c23-ba3d-139eb32a4f7c, type -> SystemAccessCreated), diff=}]\r\n\r\n\tat au.com.dius.pact.provider.junit.target.BaseTarget.getAssertionError(BaseTarget.kt:71)\r\n\tat au.com.dius.pact.provider.junit.target.AmqpTarget.testInteraction(AmqpTarget.kt:50)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner$interactionBlock$statement$1.evaluate(InteractionRunner.kt:197)\r\n\tat au.com.dius.pact.provider.junit.RunStateChanges.evaluate(RunStateChanges.kt:17)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner.run(InteractionRunner.kt:144)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.kt:137)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.kt:51)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:48)\r\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n```\r\n\r\nAny help would be much appreciated. Am I missing something or is it a bug?", "url": "https://github.com/DiUS/pact-jvm/issues/874", "user": "Bjoern-Hegstam", "labels": ["bug"], "created": "2019-04-24 11:38:22", "closed": "2019-05-05 06:59:57", "commits": {"dbe9bc2190063e26f8949d8de342ebf5467e5c38": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "efe3e0fe73dd255379a0f0b8ae1d540b338da7a8": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "a1b9798026b642b18bbff00e28cce3c4c74e9ae9": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "dbe9bc2190063e26f8949d8de342ebf5467e5c38", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["3d43a33a3b1ce8c0005b106e871030f253a4e386"], "nameRev": "dbe9bc2190063e26f8949d8de342ebf5467e5c38 tags/3_6_6~13", "commitMessage": "fix: only set the message content type if it has not been specified #874\n", "commitDateTime": "2019-04-25 16:06:44", "authoredDateTime": "2019-04-25 16:06:44", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/MessagePactBuilderSpec.groovy", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MessagePactBuilder.kt", "insertions": 9, "deletions": 6, "lines": 15}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "efe3e0fe73dd255379a0f0b8ae1d540b338da7a8", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["dbe9bc2190063e26f8949d8de342ebf5467e5c38"], "nameRev": "efe3e0fe73dd255379a0f0b8ae1d540b338da7a8 tags/3_6_6~12", "commitMessage": "fix: correctly handle the message content type with charsets #874\n", "commitDateTime": "2019-04-25 17:17:02", "authoredDateTime": "2019-04-25 17:17:02", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/Message.groovy", "insertions": 26, "deletions": 3, "lines": 29}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/v3/messaging/MessageSpec.groovy", "insertions": 22, "deletions": 29, "lines": 51}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "a1b9798026b642b18bbff00e28cce3c4c74e9ae9", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["efe3e0fe73dd255379a0f0b8ae1d540b338da7a8"], "nameRev": "a1b9798026b642b18bbff00e28cce3c4c74e9ae9 tags/3_6_6~11", "commitMessage": "fix: correctly handle the message content type with charsets when verifying #874\n", "commitDateTime": "2019-04-25 18:00:20", "authoredDateTime": "2019-04-25 17:51:53", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/ResponseComparisonSpec.groovy", "insertions": 93, "deletions": 0, "lines": 93}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ResponseComparison.kt", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ResponseComparisonTest.groovy", "insertions": 0, "deletions": 31, "lines": 31}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["dbe9bc2190063e26f8949d8de342ebf5467e5c38", "efe3e0fe73dd255379a0f0b8ae1d540b338da7a8", "a1b9798026b642b18bbff00e28cce3c4c74e9ae9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 3, "gitStatsSummary": {"insertions": 37, "deletions": 10, "lines": 47, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3", "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ResponseComparison.kt", "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MessagePactBuilder.kt"]}, {"title": "Inconsistent behaviour of publish verifier results", "body": "Hi,\r\n\r\nI've observed an inconsistent behaviour when publishing verification results. My project setup is as follows:\r\n- Using `au.com.dius:pact-jvm-provider-junit_2.11:3.5.24`.\r\n- Running local pact broker using the provided docker-compose file for testing.\r\n- Not setting `pact.verifier.publishResults`.\r\n- Not using pact's maven plugin.\r\n\r\nTest class:\r\n```\r\n@ContextConfiguration\r\n@RunWith(PactRunner.class)\r\n@Provider(\"provider\")\r\n@PactBroker(host = \"localhost\", port = \"80\")\r\n@SpringBootTest(...)\r\npublic class ProviderTest {\r\n...\r\n}\r\n```\r\n**Scenario 1:**\r\n```\r\n// Annotations\r\npublic class ProviderTest {\r\n  @State(\"test something\")\r\n  public void testSomething() {\r\n    // something that will make the test pass\r\n  }\r\n}\r\n```\r\nMy test passes and results are not published to the broker as expected because I did not set `pact.verifier.publishResults` to `true`. \u2705 \r\n\r\n**Scenario 2:**\r\n```\r\n// Annotations\r\npublic class ProviderTest {\r\n  @State(\"test something\")\r\n  public void testSomething() {\r\n    // something that will make the test fail\r\n  }\r\n}\r\n```\r\nMy test fails and results are not published to the broker as expected because I did not set `pact.verifier.publishResults` to `true`. \u2705 \r\n\r\n**Scenario 3:**\r\n```\r\n// Annotations\r\npublic class ProviderTest {\r\n  // Completely remove the test state.\r\n}\r\n```\r\nMy test fails with `MissingStateChangeMethod: Did not find a test class method annotated with @State(\"test something\")` **but** results are still published to pact broker despite not setting `pact.verifier.publishResults`. \u274c \r\n\r\nMy understanding of `pact.verifier.publishResults` is that only when this is set to true will results be published to the broker. Does this not apply to the case of missing test states? Is there a documentation for this?", "url": "https://github.com/DiUS/pact-jvm/issues/872", "user": "hendychua", "labels": ["bug"], "created": "2019-04-12 08:36:45", "closed": "2019-04-14 07:11:17", "commits": {"884b9ddaa62626f36a18d93a6289d2f345c9001f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "884b9ddaa62626f36a18d93a6289d2f345c9001f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["2c3455f754100a4ec55f559306634d22a6710bcd"], "nameRev": "884b9ddaa62626f36a18d93a6289d2f345c9001f tags/3_5_25~2", "commitMessage": "fix: JUnit tests were publishing results when a before step failed #872\n", "commitDateTime": "2019-04-14 13:46:23", "authoredDateTime": "2019-04-14 13:46:23", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/InteractionRunner.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/InteractionRunnerSpec.groovy", "insertions": 38, "deletions": 0, "lines": 38}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InteractionRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.run(org.junit.runner.notification.RunNotifier)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["884b9ddaa62626f36a18d93a6289d2f345c9001f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.InteractionRunner.run(org.junit.runner.notification.RunNotifier)"]}, {"title": "[pact-jvm-consumer-junit5] OverlappingFileLockException when running tests in parallel", "body": "This is a bug report related to au.com.dius:pact-jvm-consumer-junit5_2.12:3.6.2\r\n\r\nI wanted to speed up my tests using the [JUnit jupiter feature \"parallel execution\"](https://junit.org/junit5/docs/snapshot/user-guide/#writing-tests-parallel-execution).\r\nDoing so, normally succeeding Pact-tests end up in OverlappingFileLockException.\r\n\r\nI have created the repository https://github.com/SchulteMarkus/pact-jvm-consumer-parallel-junit5-OverlappingFileLockException which demonstrates this issue / can be used for reproduction.", "url": "https://github.com/DiUS/pact-jvm/issues/861", "user": "SchulteMarkus", "labels": ["bug"], "created": "2019-03-04 10:05:37", "closed": "2019-03-31 09:16:25", "commits": {"d4784b15e6b6edce948342753d9a1968a7ffd656": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "2be31356d4219c9adb64769d481ed3438476f11d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 26.00027777777778, "commitsDetails": [{"commitHash": "d4784b15e6b6edce948342753d9a1968a7ffd656", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["0b31b21ef8638452bdbc8e0b253df2f8f93f6be1"], "nameRev": "d4784b15e6b6edce948342753d9a1968a7ffd656 tags/3_6_3~2", "commitMessage": "fix: fix for OverlappingFileLockException with parrallel tests #861\n", "commitDateTime": "2019-03-31 18:31:58", "authoredDateTime": "2019-03-31 18:31:58", "commitGitStats": [{"filePath": "build.gradle", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-groovy/build.gradle", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-junit5/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit5/src/main/kotlin/au/com/dius/pact/consumer/junit5/PactConsumerTestExt.kt", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-consumer/build.gradle", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy", "insertions": 1, "deletions": 37, "lines": 38}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactWriter.kt", "insertions": 55, "deletions": 0, "lines": 55}, {"filePath": "pact-jvm-pact-broker/build.gradle", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider-maven/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "2be31356d4219c9adb64769d481ed3438476f11d", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d4784b15e6b6edce948342753d9a1968a7ffd656"], "nameRev": "2be31356d4219c9adb64769d481ed3438476f11d tags/3_6_3~1", "commitMessage": "fix: fix for failing tests #861\n", "commitDateTime": "2019-03-31 19:18:12", "authoredDateTime": "2019-03-31 19:18:12", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/ExampleGroovyConsumerV3PactTest.groovy", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MockHttpServer.kt", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy", "insertions": 1, "deletions": 17, "lines": 18}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactWriter.kt", "insertions": 4, "deletions": 8, "lines": 12}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d4784b15e6b6edce948342753d9a1968a7ffd656", "2be31356d4219c9adb64769d481ed3438476f11d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 76, "deletions": 76, "lines": 152, "gitFilesChange": 10}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactWriter.kt", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy", "pact-jvm-pact-broker", "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MockHttpServer.kt", "pact-jvm-consumer-junit5", "", "pact-jvm-model", "pact-jvm-provider-maven", "pact-jvm-consumer", "pact-jvm-consumer-groovy"]}, {"title": "provider junit5 does not report failed results to pact broker", "body": "Hi,\r\n\r\nI use `au.com.dius:pact-jvm-provider-junit5_2.12:3.6.2` to run provider tests against pact broker. My interaction is of messaging type. Then I use publishing verification results back to pact broker.\r\n\r\nWhen my provider tests adhere to the contract - the verification result is sent to broker. However if I spoil my test - the provider build breaks, due to test failures but no failing verification result is sent to broker. Is it intended?\r\n\r\nFrom the pact source code, I found that it reports only successful responses:\r\n\r\nhttps://github.com/DiUS/pact-jvm/blob/3d00fe492722c96557e775d7074112bf8f367540/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/TestResultAccumulator.kt#L33\r\n\r\nGreat job by the way!", "url": "https://github.com/DiUS/pact-jvm/issues/858", "user": "czterocyty", "labels": ["bug"], "created": "2019-03-01 12:46:16", "closed": "2019-04-14 09:31:29", "commits": {"09babcae993c628f2725c32c8b08b8d5ab3201ac": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 43.000277777777775, "commitsDetails": [{"commitHash": "09babcae993c628f2725c32c8b08b8d5ab3201ac", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e3eb0cf7ef15808166e5bc1c8348f546c30808fd"], "nameRev": "09babcae993c628f2725c32c8b08b8d5ab3201ac tags/3_6_4~1^2", "commitMessage": "fix: provider junit5 does not report failed results to pact broker #858\n", "commitDateTime": "2019-04-14 18:41:36", "authoredDateTime": "2019-04-14 18:41:36", "commitGitStats": [{"filePath": "pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/TestResultAccumulator.kt", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/TestResultAccumulatorSpec.groovy", "insertions": 42, "deletions": 5, "lines": 47}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["09babcae993c628f2725c32c8b08b8d5ab3201ac"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Multiple set-cookie headers are being ignored in verification", "body": "When we set multiple set-cookie headers to response in provider side, pact framework doesn't verify them.\r\n\r\nExample response :\r\n\r\n ```\r\nHTTP/1.1 200 OK\r\n Server: Apigee-Edge\r\n Set-Cookie: JSESSIONID=alphabeta120394049; HttpOnly\r\n Set-Cookie: AWSELBID=baaadbeef6767676767690220; Path=/alpha\r\n```\r\n\r\nPact framework only checks AWSELBID cookie, ignores JSESSIONID.", "url": "https://github.com/DiUS/pact-jvm/issues/851", "user": "hkarabakla", "labels": ["bug"], "created": "2019-02-18 12:21:38", "closed": "2019-03-31 09:15:59", "commits": {"997e24ebdb2b5f420020480fcb607e1448d2da7b": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "6f480181780bad15c8e15ee8c5c23a8039813b50": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "eff5bd3ba9f8a86aa6a0f10bedc99de5aaf62970": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "fdeb160c1ffed3c6d0d57f6b89c67a1bc62431d4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 40.000277777777775, "commitsDetails": [{"commitHash": "997e24ebdb2b5f420020480fcb607e1448d2da7b", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["860675f87bb59af8aabab0ac17b8a1973e51382e"], "nameRev": "997e24ebdb2b5f420020480fcb607e1448d2da7b tags/4_0_0-beta_0~4^2~13", "commitMessage": "fix: handle repeated headers #851\n", "commitDateTime": "2019-03-02 17:50:13", "authoredDateTime": "2019-03-02 17:50:13", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBuilder.groovy", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBuilderSpec.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactResultSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/DefaultValuesTest.java", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/MissingRequestConsumerPassesTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-specs2/src/main/scala/au/com/dius/pact/consumer/UnitSpecsSupport.scala", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-consumer-specs2/src/main/scala/au/com/dius/pact/consumer/dispatch/HttpClient.scala", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ConsumerService.scala", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/DifferentStatesPactSpec.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ExamplePactSpec.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ExamplePactWithMatchersSpec.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/Fixtures.scala", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/MultipleExamplesPactSpec.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestBase.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 14, "deletions": 12, "lines": 26}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java", "insertions": 12, "deletions": 10, "lines": 22}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslResponse.java", "insertions": 12, "deletions": 8, "lines": 20}, {"filePath": "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MockHttpServer.kt", "insertions": 9, "deletions": 9, "lines": 18}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/PactSession.scala", "insertions": 6, "deletions": 5, "lines": 11}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/model/PactFragmentBuilder.scala", "insertions": 7, "deletions": 8, "lines": 15}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/model/unfiltered/Conversions.scala", "insertions": 8, "deletions": 8, "lines": 16}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/MockHttpServerSpec.groovy", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslRequestWithPathSpec.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPathSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslResponseSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/Matching.kt", "insertions": 44, "deletions": 0, "lines": 44}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/Matching.scala", "insertions": 2, "deletions": 37, "lines": 39}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/RequestMatching.scala", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/ResponseMatching.scala", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/MatchingSpec.groovy", "insertions": 54, "deletions": 0, "lines": 54}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/MultipartMessageBodyMatcherSpec.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/model/MatchingSpec.groovy", "insertions": 11, "deletions": 51, "lines": 62}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/model/RequestMatchingSpec.groovy", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Request.groovy", "insertions": 11, "deletions": 5, "lines": 16}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponseInteraction.groovy", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Response.groovy", "insertions": 9, "deletions": 3, "lines": 12}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/Message.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/BaseRequest.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/HttpPart.kt", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/HttpPartSpec.groovy", "insertions": 8, "deletions": 8, "lines": 16}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/ModelFixtures.groovy", "insertions": 8, "deletions": 8, "lines": 16}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactSerialiserSpec.groovy", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/RequestResponsePactSpec.groovy", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/RequestSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/ResponseComparisonTest.groovy", "insertions": 9, "deletions": 9, "lines": 18}, {"filePath": "pact-jvm-provider-spring/src/main/kotlin/au/com/dius/pact/provider/spring/MvcProviderVerifier.kt", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/JsonReporter.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/MarkdownReporter.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderClient.kt", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ResponseComparison.kt", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/reporters/AnsiConsoleReporter.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/reporters/VerifierReporter.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/groovysupport/ProviderClientSpec.groovy", "insertions": 53, "deletions": 21, "lines": 74}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/groovysupport/ProviderClientTest.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Complete.scala", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Create.scala", "insertions": 3, "deletions": 4, "lines": 7}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/ResponseUtils.scala", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Server.scala", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultValuesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.DefaultValuesTest.createPact(au.com.dius.pact.consumer.dsl.PactDslWithProvider)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "MissingRequestConsumerPassesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.MissingRequestConsumerPassesTest.assertException(java.lang.Throwable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestBase.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestBase.setupFileUpload(java.lang.String,java.lang.String,java.lang.String,byte[])", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.headers(java.util.Map)", "TOT": 5, "UPD": 1, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.headers(java.lang.String,java.lang.String,java.lang.String[])", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchHeader(java.lang.String,java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.headerFromProviderState(java.lang.String,java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.json.JSONObject)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.w3c.dom.Document)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestWithoutPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.headers(java.util.Map)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.headers(java.lang.String,java.lang.String,java.lang.String[])", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.util.function.Supplier,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.headerFromProviderState(java.lang.String,java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.json.JSONObject)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.w3c.dom.Document)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "PactDslResponse.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.headers(java.util.Map)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.util.function.Supplier,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.matchHeader(java.lang.String,java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.headerFromProviderState(java.lang.String,java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(org.w3c.dom.Document)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "6f480181780bad15c8e15ee8c5c23a8039813b50", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["997e24ebdb2b5f420020480fcb607e1448d2da7b"], "nameRev": "6f480181780bad15c8e15ee8c5c23a8039813b50 tags/4_0_0-beta_0~4^2~12", "commitMessage": "fix: missed a few references after refactor to handle repeated headers #851\n", "commitDateTime": "2019-03-02 18:06:25", "authoredDateTime": "2019-03-02 18:06:25", "commitGitStats": [{"filePath": "pact-jvm-provider-scalasupport/src/main/scala/au/com/dius/pact/provider/sbtsupport/HttpClient.scala", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-provider-scalasupport/src/main/scala/au/com/dius/pact/provider/unfiltered/Conversions.scala", "insertions": 5, "deletions": 6, "lines": 11}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/JsonReporter.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/MarkdownReporter.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/reporters/AnsiConsoleReporter.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/reporters/VerifierReporter.kt", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "eff5bd3ba9f8a86aa6a0f10bedc99de5aaf62970", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["6f480181780bad15c8e15ee8c5c23a8039813b50"], "nameRev": "eff5bd3ba9f8a86aa6a0f10bedc99de5aaf62970 tags/4_0_0-beta_0~4^2~11", "commitMessage": "fix: missed another references after refactor to handle repeated headers #851\n", "commitDateTime": "2019-03-02 18:27:03", "authoredDateTime": "2019-03-02 18:27:03", "commitGitStats": [{"filePath": "pact-jvm-provider-scalasupport/src/test/scala/au/com/dius/pact/provider/sbtsupport/AnimalServiceResponses.scala", "insertions": 4, "deletions": 4, "lines": 8}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "fdeb160c1ffed3c6d0d57f6b89c67a1bc62431d4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["eff5bd3ba9f8a86aa6a0f10bedc99de5aaf62970"], "nameRev": "fdeb160c1ffed3c6d0d57f6b89c67a1bc62431d4 tags/4_0_0-beta_0~4^2~10", "commitMessage": "fix: For repeated headers need to split the value around commas when loading from the pact file #851\n", "commitDateTime": "2019-03-02 18:34:58", "authoredDateTime": "2019-03-02 18:34:58", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Request.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Response.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["997e24ebdb2b5f420020480fcb607e1448d2da7b", "6f480181780bad15c8e15ee8c5c23a8039813b50", "eff5bd3ba9f8a86aa6a0f10bedc99de5aaf62970", "fdeb160c1ffed3c6d0d57f6b89c67a1bc62431d4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 3, "gitStatsSummary": {"insertions": 203, "deletions": 166, "lines": 369, "gitFilesChange": 34}, "spoonStatsSummary": {"TOT": 57.0, "UPD": 1.0, "INS": 26.0, "MOV": 27.0, "DEL": 3.0, "spoonFilesChanged": 4, "spoonMethodsChanged": 24}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Response.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Request.groovy", "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/reporters", "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl", "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MockHttpServer.kt", "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/PactSession.scala", "pact-jvm-server/src/main/scala/au/com/dius/pact/server/ResponseUtils.scala", "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Server.scala", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/BaseRequest.kt", "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy", "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/Matching.kt", "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Complete.scala", "pact-jvm-provider-scalasupport/src/main/scala/au/com/dius/pact/provider/sbtsupport", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/Matching.scala", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponseInteraction.groovy", "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderClient.kt", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/RequestMatching.scala", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/ResponseMatching.scala", "pact-jvm-consumer/src/main/scala/au/com/dius/pact/model/PactFragmentBuilder.scala", "pact-jvm-consumer-specs2/src/main/scala/au/com/dius/pact/consumer/UnitSpecsSupport.scala", "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Create.scala", "pact-jvm-consumer/src/main/scala/au/com/dius/pact/model/unfiltered", "pact-jvm-provider-spring/src/main/kotlin/au/com/dius/pact/provider/spring", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/HttpPart.kt", "pact-jvm-provider-scalasupport/src/main/scala/au/com/dius/pact/provider/unfiltered", "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ResponseComparison.kt", "pact-jvm-consumer-specs2/src/main/scala/au/com/dius/pact/consumer/dispatch", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.util.function.Supplier,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(org.w3c.dom.Document)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.headerFromProviderState(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.w3c.dom.Document)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslResponse.matchHeader(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslResponse.headers(java.util.Map)", "au.com.dius.pact.consumer.dsl.PactDslResponse.headerFromProviderState(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchHeader(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.json.JSONObject)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.headers(java.util.Map)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.headers(java.lang.String,java.lang.String,java.lang.String[])", "au.com.dius.pact.consumer.dsl.PactDslRequestBase.setupFileUpload(java.lang.String,java.lang.String,java.lang.String,byte[])", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.w3c.dom.Document)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.util.function.Supplier,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.headerFromProviderState(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.headers(java.lang.String,java.lang.String,java.lang.String[])", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.headers(java.util.Map)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.json.JSONObject)"]}, {"title": "pact-jvm-server (3.5.15++): Internal Server Error on /complete", "body": "Hi\r\n\r\nWe try to use the Pact-JVM-Server Version 3.5.15++ (up to current 3.6.1). We are using JDK 8 (1.8.0_201-b09) for running the server.\r\n\r\nWhen we call \"/complete\" on the Pact-JVM-Server we always get an \"Internal Server Error\". In the Pact-JVM-Server console-log we see the following exception: \r\n```\r\nException caught handling request:\r\njava.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String\r\n        at au.com.dius.pact.server.Complete$.getPort(Complete.scala:13)\r\n        at au.com.dius.pact.server.Complete$.apply(Complete.scala:28)\r\n        at au.com.dius.pact.server.RequestRouter$.dispatch(RequestRouter.scala:36)\r\n        at au.com.dius.pact.server.RequestHandler.handle(RequestHandler.scala:24)\r\n        at au.com.dius.pact.server.RequestHandler.$anonfun$intent$1(RequestHandler.scala:28)\r\n        at scala.PartialFunction$$anonfun$apply$1.applyOrElse(PartialFunction.scala:249)\r\n        at scala.PartialFunction$Lifted.apply(PartialFunction.scala:224)\r\n        at scala.PartialFunction$Lifted.apply(PartialFunction.scala:220)\r\n        at unfiltered.response.Pass$PartialAttempt.attemptWithPass(pass.scala:72)\r\n        at unfiltered.response.Pass$PassingAttempt.attempt(pass.scala:65)\r\n        at unfiltered.response.Pass$PassingAttempt.attempt$(pass.scala:65)\r\n        at unfiltered.response.Pass$PartialAttempt.attempt(pass.scala:67)\r\n        at unfiltered.response.Pass$.$anonfun$fold$1(pass.scala:48)\r\n        at unfiltered.response.Pass$FunctionAttempt.apply(pass.scala:77)\r\n        at unfiltered.netty.cycle.Plan.$anonfun$channelRead$3(plans.scala:68)\r\n        at unfiltered.netty.cycle.Plan.catching(plans.scala:41)\r\n        at unfiltered.netty.cycle.Plan.catching$(plans.scala:40)\r\n        at au.com.dius.pact.server.RequestHandler.catching(RequestHandler.scala:17)\r\n        at unfiltered.netty.cycle.Plan.$anonfun$channelRead$2(plans.scala:67)\r\n        at unfiltered.netty.cycle.SynchronousExecution.executeIntent(deferrals.scala:23)\r\n        at unfiltered.netty.cycle.SynchronousExecution.executeIntent$(deferrals.scala:23)\r\n        at au.com.dius.pact.server.RequestHandler.executeIntent(RequestHandler.scala:17)\r\n        at unfiltered.netty.cycle.Plan.$anonfun$channelRead$1(plans.scala:66)\r\n        at unfiltered.netty.cycle.Plan.catching(plans.scala:41)\r\n        at unfiltered.netty.cycle.Plan.catching$(plans.scala:40)\r\n        at au.com.dius.pact.server.RequestHandler.catching(RequestHandler.scala:17)\r\n        at unfiltered.netty.cycle.Plan.channelRead(plans.scala:65)\r\n        at unfiltered.netty.cycle.Plan.channelRead$(plans.scala:61)\r\n        at au.com.dius.pact.server.RequestHandler.channelRead(RequestHandler.scala:17)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:323)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:297)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1434)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:965)\r\n        at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\r\n        at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:644)\r\n        at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:579)\r\n        at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:496)\r\n        at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:458)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n        at java.lang.Thread.run(Thread.java:748)\r\n``` \r\n\r\nHere are the requests we made:\r\n**create mock**\r\n*request*\r\n```\r\ncurl --request POST \\\r\n  --url 'http://localhost:29999/create?state=test&path=' \\\r\n  --header 'content-type: application/json' \\\r\n  --data '{\r\n  \"consumer\": {\r\n    \"name\": \"pact-consumer\"\r\n  },\r\n  \"provider\": {\r\n    \"name\": \"pact-provider\"\r\n  },\r\n  \"interactions\": [\r\n    {\r\n      \"description\": \"get time\",\r\n      \"request\": {\r\n        \"method\": \"GET\",\r\n        \"path\": \"/resource/time/current\",\r\n\t\"query\": {\r\n\t  \"locale\": [\"de\"]\r\n\t}\r\n      },\r\n      \"response\": {\r\n        \"body\": {\r\n          \"time\": \"13:00:34.890\"\r\n         },\r\n        \"status\": 200\r\n      },\r\n      \"providerStates\": [\r\n        {\r\n          \"name\": \"test\"\r\n        }\r\n      ]\r\n    }\r\n  ],\r\n  \"metadata\": {\r\n    \"pact-specification\": {\r\n      \"version\": \"3.0.0\"\r\n    }\r\n  }\r\n}\r\n'\r\n``` \r\n*response*\r\n```\r\n{\"port\": 32695}\r\n``` \r\n\r\n**complete pact mock**\r\n*request* \r\n``` \r\ncurl --request POST \\\r\n  --url http://localhost:29999/complete \\\r\n  --header 'content-type: application/json' \\\r\n  --data '{\r\n  \"port\": 32695\r\n}'\r\n```\r\n*response* \r\n``` Internal Server Error ``` \r\n\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/845", "user": "hstamminger", "labels": ["bug"], "created": "2019-01-24 12:05:45", "closed": "2019-03-02 01:38:33", "commits": {}, "ttf": 36.000277777777775, "commitsDetails": []}, {"title": "SpringRestPactRunner does not call \"TEARDOWN\" State change method", "body": "I am running Provider verification tests using SpringRestPactRunner. I have setup SETUP @State method that is executed; however, TEARDOWN method for the same state is not getting executed. My workaround is to use @After junit method.", "url": "https://github.com/DiUS/pact-jvm/issues/834", "user": "RusmanCool", "labels": ["bug"], "created": "2018-12-16 02:01:09", "closed": "2020-03-08 02:18:13", "commits": {"f53bd4c5a92858dee9741613fdd1c6161a38d286": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 448.0002777777778, "commitsDetails": [{"commitHash": "f53bd4c5a92858dee9741613fdd1c6161a38d286", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["fe54ed8385b32f8c8417a8a268ea262ae3c88129"], "nameRev": "f53bd4c5a92858dee9741613fdd1c6161a38d286 tags/4_0_1~3^2", "commitMessage": "fix: call the statechange teardown if the test fails #834\n", "commitDateTime": "2019-10-13 13:52:31", "authoredDateTime": "2019-10-13 13:43:36", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/RunStateChanges.kt", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/RunStateChangesSpec.groovy", "insertions": 90, "deletions": 0, "lines": 90}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f53bd4c5a92858dee9741613fdd1c6161a38d286"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 2, "lines": 7, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit"]}, {"title": "No such property: message for class:  java.lang.String", "body": "_**How can I get a meaningful error in a console/report?**_\r\nTrying to verify Java 8 **Provider** against pact file in json format. I have not added proper endpoints yet on purpose to see helpful errors. Instead, I am getting:\r\n```\r\nreturns a response which\r\n      Request Failed - No such property: message for class: java.lang.String\"\r\n```\r\n\r\n```\r\nFor a Response that is returned by Provider SpringBoot server:\r\nau.com.dius.pact.provider.ProviderClient - Response: {statusCode=404, headers={Content-Type=application/json;charset=UTF-8, Transfer-Encoding=chunked, Date=Wed, 12 Dec 2018 21:51:44 GMT}, contentType=application/json; charset=UTF-8, data={\"timestamp\":\"2018-12-12T21:51:44.359+0000\",\"status\":404,\"error\":\"Not Found\",\"message\":\"No message available\",\"path\":\"/api/application/\"}}\r\n```\r\nI have traced it back to `ProviderVerification.class` line 199.\r\n\r\nI am using\r\n\r\n```xml\r\n                <dependency>\r\n\t\t\t<groupId>au.com.dius</groupId>\r\n\t\t\t<artifactId>pact-jvm-provider-junit_2.12</artifactId>\r\n\t\t\t<version>3.6.0</version>\r\n\t\t</dependency>\r\n```\r\nFull response from Pact:\r\n\r\n```\r\nVerifying a pact between CreditCardApplicaionApiClient and CreditCardApplicaionApi\r\n  Given A CC application has already been submitted by a member\r\n  A POST request to retrieve a submitted by a member cc application \r\n16:51:44.354 [main] DEBUG au.com.dius.pact.provider.ProviderClient - Making request for provider au.com.dius.pact.provider.ProviderInfo(http, localhost, 8806, /, CreditCardApplicaionApi, null, null, null, null, null, false, null, changeit, null, true, false, true, null, [], []):\r\n16:51:44.354 [main] DEBUG au.com.dius.pact.provider.ProviderClient - \tmethod: POST\r\n\tpath: /api/application/\r\n\tquery: [:]\r\n\theaders: [Accept:application/json, Content-Type:application/json; charset=utf-8]\r\n\tmatchers: MatchingRules(rules={})\r\n\tgenerators: Generators(categories={})\r\n\tbody: OptionalBody(state=PRESENT, value={\"MemberAccessNumber\":\"5794684\"})\r\n16:51:44.360 [main] DEBUG au.com.dius.pact.provider.ProviderClient - Received response: HTTP/1.1 404 \r\n16:51:44.361 [main] DEBUG au.com.dius.pact.provider.ProviderClient - Response: {statusCode=404, headers={Content-Type=application/json;charset=UTF-8, Transfer-Encoding=chunked, Date=Wed, 12 Dec 2018 21:51:44 GMT}, contentType=application/json; charset=UTF-8, data={\"timestamp\":\"2018-12-12T21:51:44.359+0000\",\"status\":404,\"error\":\"Not Found\",\"message\":\"No message available\",\"path\":\"/api/application/\"}}\r\n16:51:44.364 [main] DEBUG au.com.dius.pact.matchers.HeaderMatcher - Comparing header 'Content-Type': 'application/json;charset=UTF-8' to 'application/json; charset=utf-8'\r\n16:51:44.368 [main] DEBUG au.com.dius.pact.matchers.HeaderMatcher - Comparing content type header: 'application/json;charset=UTF-8' to 'application/json; charset=utf-8'\r\n16:51:44.374 [main] DEBUG au.com.dius.pact.model.Matching$ - Found a matcher for application/json -> au.com.dius.pact.matchers.JsonBodyMatcher@dc4a691\r\n    returns a response which\r\n      Request Failed - No such property: message for class: java.lang.String\r\n\r\nFailures:\r\n\r\n0) A POST request to retrieve a submitted by a member cc application \r\n      No such property: message for class: java.lang.String\r\n```\r\nAnd JUnit stack trace:\r\n\r\n```\r\njava.lang.AssertionError: \r\n0 - No such property: message for class: java.lang.String\r\n\r\n\tat au.com.dius.pact.provider.junit.target.BaseTarget.getAssertionError(BaseTarget.kt:71)\r\n\tat au.com.dius.pact.provider.junit.target.HttpTarget.testInteraction(HttpTarget.kt:80)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner$interactionBlock$statement$1.evaluate(InteractionRunner.kt:207)\r\n\tat au.com.dius.pact.provider.junit.RunStateChanges.evaluate(RunStateChanges.kt:17)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner.run(InteractionRunner.kt:143)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.kt:137)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.kt:51)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)\r\n\r\n\r\n```\r\nAnd the Pact file:\r\n\r\n```json\r\n{\r\n  \"consumer\": {\r\n    \"name\": \"CreditCardApplicaionApiClient\"\r\n  },\r\n  \"provider\": {\r\n    \"name\": \"CreditCardApplicaionApi\"\r\n  },\r\n  \"interactions\": [\r\n    {\r\n      \"description\": \"A POST request to retrieve a submitted by a member cc application \",\r\n      \"providerState\": \"A CC application has already been submitted by a member\",\r\n      \"request\": {\r\n        \"method\": \"post\",\r\n        \"path\": \"/api/application/\",\r\n        \"headers\": {\r\n          \"Accept\": \"application/json\",\r\n          \"Content-Type\": \"application/json; charset=utf-8\"\r\n        },\r\n        \"body\": {\r\n          \"MemberAccessNumber\": \"5794684\"\r\n        }\r\n      },\r\n      \"response\": {\r\n        \"status\": 200,\r\n        \"headers\": {\r\n          \"Content-Type\": \"application/json; charset=utf-8\"\r\n        },\r\n        \"body\": {\r\n          \"MemberAccessNumber\": \"5794684\",\r\n          \"CreditLimit\": \"1500\"\r\n        }\r\n      }\r\n    }\r\n  ],\r\n  \"metadata\": {\r\n    \"pactSpecification\": {\r\n      \"version\": \"2.0.0\"\r\n    }\r\n  }\r\n}\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/831", "user": "RusmanCool", "labels": ["bug"], "created": "2018-12-12 22:23:56", "closed": "2019-03-31 09:18:16", "commits": {"87508032750230d4da98d5cce500334e0936ca36": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "40db53e997872c41ac2870a8c691f956e3a25688": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 108.00027777777778, "commitsDetails": [{"commitHash": "87508032750230d4da98d5cce500334e0936ca36", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["93f0ce2d35c7ba1a5d6442d928b585fafc45acac"], "nameRev": "87508032750230d4da98d5cce500334e0936ca36 tags/3_6_2~14", "commitMessage": "fix: No such property: message for class: java.lang.String #831\n", "commitDateTime": "2019-02-03 14:45:20", "authoredDateTime": "2019-02-03 14:45:20", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/JsonReporter.groovy", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/MarkdownReporter.groovy", "insertions": 5, "deletions": 1, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "40db53e997872c41ac2870a8c691f956e3a25688", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["85dc70dd2465fa17d9c3909b8542caac1666d13e"], "nameRev": "40db53e997872c41ac2870a8c691f956e3a25688 tags/3_5_25~4", "commitMessage": "fix: No such property: message for class: java.lang.String #831\n", "commitDateTime": "2019-02-03 14:47:23", "authoredDateTime": "2019-02-03 14:45:20", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/JsonReporter.groovy", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/MarkdownReporter.groovy", "insertions": 5, "deletions": 1, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["87508032750230d4da98d5cce500334e0936ca36"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 2, "lines": 12, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters"]}, {"title": "Spring Boot Provider test broken after spring boot 2.1 upgrade", "body": "Hi, \r\n\r\nI can no longer run Spring provider tests after upgrading Spring Boot from 2.0.6 to 2.1.0:\r\n\r\n```\r\nkotlin.jvm.KotlinReflectionNotSupportedError: Kotlin reflection implementation is not found at runtime. Make sure you have kotlin-reflect.jar in the classpath\r\n\r\n\tat kotlin.jvm.internal.ClassReference.error(ClassReference.kt:75)\r\n\tat kotlin.jvm.internal.ClassReference.getAnnotations(ClassReference.kt:27)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.getPactSource(PactRunner.kt:192)\r\n\tat au.com.dius.pact.provider.spring.SpringRestPactRunner.getPactSource(SpringRestPactRunner.kt:58)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.<init>(PactRunner.kt:78)\r\n\tat au.com.dius.pact.provider.junit.RestPactRunner.<init>(RestPactRunner.kt:8)\r\n\tat au.com.dius.pact.provider.spring.SpringRestPactRunner.<init>(SpringRestPactRunner.kt:23)\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:408)\r\n\tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\r\n\tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\r\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\r\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n\tat org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:49)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n````\r\n\r\nkotlin was upgraded from 1.2.51 to 1.2.71 by the spring boot upgrade (s. https://github.com/spring-projects/spring-boot/issues/14766). A workaround is to override the kotlin version provided by spring boot with the old version\r\n\r\n```\r\n<properties>\r\n    <kotlin.version>1.2.51</kotlin.version>\r\n</properties>\r\n``` \r\n\r\nHowever, it would be good if it would work out-of-the box again.\r\n\r\nI'm using pact-jvm-provider-spring_2.12, most recent version (3.5.24).", "url": "https://github.com/DiUS/pact-jvm/issues/805", "user": "tinexw", "labels": ["bug"], "created": "2018-11-04 20:46:53", "closed": "2019-03-31 09:19:19", "commits": {"b3f7aa52942448c9231629f8c12bb3e6c663699d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 146.00027777777777, "commitsDetails": [{"commitHash": "b3f7aa52942448c9231629f8c12bb3e6c663699d", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["4a1abe3d546d4f94ce05f8afe6a9c2db68ae5f97"], "nameRev": "b3f7aa52942448c9231629f8c12bb3e6c663699d tags/3_6_0~12^2", "commitMessage": "fix: Upgrade Kotlin to 1.2.71 #805\n", "commitDateTime": "2018-11-05 09:46:01", "authoredDateTime": "2018-11-05 09:46:01", "commitGitStats": [{"filePath": "build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "gradle.properties", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b3f7aa52942448c9231629f8c12bb3e6c663699d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["", "gradle.properties"]}, {"title": "eachKeyMappedToAnArrayLike is broken in 3.5.23", "body": "The method now requires an exact match of the key, where it did not in the past. It's broken on the provider side, because I switched back to 3.5.21 in that project and the test passed.\r\n\r\nConsumer side test:\r\n`\r\n@Pact(provider = \"donuts-ws\", consumer = \"donuts-consumer\")\r\n    public RequestResponsePact getAllDonutsByFloorFragment(PactDslWithProvider builder) {\r\n\r\n        DslPart body =\r\n                new PactDslJsonBody()\r\n                        .eachKeyMappedToAnArrayLike(\"6\")\r\n                        .stringType(\"description\", \"Hostess Fruit Pies\")\r\n                        .integerType(\"id\", 14)\r\n                        .stringType(\"creator\", \"Loren\")\r\n                        .integerType(\"quantity\", 8)\r\n                        .object(\"location\")\r\n                        .integerType(\"floor\", 6)\r\n                        .stringType(\"room\", \"south break room\")\r\n                        .closeObject();\r\n\r\n        return builder.given(\"there are Hostess Fruit pies available\")\r\n                .uponReceiving(\"a request for all available snacks mapped by floor\")\r\n                .method(\"GET\")\r\n                .path(\"/donuts/byFloors\")\r\n                .willRespondWith()\r\n                .status(200)\r\n                .matchHeader(\"Content-Type\", APPLICATION_JSON)\r\n                .body(body)\r\n                .toPact();\r\n    }\r\n\r\n    @Test\r\n    @PactVerification(fragment = \"getAllDonutsByFloorFragment\")\r\n    public void canRequestAllDonutsMappedByFloor() throws IOException {\r\n        DonutsClient donutsClient = new DonutsClient(httpClient, moshi, mockProvider.getConfig().getHostname(), mockProvider.getPort());\r\n        Map<String, List<Snack>> snacks = donutsClient.fetchAllSnacksMappedByFloor();\r\n\r\n        assertThat(snacks, Matchers.hasKey(\"6\"));\r\n    }`\r\n\r\nProvider side test:\r\n`\r\n@State(\"there are Hostess Fruit pies available\")\r\n    public void getSnacksMappedByFloor() {\r\n        when(mockSnackDao.loadCurrentSnacks(any(LocalDateTime.class), any(), anyInt(), anyString(), anyString(), anyInt(), anyInt(), anyString()))\r\n                .thenReturn(\r\n                        Collections.singletonList(defaultSnack.setDescription(\"Hostess Fruit Pies\").setLocation(new Location(7, \"north break room\")).build()));\r\n    }`\r\n\r\nRelevant pact file section:\r\n` {\r\n            \"description\": \"a request for all available snacks mapped by floor\",\r\n            \"request\": {\r\n                \"method\": \"GET\",\r\n                \"path\": \"/donuts/byFloors\"\r\n            },\r\n            \"response\": {\r\n                \"status\": 200,\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                \"body\": {\r\n                    \"6\": [\r\n                        {\r\n                            \"creator\": \"Loren\",\r\n                            \"quantity\": 8,\r\n                            \"description\": \"Hostess Fruit Pies\",\r\n                            \"location\": {\r\n                                \"floor\": 6,\r\n                                \"room\": \"south break room\"\r\n                            },\r\n                            \"id\": 14\r\n                        }\r\n                    ]\r\n                },\r\n                \"matchingRules\": {\r\n                    \"header\": {\r\n                        \"Content-Type\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"regex\",\r\n                                    \"regex\": \"application/json\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        }\r\n                    },\r\n                    \"body\": {\r\n                        \"$.*\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"type\",\r\n                                    \"min\": 0\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$.*[*].description\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"type\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$.*[*].id\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"integer\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$.*[*].creator\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"type\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$.*[*].quantity\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"integer\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$.*[*].location.floor\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"integer\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$.*[*].location.room\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"type\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"providerStates\": [\r\n                {\r\n                    \"name\": \"there are Hostess Fruit pies available\"\r\n                }\r\n            ]\r\n        }`\r\n\r\nWith the current version of Pact, the provider side test passes if I make the location floor 6 and fails if I make it floor 7.\r\n\r\nLet me know if you need any more of my code.", "url": "https://github.com/DiUS/pact-jvm/issues/800", "user": "ghost", "labels": ["bug"], "created": "2018-10-25 20:26:57", "closed": "2019-04-14 09:43:31", "commits": {}, "ttf": 170.00027777777777, "commitsDetails": []}, {"title": "Matching Rules ignored on header", "body": "Hey,\r\n\r\nI've received what looks to me like a valid pact.json file.\r\nIt's supposed to be a simple check of a response and a header. The header specifies a matching rule to allow upper and lower case for a part of the response. When I run the test against my provider, however, it always fails because the the header ignores the matching rule and seems to fall back to pure string comparison.\r\n\r\nHere is the relevant part of the pact file:\r\n\r\n```\r\n{\r\n    \"provider\": {\r\n        \"name\": \"ProviderName\"\r\n    },\r\n    \"consumer\": {\r\n        \"name\": \"ConsumerName\"\r\n    },\r\n    \"interactions\": [\r\n        {\r\n            \"description\": \"sending a ping request\",\r\n            \"request\": {\r\n                \"method\": \"GET\",\r\n                \"path\": \"/v1/monitoring/ping\"\r\n            },\r\n            \"response\": {\r\n                \"status\": 200,\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json; charset=UTF-8\"\r\n                },\r\n                \"body\": {\r\n                    \"response\": \"pong\"\r\n                },\r\n                \"matchingRules\": {\r\n                    \"body\": {\r\n                        \r\n                    },\r\n                    \"header\": {\r\n                        \"Content-Type\": {\r\n                            \"match\": [\r\n                                {\r\n                                    \"match\": \"regex\",\r\n                                    \"regex\": \"application/json;\\\\s?charset=(utf|UTF)-8\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    ],\r\n    \"metadata\": {\r\n        \"pactSpecification\": {\r\n            \"version\": \"3.0.0\"\r\n        },\r\n        \"pact-jvm\": {\r\n            \"version\": \"3.5.19\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nI use the grade plugin to run the verification. (Note: Version is 3.5.19 because that is the version of the pact file I have. Upgrading to 3.6 did not fix the issue). Here is the build file:\r\n\r\n```\r\nplugins {\r\n  id \"au.com.dius.pact\" version \"3.5.19\"\r\n}\r\npact {\r\n\tserviceProviders {\r\n\t\tSKPortal {\r\n\t\t\tprotocol = 'https'\r\n\t\t\thost = 'localhost'\r\n\t\t\tport = 6001\r\n\t\t\tpath = '/'\r\n\r\n\t\t\t// Monitoring-Controller Tests\r\n\t\t\thasPactWith('Monitoring-Controller') {\r\n\t\t\t\tpactSource = file(\"$rootDir/Pacts/testMoni.json\")\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n```\r\nThis is the output I get:\r\n\r\n> Gradle Distribution: Gradle wrapper from target build\r\n> Gradle Version: 4.10.2\r\n> Java Home: C:\\Program Files (x86)\\Java\\jre1.8.0_191\r\n> JVM Arguments: None\r\n> Program Arguments: None\r\n> Build Scans Enabled: false\r\n> Offline Mode Enabled: false\r\n> Gradle Tasks: pactVerify\r\n> \r\n> \r\n>  Task :pactVerify_SKPortal FAILED\r\n> \r\n> Verifying a pact between Monitoring-Controller and SKPortal\r\n>   [Using File C:\\DVP\\Java\\Workspace\\SKPortalPactTests\\Pacts\\testMoni.json]\r\n>   sending a ping request\r\n>     returns a response which\r\n>       has status code 200 (OK)\r\n>       includes headers\r\n>         \"Content-Type\" with value \"application/json; charset=UTF-8\" (FAILED)\r\n>       has a matching body (OK)\r\n> Skipping publishing of verification results as it has been disabled (pact.verifier.publishResults is not 'true')\r\n> \r\n> Failures:\r\n> \r\n> 0) Verifying a pact between Monitoring-Controller and SKPortal - sending a ping request  returns a response which includes headers \"Content-Type\" with value \"application/json; charset=UTF-8\"\r\n>       Expected header 'Content-Type' to have value 'application/json; charset=UTF-8' but was 'application/json; charset=utf-8'\r\n> \r\n> \r\n> FAILURE: Build failed with an exception.\r\n> \r\n> * What went wrong:\r\n> There were 1 pact failures for provider SKPortal\r\n> \r\n> * Try:\r\n> Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\r\n> \r\n> \r\n> * Get more help at https://help.gradle.org\r\n> \r\n> BUILD FAILED in 0s\r\n> 1 actionable task: 1 executed\r\n\r\nHonestly I'm not sure if this is a bug or if I'm doing something wrong or if the pact file is invalid.\r\nThis is the first time I'm working with a pact file so I don't have much experience to go on.\r\n\r\nAny help is appreciated!", "url": "https://github.com/DiUS/pact-jvm/issues/798", "user": "Jejuni", "labels": ["bug"], "created": "2018-10-22 11:42:54", "closed": "2018-11-15 22:16:54", "commits": {"8fbb755eb63b0476a5193c745e8196c0ac4115c4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 24.00027777777778, "commitsDetails": [{"commitHash": "8fbb755eb63b0476a5193c745e8196c0ac4115c4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["372a44c1db97f4a71487865f584d571cd170f602"], "nameRev": "8fbb755eb63b0476a5193c745e8196c0ac4115c4 tags/3_5_24~3", "commitMessage": "fix: when determining matching rules, headers should be compared case-insensitive #798\n", "commitDateTime": "2018-11-04 12:51:37", "authoredDateTime": "2018-11-04 12:51:37", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/HeaderMatcher.kt", "insertions": 6, "deletions": 5, "lines": 11}, {"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/Matchers.kt", "insertions": 28, "deletions": 10, "lines": 38}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/HeaderMatcherSpec.groovy", "insertions": 15, "deletions": 9, "lines": 24}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/MatchersSpec.groovy", "insertions": 13, "deletions": 0, "lines": 13}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8fbb755eb63b0476a5193c745e8196c0ac4115c4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 34, "deletions": 15, "lines": 49, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/Matchers.kt", "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/HeaderMatcher.kt"]}, {"title": "bad headers matching rules v2", "body": "I have a problem when matching headers\r\n\r\n```\r\n\"$.headerContent-Type\": {\r\n    \"match\": \"regex\",\r\n    \"regex\": \"application/json;\\\\s?charset=(utf|UTF)-8\"\r\n}\r\n```\r\n\r\nshould be `$.headers.Content-Type`", "url": "https://github.com/DiUS/pact-jvm/issues/786", "user": "vigohe", "labels": ["bug"], "created": "2018-10-06 01:50:11", "closed": "2018-10-21 03:54:20", "commits": {"b7d8332ab217e40f52f3a4d2de20af208372dbb1": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 15.000277777777777, "commitsDetails": [{"commitHash": "b7d8332ab217e40f52f3a4d2de20af208372dbb1", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["165ce6cfe9e4bee78e657d5e3d41981ca7a8b45b"], "nameRev": "b7d8332ab217e40f52f3a4d2de20af208372dbb1 tags/3_6_0-rc_1~7^2", "commitMessage": "fix: header matcher keys were being written incorrectly in V2 format #786\n", "commitDateTime": "2018-10-07 17:23:56", "authoredDateTime": "2018-10-07 17:23:56", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/V2MatchingHeaderTest.groovy", "insertions": 52, "deletions": 0, "lines": 52}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules/Category.kt", "insertions": 6, "deletions": 4, "lines": 10}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/matchingrules/CategorySpec.groovy", "insertions": 14, "deletions": 1, "lines": 15}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b7d8332ab217e40f52f3a4d2de20af208372dbb1"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 4, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules"]}, {"title": "The PactBrokerLoader enforces host/port combination, throws IllegalArgumentException if port not included", "body": "In summary it requires I provide a value for  \"pactbroker.host\" and \"pactbroker.port\", if not it throws an illegalArgumentException if the port is excluded.  \r\n\r\nSo a url like \"https://pact.broker.com\" wont be resolved unless I include 443 in \"pactbroker.port\".", "url": "https://github.com/DiUS/pact-jvm/issues/779", "user": "ekeoch", "labels": ["bug"], "created": "2018-09-25 18:09:10", "closed": "2018-10-21 03:52:53", "commits": {"65cd756497fd3f2161d00830c594fd37520d5ab5": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 25.00027777777778, "commitsDetails": [{"commitHash": "65cd756497fd3f2161d00830c594fd37520d5ab5", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["914c69dd34940d947931e46be43dcf6197644fbd"], "nameRev": "65cd756497fd3f2161d00830c594fd37520d5ab5 tags/3_6_0-rc_1~9^2", "commitMessage": "fix: the port is optional in URLs #779\n", "commitDateTime": "2018-10-07 12:12:00", "authoredDateTime": "2018-10-07 12:12:00", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactSource.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactBroker.java", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactBrokerLoader.java", "insertions": 19, "deletions": 10, "lines": 29}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/sysprops/PactRunnerExpressionParser.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/loader/PactBrokerLoaderSpec.groovy", "insertions": 88, "deletions": 2, "lines": 90}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactBroker.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.scheme()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.loader.protocol()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactBrokerLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader", "TOT": 5, "UPD": 3, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String,au.com.dius.pact.provider.junit.sysprops.ValueResolver)", "TOT": 12, "UPD": 3, "INS": 4, "MOV": 4, "DEL": 1}]}, {"spoonFilePath": "PactRunnerExpressionParser.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.sysprops.PactRunnerExpressionParser.parseExpression(java.lang.String,au.com.dius.pact.provider.junit.sysprops.ValueResolver)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["65cd756497fd3f2161d00830c594fd37520d5ab5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 30, "deletions": 12, "lines": 42, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 20, "UPD": 6, "INS": 8, "MOV": 5, "DEL": 1, "spoonFilesChanged": 3, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactSource.kt"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.loader.scheme()", "au.com.dius.pact.provider.junit.loader.protocol()", "au.com.dius.pact.provider.junit.loader.PactBrokerLoader", "au.com.dius.pact.provider.junit.sysprops.PactRunnerExpressionParser.parseExpression(java.lang.String,au.com.dius.pact.provider.junit.sysprops.ValueResolver)", "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String,au.com.dius.pact.provider.junit.sysprops.ValueResolver)"]}, {"title": "Please upadate examples in Readme for pact-jvm provider", "body": "I am trying to use Pact with Spock on the provider side and I am trying to use pact-jvm-provider for this. The examples included in Readme are out of date. They use an outdated api. There is currently no constructor for ProviderClient which takes Request as second argument. Furthermore there is no request() method in Interaction interface. Could you provide example that will work with version 3.5.22?", "url": "https://github.com/DiUS/pact-jvm/issues/774", "user": "kefasb", "labels": ["bug"], "created": "2018-09-17 07:46:09", "closed": "2018-10-21 03:50:31", "commits": {"12290ae82febb584eccf1b01e77bb89eb6649b3f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "82d54f259abc202cb2e9651d902d7afc637038f0": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 33.000277777777775, "commitsDetails": [{"commitHash": "12290ae82febb584eccf1b01e77bb89eb6649b3f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["6f1cafe7d0d73a4ff5945ab1a974f90a24bf03db"], "nameRev": "12290ae82febb584eccf1b01e77bb89eb6649b3f tags/3_5_23~2", "commitMessage": "fix: correct the example JUnit code in the README #774\n", "commitDateTime": "2018-09-23 15:34:01", "authoredDateTime": "2018-09-23 15:34:01", "commitGitStats": [{"filePath": "pact-jvm-provider/README.md", "insertions": 63, "deletions": 67, "lines": 130}, {"filePath": "pact-jvm-provider/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/readme/ReadmeExamplePactJVMProviderJUnitTest.groovy", "insertions": 96, "deletions": 0, "lines": 96}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/readme/dropwizard/DropwizardConfiguration.groovy", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/readme/dropwizard/TestDropwizardApplication.groovy", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "pact-jvm-provider/src/test/resources/dropwizard/test-config.yaml", "insertions": 5, "deletions": 0, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "82d54f259abc202cb2e9651d902d7afc637038f0", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["12290ae82febb584eccf1b01e77bb89eb6649b3f"], "nameRev": "82d54f259abc202cb2e9651d902d7afc637038f0 tags/3_5_23~1", "commitMessage": "fix: correct the example Spock code in the README #774\n", "commitDateTime": "2018-09-23 16:08:58", "authoredDateTime": "2018-09-23 16:08:58", "commitGitStats": [{"filePath": "pact-jvm-provider/README.md", "insertions": 52, "deletions": 62, "lines": 114}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/readme/ReadmeExamplePactJVMProviderSpockSpec.groovy", "insertions": 78, "deletions": 0, "lines": 78}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["12290ae82febb584eccf1b01e77bb89eb6649b3f", "82d54f259abc202cb2e9651d902d7afc637038f0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 0, "lines": 1, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider"]}, {"title": "Pact provider version 3.5.22 cannot find pacts on the broker", "body": "I bumped my dependency from 3.5.21 to 3.5.22, which was the only change in my code. I went from successfully building 11 tests to not being able to find a single one: \r\n\r\nRunning com.clearwateranalytics.pact.DonutsConsumerPactTest\r\nTests run: 1, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 1.912 s <<< FAILURE! - in com.clearwateranalytics.pact.DonutsConsumerPactTest\r\ninitializationError(com.clearwateranalytics.pact.DonutsConsumerPactTest)  Time elapsed: 0.005 s  <<< ERROR!\r\njava.lang.Exception: Did not find any pact files for provider donuts-ws\r\n\r\n\r\nResults:\r\n\r\nErrors: \r\n  DonutsConsumerPactTest.initializationError \u00bb  Did not find any pact files for ...", "url": "https://github.com/DiUS/pact-jvm/issues/771", "user": "ghost", "labels": ["bug"], "created": "2018-09-13 17:09:12", "closed": "2018-09-23 07:05:04", "commits": {"417731235406c520fcf1e3dfd5fcba734252aa3c": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 9.000277777777777, "commitsDetails": [{"commitHash": "417731235406c520fcf1e3dfd5fcba734252aa3c", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["7b126a29e87074f842b258cb34e71c942739fea5"], "nameRev": "417731235406c520fcf1e3dfd5fcba734252aa3c tags/3_5_23~5", "commitMessage": "fix: correct the regression introduced in #764 (#771)\n", "commitDateTime": "2018-09-23 12:24:04", "authoredDateTime": "2018-09-23 12:24:04", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactBrokerLoader.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/loader/PactBrokerLoaderSpec.groovy", "insertions": 20, "deletions": 0, "lines": 20}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactBrokerLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String,au.com.dius.pact.provider.junit.sysprops.ValueResolver)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Pact Provider Exception when no pacts to verify", "body": "Hello,\r\n\r\nI'm implementing Pact Provider Junit5 and I'm facing this issue whenever there is no pacts available to verify for this provider (when there is, it works like a charm). \r\nI'm using version 3.5.21.\r\n\r\nThis is the implementation :\r\n```\r\n@Provider(\"myprovider\")\r\n@PactBroker(host=\"${pact.broker.host}\", port = \"${pact.broker.port}\",tags = \"${pact.broker.tag}\")\r\n@IgnoreNoPactsToVerify\r\npublic class PactVerifyITTest {\r\n\r\n    @TestTemplate\r\n    @ExtendWith(PactVerificationInvocationContextProvider.class)\r\n    void testTemplate(Pact pact, Interaction interaction, HttpRequest request, PactVerificationContext context) {\r\n        context.verifyInteraction();\r\n }\r\n```\r\n\r\nAnd the exception raised when not pacts are available: \r\n\r\n```\r\n...\r\n16:11:11.110 [main] DEBUG org.apache.http.wire - http-outgoing-1 << \"{\"_links\":{\"self\":{\"href\":\"http://192.168.99.100:30003/pacts/provider/myprovider/latest/dev\",\"title\":\"Latest pact versions for the provider myprovider with consumer version tag 'dev'\"},\"provider\":{\"href\":\"http://192.168.99.100:30003/pacticipants/myprovider\",\"title\":\"myprovider\"},\"pb:pacts\":[],\"pacts\":[]}}\"\r\n16:11:11.110 [main] DEBUG org.apache.http.headers - http-outgoing-1 << HTTP/1.1 200 OK\r\n16:11:11.110 [main] DEBUG org.apache.http.headers - http-outgoing-1 << Content-Type: application/hal+json;charset=utf-8\r\n16:11:11.110 [main] DEBUG org.apache.http.headers - http-outgoing-1 << Content-Length: 322\r\n16:11:11.110 [main] DEBUG org.apache.http.headers - http-outgoing-1 << Connection: keep-alive\r\n16:11:11.110 [main] DEBUG org.apache.http.headers - http-outgoing-1 << Status: 200 OK\r\n16:11:11.110 [main] DEBUG org.apache.http.headers - http-outgoing-1 << Date: Tue, 11 Sep 2018 14:10:53 GMT\r\n16:11:11.110 [main] DEBUG org.apache.http.headers - http-outgoing-1 << X-Content-Type-Options: nosniff\r\n16:11:11.110 [main] DEBUG org.apache.http.headers - http-outgoing-1 << Server: Webmachine-Ruby/1.5.0 Rack/1.3\r\n16:11:11.110 [main] DEBUG org.apache.http.headers - http-outgoing-1 << X-Pact-Broker-Version: 2.23.3\r\n16:11:11.110 [main] DEBUG org.apache.http.headers - http-outgoing-1 << X-Powered-By: Phusion Passenger 5.1.11\r\n16:11:11.110 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Connection can be kept alive indefinitely\r\n16:11:11.111 [main] DEBUG o.a.h.i.c.PoolingHttpClientConnectionManager - Connection [id: 1][route: {}->http://192.168.99.100:30003] can be kept alive indefinitely\r\n16:11:11.111 [main] DEBUG o.a.h.i.c.DefaultManagedHttpClientConnection - http-outgoing-1: set socket timeout to 0\r\n16:11:11.111 [main] DEBUG o.a.h.i.c.PoolingHttpClientConnectionManager - Connection released: [id: 1][route: {}->http://192.168.99.100:30003][total kept alive: 1; route allocated: 1 of 5; total allocated: 1 of 10]\r\n\r\norg.junit.platform.commons.util.PreconditionViolationException: No supporting TestTemplateInvocationContextProvider provided an invocation context\r\n```\r\n\r\nDid I miss something possibly? or is it an issue ? \r\nThanks\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/768", "user": "AlexTess", "labels": ["bug"], "created": "2018-09-11 15:08:53", "closed": "2020-03-08 02:25:26", "commits": {"dfb4e5f11294bae80c4458505eb4acabc533970e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "1095b788aa61cfa822b5f128e922639f9402770f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 543.0002777777778, "commitsDetails": [{"commitHash": "dfb4e5f11294bae80c4458505eb4acabc533970e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d26555da4b6cbae6b16be8fbef26338cfe1f4793"], "nameRev": "dfb4e5f11294bae80c4458505eb4acabc533970e tags/4_0_7~20", "commitMessage": "feat: use a dummy test for JUnit 5 tests with IgnoreNoPactsToVerify annotation #768\n", "commitDateTime": "2020-02-23 09:05:52", "authoredDateTime": "2020-02-23 09:05:52", "commitGitStats": [{"filePath": "provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/DummyTestTemplate.kt", "insertions": 35, "deletions": 0, "lines": 35}, {"filePath": "provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/PactJUnit5VerificationProvider.kt", "insertions": 13, "deletions": 7, "lines": 20}, {"filePath": "provider/pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/PactVerificationInvocationContextProviderSpec.groovy", "insertions": 25, "deletions": 6, "lines": 31}, {"filePath": "provider/{pact-jvm-provider-junit => pact-jvm-provider}/src/main/java/au/com/dius/pact/provider/junit/IgnoreNoPactsToVerify.java", "insertions": 0, "deletions": 0, "lines": 0}], "commitSpoonAstDiffStats": [{"spoonFilePath": "IgnoreNoPactsToVerify.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}, {"commitHash": "1095b788aa61cfa822b5f128e922639f9402770f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["dfb4e5f11294bae80c4458505eb4acabc533970e"], "nameRev": "1095b788aa61cfa822b5f128e922639f9402770f tags/4_0_7~19", "commitMessage": "feat: updated JUnit 5 readmne about IgnoreNoPactsToVerify annotation #768\n", "commitDateTime": "2020-02-23 09:11:15", "authoredDateTime": "2020-02-23 09:11:15", "commitGitStats": [{"filePath": "provider/pact-jvm-provider-junit5/README.md", "insertions": 6, "deletions": 0, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["dfb4e5f11294bae80c4458505eb4acabc533970e", "1095b788aa61cfa822b5f128e922639f9402770f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 7, "lines": 20, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["provider/pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider", "provider/{pact-jvm-provider-junit => pact-jvm-provider}/src/main/java/au/com/dius/pact/provider"]}, {"title": "Provider tests are not failing when consumer changes the response body field names", "body": "Hi,\r\n\r\nI have a consumer written with pact-js and provider with pact-jvm.\r\n\r\nThe contract has following matching rules:\r\n\r\n        \"matchingRules\": {\r\n          \"$.body\": {\r\n            \"min\": 3\r\n          },\r\n          \"$.body[*].*\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body[*].url\": {\r\n            \"match\": \"regex\",\r\n            \"regex\": \"^https?:\\\\/\\\\/.*\"\r\n          },\r\n          \"$.body[*].target.link\": {\r\n            \"match\": \"regex\",\r\n            \"regex\": \"^(TEST1|TEST2|TEST3)$\"\r\n          },\r\n          \"$.body[*].target.ids\": {\r\n            \"min\": 1\r\n          },\r\n          \"$.body[*].target.ids[*].*\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body[*].contentType\": {\r\n            \"match\": \"regex\",\r\n            \"regex\": \"^(image\\\\/jpeg|image\\\\/png)$\"\r\n          },\r\n          \"$.body[*].width\": {\r\n            \"match\": \"type\"\r\n          }\r\n        }\r\n\r\nWhen I changed the field name in the contract ie. width->height, provider tests are still passed.", "url": "https://github.com/DiUS/pact-jvm/issues/759", "user": "basiaBB", "labels": ["bug"], "created": "2018-08-20 11:18:04", "closed": "2018-09-09 05:09:50", "commits": {"aaaa0719a06bbb8d9644c5532d14b17f25cae695": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 19.00027777777778, "commitsDetails": [{"commitHash": "aaaa0719a06bbb8d9644c5532d14b17f25cae695", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["22efe9c448cae3c32c1adfd058a2c38042d42e58"], "nameRev": "aaaa0719a06bbb8d9644c5532d14b17f25cae695 tags/3_5_22~1", "commitMessage": "fix: only enable wildcard matching logic with an explicit system property #759\n", "commitDateTime": "2018-09-09 12:55:55", "authoredDateTime": "2018-09-09 12:36:55", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/README.md", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilder.groovy", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-jvm-consumer-java8/src/main/java/io/pactfoundation/consumer/dsl/LambdaDslObject.java", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "pact-jvm-consumer-junit/README.md", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-consumer/README.md", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonBody.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/Matchers.kt", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/JsonBodyMatcher.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/JsonBodyMatcherSpec.groovy", "insertions": 37, "deletions": 0, "lines": 37}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/MatchersSpec.groovy", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "pact-jvm-provider-gradle/README.md", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-provider-junit/src/test/java/au/com/dius/pact/provider/junit/ArticlesContractTest.java", "insertions": 8, "deletions": 1, "lines": 9}, {"filePath": "pact-jvm-provider-lein/README.md", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-provider-maven/README.md", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "LambdaDslObject.java", "spoonMethods": []}, {"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": []}, {"spoonFilePath": "ArticlesContractTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.ArticlesContractTest.after()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.ArticlesContractTest.before()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["aaaa0719a06bbb8d9644c5532d14b17f25cae695"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 23, "deletions": 3, "lines": 26, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-java8/src/main/java/io/pactfoundation/consumer/dsl", "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/JsonBodyMatcher.scala", "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/Matchers.kt", "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": []}, {"title": "Spring boot and @PactBroker is not working as expected with \"tags\" system property", "body": "Spring boot and @PactBroker is not working as expected with tag system property although it works for other properties\r\n\r\nPlugin: id \"au.com.dius.pact\" version \"3.5.21\"\r\nBelow is a snippet from application.yml\r\n\r\npactbroker:\r\n  host: cloud-admin-dev.anaplan.com\r\n  port: 8031\r\n  protocol: http\r\n  tag: dev,prod\r\n\r\nCaused by: java.lang.RuntimeException: Could not resolve property \"pactbroker.tag\" in the system properties or environment variables and no default value is supplied\r\n\tat au.com.dius.pact.provider.junit.sysprops.SystemPropertyResolver.resolveValue(SystemPropertyResolver.java:18)\r\n\tat au.com.dius.pact.provider.junit.sysprops.PactRunnerExpressionParser.replaceExpressions(PactRunnerExpressionParser.java:54)", "url": "https://github.com/DiUS/pact-jvm/issues/757", "user": "gdganesh", "labels": ["bug"], "created": "2018-08-13 21:31:57", "closed": "2018-09-09 05:08:54", "commits": {"af69fd1fb90b4a947d9fb0ab2f107eed356a6ace": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 26.00027777777778, "commitsDetails": [{"commitHash": "af69fd1fb90b4a947d9fb0ab2f107eed356a6ace", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["6b9fe1c70304ca7a74d180cfac86f09c5b6b1775"], "nameRev": "af69fd1fb90b4a947d9fb0ab2f107eed356a6ace tags/3_5_22~14", "commitMessage": "fix: only process the tags after the value resolver has been set #757\n", "commitDateTime": "2018-08-26 12:28:29", "authoredDateTime": "2018-08-26 12:28:29", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactBrokerLoader.java", "insertions": 20, "deletions": 15, "lines": 35}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/loader/PactBrokerLoaderSpec.groovy", "insertions": 18, "deletions": 0, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactBrokerLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.setupValueResolver()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.load(java.lang.String)", "TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String,au.com.dius.pact.provider.junit.sysprops.ValueResolver)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["af69fd1fb90b4a947d9fb0ab2f107eed356a6ace"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 20, "deletions": 15, "lines": 35, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 12, "UPD": 0, "INS": 7, "MOV": 4, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.loader.PactBrokerLoader.setupValueResolver()", "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String)", "au.com.dius.pact.provider.junit.loader.PactBrokerLoader", "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String,au.com.dius.pact.provider.junit.sysprops.ValueResolver)", "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.load(java.lang.String)"]}, {"title": "Pact:verify doesnt print out the tag name in the verification results", "body": "Description: \r\nI am running the pact verifications against a pact broker for 2 tags, master and develop.\r\n\r\nwhen i see the results after the execution ,the log says\r\n\r\nVerifying a pact between A and B\r\n[from Pact Broker https://xyz.com.au/pacts/provider/A/consumer/B/version/0.0.33]\r\nOK\r\n\r\nVerifying a pact between A and B\r\n[from Pact Broker **https://xyz.com.au/pacts/provider/A/consumer/B/version/0.0.33**]\r\nFAILED\r\n\r\nit doesnt give us the tag url and just gives out the version, i dont come to know which of the tagged branch is having the failure. cause both look the same , the pact broker url should have /tag/version in it as well.", "url": "https://github.com/DiUS/pact-jvm/issues/754", "user": "amitojduggal", "labels": ["bug"], "created": "2018-08-09 09:22:29", "closed": "2018-08-12 05:37:01", "commits": {"8d16a9c3470757652bbdbaf97e72246b5d2d386f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "8d16a9c3470757652bbdbaf97e72246b5d2d386f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["0b7168b542d841596deb8c4a54b46834173ce8d4"], "nameRev": "8d16a9c3470757652bbdbaf97e72246b5d2d386f tags/3_5_21~2", "commitMessage": "fix: display the tag when verifying a pact fetched with a tag #754\n", "commitDateTime": "2018-08-12 14:34:10", "authoredDateTime": "2018-08-12 14:34:10", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/model/BrokerUrlSourceSpec.groovy", "insertions": 18, "deletions": 0, "lines": 18}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactSource.kt", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker/PactBrokerClient.groovy", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-pact-broker/src/main/kotlin/au/com/dius/pact/pactbroker/PactBrokerConsumer.kt", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-pact-broker/src/test/groovy/au/com/dius/pact/provider/broker/PactBrokerClientSpec.groovy", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ConsumerInfo.groovy", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ConsumerInfoSpec.groovy", "insertions": 10, "deletions": 0, "lines": 10}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8d16a9c3470757652bbdbaf97e72246b5d2d386f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 8, "lines": 19, "gitFilesChange": 4}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactSource.kt", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ConsumerInfo.groovy", "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker", "pact-jvm-pact-broker/src/main/kotlin/au/com/dius/pact/pactbroker/PactBrokerConsumer.kt"]}, {"title": "newJsonArrayMinMaxLike does not respect type matchers, forcing stricter match", "body": "I want to test that my producer returns a certain number of an object in a given scenario, but I don't want to have to specify every single aspect of the objects since a) that's a lot of code, b) it's potentially fragile due to ordering issues, and c) I'd like to leave some flexibility for the producer. Seems like a perfect place to use newJsonArrayMinMaxLike and some type matchers. But when I use this and implement a test on the producer side that doesn't match the examples, but does match the matchers, it fails.\r\n\r\nHere's an example:\r\n\r\n`@Pact(provider = \"donuts-ws\", consumer = \"donuts-consumer\")\r\n    public RequestResponsePact getAllDonutsFragment(PactDslWithProvider builder) {\r\n        return builder.given(\"there are two snack entries\")\r\n                .uponReceiving(\"a request for all available donuts\")\r\n                .method(\"GET\")\r\n                .path(\"/donuts\")\r\n                .willRespondWith()\r\n                .status(200)\r\n                .matchHeader(\"Content-Type\", APPLICATION_JSON)\r\n                .body(\r\n                        LambdaDsl.newJsonArrayMinMaxLike(2, 2, rootArray -> rootArray.object(getSnackJsonResponseFragment(defaultSnack.but().setId(1).build())))\r\n                                .build())\r\n                .toPact();\r\n    }`\r\n\r\nThe getSnackJsonResponseFragment uses type matchers, not value matchers:\r\n\r\n`<T extends LambdaDslObject> Consumer<T> getSnackJsonResponseFragment(Snack snack) {\r\n        return snackObject -> {\r\n            snackObject.numberType(\"id\", snack.getId());\r\n            snackObject.timestamp(\"created\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", Date.from(snack.getCreated().atZone(ZoneId.systemDefault()).toInstant()));\r\n            snackObject.timestamp(\"lastModified\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", Date.from(snack.getLastModified().atZone(ZoneId.systemDefault()).toInstant()));\r\n            snackObject.stringType(\"creator\", snack.getCreator());\r\n            snackObject.numberType(\"quantity\", snack.getQuantity());\r\n            snackObject.stringType(\"description\", snack.getDescription());\r\n            snackObject.object(\r\n                    \"location\",\r\n                    locationObject -> {\r\n                        locationObject.numberType(\"floor\", snack.getFloor());\r\n                        locationObject.stringType(\"room\", snack.getRoom());\r\n                    });\r\n        };\r\n    }`\r\n\r\nThis results in the following in the pact file:\r\n`{\r\n            \"description\": \"a request for all available donuts\",\r\n            \"request\": {\r\n                \"method\": \"GET\",\r\n                \"path\": \"/donuts\"\r\n            },\r\n            \"response\": {\r\n                \"status\": 200,\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                \"body\": [\r\n                    {\r\n                        \"creator\": \"loren\",\r\n                        \"quantity\": 5,\r\n                        \"created\": \"2018-08-03T14:51:49.796\",\r\n                        \"description\": \"donuts\",\r\n                        \"location\": {\r\n                            \"floor\": 6,\r\n                            \"room\": \"south kitchen\"\r\n                        },\r\n                        \"id\": 1,\r\n                        \"lastModified\": \"2018-08-03T14:51:54.796\"\r\n                    },\r\n                    {\r\n                        \"creator\": \"loren\",\r\n                        \"quantity\": 5,\r\n                        \"created\": \"2018-08-03T14:51:49.796\",\r\n                        \"description\": \"donuts\",\r\n                        \"location\": {\r\n                            \"floor\": 6,\r\n                            \"room\": \"south kitchen\"\r\n                        },\r\n                        \"id\": 1,\r\n                        \"lastModified\": \"2018-08-03T14:51:54.796\"\r\n                    }\r\n                ],\r\n                \"matchingRules\": {\r\n                    \"header\": {\r\n                        \"Content-Type\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"regex\",\r\n                                    \"regex\": \"application/json\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        }\r\n                    },\r\n                    \"body\": {\r\n                        \"$\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"type\",\r\n                                    \"min\": 2,\r\n                                    \"max\": 2\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$[0].id\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"number\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$[0].created\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"timestamp\",\r\n                                    \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$[0].lastModified\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"timestamp\",\r\n                                    \"timestamp\": \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$[0].creator\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"type\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$[0].quantity\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"number\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$[0].description\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"type\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$[0].location.floor\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"number\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        },\r\n                        \"$[0].location.room\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"type\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"providerStates\": [\r\n                {\r\n                    \"name\": \"there are two snack entries\"\r\n                }\r\n            ]\r\n        }`\r\n\r\nBut when I implement my producer state like this, I get failures:\r\n`@State(\"there are two snack entries\")\r\n    public void getAllSnacksTest() {\r\n        when(mockSnackDao.loadCurrentSnacks(any(LocalDateTime.class), any(), anyInt(), anyString(), anyString(), anyInt(), anyInt(), anyString()))\r\n                .thenReturn(\r\n                        Lists.newArrayList(\r\n                                defaultSnack.but().setQuantity(5).setDescription(\"donuts\").setCreator(\"Nikki\").setLocation(new Location(6, \"south kitchen\")).build(),\r\n\t\t\t\t\t\t\t\tdefaultSnack.but().setDescription(\"Hostess Fruit Pies\").build()));\r\n    }`\r\n\r\nIt's angry because the second entry's quantity is 1, not 5; its description is Hostess Fruit Pies, not donuts; and the timestamps are different by a matter of seconds. These are all things that should match the type matchers.", "url": "https://github.com/DiUS/pact-jvm/issues/749", "user": "ghost", "labels": ["bug"], "created": "2018-08-03 21:05:35", "closed": "2018-08-12 05:36:51", "commits": {"dd2b75e42f7fc4efdb62655ab1c206782a5bade8": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "0b7168b542d841596deb8c4a54b46834173ce8d4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 8.000277777777777, "commitsDetails": [{"commitHash": "dd2b75e42f7fc4efdb62655ab1c206782a5bade8", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d8121728b806e013b8b160e54ba07e5d2e5973cd"], "nameRev": "dd2b75e42f7fc4efdb62655ab1c206782a5bade8 tags/3_5_21~4", "commitMessage": "fix: min-max type matcher was not being called by the verifier #749\n", "commitDateTime": "2018-08-12 11:33:28", "authoredDateTime": "2018-08-12 11:33:28", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/MatcherExecutor.kt", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/MatcherExecutorSpec.groovy", "insertions": 23, "deletions": 2, "lines": 25}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "0b7168b542d841596deb8c4a54b46834173ce8d4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["dd2b75e42f7fc4efdb62655ab1c206782a5bade8"], "nameRev": "0b7168b542d841596deb8c4a54b46834173ce8d4 tags/3_5_21~3", "commitMessage": "fix: Java 8 DSL was not setting wildcard matchers with min/max arrays #749\n", "commitDateTime": "2018-08-12 12:09:12", "authoredDateTime": "2018-08-12 12:09:12", "commitGitStats": [{"filePath": "pact-jvm-consumer-java8/src/main/java/io/pactfoundation/consumer/dsl/LambdaDsl.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-java8/src/test/groovy/io/pactfoundation/consumer/dsl/LambdaDslSpec.groovy", "insertions": 65, "deletions": 0, "lines": 65}, {"filePath": "pact-jvm-consumer-java8/src/test/java/io/pactfoundation/consumer/dsl/LambdaDslTest.java", "insertions": 0, "deletions": 16, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "LambdaDsl.java", "spoonMethods": [{"spoonMethodName": "io.pactfoundation.consumer.dsl.LambdaDsl.newJsonArrayMinLike(java.lang.Integer,java.util.function.Consumer)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.pactfoundation.consumer.dsl.LambdaDsl.newJsonArrayMaxLike(java.lang.Integer,java.util.function.Consumer)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.pactfoundation.consumer.dsl.LambdaDsl.newJsonArrayMinMaxLike(java.lang.Integer,java.lang.Integer,java.util.function.Consumer)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "LambdaDslTest.java", "spoonMethods": [{"spoonMethodName": "io.pactfoundation.consumer.dsl.LambdaDslTest.testArrayMinMaxLike()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["dd2b75e42f7fc4efdb62655ab1c206782a5bade8", "0b7168b542d841596deb8c4a54b46834173ce8d4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 6, "deletions": 3, "lines": 9, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 3.0, "UPD": 3.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/MatcherExecutor.kt", "pact-jvm-consumer-java8/src/main/java/io/pactfoundation/consumer/dsl"], "changesInPackagesSPOON": ["io.pactfoundation.consumer.dsl.LambdaDsl.newJsonArrayMinLike(java.lang.Integer,java.util.function.Consumer)", "io.pactfoundation.consumer.dsl.LambdaDsl.newJsonArrayMinMaxLike(java.lang.Integer,java.lang.Integer,java.util.function.Consumer)", "io.pactfoundation.consumer.dsl.LambdaDsl.newJsonArrayMaxLike(java.lang.Integer,java.util.function.Consumer)"]}, {"title": "Path regex matchers are creating an empty entry in the pact file", "body": "We're trying to use the generated pacts from `pact-jvm-consumer-groovy` using [pact-foundation/pact-stub-server](https://github.com/pact-foundation/pact-stub-server).\r\n\r\nThe problem is that the generated pact will add and empty string `\"\"` in the matching rules for path, which seems incorrect per V3 specification. In the pact-stub-server, the request won't match \r\n\r\n```\r\n \"matchingRules\": {\r\n    \"body\": {\r\n    },\r\n    \"header\": {\r\n      \"Authorization\": {\r\n        \"matchers\": [\r\n          {\r\n            \"match\": \"regex\",\r\n            \"regex\": \"Bearer .*\"\r\n          }\r\n        ],\r\n        \"combine\": \"AND\"\r\n      },\r\n      \"X-Correlation-id\": {\r\n        \"matchers\": [\r\n          {\r\n            \"match\": \"regex\",\r\n            \"regex\": \"[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}\"\r\n          }\r\n        ],\r\n        \"combine\": \"AND\"\r\n      }\r\n    },\r\n    \"path\": {\r\n      \"\": {\r\n        \"matchers\": [\r\n          {\r\n            \"match\": \"regex\",\r\n            \"regex\": \"/order/[^/.]+/shipping\"\r\n          }\r\n        ],\r\n        \"combine\": \"AND\"\r\n      }\r\n    }\r\n  }\r\n```\r\n\r\nIf we change `path` to:\r\n\r\n```\r\n    \"path\": {\r\n        \"matchers\": [\r\n          {\r\n            \"match\": \"regex\",\r\n            \"regex\": \"/order/[^/.]+/shipping\"\r\n          }\r\n        ],\r\n        \"combine\": \"AND\"\r\n      }\r\n  }\r\n```\r\n\r\nIt will work. We checked the code and it looks like it will be always adding an empty entry when recording the expectation, independently of the jvm-consumer\r\n\r\nCreated the issue here as it seems more relevant to how all jvm-consumers are writing the pact file.", "url": "https://github.com/DiUS/pact-jvm/issues/743", "user": "jordi9", "labels": ["bug"], "created": "2018-07-30 13:38:26", "closed": "2018-08-12 05:35:42", "commits": {"3372839de0ea30ee1da8ebdf9a76c2be742e1429": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 12.000277777777777, "commitsDetails": [{"commitHash": "3372839de0ea30ee1da8ebdf9a76c2be742e1429", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["340bf4c6ac8a0dc0220989404a72fb9463ce46b6"], "nameRev": "3372839de0ea30ee1da8ebdf9a76c2be742e1429 tags/3_5_21~12", "commitMessage": "fix: path matchers were not being written out in the correct format - #743\n", "commitDateTime": "2018-08-11 14:42:04", "authoredDateTime": "2018-08-11 14:42:04", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules/Category.kt", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/matchingrules/CategorySpec.groovy", "insertions": 12, "deletions": 0, "lines": 12}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/matchingrules/MatchingRulesSpec.groovy", "insertions": 34, "deletions": 0, "lines": 34}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3372839de0ea30ee1da8ebdf9a76c2be742e1429"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 1, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules"]}, {"title": "pact-file URL with file: scheme is unable to be loaded due to cast exception (3.5.2 onwards)", "body": "Something happened in 3.5.2 where specifying a pact-file with a `file:` schema fails.\r\n\r\nIn my lein project I specify a consumer with `:pact-file \"file:test/pact/default-consumer.json\"`\r\n\r\nUp to version 3.5.1 this works fine. Any version above that fails with:\r\n\r\n```sh\r\norg.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object 'file:test/pact/default-consumer.json' with class 'java.net.URL' to class 'java.io.File'\r\n at org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.continueCastOnSAM (DefaultTypeTransformation.java:405)\r\n    org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.continueCastOnNumber (DefaultTypeTransformation.java:319)\r\n    org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.castToType (DefaultTypeTransformation.java:232)\r\n    org.codehaus.groovy.runtime.DefaultGroovyMethods.asType (DefaultGroovyMethods.java:15537)\r\n    org.codehaus.groovy.runtime.dgm$51.doMethodInvoke (:-1)\r\n    org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod (IndyInterface.java:232)\r\n    au.com.dius.pact.provider.ConsumerInfo.setPactFile (ConsumerInfo.groovy:40)\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/733", "user": "delitescere", "labels": ["bug"], "created": "2018-07-16 13:43:28", "closed": "2018-07-28 08:20:46", "commits": {"560afad77b6e9d7d98888049f592828ad4c48e29": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "b58bcbf2460e746a9dd55dd0c3f0b2eb6e70a2dc": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 11.000277777777777, "commitsDetails": [{"commitHash": "560afad77b6e9d7d98888049f592828ad4c48e29", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["25cc63ed85106ea8dae62a5f8c312f12eef61a17"], "nameRev": "560afad77b6e9d7d98888049f592828ad4c48e29 tags/3_5_20~5", "commitMessage": "fix: ConsumerInfo setPactFile method needs to take a URL class #733\n", "commitDateTime": "2018-07-28 12:06:28", "authoredDateTime": "2018-07-28 12:06:28", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ConsumerInfo.groovy", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ConsumerInfoSpec.groovy", "insertions": 35, "deletions": 0, "lines": 35}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "b58bcbf2460e746a9dd55dd0c3f0b2eb6e70a2dc", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["560afad77b6e9d7d98888049f592828ad4c48e29"], "nameRev": "b58bcbf2460e746a9dd55dd0c3f0b2eb6e70a2dc tags/3_5_20~4", "commitMessage": "fix: Got codenarc'd #733\n", "commitDateTime": "2018-07-28 12:36:52", "authoredDateTime": "2018-07-28 12:36:52", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ConsumerInfo.groovy", "insertions": 0, "deletions": 1, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["560afad77b6e9d7d98888049f592828ad4c48e29", "b58bcbf2460e746a9dd55dd0c3f0b2eb6e70a2dc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 3, "deletions": 1, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ConsumerInfo.groovy"]}, {"title": "Content-Type header is incorrect when PactDslWithProvider.body method is called before the header method", "body": "Here is a simple test with two interactions specified.  The first interaction calls the .body method before the .header method.  The second interaction swaps the order.\r\n\r\n```\r\npublic class AppTest {\r\n    @Rule\r\n    public PactProviderRuleMk2 mockProvider = new PactProviderRuleMk2(\"my-provider\", PactSpecVersion.V3, this);\r\n\r\n    @Pact(consumer = \"my-consumer\", provider = \"my-provider\")\r\n    public RequestResponsePact createPact(PactDslWithProvider builder) {\r\n        return builder\r\n                .given(\"Given the body method is invoked before the header method\")\r\n                .uponReceiving(\"a request for some response\")\r\n                .path(\"/bad/content-type/matcher\")\r\n                .method(\"GET\")\r\n                .willRespondWith()\r\n                .status(200)\r\n                .body(newJsonBody(o -> o.numberValue(\"key\", 1)).build())\r\n                .matchHeader(\"Content-Type\", \"application/json\")\r\n\r\n                .given(\"Given the body method is invoked after the header method\")\r\n                .uponReceiving(\"a request for some response\")\r\n                .path(\"/no/content-type/matcher\")\r\n                .method(\"GET\")\r\n                .willRespondWith()\r\n                .status(200)\r\n                .matchHeader(\"Content-Type\", \"application/json\")\r\n                .body(newJsonBody(o -> o.numberValue(\"key\", 1)).build())\r\n                .toPact();\r\n    }\r\n\r\n    @Test\r\n    @PactVerification\r\n    public void runTests() throws IOException {\r\n        testBodyBeforeHeader();\r\n        testHeaderBeforeBody();\r\n    }\r\n    \r\n    private void testBodyBeforeHeader() throws IOException {\r\n        OkHttpClient httpClient = new OkHttpClient.Builder().build();\r\n        Request request = new Request.Builder()\r\n                .get()\r\n                .url(String.format(\"http://%s:%d/bad/content-type/matcher\", mockProvider.getConfig().getHostname(), mockProvider.getPort()))\r\n                .build();\r\n        httpClient.newCall(request).execute();\r\n    }\r\n\r\n    private void testHeaderBeforeBody() throws IOException {\r\n        OkHttpClient httpClient = new OkHttpClient.Builder().build();\r\n        Request request = new Request.Builder()\r\n                .get()\r\n                .url(String.format(\"http://%s:%d/no/content-type/matcher\", mockProvider.getConfig().getHostname(), mockProvider.getPort()))\r\n                .build();\r\n        httpClient.newCall(request).execute();\r\n    }\r\n}\r\n```\r\n\r\nThe pact file produced from this test looks like the following.\r\n```\r\n{\r\n    \"provider\": {\r\n        \"name\": \"my-provider\"\r\n    },\r\n    \"consumer\": {\r\n        \"name\": \"my-consumer\"\r\n    },\r\n    \"interactions\": [\r\n        {\r\n            \"description\": \"a request for some response\",\r\n            \"request\": {\r\n                \"method\": \"GET\",\r\n                \"path\": \"/bad/content-type/matcher\"\r\n            },\r\n            \"response\": {\r\n                \"status\": 200,\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                \"body\": {\r\n                    \"key\": 1\r\n                },\r\n                \"matchingRules\": {\r\n                    \"body\": {\r\n                        \r\n                    },\r\n                    \"header\": {\r\n                        \"Content-Type\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"regex\",\r\n                                    \"regex\": \"application/json;\\\\s?charset=(utf|UTF)-8\"\r\n                                },\r\n                                {\r\n                                    \"match\": \"regex\",\r\n                                    \"regex\": \"application/json\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"providerStates\": [\r\n                {\r\n                    \"name\": \"Given the body method is invoked before the header method\"\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            \"description\": \"a request for some response\",\r\n            \"request\": {\r\n                \"method\": \"GET\",\r\n                \"path\": \"/no/content-type/matcher\"\r\n            },\r\n            \"response\": {\r\n                \"status\": 200,\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                \"body\": {\r\n                    \"key\": 1\r\n                },\r\n                \"matchingRules\": {\r\n                    \"header\": {\r\n                        \"Content-Type\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"regex\",\r\n                                    \"regex\": \"application/json\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        }\r\n                    },\r\n                    \"body\": {\r\n                        \r\n                    }\r\n                }\r\n            },\r\n            \"providerStates\": [\r\n                {\r\n                    \"name\": \"Given the body method is invoked after the header method\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"metadata\": {\r\n        \"pact-specification\": {\r\n            \"version\": \"3.0.0\"\r\n        },\r\n        \"pact-jvm\": {\r\n            \"version\": \"3.5.17\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nNotice how, when the body method is called before the header method, the matchingRules section of the pact contains the following:\r\n```\r\n                    \"header\": {\r\n                        \"Content-Type\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"regex\",\r\n                                    \"regex\": \"application/json;\\\\s?charset=(utf|UTF)-8\"\r\n                                },\r\n                                {\r\n                                    \"match\": \"regex\",\r\n                                    \"regex\": \"application/json\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        }\r\n                    }\r\n```\r\nThis causes the provider test to fail because the provider is not producing a header that matches the regular expression.", "url": "https://github.com/DiUS/pact-jvm/issues/716", "user": "quincy", "labels": ["bug"], "created": "2018-06-21 15:57:34", "closed": "2018-07-01 09:42:12", "commits": {"481c4b1c78bf00878e2217b36eaa6d67a8b991a5": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 9.000277777777777, "commitsDetails": [{"commitHash": "481c4b1c78bf00878e2217b36eaa6d67a8b991a5", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["fccb2236ea03296baf3b06ae6ab6df81e7dbbb8f"], "nameRev": "481c4b1c78bf00878e2217b36eaa6d67a8b991a5 tags/3_5_19~2", "commitMessage": "fix(Java DSL): matchHeader should override the matcher in case it is called after the body is set #716\n", "commitDateTime": "2018-07-01 16:31:38", "authoredDateTime": "2018-07-01 16:31:38", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslResponse.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslRequestWithPathSpec.groovy", "insertions": 38, "deletions": 0, "lines": 38}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslResponseSpec.groovy", "insertions": 38, "deletions": 0, "lines": 38}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchHeader(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslResponse.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.matchHeader(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["481c4b1c78bf00878e2217b36eaa6d67a8b991a5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslResponse.matchHeader(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchHeader(java.lang.String,java.lang.String,java.lang.String)"]}, {"title": "PACT does not work with java modules", "body": "Trying to make PACT-JVM working under Java 9 / 10 with modules does not work because there are the same packages / classes in different JARs. Could you please fix your JARs and dependencies to make PACT work with the new Java module system?", "url": "https://github.com/DiUS/pact-jvm/issues/714", "user": "tgdchmi2", "labels": ["bug"], "created": "2018-06-21 09:07:48", "closed": "2020-02-22 22:51:22", "commits": {}, "ttf": 611.0002777777778, "commitsDetails": []}, {"title": "[Provider-Maven] Build now fails if there is no pact to verify", "body": "I've recently upgraded pact to 3.5.18 (for features I needed) and noticed that now the build fails if there is no pact to verify. \r\n\"No pact files were found for provider XXXX\"\r\n\r\nI find this problematic as provider may not know when new contracts will be published by consumer to be verified, so having the provider pact-verify always active, regardless if there is contract to verify at this stage, is preferable (than commenting the verify until contracts are published). I don't really believe it should be a build failure condition. \r\n\r\nWhat is the reasoning behind this? is it possible to change this back to previous behavior ?\r\n\r\nThanks ! :)\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/713", "user": "AlexTess", "labels": ["bug"], "created": "2018-06-21 07:23:41", "closed": "2018-07-01 09:40:59", "commits": {"34d328ddaf5f88416f178588725fe7a0624c2ee3": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "34d328ddaf5f88416f178588725fe7a0624c2ee3", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["c6efe79ad71b084c6812bf0bfe8d3680f326f436"], "nameRev": "34d328ddaf5f88416f178588725fe7a0624c2ee3 tags/3_5_19~6", "commitMessage": "fix: allow the default behaviour of failing the build when no pacts are found in the Maven plugin to be disabled #713\n", "commitDateTime": "2018-07-01 13:27:17", "authoredDateTime": "2018-07-01 13:27:17", "commitGitStats": [{"filePath": "pact-jvm-provider-maven/README.md", "insertions": 8, "deletions": 1, "lines": 9}, {"filePath": "pact-jvm-provider-maven/src/main/kotlin/au/com/dius/pact/provider/maven/PactProviderMojo.kt", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "pact-jvm-provider-maven/src/test/groovy/au/com/dius/pact/provider/maven/PactProviderMojoSpec.groovy", "insertions": 41, "deletions": 0, "lines": 41}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["34d328ddaf5f88416f178588725fe7a0624c2ee3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 1, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-maven/src/main/kotlin/au/com/dius/pact/provider/maven"]}, {"title": "Data Generator fails when inside an object", "body": "After upgrading from 3.5.10 to 3.5.18, pact generation and verification failed due to:\r\n1. Pact generation: Tests where the value is generated by pact started failing.\r\n2. Pact verification: Applied the work-around for Issue 1 to generate pact. But pact verification failed because the matchers were not prefixed with \"$\".\r\n\r\n**Issue 1:**\r\nThis is how the pact looks like:\r\n```\r\nPactDslJsonBody responseBody = new PactDslJsonBody();\r\n    responseBody.object(\"_warnings\");\r\n    responseBody.integerType(\"code\", 404);\r\n    responseBody.stringType(\"message\");\r\n    responseBody.closeObject();\r\n\r\nRequestResponsePact pact = ConsumerPactBuilder\r\n        .consumer(\"self\")\r\n        .hasPactWith(\"api\")\r\n        .uponReceiving(\"Not found - Return 404\")\r\n        .path(\"/v1/my/api/get\")\r\n        .method(\"GET\")\r\n        .willRespondWith()\r\n        .status(404)\r\n        .body(responseBody)\r\n        .toPact();\r\n```\r\nWhen running this against 3.5.10, the test passed.\r\n![image](https://user-images.githubusercontent.com/28387803/41570216-f027864c-73c1-11e8-9fd8-ec06aa095ab3.png)\r\n\r\nAfter upgrading to 3.5.18, the test failed.\r\n![image](https://user-images.githubusercontent.com/28387803/41570289-40a16930-73c2-11e8-89fd-8b2f4644440f.png)\r\n\r\nThe work-around is to provide an example value instead of letting pact generate the data.\r\n```\r\n    PactDslJsonBody responseBody = new PactDslJsonBody();\r\n    responseBody.object(\"_warnings\");\r\n    responseBody.integerType(\"code\", 404);\r\n    responseBody.stringType(\"message\", \"test message\");\r\n    responseBody.closeObject();\r\n```\r\n**Issue 2:**\r\nThough the work-around allows the pact to be generated, the verification failed because the matching rules do not have \"$\" prefixed to the attribute.\r\n\r\nConsole log\r\n![image](https://user-images.githubusercontent.com/28387803/41629957-8701d8d8-7480-11e8-9dda-53e591199448.png)\r\n\r\nGenerated Pact\r\n![image](https://user-images.githubusercontent.com/28387803/41629979-9b5646f2-7480-11e8-9a88-b5d193ab0bb7.png)\r\n\r\nI have to use .close() instead of .closeObject() for the pact to be generated properly.", "url": "https://github.com/DiUS/pact-jvm/issues/708", "user": "m-aster22", "labels": ["bug"], "created": "2018-06-19 01:13:08", "closed": "2018-07-01 09:41:57", "commits": {"fccb2236ea03296baf3b06ae6ab6df81e7dbbb8f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 12.000277777777777, "commitsDetails": [{"commitHash": "fccb2236ea03296baf3b06ae6ab6df81e7dbbb8f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["048926a7e0569f0ea480bb507f310b88d775f592"], "nameRev": "fccb2236ea03296baf3b06ae6ab6df81e7dbbb8f tags/3_5_19~3", "commitMessage": "fix: make sure the Java body DSL objects are allways closed correctly #628 #708\n", "commitDateTime": "2018-07-01 15:59:41", "authoredDateTime": "2018-07-01 15:59:41", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/MessagePactBuilder.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/MessagePactBuilderSpec.groovy", "insertions": 39, "deletions": 0, "lines": 39}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonArray.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonBody.java", "insertions": 12, "deletions": 12, "lines": 24}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonArraySpec.groovy", "insertions": 26, "deletions": 0, "lines": 26}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonBodySpec.groovy", "insertions": 26, "deletions": 1, "lines": 27}, {"filePath": "pact-jvm-consumer/src/test/java/au/com/dius/pact/consumer/PactTest.java", "insertions": 0, "deletions": 2, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessagePactBuilder.java", "spoonMethods": []}, {"spoonFilePath": "PactDslJsonArray.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.close()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.closeArray()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.close()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.closeObject()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactTest.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "MockMvcTarget executes controller under test 2 times.", "body": "At line 68 in MockMvcTarget.kt, the code 0.rangeTo(runTimes) executes the controller under test 2 times since runTimes defaults to 1, and the execution goes from 0 to 1.\r\n\r\nIs this the intended behavior?\r\n\r\nA consequence is that we cannot verify number of executions of a mocked business service without creating a +1 fudge number in the verify() assertion.\r\n\r\nThe alternative is to call setRunTimes(0) when the MockMvcTarget is initialized, but this could be a point of confusion in the test code.", "url": "https://github.com/DiUS/pact-jvm/issues/706", "user": "CraigAtWork", "labels": ["bug"], "created": "2018-06-18 18:13:51", "closed": "2018-07-01 09:39:25", "commits": {"866209a67710822f8533435853f18c1324076327": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 12.000277777777777, "commitsDetails": [{"commitHash": "866209a67710822f8533435853f18c1324076327", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["f71deb21be2b9740b972562f79849b235c07c5a5"], "nameRev": "866209a67710822f8533435853f18c1324076327 tags/3_5_19~14", "commitMessage": "fix: correct MockMvcTarget to call the controller the correct number of times #706\n", "commitDateTime": "2018-06-20 11:21:20", "authoredDateTime": "2018-06-20 11:21:20", "commitGitStats": [{"filePath": "pact-jvm-provider-spring/src/main/kotlin/au/com/dius/pact/provider/spring/target/MockMvcTarget.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-spring/src/test/groovy/au/com/dius/pact/provider/spring/target/MockMvcTargetSpec.groovy", "insertions": 44, "deletions": 0, "lines": 44}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["866209a67710822f8533435853f18c1324076327"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-spring/src/main/kotlin/au/com/dius/pact/provider/spring"]}, {"title": "SpringRestPactRunner doesn't appear to call destroyMethod on Spring beans", "body": "I have a Pact test using `SpringRestPactRunner` that passes when I run it standalone.\r\nElsewhere in my app I have a `@Bean` annotation with a `destroyMethod` parameter to control my HazelcastInstance.\r\n\r\n```\r\n    @Bean(destroyMethod= \"shutdown\")\r\n    public HazelcastInstance hazelcastInstance() {\r\n        LOGGER.info(\"Starting Hazelcast\");\r\n        return Hazelcast.newHazelcastInstance(config());\r\n    }\r\n```\r\n\r\nIn my other functional tests I can see in the logs that Hazelcast starts and stops correctly.\r\n\r\nHowever, in my pact test Hazelcast is never shut down - this causes my Maven build to fail as the next test tries to start Hazelcast and the application fails with an exception at that point as it's already running.\r\n\r\nMy thinking is that when I use the `SpringRestPactRunner` it's not calling the `destroyMethod` from the `@Bean` annotation.\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/699", "user": "darrengreaves", "labels": ["bug"], "created": "2018-06-12 09:38:47", "closed": "2018-07-01 09:42:25", "commits": {"04415736ad4a8374e1acf8dbe9bb6d5c9713f11f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 19.00027777777778, "commitsDetails": [{"commitHash": "04415736ad4a8374e1acf8dbe9bb6d5c9713f11f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["481c4b1c78bf00878e2217b36eaa6d67a8b991a5"], "nameRev": "04415736ad4a8374e1acf8dbe9bb6d5c9713f11f tags/3_5_19~1", "commitMessage": "fix: Add the standard test context listeners with SpringRestPactRunner #699\n", "commitDateTime": "2018-07-01 18:39:06", "authoredDateTime": "2018-07-01 18:30:08", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/InteractionRunner.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-provider-spring/build.gradle", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "pact-jvm-provider-spring/src/main/kotlin/au/com/dius/pact/provider/spring/SpringInteractionRunner.kt", "insertions": 16, "deletions": 19, "lines": 35}, {"filePath": "pact-jvm-provider-spring/src/main/kotlin/au/com/dius/pact/provider/spring/SpringRestPactRunner.kt", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "pact-jvm-provider-spring/src/test/groovy/au/com/dius/pact/provider/spring/SpringRunnerWithBeanThatMustBeClosedProperlyTest.groovy", "insertions": 43, "deletions": 0, "lines": 43}, {"filePath": "pact-jvm-provider-spring/src/test/groovy/au/com/dius/pact/provider/spring/testspringbootapp/TestApplication.groovy", "insertions": 22, "deletions": 0, "lines": 22}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InteractionRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.surrogateTestMethod()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.interactionBlock(au.com.dius.pact.model.Interaction,au.com.dius.pact.model.PactSource).2.evaluate()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["04415736ad4a8374e1acf8dbe9bb6d5c9713f11f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 37, "deletions": 22, "lines": 59, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-spring/src/main/kotlin/au/com/dius/pact/provider/spring", "pact-jvm-provider-spring", "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.InteractionRunner.surrogateTestMethod()", "au.com.dius.pact.provider.junit.InteractionRunner.interactionBlock(au.com.dius.pact.model.Interaction,au.com.dius.pact.model.PactSource).2.evaluate()"]}, {"title": "JVM provider ignores raw array value matchers", "body": "Given a groovy DSL body like:\r\n```\r\nwithBody {\r\n    rawArrayEqTo eachLike(1, equalTo('1'))\r\n    regexpRawArray eachLike(1, regexp(~/.+/, '1'))\r\n}\r\n```\r\nPact  JSON is generated as:\r\n```\r\n{\r\n  \"body\": {\r\n    \"rawArray\": [\"1\"],\r\n    \"rawArrayEqTo\": [\"1\"],\r\n    \"regexpRawArray\": [\"1\"]\r\n  },\r\n  \"matchingRules\": {\r\n    \"body\": {\r\n      \"$.rawArrayEqTo\": {\r\n        \"matchers\": [{\r\n           \"match\": \"type\"\r\n          }],\r\n          \"combine\": \"AND\"\r\n      },\r\n      \"$.rawArrayEqTo[*]\": {\r\n        \"matchers\": [{\r\n          \"match\": \"equality\"\r\n        }],\r\n        \"combine\": \"AND\"\r\n      },\r\n      \"$.regexpRawArray\": {\r\n        \"matchers\": [{\r\n          \"match\": \"type\"\r\n        }],\r\n        \"combine\": \"AND\"\r\n      },\r\n      \"$.regexpRawArray[*]\": {\r\n        \"matchers\": [{\r\n          \"match\": \"regex\",\r\n          \"regex\": \".+\"\r\n        }],\r\n        \"combine\": \"AND\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nwhat is as expected.\r\n\r\nBut then on the provider side, a JSON like:\r\n```\r\n{\r\n  \"rawArrayEqTo\": [\"\"],\r\n  \"regexpRawArray\": [\"\"]\r\n}\r\n```\r\nsuccessfully passes Pact validation.\r\n\r\nConsumer/provider test code: https://github.com/artamonovkirill/pact-issues-examples/tree/master/src/test/groovy/com/github/artamonovkirill/pact/raw", "url": "https://github.com/DiUS/pact-jvm/issues/698", "user": "artamonovkirill", "labels": ["bug"], "created": "2018-06-11 17:22:35", "closed": "2018-06-17 07:34:42", "commits": {"b723ff42b86b86f6eb3ce5b9079aeda729ee75a9": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "b723ff42b86b86f6eb3ce5b9079aeda729ee75a9", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1ef2659b8dd7a70a59c265283af6f5582c87f31c"], "nameRev": "b723ff42b86b86f6eb3ce5b9079aeda729ee75a9 tags/3_5_18~8", "commitMessage": "when selecting matchers with equal weight, use the one with the longest path #698\n", "commitDateTime": "2018-06-16 15:44:50", "authoredDateTime": "2018-06-16 15:44:50", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/MatcherExecutor.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/Matchers.kt", "insertions": 13, "deletions": 3, "lines": 16}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/MatchersSpec.groovy", "insertions": 19, "deletions": 0, "lines": 19}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules/Category.kt", "insertions": 7, "deletions": 0, "lines": 7}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b723ff42b86b86f6eb3ce5b9079aeda729ee75a9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 21, "deletions": 4, "lines": 25, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/MatcherExecutor.kt", "pact-jvm-matchers/src/main/kotlin/au/com/dius/pact/matchers/Matchers.kt", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/matchingrules"]}, {"title": "Ensure verification results are NOT published to the broker by default", "body": "When results are published from development machines, the data in the broker becomes unreliable. It means there are verifications in the broker that 1. could make a consumer believe they can safely deploy when they can't or 2. make a consumer believe they can't safely deploy when they actually can.\r\n\r\nThe verification publishing needs to be turned off by default, and able to be enabled via configuration at runtime so that it can be done only on the CI. A message that is visible without having to turn on debug logs should indicate that the results are not being published, and how to turn it on, so we don't get a heap more stackoverflow issues about the results not publishing!\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/695", "user": "bethesque", "labels": ["bug"], "created": "2018-06-11 09:30:34", "closed": "2018-06-17 07:34:53", "commits": {"ffa625ec70f66cbbeb417aa345a9f945a19ea392": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "8323f0762542dee37f917352285ff65ad3d66fcb": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "ffa625ec70f66cbbeb417aa345a9f945a19ea392", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["ee0ba4921ded4cb5e7201e06d7835a6c0798d533"], "nameRev": "ffa625ec70f66cbbeb417aa345a9f945a19ea392 tags/3_5_18~4", "commitMessage": "Only publish verification results if the java system property is set to \"true\" #695\n", "commitDateTime": "2018-06-17 14:21:24", "authoredDateTime": "2018-06-17 14:21:24", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/InteractionRunner.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderVerifier.kt", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ProviderVerifierSpec.groovy", "insertions": 7, "deletions": 2, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InteractionRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.run(org.junit.runner.notification.RunNotifier)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "8323f0762542dee37f917352285ff65ad3d66fcb", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["ffa625ec70f66cbbeb417aa345a9f945a19ea392"], "nameRev": "8323f0762542dee37f917352285ff65ad3d66fcb tags/3_5_18~3", "commitMessage": "Update all the readmes #695\n", "commitDateTime": "2018-06-17 14:27:20", "authoredDateTime": "2018-06-17 14:27:20", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/README.md", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-provider-junit/README.md", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider-lein/README.md", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-maven/README.md", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "pact-jvm-provider-sbt/README.md", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ffa625ec70f66cbbeb417aa345a9f945a19ea392", "8323f0762542dee37f917352285ff65ad3d66fcb"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 5, "lines": 10, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 1.0, "UPD": 1.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderVerifier.kt", "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.InteractionRunner.run(org.junit.runner.notification.RunNotifier)"]}, {"title": "Verification results are not pushed back to Pact Broker", "body": "I have a Maven-based provider test-app that I am using to compare Maven and Gradle, both using version 3.5.17.\r\n\r\nSource: https://github.com/dervism/person-provider\r\n\r\nThe verification results are not pushed back to my Pact Broker (https://norwegianlga.pact.dius.com.au/). I have tested with JDK10 and also downgraded to JDK8, but still my provider test are running fine and no update are happening to my Pact Broker.\r\n\r\nReverting back to 3.5.16 and JUnit4 (see branch 'junit4' in my repo) solved the issue. Also, one of my Gradle-based examples that uses the Gradle Pact plugin (also 3.5.17) are working and correctly publishes the verification results.\r\n\r\nDo you have any idea what is going on in my Maven-app?", "url": "https://github.com/DiUS/pact-jvm/issues/694", "user": "dervism", "labels": ["bug"], "created": "2018-06-10 08:22:10", "closed": "2018-06-17 07:34:32", "commits": {"8f99667ebd7090bd43dfbcd5926c251b6bb1071b": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "8f99667ebd7090bd43dfbcd5926c251b6bb1071b", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["f89a637ac9e793212d57220f63b0cd44eea459ab"], "nameRev": "8f99667ebd7090bd43dfbcd5926c251b6bb1071b tags/3_5_18~10", "commitMessage": "Implement verification result publishing for JUnit 5 provider tests #694\n", "commitDateTime": "2018-06-11 16:35:14", "authoredDateTime": "2018-06-11 16:35:14", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactSource.kt", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker/PactBrokerClient.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/InteractionRunner.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactBrokerLoader.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/target/AmqpTarget.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/PactJUnit5VerificationProvider.kt", "insertions": 13, "deletions": 3, "lines": 16}, {"filePath": "pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/TestResultAccumulator.kt", "insertions": 40, "deletions": 0, "lines": 40}, {"filePath": "pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/TestTarget.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5/TestResultAccumulatorSpec.groovy", "insertions": 48, "deletions": 0, "lines": 48}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderVerifier.kt", "insertions": 11, "deletions": 7, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InteractionRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.providerVersion()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactBrokerLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8f99667ebd7090bd43dfbcd5926c251b6bb1071b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 29, "deletions": 14, "lines": 43, "gitFilesChange": 7}, "spoonStatsSummary": {"TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PactSource.kt", "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit", "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker", "pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit", "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderVerifier.kt"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.loader.PactBrokerLoader", "au.com.dius.pact.provider.junit.InteractionRunner.providerVersion()"]}, {"title": "@DefaultRequestValues .headers works only for first request", "body": "Hi. My code is next:\r\n\r\n`@DefaultRequestValues`\r\n\tpublic void defaultRequestValues(PactDslRequestWithoutPath request) {\r\n\t\trequest.headers(\"Content-Type\", \"application/json\").method(\"GET\");\r\n\t}\r\n\r\ncode fragment to create pact:\r\n\r\nreturn builder.given(\"status200\")\r\n\t\t\t\t.uponReceiving(\"Get object\")\r\n\t\t\t\t\t.path(PATH)\r\n\t\t\t\t.willRespondWith()\r\n\t\t\t\t\t.status(200)\r\n\t\t\t\t.uponReceiving(\"Download\")\r\n\t\t\t\t\t.headers(\"Content-Type\", \"application/json\")\r\n\t\t\t\t\t.path(PATH2)\r\n\t\t\t\t\t.matchQuery(\"source_filename\" , \"[\\\\S\\\\s]+[\\\\S]+\", FILENAME)\r\n\t\t\t\t.willRespondWith()\r\n\t\t\t\t\t.status(200)\r\n\r\nas you can see I added .headers(\"Content-Type\", \"application/json\") because without it the header absent in pact and providers tests do not pass.\r\n\r\nThanks. ", "url": "https://github.com/DiUS/pact-jvm/issues/680", "user": "valera7979", "labels": ["bug"], "created": "2018-05-11 13:39:27", "closed": "2018-06-03 05:59:21", "commits": {"0030fa5c7671dbacc1f7ab08dae33d590cff7f8b": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 22.00027777777778, "commitsDetails": [{"commitHash": "0030fa5c7671dbacc1f7ab08dae33d590cff7f8b", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["09c8e16d5efb68b8c30013c38a748c17e7efe476"], "nameRev": "0030fa5c7671dbacc1f7ab08dae33d590cff7f8b tags/3_5_17~16", "commitMessage": "fix: Java DSL now applies the default values to all requests, not just the first #680\n", "commitDateTime": "2018-05-21 13:19:24", "authoredDateTime": "2018-05-21 13:19:24", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/DefaultValuesTest.java", "insertions": 66, "deletions": 0, "lines": 66}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestBase.java", "insertions": 38, "deletions": 0, "lines": 38}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 60, "deletions": 59, "lines": 119}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java", "insertions": 17, "deletions": 36, "lines": 53}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslRequestWithPathSpec.groovy", "insertions": 39, "deletions": 0, "lines": 39}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPathSpec.groovy", "insertions": 31, "deletions": 0, "lines": 31}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslResponseSpec.groovy", "insertions": 22, "deletions": 0, "lines": 22}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultValuesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.DefaultValuesTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestBase.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestBase", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath", "TOT": 17, "UPD": 1, "INS": 6, "MOV": 1, "DEL": 9}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.method(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.headers(java.lang.String,java.lang.String,java.lang.String[])", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.headers(java.util.Map)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String,java.lang.String)", "TOT": 6, "UPD": 0, "INS": 0, "MOV": 4, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier,java.lang.String)", "TOT": 6, "UPD": 0, "INS": 0, "MOV": 4, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.json.JSONObject)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 6, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 5}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.w3c.dom.Document)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 3}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchPath(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchHeader(java.lang.String,java.lang.String,java.lang.String)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.willRespondWith()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchQuery(java.lang.String,java.lang.String,java.lang.String)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchQuery(java.lang.String,java.lang.String,java.util.List)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.withFileUpload(java.lang.String,java.lang.String,java.lang.String,byte[])", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 3}]}, {"spoonFilePath": "PactDslRequestWithoutPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath", "TOT": 10, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 8}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.setupDefaultValues()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.method(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.headers(java.util.Map)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.headers(java.lang.String,java.lang.String,java.lang.String[])", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.lang.String)", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 4, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.lang.String,java.lang.String)", "TOT": 7, "UPD": 0, "INS": 0, "MOV": 5, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.util.function.Supplier)", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 4, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.util.function.Supplier,java.lang.String)", "TOT": 7, "UPD": 0, "INS": 0, "MOV": 5, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.json.JSONObject)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 6, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 5}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.w3c.dom.Document)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 3}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.path(java.lang.String)", "TOT": 14, "UPD": 0, "INS": 0, "MOV": 7, "DEL": 7}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.matchPath(java.lang.String,java.lang.String)", "TOT": 14, "UPD": 0, "INS": 0, "MOV": 6, "DEL": 8}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.withFileUpload(java.lang.String,java.lang.String,java.lang.String,byte[])", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 3}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0030fa5c7671dbacc1f7ab08dae33d590cff7f8b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 115, "deletions": 95, "lines": 210, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 152, "UPD": 1, "INS": 9, "MOV": 53, "DEL": 89, "spoonFilesChanged": 3, "spoonMethodsChanged": 33}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.util.function.Supplier,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.w3c.dom.Document)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.method(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.setupDefaultValues()", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchQuery(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.willRespondWith()", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchPath(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.util.function.Supplier)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.headers(java.lang.String,java.lang.String,java.lang.String[])", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.headers(java.util.Map)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.matchPath(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(java.util.function.Supplier,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslRequestBase", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.path(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchQuery(java.lang.String,java.lang.String,java.util.List)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchHeader(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.body(org.json.JSONObject)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.headers(java.util.Map)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.headers(java.lang.String,java.lang.String,java.lang.String[])", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.w3c.dom.Document)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.withFileUpload(java.lang.String,java.lang.String,java.lang.String,byte[])", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.method(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.withFileUpload(java.lang.String,java.lang.String,java.lang.String,byte[])", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.body(org.json.JSONObject)"]}, {"title": "Pact Broker Client fails to publish verification back to Pact Broker when HTTPS", "body": "It seems the PactBrokerClient (https://github.com/DiUS/pact-jvm/blob/master/pact-jvm-pact-broker/src/main/kotlin/au/com/dius/pact/pactbroker/PactBrokerClient.kt) fails to publish the verification back to the pact broker when it's an HTTPS POST call to the pact broker. i see the following in my test logs\r\n```\r\n[a.c.d.p.p.ProviderVerifier] - Failed to publish verification results - Connect to localhost:1234 [localhost/127.0.0.1, localhost/0:0:0:0:0:0:0:1] failed: Connection refused (Connection refused) \r\n```\r\nI currently think it's a problem with the underlying apache httpclient as it somehow tries to route the request to localhost:1234.\r\nFYI i've tested with a unit test publishing the verification to a locally running pact broker on http and it works.\r\n\r\nAs a workaround I've overridden the au.com.dius.pact.provider.junit.InteractionRunner which works:\r\n```\r\npublic class PayInteractionRunner extends InteractionRunner {\r\n\r\n    private Optional<String> verificationUrl = Optional.empty();\r\n    private String username;\r\n    private String password;\r\n\r\n    public PayInteractionRunner(TestClass testClass, Pact<? extends Interaction> pact, PactSource pactSource) throws InitializationError {\r\n        super(testClass, pact, pactSource);\r\n        if (pact.getSource() instanceof BrokerUrlSource) {\r\n            verificationUrl = Optional.of(((BrokerUrlSource) pact.getSource()).getAttributes().get(\"pb:publish-verification-results\").get(\"href\").toString());\r\n            PactBrokerAuth authentication = testClass.getAnnotation(PactBroker.class).authentication();\r\n            password = authentication.password();\r\n            username = authentication.username();\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void reportVerificationResults(Boolean allPassed) {\r\n        verificationUrl.ifPresent(url -> {\r\n            CredentialsProvider provider = new BasicCredentialsProvider();\r\n            provider.setCredentials(AuthScope.ANY, new UsernamePasswordCredentials(username, password));\r\n            HttpClient httpClient = HttpClientBuilder.create().setDefaultCredentialsProvider(provider).build();\r\n\r\n            try {\r\n                System.out.println(\"Publishing verification results...\");\r\n                HttpPost request = new HttpPost(url);\r\n                StringEntity stringEntity = new StringEntity(\"{\\\"success\\\":\\\"false\\\",\\\"providerApplicationVersion\\\":\\\"1.0.1\\\"}\");\r\n                request.addHeader(\"Content-Type\", \"application/json\");\r\n                request.setEntity(stringEntity);\r\n                httpClient.execute(request);\r\n                System.out.println(\"Verification results published successfully.\");\r\n            } catch (Exception e) {\r\n                System.out.println(\"Exception caught: \" + e.getMessage());\r\n                System.out.println(\"Verification results published unsuccessfully\");\r\n            }\r\n        });\r\n    }\r\n}\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/667", "user": "oswaldquek", "labels": ["bug"], "created": "2018-04-20 08:46:43", "closed": "2019-08-16 15:10:46", "commits": {"f0cd5c7433ccbcd94b2112977618b0a0db8622bc": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "16634eddf264230dd8cafe1298db09dc4ddc844e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "f89a637ac9e793212d57220f63b0cd44eea459ab": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 483.0002777777778, "commitsDetails": [{"commitHash": "f0cd5c7433ccbcd94b2112977618b0a0db8622bc", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a81522b5addecc7d8aa1077172578c019b4f1242"], "nameRev": "f0cd5c7433ccbcd94b2112977618b0a0db8622bc tags/3_5_17~5", "commitMessage": "Add a log statement when pact verification publishing is skipped #667\n", "commitDateTime": "2018-06-03 11:20:42", "authoredDateTime": "2018-06-03 11:20:42", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderVerifier.kt", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "16634eddf264230dd8cafe1298db09dc4ddc844e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["2fb44945b79b866b853fb1758cdee96f7c91f373"], "nameRev": "16634eddf264230dd8cafe1298db09dc4ddc844e tags/3_5_17~1", "commitMessage": "JUnit Interaction runner now uses its pact source not the one associated with the pact #667\n", "commitDateTime": "2018-06-03 13:58:54", "authoredDateTime": "2018-06-03 13:58:54", "commitGitStats": [{"filePath": "build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/InteractionRunner.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/InteractionRunnerSpec.groovy", "insertions": 18, "deletions": 0, "lines": 18}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderVerifier.kt", "insertions": 9, "deletions": 3, "lines": 12}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ProviderVerifierSpec.groovy", "insertions": 18, "deletions": 0, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InteractionRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.reportVerificationResults(java.lang.Boolean,au.com.dius.pact.model.Pact,au.com.dius.pact.model.PactSource)", "TOT": 5, "UPD": 0, "INS": 5, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.run(org.junit.runner.notification.RunNotifier)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.reportVerificationResults(java.lang.Boolean)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "f89a637ac9e793212d57220f63b0cd44eea459ab", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["8b721bf4d31522ae23d3a186913479bd398b2d76"], "nameRev": "f89a637ac9e793212d57220f63b0cd44eea459ab tags/3_5_18~11", "commitMessage": "Revert \"JUnit Interaction runner now uses its pact source not the one associated with the pact #667\"\n\nThis reverts commit 16634eddf264230dd8cafe1298db09dc4ddc844e.\n", "commitDateTime": "2018-06-11 15:24:24", "authoredDateTime": "2018-06-11 15:24:24", "commitGitStats": [{"filePath": "build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/InteractionRunner.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/InteractionRunnerSpec.groovy", "insertions": 0, "deletions": 18, "lines": 18}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderVerifier.kt", "insertions": 3, "deletions": 9, "lines": 12}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ProviderVerifierSpec.groovy", "insertions": 0, "deletions": 18, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InteractionRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.run(org.junit.runner.notification.RunNotifier)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.reportVerificationResults(java.lang.Boolean,au.com.dius.pact.model.Pact,au.com.dius.pact.model.PactSource)", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 5}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f0cd5c7433ccbcd94b2112977618b0a0db8622bc", "16634eddf264230dd8cafe1298db09dc4ddc844e", "f89a637ac9e793212d57220f63b0cd44eea459ab"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 3, "gitStatsSummary": {"insertions": 21, "deletions": 20, "lines": 41, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 14.0, "UPD": 0.0, "INS": 6.0, "MOV": 2.0, "DEL": 6.0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderVerifier.kt", "", "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.InteractionRunner.reportVerificationResults(java.lang.Boolean,au.com.dius.pact.model.Pact,au.com.dius.pact.model.PactSource)", "au.com.dius.pact.provider.junit.InteractionRunner.run(org.junit.runner.notification.RunNotifier)", "au.com.dius.pact.provider.junit.InteractionRunner.reportVerificationResults(java.lang.Boolean)"]}, {"title": "Getting a \"No such property: providerVersion\" when executing mvn pact:verify on JDK6 project", "body": "Hello iam trying to use the pact-jvm-provider-maven_2.10 plugin version: 2.4.19 for a jdk 6 project.\r\nWhen iam trying to run mvn pact:verify iam getting following error:\r\n\r\n**Failed to execute goal au.com.dius:pact-jvm-provider-maven_2.10:2.4.19:verify (default-cli) on project mbconnect.sbb.cpd.ws: Execution default-cli of goal au.com.dius:pact-jvm-provider-maven_2.10:2.4.19:verify failed: No such property: providerVersion for class: au.com.dius.pact.provider.ProviderVerifier** \r\n\r\nI tried to find a similar failure on inet but there was nothing. Please can you help me.\r\n\r\nThanks in advance.", "url": "https://github.com/DiUS/pact-jvm/issues/662", "user": "jaspreetParhar", "labels": ["bug"], "created": "2018-04-08 16:02:29", "closed": "2018-04-16 03:28:47", "commits": {"bbbed3397b7dc78acd57000e1054db364b280ff1": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "1e47da43c363517629bf43950f079e49f5687fed": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "c4d69e99e2aa7e614e1852eef0f4cba1c2348ae6": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "00fc72dfaedd6971a1f917fb6b469211d636db33": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "772d10f2ce5be049c1d0c7ad77a499dbf03a3c64": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "bbbed3397b7dc78acd57000e1054db364b280ff1", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["453a1fc1ee2644e7afdda5be6345c59836e91bd9"], "nameRev": "bbbed3397b7dc78acd57000e1054db364b280ff1 tags/2_4_20~8", "commitMessage": "add the provider version #662\n\n(cherry picked from commit 0ac40cd)\n", "commitDateTime": "2018-04-09 13:28:45", "authoredDateTime": "2017-08-05 19:44:08", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/PactVerificationTask.groovy", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven/PactProviderMojo.groovy", "insertions": 14, "deletions": 16, "lines": 30}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "1e47da43c363517629bf43950f079e49f5687fed", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["bbbed3397b7dc78acd57000e1054db364b280ff1"], "nameRev": "1e47da43c363517629bf43950f079e49f5687fed tags/2_4_20~7", "commitMessage": "Disabling codenarc due to false errors #662\n", "commitDateTime": "2018-04-09 13:51:33", "authoredDateTime": "2018-04-09 13:51:33", "commitGitStats": [{"filePath": "build.gradle", "insertions": 8, "deletions": 8, "lines": 16}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "c4d69e99e2aa7e614e1852eef0f4cba1c2348ae6", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1e47da43c363517629bf43950f079e49f5687fed"], "nameRev": "c4d69e99e2aa7e614e1852eef0f4cba1c2348ae6 tags/2_4_20~6", "commitMessage": "In matchers module, Groovy code should be compiled first #662\n", "commitDateTime": "2018-04-09 13:52:07", "authoredDateTime": "2018-04-09 13:52:07", "commitGitStats": [{"filePath": "pact-jvm-matchers/build.gradle", "insertions": 3, "deletions": 2, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "00fc72dfaedd6971a1f917fb6b469211d636db33", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["4459f4e70ab7d382520999c355454cb1a6846037"], "nameRev": "00fc72dfaedd6971a1f917fb6b469211d636db33 tags/2_4_20~2", "commitMessage": "Fix for failing tests #662\n", "commitDateTime": "2018-04-11 22:30:54", "authoredDateTime": "2018-04-11 22:30:54", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilderSpec.groovy", "insertions": 9, "deletions": 9, "lines": 18}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/PactDslJsonBodyTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/test/java/au/com/dius/pact/consumer/PactDslJsonBodyTest.java", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonBodyTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBodyTest.guardAgainstObjectNamesThatDontConformToGatlingFields()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBodyTest.guardAgainstFieldNamesThatDontConformToGatlingFields()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "772d10f2ce5be049c1d0c7ad77a499dbf03a3c64", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["00fc72dfaedd6971a1f917fb6b469211d636db33", "a4fb87d84851778c5cd8cfefd1408ca100fd9197"], "nameRev": "772d10f2ce5be049c1d0c7ad77a499dbf03a3c64 tags/2_4_20~1", "commitMessage": "Merge pull request #663 from jaspreetParhar/v2.x\n\nFix to build pact-jvm-maven plugin #662", "commitDateTime": "2018-04-14 21:25:46", "authoredDateTime": "2018-04-14 21:25:46", "commitGitStats": [{"filePath": "pact-jvm-provider-maven/build.gradle", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bbbed3397b7dc78acd57000e1054db364b280ff1", "1e47da43c363517629bf43950f079e49f5687fed", "c4d69e99e2aa7e614e1852eef0f4cba1c2348ae6", "00fc72dfaedd6971a1f917fb6b469211d636db33"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 3, "gitStatsSummary": {"insertions": 27, "deletions": 26, "lines": 53, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["", "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven", "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle", "pact-jvm-matchers", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy"], "changesInPackagesSPOON": []}, {"title": "Pact consumer tests' execution hangs after reaching 200 connection limit of mockServer", "body": "When running the pact consumer tests, the execution hangs after completing 200 tests (we got 222 tests to run). It seemed a bit odd that it'll stop after 200 tests but found this in the console:\r\n\r\n![image](https://user-images.githubusercontent.com/28387803/38064280-b09fd7ca-3359-11e8-96d7-3e047928149c.png)\r\n\r\nI was able to trace this to the mockServer. It doesn't seem to close the connection after each test. Is there a way to close the connection after each test? Thanks!", "url": "https://github.com/DiUS/pact-jvm/issues/658", "user": "m-aster22", "labels": ["bug"], "created": "2018-03-29 01:25:25", "closed": "2018-06-17 07:33:49", "commits": {"8bc4b4a60bde4014a0e772902edf7a253cf97348": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 80.00027777777778, "commitsDetails": [{"commitHash": "8bc4b4a60bde4014a0e772902edf7a253cf97348", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["cff3677455e768bad239e154b291928a165fdca0"], "nameRev": "8bc4b4a60bde4014a0e772902edf7a253cf97348 tags/3_5_18~19", "commitMessage": "Use the non-pooling http connection manager to test the mock server startup #658\n", "commitDateTime": "2018-06-03 17:34:15", "authoredDateTime": "2018-06-03 17:34:15", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MockHttpServer.kt", "insertions": 7, "deletions": 3, "lines": 10}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/MockHttpServerSpec.groovy", "insertions": 23, "deletions": 0, "lines": 23}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8bc4b4a60bde4014a0e772902edf7a253cf97348"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 3, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/MockHttpServer.kt"]}, {"title": "Order of JSON body properties in generated Pact", "body": "Hello! I'm trying to generate a Pact\r\n\r\n```java\r\nfinal DslPart fragment2body = new PactDslJsonBody()\r\n            .stringType(\"checkName\", \"billing_address_missing\")\r\n            .stringType(\"description\", \"Billing address missing\")\r\n            .booleanType(\"enabled\", true)\r\n            .stringType(\"severityLevel\", \"Critical\");\r\n\r\n public RequestResponsePact createFragment2(PactDslWithProvider builder) {\r\n        return builder\r\n                .uponReceiving(\"test\")\r\n                    .method(\"GET\")\r\n                    .matchPath(\"test\")\r\n                .willRespondWith()\r\n                    .status((HttpStatus.SC_OK))\r\n                    .body(fragment2body)\r\n                .toPact();\r\n```\r\n\r\n\r\nAnd i'm getting the following Pact\r\n```javascript\r\n \"response\": {\r\n                \"status\": 200,\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json;charset=UTF-8\"\r\n                },\r\n                \"body\": {\r\n                    \"severityLevel\": \"Critical\",\r\n                    \"description\": \"Billing address missing\",\r\n                    \"checkName\": \"billing_address_missing\",\r\n                    \"enabled\": true\r\n                },\r\n                \"matchingRules\": {\r\n ...\r\n\r\n```\r\nWhy properties order in body section has changed?", "url": "https://github.com/DiUS/pact-jvm/issues/655", "user": "sdulebskiy", "labels": ["bug"], "created": "2018-03-22 11:18:45", "closed": "2018-04-03 12:53:34", "commits": {}, "ttf": 12.000277777777777, "commitsDetails": []}, {"title": "withFileUpload regex does not allow charset to be specified", "body": "We're using the new `withFileUpload` method in the JUnit DSL, and it's almost working really well. The only issue is that our client (Feign) is setting a charset as part of the content-type header, between the mime type and the boundary. Would it be possible to adjust the MULTIPART_HEADER_REGEX to include an optional charset?", "url": "https://github.com/DiUS/pact-jvm/issues/645", "user": "holly-cummins", "labels": ["bug"], "created": "2018-02-28 12:26:46", "closed": "2018-03-03 23:20:54", "commits": {"a08980ef563e5d88c18aa0bf111385cee4d812fd": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "a08980ef563e5d88c18aa0bf111385cee4d812fd", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["5062caccf6a5d7cf939a940a4ad1d2d605a89782"], "nameRev": "a08980ef563e5d88c18aa0bf111385cee4d812fd tags/3_5_14~1^2~14", "commitMessage": "Adjust MULTIPART_HEADER_REGEX to include an optional charset attribute #645\n", "commitDateTime": "2018-03-04 10:20:29", "authoredDateTime": "2018-03-04 10:20:29", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBuilder.groovy", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/HeadersSpec.groovy", "insertions": 23, "deletions": 0, "lines": 23}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/Headers.kt", "insertions": 5, "deletions": 0, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.withFileUpload(java.lang.String,java.lang.String,java.lang.String,byte[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestWithoutPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.withFileUpload(java.lang.String,java.lang.String,java.lang.String,byte[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a08980ef563e5d88c18aa0bf111385cee4d812fd"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 16, "deletions": 9, "lines": 25, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2, "spoonFilesChanged": 2, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl", "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy", "pact-jvm-consumer/src/main/kotlin/au/com/dius/pact/consumer/Headers.kt"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.withFileUpload(java.lang.String,java.lang.String,java.lang.String,byte[])", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.withFileUpload(java.lang.String,java.lang.String,java.lang.String,byte[])"]}, {"title": "Issue for  @Pact, @PactVerification and @PactVerifyProvider. Missing $ symbol in pact.json", "body": "Hello. I'm using  in my gradle this dependencies ( early i used 3.5.11)\r\n\r\n'au.com.dius.pact' version '3.5.12'\r\nau.com.dius:pact-jvm-provider-gradle_2.12:3.5.12\r\nau.com.dius:pact-jvm-consumer-junit_2.12:3.5.12\r\n\r\nafter migrating to 3.5.12  i got issue for consumer.json\r\n \".metadata.date\": {  instead \"$.metadata.date\": { (missing $)\r\n\r\nAs a result for pactVerify i got  a lot of warnings:\r\n\r\n\r\n```\r\nPath expression .payload.name is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.payload.name\r\n^\r\nPath expression .payload.iri is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.payload.iri\r\n^\r\nPath expression .metadata.messageId is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.metadata.messageId\r\n^\r\nPath expression .metadata.date is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.metadata.date\r\n^\r\nPath expression .metadata.contractVersion is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.metadata.contractVersion\r\n^\r\nPath expression .payload.name is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.payload.name\r\n^\r\nPath expression .payload.iri is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.payload.iri\r\n^\r\nPath expression .metadata.messageId is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.metadata.messageId\r\n^\r\nPath expression .metadata.date is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.metadata.date\r\n^\r\nPath expression .metadata.contractVersion is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.metadata.contractVersion\r\n^\r\nPath expression .payload.name is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.payload.name\r\n^\r\nPath expression .payload.iri is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.payload.iri\r\n^\r\nPath expression .metadata.messageId is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.metadata.messageId\r\n^\r\nPath expression .metadata.date is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.metadata.date\r\n^\r\nPath expression .metadata.contractVersion is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.metadata.contractVersion\r\n^\r\nPath expression .payload.name is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.payload.name\r\n^\r\nPath expression .payload.iri is invalid, ignoring: [1.1] failure: `$' expected but `.' found\r\n\r\n.payload.iri\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/628", "user": "PDziamentsyeu", "labels": ["bug"], "created": "2018-01-23 12:08:02", "closed": "2018-07-01 09:41:37", "commits": {"fccb2236ea03296baf3b06ae6ab6df81e7dbbb8f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 158.00027777777777, "commitsDetails": [{"commitHash": "fccb2236ea03296baf3b06ae6ab6df81e7dbbb8f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["048926a7e0569f0ea480bb507f310b88d775f592"], "nameRev": "fccb2236ea03296baf3b06ae6ab6df81e7dbbb8f tags/3_5_19~3", "commitMessage": "fix: make sure the Java body DSL objects are allways closed correctly #628 #708\n", "commitDateTime": "2018-07-01 15:59:41", "authoredDateTime": "2018-07-01 15:59:41", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/MessagePactBuilder.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/MessagePactBuilderSpec.groovy", "insertions": 39, "deletions": 0, "lines": 39}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonArray.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonBody.java", "insertions": 12, "deletions": 12, "lines": 24}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonArraySpec.groovy", "insertions": 26, "deletions": 0, "lines": 26}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonBodySpec.groovy", "insertions": 26, "deletions": 1, "lines": 27}, {"filePath": "pact-jvm-consumer/src/test/java/au/com/dius/pact/consumer/PactTest.java", "insertions": 0, "deletions": 2, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessagePactBuilder.java", "spoonMethods": []}, {"spoonFilePath": "PactDslJsonArray.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.close()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.closeArray()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.close()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.closeObject()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactTest.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "PactDslJsonBody close() vs closeObject()?", "body": "According to **DslPart.java**, it seems that `close()` would do what `closeObject()` does, but actually it does more in the child class **PactDslJsonBody.java**. `close()` will apply MatcherRootPrefix(\"$\") and cause warning when running pact verification. The warning is \r\n```\r\nWARN au.com.dius.pact.matchers.Matchers$ - Path expression $$.contactDetails.mobile.countryCode is invalid, ignoring: [1.2] failure: `[?(' expected but `$' found\r\n\r\n$$.contactDetails.mobile.countryCode\r\n```\r\n\r\n```\r\npublic abstract class DslPart {\r\n  /**\r\n   * This closes off the object graph build from the DSL in case any close[Object|Array] methods have not been called.\r\n   * @return The root object of the object graph\r\n   */\r\n  public abstract DslPart close();\r\n}\r\n```\r\n```\r\npublic class PactDslJsonBody extends DslPart {\r\n\r\n  @Override\r\n  public DslPart close() {\r\n    DslPart parentToReturn = this;\r\n    if (!closed) {\r\n      DslPart parent = closeObject();\r\n      while (parent != null) {\r\n        parentToReturn = parent;\r\n        if (parent instanceof PactDslJsonArray) {\r\n          parent = parent.closeArray();\r\n        } else {\r\n          parent = parent.closeObject();\r\n        }\r\n      }\r\n    }\r\n\r\n    parentToReturn.getMatchers().applyMatcherRootPrefix(\"$\"); // ???\r\n    parentToReturn.getGenerators().applyRootPrefix(\"$\");\r\n\r\n    return parentToReturn;\r\n  }\r\n}\r\n```\r\n\r\nThe way to generate the pact file:\r\n```\r\nPactDslJsonBody pactDslJsonBody = new PactDslJsonBody();\r\nPactDslJsonBody contactDetailsPactDslJsonBody = pactDslJsonBody.object(\"contactDetails\");\r\ncontactDetailsPactDslJsonBody.object(\"mobile\")\r\n          .stringType(\"countryCode\", \"64\")\r\n          .stringType(\"prefix\", \"21\")\r\n          .stringType(\"subscriberNumber\", \"123456\")\r\n          .closeObject();\r\npactDslJsonBody = contactDetailsPactDslJsonBody.closeObject().asBody();\r\npactDslJsonBody.close(); // problem???\r\nreturn pactDslJsonBody;\r\n```\r\nAs you can see from the resulting pact file, the node is `$.body$.contactDetails.mobile.countryCode` rather than `$.body.contactDetails.mobile.countryCode` if not calling `pactDslJsonBody.close()` at the end.\r\n```\r\n\"response\": {\r\n    \"status\": 200,\r\n    \"headers\": {\r\n        \"Content-Type\": \"application/json\"\r\n    },\r\n    \"body\": {\r\n        \"contactDetails\": {\r\n            \"mobile\": {\r\n                \"countryCode\": \"64\",\r\n                \"prefix\": \"21\",\r\n                \"subscriberNumber\": \"123456\"\r\n            }\r\n        }\r\n    },\r\n    \"matchingRules\": {\r\n        \"$.headerContent-Type\": {\r\n            \"match\": \"regex\",\r\n            \"regex\": \"application/json\"\r\n        },\r\n        \"$.body$.contactDetails.mobile.countryCode\": {\r\n            \"match\": \"type\"\r\n        },\r\n        \"$.body$.contactDetails.mobile.prefix\": {\r\n            \"match\": \"type\"\r\n        },\r\n        \"$.body$.contactDetails.mobile.subscriberNumber\": {\r\n            \"match\": \"type\"\r\n        }\r\n    }\r\n},\r\n```\r\nBased on the javadoc, it seems that `close()` would save you if in case you forgot `closeObject()`. But it would cause warnings. Everything is fine if only calling `closeObject()`. I'm wondering if I'm missing something? Thanks. ", "url": "https://github.com/DiUS/pact-jvm/issues/619", "user": "yunj", "labels": ["bug"], "created": "2018-01-10 21:52:46", "closed": "2018-02-22 23:07:19", "commits": {"6da23fce18479b63aff11df0245d4d367e04b4f7": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 43.000277777777775, "commitsDetails": [{"commitHash": "6da23fce18479b63aff11df0245d4d367e04b4f7", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["bd3381923f031320706b1fa4d29b3010bf42e237"], "nameRev": "6da23fce18479b63aff11df0245d4d367e04b4f7 tags/3_5_12~6", "commitMessage": "Make the close method in the Java DSL safe to call multiple times #619\n", "commitDateTime": "2018-01-15 16:09:04", "authoredDateTime": "2018-01-15 16:09:04", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonArray.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonBody.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonBodySpec.groovy", "insertions": 20, "deletions": 0, "lines": 20}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonArray.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.close()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.close()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6da23fce18479b63aff11df0245d4d367e04b4f7"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 6, "lines": 14, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 0, "MOV": 4, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslJsonArray.close()", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.close()"]}, {"title": "Missing null check at BaseTarget.exceptionMessage", "body": "The code assume that the message is not null:\r\n\r\n>     if (message.contains(\"\\n\")) {\r\n...\r\n>     String message = err.getMessage();\r\nAnd therefore failed in case of NullPointerException.\r\nThanks", "url": "https://github.com/DiUS/pact-jvm/issues/617", "user": "AssafKatz3", "labels": ["bug"], "created": "2018-01-08 16:27:47", "closed": "2018-06-17 05:31:57", "commits": {"d42b3e2b59fbacb6bd0fe26abf3121c80016f1e5": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 159.00027777777777, "commitsDetails": [{"commitHash": "d42b3e2b59fbacb6bd0fe26abf3121c80016f1e5", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d26dc37d7600f08303e5fcf428ce5fcea28508f3"], "nameRev": "d42b3e2b59fbacb6bd0fe26abf3121c80016f1e5 tags/3_5_12~10", "commitMessage": "Guard against exceptions with a null message #617\n", "commitDateTime": "2018-01-15 13:33:31", "authoredDateTime": "2018-01-15 13:33:31", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/target/BaseTarget.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/target/BaseTargetSpec.groovy", "insertions": 12, "deletions": 0, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BaseTarget.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.target.BaseTarget.exceptionMessage(java.lang.Throwable,int)", "TOT": 5, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d42b3e2b59fbacb6bd0fe26abf3121c80016f1e5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 5, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.target.BaseTarget.exceptionMessage(java.lang.Throwable,int)"]}, {"title": "java8 dsl does not properly manage min/maxArrayLike", "body": "The Java8 dsl simply delegate method such as `minArrayLike` to the underlying object, which will internally create a new array. \r\nBut, as there is no `closeArray` method on LambdaDslObject, the array remain unclosed.\r\nMoreover, as the newly created array is not exposed, it is not possible to provide any specification for the given array.\r\nThe solution would be to use a similar mechanism as for `array` and `object` method and force a last argument to be the Consumer of that array. Some convenience method without the Consumer could also be provided, which would properly close the internal array immediately.", "url": "https://github.com/DiUS/pact-jvm/issues/605", "user": "ohubaut", "labels": ["bug"], "created": "2017-12-18 14:36:38", "closed": "2018-06-20 01:58:58", "commits": {"3c946b6abdf589454ddc2d9bc6def472263493bf": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 183.00027777777777, "commitsDetails": [{"commitHash": "3c946b6abdf589454ddc2d9bc6def472263493bf", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1b80c7d50b30b283f016667fd5c17b2cdba4b8ee", "6e05bdfb0a3c9463e94043ca73634ae231be9114"], "nameRev": "3c946b6abdf589454ddc2d9bc6def472263493bf tags/3_5_12~15", "commitMessage": "Merge pull request #611 from ohubaut/java8-dsl-array\n\nFix for #605", "commitDateTime": "2018-01-15 11:45:19", "authoredDateTime": "2018-01-15 11:45:19", "commitGitStats": [{"filePath": "pact-jvm-consumer-java8/src/main/java/io/pactfoundation/consumer/dsl/LambdaDslJsonArray.java", "insertions": 64, "deletions": 24, "lines": 88}, {"filePath": "pact-jvm-consumer-java8/src/main/java/io/pactfoundation/consumer/dsl/LambdaDslObject.java", "insertions": 75, "deletions": 29, "lines": 104}, {"filePath": "pact-jvm-consumer-java8/src/test/java/io/pactfoundation/consumer/dsl/LambdaDslJsonArrayTest.java", "insertions": 477, "deletions": 53, "lines": 530}, {"filePath": "pact-jvm-consumer-java8/src/test/java/io/pactfoundation/consumer/dsl/LambdaDslObjectTest.java", "insertions": 539, "deletions": 45, "lines": 584}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "UuidMatcher provides a Generator even when a value is specified", "body": "When specifying an example UUID using the Groovy `uuid` matcher, e.g.:\r\n\r\n```groovy\r\nimport au.com.duis.pact.consumer.groovy.Matchers\r\n\r\n// omitted...\r\n\r\nid Matchers.uuid('88aee6ad-bff6-4e11-ae5c-626f00ad13a0') \r\n```\r\n\r\nI expect the same example value to be present in the generated Pact file and the json returned in the HTTP response.\r\n\r\nHowever, whilst the example value is written to the Pact file, a different value is returned in the HTTP response.\r\n\r\nI believe the problem is in [`UuidMatcher::getGenerator`][0]. I think the implementation should be:\r\n\r\n```groovy\r\nGenerator getGenerator() {\r\n    value == null ? new UuidGenerator() : null\r\n}\r\n```\r\n\r\nI was planning on submitting a Pull Request, but I had trouble building the project.\r\n\r\n[0]: https://github.com/DiUS/pact-jvm/blob/master/pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/UuidMatcher.groovy#L17-L19", "url": "https://github.com/DiUS/pact-jvm/issues/598", "user": "jon-ruckwood", "labels": ["bug"], "created": "2017-12-04 14:52:14", "closed": "2017-12-20 04:05:17", "commits": {"d051064bb7866c099bc2e6752f64cd08ba82a77c": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 15.000277777777777, "commitsDetails": [{"commitHash": "d051064bb7866c099bc2e6752f64cd08ba82a77c", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["dfd39998133c10c769f80f6b1d0a82d500ae41c6"], "nameRev": "d051064bb7866c099bc2e6752f64cd08ba82a77c tags/3_5_11~5", "commitMessage": "Fix the Groovy uuid matcher to not include a generator if a value has been supplied #598\n", "commitDateTime": "2017-12-06 16:16:11", "authoredDateTime": "2017-12-06 16:16:11", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/UuidMatcher.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonArray.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonBody.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonRootValue.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRootValue.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators/Generator.kt", "insertions": 13, "deletions": 11, "lines": 24}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/GeneratedRequestSpec.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/GeneratedResponseSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactSerialiserSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonArray.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.uuid()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.uuid(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "PactDslJsonRootValue.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.uuid()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "PactDslRootValue.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRootValue.uuid()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d051064bb7866c099bc2e6752f64cd08ba82a77c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 18, "deletions": 16, "lines": 34, "gitFilesChange": 6}, "spoonStatsSummary": {"TOT": 8, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 4, "spoonFilesChanged": 4, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators", "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy", "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslJsonBody.uuid(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.uuid()", "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.uuid()", "au.com.dius.pact.consumer.dsl.PactDslRootValue.uuid()"]}, {"title": "PactDslJsonBody is not generating the proper json object key when key has space in it", "body": "If a key whose is an array has a **space** in it, then it is not generating the json properly\r\n\r\n```javascript\r\n.array(\"available Options\")\r\n  .object()\r\n      .stringType(\"Material\", \"Gold\")\r\n   .closeObject()\r\n.closeArray()\r\n```\r\n\r\nThe output is this where **available Options** is surrounded with square brackets.\r\n```javascript\r\n{\r\n  \"body\": {\r\n     \"['available Options']\": [\r\n         {\r\n              \"Material\": \"Gold\"\r\n         }\r\n     ],\r\n   }\r\n}\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/582", "user": "muralikrishna8", "labels": ["bug"], "created": "2017-11-10 17:05:35", "closed": "2017-12-20 04:26:17", "commits": {"79890f124a5568df571421b727fdd014e02197ba": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 39.000277777777775, "commitsDetails": [{"commitHash": "79890f124a5568df571421b727fdd014e02197ba", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["cc16619aa3b4783f31d47f772791d20373576acf"], "nameRev": "79890f124a5568df571421b727fdd014e02197ba tags/3_5_12~20", "commitMessage": "Add a test case for when the Java DSL is used to create an attribute with a space in the name #582\n", "commitDateTime": "2017-12-20 15:17:53", "authoredDateTime": "2017-12-20 15:17:53", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonBodySpec.groovy", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "pact-jvm-provider-lein/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["79890f124a5568df571421b727fdd014e02197ba"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-lein"]}, {"title": "Form params are not sent to producers in 3.5.x", "body": "I'm trying to write a Pact test for a POST endpoint that takes form parameters. When I write the consumer side of the test, it produces a pact file with the parameters encoded in the body field. However, the producer side fails. When I debug into the test with a breakpoint in my endpoint, I can see that all the parameters are null (parameters that come in as collections are empty). This appears to be a regression from 3.4.0. When I switch to that version of pact, I get non-null/non-empty parameters in my resources. Unfortunately, I can't use 3.4.0 because the annotations don't work for me.\r\n\r\nI wrote a toy example. Here's the consumer side:\r\n`private static final int PACT_TEST_PORT = 8080;\r\nprivate static final String PACT_TEST_SERVER = \"localhost\";\r\nprivate static ServerConfiguration FAKE_ZOO_CLIENT_SERVER = new ServerConfiguration(PACT_TEST_SERVER, PACT_TEST_PORT, \"zoo-ws\");\r\n\r\n\t/*\r\n\t\tJunit rule to tell pact to mock the service and record the interactions\r\n\t*/\r\n\t@Rule\r\n\tpublic PactProviderRuleMk2 mockProvider = new PactProviderRuleMk2(\"zoo_ws\", PACT_TEST_SERVER, PACT_TEST_PORT, this);\r\n\r\n\t@Pact(consumer = \"zookeeper\")\r\n\tpublic RequestResponsePact createPact(PactDslWithProvider builder) throws ParseException\r\n\t{\r\n\t\t/*\r\n\t\t\tDefine expected states and interactions including json matcher for response\r\n\t\t */\r\n\t\treturn builder\r\n\t\t\t\t.given(\"grizzly bear can be added to zoo\")\r\n\t\t\t\t\t.uponReceiving(\"a POST request to add a grizzly bear named Bubbles\")\r\n\t\t\t\t\t\t.path(\"/zoo-ws/animals\")\r\n\t\t\t\t\t\t.method(\"POST\")\r\n\t\t\t\t\t\t.headers(ImmutableMap.of(\"Content-Type\", \"application/x-www-form-urlencoded\"))\r\n\t\t\t\t\t\t.body(\"type=grizzly+bear&name=Bubbles\")\r\n\t\t\t\t\t.willRespondWith()\r\n\t\t\t\t\t\t.status(200)\r\n\t\t\t\t\t\t.headers(ImmutableMap.of(\"Content-Type\", \"application/json\"))\r\n\t\t\t\t\t\t.body(expectedGrizzlyResponse())\r\n\t\t\t\t.toPact();\r\n\t}\r\n\t\r\n\tprivate DslPart expectedGrizzlyResponse()\r\n\t{\r\n\t\t/*\r\n\t\t\tDefine Json Matcher for expected response for grizzly object\r\n\t\t */\r\n\t\treturn new PactDslJsonBody()\r\n\t\t\t\t.stringValue(\"animalType\", \"grizzly bear\")\r\n\t\t\t\t.stringType(\"name\", \"Bubbles\")\r\n\t\t\t\t.array(\"feedingLog\")// we expect the feeding logs to be empty when you first add an animal\r\n\t\t\t\t.closeArray();\r\n\t}\r\n\r\n\t@Test\r\n\t@PactVerification\r\n\tpublic void verifyZooService() throws Exception\r\n\t{\r\n\t\tZooClient fakeZooClient = new ZooClient(FAKE_ZOO_CLIENT_SERVER, new RequestMethodExecutorLive());\r\n\t\t\r\n\t\tAnimal grizzly = fakeZooClient.saveAnimal(\"grizzly bear\", \"Bubbles\");\r\n\t\t\r\n\t\tassertThat(grizzly.getAnimalType(), is(\"grizzly bear\"));\r\n\t\tassertThat(grizzly.getName(), is(\"Bubbles\"));\r\n\t\tassertThat(grizzly.getFeedingLog().size(), is(0));\r\n\t}`\r\n\r\nHere's the pact file that generates:\r\n`{\r\n    \"provider\": {\r\n        \"name\": \"zoo_ws\"\r\n    },\r\n    \"consumer\": {\r\n        \"name\": \"zookeeper\"\r\n    },\r\n    \"interactions\": [\r\n        {\r\n            \"description\": \"a POST request to add a grizzly bear named Bubbles\",\r\n            \"request\": {\r\n                \"method\": \"POST\",\r\n                \"path\": \"/zoo-ws/animals\",\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n                },\r\n                \"body\": \"type=grizzly+bear&name=Bubbles\"\r\n            },\r\n            \"response\": {\r\n                \"status\": 200,\r\n                \"headers\": {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                \"body\": {\r\n                    \"feedingLog\": [\r\n                        \r\n                    ],\r\n                    \"animalType\": \"grizzly bear\",\r\n                    \"name\": \"Bubbles\"\r\n                },\r\n                \"matchingRules\": {\r\n                    \"body\": {\r\n                        \"$.name\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"type\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n            \"providerStates\": [\r\n                {\r\n                    \"name\": \"grizzly bear can be added to zoo\"\r\n                }\r\n            ]\r\n        }\r\n    ],\r\n    \"metadata\": {\r\n        \"pact-specification\": {\r\n            \"version\": \"3.0.0\"\r\n        },\r\n        \"pact-jvm\": {\r\n            \"version\": \"3.5.5\"\r\n        }\r\n    }\r\n}`\r\n\r\nAnd here's the producer side: \r\n`@RunWith(PactRunner.class)\r\n@PactFolder(\"pact\")\r\n@Provider(\"zoo_ws\")\r\n@Consumer(\"zookeeper\")\r\npublic class ZookeeperPactTest \r\n{\r\n\t@TestTarget\r\n\tpublic final Target target = new HttpTarget(8332);\r\n\tprivate Server server;\r\n\tprivate AnimalDao dao = mock(AnimalDao.class);\r\n\t\r\n\tprivate class AnimalResourceConfig extends ResourceConfig\r\n\t{\r\n\t\tpublic AnimalResourceConfig(AnimalResource resource)\r\n\t\t{\r\n\t\t\tthis.register(resource);\r\n\t\t}\r\n\t}\r\n\t\r\n\t@Before\r\n\tpublic void setUpService() throws Exception\r\n\t{\r\n\t\tAnimalResource animalResource = new AnimalResource(dao);\r\n\t\t\r\n\t\tServletContextHandler context = new ServletContextHandler();\r\n\t\tcontext.setContextPath(\"/zoo-ws\");\r\n\t\t\r\n\t\tServletContainer sc = new ServletContainer(new AnimalResourceConfig(animalResource));\r\n\t\tServletHolder servletHolder = new ServletHolder(sc);\r\n\t\tcontext.addServlet(servletHolder, \"/*\");\r\n\t\t\r\n\t\tserver = new Server(8332);\r\n\t\tserver.setHandler(context);\r\n\t\tserver.setStopAtShutdown(true);\r\n\t\t\r\n\t\tserver.start();\r\n\t}\r\n\t\r\n\t@After\r\n\tpublic void tearDownService() throws Exception\r\n\t{\r\n\t\tserver.stop();\r\n\t}\r\n\t\r\n\t@State(\"grizzly bear can be added to zoo\")\r\n\tpublic void grizzlyIsAdded()\r\n\t{\r\n\t\twhen(dao.saveAnimal(\"grizzly bear\", \"Bubbles\")).thenReturn(new Animal(\"grizzly bear\", \"Bubbles\"));\r\n\t}`\r\n\r\nAnd the resource itself:\r\n`@Path(\"/animals\")\r\n@Produces(MediaType.APPLICATION_JSON)\r\n@AllArgsConstructor(onConstructor=@__({@Inject}))\r\npublic class AnimalResource \r\n{\r\n\tprivate final AnimalDao animalDao;\r\n\t\r\n\t@Path(\"{type}\")\r\n\t@GET\r\n\tpublic Response getAnimal(@PathParam(\"type\") String animalType)\r\n\t{\r\n\t\treturn Response.ok(JsonUtils2.objToJson(animalDao.getAnimal(animalType))).build();\r\n\t}\r\n\t\r\n\t@POST\r\n\tpublic Response saveAnimal(@FormParam(\"type\") String animalType, @FormParam(\"name\") String animalName)\r\n\t{\r\n\t\treturn Response.ok(JsonUtils2.objToJson(animalDao.saveAnimal(animalType, animalName))).build();\r\n\t}\r\n}`", "url": "https://github.com/DiUS/pact-jvm/issues/560", "user": "ghost", "labels": ["bug"], "created": "2017-10-11 22:07:46", "closed": "2017-12-20 04:27:00", "commits": {"e5ab366921928d3af8502aaa350ea8870a2c272b": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "fe8bce3d811e6deb909ce24062375760e6bc4ad9": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 69.00027777777778, "commitsDetails": [{"commitHash": "e5ab366921928d3af8502aaa350ea8870a2c272b", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d1747c8e3de179c8529ed54aa4717a98738c4c69"], "nameRev": "e5ab366921928d3af8502aaa350ea8870a2c272b tags/3_5_9~29", "commitMessage": "Converted ProviderClient to Kotlin and added a test for encoded form posts #560\n", "commitDateTime": "2017-10-24 15:51:11", "authoredDateTime": "2017-10-24 15:51:07", "commitGitStats": [{"filePath": "build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/junit/formpost/Animal.groovy", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/junit/formpost/FormPostTest.groovy", "insertions": 50, "deletions": 0, "lines": 50}, {"filePath": "pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/junit/formpost/ZooClient.groovy", "insertions": 19, "deletions": 0, "lines": 19}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/ProviderState.kt", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/ProviderVerifierStateChangeSpec.groovy", "insertions": 15, "deletions": 28, "lines": 43}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/target/HttpTarget.java", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "pact-jvm-provider/build.gradle", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/HttpClientFactory.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderClient.groovy", "insertions": 0, "deletions": 284, "lines": 284}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderInfo.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy", "insertions": 8, "deletions": 7, "lines": 15}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/StateChange.groovy", "insertions": 11, "deletions": 9, "lines": 20}, {"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderClient.kt", "insertions": 284, "deletions": 0, "lines": 284}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ProviderVerifierSpec.groovy", "insertions": 7, "deletions": 7, "lines": 14}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/StateChangeSpec.groovy", "insertions": 21, "deletions": 19, "lines": 40}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/groovysupport/ProviderClientSpec.groovy", "insertions": 54, "deletions": 25, "lines": 79}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/groovysupport/ProviderClientTest.groovy", "insertions": 12, "deletions": 10, "lines": 22}, {"filePath": "pact-jvm-provider/src/test/java/au/com/dius/pact/provider/groovysupport/GroovyJavaUtils.java", "insertions": 7, "deletions": 2, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "HttpTarget.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.target.HttpTarget.testInteraction(java.lang.String,au.com.dius.pact.model.Interaction,au.com.dius.pact.model.PactSource)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "GroovyJavaUtils.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.functionRequestFilter()", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.function2RequestFilter()", "TOT": 4, "UPD": 1, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.function2RequestFilterWithParametersSwapped()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.invalidFunction2RequestFilter()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.supplierRequestFilter()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.callableRequestFilter()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "fe8bce3d811e6deb909ce24062375760e6bc4ad9", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e5ab366921928d3af8502aaa350ea8870a2c272b"], "nameRev": "fe8bce3d811e6deb909ce24062375760e6bc4ad9 tags/3_5_9~28", "commitMessage": "Fix regression when verifying form posts with the form parameters in the body #560\n", "commitDateTime": "2017-10-24 16:21:16", "authoredDateTime": "2017-10-24 16:21:16", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderClient.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/groovysupport/ProviderClientSpec.groovy", "insertions": 12, "deletions": 2, "lines": 14}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e5ab366921928d3af8502aaa350ea8870a2c272b", "fe8bce3d811e6deb909ce24062375760e6bc4ad9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 322, "deletions": 308, "lines": 630, "gitFilesChange": 10}, "spoonStatsSummary": {"TOT": 13.0, "UPD": 5.0, "INS": 4.0, "MOV": 4.0, "DEL": 0.0, "spoonFilesChanged": 2, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider/ProviderClient.kt", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/StateChange.groovy", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderClient.groovy", "pact-jvm-provider", "", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/HttpClientFactory.groovy", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderInfo.groovy", "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/ProviderState.kt"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.callableRequestFilter()", "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.supplierRequestFilter()", "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.function2RequestFilter()", "au.com.dius.pact.provider.junit.target.HttpTarget.testInteraction(java.lang.String,au.com.dius.pact.model.Interaction,au.com.dius.pact.model.PactSource)", "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.invalidFunction2RequestFilter()", "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.functionRequestFilter()", "au.com.dius.pact.provider.groovysupport.GroovyJavaUtils.function2RequestFilterWithParametersSwapped()"]}, {"title": "eachLike without object name only produces one child", "body": "I would like to model my mock such that its body consists of an unnamed array of n elements. The below code using `eachLike` only creates one element in the array, when it should produce three.\r\n\r\n```\r\nwithBody(eachLike(3, {\r\n   id identifier\r\n   state(\"COMPLETED\")\r\n   type regexp(\"(A|B)\", \"A\")\r\n }))\r\n```\r\n\r\nOddly enough, if I name the name collection, it actually generates three objects:\r\n```\r\nwithBody {\r\n  namedObject eachLike(3, {\r\n  id identifier\r\n  })\r\n}\r\n```\r\n\r\nThis produces an array named `namedObject` with three children.\r\n\r\nWhere do I go wrong? Is this a bug?", "url": "https://github.com/DiUS/pact-jvm/issues/555", "user": "bengro", "labels": ["bug"], "created": "2017-10-04 19:00:10", "closed": "2019-04-14 09:30:47", "commits": {"0ba381b91b97ea249aa18fb5ca374b8b6f9a8b87": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 556.0002777777778, "commitsDetails": [{"commitHash": "0ba381b91b97ea249aa18fb5ca374b8b6f9a8b87", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["b4ed910683f6690f940f04056e3f1b800de81784"], "nameRev": "0ba381b91b97ea249aa18fb5ca374b8b6f9a8b87 tags/3_6_4~3", "commitMessage": "fix: Groovy DSL was not honouring the number of examples to generate #555\n", "commitDateTime": "2019-04-14 12:20:37", "authoredDateTime": "2019-04-14 12:20:37", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilder.groovy", "insertions": 11, "deletions": 5, "lines": 16}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilderSpec.groovy", "insertions": 23, "deletions": 0, "lines": 23}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0ba381b91b97ea249aa18fb5ca374b8b6f9a8b87"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 5, "lines": 16, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy"]}, {"title": "Underscore (\"_\") in the name of the key throwing error", "body": "I have a response that has keys separated by underscore (\"\\_\") \r\nWhen I try to generate a pact with stringType for these keys, I get the following error\r\n<code>au.com.dius.pact.model.InvalidPathExpression: \"_\" is not allowed in an identifier in path expression \"$.blah\\_blah_type\" at index 5</code>\r\n\r\nHere's what my PactDslJsonBody looks like\r\n``` return new PactDslJsonBody()\r\n                    .stringType(\"blah_blah_type\")\r\n                    .date(\"blah_early_pull_date\", \"yyyy-MM-dd\")\r\n                    .date(\"blah_compliance_date\", \"yyyy-MM-dd\")\r\n                    .timestamp(\"created_date\", \"yyyy-MM-dd hh:mm:ss\")\r\n                    .object(\"blah_blah_id\")\r\n                        .numberType(\"blah_blah_number\")\r\n                        .numberType(\"blah_id\")\r\n\r\n``` \r\nIf I convert it to string the Pact file gets generated but at the Provider end it matches the response literally instead of just matching the key and the data type of the value.", "url": "https://github.com/DiUS/pact-jvm/issues/548", "user": "sunitav", "labels": ["bug"], "created": "2017-09-24 20:11:41", "closed": "2017-10-18 02:56:13", "commits": {"cefe0df69d38b6be8344ec957bbe219680d62a92": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "bfc78ec5a2444c0951f20aaccaa7b8b8ca6cd772": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 23.00027777777778, "commitsDetails": [{"commitHash": "cefe0df69d38b6be8344ec957bbe219680d62a92", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["8753684ec7857969362b75ba2ee60f9e73e8682e"], "nameRev": "cefe0df69d38b6be8344ec957bbe219680d62a92 tags/3_5_8~4", "commitMessage": "Fix for matcher paths with underscores #548\n", "commitDateTime": "2017-10-13 09:03:54", "authoredDateTime": "2017-10-13 09:03:54", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/junit/PactDslJsonBodyTest.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PathExpressions.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PathExpressionsSpec.groovy", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonBodyTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.junit.PactDslJsonBodyTest.createPact(au.com.dius.pact.consumer.dsl.PactDslWithProvider)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "bfc78ec5a2444c0951f20aaccaa7b8b8ca6cd772", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["eb5e8ae30f8712b42fe8e868274dfeb700a139b0"], "nameRev": "bfc78ec5a2444c0951f20aaccaa7b8b8ca6cd772 tags/3_5_8_2.11~6", "commitMessage": "Fix for matcher paths with underscores #548\n", "commitDateTime": "2017-10-13 13:08:29", "authoredDateTime": "2017-10-13 09:03:54", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/junit/PactDslJsonBodyTest.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PathExpressions.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PathExpressionsSpec.groovy", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonBodyTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.junit.PactDslJsonBodyTest.createPact(au.com.dius.pact.consumer.dsl.PactDslWithProvider)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cefe0df69d38b6be8344ec957bbe219680d62a92"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/PathExpressions.kt"], "changesInPackagesSPOON": []}, {"title": "Can't fetch pacts from the broker with tags containing a slash", "body": "The tags are not being encoded correctly, which results in a 404 from the broker.\r\n\r\n```\r\n404 Not Found response from the pact broker (URL: 'https://test.pact.dius.com.au:443', LINK: 'https://test.pact.dius.com.au/pacts/provider/Activity Service/latest/test/test-tag')\r\nau.com.dius.pact.pactbroker.NotFoundHalResponse: 404 Not Found response from the pact broker (URL: 'https://test.pact.dius.com.au:443', LINK: 'https://test.pact.dius.com.au/pacts/provider/Activity Service/latest/test/test-tag')\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/536", "user": "uglyog", "labels": ["bug"], "created": "2017-09-14 02:23:45", "closed": "2017-09-24 05:13:53", "commits": {"f15f2559bf2c6bafcebf56b86eb81400fa2b3ef0": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "eff6d4be6c19c7ce32170be3225fad0d08195564": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "75467f282ee864af79063ae0630eff0f816c0224": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "043ee22e237bc4a14307711af4f9fe2c6c442044": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "ec92b0e0f4264f4921f24ded0aa28d1889a3f981": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "b5c064e868c145ef235e84c8226fab60a6ddb254": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "f15f2559bf2c6bafcebf56b86eb81400fa2b3ef0", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["b2edaa94b5ae2ac93df8dd31aa5c09a829e424a3"], "nameRev": "f15f2559bf2c6bafcebf56b86eb81400fa2b3ef0 tags/3_5_6~13", "commitMessage": "With HAL templated URLs, encode the expanded template values #536\n", "commitDateTime": "2017-09-15 12:07:16", "authoredDateTime": "2017-09-15 12:07:16", "commitGitStats": [{"filePath": "build.gradle", "insertions": 0, "deletions": 9, "lines": 9}, {"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/RegexpMatcher.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/UrlMatcher.groovy", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilderSpec.groovy", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/UrlMatcherSpec.groovy", "insertions": 15, "deletions": 0, "lines": 15}, {"filePath": "pact-jvm-consumer-junit/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-pact-broker/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker/HalClient.groovy", "insertions": 12, "deletions": 85, "lines": 97}, {"filePath": "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker/InvalidNavigationRequest.groovy", "insertions": 0, "deletions": 10, "lines": 10}, {"filePath": "pact-jvm-pact-broker/src/main/kotlin/au/com/dius/pact/pactbroker/Exceptions.kt", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "pact-jvm-pact-broker/src/main/kotlin/au/com/dius/pact/pactbroker/HalClient.kt", "insertions": 133, "deletions": 1, "lines": 134}, {"filePath": "pact-jvm-pact-broker/src/test/groovy/au/com/dius/pact/provider/broker/HalClientSpec.groovy", "insertions": 103, "deletions": 77, "lines": 180}, {"filePath": "pact-jvm-provider-junit/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/broker/{PactBrokerClientSpec.groovy => PactBrokerClientPactSpec.groovy}", "insertions": 6, "deletions": 6, "lines": 12}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "eff6d4be6c19c7ce32170be3225fad0d08195564", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["f15f2559bf2c6bafcebf56b86eb81400fa2b3ef0"], "nameRev": "eff6d4be6c19c7ce32170be3225fad0d08195564 tags/3_5_6~12", "commitMessage": "Guard against double encoding url unsafe characters #536\n", "commitDateTime": "2017-09-15 14:06:19", "authoredDateTime": "2017-09-15 14:06:19", "commitGitStats": [{"filePath": "pact-jvm-pact-broker/src/main/kotlin/au/com/dius/pact/pactbroker/HalClient.kt", "insertions": 31, "deletions": 8, "lines": 39}, {"filePath": "pact-jvm-pact-broker/src/test/groovy/au/com/dius/pact/provider/broker/HalClientSpec.groovy", "insertions": 34, "deletions": 1, "lines": 35}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "75467f282ee864af79063ae0630eff0f816c0224", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["eff6d4be6c19c7ce32170be3225fad0d08195564"], "nameRev": "75467f282ee864af79063ae0630eff0f816c0224 tags/3_5_6~11", "commitMessage": "Use the low level Gson json parser for better control over primitives #536\n", "commitDateTime": "2017-09-15 16:27:24", "authoredDateTime": "2017-09-15 16:27:24", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker/HalClient.groovy", "insertions": 34, "deletions": 6, "lines": 40}, {"filePath": "pact-jvm-pact-broker/src/main/kotlin/au/com/dius/pact/pactbroker/HalClient.kt", "insertions": 30, "deletions": 22, "lines": 52}, {"filePath": "pact-jvm-pact-broker/src/test/groovy/au/com/dius/pact/provider/broker/HalClientSpec.groovy", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "043ee22e237bc4a14307711af4f9fe2c6c442044", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["75467f282ee864af79063ae0630eff0f816c0224"], "nameRev": "043ee22e237bc4a14307711af4f9fe2c6c442044 tags/3_5_6~10", "commitMessage": "Return the correct data structure when fetching a pact from the pact broker #536\n", "commitDateTime": "2017-09-15 17:03:44", "authoredDateTime": "2017-09-15 17:03:44", "commitGitStats": [{"filePath": "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker/PactBrokerClient.groovy", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-jvm-pact-broker/src/main/kotlin/au/com/dius/pact/pactbroker/HalClient.kt", "insertions": 16, "deletions": 2, "lines": 18}, {"filePath": "pact-jvm-pact-broker/src/test/groovy/au/com/dius/pact/provider/broker/PactBrokerClientSpec.groovy", "insertions": 30, "deletions": 0, "lines": 30}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "ec92b0e0f4264f4921f24ded0aa28d1889a3f981", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["05f87385b20fffb5a8b2508172b711b7feee3b1c"], "nameRev": "ec92b0e0f4264f4921f24ded0aa28d1889a3f981 tags/3_5_7~10", "commitMessage": "Encode the parameters when uploading a pact, incase the tag has a slash #536\n", "commitDateTime": "2017-09-28 10:11:37", "authoredDateTime": "2017-09-27 14:11:35", "commitGitStats": [{"filePath": "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker/PactBrokerClient.groovy", "insertions": 8, "deletions": 4, "lines": 12}, {"filePath": "pact-jvm-pact-broker/src/test/groovy/au/com/dius/pact/provider/broker/PactBrokerClientSpec.groovy", "insertions": 29, "deletions": 0, "lines": 29}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "b5c064e868c145ef235e84c8226fab60a6ddb254", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["be9ee18a3bc8ee5b31379aef2aa468c4d3c22892"], "nameRev": "b5c064e868c145ef235e84c8226fab60a6ddb254 tags/3_5_7-jre7_0~13", "commitMessage": "Encode the parameters when uploading a pact, incase the tag has a slash #536\n", "commitDateTime": "2017-10-03 14:44:38", "authoredDateTime": "2017-09-27 14:11:35", "commitGitStats": [{"filePath": "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker/PactBrokerClient.groovy", "insertions": 8, "deletions": 4, "lines": 12}, {"filePath": "pact-jvm-pact-broker/src/test/groovy/au/com/dius/pact/provider/broker/PactBrokerClientSpec.groovy", "insertions": 29, "deletions": 0, "lines": 29}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f15f2559bf2c6bafcebf56b86eb81400fa2b3ef0", "eff6d4be6c19c7ce32170be3225fad0d08195564", "75467f282ee864af79063ae0630eff0f816c0224", "043ee22e237bc4a14307711af4f9fe2c6c442044", "ec92b0e0f4264f4921f24ded0aa28d1889a3f981"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 5, "gitStatsSummary": {"insertions": 287, "deletions": 159, "lines": 446, "gitFilesChange": 12}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-pact-broker/src/main/kotlin/au/com/dius/pact/pactbroker/HalClient.kt", "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker", "pact-jvm-model", "pact-jvm-consumer-junit", "pact-jvm-pact-broker/src/main/kotlin/au/com/dius/pact/pactbroker/Exceptions.kt", "pact-jvm-provider-junit", "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy", "pact-jvm-pact-broker", ""]}, {"title": "@IgnoreNoPactsToVerify doesnt work with tags", "body": "Using pact_jvm_provider_spring:\r\n\r\n@IgnoreNoPactsToVerify doesn't work if you list tags on @PactBroker\r\n\r\nau.com.dius.pact.provider.junit.loader.NoPactsFoundException: No consumer pacts were found for provider 'MyService' and tag 'prod'. (URL [])\r\n\r\n@RunWith(RestPactRunner.class)\r\n@Provider(\"MyService\")\r\n@IgnoreNoPactsToVerify\r\n@PactBroker(host = \"example.com\", port = \"7500\", tags = \"dev,prod\")", "url": "https://github.com/DiUS/pact-jvm/issues/535", "user": "Nalha", "labels": ["bug"], "created": "2017-09-13 12:47:20", "closed": "2019-03-31 09:23:10", "commits": {"a8ac3ec56235bfd1f1424c991dd622d6d29a5d46": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 563.0002777777778, "commitsDetails": [{"commitHash": "a8ac3ec56235bfd1f1424c991dd622d6d29a5d46", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d9fa23cd7272e8c88cd8965f63d49ba9a24b2a30"], "nameRev": "a8ac3ec56235bfd1f1424c991dd622d6d29a5d46 tags/3_5_6~3", "commitMessage": "Correct the JUnit pact runner to not fail when no pacts are found and the IgnoreNoPactsToVerify is present #535\n", "commitDateTime": "2017-09-24 15:11:46", "authoredDateTime": "2017-09-24 15:11:46", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/PactRunner.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactBrokerLoader.java", "insertions": 10, "deletions": 1, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.PactRunner", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "PactBrokerLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.getUrlForProvider(java.lang.String,java.lang.String,au.com.dius.pact.provider.broker.PactBrokerClient)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a8ac3ec56235bfd1f1424c991dd622d6d29a5d46"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 14, "deletions": 2, "lines": 16, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 6, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 1, "spoonFilesChanged": 2, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.PactRunner", "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.getUrlForProvider(java.lang.String,java.lang.String,au.com.dius.pact.provider.broker.PactBrokerClient)", "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String)"]}, {"title": "pact-jvm-provider-maven_2.11:3.5.4-jre7.0:Verification filure", "body": "pact-jvm-provider-maven_2.11:3.5.4-jre7.0 failing with the following error, but works fine with pact-jvm-provider-maven_2.11:3.5.4. (Java 8 version)\r\n\r\n[ERROR] Failed to execute goal au.com.dius:pact-jvm-provider-maven_2.11:3.5.4-jre7.0:verify (default) on project oep.store.service.impl: Execution default of goal au.com.dius:pact-jvm-provider-maven_2.11:3.5.4-jre7.0:verify failed: No signature of method: com.sun.proxy.$Proxy28.accept() is applicable for argument types: (groovy.json.internal.LazyMap) values: [[href:http://<BROKER_URL>/pacts/provider/<PROVIDER>/consumer/<CONSUMER>/version/<VERSION>, ...]]\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/533", "user": "jayanth1007", "labels": ["bug"], "created": "2017-09-07 20:51:25", "closed": "2020-02-22 22:41:18", "commits": {"1c21be21dfe568a79d90714e6b326f6b08b8575e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "edd9dd0e148d0f7c45c7d135c12173552e1a2631": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "0b50a52fc192d7c0024a3d6e1fd6c97794f544dc": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 898.0002777777778, "commitsDetails": [{"commitHash": "1c21be21dfe568a79d90714e6b326f6b08b8575e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["9c646dff90007920b38366b29bf5635c912c93e6"], "nameRev": "1c21be21dfe568a79d90714e6b326f6b08b8575e tags/3_5_5-jre7_0~11", "commitMessage": "Add a test for HalClient forAll method #533\n", "commitDateTime": "2017-09-10 12:25:47", "authoredDateTime": "2017-09-10 12:21:42", "commitGitStats": [{"filePath": "pact-jvm-pact-broker/src/test/groovy/au/com/dius/pact/provider/broker/HalClientSpec.groovy", "insertions": 67, "deletions": 1, "lines": 68}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "edd9dd0e148d0f7c45c7d135c12173552e1a2631", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1c21be21dfe568a79d90714e6b326f6b08b8575e"], "nameRev": "edd9dd0e148d0f7c45c7d135c12173552e1a2631 tags/3_5_5-jre7_0~10", "commitMessage": "Calling incorrect method name after converting JDK8 code to JDK7 #533\n", "commitDateTime": "2017-09-10 12:27:07", "authoredDateTime": "2017-09-10 12:27:07", "commitGitStats": [{"filePath": "pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker/HalClient.groovy", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "0b50a52fc192d7c0024a3d6e1fd6c97794f544dc", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["486c091658e7587f17f2f1f86f347b6687979fde"], "nameRev": "0b50a52fc192d7c0024a3d6e1fd6c97794f544dc tags/3_5_5~2", "commitMessage": "Add a test for HalClient forAll method #533\n", "commitDateTime": "2017-09-10 12:30:18", "authoredDateTime": "2017-09-10 12:21:42", "commitGitStats": [{"filePath": "pact-jvm-pact-broker/src/test/groovy/au/com/dius/pact/provider/broker/HalClientSpec.groovy", "insertions": 69, "deletions": 1, "lines": 70}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1c21be21dfe568a79d90714e6b326f6b08b8575e", "edd9dd0e148d0f7c45c7d135c12173552e1a2631"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-pact-broker/src/main/groovy/au/com/dius/pact/provider/broker"]}, {"title": "upgrading pact jvm consumer to 3.5.4 gives java.lang.IllegalAccessError", "body": "We tried upgrading the pact jvm-consumer version from 3.2.4 to 3.5.4\r\n\r\nWe are getting following error while generating pact json from consumer\r\n\r\n```\r\njava.lang.IllegalAccessError: tried to access method com.google.common.collect.Lists.cartesianProduct([Ljava/util/List;)Ljava/util/List; from class au.com.dius.pact.model.PactMerge\r\n```\r\n\r\nAnother observation, we tried example [ExampleJavaConsumerPactRuleTest](https://github.com/DiUS/pact-jvm/blob/master/pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/examples/ExampleJavaConsumerPactRuleTest.java) , It executes successfully and generate pact json. However when same request is executed once again, it fails with the same error mentioned above. ", "url": "https://github.com/DiUS/pact-jvm/issues/531", "user": "shailesh-waman", "labels": ["bug"], "created": "2017-09-05 15:29:09", "closed": "2018-02-22 23:59:50", "commits": {}, "ttf": 170.00027777777777, "commitsDetails": []}, {"title": "[pact-jvm-provider-junit] If pactbroker.tags includes latest and more, pact attempts an invalid GET request.", "body": "If you set the env variable pactbroker.tags=latest, the following call is made.\r\npact_broker.example/pacts/provider/my_provider/latest\r\n\r\nHowever, if you attempt to have pactbroker.tags=latest,production then a\r\npact_broker.example/pacts/provider/my_provider/latest/latest\r\ncall is made.\r\n\r\nexample run VM arguments:\r\nmvn testgoal -Dpactbroker.host=pact_broker.example -Dpactbroker.port=80 -Dpactbroker.tags=latest,production\r\n\r\nHere is the error message:\r\n```\r\nau.com.dius.pact.provider.junit.loader.NoPactsFoundException: No consumer pacts were found for provider 'provider' and tag 'latest'. (URL [])\r\n\tat au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(PactBrokerLoader.java:100)\r\n\tat au.com.dius.pact.provider.junit.loader.PactBrokerLoader.load(PactBrokerLoader.java:71)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.<init>(PactRunner.java:76)\r\n\tat au.com.dius.pact.provider.junit.RestPactRunner.<init>(RestPactRunner.java:14)\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n\tat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\r\n\tat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\r\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n\tat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\r\n\tat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n\tat org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createUnfilteredTest(JUnit4TestLoader.java:84)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.createTest(JUnit4TestLoader.java:70)\r\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestLoader.loadTests(JUnit4TestLoader.java:43)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:444)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\r\n\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/527", "user": "jefdo", "labels": ["bug"], "created": "2017-08-28 20:29:41", "closed": "2017-11-15 01:31:51", "commits": {"49b6e12be0e9bbec500d5f8732358ebffdad641a": {"commitGHEventType": "closed", "commitUser": "uglyog"}, "1fd7e558969b0dc7436cb9e827fd6e907d102ef0": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 78.00027777777778, "commitsDetails": [{"commitHash": "49b6e12be0e9bbec500d5f8732358ebffdad641a", "commitGHEventType": "closed", "commitUser": "uglyog", "commitParents": ["13555a580b23691a3efe658844aaedea2fabdb7d"], "nameRev": "49b6e12be0e9bbec500d5f8732358ebffdad641a tags/3_5_9~3^2~1", "commitMessage": "fix(provider-junit): fixes #527\n", "commitDateTime": "2017-11-13 16:01:15", "authoredDateTime": "2017-11-13 16:01:15", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactBrokerLoader.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/loader/PactBrokerLoaderSpec.groovy", "insertions": 18, "deletions": 3, "lines": 21}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactBrokerLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "1fd7e558969b0dc7436cb9e827fd6e907d102ef0", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["2f76ff65daea437ca6ca7f25ab4a7eb350f852cc", "8dff8715256b1775cb0db95d87617aea8aa3d572"], "nameRev": "1fd7e558969b0dc7436cb9e827fd6e907d102ef0 tags/3_5_9~3", "commitMessage": "Merge pull request #584 from artamonovkirill/master\n\nfix(provider-junit): fixes #527", "commitDateTime": "2017-11-15 12:31:50", "authoredDateTime": "2017-11-15 12:31:50", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactBrokerLoader.java", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/loader/PactBrokerLoaderSpec.groovy", "insertions": 18, "deletions": 3, "lines": 21}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactBrokerLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.load(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["49b6e12be0e9bbec500d5f8732358ebffdad641a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String)"]}, {"title": "DateGenerator and TimeGenerator unable to handle format with timezone", "body": "Using timestamp format with timezone, i.e. timestamp(\"dateTime\", \"yyyy-MM-dd'T'HH:mm:ssZ\"), results in the following exception:\r\n\r\n`java.time.temporal.UnsupportedTemporalTypeException: Unsupported field: OffsetSeconds\r\n\tat java.time.LocalDate.get0(LocalDate.java:680)\r\n\tat java.time.LocalDate.getLong(LocalDate.java:659)\r\n\tat java.time.LocalDateTime.getLong(LocalDateTime.java:720)\r\n\tat java.time.format.DateTimePrintContext.getValue(DateTimePrintContext.java:298)\r\n\tat java.time.format.DateTimeFormatterBuilder$OffsetIdPrinterParser.format(DateTimeFormatterBuilder.java:3335)\r\n\tat java.time.format.DateTimeFormatterBuilder$CompositePrinterParser.format(DateTimeFormatterBuilder.java:2179)\r\n\tat java.time.format.DateTimeFormatter.formatTo(DateTimeFormatter.java:1746)\r\n\tat java.time.format.DateTimeFormatter.format(DateTimeFormatter.java:1720)\r\n\tat java.time.LocalDateTime.format(LocalDateTime.java:1752)\r\n\tat au.com.dius.pact.model.generators.DateTimeGenerator.generate(Generator.kt:224)\r\n\tat au.com.dius.pact.model.generators.JsonContentTypeHandler$applyKey$1.invoke(Generators.kt:44)\r\n\tat au.com.dius.pact.model.generators.JsonContentTypeHandler$applyKey$1.invoke(Generators.kt:32)\r\n\tat au.com.dius.pact.model.generators.JsonContentTypeHandler.queryObjectGraph(Generators.kt:99)\r\n\tat au.com.dius.pact.model.generators.JsonContentTypeHandler.applyKey(Generators.kt:41)\r\n\tat au.com.dius.pact.model.generators.Generators$processBody$1$1.invoke(Generators.kt:206)\r\n\tat au.com.dius.pact.model.generators.Generators$processBody$1$1.invoke(Generators.kt:104)\r\n\tat au.com.dius.pact.model.generators.Generators.applyGenerator(Generators.kt:184)\r\n\tat au.com.dius.pact.model.generators.Generators$processBody$1.invoke(Generators.kt:204)\r\n\tat au.com.dius.pact.model.generators.Generators$processBody$1.invoke(Generators.kt:104)\r\n\tat au.com.dius.pact.model.generators.JsonContentTypeHandler.processBody(Generators.kt:35)\r\n\tat au.com.dius.pact.model.generators.Generators.processBody(Generators.kt:203)\r\n\tat au.com.dius.pact.model.generators.Generators.applyBodyGenerators(Generators.kt:194)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\r\n\tat au.com.dius.pact.model.Response.generatedResponse(Response.groovy:54)\r\n\tat au.com.dius.pact.consumer.BaseMockServer.generatePactResponse(MockHttpServer.kt:101)`\r\n\r\nChecked the exception and it is caused by using LocalDate and LocalTime in the Generator class. Work-around is to provide an example instead of letting the timestamp be generated.", "url": "https://github.com/DiUS/pact-jvm/issues/523", "user": "m-aster22", "labels": ["bug"], "created": "2017-08-21 23:54:23", "closed": "2018-09-21 04:20:05", "commits": {"125f2858ed4a7ad530d64bfd49e4fd34e168ffc1": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 395.0002777777778, "commitsDetails": [{"commitHash": "125f2858ed4a7ad530d64bfd49e4fd34e168ffc1", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["17ee855481669c2d17d49f8e715af31a0c430f30"], "nameRev": "125f2858ed4a7ad530d64bfd49e4fd34e168ffc1 tags/3_5_4-rc_0~5^2~3", "commitMessage": "Handle timezones in the date and time generators #523\n", "commitDateTime": "2017-08-22 10:19:20", "authoredDateTime": "2017-08-22 10:19:20", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators/Generator.kt", "insertions": 12, "deletions": 9, "lines": 21}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/generators/DateGeneratorSpec.groovy", "insertions": 12, "deletions": 0, "lines": 12}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/generators/DateTimeGeneratorSpec.groovy", "insertions": 13, "deletions": 0, "lines": 13}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/generators/TimeGeneratorSpec.groovy", "insertions": 12, "deletions": 0, "lines": 12}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["125f2858ed4a7ad530d64bfd49e4fd34e168ffc1"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 12, "deletions": 9, "lines": 21, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/generators"]}, {"title": "Results are not published to pact broker when using @RunWith(FilteredPactRunner) with jvm-provider-junit", "body": "Note: It works fine when using the normal @PactRunner.", "url": "https://github.com/DiUS/pact-jvm/issues/522", "user": "valemany", "labels": ["bug"], "created": "2017-08-21 19:02:29", "closed": "2019-04-21 05:46:22", "commits": {"c42850115e75215da8b942f4e8ba4a7ff08a2627": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "d413338c763773d66a230b486bb734fdb6ef2a86": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "02cfb8aed6261e2d72c599d707e5165bb1f8394a": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 607.0002777777778, "commitsDetails": [{"commitHash": "c42850115e75215da8b942f4e8ba4a7ff08a2627", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["3e67db3f8f160d8cab10f3f3609834821282785c"], "nameRev": "c42850115e75215da8b942f4e8ba4a7ff08a2627 tags/3_5_4-rc_0~5^2~5", "commitMessage": "when filtering pacts, copy the pact source #522\n", "commitDateTime": "2017-08-22 08:58:30", "authoredDateTime": "2017-08-22 08:58:30", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponsePact.groovy", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/RequestResponsePactSpec.groovy", "insertions": 28, "deletions": 33, "lines": 61}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/v3/messaging/MessagePactSpec.groovy", "insertions": 25, "deletions": 19, "lines": 44}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "d413338c763773d66a230b486bb734fdb6ef2a86", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["125f2858ed4a7ad530d64bfd49e4fd34e168ffc1"], "nameRev": "d413338c763773d66a230b486bb734fdb6ef2a86 tags/3_5_4-rc_0~5^2~2", "commitMessage": "Do not publish verification results if the interactions have been filtered #522\n", "commitDateTime": "2017-08-22 17:29:46", "authoredDateTime": "2017-08-22 17:17:10", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponsePact.groovy", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/MessagePact.groovy", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/FilteredPact.kt", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/Pact.kt", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/InteractionRunner.java", "insertions": 10, "deletions": 1, "lines": 11}, {"filePath": "pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/FilteredPactRunner.kt", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/InteractionRunnerSpec.groovy", "insertions": 41, "deletions": 0, "lines": 41}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy", "insertions": 9, "deletions": 15, "lines": 24}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ProviderVerifierSpec.groovy", "insertions": 35, "deletions": 30, "lines": 65}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InteractionRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.reportVerificationResults(java.lang.Boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.run(org.junit.runner.notification.RunNotifier)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "02cfb8aed6261e2d72c599d707e5165bb1f8394a", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["86e728d70932b6df76feef6aa99bdcd1132b698c"], "nameRev": "02cfb8aed6261e2d72c599d707e5165bb1f8394a tags/3_6_5~10", "commitMessage": "feat: enabel publishing of verification results after all interactions have been verified #522\n", "commitDateTime": "2019-04-20 13:28:04", "authoredDateTime": "2019-04-20 13:28:04", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit/InteractionRunner.kt", "insertions": 6, "deletions": 19, "lines": 25}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/InteractionRunnerSpec.groovy", "insertions": 6, "deletions": 40, "lines": 46}, {"filePath": "pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5/PactJUnit5VerificationProvider.kt", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "{pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5 => pact-jvm-provider/src/main/kotlin/au/com/dius/pact/provider}/TestResultAccumulator.kt", "insertions": 7, "deletions": 5, "lines": 12}, {"filePath": "{pact-jvm-provider-junit5/src/test/groovy/au/com/dius/pact/provider/junit5 => pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider}/TestResultAccumulatorSpec.groovy", "insertions": 32, "deletions": 33, "lines": 65}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c42850115e75215da8b942f4e8ba4a7ff08a2627", "d413338c763773d66a230b486bb734fdb6ef2a86", "02cfb8aed6261e2d72c599d707e5165bb1f8394a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 3, "gitStatsSummary": {"insertions": 59, "deletions": 45, "lines": 104, "gitFilesChange": 9}, "spoonStatsSummary": {"TOT": 3.0, "UPD": 0.0, "INS": 2.0, "MOV": 1.0, "DEL": 0.0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponsePact.groovy", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/FilteredPact.kt", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3", "pact-jvm-provider-junit/src/main/kotlin/au/com/dius/pact/provider/junit", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/Pact.kt", "pact-jvm-provider-junit5/src/main/kotlin/au/com/dius/pact/provider/junit5", "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.InteractionRunner.reportVerificationResults(java.lang.Boolean)", "au.com.dius.pact.provider.junit.InteractionRunner.run(org.junit.runner.notification.RunNotifier)"]}, {"title": "Error when testing string body with spring pact", "body": "After updating a consumer test to 3.5.3 the providers test started throwing a body mismatch exception, after updating it to 3.5.3 it throws the following exception:\r\n\r\n```\r\njava.lang.AssertionError: \r\n0 - au.com.dius.pact.model.matchingrules.TypeMatcher cannot be cast to au.com.dius.pact.model.matchingrules.RegexMatcher\r\n\r\n        at au.com.dius.pact.provider.junit.target.BaseTarget.getAssertionError(BaseTarget.java:86)\r\n        at au.com.dius.pact.provider.spring.target.MockMvcTarget.testInteraction(MockMvcTarget.java:105)\r\n        at au.com.dius.pact.provider.junit.InteractionRunner$2.evaluate(InteractionRunner.java:196)\r\n        at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\r\n        at au.com.dius.pact.provider.junit.InteractionRunner.run(InteractionRunner.java:156)\r\n        at au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.java:114)\r\n        at au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.java:52)\r\n        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n        at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n        at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)\r\n        at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)\r\n        at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n        at java.lang.reflect.Method.invoke(Method.java:498)\r\n        at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\r\n        at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\r\n        at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\r\n        at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\r\n        at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\r\n```\r\n\r\nAnd it's when testing a body with a string type:\r\n\r\n```\r\n                .willRespondWith()\r\n                    .status(200)\r\n                    .body(PactDslJsonRootValue.stringType())\r\n```\r\nPact JSON:\r\n```\r\n                \"body\": \"\\\"string\\\"\",\r\n                \"matchingRules\": {\r\n                    \"body\": {\r\n                        \"$\": {\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"type\"\r\n                                }\r\n                            ],\r\n                            \"combine\": \"AND\"\r\n                        }\r\n                    },\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/517", "user": "Nalha", "labels": ["bug"], "created": "2017-08-14 08:04:50", "closed": "2020-02-22 22:44:36", "commits": {"4c5dd51e69851840c36273a6e255f035ed011499": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 922.0002777777778, "commitsDetails": [{"commitHash": "4c5dd51e69851840c36273a6e255f035ed011499", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a8ac3ec56235bfd1f1424c991dd622d6d29a5d46"], "nameRev": "4c5dd51e69851840c36273a6e255f035ed011499 tags/3_5_6~2", "commitMessage": "Guard against other types of matchers being applied to plain text responses #517\n", "commitDateTime": "2017-09-24 15:42:51", "authoredDateTime": "2017-09-24 15:42:51", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/PlainTextBodyMatcher.scala", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/PlainTextBodyMatcherSpec.groovy", "insertions": 37, "deletions": 0, "lines": 37}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4c5dd51e69851840c36273a6e255f035ed011499"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/PlainTextBodyMatcher.scala"]}, {"title": "Matchers.scala ignores timestamp format specification and only uses the TypeMatcher", "body": "In pact-jvm-matchers 2.x, a PACT like\r\n\r\n```\r\n          \"$.body[0].write-timestamp\": {\r\n            \"match\": \"timestamp\",\r\n            \"timestamp\": \"yyyy-MM-dd\\u0027T\\u0027HH:mm:ss.SSS\\u0027Z\\u0027\"\r\n          }\r\n```\r\n\r\nerroneously rejects a value like `2017-08-11T02:54:42.522Z` with the error `Expected '2017-08-11T02:54:42.522Z' to be a timestamp`.\r\n\r\nThis is likely to be caused by `Matchers.scala` using the `typeMatcher` instead of the `timestampMatcher` to match timestamps. That causes to ignore the format specification, and only accept strict ISO formats.", "url": "https://github.com/DiUS/pact-jvm/issues/516", "user": "dberrueta-atlassian", "labels": ["bug"], "created": "2017-08-14 01:04:16", "closed": "2017-08-18 06:33:40", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Support for one query parameter multiple times", "body": "The service I am calling takes a query parameter named \"nodeId\". This parameter can have multiple values, so a request URL can look like this:\r\n\r\n    http://localhost/path?nodeId=8&nodeId=20&nodeId=999\r\n\r\nI tried to build the fragment like this:\r\n\r\n            .matchQuery(\"nodeId\", \"^[0-9]{1,3}$\", \"8\")\r\n            .matchQuery(\"nodeId\", \"^[0-9]{1,3}$\", \"20\")\r\n            .matchQuery(\"nodeId\", \"^[0-9]{1,3}$\", \"999\")\r\n\r\nHowever I get the following error when running the consumer pact test:\r\n\r\n    QueryMismatch(nodeId,List(999),List(8, 20, 999),Some(Expected query parameter nodeId with 1 values but received 3 values),$.query.nodeId)\r\n\r\nWhile not quite that normal, HTTP allows you to provide the same query parameter multiple times, allowing a single service call to respond with multiple sets of data.\r\n\r\nIs this supported and if not, please consider this a feature request :-)", "url": "https://github.com/DiUS/pact-jvm/issues/509", "user": "maxant", "labels": ["bug"], "created": "2017-08-03 05:33:02", "closed": "2017-11-12 22:29:20", "commits": {}, "ttf": 101.00027777777778, "commitsDetails": []}, {"title": "DSL method `or` inside `.object()` erroneously generate `AND` as combine rule", "body": "Hello,\r\nif I specify a JSON body like:\r\n\r\n```java\r\nbuilder.body(\r\n  new PactDslJsonBody()\r\n    .object(\"foo\")\r\n      .or(\"bar\", 42, PM.numberType(), PM.nullValue())\r\n    .closeObject()\r\n).toPact();\r\n```\r\n\r\nIt erroneously generate a JSON like the following:\r\n\r\n```javascript\r\n\"body\": {\r\n  \"foo\": {\r\n    \"bar\": 42\r\n  }\r\n},\r\n\"matchingRules\": {\r\n  \"body\": {\r\n    \"$.foo.bar\": {\r\n      \"matchers\": [\r\n        {\r\n          \"match\": \"number\"\r\n        },\r\n        {\r\n          \"match\": \"null\"\r\n        }\r\n      ],\r\n      \"combine\": \"AND\" // this should be \"OR\"!\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nInterestingly, if the `.or()` is outside of `.object()`, it works fine. For example, the following generate a correct JSON, combining clauses with `\"OR\"`:\r\n\r\n```java\r\nbuilder.body(\r\n  new PactDslJsonBody()\r\n    .or(\"bar\", 42, PM.numberType(), PM.nullValue())\r\n).toPact();\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/483", "user": "lucaong", "labels": ["bug"], "created": "2017-07-13 09:49:48", "closed": "2017-08-06 09:58:22", "commits": {"144dba0f4c4f5f440d7be9badc69b2838d77535a": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 24.00027777777778, "commitsDetails": [{"commitHash": "144dba0f4c4f5f440d7be9badc69b2838d77535a", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["ea7e595bb4328f221690126a112b7cea988bc5ad"], "nameRev": "144dba0f4c4f5f440d7be9badc69b2838d77535a tags/3_5_3~29^2~3", "commitMessage": "Propogate the combine rule on matching rules with nested objects in the Java DSL #483\n", "commitDateTime": "2017-07-17 13:08:38", "authoredDateTime": "2017-07-17 13:08:38", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonArray.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonBody.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonArraySpec.groovy", "insertions": 15, "deletions": 0, "lines": 15}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonBodySpec.groovy", "insertions": 11, "deletions": 0, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonArray.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.putObject(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.putArray(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.putObject(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.putArray(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["144dba0f4c4f5f440d7be9badc69b2838d77535a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 6, "lines": 12, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 10, "UPD": 4, "INS": 0, "MOV": 4, "DEL": 2, "spoonFilesChanged": 2, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslJsonArray.putObject(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.putArray(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.putArray(au.com.dius.pact.consumer.dsl.DslPart)", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.putObject(au.com.dius.pact.consumer.dsl.DslPart)"]}, {"title": "Pact Verifier is not defaulting to application/json", "body": "Pact fragment with the issue:\r\n\r\n```json\r\n{\r\n      \"description\": \"a request to confirm the pick for a store order\",\r\n      \"providerState\": \"i have a single store order\",\r\n      \"request\": {\r\n        \"method\": \"PUT\",\r\n        \"path\": \"/processingCentres/nsw1/purchaseOrders/64746/confirmPick\",\r\n        \"body\": {\r\n          \"numberOfPallets\": 2\r\n        }\r\n      },\r\n      \"response\": {\r\n        \"status\": 200,\r\n        \"headers\": {\r\n          \"Content-Type\": \"application/json\"\r\n        },\r\n        \"body\": {\r\n          \"orderNumber\": 64746,\r\n          \"status\": \"PICKED\",\r\n          \"supplierName\": \"Hills, Nolan and McClure\",\r\n          \"storeName\": \"Roberts and Sons\",\r\n          \"purchasingType\": \"STORE_PICKED\",\r\n          \"orderDate\": \"2017-06-13T03:48:37.796+10:00\",\r\n          \"lineItems\": [\r\n            {\r\n              \"productCode\": \"f07b6c9e-1eff-4b9e-8ad3-d190b2d049a2\",\r\n              \"productDescription\": \"Bike\",\r\n              \"quantityOrdered\": 53,\r\n              \"gtin\": \"724094ee-eb19-4daa-81e4-6bddf5e3ae7e\",\r\n              \"supplierItemId\": \"adc5130d-7da4-4488-bb84-6aa1f624349c\"\r\n            }\r\n          ]\r\n        },\r\n        \"matchingRules\": {\r\n          \"$.body.orderNumber\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body.supplierName\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body.storeName\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body.purchasingType\": {\r\n            \"match\": \"regex\",\r\n            \"regex\": \"BULK_SUPPLY|STORE_PICKED\"\r\n          },\r\n          \"$.body.orderDate\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body.lineItems\": {\r\n            \"min\": 1\r\n          },\r\n          \"$.body.lineItems[*].*\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body.lineItems[*].productCode\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body.lineItems[*].productDescription\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body.lineItems[*].quantityOrdered\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body.lineItems[*].gtin\": {\r\n            \"match\": \"type\"\r\n          },\r\n          \"$.body.lineItems[*].supplierItemId\": {\r\n            \"match\": \"type\"\r\n          }\r\n        }\r\n      }\r\n    }\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/476", "user": "uglyog", "labels": ["bug"], "created": "2017-06-29 06:00:02", "closed": "2020-02-22 22:42:37", "commits": {}, "ttf": 968.0002777777778, "commitsDetails": []}, {"title": "Json parsing error thrown while running the service consumer test", "body": "Hey guys,\r\n\r\nWe have a pact-jvm(pact-jvm-consumer-junit_2.11:3.4.1) setup running the junit tests to generate the pact file.Recently we have started getting this error while running the tests. Stacktrace doesnt give a lot of info but looks like some discrepancy in reading the Pact file. Not sure if its how I am generating the response causing the issue.\r\n\r\n```\r\ngroovy.json.JsonException: Unable to determine the current character, it is not a string, number, array, or object\r\n\r\nThe current character read is '?' with an int value of 0\r\nUnable to determine the current character, it is not a string, number, array, or object\r\nline number 1\r\nindex number 255\r\n????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\r\n...............................................................................................................................................................................................................................................................^\r\n\tat groovy.json.internal.JsonParserCharArray.decodeValueInternal(JsonParserCharArray.java:206)\r\n\tat groovy.json.internal.JsonParserCharArray.decodeValue(JsonParserCharArray.java:157)\r\n\tat groovy.json.internal.JsonParserCharArray.decodeFromChars(JsonParserCharArray.java:46)\r\n\tat groovy.json.internal.JsonParserCharArray.parse(JsonParserCharArray.java:384)\r\n\tat groovy.json.internal.BaseJsonParser.parse(BaseJsonParser.java:128)\r\n\tat groovy.json.internal.BaseJsonParser.parse(BaseJsonParser.java:151)\r\n\tat groovy.json.JsonSlurper.parseFile(JsonSlurper.java:365)\r\n\tat groovy.json.JsonSlurper.parse(JsonSlurper.java:348)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:232)\r\n\tat au.com.dius.pact.model.PactReader.loadFile(PactReader.groovy:159)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:232)\r\n\tat au.com.dius.pact.model.PactReader.loadPact(PactReader.groovy:26)\r\n\tat au.com.dius.pact.model.PactReader.loadPact(PactReader.groovy)\r\n\tat org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:232)\r\n\tat au.com.dius.pact.model.BasePact.write(BasePact.groovy:109)\r\n\tat au.com.dius.pact.consumer.BaseMockServer.runAndWritePact(MockHttpServer.kt:147)\r\n\tat au.com.dius.pact.consumer.ConsumerPactRunnerKt.runConsumerTest(ConsumerPactRunner.kt:13)\r\n\tat au.com.dius.pact.consumer.BaseProviderRule.runPactTest(BaseProviderRule.java:148)\r\n\tat au.com.dius.pact.consumer.BaseProviderRule.access$100(BaseProviderRule.java:21)\r\n\tat au.com.dius.pact.consumer.BaseProviderRule$1.evaluate(BaseProviderRule.java:76)\r\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:114)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:57)\r\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:66)\r\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)\r\n\tat org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)\r\n\tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\r\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:109)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\r\n\tat org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\r\n\tat org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:377)\r\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)\r\n\tat org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\n```\r\n\r\nThis is one of the interaction setup where we are getting this error,\r\n\r\n```\r\n    @Pact(consumer = CONSUMER_ID)\r\n    public RequestResponsePact getBoardsForMobile(PactDslWithProvider builder) {\r\n        return builder\r\n                .given(\"Project with boards\")\r\n                .uponReceiving(\"GET all boards\")\r\n                .matchPath(BOARDS_API_PATTERN, BOARDS_API_EXAMPLE)\r\n                .method(\"GET\")\r\n                .query(\"maxResults=10\")\r\n                .willRespondWith()\r\n                .status(HttpStatus.SC_OK)\r\n                .headers(ImmutableMap.of(\"Content-Type\", \"application/json\"))\r\n                .body(new PactDslJsonBody()\r\n                        .minArrayLike(\"values\", 1)\r\n                        .id()\r\n                        .stringMatcher(\"type\", \"CORE\")\r\n                        .stringMatcher(\"name\", \"Business\")\r\n                        .stringMatcher(\"moduleKey\", CORE_MODULE_EXAMPLE)\r\n                        .closeObject()\r\n                        .object()\r\n                        .id()\r\n                        .stringMatcher(\"type\", \"SCRUM\")\r\n                        .stringMatcher(\"name\", \"DEMO board\")\r\n                        .stringMatcher(\"moduleKey\", AGILE_MODULE_EXAMPLE)\r\n                        .closeObject()\r\n                        .closeArray()\r\n                        .asBody())\r\n                .toPact();\r\n    }\r\n```\r\n\r\nAnd this is how the json from pact file looks like,\r\n\r\n```\r\nmobile-rest-plugin will respond with:\r\n\r\n{\r\n  \"status\": 200,\r\n  \"headers\": {\r\n    \"Content-Type\": \"application/json\"\r\n  },\r\n  \"body\": {\r\n    \"values\": [\r\n      {\r\n        \"name\": \"Business\",\r\n        \"id\": 8124081232,\r\n        \"type\": \"CORE\",\r\n        \"moduleKey\": \"core-mobile-board-service\"\r\n      },\r\n      {\r\n        \"name\": \"DEMO board\",\r\n        \"id\": 4597649782,\r\n        \"type\": \"SCRUM\",\r\n        \"moduleKey\": \"agile-mobile-board-service\"\r\n      }\r\n    ]\r\n  }\r\n}\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/475", "user": "sushantchoudhary", "labels": ["bug"], "created": "2017-06-28 04:09:04", "closed": "2020-02-22 22:42:07", "commits": {"262db0ff4398a24b5669ae73c2528ba9d4de1912": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "e66db1de07d45cd2ec0330c8a1bc8b9a28d3234e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "2d97dcf579c19e320927bbfa0671f1ca7deff511": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "fe7c1f710bf74f2f6d139504651773c89f79a9d9": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 969.0002777777778, "commitsDetails": [{"commitHash": "262db0ff4398a24b5669ae73c2528ba9d4de1912", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["9b29aeab92e912b15ba4f432e0642b0dd86881bf"], "nameRev": "262db0ff4398a24b5669ae73c2528ba9d4de1912 tags/3_5_2-jre7_0~2^2~8", "commitMessage": "Add a synchanisation block and file system lock around merging a pact with an existing one on the file system #475\n", "commitDateTime": "2017-07-09 20:37:18", "authoredDateTime": "2017-07-09 20:37:18", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy", "insertions": 28, "deletions": 9, "lines": 37}, {"filePath": "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/Pact.kt", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "e66db1de07d45cd2ec0330c8a1bc8b9a28d3234e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1c635e617fe0a118ee66aa7ccdba83dde3c0f367"], "nameRev": "e66db1de07d45cd2ec0330c8a1bc8b9a28d3234e tags/3_5_2-jre7_0~2^2~6", "commitMessage": "Updated the file system lock code to work on windows #475\n", "commitDateTime": "2017-07-10 14:06:44", "authoredDateTime": "2017-07-10 14:06:44", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/Defect464Test.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy", "insertions": 19, "deletions": 2, "lines": 21}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Defect464Test.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.Defect464Test", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "2d97dcf579c19e320927bbfa0671f1ca7deff511", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["71ec1b5ce8f9858c2734477e6d3ef5a089e0387f"], "nameRev": "2d97dcf579c19e320927bbfa0671f1ca7deff511 tags/2_4_19~31", "commitMessage": "Add a synchanisation block and file system lock around merging a pact with an existing one on the file system #475\n\nConflicts:\n\tpact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy\n\tpact-jvm-model/src/main/kotlin/au/com/dius/pact/model/Pact.kt\n", "commitDateTime": "2017-08-16 09:06:02", "authoredDateTime": "2017-07-09 20:37:18", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy", "insertions": 66, "deletions": 0, "lines": 66}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "fe7c1f710bf74f2f6d139504651773c89f79a9d9", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["2d97dcf579c19e320927bbfa0671f1ca7deff511"], "nameRev": "fe7c1f710bf74f2f6d139504651773c89f79a9d9 tags/2_4_19~30", "commitMessage": "Updated the file system lock code to work on windows #475\n\nConflicts:\n\tpact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/Defect464Test.java\n", "commitDateTime": "2017-08-16 09:06:35", "authoredDateTime": "2017-07-10 14:06:44", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy", "insertions": 19, "deletions": 2, "lines": 21}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["262db0ff4398a24b5669ae73c2528ba9d4de1912", "e66db1de07d45cd2ec0330c8a1bc8b9a28d3234e"], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 48, "deletions": 12, "lines": 60, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy", "pact-jvm-model/src/main/kotlin/au/com/dius/pact/model/Pact.kt"], "changesInPackagesSPOON": []}, {"title": "pact-jvm-consumer-junit, provide ability to shuffle Strings in array", "body": "I am using PactProviderRuleMk2 Junit-rule for generating test-data while pact-testing.\r\nIn my usecase, I am generating an JSON-array to test against. This array contains (among others) an \"id\"-field of type String (yes ...). \r\n\r\nRight now, the contained elements of my generated are the same, like this\r\n\r\n    {\"my-array\":[{\"id\":\"OHpRMRttzGoabqPfPzQt\"},{\"id\":\"OHpRMRttzGoabqPfPzQt\"}]}\r\n\r\nI would appreciate a way to build \"my-array\", so that the String-\"id\"-element has another value for each sub-child in \"my-array\". The output would be like this:\r\n\r\n    {\"my-array\":[{\"id\":\"asdfqwer\"},{\"id\":\"ghjktyui\"}]}\r\n\r\n\r\nI have implemented a test [Defect464Test](https://github.com/SchulteMarkus/pact-jvm/blob/master/pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/Defect464Test.java) for demonstrating my issue.", "url": "https://github.com/DiUS/pact-jvm/issues/464", "user": "SchulteMarkus", "labels": ["bug"], "created": "2017-06-19 11:13:44", "closed": "2017-06-26 08:07:04", "commits": {"a53575a89b6eced8c1763984bafa2592a9fd7d35": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "a53575a89b6eced8c1763984bafa2592a9fd7d35", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a2e3ab877f10eccf2b8fc97e44bae5c657d89c9a"], "nameRev": "a53575a89b6eced8c1763984bafa2592a9fd7d35 tags/3_5_0~3", "commitMessage": "Added test from issue #464\n", "commitDateTime": "2017-06-24 17:20:08", "authoredDateTime": "2017-06-24 17:20:08", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/Defect464Test.java", "insertions": 81, "deletions": 0, "lines": 81}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Defect464Test.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.Defect464Test", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a53575a89b6eced8c1763984bafa2592a9fd7d35"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Provider gradle plugin issue - plugins {   id \"au.com.dius.pact\" version \"3.4.1\" } - tries to find testClasses", "body": "I don't have provider tests, I just run pactVerify step. I am not sure if I am doing it right.\r\n\r\nwhen the provider gradle file content is like the old format, the pactVerify step works fine.\r\n```\r\napply plugin: 'java'\r\napply plugin: 'idea'\r\napply plugin: 'au.com.dius.pact'\r\n\r\nbuildscript {\r\n    repositories {\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath(\"au.com.dius:pact-jvm-provider-gradle_2.11:3.4.1\")\r\n    }\r\n}\r\n\r\ndependencies {\r\n    testCompile(\"junit:junit\")\r\n    testCompile(\"au.com.dius:pact-jvm-provider_2.11:3.4.1\")\r\n}\r\n```\r\n\r\nbut if I replace the above as per gradle - https://plugins.gradle.org/plugin/au.com.dius.pact/3.4.1\r\n```\r\nplugins {\r\n  id \"au.com.dius.pact\" version \"3.4.1\"\r\n}\r\n```\r\nI see an error:\r\n```\r\nCould not determine the dependencies of task ':pactVerify_provider1'.\r\n> Task with path 'testClasses' not found in root project 'provider'.\r\n```\r\n\r\nStacktrace:\r\n\r\n```\r\n* What went wrong:\r\nCould not determine the dependencies of task ':pactVerify_provider1'.\r\n> Task with path 'testClasses' not found in root project 'provider'.\r\n\r\n* Try:\r\nRun with --info or --debug option to get more log output.\r\n\r\n* Exception is:\r\norg.gradle.api.GradleException: Could not determine the dependencies of task ':pactVerify_provider1'.\r\n        at org.gradle.api.internal.tasks.CachingTaskDependencyResolveContext.resolve(CachingTaskDependencyResolveContext.java:67)\r\n        at org.gradle.api.internal.tasks.CachingTaskDependencyResolveContext.getDependencies(CachingTaskDependencyResolveContext.java:55)\r\n        at org.gradle.execution.taskgraph.DefaultTaskExecutionPlan.addToTaskGraph(DefaultTaskExecutionPlan.java:139)\r\n        at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.addTasks(DefaultTaskGraphExecuter.java:101)\r\n        at org.gradle.execution.TaskNameResolvingBuildConfigurationAction.configure(TaskNameResolvingBuildConfigurationAction.java:47)\r\n        at org.gradle.execution.DefaultBuildConfigurationActionExecuter.configure(DefaultBuildConfigurationActionExecuter.java:48)\r\n        at org.gradle.execution.DefaultBuildConfigurationActionExecuter.access$000(DefaultBuildConfigurationActionExecuter.java:25)\r\n        at org.gradle.execution.DefaultBuildConfigurationActionExecuter$1.proceed(DefaultBuildConfigurationActionExecuter.java:54)\r\n        at org.gradle.execution.DefaultTasksBuildExecutionAction.configure(DefaultTasksBuildExecutionAction.java:44)\r\n        at org.gradle.execution.DefaultBuildConfigurationActionExecuter.configure(DefaultBuildConfigurationActionExecuter.java:48)\r\n        at org.gradle.execution.DefaultBuildConfigurationActionExecuter.access$000(DefaultBuildConfigurationActionExecuter.java:25)\r\n        at org.gradle.execution.DefaultBuildConfigurationActionExecuter$1.proceed(DefaultBuildConfigurationActionExecuter.java:54)\r\n        at org.gradle.execution.ExcludedTaskFilteringBuildConfigurationAction.configure(ExcludedTaskFilteringBuildConfigurationAction.java:47)\r\n        at org.gradle.execution.DefaultBuildConfigurationActionExecuter.configure(DefaultBuildConfigurationActionExecuter.java:48)\r\n        at org.gradle.execution.DefaultBuildConfigurationActionExecuter.select(DefaultBuildConfigurationActionExecuter.java:36)\r\n        at org.gradle.initialization.DefaultGradleLauncher$CalculateTaskGraphAction.execute(DefaultGradleLauncher.java:220)\r\n        at org.gradle.initialization.DefaultGradleLauncher$CalculateTaskGraphAction.execute(DefaultGradleLauncher.java:217)\r\n        at org.gradle.internal.Transformers$4.transform(Transformers.java:169)\r\n        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:106)\r\n        at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:56)\r\n        at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:158)\r\n        at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:112)\r\n        at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:95)\r\n        at org.gradle.launcher.exec.GradleBuildController.run(GradleBuildController.java:66)\r\n        at org.gradle.tooling.internal.provider.ExecuteBuildActionRunner.run(ExecuteBuildActionRunner.java:28)\r\n        at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\r\n        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:41)\r\n        at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:26)\r\n        at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:75)\r\n        at org.gradle.tooling.internal.provider.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:49)\r\n        at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter.execute(ServicesSetupBuildActionExecuter.java:49)\r\n        at org.gradle.tooling.internal.provider.ServicesSetupBuildActionExecuter.execute(ServicesSetupBuildActionExecuter.java:31)\r\n        at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:67)\r\n        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\r\n        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\r\n        at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37)\r\n        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\r\n        at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)\r\n        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\r\n        at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)\r\n        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\r\n        at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)\r\n        at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)\r\n        at org.gradle.util.Swapper.swap(Swapper.java:38)\r\n        at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)\r\n        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\r\n        at org.gradle.launcher.daemon.server.exec.LogAndCheckHealth.execute(LogAndCheckHealth.java:55)\r\n        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\r\n        at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:60)\r\n        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\r\n        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\r\n        at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72)\r\n        at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\r\n        at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\r\n        at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)\r\n        at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:297)\r\n        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:63)\r\n        at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:46)\r\nCaused by: org.gradle.api.UnknownTaskException: Task with path 'testClasses' not found in root project 'provider'.\r\n        at org.gradle.api.internal.tasks.DefaultTaskContainer.getByPath(DefaultTaskContainer.java:190)\r\n        at org.gradle.api.internal.tasks.DefaultTaskContainer.resolveTask(DefaultTaskContainer.java:172)\r\n        at org.gradle.api.internal.tasks.DefaultTaskDependency.visitDependencies(DefaultTaskDependency.java:108)\r\n        at org.gradle.api.internal.tasks.CachingTaskDependencyResolveContext$TaskGraphImpl.getNodeValues(CachingTaskDependencyResolveContext.java:88)\r\n        at org.gradle.internal.graph.CachingDirectedGraphWalker$GraphWithEmpyEdges.getNodeValues(CachingDirectedGraphWalker.java:202)\r\n        at org.gradle.internal.graph.CachingDirectedGraphWalker.doSearch(CachingDirectedGraphWalker.java:112)\r\n        at org.gradle.internal.graph.CachingDirectedGraphWalker.findValues(CachingDirectedGraphWalker.java:64)\r\n        at org.gradle.api.internal.tasks.CachingTaskDependencyResolveContext.doResolve(CachingTaskDependencyResolveContext.java:76)\r\n        at org.gradle.api.internal.tasks.CachingTaskDependencyResolveContext.resolve(CachingTaskDependencyResolveContext.java:65)\r\n        ... 57 more\r\n\r\n\r\nBUILD FAILED\r\n\r\nTotal time: 0.937 secs\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/460", "user": "shashidesai", "labels": ["bug"], "created": "2017-06-13 03:23:25", "closed": "2017-07-12 22:40:10", "commits": {"916963b50f6bfec239e0f11c415a7605a00f443d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "5cc7b3d57cd4b0e198841eac61607105940241e8": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 29.00027777777778, "commitsDetails": [{"commitHash": "916963b50f6bfec239e0f11c415a7605a00f443d", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["fce24016fd987c9b5f0ef6bc6433a902a2fa8376"], "nameRev": "916963b50f6bfec239e0f11c415a7605a00f443d tags/3_5_0-rc_3~5^2~2", "commitMessage": "Only add the testClasses task as a dependency to the verification task if the testClasses task is defined #460\n", "commitDateTime": "2017-06-14 12:33:28", "authoredDateTime": "2017-06-14 12:33:28", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/PactPlugin.groovy", "insertions": 5, "deletions": 1, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "5cc7b3d57cd4b0e198841eac61607105940241e8", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["8abf9987b5ccbd2c0bc503c89fdd8fea2cd5ce78"], "nameRev": "5cc7b3d57cd4b0e198841eac61607105940241e8 tags/2_4_19~57", "commitMessage": "Only add the testClasses task as a dependency to the verification task if the testClasses task is defined #460\n", "commitDateTime": "2017-08-15 09:53:25", "authoredDateTime": "2017-06-14 12:33:28", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/PactPlugin.groovy", "insertions": 5, "deletions": 1, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["916963b50f6bfec239e0f11c415a7605a00f443d"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 1, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle"]}, {"title": "failIfNoPactsFound = false only changes exception thrown", "body": "Running my provider tests with the annotations:\r\n```\r\n@Provider(\"test_provider\")\r\n@PactBroker(failIfNoPactsFound = false, host = \"localhost\", port = \"8080\")\r\n@RunWith(RestPactRunner.class)\r\n```\r\n\r\nthrows this exception:\r\n```\r\njava.lang.Exception: Did not find any pact files for provider test_provider\r\n\r\n\tat org.junit.runners.model.InitializationError.<init>(InitializationError.java:38)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.<init>(PactRunner.java:81)\r\n```\r\n\r\nWhile running it with failIfNoPactsFound = true throws this instead\r\n```\r\nu.com.dius.pact.provider.junit.loader.NoPactsFoundException: No consumer pacts were found for provider 'test_provider' and tag 'null'. (URL [])\r\n\r\n\tat au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(PactBrokerLoader.java:83)\r\n```\r\nIs there a way to disable the runner when pacts are missing or is this a broken feature?", "url": "https://github.com/DiUS/pact-jvm/issues/455", "user": "Nalha", "labels": ["bug"], "created": "2017-06-08 07:33:02", "closed": "2017-08-06 10:00:54", "commits": {"0026fb1262ccd437c41b0d7b0e5c4fe57d756d05": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "8ab8d1b3367312b838585979f4500016aa8562b3": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "afca3317f34d212e7b115612046fb760b9d50eb3": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 59.000277777777775, "commitsDetails": [{"commitHash": "0026fb1262ccd437c41b0d7b0e5c4fe57d756d05", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["4d88a9c0a8f004f29f2cf9e05819d6958b0d6a51"], "nameRev": "0026fb1262ccd437c41b0d7b0e5c4fe57d756d05 tags/3_5_3~20", "commitMessage": "Deprecate failIfNoPactsFound in favour of @IgnoreNoPactsToVerify annotation #455\n", "commitDateTime": "2017-08-01 11:08:57", "authoredDateTime": "2017-08-01 11:07:57", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactBroker.java", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactBroker.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.failIfNoPactsFound()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "8ab8d1b3367312b838585979f4500016aa8562b3", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["0026fb1262ccd437c41b0d7b0e5c4fe57d756d05"], "nameRev": "8ab8d1b3367312b838585979f4500016aa8562b3 tags/3_5_3~19", "commitMessage": "Do not fail the JUnit test if no pacts are found and @IgnoreNoPactsToVerify is present #455\n", "commitDateTime": "2017-08-01 11:14:07", "authoredDateTime": "2017-08-01 11:04:21", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/IgnoreNoPactsToVerify.java", "insertions": 15, "deletions": 0, "lines": 15}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/PactRunner.java", "insertions": 17, "deletions": 11, "lines": 28}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactFolderLoader.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactUrlLoader.java", "insertions": 4, "deletions": 6, "lines": 10}, {"filePath": "pact-jvm-provider-junit/src/test/groovy/au/com/dius/pact/provider/junit/PactRunnerSpec.groovy", "insertions": 80, "deletions": 0, "lines": 80}, {"filePath": "pact-jvm-provider-junit/src/test/java/au/com/dius/pact/provider/junit/GitPactLoader.java", "insertions": 1, "deletions": 3, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "IgnoreNoPactsToVerify.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.PactRunner", "TOT": 8, "UPD": 2, "INS": 2, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "PactFolderLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactFolderLoader.load(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "PactUrlLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactUrlLoader", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactUrlLoader.getPactSource()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactUrlLoader.load(java.lang.String)", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "GitPactLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.GitPactLoader.load(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "afca3317f34d212e7b115612046fb760b9d50eb3", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["8ab8d1b3367312b838585979f4500016aa8562b3"], "nameRev": "afca3317f34d212e7b115612046fb760b9d50eb3 tags/3_5_3~18", "commitMessage": "Update readme with @IgnoreNoPactsToVerify annotation #455\n", "commitDateTime": "2017-08-01 11:18:35", "authoredDateTime": "2017-08-01 11:18:35", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/README.md", "insertions": 5, "deletions": 0, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0026fb1262ccd437c41b0d7b0e5c4fe57d756d05", "8ab8d1b3367312b838585979f4500016aa8562b3", "afca3317f34d212e7b115612046fb760b9d50eb3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 39, "deletions": 18, "lines": 57, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 18.0, "UPD": 7.0, "INS": 4.0, "MOV": 3.0, "DEL": 4.0, "spoonFilesChanged": 6, "spoonMethodsChanged": 8}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.loader.PactUrlLoader.load(java.lang.String)", "au.com.dius.pact.provider.junit.PactRunner", "au.com.dius.pact.provider.junit.loader.PactFolderLoader.load(java.lang.String)", "au.com.dius.pact.provider.junit.loader.PactUrlLoader", "au.com.dius.pact.provider.junit.loader.PactUrlLoader.getPactSource()", "au.com.dius.pact.provider.junit", "au.com.dius.pact.provider.junit.GitPactLoader.load(java.lang.String)", "au.com.dius.pact.provider.junit.loader.failIfNoPactsFound()"]}, {"title": "pact-jvm-provider_2.11 doesn't work with Maven 3.5.0", "body": "When executing mvn pact-jvm-provider_2.11:verify (mvn pact:verify doesn't work?), I get the following error when using Maven 3.5.0. Maven 3.2.5 works.\r\n\r\n```\r\nApache Maven 3.5.0 (ff8f5e7444045639af65f6095c62210b5713f426; 2017-04-04T05:39:06+10:00)\r\nMaven home: C:\\Dev\\apache-maven-3.5.0\\bin\\..\r\nJava version: 1.8.0_131, vendor: Oracle Corporation\r\nJava home: C:\\Program Files\\Java\\jdk1.8.0_131\\jre\r\nDefault locale: en_AU, platform encoding: Cp1252\r\nOS name: \"windows 8.1\", version: \"6.3\", arch: \"amd64\", family: \"windows\"\r\n```\r\n\r\nError output:\r\n\r\n```\r\nERROR] Failed to execute goal au.com.dius:pact-jvm-provider-maven_2.11:3.3.1:verify (default-cli) on project Valuations: Execution default-cli of goal au.com.dius:pact-jvm-provider-maven_2.11:3.3.1:verify failed: A required class was missing while executing au\r\n.com.dius:pact-jvm-provider-maven_2.11:3.3.1:verify: org/fusesource/jansi/internal/CLibrary\r\n[ERROR] -----------------------------------------------------\r\n[ERROR] realm =    plugin>au.com.dius:pact-jvm-provider-maven_2.11:3.3.1\r\n[ERROR] strategy = org.codehaus.plexus.classworlds.strategy.SelfFirstStrategy\r\n[ERROR] urls[0] = file:/C:/dev/workspace/localrepository/au/com/dius/pact-jvm-provider-maven_2.11/3.3.1/pact-jvm-provider-maven_2.11-3.3.1.jar\r\n[ERROR] urls[1] = file:/C:/dev/workspace/localrepository/org/scala-lang/scala-library/2.11.8/scala-library-2.11.8.jar\r\n[ERROR] urls[2] = file:/C:/dev/workspace/localrepository/org/scala-lang/scala-compiler/2.11.8/scala-compiler-2.11.8.jar\r\n[ERROR] urls[3] = file:/C:/dev/workspace/localrepository/org/scala-lang/scala-reflect/2.11.8/scala-reflect-2.11.8.jar\r\n[ERROR] urls[4] = file:/C:/dev/workspace/localrepository/org/scala-lang/modules/scala-xml_2.11/1.0.4/scala-xml_2.11-1.0.4.jar\r\n[ERROR] urls[5] = file:/C:/dev/workspace/localrepository/org/scala-lang/modules/scala-parser-combinators_2.11/1.0.4/scala-parser-combinators_2.11-1.0.4.jar\r\n[ERROR] urls[6] = file:/C:/dev/workspace/localrepository/com/typesafe/scala-logging/scala-logging_2.11/3.4.0/scala-logging_2.11-3.4.0.jar\r\n[ERROR] urls[7] = file:/C:/dev/workspace/localrepository/au/com/dius/pact-jvm-provider_2.11/3.3.1/pact-jvm-provider_2.11-3.3.1.jar\r\n[ERROR] urls[8] = file:/C:/dev/workspace/localrepository/au/com/dius/pact-jvm-model/3.3.1/pact-jvm-model-3.3.1.jar\r\n[ERROR] urls[9] = file:/C:/dev/workspace/localrepository/org/json/json/20160212/json-20160212.jar\r\n[ERROR] urls[10] = file:/C:/dev/workspace/localrepository/io/netty/netty-handler/4.0.40.Final/netty-handler-4.0.40.Final.jar\r\n[ERROR] urls[11] = file:/C:/dev/workspace/localrepository/io/netty/netty-buffer/4.0.40.Final/netty-buffer-4.0.40.Final.jar\r\n[ERROR] urls[12] = file:/C:/dev/workspace/localrepository/io/netty/netty-common/4.0.40.Final/netty-common-4.0.40.Final.jar\r\n[ERROR] urls[13] = file:/C:/dev/workspace/localrepository/io/netty/netty-transport/4.0.40.Final/netty-transport-4.0.40.Final.jar\r\n[ERROR] urls[14] = file:/C:/dev/workspace/localrepository/io/netty/netty-codec/4.0.40.Final/netty-codec-4.0.40.Final.jar\r\n[ERROR] urls[15] = file:/C:/dev/workspace/localrepository/com/github/zafarkhaja/java-semver/0.9.0/java-semver-0.9.0.jar\r\n[ERROR] urls[16] = file:/C:/dev/workspace/localrepository/au/com/dius/pact-jvm-matchers_2.11/3.3.1/pact-jvm-matchers_2.11-3.3.1.jar\r\n[ERROR] urls[17] = file:/C:/dev/workspace/localrepository/org/apache/commons/commons-lang3/3.4/commons-lang3-3.4.jar\r\n[ERROR] urls[18] = file:/C:/dev/workspace/localrepository/io/gatling/jsonpath_2.11/0.6.4/jsonpath_2.11-0.6.4.jar\r\n[ERROR] urls[19] = file:/C:/dev/workspace/localrepository/org/scalatest/scalatest_2.11/2.2.6/scalatest_2.11-2.2.6.jar\r\n[ERROR] urls[20] = file:/C:/dev/workspace/localrepository/commons-io/commons-io/2.5/commons-io-2.5.jar\r\n[ERROR] urls[21] = file:/C:/dev/workspace/localrepository/org/codehaus/groovy/groovy-all/2.4.7/groovy-all-2.4.7.jar\r\n[ERROR] urls[22] = file:/C:/dev/workspace/localrepository/org/codehaus/groovy/modules/http-builder/http-builder/0.7.1/http-builder-0.7.1.jar\r\n[ERROR] urls[23] = file:/C:/dev/workspace/localrepository/net/sf/json-lib/json-lib/2.3/json-lib-2.3-jdk15.jar\r\n[ERROR] urls[24] = file:/C:/dev/workspace/localrepository/commons-beanutils/commons-beanutils/1.8.0/commons-beanutils-1.8.0.jar\r\n[ERROR] urls[25] = file:/C:/dev/workspace/localrepository/commons-collections/commons-collections/3.2.1/commons-collections-3.2.1.jar\r\n[ERROR] urls[26] = file:/C:/dev/workspace/localrepository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar\r\n[ERROR] urls[27] = file:/C:/dev/workspace/localrepository/net/sf/ezmorph/ezmorph/1.0.6/ezmorph-1.0.6.jar\r\n[ERROR] urls[28] = file:/C:/dev/workspace/localrepository/net/sourceforge/nekohtml/nekohtml/1.9.16/nekohtml-1.9.16.jar\r\n[ERROR] urls[29] = file:/C:/dev/workspace/localrepository/xerces/xercesImpl/2.9.1/xercesImpl-2.9.1.jar\r\n[ERROR] urls[30] = file:/C:/dev/workspace/localrepository/xml-apis/xml-apis/1.3.04/xml-apis-1.3.04.jar\r\n[ERROR] urls[31] = file:/C:/dev/workspace/localrepository/xml-resolver/xml-resolver/1.2/xml-resolver-1.2.jar\r\n[ERROR] urls[32] = file:/C:/dev/workspace/localrepository/org/apache/httpcomponents/httpclient/4.5.2/httpclient-4.5.2.jar\r\n[ERROR] urls[33] = file:/C:/dev/workspace/localrepository/org/apache/httpcomponents/httpcore/4.4.4/httpcore-4.4.4.jar\r\n[ERROR] urls[34] = file:/C:/dev/workspace/localrepository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar\r\n[ERROR] urls[35] = file:/C:/dev/workspace/localrepository/commons-codec/commons-codec/1.9/commons-codec-1.9.jar\r\n[ERROR] urls[36] = file:/C:/dev/workspace/localrepository/com/googlecode/java-diff-utils/diffutils/1.3.0/diffutils-1.3.0.jar\r\n[ERROR] urls[37] = file:/C:/dev/workspace/localrepository/org/reflections/reflections/0.9.10/reflections-0.9.10.jar\r\n[ERROR] urls[38] = file:/C:/dev/workspace/localrepository/com/google/guava/guava/15.0/guava-15.0.jar\r\n[ERROR] urls[39] = file:/C:/dev/workspace/localrepository/org/javassist/javassist/3.19.0-GA/javassist-3.19.0-GA.jar\r\n[ERROR] urls[40] = file:/C:/dev/workspace/localrepository/com/google/code/findbugs/annotations/2.0.1/annotations-2.0.1.jar\r\n[ERROR] urls[41] = file:/C:/dev/workspace/localrepository/net/databinder/unfiltered-netty-server_2.11/0.8.4/unfiltered-netty-server_2.11-0.8.4.jar\r\n[ERROR] urls[42] = file:/C:/dev/workspace/localrepository/net/databinder/unfiltered-netty_2.11/0.8.4/unfiltered-netty_2.11-0.8.4.jar\r\n[ERROR] urls[43] = file:/C:/dev/workspace/localrepository/net/databinder/unfiltered_2.11/0.8.4/unfiltered_2.11-0.8.4.jar\r\n[ERROR] urls[44] = file:/C:/dev/workspace/localrepository/io/netty/netty-codec-http/4.0.24.Final/netty-codec-http-4.0.24.Final.jar\r\n[ERROR] urls[45] = file:/C:/dev/workspace/localrepository/net/databinder/unfiltered-util_2.11/0.8.4/unfiltered-util_2.11-0.8.4.jar\r\n[ERROR] urls[46] = file:/C:/dev/workspace/localrepository/net/databinder/dispatch/dispatch-core_2.11/0.11.3/dispatch-core_2.11-0.11.3.jar\r\n[ERROR] urls[47] = file:/C:/dev/workspace/localrepository/com/ning/async-http-client/1.9.11/async-http-client-1.9.11.jar\r\n[ERROR] urls[48] = file:/C:/dev/workspace/localrepository/io/netty/netty/3.10.0.Final/netty-3.10.0.Final.jar\r\n[ERROR] urls[49] = file:/C:/dev/workspace/localrepository/org/codehaus/groovy/groovy-all/2.4.7/groovy-all-2.4.7-indy.jar\r\n[ERROR] urls[50] = file:/C:/dev/workspace/localrepository/org/codehaus/plexus/plexus-utils/3.0.22/plexus-utils-3.0.22.jar\r\n[ERROR] urls[51] = file:/C:/dev/workspace/localrepository/javax/enterprise/cdi-api/1.0/cdi-api-1.0.jar\r\n[ERROR] urls[52] = file:/C:/dev/workspace/localrepository/javax/annotation/jsr250-api/1.0/jsr250-api-1.0.jar\r\n[ERROR] urls[53] = file:/C:/dev/workspace/localrepository/org/eclipse/sisu/org.eclipse.sisu.inject/0.3.2/org.eclipse.sisu.inject-0.3.2.jar\r\n[ERROR] urls[54] = file:/C:/dev/workspace/localrepository/org/codehaus/plexus/plexus-component-annotations/1.5.5/plexus-component-annotations-1.5.5.jar\r\n[ERROR] urls[55] = file:/C:/dev/workspace/localrepository/org/apache/maven/plugin-tools/maven-plugin-annotations/3.4/maven-plugin-annotations-3.4.jar\r\n[ERROR] Number of foreign imports: 1\r\n[ERROR] import: Entry[import  from realm ClassRealm[maven.api, parent: null]]\r\n[ERROR]\r\n[ERROR] -----------------------------------------------------\r\n[ERROR] : org.fusesource.jansi.internal.CLibrary\r\n[ERROR] -> [Help 1]\r\n[ERROR]\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/453", "user": "bodiam", "labels": ["bug"], "created": "2017-06-05 09:40:59", "closed": "2020-02-22 23:04:48", "commits": {"c1e8aedf955cd25986fe9edb0cf7112e89fe0498": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 992.0002777777778, "commitsDetails": [{"commitHash": "c1e8aedf955cd25986fe9edb0cf7112e89fe0498", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["b21f0598e75bcada487cd1e56ce6ce9a12842321"], "nameRev": "c1e8aedf955cd25986fe9edb0cf7112e89fe0498 tags/3_5_0-rc_3~5^2", "commitMessage": "Removed the inlined jansi classes due to an issue with Maven 3.5.0 #453\n", "commitDateTime": "2017-06-14 14:42:40", "authoredDateTime": "2017-06-14 14:42:40", "commitGitStats": [{"filePath": "build.gradle", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "gradle.properties", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/PactPublishTask.groovy", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/PactVerificationTask.groovy", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-provider-maven/build.gradle", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven/PactProviderMojo.groovy", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven/PactPublishMojo.groovy", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderUtils.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/AnsiConsoleReporter.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/Ansi.java", "insertions": 0, "deletions": 773, "lines": 773}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/AnsiConsole.java", "insertions": 0, "deletions": 184, "lines": 184}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/AnsiOutputStream.java", "insertions": 0, "deletions": 522, "lines": 522}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/AnsiRenderWriter.java", "insertions": 0, "deletions": 76, "lines": 76}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/AnsiRenderer.java", "insertions": 0, "deletions": 216, "lines": 216}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/AnsiString.java", "insertions": 0, "deletions": 95, "lines": 95}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/HtmlAnsiOutputStream.java", "insertions": 0, "deletions": 140, "lines": 140}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/WindowsAnsiOutputStream.java", "insertions": 0, "deletions": 331, "lines": 331}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": ["c1e8aedf955cd25986fe9edb0cf7112e89fe0498"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 23, "deletions": 2345, "lines": 2368, "gitFilesChange": 17}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle", "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org", "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderUtils.groovy", "pact-jvm-provider-maven", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters", "gradle.properties", ""]}, {"title": "ERROR casting map to au.com.dius.pact.model.Provider when initializing", "body": "We are trying to set up our contact tests using the contact created by our iOS application and following the BooksPactProviderTest example. When we run the tests we get the following error:\r\n\r\n`\r\norg.codehaus.groovy.runtime.typehandling.GroovyCastException: Error casting map to au.com.dius.pact.model.Provider, Reason: null\r\n                 at org.codehaus.groovy.runtime.DefaultGroovyMethods.asType(DefaultGroovyMethods.java:10732)\r\n                at org.codehaus.groovy.runtime.dgm$53.doMethodInvoke(Unknown Source)\r\n                at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:232)\r\n                at au.com.dius.pact.model.PactReader.loadV2Pact(PactReader.groovy:66)\r\n                at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:232)\r\n                at au.com.dius.pact.model.PactReader.loadPact(PactReader.groovy:40)\r\n                at au.com.dius.pact.model.PactReader.loadPact(PactReader.groovy)\r\n                at au.com.dius.pact.provider.junit.loader.PactFolderLoader.load(PactFolderLoader.java:54)\r\n                at au.com.dius.pact.provider.junit.PactRunner.<init>(PactRunner.java:73)\r\n                at au.com.dius.pact.provider.junit.RestPactRunner.<init>(RestPactRunner.java:14)\r\n                at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n                at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n                at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n                at java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n                at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\r\n                at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\r\n                at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n                at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\r\n                at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\r\n                at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)\r\n                at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:98)\r\n                at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)\r\n                at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)\r\n                at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)\r\n                at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n                at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n                at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n                at java.lang.reflect.Method.invoke(Method.java:498)\r\n                at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)`\r\n\r\nWhen we step through and try to debug our issue we find that the failure happens  when trying to convert our provider json object as a map \r\n\r\n`\"provider\" : {\r\n      \"name\": \"test-name\"\r\n  }`\r\n\r\nwith the error:\r\n`org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object '{name=Seeds-Endpoint}' with class 'groovy.json.internal.LazyMap' to class 'au.com.dius.pact.model.Provider' due to: groovy.lang.ReadOnlyPropertyException: Cannot set readonly property: name for class: au.com.dius.pact.model.Provider`", "url": "https://github.com/DiUS/pact-jvm/issues/448", "user": "Cramsden", "labels": ["bug"], "created": "2017-05-30 17:20:41", "closed": "2017-07-14 05:31:08", "commits": {"f4522e9b4b8207ad710bc73978c03b767b74a9f4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "67503a4f06c800458114f3bea5b3cff37eadf40f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 44.000277777777775, "commitsDetails": [{"commitHash": "f4522e9b4b8207ad710bc73978c03b767b74a9f4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1f64fcadcabaf25fc410c54f746b8c767a5e01e0"], "nameRev": "f4522e9b4b8207ad710bc73978c03b767b74a9f4 tags/3_4_1~6", "commitMessage": "Avoid the native Groovy conversions from a Map #448\n", "commitDateTime": "2017-06-06 21:13:37", "authoredDateTime": "2017-06-06 21:13:37", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactReader.groovy", "insertions": 4, "deletions": 4, "lines": 8}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "67503a4f06c800458114f3bea5b3cff37eadf40f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["623d7d9b9f63026a979b5fdcce63a0025b5ef588"], "nameRev": "67503a4f06c800458114f3bea5b3cff37eadf40f tags/2_4_19~67", "commitMessage": "Avoid the native Groovy conversions from a Map #448\n", "commitDateTime": "2017-08-15 09:46:40", "authoredDateTime": "2017-06-06 21:13:37", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactReader.groovy", "insertions": 4, "deletions": 4, "lines": 8}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f4522e9b4b8207ad710bc73978c03b767b74a9f4"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 4, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactReader.groovy"]}, {"title": "integer() seems to generate values larger than a signed integer", "body": "Hi,\r\n\r\nFor some reason when we try to generate the pacts on the consumer, we get a generated integer. \r\n\r\nWe are using version 3.3.8\r\n\r\nHere is our test:\r\n```\r\ndef pact with provider'() {\r\n    PactBuilder service = new PactBuilder()\r\n    def request = readFile('mma_requestV2.json').text\r\n    service {\r\n        serviceConsumer CONSUMER_NAME\r\n        hasPactWith PROVIDER_NAME\r\n        port PORT\r\n\r\n        uponReceiving('successful request for service')\r\n        withAttributes(\r\n                method: 'POST',\r\n                path: PATHV2,\r\n                headers: HEADERS,\r\n                body: request\r\n        )\r\n\r\n        willRespondWith(\r\n                status: HTTP_OK,\r\n                headers: HEADERS,\r\n        )\r\n\r\n        withBody(\r\n                {\r\n                    last_updated string()\r\n                    shelves eachLike(\r\n                            {\r\n                                position integer()\r\n                                title string()\r\n                                media eachLike(\r\n                                        {\r\n                                            position integer()\r\n                                            mediaData\r\n                                                    {\r\n                                                        contentType string()\r\n                                                        rating string()\r\n                                                        duration string()\r\n                                                        audioData eachLike(\r\n                                                                {\r\n                                                                    language string()\r\n                                                                }\r\n                                                        )\r\n                                                        subtitleData eachLike(\r\n                                                                {\r\n                                                                    language string()\r\n                                                                }\r\n                                                        )\r\n                                                    }\r\n                                            metadata eachLike(\r\n                                                    {\r\n                                                        profiles eachLike(\r\n                                                                string()\r\n                                                        )\r\n                                                        language string()\r\n                                                        title string()\r\n                                                        director string()\r\n                                                        cast string()\r\n                                                        year string()\r\n                                                        genre string()\r\n                                                        criticScore string()\r\n                                                        description string()\r\n                                                    }\r\n                                            )\r\n                                            images eachLike(\r\n                                                    {\r\n                                                        profiles eachLike(\r\n                                                                string()\r\n                                                        )\r\n                                                        type string()\r\n                                                        size string()\r\n                                                        url string()\r\n                                                    }\r\n                                            )\r\n                                        }\r\n                                )\r\n                            }\r\n                    )\r\n                }\r\n        )\r\n    }\r\n\r\n    when:\r\n    Response response = null\r\n    def result = service.run() {\r\n        CompletableFuture<Response> future = networkService.post(URLV2, HEADERS, request, 3000)\r\n        future.thenAcceptAsync { resp ->\r\n            assert resp.getStatusCode() == 200\r\n            assert resp.getResponseBody() != null\r\n            response = Serializer.fromJson(resp.getResponseBody(), Response.class)\r\n        }.get()\r\n    }\r\n\r\n    then:\r\n    result == PactVerified$.MODULE$\r\n}\r\n```\r\n\r\nAnd here is the exception:\r\n```\r\ncom.fasterxml.jackson.databind.JsonMappingException: Numeric value (7518666669) out of range of int\r\n at [Source: {\r\n    \"last_updated\": \"sNXurCaNrK\",\r\n    \"shelves\": [\r\n        {\r\n            \"position\": 1,\r\n            \"title\": \"NbBpLkrccS\",\r\n            \"media\": [\r\n                {\r\n                    \"position\": 7518666669,\r\n                    \"mediaData\": {\r\n                        \"contentType\": \"8hm7btGUos\",\r\n                        \"rating\": \"To1hyHCBwx\",\r\n                        \"duration\": \"U5kESX3irt\",\r\n                        \"audioData\": [\r\n                            {\r\n                                \"language\": \"MfgHT6KK5N\"\r\n                            }\r\n                        ],\r\n                        \"subtitleData\": [\r\n                            {\r\n                                \"language\": \"VB5YVdqtAw\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"metadata\": [\r\n                        {\r\n                            \"profiles\": [\r\n                                \"cmq7cHWlAX\"\r\n                            ],\r\n                            \"language\": \"QxHfyTQxV2\",\r\n                            \"title\": \"PF4i5ZfgoA\",\r\n                            \"director\": \"NBJ0rnXWlv\",\r\n                            \"cast\": \"qhAvydRwaj\",\r\n                            \"year\": \"I81Q36l0eO\",\r\n                            \"genre\": \"MMXoRX4P01\",\r\n                            \"criticScore\": \"rewPUfcn9Z\",\r\n                            \"description\": \"jm2zVTmhvU\"\r\n                        }\r\n                    ],\r\n                    \"images\": [\r\n                        {\r\n                            \"profiles\": [\r\n                                \"75OxSrj5nR\"\r\n                            ],\r\n                            \"type\": \"s3E9qecEBY\",\r\n                            \"size\": \"csPSxdtVW7\",\r\n                            \"url\": \"kzsUWIj65r\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}; line: 9, column: 43]\r\n at [Source: {\r\n    \"last_updated\": \"sNXurCaNrK\",\r\n    \"shelves\": [\r\n        {\r\n            \"position\": 1,\r\n            \"title\": \"NbBpLkrccS\",\r\n            \"media\": [\r\n                {\r\n                    \"position\": 7518666669,\r\n                    \"mediaData\": {\r\n                        \"contentType\": \"8hm7btGUos\",\r\n                        \"rating\": \"To1hyHCBwx\",\r\n                        \"duration\": \"U5kESX3irt\",\r\n                        \"audioData\": [\r\n                            {\r\n                                \"language\": \"MfgHT6KK5N\"\r\n                            }\r\n                        ],\r\n                        \"subtitleData\": [\r\n                            {\r\n                                \"language\": \"VB5YVdqtAw\"\r\n                            }\r\n                        ]\r\n                    },\r\n                    \"metadata\": [\r\n                        {\r\n                            \"profiles\": [\r\n                                \"cmq7cHWlAX\"\r\n                            ],\r\n                            \"language\": \"QxHfyTQxV2\",\r\n                            \"title\": \"PF4i5ZfgoA\",\r\n                            \"director\": \"NBJ0rnXWlv\",\r\n                            \"cast\": \"qhAvydRwaj\",\r\n                            \"year\": \"I81Q36l0eO\",\r\n                            \"genre\": \"MMXoRX4P01\",\r\n                            \"criticScore\": \"rewPUfcn9Z\",\r\n                            \"description\": \"jm2zVTmhvU\"\r\n                        }\r\n                    ],\r\n                    \"images\": [\r\n                        {\r\n                            \"profiles\": [\r\n                                \"75OxSrj5nR\"\r\n                            ],\r\n                            \"type\": \"s3E9qecEBY\",\r\n                            \"size\": \"csPSxdtVW7\",\r\n                            \"url\": \"kzsUWIj65r\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}; line: 9, column: 33] (through reference chain: com.xxx.Response[\"shelves\"]->java.util.ArrayList[0]->com.xxx.Response[\"media\"]->java.util.ArrayList[0]->com.xxx.Content[\"position\"])\r\n```", "url": "https://github.com/DiUS/pact-jvm/issues/436", "user": "nihalsunthankar", "labels": ["bug"], "created": "2017-05-18 05:31:41", "closed": "2017-07-14 05:52:28", "commits": {"6124987ef6f06c587882cef0ffe817929f43933b": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "17522a36df4fffecddd67ab9089909322258218d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 57.000277777777775, "commitsDetails": [{"commitHash": "6124987ef6f06c587882cef0ffe817929f43933b", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["c1e8aedf955cd25986fe9edb0cf7112e89fe0498"], "nameRev": "6124987ef6f06c587882cef0ffe817929f43933b tags/3_5_0~2^2~1", "commitMessage": "use 9 digits for random numbers so they will fit within the dynamic range of 32 bit integers #436\n", "commitDateTime": "2017-06-14 15:31:59", "authoredDateTime": "2017-06-14 15:31:59", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/Matchers.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "17522a36df4fffecddd67ab9089909322258218d", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["18003f9f725f831b69a4114bd8a5c9e4590dfd6b"], "nameRev": "17522a36df4fffecddd67ab9089909322258218d tags/2_4_19~55", "commitMessage": "use 9 digits for random numbers so they will fit within the dynamic range of 32 bit integers #436\n", "commitDateTime": "2017-08-15 09:53:43", "authoredDateTime": "2017-06-14 15:31:59", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/Matchers.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6124987ef6f06c587882cef0ffe817929f43933b"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy"]}, {"title": "Report overwrite the same file", "body": "Herer is my console output. I have two provider, theater and user. I also configure json and markdown report.\r\n\r\n```\r\n:compileJava UP-TO-DATE\r\n:processResources UP-TO-DATE\r\n:classes UP-TO-DATE\r\n:compileTestJava UP-TO-DATE\r\n:processTestResources UP-TO-DATE\r\n:testClasses UP-TO-DATE\r\n:pactVerify_theater\r\n\r\nVerifying a pact between order and theater\r\n  [from URL http://192.168.5.101:8880/pacts/provider/theater/consumer/order/version/0.0.1]\r\n  Given The show id'5ef2bf0d-6dbf-4de8-a095-93690854da5b' is exist and has 2 more seats\r\n  Get la la land movie detail\r\n    returns a response which\r\n      has status code 200 (OK)\r\n      includes headers\r\n        \"Content-Type\" with value \"application/json; charset=UTF-8\" (OK)\r\n      has a matching body (OK)\r\n:pactVerify_user\r\n\r\nVerifying a pact between order and user\r\n  [from URL http://192.168.5.101:8880/pacts/provider/user/consumer/order/version/0.0.1]\r\n  Given The user, Ben, is exists\r\n  Get la la land movie detail\r\n    returns a response which\r\n      has status code 200 (OK)\r\n      includes headers\r\n        \"Content-Type\" with value \"application/json; charset=UTF-8\" (OK)\r\n      has a matching body (OK)\r\n:pactVerify\r\n\r\nBUILD SUCCESSFUL\r\n\r\nTotal time: 3.532 secs\r\n```\r\nOnly theater present in report directory.\r\n```\r\n.\r\n\u251c\u2500\u2500 build\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 reports\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 pact\r\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 theater.json\r\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 theater.md\r\n\u251c\u2500\u2500 build.gradle\r\n\u251c\u2500\u2500 gradle\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wrapper\r\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 gradle-wrapper.jar\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 gradle-wrapper.properties\r\n\u251c\u2500\u2500 gradlew\r\n\u251c\u2500\u2500 gradlew.bat\r\n\u251c\u2500\u2500 Jenkinsfile\r\n\u251c\u2500\u2500 settings.gradle\r\n\u2514\u2500\u2500 uploadReport.sh\r\n\r\n5 directories, 10 files\r\n```\r\nThe content of the theater.md is the report of user provider.\r\nI guess the report is overwrite the same file.\r\n```\r\n# user\r\n\r\n| Description    | Value |\r\n| -------------- | ----- |\r\n| Date Generated | Sat Apr 22 10:41:00 CST 2017 |\r\n| Pact Version   | 3.3.6 |\r\n\r\n## Verifying a pact between _order_ and _user_\r\n\r\nFrom URL: http://192.168.5.101:8880/pacts/provider/user/consumer/order/version/0.0.1\r\nGiven **The user, Ben, is exists**  \r\nGet la la land movie detail  \r\n&nbsp;&nbsp;returns a response which  \r\n&nbsp;&nbsp;&nbsp;&nbsp;has status code **200** (<span style='color:green'>OK</span>)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;includes headers  \r\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"**Content-Type**\" with value \"**application/json; charset=UTF-8**\" (<span style='color:green'>OK</span>)  \r\n&nbsp;&nbsp;&nbsp;&nbsp;has a matching body (<span style='color:green'>OK</span>)  \r\n```\r\nI use gradle wrapper version 2.13 and pact gradle plugin version 3.3.8.", "url": "https://github.com/DiUS/pact-jvm/issues/411", "user": "b4456609", "labels": ["bug"], "created": "2017-04-22 02:42:29", "closed": "2018-06-17 07:34:16", "commits": {"8b721bf4d31522ae23d3a186913479bd398b2d76": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 421.0002777777778, "commitsDetails": [{"commitHash": "8b721bf4d31522ae23d3a186913479bd398b2d76", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["4e035406c228f12413edebfd455ce7a30d7a4e09"], "nameRev": "8b721bf4d31522ae23d3a186913479bd398b2d76 tags/3_5_18~12", "commitMessage": "do not cache the verification report file objects #411\n", "commitDateTime": "2018-06-11 12:51:59", "authoredDateTime": "2018-06-11 12:51:59", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/JsonReporter.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters/MarkdownReporter.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/reporters/JsonReporterSpec.groovy", "insertions": 34, "deletions": 0, "lines": 34}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/reporters/MarkdownReporterSpec.groovy", "insertions": 34, "deletions": 0, "lines": 34}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8b721bf4d31522ae23d3a186913479bd398b2d76"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/reporters"]}, {"title": "Query match support", "body": "I can see that Pact spec v3 [supports ](https://github.com/pact-foundation/pact-specification/blob/version-3/testcases/request/query/matches%20with%20regex.json) regex matching for request query params. We would like to have this functionality for one of our use-cases.\r\n\r\nAre there plans to implement query matching support in the JUnit Consumer lib?\r\n\r\nThank you very much,\r\nRadu.", "url": "https://github.com/DiUS/pact-jvm/issues/392", "user": "radubutnaru", "labels": ["bug"], "created": "2017-03-17 09:13:05", "closed": "2017-03-28 21:53:03", "commits": {"dede1f85491b10b54f9cc0705d1cf0b327addfdb": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "e3e940711dd1af908f70009fec322b5a0fa42984": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 11.000277777777777, "commitsDetails": [{"commitHash": "dede1f85491b10b54f9cc0705d1cf0b327addfdb", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["32b4fecce6ccb4eef05b397b615a18493b0d27d5"], "nameRev": "dede1f85491b10b54f9cc0705d1cf0b327addfdb tags/3_3_7~3", "commitMessage": "Added query parameter matching support to the Java DSL #392\n", "commitDateTime": "2017-03-26 14:55:48", "authoredDateTime": "2017-03-26 14:55:38", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/README.md", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "pact-jvm-consumer/README.md", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 31, "deletions": 5, "lines": 36}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java", "insertions": 6, "deletions": 4, "lines": 10}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslResponse.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/test/java/au/com/dius/pact/consumer/MatchingTest.java", "insertions": 18, "deletions": 0, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.query(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchQuery(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchQuery(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestWithoutPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.query(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "PactDslResponse.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.addInteraction()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "MatchingTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MatchingTest.testRegexpMatchingOnQueryParameters()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "e3e940711dd1af908f70009fec322b5a0fa42984", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d064077855d57d1319dcf7b8cbce91f647370b8a"], "nameRev": "e3e940711dd1af908f70009fec322b5a0fa42984 tags/2_4_19~133", "commitMessage": "Added query parameter matching support to the Java DSL #392\n\nConflicts:\n\tpact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java\n", "commitDateTime": "2017-08-14 13:09:52", "authoredDateTime": "2017-03-26 14:55:38", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/README.md", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "pact-jvm-consumer/README.md", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 29, "deletions": 3, "lines": 32}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslResponse.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/test/java/au/com/dius/pact/consumer/MatchingTest.java", "insertions": 18, "deletions": 0, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslRequestWithPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.query(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchQuery(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchQuery(java.lang.String,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslRequestWithoutPath.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.query(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "PactDslResponse.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.addInteraction()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "MatchingTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MatchingTest.testRegexpMatchingOnQueryParameters()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["dede1f85491b10b54f9cc0705d1cf0b327addfdb"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 38, "deletions": 10, "lines": 48, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 13, "UPD": 3, "INS": 6, "MOV": 1, "DEL": 3, "spoonFilesChanged": 3, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath.query(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchQuery(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.matchQuery(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath.query(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslResponse.addInteraction()", "au.com.dius.pact.consumer.dsl.PactDslRequestWithPath", "au.com.dius.pact.consumer.dsl.PactDslRequestWithoutPath"]}, {"title": "`@VersionedPactUrl` should blow up if nothing to filter", "body": "If there is nothing to filter (_e.g. ${app.version}_) when using `@VersionedPactUrl`, this is a sign that you should either be using the default `@PactUrl` or you have temporarily replaced the tokens with hard coded values to test locally.\r\n\r\n`@VersionedPactUrl` blowing up is a safe reminder of this and I have found this to cause issues in the past.", "url": "https://github.com/DiUS/pact-jvm/issues/386", "user": "tjheslin1", "labels": ["bug"], "created": "2017-03-07 12:01:24", "closed": "2017-03-26 10:56:19", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "eachLike doesn't seem to generate proper o/p in Java", "body": "below is my DSL\r\n   ```\r\n   .object(\"dataStorePathInfo\")\r\n            .stringMatcher(\"basePath\", String.format(\"%s/%s/training-data/[a-z0-9]{20,24}\", CUSTOMER, TRAINING))\r\n             .eachLike(\"fileNames\", PactDslJsonRootValue.stringType(\"abc.txt\") ,1)\r\n   .closeObject()\r\n```\r\n\r\no/p generated is as follows\r\n\r\n```\r\n\"dataStorePathInfo\": {\r\n    \"basePath\": \"acctestcustomer/acctesttraining/training-data/l0at879y7786mv5z30g1\",\r\n    \"fileNames\": [\r\n         \"\\\"abc.txt\\\"\"\r\n    ]\r\n}\r\n```\r\n\r\nI was expecting file name in o/p to be just **\"abc.txt\"** and not **\"\\\\\"abc.txt\\\\\"\"**", "url": "https://github.com/DiUS/pact-jvm/issues/385", "user": "coding-yogi", "labels": ["bug"], "created": "2017-03-05 03:16:11", "closed": "2017-05-09 22:22:10", "commits": {"d76ac26bc2966dfc50094cdc54e6055ccd2259c7": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "e291e5f3514e9a45b7583c8973c2159db060cae7": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 65.00027777777778, "commitsDetails": [{"commitHash": "d76ac26bc2966dfc50094cdc54e6055ccd2259c7", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a6d9e5709dd065e26820eabd51c2ddaedd58a2e7"], "nameRev": "d76ac26bc2966dfc50094cdc54e6055ccd2259c7 tags/3_3_9~2", "commitMessage": "Only encode JSON values if the PactDslJsonRootValue is used at the body root #385\n", "commitDateTime": "2017-05-08 20:26:11", "authoredDateTime": "2017-05-08 20:26:11", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonRootValue.java", "insertions": 16, "deletions": 1, "lines": 17}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslResponse.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonBodyMatcherSpec.groovy", "insertions": 21, "deletions": 4, "lines": 25}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonRootValueSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonRootValue.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.getBody()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.isEncodeJson()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.setEncodeJson(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslResponse.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "e291e5f3514e9a45b7583c8973c2159db060cae7", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e09bb49b112614dd0d4a8a285dac6b754e67447f"], "nameRev": "e291e5f3514e9a45b7583c8973c2159db060cae7 tags/2_4_19~113", "commitMessage": "Only encode JSON values if the PactDslJsonRootValue is used at the body root #385\n", "commitDateTime": "2017-08-14 13:47:43", "authoredDateTime": "2017-05-08 20:26:11", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonRootValue.java", "insertions": 16, "deletions": 1, "lines": 17}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslResponse.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonBodyMatcherSpec.groovy", "insertions": 21, "deletions": 4, "lines": 25}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonRootValueSpec.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonRootValue.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.getBody()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.isEncodeJson()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.setEncodeJson(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslResponse.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslResponse.body(au.com.dius.pact.consumer.dsl.DslPart)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d76ac26bc2966dfc50094cdc54e6055ccd2259c7"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 21, "deletions": 1, "lines": 22, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 5, "MOV": 1, "DEL": 1, "spoonFilesChanged": 2, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.setEncodeJson(boolean)", "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.isEncodeJson()", "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.getBody()", "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue", "au.com.dius.pact.consumer.dsl.PactDslResponse.body(au.com.dius.pact.consumer.dsl.DslPart)"]}, {"title": "Pact fails to rerun a request with multipart form data ", "body": "My tests generate a PACT file with multipart-form data. When I run the Pact file at provider end it fails saying \"Stream ended unexpectedly\".\r\n\r\nIf I send exactly same request as that of a PACT file by creating my own HTTP client, it works great. It seems something is messing up the request. Mostly I feel its the [this code](https://github.com/DiUS/pact-jvm/blob/master/pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderClient.groovy#L110)\r\n\r\nHere is my request from recorded interaction:  \r\n\r\n\"request\": {\r\n                \"method\": \"POST\",\r\n                \"path\": \"/some/path\",\r\n                \"headers\": {\r\n                    \"Content-Type\": \"multipart/form-data; boundary=----WebKitFormBoundary\"\r\n                },\r\n                \"body\": \"------WebKitFormBoundary\\nContent-Disposition: form-data; name=\\\"file\\\"; filename=\\\"somemodel.txt\\\"\\nContent-Type: application/octet-stream\\nContent-Transfer-Encoding: binary\\n\\nsome model\\n------WebKitFormBoundary--\"\r\n            }\r\n\r\n\r\nHttp Client request generated with exactly same body , works fine\r\n\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/376", "user": "coding-yogi", "labels": ["bug"], "created": "2017-02-08 07:12:08", "closed": "2017-02-12 07:23:05", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "Groovy: Matchers can be used with query parameters ", "body": "The Groovy DSL currently supports matchers on everything except query parameters.", "url": "https://github.com/DiUS/pact-jvm/issues/375", "user": "uglyog", "labels": ["bug"], "created": "2017-02-06 00:58:24", "closed": "2017-03-26 05:11:23", "commits": {"da3b39ff935d6f3b276f375f184070ba2f967d4f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "efd970e00ced59e801776c84d559a1130275f0ea": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 48.000277777777775, "commitsDetails": [{"commitHash": "da3b39ff935d6f3b276f375f184070ba2f967d4f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["dede1f85491b10b54f9cc0705d1cf0b327addfdb"], "nameRev": "da3b39ff935d6f3b276f375f184070ba2f967d4f tags/3_3_7~2", "commitMessage": "Added query parameter matching support to the Groovy DSL #375\n", "commitDateTime": "2017-03-26 15:23:08", "authoredDateTime": "2017-03-26 15:23:08", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/README.md", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBuilder.groovy", "insertions": 17, "deletions": 1, "lines": 18}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/GroovyConsumerMatchersPactSpec.groovy", "insertions": 27, "deletions": 0, "lines": 27}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "efd970e00ced59e801776c84d559a1130275f0ea", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e3e940711dd1af908f70009fec322b5a0fa42984"], "nameRev": "efd970e00ced59e801776c84d559a1130275f0ea tags/2_4_19~132", "commitMessage": "Added query parameter matching support to the Groovy DSL #375\n", "commitDateTime": "2017-08-14 13:10:15", "authoredDateTime": "2017-03-26 15:23:08", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/README.md", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBuilder.groovy", "insertions": 17, "deletions": 1, "lines": 18}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/GroovyConsumerMatchersPactSpec.groovy", "insertions": 27, "deletions": 0, "lines": 27}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["da3b39ff935d6f3b276f375f184070ba2f967d4f"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 17, "deletions": 1, "lines": 18, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy"]}, {"title": "[Pact-jvm-consumer-junit] In case of multi providers, pact file for only one provider is generated", "body": "Setup:\r\nTwo providers defined with MessagePactProviderRule\r\nConsumer is same in this case\r\nPact defined for consumer with every provider\r\n\r\nWhen the tests are ran for all the providers, pact file for only of the provider gets generated\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/371", "user": "coding-yogi", "labels": ["bug"], "created": "2017-01-23 08:29:31", "closed": "2020-02-22 22:30:11", "commits": {"b29279a2e1f91b46746a2744c71bbf4c7b3eeb81": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 1125.0002777777777, "commitsDetails": [{"commitHash": "b29279a2e1f91b46746a2744c71bbf4c7b3eeb81", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["17554aaaa99a0d2751cdee75b2af218fb72b5342"], "nameRev": "b29279a2e1f91b46746a2744c71bbf4c7b3eeb81 tags/3_3_6~4", "commitMessage": "Correct the MessagePactProviderRule so that multiple rules can be used in one test #371\n", "commitDateTime": "2017-01-26 13:38:54", "authoredDateTime": "2017-01-26 13:28:29", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/MessagePactProviderRule.java", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/v3/Defect371Test.java", "insertions": 75, "deletions": 0, "lines": 75}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/v3/ExampleMessageConsumerWithV2MatchersTest.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessagePactProviderRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MessagePactProviderRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "Defect371Test.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.v3.Defect371Test", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExampleMessageConsumerWithV2MatchersTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.v3.ExampleMessageConsumerWithV2MatchersTest.test()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b29279a2e1f91b46746a2744c71bbf4c7b3eeb81"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 2, "lines": 7, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.MessagePactProviderRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()"]}, {"title": "Error parsing simple root-level string as JSON", "body": "I'm trying to create a PACT consumer test for a provider that returns a simple String as it's response body with a Content-Type of **application/json**.  I am declaring my PACT fragment as follows:\r\n\r\n```\r\n        Map<String, String> headers = new HashMap<String, String>();\r\n        headers.put(\"Content-Type\", \"application/json\");\r\n\r\n        builder\r\n                .uponReceiving(\"a request for a simple string\")\r\n                    .path(\"/provider/uri\")\r\n                    .method(\"GET\")\r\n                .willRespondWith()\r\n                    .status(STATUS_OK)\r\n                    .headers(headers)\r\n                    .body(PactDslJsonRootValue.stringType())\r\n                .toFragment();\r\n```\r\nHowever, when I run this junit consumer test (as a consumer) I receive the following error:\r\n```\r\ngroovy.json.JsonException: false not parsed properly\r\n\r\nThe current character read is 'f' with an int value of 102\r\nfalse not parsed properly\r\nline number 1\r\nindex number 1\r\nfMqERmSJkswiAwHKYlbV\r\n.^\r\n```\r\nIf I change the Content-Type to **text/plain** the unit test will run and the PACT contract will be created, however it will obviously fail when run against our provider.  I have also tried creating the fragment using a String literal as the body (rather than the type matcher) with the same result.\r\n\r\nIs this a bug or is there another way to test this type of provider?\r\n\r\nThanks in advance!\r\n\r\nDave", "url": "https://github.com/DiUS/pact-jvm/issues/369", "user": "mouserd", "labels": ["bug"], "created": "2017-01-19 00:42:25", "closed": "2017-07-20 22:42:32", "commits": {"17554aaaa99a0d2751cdee75b2af218fb72b5342": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "67a95879592f50f36b002c0529b3fef60bcdc6fc": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 182.00027777777777, "commitsDetails": [{"commitHash": "17554aaaa99a0d2751cdee75b2af218fb72b5342", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1f9a90e71da96eda9946fc2f2d9992e2288f946f"], "nameRev": "17554aaaa99a0d2751cdee75b2af218fb72b5342 tags/3_3_6~5", "commitMessage": "Correct the PactDslJsonRootValue to generate correctly encoded JSON strings #369\n", "commitDateTime": "2017-01-19 15:35:34", "authoredDateTime": "2017-01-19 15:35:34", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/Defect369Test.java", "insertions": 45, "deletions": 0, "lines": 45}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonRootValue.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonBodyMatcherSpec.groovy", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonRootValueSpec.groovy", "insertions": 35, "deletions": 0, "lines": 35}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Defect369Test.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.Defect369Test", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonRootValue.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.getBody()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "67a95879592f50f36b002c0529b3fef60bcdc6fc", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["226fe53137fdae90dd5fa64515484e5c7a3cb9c1"], "nameRev": "67a95879592f50f36b002c0529b3fef60bcdc6fc tags/2_4_19~150", "commitMessage": "Correct the PactDslJsonRootValue to generate correctly encoded JSON strings #369\n", "commitDateTime": "2017-08-14 12:43:40", "authoredDateTime": "2017-01-19 15:35:34", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/Defect369Test.java", "insertions": 45, "deletions": 0, "lines": 45}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonRootValue.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonBodyMatcherSpec.groovy", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslJsonRootValueSpec.groovy", "insertions": 35, "deletions": 0, "lines": 35}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Defect369Test.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.Defect369Test", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonRootValue.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.getBody()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["17554aaaa99a0d2751cdee75b2af218fb72b5342"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 0, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslJsonRootValue.getBody()"]}, {"title": "AmqpTarget missing on pact-jvm-provider-junit 3.5.0-beta.2", "body": "I'm trying to get a simple test for consumer & producer up and running in a Messaging Queue scenario with pact-jvm-provider-junit and pact-jvm-consumer-junit.\r\nI tried running 3.3.4 where AmqpTarget exists, but the consumer part seems to generate a message format which doesn't play nicely with JSON data comparisons. This code:\r\n```\r\nPactDslJsonBody body = new PactDslJsonBody()\r\n        .stringValue(\"name\", \"value1\")\r\n        .numberValue(\"value\", 1);\r\n\r\n    Map<String, String> metadata = new HashMap<String, String>();\r\n    metadata.put(\"contentType\", \"application/json\");\r\n\r\n    return builder.given(\"SomeProviderState\")\r\n        .expectsToReceive(\"a test message\")\r\n        .withMetadata(metadata)\r\n        .withContent(body)\r\n        .toPact();\r\n```\r\n\r\nProduces a pact-file like:\r\n```\r\n{\r\n    \"description\": \"a test message\",\r\n    \"metaData\": {\r\n        \"contentType\": \"application/json\",\r\n        \"Content-Type\": \"application/json; charset=UTF-8\"\r\n    },\r\n    \"contents\": \"{name=value1, value=1}\",\r\n    \"providerState\": \"SomeProviderState\"\r\n}\r\n```\r\n\r\nThe contents then fail my provider tests, as it's doing the comparison wrong.\r\nThis very simple test:\r\n```\r\n@PactVerifyProvider(\"a test message\")\r\n  public String verifySimpleMessage() throws Exception {\r\n    ExampleThing thing = new ExampleThing();\r\n    thing.name = \"value1\";\r\n    thing.value = 1;\r\n\r\n    return DummyEventHandler.exampleThingToJson(thing);\r\n  }\r\n```\r\nfails with \r\n```\r\njava.lang.AssertionError: \r\n0 - $.body -> Expected '{name=value1, value=1}' but received Map(name -> value1, value -> 1)\r\n```\r\n\r\nUpgrading to 3.5.0-beta.2 I get much better pact-file output from my consumer, but the AmqpTarget class doesn't exist so I can't test my producer. The 3.5.0-beta.2 pact-file for the same code as above is:\r\n```\r\n{\r\n    \"description\": \"a test message\",\r\n    \"contents\": {\r\n        \"name\": \"value1\",\r\n        \"value\": 1\r\n    },\r\n    \"providerState\": \"SomeProviderState\"\r\n}\r\n```\r\n\r\nShould AmqpTarget exist in the 3.5-branches, or is there another way of doing these tests in 3.5 that I'm missing?", "url": "https://github.com/DiUS/pact-jvm/issues/368", "user": "zwant", "labels": ["bug"], "created": "2017-01-17 13:41:02", "closed": "2017-09-09 22:17:24", "commits": {"1f9a90e71da96eda9946fc2f2d9992e2288f946f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 235.00027777777777, "commitsDetails": [{"commitHash": "1f9a90e71da96eda9946fc2f2d9992e2288f946f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["683b0dcb54995c69062bd9aed165cdfd70b2f630"], "nameRev": "1f9a90e71da96eda9946fc2f2d9992e2288f946f tags/3_3_6~6", "commitMessage": "Fixed issue with message pacts generating invalid JSON for message contents #368\n", "commitDateTime": "2017-01-18 15:44:17", "authoredDateTime": "2017-01-18 15:44:17", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/Message.groovy", "insertions": 8, "deletions": 4, "lines": 12}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactMergeSpec.groovy", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/v3/messaging/MessageSpec.groovy", "insertions": 31, "deletions": 15, "lines": 46}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1f9a90e71da96eda9946fc2f2d9992e2288f946f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 4, "lines": 12, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3"]}, {"title": "mvn pact:publish reports successful build when push fails", "body": "Just attempted to publish a pact to the broker (using version 3.3.3 of the maven plugin) and had this happen.\r\n```\r\nPublishing idm-client-idm.json ... FAILED! 400 Bad Request - Consumer version number '2.21.0-SNAPSHOT' cannot be parsed to a version number. The expected format (unless this configuration has been overridden) is a semantic version. eg. 1.3.0 or 2.0.4.rc1\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD SUCCESS\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time: 2.016 s\r\n[INFO] Finished at: 2017-01-03T16:31:24-05:00\r\n[INFO] Final Memory: 22M/308M\r\n[INFO] ------------------------------------------------------------------------\r\n```\r\nThe maven build should probably fail on a 4xx or 5xx error code.", "url": "https://github.com/DiUS/pact-jvm/issues/361", "user": "cah-andrew-fitzgerald", "labels": ["bug"], "created": "2017-01-03 21:36:57", "closed": "2017-02-12 06:11:48", "commits": {"cd51d118bb281594ba2a6e6c6e5e6044c47ad128": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "6c52f4b623561437865bdecc59c3ee6919328b62": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 39.000277777777775, "commitsDetails": [{"commitHash": "cd51d118bb281594ba2a6e6c6e5e6044c47ad128", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["cb5c095ffccffa1603737d82e7a4989a729a7ee3"], "nameRev": "cd51d118bb281594ba2a6e6c6e5e6044c47ad128 tags/3_3_4~4", "commitMessage": "Update the maven publish mojo to thrown an exception if any pact file is not published #361\n", "commitDateTime": "2017-01-04 12:39:44", "authoredDateTime": "2017-01-04 12:39:44", "commitGitStats": [{"filePath": "build.gradle", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-provider-gradle/build.gradle", "insertions": 0, "deletions": 5, "lines": 5}, {"filePath": "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven/PactPublishMojo.groovy", "insertions": 16, "deletions": 3, "lines": 19}, {"filePath": "pact-jvm-provider-maven/src/test/groovy/au/com/dius/pact/provider/maven/PactPublishMojoSpec.groovy", "insertions": 52, "deletions": 0, "lines": 52}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "6c52f4b623561437865bdecc59c3ee6919328b62", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["5d3ffb91040c4c45b0a387b3ccf92014899769a5"], "nameRev": "6c52f4b623561437865bdecc59c3ee6919328b62 tags/2_4_19~164", "commitMessage": "Update the maven publish mojo to thrown an exception if any pact file is not published #361\n", "commitDateTime": "2017-08-14 11:51:51", "authoredDateTime": "2017-01-04 12:39:44", "commitGitStats": [{"filePath": "build.gradle", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-provider-gradle/build.gradle", "insertions": 0, "deletions": 5, "lines": 5}, {"filePath": "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven/PactPublishMojo.groovy", "insertions": 16, "deletions": 3, "lines": 19}, {"filePath": "pact-jvm-provider-maven/src/test/groovy/au/com/dius/pact/provider/maven/PactPublishMojoSpec.groovy", "insertions": 52, "deletions": 0, "lines": 52}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cd51d118bb281594ba2a6e6c6e5e6044c47ad128"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 21, "deletions": 8, "lines": 29, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["", "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven", "pact-jvm-provider-gradle"]}, {"title": "Problems with Pact for Service returning just a Number (Version 3.3.3 and 3.5.0)", "body": "I have a service which returns just a number, like 12345678.\r\n\r\nHere is the consumer test:\r\n\r\n    @RunWith(WeldJunit4Runner.class)\r\n    @WeldConfiguration \r\n    public class FachnummerServiceConsumerTest {\r\n\r\n      @Inject\r\n      Service service;\r\n\r\n      @Test\r\n      public void test() throws IOException {\r\n        PactDslJsonRootValue responseJson = PactDslJsonRootValue.integerType(12345678);\r\n\r\n        PactFragment pactFragment = ConsumerPactBuilder\r\n                .consumer(\"ServiceConsumer\")\r\n                .hasPactWith(\"ServiceProvider\")\r\n                .uponReceiving(\"createNumber\")\r\n                  .path(\"/pathToService\")\r\n                  .query(\"param1=73&param2=1\")\r\n                  .body((String)null)\r\n                  .method(\"POST\")\r\n                .willRespondWith()\r\n\r\n                  .status(201)\r\n                  .body(responseJson)\r\n                  .headers(headers(\"Content-Type\", \"text/plain\"))\r\n                .toFragment();\r\n\r\n          MockProviderConfig config = MockProviderConfig.createDefault();\r\n          VerificationResult vResult = pactFragment.runConsumer(config, (c) -> {\r\n\r\n            //reconfigure our integration service so that it calls the PACT server which runs locally\r\n        service.restClient.getRequestConfiguration().setBaseUrl(c.getScheme()+\"://\"+c.getHostname()+\":\"+c.getPort() + \"/rest\");\r\n\r\n            //when\r\n            String number = service.getNumber();\r\n\r\n            //then\r\n            assertEquals(\"12345678\", number);\r\n            //assertTrue(fachnummer.matches(\"[0-9]*\"));\r\n        });\r\n\r\n        if (vResult instanceof PactError) {\r\n            throw new RuntimeException(((PactError)vResult).error());\r\n        }\r\n        assertEquals(ConsumerPactTest.PACT_VERIFIED, vResult);\r\n    }\r\n}\r\n\r\nThis test passes and creates the following pact:\r\n\r\n    {\r\n        \"provider\": {\r\n            \"name\": \"ServiceProvider\"\r\n        },\r\n        \"consumer\": {\r\n            \"name\": \"ServiceConsumer\"\r\n        },\r\n        \"interactions\": [\r\n            {\r\n                \"description\": \"createNumber\",\r\n                \"request\": {\r\n                    \"method\": \"POST\",\r\n                    \"path\": \"/rest/\",\r\n                    \"query\": \"parameter1=73&parameter2=1\",\r\n                    \"body\": null\r\n                },\r\n                \"response\": {\r\n                    \"status\": 201,\r\n                    \"headers\": {\r\n                        \"Content-Type\": \"text/plain\"\r\n                    },\r\n                    \"body\": \"12345678\",   <--- THIS LINE IS PROBLEMATIC IN 3.3.3\r\n                    \"matchingRules\": {\r\n                        \"$\": {               <-- THIS LINE APPEARS PROBLEMATIC IN 3.5.0-Beta2\r\n                            \"matchers\": [\r\n                                {\r\n                                    \"match\": \"integer\"\r\n                                }\r\n                            ]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        \"metadata\": {\r\n            \"pact-specification\": {\r\n                \"version\": \"2.0.0\"\r\n            },\r\n            \"pact-jvm\": {\r\n                \"version\": \"3.5.0-beta.2\"\r\n            }\r\n        }\r\n    }\r\n\r\nSee the comments in the pact for the two problems that I have.\r\n\r\n3.3.3 Error:\r\n\r\n    returns a response which\r\n      has status code 201 (OK)\r\n      includes headers\r\n        \"Content-Type\" with value \"text/plain\" (OK)\r\n      has a matching body (FAILED)\r\n\r\n    Failures:\r\n\r\n    0) createNumber returns a response which has a matching body\r\n      / -> mismatch\r\n\r\n      Diff:\r\n\r\n      @0\r\n      -12345678\r\n      +670015005301\r\n      \r\n    java.lang.AssertionError: \r\n    0 - / -> mismatch\r\n\r\n\tat au.com.dius.pact.provider.junit.target.BaseTarget.getAssertionError(BaseTarget.java:84)\r\n\tat au.com.dius.pact.provider.junit.target.HttpTarget.testInteraction(HttpTarget.java:121)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner$2.evaluate(InteractionRunner.java:181)\r\n\tat au.com.dius.pact.provider.junit.InteractionRunner.run(InteractionRunner.java:141)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.java:101)\r\n\tat au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.java:51)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n\tat com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:51)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:237)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:497)\r\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\r\n\r\n\r\nWith 3.5.0-beta2: crashes with an exception in groovy code with an array out of bounds exception in MatchingRules.groovy:\r\n\r\n      void fromV2Map(Map map) {\r\n        map.each {\r\n          def path = it.key.split('\\\\.')        <-- since the pact contains just \"$\", there is no \".\" => no element 1 for below\r\n          if (it.key.startsWith(DOLLAR_BODY)) {\r\n            if (it.key == DOLLAR_BODY) {\r\n              addV2Rule(BODY, DOLLAR, it.value)\r\n            } else {\r\n              addV2Rule(BODY, DOLLAR + it.key[6..-1], it.value)\r\n            }\r\n          } else if (it.key.startsWith('$.headers')) {\r\n            addV2Rule('header', path[TWO], it.value)\r\n          } else {\r\n            addV2Rule(path[1], path.size() > TWO ? path[TWO] : null, it.value)    <-- Element 1 does not exist!\r\n          }\r\n        }\r\n      }\r\n\r\n", "url": "https://github.com/DiUS/pact-jvm/issues/348", "user": "maxant", "labels": ["bug"], "created": "2016-12-02 06:17:03", "closed": "2017-04-10 20:45:20", "commits": {}, "ttf": 129.00027777777777, "commitsDetails": []}, {"title": "Pact JVM JUnit Provider doesn't fail when States are missing", "body": "When tests are run that require a provider state using the JUnit provider, the test proceeds without setting a state if a state annotation is not found.\r\n\r\nThe test should instead fail with an error message informing the user that there is no annotation containing the given provider state.", "url": "https://github.com/DiUS/pact-jvm/issues/345", "user": "cah-andrew-fitzgerald", "labels": ["bug"], "created": "2016-11-03 12:20:34", "closed": "2017-01-04 01:35:41", "commits": {"191de47dcf957c5595279197082897a8ba7687b4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 61.000277777777775, "commitsDetails": [{"commitHash": "191de47dcf957c5595279197082897a8ba7687b4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["393429ecab95f55f2b55def5f6bed1b85355faac"], "nameRev": "191de47dcf957c5595279197082897a8ba7687b4 tags/3_3_3~1", "commitMessage": "JUnit provider tests now fail if there is no state change method #345\n", "commitDateTime": "2016-11-06 13:39:37", "authoredDateTime": "2016-11-06 13:39:37", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/InteractionRunner.java", "insertions": 6, "deletions": 2, "lines": 8}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/MissingStateChangeMethod.java", "insertions": 23, "deletions": 0, "lines": 23}, {"filePath": "pact-jvm-provider-junit/src/test/java/au/com/dius/pact/provider/junit/AmqpTest.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-provider-junit/src/test/java/au/com/dius/pact/provider/junit/ArticlesContractTest.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-provider-junit/src/test/java/au/com/dius/pact/provider/junit/ExpectedToFailInteractionRunner.java", "insertions": 63, "deletions": 0, "lines": 63}, {"filePath": "pact-jvm-provider-junit/src/test/java/au/com/dius/pact/provider/junit/ExpectedToFailPactRunner.java", "insertions": 19, "deletions": 0, "lines": 19}, {"filePath": "pact-jvm-provider-junit/src/test/java/au/com/dius/pact/provider/junit/ProviderStateTest.java", "insertions": 42, "deletions": 0, "lines": 42}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InteractionRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.InteractionRunner.withStateChanges(au.com.dius.pact.model.Interaction,java.lang.Object,org.junit.runners.model.Statement)", "TOT": 10, "UPD": 0, "INS": 4, "MOV": 4, "DEL": 2}]}, {"spoonFilePath": "MissingStateChangeMethod.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.MissingStateChangeMethod", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AmqpTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.AmqpTest.someProviderState()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ArticlesContractTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.ArticlesContractTest.stateChange()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExpectedToFailInteractionRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.ExpectedToFailInteractionRunner", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExpectedToFailPactRunner.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.ExpectedToFailPactRunner", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ProviderStateTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.ProviderStateTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["191de47dcf957c5595279197082897a8ba7687b4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 30, "deletions": 2, "lines": 32, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 13, "UPD": 0, "INS": 7, "MOV": 4, "DEL": 2, "spoonFilesChanged": 4, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit", "pact-jvm-provider-junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.ExpectedToFailPactRunner", "au.com.dius.pact.provider.junit.ExpectedToFailInteractionRunner", "au.com.dius.pact.provider.junit.MissingStateChangeMethod", "au.com.dius.pact.provider.junit.InteractionRunner.withStateChanges(au.com.dius.pact.model.Interaction,java.lang.Object,org.junit.runners.model.Statement)"]}, {"title": "Pact consumer - when running a JUnit 4 spec with multiple tests every second pact test fails", "body": "We are using pact-jvm-provider-gradle_2.11::3.2.1 to test the downstream dependency in a springboot app. We have found that in one of our specs that has multiple pact tests every second test fails saying that the expected requests were not received. If we run them individually each test works fine, and also when we put a 4 second delay into a @Before, then they all pass. We have also tried running them in a different order and it is always every second test that fails, regardless.\n\nWe have tried using versions 3.3.2, 3.3.1, 3.2.13 and 3.1.3 and all have the same problem.\n", "url": "https://github.com/DiUS/pact-jvm/issues/342", "user": "andrewspinks", "labels": ["bug"], "created": "2016-10-28 04:32:00", "closed": "2017-12-20 05:32:17", "commits": {"2ebefd09306322b44a7ab9f99ea97493eccea749": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "54d8a2771df433560c3a7422903c700495e7b6bd": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 418.0002777777778, "commitsDetails": [{"commitHash": "2ebefd09306322b44a7ab9f99ea97493eccea749", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["36e6ffc11dd6089ea0e84b44775243698fa37a50"], "nameRev": "2ebefd09306322b44a7ab9f99ea97493eccea749 tags/3_3_3~9", "commitMessage": "created an example JUnit test class with mutiple tests #342\n", "commitDateTime": "2016-10-29 16:03:20", "authoredDateTime": "2016-10-29 16:03:20", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/groovy/au/com/dius/pact/consumer/junit/Defect342MultiTest.groovy", "insertions": 150, "deletions": 0, "lines": 150}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "54d8a2771df433560c3a7422903c700495e7b6bd", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["79890f124a5568df571421b727fdd014e02197ba"], "nameRev": "54d8a2771df433560c3a7422903c700495e7b6bd tags/3_5_12~19", "commitMessage": "add a note about tests failing because of HTTP connection caching in the HTTP client #342\n", "commitDateTime": "2017-12-20 16:32:07", "authoredDateTime": "2017-12-20 16:32:07", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/README.md", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "pact-jvm-consumer-junit/README.md", "insertions": 7, "deletions": 0, "lines": 7}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2ebefd09306322b44a7ab9f99ea97493eccea749", "54d8a2771df433560c3a7422903c700495e7b6bd"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "AmqpTarget and @PactFolder don't play well with each other", "body": "Running a message pact verification test with the AmqpTarget and @PactBroker works fine, but it throws an error if using @PactFolder instead.\nDebugging the code it seems the method getProviderInfo of the AmqpTarget sets the provider consumers with their names only (pactFile value is missing) and further down the execution the ProviderVerifier will throw an error when executing the method loadPactFileForConsumer with a consumer with null pactFile.\n", "url": "https://github.com/DiUS/pact-jvm/issues/341", "user": "andreschaffer", "labels": ["bug"], "created": "2016-10-26 15:50:20", "closed": "2017-02-12 06:16:42", "commits": {"f73b1e2be89c0b253937e4a31f0d38545dbe50ec": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 108.00027777777778, "commitsDetails": [{"commitHash": "f73b1e2be89c0b253937e4a31f0d38545dbe50ec", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["2ebefd09306322b44a7ab9f99ea97493eccea749"], "nameRev": "f73b1e2be89c0b253937e4a31f0d38545dbe50ec tags/3_3_3~8", "commitMessage": "Corrected the AmqpTarget which was incorrectly loading the pacts from the source a second time #341\n", "commitDateTime": "2016-10-29 17:09:41", "authoredDateTime": "2016-10-29 17:09:41", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/ProviderVerifierStateChangeSpec.groovy", "insertions": 2, "deletions": 29, "lines": 31}, {"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/target/AmqpTarget.java", "insertions": 6, "deletions": 26, "lines": 32}, {"filePath": "pact-jvm-provider-junit/src/test/java/au/com/dius/pact/provider/junit/AmqpTest.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "pact-jvm-provider-junit/src/test/resources/amqp_pacts/message_test_consumer-test_provider.json", "insertions": 26, "deletions": 0, "lines": 26}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy", "insertions": 6, "deletions": 7, "lines": 13}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AmqpTarget.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.target.AmqpTarget.testInteraction(java.lang.String,au.com.dius.pact.model.Interaction)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.provider.junit.target.AmqpTarget.getProviderInfo()", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 4}]}, {"spoonFilePath": "AmqpTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.AmqpTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f73b1e2be89c0b253937e4a31f0d38545dbe50ec"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 12, "deletions": 33, "lines": 45, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 8, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 5, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.target.AmqpTarget.getProviderInfo()", "au.com.dius.pact.provider.junit.target.AmqpTarget.testInteraction(java.lang.String,au.com.dius.pact.model.Interaction)"]}, {"title": "Issues when URL contains encoded string", "body": "My URL is like this _/tenants/**tester%2Ftoken**/jobs/external-id_ \nBut when pact provider verifies this, its sending following request to server and resulting 404 _/tenants/**tester/token**/jobs/external-id_ \n\nI am using following version of pact jvm \nau.com.dius:pact-jvm-provider-junit_2.11:3.3.1\nPactSpecVersion.V3\n", "url": "https://github.com/DiUS/pact-jvm/issues/339", "user": "nikhilkr123", "labels": ["bug"], "created": "2016-10-23 01:17:35", "closed": "2020-02-22 23:05:44", "commits": {"affae9c6611e323b6a4ec8b6aa1978a73c1957fe": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "af2e46c15aaeede52f51fe4eeeb95d545858d9ec": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 1217.0002777777777, "commitsDetails": [{"commitHash": "affae9c6611e323b6a4ec8b6aa1978a73c1957fe", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d7c6c72451a18508ef9f946ca25835d07ffa1889"], "nameRev": "affae9c6611e323b6a4ec8b6aa1978a73c1957fe tags/3_3_3~5", "commitMessage": "Add a flag to turn off path decoding in the verifier request client #339\n", "commitDateTime": "2016-11-05 13:14:40", "authoredDateTime": "2016-11-05 13:14:40", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/README.md", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-provider-junit/README.md", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-provider-lein/README.md", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-provider-maven/README.md", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderClient.groovy", "insertions": 16, "deletions": 6, "lines": 22}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/groovysupport/ProviderClientSpec.groovy", "insertions": 14, "deletions": 1, "lines": 15}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "af2e46c15aaeede52f51fe4eeeb95d545858d9ec", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["affae9c6611e323b6a4ec8b6aa1978a73c1957fe"], "nameRev": "af2e46c15aaeede52f51fe4eeeb95d545858d9ec tags/3_3_3~4", "commitMessage": "Add a note to the readmes about paths needing to be correctly encoded when path decoding in the verifier is turned off #339\n", "commitDateTime": "2016-11-05 13:24:22", "authoredDateTime": "2016-11-05 13:24:22", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/README.md", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-provider-junit/README.md", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-provider-lein/README.md", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-provider-maven/README.md", "insertions": 3, "deletions": 0, "lines": 3}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["affae9c6611e323b6a4ec8b6aa1978a73c1957fe", "af2e46c15aaeede52f51fe4eeeb95d545858d9ec"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 16, "deletions": 6, "lines": 22, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderClient.groovy"]}, {"title": "Consumer test with multiple PactFragments and multiple test-methods only records interactions on one of the fragments", "body": "We are testing a Consumer using the method described here:\nhttps://github.com/DiUS/pact-jvm/blob/master/pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactProviderWithMultipleFragmentsTest.java\n\nThe test works fine and the PactProviderRule is behaving exactly as defined in the PactFragments used by the separate methods. \n\nHowever the resulting json-file recording the interactions with the PactMock only has the recordings of interactions as used by one of the @PactVerification annotated test-methods? We can see that the run writes the pact file once for each test-methods. I think it would have to gather the interactions as generated by both test-methods before it attempts to write the json-file otherwise it overwrites the previous methods results?\n", "url": "https://github.com/DiUS/pact-jvm/issues/338", "user": "chellgren", "labels": ["bug"], "created": "2016-10-21 12:08:54", "closed": "2017-02-12 06:15:55", "commits": {"135d527a16376a7146d03877baa122ae8798d149": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 113.00027777777778, "commitsDetails": [{"commitHash": "135d527a16376a7146d03877baa122ae8798d149", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1f8ca88f83297ddc01d3bd1db23fdb4cf0b1ce4a"], "nameRev": "135d527a16376a7146d03877baa122ae8798d149 tags/2_4_17~2^2~3", "commitMessage": "Fixed a defect with merging pacts from different fragments #338\n", "commitDateTime": "2016-10-22 14:39:22", "authoredDateTime": "2016-10-22 14:39:22", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Interaction.groovy", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Request.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponseInteraction.groovy", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponsePact.groovy", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Response.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/V3Pact.groovy", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/Message.groovy", "insertions": 13, "deletions": 1, "lines": 14}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/MessagePact.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactMergeSpec.groovy", "insertions": 211, "deletions": 127, "lines": 338}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactSerialiserSpec.groovy", "insertions": 7, "deletions": 2, "lines": 9}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/RequestResponseInteractionSpec.groovy", "insertions": 26, "deletions": 0, "lines": 26}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/RequestResponsePactSpec.groovy", "insertions": 91, "deletions": 0, "lines": 91}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/v3/messaging/MessagePactSpec.groovy", "insertions": 77, "deletions": 0, "lines": 77}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/v3/messaging/MessageSpec.groovy", "insertions": 56, "deletions": 0, "lines": 56}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["135d527a16376a7146d03877baa122ae8798d149"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 35, "deletions": 9, "lines": 44, "gitFilesChange": 8}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Response.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponsePact.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Request.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponseInteraction.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Interaction.groovy"]}, {"title": "Pact consumer should give more relevant error message when failing to start mock provider.", "body": "Hi,\n\nI thought it may be good to make the consumer throw relevant error messages when failing to start the mock provider. I had a case where I was unable to start up the mock provider due to port conflict, the error message thrown by the test however is something like:\n\n>  java.lang.AssertionError: expected:<Pact verified.> but was:<Pact verification failed for the following reasons: The following requests were not received:\n\nIt took me a while to realize the actual problem as I thought the problem is related to the request/response itself.\n\nIMHO, I think it would be good to throw more relevant error messages in this case, something like:\n\"Failed to initiate mock provider, root cause: could not bind port 2345\" and etc, as it was a generic TCP level failure and has little to do with the actual pact verification. This will make troubleshooting much easier.\n\nCheers\n", "url": "https://github.com/DiUS/pact-jvm/issues/334", "user": "phantomread1", "labels": ["bug"], "created": "2016-10-19 21:35:08", "closed": "2017-02-12 06:09:44", "commits": {"361b428a262f4138b13369cd08e207cf62287b48": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 115.00027777777778, "commitsDetails": [{"commitHash": "361b428a262f4138b13369cd08e207cf62287b48", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["dc17f17176989045aef3041652ec76ff3feb5a7e"], "nameRev": "361b428a262f4138b13369cd08e207cf62287b48 tags/2_4_17~2^2~1", "commitMessage": "If the mock server fails to start, throw an appropriate error #334\n", "commitDateTime": "2016-10-22 15:22:05", "authoredDateTime": "2016-10-22 15:21:50", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactProviderRule.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactProviderTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/MockServerException.java", "insertions": 23, "deletions": 0, "lines": 23}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/ConsumerPactRunner.scala", "insertions": 4, "deletions": 1, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactProviderRule.java", "spoonMethods": []}, {"spoonFilePath": "PactProviderTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.pactproviderrule.PactProviderTest", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MockServerException.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MockServerException", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["361b428a262f4138b13369cd08e207cf62287b48"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 28, "deletions": 1, "lines": 29, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer", "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer", "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/ConsumerPactRunner.scala"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.MockServerException"]}, {"title": "When publishing a pact for the first time the return header is not respected.", "body": "When a pact fails to publish for the first time, the return response is text/plain, which it is trying to parse as json.\n\n```\nPublishing craft-mobile-craft-api.json ... HTTP/1.1 200 OK\nError parsing 'text/plain' response\ngroovy.json.JsonException: Unable to determine the current character, it is not a string, number, array, or object\nThe current character read is 'T' with an int value of 84\nUnable to determine the current character, it is not a string, number, array, or object\nline number 1\nindex number 0\nThis is the first time a pact has been published for \"craft-mobile-LpnScan\".\n^\n```\n\nThis is followed by the stacktrace of:\n\n```\n    at groovy.json.internal.JsonParserCharArray.decodeValueInternal(JsonParserCharArray.java:207)\n    at groovy.json.internal.JsonParserCharArray.decodeValue(JsonParserCharArray.java:158)\n    at groovy.json.internal.JsonParserCharArray.decodeFromChars(JsonParserCharArray.java:46)\n    at groovy.json.internal.JsonParserCharArray.parse(JsonParserCharArray.java:386)\n    at groovy.json.internal.BaseJsonParser.parse(BaseJsonParser.java:125)\n    at groovy.json.JsonSlurper.parse(JsonSlurper.java:221)\n    at groovyx.net.http.ParserRegistry.parseJSON(ParserRegistry.java:280)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1210)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1077)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1019)\n    at groovy.lang.Closure.call(Closure.java:426)\n    at groovy.lang.Closure.call(Closure.java:442)\n    at groovyx.net.http.HTTPBuilder.parseResponse(HTTPBuilder.java:560)\n    at groovyx.net.http.HTTPBuilder$1.handleResponse(HTTPBuilder.java:489)\n    at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:945)\n    at org.apache.http.impl.client.AbstractHttpClient.execute(AbstractHttpClient.java:919)\n    at groovyx.net.http.HTTPBuilder.doRequest(HTTPBuilder.java:515)\n    at groovyx.net.http.HTTPBuilder.doRequest(HTTPBuilder.java:434)\n    at groovyx.net.http.HTTPBuilder.request(HTTPBuilder.java:383)\n    at au.com.dius.pact.provider.broker.PactBrokerClient.uploadPactFile(PactBrokerClient.groovy:42)\n    at au.com.dius.pact.provider.gradle.PactPublishTask$_publishPacts_closure1.doCall(PactPublishTask.groovy:35)\n...\n\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/328", "user": "trevorplant", "labels": ["bug"], "created": "2016-10-12 02:53:47", "closed": "2016-11-06 04:16:56", "commits": {"a87f0fb3fd2b2af493c7ffdfd37fa9fe3033df90": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 25.00027777777778, "commitsDetails": [{"commitHash": "a87f0fb3fd2b2af493c7ffdfd37fa9fe3033df90", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["361b428a262f4138b13369cd08e207cf62287b48"], "nameRev": "a87f0fb3fd2b2af493c7ffdfd37fa9fe3033df90 tags/2_4_17~2^2", "commitMessage": "handle 409 text response when the publish to the broker fails #328\n", "commitDateTime": "2016-10-22 16:37:48", "authoredDateTime": "2016-10-22 16:31:01", "commitGitStats": [{"filePath": "pact-jvm-provider/build.gradle", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker/PactBrokerClient.groovy", "insertions": 6, "deletions": 2, "lines": 8}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/broker/PactBrokerClientSpec.groovy", "insertions": 56, "deletions": 19, "lines": 75}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a87f0fb3fd2b2af493c7ffdfd37fa9fe3033df90"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 2, "lines": 13, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker", "pact-jvm-provider"]}, {"title": "pact-jvm-provider-lein :state-change-url throws an exception because of incorrect type", "body": "Following error occurs when using :state-change-url as String and as URL\n\n1) As string\n:state-change-url \"https://localhost:3000/example\" \nthrows \"java.lang.String cannot be cast to java.net.URL\". \n\n2) As URL\nSo on trying to use URL for \n:state-change-url (-> (URL.) \n                                 \"http://localhost:3000/example\") \nthrows \"clojure.lang.PersistentList cannot be cast to java.net.URL\"\n", "url": "https://github.com/DiUS/pact-jvm/issues/322", "user": "gregmcaree", "labels": ["bug"], "created": "2016-09-27 14:10:04", "closed": "2016-11-06 04:17:27", "commits": {"1c90746d8b78e0a8fdf7780e404c053181f626fc": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 39.000277777777775, "commitsDetails": [{"commitHash": "1c90746d8b78e0a8fdf7780e404c053181f626fc", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["720af8728fb983f085397f051220463268e6f4ef"], "nameRev": "1c90746d8b78e0a8fdf7780e404c053181f626fc tags/2_4_17~2^2~5", "commitMessage": "correctly convert the state change URL in the lein plugin #322\n", "commitDateTime": "2016-10-16 15:51:00", "authoredDateTime": "2016-10-16 15:20:21", "commitGitStats": [{"filePath": "pact-jvm-provider-lein/build.gradle", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "pact-jvm-provider-lein/src/main/clojure/au/com/dius/pact/provider/lein/verify_provider.clj", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-lein/src/test/clojure/au/com/dius/pact/provider/lein/verify_provider_test.clj", "insertions": 0, "deletions": 9, "lines": 9}, {"filePath": "pact-jvm-provider-lein/src/test/groovy/au/com/dius/pact/provider/lein/VerifyProviderSpec.groovy", "insertions": 117, "deletions": 0, "lines": 117}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderInfo.groovy", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1c90746d8b78e0a8fdf7780e404c053181f626fc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 2, "lines": 10, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderInfo.groovy", "pact-jvm-provider-lein", "pact-jvm-provider-lein/src/main/clojure/au/com/dius/pact/provider/lein"]}, {"title": "response content type is ignored", "body": "I'm using pact-jvm-consumer-groovy (au.com.dius:pact-jvm-consumer-groovy_2.11:2.4.15) and in the examples in the readme it shows that you can specify the expected content type like this:\n\nwillRespondWith(\n          status: 200,\n          headers: ['Content-Type': 'application/hal+json']\n      )\n\nI can't get this to work. I want the content type to be application/hal+json, but every time my pact file is produced it changes it to application/json, which is not what I specified.\nIt looks like this:\n\n```\n        \"response\": {\n            \"status\": 200,\n            \"headers\": {\n                \"Content-Type\": \"application/json\"\n            },\n```\n\n...\n\"pact-specification\": {\n            \"version\": \"2.0.0\"\n        },\n        \"pact-jvm\": {\n            \"version\": \"2.4.15\"\n        }\n\nIs there a way to specify the content type as hal+json instead of json?\n", "url": "https://github.com/DiUS/pact-jvm/issues/312", "user": "casshill", "labels": ["bug"], "created": "2016-08-30 07:41:17", "closed": "2016-10-03 01:25:47", "commits": {"73fc34b38afe83e0bc5027d2cdb9f100c2a544b1": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 33.000277777777775, "commitsDetails": [{"commitHash": "73fc34b38afe83e0bc5027d2cdb9f100c2a544b1", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["3acffb5ea84ab9736dcf81bbfed3df671a7c8cfc"], "nameRev": "73fc34b38afe83e0bc5027d2cdb9f100c2a544b1 tags/3_5_0-beta_2~3^2~8", "commitMessage": "Fix the Groovy DSL to not overwrite the content type header if it has already been set #312\n", "commitDateTime": "2016-09-10 16:17:00", "authoredDateTime": "2016-09-10 16:17:00", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBuilder.groovy", "insertions": 12, "deletions": 8, "lines": 20}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBuilderSpec.groovy", "insertions": 19, "deletions": 0, "lines": 19}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["73fc34b38afe83e0bc5027d2cdb9f100c2a544b1"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 12, "deletions": 8, "lines": 20, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy"]}, {"title": "gradle pactPublish fails", "body": "I think the fix for #291 may have broken the successful publish case:\n\n```\nPublishing service-another-service.json ... HTTP/1.1 201 Created\n:pactPublish FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':pactPublish'.\n> No signature of method: org.apache.http.message.BasicStatusLine.startsWith() is applicable for argument types: (java.lang.String) values: [FAILED!]\n```\n\nPactBrokerClient returns resp.statusLine (a BasicStatusLine) whereas the failure case returns a string\n\n```\n  response.success = { resp -> resp.statusLine }\n  response.failure = { resp, json ->\n    def error = json?.errors?.join(', ') ?: 'Unknown error'\n    \"FAILED! ${resp.statusLine.statusCode} ${resp.statusLine.reasonPhrase} - ${error}\"\n  }\n```\n\nOccuring in 3.2.11\n", "url": "https://github.com/DiUS/pact-jvm/issues/307", "user": "carwinz", "labels": ["bug"], "created": "2016-08-10 01:07:17", "closed": "2016-08-15 02:16:11", "commits": {"a130280bebd05d15170974d959c197830e3e6755": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "78d0ef0cbe4c98e3559f065c6730b5212182c69b": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "a130280bebd05d15170974d959c197830e3e6755", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["31be3e4c74ac6e6ee39626d1ac7a4efb3db2305b"], "nameRev": "a130280bebd05d15170974d959c197830e3e6755 tags/3_2_13~2", "commitMessage": "Fix regression in gradle pact publish task #307\n", "commitDateTime": "2016-08-11 21:48:08", "authoredDateTime": "2016-08-11 21:48:08", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/PactPublishTaskSpec.groovy", "insertions": 74, "deletions": 0, "lines": 74}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker/PactBrokerClient.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/broker/PactBrokerClientSpec.groovy", "insertions": 74, "deletions": 0, "lines": 74}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "78d0ef0cbe4c98e3559f065c6730b5212182c69b", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["ab05763380c80c577f606872a2ad3f8474fd2ff8"], "nameRev": "78d0ef0cbe4c98e3559f065c6730b5212182c69b tags/2_4_15~2", "commitMessage": "Fix regression in gradle pact publish task #307\n", "commitDateTime": "2016-08-23 21:36:11", "authoredDateTime": "2016-08-11 21:48:08", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/PactPublishTaskSpec.groovy", "insertions": 74, "deletions": 0, "lines": 74}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker/PactBrokerClient.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/broker/PactBrokerClientSpec.groovy", "insertions": 74, "deletions": 0, "lines": 74}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a130280bebd05d15170974d959c197830e3e6755"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker"]}, {"title": "MessagePactBuilder.withContent Only Receive PactDslJsonBody but Not DslPart", "body": "In our case, the body of a message is a json array. We have to use PactDslJsonArray for arrayEachLike. Is it possible to support this requirement?\n", "url": "https://github.com/DiUS/pact-jvm/issues/301", "user": "cosineyan", "labels": ["bug"], "created": "2016-08-05 08:44:08", "closed": "2016-08-09 00:31:11", "commits": {"edfc688035be9220dc65752ed2d05b0d85cf06b8": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "edfc688035be9220dc65752ed2d05b0d85cf06b8", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["aea02c701c9df27018265af18d324ab00ef742b7"], "nameRev": "edfc688035be9220dc65752ed2d05b0d85cf06b8 tags/2_4_14~3^2~4", "commitMessage": "Fix MessagePactBuilder.withContent to take a DslPart instead of PactDslJsonBody #301\n", "commitDateTime": "2016-08-07 11:18:12", "authoredDateTime": "2016-08-07 11:18:12", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/MessagePactBuilder.java", "insertions": 9, "deletions": 10, "lines": 19}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/v3/ExampleMessageConsumerWithRootArrayTest.java", "insertions": 53, "deletions": 0, "lines": 53}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessagePactBuilder.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MessagePactBuilder.withContent(au.com.dius.pact.consumer.dsl.PactDslJsonBody)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExampleMessageConsumerWithRootArrayTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.v3.ExampleMessageConsumerWithRootArrayTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["edfc688035be9220dc65752ed2d05b0d85cf06b8"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 10, "lines": 19, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.MessagePactBuilder.withContent(au.com.dius.pact.consumer.dsl.PactDslJsonBody)"]}, {"title": "Error: \"no jansi in java.library.path\" when running `lein pact-verify`", "body": "I'm using au.com.dius/pact-jvm-provider-lein_2.11 3.2.10, and when I run `lein pact-verify`, I get the following error. I tried adding `[org.fusesource.jansi/jansi \"1.11\"]` to my project's deps and added the jar by hand to the project's classpath, but it still seems to happen.\n\nFull trace:\n\n```\nException in thread \"main\" java.lang.UnsatisfiedLinkError: Could not load library. Reasons: [no jansi in java.library.path]\n        at org.fusesource.hawtjni.runtime.Library.doLoad(Library.java:182)\n        at org.fusesource.hawtjni.runtime.Library.load(Library.java:140)\n        at org.fusesource.jansi.internal.CLibrary.<clinit>(CLibrary.java:37)\n        at au.com.dius.pact.provider.org.fusesource.jansi.AnsiConsole.wrapOutputStream(AnsiConsole.java:48)\n        at au.com.dius.pact.provider.org.fusesource.jansi.AnsiConsole.<clinit>(AnsiConsole.java:38)\n        at java.lang.Class.forName0(Native Method)\n        at java.lang.Class.forName(Class.java:348)\n        at org.codehaus.groovy.vmplugin.v7.Selector$MethodSelector.getMetaClass(Selector.java:531)\n        at org.codehaus.groovy.vmplugin.v7.Selector$MethodSelector.setCallSiteTarget(Selector.java:950)\n        at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:224)\n        at au.com.dius.pact.provider.reporters.AnsiConsoleReporter.reportVerificationForConsumer(AnsiConsoleReporter.groovy:30)\n        at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n        at au.com.dius.pact.provider.ProviderVerifier$_reportVerificationForConsumer_closure8.doCall(ProviderVerifier.groovy:63)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:497)\n        at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)\n        at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)\n        at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:294)\n        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1021)\n        at groovy.lang.Closure.call(Closure.java:426)\n        at groovy.lang.Closure.call(Closure.java:442)\n        at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2030)\n        at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2015)\n        at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2056)\n        at org.codehaus.groovy.runtime.dgm$162.doMethodInvoke(Unknown Source)\n        at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n        at au.com.dius.pact.provider.ProviderVerifier.reportVerificationForConsumer(ProviderVerifier.groovy:63)\n        at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n        at au.com.dius.pact.provider.ProviderVerifier.runVerificationForConsumer(ProviderVerifier.groovy:57)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:497)\n        at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)\n        at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)\n        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1212)\n        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1079)\n        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1021)\n        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1086)\n        at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1021)\n        at groovy.lang.Closure.call(Closure.java:426)\n        at groovy.lang.Closure.call(Closure.java:442)\n        at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2030)\n        at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2015)\n        at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2056)\n        at org.codehaus.groovy.runtime.dgm$162.doMethodInvoke(Unknown Source)\n        at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n        at au.com.dius.pact.provider.ProviderVerifier.verifyProvider(ProviderVerifier.groovy:47)\n        at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n        at au.com.dius.pact.provider.lein.LeinVerifierProxy.verifyProvider(LeinVerifierProxy.groovy:37)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.lang.reflect.Method.invoke(Method.java:497)\n        at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:93)\n        at clojure.lang.Reflector.invokeInstanceMethod(Reflector.java:28)\n        at au.com.dius.pact.provider.lein.verify_provider$verify_providers$fn__1567.invoke(verify_provider.clj:67)\n        at clojure.core$map$fn__4785.invoke(core.clj:2646)\n        at clojure.lang.LazySeq.sval(LazySeq.java:40)\n        at clojure.lang.LazySeq.seq(LazySeq.java:49)\n        at clojure.lang.RT.seq(RT.java:521)\n        at clojure.core$seq__4357.invokeStatic(core.clj:137)\n        at clojure.core$apply.invokeStatic(core.clj:641)\n        at clojure.core$mapcat.invokeStatic(core.clj:2674)\n        at clojure.core$mapcat.doInvoke(core.clj:2674)\n        at clojure.lang.RestFn.invoke(RestFn.java:423)\n        at au.com.dius.pact.provider.lein.verify_provider$verify_providers.invoke(verify_provider.clj:62)\n        at au.com.dius.pact.provider.lein.verify_provider$verify.invoke(verify_provider.clj:76)\n        at leiningen.pact_verify$pact_verify.doInvoke(pact_verify.clj:22)\n        at clojure.lang.RestFn.invoke(RestFn.java:410)\n        at clojure.lang.Var.invoke(Var.java:379)\n        at clojure.lang.AFn.applyToHelper(AFn.java:154)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.core$apply.invokeStatic(core.clj:648)\n        at clojure.core$apply.invoke(core.clj:641)\n        at leiningen.core.main$partial_task$fn__5829.doInvoke(main.clj:272)\n        at clojure.lang.RestFn.invoke(RestFn.java:410)\n        at clojure.lang.AFn.applyToHelper(AFn.java:154)\n        at clojure.lang.RestFn.applyTo(RestFn.java:132)\n        at clojure.lang.AFunction$1.doInvoke(AFunction.java:29)\n        at clojure.lang.RestFn.applyTo(RestFn.java:137)\n        at clojure.core$apply.invokeStatic(core.clj:648)\n        at clojure.core$apply.invoke(core.clj:641)\n        at leiningen.core.main$apply_task.invokeStatic(main.clj:322)\n        at leiningen.core.main$apply_task.invoke(main.clj:308)\n        at lein_cprop.plugin$write_env_to_file.invokeStatic(plugin.clj:18)\n        at lein_cprop.plugin$write_env_to_file.invoke(plugin.clj:16)\n        at clojure.lang.Var.invoke(Var.java:394)\n        at clojure.lang.AFn.applyToHelper(AFn.java:165)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.core$apply.invokeStatic(core.clj:648)\n        at clojure.core$apply.invoke(core.clj:641)\n        at robert.hooke$compose_hooks$fn__11923.doInvoke(hooke.clj:40)\n        at clojure.lang.RestFn.applyTo(RestFn.java:137)\n        at clojure.core$apply.invokeStatic(core.clj:646)\n        at clojure.core$apply.invoke(core.clj:641)\n        at robert.hooke$run_hooks.invokeStatic(hooke.clj:46)\n        at robert.hooke$run_hooks.invoke(hooke.clj:45)\n        at robert.hooke$prepare_for_hooks$fn__11928$fn__11929.doInvoke(hooke.clj:54)\n        at clojure.lang.RestFn.applyTo(RestFn.java:137)\n        at clojure.lang.AFunction$1.doInvoke(AFunction.java:29)\n        at clojure.lang.RestFn.invoke(RestFn.java:436)\n        at leiningen.with_profile$with_profiles_STAR_.invokeStatic(with_profile.clj:14)\n        at leiningen.with_profile$with_profiles_STAR_.invoke(with_profile.clj:8)\n        at leiningen.with_profile$apply_task_with_profiles.invokeStatic(with_profile.clj:53)\n        at leiningen.with_profile$apply_task_with_profiles.invoke(with_profile.clj:45)\n        at leiningen.with_profile$with_profile$fn__11982.invoke(with_profile.clj:85)\n        at clojure.core$mapv$fn__6953.invoke(core.clj:6627)\n        at clojure.core.protocols$fn__6755.invokeStatic(protocols.clj:167)\n        at clojure.core.protocols$fn__6755.invoke(protocols.clj:124)\n        at clojure.core.protocols$fn__6710$G__6705__6719.invoke(protocols.clj:19)\n        at clojure.core.protocols$seq_reduce.invokeStatic(protocols.clj:31)\n        at clojure.core.protocols$fn__6738.invokeStatic(protocols.clj:75)\n        at clojure.core.protocols$fn__6738.invoke(protocols.clj:75)\n        at clojure.core.protocols$fn__6684$G__6679__6697.invoke(protocols.clj:13)\n        at clojure.core$reduce.invokeStatic(core.clj:6545)\n        at clojure.core$mapv.invokeStatic(core.clj:6618)\n        at clojure.core$mapv.invoke(core.clj:6618)\n        at leiningen.with_profile$with_profile.invokeStatic(with_profile.clj:85)\n        at leiningen.with_profile$with_profile.doInvoke(with_profile.clj:63)\n        at clojure.lang.RestFn.invoke(RestFn.java:445)\n        at clojure.lang.Var.invoke(Var.java:388)\n        at clojure.lang.AFn.applyToHelper(AFn.java:160)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.core$apply.invokeStatic(core.clj:648)\n        at clojure.core$apply.invoke(core.clj:641)\n        at leiningen.core.main$partial_task$fn__5829.doInvoke(main.clj:272)\n        at clojure.lang.RestFn.applyTo(RestFn.java:139)\n        at clojure.lang.AFunction$1.doInvoke(AFunction.java:29)\n        at clojure.lang.RestFn.applyTo(RestFn.java:137)\n        at clojure.core$apply.invokeStatic(core.clj:648)\n        at clojure.core$apply.invoke(core.clj:641)\n        at leiningen.core.main$apply_task.invokeStatic(main.clj:322)\n        at leiningen.core.main$apply_task.invoke(main.clj:308)\n        at lein_cprop.plugin$write_env_to_file.invokeStatic(plugin.clj:18)\n        at lein_cprop.plugin$write_env_to_file.invoke(plugin.clj:16)\n        at clojure.lang.Var.invoke(Var.java:394)\n        at clojure.lang.AFn.applyToHelper(AFn.java:165)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.core$apply.invokeStatic(core.clj:648)\n        at clojure.core$apply.invoke(core.clj:641)\n        at robert.hooke$compose_hooks$fn__11923.doInvoke(hooke.clj:40)\n        at clojure.lang.RestFn.applyTo(RestFn.java:137)\n        at clojure.core$apply.invokeStatic(core.clj:646)\n        at clojure.core$apply.invoke(core.clj:641)\n        at robert.hooke$run_hooks.invokeStatic(hooke.clj:46)\n        at robert.hooke$run_hooks.invoke(hooke.clj:45)\n        at robert.hooke$prepare_for_hooks$fn__11928$fn__11929.doInvoke(hooke.clj:54)\n        at clojure.lang.RestFn.applyTo(RestFn.java:137)\n        at clojure.lang.AFunction$1.doInvoke(AFunction.java:29)\n        at clojure.lang.RestFn.invoke(RestFn.java:436)\n        at leiningen.core.main$resolve_and_apply.invokeStatic(main.clj:328)\n        at leiningen.core.main$resolve_and_apply.invoke(main.clj:324)\n        at leiningen.core.main$_main$fn__5895.invoke(main.clj:401)\n        at leiningen.core.main$_main.invokeStatic(main.clj:394)\n        at leiningen.core.main$_main.doInvoke(main.clj:391)\n        at clojure.lang.RestFn.invoke(RestFn.java:436)\n        at clojure.lang.Var.invoke(Var.java:388)\n        at clojure.lang.AFn.applyToHelper(AFn.java:160)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.core$apply.invokeStatic(core.clj:646)\n        at clojure.main$main_opt.invokeStatic(main.clj:314)\n        at clojure.main$main_opt.invoke(main.clj:310)\n        at clojure.main$main.invokeStatic(main.clj:421)\n        at clojure.main$main.doInvoke(main.clj:384)\n        at clojure.lang.RestFn.invoke(RestFn.java:482)\n        at clojure.lang.Var.invoke(Var.java:401)\n        at clojure.lang.AFn.applyToHelper(AFn.java:171)\n        at clojure.lang.Var.applyTo(Var.java:700)\n        at clojure.main.main(main.java:37)\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/293", "user": "thegreatape", "labels": ["bug"], "created": "2016-07-22 18:23:57", "closed": "2016-10-30 00:10:51", "commits": {"4f70c6ef7674568c5fe930718d6cf6a0401986a3": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 99.00027777777778, "commitsDetails": [{"commitHash": "4f70c6ef7674568c5fe930718d6cf6a0401986a3", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a460d8a7a4e37367cc4cf5022a7a432027010003"], "nameRev": "4f70c6ef7674568c5fe930718d6cf6a0401986a3 tags/2_4_13~7^2~1", "commitMessage": "upgrade the version of the jansi library #293\n", "commitDateTime": "2016-07-28 15:44:45", "authoredDateTime": "2016-07-28 15:44:35", "commitGitStats": [{"filePath": "gradle.properties", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-provider-gradle/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-lein/build.gradle", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-provider-lein/src/main/clojure/au/com/dius/pact/provider/lein/verify_provider.clj", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-lein/src/main/groovy/au/com/dius/pact/provider/lein/LeinVerifierProxy.groovy", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "pact-jvm-provider/build.gradle", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/Ansi.java", "insertions": 531, "deletions": 399, "lines": 930}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/AnsiConsole.java", "insertions": 73, "deletions": 47, "lines": 120}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/AnsiOutputStream.java", "insertions": 301, "deletions": 291, "lines": 592}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/AnsiRenderWriter.java", "insertions": 3, "deletions": 8, "lines": 11}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/AnsiRenderer.java", "insertions": 63, "deletions": 66, "lines": 129}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/AnsiString.java", "insertions": 2, "deletions": 4, "lines": 6}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/HtmlAnsiOutputStream.java", "insertions": 57, "deletions": 50, "lines": 107}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org/fusesource/jansi/WindowsAnsiOutputStream.java", "insertions": 71, "deletions": 44, "lines": 115}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": ["4f70c6ef7674568c5fe930718d6cf6a0401986a3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1116, "deletions": 922, "lines": 2038, "gitFilesChange": 15}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/java/au/com/dius/pact/provider/org", "pact-jvm-provider-lein/src/main/groovy/au/com/dius/pact/provider/lein", "gradle.properties", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy", "pact-jvm-provider-lein/src/main/clojure/au/com/dius/pact/provider/lein", "pact-jvm-provider-gradle", "pact-jvm-provider", "pact-jvm-provider-lein"]}, {"title": "gradle pactPublish doesn't give any reason for failures", "body": "If there is an error while running `./gradlew pactPublish`, the output doesn't say what the problem is\n\nThis happens:\n- when the version number is incorrect (e.g. 1.0-SNAPSHOT)\n- when the service name is too similar to another name in the pact broker\n\nOutput looks like:\n\n```\n:pactPublish\nPublishing consumer-service-provider-service.json ... :pactPublish FAILED\n\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':pactPublish'.\n> groovyx.net.http.HttpResponseException: Bad Request\n```\n\nIt should say that the version is wrong or name is incorrect\n", "url": "https://github.com/DiUS/pact-jvm/issues/291", "user": "carwinz", "labels": ["bug"], "created": "2016-07-22 07:19:24", "closed": "2016-08-07 02:14:08", "commits": {"a460d8a7a4e37367cc4cf5022a7a432027010003": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 15.000277777777777, "commitsDetails": [{"commitHash": "a460d8a7a4e37367cc4cf5022a7a432027010003", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["cb3ecc73fb7d43c5b57d36b85b28b95161b48ff9"], "nameRev": "a460d8a7a4e37367cc4cf5022a7a432027010003 tags/2_4_13~7^2~2", "commitMessage": "report any failures back when publishing to a pact broker #291\n", "commitDateTime": "2016-07-28 13:30:28", "authoredDateTime": "2016-07-28 13:30:28", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/PactPublishTask.groovy", "insertions": 11, "deletions": 2, "lines": 13}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker/PactBrokerClient.groovy", "insertions": 9, "deletions": 2, "lines": 11}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a460d8a7a4e37367cc4cf5022a7a432027010003"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 20, "deletions": 4, "lines": 24, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker", "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle"]}, {"title": "'No service providers are configured' when using gradle pactPublish ", "body": "when I run `./gradlew pactPublish` I get the error `No service providers are configured`\n\nmy build.gradle contains\n\n```\npact {\n    publish {\n        pactDirectory = 'build/pacts'\n        pactBrokerUrl = 'http://my-pact-broker'\n    }\n}\n```\n\nI'm guessing the error is related to pactVerify, but in this case I'm just trying to use pactPublish after generating pacts via JUnit\n\nThe error occurs with pact-jvm-provider-gradle_2.11:3.2.10; it worked with 3.2.6\n", "url": "https://github.com/DiUS/pact-jvm/issues/290", "user": "carwinz", "labels": ["bug"], "created": "2016-07-22 07:06:24", "closed": "2016-08-07 02:13:51", "commits": {"cb3ecc73fb7d43c5b57d36b85b28b95161b48ff9": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 15.000277777777777, "commitsDetails": [{"commitHash": "cb3ecc73fb7d43c5b57d36b85b28b95161b48ff9", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a04c74b2c84b0282d8bb3b94e443dd4676677797"], "nameRev": "cb3ecc73fb7d43c5b57d36b85b28b95161b48ff9 tags/2_4_13~7^2~3", "commitMessage": "only fail the build because of no configured providers when the pactVerify task is going to be run #290\n", "commitDateTime": "2016-07-28 12:47:31", "authoredDateTime": "2016-07-28 12:36:49", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/PactPlugin.groovy", "insertions": 10, "deletions": 8, "lines": 18}, {"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/PactPluginTest.groovy", "insertions": 22, "deletions": 5, "lines": 27}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cb3ecc73fb7d43c5b57d36b85b28b95161b48ff9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 8, "lines": 18, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle"]}, {"title": "pact-jvm-provider-maven fails to parse response when using pactBrokerUrl", "body": "1. I'm using a setup as described in https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-provider-maven#verifying-pact-files-from-a-pact-broker-version-311231\n2. When executing mvn au.com.dius:pact-jvm-provider-maven_2.11:verify it fails with:\n\n> Execution default-cli of goal au.com.dius:pact-jvm-provider-maven_2.11:3.2.10:verify failed: Expected a HAL+JSON response from the pact broker, but got 'application/hal+json;charset=utf-8'.\n\nThe same project executes the tests successfully when I explicitly point to a contract in the broker using and configuring for pactUrl instead.\n\nThere's a chance I'm missing something else, in which case I'd be very grateful for assistance.\n", "url": "https://github.com/DiUS/pact-jvm/issues/287", "user": "mikjonsson", "labels": ["bug"], "created": "2016-07-19 09:29:48", "closed": "2016-10-03 01:23:33", "commits": {"a8562e1968265e8703a2a264c03db2db2609a2eb": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 75.00027777777778, "commitsDetails": [{"commitHash": "a8562e1968265e8703a2a264c03db2db2609a2eb", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["f47e33ec6d82df6d0732456be2750f765b471898"], "nameRev": "a8562e1968265e8703a2a264c03db2db2609a2eb tags/2_4_14~3^2", "commitMessage": "correctly handle the content type header from the pact broker #287\n", "commitDateTime": "2016-08-07 12:13:14", "authoredDateTime": "2016-08-07 12:13:14", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker/HalClient.groovy", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/broker/HalClientSpec.groovy", "insertions": 25, "deletions": 0, "lines": 25}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a8562e1968265e8703a2a264c03db2db2609a2eb"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 1, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker"]}, {"title": "maven provider plugin read classpathElements from main class instead of test ", "body": "When doing the pact provider verification for message type, it seems maven plugin always scan code from src/main, which such kind of code usually are testing code. \n\nWithin pact-jvm\\pact-jvm-provider-maven\\src\\main\\groovy\\au\\com\\dius\\pact\\provider\\maven\\PactProviderMojo.groovy, classpathElements  parameter is defined by default as ${project.runtimeClasspathElements} with readonly=true.\n\nSuggest to allow this parameter for configuration within client's pom.xml.\n", "url": "https://github.com/DiUS/pact-jvm/issues/285", "user": "cosineyan", "labels": ["bug"], "created": "2016-07-08 07:49:44", "closed": "2016-07-12 01:56:41", "commits": {"90dfced5455f07884c02271866ca7ff0f152d565": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "90dfced5455f07884c02271866ca7ff0f152d565", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["482b88b6141e09b21a4d01e708954fb202bc6234"], "nameRev": "90dfced5455f07884c02271866ca7ff0f152d565 tags/2_4_12~2^2~7", "commitMessage": "set the classpath to the test classpath in the maven plugin, and allow it to be overridden #285\n", "commitDateTime": "2016-07-10 13:24:50", "authoredDateTime": "2016-07-10 13:24:50", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/README.md", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-maven/README.md", "insertions": 107, "deletions": 10, "lines": 117}, {"filePath": "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven/PactProviderMojo.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["90dfced5455f07884c02271866ca7ff0f152d565"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven"]}, {"title": "Multiple tags specified re-using first tag for @PactBroker in pact-jvm-provider-junit", "body": "If I run the provider tests against a pact-broker using a \"prod\" tag then I get the results I expect (all pass).\n@PactBroker(host = <hostname>, port = \"80\", tags={\"prod\"} )\n\nIf I run against a \"dev\" tag I also work fine (expect one failure). \n@PactBroker(host = <hostname>, port = \"80\", tags={\"dev\"} )\n\nIf I run with both tags, I expect to see one failure but they all pass\n@PactBroker(host = <hostname>, port = \"80\", tags={\"prod\", \"dev\"} )\n\nLooking at the output I see that when it tries the second retrieval of pacts from the broker, it's doing a get request using the wrong url for the specified tag (full output below)\nConsole shows this:\n\n> > Loading pacts from pact broker for provider omega_provider and tag **dev**\n> > Then this:\n> > GET /pacts/provider/omega_provider/latest/**prod** HTTP/1.1\n> > But I expect to see this:\n> > GET /pacts/provider/omega_provider/latest/**dev** HTTP/1.1\n\nSo whichever tag is set first in the list of tags is reused for the second request. \n\nI'm using the docker-latest of pact-broker and this version of the provider. I'm seeing the same behavior back to 3.2.4 when the tags were added to the PactBroker annotation\n\n```\n        <groupId>au.com.dius</groupId>\n        <artifactId>pact-jvm-provider-junit_2.11</artifactId>\n        <version>3.2.8</version>\n        <scope>test</scope>\n```\n\nHoller if there's any additional information you need\n\n=== full console output ===\n\n12:22:30.018 [main] DEBUG o.a.h.i.c.PoolingHttpClientConnectionManager - Connection request: [route: {}->http://qa-pact-broker.dev.aws.lcloud.com:80][total kept alive: 0; route allocated: 0 of 100; total allocated: 0 of 200]\n12:22:30.029 [main] DEBUG o.a.h.i.c.PoolingHttpClientConnectionManager - Connection leased: [id: 0][route: {}->http://qa-pact-broker.dev.aws.lcloud.com:80][total kept alive: 0; route allocated: 1 of 100; total allocated: 1 of 200]\n12:22:30.031 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Opening connection {}->http://qa-pact-broker.dev.aws.lcloud.com:80\n12:22:30.039 [main] DEBUG o.a.h.i.c.DefaultHttpClientConnectionOperator - Connecting to qa-pact-broker.dev.aws.lcloud.com/10.253.113.9:80\n12:22:30.043 [main] DEBUG o.a.h.i.c.DefaultHttpClientConnectionOperator - Connection established 0:0:0:0:0:0:0:1:49465<->10.253.113.9:80\n12:22:30.044 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Executing request GET /pacts/provider/omega_provider/latest/prod HTTP/1.1\n12:22:30.044 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Target auth state: UNCHALLENGED\n12:22:30.044 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Proxy auth state: UNCHALLENGED\n12:22:30.046 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> GET /pacts/provider/omega_provider/latest/prod HTTP/1.1\n12:22:30.046 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> Accept: application/hal+json\n12:22:30.046 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> Host: qa-pact-broker.dev.aws.lcloud.com:80\n12:22:30.046 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> Connection: Keep-Alive\n12:22:30.046 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> User-Agent: Apache-HttpClient/4.5 (Java/1.8.0_45)\n12:22:30.046 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> Accept-Encoding: gzip,deflate\n12:22:30.046 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"GET /pacts/provider/omega_provider/latest/prod HTTP/1.1[\\r][\\n]\"\n12:22:30.046 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"Accept: application/hal+json[\\r][\\n]\"\n12:22:30.046 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"Host: qa-pact-broker.dev.aws.lcloud.com:80[\\r][\\n]\"\n12:22:30.046 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"Connection: Keep-Alive[\\r][\\n]\"\n12:22:30.046 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"User-Agent: Apache-HttpClient/4.5 (Java/1.8.0_45)[\\r][\\n]\"\n12:22:30.046 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"Accept-Encoding: gzip,deflate[\\r][\\n]\"\n12:22:30.046 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"[\\r][\\n]\"\n12:22:30.167 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"HTTP/1.1 200 OK[\\r][\\n]\"\n12:22:30.167 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Content-Type: application/hal+json[\\r][\\n]\"\n12:22:30.167 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Content-Length: 535[\\r][\\n]\"\n12:22:30.167 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Connection: keep-alive[\\r][\\n]\"\n12:22:30.170 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Status: 200 OK[\\r][\\n]\"\n12:22:30.170 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Date: Tue, 05 Jul 2016 17:22:30 GMT[\\r][\\n]\"\n12:22:30.170 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Server: Webmachine-Ruby/1.4.0 Rack/1.3[\\r][\\n]\"\n12:22:30.170 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"X-Powered-By: Phusion Passenger 4.0.58[\\r][\\n]\"\n12:22:30.170 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"[\\r][\\n]\"\n12:22:30.170 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"{\"_links\":{\"self\":{\"href\":\"http://qa-pact-broker.dev.aws.lcloud.com/pacts/provider/omega_provider/latest/prod\",\"title\":\"Latest pact versions for the provider omega_provider with tag 'prod'\"},\"provider\":{\"href\":\"http://qa-pact-broker.dev.aws.lcloud.com/pacticipants/omega_provider\",\"title\":\"omega_provider\"},\"pacts\":[{\"href\":\"http://qa-pact-broker.dev.aws.lcloud.com/pacts/provider/omega_provider/consumer/gopher_consumer/version/0.0.103\",\"title\":\"Pact between gopher_consumer (v0.0.103) and omega_provider\",\"name\":\"gopher_consumer\"}]}}\"\n12:22:30.173 [main] DEBUG org.apache.http.headers - http-outgoing-0 << HTTP/1.1 200 OK\n12:22:30.173 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Content-Type: application/hal+json\n12:22:30.173 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Content-Length: 535\n12:22:30.173 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Connection: keep-alive\n12:22:30.173 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Status: 200 OK\n12:22:30.173 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Date: Tue, 05 Jul 2016 17:22:30 GMT\n12:22:30.173 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Server: Webmachine-Ruby/1.4.0 Rack/1.3\n12:22:30.173 [main] DEBUG org.apache.http.headers - http-outgoing-0 << X-Powered-By: Phusion Passenger 4.0.58\n12:22:30.177 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Connection can be kept alive indefinitely\n12:22:30.180 [main] DEBUG o.a.h.i.c.PoolingHttpClientConnectionManager - Connection [id: 0][route: {}->http://qa-pact-broker.dev.aws.lcloud.com:80] can be kept alive indefinitely\n12:22:30.180 [main] DEBUG o.a.h.i.c.PoolingHttpClientConnectionManager - Connection released: [id: 0][route: {}->http://qa-pact-broker.dev.aws.lcloud.com:80][total kept alive: 1; route allocated: 1 of 100; total allocated: 1 of 200]\n12:22:31.034 [main] DEBUG a.c.d.p.p.j.loader.PactBrokerLoader - Loading pacts from pact broker for provider omega_provider and tag dev\n12:22:31.035 [main] DEBUG o.a.h.c.protocol.RequestAddCookies - CookieSpec selected: default\n12:22:31.035 [main] DEBUG o.a.h.c.protocol.RequestAuthCache - Auth cache not set in the context\n12:22:31.035 [main] DEBUG o.a.h.i.c.PoolingHttpClientConnectionManager - Connection request: [route: {}->http://qa-pact-broker.dev.aws.lcloud.com:80][total kept alive: 1; route allocated: 1 of 100; total allocated: 1 of 200]\n12:22:31.035 [main] DEBUG o.a.h.i.c.PoolingHttpClientConnectionManager - Connection leased: [id: 0][route: {}->http://qa-pact-broker.dev.aws.lcloud.com:80][total kept alive: 0; route allocated: 1 of 100; total allocated: 1 of 200]\n12:22:31.035 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Executing request GET /pacts/provider/omega_provider/latest/prod HTTP/1.1\n12:22:31.035 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Target auth state: UNCHALLENGED\n12:22:31.035 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Proxy auth state: UNCHALLENGED\n12:22:31.035 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> GET /pacts/provider/omega_provider/latest/prod HTTP/1.1\n12:22:31.035 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> Accept: application/hal+json\n12:22:31.035 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> Host: qa-pact-broker.dev.aws.lcloud.com:80\n12:22:31.035 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> Connection: Keep-Alive\n12:22:31.035 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> User-Agent: Apache-HttpClient/4.5 (Java/1.8.0_45)\n12:22:31.035 [main] DEBUG org.apache.http.headers - http-outgoing-0 >> Accept-Encoding: gzip,deflate\n12:22:31.035 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"GET /pacts/provider/omega_provider/latest/prod HTTP/1.1[\\r][\\n]\"\n12:22:31.035 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"Accept: application/hal+json[\\r][\\n]\"\n12:22:31.035 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"Host: qa-pact-broker.dev.aws.lcloud.com:80[\\r][\\n]\"\n12:22:31.035 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"Connection: Keep-Alive[\\r][\\n]\"\n12:22:31.035 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"User-Agent: Apache-HttpClient/4.5 (Java/1.8.0_45)[\\r][\\n]\"\n12:22:31.036 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"Accept-Encoding: gzip,deflate[\\r][\\n]\"\n12:22:31.036 [main] DEBUG org.apache.http.wire - http-outgoing-0 >> \"[\\r][\\n]\"\n12:22:31.102 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"HTTP/1.1 200 OK[\\r][\\n]\"\n12:22:31.102 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Content-Type: application/hal+json[\\r][\\n]\"\n12:22:31.102 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Content-Length: 535[\\r][\\n]\"\n12:22:31.102 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Connection: keep-alive[\\r][\\n]\"\n12:22:31.102 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Status: 200 OK[\\r][\\n]\"\n12:22:31.102 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Date: Tue, 05 Jul 2016 17:22:31 GMT[\\r][\\n]\"\n12:22:31.102 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"Server: Webmachine-Ruby/1.4.0 Rack/1.3[\\r][\\n]\"\n12:22:31.102 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"X-Powered-By: Phusion Passenger 4.0.58[\\r][\\n]\"\n12:22:31.102 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"[\\r][\\n]\"\n12:22:31.102 [main] DEBUG org.apache.http.wire - http-outgoing-0 << \"{\"_links\":{\"self\":{\"href\":\"http://qa-pact-broker.dev.aws.lcloud.com/pacts/provider/omega_provider/latest/prod\",\"title\":\"Latest pact versions for the provider omega_provider with tag 'prod'\"},\"provider\":{\"href\":\"http://qa-pact-broker.dev.aws.lcloud.com/pacticipants/omega_provider\",\"title\":\"omega_provider\"},\"pacts\":[{\"href\":\"http://qa-pact-broker.dev.aws.lcloud.com/pacts/provider/omega_provider/consumer/gopher_consumer/version/0.0.103\",\"title\":\"Pact between gopher_consumer (v0.0.103) and omega_provider\",\"name\":\"gopher_consumer\"}]}}\"\n12:22:31.102 [main] DEBUG org.apache.http.headers - http-outgoing-0 << HTTP/1.1 200 OK\n12:22:31.102 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Content-Type: application/hal+json\n12:22:31.102 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Content-Length: 535\n12:22:31.102 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Connection: keep-alive\n12:22:31.103 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Status: 200 OK\n12:22:31.103 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Date: Tue, 05 Jul 2016 17:22:31 GMT\n12:22:31.103 [main] DEBUG org.apache.http.headers - http-outgoing-0 << Server: Webmachine-Ruby/1.4.0 Rack/1.3\n12:22:31.103 [main] DEBUG org.apache.http.headers - http-outgoing-0 << X-Powered-By: Phusion Passenger 4.0.58\n12:22:31.103 [main] DEBUG o.a.h.impl.execchain.MainClientExec - Connection can be kept alive indefinitely\n12:22:31.103 [main] DEBUG o.a.h.i.c.PoolingHttpClientConnectionManager - Connection [id: 0][route: {}->http://qa-pact-broker.dev.aws.lcloud.com:80] can be kept alive indefinitely\n12:22:31.103 [main] DEBUG o.a.h.i.c.PoolingHttpClientConnectionManager - Connection released: [id: 0][route: {}->http://qa-pact-broker.dev.aws.lcloud.com:80][total kept alive: 1; route allocated: 1 of 100; total allocated: 1 of 200]INFO [2016-07-05 12:22:37,173] [Thread-1] org.eclipse.jetty.util.log:? Logging initialized @36364ms\n", "url": "https://github.com/DiUS/pact-jvm/issues/283", "user": "hmcgowan", "labels": ["bug"], "created": "2016-07-05 17:45:51", "closed": "2016-07-10 03:26:59", "commits": {"c5eeac0d3a91aecab7a22c0d4f1b772daee6d687": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "c5eeac0d3a91aecab7a22c0d4f1b772daee6d687", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["ca047c8c58d5bd05a07485bf8a22fd5cba90b974"], "nameRev": "c5eeac0d3a91aecab7a22c0d4f1b772daee6d687 tags/2_4_11~2^2~2", "commitMessage": "Fix for PactBrokerLoader only using the first given tag #283\n", "commitDateTime": "2016-07-06 13:17:48", "authoredDateTime": "2016-07-06 13:17:48", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactBrokerLoader.java", "insertions": 4, "deletions": 3, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactBrokerLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c5eeac0d3a91aecab7a22c0d4f1b772daee6d687"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 3, "lines": 7, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.loader.PactBrokerLoader.loadPactsForProvider(java.lang.String,java.lang.String)"]}, {"title": "ContractTest.java JUnit test is failing", "body": "Hi,\n\nI have put the au.com.dius.pact.provider.junit.ContractTest.java from the test to my maven project and also the test/resources/pacts folder content. I receive the error below. Can anybody help? Thank you!\n\n```\njava.lang.NoSuchMethodError: au.com.dius.pact.model.Interaction.getProviderState()Ljava/lang/String;\n\n    at au.com.dius.pact.provider.junit.InteractionRunner.withStateChanges(InteractionRunner.java:194)\n    at au.com.dius.pact.provider.junit.InteractionRunner.interactionBlock(InteractionRunner.java:186)\n    at au.com.dius.pact.provider.junit.InteractionRunner.run(InteractionRunner.java:143)\n    at au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.java:100)\n    at au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.java:48)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at com.github.restdriver.clientdriver.ClientDriverRule$Clijava.lang.NoSuchMethodError: au.com.dius.pact.model.Interaction.getProviderState()Ljava/lang/String;\n\n    at au.com.dius.pact.provider.junit.InteractionRunner.withStateChanges(InteractionRunner.java:194)\n    at au.com.dius.pact.provider.junit.InteractionRunner.interactionBlock(InteractionRunner.java:186)\n    at au.com.dius.pact.provider.junit.InteractionRunner.run(InteractionRunner.java:143)\n    at au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.java:100)\n    at au.com.dius.pact.provider.junit.PactRunner.runChild(PactRunner.java:48)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at com.github.restdriver.clientdriver.ClientDriverRule$ClientDriverStatement.evaluate(ClientDriverRule.java:171)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:119)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\n\nentDriverStatement.evaluate(ClientDriverRule.java:171)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:119)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)\n\n\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/262", "user": "csikosbalint", "labels": ["bug"], "created": "2016-06-03 19:20:03", "closed": "2016-06-04 07:59:55", "commits": {"899c9794aa373423667fa0aa140cfe86e624d3e0": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "899c9794aa373423667fa0aa140cfe86e624d3e0", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["c0ed05fee7ee95d2180906d966f25c3801e370c0"], "nameRev": "899c9794aa373423667fa0aa140cfe86e624d3e0 tags/2_4_10~2^2~4", "commitMessage": "add provider state getter to Interaction interface #262\n", "commitDateTime": "2016-06-04 13:35:54", "authoredDateTime": "2016-06-04 13:35:54", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Interaction.groovy", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["899c9794aa373423667fa0aa140cfe86e624d3e0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 0, "lines": 1, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Interaction.groovy"]}, {"title": "Make gradles hasPactsFromPactBroker compatible with verifying a message provider", "body": "When I try to use the following gradle configuration:\n\n``` groovy\npact {\n    serviceProviders {\n        \"customer-details-provider\" {\n            verificationType = \"ANNOTATED_METHOD\"\n            packagesToScan = [\"provider.*\"]\n            hasPactsFromPactBroker('https://pact-broker/')\n        }\n    }\n}\n```\n\nI get the following error:\n\n```\nVerifying a pact between customer-details-consumer and customer-details-provider\n  [from URL https://pact-broker/pacts/provider/customer-details-provider/consumer/customer-details-consumer/version/0.1.0]\n  Given a new customer is created\n         WARNING: State Change ignored as there is no stateChange URL\n  a created event for the new customer\n      Request Failed - No such property: request for class: au.com.dius.pact.model.v3.messaging.Message\n\nFailures:\n\n0) Verifying a pact between customer-details-consumer and customer-details-provider - a created event for the new customer Given a new customer is created\n      No such property: request for class: au.com.dius.pact.model.v3.messaging.Message\n\n:pactVerify_customer-details-provider FAILED\n\nFAILURE: Build failed with an exception.\n```\n\nIf I configure the task to point directly to the pact file it works as expected\n\n``` groovy\npact {\n    serviceProviders {\n        \"customer-details-provider\" {\n            verificationType = \"ANNOTATED_METHOD\"\n            packagesToScan = [\"provider.*\"]\n            hasPactWith(\"customer-details-consumer\") {\n                pactFile = url(\"https://pact-broker/pacts/provider/customer-details-provider/consumer/customer-details-consumer/latest\")\n            }\n        }\n    }\n}\n```\n\n```\nBUILD SUCCESSFUL\n```\n\nPlease add pact broker support when running message providers so providers do not need to explicitly list the consumers in their build configurations.\n", "url": "https://github.com/DiUS/pact-jvm/issues/260", "user": "BenSayers", "labels": ["bug"], "created": "2016-06-02 04:55:26", "closed": "2016-07-06 05:42:27", "commits": {"da481cc89f68dc4660d386ccdd698574cee52034": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 34.000277777777775, "commitsDetails": [{"commitHash": "da481cc89f68dc4660d386ccdd698574cee52034", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["0c4728b1d134d46c872abfa593b6b9a9e826587f"], "nameRev": "da481cc89f68dc4660d386ccdd698574cee52034 tags/2_4_10~2^2~2", "commitMessage": "consolidate the loading of V2 and V3 pacts so message pacts can be loaded from a pact broker #260\n", "commitDateTime": "2016-06-05 11:48:55", "authoredDateTime": "2016-06-05 11:48:55", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/messaging/PactMessageBuilder.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/MessagePactBuilder.java", "insertions": 1, "deletions": 6, "lines": 7}, {"filePath": "pact-jvm-model/build.gradle", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy", "insertions": 87, "deletions": 1, "lines": 88}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Consumer.groovy", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Pact.groovy", "insertions": 16, "deletions": 0, "lines": 16}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactReader.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactWriter.groovy", "insertions": 1, "deletions": 116, "lines": 117}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Provider.groovy", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponsePact.groovy", "insertions": 66, "deletions": 5, "lines": 71}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/V3Pact.groovy", "insertions": 39, "deletions": 71, "lines": 110}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/Message.groovy", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/MessagePact.groovy", "insertions": 38, "deletions": 17, "lines": 55}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactSerialiserSpec.groovy", "insertions": 183, "deletions": 0, "lines": 183}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/{PactWriterSpec.groovy => RequestResponsePactSpec.groovy}", "insertions": 7, "deletions": 7, "lines": 14}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/v3/V3PactSpec.groovy", "insertions": 26, "deletions": 23, "lines": 49}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/v3/messaging/MessagePactSpec.groovy", "insertions": 19, "deletions": 0, "lines": 19}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/v3/messaging/MessageSpec.groovy", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/PactSerializerSpec.scala", "insertions": 0, "deletions": 131, "lines": 131}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ProviderVerifierSpec.groovy", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessagePactBuilder.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MessagePactBuilder.toPact()", "TOT": 9, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 5}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["da481cc89f68dc4660d386ccdd698574cee52034"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 262, "deletions": 219, "lines": 481, "gitFilesChange": 13}, "spoonStatsSummary": {"TOT": 9, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 5, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3", "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactWriter.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactReader.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponsePact.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Provider.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Consumer.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/BasePact.groovy", "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer", "pact-jvm-model", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Pact.groovy"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.MessagePactBuilder.toPact()"]}, {"title": "pact-jvm-provider-gradle fails to verify a message provider for versions 3.2.5, 3.2.6 and 3.2.7", "body": "While trying to use the pact-jvm-provider-gradle plugin (version 3.2.5, 3.2.6 or 3.2.7) to verify a message provider I encounter the following error:\n\n```\nFailures:\n\n0) Verifying a pact between customer-details-consumer and customer-details-provider - a created event for the new customer Given a new customer is created\n      No signature of method: static au.com.dius.pact.provider.ResponseComparison.compareMessage() is applicable for argument types: (au.com.dius.pact.model.v3.messaging.Message, java.lang.String) values: [au.com.dius.pact.model.v3.messaging.Message(a created event for the new customer, a new customer is created, au.com.dius.pact.model.OptionalBody(PRESENT, {\"address\":{\"addressLine1\":\"address-line-1\",\"addressLine2\":\"address-line-2\",\"personId\":1},\"person\":{\"firstName\":\"Mr\",\"id\":1,\"lastName\":\"Test\"}}), [:], [Content-Type:application/json; charset=UTF-8, contentType:application/json]), ...]\n      Possible solutions: compareMessage(au.com.dius.pact.model.v3.messaging.Message, au.com.dius.pact.model.OptionalBody)\n```\n\nWhen I downgrade to version 3.2.4 the same test passes:\n\n```\n  Given a new customer is created\n         WARNING: State Change ignored as there is no stateChange URL\n  a created event for the new customer\n    generates a message which\n      has a matching body (OK)\n\nBUILD SUCCESSFUL\n```\n\nWhile I don't think my pact file or provider test function contain anything special I have provided them below in case it helps with reproducing the issue.\n\nPact file\n\n``` javascript\n{\n    \"consumer\": {\n        \"name\": \"customer-details-consumer\"\n    },\n    \"provider\": {\n        \"name\": \"customer-details-provider\"\n    },\n    \"messages\": [\n        {\n            \"metaData\": {\n                \"contentType\": \"application/json\",\n                \"Content-Type\": \"application/json; charset=UTF-8\"\n            },\n            \"providerState\": \"a new customer is created\",\n            \"contentType\": \"application/json\",\n            \"contents\": {\n                \"address\": {\n                    \"addressLine1\": \"address-line-1\",\n                    \"addressLine2\": \"address-line-2\",\n                    \"personId\": 1\n                },\n                \"person\": {\n                    \"firstName\": \"Mr\",\n                    \"id\": 1,\n                    \"lastName\": \"Test\"\n                }\n            },\n            \"matchingRules\": {\n\n            },\n            \"description\": \"a created event for the new customer\"\n        }\n    ],\n    \"metadata\": {\n        \"pact-specification\": {\n            \"version\": \"3.0.0\"\n        },\n        \"pact-jvm\": {\n            \"version\": \"3.2.7\"\n        }\n    }\n}\n```\n\nProvider function\n\n``` java\n    @PactVerifyProvider(\"a created event for the new customer\")\n    public String shouldCreateANewCustomer() {\n        CustomerDetails customerDetails = new CustomerDetails(\n                new Address(1, \"address-line-1\", \"address-line-2\"),\n                new Person(1, \"Mr\", \"Test\")\n        );\n\n        return JsonOutput.toJson(customerDetails);\n    }\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/259", "user": "BenSayers", "labels": ["bug"], "created": "2016-06-02 04:15:42", "closed": "2016-07-06 05:42:51", "commits": {"6aba6547175e40688678cafd82f138fe04ffb633": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 34.000277777777775, "commitsDetails": [{"commitHash": "6aba6547175e40688678cafd82f138fe04ffb633", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["09e69ea867ad8205136bd446a449fa51c8f10e88"], "nameRev": "6aba6547175e40688678cafd82f138fe04ffb633 tags/2_4_10~2^2~6", "commitMessage": "fix for the \"No signature of method\" failure in the pact verifier for message pacts #259\n", "commitDateTime": "2016-06-03 16:02:56", "authoredDateTime": "2016-06-03 16:02:56", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/ProviderVerifierSpec.groovy", "insertions": 26, "deletions": 0, "lines": 26}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6aba6547175e40688678cafd82f138fe04ffb633"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy"]}, {"title": "MessagePactProviderRule does not use fragment helper as defined by the PactVerification annotation", "body": "When using the `MessagePactProviderRule` in combination with `PactVerification` annotations that declare which `MessagePact` fragment creator method to use I have noticed that the incorrect method is chosen if the `PactVerification` is not declared within a `PactVerifications` annotation. This seems like a bug to me.\n\nLooking at the implementation of `MessagePactProviderRule` it seems that the function that correctly finds the helper function `findPactMethod` declared on line 125 is only invoked in the flow where the `PactVerifications` annotation is defined. In the flow where only the `PactVerification` annotation is defined the helper function `parsePacts` is used. This helper does not use the fragment name defined on the `PactVerification` in order to decide which method to get the `MessagePact` from.\n\nBelow I have provided an example test that does not pass to demonstrate the issue.\n\n``` java\npublic class AsyncMessageTest {\n    @Rule\n    public MessagePactProviderRule mockProvider = new MessagePactProviderRule(\"test_provider\", this);\n\n    @Pact(provider = \"test_provider\", consumer = \"test_consumer_v3\")\n    public MessagePact createPact(MessagePactBuilder builder) {\n        PactDslJsonBody body = new PactDslJsonBody();\n        body.stringValue(\"testParam1\", \"value1\");\n        body.stringValue(\"testParam2\", \"value2\");\n\n        Map<String, String> metadata = new HashMap<String, String>();\n        metadata.put(\"contentType\", \"application/json\");\n\n        return builder.given(\"SomeProviderState\")\n                .expectsToReceive(\"a test message\")\n                .withMetadata(metadata)\n                .withContent(body)\n                .toPact();\n    }\n\n    @Pact(provider = \"test_provider\", consumer = \"test_consumer_v3\")\n    public MessagePact createPact2(MessagePactBuilder builder) {\n        PactDslJsonBody body = new PactDslJsonBody();\n        body.stringValue(\"testParam1\", \"value3\");\n        body.stringValue(\"testParam2\", \"value4\");\n\n        Map<String, String> metadata = new HashMap<String, String>();\n        metadata.put(\"contentType\", \"application/json\");\n\n        return builder.given(\"SomeProviderState2\")\n                .expectsToReceive(\"a test message\")\n                .withMetadata(metadata)\n                .withContent(body)\n                .toPact();\n    }\n\n    @Test\n    @PactVerification(value = \"test_provider\", fragment = \"createPact\")\n    public void test() throws Exception {\n        byte[] currentMessage = mockProvider.getMessage();\n        assertThat(new String(currentMessage), is(\"{\\\"testParam1\\\":\\\"value1\\\",\\\"testParam2\\\":\\\"value2\\\"}\"));\n    }\n\n    @Test\n    @PactVerification(value = \"test_provider\", fragment = \"createPact2\")\n    public void test2() {\n        byte[] currentMessage = mockProvider.getMessage();\n        assertThat(new String(currentMessage), is(\"{\\\"testParam1\\\":\\\"value3\\\",\\\"testParam2\\\":\\\"value4\\\"}\"));\n    }\n}\n```\n\nThe error is\n\n```\nconsumer.customerdetails.AsyncMessageTest > test2 FAILED\n    java.lang.AssertionError:\n    Expected: is \"{\\\"testParam1\\\":\\\"value3\\\",\\\"testParam2\\\":\\\"value4\\\"}\"\n         but: was \"{\\\"testParam1\\\":\\\"value1\\\",\\\"testParam2\\\":\\\"value2\\\"}\"\n        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\n        at org.junit.Assert.assertThat(Assert.java:956)\n        at org.junit.Assert.assertThat(Assert.java:923)\n        at consumer.customerdetails.AsyncMessageTest.test2(AsyncMessageTest.java:62)\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/258", "user": "BenSayers", "labels": ["bug"], "created": "2016-06-01 06:03:03", "closed": "2016-07-06 05:43:10", "commits": {"09e69ea867ad8205136bd446a449fa51c8f10e88": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 34.000277777777775, "commitsDetails": [{"commitHash": "09e69ea867ad8205136bd446a449fa51c8f10e88", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a9a7147b0cb6cdc69e36d15c88ad6de96a9b2fd8"], "nameRev": "09e69ea867ad8205136bd446a449fa51c8f10e88 tags/2_4_10~2^2~7", "commitMessage": "fix the MessagePactProviderRule to use the correct fragment method for the @PactVerification #258\n", "commitDateTime": "2016-06-03 14:41:29", "authoredDateTime": "2016-06-03 14:41:29", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/build.gradle", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/MessagePactProviderRule.java", "insertions": 24, "deletions": 6, "lines": 30}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactProviderWithMultipleFragmentsTest.java", "insertions": 7, "deletions": 7, "lines": 14}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/v3/AsyncMessageTest.java", "insertions": 67, "deletions": 0, "lines": 67}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessagePactProviderRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MessagePactProviderRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "PactProviderWithMultipleFragmentsTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.pactproviderrule.PactProviderWithMultipleFragmentsTest.runTestWithFragment2()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.pactproviderrule.PactProviderWithMultipleFragmentsTest.createFragment2(au.com.dius.pact.consumer.dsl.PactDslWithProvider)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.pactproviderrule.PactProviderWithMultipleFragmentsTest.runTestWithFragment1()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "AsyncMessageTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.v3.AsyncMessageTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["09e69ea867ad8205136bd446a449fa51c8f10e88"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 26, "deletions": 7, "lines": 33, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-junit", "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.MessagePactProviderRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()"]}, {"title": "Cannot get property 'templated' on null object", "body": "Hi, I'm trying to run my pact provider tests against the pact broker using au.com.dius:pact-jvm-provider-maven_2.11 but it returns the following error message:\n\n`Execution default-cli of goal au.com.dius:pact-jvm-provider-maven_2.11:3.2.6:verify failed: Cannot get property 'templated' on null object`\n\nThe following is the full stacktrace that it shows:\n\n```\nat org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:224)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:153)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:145)\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:116)\n    at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:80)\n    at org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder.build(SingleThreadedBuilder.java:51)\n    at org.apache.maven.lifecycle.internal.LifecycleStarter.execute(LifecycleStarter.java:120)\n    at org.apache.maven.DefaultMaven.doExecute(DefaultMaven.java:347)\n    at org.apache.maven.DefaultMaven.execute(DefaultMaven.java:154)\n    at org.apache.maven.cli.MavenCli.execute(MavenCli.java:584)\n    at org.apache.maven.cli.MavenCli.doMain(MavenCli.java:213)\n    at org.apache.maven.cli.MavenCli.main(MavenCli.java:157)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launchEnhanced(Launcher.java:289)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.launch(Launcher.java:229)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.mainWithExitCode(Launcher.java:415)\n    at org.codehaus.plexus.classworlds.launcher.Launcher.main(Launcher.java:356)\nCaused by: org.apache.maven.plugin.PluginExecutionException: Execution default-cli of goal au.com.dius:pact-jvm-provider-maven_2.11:3.2.6:verify failed: Cannot get property 'templated' on null object\n    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:143)\n    at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)\n    ... 19 more\nCaused by: java.lang.NullPointerException: Cannot get property 'templated' on null object\n    at org.codehaus.groovy.runtime.NullObject.getProperty(NullObject.java:60)\n    at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n    at au.com.dius.pact.provider.broker.HalClient.fetchLink(HalClient.groovy:54)\n    at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n    at au.com.dius.pact.provider.broker.HalClient.navigate(HalClient.groovy:48)\n    at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n    at au.com.dius.pact.provider.broker.PactBrokerClient.fetchConsumers(PactBrokerClient.groovy:24)\n    at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n    at au.com.dius.pact.provider.ProviderInfo.hasPactsFromPactBroker(ProviderInfo.groovy:61)\n    at au.com.dius.pact.provider.ProviderInfo.hasPactsFromPactBroker(ProviderInfo.groovy)\n    at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n    at au.com.dius.pact.provider.maven.PactProviderMojo$_execute_closure6.doCall(PactProviderMojo.groovy:53)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:497)\n    at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)\n    at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)\n    at org.codehaus.groovy.runtime.metaclass.ClosureMetaClass.invokeMethod(ClosureMetaClass.java:294)\n    at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1021)\n    at groovy.lang.Closure.call(Closure.java:426)\n    at groovy.lang.Closure.call(Closure.java:442)\n    at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2030)\n    at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2015)\n    at org.codehaus.groovy.runtime.DefaultGroovyMethods.each(DefaultGroovyMethods.java:2056)\n    at org.codehaus.groovy.runtime.dgm$162.doMethodInvoke(Unknown Source)\n    at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:228)\n    at au.com.dius.pact.provider.maven.PactProviderMojo.execute(PactProviderMojo.groovy:46)\n    at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:132)\n    ... 20 more\n```\n\nDo you have any idea what could be wrong here?It's coming from https://github.com/DiUS/pact-jvm/blob/bedae45f3701c8fe546f6817d6f5a3af29b75766/pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker/HalClient.groovy\n\nI have configured my build as it describes in https://github.com/DiUS/pact-jvm/tree/master/pact-jvm-provider-maven#verifying-pact-files-from-a-pact-broker-version-311231\n\nThanks.\n", "url": "https://github.com/DiUS/pact-jvm/issues/257", "user": "RodrigoBerto", "labels": ["bug"], "created": "2016-05-23 01:09:42", "closed": "2017-12-20 04:01:32", "commits": {"7b06f73fa9b8f17afff97e84218ad747b9f601ee": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 576.0002777777778, "commitsDetails": [{"commitHash": "7b06f73fa9b8f17afff97e84218ad747b9f601ee", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["f240b808cb776c1d9c432f12ca6e6617d33cb5a0"], "nameRev": "7b06f73fa9b8f17afff97e84218ad747b9f601ee tags/2_4_10~2^2~10", "commitMessage": "add more appropriate error message is the pact broker response is invalid #257\n", "commitDateTime": "2016-05-28 15:41:37", "authoredDateTime": "2016-05-28 15:33:27", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker/HalClient.groovy", "insertions": 19, "deletions": 1, "lines": 20}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker/InvalidHalResponse.groovy", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "pact-jvm-provider/src/test/groovy/au/com/dius/pact/provider/broker/HalClientSpec.groovy", "insertions": 51, "deletions": 0, "lines": 51}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7b06f73fa9b8f17afff97e84218ad747b9f601ee"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 29, "deletions": 1, "lines": 30, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/broker"]}, {"title": "The JVM version does have an eachLike matcher, but it assumes an array of objects. It won't currently work with an array of strings. ", "body": "Looks like Ruby has the support from the documentation from the following page to assert for a few elements in an array using each_like(). Reference: https://github.com/realestate-com-au/pact/wiki/v2-flexible-matching\n\nHow can I achieve this in Java ?\n\nFor example:\n\n```\nPactDslJsonBody body = new PactDslJsonBody()\n    .stringType(\"preference\")\n    .stringType(\"subscriptionId\")\n    .array(\"types\").stringType().eachLike(\"abc\", \"def\").closeArray().asBody();\n```\n\nThe above doesn't work though. The JVM version does have an eachLike matcher, but it assumes an array of objects. It won't currently work with an array of strings\n", "url": "https://github.com/DiUS/pact-jvm/issues/256", "user": "nnarendravijay", "labels": ["bug"], "created": "2016-05-19 02:34:25", "closed": "2017-05-18 05:45:29", "commits": {"a9a7147b0cb6cdc69e36d15c88ad6de96a9b2fd8": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "0c3d776ee15dd6d359076a00db90c4470868324d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "17d8e33652f853bfeee1dd29c73dd5dc8d693ac3": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 364.0002777777778, "commitsDetails": [{"commitHash": "a9a7147b0cb6cdc69e36d15c88ad6de96a9b2fd8", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["b987de4944c41a21ff7e77f761a45a4a472914cb"], "nameRev": "a9a7147b0cb6cdc69e36d15c88ad6de96a9b2fd8 tags/2_4_10~2^2~8", "commitMessage": "allow the eachLike matchers to be applied to arrays of non-objects #256\n", "commitDateTime": "2016-05-28 17:45:36", "authoredDateTime": "2016-05-28 17:45:36", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/PactDslJsonArrayTest.java", "insertions": 25, "deletions": 25, "lines": 50}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/DslPart.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonBody.java", "insertions": 73, "deletions": 0, "lines": 73}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonBodyMatcherSpec.groovy", "insertions": 69, "deletions": 0, "lines": 69}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonArrayTest.java", "spoonMethods": []}, {"spoonFilePath": "DslPart.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.DslPart.matchMax(java.lang.Integer)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.eachLike(java.lang.String,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.eachLike(java.lang.String,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.minArrayLike(java.lang.String,java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.minArrayLike(java.lang.String,java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.maxArrayLike(java.lang.String,java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.maxArrayLike(java.lang.String,java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "0c3d776ee15dd6d359076a00db90c4470868324d", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d76ac26bc2966dfc50094cdc54e6055ccd2259c7"], "nameRev": "0c3d776ee15dd6d359076a00db90c4470868324d tags/3_3_9~1", "commitMessage": "Add eachlike methods to PactDslJsonArray that take PactDslJsonRootValue matchers #256\n", "commitDateTime": "2017-05-08 21:09:36", "authoredDateTime": "2017-05-08 21:09:36", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonArray.java", "insertions": 75, "deletions": 0, "lines": 75}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonArrayMatcherSpec.groovy", "insertions": 23, "deletions": 0, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonArray.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.eachLike(au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.eachLike(au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.minArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.minArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.maxArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.maxArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "17d8e33652f853bfeee1dd29c73dd5dc8d693ac3", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e291e5f3514e9a45b7583c8973c2159db060cae7"], "nameRev": "17d8e33652f853bfeee1dd29c73dd5dc8d693ac3 tags/2_4_19~112", "commitMessage": "Add eachlike methods to PactDslJsonArray that take PactDslJsonRootValue matchers #256\n", "commitDateTime": "2017-08-14 13:47:52", "authoredDateTime": "2017-05-08 21:09:36", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonArray.java", "insertions": 75, "deletions": 0, "lines": 75}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonArrayMatcherSpec.groovy", "insertions": 23, "deletions": 0, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonArray.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.eachLike(au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.eachLike(au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.minArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.minArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.maxArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.maxArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a9a7147b0cb6cdc69e36d15c88ad6de96a9b2fd8", "0c3d776ee15dd6d359076a00db90c4470868324d"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 149, "deletions": 1, "lines": 150, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 13, "UPD": 1, "INS": 12, "MOV": 0, "DEL": 0, "spoonFilesChanged": 3, "spoonMethodsChanged": 13}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslJsonBody.eachLike(java.lang.String,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.eachLike(au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.minArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.maxArrayLike(java.lang.String,java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.maxArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.maxArrayLike(java.lang.String,java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.minArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.eachLike(au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.maxArrayLike(java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.minArrayLike(java.lang.String,java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue,int)", "au.com.dius.pact.consumer.dsl.DslPart.matchMax(java.lang.Integer)", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.minArrayLike(java.lang.String,java.lang.Integer,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.eachLike(java.lang.String,au.com.dius.pact.consumer.dsl.PactDslJsonRootValue)"]}, {"title": "Ignore body when validating", "body": "I've got a consumer that when requesting something by ID from a provider, I expect a 404 returned when it doesn't exist. I don't care about the body, purely the status code.\n\nHowever, in version 2.4.8, I get an issue where the pact test fails, as it expects no body, but one is returned. This doesn't happen in previous versions of the library.\n\nIs there a way around this?\n", "url": "https://github.com/DiUS/pact-jvm/issues/248", "user": "Hazz223", "labels": ["bug", "question"], "created": "2016-04-20 14:03:28", "closed": "2016-08-07 01:34:30", "commits": {"f0d93a0286fd95afc6dc0ce6a36acbbcca59c96c": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 108.00027777777778, "commitsDetails": [{"commitHash": "f0d93a0286fd95afc6dc0ce6a36acbbcca59c96c", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d41d1af1ac074e98fd7e9f722de16318b9c43fb7"], "nameRev": "f0d93a0286fd95afc6dc0ce6a36acbbcca59c96c tags/2_4_12~2^2", "commitMessage": "do not include optional missing attributes in the generated pact files #248\n", "commitDateTime": "2016-07-15 11:30:49", "authoredDateTime": "2016-07-15 11:30:49", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/PactRuleWithRandomPortTest.java", "insertions": 9, "deletions": 10, "lines": 19}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/exampleclients/ConsumerClient.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-consumer/src/test/java/au/com/dius/pact/consumer/ConsumerClient.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "pact-jvm-consumer/src/test/java/au/com/dius/pact/consumer/MatchingTest.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Request.groovy", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponsePact.groovy", "insertions": 16, "deletions": 11, "lines": 27}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Response.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/Message.groovy", "insertions": 10, "deletions": 3, "lines": 13}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactWriterSpec.groovy", "insertions": 53, "deletions": 0, "lines": 53}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderClient.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactRuleWithRandomPortTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactRuleWithRandomPortTest.createFragment(au.com.dius.pact.consumer.dsl.PactDslWithProvider)", "TOT": 5, "UPD": 1, "INS": 2, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactRuleWithRandomPortTest.runTest()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ConsumerClient.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.ConsumerClient.jsonToMap(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MatchingTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MatchingTest.runTest(au.com.dius.pact.consumer.dsl.PactDslResponse,java.lang.String,java.util.Map,java.lang.String).1.run(au.com.dius.pact.model.MockProviderConfig)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f0d93a0286fd95afc6dc0ce6a36acbbcca59c96c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 34, "deletions": 22, "lines": 56, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Response.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/RequestResponsePact.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/Request.groovy", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderClient.groovy", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.ConsumerClient.jsonToMap(java.lang.String)"]}, {"title": "IncompatibleClassChangeError using 2.4.8 with Grails 2.2.4 and Java7", "body": "When trying to instantiate `ConsumerInfo` in a I received this error:\n\n```\njava.lang.IncompatibleClassChangeError: the number of constructors during runtime and compile time for au.com.dius.pact.provider.PactVerification do not match. Expected -1 but got 2\n```\n\nA bit of research suggests this is an issue when using class compiled with Java6 in Groovy using Java7.  \n", "url": "https://github.com/DiUS/pact-jvm/issues/242", "user": "admiwi", "labels": ["bug"], "created": "2016-04-07 14:51:35", "closed": "2016-05-28 01:38:26", "commits": {"2944eca7b9e3787fb7f0bfe8a542b402c4d8c1c8": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 50.000277777777775, "commitsDetails": [{"commitHash": "2944eca7b9e3787fb7f0bfe8a542b402c4d8c1c8", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["4051aab86f4ec19ae4252c3c6ce1abb6045a5a27"], "nameRev": "2944eca7b9e3787fb7f0bfe8a542b402c4d8c1c8 tags/2_4_9~3", "commitMessage": "convert enum and expection classes in pact-jvm-provider module to java to support groovy versions < 2.2 #242\n", "commitDateTime": "2016-04-09 18:25:08", "authoredDateTime": "2016-04-09 18:25:08", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/PactVerification.groovy", "insertions": 0, "deletions": 9, "lines": 9}, {"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/PactVerifierException.groovy", "insertions": 0, "deletions": 10, "lines": 10}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/PactVerification.java", "insertions": 8, "deletions": 0, "lines": 8}, {"filePath": "pact-jvm-provider/src/main/java/au/com/dius/pact/provider/PactVerifierException.java", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "pact-jvm-provider/src/main/{groovy => java}/au/com/dius/pact/provider/PactVerifyProvider.java", "insertions": 0, "deletions": 0, "lines": 0}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactVerification.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.PactVerification", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactVerifierException.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.PactVerifierException", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactVerifyProvider.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2944eca7b9e3787fb7f0bfe8a542b402c4d8c1c8"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 29, "deletions": 19, "lines": 48, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/java/au/com/dius/pact/provider", "pact-jvm-provider/src/main/{groovy => java}/au/com/dius/pact/provider", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/PactVerifierException.groovy", "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/PactVerification.groovy"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.PactVerifierException", "au.com.dius.pact.provider.PactVerification"]}, {"title": "unable to run http://localhost:29999/create?state=NoUsers with pact-jvm-server", "body": "Hi ,\n\nI am facing problem to execute an example on pact-jvm-server.\nI have started pact-jvm server and its listening on port 29999 and GET call of \" http://localhost:29999\" giving JSON \"{\"ports\": []}\" in response.\nI am using Postman for executing POST call http://localhost:29999/create?state=NoUsers\nbut I am not getting what will be perfect JSON for above post request.\n", "url": "https://github.com/DiUS/pact-jvm/issues/231", "user": "anurag0249", "labels": ["bug"], "created": "2016-03-23 11:50:11", "closed": "2016-03-30 05:27:25", "commits": {"6143e58f0d892cb7dd7ae330b5a394cf9a946226": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "6143e58f0d892cb7dd7ae330b5a394cf9a946226", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["968b79528010962c28ee0710bf1a552ea3fcb028"], "nameRev": "6143e58f0d892cb7dd7ae330b5a394cf9a946226 tags/2_4_8~1^2", "commitMessage": "fix regression in pact mock server after change from using json4s #231\n", "commitDateTime": "2016-03-29 11:59:15", "authoredDateTime": "2016-03-29 11:59:15", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactReader.groovy", "insertions": 8, "deletions": 2, "lines": 10}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactReaderSpec.groovy", "insertions": 26, "deletions": 0, "lines": 26}, {"filePath": "pact-jvm-server/build.gradle", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-server/src/test/groovy/au/com/dius/pact/server/CreateSpec.groovy", "insertions": 26, "deletions": 0, "lines": 26}, {"filePath": "pact-jvm-server/src/test/resources/create-pact.json", "insertions": 27, "deletions": 0, "lines": 27}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6143e58f0d892cb7dd7ae330b5a394cf9a946226"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 2, "lines": 15, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-server", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactReader.groovy"]}, {"title": "pact-jvm-consumer-junit: Decimal points are sometimes removed when writing to a pact consumer file", "body": "Given I have a bundle with a post request body :\n`.body(\"{\\\"responsetest\\\": true, \\\"name\\\": \\\"harry\\\",\\\"data\\\": 1234.0 }\")`\nWhen I run a consumer test with this body\nThen I receive a response \nAnd I verify the response body\n\n```\n assertEquals(,\"harry\",responseJSON.get(\"name\"));\n assertEquals(\"Miss matched data\",1234.0f,responseJSON.get(\"data\"),0.1f);\n```\n\nAnd the pact file is written\nAnd within the file there is a response\nAnd EXPECTED within this response, there is a key value pair:   \"data\": 1234.0,\nAnd ACTUAL within this response, there is a key value pair:   \"data\": 1234,\n\nedit: formatting\n", "url": "https://github.com/DiUS/pact-jvm/issues/221", "user": "alexikin", "labels": ["bug"], "created": "2016-03-14 22:55:52", "closed": "2016-03-18 05:35:01", "commits": {"bedae45f3701c8fe546f6817d6f5a3af29b75766": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "bedae45f3701c8fe546f6817d6f5a3af29b75766", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["298283612dfc8962c0507a20f1bf05ad3bdaf4c4"], "nameRev": "bedae45f3701c8fe546f6817d6f5a3af29b75766 tags/2_4_7~1^2~2", "commitMessage": "upgrade groovy to 2.4.6 to fix loss of precision when parsing decimal numbers in JSON #221\n", "commitDateTime": "2016-03-18 16:26:47", "authoredDateTime": "2016-03-18 16:26:47", "commitGitStats": [{"filePath": "gradle.properties", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/Defect221Test.java", "insertions": 43, "deletions": 0, "lines": 43}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactWriterSpec.groovy", "insertions": 32, "deletions": 0, "lines": 32}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Defect221Test.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.Defect221Test", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bedae45f3701c8fe546f6817d6f5a3af29b75766"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["gradle.properties"], "changesInPackagesSPOON": []}, {"title": "pact-jvm-consumer-specs2 does not properly store urlencoded query strings when generating pact files.", "body": "With consumer test code:\n\n``` Scala\nPactFragment.consumer(\"some consumer\").hasPactWith(\"some provider\")\n      .given(\"test\")\n      .uponReceiving(\"add a broker\")\n      .matching(path = \"/api/broker/add\", query = \"options=delete.topic.enable%3Dtrue&broker=1\")\n```\n\npact-jvm-consumer-specs2 generates pact file:\n\n``` JSON\n            \"request\": {\n                \"method\": \"GET\",\n                \"path\": \"/api/broker/add\",\n                \"query\": \"options=delete.topic.enable=true&broker=2\"\n            }\n```\n\nNotice `delete.topic.enable%3Dtrue`  becomes `delete.topic.enable=true`. This bug basically renders the pact file to become unusable. Please fix it. Thanks.\n", "url": "https://github.com/DiUS/pact-jvm/issues/219", "user": "allenxiang", "labels": ["bug"], "created": "2016-03-07 16:21:45", "closed": "2016-03-14 14:26:48", "commits": {"d21b30400f265dd909df33057a9ce56169682026": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "e5f307909a47058a264d10d108e00cde5ecbc3ec": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "e24cc76673aa8757d4f0cc00380121132a40c8dd": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "c449839c3a376ab3f84e6a7f14a4effee504883c": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "d21b30400f265dd909df33057a9ce56169682026", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["424725de7b7c9c775bbfeb7c21174e3024063ff4"], "nameRev": "d21b30400f265dd909df33057a9ce56169682026 tags/2_4_7~1^2~13", "commitMessage": "Handle query strings that contain equals in the value #219\n", "commitDateTime": "2016-03-12 16:13:23", "authoredDateTime": "2016-03-12 16:13:23", "commitGitStats": [{"filePath": "pact-jvm-consumer-specs2/build.gradle", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ConsumerService.scala", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ExamplePactSpec.scala", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/Issue219PactSpec.scala", "insertions": 29, "deletions": 0, "lines": 29}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactReader.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "insertions": 10, "deletions": 6, "lines": 16}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactReaderSpec.groovy", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "pact-jvm-model/src/test/resources/v2_pact_query.json", "insertions": 59, "deletions": 0, "lines": 59}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "e5f307909a47058a264d10d108e00cde5ecbc3ec", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d21b30400f265dd909df33057a9ce56169682026"], "nameRev": "e5f307909a47058a264d10d108e00cde5ecbc3ec tags/2_4_7~1^2~12", "commitMessage": "Fix for codenarc failure #219\n", "commitDateTime": "2016-03-12 16:22:43", "authoredDateTime": "2016-03-12 16:22:43", "commitGitStats": [{"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactReaderSpec.groovy", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "e24cc76673aa8757d4f0cc00380121132a40c8dd", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e5f307909a47058a264d10d108e00cde5ecbc3ec"], "nameRev": "e24cc76673aa8757d4f0cc00380121132a40c8dd tags/2_4_7~1^2~11", "commitMessage": "encode query values when writing a V2 format pact file #219\n", "commitDateTime": "2016-03-12 17:10:46", "authoredDateTime": "2016-03-12 17:10:46", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactWriter.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/test/groovy/au/com/dius/pact/model/PactWriterSpec.groovy", "insertions": 21, "deletions": 0, "lines": 21}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "c449839c3a376ab3f84e6a7f14a4effee504883c", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e24cc76673aa8757d4f0cc00380121132a40c8dd"], "nameRev": "c449839c3a376ab3f84e6a7f14a4effee504883c tags/2_4_7~1^2~10", "commitMessage": "increase test timeout for travis build #219\n", "commitDateTime": "2016-03-12 17:23:47", "authoredDateTime": "2016-03-12 17:23:47", "commitGitStats": [{"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ExamplePactSpec.scala", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d21b30400f265dd909df33057a9ce56169682026", "e5f307909a47058a264d10d108e00cde5ecbc3ec", "e24cc76673aa8757d4f0cc00380121132a40c8dd", "c449839c3a376ab3f84e6a7f14a4effee504883c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 17, "deletions": 10, "lines": 27, "gitFilesChange": 4}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-specs2", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactReader.groovy", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/PactWriter.groovy"]}, {"title": "JUnit Consumer throws 'Text must not be null' error message", "body": "JUnit Consumer throws 'Text must not be null' error message. I've tried several things to get it to work properly - set the bodies to empty strings, a single string, etc..\n\nHere is a link to the code:\nhttps://gist.github.com/bbarke/fe187c0b4bf91a51f615\nHere is a link to the stacktrace:\nhttps://gist.github.com/bbarke/c6a431af368691e38fc7\n", "url": "https://github.com/DiUS/pact-jvm/issues/216", "user": "bbarke", "labels": ["bug"], "created": "2016-02-18 00:57:11", "closed": "2016-03-12 03:11:37", "commits": {"0bac2ba8818c55e15d51fb6bfba05ade469a0347": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 23.00027777777778, "commitsDetails": [{"commitHash": "0bac2ba8818c55e15d51fb6bfba05ade469a0347", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["60aa099f7bee7f83e3284302a7521e3b60f3d312"], "nameRev": "0bac2ba8818c55e15d51fb6bfba05ade469a0347 tags/2_4_6~1^2", "commitMessage": "when comparing bodies, handle the case where a request returns an empty string for a body #216\n", "commitDateTime": "2016-02-18 17:18:51", "authoredDateTime": "2016-02-18 17:18:51", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/build.gradle", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/Defect215Test.java", "insertions": 91, "deletions": 0, "lines": 91}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/JsonBodyMatcher.scala", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/JsonBodyMatcherTest.scala", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/JsonUtils.scala", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/JsonUtilsSpec.scala", "insertions": 45, "deletions": 0, "lines": 45}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Defect215Test.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.Defect215Test", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0bac2ba8818c55e15d51fb6bfba05ade469a0347"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 4, "lines": 17, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/JsonBodyMatcher.scala", "pact-jvm-consumer-junit", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/JsonUtils.scala"], "changesInPackagesSPOON": []}, {"title": "Regexp request header doesn't seem to match", "body": "See this repo for tests that fail on the regexp header matcher...\n\nhttps://github.com/georgepapas/pact-issue-212\n\nAm I missing something here?\n", "url": "https://github.com/DiUS/pact-jvm/issues/213", "user": "georgepapas", "labels": ["bug"], "created": "2016-02-11 11:57:39", "closed": "2016-03-12 03:12:07", "commits": {"f7d73250c3986c812459d9ada3677fbdd14693e3": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 29.00027777777778, "commitsDetails": [{"commitHash": "f7d73250c3986c812459d9ada3677fbdd14693e3", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["19b42e32474c7d7099dd6157c4a00887539a1a92"], "nameRev": "f7d73250c3986c812459d9ada3677fbdd14693e3 tags/2_4_6~2^2~1", "commitMessage": "handle content type header parameters #213\n", "commitDateTime": "2016-02-12 14:03:05", "authoredDateTime": "2016-02-12 14:03:05", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/HeaderMatcher.scala", "insertions": 33, "deletions": 4, "lines": 37}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/HeaderMatcherSpec.scala", "insertions": 38, "deletions": 0, "lines": 38}, {"filePath": "pact-specification-test/src/main/resources/v3/request/headers/content type parameters do not match.json", "insertions": 20, "deletions": 0, "lines": 20}, {"filePath": "pact-specification-test/src/main/resources/v3/request/headers/matches content type with charset.json", "insertions": 20, "deletions": 0, "lines": 20}, {"filePath": "pact-specification-test/src/main/resources/v3/request/headers/matches content type with parameters in different order.json", "insertions": 20, "deletions": 0, "lines": 20}, {"filePath": "pact-specification-test/src/main/resources/v3/response/headers/content type parameters do not match.json", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "pact-specification-test/src/main/resources/v3/response/headers/matches content type with charset.json", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "pact-specification-test/src/main/resources/v3/response/headers/matches content type with parameters in different order.json", "insertions": 14, "deletions": 0, "lines": 14}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f7d73250c3986c812459d9ada3677fbdd14693e3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 135, "deletions": 4, "lines": 139, "gitFilesChange": 7}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-specification-test/src/main/resources/v3/request/headers/matches content type with charset.json", "pact-specification-test/src/main/resources/v3/request/headers/content type parameters do not match.json", "pact-specification-test/src/main/resources/v3/response/headers/content type parameters do not match.json", "pact-specification-test/src/main/resources/v3/response/headers/matches content type with charset.json", "pact-specification-test/src/main/resources/v3/response/headers/matches content type with parameters in different order.json", "pact-specification-test/src/main/resources/v3/request/headers/matches content type with parameters in different order.json", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/HeaderMatcher.scala"]}, {"title": "Can't match at root with DSL", "body": "Hi, I would like to be able to match at the body root on a response. In my case I'm trying to match a response body that doesn't have an attribute name just an integer:\n\nI've setup the pact as follows: \n\nval pact = ConsumerPactBuilder.consumer(\"complex-instruction-service\")\n      .hasPactWith(\"workflow-service\")\n      .given(\"any state\")\n      .uponReceiving(\"a request to start a workflow\")\n        .path(\"/startWorkflowProcessInstance\")\n        .headers(headers)\n        .method(\"POST\")\n        .body(requestBody)\n      .willRespondWith()\n        .headers(headers)\n        .status(HttpStatusCodes.Ok)\n        .body(\"1234\")\n      .toFragment\n\nThis results in the provider test failing unless there is an exact match on \"1234\". Can I somehow set this up as a regular expression? If the response had an attribute name I could use stringMatcher(\"name\", regex).\n\nGenerated pact file:\n\n{\n    \"providerState\" : \"any state\",\n    \"description\" : \"a request to start a workflow\",\n    \"request\" : {\n      \"method\" : \"POST\",\n      \"path\" : \"/startWorkflowProcessInstance\",\n      \"headers\" : {\n        \"Content-Type\" : \"application/json;odata=verbose\"\n      },\n      \"query\" : \"\",\n      \"body\" : {\n        \"workflowProcessName\" : \"crzFrpFJWRhqQdhtetrE\",\n        \"variables\" : [ {\n          \"name\" : \"VXHgTGCBOlFXWCUQXgQN\",\n          \"value\" : \"ZQKXFxiIWBaWIpxEBZwl\"\n        } ]\n      },\n      \"matchingRules\" : {\n        \"$.body.variables\" : {\n          \"min\" : 1,\n          \"match\" : \"type\"\n        },\n        \"$.body.variables[_].value\" : {\n          \"match\" : \"type\"\n        },\n        \"$.body.variables[_].name\" : {\n          \"match\" : \"type\"\n        },\n        \"$.body.workflowProcessName\" : {\n          \"match\" : \"type\"\n        }\n      }\n    },\n    \"response\" : {\n      \"status\" : 200,\n      \"headers\" : {\n        \"Content-Type\" : \"application/json;odata=verbose\"\n      },\n      \"body\" : 1234\n    }\n  } ],\n  \"metadata\" : {\n    \"pact-specification\" : {\n      \"version\" : \"2.0.0\"\n    },\n    \"pact-jvm\" : {\n      \"version\" : \"2.3.2\"\n    }\n  }\n}\n", "url": "https://github.com/DiUS/pact-jvm/issues/207", "user": "ajhcpt", "labels": ["bug"], "created": "2016-01-13 08:55:52", "closed": "2016-01-30 02:27:36", "commits": {"8dbe4518068a9ee4c6f0314fe019fec8469f4150": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 16.00027777777778, "commitsDetails": [{"commitHash": "8dbe4518068a9ee4c6f0314fe019fec8469f4150", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e4c6fe1b5d8a3d5199cb5025c49bf096032df4b1"], "nameRev": "8dbe4518068a9ee4c6f0314fe019fec8469f4150 tags/2_4_3~3^2~3", "commitMessage": "Add DSL class to the Java DSL to match values at the root #207\n", "commitDateTime": "2016-01-15 15:56:40", "authoredDateTime": "2016-01-15 15:56:40", "commitGitStats": [{"filePath": "pact-jvm-consumer/build.gradle", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonRootValue.java", "insertions": 453, "deletions": 0, "lines": 453}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/dsl/PactDslResponseSpec.groovy", "insertions": 24, "deletions": 0, "lines": 24}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": ["8dbe4518068a9ee4c6f0314fe019fec8469f4150"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 456, "deletions": 0, "lines": 456, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl", "pact-jvm-consumer"]}, {"title": "Pact-JVM fails with Android", "body": "We are trying to setup Pact for a new project using iOS and Android consumers. We are facing issues with Android when running Pact-jvm because of the Scala requirement and on iOS we also need to support iOS 7 (for iPhone 4) which seems to be incompatible with the existing Swift implementation. Did you guys find any workaround for these issues?\n\nOur project is using au.com.dius:pact-jvm-consumer_2.11:3.2.1\n\nI've publised an empty Android Project with just Pact and gives the same error:\n\nhttps://github.com/jcarlos/AndroidPact\n\nThis one includes:\n\n``` groovy\ncompile fileTree(dir: 'libs', include: ['*.jar'])\ncompile 'com.android.support:appcompat-v7:23.1.0'\ncompile 'com.android.support:design:23.1.0'\nandroidTestCompile 'au.com.dius:pact-jvm-consumer-junit_2.11:3.1.3'\nandroidTestCompile 'au.com.dius:pact-specification-test_2.11:3.1.3'\nandroidTestCompile 'au.com.dius:pact-jvm-matchers_2.11:3.1.3'\nandroidTestCompile 'au.com.dius:pact-jvm-consumer_2.11:3.1.3'\nandroidTestCompile 'au.com.dius:pact-jvm-consumer-specs2_2.11:3.1.3'\nandroidTestCompile 'au.com.dius:pact-jvm-model_2.11:3.1.3'\ncompile 'org.apache.httpcomponents:httpclient-android:4.3.5.1'\ntestCompile 'junit:junit:4.12'\n```\n\nI've downgraded to \n\n``` groovy\nandroidTestCompile 'au.com.dius:pact-jvm-consumer_2.10:2.4.2'\nandroidTestCompile 'au.com.dius:pact-jvm-consumer-junit_2.11:2.4.2'\n```\n\nstill getting the same error:\n\n```\nUNEXPECTED TOP-LEVEL EXCEPTION:\njava.lang.RuntimeException: Exception parsing classes\n    at com.android.dx.command.dexer.Main.processClass(Main.java:752)\n    at com.android.dx.command.dexer.Main.processFileBytes(Main.java:718)\n    at com.android.dx.command.dexer.Main.access$1200(Main.java:85)\n    at com.android.dx.command.dexer.Main$FileBytesConsumer.processFileBytes(Main.java:1645)\n    at com.android.dx.cf.direct.ClassPathOpener.processArchive(ClassPathOpener.java:284)\n    at com.android.dx.cf.direct.ClassPathOpener.processOne(ClassPathOpener.java:166)\n    at com.android.dx.cf.direct.ClassPathOpener.process(ClassPathOpener.java:144)\n    at com.android.dx.command.dexer.Main.processOne(Main.java:672)\n    at com.android.dx.command.dexer.Main.processAllFiles(Main.java:574)\n    at com.android.dx.command.dexer.Main.runMonoDex(Main.java:311)\n    at com.android.dx.command.dexer.Main.run(Main.java:277)\n    at com.android.dx.command.dexer.Main.main(Main.java:245)\n    at com.android.dx.command.Main.main(Main.java:106)\nCaused by: com.android.dx.cf.iface.ParseException: bad utf-8 byte a0 at offset 00000004\n    at com.android.dx.cf.cst.ConstantPoolParser.parseUtf8(ConstantPoolParser.java:374)\n    at com.android.dx.cf.cst.ConstantPoolParser.parse0(ConstantPoolParser.java:262)\n    at com.android.dx.cf.cst.ConstantPoolParser.parse0(ConstantPoolParser.java:294)\n    at com.android.dx.cf.cst.ConstantPoolParser.parse(ConstantPoolParser.java:150)\n    at com.android.dx.cf.cst.ConstantPoolParser.parseIfNecessary(ConstantPoolParser.java:124)\n    at com.android.dx.cf.cst.ConstantPoolParser.getPool(ConstantPoolParser.java:115)\n    at com.android.dx.cf.direct.DirectClassFile.parse0(DirectClassFile.java:482)\n    at com.android.dx.cf.direct.DirectClassFile.parse(DirectClassFile.java:406)\n    at com.android.dx.cf.direct.DirectClassFile.parseToInterfacesIfNecessary(DirectClassFile.java:388)\n    at com.android.dx.cf.direct.DirectClassFile.getMagic(DirectClassFile.java:251)\n    at com.android.dx.command.dexer.Main.parseClass(Main.java:764)\n    at com.android.dx.command.dexer.Main.access$1500(Main.java:85)\n    at com.android.dx.command.dexer.Main$ClassParserTask.call(Main.java:1684)\n    at com.android.dx.command.dexer.Main.processClass(Main.java:749)\n    ... 12 more\nCaused by: java.lang.IllegalArgumentException: bad utf-8 byte a0 at offset 00000004\n    at com.android.dx.rop.cst.CstString.throwBadUtf8(CstString.java:171)\n    at com.android.dx.rop.cst.CstString.utf8BytesToString(CstString.java:143)\n    at com.android.dx.rop.cst.CstString.<init>(CstString.java:200)\n    at com.android.dx.cf.cst.ConstantPoolParser.parseUtf8(ConstantPoolParser.java:371)\n    ... 25 more\n1 error; aborting\nError:Execution failed for task ':app:preDexDebugAndroidTest'.\n> com.android.ide.common.process.ProcessException: org.gradle.process.internal.ExecException: Process 'command '/Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home/bin/java'' finished with non-zero exit value 1\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/201", "user": "uglyog", "labels": ["bug"], "created": "2015-12-16 02:58:47", "closed": "2017-09-09 22:07:30", "commits": {}, "ttf": 633.0002777777778, "commitsDetails": []}, {"title": "Receiving error message 'java.io.IOException: Was not able load pacts from broker' when using @PactBroker in pact-jvm-provider-junit ", "body": "I pulled built the pact-jvm repo this afternoon so that I could use the @PactBroker annotation.\n\nHere's my test:\n\n@RunWith(PactRunner.class)\n@Provider(\"CardServiceProvider\")\n@PactBroker(host=\"uscinwsdfyv4xq1\", port=80)\npublic class PactVerifyTest {\n    @TestTarget // Annotation denotes Target that will be used for tests\n    public final Target target = new HttpTarget(8080);\n}\n\nAnd here's the error:\n\njava.io.IOException: Was not able load pacts from broker\n\n```\nat au.com.dius.pact.provider.junit.loader.PactBrokerLoader.load(PactBrokerLoader.java:59)\nat au.com.dius.pact.provider.junit.PactRunner.<init>(PactRunner.java:65)\nat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\nat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\nat java.lang.reflect.Constructor.newInstance(Constructor.java:422)\nat org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:104)\nat org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\nat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\nat org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\nat org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\nat org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)\nat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:43)\nat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:234)\nat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:74)\n```\n\nCaused by: java.util.concurrent.ExecutionException: java.lang.NoSuchMethodError: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.setValidateAfterInactivity(I)V\n    at com.github.rholder.retry.Retryer$ExceptionAttempt.<init>(Retryer.java:184)\n    at com.github.rholder.retry.Retryer.call(Retryer.java:113)\n    at au.com.dius.pact.provider.junit.loader.PactBrokerLoader.load(PactBrokerLoader.java:55)\n    ... 14 more\nCaused by: java.lang.NoSuchMethodError: org.apache.http.impl.conn.PoolingHttpClientConnectionManager.setValidateAfterInactivity(I)V\n    at org.apache.http.client.fluent.Executor.<clinit>(Executor.java:99)\n    at org.apache.http.client.fluent.Request.execute(Request.java:177)\n    at au.com.dius.pact.provider.junit.loader.PactBrokerLoader.lambda$load$3(PactBrokerLoader.java:57)\n    at au.com.dius.pact.provider.junit.loader.PactBrokerLoader$$Lambda$7/752316209.call(Unknown Source)\n    at com.github.rholder.retry.AttemptTimeLimiters$NoAttemptTimeLimit.call(AttemptTimeLimiters.java:78)\n    at com.github.rholder.retry.Retryer.call(Retryer.java:110)\n    ... 15 more\n\nDisconnected from the target VM, address: '127.0.0.1:50514', transport: 'socket'\n\nProcess finished with exit code -1\n\nI know it's building the URI to the Pact Broker properly because I can see the string as I step through the code and it builds a URI that I'm able to successfully reach through Chrome and Postman.\n\nAny suggestions?\nThanks\n", "url": "https://github.com/DiUS/pact-jvm/issues/196", "user": "GeorgeSimon", "labels": ["bug"], "created": "2015-12-11 00:42:35", "closed": "2016-04-27 04:18:26", "commits": {"5c8f10ed08ca8fa86c1e98758fd03cc6bca97006": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 138.00027777777777, "commitsDetails": [{"commitHash": "5c8f10ed08ca8fa86c1e98758fd03cc6bca97006", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e4ce01cf99cd4d4aa27af525ec6d5b6616881020"], "nameRev": "5c8f10ed08ca8fa86c1e98758fd03cc6bca97006 tags/2_4_2~4^2~2", "commitMessage": "Fix the version of http client across all modules #196\n", "commitDateTime": "2015-12-12 14:38:53", "authoredDateTime": "2015-12-12 14:38:53", "commitGitStats": [{"filePath": "gradle.properties", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "pact-jvm-consumer-junit/build.gradle", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-junit/build.gradle", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider-lein/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-maven/build.gradle", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "pact-jvm-provider/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5c8f10ed08ca8fa86c1e98758fd03cc6bca97006"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 12, "lines": 25, "gitFilesChange": 8}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit", "pact-jvm-provider", "pact-jvm-model", "pact-jvm-provider-lein", "gradle.properties", "pact-jvm-consumer", "pact-jvm-consumer-junit", "pact-jvm-provider-maven"]}, {"title": "pact-jvm-provider-gradle_2.11:3.2.0 bug?", "body": "Just upgraded Provider to version pact-jvm-provider-gradle_2.11:3.2.0.\n\n(1) Not working for numbers\n\nGot the following errors:\n\n```\n  $.body.Prices.PriceDAP -> Expected 5001 to be an integer\n  $.body.Prices.Price -> Expected 5001 to be an integer\n  $.body.Prices.SearchPrice -> Expected 5001 to be an integer\n  $.body.GeoLocation.Latitude -> Expected -37.825039 to be a real number\n  $.body.GeoLocation.Longitude -> Expected 144.971512 to be a real number\n  $.body.Seller.GeoLocation.Latitude -> Expected -37.821293 to be a real num\n```\n\nber\n      $.body.Seller.GeoLocation.Longitude -> Expected 144.95576 to be a real num\nber\n      $.body.Seller.Finance.0.Rate -> Expected 10.74 to be a real number\n      $.body.Specification.GreenhouseRating -> Expected 7 to be a real number\n      $.body.Specification.OverallGreenStarRating -> Expected 3.5 to be a real n\number\n      $.body.Specification.FuelCombined -> Expected 7.4 to be a real number\n      $.body.Specification.Power -> Expected 104 to be a real number\n      $.body.Specification.YearlyCosts.0.Amount -> Expected 9226.7159 to be a re\nal number\n      $.body.Specification.YearlyCosts.1.Amount -> Expected 2484 to be a real nu\nmber\n\nThe errors does not seem to be correct. \n\n5001 indeed is an integer, 144.971512 is a real number.\n\n(2) Not working for empty list \n\nAlso, looks like it is not able to compare empty array like SubFeatures ([]).\n\nError below is thrown:\n\n$.body.Features.0.SubFeatures -> Expected List() to have minimum 1\n", "url": "https://github.com/DiUS/pact-jvm/issues/192", "user": "ChuanChuanLaw", "labels": ["bug"], "created": "2015-12-01 05:56:46", "closed": "2016-01-09 05:18:11", "commits": {"d8864f57a28e95ae845e2ce83f25548667c9c3c4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 38.000277777777775, "commitsDetails": [{"commitHash": "d8864f57a28e95ae845e2ce83f25548667c9c3c4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["43f2fd7ea73d29a549204c1f5708c519aeef8759"], "nameRev": "d8864f57a28e95ae845e2ce83f25548667c9c3c4 tags/2_4_2~4^2~5", "commitMessage": "Fix the number matchers after refactor to remove json4s #189 #192\n", "commitDateTime": "2015-12-05 19:04:23", "authoredDateTime": "2015-12-05 19:04:23", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/Matchers.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/GroovyConsumerMatchersPactSpec.groovy", "insertions": 118, "deletions": 0, "lines": 118}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilderSpec.groovy", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/Matchers.scala", "insertions": 18, "deletions": 15, "lines": 33}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/TypeMatcherSpec.groovy", "insertions": 85, "deletions": 0, "lines": 85}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "the 'real' number type does not seem to be matching correctly?", "body": "I've created a pact file with real number matching, it looks something like this:\n\n```\n    {\n      \"provider\" : {\n        ...\n      },\n      \"consumer\" : {\n        ...\n      },\n      \"interactions\" : [ {\n        ...\n        },\n        \"response\" : {\n          \"status\" : 200,\n          \"headers\" : {\n            \"Content-Type\" : \"application/json\"\n          },\n          \"body\" : {\n            \"transactions\" : [ {\n              \"cost\" : 5.244065989E7,\n              ...\n            } ]\n          },\n          \"matchingRules\" : {\n            \"$.body.transactions[*].cost\" : {\n              \"match\" : \"real\"\n            },\n            ...\n          }\n        }\n      } ],\n      \"metadata\" : {\n        \"pact-specification\" : {\n          \"version\" : \"2.0.0\"\n        },\n        \"pact-jvm\" : {\n          \"version\" : \"2.2.7\"\n        }\n      }\n    }\n```\n\nWith a response like:\n\n```\n{\n  \"accountId\": {\n     ...\n  },\n  \"transactions\": [\n    {\n      ...\n      \"cost\": 52440659.89,\n    }\n  ]\n}\n```\n\nYet I get a mismatch for this, and other kind of numbers:\n\n```\nBodyMismatch - Expected 39833354.42000000178813934326171875 to be a real number\nBodyMismatch - Expected 100 to be a real number\nBodyMismatch - Expected 100 to be a real number\nBodyMismatch - Expected 100 to be a real number\nBodyMismatch - Expected 52440659.89000000059604644775390625 to be a real number\nBodyMismatch - Expected 8613019.69 to be a real number\nBodyMismatch - Expected 44422888.75 to be a real number\n```\n\nAren't all these valid real numbers?\nAs a workaround I've switched the matching to 'number' instead.\n", "url": "https://github.com/DiUS/pact-jvm/issues/189", "user": "stefan-lz", "labels": ["bug"], "created": "2015-11-25 04:59:11", "closed": "2016-01-09 05:17:31", "commits": {"d8864f57a28e95ae845e2ce83f25548667c9c3c4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "124d64fe5c79d33357ae810a8a0d0b1576a1fdf9": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 45.000277777777775, "commitsDetails": [{"commitHash": "d8864f57a28e95ae845e2ce83f25548667c9c3c4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["43f2fd7ea73d29a549204c1f5708c519aeef8759"], "nameRev": "d8864f57a28e95ae845e2ce83f25548667c9c3c4 tags/2_4_2~4^2~5", "commitMessage": "Fix the number matchers after refactor to remove json4s #189 #192\n", "commitDateTime": "2015-12-05 19:04:23", "authoredDateTime": "2015-12-05 19:04:23", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/Matchers.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/GroovyConsumerMatchersPactSpec.groovy", "insertions": 118, "deletions": 0, "lines": 118}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilderSpec.groovy", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/Matchers.scala", "insertions": 18, "deletions": 15, "lines": 33}, {"filePath": "pact-jvm-matchers/src/test/groovy/au/com/dius/pact/matchers/TypeMatcherSpec.groovy", "insertions": 85, "deletions": 0, "lines": 85}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "124d64fe5c79d33357ae810a8a0d0b1576a1fdf9", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d8864f57a28e95ae845e2ce83f25548667c9c3c4"], "nameRev": "124d64fe5c79d33357ae810a8a0d0b1576a1fdf9 tags/2_4_2~4^2~4", "commitMessage": "Rename the real matcher to decimal in the consumer modules #189\n", "commitDateTime": "2015-12-05 19:34:25", "authoredDateTime": "2015-12-05 19:34:25", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/Matchers.groovy", "insertions": 10, "deletions": 1, "lines": 11}, {"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilder.groovy", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilderSpec.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonArray.java", "insertions": 34, "deletions": 4, "lines": 38}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslJsonBody.java", "insertions": 35, "deletions": 0, "lines": 35}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonArray.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.realType(java.lang.Double)", "TOT": 5, "UPD": 2, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.realType()", "TOT": 5, "UPD": 1, "INS": 2, "MOV": 2, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.decimalType()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonArray.decimalType(java.lang.Double)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.decimalType(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.decimalType(java.lang.String,java.math.BigDecimal)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.decimalType(java.lang.String,java.lang.Double)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.realType(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.dsl.PactDslJsonBody.realType(java.lang.String,java.lang.Double)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["124d64fe5c79d33357ae810a8a0d0b1576a1fdf9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 83, "deletions": 6, "lines": 89, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 17.0, "UPD": 3.0, "INS": 10.0, "MOV": 4.0, "DEL": 0.0, "spoonFilesChanged": 2, "spoonMethodsChanged": 9}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl", "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.dsl.PactDslJsonArray.realType()", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.decimalType(java.lang.String,java.lang.Double)", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.realType(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.decimalType()", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.realType(java.lang.String,java.lang.Double)", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.decimalType(java.lang.String,java.math.BigDecimal)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.decimalType(java.lang.Double)", "au.com.dius.pact.consumer.dsl.PactDslJsonBody.decimalType(java.lang.String)", "au.com.dius.pact.consumer.dsl.PactDslJsonArray.realType(java.lang.Double)"]}, {"title": "java.lang.NullPointerException when @PactFolder has an invalid path - pact-jvm-provider-junit", "body": "Use @PactFolder with a resource path that does not exist:\n\n```\n@PactFolder(\"xyz\")\nclass PactAcceptanceTest {\n..\n..\n}\n```\n\nWhen the test is run I get a junit initializationError with:\n\n```\njava.lang.NullPointerException\nat au.com.dius.pact.provider.junit.loader.PactFolderLoader.load(PactFolderLoader.java:46)\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/187", "user": "stefan-lz", "labels": ["bug"], "created": "2015-11-24 23:08:09", "closed": "2016-02-11 22:57:07", "commits": {"160eb6643a159ffb798fa2c74f254075e35d2fc2": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 78.00027777777778, "commitsDetails": [{"commitHash": "160eb6643a159ffb798fa2c74f254075e35d2fc2", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e1b5f2b124f29c36e9328b705e9da7cfc22b840f"], "nameRev": "160eb6643a159ffb798fa2c74f254075e35d2fc2 tags/2_4_1~6^2~3", "commitMessage": "guard against null when the pact directory to load from does not exist #187\n", "commitDateTime": "2015-11-25 13:24:53", "authoredDateTime": "2015-11-25 13:24:53", "commitGitStats": [{"filePath": "pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit/loader/PactFolderLoader.java", "insertions": 6, "deletions": 5, "lines": 11}, {"filePath": "pact-jvm-provider-junit/src/test/java/au/com/dius/pact/provider/junit/loader/PactFolderLoaderTest.groovy", "insertions": 16, "deletions": 0, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactFolderLoader.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.provider.junit.loader.PactFolderLoader.load(java.lang.String)", "TOT": 9, "UPD": 0, "INS": 2, "MOV": 4, "DEL": 3}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["160eb6643a159ffb798fa2c74f254075e35d2fc2"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 5, "lines": 11, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 9, "UPD": 0, "INS": 2, "MOV": 4, "DEL": 3, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-junit/src/main/java/au/com/dius/pact/provider/junit"], "changesInPackagesSPOON": ["au.com.dius.pact.provider.junit.loader.PactFolderLoader.load(java.lang.String)"]}, {"title": "Error running gradle verification with V3 messege", "body": "Hey, so I'm getting the following when trying to verify my pact consumer using the new gradle mechanism where it checks against a class in the test class path.\n\nVerifying a pact between WorkflowListenertest and WorkflowEnginetest\n  [Using file /home/jojo/workspace/workflowengine-micro/target/pacts/WorkflowListenertest-WorkflowEnginetest.json]\n  Given executing a workflow with rabbitmq\n         WARNING: State Change ignored as there is no stateChange URL\n  execution payload\n      Request Failed - No such property: request for class: au.com.dius.pact.model.v3.messaging.Message\n\nFailures:\n\n0) Verifying a pact between WorkflowListenertest and WorkflowEnginetest - execution payload Given executing a workflow with rabbitmq\n      No such property: request for class: au.com.dius.pact.model.v3.messaging.Message\n\n:pactVerify_WorkflowEnginetest FAILED\n\nI outputted the test classpath and it seems correct (the java file is in classes/test)\n\nTest classpath is:- \nfile: \"/home/jojo/workspace/workflowengine-micro/build/classes/test\"\nfile: \"/home/jojo/workspace/workflowengine-micro/build/resources/test\"\nfile: \"/home/jojo/workspace/workflowengine-micro/build/classes/main\"\nfile: \"/home/jojo/workspace/workflowengine-micro/build/resources/main\"\n\nThe consumer code is \n\n```\n@Rule\npublic MessagePactProviderRule mockProvider = new MessagePactProviderRule(this);\n\n@Pact(provider = PROVIDER, consumer = CONSUMER)\npublic MessagePact createPact(MessagePactBuilder builder) {\n    PactDslJsonBody body = new PactDslJsonBody()\n            .uuid(\"workflowId\")\n            .stringType(\"domain\")\n            .eachLike(\"values\")\n                .stringType(\"key\")\n                .stringType(\"value\")\n                .closeObject()\n            .closeArray()\n            .asBody();\n\n    Map<String, String> metaData = new HashMap<>();\n    metaData.put(\"contentType\", \"application/json\");\n\n    return builder.given(\"executing a workflow with rabbitmq\")\n            .expectsToReceive(\"execution payload\")\n            .withContent(body)\n            .withMetadata(metaData)\n```\n\n//                .given(\"executing a workflow with kafka\")\n//                .expectsToReceive(\"execution payload\")\n//                .withContent(body)\n//                .withMetadata(metaData)\n\n```\n            .toPact();\n}\n\n@Test\n@PactVerification(PROVIDER)\npublic void test() throws Exception {\n    Assert.assertNotNull(new String(currentMessage));\n}\n\npublic void setMessage(byte[] messageContents) {\n    currentMessage = messageContents;\n}\n\nprivate byte[] currentMessage;\n```\n\nAnd the provider code is \n\npublic class WorkflowListenerProviderTest {\n    @PactVerifyProvider(\"execution payload\")\n    public String test() throws JsonProcessingException {\n        ExecutePayload payload = new ExecutePayload();\n        payload.setDomainId(PactConstants.MOCK);\n        payload.setWorkflowId(UUID.randomUUID().toString());\n        payload.setValues(Collections.singletonMap(PactConstants.MOCK, PactConstants.MOCK));\n\n```\n    ModelMapperConfig mapperConfig = new ModelMapperConfig();\n    MapperFacade mapperFacade = mapperConfig.mapper();\n\n    ObjectMapper objectMapper = new JacksonConfig().jacksonObjectMapper();\n\n    return objectMapper.writeValueAsString(mapperFacade.map(payload, com.bettercloud.models.ExecutePayload.class));\n}\n```\n\n}\n\nAnyway, I'm at a loss. Not sure what's going on and unfortunately the error message I'm seeing isn't very clear to me as to what it's asking for.\n", "url": "https://github.com/DiUS/pact-jvm/issues/185", "user": "jojo46", "labels": ["bug"], "created": "2015-11-18 23:19:27", "closed": "2016-05-28 01:40:46", "commits": {"0077069cb1405c42f69d5be27363e1d6c44f9bae": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "cdbc25c727806304381645c5a298d403c4b3b5fe": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 191.00027777777777, "commitsDetails": [{"commitHash": "0077069cb1405c42f69d5be27363e1d6c44f9bae", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a8db8acc0052dadb6a6f33b84d9ac011b84d64f4"], "nameRev": "0077069cb1405c42f69d5be27363e1d6c44f9bae tags/2_4_1~3^2~1", "commitMessage": "correct the matcher keys when using the MessagePactBuilder #185\n", "commitDateTime": "2015-11-28 15:36:53", "authoredDateTime": "2015-11-28 15:36:53", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/MessagePactBuilder.java", "insertions": 113, "deletions": 109, "lines": 222}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/MatcherTestUtils.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/v3/ExampleMessageConsumerWithV2MatchersTest.java", "insertions": 67, "deletions": 0, "lines": 67}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/Message.groovy", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3/messaging/MessagePact.groovy", "insertions": 3, "deletions": 2, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MessagePactBuilder.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MessagePactBuilder.withContent(au.com.dius.pact.consumer.dsl.PactDslJsonBody)", "TOT": 5, "UPD": 1, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "MatcherTestUtils.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.MatcherTestUtils.assertMessageMatcherKeysEqualTo(au.com.dius.pact.model.v3.messaging.MessagePact,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExampleMessageConsumerWithV2MatchersTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.v3.ExampleMessageConsumerWithV2MatchersTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "cdbc25c727806304381645c5a298d403c4b3b5fe", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["0077069cb1405c42f69d5be27363e1d6c44f9bae"], "nameRev": "cdbc25c727806304381645c5a298d403c4b3b5fe tags/2_4_1~3^2", "commitMessage": "default the verification type of the consumer on what is set on the provider #185\n", "commitDateTime": "2015-11-28 16:52:42", "authoredDateTime": "2015-11-28 16:52:42", "commitGitStats": [{"filePath": "gradle/wrapper/gradle-wrapper.properties", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-gradle/build.gradle", "insertions": 10, "deletions": 6, "lines": 16}, {"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/GradleProviderInfo.groovy", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/GradleProviderInfoSpec.groovy", "insertions": 22, "deletions": 0, "lines": 22}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0077069cb1405c42f69d5be27363e1d6c44f9bae", "cdbc25c727806304381645c5a298d403c4b3b5fe"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 130, "deletions": 120, "lines": 250, "gitFilesChange": 6}, "spoonStatsSummary": {"TOT": 5.0, "UPD": 1.0, "INS": 3.0, "MOV": 1.0, "DEL": 0.0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer", "pact-jvm-model/src/main/groovy/au/com/dius/pact/model/v3", "gradle/wrapper/gradle-wrapper.properties", "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle", "pact-jvm-provider-gradle"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.MessagePactBuilder.withContent(au.com.dius.pact.consumer.dsl.PactDslJsonBody)"]}, {"title": "Junit consumer dsl does not allow specifying state for every interaction", "body": "Junit consumer currently does not appear to allow setting the provider state using call to given() for every interaction. \n\nPer this discussion, it seems to be a bug.\n\nhttps://groups.google.com/forum/#!topic/pact-support/-Kk_OxvcJQY\n", "url": "https://github.com/DiUS/pact-jvm/issues/169", "user": "kmaddileti", "labels": ["bug"], "created": "2015-10-09 18:28:40", "closed": "2015-11-02 15:12:17", "commits": {"8050223b48a472d8c929dceadb899a504b4e3eaa": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 23.00027777777778, "commitsDetails": [{"commitHash": "8050223b48a472d8c929dceadb899a504b4e3eaa", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["52b74572e2afb19183cffa4702d80f14e692ce1a"], "nameRev": "8050223b48a472d8c929dceadb899a504b4e3eaa tags/3_1_1~7", "commitMessage": "refactored the Java consumer DSL to allow the provider state to be set per request #169\n", "commitDateTime": "2015-10-12 14:29:03", "authoredDateTime": "2015-10-12 14:29:03", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/ConsumerPactTest.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/MessagePactBuilder.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactProviderRule.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactRule.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/ConsumerPactWithThriftMimeTypeTest.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/PactDslJsonArrayTemplateTest.java", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/PactDslJsonArrayTest.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/PactDslJsonBodyArrayLikeTest.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/PactDslJsonBodyTest.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/PactRuleWithRandomPortTest.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/QueryParameterEncodingTest.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/examples/ExampleJavaConsumerPactRuleTest.java", "insertions": 3, "deletions": 4, "lines": 7}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/examples/ExampleJavaConsumerPactTest.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/examples/ExampleServiceConsumerTest.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/examples/StatusServiceConsumerPactTest.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactMultiProviderTest.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactProviderTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactProviderUsingDefaultsTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactProviderWithMultipleFragmentsTest.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/MissingRequestConsumerPassesTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/PactMismatchConsumerPassesTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/PactVerifiedConsumerFailsTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/PactVerifiedConsumerPassesTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/UnexpectedRequestConsumerPassesTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/v3/ExampleMessageConsumerTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/v3/V3ConsumerPactTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/v3/V3PactProviderTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/ConsumerPactBuilder.java", "insertions": 17, "deletions": 560, "lines": 577}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/{ => dsl}/DslPart.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/{ => dsl}/PactDslJsonArray.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/{ => dsl}/PactDslJsonBody.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithPath.java", "insertions": 236, "deletions": 0, "lines": 236}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslRequestWithoutPath.java", "insertions": 172, "deletions": 0, "lines": 172}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslResponse.java", "insertions": 202, "deletions": 0, "lines": 202}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslWithProvider.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl/PactDslWithState.java", "insertions": 27, "deletions": 0, "lines": 27}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/MatchingTest.java", "insertions": 6, "deletions": 4, "lines": 10}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/MimeTypeTest.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonArrayMatcherTest.groovy", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonBodyMatcherTest.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonBodyTest.java", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}], "filteredCommits": ["8050223b48a472d8c929dceadb899a504b4e3eaa"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 700, "deletions": 569, "lines": 1269, "gitFilesChange": 12}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/dsl", "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/{ => dsl}", "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer", "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer"]}, {"title": "[pact-jvm-provider-maven] Ends Maven Process/LifeCycle Early", "body": "Is there a way in pact-jvm-provider-maven to prevent it from ending the maven lifecycle early on failure? I have pre-integration and post-integration tasks that need to be done regardless of whether the pact verification succeeds or not. Specifically, terminating the server I started.\n", "url": "https://github.com/DiUS/pact-jvm/issues/167", "user": "schwartzalexj", "labels": ["bug"], "created": "2015-09-23 18:15:42", "closed": "2015-11-16 03:05:59", "commits": {"ec2288893e61760628202d0b635853bf6307b82d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 53.000277777777775, "commitsDetails": [{"commitHash": "ec2288893e61760628202d0b635853bf6307b82d", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a393350f3c693d740ec56841c10d6c9793ddb6cb"], "nameRev": "ec2288893e61760628202d0b635853bf6307b82d tags/3_1_0~16", "commitMessage": "maven plugin should throw a MojoFailureException on failure #167\n", "commitDateTime": "2015-09-24 10:36:37", "authoredDateTime": "2015-09-24 10:36:37", "commitGitStats": [{"filePath": "pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven/PactProviderMojo.groovy", "insertions": 4, "deletions": 6, "lines": 10}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ec2288893e61760628202d0b635853bf6307b82d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 6, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-maven/src/main/groovy/au/com/dius/pact/provider/maven"]}, {"title": " Request Failed - head of empty list with version 3.0.4", "body": "Hi,\n\nAfter upgrading from pact-jvm-provider-gradle_2.11 3.01 to 3.04, running pactVerify gives the following error:\n\n Request Failed - head of empty list\n\nIn debug mode, it says:\n\n14:11:16.891 [DEBUG] [au.com.dius.pact.matchers.MinimumMatcher$] comparing List(\n) with minimum 1 at List($, body, Features, 0, SubFeatures)\n14:11:16.911 [QUIET] [system.out]       Request Failed - head of empty list\n14:11:16.924 [QUIET] [system.out]\nFailures:\n", "url": "https://github.com/DiUS/pact-jvm/issues/166", "user": "ChuanChuanLaw", "labels": ["bug"], "created": "2015-09-22 04:25:37", "closed": "2015-10-06 22:12:44", "commits": {"a395d92e85e73bd54ad2a30dd13c777eff58fd3f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 14.000277777777777, "commitsDetails": [{"commitHash": "a395d92e85e73bd54ad2a30dd13c777eff58fd3f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["a8243836412338717b7d6796118de322ed9910b9"], "nameRev": "a395d92e85e73bd54ad2a30dd13c777eff58fd3f tags/3_1_0~22", "commitMessage": "guard against expected lists being empty when using the each-like matchers #166\n", "commitDateTime": "2015-09-23 12:47:02", "authoredDateTime": "2015-09-23 12:47:02", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/JsonBodyMatcher.scala", "insertions": 9, "deletions": 8, "lines": 17}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a395d92e85e73bd54ad2a30dd13c777eff58fd3f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 8, "lines": 17, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/JsonBodyMatcher.scala"]}, {"title": "Unable to have name like \"10k-depreciation-bips\" in JSON mathching body", "body": "In Consumer test, I have the following:\n\nwithBody{\n\n\"10k-depreciation-bips\" integer(-50)\n}\n\nWhen I run pactVerify, I get the following:\n\n16:46:17.558 [DEBUG] [au.com.dius.pact.matchers.JsonBodyMatcher] compareValues:\nMatcher defined for path List($, body, retail-egc)\n16:46:17.566 [WARN] [au.com.dius.pact.matchers.Matchers$] Path expression $.body\n.x-details.kmap.10k-depreciation-bips is invalid, ignoring: [1.23] failure: stri\nng matching regex `[$_\\p{L}][$_\\-\\d\\p{L}]*' expected but`1' found\n\nAnd then, \n\n16:46:17.629 [DEBUG] [au.com.dius.pact.matchers.TypeMatcher$] comparing type of\n9609 to Integer at List($, body, wholesale)\n", "url": "https://github.com/DiUS/pact-jvm/issues/165", "user": "ChuanChuanLaw", "labels": ["bug"], "created": "2015-09-21 23:02:04", "closed": "2015-10-06 22:13:10", "commits": {"f6db65b4cca6d9d2ae4c5235b8dc65931a5b23c0": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 14.000277777777777, "commitsDetails": [{"commitHash": "f6db65b4cca6d9d2ae4c5235b8dc65931a5b23c0", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1e36385b9363c25b14809f9ae96fe5cfed921c4c"], "nameRev": "f6db65b4cca6d9d2ae4c5235b8dc65931a5b23c0 tags/3_1_0~24", "commitMessage": "Guard against field names that are not valid json path in the groovy dsl #165\n", "commitDateTime": "2015-09-22 17:20:05", "authoredDateTime": "2015-09-22 17:20:05", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilder.groovy", "insertions": 18, "deletions": 7, "lines": 25}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilderSpec.groovy", "insertions": 48, "deletions": 0, "lines": 48}, {"filePath": "pact-jvm-consumer/src/test/groovy/au/com/dius/pact/consumer/PactDslJsonBodyTest.java", "insertions": 6, "deletions": 5, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonBodyTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBodyTest.guardAgainstObjectNamesThatDontConformToGatlingFields()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBodyTest.guardAgainstFieldNamesThatDontConformToGatlingFields()", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f6db65b4cca6d9d2ae4c5235b8dc65931a5b23c0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 18, "deletions": 7, "lines": 25, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy"], "changesInPackagesSPOON": []}, {"title": "Typos: where -> were", "body": "The code contains messages like `the following requests where not received`. Here, `were` should be used instead of `where`.\n", "url": "https://github.com/DiUS/pact-jvm/issues/163", "user": "C-Otto", "labels": ["bug"], "created": "2015-09-17 16:27:07", "closed": "2015-10-06 22:13:23", "commits": {"606a6cfa92467eb244f1e52f8e71292f5aefad1a": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 19.00027777777778, "commitsDetails": [{"commitHash": "606a6cfa92467eb244f1e52f8e71292f5aefad1a", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["7c61bce8a3a899c80c22b0d9f6d60561e7599780"], "nameRev": "606a6cfa92467eb244f1e52f8e71292f5aefad1a tags/3_1_0~28", "commitMessage": "fix incorrect grammar in VerificationResult error message #163\n", "commitDateTime": "2015-09-18 12:33:12", "authoredDateTime": "2015-09-18 12:33:12", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactResultTest.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/MissingRequestConsumerPassesTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/UnexpectedRequestConsumerPassesTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/VerificationResult.scala", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MissingRequestConsumerPassesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.MissingRequestConsumerPassesTest.assertException(java.lang.Throwable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "UnexpectedRequestConsumerPassesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.UnexpectedRequestConsumerPassesTest.assertException(java.lang.Throwable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["606a6cfa92467eb244f1e52f8e71292f5aefad1a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/VerificationResult.scala"], "changesInPackagesSPOON": []}, {"title": "ProviderVerifier throws GroovyCastException when v3 pact is used", "body": "I am trying out the v3 messaging verification. The pact json is generated correctly by the consumer side. However, when I tried the pact verification against the provider, I am getting this error:\n\nCaused by: org.codehaus.groovy.runtime.typehandling.GroovyCastException: Cannot cast object 'au.com.dius.pact.model.v3.messaging.MessagePact([au.com.dius.pact.model.v3.messaging.Message(an order confirmation message, provider-state, eyJ0ZXN0IjoidGVzdFZhbHVlIn0=, [:], [:])], Consumer(consumer), Provider(provider), [pact-jvm:[version:3.0.3], pact-specification:[version:3.0.0]])' with class 'au.com.dius.pact.model.v3.messaging.MessagePact' to class 'au.com.dius.pact.model.Pact'\n    at org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.continueCastOnSAM(DefaultTypeTransformation.java:405)\n    at org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.continueCastOnNumber(DefaultTypeTransformation.java:319)\n    at org.codehaus.groovy.runtime.typehandling.DefaultTypeTransformation.castToType(DefaultTypeTransformation.java:232)\n    at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:218)\n    at au.com.dius.pact.provider.ProviderVerifier.loadPactFileForConsumer(ProviderVerifier.groovy:85)\n    at org.codehaus.groovy.vmplugin.v7.IndyInterface.selectMethod(IndyInterface.java:218)\n    at au.com.dius.pact.provider.ProviderVerifier.runVerificationForConsumer(ProviderVerifier.groovy:50)\n\nIt seems to be originating at au.com.dius.pact.provider.ProviderVerifier.loadPactFileForConsumer because this method returns a \"Pact\" but in v3 messaging, the method will actually return a V3Pact (which is not a subclass of \"Pact\").\n", "url": "https://github.com/DiUS/pact-jvm/issues/160", "user": "venksub", "labels": ["bug"], "created": "2015-09-11 16:49:38", "closed": "2015-09-20 23:11:20", "commits": {"8705200db7b7755b4e439d7d897355f0fe3d7362": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 9.000277777777777, "commitsDetails": [{"commitHash": "8705200db7b7755b4e439d7d897355f0fe3d7362", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["496416c8ddf4629a58daee3d18087edf1fdfb5bb"], "nameRev": "8705200db7b7755b4e439d7d897355f0fe3d7362 tags/3_0_4~11", "commitMessage": "Fix for invalid cast when using a V3 pact #160\n", "commitDateTime": "2015-09-14 13:48:01", "authoredDateTime": "2015-09-14 13:48:01", "commitGitStats": [{"filePath": "pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8705200db7b7755b4e439d7d897355f0fe3d7362"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider/src/main/groovy/au/com/dius/pact/provider/ProviderVerifier.groovy"]}, {"title": "Provider test fails when eachLike is used in consumer", "body": "Provider: \n\n```\n@Grab(group='io.ratpack', module='ratpack-groovy', version='0.9.19')\nimport static ratpack.groovy.Groovy.ratpack\n\nratpack {\n    handlers {\n        get {\n            response.headers.set 'Content-Type', 'application/json;charset=UTF-8'\n            response.send \"\"\"[ { \"id\": \"1\", \"name\": \"name-1\" },{ \"id\": \"2\", \"name\": \"name-2\" },{ \"id\": \"3\", \"name\": \"name-3\" },{ \"id\": \"4\", \"name\": \"name-4\" },{ \"id\": \"5\", \"name\": \"name-5\" } ]\"\"\"\n\n        }\n\n    }\n}\n```\n\nConsumer : \"au.com.dius:pact-jvm-consumer-groovy-v3_2.11:3.0.1\"\nProducer Tests: 'au.com.dius:pact-jvm-provider-gradle_2.11:2.2.12'\n\n```\nclass EachLikeTest {\n\n    @Test\n    void \"Verify eachLike when Array is returned\"() {\n        def nameService = new PactBuilder()\n        nameService {\n            serviceConsumer \"NameConsumer\"\n            hasPactWith \"NameService\"\n            port 1234\n\n            uponReceiving('A GET request to retrieve names')\n            withAttributes(method: 'get', path: '/',\n                    headers: ['Content-Type': 'application/json; charset=UTF-8'])\n            willRespondWith(status: 200, headers: ['Content-Type': 'application/json;charset=UTF-8'])\n             withBody eachLike {\n                       id regexp(~/\\w+/)\n                       name regexp(~/\\w+/)\n            }\n        }\n\n        VerificationResult result = nameService.run {\n            def client = new RESTClient('http://localhost:1234/')\n            def nameResponse = client.get(path: '/') {\n                type 'application/json'\n            }\n            assert nameResponse.statusCode == 200\n            assert nameResponse.contentType == 'application/json'\n        }\n    }\n}\n```\n\nProvider Gradle Build File: \n\n```\npact {\n    serviceProviders {\n        NameService {\n            protocol = 'http'\n            host = 'localhost'\n            port = 5050\n            path = '/'\n\n            hasPactWith('NameConsumer') {\n                pactFile = file(\"$projectDir/pacts/NameConsumer-NameService.json\")\n            }\n        }\n    }\n}\n```\n\nError Message\nVerifying a pact between  NameConsumer and NameService\n  [Using file XXXX (edited to private info)]\n  A GET request to retrieve names  \n    returns a response which  \n      has status code 200 (OK)  \n      includes headers  \n        \"Content-Type\" with value \"application/json;charset=UTF-8\" (OK)\n      has a matching body (FAILED)      \n\nFailures:\n\n0) Verifying a pact between NameConsumer and NameService - A GET request to retrieve names returns a response which has a matching body\n      $.body -> Expected List(Map(id -> 1, name -> name-1), Map(id -> 2, name -> name-2), Map(id -> 3, name -> name-3), Map(id -> 4, name -> name-4), Map(id -> 5, name -> name-5)) to\nbe the same type as List(Map(id -> ww, name -> w))\n      $.body.0.name -> Expected 'name-1' to match '\\w+'\n      $.body.1.name -> Expected 'name-2' to match '\\w+'\n      $.body.2.name -> Expected 'name-3' to match '\\w+'\n      $.body.3.name -> Expected 'name-4' to match '\\w+'\n      $.body.4.name -> Expected 'name-5' to match '\\w+'\n\n```\n  Diff:                             \n\n  @2                                \n      {                             \n  -        \"id\": \"ww\",              \n  -        \"name\": \"w\"              \n  +        \"id\": \"1\",               \n  +        \"name\": \"name-1\"         \n  +    },                           \n  +    {                            \n  +        \"id\": \"2\",               \n  +        \"name\": \"name-2\"         \n  +    },                           \n  +    {                            \n  +        \"id\": \"3\",               \n  +        \"name\": \"name-3\"         \n  +    },                           \n  +    {                            \n  +        \"id\": \"4\",               \n  +        \"name\": \"name-4\"         \n  +    },                           \n  +    {                            \n  +        \"id\": \"5\",               \n  +        \"name\": \"name-5\"         \n      }                             \n```\n\n:pactVerify_NameService FAILED          \n", "url": "https://github.com/DiUS/pact-jvm/issues/156", "user": "kmaddileti", "labels": ["bug", "question"], "created": "2015-08-24 20:29:17", "closed": "2015-09-20 23:11:50", "commits": {"496416c8ddf4629a58daee3d18087edf1fdfb5bb": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 27.00027777777778, "commitsDetails": [{"commitHash": "496416c8ddf4629a58daee3d18087edf1fdfb5bb", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["6548661221b4918c7d7a3a076b9f53e18b8e7902"], "nameRev": "496416c8ddf4629a58daee3d18087edf1fdfb5bb tags/3_0_4~12", "commitMessage": "Fix a regression where the type matcher was not handling lists or maps #156\n", "commitDateTime": "2015-09-11 14:56:06", "authoredDateTime": "2015-09-11 14:56:06", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/Matchers.scala", "insertions": 36, "deletions": 27, "lines": 63}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/JsonBodyMatcherTest.scala", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/MatchersTest.scala", "insertions": 35, "deletions": 1, "lines": 36}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/MaximumMatcherTest.scala", "insertions": 42, "deletions": 0, "lines": 42}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/MinimumMatcherTest.scala", "insertions": 42, "deletions": 0, "lines": 42}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["496416c8ddf4629a58daee3d18087edf1fdfb5bb"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 36, "deletions": 27, "lines": 63, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/Matchers.scala"]}, {"title": "XmlBodyMatcher should honour DiffConfig.allowUnexpectedKeys", "body": "Right now, `XmlBodyMatcher` ignores `DiffConfig.allowUnexpectedKeys` and will always match XML bodies for all elements. This should be changed to allow ignoring unexpected keys in the actual output.\n", "url": "https://github.com/DiUS/pact-jvm/issues/153", "user": "skalsi-atlassian", "labels": ["bug"], "created": "2015-08-11 06:53:16", "closed": "2015-08-20 02:52:34", "commits": {"021e636adcb7e490c68d1059e348dce4d7545338": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "8f58982a06ccc7d1960f8b9234678dfd76f996f5": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 8.000277777777777, "commitsDetails": [{"commitHash": "021e636adcb7e490c68d1059e348dce4d7545338", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["83c13966ebeadef88f40a4dbe8f8a81a14aea5f0"], "nameRev": "021e636adcb7e490c68d1059e348dce4d7545338 tags/3_0_2~14", "commitMessage": "when comparing XML nodes, always honour the allowUnexpectedKeys value #153\n", "commitDateTime": "2015-08-19 12:58:57", "authoredDateTime": "2015-08-19 12:58:57", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/XmlBodyMatcher.scala", "insertions": 12, "deletions": 4, "lines": 16}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/XmlBodyMatcherTest.scala", "insertions": 19, "deletions": 1, "lines": 20}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "8f58982a06ccc7d1960f8b9234678dfd76f996f5", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["8b5037c7ad89ad00380c663685cca112f51323bc"], "nameRev": "8f58982a06ccc7d1960f8b9234678dfd76f996f5 tags/3_0_2~10", "commitMessage": "when comparing XML node attributes, always honour the allowUnexpectedKeys value #153\n", "commitDateTime": "2015-08-20 12:52:06", "authoredDateTime": "2015-08-20 12:52:06", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/XmlBodyMatcher.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/XmlBodyMatcherTest.scala", "insertions": 14, "deletions": 0, "lines": 14}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["021e636adcb7e490c68d1059e348dce4d7545338", "8f58982a06ccc7d1960f8b9234678dfd76f996f5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 13, "deletions": 5, "lines": 18, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/XmlBodyMatcher.scala"]}, {"title": "SBT requires json4s version 3.2.10", "body": "Downgrade json4s to 3.2.10 to fix a error in the SBT plugin.\n\n```\nerror: (*:verifyPacts) java.lang.NoClassDefFoundError: scala/tools/scalap/scalax/rules/scalasig/ScalaSigSymbol\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/152", "user": "uglyog", "labels": ["Need Help!", "V2", "bug"], "created": "2015-08-08 03:56:16", "closed": "2015-12-12 03:12:49", "commits": {"9472a992dd61b628414578808f3762258d4129ae": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "b70ccfd350a601ea46079bc047b2ae10305c6433": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "3a1b6d15033af97146c2f3b51f4cbfa152b1f4c0": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "5aae979aebc64bda4f7c444b0360e020f0004f82": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "a7063d6167aa4b84ed65ff7b24e39a6083c1f813": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "71a219834eff90edb7ff6d415b03a0c5439172a1": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "42928f9effb98c175e34185bb5549edca5c3e95d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "093ffbb80aac0c951d71bb350757e0d9944813a5": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "179b95b8766c16983aed24cfea130ce17ba4d17e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "feffb3ab1bc310a4a998483ff5e8db836fff93d3": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "25d79d094c5f116439d9537b50616634b9fa09c7": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "2f0f9d57fc69abdd3f511f37de9357b21688d627": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 125.00027777777778, "commitsDetails": [], "statsSkippedReason": "", "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "spoonStatsSummary": {}}, {"title": "Only one `@Pact` clause can be used", "body": "With the new 3.0 release, only the last method defining a pact using the `@Pact` annotation (for the same producer/consumer pair) is regarded. Swapping the order of the two methods in the file, not changing anything else, causes the other definition to be available, while the definition that worked before now is ignored.\n", "url": "https://github.com/DiUS/pact-jvm/issues/148", "user": "C-Otto", "labels": ["bug"], "created": "2015-08-04 08:03:25", "closed": "2015-09-20 23:12:24", "commits": {"4c51ed9d406603068474eb9908af23987c1b9b8a": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "6548661221b4918c7d7a3a076b9f53e18b8e7902": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 47.000277777777775, "commitsDetails": [{"commitHash": "4c51ed9d406603068474eb9908af23987c1b9b8a", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["bfe70ac0ddc81a57aac282cdbe7f25602b6e7706"], "nameRev": "4c51ed9d406603068474eb9908af23987c1b9b8a tags/3_0_2~2", "commitMessage": "allow the pact rule to default the provider name so they do not have to be repeated #148\n", "commitDateTime": "2015-08-29 13:07:36", "authoredDateTime": "2015-08-29 13:07:36", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/Pact.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactProviderRule.java", "insertions": 11, "deletions": 5, "lines": 16}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactVerification.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactProviderUsingDefaultsTest.java", "insertions": 72, "deletions": 0, "lines": 72}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Pact.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.provider()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactProviderRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactProviderRule.getPacts()", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactProviderRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "PactVerification.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.value()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactProviderUsingDefaultsTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.pactproviderrule.PactProviderUsingDefaultsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "6548661221b4918c7d7a3a076b9f53e18b8e7902", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["93b05c50d6f313973bd133e2baef60db81ef25c8"], "nameRev": "6548661221b4918c7d7a3a076b9f53e18b8e7902 tags/3_0_4~13", "commitMessage": "Allow multiple pact fragment methods in the same test #148\n", "commitDateTime": "2015-09-11 12:24:06", "authoredDateTime": "2015-09-11 12:24:06", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactProviderRule.java", "insertions": 8, "deletions": 3, "lines": 11}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactVerification.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactProviderWithMultipleFragmentsTest.java", "insertions": 82, "deletions": 0, "lines": 82}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactProviderRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactProviderRule.methodMatchesFragment(java.lang.reflect.Method,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactProviderRule.getPacts(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactProviderRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactProviderRule.getPacts()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "PactVerification.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.fragment()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactProviderWithMultipleFragmentsTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.pactproviderrule.PactProviderWithMultipleFragmentsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4c51ed9d406603068474eb9908af23987c1b9b8a", "6548661221b4918c7d7a3a076b9f53e18b8e7902"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 26, "deletions": 11, "lines": 37, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 16, "UPD": 0, "INS": 11, "MOV": 4, "DEL": 1, "spoonFilesChanged": 3, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.PactProviderRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "au.com.dius.pact.consumer.PactProviderRule.getPacts()", "au.com.dius.pact.consumer.PactProviderRule.methodMatchesFragment(java.lang.reflect.Method,java.lang.String)", "au.com.dius.pact.consumer.value()", "au.com.dius.pact.consumer.provider()", "au.com.dius.pact.consumer.PactProviderRule.getPacts(java.lang.String)", "au.com.dius.pact.consumer.fragment()"]}, {"title": "Support for json arrays on root level of body.", "body": "With using the groovy pact consumer there is no way, when using the withBody() dsl & matchers, to declare a json array on the root body. While I've heard of this being a bad idea for API design, it should still be supported.\n\nI've tried looking at JsonBuilder as an example, it can build a root level array in a few different ways, seen [here](http://docs.groovy-lang.org/latest/html/gapi/groovy/json/JsonBuilder.html#call%28java.util.List%29) and [here](http://docs.groovy-lang.org/latest/html/gapi/groovy/json/JsonBuilder.html#call%28java.util.Collection,%20groovy.lang.Closure%29), but they don't feel like the right fit for the PactBodyBuilder, so I've come up with my own pretty basic solution.\n\nIt involves the keyword 'rootJsonArray' in the dsl.\n\n```\nwithBody() {\n  rootJsonArray maxLike(10) {\n    id identifier\n      lineItems minLike(1) {\n        id identifier\n          amount numeric\n          productCodes eachLike { code string('A100') }\n      }\n  }\n}\n```\n\ncommit is here: :boom: stefan-lz/pact-jvm@7bd807fc689b35da0bf833d4a827e15d53938b4a\n\nI was also toying around with the idea of something like another dsl method similar to maxLike/minLike.\n\n```\nwithBody() {\n  orders rootJsonArray maxLike(10) {\n    id identifier\n      lineItems minLike(1) {\n        id identifier\n          amount numeric\n          productCodes eachLike { code string('A100') }\n      }\n  }\n}\n```\n\nbut failed to get anything working quickly.\n", "url": "https://github.com/DiUS/pact-jvm/issues/141", "user": "stefan-lz", "labels": ["bug"], "created": "2015-07-26 12:02:39", "closed": "2015-08-20 02:56:34", "commits": {"0087758de504b8fd21f30798e274f5b3523e20fb": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "4667a3eda8618229be94ef8392131d46acf1392b": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 24.00027777777778, "commitsDetails": [{"commitHash": "0087758de504b8fd21f30798e274f5b3523e20fb", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["375bbf1163b2e643ceafd8bc741b94fee6ae3999"], "nameRev": "0087758de504b8fd21f30798e274f5b3523e20fb tags/2_2_11~11", "commitMessage": "get bodies with arrays at the root working with the groovy DSL #141\n", "commitDateTime": "2015-08-01 18:45:36", "authoredDateTime": "2015-08-01 18:45:36", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilder.groovy", "insertions": 34, "deletions": 19, "lines": 53}, {"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBuilder.groovy", "insertions": 69, "deletions": 0, "lines": 69}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBuilderTest.groovy", "insertions": 54, "deletions": 0, "lines": 54}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "4667a3eda8618229be94ef8392131d46acf1392b", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["0087758de504b8fd21f30798e274f5b3523e20fb"], "nameRev": "4667a3eda8618229be94ef8392131d46acf1392b tags/2_2_11~10", "commitMessage": "get eachLike working with arrays at the root with the groovy DSL #141\n", "commitDateTime": "2015-08-01 19:26:26", "authoredDateTime": "2015-08-01 19:21:20", "commitGitStats": [{"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/Matchers.groovy", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBodyBuilder.groovy", "insertions": 8, "deletions": 22, "lines": 30}, {"filePath": "pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy/PactBuilder.groovy", "insertions": 19, "deletions": 18, "lines": 37}, {"filePath": "pact-jvm-consumer-groovy/src/test/groovy/au/com/dius/pact/consumer/groovy/PactBuilderTest.groovy", "insertions": 24, "deletions": 0, "lines": 24}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0087758de504b8fd21f30798e274f5b3523e20fb", "4667a3eda8618229be94ef8392131d46acf1392b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 151, "deletions": 59, "lines": 210, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-groovy/src/main/groovy/au/com/dius/pact/consumer/groovy"]}, {"title": "PactRule hides stack traces", "body": "The code below catches exceptions and then calls fail(). This hides the stacktrace, which obscures where the test is failing. \nIt would be better to not catch (some) exceptions and/or wrap and rethrow.\nSeems related to #40.\n\n```\n               VerificationResult result = fragment.runConsumer(config, new TestRun() {\n\n                    @Override\n                    public void run(MockProviderConfig config) {\n                        try {\n                            base.evaluate();\n                        } catch (Throwable e) {\n                            fail(\"error thrown: \"+e);\n                        }\n                    }\n                });\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/140", "user": "cer", "labels": ["bug"], "created": "2015-07-22 23:33:43", "closed": "2015-10-06 22:16:41", "commits": {"1f16820eac384c0693d660ba79f2c348a4af6463": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "44bd62665397c2b70c83dc2985d1d16f9639bc12": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "1eac6b34f09b95be2c209ee9781d21f674f435ad": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 75.00027777777778, "commitsDetails": [{"commitHash": "1f16820eac384c0693d660ba79f2c348a4af6463", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["fc6650e03fbf38a739ee19e22b3c2997b9c53fa0"], "nameRev": "1f16820eac384c0693d660ba79f2c348a4af6463 tags/2_2_10~4", "commitMessage": "PactRule must not swallow exceptions #140\n", "commitDateTime": "2015-07-23 19:21:26", "authoredDateTime": "2015-07-23 19:21:26", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactRule.java", "insertions": 2, "deletions": 6, "lines": 8}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/TestRun.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate().1.run(au.com.dius.pact.model.MockProviderConfig)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "TestRun.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.run(au.com.dius.pact.model.MockProviderConfig)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "44bd62665397c2b70c83dc2985d1d16f9639bc12", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["f2c2db4e6f39387a767d4dc465e9d07183154237"], "nameRev": "44bd62665397c2b70c83dc2985d1d16f9639bc12 tags/2_2_11~28", "commitMessage": "In the case where there is a pact mismatch and an exception, display both #140\n", "commitDateTime": "2015-07-30 19:57:54", "authoredDateTime": "2015-07-30 19:57:54", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/ConsumerPactTest.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactMismatchException.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactRule.java", "insertions": 13, "deletions": 7, "lines": 20}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/ConsumerPactRunner.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/VerificationResult.scala", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConsumerPactTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.ConsumerPactTest.testPact()", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactMismatchException.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactMismatchException", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "1eac6b34f09b95be2c209ee9781d21f674f435ad", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["45cced3512fb37bda20e1880f15f0fe0ecfd69d3"], "nameRev": "1eac6b34f09b95be2c209ee9781d21f674f435ad tags/3_0_1~4", "commitMessage": "add additional newlines to make mismatch exceptions more readable #140\n", "commitDateTime": "2015-08-08 12:49:05", "authoredDateTime": "2015-08-08 12:49:05", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/VerificationResult.scala", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1f16820eac384c0693d660ba79f2c348a4af6463", "44bd62665397c2b70c83dc2985d1d16f9639bc12", "1eac6b34f09b95be2c209ee9781d21f674f435ad"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 3, "gitStatsSummary": {"insertions": 21, "deletions": 19, "lines": 40, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 8.0, "UPD": 0.0, "INS": 3.0, "MOV": 3.0, "DEL": 2.0, "spoonFilesChanged": 2, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/VerificationResult.scala", "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer", "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/ConsumerPactRunner.scala"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.PactMismatchException", "au.com.dius.pact.consumer.PactRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "au.com.dius.pact.consumer.PactRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate().1.run(au.com.dius.pact.model.MockProviderConfig)"]}, {"title": "Upgrade specs2 to 3.x?", "body": "I use `specs2 3.4` in my project with `pact-jvm-provider-specs2`, it will report some compilation error.\n\nSample code:\n\n```\nimport org.specs2.execute.Result\nimport org.specs2.specification.{Example, Fragment, Fragments}\nimport au.com.dius.pact.provider.specs2.ProviderSpec\n\nclass MyPactRunnerSpec extends ProviderSpec {\n\n  override def is: Fragments = {\n    //...\n  }\n\n}\n```\n\nCompilation error:\n\n```\noverriding method is in trait SpecificationStructure of type => org.specs2.specification.core.SpecStructure;\n[error]  method is has incompatible type\n[error]   override def is: Fragments = {\n[error]                ^\n[error] one error found\n[error] (test:compileIncremental) Compilation failed\n```\n\nAre we going to upgrade it?\n", "url": "https://github.com/DiUS/pact-jvm/issues/135", "user": "freewind", "labels": ["bug"], "created": "2015-07-04 12:33:53", "closed": "2015-09-20 23:13:19", "commits": {"3d37cd3b00c0e4a9ebb2cd9f23e8da04ac3f6556": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "58bcc3489110b9190e4666047d4d12aea4f02cd5": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 78.00027777777778, "commitsDetails": [{"commitHash": "3d37cd3b00c0e4a9ebb2cd9f23e8da04ac3f6556", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["c2db15ec7ea6a5a50d095d96920c231c33981f9e"], "nameRev": "3d37cd3b00c0e4a9ebb2cd9f23e8da04ac3f6556 tags/3_0_4~2", "commitMessage": "Upgrade specs to version 3.6.4 #135\n", "commitDateTime": "2015-09-17 13:00:17", "authoredDateTime": "2015-09-17 13:00:17", "commitGitStats": [{"filePath": "build.gradle", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-consumer-sbt/build.sbt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-specs2/README.md", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-specs2/build.gradle", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-consumer-specs2/src/main/scala/au/com/dius/pact/consumer/PactSpec.scala", "insertions": 13, "deletions": 18, "lines": 31}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ExamplePactSpec.scala", "insertions": 10, "deletions": 3, "lines": 13}, {"filePath": "pact-jvm-consumer/src/test/scala/au/com/dius/pact/consumer/MockProviderSpec.scala", "insertions": 5, "deletions": 4, "lines": 9}, {"filePath": "pact-jvm-model/build.gradle", "insertions": 6, "deletions": 4, "lines": 10}, {"filePath": "pact-jvm-provider-specs2/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-specs2/src/main/scala/au/com/dius/pact/provider/specs2/ProviderSpec.scala", "insertions": 13, "deletions": 13, "lines": 26}, {"filePath": "pact-jvm-provider-specs2/src/test/scala/au/com/dius/pact/provider/specs2/ExampleProviderSpec.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-specification-test/src/test/scala/specification/RequestSpecificationSpec.scala", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-specification-test/src/test/scala/specification/RequestSpecificationV1Spec.scala", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-specification-test/src/test/scala/specification/RequestSpecificationV1_1Spec.scala", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-specification-test/src/test/scala/specification/RequestSpecificationV2Spec.scala", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-specification-test/src/test/scala/specification/ResponseSpecificationSpec.scala", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-specification-test/src/test/scala/specification/ResponseSpecificationV1Spec.scala", "insertions": 2, "deletions": 4, "lines": 6}, {"filePath": "pact-specification-test/src/test/scala/specification/ResponseSpecificationV1_1Spec.scala", "insertions": 2, "deletions": 4, "lines": 6}, {"filePath": "pact-specification-test/src/test/scala/specification/ResponseSpecificationV2Spec.scala", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-specification-test/src/test/scala/specification/SpecificationSpec.scala", "insertions": 1, "deletions": 4, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "58bcc3489110b9190e4666047d4d12aea4f02cd5", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["3d37cd3b00c0e4a9ebb2cd9f23e8da04ac3f6556"], "nameRev": "58bcc3489110b9190e4666047d4d12aea4f02cd5 tags/3_0_4~1", "commitMessage": "fixed consumer specs2 support updated readmes after upgrade to specs2 3.x #135\n", "commitDateTime": "2015-09-17 16:07:28", "authoredDateTime": "2015-09-17 16:07:28", "commitGitStats": [{"filePath": "README.md", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pact-jvm-consumer-specs2/README.md", "insertions": 19, "deletions": 7, "lines": 26}, {"filePath": "pact-jvm-consumer-specs2/src/main/scala/au/com/dius/pact/consumer/PactSpec.scala", "insertions": 26, "deletions": 22, "lines": 48}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ConsumerService.scala", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ExamplePactSpec.scala", "insertions": 18, "deletions": 9, "lines": 27}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/unfiltered/Conversions.scala", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-provider-specs2/README.md", "insertions": 5, "deletions": 0, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3d37cd3b00c0e4a9ebb2cd9f23e8da04ac3f6556", "58bcc3489110b9190e4666047d4d12aea4f02cd5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 68, "deletions": 63, "lines": 131, "gitFilesChange": 8}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-specs2/src/main/scala/au/com/dius/pact/consumer/PactSpec.scala", "pact-jvm-consumer-specs2", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/unfiltered", "pact-jvm-provider-specs2", "pact-jvm-consumer-sbt/build.sbt", "", "pact-jvm-model", "pact-jvm-provider-specs2/src/main/scala/au/com/dius/pact/provider/specs2"]}, {"title": "Incorrect JSONPath is generated for numeric fields", "body": "I'm using pact-jvm-consumer-junit 2.2.2. When matching JSON body that contains fields starting with digits responseMatchingRules being generated incorrectly.\n\nExample:\n\n``` javascript\n\"body\" : {\n        \"2\" : {\n          \"str\" : \"jildrdmxddnVzcQZfjCA\"\n        }\n},\n\"responseMatchingRules\" : {\n        \"$.body.2.str\" : {\n          \"match\" : \"type\"\n        }\n}\n```\n\nhere is `$.body.2.str` is incorrect, because it's incorrect JS, thus on provider pact fails with meessage:\n\n> Path expression $.body.2.str is invalid, ignoring: [1.8] failure: string matching regex `[$_\\p{L}][$_\\-\\d\\p{L}]*' expected but`2' found\n\nTo make it work i have to change match rule manually to `$.body['2'].str`\n", "url": "https://github.com/DiUS/pact-jvm/issues/127", "user": "IschenkoArtem", "labels": ["bug"], "created": "2015-06-15 10:12:06", "closed": "2015-06-17 11:17:29", "commits": {"e3de4c4c9defad202b0cfa8d082195d8a4d45dff": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "938f008d69c2f1e15cca0f52e4f8d0147afef992": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "40f461ac46e4975d63270c72804003681c8769f2": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "4200ccfe1518ce972bcbbb9fda59475ff28a4527": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "e3de4c4c9defad202b0cfa8d082195d8a4d45dff", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["0d0370dca428c7a735432e3b9ecf8aad4c2e9da2"], "nameRev": "e3de4c4c9defad202b0cfa8d082195d8a4d45dff tags/2_2_4~7", "commitMessage": "use jsonpath bracket\u2013notation when a field does not conform to the gatling regex #127\n", "commitDateTime": "2015-06-17 13:15:01", "authoredDateTime": "2015-06-17 13:15:01", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/PactDslJsonBodyTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/PactDslJsonBody.java", "insertions": 6, "deletions": 1, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonBodyTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBodyTest.createFragment(au.com.dius.pact.consumer.ConsumerPactBuilder$PactDslWithProvider)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.object(java.lang.String)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "938f008d69c2f1e15cca0f52e4f8d0147afef992", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["e3de4c4c9defad202b0cfa8d082195d8a4d45dff"], "nameRev": "938f008d69c2f1e15cca0f52e4f8d0147afef992 tags/2_2_4~6", "commitMessage": "use the field name for the jsonpath bracket\u2013notation #127\n", "commitDateTime": "2015-06-17 13:39:57", "authoredDateTime": "2015-06-17 13:39:57", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/PactDslJsonBody.java", "insertions": 28, "deletions": 24, "lines": 52}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.array(java.lang.String)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.arrayLike(java.lang.String)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.minArrayLike(java.lang.String,java.lang.Integer)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.maxArrayLike(java.lang.String,java.lang.Integer)", "TOT": 4, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.object(java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.stringType(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.numberType(java.lang.String,java.lang.Number)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.integerType(java.lang.String,java.lang.Long)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.integerType(java.lang.String,java.lang.Integer)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.realType(java.lang.String,java.lang.Double)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.booleanType(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.stringMatcher(java.lang.String,java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.timestamp(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.timestamp(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.date(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.date(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.time(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.time(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.ipAddress(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.id(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.hexValue(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.guid(java.lang.String,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.matcherKey(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "40f461ac46e4975d63270c72804003681c8769f2", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["196cc274082942715cf225b0dc13c60ef2a21b8f"], "nameRev": "40f461ac46e4975d63270c72804003681c8769f2 tags/2_2_4~4", "commitMessage": "when using jsonpath bracket\u2013notation, we still need to build the object with the original name #127\n", "commitDateTime": "2015-06-17 14:54:32", "authoredDateTime": "2015-06-17 14:54:32", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/PactDslJsonBody.java", "insertions": 10, "deletions": 2, "lines": 12}, {"filePath": "pact-jvm-consumer/src/test/java/au/com/dius/pact/consumer/PactDslJsonBodyTest.java", "insertions": 56, "deletions": 0, "lines": 56}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.putObject(au.com.dius.pact.consumer.DslPart)", "TOT": 5, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonBodyTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBodyTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "4200ccfe1518ce972bcbbb9fda59475ff28a4527", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["27639eb0e9c485a38fa1c3b7c690a3ebcad9d3e5"], "nameRev": "4200ccfe1518ce972bcbbb9fda59475ff28a4527 tags/2_2_4~2", "commitMessage": "use jsonpath bracket notation for normal fields as well #127\n", "commitDateTime": "2015-06-17 15:14:03", "authoredDateTime": "2015-06-17 15:14:03", "commitGitStats": [{"filePath": "pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer/PactDslJsonBody.java", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "pact-jvm-consumer/src/test/java/au/com/dius/pact/consumer/PactDslJsonBodyTest.java", "insertions": 16, "deletions": 1, "lines": 17}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactDslJsonBody.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBody.matcherKey(java.lang.String)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "PactDslJsonBodyTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBodyTest.guardAgainstInvalidObjectNames()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactDslJsonBodyTest.guardAgainstFieldNamesThatDontConformToGatlingFields()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e3de4c4c9defad202b0cfa8d082195d8a4d45dff", "938f008d69c2f1e15cca0f52e4f8d0147afef992", "40f461ac46e4975d63270c72804003681c8769f2", "4200ccfe1518ce972bcbbb9fda59475ff28a4527"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 4, "gitStatsSummary": {"insertions": 49, "deletions": 28, "lines": 77, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 60, "UPD": 7, "INS": 29, "MOV": 5, "DEL": 19, "spoonFilesChanged": 1, "spoonMethodsChanged": 24}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/java/au/com/dius/pact/consumer"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.PactDslJsonBody.matcherKey(java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.object(java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.id(java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.realType(java.lang.String,java.lang.Double)", "au.com.dius.pact.consumer.PactDslJsonBody.array(java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.stringType(java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.stringMatcher(java.lang.String,java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.booleanType(java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.integerType(java.lang.String,java.lang.Integer)", "au.com.dius.pact.consumer.PactDslJsonBody.ipAddress(java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.timestamp(java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.minArrayLike(java.lang.String,java.lang.Integer)", "au.com.dius.pact.consumer.PactDslJsonBody.time(java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.date(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.hexValue(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.time(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.maxArrayLike(java.lang.String,java.lang.Integer)", "au.com.dius.pact.consumer.PactDslJsonBody.timestamp(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.putObject(au.com.dius.pact.consumer.DslPart)", "au.com.dius.pact.consumer.PactDslJsonBody.numberType(java.lang.String,java.lang.Number)", "au.com.dius.pact.consumer.PactDslJsonBody.integerType(java.lang.String,java.lang.Long)", "au.com.dius.pact.consumer.PactDslJsonBody.guid(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.date(java.lang.String)", "au.com.dius.pact.consumer.PactDslJsonBody.arrayLike(java.lang.String)"]}, {"title": "Memory leak in mock provider", "body": "Looks like the mock provider's netty server is leaking memory and/or threads. Symptons include travis build being unable to create new threads.\n\nau.com.dius.pact.consumer.examples.ExampleJavaConsumerPactRuleTest > runTest FAILED\n    java.lang.OutOfMemoryError: unable to create new native thread\nau.com.dius.pact.consumer.examples.ExampleJavaConsumerPactTest > testPact STANDARD_OUT\n    23:37:05.518 [Test worker] WARN  io.netty.channel.AbstractChannel - Force-closing a channel whose registration task was not accepted by an event loop: [id: 0xd0446f8c]\n    java.lang.OutOfMemoryError: unable to create new native thread\n        at java.lang.Thread.start0(Native Method) [na:1.7.0_76]\n        at java.lang.Thread.start(Thread.java:714) [na:1.7.0_76]\n        at io.netty.util.concurrent.SingleThreadEventExecutor.startThread(SingleThreadEventExecutor.java:853) ~[netty-common-4.0.23.Final.jar:4.0.23.Final]\n        at io.netty.util.concurrent.SingleThreadEventExecutor.execute(SingleThreadEventExecutor.java:727) ~[netty-common-4.0.23.Final.jar:4.0.23.Final]\n        at io.netty.channel.AbstractChannel$AbstractUnsafe.register(AbstractChannel.java:415) ~[netty-transport-4.0.23.Final.jar:4.0.23.Final]\n        at io.netty.channel.SingleThreadEventLoop.register(SingleThreadEventLoop.java:60) [netty-transport-4.0.23.Final.jar:4.0.23.Final]\n        at io.netty.channel.SingleThreadEventLoop.register(SingleThreadEventLoop.java:48) [netty-transport-4.0.23.Final.jar:4.0.23.Final]\n        at io.netty.channel.MultithreadEventLoopGroup.register(MultithreadEventLoopGroup.java:64) [netty-transport-4.0.23.Final.jar:4.0.23.Final]\n        at io.netty.bootstrap.AbstractBootstrap.initAndRegister(AbstractBootstrap.java:307) [netty-transport-4.0.23.Final.jar:4.0.23.Final]\n        at io.netty.bootstrap.AbstractBootstrap.doBind(AbstractBootstrap.java:273) [netty-transport-4.0.23.Final.jar:4.0.23.Final]\n        at io.netty.bootstrap.AbstractBootstrap.bind(AbstractBootstrap.java:269) [netty-transport-4.0.23.Final.jar:4.0.23.Final]\n        at io.netty.bootstrap.AbstractBootstrap.bind(AbstractBootstrap.java:251) [netty-transport-4.0.23.Final.jar:4.0.23.Final]\n        at unfiltered.netty.Server$$anonfun$2.apply(Server.scala:71) [unfiltered-netty-server_2.11-0.8.2.jar:0.8.2]\n        at unfiltered.netty.Server$$anonfun$2.apply(Server.scala:65) [unfiltered-netty-server_2.11-0.8.2.jar:0.8.2]\n        at scala.collection.immutable.List.map(List.scala:273) [scala-library-2.11.6.jar:na]\n        at unfiltered.netty.Server.start(Server.scala:65) [unfiltered-netty-server_2.11-0.8.2.jar:0.8.2]\n        at unfiltered.netty.Server.start(Server.scala:60) [unfiltered-netty-server_2.11-0.8.2.jar:0.8.2]\n        at au.com.dius.pact.consumer.UnfilteredMockProvider.start(UnfilteredMockProvider.scala:33) [pact-jvm-consumer_2.11-2.2.3.jar:na]\n        at au.com.dius.pact.consumer.StatefulMockProvider.start(MockProvider.scala:37) [pact-jvm-consumer_2.11-2.2.3.jar:na]\n        at au.com.dius.pact.consumer.StatefulMockProvider$$anonfun$runAndClose$1.apply(MockProvider.scala:44) [pact-jvm-consumer_2.11-2.2.3.jar:na]\n        at au.com.dius.pact.consumer.StatefulMockProvider$$anonfun$runAndClose$1.apply(MockProvider.scala:43) [pact-jvm-consumer_2.11-2.2.3.jar:na]\n        at scala.util.Try$.apply(Try.scala:191) [scala-library-2.11.6.jar:na]\n        at au.com.dius.pact.consumer.StatefulMockProvider.runAndClose(MockProvider.scala:42) [pact-jvm-consumer_2.11-2.2.3.jar:na]\n        at au.com.dius.pact.consumer.ConsumerPactRunner.runAndWritePact(ConsumerPactRunner.scala:28) [pact-jvm-consumer_2.11-2.2.3.jar:na]\n        at au.com.dius.pact.model.PactFragment.duringConsumerSpec(PactFragment.scala:13) [pact-jvm-consumer_2.11-2.2.3.jar:2.2.3]\n        at au.com.dius.pact.model.PactFragment.runConsumer(PactFragment.scala:21) [pact-jvm-consumer_2.11-2.2.3.jar:2.2.3]\n        at au.com.dius.pact.consumer.ConsumerPactTest.testPact(ConsumerPactTest.java:24) [main/:na]\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.7.0_76]\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) ~[na:1.7.0_76]\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.7.0_76]\n        at java.lang.reflect.Method.invoke(Method.java:606) ~[na:1.7.0_76]\n        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47) [junit-4.11.jar:na]\n", "url": "https://github.com/DiUS/pact-jvm/issues/126", "user": "uglyog", "labels": ["bug"], "created": "2015-06-13 23:48:00", "closed": "2017-05-18 05:43:51", "commits": {}, "ttf": 704.0002777777778, "commitsDetails": []}, {"title": "Using multiple mock providers", "body": "I have a unit test that interacts with two different providers.\nI would like to know if it is possible to generate two different pact files, one for each provider in the same test.\nI tried defining two Pact functions, one for each provider, annotated with @ Pact and with the same state as the @ PactVerification test function but it didn't work.\n\nI'm using the PactRule junit rule\n\nBy inspecting its code it looks as it scans for all the Pact functions and stores them in a Map with the state as a key, so different pact fragments will be overwritten if they have the same state.\n\nIs there any way of acheiving what I need? Maybe without the Rule approach?\n", "url": "https://github.com/DiUS/pact-jvm/issues/117", "user": "sbruno", "labels": ["bug"], "created": "2015-04-30 20:59:28", "closed": "2015-08-22 04:04:59", "commits": {"d35c1e5a56fb45cd448840a420c0edaf60b057d7": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "99864cc605362da36306075dd8ba2c0ccb720d20": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "4b75517f6a5264f6c6444ab59093f74b91aa6372": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "dc1e0eb11990c09b37ad2093b7114766fba0f40b": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "a616db1c669d3466f9c59e6fa042f689f0d6e41f": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 113.00027777777778, "commitsDetails": [{"commitHash": "d35c1e5a56fb45cd448840a420c0edaf60b057d7", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["ad57d86db74ad4e6efb86af22520d97aa41465e4"], "nameRev": "d35c1e5a56fb45cd448840a420c0edaf60b057d7 tags/2_2_11~8", "commitMessage": "refactor the pact junit rule to be keyed on provider name instead of state #144 #143 #117\n", "commitDateTime": "2015-08-02 12:40:50", "authoredDateTime": "2015-08-02 12:40:50", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/ConsumerPactTest.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/Pact.java", "insertions": 7, "deletions": 5, "lines": 12}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactMismatchException.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactProviderRule.java", "insertions": 150, "deletions": 0, "lines": 150}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactRule.java", "insertions": 9, "deletions": 1, "lines": 10}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactVerification.java", "insertions": 6, "deletions": 2, "lines": 8}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/ConsumerPactWithThriftMimeTypeTest.java", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/PactRuleWithRandomPortTest.java", "insertions": 6, "deletions": 7, "lines": 13}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/examples/ExampleJavaConsumerPactRuleTest.java", "insertions": 10, "deletions": 10, "lines": 20}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/examples/ExampleServiceConsumerTest.java", "insertions": 6, "deletions": 5, "lines": 11}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactProviderTest.java", "insertions": 77, "deletions": 0, "lines": 77}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/ExpectedToFailBase.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/MissingRequestConsumerPassesTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/PactMismatchConsumerPassesTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/PactVerifiedConsumerFailsTest.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/UnexpectedRequestConsumerPassesTest.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConsumerPactTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.ConsumerPactTest.testPact()", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "Pact.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.state()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "PactMismatchException.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactMismatchException", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactProviderRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactProviderRule", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactRule.getPacts()", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactRule", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactVerification.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.expectMismatch()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ConsumerPactWithThriftMimeTypeTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.ConsumerPactWithThriftMimeTypeTest", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.ConsumerPactWithThriftMimeTypeTest.createFragment(au.com.dius.pact.consumer.ConsumerPactBuilder.PactDslWithProvider.PactDslWithState)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.ConsumerPactWithThriftMimeTypeTest.runTest()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.ConsumerPactWithThriftMimeTypeTest.createFragment(au.com.dius.pact.consumer.ConsumerPactBuilder$PactDslWithProvider)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactRuleWithRandomPortTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactRuleWithRandomPortTest", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactRuleWithRandomPortTest.createFragment(au.com.dius.pact.consumer.ConsumerPactBuilder.PactDslWithProvider.PactDslWithState)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.PactRuleWithRandomPortTest.runTest()", "TOT": 4, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactRuleWithRandomPortTest.createFragment(au.com.dius.pact.consumer.ConsumerPactBuilder$PactDslWithProvider)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExampleJavaConsumerPactRuleTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.examples.ExampleJavaConsumerPactRuleTest", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.examples.ExampleJavaConsumerPactRuleTest.createFragment(au.com.dius.pact.consumer.ConsumerPactBuilder.PactDslWithProvider.PactDslWithState)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.examples.ExampleJavaConsumerPactRuleTest.runTest()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.examples.ExampleJavaConsumerPactRuleTest.createFragment(au.com.dius.pact.consumer.ConsumerPactBuilder$PactDslWithProvider)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExampleServiceConsumerTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.examples.ExampleServiceConsumerTest", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.examples.ExampleServiceConsumerTest.configurationFragment(au.com.dius.pact.consumer.ConsumerPactBuilder$PactDslWithProvider$PactDslWithState)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.examples.ExampleServiceConsumerTest.testBookCar()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.examples.ExampleServiceConsumerTest.configurationFragment(au.com.dius.pact.consumer.ConsumerPactBuilder$PactDslWithProvider)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactProviderTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.pactproviderrule.PactProviderTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExpectedToFailBase.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.ExpectedToFailBase.assertException(java.lang.RuntimeException)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.resultstests.ExpectedToFailBase.testPact()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "MissingRequestConsumerPassesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.MissingRequestConsumerPassesTest.assertException(java.lang.RuntimeException)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactMismatchConsumerPassesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.PactMismatchConsumerPassesTest.assertException(java.lang.RuntimeException)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactVerifiedConsumerFailsTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.PactVerifiedConsumerFailsTest.assertException(java.lang.RuntimeException)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.resultstests.PactVerifiedConsumerFailsTest", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "UnexpectedRequestConsumerPassesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.UnexpectedRequestConsumerPassesTest.assertException(java.lang.RuntimeException)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "99864cc605362da36306075dd8ba2c0ccb720d20", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d35c1e5a56fb45cd448840a420c0edaf60b057d7"], "nameRev": "99864cc605362da36306075dd8ba2c0ccb720d20 tags/2_2_11~7", "commitMessage": "update the readme with examples for the new pact rule #144 #143 #117\n", "commitDateTime": "2015-08-02 12:51:25", "authoredDateTime": "2015-08-02 12:51:25", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/README.md", "insertions": 8, "deletions": 7, "lines": 15}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "4b75517f6a5264f6c6444ab59093f74b91aa6372", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["99864cc605362da36306075dd8ba2c0ccb720d20"], "nameRev": "4b75517f6a5264f6c6444ab59093f74b91aa6372 tags/2_2_11~6", "commitMessage": "AssertionError does not take a cause in JDK6 #144 #143 #117\n", "commitDateTime": "2015-08-02 12:58:23", "authoredDateTime": "2015-08-02 12:58:23", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactMismatchException.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactMismatchException.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactMismatchException", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "dc1e0eb11990c09b37ad2093b7114766fba0f40b", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["680d196fae8ae8cb6b696d6025ce7f81e9cee9b3"], "nameRev": "dc1e0eb11990c09b37ad2093b7114766fba0f40b tags/2_2_12~6", "commitMessage": "AssertionError does not take a cause in JDK6 #144 #143 #117\n", "commitDateTime": "2015-08-08 12:40:33", "authoredDateTime": "2015-08-02 12:58:23", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactMismatchException.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactMismatchException.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactMismatchException", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "a616db1c669d3466f9c59e6fa042f689f0d6e41f", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["8f58982a06ccc7d1960f8b9234678dfd76f996f5"], "nameRev": "a616db1c669d3466f9c59e6fa042f689f0d6e41f tags/3_0_2~9", "commitMessage": "allow multiple providers in a junit test #117\n", "commitDateTime": "2015-08-22 14:00:43", "authoredDateTime": "2015-08-22 13:53:46", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/README.md", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactProviderRule.java", "insertions": 9, "deletions": 5, "lines": 14}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactVerification.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/ConsumerClient.java", "insertions": 10, "deletions": 2, "lines": 12}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/pactproviderrule/PactMultiProviderTest.java", "insertions": 147, "deletions": 0, "lines": 147}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/MockProvider.scala", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PactProviderRule.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactProviderRule.conformsToSigniture(java.lang.reflect.Method)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactProviderRule.getPacts()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.PactProviderRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "TOT": 10, "UPD": 1, "INS": 4, "MOV": 3, "DEL": 2}]}, {"spoonFilePath": "PactVerification.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.value()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ConsumerClient.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.ConsumerClient.putAsMap(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactMultiProviderTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.pactproviderrule.PactMultiProviderTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a616db1c669d3466f9c59e6fa042f689f0d6e41f"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 3, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 7, "lines": 18, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 14.0, "UPD": 4.0, "INS": 5.0, "MOV": 3.0, "DEL": 2.0, "spoonFilesChanged": 3, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer", "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/MockProvider.scala"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.PactProviderRule.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "au.com.dius.pact.consumer.ConsumerClient.putAsMap(java.lang.String,java.lang.String)", "au.com.dius.pact.consumer.PactProviderRule.getPacts()", "au.com.dius.pact.consumer.value()", "au.com.dius.pact.consumer.PactProviderRule.conformsToSigniture(java.lang.reflect.Method)"]}, {"title": "stateChangeUrl set to Pact file url when specifiying Pact file as a url in groovy plugin", "body": "```\npact {\n    serviceProviders {\n        ProviderA { providerInfo ->\n            startProviderTask = \"jettyEclipseRun\"\n            terminateProviderTask = \"jettyEclipseStop\"\n\n            port = 8080\n\n            hasPactWith('ConsumerA') {\n                pactFile = url('http://localhost:8000/pacts/provider/prividera/consumer/consumera/latest')\n            }\n        }\n    }\n}\n```\n\nSetting the pact file to a url, as above, sets both the state change url and the pact file location. \nI am not super well versed in groovy and gradle plugins, however, I will take a shot at a fix in the next couple days.\n", "url": "https://github.com/DiUS/pact-jvm/issues/101", "user": "gthicks", "labels": ["bug"], "created": "2015-03-18 16:36:36", "closed": "2015-03-31 17:48:25", "commits": {"55eb028e238d926dd21137b255aeb8f1d3c4812e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 13.000277777777777, "commitsDetails": [{"commitHash": "55eb028e238d926dd21137b255aeb8f1d3c4812e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["3065910a71fed6e186c52d24759014d490e8324e"], "nameRev": "55eb028e238d926dd21137b255aeb8f1d3c4812e tags/2_1_13~1", "commitMessage": "fix defect where stateChangeUrl is automatically set by overridden url function #101\n", "commitDateTime": "2015-03-29 13:44:16", "authoredDateTime": "2015-03-29 13:44:16", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/ConsumerInfo.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/PactPluginTest.groovy", "insertions": 53, "deletions": 0, "lines": 53}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["55eb028e238d926dd21137b255aeb8f1d3c4812e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle"]}, {"title": "query string encoding when verifying contracts with pact-jvm ", "body": "[Link to a corresponding google thread](https://groups.google.com/forum/#!topic/pact-support/d0nXzVi1Nf0)\n\nHi guys,\n\nWe are using a ruby-based pact-mock-service on the consumer side to generate a pact file and verifying the contract by using pact-jvm (more specifically the gradle plugin). One of our resources accepts a bunch of query parameters, and the generated contract looks like this:\n\n```\n\"request\": {\n  \"method\": \"get\",\n  \"path\": \"/autoComplete/address\",\n  \"query\": \"max_results=100&state=NSW&term=80+CLARENCE+ST,+SYDNEY+NSW+2000\",\n}\n```\n\nAs you can see the query is encoded on the ruby side, however, apparently the java side expects a decoded value there and we receive \"80+CLARENCE+...\" in our controller. \n\nThanks,\nEvgeny\n", "url": "https://github.com/DiUS/pact-jvm/issues/97", "user": "nagliyvred", "labels": ["V3", "bug"], "created": "2015-03-06 05:46:37", "closed": "2015-10-06 22:15:15", "commits": {}, "ttf": 214.00027777777777, "commitsDetails": []}, {"title": "Matching against empty body", "body": "I have Play application exposing an API, my controller looks like that\n\n```\nclass ApiController @Inject()(someClass: SomeClass) extends Controller {\n  def addStuff = CorsAction.async(CustomBodyParsers.somePayloadFromJson) { request \u21d2\n    async {\n      await(someClass.someMethod(someParams))\n      Ok\n    }\n  }\n}\n```\n\nCorsAction is doing quite nothing except adding headers to allow cross-domain calls, removing it does not make any difference:\n\n```\nobject CorsAction extends ActionBuilder[Request] {\n  val corsHeaders = Seq(\n    \"Access-Control-Allow-Origin\" -> \"*\",\n    \"Access-Control-Allow-Methods\" -> \"POST, GET, PUT, DELETE, OPTIONS\",\n    \"Access-Control-Allow-Headers\" -> \"Origin, X-Requested-With, Content-Type, Accept, Referer, User-Agent\",\n    \"Access-Control-Max-Age\" -> \"1728000\"\n  )\n  def invokeBlock[A](request: Request[A], block: (Request[A]) => Future[Result]) =  Async.async {\n    await(block(request)).withHeaders(corsHeaders: _*)\n  }\n}\n```\n\nThis is how I'm matching response in pact file:\n\n```\n{\n  \"description\": \"A POST request to add stuff\",\n  \"request\": {\n    \"method\": \"post\",\n    \"path\": \"/add\",\n    \"headers\": {\n      \"Content-Type\": \"application/json\"\n    },\n    \"body\": {\n      \"someName\": \"someValue\"\n    }\n  },\n  \"response\": {\n    \"status\": 200\n  }\n}\n```\n\nAnd pact fails with the following output:\n\n```\nBodyMismatch(None,Some(),None,/) (Transformer.scala:20)\n```\n\nSo, I guess None and empty body are not 100% correctly matched here: https://github.com/DiUS/pact-jvm/blob/master/pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/Matching.scala#L101-L106\n\nCan you, please, check it?\n", "url": "https://github.com/DiUS/pact-jvm/issues/85", "user": "algra", "labels": ["bug"], "created": "2015-01-27 12:47:30", "closed": "2015-02-20 22:48:15", "commits": {"b86095c2391601c34aa48a20f05324e32478f21e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "650a824cece643b1129c42a8062422e2c81ecd97": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "559a612a9e098bbaf02914eea0ce06c912d228de": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "4a4aababa096f78740576da4479816c299b5353d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "973ef27b405f79d7f207aa4ef94e4ae7fbf6aacf": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 24.00027777777778, "commitsDetails": [{"commitHash": "b86095c2391601c34aa48a20f05324e32478f21e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["7c62c7f6d42ff5bde85d99324b5c4497bd811a2d"], "nameRev": "b86095c2391601c34aa48a20f05324e32478f21e tags/2_1_10~6", "commitMessage": "when serialising a pact to JSON, always include a body attribute #85\n", "commitDateTime": "2015-01-28 12:42:20", "authoredDateTime": "2015-01-28 12:42:14", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/Fixtures.scala", "insertions": 14, "deletions": 2, "lines": 16}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/PactSerializerSpec.scala", "insertions": 18, "deletions": 0, "lines": 18}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "650a824cece643b1129c42a8062422e2c81ecd97", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["b86095c2391601c34aa48a20f05324e32478f21e"], "nameRev": "650a824cece643b1129c42a8062422e2c81ecd97 tags/2_1_10~5", "commitMessage": "when de-serialising a pact from JSON, set the body to None for empty, null and missing values #85\n", "commitDateTime": "2015-01-28 13:35:49", "authoredDateTime": "2015-01-28 13:35:49", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "pact-jvm-model/src/test/resources/test_pact_empty_bodies.json", "insertions": 36, "deletions": 0, "lines": 36}, {"filePath": "pact-jvm-model/src/test/resources/test_pact_missing_bodies.json", "insertions": 34, "deletions": 0, "lines": 34}, {"filePath": "pact-jvm-model/src/test/resources/test_pact_null_bodies.json", "insertions": 36, "deletions": 0, "lines": 36}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/PactSerializerSpec.scala", "insertions": 15, "deletions": 0, "lines": 15}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "559a612a9e098bbaf02914eea0ce06c912d228de", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["b44efd85d892671a5e4388ff8eee6a07dbf4736a"], "nameRev": "559a612a9e098bbaf02914eea0ce06c912d228de tags/2_1_10~3", "commitMessage": "Revert \"when de-serialising a pact from JSON, set the body to None for empty, null and missing values #85\"\n\nThis reverts commit 650a824cece643b1129c42a8062422e2c81ecd97.\n", "commitDateTime": "2015-01-29 13:39:35", "authoredDateTime": "2015-01-29 13:39:35", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "insertions": 1, "deletions": 5, "lines": 6}, {"filePath": "pact-jvm-model/src/test/resources/test_pact_empty_bodies.json", "insertions": 0, "deletions": 36, "lines": 36}, {"filePath": "pact-jvm-model/src/test/resources/test_pact_missing_bodies.json", "insertions": 0, "deletions": 34, "lines": 34}, {"filePath": "pact-jvm-model/src/test/resources/test_pact_null_bodies.json", "insertions": 0, "deletions": 36, "lines": 36}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/PactSerializerSpec.scala", "insertions": 0, "deletions": 15, "lines": 15}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "4a4aababa096f78740576da4479816c299b5353d", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["559a612a9e098bbaf02914eea0ce06c912d228de"], "nameRev": "4a4aababa096f78740576da4479816c299b5353d tags/2_1_10~2", "commitMessage": "Revert \"when serialising a pact to JSON, always include a body attribute #85\"\n\nThis reverts commit b86095c2391601c34aa48a20f05324e32478f21e.\n", "commitDateTime": "2015-01-29 13:39:53", "authoredDateTime": "2015-01-29 13:39:53", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/Fixtures.scala", "insertions": 2, "deletions": 14, "lines": 16}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/PactSerializerSpec.scala", "insertions": 0, "deletions": 18, "lines": 18}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "973ef27b405f79d7f207aa4ef94e4ae7fbf6aacf", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["4a4aababa096f78740576da4479816c299b5353d"], "nameRev": "973ef27b405f79d7f207aa4ef94e4ae7fbf6aacf tags/2_1_10~1", "commitMessage": "do not compare the actual body if the body is left out of the pact file #85\n", "commitDateTime": "2015-01-29 19:29:15", "authoredDateTime": "2015-01-29 19:29:15", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/JsonBodyMatcher.scala", "insertions": 1, "deletions": 5, "lines": 6}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/XmlBodyMatcher.scala", "insertions": 1, "deletions": 5, "lines": 6}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/Matching.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/JsonBodyMatcherTest.scala", "insertions": 0, "deletions": 5, "lines": 5}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/XmlBodyMatcherTest.scala", "insertions": 0, "deletions": 5, "lines": 5}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/model/MatchingSpec.scala", "insertions": 1, "deletions": 3, "lines": 4}, {"filePath": "pact-specification-test/src/main/resources/request/body/no body.json", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "pact-specification-test/src/main/resources/response/body/missing body.json", "insertions": 17, "deletions": 0, "lines": 17}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b86095c2391601c34aa48a20f05324e32478f21e", "650a824cece643b1129c42a8062422e2c81ecd97", "559a612a9e098bbaf02914eea0ce06c912d228de", "4a4aababa096f78740576da4479816c299b5353d", "973ef27b405f79d7f207aa4ef94e4ae7fbf6aacf"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 5, "gitStatsSummary": {"insertions": 52, "deletions": 22, "lines": 74, "gitFilesChange": 7}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/JsonBodyMatcher.scala", "pact-specification-test/src/main/resources/response/body/missing body.json", "pact-specification-test/src/main/resources/request/body/no body.json", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/XmlBodyMatcher.scala", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/Matching.scala"]}, {"title": "`UnsupportedOperationException: empty.reduceLeft` when repeating an interaction", "body": "I have modified a copy of `au.com.dius.pact.consumer.ExampleJavaConsumerPactTest` to invoke \"OPTIONS /second\" a second time during `runTest`, but instead of getting the response again, or a meaningful error message, I get an exception.\n\n(I would actually like to set up a pact to get a different response the second time for the request, which may or may not agree with Pact's philosophy, but this is the simplest case which produces the exception. I got no error when I tried to build a PactFragment with such a duplicate response, only when the test was run.  If it is not supported, it would be better to reject it immediately.)\n\nThe modified test looks like this:\n\n```\n        assertEquals(new ConsumerClient(url).options(\"/second\"), 200);\n        Map expectedResponse = new HashMap();\n        expectedResponse.put(\"responsetest\", true);\n        expectedResponse.put(\"name\", \"harry\");\n        assertEquals(new ConsumerClient(url).get(\"/\"), expectedResponse);\n        assertEquals(new ConsumerClient(url).options(\"/second\"), 200);\n```\n\nThis is the exception I get (using pact-jvm-consumer-junit_2.11 2.1.8):\n\n```\njava.lang.UnsupportedOperationException: empty.reduceLeft\nat scala.collection.TraversableOnce$class.reduceLeft(TraversableOnce.scala:165)\nat scala.collection.mutable.ArrayBuffer.scala$collection$IndexedSeqOptimized$$super$reduceLeft(ArrayBuffer.scala:48)\nat scala.collection.IndexedSeqOptimized$class.reduceLeft(IndexedSeqOptimized.scala:74)\nat scala.collection.mutable.ArrayBuffer.reduceLeft(ArrayBuffer.scala:48)\nat au.com.dius.pact.model.RequestMatching.matchInteraction(RequestMatching.scala:12)\nat au.com.dius.pact.consumer.PactSession.receiveRequest(PactSession.scala:38)\nat au.com.dius.pact.consumer.StatefulMockProvider.handleRequest(MockProvider.scala:53)\nat au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$$anonfun$intent$1.applyOrElse(UnfilteredMockProvider.scala:25)\nat au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$$anonfun$intent$1.applyOrElse(UnfilteredMockProvider.scala:24)\nat scala.PartialFunction$Lifted.apply(PartialFunction.scala:218)\nat scala.PartialFunction$Lifted.apply(PartialFunction.scala:214)\nat unfiltered.response.Pass$PartialAttempt.attemptWithPass(pass.scala:72)\nat unfiltered.response.Pass$PassingAttempt$class.attempt(pass.scala:65)\nat unfiltered.response.Pass$PartialAttempt.attempt(pass.scala:67)\nat unfiltered.response.Pass$$anonfun$fold$1.apply(pass.scala:48)\nat unfiltered.response.Pass$FunctionAttempt.apply(pass.scala:77)\nat unfiltered.netty.cycle.Plan$$anonfun$channelRead$1$$anonfun$apply$mcV$sp$2$$anonfun$apply$mcV$sp$3.apply$mcV$sp(plans.scala:70)\nat unfiltered.netty.cycle.Plan$class.catching(plans.scala:44)\nat au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$.catching(UnfilteredMockProvider.scala:20)\nat unfiltered.netty.cycle.Plan$$anonfun$channelRead$1$$anonfun$apply$mcV$sp$2.apply$mcV$sp(plans.scala:69)\nat unfiltered.netty.cycle.SynchronousExecution$class.executeIntent(deferrals.scala:23)\nat au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$.executeIntent(UnfilteredMockProvider.scala:20)\nat unfiltered.netty.cycle.Plan$$anonfun$channelRead$1.apply$mcV$sp(plans.scala:68)\nat unfiltered.netty.cycle.Plan$class.catching(plans.scala:44)\nat au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$.catching(UnfilteredMockProvider.scala:20)\nat unfiltered.netty.cycle.Plan$class.channelRead(plans.scala:67)\nat au.com.dius.pact.consumer.UnfilteredMockProvider$Routes$.channelRead(UnfilteredMockProvider.scala:20)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:333)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:319)\nat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:103)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:333)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:319)\nat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:163)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:333)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:319)\nat io.netty.channel.ChannelInboundHandlerAdapter.channelRead(ChannelInboundHandlerAdapter.java:86)\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:333)\nat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:319)\nat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:787)\nat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:130)\nat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:511)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:468)\nat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:382)\nat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:354)\nat io.netty.util.concurrent.SingleThreadEventExecutor$2.run(SingleThreadEventExecutor.java:116)\nat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:137)\nat java.lang.Thread.run(Thread.java:745)\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/78", "user": "seanf", "labels": ["bug", "wontfix"], "created": "2014-12-18 07:35:17", "closed": "2015-01-19 04:35:38", "commits": {"f71f7d354dab11253319052f92731c011fdc603d": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 31.00027777777778, "commitsDetails": [{"commitHash": "f71f7d354dab11253319052f92731c011fdc603d", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["db53e6cb1c663f7efb15f3fc25dc9d2043fa7acf"], "nameRev": "f71f7d354dab11253319052f92731c011fdc603d tags/2_1_9~19", "commitMessage": "fix to allow mock server to respond to a request more than once #78\n", "commitDateTime": "2014-12-19 12:43:07", "authoredDateTime": "2014-12-19 12:43:07", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/ExampleJavaConsumerPactTest.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/PactSession.scala", "insertions": 4, "deletions": 9, "lines": 13}, {"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/ProviderClient.groovy", "insertions": 0, "deletions": 1, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ExampleJavaConsumerPactTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.ExampleJavaConsumerPactTest.runTest(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f71f7d354dab11253319052f92731c011fdc603d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 10, "lines": 14, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/PactSession.scala", "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle"], "changesInPackagesSPOON": []}, {"title": "Regexp matchers don't handle null values", "body": "Causes an NPE instead of just a mismatch:\n\njava.lang.NullPointerException\n        at au.com.dius.pact.matchers.RegexpMatcher$.domatch(Matchers.scala:56)\n        at au.com.dius.pact.matchers.Matchers$.domatch(Matchers.scala:16)\n        at au.com.dius.pact.matchers.JsonBodyMatcher.compareValues(JsonBodyMatcher.scala:106)\n        at au.com.dius.pact.matchers.JsonBodyMatcher.compare(JsonBodyMatcher.scala:56)\n        at au.com.dius.pact.matchers.JsonBodyMatcher$$anonfun$compareMaps$1.apply(JsonBodyMatcher.scala:95)\n        at au.com.dius.pact.matchers.JsonBodyMatcher$$anonfun$compareMaps$1.apply(JsonBodyMatcher.scala:92)\n        at scala.collection.immutable.HashMap$HashMap1.foreach(HashMap.scala:224)\n        at scala.collection.immutable.HashMap$HashTrieMap.foreach(HashMap.scala:403)\n        at au.com.dius.pact.matchers.JsonBodyMatcher.compareMaps(JsonBodyMatcher.scala:92)\n        at au.com.dius.pact.matchers.JsonBodyMatcher.compare(JsonBodyMatcher.scala:48)\n        at au.com.dius.pact.matchers.JsonBodyMatcher$$anonfun$compareLists$2.apply(JsonBodyMatcher.scala:73)\n        at au.com.dius.pact.matchers.JsonBodyMatcher$$anonfun$compareLists$2.apply(JsonBodyMatcher.scala:70)\n        at scala.collection.GenTraversableViewLike$Filtered$$anonfun$foreach$4.apply(GenTraversableViewLike.scala:109)\n        at scala.collection.Iterator$class.foreach(Iterator.scala:727)\n        at scala.collection.AbstractIterator.foreach(Iterator.scala:1157)\n        at scala.collection.IterableViewLike$Transformed$class.foreach(IterableViewLike.scala:42)\n        at scala.collection.SeqViewLike$AbstractTransformed.foreach(SeqViewLike.scala:43)\n        at scala.collection.GenTraversableViewLike$Filtered$class.foreach(GenTraversableViewLike.scala:108)\n        at scala.collection.SeqViewLike$$anon$5.foreach(SeqViewLike.scala:80)\n        at au.com.dius.pact.matchers.JsonBodyMatcher.compareLists(JsonBodyMatcher.scala:70)\n        at au.com.dius.pact.matchers.JsonBodyMatcher.compare(JsonBodyMatcher.scala:50)\n        at au.com.dius.pact.matchers.JsonBodyMatcher$$anonfun$compareMaps$1.apply(JsonBodyMatcher.scala:95)\n        at au.com.dius.pact.matchers.JsonBodyMatcher$$anonfun$compareMaps$1.apply(JsonBodyMatcher.scala:92)\n        at scala.collection.immutable.Map$Map1.foreach(Map.scala:109)\n        at au.com.dius.pact.matchers.JsonBodyMatcher.compareMaps(JsonBodyMatcher.scala:92)\n        at au.com.dius.pact.matchers.JsonBodyMatcher.compare(JsonBodyMatcher.scala:47)\n        at au.com.dius.pact.matchers.JsonBodyMatcher.matchBody(JsonBodyMatcher.scala:20)\n", "url": "https://github.com/DiUS/pact-jvm/issues/77", "user": "uglyog", "labels": ["bug"], "created": "2014-12-18 03:25:19", "closed": "2014-12-19 03:49:11", "commits": {"146100327211617b35f3e571eebfe9dc3a2fb85e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "146100327211617b35f3e571eebfe9dc3a2fb85e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["f71f7d354dab11253319052f92731c011fdc603d"], "nameRev": "146100327211617b35f3e571eebfe9dc3a2fb85e tags/2_1_9~18", "commitMessage": "fix the matchers to handle null values #77\n", "commitDateTime": "2014-12-19 14:48:39", "authoredDateTime": "2014-12-19 14:48:39", "commitGitStats": [{"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/Matchers.scala", "insertions": 11, "deletions": 6, "lines": 17}, {"filePath": "pact-jvm-matchers/src/test/scala/au/com/dius/pact/matchers/MatchersTest.scala", "insertions": 28, "deletions": 4, "lines": 32}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["146100327211617b35f3e571eebfe9dc3a2fb85e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 6, "lines": 17, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-matchers/src/main/scala/au/com/dius/pact/matchers/Matchers.scala"]}, {"title": "NPE during serialization with different classloader", "body": "When using a custom classloader (as done during test with [robolectric](robolectric.org), or probably, its because the usage of gradle), serialization fails because of differnet classloder-behavior.\nused version: pact-jvm-consumer_2.11-2.1.0.jar\n\n```\njava.lang.NullPointerException\n at au.com.dius.pact.model.PactSerializer$class.lookupVersion(PactSerializer.scala:89)\n at au.com.dius.pact.model.Pact.lookupVersion(Pact.scala:34)\n at au.com.dius.pact.model.PactSerializer$class.pact2json(PactSerializer.scala:79)\n at au.com.dius.pact.model.Pact.pact2json(Pact.scala:34)\n at au.com.dius.pact.model.PactSerializer$class.serialize(PactSerializer.scala:84)\n at au.com.dius.pact.model.Pact.serialize(Pact.scala:34)\n at au.com.dius.pact.consumer.PactGenerator.au$com$dius$pact$consumer$PactGenerator$$writeToFile$1(PactGenerator.scala:71)\n at au.com.dius.pact.consumer.PactGenerator$$anonfun$writeAllToFile$3.apply(PactGenerator.scala:80)\n at au.com.dius.pact.consumer.PactGenerator$$anonfun$writeAllToFile$3.apply(PactGenerator.scala:79)\n at scala.collection.immutable.Map$Map1.foreach(Map.scala:116)\n at au.com.dius.pact.consumer.PactGenerator.writeAllToFile(PactGenerator.scala:79)\n```\n", "url": "https://github.com/DiUS/pact-jvm/issues/71", "user": "warmuuh", "labels": ["bug"], "created": "2014-11-04 10:56:50", "closed": "2014-11-08 22:41:26", "commits": {"4cac3f4bdf27c3419c61344b64fdcaaa6e2c2382": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "4cac3f4bdf27c3419c61344b64fdcaaa6e2c2382", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["3db3550b91194dd0e04d4f4da1c64ea307bc015d"], "nameRev": "4cac3f4bdf27c3419c61344b64fdcaaa6e2c2382 tags/2_1_5~4", "commitMessage": "#71 guard against NPE when trying to get the URL to load the manefest\n", "commitDateTime": "2014-11-05 20:26:44", "authoredDateTime": "2014-11-05 20:26:44", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "insertions": 13, "deletions": 11, "lines": 24}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4cac3f4bdf27c3419c61344b64fdcaaa6e2c2382"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 11, "lines": 24, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala"]}, {"title": "[pact-jvm-provider-gradle] Paths containing url encoded text cannot be verified", "body": "When a path in the generated json pact file contains some already url encoded text (e.g. `xx%20xx -> xx%2520xx`), it is url encoded again after it is read in for use by `gradle pactVerify` which results in the verification failing.\n\nThis does not occur when the same generated json file is run using [pact-provider-proxy](https://github.com/bethesque/pact-provider-proxy).\n", "url": "https://github.com/DiUS/pact-jvm/issues/66", "user": "chrisholmes", "labels": ["bug"], "created": "2014-10-24 15:26:32", "closed": "2016-11-06 04:16:01", "commits": {"d61cf8f129197d1892f68a683ef68af51b9d76d9": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "dbfbe810d17dc2f102362b8dced5c4e61c73f74e": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "985dad43961f31f08a8c22fb39c7e4953cb0cab5": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "af872364513c5218e7ec92872c2d58e77d2b5086": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 743.0002777777778, "commitsDetails": [{"commitHash": "d61cf8f129197d1892f68a683ef68af51b9d76d9", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["fe922c98b74be2cb83e61fc8fd32996d5e6687da"], "nameRev": "d61cf8f129197d1892f68a683ef68af51b9d76d9 tags/2_1_2~6", "commitMessage": "#66 - gradle verifier now URL decodes the path before building the request\n", "commitDateTime": "2014-10-25 19:28:19", "authoredDateTime": "2014-10-25 19:28:19", "commitGitStats": [{"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/ProviderClient.groovy", "insertions": 6, "deletions": 3, "lines": 9}, {"filePath": "pact-jvm-provider-gradle/src/test/groovy/au/com/dius/pact/provider/gradle/ProviderClientTest.groovy", "insertions": 41, "deletions": 0, "lines": 41}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "dbfbe810d17dc2f102362b8dced5c4e61c73f74e", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["d61cf8f129197d1892f68a683ef68af51b9d76d9"], "nameRev": "dbfbe810d17dc2f102362b8dced5c4e61c73f74e tags/2_1_2~5", "commitMessage": "#66 - URL decodes the path before serialising to the pact file\n", "commitDateTime": "2014-10-25 20:01:45", "authoredDateTime": "2014-10-25 20:01:45", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/PactSerializerSpec.scala", "insertions": 14, "deletions": 0, "lines": 14}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "985dad43961f31f08a8c22fb39c7e4953cb0cab5", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["42dd0e78b71eaadd5832ca67f2d7cd851e18703d"], "nameRev": "985dad43961f31f08a8c22fb39c7e4953cb0cab5 tags/2_1_4~4", "commitMessage": "Revert \"#66 - URL decodes the path before serialising to the pact file\"\n\nThis reverts commit dbfbe810d17dc2f102362b8dced5c4e61c73f74e.\n", "commitDateTime": "2014-10-28 09:06:14", "authoredDateTime": "2014-10-28 09:06:14", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/PactSerializerSpec.scala", "insertions": 0, "deletions": 14, "lines": 14}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "af872364513c5218e7ec92872c2d58e77d2b5086", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["05d5dc8da51998df16cbb5fcf6f8283a091e3b6e"], "nameRev": "af872364513c5218e7ec92872c2d58e77d2b5086 tags/3_1_0~12", "commitMessage": "attempt at better query string handling #66\n", "commitDateTime": "2015-09-25 16:45:56", "authoredDateTime": "2015-09-25 16:45:56", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/ConsumerClient.java", "insertions": 0, "deletions": 2, "lines": 2}, {"filePath": "pact-jvm-consumer/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "insertions": 10, "deletions": 4, "lines": 14}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-jvm-model/src/test/resources/test_pact_encoded_query.json", "insertions": 40, "deletions": 0, "lines": 40}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/Fixtures.scala", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/PactSerializerSpec.scala", "insertions": 5, "deletions": 0, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConsumerClient.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d61cf8f129197d1892f68a683ef68af51b9d76d9", "dbfbe810d17dc2f102362b8dced5c4e61c73f74e", "985dad43961f31f08a8c22fb39c7e4953cb0cab5", "af872364513c5218e7ec92872c2d58e77d2b5086"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 4, "gitStatsSummary": {"insertions": 24, "deletions": 16, "lines": 40, "gitFilesChange": 6}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle", "pact-jvm-consumer", "pact-jvm-model", "pact-jvm-consumer-junit"]}, {"title": "Pact SBT returns exit code 0 when tests fail.", "body": "I am using travis-ci for continuous integration and noticed that if I have a failure with \"sbt test\" then sbt exits with a non-zero code, causing my continuous integration service to notify me of a failed test, but if \"sbt verifyPacts\" has an error it exits with 0 and the continuous integrations tests pass when I would have liked them to fail.\n", "url": "https://github.com/DiUS/pact-jvm/issues/53", "user": "ShaneDelmore", "labels": ["Need Help!", "bug"], "created": "2014-08-20 23:09:26", "closed": "2016-01-21 00:56:05", "commits": {}, "ttf": 518.0002777777778, "commitsDetails": []}, {"title": "Pact JVM ignores query strings", "body": "Looks like query strings are missing from the models and all consumers and providers.\n", "url": "https://github.com/DiUS/pact-jvm/issues/51", "user": "uglyog", "labels": ["bug"], "created": "2014-08-16 01:20:53", "closed": "2014-08-21 01:57:34", "commits": {"46379e27c1a4dcf709611f1c5d6d102208f1d8f4": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "56f6088d74ccea3d8ba8ee19f4df3be831661319": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "46379e27c1a4dcf709611f1c5d6d102208f1d8f4", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["df2996e81035f05a11b811638c4737e916cfd782"], "nameRev": "46379e27c1a4dcf709611f1c5d6d102208f1d8f4 tags/2_0_4~6", "commitMessage": "#51 body matching is now based on mimetype\n", "commitDateTime": "2014-08-23 18:37:22", "authoredDateTime": "2014-08-23 18:37:22", "commitGitStats": [{"filePath": ".gitignore", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ConsumerService.scala", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/Fixtures.scala", "insertions": 4, "deletions": 5, "lines": 9}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/PrettyPrinter.scala", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/model/PactFragmentBuilder.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/test/scala/au/com/dius/pact/consumer/Fixtures.scala", "insertions": 5, "deletions": 4, "lines": 9}, {"filePath": "pact-jvm-consumer/src/test/scala/au/com/dius/pact/consumer/MockProviderSpec.scala", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-consumer/src/test/scala/au/com/dius/pact/consumer/PrettyPrinterSpec.scala", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/JsonBodyMatcher.scala", "insertions": 15, "deletions": 0, "lines": 15}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Matching.scala", "insertions": 21, "deletions": 14, "lines": 35}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "insertions": 28, "deletions": 33, "lines": 61}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "insertions": 9, "deletions": 2, "lines": 11}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/RequestMatching.scala", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/ResponseMatching.scala", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/dispatch/HttpClient.scala", "insertions": 1, "deletions": 3, "lines": 4}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/unfiltered/Conversions.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/Fixtures.scala", "insertions": 6, "deletions": 2, "lines": 8}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/MatchingSpec.scala", "insertions": 9, "deletions": 5, "lines": 14}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/RequestMatchingSpec.scala", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/ResponseComparison.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/scala/au/com/dius/pact/provider/EnterStateRequest.scala", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-provider/src/test/scala/au/com/dius/pact/provider/AnimalServiceResponses.scala", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "pact-jvm-provider/src/test/scala/au/com/dius/pact/provider/TestService.scala", "insertions": 7, "deletions": 6, "lines": 13}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Complete.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Create.scala", "insertions": 6, "deletions": 3, "lines": 9}, {"filePath": "pact-specification-test/src/test/scala/specification/SpecificationSpec.scala", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "56f6088d74ccea3d8ba8ee19f4df3be831661319", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["46379e27c1a4dcf709611f1c5d6d102208f1d8f4"], "nameRev": "56f6088d74ccea3d8ba8ee19f4df3be831661319 tags/2_0_4~5", "commitMessage": "Revert \"#51 body matching is now based on mimetype\"\n\nThis reverts commit 46379e27c1a4dcf709611f1c5d6d102208f1d8f4.\n", "commitDateTime": "2014-08-23 18:39:59", "authoredDateTime": "2014-08-23 18:39:59", "commitGitStats": [{"filePath": ".gitignore", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/ConsumerService.scala", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer-specs2/src/test/scala/au/com/dius/pact/consumer/specs2/Fixtures.scala", "insertions": 5, "deletions": 4, "lines": 9}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/PrettyPrinter.scala", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/model/PactFragmentBuilder.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer/src/test/scala/au/com/dius/pact/consumer/Fixtures.scala", "insertions": 4, "deletions": 5, "lines": 9}, {"filePath": "pact-jvm-consumer/src/test/scala/au/com/dius/pact/consumer/MockProviderSpec.scala", "insertions": 3, "deletions": 4, "lines": 7}, {"filePath": "pact-jvm-consumer/src/test/scala/au/com/dius/pact/consumer/PrettyPrinterSpec.scala", "insertions": 1, "deletions": 6, "lines": 7}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/JsonBodyMatcher.scala", "insertions": 0, "deletions": 15, "lines": 15}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Matching.scala", "insertions": 14, "deletions": 21, "lines": 35}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "insertions": 33, "deletions": 28, "lines": 61}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "insertions": 2, "deletions": 9, "lines": 11}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/RequestMatching.scala", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/ResponseMatching.scala", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/dispatch/HttpClient.scala", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/unfiltered/Conversions.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/Fixtures.scala", "insertions": 2, "deletions": 6, "lines": 8}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/MatchingSpec.scala", "insertions": 5, "deletions": 9, "lines": 14}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/RequestMatchingSpec.scala", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/ResponseComparison.groovy", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-provider/src/main/scala/au/com/dius/pact/provider/EnterStateRequest.scala", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "pact-jvm-provider/src/test/scala/au/com/dius/pact/provider/AnimalServiceResponses.scala", "insertions": 3, "deletions": 4, "lines": 7}, {"filePath": "pact-jvm-provider/src/test/scala/au/com/dius/pact/provider/TestService.scala", "insertions": 6, "deletions": 7, "lines": 13}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Complete.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Create.scala", "insertions": 3, "deletions": 6, "lines": 9}, {"filePath": "pact-specification-test/src/test/scala/specification/SpecificationSpec.scala", "insertions": 1, "deletions": 3, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["46379e27c1a4dcf709611f1c5d6d102208f1d8f4", "56f6088d74ccea3d8ba8ee19f4df3be831661319"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 159, "deletions": 159, "lines": 318, "gitFilesChange": 15}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/scala/au/com/dius/pact/model/unfiltered", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/JsonBodyMatcher.scala", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", ".gitignore", "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Complete.scala", "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/PrettyPrinter.scala", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/dispatch", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/RequestMatching.scala", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "pact-jvm-server/src/main/scala/au/com/dius/pact/server/Create.scala", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Matching.scala", "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle", "pact-jvm-consumer/src/main/scala/au/com/dius/pact/model/PactFragmentBuilder.scala", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/ResponseMatching.scala", "pact-jvm-provider/src/main/scala/au/com/dius/pact/provider/EnterStateRequest.scala"]}, {"title": "sbt plugin is published to the incorrect path.", "body": "The readme says to add the following line to plugins.sbt to use the plugin:\naddSbtPlugin(\"com.dius\" %% \"pact-jvm-provider-sbt\" % \"2.0.2\")\nWhich will fail to install looking for a path like:\nhttp://central.maven.org/maven2/com/dius/pact-jvm-provider-sbt_2.10_0.13/2.0.2/pact-jvm-provider-sbt-2.0.2.pom\n\nWhen I browsed central.maven.org it appears that the base path is actually au.com.dius and that the plugin has not been published with an sbt version since 2.0-RC5.\n\nThis for example will work:\naddSbtPlugin(\"au.com.dius\" %% \"pact-jvm-provider-sbt\" % \"2.0-RC5\")\nBut even changing the root path to au.com.dius will fail after 2.0-RC5 because it will look for a path like:\nhttp://central.maven.org/maven2/au/com/dius/pact-jvm-provider-sbt_2.10_0.13/2.0.2/pact-jvm-provider-sbt-2.0.2.pom\nwhen the plugin is actually published to:\nhttp://central.maven.org/maven2/au/com/dius/pact-jvm-provider-sbt_2.10/2.0.2/pact-jvm-provider-sbt_2.10-2.0.2.pom\nwhich is missing the _0.13 that sbt adds since sbt plugins are based on the sbt version.\n\nOr at least that is the way it looks to me, someone who has only been using SBT for a few days.  If there is any other input I can add to improve this ticket or help troubleshoot it please let me know.\n", "url": "https://github.com/DiUS/pact-jvm/issues/50", "user": "ShaneDelmore", "labels": ["bug"], "created": "2014-08-15 21:29:59", "closed": "2014-08-19 09:27:36", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "The requests and responses received by the mock server are not logged anywhere", "body": "The Ruby version of pact has very good logging of requests and responses to help diagnose failures. While investigating issue #40 I could not find any logs to see what actually requests where received to work out why they did not match.\n", "url": "https://github.com/DiUS/pact-jvm/issues/41", "user": "uglyog", "labels": ["bug"], "created": "2014-06-02 07:16:16", "closed": "2014-09-23 09:59:44", "commits": {}, "ttf": 113.00027777777778, "commitsDetails": []}, {"title": "JUnit test class does not give the failed pact verifications on failure", "body": "The base JUnit test class does not give any feedback when a pact expectation is not met. Anybody following the example test class will have this issue.\n\nOn a pact failure, the example test reports the following `Failure(java.lang.AssertionError: expected:<500> but was:<200>)` which is not helpful.\n\nThe reason for this, is the mock server returns a 500 response when a request is not matched. The test then fails (by raising an exception). This result is then passed into the PactVerification which does not actually compare the actual requests to the expected ones because it has assumed the test has failed.\n\nYou can easily see this result by changing something in the example JUnit test case (I added an extra character to the header value) and running the test.\n", "url": "https://github.com/DiUS/pact-jvm/issues/40", "user": "uglyog", "labels": ["bug"], "created": "2014-06-02 07:11:21", "closed": "2015-07-25 05:29:47", "commits": {"349495e00aca63fe73e7d19867274a33c41f3958": {"commitGHEventType": "referenced", "commitUser": "uglyog"}, "c23c37f6880f13e1252fc8840e4702f9004b6e70": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 417.0002777777778, "commitsDetails": [{"commitHash": "349495e00aca63fe73e7d19867274a33c41f3958", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["b02369ff451a42c22bf09affab0c9456da24cd86"], "nameRev": "349495e00aca63fe73e7d19867274a33c41f3958 tags/2_0-RC4~9", "commitMessage": "Issue #40 - added basic logging to the mock service provider\n", "commitDateTime": "2014-06-04 11:12:56", "authoredDateTime": "2014-06-04 10:28:26", "commitGitStats": [{"filePath": "pact-jvm-consumer-junit/README.md", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "pact-jvm-consumer-junit/build.sbt", "insertions": 5, "deletions": 2, "lines": 7}, {"filePath": "pact-jvm-consumer/build.sbt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/MockProvider.scala", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "pact-jvm-model/build.sbt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider/build.sbt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "pact-jvm-provider/src/test/scala/au/com/dius/pact/provider/TestService.scala", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "pact-jvm-server/build.sbt", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "c23c37f6880f13e1252fc8840e4702f9004b6e70", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1f16820eac384c0693d660ba79f2c348a4af6463"], "nameRev": "c23c37f6880f13e1252fc8840e4702f9004b6e70 tags/2_2_10~3", "commitMessage": "Make JUnit pact test failures more meaningful #40\n", "commitDateTime": "2015-07-25 15:26:48", "authoredDateTime": "2015-07-25 15:26:48", "commitGitStats": [{"filePath": "build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/ConsumerPactTest.java", "insertions": 14, "deletions": 9, "lines": 23}, {"filePath": "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer/PactMismatchException.java", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/ExpectedToFailBase.java", "insertions": 29, "deletions": 0, "lines": 29}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/MissingRequestConsumerPassesTest.java", "insertions": 77, "deletions": 0, "lines": 77}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/PactMismatchConsumerPassesTest.java", "insertions": 62, "deletions": 0, "lines": 62}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/PactVerifiedConsumerFailsTest.java", "insertions": 57, "deletions": 0, "lines": 57}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/PactVerifiedConsumerPassesTest.java", "insertions": 46, "deletions": 0, "lines": 46}, {"filePath": "pact-jvm-consumer-junit/src/test/java/au/com/dius/pact/consumer/resultstests/UnexpectedRequestConsumerPassesTest.java", "insertions": 68, "deletions": 0, "lines": 68}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/ConsumerPactRunner.scala", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/MockProvider.scala", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/VerificationResult.scala", "insertions": 24, "deletions": 2, "lines": 26}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/Matching.scala", "insertions": 25, "deletions": 5, "lines": 30}, {"filePath": "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/RequestMatch.scala", "insertions": 11, "deletions": 0, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConsumerPactTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.ConsumerPactTest.testPact()", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "au.com.dius.pact.consumer.ConsumerPactTest.runTest(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "au.com.dius.pact.consumer.ConsumerPactTest.testPact().1.run(au.com.dius.pact.model.MockProviderConfig)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactMismatchException.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.PactMismatchException", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExpectedToFailBase.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.ExpectedToFailBase", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "MissingRequestConsumerPassesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.MissingRequestConsumerPassesTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactMismatchConsumerPassesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.PactMismatchConsumerPassesTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactVerifiedConsumerFailsTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.PactVerifiedConsumerFailsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PactVerifiedConsumerPassesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.PactVerifiedConsumerPassesTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "UnexpectedRequestConsumerPassesTest.java", "spoonMethods": [{"spoonMethodName": "au.com.dius.pact.consumer.resultstests.UnexpectedRequestConsumerPassesTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["349495e00aca63fe73e7d19867274a33c41f3958", "c23c37f6880f13e1252fc8840e4702f9004b6e70"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 94, "deletions": 21, "lines": 115, "gitFilesChange": 13}, "spoonStatsSummary": {"TOT": 2.0, "UPD": 0.0, "INS": 2.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/MockProvider.scala", "pact-jvm-consumer-junit/src/main/java/au/com/dius/pact/consumer", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/RequestMatch.scala", "", "pact-jvm-model/build.sbt", "pact-jvm-consumer-junit", "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/ConsumerPactRunner.scala", "pact-jvm-consumer/src/main/scala/au/com/dius/pact/consumer/VerificationResult.scala", "pact-jvm-server/build.sbt", "pact-jvm-consumer/build.sbt", "pact-jvm-consumer-junit/build.sbt", "pact-jvm-matchers/src/main/scala/au/com/dius/pact/model/Matching.scala", "pact-jvm-provider/build.sbt"], "changesInPackagesSPOON": ["au.com.dius.pact.consumer.PactMismatchException", "au.com.dius.pact.consumer.resultstests.ExpectedToFailBase"]}, {"title": "Consumer Tests should have a return type", "body": "`PactFragment` defines test as `=> Unit`\n\nspecs2 defines test functions as returning instances of `Result`\n\nWe should be able to do:\n\n`def duringConsumerSpec[T](config: MockProviderConfig)(test: => [T]): VerificationResult[T] = {`\n\nWhich would allow slightly better test framework integration at the cost of some extra code in our library.\n", "url": "https://github.com/DiUS/pact-jvm/issues/39", "user": "thetrav", "labels": ["bug", "wontfix"], "created": "2014-05-18 07:12:13", "closed": "2016-04-10 05:38:39", "commits": {}, "ttf": 692.0002777777778, "commitsDetails": []}, {"title": "Ruby version of pact requires the HTTP method to be lower case", "body": "Ruby verification tries to do a send with the HTTP method, so it should convert it to lower case. But the pact files should also have it lower case to be consistent.\n", "url": "https://github.com/DiUS/pact-jvm/issues/34", "user": "uglyog", "labels": ["bug"], "created": "2014-05-05 02:14:15", "closed": "2014-05-05 03:16:49", "commits": {"701e8f711b9a54f96ce15c1b3ced78a2231a3372": {"commitGHEventType": "referenced", "commitUser": "uglyog"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "701e8f711b9a54f96ce15c1b3ced78a2231a3372", "commitGHEventType": "referenced", "commitUser": "uglyog", "commitParents": ["1d9b206f2a181400cc855d77e7cff12f0bc83670"], "nameRev": "701e8f711b9a54f96ce15c1b3ced78a2231a3372 tags/2_1_2~21", "commitMessage": "#34 - force HTTP method to always be uppercase\n", "commitDateTime": "2014-10-10 12:52:21", "authoredDateTime": "2014-10-10 12:52:21", "commitGitStats": [{"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pact-jvm-model/src/test/resources/test_pact_lowercase_method.json", "insertions": 40, "deletions": 0, "lines": 40}, {"filePath": "pact-jvm-model/src/test/scala/au/com/dius/pact/model/PactSerializerSpec.scala", "insertions": 16, "deletions": 0, "lines": 16}, {"filePath": "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle/ProviderClient.groovy", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["701e8f711b9a54f96ce15c1b3ced78a2231a3372"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 2, "lines": 5, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["pact-jvm-model/src/main/scala/au/com/dius/pact/model/Pact.scala", "pact-jvm-model/src/main/scala/au/com/dius/pact/model/PactSerializer.scala", "pact-jvm-provider-gradle/src/main/groovy/au/com/dius/pact/provider/gradle"]}]}