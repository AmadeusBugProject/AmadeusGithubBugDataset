{"projectName": "square/moshi", "bugLabels": ["bug"], "captureTime": "Sat Jul  4 15:30:34 2020", "issues": [{"title": "Exception when generating adapters: Unexpected type variable T", "body": "Moshi version: 1.9.0, 1.9.1, 1.9.2 (on previous versions it works fine)\r\n\r\nThe following code causes Gradle build failed with exception:\r\n\r\n```kotlin\r\nopen class Response<T> {\r\n    var data: T? = null\r\n}\r\n\r\nclass Person(val name: String)\r\n\r\n@JsonClass(generateAdapter = true)\r\nclass PersonResponse : Response<Person>()\r\n```\r\nException:\r\n\r\n```\r\n[kapt] An exception occurred: java.lang.IllegalStateException: Unexpected type variable T\r\n\tat com.squareup.moshi.kotlin.codegen.api.AdapterGenerator$generateType$typeRenderer$1.renderTypeVariable(AdapterGenerator.kt:162)\r\n\tat com.squareup.moshi.kotlin.codegen.api.TypeRenderer.render(TypeRenderer.kt:100)\r\n\tat com.squareup.moshi.kotlin.codegen.api.TypeRenderer.render$default(TypeRenderer.kt:43)\r\n\tat com.squareup.moshi.kotlin.codegen.api.TypeRenderer.renderObjectType(TypeRenderer.kt:110)\r\n\tat com.squareup.moshi.kotlin.codegen.api.TypeRenderer.render(TypeRenderer.kt:45)\r\n\tat com.squareup.moshi.kotlin.codegen.api.TypeRenderer.render$default(TypeRenderer.kt:43)\r\n        (...)\r\n```", "url": "https://github.com/square/moshi/issues/1046", "user": "Wasky", "labels": ["bug"], "created": "2019-12-04 15:19:56", "closed": "2020-05-26 22:53:46", "commits": {"4e84451d6e3c465b47756f659e0e38320524ae1c": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 174.00027777777777, "commitsDetails": [{"commitHash": "4e84451d6e3c465b47756f659e0e38320524ae1c", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["a73b9324295fc3397db9e97d2d828ed2470721cd"], "nameRev": "4e84451d6e3c465b47756f659e0e38320524ae1c remotes/origin/z/resolveRealTypes~3", "commitMessage": "Resolve type arguments correctly for supertype settable properties\n\nResolves #1046\n", "commitDateTime": "2020-01-18 22:52:18", "authoredDateTime": "2020-01-18 22:52:18", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/metadata.kt", "insertions": 109, "deletions": 5, "lines": 114}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4e84451d6e3c465b47756f659e0e38320524ae1c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 109, "deletions": 5, "lines": 114, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen"]}, {"title": "Kotlin reflection adapter behaves differently from codegen generated adapter", "body": "In the following situation:\r\n\r\n```\r\ndata class PushTokenRegistration(val userId: String, val pushToken: String) {\r\n  val platform: String = \"android\"\r\n}\r\n```\r\n\r\nThe reflection adapter (same as the Java reflection adapter used to) generates JSON like\r\n\r\n```\r\n{\r\n  userId: \"foo\",\r\n  pushToken: \"bar\",\r\n  platform: \"android\"\r\n}\r\n```\r\n\r\nas expected by me.\r\n\r\nThe codegen generated adapter ignores the `platform` property while serializing.\r\n", "url": "https://github.com/square/moshi/issues/1043", "user": "strooooke", "labels": ["bug"], "created": "2019-11-29 14:35:57", "closed": "2020-01-11 22:29:20", "commits": {}, "ttf": 43.000277777777775, "commitsDetails": []}, {"title": "Generated JsonAdapters for nested data classes ignore parent class visibility modifier", "body": "Hi!\r\n\r\nI am using `moshi-kotlin-codegen:1.8.0` to generate adapters for the following classes:\r\n```kotlin\r\n@JsonClass(generateAdapter = true)\r\ninternal data class Parent(    \r\n  val type: Int,\r\n  val name: String? = null) {\r\n\r\n  @JsonClass(generateAdapter = true)\r\n  data class NestedClass(\r\n    val nestedProperty: String\r\n  )\r\n}\r\n```\r\n\r\nExpected:\r\nmoshi generates two JsonAdapters, both with `internal` visibility modifier, because visibility of nested classes cannot exceed visibility of the enclosing class.\r\n\r\nActual:\r\nmoshi generates ParentJsonAdapter as `internal`, but NestedClassJsonAdapter as `public`.\r\n", "url": "https://github.com/square/moshi/issues/1022", "user": "roman-tikhonov", "labels": ["Kotlin - code gen", "bug"], "created": "2019-11-15 17:43:10", "closed": "2019-11-17 03:27:26", "commits": {"9fb280ce3bdaa37585c4cd24e092fcf35cc58612": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "0ccc324aeae3699040e6512505bea47203755511": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "4241918d6b0ab8927f5fc8b3a604f8c0694b7b4a": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "9fb280ce3bdaa37585c4cd24e092fcf35cc58612", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "0ccc324aeae3699040e6512505bea47203755511", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "4241918d6b0ab8927f5fc8b3a604f8c0694b7b4a", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": ["ca207b2e0684ef0f733bd802e3d05f2e2c4b9c77"], "nameRev": "4241918d6b0ab8927f5fc8b3a604f8c0694b7b4a tags/moshi-parent-1.9.2~4", "commitMessage": "Handle enclosing visibility + cache metadata parsing (#1026)\n\n* Only allow public or internal classes\r\n\r\n* Ensure consistent ordering of supertypes\r\n\r\n* Eagerly load supertype typespecs for reuse\r\n\r\n* Add regression test for https://github.com/square/moshi/issues/1022\r\n\r\n* Add MoshiCachedClassInspector, wire in\r\n\r\n* Check visibility of enclosed types too\r\n\r\nResolves #1022\r\n\r\n* Fix comments\r\n", "commitDateTime": "2019-11-16 22:27:25", "authoredDateTime": "2019-11-16 22:27:25", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/AppliedType.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/JsonClassCodegenProcessor.kt", "insertions": 6, "deletions": 3, "lines": 9}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/MoshiCachedClassInspector.kt", "insertions": 37, "deletions": 0, "lines": 37}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/metadata.kt", "insertions": 63, "deletions": 39, "lines": 102}, {"filePath": "kotlin/codegen/src/test/java/com/squareup/moshi/kotlin/codegen/JsonClassCodegenProcessorTest.kt", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codegen/GeneratedAdaptersTest.kt", "insertions": 14, "deletions": 0, "lines": 14}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Generated adapters redeclare type variable variance", "body": "Carrying over from https://github.com/square/moshi/issues/1008#issuecomment-550513501. These should just be a no-variant typevariable", "url": "https://github.com/square/moshi/issues/1009", "user": "ZacSweers", "labels": ["Kotlin - code gen", "bug"], "created": "2019-11-07 23:57:32", "closed": "2019-11-08 22:35:14", "commits": {"322264088a1e7545d9fa3d5534c2f284aabbda04": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "f42a7333a9c758f1b503e34103b9cc51a04552f4": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "d25abb1ee59d9d540fb13d72a2e648f019526b38": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "322264088a1e7545d9fa3d5534c2f284aabbda04", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "f42a7333a9c758f1b503e34103b9cc51a04552f4", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "d25abb1ee59d9d540fb13d72a2e648f019526b38", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["3c0e3edff3b03c455a1f4c70652c6c58d0dbed7c"], "nameRev": "d25abb1ee59d9d540fb13d72a2e648f019526b38 tags/moshi-parent-1.9.2~7", "commitMessage": "Fix incorrect type variance being applied on generated adapters  (#1010)\n\n* Fix: force object type for type arguments\r\n\r\n* Add outDeclaration regression test for #1009\r\n\r\n* Create mapTypesUtility for reusing recursive type mapping\r\n\r\n* Strip typevar variance where appropriate\r\n\r\nResolves #1009\r\n", "commitDateTime": "2019-11-08 14:35:13", "authoredDateTime": "2019-11-08 14:35:13", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/AdapterGenerator.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/kotlintypes.kt", "insertions": 49, "deletions": 0, "lines": 49}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/metadata.kt", "insertions": 14, "deletions": 39, "lines": 53}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 18, "deletions": 0, "lines": 18}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/reflect/-MoshiKotlinExtensions.kt", "insertions": 7, "deletions": 3, "lines": 10}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Inline function with reified type parameter in @JsonClass breaks codegen on >= 1.9.0", "body": "The following model class definition fails with Moshi 1.9.0 and above:\r\n\r\n```kotlin\r\n@JsonClass(generateAdapter = true)\r\ndata class Model(@Json(name = \"id\") val id: String) {\r\n    inline fun <reified T> inlineMethod(named: String): T? = null\r\n}\r\n```\r\n\r\nThe fields on the class & the body of its inline function are irrelevant - instead, it seems like the presence of the `reified` keyword will cause Moshi's codegen to fail with the following message:\r\n\r\n```\r\ne: [kapt] An exception occurred: java.util.NoSuchElementException: Key 0 is missing in the map.\r\n\tat kotlin.collections.MapsKt__MapWithDefaultKt.getOrImplicitDefaultNullable(MapWithDefault.kt:24)\r\n\tat kotlin.collections.MapsKt__MapsKt.getValue(Maps.kt:294)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs.toFunSpec(KotlinPoetMetadataSpecs.kt:543)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs.access$toFunSpec(KotlinPoetMetadataSpecs.kt:1)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs$toTypeSpec$26.invoke(KotlinPoetMetadataSpecs.kt:429)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs$toTypeSpec$26.invoke(KotlinPoetMetadataSpecs.kt)\r\n\tat kotlin.sequences.TransformingSequence$iterator$1.next(Sequences.kt:172)\r\n\tat com.squareup.kotlinpoet.TypeSpec$Builder.addFunctions(TypeSpec.kt:786)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs.toTypeSpec(KotlinPoetMetadataSpecs.kt:403)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs.toTypeSpec(KotlinPoetMetadataSpecs.kt:173)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs.toTypeSpec$default(KotlinPoetMetadataSpecs.kt:171)\r\n\tat com.squareup.moshi.kotlin.codegen.MetadataKt.targetType(metadata.kt:153)\r\n\tat com.squareup.moshi.kotlin.codegen.JsonClassCodegenProcessor.adapterGenerator(JsonClassCodegenProcessor.kt:133)\r\n\tat com.squareup.moshi.kotlin.codegen.JsonClassCodegenProcessor.process(JsonClassCodegenProcessor.kt:107)\r\n\tat org.jetbrains.kotlin.kapt3.base.incremental.IncrementalProcessor.process(incrementalProcessors.kt)\r\n(More kapt stuff below this line...)\r\n```\r\n\r\nOn 1.8.0, code generation and compilation are successful.\r\n\r\nAs a workaround, the `reified inline fun` can be defined outside of the model class, as an extension function:\r\n\r\n```kotlin\r\n@JsonClass(generateAdapter = true)\r\ndata class Model(@Json(name = \"id\") val id: String)\r\n\r\n// This works\r\ninline fun <reified T> Model.inlineMethod(named: String): T? = null\r\n```", "url": "https://github.com/square/moshi/issues/1008", "user": "mannodermaus", "labels": ["Kotlin - code gen", "bug"], "created": "2019-11-06 12:03:23", "closed": "2019-11-17 03:54:29", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "Another issue with typealiases and codegen in 1.9.1", "body": "I found another use case involving typealiases that fails to compile after upgrading to 1.9.1\r\n\r\n```kotlin\r\ntypealias GeoJsonCoordinates = List<GeoJsonCoordinate>\r\n\r\ntypealias GeoJsonCoordinate = List<Double>\r\n\r\n@JsonClass(generateAdapter = true)\r\ndata class GeoJsonDto(\r\n    val type: String,\r\n    val coordinates: GeoJsonCoordinates\r\n)\r\n```\r\n\r\nThis generates\r\n\r\n```kotlin\r\nprivate val listOfGeoJsonCoordinateAdapter: JsonAdapter<List<GeoJsonCoordinate>> =\r\n      moshi.adapter(Types.newParameterizedType(List::class.java, GeoJsonCoordinate::class.java),\r\n      emptySet(), \"coordinates\")\r\n```\r\n\r\nwhen it should generate\r\n\r\n```kotlin\r\n  private val listOfGeoJsonCoordinateAdapter: JsonAdapter<List<GeoJsonCoordinate>> =\r\n      moshi.adapter(Types.newParameterizedType(List::class.java, Types.newParameterizedType(List::class.java, java.lang.Double::class.java)),\r\n      emptySet(), \"coordinates\")\r\n```", "url": "https://github.com/square/moshi/issues/995", "user": "solcott", "labels": ["bug"], "created": "2019-10-31 19:18:48", "closed": "2019-11-02 13:43:09", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Incorrect reading of the type in codegen", "body": "Hi\r\nWhen I use the new codegen version 1.9.1, I get the NoSuchMethodException error. Occurs only in classes that have boxed primitives nullable values for example `Int?`. I discovered that this has to do with the new way of creating objects. When we add, for example, `Int?` this generated adapter instead of creating a constructor for \"java.lang.Integer\" still uses the primitive value of `int` causing the NoSuchMethodException error.\r\n", "url": "https://github.com/square/moshi/issues/991", "user": "Faierbel", "labels": ["bug"], "created": "2019-10-31 08:56:16", "closed": "2019-11-02 19:15:29", "commits": {"98a15ba5f8e4dbb9b9292c275b9a87b8ee9d3b0d": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "9da9cc4014833774ee8746a26324e5e52f916fa9": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "fe34a577e7215d368f96e5b0d5e6315582fd00db": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "98a15ba5f8e4dbb9b9292c275b9a87b8ee9d3b0d", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "9da9cc4014833774ee8746a26324e5e52f916fa9", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "fe34a577e7215d368f96e5b0d5e6315582fd00db", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["c8c7121e7646c8472e96b08b8749b69f2581cf1d"], "nameRev": "fe34a577e7215d368f96e5b0d5e6315582fd00db tags/moshi-parent-1.9.2~10", "commitMessage": "Check against non-nullable known primitives when rendering class\u2026 (#993)\n\n* Check against non-nullable known primitives when rendering class blocks\r\n\r\n`Int?` will not equal `Int` in KotlinPoet, so this was always falling through to the default `::class.java` code.\r\n\r\nResolves #991\r\n\r\n* Nix comment\r\n\r\n* Flesh out test to include all primitives\r\n", "commitDateTime": "2019-11-02 15:15:29", "authoredDateTime": "2019-11-02 15:15:29", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/kotlintypes.kt", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 46, "deletions": 0, "lines": 46}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "1.9.1 codegen no nullableListOfStringAdapter ", "body": "Hi,\r\n\r\nFirst of all, tanks for the fantastic work on the 1.9.x release! I'm not sure if this is an issue or if I've simply misunderstood what the expected behavior is.\r\n\r\nI have a data class with a `List<String>?` which would produce the following line in the code-gen generated adapter on 1.8.0:\r\n`14 -> genres = nullableListOfStringAdapter.fromJson(reader)`\r\n\r\nWith 1.9.1 code-gen produces this:\r\n\r\n`        14 -> genres = listOfStringAdapter.fromJson(reader) ?: throw Util.unexpectedNull(\"genres\",\r\n            \"genres\", reader)`\r\n\r\nThis results in `com.squareup.moshi.JsonDataException: Required value 'genres' missing at $.programs[0].event`.\r\n\r\nHave I missed something in the 1.9.X release for marking lists as optional?", "url": "https://github.com/square/moshi/issues/990", "user": "hugomillwood", "labels": ["bug"], "created": "2019-10-31 08:11:25", "closed": "2019-11-03 01:55:21", "commits": {"a4a6a469ba908ca6a68d63d4b9745661443f42aa": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "024aff54e4b70f3003cf0a39094b830407bdba66": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "7cf365cdbf8b498031f7ea32892e0228e8a0aff8": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "a4a6a469ba908ca6a68d63d4b9745661443f42aa", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "024aff54e4b70f3003cf0a39094b830407bdba66", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "7cf365cdbf8b498031f7ea32892e0228e8a0aff8", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["fe34a577e7215d368f96e5b0d5e6315582fd00db"], "nameRev": "7cf365cdbf8b498031f7ea32892e0228e8a0aff8 tags/moshi-parent-1.9.2~9", "commitMessage": "Fix nullable properties (#992)\n\n* Fix missing nullability/annotations when unwrapping typealiases\r\n\r\nFixes #990\r\n\r\n* Add extra nullable properties test + more nullability in alias test\r\n\r\n* Add more complex typeAliasNullability test\r\n\r\n* Recursively check nullability and track annotations in typealiases\r\n", "commitDateTime": "2019-11-02 21:55:20", "authoredDateTime": "2019-11-02 21:55:20", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/metadata.kt", "insertions": 14, "deletions": 1, "lines": 15}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 51, "deletions": 2, "lines": 53}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Box primitive types in Types.super/subtype code gen", "body": "Primitive types can't be used for these", "url": "https://github.com/square/moshi/issues/985", "user": "ZacSweers", "labels": ["Kotlin - code gen", "bug"], "created": "2019-10-30 22:43:49", "closed": "2019-10-31 01:15:31", "commits": {"9c12610f97d4165e9a746cc18691df5306aa7a10": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "932ec4d07d813746d14f2105190c5e52c143f1eb": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "092175ae90e747f77c4b4018a22bcbabf34d587c": {"commitGHEventType": "closed", "commitUser": "ZacSweers"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "9c12610f97d4165e9a746cc18691df5306aa7a10", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "932ec4d07d813746d14f2105190c5e52c143f1eb", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "092175ae90e747f77c4b4018a22bcbabf34d587c", "commitGHEventType": "closed", "commitUser": "ZacSweers", "commitParents": ["ac789070e8e7cee88fa35ad6c01ddb7d8fd5cfdb"], "nameRev": "092175ae90e747f77c4b4018a22bcbabf34d587c tags/moshi-parent-1.9.1~2", "commitMessage": "Fix handling of typealiases in non-classname envs + wildcard fix\u2026 (#987)\n\n* Correctly render non-classname wildcard types\r\n\r\nResolves #984\r\nResolves #985\r\n\r\n* Add thorough typealias test\r\n\r\n* Expand unwrapTypeAlias to parameterized and wildcard types\r\n\r\nResolves #983\r\n\r\n* Disable Werror for now\r\n", "commitDateTime": "2019-10-30 21:15:28", "authoredDateTime": "2019-10-30 21:15:28", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/TypeRenderer.kt", "insertions": 10, "deletions": 4, "lines": 14}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/metadata.kt", "insertions": 34, "deletions": 1, "lines": 35}, {"filePath": "kotlin/tests/pom.xml", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 38, "deletions": 0, "lines": 38}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Use rendered type for Types.super/subtype code gen", "body": "We don't currently do this but should, otherwise it won't compile", "url": "https://github.com/square/moshi/issues/984", "user": "ZacSweers", "labels": ["Kotlin - code gen", "bug"], "created": "2019-10-30 22:38:03", "closed": "2019-10-31 01:15:31", "commits": {"9c12610f97d4165e9a746cc18691df5306aa7a10": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "932ec4d07d813746d14f2105190c5e52c143f1eb": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "092175ae90e747f77c4b4018a22bcbabf34d587c": {"commitGHEventType": "closed", "commitUser": "ZacSweers"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "9c12610f97d4165e9a746cc18691df5306aa7a10", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "932ec4d07d813746d14f2105190c5e52c143f1eb", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "092175ae90e747f77c4b4018a22bcbabf34d587c", "commitGHEventType": "closed", "commitUser": "ZacSweers", "commitParents": ["ac789070e8e7cee88fa35ad6c01ddb7d8fd5cfdb"], "nameRev": "092175ae90e747f77c4b4018a22bcbabf34d587c tags/moshi-parent-1.9.1~2", "commitMessage": "Fix handling of typealiases in non-classname envs + wildcard fix\u2026 (#987)\n\n* Correctly render non-classname wildcard types\r\n\r\nResolves #984\r\nResolves #985\r\n\r\n* Add thorough typealias test\r\n\r\n* Expand unwrapTypeAlias to parameterized and wildcard types\r\n\r\nResolves #983\r\n\r\n* Disable Werror for now\r\n", "commitDateTime": "2019-10-30 21:15:28", "authoredDateTime": "2019-10-30 21:15:28", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/TypeRenderer.kt", "insertions": 10, "deletions": 4, "lines": 14}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/metadata.kt", "insertions": 34, "deletions": 1, "lines": 35}, {"filePath": "kotlin/tests/pom.xml", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 38, "deletions": 0, "lines": 38}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Codegen in 1.9.0 fails when referencing a parameterized type that is a typealias", "body": "The following fails to compile when using codegen in 1.9.0\r\n\r\nI have a typealias defined as:\r\n\r\n```kotlin\r\ntypealias GeoJsonCoordinate = List<Double>\r\n```\r\n\r\nMy json class is defined as:\r\n\r\n```kotlin\r\n@JsonClass(generateAdapter = true)\r\ndata class GeoJsonDto(\r\n  val type: String,\r\n  val coordinates: GeoJsonCoordinates\r\n)\r\n```\r\n\r\nAfter kapt is run successfully the generated adapter fails to compile due to:\r\n\r\n```kotlin\r\nprivate val listOfGeoJsonCoordinateAdapter: JsonAdapter<List<GeoJsonCoordinate>> =\r\n      moshi.adapter(Types.newParameterizedType(List::class.java, GeoJsonCoordinate::class.java),\r\n      emptySet(), \"coordinates\")\r\n```\r\n\r\nThis should be generated somewhat like\r\n\r\n```kotlin  \r\nprivate val listOfGeoJsonCoordinateAdapter: JsonAdapter<List<GeoJsonCoordinate>> =\r\n      moshi.adapter(Types.newParameterizedType(List::class.java, java.lang.Double::class.java),\r\n      emptySet(), \"coordinates\")\r\n```", "url": "https://github.com/square/moshi/issues/983", "user": "solcott", "labels": ["Kotlin - code gen", "bug"], "created": "2019-10-30 22:05:15", "closed": "2019-10-31 01:15:29", "commits": {"6c92f734eaf6c6f0a2596e1a3e972ee5f29e84c9": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "4790fa634efc7f92ff9d06500af91d2d165afa27": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "092175ae90e747f77c4b4018a22bcbabf34d587c": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "6c92f734eaf6c6f0a2596e1a3e972ee5f29e84c9", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "4790fa634efc7f92ff9d06500af91d2d165afa27", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "092175ae90e747f77c4b4018a22bcbabf34d587c", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["ac789070e8e7cee88fa35ad6c01ddb7d8fd5cfdb"], "nameRev": "092175ae90e747f77c4b4018a22bcbabf34d587c tags/moshi-parent-1.9.1~2", "commitMessage": "Fix handling of typealiases in non-classname envs + wildcard fix\u2026 (#987)\n\n* Correctly render non-classname wildcard types\r\n\r\nResolves #984\r\nResolves #985\r\n\r\n* Add thorough typealias test\r\n\r\n* Expand unwrapTypeAlias to parameterized and wildcard types\r\n\r\nResolves #983\r\n\r\n* Disable Werror for now\r\n", "commitDateTime": "2019-10-30 21:15:28", "authoredDateTime": "2019-10-30 21:15:28", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/TypeRenderer.kt", "insertions": 10, "deletions": 4, "lines": 14}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/metadata.kt", "insertions": 34, "deletions": 1, "lines": 35}, {"filePath": "kotlin/tests/pom.xml", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 38, "deletions": 0, "lines": 38}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Code gen: classes with non-property parameters  don't work with mask generation", "body": "This is a regression from 1.8.0, though I'm fairly certain this was working by coincidence in 1.8.0. We should try to fix this. All parameters (property or not) participate in mask generation and constructor invocation. \r\n\r\nWe should handle these similarly to how we handle transient properties: increment the mask index, use them in constructor lookup, use a default value in invocation, but otherwise ignore them.", "url": "https://github.com/square/moshi/issues/979", "user": "ZacSweers", "labels": ["Kotlin - code gen", "bug"], "created": "2019-10-30 05:49:50", "closed": "2019-10-31 01:06:05", "commits": {"7ef10c404b46360346b9fc0d4612488b017201aa": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "9a0294c3a06e6294403df0bc688e4f9bd16a844d": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "7ef10c404b46360346b9fc0d4612488b017201aa", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "9a0294c3a06e6294403df0bc688e4f9bd16a844d", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": ["a384bd0429e1c0b89e1b7ccaf58d8a2c1c31dcb7"], "nameRev": "9a0294c3a06e6294403df0bc688e4f9bd16a844d tags/moshi-parent-1.9.1~4", "commitMessage": "Handle non-property parameters in kotlin code gen (#982)\n\n* Add parameter-only param in multi-masks test\r\n\r\n* Add type to target parameters for later reference\r\n\r\n* Ensure parameters are ordered\r\n\r\n* Reword AdapterGenerator fromJson logic to use sealed FromJsonComponent\r\n\r\nThis allows us to handle parameter-only types separately (needed for mask index calculation). Resolves #979\r\n\r\n* Add more tests\r\n", "commitDateTime": "2019-10-30 21:06:04", "authoredDateTime": "2019-10-30 21:06:04", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/AdapterGenerator.kt", "insertions": 100, "deletions": 21, "lines": 121}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/TargetConstructor.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/TargetParameter.kt", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/metadata.kt", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 54, "deletions": 0, "lines": 54}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codegen/MultipleMasksTest.kt", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "data classes with over 32 properties need multiple masks", "body": "1.3.60-eap-76 with version 1.9.0 of codegen I started getting `java.lang.IllegalArgumentException: Wrong number of arguments` for data classes that have more than 32  properties.\r\n\r\nthe decompiled byte code for the synthetic default constructor expects an additional mask for each 32 count boundary crossed.\r\n\r\nthis issue is a follow up to https://github.com/square/moshi/issues/960", "url": "https://github.com/square/moshi/issues/977", "user": "trevjonez", "labels": ["bug"], "created": "2019-10-30 00:29:52", "closed": "2019-10-30 20:48:00", "commits": {"d04f17c76c5a97e6a7a0abaf75567105aac09708": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "0aacfc7430f2d727daa20241f53f60360b140030": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "d04f17c76c5a97e6a7a0abaf75567105aac09708", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "0aacfc7430f2d727daa20241f53f60360b140030", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["4f1c8a5eda6f78c17b7117ae511aaf717c4fe4ef"], "nameRev": "0aacfc7430f2d727daa20241f53f60360b140030 tags/moshi-parent-1.9.1~6", "commitMessage": "Support 32+ parameter constructors in code gen (#978)\n\n* Add MultipleMasksTest test\r\n\r\n* Use multiple masks for constructors with more than 32 parameters\r\n\r\nResolves #977\r\n\r\n* Add non-default arg to test\r\n\r\n* Emit hex literals\r\n\r\n* Simpler int math\r\n\r\n* Don't allocate a mask if there's no properties\r\n", "commitDateTime": "2019-10-30 16:48:00", "authoredDateTime": "2019-10-30 16:48:00", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/AdapterGenerator.kt", "insertions": 45, "deletions": 13, "lines": 58}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codegen/MultipleMasksTest.kt", "insertions": 124, "deletions": 0, "lines": 124}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "kotlin codgen: multiple constructors with default lead to crash", "body": "```kotlin\r\n@JsonClass(generateAdapter = true)\r\nclass Foo(val f: Int)\r\n\r\n@JsonClass(generateAdapter = true)\r\nclass Bar(val f: Foo = Foo(5), val b: Int) {\r\n\tconstructor(f: Int, b: Int = 6): this(Foo(f), b)\r\n}\r\n@ExperimentalStdlibApi\r\nfun main() {\r\n\tval moshi = Moshi.Builder().build()\r\n\tmoshi.adapter<Bar>().fromJson(\"\"\"{\"b\":6}\"\"\")\r\n}\r\n```\r\nfails with\r\n```\r\nException in thread \"main\" java.lang.IllegalArgumentException\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\r\n\tat moshiTest.BarJsonAdapter.fromJson(BarJsonAdapter.kt:55)\r\n\tat moshiTest.BarJsonAdapter.fromJson(BarJsonAdapter.kt:17)\r\n\tat com.squareup.moshi.internal.NullSafeJsonAdapter.fromJson(NullSafeJsonAdapter.java:40)\r\n\tat com.squareup.moshi.JsonAdapter.fromJson(JsonAdapter.java:43)\r\n\tat moshiTest.MainKt.main(main.kt:46)\r\n\tat moshiTest.MainKt.main(main.kt)\r\n```\r\nThe problem is that kotlin generates multiple methods with the `DefaultConstructorMarker` argument. That leads to a chance of the `fromJson` code choosing the wrong constructor in `Util.lookupDefaultsConstructor`.", "url": "https://github.com/square/moshi/issues/975", "user": "Wasabi375", "labels": ["bug"], "created": "2019-10-29 20:48:43", "closed": "2019-10-30 04:39:09", "commits": {"c78bdaa03490276c98772ceebfcc722adb6d0581": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "4f1c8a5eda6f78c17b7117ae511aaf717c4fe4ef": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "c78bdaa03490276c98772ceebfcc722adb6d0581", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "4f1c8a5eda6f78c17b7117ae511aaf717c4fe4ef", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["6acebfaca6131740f12bf3adf059c2a5b71e3dba"], "nameRev": "4f1c8a5eda6f78c17b7117ae511aaf717c4fe4ef tags/moshi-parent-1.9.1~7", "commitMessage": "Fix support for classes w/ multiple constructors in code gen (#976)\n\n* Fix broken test\r\n\r\nThis test suite doesn't run on CI builds but fails locally since the method was moved\r\n\r\n* Add multiple constructors test case\r\n\r\n* Implement TypeName.asTypeBlock()\r\n\r\n* Make DEFAULT_CONSTRUCTOR_MARKER public\r\n\r\n* Look up constructor via getDeclaredConstructor with exact param types\r\n\r\nResolves #975\r\n\r\n* Remove dead code\r\n", "commitDateTime": "2019-10-30 00:39:08", "authoredDateTime": "2019-10-30 00:39:08", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/AdapterGenerator.kt", "insertions": 24, "deletions": 7, "lines": 31}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/kotlintypes.kt", "insertions": 36, "deletions": 1, "lines": 37}, {"filePath": "kotlin/reflect/src/main/test/java/com/squareup/moshi/kotlin/reflect/KotlinJsonAdapterTest.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 20, "deletions": 0, "lines": 20}, {"filePath": "moshi/src/main/java/com/squareup/moshi/internal/Util.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Util.java", "spoonMethods": [{"spoonMethodName": "com.squareup.moshi.internal.Util", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "kapt: java.lang.IllegalArgumentException: abstract function internalReadFromProfile cannot have code", "body": "I know this is *very* early, but... in case it helps. \ud83d\ude42\r\n\r\nUsing `com.squareup.moshi:moshi:1.9.0` and `com.squareup.moshi:moshi-kotlin-codegen:1.9.0`, I get this error at build time. Works fine with 1.8.0.\r\n\r\n```\r\n\r\n> Task :common:kaptFrDebugKotlin FAILED\r\ne: [kapt] An exception occurred: java.lang.IllegalArgumentException: abstract function internalReadFromProfile cannot have code\r\n\tat com.squareup.kotlinpoet.FunSpec.<init>(FunSpec.kt:55)\r\n\tat com.squareup.kotlinpoet.FunSpec.<init>(FunSpec.kt:37)\r\n\tat com.squareup.kotlinpoet.FunSpec$Builder.build(FunSpec.kt:486)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs.toFunSpec(KotlinPoetMetadataSpecs.kt:582)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs.access$toFunSpec(KotlinPoetMetadataSpecs.kt:1)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs$toTypeSpec$26.invoke(KotlinPoetMetadataSpecs.kt:429)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs$toTypeSpec$26.invoke(KotlinPoetMetadataSpecs.kt)\r\n\tat kotlin.sequences.TransformingSequence$iterator$1.next(Sequences.kt:172)\r\n\tat com.squareup.kotlinpoet.TypeSpec$Builder.addFunctions(TypeSpec.kt:786)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs.toTypeSpec(KotlinPoetMetadataSpecs.kt:403)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs.toTypeSpec(KotlinPoetMetadataSpecs.kt:173)\r\n\tat com.squareup.moshi.kotlinpoet.metadata.specs.KotlinPoetMetadataSpecs.toTypeSpec(KotlinPoetMetadataSpecs.kt:144)\r\n\tat com.squareup.moshi.kotlin.codegen.MetadataKt.declaredProperties$default(metadata.kt:209)\r\n\tat com.squareup.moshi.kotlin.codegen.MetadataKt.targetType(metadata.kt:187)\r\n\tat com.squareup.moshi.kotlin.codegen.JsonClassCodegenProcessor.adapterGenerator(JsonClassCodegenProcessor.kt:133)\r\n\tat com.squareup.moshi.kotlin.codegen.JsonClassCodegenProcessor.process(JsonClassCodegenProcessor.kt:107)\r\n\tat org.jetbrains.kotlin.kapt3.base.incremental.IncrementalProcessor.process(incrementalProcessors.kt)\r\n\tat org.jetbrains.kotlin.kapt3.base.ProcessorWrapper.process(annotationProcessing.kt:147)\r\n\tat com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:794)\r\n\tat com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:705)\r\n\tat com.sun.tools.javac.processing.JavacProcessingEnvironment.access$1800(JavacProcessingEnvironment.java:91)\r\n\tat com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1035)\r\n\tat com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1176)\r\n\tat com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1170)\r\n\tat com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1068)\r\n\tat org.jetbrains.kotlin.kapt3.base.AnnotationProcessingKt.doAnnotationProcessing(annotationProcessing.kt:79)\r\n\tat org.jetbrains.kotlin.kapt3.base.AnnotationProcessingKt.doAnnotationProcessing$default(annotationProcessing.kt:35)\r\n\tat org.jetbrains.kotlin.kapt3.AbstractKapt3Extension.runAnnotationProcessing(Kapt3Extension.kt:230)\r\n\tat org.jetbrains.kotlin.kapt3.AbstractKapt3Extension.analysisCompleted(Kapt3Extension.kt:188)\r\n\tat org.jetbrains.kotlin.kapt3.ClasspathBasedKapt3Extension.analysisCompleted(Kapt3Extension.kt:99)\r\n\tat org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM$analyzeFilesWithJavaIntegration$2.invoke(TopDownAnalyzerFacadeForJVM.kt:96)\r\n\tat org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration(TopDownAnalyzerFacadeForJVM.kt:106)\r\n\tat org.jetbrains.kotlin.cli.jvm.compiler.TopDownAnalyzerFacadeForJVM.analyzeFilesWithJavaIntegration$default(TopDownAnalyzerFacadeForJVM.kt:81)\r\n\tat org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler$analyze$1.invoke(KotlinToJVMBytecodeCompiler.kt:555)\r\n\tat org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler$analyze$1.invoke(KotlinToJVMBytecodeCompiler.kt:82)\r\n\tat org.jetbrains.kotlin.cli.common.messages.AnalyzerWithCompilerReport.analyzeAndReport(AnalyzerWithCompilerReport.kt:107)\r\n\tat org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.analyze(KotlinToJVMBytecodeCompiler.kt:546)\r\n\tat org.jetbrains.kotlin.cli.jvm.compiler.KotlinToJVMBytecodeCompiler.compileModules$cli(KotlinToJVMBytecodeCompiler.kt:177)\r\n\tat org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:164)\r\n\tat org.jetbrains.kotlin.cli.jvm.K2JVMCompiler.doExecute(K2JVMCompiler.kt:54)\r\n\tat org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:84)\r\n\tat org.jetbrains.kotlin.cli.common.CLICompiler.execImpl(CLICompiler.kt:42)\r\n\tat org.jetbrains.kotlin.cli.common.CLITool.exec(CLITool.kt:104)\r\n\tat org.jetbrains.kotlin.daemon.CompileServiceImpl.compile(CompileServiceImpl.kt:1558)\r\n\tat sun.reflect.GeneratedMethodAccessor108.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)\r\n\tat sun.rmi.transport.Transport$1.run(Transport.java:200)\r\n\tat sun.rmi.transport.Transport$1.run(Transport.java:197)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat sun.rmi.transport.Transport.serviceCall(Transport.java:196)\r\n\tat sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)\r\n\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)\r\n\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n\r\n\r\n> Task :xxxxxxxxxxxx:generateFrDebugRFile\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':common:kaptFrDebugKotlin'.\r\n> Compilation error. See log for more details\r\n\r\n* Try:\r\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\r\n\r\n* Get more help at https://help.gradle.org\r\n\r\nBUILD FAILED in 22s\r\n```", "url": "https://github.com/square/moshi/issues/974", "user": "outadoc", "labels": ["Kotlin - code gen", "bug"], "created": "2019-10-29 16:47:30", "closed": "2019-10-31 01:11:06", "commits": {"510d189e4eb7e2ac958c45cd85144425afe2ef5b": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "ac789070e8e7cee88fa35ad6c01ddb7d8fd5cfdb": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "510d189e4eb7e2ac958c45cd85144425afe2ef5b", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["a384bd0429e1c0b89e1b7ccaf58d8a2c1c31dcb7"], "nameRev": "510d189e4eb7e2ac958c45cd85144425afe2ef5b tags/moshi-parent-1.9.1~3^2", "commitMessage": "Add an abstract non-unit function regression for #974\n\nResolves #974 for good\n", "commitDateTime": "2019-10-30 20:24:22", "authoredDateTime": "2019-10-30 20:24:22", "commitGitStats": [{"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 8, "deletions": 1, "lines": 9}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "ac789070e8e7cee88fa35ad6c01ddb7d8fd5cfdb", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": ["9a0294c3a06e6294403df0bc688e4f9bd16a844d", "510d189e4eb7e2ac958c45cd85144425afe2ef5b"], "nameRev": "ac789070e8e7cee88fa35ad6c01ddb7d8fd5cfdb tags/moshi-parent-1.9.1~3", "commitMessage": "Merge pull request #988 from square/z/regressionForAbstract\n\nAdd an abstract non-unit function regression for #974", "commitDateTime": "2019-10-30 21:11:05", "authoredDateTime": "2019-10-30 21:11:05", "commitGitStats": [{"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 8, "deletions": 1, "lines": 9}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["510d189e4eb7e2ac958c45cd85144425afe2ef5b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Exclude property with Delegate -- kotlin code gen", "body": "The generated adapter for this class behaves differently than the reflection version. When using the `KotlinJsonAdapterFactory` and not the generated adapter the result is an empty json-object, but the generated adapter still serializes the `foo` property.\r\n```kotlin\r\n@JsonClass(generateAdapter = true)\r\nclass DelegateTest {\r\n\t@delegate:Transient\r\n\tvar foo: Int by Delegates.observable(5) { _, o, n -> println(\"$o -> $n\")}\r\n}\r\nval test = DelegateTest()\r\ntest.foo = 10\r\nval moshi = Moshi.Builder().build()\r\nval adapter = moshi.adapter(DelegateTest::class.java)\r\nval json = adapter.toJson(test)  // json contains property foo, but shouldn't\r\nval result = adapter.fromJson(json) // result.foo is 10, but I would expect it to be 5\r\n```\r\nI'm willing to look into a fix for this if you accept PRs.", "url": "https://github.com/square/moshi/issues/922", "user": "Wasabi375", "labels": ["Kotlin - reflect", "bug"], "created": "2019-09-13 18:21:11", "closed": "2019-10-17 09:11:56", "commits": {"f51de08caffa0af091b4534e011da7f2bf980448": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 33.000277777777775, "commitsDetails": [{"commitHash": "f51de08caffa0af091b4534e011da7f2bf980448", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["7804d7431865aadc869b9fe41991fcc79288e16b"], "nameRev": "f51de08caffa0af091b4534e011da7f2bf980448 tags/moshi-parent-1.9.0~16", "commitMessage": "added test for transient delegate in kotlin code gen (#922) (#942)\n\n* added test for transient delegate in kotlin code gen (#922)\r\n\r\n* cleanup spaces\r\n\r\nCo-Authored-By: Zac Sweers <pandanomic@gmail.com>\r\n", "commitDateTime": "2019-10-05 16:50:34", "authoredDateTime": "2019-10-05 22:50:34", "commitGitStats": [{"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codegen/GeneratedAdaptersTest.kt", "insertions": 33, "deletions": 0, "lines": 33}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "internal property without backing field leads to NPE - kotlin code gen", "body": "```kotlin\r\n@JsonClass(generateAdapter = true)\r\nclass Test  {\r\n\r\n\t@Transient\r\n\tprivate var foo: Int = 5\r\n\r\n\tinternal var bar\r\n\t\tget() = foo\r\n\t\tset(f: Int) { foo = f}\r\n}\r\n```\r\nThis crashes with a NPE during code generation. The problem as far as I can tell is that `TargetType.get(...)` generates a property for the Test class with backing field, getter and setter set to `null`.  That leads to an NPE when `TargetProperty.element` is called. The relevant part of the stacktrace is \r\n\r\n> kotlin.KotlinNullPointerException\r\n        at com.squareup.moshi.kotlin.codegen.TargetProperty.getElement(TargetProperty.kt:61)\r\n        at com.squareup.moshi.kotlin.codegen.TargetProperty.jsonQualifiers(TargetProperty.kt:124)\r\n        at com.squareup.moshi.kotlin.codegen.TargetProperty.generator(TargetProperty.kt:95)\r\n        at com.squareup.moshi.kotlin.codegen.JsonClassCodegenProcessor.adapterGenerator(JsonClassCodegenProcessor.kt:103)\r\n        at com.squareup.moshi.kotlin.codegen.JsonClassCodegenProcessor.process(JsonClassCodegenProcessor.kt:89)\r\n        at org.jetbrains.kotlin.kapt3.base.incremental.IncrementalProcessor.process(incrementalProcessors.kt)\r\n\r\nI was looking into how to fix this, but I am not entirely sure. The problem is that kotlin obfuscates the names of  internal functions/properties. For properties it obfuscates getters/setters. This means internal properties with backing fields are fine, since the backing field does not get obfuscated. But as soon as there is no backing field or the property is backed by a Delegate the code gen crashes.\r\n", "url": "https://github.com/square/moshi/issues/921", "user": "Wasabi375", "labels": ["bug"], "created": "2019-09-13 02:15:45", "closed": "2019-10-17 09:12:05", "commits": {"666d87be65e67138caab88a92658990836c01b36": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 34.000277777777775, "commitsDetails": [{"commitHash": "666d87be65e67138caab88a92658990836c01b36", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["f51de08caffa0af091b4534e011da7f2bf980448"], "nameRev": "666d87be65e67138caab88a92658990836c01b36 tags/moshi-parent-1.9.0~15", "commitMessage": "added test for internal property without backing field (#921) (#947)\n\n", "commitDateTime": "2019-10-05 16:51:48", "authoredDateTime": "2019-10-05 22:51:48", "commitGitStats": [{"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codegen/GeneratedAdaptersTest.kt", "insertions": 21, "deletions": 0, "lines": 21}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "1.9.0-SNAPSHOT: Error compiling generated adapter for generic class", "body": "Code like this is generated by the latest snapshot for generic class `Foo<T>`:\r\n```kotlin\r\nval localConstructor = this.constructorRef ?:\r\n                Util.lookupDefaultsConstructor(Foo<T>::class.java).also {\r\n                this.constructorRef = it }\r\n```\r\n\r\nCompiling this code results in error:\r\n```\r\nFooJsonAdapter.kt: Only classes are allowed on the left hand side of a class literal\r\n```", "url": "https://github.com/square/moshi/issues/905", "user": "technoir42", "labels": ["bug"], "created": "2019-09-09 20:45:03", "closed": "2019-09-13 01:55:48", "commits": {"c0fd061cc6495e7c2fc4883d62af69175ca52ee1": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "81e37e7b70cfcac0296ec0d896f28d1ceecfdb7d": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "1e541fc66cb391ee477d59f1b2ef92852dd86771": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "c0fd061cc6495e7c2fc4883d62af69175ca52ee1", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "81e37e7b70cfcac0296ec0d896f28d1ceecfdb7d", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "1e541fc66cb391ee477d59f1b2ef92852dd86771", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["dd0e3807d3a7fa22f166c750c732cc9f113a9f1a"], "nameRev": "1e541fc66cb391ee477d59f1b2ef92852dd86771 tags/moshi-parent-1.9.0~26", "commitMessage": "Use raw type for kclass references in dynamic invocation code gen (#911)\n\n* Use raw type for kclass references in dynamic invocation code gen\r\n\r\nAdded a compile-only regression test\r\nResolves #905\r\n\r\n* Make it actually generic\r\n\r\n* Mostly fix generation\r\n\r\nWill need to wait for inlined instantiation to merge\r\n\r\n* Fix rebase issues and use newInstance\r\n", "commitDateTime": "2019-09-12 21:55:47", "authoredDateTime": "2019-09-12 21:55:47", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/AdapterGenerator.kt", "insertions": 27, "deletions": 8, "lines": 35}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DefaultConstructorTest.kt", "insertions": 8, "deletions": 0, "lines": 8}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Kotlin - Can't deserialize field with 'synchronized' val name", "body": "## Issue description\r\n\r\n`val` can't have _**synchronized**_ as variable identifier because deserialization will fail at runtime for that specific field:\r\n\r\n```\r\ncom.squareup.moshi.JsonDataException: Required property 'synchronized' missing at $.Channel.Items[0]\r\n        at co.arkbox.msg.model.ItemJsonAdapter.fromJson(ItemJsonAdapter.kt:94)\r\n        at co.arkbox.msg.model.ItemJsonAdapter.fromJson(ItemJsonAdapter.kt:16)\r\n        at com.squareup.moshi.JsonAdapter$2.fromJson(JsonAdapter.java:137)\r\n        at com.squareup.moshi.CollectionJsonAdapter.fromJson(CollectionJsonAdapter.java:76)\r\n        at com.squareup.moshi.CollectionJsonAdapter$2.fromJson(CollectionJsonAdapter.java:53)\r\n        at com.squareup.moshi.JsonAdapter$2.fromJson(JsonAdapter.java:137)\r\n        at co.arkbox.msg.model.ChannelJsonAdapter.fromJson(ChannelJsonAdapter.kt:70)\r\n        at co.arkbox.msg.model.ChannelJsonAdapter.fromJson(ChannelJsonAdapter.kt:16)\r\n        at com.squareup.moshi.JsonAdapter$2.fromJson(JsonAdapter.java:137)\r\n        at co.arkbox.msg.model.MessageJsonAdapter.fromJson(MessageJsonAdapter.kt:40)\r\n        at co.arkbox.msg.model.MessageJsonAdapter.fromJson(MessageJsonAdapter.kt:13)\r\n        at com.squareup.moshi.JsonAdapter$2.fromJson(JsonAdapter.java:137)\r\n        at retrofit2.converter.moshi.MoshiResponseBodyConverter.convert(MoshiResponseBodyConverter.java:45)\r\n        at retrofit2.converter.moshi.MoshiResponseBodyConverter.convert(MoshiResponseBodyConverter.java:27)\r\n        at retrofit2.OkHttpCall.parseResponse(OkHttpCall.java:223)\r\n        at retrofit2.OkHttpCall$1.onResponse(OkHttpCall.java:121)\r\n        at okhttp3.RealCall$AsyncCall.execute(RealCall.java:174)\r\n        at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)\r\n        at java.lang.Thread.run(Thread.java:764)\r\n```\r\n\r\n**Kotlin**\r\n\r\n```\r\n@JsonClass(generateAdapter = true)\r\ndata class Message(\r\n    @field:Json(name = \"Title\") val title: String,\r\n    @field:Json(name = \"Channel\") val channel: Channel\r\n)\r\n\r\n@JsonClass(generateAdapter = true)\r\ndata class Channel(\r\n    @field:Json(name = \"ChannelId\") val channelId: Int,\r\n    @field:Json(name = \"Items\") val itemList: List<Item>\r\n)\r\n\r\n@JsonClass(generateAdapter = true)\r\ndata class Item(\r\n    @field:Json(name = \"Id\") val id: Int,\r\n    @field:Json(name = \"Description\") val description: String,\r\n    @field:Json(name = \"Order\") val order: Int,\r\n    // Failure: This won't work >>\r\n    @field:Json(name = \"Synchronized\") val synchronized: Boolean\r\n)\r\n\r\n```\r\n\r\n**Json**\r\n\r\n```\r\n{\r\n  \"Title\": \"Container 1\",\r\n  \"Channel\": {\r\n    \"ChannelId\": 192,\r\n    \"Items\": [\r\n      {\r\n        \"ItemId\": 5960,\r\n        \"Description\": \"Item 5960\",\r\n        \"Order\": 1,\r\n        \"Synchronized\": false\r\n      }\r\n    ]\r\n  }\r\n}\r\n```\r\n\r\nOnce the variable _**synchronized**_ has been renamed to something else, the deserialization works correctly\r\n\r\n```\r\n   ...\r\n    // OK: This works correctly >>\r\n    @field:Json(name = \"Synchronized\") val newNonConflictingName: Boolean\r\n   ...\r\n```\r\n\r\nOn the other hand, if the variable _**synchronized**_ is `Nullable` (in this case `Boolean?`) the deserialization won't fail, nevertheless _**synchronized**_ would be set to `null` even though there is an existent value `true/false` in the Json property\r\n\r\n```\r\n   ...\r\n    // false/true deserialized as null >>\r\n    @field:Json(name = \"Synchronized\") val synchronized: Boolean?\r\n   ...\r\n```\r\n\r\n## Integration method\r\n\r\n**Gradle 5.1.1**\r\n\r\n```\r\nimplementation \"com.squareup.moshi:moshi:1.8.0\"\r\nkapt \"com.squareup.moshi:moshi-kotlin-codegen:1.8.0\"\r\n```\r\n\r\n## Moshi version\r\n\r\n1.8.0\r\n\r\n## Kotlin version\r\n\r\n1.3.31\r\n\r\n## System Information\r\n\r\nAndroid Studio 3.4\r\nBuild #AI-183.5429.30.34.5452501, built on April 10, 2019\r\nJRE: 1.8.0_152-release-1343-b01 x86_64\r\nJVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o\r\nmacOS 10.14.5", "url": "https://github.com/square/moshi/issues/857", "user": "juliancadi", "labels": ["bug"], "created": "2019-05-28 22:28:43", "closed": "2019-09-11 08:02:59", "commits": {}, "ttf": 105.00027777777778, "commitsDetails": []}, {"title": "Generated serialization for field named with hot keywords", "body": "I use `class` as response field. In kotlin: \r\n\r\n```\r\n@Keep\r\n@JsonClass(generateAdapter = true)\r\ndata class StaticLabelField(\r\n        override val key: String,\r\n        override val label: String,\r\n        override val order: Int,\r\n        override val condition: Condition? = null,\r\n        val `class`: List<String>?\r\n) : Field(), Validatable {\r\n    override fun validator() = null\r\n}\r\n```\r\nWhen using moshi to generate adapter code, it's not 'blocking/escaping' that field in `toJson` method: \r\n\r\n```\r\noverride fun toJson(writer: JsonWriter, value: Field.StaticLabelField?) {\r\n    if (value == null) {\r\n        throw NullPointerException(\"value was null! Wrap in .nullSafe() to write nullable values.\")\r\n    }\r\n    writer.beginObject()\r\n    writer.name(\"key\")\r\n    stringAdapter.toJson(writer, value.key)\r\n    writer.name(\"label\")\r\n    stringAdapter.toJson(writer, value.label)\r\n    writer.name(\"order\")\r\n    intAdapter.toJson(writer, value.order)\r\n    writer.name(\"condition\")\r\n    nullableConditionAdapter.toJson(writer, value.condition)\r\n    writer.name(\"class\")\r\n    nullableListOfStringAdapter.toJson(writer, value.class) // <==== field with name 'class' has different result than intended.\r\n    writer.endObject()\r\n}\r\n```\r\n\r\nI worked it around by using `Json` annotation and different name for the field, but I think this is a bug that might be worth fixing. ", "url": "https://github.com/square/moshi/issues/848", "user": "dbarwacz", "labels": ["bug"], "created": "2019-05-09 19:37:54", "closed": "2019-09-12 18:13:24", "commits": {}, "ttf": 125.00027777777778, "commitsDetails": []}, {"title": "Codegen uses wrong name in generated exception message", "body": "Test data class:\r\n```kotlin\r\npackage com.company.package\r\n\r\nimport com.squareup.moshi.Json\r\nimport com.squareup.moshi.JsonClass\r\n\r\n@JsonClass(generateAdapter = true)\r\ndata class Test(\r\n        @Json(name = \"json_property_name\")\r\n        val kotlinPropertyName: String\r\n)\r\n```\r\n\r\nResulting in the generated adapter:\r\n```kotlin\r\n// Code generated by moshi-kotlin-codegen. Do not edit.\r\npackage com.company.package\r\n\r\nimport com.squareup.moshi.JsonAdapter\r\nimport com.squareup.moshi.JsonDataException\r\nimport com.squareup.moshi.JsonReader\r\nimport com.squareup.moshi.JsonWriter\r\nimport com.squareup.moshi.Moshi\r\nimport java.lang.NullPointerException\r\nimport kotlin.String\r\n\r\nclass TestJsonAdapter(moshi: Moshi) : JsonAdapter<Test>() {\r\n    private val options: JsonReader.Options = JsonReader.Options.of(\"json_property_name\")\r\n\r\n    private val stringAdapter: JsonAdapter<String> =\r\n            moshi.adapter<String>(String::class.java, kotlin.collections.emptySet(), \"kotlinPropertyName\")\r\n\r\n    override fun toString(): String = \"GeneratedJsonAdapter(Test)\"\r\n\r\n    override fun fromJson(reader: JsonReader): Test {\r\n        var kotlinPropertyName: String? = null\r\n        reader.beginObject()\r\n        while (reader.hasNext()) {\r\n            when (reader.selectName(options)) {\r\n                0 -> kotlinPropertyName = stringAdapter.fromJson(reader) ?: throw JsonDataException(\"Non-null value 'kotlinPropertyName' was null at ${reader.path}\")\r\n                -1 -> {\r\n                    // Unknown name, skip it.\r\n                    reader.skipName()\r\n                    reader.skipValue()\r\n                }\r\n            }\r\n        }\r\n        reader.endObject()\r\n        var result = Test(\r\n                kotlinPropertyName = kotlinPropertyName ?: throw JsonDataException(\"Required property 'kotlinPropertyName' missing at ${reader.path}\"))\r\n        return result\r\n    }\r\n\r\n    override fun toJson(writer: JsonWriter, value: Test?) {\r\n        if (value == null) {\r\n            throw NullPointerException(\"value was null! Wrap in .nullSafe() to write nullable values.\")\r\n        }\r\n        writer.beginObject()\r\n        writer.name(\"json_property_name\")\r\n        stringAdapter.toJson(writer, value.kotlinPropertyName)\r\n        writer.endObject()\r\n    }\r\n}\r\n```\r\n\r\nWrong part:\r\n```kotlin\r\nthrow JsonDataException(\"Required property 'kotlinPropertyName' missing at ${reader.path}\")\r\n```\r\n\r\nThe exception message should state the property name used in the JSON data (`json_property_name`) instead of the name in the kotlin class (`kotlinPropertyName`). Because it mentions the JSON path, it's more consistent to also use the JSON property name.\r\n\r\nI think it should generate:\r\n```kotlin\r\nthrow JsonDataException(\"Required property 'json_property_name' missing at ${reader.path}\")\r\n```\r\n\r\nIt could be fixed by changing `property.localName` to `property.jsonName` in the [AdapterGenerator](https://github.com/square/moshi/blob/ded3bccc6089c8a39ca1ebf7227fcee122572512/kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/AdapterGenerator.kt#L234). I'm not sure if you agree, but IMO it would make more sense to use the JSON property name instead of the local property name in the message. I will create a pull request.", "url": "https://github.com/square/moshi/issues/800", "user": "dvdmunckhof", "labels": ["bug"], "created": "2019-01-29 12:44:47", "closed": "2019-10-01 03:04:22", "commits": {"733d9544f77fcced58c3f5f3773f03ae096df8e8": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "f5476f4b8dd67d8c233d2e527f6435d6a6c58c8a": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "fb1b177813cf2be0a2e80a8e22d69e294a1c0a9f": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "896e211e1001f8e5dc325d17d7ec5b43bf112527": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "7804d7431865aadc869b9fe41991fcc79288e16b": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 244.00027777777777, "commitsDetails": [{"commitHash": "733d9544f77fcced58c3f5f3773f03ae096df8e8", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "f5476f4b8dd67d8c233d2e527f6435d6a6c58c8a", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "fb1b177813cf2be0a2e80a8e22d69e294a1c0a9f", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "896e211e1001f8e5dc325d17d7ec5b43bf112527", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "7804d7431865aadc869b9fe41991fcc79288e16b", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["336ca952b02b08db07b52d4b1e47968a6ed9116f"], "nameRev": "7804d7431865aadc869b9fe41991fcc79288e16b tags/moshi-parent-1.9.0~17", "commitMessage": "Report json name if different from property name in kotlin (#917)\n\n* Report json name in code gen if different from property name\r\n\r\nResolves #800\r\n\r\n* Unify required property name error message\r\n\r\n* Report json name in kotlinjsonadapter, match code gen\r\n\r\n* Upper case JSON\r\n\r\nCo-Authored-By: Jake Wharton <jakew@google.com>\r\n\r\n* Upper case JSON\r\n\r\nCo-Authored-By: Jake Wharton <jakew@google.com>\r\n\r\n* Don't keep constants\r\n\r\n* Inline json name - property name comparison to util methods\r\n\r\n* Remove unnecessary constructor keyword\r\n\r\n* Consolidate non-null/missing property tests to parameterized suite\r\n\r\n* Add custom json name tests for nonNull property checks\r\n\r\n* Rename test to make maven happy\r\n\r\nMaven won't run the test unless it ends with `Test` or `TestCase`\r\n", "commitDateTime": "2019-09-30 23:04:21", "authoredDateTime": "2019-09-30 23:04:21", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/api/AdapterGenerator.kt", "insertions": 7, "deletions": 5, "lines": 12}, {"filePath": "kotlin/reflect/src/main/java/com/squareup/moshi/kotlin/reflect/KotlinJsonAdapter.kt", "insertions": 18, "deletions": 6, "lines": 24}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/DualKotlinTest.kt", "insertions": 255, "deletions": 0, "lines": 255}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codegen/GeneratedAdaptersTest.kt", "insertions": 1, "deletions": 130, "lines": 131}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/reflect/KotlinJsonAdapterTest.kt", "insertions": 1, "deletions": 101, "lines": 102}, {"filePath": "moshi/src/main/java/com/squareup/moshi/internal/Util.java", "insertions": 28, "deletions": 12, "lines": 40}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Util.java", "spoonMethods": [{"spoonMethodName": "com.squareup.moshi.internal.Util.jsonDataException(java.lang.String,java.lang.String,com.squareup.moshi.JsonReader)", "TOT": 9, "UPD": 5, "INS": 0, "MOV": 4, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.internal.Util.unexpectedNull(java.lang.String,com.squareup.moshi.JsonReader)", "TOT": 6, "UPD": 2, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "com.squareup.moshi.internal.Util", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "com.squareup.moshi.internal.Util.missingProperty(java.lang.String,com.squareup.moshi.JsonReader)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 3, "DEL": 1}, {"spoonMethodName": "com.squareup.moshi.internal.Util.missingProperty(java.lang.String,java.lang.String,com.squareup.moshi.JsonReader)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 4, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Kotlin multiple @Transient fields", "body": "Having more than one @ Transient field is causing following exception.\r\n\r\n```\r\nException in thread \"main\" java.lang.IllegalArgumentException: duplicate option: [text=\\\\u0000\"]\r\n\tat okio.Options.of(Options.java:66)\r\n\tat com.squareup.moshi.JsonReader$Options.of(JsonReader.java:538)\r\n\tat com.squareup.moshi.kotlin.reflect.KotlinJsonAdapterFactory.create(KotlinJsonAdapter.kt:260)\r\n\tat com.squareup.moshi.Moshi.adapter(Moshi.java:137)\r\n\tat com.squareup.moshi.Moshi.adapter(Moshi.java:97)\r\n\tat com.squareup.moshi.Moshi.adapter(Moshi.java:71)\r\n\r\n```\r\n\r\nCode to reproduce\r\n\r\n```\r\ndata class TransientTest(\r\n        val a: String,\r\n        @Transient\r\n        val b: String? = \"b\",\r\n        @Transient\r\n        val c: String? = \"c\"\r\n)\r\n\r\nfun main(args: Array<String>) {\r\n\r\n    val adapter = Moshi.Builder()\r\n            .add(KotlinJsonAdapterFactory())\r\n            .build()\r\n            .adapter(TransientTest::class.java)\r\n\r\n    val test = TransientTest(\"a\")\r\n\r\n    adapter.toJson(test)\r\n}\r\n```", "url": "https://github.com/square/moshi/issues/775", "user": "vehovsky", "labels": ["bug"], "created": "2018-12-26 22:51:04", "closed": "2019-10-27 20:17:04", "commits": {}, "ttf": 304.0002777777778, "commitsDetails": []}, {"title": "IllegalStateException: Type adapter isn't ready", "body": "Got some very very very rare exception (see below).\r\n\r\nAny idea of the cause and possible workaround ?\r\n```\r\nFatal Exception: java.lang.IllegalStateException: Type adapter isn't ready\r\n       at com.squareup.moshi.Moshi$DeferredAdapter.toJson(Moshi.java:272)\r\n       at com.squareup.moshi.MapJsonAdapter.toJson(MapJsonAdapter.java:1057)\r\n       at com.squareup.moshi.JsonAdapter$2.toJson(JsonAdapter.java:144)\r\n       at com.squareup.moshi.StandardJsonAdapters$ObjectJsonAdapter.toJson(StandardJsonAdapters.java:367)\r\n       at com.squareup.moshi.JsonAdapter$2.toJson(JsonAdapter.java:144)\r\n       at com.squareup.moshi.ClassJsonAdapter.com.squareup.moshi.ClassJsonAdapter$FieldBinding.write(ClassJsonAdapter.java:1203)\r\n       at com.squareup.moshi.JsonAdapter$2.toJson(JsonAdapter.java:144)\r\n       at com.squareup.moshi.JsonAdapter.toJson(JsonAdapter.java:52)\r\n       at com.squareup.moshi.JsonAdapter.toJson(JsonAdapter.java:58)\r\n       at com.mediacenters.kodi.api.KodiApi$JsonRpcCall.getBody(KodiApi.kt:71)\r\n       at com.mediacenters.kodi.api.KodiApiConnection$asynchronousCall$1$$special$$inlined$forEach$lambda$1.invoke(KodiApiConnection.kt:1069)\r\n       at kotlin.text.StringsKt__StringBuilderKt.appendElement(StringBuilder.kt:58)\r\n       at kotlin.collections.CollectionsKt___CollectionsKt.sortedWith(_Collections.kt:2195)\r\n       at com.mediacenters.kodi.api.KodiApiConnection$asynchronousCall$1.kotlin.collections.CollectionsKt___CollectionsKt.joinTo$default$1296cf06(KodiApiConnection.kt:5189)\r\n       at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1162)\r\n       at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:636)\r\n       at java.lang.Thread.run(Thread.java:764)\r\n```", "url": "https://github.com/square/moshi/issues/679", "user": "Tolriq", "labels": ["bug"], "created": "2018-09-22 16:25:59", "closed": "2018-10-23 01:31:52", "commits": {"8b4681ab8d356599791e09299d6f31443d08db05": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}, "8afb8a8e4c5cb5b778de1e78af8983597b26f0a3": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}, "ce65ff5527fe54dbd3116cc33b6e9cb67f02aca1": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}}, "ttf": 30.00027777777778, "commitsDetails": [{"commitHash": "8b4681ab8d356599791e09299d6f31443d08db05", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "8afb8a8e4c5cb5b778de1e78af8983597b26f0a3", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "ce65ff5527fe54dbd3116cc33b6e9cb67f02aca1", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": ["1896e0f118044c8df449d91dd20518fadbb9a4d1"], "nameRev": "ce65ff5527fe54dbd3116cc33b6e9cb67f02aca1 tags/moshi-parent-1.8.0~13^2", "commitMessage": "Fix a race condition on deferred adapters\n\nThis changes how we lookup and cache adapters. Previously we were pretty\noptimistic about putting adapters in the cache; these adapters could have\ndepended upon stubs that were incomplete.\n\nNow we're a lot more careful: we only put adapters in the cache if the\nroot object that triggered a set of recursive calls was constructed\nsuccessfully.\n\nCloses: https://github.com/square/moshi/issues/679\n", "commitDateTime": "2018-10-22 21:06:31", "authoredDateTime": "2018-10-21 22:01:23", "commitGitStats": [{"filePath": "moshi/src/main/java/com/squareup/moshi/Moshi.java", "insertions": 136, "deletions": 77, "lines": 213}, {"filePath": "moshi/src/test/java/com/squareup/moshi/DeferredAdapterTest.java", "insertions": 117, "deletions": 0, "lines": 117}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Moshi.java", "spoonMethods": [{"spoonMethodName": "com.squareup.moshi.Moshi", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.Moshi.DeferredAdapter", "TOT": 7, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "com.squareup.moshi.Moshi.adapter(java.lang.reflect.Type,java.util.Set,java.lang.String)", "TOT": 59, "UPD": 17, "INS": 1, "MOV": 36, "DEL": 5}, {"spoonMethodName": "com.squareup.moshi.Moshi.errorWithFields(java.util.List,java.lang.IllegalArgumentException)", "TOT": 14, "UPD": 9, "INS": 0, "MOV": 1, "DEL": 4}, {"spoonMethodName": "com.squareup.moshi.Moshi.DeferredAdapter.toJson(com.squareup.moshi.JsonWriter,java.lang.Object)", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.Moshi.DeferredAdapter.fromJson(com.squareup.moshi.JsonReader)", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.Moshi.LookupChain", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.Moshi.Lookup", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.Moshi.LookupChain.push(java.lang.reflect.Type,java.lang.String,java.lang.Object)", "TOT": 6, "UPD": 0, "INS": 6, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.Moshi.LookupChain.exceptionWithLookupStack(java.lang.IllegalArgumentException)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.Moshi.LookupChain.pop(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DeferredAdapterTest.java", "spoonMethods": [{"spoonMethodName": "com.squareup.moshi.DeferredAdapterTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ce65ff5527fe54dbd3116cc33b6e9cb67f02aca1"], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 136.0, "deletions": 77.0, "lines": 213.0, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 103.0, "UPD": 42.0, "INS": 13.0, "MOV": 37.0, "DEL": 11.0, "spoonFilesChanged": 1, "spoonMethodsChanged": 11}, "statsSkippedReason": "", "changesInPackagesGIT": ["moshi/src/main/java/com/squareup/moshi"], "changesInPackagesSPOON": ["com.squareup.moshi.Moshi.DeferredAdapter", "com.squareup.moshi.Moshi.errorWithFields(java.util.List,java.lang.IllegalArgumentException)", "com.squareup.moshi.Moshi.DeferredAdapter.toJson(com.squareup.moshi.JsonWriter,java.lang.Object)", "com.squareup.moshi.Moshi.Lookup", "com.squareup.moshi.Moshi", "com.squareup.moshi.Moshi.LookupChain.push(java.lang.reflect.Type,java.lang.String,java.lang.Object)", "com.squareup.moshi.Moshi.DeferredAdapter.fromJson(com.squareup.moshi.JsonReader)", "com.squareup.moshi.Moshi.LookupChain.pop(boolean)", "com.squareup.moshi.Moshi.adapter(java.lang.reflect.Type,java.util.Set,java.lang.String)", "com.squareup.moshi.Moshi.LookupChain.exceptionWithLookupStack(java.lang.IllegalArgumentException)", "com.squareup.moshi.Moshi.LookupChain"]}, {"title": "@Transient private var in Kotlin class won't compile", "body": "Using codegen, this Kotlin code compiles:\r\n```\r\n@JsonClass(generateAdapter = true)\r\ndata class Foo(\r\n        val bar: Int\r\n) {\r\n    @Transient\r\n    var bug: String? = null\r\n}\r\n```\r\nBut adding `private` to the `bug` `var`...\r\n```\r\n...\r\n    @Transient\r\n    private var bug: String? = null\r\n...\r\n```\r\n...fails to compile with this error:\r\n\r\n```\r\n...\\app\\build\\tmp\\kapt3\\stubs\\debug\\...\\Foo.java:8: error: property bug is not visible\r\n    private transient java.lang.String bug;\r\n                                       ^\r\n```\r\n\r\nThe [README example](https://github.com/square/moshi/blob/master/README.md#omit-fields-with-transient) Java code uses a `private` `transient`. It's not clear why the private transient variable in Kotlin isn't allowed.\r\n\r\nThis is using Moshi v1.6.0.", "url": "https://github.com/square/moshi/issues/643", "user": "jeffdgr8", "labels": ["bug"], "created": "2018-09-02 06:45:09", "closed": "2018-09-10 03:24:54", "commits": {"f973babeec6106471cf1bddb18554226b8e49726": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}, "1ba07d4b7d6cfe8ecd0bcb08659b33c272c71394": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "f973babeec6106471cf1bddb18554226b8e49726", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "1ba07d4b7d6cfe8ecd0bcb08659b33c272c71394", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": ["cb86194f8ff7f6f9a086a47499a6c59747ebdbba"], "nameRev": "1ba07d4b7d6cfe8ecd0bcb08659b33c272c71394 tags/moshi-parent-1.7.0~21^2", "commitMessage": "Test that @Transient private properties are ignored\n\nCloses: https://github.com/square/moshi/issues/643\n", "commitDateTime": "2018-09-09 23:17:50", "authoredDateTime": "2018-09-09 15:34:58", "commitGitStats": [{"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codgen/GeneratedAdaptersTest.kt", "insertions": 27, "deletions": 0, "lines": 27}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1ba07d4b7d6cfe8ecd0bcb08659b33c272c71394"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Codegen @Json wrong name generation when using special characters", "body": "When using something like:\r\n\r\n```Kotlin\r\ndata class TimeStamp(@Json(name = \"\\$date\") val millis: Long)\r\n```\r\n\r\nIn the generated adapter the name gets converted to:\r\n\r\n```Kotlin\r\nJsonReader.Options.of(\"$date\")\r\n```\r\n\r\nWhich causes an Unresolved reference error when compiling, since the compiler is looking for a variable named 'date'", "url": "https://github.com/square/moshi/issues/602", "user": "pedromvu", "labels": ["bug"], "created": "2018-07-19 18:58:07", "closed": "2018-08-06 02:34:21", "commits": {}, "ttf": 17.00027777777778, "commitsDetails": []}, {"title": "Adapters that convert null to non-null don\u2019t work with codegen", "body": "From [this issue](https://github.com/square/moshi/issues/563#issuecomment-399373718) we have an adapter that converts an explicit null to non-null:\r\n\r\n```\r\nclass DefaultZeroAdapter {\r\n    @FromJson\r\n    @DefaultZero\r\n    fun fromJson(@Nullable jsonFloat: Float?): Float {\r\n        return jsonFloat ?: 0f\r\n    }\r\n\r\n    @ToJson\r\n    fun toJson(@DefaultZero jsonFloat: Float) = jsonFloat\r\n}\r\n```\r\n\r\nUnfortunately our generated code forces the _source_ data to be non-null before it is passed to the adapter.\r\n\r\n```\r\n    private val floatAtDefaultZeroAdapter: JsonAdapter<Float> =\r\n            moshi.adapter<Float>(Float::class.java, Types.getFieldJsonQualifierAnnotations(javaClass, \"floatAtDefaultZeroAdapter\")).nonNull()\r\n```\r\n\r\nThis is a bug. I\u2019m not completely convinced it\u2019s worth fixing, however. The cost in complexity here is pretty high.", "url": "https://github.com/square/moshi/issues/586", "user": "swankjesse", "labels": ["Kotlin - reflect", "bug"], "created": "2018-06-24 14:33:02", "closed": "2018-09-21 03:36:41", "commits": {}, "ttf": 88.00027777777778, "commitsDetails": []}, {"title": "This class shouldn't be used in Kotlin. Use kotlin.Int instead.", "body": "Hello!\r\nCompiler writes a warning: `This class shouldn't be used in Kotlin. Use kotlin.Int instead.`.\r\nIt compiles a Kotlin class \"SomeResponse\" like:\r\n```kotlin\r\nimport com.squareup.moshi.JsonClass\r\n\r\n@JsonClass(generateAdapter = true)\r\ndata class SomeResponse(\r\n    val id: Int,\r\n    val typeId: Int,\r\n    ...\r\n    val banks: List<Int>?,\r\n    val windows: List<String>,\r\n    ...\r\n\r\n```\r\nA generated class is called \"SomeResponseJsonAdapter\" and contains a line besides others:\r\n\r\n    private val nullableListOfIntAdapter: JsonAdapter<List<Int>?> =\r\n            moshi.adapter<List<Int>?>(Types.newParameterizedType(List::class.java, Integer::class.java)).nullSafe()\r\n\r\nThis warning doesn't affect an application running.", "url": "https://github.com/square/moshi/issues/583", "user": "CoolMind", "labels": ["Kotlin - reflect", "bug"], "created": "2018-06-18 09:17:13", "closed": "2019-09-12 20:16:21", "commits": {}, "ttf": 451.0002777777778, "commitsDetails": []}, {"title": "Kotlin codegen - allows null into collection with non-nullable generic type", "body": "Using the Kotlin codegen, if the model object has a list of a non-nullable generic type, null is allowed in when reading from JSON. Example below shown with String for simplicity, but is not limited to just String.\r\n\r\n```\r\n@JsonClass(generateAdapter = true)\r\ndata class MyModel(val nonNullStrings: List<String>)\r\n\r\nclass MoshiTest {\r\n\r\n  @Test fun driver() {\r\n    val moshi = Moshi.Builder().build()\r\n\r\n    val json = \"\"\"\r\n      {\r\n        \"nonNullStrings\" : [\"1\", null, \"3\"]\r\n      }\r\n    \"\"\"\r\n\r\n    val adapter = moshi.adapter(MyModel::class.java)\r\n    println(adapter.fromJson(json)) // prints MyModel(nonNullStrings=[1, null, 3])\r\n  }\r\n\r\n}\r\n```\r\n\r\nWhile hopefully not a common case, could this be made to fail instead of letting null creep in to a collection that isn't meant to contain null objects? Looking at the generated code I can see how this might be tricky to pull off, since it's just delegating to a `moshi.adapter<List<String>>(Types.newParameterizedType(List::class.java, String::class.java)).nonNull()` which rejects a null List itself, but has no knowledge of the nullability of the String type parameter.", "url": "https://github.com/square/moshi/issues/578", "user": "paulblessing", "labels": ["Kotlin - reflect", "bug"], "created": "2018-06-07 14:09:37", "closed": "2018-10-23 01:41:05", "commits": {}, "ttf": 137.00027777777777, "commitsDetails": []}, {"title": "Codegen compilation error for uppercase property name", "body": "```kotlin\r\n@JsonClass(generateAdapter = true)\r\nclass Foo {\r\n  var BAR\r\n    get() = 0\r\n    set(BAR) {\r\n    }\r\n}\r\n```\r\n```\r\n[ERROR] [kapt] An exception occurred: kotlin.KotlinNullPointerException\r\n[ERROR] at com.squareup.moshi.kotlin.codegen.TargetProperty.getElement(TargetProperty.kt:54)\r\n[ERROR] at com.squareup.moshi.kotlin.codegen.TargetProperty.jsonQualifiers(TargetProperty.kt:99)\r\n[ERROR] at com.squareup.moshi.kotlin.codegen.TargetProperty.delegateKey(TargetProperty.kt:95)\r\n[ERROR] at com.squareup.moshi.kotlin.codegen.PropertyGenerator.<init>(PropertyGenerator.kt:24)\r\n[ERROR] at com.squareup.moshi.kotlin.codegen.TargetProperty.generator(TargetProperty.kt:92)\r\n[ERROR] at com.squareup.moshi.kotlin.codegen.JsonClassCodegenProcessor.adapterGenerator(JsonClassCodegenProcessor.kt:101)\r\n[ERROR] at com.squareup.moshi.kotlin.codegen.JsonClassCodegenProcessor.process(JsonClassCodegenProcessor.kt:88)\r\n```\r\n\r\nThe TargetProperty field, setter, and getter are all null from my brief look. Changing \"BAR\" to \"bar\" works.", "url": "https://github.com/square/moshi/issues/574", "user": "NightlyNexus", "labels": ["Kotlin - reflect", "bug"], "created": "2018-06-06 19:46:53", "closed": "2018-09-10 03:32:10", "commits": {"896661d7b2f7759481f473ab5a085f18d8f05ebe": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}, "c008e0e2b6111eb0e10029c74b9972dcca843045": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}}, "ttf": 95.00027777777778, "commitsDetails": [{"commitHash": "896661d7b2f7759481f473ab5a085f18d8f05ebe", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "c008e0e2b6111eb0e10029c74b9972dcca843045", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": ["29d08353ec32b2c8663f783c3d3fc869996751bc"], "nameRev": "c008e0e2b6111eb0e10029c74b9972dcca843045 tags/moshi-parent-1.7.0~20^2", "commitMessage": "Test support for uppercase property names\n\nI couldn't reproduce the reported issue.\n\nCloses: https://github.com/square/moshi/issues/574\n", "commitDateTime": "2018-09-09 23:25:56", "authoredDateTime": "2018-09-09 15:25:22", "commitGitStats": [{"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codgen/GeneratedAdaptersTest.kt", "insertions": 33, "deletions": 0, "lines": 33}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c008e0e2b6111eb0e10029c74b9972dcca843045"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Codegen generates warning with non-data classes containing default values", "body": "Generating this class:\r\n\r\n```kotlin\r\n@JsonClass(generateAdapter = true)\r\nclass Test(\r\n        val a: String,\r\n        val b: String = \"\"\r\n)\r\n```\r\n\r\nWill generate adapter file that would show `Elvis operator (?:) always returns the left operand of non-nullable type String?` warning on compilation.\r\n\r\nI managed to reproduce this with Codegen 1.6.0.", "url": "https://github.com/square/moshi/issues/569", "user": "matejdro", "labels": ["Kotlin - reflect", "bug"], "created": "2018-06-03 15:14:46", "closed": "2018-11-04 17:44:11", "commits": {}, "ttf": 154.00027777777777, "commitsDetails": []}, {"title": "Codegen generates redundant adapters", "body": "I have to deal with a broken API that can return strings or arrays for fields ....\r\n\r\nI'm using custom annotations https://github.com/square/moshi/issues/295 to manage that.\r\n\r\nNow I want to convert those classes to Kotlin and waited for the codegen to avoid kotlin-reflect but it seems the custom annotations are not taken in account in that case :(\r\n\r\nIs there a solution to have both without reflection?\r\n\r\n\r\n", "url": "https://github.com/square/moshi/issues/563", "user": "Tolriq", "labels": ["Kotlin - reflect", "bug"], "created": "2018-05-26 08:01:47", "closed": "2018-09-10 03:12:26", "commits": {"87e50b3658e01f57a46285dbbecca8a5e8577bd6": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}, "738214531853ed40d7a20ed9c988f624b85f4286": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}}, "ttf": 106.00027777777778, "commitsDetails": [{"commitHash": "87e50b3658e01f57a46285dbbecca8a5e8577bd6", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "738214531853ed40d7a20ed9c988f624b85f4286", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": ["4f3c4182029b77dc8ac21febd7589fb7d6645cdf"], "nameRev": "738214531853ed40d7a20ed9c988f624b85f4286 tags/moshi-parent-1.7.0~24^2", "commitMessage": "Change DelegateKey to use AnnotationSpec instead of AnnotationMirror\n\nAnnotationSpec implements equals() in the way we need, but\nAnnotationMirror doesn't. As a consequence this fixes a problem\nwhere we were generating redundant adapters.\n\nCloses: https://github.com/square/moshi/issues/563\n", "commitDateTime": "2018-09-09 15:27:21", "authoredDateTime": "2018-09-09 13:08:19", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/AdapterGenerator.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/DelegateKey.kt", "insertions": 7, "deletions": 35, "lines": 42}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/PropertyGenerator.kt", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/TargetProperty.kt", "insertions": 35, "deletions": 3, "lines": 38}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codgen/GeneratedAdaptersTest.kt", "insertions": 23, "deletions": 0, "lines": 23}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["738214531853ed40d7a20ed9c988f624b85f4286"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 47.0, "deletions": 41.0, "lines": 88.0, "gitFilesChange": 4}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen"]}, {"title": "Reflective adapter doesn't allow nullable generics.", "body": "```kotlin\r\ndata class Box<out T>(val data: T)\r\n\r\n@Test fun nullableGenericTypes() {\r\n  val moshi = Moshi.Builder().add(KotlinJsonAdapterFactory()).build()\r\n  val stringBoxAdapter = moshi.adapter<Box<String?>>(\r\n      Types.newParameterizedTypeWithOwner(KotlinJsonAdapterTest::class.java, Box::class.java,\r\n          String::class.java)).serializeNulls()\r\n  assertThat(stringBoxAdapter.fromJson(\"\"\"{\"data\":null}\"\"\")).isEqualTo(Box<String?>(null))\r\n  assertThat(stringBoxAdapter.toJson(Box<String?>(null))).isEqualTo(\"\"\"{\"data\":null}\"\"\")\r\n}\r\n```\r\n\r\nThis fails, even thought the generic is bounded to `Any?`, a nullable type.\r\nThe workaround is to have `data class Box<out T>(val data: T?)`.\r\n\r\nWe need a Kotlin type resolver, anyway.", "url": "https://github.com/square/moshi/issues/550", "user": "NightlyNexus", "labels": ["Kotlin - reflect", "bug"], "created": "2018-05-17 00:11:05", "closed": "2018-10-23 01:52:48", "commits": {}, "ttf": 159.00027777777777, "commitsDetails": []}, {"title": "Kotlin Codegen - Parameterized typealias fails the build", "body": "When using a `typealias` with a parameterized type moshi will generate code for the referenced base type only, omitting any type parameters.\r\n\r\n    @JsonClass(generateAdapter = true)\r\n    class Foo(\r\n            val someMap: HashMap<String, String>\r\n    )\r\n    \r\n    typealias MapStringString = HashMap<String, String>\r\n\r\n    @JsonClass(generateAdapter = true)\r\n    class Bar(\r\n            val someMap: MapStringString\r\n    )\r\n\r\n`Foo` and `Bar` effectively are the same, but `Bar` is using a `typealias`. The adapter for `Foo` will be properly generated, but it will fail for `Bar` with:\r\n\r\n> BarJsonAdapter.kt: (16, 45): 2 type arguments expected for class HashMap<K : Any!, V : Any!>\r\n> BarJsonAdapter.kt: (21, 22): 2 type arguments expected for class HashMap<K : Any!, V : Any!>\r\n\r\nThe generated code in question looks as follows, clearly missing the parameters:\r\n\r\n    private val hashMapAdapter: JsonAdapter<HashMap> = moshi.adapter(HashMap::class.java).nonNull()\r\n\r\n    override fun toString(): String = \"GeneratedJsonAdapter(Bar)\"\r\n\r\n    override fun fromJson(reader: JsonReader): Bar {\r\n        var someMap: HashMap? = null\r\n        reader.beginObject()\r\n        // ...\r\n    }\r\n\r\nThis will work properly for simple typealiases like `String` and as a workaround the typealias can be replaced with the referenced type itself.\r\n\r\nIt would be nice if there was full support for typealiases.", "url": "https://github.com/square/moshi/issues/547", "user": "bleeding182", "labels": ["bug"], "created": "2018-05-16 16:44:51", "closed": "2018-05-18 02:06:44", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Kotlin Codegen - Named companion objects fail the build", "body": "When I create a `@JsonClass(generateAdapter = true) class Foo` and add the default `Parcelable` implementation quick fix the project will not compile. The same will happen when I simply give my companion object a different name.\r\n\r\n> FooJsonAdapter.kt: (11, 9): Unresolved reference: Companion\r\n\r\nThe extension function is using the wrong name for the companion object.\r\n\r\n---\r\n\r\nExample with a named companion object:\r\n\r\n    @JsonClass(generateAdapter = true)\r\n    class Foo {\r\n        companion object Bar\r\n    }\r\n\r\nLine with the error in `FooJsonAdapter`, should be `Foo.Bar` to compile:\r\n\r\n    fun Foo.Companion.jsonAdapter(moshi: Moshi): JsonAdapter<Foo> = FooJsonAdapter(moshi)\r\n\r\nThe extension method should be either removed in this case or it should use the custom name of the companion object.", "url": "https://github.com/square/moshi/issues/546", "user": "bleeding182", "labels": ["bug"], "created": "2018-05-16 16:26:43", "closed": "2018-05-16 19:44:07", "commits": {"b956b06f6dceaaaca272b4e7c5c47f8145ba25ce": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "b956b06f6dceaaaca272b4e7c5c47f8145ba25ce", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": ["d48e3aaa276b089c17a4ad09392a8a84a9dfb784"], "nameRev": "b956b06f6dceaaaca272b4e7c5c47f8145ba25ce tags/moshi-parent-1.7.0~47", "commitMessage": "Fix companion object names not being resolved (#549)\n\n* Fix companion object names not being resolved\r\n\r\nThis slipped through the cracks before the release\r\n\r\nFixes #546\r\n\r\n* Add braces on the else clause for symmetry\r\n", "commitDateTime": "2018-05-16 15:44:07", "authoredDateTime": "2018-05-16 12:44:07", "commitGitStats": [{"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/AdapterGenerator.kt", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "kotlin/codegen/src/main/java/com/squareup/moshi/kotlin/codegen/TargetType.kt", "insertions": 8, "deletions": 3, "lines": 11}, {"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codgen/GeneratedAdaptersTest.kt", "insertions": 16, "deletions": 0, "lines": 16}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "One-way adapters with code generation", "body": "I have a number of custom type adapters which don't provide both `@FromJson` and `@ToJson` methods, but only the actually required one.\r\n\r\nPreviously, while using the reflection-based approach, this posed no issues as the `KotlinJsonAdapterFactory` provided the missing adapters.\r\n\r\nIs there any way to avoid writing dummy implementations with the code generation approach?", "url": "https://github.com/square/moshi/issues/545", "user": "toxxmeister", "labels": ["Kotlin - reflect", "bug"], "created": "2018-05-16 15:16:40", "closed": "2018-10-23 01:54:12", "commits": {"f5fe86dd782c94193e915e23db3b583bd90b03f0": {"commitGHEventType": "referenced", "commitUser": "swankjesse"}}, "ttf": 159.00027777777777, "commitsDetails": [{"commitHash": "f5fe86dd782c94193e915e23db3b583bd90b03f0", "commitGHEventType": "referenced", "commitUser": "swankjesse", "commitParents": ["2a593da06c27224a5a598282c451f7ca73602d65"], "nameRev": "f5fe86dd782c94193e915e23db3b583bd90b03f0 tags/moshi-parent-1.7.0~25^2", "commitMessage": "Confirm you can use codegen with adapter methods\n\nWe had a bug report that said using just @ToJson wasn't working.\nThis test attempts to show it should work just fine.\n\nhttps://github.com/square/moshi/issues/545\n", "commitDateTime": "2018-09-09 12:16:18", "authoredDateTime": "2018-09-09 12:16:18", "commitGitStats": [{"filePath": "kotlin/tests/src/test/kotlin/com/squareup/moshi/kotlin/codgen/GeneratedAdaptersTest.kt", "insertions": 44, "deletions": 1, "lines": 45}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f5fe86dd782c94193e915e23db3b583bd90b03f0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Custom types can't be used for keys for deserializing Maps.", "body": "This doesn't work, even with my adapter to make my type (MapKey) a String.\r\n\r\n```java\r\n@Test public void mapWithCustomTypeKey() throws Exception {\r\n  JsonAdapter<Map<MapKey, Integer>> adapter = new Moshi.Builder().add(new Object() {\r\n    @FromJson MapKey fromJson(String json) {\r\n      return new MapKey(json);\r\n    }\r\n  }).build().adapter(Types.newParameterizedType(Map.class, MapKey.class, Integer.class));\r\n  assertThat(adapter.fromJson(\"{\\\"a\\\":1,\\\"b\\\":2}\")).containsExactly(\r\n      MapEntry.entry(new MapKey(\"a\"), 1), MapEntry.entry(new MapKey(\"b\"), 2));\r\n}\r\n```\r\n\r\n`java.lang.ClassCastException: com.squareup.moshi.MapJsonAdapterTest$MapKey is not Comparable` when the MapKey is being put into the LinkedHashTreeMap.", "url": "https://github.com/square/moshi/issues/427", "user": "NightlyNexus", "labels": ["bug"], "created": "2018-01-17 20:48:23", "closed": "2018-06-24 19:14:24", "commits": {}, "ttf": 157.00027777777777, "commitsDetails": []}, {"title": "JsonValueReader.nextString() does not coerce numbers to strings.", "body": "```java \r\n@Test public void numberToStringCoersion() throws Exception {\r\n  JsonReader reader = newReader(\"[0, 9223372036854775807, 1.5]\");\r\n  reader.beginArray();\r\n  assertThat(reader.nextString()).isEqualTo(\"0\");\r\n  assertThat(reader.nextString()).isEqualTo(\"9223372036854775807\");\r\n  assertThat(reader.nextString()).isEqualTo(\"1.5\");\r\n  reader.endArray();\r\n}\r\n```\r\n\r\nThis test passes with a JsonUtf8Reader and fails (`com.squareup.moshi.JsonDataException: Expected STRING but was 0.0, a java.lang.Double, at path $[0]`) with a JsonValueReader.", "url": "https://github.com/square/moshi/issues/388", "user": "NightlyNexus", "labels": ["bug"], "created": "2017-11-08 08:27:05", "closed": "2017-11-24 12:23:13", "commits": {}, "ttf": 16.00027777777778, "commitsDetails": []}, {"title": "TypeVariable recursion causes stack overflow when creating field binding.", "body": "```java\r\nprivate static final class Foo<T> {\r\n  Foo<? super T> superType;\r\n}\r\n\r\n@Test public void recursiveTypeVariablesResolve() throws Exception {\r\n  new Moshi.Builder().build().adapter(Types\r\n      .newParameterizedTypeWithOwner(TypesTest.class, Foo.class, String.class));\r\n}\r\n```\r\ncurrently fails. Ref https://github.com/google/gson/pull/1128", "url": "https://github.com/square/moshi/issues/338", "user": "NightlyNexus", "labels": ["bug"], "created": "2017-07-31 21:19:14", "closed": "2019-10-15 22:01:48", "commits": {"7b73ce04ec6dcf329a42999a953f51db54ce3f92": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "62e896b0610c771db4d88e1d2de11adf48e625da": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}, "ae8b62b3ee7bb8609a24f384f02163606043e022": {"commitGHEventType": "referenced", "commitUser": "ZacSweers"}}, "ttf": 806.0002777777778, "commitsDetails": [{"commitHash": "7b73ce04ec6dcf329a42999a953f51db54ce3f92", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "62e896b0610c771db4d88e1d2de11adf48e625da", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "ae8b62b3ee7bb8609a24f384f02163606043e022", "commitGHEventType": "referenced", "commitUser": "ZacSweers", "commitParents": ["dbed99d71b48a74ec33ec8a7abf363431719ea1a"], "nameRev": "ae8b62b3ee7bb8609a24f384f02163606043e022 tags/moshi-parent-1.9.0~12", "commitMessage": "Fix TypeVariable/WildcardType recursion causing stackoverflows (#948)\n\n* Port Gson Types recursion fix for subtypeOf/supertypeOf\r\n\r\nFrom https://github.com/google/gson/commit/a300148003e3a067875b1444e8268b6e0f0e0e02\r\n\r\nFirst step in resolving #338\r\n\r\n* Port Gson Type resolve() recursion fix for type variables\r\n\r\nFrom https://github.com/google/gson/pull/1128\r\n\r\nResolves #338\r\n\r\n* Capture adapter to make checkstyle happy\r\n\r\n* Move RecursiveTypesResolveTest out of internal package\r\n\r\n* Use moshi convention for tests\r\n\r\n* 2 is not 1\r\n", "commitDateTime": "2019-10-15 18:01:48", "authoredDateTime": "2019-10-15 18:01:48", "commitGitStats": [{"filePath": "moshi/src/main/java/com/squareup/moshi/Types.java", "insertions": 14, "deletions": 2, "lines": 16}, {"filePath": "moshi/src/main/java/com/squareup/moshi/internal/Util.java", "insertions": 24, "deletions": 6, "lines": 30}, {"filePath": "moshi/src/test/java/com/squareup/moshi/RecursiveTypesResolveTest.java", "insertions": 77, "deletions": 0, "lines": 77}, {"filePath": "moshi/src/test/java/com/squareup/moshi/TypesTest.java", "insertions": 34, "deletions": 0, "lines": 34}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Types.java", "spoonMethods": [{"spoonMethodName": "com.squareup.moshi.Types.subtypeOf(java.lang.reflect.Type)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.Types.supertypeOf(java.lang.reflect.Type)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "Util.java", "spoonMethods": [{"spoonMethodName": "com.squareup.moshi.internal.Util.resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type)", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 5, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.internal.Util.resolve(java.lang.reflect.Type,java.lang.Class,java.lang.reflect.Type,java.util.Collection)", "TOT": 10, "UPD": 0, "INS": 10, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RecursiveTypesResolveTest.java", "spoonMethods": [{"spoonMethodName": "com.squareup.moshi.RecursiveTypesResolveTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TypesTest.java", "spoonMethods": [{"spoonMethodName": "com.squareup.moshi.TypesTest.RecursiveTypeVars", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.TypesTest.recursiveTypeVariablesResolve()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.TypesTest.recursiveTypeVariablesResolve1()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.TypesTest.recursiveTypeVariablesResolve2()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.TypesTest.TestType", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.squareup.moshi.TypesTest.TestType2", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0.0, "UPD": 0.0, "INS": 0.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Error when trying to deserialize data class with more than 32 constructor params/properties", "body": "Okay, this is a weird one. \r\nI have a rather large data class which has more than 32 constructor parameters/properties. When trying to deserialize a json for this class I get the following error:\r\n\r\n```\r\nkotlin.reflect.jvm.internal.KotlinReflectionInternalError: This callable does not support a default call: public constructor DataClass(@com.squareup.moshi.Json par1: kotlin.String?, @com.squareup.moshi.Json par2: kotlin.String?, @com.squareup.moshi.Json par3: kotlin.String?, @com.squareup.moshi.Json par4: kotlin.String?, @com.squareup.moshi.Json par5: kotlin.String?, @com.squareup.moshi.Json par6: kotlin.String?, @com.squareup.moshi.Json par7: kotlin.String?, @com.squareup.moshi.Json par8: kotlin.String?, @com.squareup.moshi.Json par9: kotlin.String?, @com.squareup.moshi.Json par10: kotlin.String?, @com.squareup.moshi.Json par11: kotlin.String?, @com.squareup.moshi.Json par12: kotlin.String?, @com.squareup.moshi.Json par13: kotlin.String?, @com.squareup.moshi.Json par14: kotlin.String?, @com.squareup.moshi.Json par15: kotlin.String?, @com.squareup.moshi.Json par16: kotlin.String?, @com.squareup.moshi.Json par17: kotlin.String?, @com.squareup.moshi.Json par18: kotlin.String?, @com.squareup.moshi.Json par19: kotlin.String?, @com.squareup.moshi.Json par20: kotlin.String?, @com.squareup.moshi.Json par21: kotlin.String?, @com.squareup.moshi.Json par22: kotlin.String?, @com.squareup.moshi.Json par23: kotlin.String?, @com.squareup.moshi.Json par24: kotlin.String?, @com.squareup.moshi.Json par25: kotlin.String?, @com.squareup.moshi.Json par26: kotlin.String?, @com.squareup.moshi.Json par27: kotlin.String?, @com.squareup.moshi.Json par28: kotlin.String?, @com.squareup.moshi.Json par29: kotlin.String?, @com.squareup.moshi.Json par30: kotlin.String?, @com.squareup.moshi.Json par31: kotlin.String?, @com.squareup.moshi.Json par32: kotlin.String?, @com.squareup.moshi.Json par33: kotlin.String?) defined in DataClass[DeserializedClassConstructorDescriptor@1f97cf0d]\r\n\r\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod(KCallableImpl.kt:152)\r\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:111)\r\n\tat com.squareup.moshi.KotlinJsonAdapter.fromJson(KotlinJsonAdapter.kt:88)\r\n\tat com.squareup.moshi.JsonAdapter$2.fromJson(JsonAdapter.java:128)\r\n\tat com.squareup.moshi.JsonAdapter.fromJson(JsonAdapter.java:35)\r\n\tat com.squareup.moshi.JsonAdapter.fromJson(JsonAdapter.java:39)\r\n\tat Tests.bug(Bug.kt:93)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)\r\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:262)\r\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:84)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)\r\n```\r\nIf I reduce the numer of parameters to 32 or below it all works and I can deserialize the json.\r\n\r\nGist with reproducable code: https://gist.github.com/hameno/b5f867bbe3a3484deffd1bac3ec515c9\r\n\r\nI'm using moshi 1.5.0 and kotlin 1.1.2-3.\r\n\r\nMaybe this is similar to https://github.com/FasterXML/jackson-module-kotlin/issues/46? Not sure if this is a bug in moshi or in Kotlin.", "url": "https://github.com/square/moshi/issues/323", "user": "hameno", "labels": ["bug"], "created": "2017-06-10 23:36:58", "closed": "2017-08-30 01:49:56", "commits": {}, "ttf": 80.00027777777778, "commitsDetails": []}, {"title": "Generic Kotlin data classes cannot be (de)serialized", "body": "It seems that Moshi 1.5.0 has a problem with (de)serialization of generic data classes.\r\n\r\n```kotlin\r\ndata class Test<out T>(val item: T)\r\n\r\ndata class Test2(val test: Test<String>)\r\n```\r\n\r\nThe following code\r\n\r\n```kotlin\r\nval json = \"\"\"{test:{item:\"hello\"}}\"\"\"\r\nval moshi = Moshi.Builder()\r\n        .add(KotlinJsonAdapterFactory())\r\n        .build()\r\nval data = moshi.adapter(Test2::class.java).fromJson(json)\r\n```\r\n\r\nproduces the exception\r\n\r\n```\r\njava.lang.IllegalArgumentException: Expected a Class, ParameterizedType, or GenericArrayType, but <null> is of type null\r\n  at com.squareup.moshi.Types.getRawType(Types.java:167)\r\n  at com.squareup.moshi.ClassJsonAdapter$1.createFieldBindings(ClassJsonAdapter.java:83)\r\n  at com.squareup.moshi.ClassJsonAdapter$1.create(ClassJsonAdapter.java:75)\r\n  at com.squareup.moshi.Moshi.adapter(Moshi.java:100)\r\n  at com.squareup.moshi.KotlinJsonAdapterFactory.create(KotlinJsonAdapter.kt:184)\r\n  at com.squareup.moshi.Moshi.adapter(Moshi.java:100)\r\n  at com.squareup.moshi.KotlinJsonAdapterFactory.create(KotlinJsonAdapter.kt:184)\r\n  at com.squareup.moshi.Moshi.adapter(Moshi.java:100)\r\n  at com.squareup.moshi.Moshi.adapter(Moshi.java:62)\r\n  at com.svenjacobs.test.components.main.view.MainActivity.onCreate(MainActivity.kt:24)\r\n```\r\n\r\nThis was working in Moshi 1.4.0 and before.", "url": "https://github.com/square/moshi/issues/309", "user": "svenjacobs", "labels": ["bug"], "created": "2017-05-18 08:45:41", "closed": "2018-04-04 06:00:32", "commits": {}, "ttf": 320.0002777777778, "commitsDetails": []}, {"title": "Nested data classes are deserialized as `null` with 1.5.0", "body": "I have the following datastructures:\r\n\r\n```kotlin\r\ninternal data class AccountInfo(\r\n  @Json(name = \"User\") val user: User,\r\n  @Json(name = \"Rules\") val rules: Map<String, Boolean>\r\n)\r\n\r\ndata class User(\r\n  @Json(name = \"ID\") val id: Int,\r\n  @Json(name = \"FirstName\") val firstName: String? = null,\r\n  @Json(name = \"LastName\") val lastName: String? = null\r\n)\r\n\r\nval jsonStr = \"\"\"{\"User\":{\"FirstName\":\"Josh\",\"LastName\":\"Friend\",\"ID\":10000000},\"Rules\":{\"Example\":true}}\"\"\"\r\n\r\nval moshi = Moshi.Builder().build()\r\nval adapter = moshi.adapter(AccountInfo::class.java)\r\n```\r\n\r\nWith Moshi 1.4.0 things are OK:\r\n\r\n```kotlin\r\nval account = adapter.fromJson(json)\r\n// AccountInfo(user=User(id=10000000, firstName=Josh, lastName=Friend), rules={Example=true})\r\n```\r\n\r\nWith Moshi 1.5.0, the nested object fields are all `null`:\r\n\r\n```kotlin\r\nval account = adapter.fromJson(json)\r\n// AccountInfo(user=null, rules=null)\r\n```\r\n\r\nI converted the above classes to Java and the nested objects were no longer null. I'm not using the new kotlin specific Moshi adapter.", "url": "https://github.com/square/moshi/issues/308", "user": "joshfriend", "labels": ["bug"], "created": "2017-05-15 20:39:03", "closed": "2018-05-04 19:29:39", "commits": {}, "ttf": 353.0002777777778, "commitsDetails": []}, {"title": "KotlinJsonAdapter can get confused by parameter vs. property names", "body": "Consider the following test, which fails with `java.lang.AssertionError: Expected <1>, actual <2>.`:\r\n\r\n```kotlin\r\nopen class NonValParamSuper(val a: Int)\r\nclass NonValParam(a: Int, notA: Int = 2): NonValParamSuper(a = notA)\r\n\r\n@Test fun kotlinNonValParam() {\r\n  val moshi = Moshi.Builder().add(KotlinJsonAdapterFactory).build()\r\n  val adapter = moshi.adapter(NonValParam::class.java)\r\n\r\n  val json = \"\"\"{\"a\": 1}\"\"\"\r\n  val deserialized = adapter.fromJson(json)\r\n  assertEquals(1, deserialized.a)\r\n}\r\n```\r\nThe reason why this happens is because the `KotlinJsonAdapter` [assumes](https://github.com/square/moshi/blob/cd1542363db05ba00a53ec354d1f969fd997a0ab/kotlin/src/main/java/com/squareup/moshi/KotlinJsonAdapter.kt#L176) that the constructor parameter name equals the property name, which isn't necessarily true. This may be a little of an edge case, but I thought it would be worth sharing.\r\n\r\nWhen the `KotlinJsonAdapter` is documented, it should probably contain a warning about this. Another option would be asking JetBrains whether they could extend Kotlin reflection to allow access to an associated property of a constructor parameter in case it has one.", "url": "https://github.com/square/moshi/issues/293", "user": "cbruegg", "labels": ["bug"], "created": "2017-04-30 11:13:25", "closed": "2018-09-06 07:24:38", "commits": {}, "ttf": 493.0002777777778, "commitsDetails": []}, {"title": "Error where map key doesn\u2019t encode as a string is incoherent", "body": "When a map key doesn\u2019t have a natural string encoding we crash with a difficult exception. [For example](https://bitbucket.org/robeden/moshi-test), when writing a `Map<Matcher,String> identifiers` we crash like so:\r\n\r\n```\r\nException in thread \"main\" java.lang.IllegalStateException: Nesting problem.\r\n        at com.squareup.moshi.JsonUtf8Writer.beforeValue(JsonUtf8Writer.java:367)\r\n        at com.squareup.moshi.JsonUtf8Writer.open(JsonUtf8Writer.java:102)\r\n        at com.squareup.moshi.JsonUtf8Writer.beginObject(JsonUtf8Writer.java:89)\r\n        at com.squareup.moshi.ClassJsonAdapter.toJson(ClassJsonAdapter.java:177)\r\n        at com.squareup.moshi.JsonAdapter$2.toJson(JsonAdapter.java:134)\r\n        at com.squareup.moshi.MapJsonAdapter.toJson(MapJsonAdapter.java:56)\r\n```\r\n\r\nInstead we should say \u201cMatcher cannot be used as a map key in JSON.\u201d\r\n\r\nThe fix for the above example is a JSON adapter, like so:\r\n\r\n```\r\nclass MatcherJsonAdapter {\r\n  @ToJson String matcherToJson(Matcher m) {\r\n    return m.type + \":\" + m.match;\r\n  }\r\n\r\n  @FromJson Matcher matcherFromJson(String s) {\r\n    String[] parts = s.split(\":\", 1);\r\n    return new Matcher(MatchType.valueOf(parts[0]), parts[1]);\r\n  }\r\n}\r\n```", "url": "https://github.com/square/moshi/issues/277", "user": "swankjesse", "labels": ["bug"], "created": "2017-04-14 04:20:50", "closed": "2018-04-29 01:14:46", "commits": {}, "ttf": 379.0002777777778, "commitsDetails": []}, {"title": "Instant Run makes Moshi 10X slower", "body": "This issue started from a discussion with @swankjesse located here: https://twitter.com/eldimo/status/787992388308463617\n\nThe gist is at https://gist.github.com/thierryd/6c9ddf174324e24c5c5fd2aaa1e2aa40\n\nI have benchmarked Moshi against GSON (https://github.com/google/gson) and found Moshi 10X slower than GSON. @swankjesse did some test and found out that whitespace could be the culprit (see https://github.com/square/moshi/issues/207). While I was validating his finding, I ran my benchmark on another machine and found out similar speed between Moshi and GSON. I then realized that Instant Run was turned off on that machine. \n\nThis also explain why I was seeing worse performance on my Nexus 9 with 7.0 than my Nexus 10 with 5.0. Instant Run is not enabled when you run on a device with 5.0.\n\n**tl;dr** Enabling Instant Run makes Moshi 10x slower than GSON\n", "url": "https://github.com/square/moshi/issues/208", "user": "thierryd", "labels": ["bug"], "created": "2016-10-19 13:20:10", "closed": "2019-09-12 20:05:49", "commits": {}, "ttf": 1058.0002777777777, "commitsDetails": []}, {"title": "Android: failing to find adapter for a 'GenericArrayTypeImpl' type", "body": "We have an adapter in place to process `byte[]` as a base64 / base32 string. Everything works fine when a class has a `byte[]` field, but parsing json fails on Android when we have a field of type `Map<String, byte[]>`. The code below works in the standard JVM but fails on Android.\n\n``` java\n  class Base32Adapter extends JsonAdapter<byte[]>  {\n    @Override\n    public byte[] fromJson(JsonReader reader) throws IOException {\n      String string = reader.nextString();\n      return new BigInteger(string, 32).toByteArray();\n    }\n\n    @Override\n    public void toJson(JsonWriter writer, byte[] bytes) throws IOException {\n      String string = new BigInteger(bytes).toString(32);\n      writer.value(string);\n    }\n  }\n\n  static class FavoriteBytes {\n    @Json(name = \"Bytes\")\n    public Map<String, byte[]> keys;\n  }\n\n  @Test public void customAdapter() throws Exception {\n    String jsonString = \"{\\\"Bytes\\\":{\\\"jesse\\\":\\\"a\\\",\\\"jake\\\":\\\"1\\\"}}\";\n    Moshi binaryMoshi = new Moshi.Builder().add(byte[].class, new Base32Adapter()).build();\n    FavoriteBytes fav = binaryMoshi.adapter(FavoriteBytes.class).fromJson(jsonString);\n\n    assertThat(fav.keys).containsOnlyKeys(\"jesse\", \"jake\");\n    assertThat(fav.keys.get(\"jesse\")).isEqualTo(new byte[] { 0xa });\n    assertThat(fav.keys.get(\"jake\")).isEqualTo(new byte[] { 0x1 });\n  }\n```\n\nOn Android, this fails with exception:\n\n```\nE/MoshiTest(18268): com.squareup.moshi.JsonDataException: Expected BEGIN_ARRAY but was STRING at path $.Keys.jesse\nE/MoshiTest(18268):     at com.squareup.moshi.JsonReader.beginArray(JsonReader.java:346)\nE/MoshiTest(18268):     at com.squareup.moshi.ArrayJsonAdapter.fromJson(ArrayJsonAdapter.java:53)\nE/MoshiTest(18268):     at com.squareup.moshi.JsonAdapter$1.fromJson(JsonAdapter.java:68)\nE/MoshiTest(18268):     at com.squareup.moshi.MapJsonAdapter.fromJson(MapJsonAdapter.java:68)\nE/MoshiTest(18268):     at com.squareup.moshi.MapJsonAdapter.fromJson(MapJsonAdapter.java:29)\nE/MoshiTest(18268):     at com.squareup.moshi.JsonAdapter$1.fromJson(JsonAdapter.java:68)\nE/MoshiTest(18268):     at com.squareup.moshi.ClassJsonAdapter$FieldBinding.read(ClassJsonAdapter.java:183)\nE/MoshiTest(18268):     at com.squareup.moshi.ClassJsonAdapter.fromJson(ClassJsonAdapter.java:144)\nE/MoshiTest(18268):     at com.squareup.moshi.JsonAdapter$1.fromJson(JsonAdapter.java:68)\nE/MoshiTest(18268):     at com.squareup.moshi.JsonAdapter.fromJson(JsonAdapter.java:33)\nE/MoshiTest(18268):     at com.squareup.moshi.JsonAdapter.fromJson(JsonAdapter.java:37)\n...\n```\n", "url": "https://github.com/square/moshi/issues/128", "user": "bjdodson", "labels": ["bug"], "created": "2016-01-23 22:59:22", "closed": "2018-04-08 12:26:14", "commits": {"fa1f10dc77b764022acdb6a1bcc54049a3f7214f": {"commitGHEventType": "referenced", "commitUser": "NightlyNexus"}}, "ttf": 805.0002777777778, "commitsDetails": [{"commitHash": "fa1f10dc77b764022acdb6a1bcc54049a3f7214f", "commitGHEventType": "referenced", "commitUser": "NightlyNexus", "commitParents": ["2cc878da8158741c31492240c172c36eb4824bb9"], "nameRev": "fa1f10dc77b764022acdb6a1bcc54049a3f7214f tags/moshi-parent-1.6.0-RC1~25^2", "commitMessage": "Fix type checks with custom adapters.\n\nMoshi.Builder.add(Type, ...) adds a factory that had a broken type equality check.\r\nCloses #128", "commitDateTime": "2018-04-08 00:42:46", "authoredDateTime": "2018-04-08 00:42:46", "commitGitStats": [{"filePath": "moshi/src/main/java/com/squareup/moshi/internal/Util.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Util.java", "spoonMethods": [{"spoonMethodName": "com.squareup.moshi.internal.Util.typesMatch(java.lang.reflect.Type,java.lang.reflect.Type)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fa1f10dc77b764022acdb6a1bcc54049a3f7214f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["moshi/src/main/java/com/squareup/moshi/internal"], "changesInPackagesSPOON": ["com.squareup.moshi.internal.Util.typesMatch(java.lang.reflect.Type,java.lang.reflect.Type)"]}, {"title": "Parsing fails on NULL field values", "body": "This JSON\n{\n        \"id\":\"2\",\n        \"name\":\"glpi\",\n        \"firstname\":null\n}\n\nfails: Expected a value but was NULL at path $.firstname\n\nclass ObjectJsonAdapter  in  file StandardJsonAdapters.java\nhas switch (reader.peek()) {}\nthere are BEGIN_ARRAY, BEGIN_OBJECT, STRING, NUMBER, BOOLEAN\nand noooooo  NULL value  among  cases !!!\n", "url": "https://github.com/square/moshi/issues/79", "user": "vhusnullin", "labels": ["bug"], "created": "2015-09-16 13:08:30", "closed": "2015-09-17 11:06:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}]}