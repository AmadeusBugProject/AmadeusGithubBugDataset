{"projectName": "google/gson", "bugLabels": ["Type-Defect", "bug"], "captureTime": "Sat Jul  4 20:33:09 2020", "issues": [{"title": "SerializedName should allow the @ character", "body": "```\nI'm having trouble deserialising json of the following form:\n\n{ \"@value\" : 3 }\n\nAs far as I can tell this is valid json, however gson's JsonFieldNameValidator \nappears to dislike the presence of the @ character.\n\nI'm declaring the gson java class:\n\nstatic class MyObj {\n    @SerializedName(\"@value\")\n    int value;\n}\n\nI'd expect this to work, but instead I get an exception:\n\nWhat is the expected output? What do you see instead?\nxception in thread \"main\" java.lang.IllegalArgumentException: @value is not a \nvalid JSON field name.\n    at com.google.gson.JsonFieldNameValidator.validate(JsonFieldNameValidator.java:52)\n    at com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.translateName(SerializedNameAnnotationInterceptingNamingPolicy.java:45)\n    at com.google.gson.JsonObjectDeserializationVisitor.getFieldName(JsonObjectDeserializationVisitor.java:92)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:97)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:158)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\n    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:107)\n    at com.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializationVisitor.java:95)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDeserializationVisitor.java:61)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:164)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)\n    at com.google.gson.Gson.fromJson(Gson.java:568)\n    at com.google.gson.Gson.fromJson(Gson.java:515)\n    at com.google.gson.Gson.fromJson(Gson.java:484)\n    at com.google.gson.Gson.fromJson(Gson.java:434)\n    at com.google.gson.Gson.fromJson(Gson.java:406)\n\n\nI'm using gson 1.6 on Ubuntu.\n\n\n\n```\n\nOriginal issue reported on code.google.com by `t.denley` on 17 Feb 2011 at 9:11\n", "url": "https://github.com/google/gson/issues/290", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:28:19", "closed": "2015-03-19 18:28:20", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Final keyword will not increase performance (significantly)", "body": "```\nIn document:\n\nhttp://developer.android.com/guide/practices/design/performance.html\n\nin section:\nPerformance Myths\n\nYou can find that final fields, and classes do not increase performance.\nYou should try increase performance in other ways (e.g. by modifying algorithm)\n\nBecause GsonBuilder and Gson are final, currently I cannot registerTypeAdapter \nfor tree type (I saw that this will be possible in next version). So currently \nI cannot use this project, because of this simple reason. Removing final \nkeyword would help to use this project in non-standard cases.\n\nYou can find more:\nhttp://www.ibm.com/developerworks/java/library/j-jtp1029.html\nhttp://www.ibm.com/developerworks/java/library/j-jtp04223.html#N100A7\n```\n\nOriginal issue reported on code.google.com by `piotr.au...@gmail.com` on 11 Feb 2011 at 1:29\n", "url": "https://github.com/google/gson/issues/289", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:28:18", "closed": "2015-03-19 18:28:19", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Thread safety issue on IBM's JDK", "body": "```\nWhat steps will reproduce the problem?\n1. Install the latest IBM JDK (version 6)\n2. Run the attached program\n\nWhat is the expected output? What do you see instead?\nThe program starts 20 threads; each thread deserializes a JSON string into an \nobject and prints out a statement to the console 1000 times. There should then \nbe 20,000 lines written to the console. This code works fine on Sun's JDK and \nApple's JDK.\n\nOn IBM's JDK, you'll see a few of the deserializations work, and then the rest \nblow up with NPE's. Here is the stack trace:\njava.lang.NullPointerException\n    at java.util.LinkedHashMap.get(LinkedHashMap.java:324)\n    at com.google.gson.LruCache.getElement(LruCache.java:50)\n    at com.google.gson.FieldAttributes.getAnnotations(FieldAttributes.java:157)\n    at com.google.gson.FieldAttributes.getAnnotation(FieldAttributes.java:145)\n    at com.google.gson.SerializedNameAnnotationInterceptingNamingPolicy.translateName(SerializedNameAnnotationInterceptingNamingPolicy.java:44)\n    at com.google.gson.JsonObjectDeserializationVisitor.getFieldName(JsonObjectDeserializationVisitor.java:92)\n    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:97)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:158)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:131)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)\n    at com.google.gson.Gson.fromJson(Gson.java:568)\n    at com.google.gson.Gson.fromJson(Gson.java:515)\n    at com.google.gson.Gson.fromJson(Gson.java:484)\n    at com.google.gson.Gson.fromJson(Gson.java:434)\n    at com.google.gson.Gson.fromJson(Gson.java:406)\n    at com.test.GsonTest$Thready.run(GsonTest.java:32)\n\nWhat version of the product are you using? On what operating system?\nI've tried this with the Gson 1.5 and Gson 1.6 releases on Ubuntu 9.04 32-bit \nand Ubuntu 10.10 64-bit, and it fails both places. It works on Ubuntu and OS X \nwith the Sun and Apple JDK's.\n\nPlease provide any additional information below.\nHere is the reported java version information for the IBM JDK we're using:\n$ java -version\njava version \"1.6.0\"\nJava(TM) SE Runtime Environment (build pxa6460sr9-20101125_01(SR9))\nIBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 \njvmxa6460sr9-20101124_69295 (JIT enabled, AOT enabled)\nJ9VM - 20101124_069295\nJIT  - r9_20101028_17488ifx2\nGC   - 20101027_AA)\nJCL  - 20101119_01\n```\n\nOriginal issue reported on code.google.com by `tobini...@gmail.com` on 9 Feb 2011 at 8:33\n\nAttachments:\n- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-288/comment-0/GsonTest.java)\n", "url": "https://github.com/google/gson/issues/288", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:28:17", "closed": "2015-03-19 18:28:18", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Support immutable objects", "body": "```\nGSON should use Unsafe to instantiate objects without invoking the default \nconstructor. That would permit GSON to support immutable objects, similarly to \nhow Java serialization does it.\n```\n\nOriginal issue reported on code.google.com by `jessewil...@google.com` on 7 Feb 2011 at 11:01\n", "url": "https://github.com/google/gson/issues/287", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:28:13", "closed": "2015-03-19 18:28:13", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "\u7559\u4e2a\u540d", "body": "```\n\u54c8\u54c8\uff0c\u5927\u5bb6\u597d~\n```\n\nOriginal issue reported on code.google.com by `epinszteinic` on 7 Feb 2011 at 9:46\n", "url": "https://github.com/google/gson/issues/286", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:28:12", "closed": "2015-03-19 18:28:13", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "@Expose should be used with methods", "body": "```\nCan we use @Expose with method declaration like:\n\n@Expose\npublic List<SomeObject> getFilteredList(){\n...\n}\n\nand in result includes json of SomeObject list.\n```\n\nOriginal issue reported on code.google.com by `das...@gmail.com` on 3 Feb 2011 at 8:29\n- Merged into: #232\n", "url": "https://github.com/google/gson/issues/285", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:28:11", "closed": "2015-03-19 18:28:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Unquoted strings in lenient mode", "body": "```\nSince 677, GSON has not supported unquoted strings in lenient mode. It should, \nespecially to be compatible with org.json.\n\nhttp://code.google.com/p/google-gson/source/detail?r=677\n```\n\nOriginal issue reported on code.google.com by `jessewil...@google.com` on 31 Jan 2011 at 7:10\n", "url": "https://github.com/google/gson/issues/282", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:28:07", "closed": "2015-03-19 18:28:07", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "GSON default date serializer is locale-specific", "body": "```\nThis has caused problems for Caliper, which was relying on the default date \nserializer:\nhttp://code.google.com/p/caliper/issues/detail?id=113\n\nWork-around the problem by registering a date type adapter like the following:\n\n  private static class DateTypeAdapter implements JsonSerializer<Date>, JsonDeserializer<Date> {\n    private final DateFormat dateFormat;\n\n    private DateTypeAdapter() {\n      dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssz\", Locale.US);\n      dateFormat.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n    }\n\n    @Override public synchronized JsonElement serialize(Date date, Type type,\n        JsonSerializationContext jsonSerializationContext) {\n      return new JsonPrimitive(dateFormat.format(date));\n    }\n\n    @Override public synchronized Date deserialize(JsonElement jsonElement, Type type,\n        JsonDeserializationContext jsonDeserializationContext) {\n      try {\n        return dateFormat.parse(jsonElement.getAsString());\n      } catch (ParseException e) {\n        throw new JsonParseException(e);\n      }\n    }\n  }\n\n```\n\nOriginal issue reported on code.google.com by `limpbizkit` on 30 Jan 2011 at 1:01\n", "url": "https://github.com/google/gson/issues/281", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:28:05", "closed": "2015-03-19 18:28:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "long type can't convert right", "body": "```\nWhat steps will reproduce the problem?\njust use java long data type.\nthe problem caused by the java long type is 64 bit,javascript long type is 53 \nbit.So the data lost.\n\nWhat is the expected output? What do you see instead?\nsuggest use string to convert long type.\n\nWhat version of the product are you using? On what operating system?\nnewest version.\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `zhangbo...@gmail.com` on 29 Jan 2011 at 2:08\n", "url": "https://github.com/google/gson/issues/280", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:28:04", "closed": "2015-03-19 18:28:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Templated collections of collecctions do not serialize correctly", "body": "```\nWhat steps will reproduce the problem?\n\nSee attached file. The program contains a class with a Map and a Map<String, \nObject>. If a value in the map is a List<String>, it does not serialize \ncorrectly. This is a problem only with the parametrized type Map<String, \nObject>. The non-parametrized type, Map, serializes correctly.\n\nWhat is the expected output? What do you see instead?\n\nExpected:\n{\"map\":{\"string\":\"strval\",\"map\":{\"key-1\":\"value-1\",\"key-2\":\"value-2\"},\"list\":[\"e\nlement-1\",\"element-2\"]},\"pMap\":{\"string\":\"strval\",\"map\":{\"key-1\":\"value-1\",\"key-\n2\":\"value-2\"},\"list\":[\"element-1\",\"element-2\"]}}\n\n\nGot:\n{\"map\":{\"string\":\"strval\",\"map\":{\"key-1\":\"value-1\",\"key-2\":\"value-2\"},\"list\":[\"e\nlement-1\",\"element-2\"]},\"pMap\":{\"string\":\"strval\",\"map\":{},\"list\":{}}}\n\n\nWhat version of the product are you using? On what operating system?\n\nGson version 1.6, Mac OS X 10.6.5\n\nPlease provide any additional information below.\nRelated to Issue 205\n\nFIX\n\nModify DefaultTypeAdapters.MapTypeAdapter to check if the generic type of the \nvalue type of the map is Object. If so, use the instance's type.\n\nhttp://code.google.com/p/google-gson/source/browse/trunk/gson/src/main/java/com/\ngoogle/gson/DefaultTypeAdapters.java#649\n\nWorkaround:\n\nDefine an adapter for Objects:\n\n    private static class ObjectTypeAdapter implements JsonSerializer<Object> {\n        public JsonElement serialize(Object src, Type typeOfSrc, JsonSerializationContext context) {\n\n            if (src.getClass() != Object.class) {\n                return context.serialize(src, src.getClass());\n            }\n\n            return new JsonObject();\n        }\n    }\n\nRegister this with the builder:\nGson gson2 = (new GsonBuilder()).registerTypeAdapter(Object.class, new \nObjectTypeAdapter()).create();\n\n\n```\n\nOriginal issue reported on code.google.com by `anand.ke...@gmail.com` on 28 Jan 2011 at 6:38\n\nAttachments:\n- [GsonMapBug.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-279/comment-0/GsonMapBug.java)\n", "url": "https://github.com/google/gson/issues/279", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:28:01", "closed": "2015-03-19 18:28:01", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Using GOSN in HTTP Servlet call", "body": "```\nWhat steps will reproduce the problem?\n1. Create a java class named as Test with 3 attributes all are string\n2. using gson convert it to String\n3. sending that data to the requester\n\nWhat is the expected output? What do you see instead?\n{\"mapperId\":\"14\",\"mapperName\":\"REPO Live\",\"deskId\":\"12\"}\n\n\"{\\\"mapperId\\\":\\\"14\\\",\\\"mapperName\\\":\\\"REPO Live\\\",\\\"deskId\\\":\\\"12\\\"}\"\n\nWhat version of the product are you using? On what operating system?\ngson-1.6.jar\nWindows 7 ultimate N\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `sathee.r...@gmail.com` on 13 Jan 2011 at 5:14\n\nAttachments:\n- [UserMarketViewMapper.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-277/comment-0/UserMarketViewMapper.java)\n", "url": "https://github.com/google/gson/issues/277", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:58", "closed": "2015-03-19 18:27:58", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Make GsonBuilde.registerTypeAdapter() method more concrete ", "body": "```\nI'd like to suggest one enhancement.\n\nAs described in docs:\nhttp://google-gson.googlecode.com/svn/trunk/gson/docs/javadocs/com/google/gson/G\nsonBuilder.html#registerTypeAdapter(java.lang.reflect.Type,%20java.lang.Object)\nmethod registerTypeAdapter receive second argument of type Object,\nwhich is wired (at least for me), code didn't tells me what I should\npass as actual parameter so I should consider documentation first.\n\n-------------\nHere is my plan.\n1. Declare abstract interface:\npackage com.google.gson;\npublic abstract interface TypeAdapter<T> {\n  //emty body\n  //Note: abstract interface can not be implemented directrly.\n}\n\n2. Inherit InstanceCreator, JsonSerializer, and a JsonDeserializer from\nTypeAdapter, like this:\npublic interface InstanceCreator<T> extends TypeAdapter<T>\npublic interface JsonSerializer<T> extends TypeAdapter<T>\npublic interface JsonDeserializer <T> extends TypeAdapter<T>\n\n3. Change registerTypeAdapter method signature to:\nregisterTypeAdapter(java.lang.reflect.Type,TypeAdapter<T>)\n//note: something might be done to handle type T more precisely\n//to check that TypeAdapter type corresponds to first agrument.\n//But I'm not sure.\n\n4. As result it will be clear for gson llibrary users - what should\nbe passed as typaAdapter.\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `dmitry.s...@gmail.com` on 13 Jan 2011 at 4:56\n", "url": "https://github.com/google/gson/issues/276", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:54", "closed": "2015-03-19 18:27:54", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Problem version gson", "body": "```\nI try to use GSON library in JDEVELOPER 10G and I get this error:\n\nError(5,24): cannot access class com.google.gson.Gson; \nclass file has wrong version 49.0, should be 45.3 or 46.0 or 47.0 or 48.0\n\nMy JDEVELOPER VERSION IS 10.1.2.0.0 (BUILD 1811)\n```\n\nOriginal issue reported on code.google.com by `jesus....@gmail.com` on 7 Jan 2011 at 9:42\n", "url": "https://github.com/google/gson/issues/275", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:52", "closed": "2015-03-19 18:27:52", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "ExclusionStrategy should provide context information", "body": "```\nWhat steps will reproduce the problem?\n\nUser class has a password field:\n\nclass User {\n\n  String username;\n\n  @Strategy(deserialize=true, serialize=false)\n  String password;\n}\n\nWhat is the expected output? What do you see instead?\n\nfromJson() should get password\ntoJson() should ignore password\n\nbut ExclusionStrategy.shouldSkipField() missing context information:\n\npublic boolean shouldSkipField(FieldAttributes attrs) {\n    Strategy s = attrs.getAnnotation(Strategy.class);\n    if (isSerializing() && s!=null && !s.serialize)\n        return false;\n    return true;\n}\n\ncannot determin isSerializing() in shouldSkipField() method.\n\nWhat version of the product are you using? On what operating system?\n\nGson-1.6\n\nPlease provide any additional information below.\n\nMaybe provides a Context argument?\n```\n\nOriginal issue reported on code.google.com by `askxuefeng@gmail.com` on 30 Dec 2010 at 2:09\n", "url": "https://github.com/google/gson/issues/274", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.7", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:51", "closed": "2015-03-19 18:27:52", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Problem when deserializing Float but not with Double", "body": "```\nWhat steps will reproduce the problem?\n{{{\npackage gson.floating.point;\n\nimport com.google.gson.Gson;\n\npublic class TestFloat {\n\n    public static class FloatData{\n        Float cantidad;\n\n        protected FloatData(){}\n\n        public Float getCantidad() {\n            return cantidad;\n        }\n        public void setCantidad(Float cantidad) {\n            this.cantidad = cantidad;\n        }\n\n    }\n    public static class DoubleData{\n        Double cantidad;\n\n        protected DoubleData(){}\n\n        public Double getCantidad() {\n            return cantidad;\n        }\n        public void setCantidad(Double cantidad) {\n            this.cantidad = cantidad;\n        }\n\n    }\n\n    public static void main(String[] args) {\n        String json=\"{\\\"cantidad\\\":13113715.22}\";\n        DoubleData d=new Gson().fromJson(json, DoubleData.class);\n        FloatData f=new Gson().fromJson(json, FloatData.class);\n        //Prints 'Double value: 1.311371522E7'\n        System.out.println(\"Double value: \"+d.getCantidad());\n        //Prints 'Float value: 1.3113715E7', decimal lost\n        System.out.println(\"Float value: \"+f.getCantidad());\n        assert d.getCantidad().equals(13113715.22);\n        assert f.getCantidad().equals(13113715.22);\n    }\n\n}\n}}}\nWhat is the expected output? Number with decimals \nWhat do you see instead? Number without decimals\nWhat version of the product are you using?\nGson 1.4\nOn what operating system?\nUbuntu 10.10\n```\n\nOriginal issue reported on code.google.com by `cirovlad...@gmail.com` on 16 Dec 2010 at 9:59\n", "url": "https://github.com/google/gson/issues/273", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:50", "closed": "2015-03-19 18:27:50", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Multidimensional array support is now broken", "body": "```\nWhat steps will reproduce the problem?\n\nRun the below object through:\n\nString[][] items = new String[][]{\n            {\"3m Co\", \"71.72\", \"0.02\", \"0.03\", \"4/2 12:00am\", \"Manufacturing\"},\n            {\"Alcoa Inc\", \"29.01\", \"0.42\", \"1.47\", \"4/1 12:00am\", \"Manufacturing\"}\n        };\n\nWhat is the expected output? What do you see instead?\n[[\"3m Co\",\"71.72\",\"0.02\",\"0.03\",\"4/2 12:00am\",\"Manufacturing\"],[\"Alcoa \nInc\",\"29.01\",\"0.42\",\"1.47\",\"4/1 12:00am\",\"Manufacturing\"]]\n\nInstead get an empty object on client side... {}\n\nWhat version of the product are you using? On what operating system?\nUsed to work in 1.3, now using 1.6 and it's broken (fixed the door broke the \nwindow :) ). On Linux (not sure makes a difference).\n\nPlease provide any additional information below.\nnone\n\n```\n\nOriginal issue reported on code.google.com by `VictorLe...@gmail.com` on 15 Dec 2010 at 9:03\n", "url": "https://github.com/google/gson/issues/272", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:49", "closed": "2015-03-19 18:27:49", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "cannot cleanly override enum deserializer", "body": "```\nThere's a constructor for Gson that accepts a list of serializers/deserializers \nfor default types.  I can't seem to figure out a way to override Enum without \ncopy/pasting the 900 line DefaultTypeAdapters class and changing it, as all of \nthe default serializers are marked private in a package private class.  Any \nideas on a cleaner way?\n```\n\nOriginal issue reported on code.google.com by `adrian.f...@gmail.com` on 6 Dec 2010 at 2:06\n", "url": "https://github.com/google/gson/issues/271", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:48", "closed": "2015-03-19 18:27:48", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "java.util.Date is serialized as null when referenced from [Container { Map<String,Object> }]", "body": "```\nWhat steps will reproduce the problem?\n1. Open maven based eclipse project\n2. Run as java application gson.bug.MessItUp\n\nWhat is the expected output? What do you see instead?\n\nExpected:\n\nPrint the JSON of values:\nPrint the JSON of values:\n{\"creationDate\":\"Dec 6, 2010 2:52:26 PM\"}\nPrint the JSON of A:\n{\"values\":{\"creationDate\":\"Dec 6, 2010 2:52:26 PM\"}}\n\nActual: \nPrint the JSON of values:\n{\"creationDate\":\"Dec 6, 2010 2:52:26 PM\"}\nPrint the JSON of A:\n{\"values\":{\"creationDate\":{}}}\n\nWhat version of the product are you using? On what operating system?\nGSON 1.6, Ubuntu 64bit. Java 1.6.\n\n```\n\nOriginal issue reported on code.google.com by `hq4ever` on 6 Dec 2010 at 1:14\n\nAttachments:\n- [reproduce.tar.gz](https://storage.googleapis.com/google-code-attachments/google-gson/issue-270/comment-0/reproduce.tar.gz)\n", "url": "https://github.com/google/gson/issues/270", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:47", "closed": "2015-03-19 18:27:47", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Unparseable date exception when parsing SQL dates in 1.5", "body": "```\nWhat steps will reproduce the problem?\n\n1. set date format as follows:\n\nGson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"MMM dd, yyyy \nhh:mm:ss a\").create();\n\n2. create a new java.sql.Date \njava.sql.Date sqlDate = new java.sql.Date(12345l);\n\n3. create a class with a date field and create an instance of that class \nsetting our date as a member\n\nprivate static class MyDate {\n    public Date date;\n}\n\n3. set the date in the class and serialize it to JSON:\n\n\npublic static void main(String[] args) throws ParseException {\n\n    Gson gson = new GsonBuilder().setPrettyPrinting().setDateFormat(\"MMM dd, yyyy hh:mm:ss a\").create();\n\n    java.sql.Date sqlDate = new java.sql.Date(12345l);\n\n    MyDate d = new MyDate();\n    d.date = sqlDate;\n\n    String json = gson.toJson(d);\n    System.out.println(json);\n    gson.fromJson(json, MyDate.class);\n}\n\nprivate static class MyDate {\n    public Date date;\n}\n\nWhat is the expected output? What do you see instead?\n\nserialized MyDate {\"date\":\"Dec 31, 1969\"}) does not have a time component in \ngson 1.5, however in gson 1.4 MyDate will be serialized as {\"date\":\"Dec 31, \n1969 07:00:12 PM\"} \n\nAttempting to deserialize MyDate which was serialized with gson 1.5 results in \nthe following exception, when using the same DateFormat:\n\nException in thread \"main\" com.google.gson.JsonParseException: \njava.text.ParseException: Unparseable date: \"Dec 31, 1969\"\n\nThe desired behavior would be to serialize the time component as zeros when it \nis specified in the DateFormat, but not available in the date object. The \ncurrent behavior of 1.5 results in unparsable date exceptions when the date \ndoes not have a time component.\n\nWhat version of the product are you using? On what operating system?\n\ngson version 1.5, on Windows 7 and Red Hat Enterprise Linux Server release 5.3 \n\n\n\n```\n\nOriginal issue reported on code.google.com by `dmitri.sotnikov@gmail.com` on 23 Nov 2010 at 10:42\n", "url": "https://github.com/google/gson/issues/268", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:43", "closed": "2015-03-19 18:27:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Please clear up what gson version is available from Maven", "body": "```\nAfter getting my nexus repo to proxu your maven repo (at \nhttp://google-gson.googlecode.com/svn/mavenrepo/) I can only find gson up to \nversion 1.4. I cannot locate gson version 1.5 or 1.6.\n\nDo I have the incorrect maven address?\n```\n\nOriginal issue reported on code.google.com by `cmdema...@gmail.com` on 22 Nov 2010 at 8:30\n", "url": "https://github.com/google/gson/issues/267", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:43", "closed": "2015-03-19 18:27:43", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "checksum failure in http://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/", "body": "```\nWhile building code using maven and using \nhttp://google-gson.googlecode.com/svn/mavenrepo/, we are getting check sum \nfailure on this file \nhttp://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-\nmetadata.xml\n\nThe reason is check sum stored in this file \n5d94c0b19adc896ec3e3503f4216f3d4c86087ad from location \nhttp://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-\nmetadata.xml.sha1  doesn't match up checksum created for the file in this \nlocation \nhttp://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-\nmetadata.xml which is 1d715fb31af33a21d79b835cb630540e3a5d0b1c\n\n\nexpected checksum should be 1d715fb31af33a21d79b835cb630540e3a5d0b1c on this \nlocation \nhttp://google-gson.googlecode.com/svn/mavenrepo/com/google/code/gson/gson/maven-\nmetadata.xml.sha1\n\n\nif you using nexus maven mirror it would be as simple update index on this \nfolder should fix this problem\n```\n\nOriginal issue reported on code.google.com by `muruve...@gmail.com` on 22 Nov 2010 at 4:49\n", "url": "https://github.com/google/gson/issues/266", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:42", "closed": "2015-03-19 18:27:42", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Alternative API for deserializing a generic object", "body": "```\nI'm using the following code for deserializing a generic object like \nList<String>\n\nThe syntax becomes:\nList<String> list = deserialize(json, List.class, String.class); \nMap<String, List<Integer>> map = deserialize(json, Map.class, String.class, \nList.class, Integer.class);\n\nwhich is (arguably) cleaner compared to the TypeToken.\n\n\n\n\n    public static <T> T deserialize(String string, Class<?> clazz, Class<?>... argsArr) {\n        Type t = getType(clazz, new ArrayList<Class<?>>(Arrays.asList(argsArr)));\n        return new Gson().fromJson(string, t);\n    }\n\n    private static Type getType(Class<?> clazz, List<Class<?>> args) {\n        if (clazz.getTypeParameters().length == 0) {\n            return clazz;\n        }\n\n        List<Type> types = new ArrayList<Type>();\n        for (int n = 0; n < clazz.getTypeParameters().length; ++n) {\n            types.add(getType(args.remove(0), args));\n        }\n        return new PT(clazz, types);\n    }\n\n    private static class PT implements ParameterizedType {\n\n        private Class<?> type;\n        private Type[] typeArgs;\n\n        public PT(Class<?> type, List<Type> typeArgs) {\n            this.type = type;\n            this.typeArgs = typeArgs.toArray(new Type[0]);\n        }\n\n        @Override\n        public Type[] getActualTypeArguments() {\n            return typeArgs;\n        }\n\n        @Override\n        public Type getOwnerType() {\n            return type.getDeclaringClass();\n        }\n\n        @Override\n        public Type getRawType() {\n            return type;\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            if (obj == null || obj.getClass() != PT.class) {\n                return false;\n            }\n            PT other = (PT) obj;\n            return type == other.type && Arrays.equals(typeArgs, other.typeArgs);\n        }\n    }\n```\n\nOriginal issue reported on code.google.com by `goo...@boast.nl` on 19 Nov 2010 at 10:16\n", "url": "https://github.com/google/gson/issues/265", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:41", "closed": "2015-03-19 18:27:41", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Can't parse backslash", "body": "```\nWhat steps will reproduce the problem?\n\nString str = \"{message:\\\":-\\\\\\\"}\";\nMap<String,String> map = gson.fromJson(str,new TypeToken<Map<String, String>>() \n{}.getType());\n\n\nWhat is the expected output? What do you see instead?\n\nI expect Map<String,String> (size = 1): key = \"message\", value = \":-\\\"\n\nInstead:\n\"Exception in thread \"main\" com.google.gson.JsonParseException: Failed parsing \nJSON source: java.io.StringReader@911f71 to Json\n    at com.google.gson.JsonParser.parse(JsonParser.java:59)\n    at com.google.gson.Gson.fromJson(Gson.java:443)\n    at com.google.gson.Gson.fromJson(Gson.java:396)\n    at json.Main.main(Main.java:22)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:597)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:115)\nCaused by: com.google.gson.ParseException: Encountered \" \"\\\"\" \"\\\" \"\" at line 1, \ncolumn 10.\nWas expecting one of:\n    <DIGITS> ...\n    \"null\" ...\n    \"NaN\" ...\n    \"Infinity\" ...\n    <BOOLEAN> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \"{\" ...\n    \"[\" ...\n    \"-\" ...\n\n    at com.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:705)\n    at com.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)\n    at com.google.gson.JsonParserJavacc.JsonValue(JsonParserJavacc.java:229)\n    at com.google.gson.JsonParserJavacc.Pair(JsonParserJavacc.java:112)\n    at com.google.gson.JsonParserJavacc.JsonObject(JsonParserJavacc.java:76)\n    at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:36)\n    at com.google.gson.JsonParser.parse(JsonParser.java:54)\n    ... 8 more\n\"\n\nWhat version of the product are you using? On what operating system?\n\n1.5, windows7 - 32 bit\n\nPlease provide any additional information below.\n\nIf I parse this string with additional two backslashes - it works, but there is \n:\\\\ in value..\n\n```\n\nOriginal issue reported on code.google.com by `Dmitry.T...@gmail.com` on 18 Nov 2010 at 11:18\n", "url": "https://github.com/google/gson/issues/264", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:40", "closed": "2015-03-19 18:27:40", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "tom", "body": "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `Brentley...@gmail.com` on 12 Nov 2010 at 7:23\n", "url": "https://github.com/google/gson/issues/263", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:38", "closed": "2015-03-19 18:27:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ObjectTypePair obj and type mismatch possible.", "body": "```\nWhat steps will reproduce the problem?\n1. Put gson under load with mutliple threads.\n2. cause the setObject method in ObjectTypePair to be called.\n3. note that the type does not get updated, leading to the ObjectTypePair \nhaving the wrong type for an object.\n\nWhat is the expected output? What do you see instead?\n\nAny call to setObject should update the type to the type of the current object \nusing a getClass on the object.\n\nWhat version of the product are you using? On what operating system?\nJRE 1.5 and 1.6 on Windows/Mac/linux/IBM JVM.\n\n```\n\nOriginal issue reported on code.google.com by `rojo...@gmail.com` on 3 Nov 2010 at 10:35\n", "url": "https://github.com/google/gson/issues/261", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:34", "closed": "2015-03-19 18:27:34", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Make TypeAdapters public", "body": "```\nWe have a couple cases where we need to serialize an object as a List.  As a \nresult, I'd like to extract the valueSet from a JsonObject and convert it to an \nArrayList.  However, all default typeadapters are package-only access, which \nmeans I can't extend nor delegate.\n\nAny chance we can see these converted to public classes? Any reason they're not?\n```\n\nOriginal issue reported on code.google.com by `aaron.st...@gmail.com` on 2 Nov 2010 at 6:28\n", "url": "https://github.com/google/gson/issues/260", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:33", "closed": "2015-03-19 18:27:33", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Custom class having a parameterized member class.", "body": "```\nCustom class having a parameterized member class.\n\nWhat steps will reproduce the problem?\n1.Create following class:\n\npublic abstract class RequestBuilder<TParameter, TResponse extends \nIJsonResponse>\n{\n    private void WriteRequestContent(Object SendObject) throws Exception\n    {\n        Gson serializer = new Gson();\n\n        String data = null;\n\n        if(ConnectRequest.class.isInstance(SendObject)) {\n            data = serializer.toJson((ConnectRequest)SendObject);\n        } else { ... }\n\n\n        this.myWebRequest.setRequestProperty(\"Content-Length\", data.length()+\"\");\n        OutputStreamWriter wr = new OutputStreamWriter(this.myWebRequest.getOutputStream());\n        wr.write(data);\n        wr.flush();\n        wr.close();\n    }\n\n    public class ConnectRequest\n    {\n        // Fields\n        public ConnectHeader header;\n        public String method;\n        public TParameter parameters;\n\n        // Methods\n        public ConnectGroovesharkRequest(ConnectHeader myHeader, TParameter myParameter, String myMethod)\n        {\n            this.header = myHeader;\n            this.parameters = myParameter;\n            this.method = myMethod;\n        }\n    }\n}\n2.\nExecute  ;)\n3.\nError occurs\n\nWhat is the expected output? What do you see instead?\nJust to convert it to a json-string, instead i got \"Expecting parameterized \ntype, got class Base.RequestBuilder$ConnectRequest.\"\n\nWhat version of the product are you using? On what operating system?\nGson 1.5;\n\n\nWhat to do? :(\n```\n\nOriginal issue reported on code.google.com by `scilor.hacker@googlemail.com` on 27 Oct 2010 at 6:13\n- Merged into: #257\n", "url": "https://github.com/google/gson/issues/259", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:33", "closed": "2015-03-19 18:27:33", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Cannot toJson custom Class, that has got a parameterized member", "body": "```\nWhat steps will reproduce the problem?\n1.Create following class:\n\npublic abstract class RequestBuilder<TParameter, TResponse extends \nIJsonResponse>\n{\n    private void WriteRequestContent(Object SendObject) throws Exception\n    {\n        Gson serializer = new Gson();\n\n        String data = null;\n\n        if(ConnectRequest.class.isInstance(SendObject)) {\n            data = serializer.toJson((ConnectRequest)SendObject);\n        } else { ... }\n\n\n        this.myWebRequest.setRequestProperty(\"Content-Length\", data.length()+\"\");\n        OutputStreamWriter wr = new OutputStreamWriter(this.myWebRequest.getOutputStream());\n        wr.write(data);\n        wr.flush();\n        wr.close();\n    }\n\n    public class ConnectRequest\n    {\n        // Fields\n        public ConnectHeader header;\n        public String method;\n        public TParameter parameters;\n\n        // Methods\n        public ConnectGroovesharkRequest(ConnectHeader myHeader, TParameter myParameter, String myMethod)\n        {\n            this.header = myHeader;\n            this.parameters = myParameter;\n            this.method = myMethod;\n        }\n    }\n}\n2.\nExecute  ;)\n3.\nError occurs\n\nWhat is the expected output? What do you see instead?\nJust to convert it to a json-string, instead i got \"Expecting parameterized \ntype, got class Base.RequestBuilder$ConnectRequest.\"\n\nWhat version of the product are you using? On what operating system?\nGson 1.5;\n\n\nWhat to do? :(\n```\n\nOriginal issue reported on code.google.com by `scilor.hacker@googlemail.com` on 27 Oct 2010 at 6:12\n- Merged into: #257\n", "url": "https://github.com/google/gson/issues/258", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:32", "closed": "2015-03-19 18:27:32", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Cannot toJson custom Class, that has got a parameterized member", "body": "```\nWhat steps will reproduce the problem?\n1.Create following class:\n\npublic abstract class RequestBuilder<TParameter, TResponse extends \nIJsonResponse>\n{\n    private void WriteRequestContent(Object SendObject) throws Exception\n    {\n        Gson serializer = new Gson();\n\n        String data = null;\n\n        if(ConnectRequest.class.isInstance(SendObject)) {\n            data = serializer.toJson((ConnectRequest)SendObject);\n        } else { ... }\n\n\n        this.myWebRequest.setRequestProperty(\"Content-Length\", data.length()+\"\");\n        OutputStreamWriter wr = new OutputStreamWriter(this.myWebRequest.getOutputStream());\n        wr.write(data);\n        wr.flush();\n        wr.close();\n    }\n\n    public class ConnectRequest\n    {\n        // Fields\n        public ConnectHeader header;\n        public String method;\n        public TParameter parameters;\n\n        // Methods\n        public ConnectGroovesharkRequest(ConnectHeader myHeader, TParameter myParameter, String myMethod)\n        {\n            this.header = myHeader;\n            this.parameters = myParameter;\n            this.method = myMethod;\n        }\n    }\n}\n2.\nExecute  ;)\n3.\nError occurs\n\nWhat is the expected output? What do you see instead?\nJust to convert it to a json-string, instead i got \"Expecting parameterized \ntype, got class Base.RequestBuilder$ConnectRequest.\"\n\nWhat version of the product are you using? On what operating system?\nGson 1.5;\n\n\nWhat to do? :(\n```\n\nOriginal issue reported on code.google.com by `scilor.hacker@googlemail.com` on 27 Oct 2010 at 6:12\n", "url": "https://github.com/google/gson/issues/257", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:31", "closed": "2015-03-19 18:27:31", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "GSON should permit the empty string as a property name in a map", "body": "```\nI have recently upgraded from GSON 1.3 to GSON 1.4 and now I'm getting an \nexception with code that worked correct before. I also tested GSON 1.5 and it \nbehaves the same as 1.4, throwing the exception.\nBelow is the stack trace:\n\nCaused by: java.lang.IllegalArgumentException: condition failed: false\n        at com.google.gson.Preconditions.checkArgument(Preconditions.java:39)\n        at com.google.gson.JsonObject.add(JsonObject.java:55)\n        at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters.java:519)\n        at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters.java:498)\n        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:186)\n        at com.google.gson.JsonSerializationVisitor.visitFieldUsingCustomHandler(JsonSerializationVisitor.java:205)\n        at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:150)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)\n        at com.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializationVisitor.java:148)\n        at com.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVisitor.java:126)\n        at com.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisitor.java:113)\n        at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:156)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:49)\n        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:452)\n        at com.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize(DefaultTypeAdapters.java:435)\n        at com.google.gson.JsonSerializationVisitor.findAndInvokeCustomSerializer(JsonSerializationVisitor.java:186)\n        at com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializationVisitor.java:161)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:98)\n        at com.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationContextDefault.java:56)\n        at com.google.gson.Gson.toJsonTree(Gson.java:230)\n        at com.google.gson.Gson.toJson(Gson.java:315)\n        at com.google.gson.Gson.toJson(Gson.java:270)\n        at com.google.gson.Gson.toJson(Gson.java:250)\n\n\nHappens when I call gson.toJson() passing a list of objects. If it is not \nobvious what changed in Preconditions.checkArgument(Preconditions.java:39) \nbetween versions 1.3 and 1.4 I can submit the actual object that is causing \nthis exception.\n```\n\nOriginal issue reported on code.google.com by `kosta.kr...@gmail.com` on 26 Oct 2010 at 11:27\n- Merged into: #227\n", "url": "https://github.com/google/gson/issues/256", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:30", "closed": "2015-03-19 18:27:30", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Cannot parse {' ':''}", "body": "```\nWhat steps will reproduce the problem?\n1. new JsonParser().parse(new StringReader(\"{' ':''}\"));\n\nWhat is the expected output? What do you see instead?\nEither return a valid object, or throw a JsonParseException.  Instead I get a \nprecondition failure in the javacc-generated code.\n\nWhat version of the product are you using? On what operating system?\nHead, as of 10/10/18.  On Ubuntu Lucid.\n\n```\n\nOriginal issue reported on code.google.com by `d...@google.com` on 19 Oct 2010 at 1:22\n", "url": "https://github.com/google/gson/issues/253", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:20", "closed": "2015-03-19 18:27:21", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Supply a public accessor for FieldAttributes.parentClass", "body": "```\nWhat steps will reproduce the problem?\n1. try to implement an ExclusionStrategy to exclude specific fields of specific \nclasses\n\nWhat is the expected output? What do you see instead?\nIt simply isn't possible\n\nWhat version of the product are you using? On what operating system?\n1.5, any\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `robby...@gmail.com` on 18 Oct 2010 at 11:26\n", "url": "https://github.com/google/gson/issues/252", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:20", "closed": "2015-03-19 18:27:20", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "OSGi Bundle version for 1.5 still points to 1.4", "body": "```\nWhat steps will reproduce the problem?\n1. Check META-INF/MANIFEST.MF\n\nWhat is the expected output? What do you see instead?\n\nI see:\n\nBundle-Version: 1.4\nExport-Package: com.google.gson;version=1.4, com.google.gson.annotatio\n ns;version=1.4, com.google.gson.reflect;version=1.4\n\nbut expected would be 1.5\n\nWhat version of the product are you using? On what operating system?\n\nApache Felix OSGi stack\n\nPlease provide any additional information below.\n\nThis way I cannot say if I upgraded from 1.4 to 1.5 or still stuck on 1.4\n```\n\nOriginal issue reported on code.google.com by `Krystian...@gmail.com` on 18 Oct 2010 at 11:17\n", "url": "https://github.com/google/gson/issues/251", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:19", "closed": "2015-03-19 18:27:19", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "API documentation - JsonStreamParser", "body": "```\nWhat steps will reproduce the problem?\n1.Opening up Gson API and selecting JsonStreamParser in firefox\n\n\nWhat is the expected output? What do you see instead?\nA formatted HTML page and instead i see the inner workings of the page\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `markhop...@gmail.com` on 14 Oct 2010 at 11:57\n", "url": "https://github.com/google/gson/issues/250", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:18", "closed": "2015-03-19 18:27:18", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "java.lang.IllegalArgumentException on toJson() for: new Object[] { new Object() }", "body": "```\nWhat steps will reproduce the problem?\nRun the attached source code.\n\nWhat is the expected output? What do you see instead?\nExpected legal json.\nThrows exception instead.\n\nAlso see example number two where expected output is [] yet it output's [null]\n\nWhat version of the product are you using? On what operating system?\n1.5\n\nPlease provide any additional information below.\nUbuntu 64bit, Sun Java 1.6 (Don't speak the O word!).\n```\n\nOriginal issue reported on code.google.com by `hq4ever` on 13 Oct 2010 at 7:35\n\nAttachments:\n- [Main.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-249/comment-0/Main.java)\n", "url": "https://github.com/google/gson/issues/249", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:17", "closed": "2015-03-19 18:27:17", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Avoid compiler warnings when deserializing to a parameterized type", "body": "```\nFoo<Bar> foo = gson.fromJson(json, Foo.class);\n\ncurrently produces compiler warning for unchecked conversion and needs \n@SuppressWarnings(\"unchecked\")\n\nExplore revising gson.fromJson(String json, Class<? super T> classOfT) to get \nrid of this warning.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 5 Oct 2010 at 1:53\n", "url": "https://github.com/google/gson/issues/248", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:16", "closed": "2015-03-19 18:27:16", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson should release final fields reverting setAccessible to its earlier value", "body": "```\nChapter 9 of JSR 133 (Java Memory Model and Thread Specification) \nhttp://www.cs.umd.edu/~pugh/java/memoryModel/jsr133.pdf has some semantics \nregarding potential implication on compiler optimizations when setAccessible is \nused. Figure out what is the right thing to do after Gson has done its job on \nan object instance. We should consider using setAcessible to false for the \nobject.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 5 Oct 2010 at 12:26\n", "url": "https://github.com/google/gson/issues/247", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:16", "closed": "2015-03-19 18:27:16", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Document thrown exceptions", "body": "```\nWhat steps will reproduce the problem?\nLook in the javadoc for gson.toJson(Object src, Appendable writer) or any of \nthe methods serializing to a writer.\n\nWhat is the expected output? What do you see instead?\nI would like to know what exception to expect if there is any problem writing \nto the writer.\n\nThere is no such information currently.\n\nWhat version of the product are you using? On what operating system?\nsource code from trunk.\n\nPlease provide any additional information below.\nThe methods will wrap any IOException in a very generic RuntimeException. IMHO \nit would be better to create a new exception for this problem; \nJsonSerializationException, maybe. But in any case, the javadoc should specify \nwhat to expect.\n```\n\nOriginal issue reported on code.google.com by `albin.th...@gmail.com` on 4 Oct 2010 at 1:53\n", "url": "https://github.com/google/gson/issues/246", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:14", "closed": "2015-03-19 18:27:14", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Cannot convert Object to Json with complex datastructure", "body": "```\nWhat steps will reproduce the problem?\npublic class JSonNode {\n    private String label;\n    private String identifier;\n    private List<Map<String, Object>> items = new ArrayList<Map<String, Object>>();\n}\nI have remove get set methods for simplicity.\n\npublic static void main(String [] args  ) {\n        JSonNode node= new JSonNode();\n        Gson g = new Gson();\n        node.setIdentifier(\"name\");\n        node.setLabel(\"name\");\n        Map<String, Object> values = new HashMap<String, Object>();\n\n        values.put(\"name\", \"Africa\");\n        values.put(\"type\", \"continent\");\n\n\n        List<JSonNode> children = new ArrayList<JSonNode>();\n        JSonNode child1 = new JSonNode();\n        Map<String, Object> values1 = new HashMap<String, Object>();\n        values1.put(\"name\", \"Egypt\");\n        values1.put(\"type\", \"country\");\n        child1.getItems().add(values1);\n\n        JSonNode child2 = new JSonNode();\n        values1 = new HashMap<String, Object>();\n        values1.put(\"name\", \"Kenya\");\n        values1.put(\"type\", \"country\");\n        child2.getItems().add(values1);\n\n        JSonNode child3 = new JSonNode();\n        values1 = new HashMap<String, Object>();\n        values1.put(\"name\", \"Sudan\");\n        values1.put(\"type\", \"country\");\n        child3.getItems().add(values1);\n\n        children.add(child1);\n        children.add(child2);\n        children.add(child3);\n\n        values.put(\"children\", children);\n\n        node.getItems().add(values);\n\n        System.out.println(g.toJson(node));\n\n    }\n\n\nWhat is the expected output? What do you see instead?\nExpected O/P :\n{\"label\":\"name\",\"identifier\":\"name\",\"items\":[{\"name\":\"Africa\",\"children\":{\"name\"\n:\"Africa\",\"children\":[{\"items\":[{\"name\":\"Egypt\",\"type\":\"country\"}]},{\"items\":[{\"\nname\":\"Kenya\",\"type\":\"country\"}]},{\"items\":[{\"name\":\"Sudan\",\"type\":\"country\"}]}]\n,\"type\":\"continent\"},\"type\":\"continent\"}]}\nAcutal O/P :\n{\"label\":\"name\",\"identifier\":\"name\",\"items\":[{\"name\":\"Africa\",\"children\":{},\"typ\ne\":\"continent\"}]}\n\n\n\nWhat version of the product are you using? On what operating system?\nGson 1.5, Windows, with JDK 1.5\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `nis...@gmail.com` on 30 Sep 2010 at 10:56\n- Merged into: #205\n", "url": "https://github.com/google/gson/issues/245", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:13", "closed": "2015-03-19 18:27:13", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Failure to serialize enums with method definitions.", "body": "```\nI've attached a JUnit test file that shows the issue. I've confirmed that the \nfollowing patch fixes this.\n\nExisting method in Gson.java:\n\n  public String toJson(Object src) {\n    if (src == null) {\n      return serializeNulls ? NULL_STRING : \"\";\n    }\n    return toJson(src, src.getClass());\n  }\n\nPatched version of above method:\n\n  public String toJson(Object src) {\n    if (src == null) {\n      return serializeNulls ? NULL_STRING : \"\";\n    }\n\n    Type typeOfSrc;\n    if (src instanceof Enum) {\n      typeOfSrc = ((Enum) src).getDeclaringClass();\n    } else {\n      typeOfSrc = src.getClass();\n    }\n\n    return toJson(src, typeOfSrc);\n  }\n```\n\nOriginal issue reported on code.google.com by `MarceliN...@gmail.com` on 29 Sep 2010 at 10:20\n\nAttachments:\n- [EnumTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-244/comment-0/EnumTest.java)\n", "url": "https://github.com/google/gson/issues/244", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:12", "closed": "2015-03-19 18:27:12", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Json Conversion", "body": "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `sivasubb...@gmail.com` on 28 Sep 2010 at 1:40\n", "url": "https://github.com/google/gson/issues/243", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:11", "closed": "2015-03-19 18:27:11", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson support for classes parameterized with enums", "body": "```\nhttp://groups.google.com/group/google-gson/browse_thread/thread/2d490f16c0b3f639\n\nThe link above provides a reproducible test case as well.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Sep 2010 at 5:53\n", "url": "https://github.com/google/gson/issues/242", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.7", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:10", "closed": "2015-03-19 18:27:10", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson support for parameterized type hierarchy", "body": "```\nhttp://groups.google.com/group/google-gson/browse_thread/thread/28ed956399ed0e2e\n\nThe above link provides code to derive a test for the bug.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Sep 2010 at 5:48\n- Merged into: #168\n", "url": "https://github.com/google/gson/issues/241", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:09", "closed": "2015-03-19 18:27:09", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Provide a way to deserialize a JsonElement into an Object", "body": "```\nSee discussion at:\n\nhttp://groups.google.com/group/google-gson/browse_thread/thread/cc836a1b93b92428\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Sep 2010 at 5:40\n", "url": "https://github.com/google/gson/issues/240", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:08", "closed": "2015-03-19 18:27:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Escaper not public class -- can't extend JsonElement", "body": "```\nWhat steps will reproduce the problem?\n1. Create class to extend JsonElement\n2. implement toString(Appender,Escaper)\n3. Cannot include Escaper, as it is not a public class\n\nWhat is the expected output? What do you see instead?\nI would expect to be able to include Escaper and implement the toString(...) \nabstract method, but since Escaper is package scope, I cannot.\n\nWhat version of the product are you using? On what operating system?\nOSX 10.6.4\n\nPlease provide any additional information below.\n\nI would like to be able to extend JsonElement to provide a new json element \ntype. The use case I'm working with is that I have a JSON block generated \nelsewhere in our application that I would like to just 'use' in json output \ncreated near the UI layer of the application. To avoid deserializing & \nreserializing the JSON block I already have, I would like to create a new \nJsonElement that can just \"hand back\" this pre-generated block of JSON. I was \ngoing to extend JsonElement to create such a class, but cannot, since \ntoString(...) requires Escaper, and that is a package level class, instead of \npublic.\n```\n\nOriginal issue reported on code.google.com by `jbros...@gmail.com` on 21 Sep 2010 at 3:58\n", "url": "https://github.com/google/gson/issues/239", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:07", "closed": "2015-03-19 18:27:07", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Feature: Add support for InstanceCreatorEx interface with createInstance(JsonElement json, Type typeOfT)", "body": "```\njson data can contain information about which exact class should be created,\nbut original InstanceCreator can't use this information.\n\nExample: \nI have abstract Command class and Command1, Command2, etc subclasses.\nMy json data contains \"type\":\"Command1\" pair.\n\nSo we can overcome \"Collections Limitations\" and can deserialize \n\nCollection[? extends Command] realCommands = gson.fromJson(json, \ncollectionTypeCommand);\n```\n\nOriginal issue reported on code.google.com by `rybin.andrey` on 20 Sep 2010 at 12:38\n- Merged into: #231\n", "url": "https://github.com/google/gson/issues/238", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:06", "closed": "2015-03-19 18:27:06", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Incorrect serialisation for sub classed objects", "body": "```\nWhat steps will reproduce the problem?\n1. Extract the Containers.zip maven project attached.\n2. Run the BookingDialogViewJsonSerializerTest.java JUnit test to observe the \nissue.\n\nWhat is the expected output? What do you see instead?\nI'm trying to serialise a nested object. The object serialises fine when not \nnested. When nested only fields on the base class are serialised, fields on the \nsubclasses are omitted.\n\nWhat version of the product are you using? On what operating system?\n2.3.2 on win xp.\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `proggerp...@gmail.com` on 20 Sep 2010 at 7:25\n- Merged into: #231\n\nAttachments:\n- [Containers.zip](https://storage.googleapis.com/google-code-attachments/google-gson/issue-237/comment-0/Containers.zip)\n", "url": "https://github.com/google/gson/issues/237", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:05", "closed": "2015-03-19 18:27:05", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "com.google.gson.ParseException when Json string contains new line characters", "body": "```\nWhat steps will reproduce the problem?\n1.Create a Json string containing new line characters ie. \\n or \\r\\n\ne.g.\n{\"rid\":\"3fe769c3-93ee-43b4-91ee-2f279cf5e9bb\",\"org\":\"001\",\"acno\":\"TL000000000068\n\",\"fseq\":\"7893ca16-ed66-431a-96fd-c20001efa487\",\"actcd\":\"IA\",\"fdt\":\"17.09.2010\",\n\"rescd\":\"PTP\",\"nactcd\":\"IA\",\"nactdt\":\"17.09.2010\",\"note\":\"Remarks\\r\\nRemarks\",\"f\nee\":\"N\",\"toall\":\"N\",\"watch\":\"N\",\"promises\":[{\"prdt\":\"17.09.2010\",\"pramt\":\"100.00\n0\"}]} \n2.Parse string using JsonStreamParser\n\nWhat is the expected output? What do you see instead?\nThe string should be parsed but it throws following exception:\nException in thread \"main\" com.google.gson.JsonParseException: Failed parsing \nJSON source to Json\n    at com.google.gson.JsonStreamParser.next(JsonStreamParser.java:91)\n    at com.rsystems.services.util.JSONUtil.getMapFromJson(JSONUtil.java:49)\n    at com.rsystems.services.testing.TestUtil.main(TestUtil.java:35)\nCaused by: com.google.gson.ParseException: Encountered \" \"\\\"\" \"\\\" \"\" at line 1, \ncolumn 218.\nWas expecting one of:\n    <DIGITS> ...\n    \"null\" ...\n    \"NaN\" ...\n    \"Infinity\" ...\n    <BOOLEAN> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \"{\" ...\n    \"[\" ...\n    \"-\" ...\n\n    at com.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:705)\n    at com.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)\n    at com.google.gson.JsonParserJavacc.JsonValue(JsonParserJavacc.java:229)\n    at com.google.gson.JsonParserJavacc.Pair(JsonParserJavacc.java:112)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:95)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n    at com.google.gson.JsonParserJavacc.JsonObject(JsonParserJavacc.java:76)\n    at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:36)\n    at com.google.gson.JsonStreamParser.next(JsonStreamParser.java:87)\n    ... 2 more\n\n\nWhat version of the product are you using? On what operating system?\ncom.google.code.gson version 1.4\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `bhavesh....@gmail.com` on 17 Sep 2010 at 7:35\n", "url": "https://github.com/google/gson/issues/236", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:04", "closed": "2015-03-19 18:27:04", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Could not deserialize JsonPrimitive to int", "body": "```\nGson gson = new Gson();\n\ngson.fromJson(\"1\", int.class) works ok,\ngson.fromJson(new JsonPrimitive(1), int.class) throws ClassCastException,\n\nThe latter method calls cast method of Class, while the former one does not.\nint.class.cast(new Integer(1)) does not work on my Java6SE JVM.\n\nI'm using Gson 1.5 on Java6SE\n```\n\nOriginal issue reported on code.google.com by `adi...@gmail.com` on 13 Sep 2010 at 6:53\n", "url": "https://github.com/google/gson/issues/235", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:02", "closed": "2015-03-19 18:27:03", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Arrays referenced in Object field serialization bug", "body": "```\nWhat steps will reproduce the problem?\n1. Run the test\n\n    public class ComplexObj {\n        public double[] result;\n        public Object obj;\n    }\n\n    @Test\n    public void json_pretty_printing_bug() {\n        GsonBuilder builder = new GsonBuilder();\n        Gson gson = builder.create();\n        ComplexObj response = new ComplexObj();\n        response.result=new double[2];\n        response.result[0] = 2.5;\n        response.result[1] = 2.5;\n        response.obj=response.result;\n        assertEquals(\"{\\\"result\\\":[2.5,2.5],\\\"obj\\\":[2.5,2.5]}\", gson.toJson(response));\n    }\n\nWhat is the expected output? What do you see instead?\nExpected: {\"result\":[2.5,2.5],\"obj\":[2.5,2.5]}\nActual: {\"result\":[2.5,2.5],\"obj\":{}}\n\nWhat version of the product are you using? On what operating system?\n1.5\n\nPlease provide any additional information below.\nThis is a regression, i'm switching from gson-1.3 to gson-1.5 as suggested \nhere: http://code.google.com/p/google-gson/issues/detail?id=233\n```\n\nOriginal issue reported on code.google.com by `gianmarco.gherardi` on 12 Sep 2010 at 1:12\n- Merged into: #218\n", "url": "https://github.com/google/gson/issues/234", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:02", "closed": "2015-03-19 18:27:02", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Bug using pretty printing", "body": "```\nWhat steps will reproduce the problem?\n1. Run the test\n@Test\npublic void json_pretty_printing_bug() {\n    Map<String, Object> map = new HashMap<String, Object>();\n    map.put(\"F868\", new Object());\n    map.put(\"F867\", new Object());\n    map.put(\"ID\", new Object());\n    GsonBuilder builder = new GsonBuilder();\n    builder.setPrettyPrinting();\n    Gson gson = builder.create();\n    assertEquals(\"{\\\"F868\\\":{},\\\"F867\\\":{},\\\"ID\\\":{}}\", gson.toJson(map));\n}\n\nWhat is the expected output? What do you see instead?\nExpected: {\"F868\":{},\"F867\":{},\"ID\":{}}\nActual: {\"F868\":{}\"F867\":{}\"ID\":{}}\n\nWhat version of the product are you using? On what operating system?\n1.3\n\nPlease provide any additional information below.\nremoving setPrettyPrinting() solves the problem\n```\n\nOriginal issue reported on code.google.com by `gianmarco.gherardi` on 10 Sep 2010 at 7:30\n", "url": "https://github.com/google/gson/issues/233", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:27:01", "closed": "2015-03-19 18:27:01", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "GsonBuilder setDateFormat ignored", "body": "```\nWhat steps will reproduce the problem?\n1. Build a gson with setDateFormat\nDate date = new Date();\nGson gson = new GsonBuilder().setDateFormat(\"MM/dd/yyyy\").create();\nSystem.out.println(gson.toJson(date));\n\nWhat is the expected output? What do you see instead?\nExpected is \"08/27/2010\"\nDate results in standard format: \"Aug 27, 2010 10:21:32 AM\"\n\nWhat version of the product are you using? On what operating system?\n1.5\n\nPlease provide any additional information below.\nIt works ok in 1.4 but when I change to 1.5 it ignores the setDateFormat() \nmethod\n```\n\nOriginal issue reported on code.google.com by `tradefie...@gmail.com` on 27 Aug 2010 at 2:38\n", "url": "https://github.com/google/gson/issues/230", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:44", "closed": "2015-03-19 18:26:44", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Missing sources in Maven repository", "body": "```\nWhat steps will reproduce the problem?\n1. checkout trunk / head \n2. mvn clean install\n3. watch compiler complaints about missing classes\n( Gson,  GsonReader ) \nWhat is the expected output? What do you see instead?\n\n... clean maven build\n\nWhat version of the product are you using? On what operating system?\n\nWinXP / mvn 2.1\n\n\n```\n\nOriginal issue reported on code.google.com by `konstant...@gmail.com` on 27 Aug 2010 at 8:58\n", "url": "https://github.com/google/gson/issues/229", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.6", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:42", "closed": "2015-03-19 18:26:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Maps do not serialize usefully", "body": "```\nI want to serialize a Map<MyObject, ...>. This is not currently possible \nbecause these are serialized into:\n\n{\"<myObject1.toString()>\" : ..., \"<myObject2.toString()>\" : ..., ...}\n\nwhich is obviously not reversible back into my MyObject instances.\n\nI was able to fix this problem by writing a custom adapter that simply \ntransforms the Map into a List on serialization and back into a Map on \ndeserialization, but this is a pain when otherwise I can serialize a huge \nobject hierarchy very simply.\n\ne.g., I made the above serialize to [{\"k\" : myObject1, \"v\" : ...}, {\"k\" : \nmyObject2, \"v\" : ...}, ...]\n\nI propose that DefaultMapTypeAdapter use something like this List approach by \ndefault, unless the key value happens to be a String, since there is really \nnothing else particularly sane it can do without losing a ton of information in \ndoing the String.valueOf() call.\n```\n\nOriginal issue reported on code.google.com by `jsha...@google.com` on 26 Aug 2010 at 9:02\n- Merged into: #210\n", "url": "https://github.com/google/gson/issues/228", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:41", "closed": "2015-03-19 18:26:41", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Map<String, ...> with empty strings (or strings consisting of whitespace) don't serialize", "body": "```\nJsonObject has this precondition check for map properties:\n\n!\"\".equals(property.trim())\n\n(line 55 of JsonObject.java in my checkout)\n\nThis causes this map to fail to serialize:\n\nMap<String, Integer> map = new HashMap();\nmap.put(\"\", 1);\nmap.put(\"k\", 1000);\nmap.put(\"m\", 1000000);\n```\n\nOriginal issue reported on code.google.com by `jsha...@google.com` on 26 Aug 2010 at 8:56\n", "url": "https://github.com/google/gson/issues/227", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:40", "closed": "2015-03-19 18:26:40", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Enum with body does not serialize", "body": "```\nGiven this test:\n\nenum Toy{\n        CAR\n}\n\n@Test\n    public void serializeEnums()\n    {\n        assertEquals(\"\\\"CAR\\\"\",new Gson().toJson(Toy.CAR));\n\n   }\n\n... the serialization works fine. If I add body to the enum, however:\n\nenum Toy{\n        CAR{ /** Empty body **/}\n}\n\n.. the result is an empty string.\n\n\nTested on version 1.5.\n```\n\nOriginal issue reported on code.google.com by `tfn...@gmail.com` on 26 Aug 2010 at 4:09\n", "url": "https://github.com/google/gson/issues/226", "user": "GoogleCodeExporter", "labels": ["Priority-High", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:39", "closed": "2015-03-19 18:26:39", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Implement equals() to perform deep-value-comparison", "body": "```\nJsonObject and friends should implement equals() to support unit testing \nwithout forcing a call to toString() just to do a comparison.\n\n    assertThat(someJsonObject, is(someOtherJsonObject));\n\nas opposed to\n\n    assertThat(someJsonObject.toString(), \n            is(someOtherJsonObject.toString()));\n\nThere's a patch for this at\n\n    http://code.google.com/p/google-gson/issues/detail?id=64&q=equals#c4\n\n```\n\nOriginal issue reported on code.google.com by `emperorf...@gmail.com` on 21 Aug 2010 at 12:05\n- Merged into: #64\n", "url": "https://github.com/google/gson/issues/225", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:38", "closed": "2015-03-19 18:26:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Not able searialize HashMap and adding instance into JSON", "body": "```\nWhat steps will reproduce the problem?\nHashMap<Customer, List<CampaignProduct>> customerCplHashMap = new \nHashMap<Customer, List<CampaignProduct>>();\n\ncustomerCplHashMap.put(semCustomer, cpls);\ndumpJson(writerCustCpl, gson.toJson(customerCplHashMap));\n\nOUTPUT\n\n{\"cs.com.test.domain.Customer@7cd6de\":[{\"id\":1532,\"name\":\"25-2\"}]}\n\nWhat is the expected output? What do you see instead?\n{\"\"id\":1,\"name\":\"John\":[{\"id\":1532,\"name\":\"25-2\"}]}\n\n\nWhat version of the product are you using? On what operating system?\nWINDOWS and GSON 1.5 Beta\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `das.k.ab...@gmail.com` on 5 Aug 2010 at 5:20\n- Merged into: #210\n", "url": "https://github.com/google/gson/issues/224", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:36", "closed": "2015-03-19 18:26:36", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson can't parse JSON text encoded in UTF-8?", "body": "```\n<code>\nimport java.io.BufferedReader;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nimport com.google.gson.JsonElement;\nimport com.google.gson.JsonParser;\n\npublic class Test {\n        private static final String charEncoding=\"UTF-8\";\n\n        private static final String fileName=\"c:\\\\test2.txt\";\n        public static void main(String args[]){\n                try{\n                        File file=new File(fileName);\n                        if(file.canRead()){\n                                FileInputStream inStream=new FileInputStream(file);\n                                InputStreamReader reader=new InputStreamReader(inStream,\ncharEncoding);\n                                JsonParser parser=new JsonParser();\n                                JsonElement jsonA=parser.parse(new BufferedReader(reader));\n                                System.out.println(jsonA.isJsonArray());\n                                System.out.println(jsonA.toString());\n                        }\n                }catch(IOException e){\n                        e.printStackTrace();\n                }\n        }\n\n} \n</code>\n\nWhat is the expected output? What do you see instead?\nCaused by: com.google.gson.TokenMgrError: Lexical error at line 1,\ncolumn 1.  Encountered: \"\\ufeff\" (65279), after : \"\"\n        at\ncom.google.gson.JsonParserJavaccTokenManager.getNextToken(JsonParserJavaccTokenM\nanager.java:\n1193)\n        at com.google.gson.JsonParserJavacc.jj_ntk(JsonParserJavacc.java:635)\n        at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:10)\n        at com.google.gson.JsonParser.parse(JsonParser.java:54)\n        ... 1 more \n\nWhat version of the product are you using? On what operating system?\ngson 1.4\n\nPlease provide any additional information below.\nattached is the text file containing the json string\n\n```\n\nOriginal issue reported on code.google.com by `monstern...@gmail.com` on 8 Jul 2010 at 12:57\n\nAttachments:\n- [test2.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-221/comment-0/test2.txt)\n", "url": "https://github.com/google/gson/issues/221", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:32", "closed": "2015-03-19 18:26:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "It is not supporting ot CachedRowSet objet", "body": "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\nShould support CatchedRowSet object\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `mrrajar...@gmail.com` on 8 Jul 2010 at 12:16\n", "url": "https://github.com/google/gson/issues/220", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:32", "closed": "2015-03-19 18:26:32", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Nested generic collections don't return jsonized values on toJson", "body": "```\n+  private static class ClassWithDistinguishableFieldName {\n+    private String distinguishableFieldName = \"distinguishableFieldValue\";\n+  }\n+\n+  private static class ClassWithHashMapField {\n+    private String a = \"a\";\n+    private String b = \"b\";\n+    HashMap<String, Object> c = new HashMap<String, Object>();\n+\n+    ClassWithHashMapField() {\n+      c.put(\"someArray\", Arrays.asList(new \nClassWithDistinguishableFieldName()));\n+    }\n+  }\n\n\n\n+    ClassWithHashMapField o = new ClassWithHashMapField();\n+    String json = gson.toJson(o);\n\njson:\n  {\"a\":\"a\",\"b\":\"b\",\"c\":{\"someArray\":{}}}\n\nexpected:\n  {\"a\":\"a\",\"b\":\"b\",\"c\":{\"someArray\":[{\"distinguishableFieldName\":\"distinguishableFieldValue\"}]}}\n\n\nThis issue was blocking a project I am working on; so I attached a patch with a \ntest.\n```\n\nOriginal issue reported on code.google.com by `masahji%...@gtempaccount.com` on 28 Jun 2010 at 2:47\n", "url": "https://github.com/google/gson/issues/218", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:27", "closed": "2015-03-19 18:26:27", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "primitive type support", "body": "```\nObject d=100.0;\nString jsond=gson.toJson(d);\nassertEquals(\"100.0\",jsond);\nObject db=gson.fromJson(jsond, Object.class);\n//gson bug,this should be true, although given a Object.class, but from the \njson string ,it's clear that , the result should be a Double\nassertFalse(d.equals(db));\n\n//also\nObject b=true;\nString jsonb=gson.toJson(b);\nassertEquals(\"true\",jsonb);\nObject bb=gson.fromJson(jsonb, Object.class);\n//gson bug, bb should be a Boolean\nassertFalse(b.equals(bb));\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `lanxia...@gmail.com` on 25 Jun 2010 at 12:02\n", "url": "https://github.com/google/gson/issues/217", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:27", "closed": "2015-03-19 18:26:27", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Does gson should work for a Blackberry application?", "body": "```\nWhat steps will reproduce the problem?\n1. Create a Java BlackBerry application at Eclipse\n2. Add the gson JARs as external jars\n3. Try to run the application in the simulator. Wont run: module not found error\n\nTried to preverify class and it's throwing an error\n\nWhat is the expected output? What do you see instead?\nShould be able to run the application without errors.\n\nWhat version of the product are you using? On what operating system?\ngson 1.4, Eclipse Galileo, latest Blackberry SDK (1.2)\n\nPlease provide any additional information below.\nIf I select to Export the JAR at the project's properties it wont even get \npacked, it will throw an error when packing\n```\n\nOriginal issue reported on code.google.com by `arturo.o...@gmail.com` on 16 Jun 2010 at 9:10\n", "url": "https://github.com/google/gson/issues/216", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:25", "closed": "2015-03-19 18:26:25", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Deserialization of List with one item", "body": "```\nI am using GSON for JSON deserialization and so far it has been a great help.\nBut I am struggling with an issue with de serialization of List with generic \nand concrete types when the list contains only one element.\n\nFor example - \n\npublic class Department {\n    public String name;\n    public String code;\n}\n\npublic class Product {\n\n        private List<String> attributes;\n        private List<Department> departments;\n\n        public List<String> getAttributes() {\n            return attributes;\n        }\n\n        public void setAttributes(List<String> attributes) {\n            this.attributes = attributes;\n\n        public List<Department> getDepartments() {\n            return departments;\n        }\n\n        public void setDepartments(List<Department> departments) {\n            this.departments = departments;\n\n    }\n}\n\nThis works fine if either of my list attributes or departments contain more \nthan one item in the list.\nBut if it contains only element in the list - I get an error saying - no valid \nJSON Array\n\nPlease help!\n\n\n```\n\nOriginal issue reported on code.google.com by `nitin.na@gmail.com` on 12 Jun 2010 at 2:04\n", "url": "https://github.com/google/gson/issues/215", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:25", "closed": "2015-03-19 18:26:25", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Map key can not use java bean.", "body": "```\nWhat steps will reproduce the problem?\n1.User.java\n\npackage gson.test;\n\npublic class User {\n\n    private String id;\n\n    private String name;\n\n    /** {@inheritDoc} */\n    @Override\n    public String toString() {\n        return \"User [id=\" + id + \", name=\" + name + \"]\";\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n2.Test.java\npackage gson.test;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\npublic class Test {\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        Gson gson = new Gson();\n        User user = new User();\n        user.setId(\"1001\");\n        user.setName(\"\u5f20\u4e09\");\n\n        Map<User,User> map = new HashMap<User, User>();\n        map.put(user, user);\n        String jsonString = gson.toJson(map);\n        System.out.println(jsonString);\n        Object o = gson.fromJson(jsonString,new TypeToken<Map<User, User>>(){}.getType());\n        System.out.println( o);\n    }\n\n}\n\n3.\n\nWhat is the expected output? What do you see instead?\n{\"User [id=1001, name=\u5f20\u4e09]\":{\"id\":\"1001\",\"name\":\"\u5f20\u4e09\"}}\nException in thread \"main\" com.google.gson.JsonParseException: Expecting object \nfound: \"User [id=1001, name=\u5f20\u4e09]\"\n    at com.google.gson.JsonObjectDeserializationVisitor.visitFieldUsingCustomHandler(JsonObjectDeserializationVisitor.java:100)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:150)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:123)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonPrimitive(JsonDeserializationContextDefault.java:84)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:53)\n    at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.deserialize(DefaultTypeAdapters.java:531)\n    at com.google.gson.DefaultTypeAdapters$MapTypeAdapter.deserialize(DefaultTypeAdapters.java:498)\n    at com.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExceptionWrapper.java:50)\n    at com.google.gson.JsonDeserializationVisitor.invokeCustomDeserializer(JsonDeserializationVisitor.java:88)\n    at com.google.gson.JsonDeserializationVisitor.visitUsingCustomHandler(JsonDeserializationVisitor.java:76)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:98)\n    at com.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializationContextDefault.java:73)\n    at com.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializationContextDefault.java:51)\n    at com.google.gson.Gson.fromJson(Gson.java:495)\n    at com.google.gson.Gson.fromJson(Gson.java:444)\n    at com.google.gson.Gson.fromJson(Gson.java:396)\n    at gson.test.Test.main(Test.java:24)\n\n\nWhat version of the product are you using? On what operating system?\n1.4\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `haoks...@gmail.com` on 10 Jun 2010 at 5:52\n- Merged into: #210\n", "url": "https://github.com/google/gson/issues/214", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:24", "closed": "2015-03-19 18:26:24", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Typo", "body": "```\nWhat steps will reproduce the problem?\n1. Go to http://sites.google.com/site/gson/gson-user-guide#TOC-Writing-a-\nSerializer\n2. There is no return statement in the method definition for \nDateTimeSerializer.\n\nWhat is the expected output? What do you see instead?\nThe return statement is missing.\n\nWhat version of the product are you using? On what operating system?\nAny browser, any os.\n\n\n```\n\nOriginal issue reported on code.google.com by `jeremyfl...@gmail.com` on 6 Jun 2010 at 10:42\n", "url": "https://github.com/google/gson/issues/213", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:23", "closed": "2015-03-19 18:26:24", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Giant strings can be used to DoS parsing", "body": "```\nWhat steps will reproduce the problem?\n1. Create a small json file with one name field really big (let's say 3 Mb)\n2. Parse that String\n\nWhat is the expected output? What do you see instead?\nAlthough the json object is really small one, the fact of having that\nreally big name field makes the parsing really slow.\n\nWhat version of the product are you using? On what operating system?\nI have tested that with 1.3 and 1.4.  Ubuntu 9.10\n\nPlease provide any additional information below.\nAlthough it seems not so important because no one should create a json\nobject like that , this is an important issue when trying to avoid DoS attacks.\n```\n\nOriginal issue reported on code.google.com by `Enrique....@gmail.com` on 26 May 2010 at 6:02\n", "url": "https://github.com/google/gson/issues/211", "user": "GoogleCodeExporter", "labels": ["Priority-Low", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:21", "closed": "2015-03-19 18:26:21", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Cannot serialize or deserialize Maps with complex keys", "body": "```\nimport java.util.HashMap;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\n\npublic class GsonTest {\n\n    public static void main(String[] args) {\n\n        new GsonTest();\n\n    }\n\n    public GsonTest() {\n        HashMap<ComplexKey, String> map = new HashMap<ComplexKey, String>();\n\n        map.put(new ComplexKey(\"Test1\", \"Test2\"), \"Value1\");\n\n        Gson gson = new Gson();\n        System.out.println(gson.toJson(map, new TypeToken<HashMap<ComplexKey,\nString>>(){}.getType()));\n    }\n\n    public class ComplexKey {\n\n        private String keyOne;\n        private String keyTwo;\n\n        public ComplexKey(String keyOne, String keyTwo) {\n            this.keyOne = keyOne;\n            this.keyTwo = keyTwo;\n        }\n\n        public String getKeyOne() {\n            return keyOne;\n        }\n\n        public void setKeyOne(String keyOne) {\n            this.keyOne = keyOne;\n        }\n\n        public String getKeyTwo() {\n            return keyTwo;\n        }\n\n        public void setKeyTwo(String keyTwo) {\n            this.keyTwo = keyTwo;\n        }\n    }\n}\n\nExpected Output:\n{\"{\"keyOne\":\"Test1\",\"keyTwo\":\"Test2\"}\":\"Value1\"}\n\n\nActual Output:\n{\"GsonTest$ComplexKey@1172e08\":\"Value1\"}\n\n\n```\n\nOriginal issue reported on code.google.com by `rev...@paradise.net.nz` on 25 May 2010 at 2:53\n", "url": "https://github.com/google/gson/issues/210", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.7", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:18", "closed": "2015-03-19 18:26:18", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Can not serialize when the bean contains a List of object defined by interfaces", "body": "```\nWhat steps will reproduce the problem?\nSee the code:\n\npublic class FirstImpl implements First {\n\n    private String name;\n\n    public String getName() {\n        return this.name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n}\n\npublic interface First {\n\n    public String getName();\n\n    public void setName(String name);\n\n}\n\nimport java.util.List;\n\npublic class ParentFirst {\n\n    private String name;\n    private List<First> firsts;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public List<First> getFirsts() {\n        return this.firsts;\n    }\n\n    public void setFirsts(List<First> firsts) {\n        this.firsts = firsts;\n    }\n}\n\nimport java.util.List;\n\npublic class ParentFirstImpl {\n\n    private String name;\n    private List<FirstImpl> firsts;\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n\n    public List<FirstImpl> getFirsts() {\n        return this.firsts;\n    }\n\n    public void setFirsts(List<FirstImpl> firsts) {\n        this.firsts = firsts;\n    }\n}\n\nGson gson = new Gson();\nString json = null;\n\nFirstImpl firstClass = new FirstImpl();\nfirstClass.setName(\"First name by class\");\njson = gson.toJson(firstClass);  \nSystem.out.println(json);\n\nFirst firstInterface = new FirstImpl();\nfirstInterface.setName(\"First name by interface\");\njson = gson.toJson(firstInterface);  \nSystem.out.println(json);\n\nList<FirstImpl> firstsClass = new ArrayList<FirstImpl>();\nfirstsClass.add(firstClass);\njson = gson.toJson(firstsClass);\nSystem.out.println(json);\n\nList<First> firstsInterface = new ArrayList<First>();\nfirstsInterface.add(firstInterface);\njson = gson.toJson(firstsInterface);\nSystem.out.println(json);\n\nParentFirst parentFirst = new ParentFirst();\nparentFirst.setName(\"List first name by interface\");\nparentFirst.setFirsts(firstsInterface);\njson = gson.toJson(parentFirst);\nSystem.out.println(json);\n\nParentFirstImpl parentFirstImpl = new ParentFirstImpl();\nparentFirstImpl.setName(\"List first name by class\");\nparentFirstImpl.setFirsts(firstsClass);\njson = gson.toJson(parentFirstImpl);\nSystem.out.println(json);\n\n\nWhat is the expected output? What do you see instead?\nExpected:\n[{\"name\":\"First name by class\"}]\n[{\"name\":\"First name by interface\"}]\n{\"name\":\"List first name by interface\",\"firsts\":[{\"name\":\"First name by\nclass\"}]}\n{\"name\":\"List first name by class\",\"firsts\":[{\"name\":\"First name by class\"}]}\n\nSee:\n[{\"name\":\"First name by class\"}]\n[{\"name\":\"First name by interface\"}]\n{\"name\":\"List first name by interface\",\"firsts\":[{}]}\n{\"name\":\"List first name by class\",\"firsts\":[{\"name\":\"First name by class\"}]}\n\nWhat version of the product are you using? On what operating system?\n1.3\n\nPlease provide any additional information below.\nI am actually debugging to see if I can find a patch, even if i write a\ncustom serializer should work.\n```\n\nOriginal issue reported on code.google.com by `lapinouj...@gmail.com` on 14 May 2010 at 10:35\n- Merged into: #231\n", "url": "https://github.com/google/gson/issues/209", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:17", "closed": "2015-03-19 18:26:17", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Handle bitsets correctly", "body": "```\nSee \nhttp://groups.google.com/group/google-gson/browse_thread/thread/535892ffcf691aa\nfor details on the bug\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Apr 2010 at 4:19\n", "url": "https://github.com/google/gson/issues/207", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:13", "closed": "2015-03-19 18:26:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Confusing behavior when Object is the field type", "body": "```\nWhat steps will reproduce the problem?\n1. Object[] array = new Object[] { new Object[] { 1, 2 } };\n2. Gson gson = new Gson();\n3. System.out.println(gson.toJson(array));\n\nWhat is the expected output? \n[[1,2]]\n\nWhat do you see instead?\n[{}]\n\nWhat version of the product are you using? On what operating system?\n1.4 on Windows XP.\n\nPlease provide any additional information below.\nI may be doing this wrong...  Is that behavior intentional?\n```\n\nOriginal issue reported on code.google.com by `michael.hixson@gmail.com` on 23 Apr 2010 at 10:51\n", "url": "https://github.com/google/gson/issues/205", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.7", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:08", "closed": "2015-03-19 18:26:08", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Empty Maps crash the json rendering when pretty printing is used - the next comma is missing from output", "body": "```\nTest Code:\n\nHashMap<String, Object> hs = new HashMap<String, Object>();\nHashMap<String, Object> details = new HashMap<String, Object>();\n\nhs.put(\"id\", 12);\nhs.put(\"name\", \"Alejandro\");\nhs.put(\"details\", details);\n\nBoolean includeNullFields = true;\nBoolean prettyRender = true;\n\ntry {\n\n    GsonBuilder gsonBuilder = new GsonBuilder();\n\n    if (includeNullFields && prettyRender)\n        gsonBuilder.serializeNulls().setPrettyPrinting();\n    else if (includeNullFields && !prettyRender)\n        gsonBuilder.serializeNulls();\n    else if (!includeNullFields && prettyRender)\n        gsonBuilder.setPrettyPrinting();\n\n    Gson gson = null;\n    gson = gsonBuilder.create();\n    String jsonResponse = gson.toJson(hs);\n\n    System.out.println(jsonResponse);\n\n} catch (Exception e) {\n    e.printStackTrace();\n}\n\n\nThe above code outputs: \n{\"id\":12,\"details\":{}\"name\":\"Alejandro\"}\n\n\nIf Pretty Printing is NOT used then the output is correct:\n{\"id\":12,\"details\":{},\"name\":\"Alejandro\"}\n\n\n```\n\nOriginal issue reported on code.google.com by `bobghera...@gmail.com` on 21 Apr 2010 at 10:09\n", "url": "https://github.com/google/gson/issues/204", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:07", "closed": "2015-03-19 18:26:07", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "toJson escapes \"=\" unnecessarily in raw strings", "body": "```\nWhat steps will reproduce the problem?\n1. Create an object with a single String field.\n2. Set field to \"http://someUrl.com?a=b\"\n3. Attempt to convert the object to json via gson.toJson\n\nWhat is the expected output? What do you see instead?\nI would expect the URL to be serialized exactly as it is written. Instead, \nthe equals sign is encoded as \\u003d.\n\nWhat version of the product are you using? On what operating system?\n1.4\n\n\n```\n\nOriginal issue reported on code.google.com by `arcanef...@gmail.com` on 20 Apr 2010 at 5:08\n", "url": "https://github.com/google/gson/issues/203", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:05", "closed": "2015-03-19 18:26:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Don't include empty ENUMs in serialized output", "body": "```\nI have a few classes with \n\nprivate final EnumSet<MyEnum> myflags = EnumSet.noneOf(MyEnum.class);\n\nthe JSON-serialized output contains\n\"myflags\":[]\n\nwhich is surprising given that from the docs\n\"This implementation handles nulls correctly, While serialization, a null\nfield is skipped from the output\"\n\nYes, the field isn't null.  But it is empty.  Is there a way to \"skip empty\ncollections\" in the output?\n\nIt would be a huge space saver in the generated JSON file if there was a\nway to skip empty EnumSet (or even better, any empty collection) -\nespecially for outputs that contain a LOT of instances of objects with\nflags in them.\n\nLatest gson release (1.4)\n\n```\n\nOriginal issue reported on code.google.com by `benjamin...@gmail.com` on 15 Apr 2010 at 2:44\n", "url": "https://github.com/google/gson/issues/202", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:05", "closed": "2015-03-19 18:26:05", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Cannot deserialize JSON into a JsonObject", "body": "```\nWhat steps will reproduce the problem?\n1. Create a Gson() object\n2. Attempt to deserialize a Json string into a JsonObject instance\n3. Watch as you get an empty JsonObject\n\nWhat is the expected output? What do you see instead?\nIt would be nice to have the JsonObject be populated with the fields and\nvalues from the Json string. This doesn't happen, and instead we receive an\nempty Json object. This is likey to be caused because there is a lack of a\ncustom deserializer for JsonObject, which would fill it up with the fields\nin the Json string.\n\nWhat version of the product are you using? On what operating system?\nVersion 1.4, on OpenSuse Linux\n\n```\n\nOriginal issue reported on code.google.com by `paul.gib...@gmail.com` on 14 Apr 2010 at 7:33\n", "url": "https://github.com/google/gson/issues/201", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:03", "closed": "2015-03-19 18:26:04", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "How do I deserialize when the result is sometimes an object and sometimes an array", "body": "```\n\nI am trying to deserialize a json object which sometimes comes in the form of \nan array of objects \nand sometimes it's the object itself. Is there a way of handling these \nsituations.\n\neg\n\"Categories\":{\"Category\":[{\"id\":\"96926148\",\"content\":\"Food Delivery \nServices\"},{\"id\":\"96926234\",\"content\":\"Carry Out & Take \nOut\"},{\"id\":\"96926238\",\"content\":\"Sandwiches\"},{\"id\":\"96926242\",\"content\":\"Fast \nFood\"},{\"id\":\"96926243\",\"content\":\"Pizza\"}]}\n\nand sometimes\n\n\"Categories\":{\"Category\":{\"id\":\"96926148\",\"content\":\"Food Delivery Services\"}}\n\n\n```\n\nOriginal issue reported on code.google.com by `james.st...@epochsg.com` on 4 Apr 2010 at 3:54\n", "url": "https://github.com/google/gson/issues/200", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:02", "closed": "2015-03-19 18:26:02", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "date format problem", "body": "```\nWhat is the expected output? What do you see instead?\nexpected:'2010-02-02' actually:{\"nanos\":0} or null\n\nWhat version of the product are you using? On what operating system?\nversion=1.4   system=windows 7\n\nPlease provide any additional information below.\nwhen I select a date field from the database and output the string with\nGson,and the date field displays follow :{\"nanos\":0} or null, but my\ndatabase has date data in it.\n```\n\nOriginal issue reported on code.google.com by `wuguangjian` on 21 Mar 2010 at 7:22\n", "url": "https://github.com/google/gson/issues/199", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:26:00", "closed": "2015-03-19 18:26:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "toJson has many useless character", "body": "```\nStruts2+hibernate3.3+Spring\nSysUserConfig sysUserConfig = \nthis.sysUserConfigService.getSysUserConfig(this.sysUserConfig.getId());\n\nout.write(new GsonBuilder().setDateFormat(\"yyyy-MM-\ndd\").disableHtmlEscaping().create().toJson(sysUserConfig));\n\noutput:\n{\"handler\":{\"interfaces\":[{}],\"constructed\":true,\"persistentClass\":{},\"getI\ndentifierMethod\":{\"clazz\":{},\"slot\":27,\"name\":\"getId\",\"returnType\":{},\"para\nmeterTypes\":[],\"exceptionTypes\":[],\"modifiers\":1,\"root\":{\"clazz\":{},\"slot\":\n27,\"name\":\"getId\",\"returnType\":{},\"parameterTypes\":[],\"exceptionTypes\":[],\"\nmodifiers\":1,\"override\":false},\"override\":false},\"setIdentifierMethod\":{\"cl\nazz\":{},\"slot\":0,\"name\":\"setId\",\"returnType\":{},\"parameterTypes\":[{}],\"exce\nptionTypes\":[],\"modifiers\":1,\"root\":{\"clazz\":{},\"slot\":0,\"name\":\"setId\",\"re\nturnType\":{},\"parameterTypes\":[{}],\"exceptionTypes\":[],\"modifiers\":1,\"overr\nide\":false},\"override\":false},\"overridesEquals\":false,\"entityName\":\"com.tjs\noft.vo.SysUserConfig\",\"id\":\"20100308170143781\",\"target\":{\"id\":\"201003081701\n43781\",\"configName\":\"\u6d4b\u8bd5\",\"userId\":999999999999999,\"slStartDate\":\"2009-01-\n01\",\"slEndData\":\"2010-03-31\",\"createDate\":\"2010-03-\n08\",\"status\":\"1\",\"bjStartDate\":\"2009-01-01\",\"bjEndDate\":\"2010-04-\n02\",\"zaiban\":\"1\",\"banjie\":\"1\",\"suoyou\":\"1\"},\"initialized\":true,\"unwrap\":fal\nse}}\n\nbut i just want:\n\n{\"id\":\"20100308170143781\",\"configName\":\"\u6d4b\n\u8bd5\",\"userId\":999999999999999,\"slStartDate\":\"2009-01-01\",\"slEndData\":\"2010-\n03-31\",\"createDate\":\"2010-03-08\",\"status\":\"1\",\"bjStartDate\":\"2009-01-\n01\",\"bjEndDate\":\"2010-04-02\",\"zaiban\":\"1\",\"banjie\":\"1\",\"suoyou\":\"1\"}\n\nhow can i do it?\n\n```\n\nOriginal issue reported on code.google.com by `ilovehon...@gmail.com` on 19 Mar 2010 at 8:49\n", "url": "https://github.com/google/gson/issues/198", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:59", "closed": "2015-03-19 18:25:59", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "StackOverflowError for large maps", "body": "```\nWhat steps will reproduce the problem?\n\n  public void testLargeGsonMapRoundTrip() throws Exception {\n    Map<Long, Long> original = Maps.newHashMap();\n    for (long i = 0; i < 50000; i++) {\n      original.put(i, i + 1);\n    }\n\n    Gson gson = new Gson();\n    String json = gson.toJson(original);\n\n    Type longToLong = new TypeToken<Map<Long, Long>>(){}.getType();\n    gson.fromJson(json, longToLong);\n  }\n\nWhat is the expected output? \n\nGson should not recurse when parsing map entries. Parsing JSON is not that \nhard, so I suggest not using Javacc. \n\nWhat do you see instead?\n\ncom.google.gson.JsonParseException: Failed parsing JSON source: \njava.io.StringReader@186d484 to Json\n    at com.google.gson.JsonParser.parse(JsonParser.java:61)\n    at com.google.gson.Gson.fromJson(Gson.java:443)\n    at com.google.gson.Gson.fromJson(Gson.java:396)\n...\n\nCaused by: java.lang.StackOverflowError\n    at \ncom.google.gson.JsonParserJavacc.jj_3R_5(JsonParserJavacc.java:449)\n    at \ncom.google.gson.JsonParserJavacc.jj_3R_4(JsonParserJavacc.java:456)\n    at \ncom.google.gson.JsonParserJavacc.jj_3R_2(JsonParserJavacc.java:443)\n    at \ncom.google.gson.JsonParserJavacc.jj_3_1(JsonParserJavacc.java:462)\n    at \ncom.google.gson.JsonParserJavacc.jj_2_1(JsonParserJavacc.java:428)\n    at \ncom.google.gson.JsonParserJavacc.JsonNumber(JsonParserJavacc.java:276)\n    at \ncom.google.gson.JsonParserJavacc.JsonValue(JsonParserJavacc.java:213)\n    at com.google.gson.JsonParserJavacc.Pair(JsonParserJavacc.java:112)\n    at \ncom.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:95)\n    at \ncom.google.gson.JsonParserJavacc.Members(JsonParserJavacc.java:99)\n...\n\n\nWhat version of the product are you using? On what operating system?\n\n1.4 (in google3)\n\n```\n\nOriginal issue reported on code.google.com by `skybr...@google.com` on 9 Mar 2010 at 7:44\n", "url": "https://github.com/google/gson/issues/197", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:58", "closed": "2015-03-19 18:25:58", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "convert JSON to Map", "body": "```\nWhat steps will reproduce the problem?\n1.just run the TestJson.\n\nWhat is the expected output? What do you see instead?\nerror.\n\nWhat version of the product are you using? On what operating system?\n1.4\n\nPlease provide any additional information below.\nI have used the json string created by Gson.toJson to recreate the values fo \nTestJson.\nPlease refer attached file\n```\n\nOriginal issue reported on code.google.com by `usp...@gmail.com` on 11 Feb 2010 at 10:00\n\nAttachments:\n- [TestJson.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-192/comment-0/TestJson.java)\n", "url": "https://github.com/google/gson/issues/192", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:52", "closed": "2015-03-19 18:25:52", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Fields excluded in ExclusionStrategy should not be made accessible", "body": "```\nWhat steps will reproduce the problem?\nWe faced this problem on Google App Engine since there are security \nrestrictions in place.\n\n1. We have a class with field on which access via reflection is not \nallowed. e.g\n\nclass ClassWithNonAccessibleField {\n  //Security manager doesn't allow access to this\n  private static final int version;\n  //This field is accessible\n  private int accessible;\n}\n\n2. Try to serialize the class as follows using the following exclusion \nstrategy:\nprivate Gson gson= new GsonBuilder().excludeFieldsWithModifiers\n(Modifier.STATIC, Modifier.TRANSIENT,\n                    Modifier.VOLATILE).create();\n\nWhat is the expected output? What do you see instead?\nThe excluded fields should be skipped and only fields that are to be \nserialized should be made accessible. \nBut in this case, trying to serialize ClassWithNonAccessibleField will \nresult in a SecurityException in the ObjectNavigator class.\n\nWe could overcome this problem by trying to exclude such fields from \nserialization. But the setAccessible() method is called for all fields of \nthe class in a single shot, hence causing a AccessControlException.\n\nWhat version of the product are you using? On what operating system?\nGson version 1.4 on Google app engine 1.3.0\n\nPlease provide any additional information below.\nThe above example is a simplification of the scenario in which we faced \nthe problem. I can provide more details if required.\n\nAlso find attached a patch that is working fine on app engine. :)\n```\n\nOriginal issue reported on code.google.com by `akhilra...@gmail.com` on 27 Jan 2010 at 7:25\n", "url": "https://github.com/google/gson/issues/191", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:50", "closed": "2015-03-19 18:25:50", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "can't handle the following json: {\"type\":\"Point\",\"coordinates\":[37.43504333,-122.42824554]}", "body": "```\nWhat steps will reproduce the problem?\n\nurl: http://twitter.com/statuses/user_timeline.json?\nscreen_name=StartupDigest\n\n// get http request, convert to bufferedreader\n\nType listType = new TypeToken<List<Status>>() {}.getType();\ngson.fromJson(bufferedReader, listType);\n\nWhat is the expected output? What do you see instead?\n\nExpected: A json deserialized object in java.\n\nActual:\n\nThe JsonDeserializer failed to deserialized json object \n{\"type\":\"Point\",\"coordinates\":[37.43504333,-122.42824554]}\n\nWhat version of the product are you using? On what operating system?\n\nLatest.  Windows Vista.\n```\n\nOriginal issue reported on code.google.com by `david.jonathan.nelson` on 24 Jan 2010 at 8:54\n", "url": "https://github.com/google/gson/issues/190", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:49", "closed": "2015-03-19 18:25:49", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "crash with embeded \"", "body": "```\nWhat steps will reproduce the problem?\ngson.fromJson(\"{\\\"title\\\":\\\"? The Trend: \\\"Can You Write News\\\" ? The\nSearch For Stuff:\\\"}\", Object.class);\n\nWhat is the expected output? What do you see instead?\n\nShould parse (with an error because of using Object.class) instead throws:\n\nCaused by: com.google.gson.ParseException: Encountered \"\n<IDENTIFIER_SANS_EXPONENT> \"Can \"\" at line 1, column 25.\nWas expecting one of:\n    \"}\" ...\n    \",\" ...\n\ncom.google.gson.JsonParseException: Failed parsing JSON source:\njava.io.StringReader@380e28b9 to Json\n        at com.google.gson.JsonParser.parse(JsonParser.java:59)\n        at com.google.gson.Gson.fromJson(Gson.java:443)\n        at com.google.gson.Gson.fromJson(Gson.java:396)\n        at com.google.gson.Gson.fromJson(Gson.java:372)\n        at Test.foo(Test.java:139)\n        at\ncom.google.gson.JsonParserJavacc.generateParseException(JsonParserJavacc.java:70\n5)\n        at\ncom.google.gson.JsonParserJavacc.jj_consume_token(JsonParserJavacc.java:587)\n        at\ncom.google.gson.JsonParserJavacc.JsonObject(JsonParserJavacc.java:82)\n        at com.google.gson.JsonParserJavacc.parse(JsonParserJavacc.java:36)\n        at com.google.gson.JsonParser.parse(JsonParser.java:54)\n\n\nWhat version of the product are you using? On what operating system?\n\n1.4 Windows 7 64-bit.\n\nPlease provide any additional information below.\n\nThe issue is the \\\"Can You Write News\\\" - works if you change it to \\\\\\\"Can\nYou Write News\\\\\\\".  From what I can tell it should work with out the\nadditional \\\\ though.\n```\n\nOriginal issue reported on code.google.com by `dstobede...@gmail.com` on 22 Jan 2010 at 11:13\n", "url": "https://github.com/google/gson/issues/189", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:48", "closed": "2015-03-19 18:25:48", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Support InputStream", "body": "```\nPlease support InputStream and GZIPInputStream instead of String for \ngson.fromJson(response, listType);\n\nThanks, :-)\n```\n\nOriginal issue reported on code.google.com by `david.jonathan.nelson` on 22 Jan 2010 at 8:16\n", "url": "https://github.com/google/gson/issues/187", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:45", "closed": "2015-03-19 18:25:45", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "JsonParseException is not very informative (does not return the offending string)", "body": "```\nWhat steps will reproduce the problem?\n1. trigger a JsonParseException at the invocation of Gson.fromJson (by \nproviding a malformed String)\n2. catch and print the trace (e.printStackTrace())\n3. the trace print does not provide the offending String\n\nWhat is the expected output? What do you see instead?\nHere is the expected output:\ncom.google.gson.JsonParseException: Failed parsing JSON source: \"actual \nmalformed Json string\" to Json\n\nand here is what I got instead:\ncom.google.gson.JsonParseException: Failed parsing JSON source: \njava.io.StringReader@a0dcd9 to Json\n\nlooking at the sources:\nJsonParser.java:59 we find:\n      throw new JsonParseException(\"Failed parsing JSON source: \" + json + \n\" to Json\", e);\nmaybe (...??) the following could be used:\n\nWhat version of the product are you using? On what operating system?\ngson-1.4 on Windows XP\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `mperdik...@gmail.com` on 20 Jan 2010 at 10:52\n", "url": "https://github.com/google/gson/issues/186", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:45", "closed": "2015-03-19 18:25:45", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Why not getter and setter?", "body": "```\nWhat steps will reproduce the problem?\nGson does not use the getter and setter when serialize and deserialize \nJava objects, that is very strange. \ne.g. I want to do something in the setter: \nprivate int number;\npublic void setNumber(int number) {\n    this.number = number > 0 ? number : 0;\n}\nBut Gson skip over it. \n\nWhat is the expected output? What do you see instead?\nWhen setNumber(- 1);\nthis.number == 0;\nBut not this.number == - 1;\n\nWhat version of the product are you using? On what operating system?\n1.4\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `jessige...@gmail.com` on 14 Jan 2010 at 3:12\n- Merged into: #232\n", "url": "https://github.com/google/gson/issues/185", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:43", "closed": "2015-03-19 18:25:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Can't build gson-1.3 in timezones other than PST:", "body": "```\nWhat steps will reproduce the problem?\n1. Set the system timezone to something other than Pacific (I'm in the\nEastern timezone).\n2. Build gson via Maven.\n\nWhat is the expected output? What do you see instead?\n\nExpecting all tests to pass so . Serialized times carry their timezones\nwith them, thus the times are offset from expected values. This is probably\ncorrect behavior in production, so the problem is with the test. For\ninstance, in the Eastern timezone:\n\n-------------------------------------------------------------------------------\nTest set: com.google.gson.functional.DefaultTypeAdaptersTest\n-------------------------------------------------------------------------------\nTests run: 38, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.157 sec\n<<< FAILURE!\ntestDefaultJavaSqlTimestampSerialization(com.google.gson.functional.DefaultTypeA\ndaptersTest)\n Time elapsed: 0.016 sec  <<< FAILURE!\njunit.framework.ComparisonFailure: expected:<\"Dec 3, 2009 [1]:18:02 PM\">\nbut was:<\"Dec 3, 2009 [4]:18:02 PM\">\n    at junit.framework.Assert.assertEquals(Assert.java:81)\n    at junit.framework.Assert.assertEquals(Assert.java:87)\n    at\ncom.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimestampSe\nrialization(DefaultTypeAdaptersTest.java:239)\n\ntestDefaultJavaSqlTimeSerialization(com.google.gson.functional.DefaultTypeAdapte\nrsTest)\n Time elapsed: 0 sec  <<< FAILURE!\njunit.framework.ComparisonFailure: expected:<\"0[1]:18:02 PM\"> but\nwas:<\"0[4]:18:02 PM\">\n    at junit.framework.Assert.assertEquals(Assert.java:81)\n    at junit.framework.Assert.assertEquals(Assert.java:87)\n    at\ncom.google.gson.functional.DefaultTypeAdaptersTest.testDefaultJavaSqlTimeSeriali\nzation(DefaultTypeAdaptersTest.java:252)\n\n\nWhat version of the product are you using? On what operating system?\n\ngson-1.3, SVN rev. 518 on 32-bit Windows XP w/cygwin.\n\nPlease provide any additional information below.\n\nOne workaround is to change the local system timezone to PST; this causes\nall unit tests to pass.\n```\n\nOriginal issue reported on code.google.com by `mich...@barnathan.name` on 28 Dec 2009 at 4:09\n", "url": "https://github.com/google/gson/issues/184", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:42", "closed": "2015-03-19 18:25:42", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "add set locale method", "body": "```\nPlease add setLocale() method to GsonBuilder, so we can output date format\nin a specified locale format.\n\n```\n\nOriginal issue reported on code.google.com by `Kevin.ti...@gmail.com` on 26 Dec 2009 at 4:50\n- Merged into: #223\n", "url": "https://github.com/google/gson/issues/183", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:41", "closed": "2015-03-19 18:25:41", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "JsonObject toString method doesn't escape double quotes", "body": "```\nCreate the following code:\n JsonObject jsonObj = new JsonObject();\n jsonObj.add(\"quotes\", new JsonPrimitive(\"this is a double quote:'\\\"'\"));\n System.out.println(jsonObj.toString());\n\nI expected this string to be printed:\n {\"quotes\":\"this is a double quote:'\\\"'\"}\n\nhowever i get this one instead:\n {\"quotes\":\"this is a double quote:'\"'\"}\n\nIt's odd because if I have an object (non JsonObject) with a field with\nquotes and i use GsonBuilder to convert it into a string it correctly\nescapes the double quotes.\n\nI am using version 1.3.\n\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `rafael.c...@gmail.com` on 24 Dec 2009 at 12:59\n- Merged into: #178\n", "url": "https://github.com/google/gson/issues/182", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:40", "closed": "2015-03-19 18:25:40", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "No User Manual for JsonStreamParser", "body": "```\nI am using Gson 1.4 Beta.\n\nThe Roadmap (1.4 Beta) states:\n\n\"JsonStreamParser: A streaming parser API class to deserialize multiple\nJSON objects on a stream (such as a pipelined HTTP response).\"\n\nHowever, I cannot find any info in the user manual or API about it. The\nsearch in the issues database does pick up anything with\n\"JsonStreamParser\". Search in the User Manual or Gson site yields nothing\nother than the Roadmap.\n\nThis is fundamental to process large object maps from/to the Json\nInputStream/OutputStream with another InputStream/OutputStream.\n\nFor example, with JDO, we should be able to:\n\n   Type listType = new TypeToken<List<MyJDO>>() {}.getType();\n   InputStream ins = fileItemStream.openSream();\n   JasonInputStream jins = gson.fromJsonStream(ins, listType);\n\n   while ((MyJDO jdo = jins.readNextJson()) != null)\n   {\n       pm.makePersistent(jdo);\n   }\n\nIf I use \n\n   List<MyJDO> list = gson.fromJson(ins, listType); \n\nand get the entire List, that is too large. It exceeds memory limit and it\ntakes a long time to store it away with pm.makePersistentAll() (if it does\nnot crash the app). By any rate, the makePersistentAll() uses iterator\nanyway, so it seems to have the same efficiency.\n\nI believe that this is a deficient item.\n\nYoichi\n\n\n```\n\nOriginal issue reported on code.google.com by `takayama...@gmail.com` on 22 Dec 2009 at 4:02\n", "url": "https://github.com/google/gson/issues/181", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:39", "closed": "2015-03-19 18:25:39", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "escape \" in map's key", "body": "```\nMap<String, String> map = new HashMap<String, String>();\nmap.put(\"ab\\\"c\", \"a\\\"bc\");\n\nresult is\n{\"ab\"c\":\"a\\\"bc\"}\nshould be\n{\"ab\\\"c\":\"a\\\"bc\"}\n\n```\n\nOriginal issue reported on code.google.com by `zhouyanm...@gmail.com` on 16 Dec 2009 at 7:01\n- Merged into: #178\n", "url": "https://github.com/google/gson/issues/180", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:38", "closed": "2015-03-19 18:25:38", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Hibernate question.", "body": "```\nIn the lastest realese I can get lazy property of hibernate's beans.\n\nThanks \n\n```\n\nOriginal issue reported on code.google.com by `vllumiqu...@gmail.com` on 25 Nov 2009 at 2:30\n", "url": "https://github.com/google/gson/issues/179", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:37", "closed": "2015-03-19 18:25:37", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Map Keys are not escaped correctly if they contain \"", "body": "```\nMap<String,String> s = new HashMap<String, String>();\ns.put(\"h\\\"allo\", \"w\\\"elt\");\ns.put(\"hallo\", \"welt\");\n\nWriter w = new PrintWriter(System.out, true);\ngson.toJson(s, w);\nw.flush();      \n\nprints (invalid JSON):\n{\"h\"allo\":\"w\\\"elt\",\"hallo\":\"welt\"}\n\nBut should be \n{\"h\\\"allo\":\"w\\\"elt\",\"hallo\":\"welt\"}\n\n```\n\nOriginal issue reported on code.google.com by `developm...@mj-networks-gmbh.de` on 22 Nov 2009 at 6:16\n", "url": "https://github.com/google/gson/issues/178", "user": "GoogleCodeExporter", "labels": ["Priority-High", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:35", "closed": "2015-03-19 18:25:35", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Support for different serializers for root and nested objects of same class", "body": "```\nSuppose i have some class like this one:\nTreeNode {\n  int id;\n  TreeNode parent;\n  List<TreeNode> children;\n  String nodeName;\n  String nodeValue;\n}\n\nI want to be able to get following JSON:\n{\"id\":<id>, \"parent\":<parent id>, \"nodeName\":<name>, \"nodeValue\":<value>, \n\"children\":[<child \n1 id>, <child 2 id>...]}\n\nUsing serializer like this one:\n    public JsonElement serialize(TreeNode src, Type typeOfSrc, JsonSerializationContext context) {\n        return new JsonPrimitive(src.getId());\n    }\n\nFor all objects except root one will solve this problem\n```\n\nOriginal issue reported on code.google.com by `zlow...@gmail.com` on 20 Nov 2009 at 3:48\n", "url": "https://github.com/google/gson/issues/177", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:34", "closed": "2015-03-19 18:25:34", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Support for StringBuilder/StringBuffer", "body": "```\nWhat steps will reproduce the problem?\n1. Make an object with a StringBuilder\n2. Convert to JSON\n\nWhat is the expected output?\n\nI expect a JSON string\n\nWhat do you see instead?\n\nI see this:\n\n{\"value\":[\"S\",\"u\",\"c\",\"c\",\"e\",\"s\",\"s\",\" \",\"f\",\"o\",\"r\",\":\", ...\n\n\nWhat version of the product are you using? On what operating system?\n\n1.4 windows\n\nPlease provide any additional information below.\n\nYou might think it is correct since a StringBuilder is not really a string\nunder the covers.  But I suggest that most people will want to see a String\nin json rather than an array of chars...\n\nThanks for your consideration.\n\nChris\n```\n\nOriginal issue reported on code.google.com by `mchy...@gmail.com` on 20 Nov 2009 at 6:26\n", "url": "https://github.com/google/gson/issues/175", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:30", "closed": "2015-03-19 18:25:30", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "missing coma", "body": "```\nWhat steps will reproduce the problem?\n1. I'm serializing a not-accessible-class. It's unreproducible other way. \n\nWhat is the expected output? What do you see instead?\n\n{\n    \"wsImpl\":\n    {\n        \"name\":\"Derby JDBC Provider (XA)\",\n        \"type\":17,\n        \"instrumentationLevel\":-2,\n        \"subCollections\":\n        [\n            {\n                \"dsOName\":{}         <-------------\n                \"name\":\"jdbc/DefaultEJBTimerDataSource\",\n                \"type\":17,\n                \"instrumentationLevel\":-2,\n                \"dataMembers\":\n                [\n                    {\n                        \"count\":2,\n                        \"id\":1,\n                        \"startTime\":1257966935229,\n\n\"lastSampleTime\":1257966972191\n                    },\n\n\nWhat version of the product are you using? On what operating system?\nGSON 1.4\nRHEL 5.2\nJDK 1.6\n\nPlease provide any additional information below.\n\nI can not use any other serialize for JSON because i don't have the class.\nAny idea, help, solution path will be helpful.\n\n```\n\nOriginal issue reported on code.google.com by `drdet...@gmail.com` on 12 Nov 2009 at 9:52\n", "url": "https://github.com/google/gson/issues/173", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:27", "closed": "2015-03-19 18:25:27", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "unable to serialize an object with list of other objects", "body": "```\ninterface IPerson {\n  String getName();\n}\n\npublic class Person implements IPerson {\n  private String name;\n  public Person() { \n  } \n  public Person(String name) {\n    this.name = name;\n  }\n  @Override\n  public String getName() {\n    return name;\n  }\n}\n\npublic class People {\n  private List<IPerson> people = new LinkedList<IPerson>();\n  public People() {\n  }\n  public People(List<IPerson> people) {\n    this.people = people;\n  }\n  public List<IPerson> getPeople() {\n    return people;\n  }\n}\n\n@Test\npublic void testGsonProjects() {\n  People people = new People(asList((IPerson) new Person(\"Obama\")));\n  String json = new Gson().toJson(people);  \n  System.out.println(json);\n}\n\nexpected: {people:[{name:\"Obama\"}]}\nactual  : {people:[{}]}\n\naffected version: 1.3, 1.4\n```\n\nOriginal issue reported on code.google.com by `luca.marrocco` on 30 Oct 2009 at 11:33\n- Merged into: #231\n", "url": "https://github.com/google/gson/issues/170", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:19", "closed": "2015-03-19 18:25:20", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Update documentation", "body": "```\nUpdate section \"Custom Serialization and Deserialization\" to reflect the\nabsence of:\ngson.registerDeserializer(MyType.class, new MyDeserializer());\ngson.registerInstanceCreator(MyType.class, new MyInstanceCreator());\n\nfrom the API in 1.4. It is documented in the javadoc but not reflected in\nthe guide.\n\nWhat version of the product are you using? On what operating system?\nGson 1.4 on Windows XP SP3\n\n```\n\nOriginal issue reported on code.google.com by `kareem.shabazz@gmail.com` on 30 Oct 2009 at 5:02\n", "url": "https://github.com/google/gson/issues/169", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:19", "closed": "2015-03-19 18:25:19", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "No support for fields whose types are type parameters", "body": "```\nAssume you have the following 2 classes:\nclass Entity<IDT,NameT>{\n    IDT id;\n    NameT name;\n\n    public Entity(IDT id, NameT name) {\n        super();\n        this.id = id;\n        this.name = name;\n    }\n    public IDT getId() {\n        return id;\n    }\n    public NameT getName() {\n        return name;\n    }\n}\n\nclass Employee extends Entity<Integer,String>{\n    double age; \n    private int tag;\n\n    public Employee() {\n        super(0,null);\n    }\n    public Employee(int id, String name, double age) {\n        super(id,name);\n        this.age = age;\n    }\n\n    public double getAge() {\n        return age;\n    }\n\n    void setTag(int tag){\n        this.tag = tag;\n    }   \n}\n\nwhen trying to use \n  new GsonBuilder().create().toJson(new Employee(1,\"Mary\",10)); it throws \n\njava.lang.UnsupportedOperationException: Expecting parameterized type, got\nclass test.gson.Employee.\n Are you missing the use of TypeToken idiom?\n See\nhttp://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializ\ning-Gener\n\nok, then I try the generic one using \nnew GsonBuilder().create().toJson(new Employee(1,\"Mary\",10),new\nTypeToken<Employee>(){}.getType()); Gson will only show id/name field, all\nother field in Employee class is ignored. any solution? \n\nI've refered <a\nhref=\"http://code.google.com/p/google-gson/source/browse/trunk/gson/src/test/jav\na/com/google/gson/functional/ParameterizedTypesTest.java\">,\nbut didn't help.\n\nplease help to solve the problem. thanks!\n```\n\nOriginal issue reported on code.google.com by `hnjch...@gmail.com` on 26 Oct 2009 at 8:49\n", "url": "https://github.com/google/gson/issues/168", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.7", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:15", "closed": "2015-03-19 18:25:16", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Cannot deserialize TreeSet", "body": "```\nWhat steps will reproduce the problem?\n\nTreeSet<String> strings = new TreeSet<String>();\nstrings.add(\"Happy\");\n\nGson gson = new Gson();\nString json = gson.toJson(strings);\n\nstrings = gson.fromJson(json, new TypeToken<TreeSet<String>>() {}.getType());\n\n\nWhat is the expected output? What do you see instead?\nI would expect it to run without exceptions.  \nI am getting the following:\nException in thread \"main\" java.lang.ClassCastException:\njava.util.LinkedList cannot be cast to java.util.TreeSet\n\n\nWhat version of the product are you using? On what operating system?\ngson-1.3.jar and gson-1.4.jar  \nRunning on OSX 10.6\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `gciar...@gmail.com` on 23 Oct 2009 at 1:32\n", "url": "https://github.com/google/gson/issues/167", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:15", "closed": "2015-03-19 18:25:15", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Enum constant does not exist", "body": "```\nThis isn't a bug per say, more of a starting point for a conversation. Our\norganization uses GSON to pass data between two internal applications, both\nrunning in Java. Both applications depend on a particular in-house library,\nbut the receiving end isn't guaranteed to have the same version as the\nsending end. This has caused some problems with our use of enums, when the\nsender has knowledge of enum constants that the receiver does not know\nabout. It might be nice to have a way to optionally silently ignore these\nmis-matches on the receiver. We have a solution that works for us, and are\nsomewhat curious if this is an issue for anyone else out there.\n\n\nWhat steps will reproduce the problem?\n1. Serialize an object that has an enum property to JSON\n2. Deserialize the JSON in another application that does not have that enum\nconstant available\n\n\nWhat is the expected output? What do you see instead?\n\nThat is the big question. In our particular instance, we would just want\nthat enum to be ignored. If the class that has the enum looked like\n\npublic class Something {\nMyEnum a;\n}\n\nAnd MyEnum had \"A\" and \"B\", if the JSON said it should be \"C\", I would want\nthe property \"a\" to be null.\n\nIn another instance in our application, we have a class:\n\npublic class SomethingElse {\nSet<MyEnum> flags;\n}\n\nIf a constant of \"C\" were coming through in JSON, I would expect this set\nto be empty, if the application containing it only knew about A and B.\n\nWhat version of the product are you using? On what operating system?\nAny\n\nPlease provide any additional information below.\n\nWe have overcome the first example by making our own type adapter, based on\nthe built-in one, that looks like:\n\npublic class EnumSafeChangeTypeAdapter<T extends Enum<T>> implements\nJsonSerializer<T>, JsonDeserializer<T> {\n    public JsonElement serialize(T src, Type typeOfSrc,\nJsonSerializationContext context) {\n        return new JsonPrimitive(src.name());\n    }\n\n    // The NULL here needs to be coupled with an instancecreator that returns\n    // null as well. See VzLite for an example of this\n    @SuppressWarnings(\"cast\")\n    public T deserialize(JsonElement json, Type classOfT,\nJsonDeserializationContext context) throws JsonParseException {\n        try {\n            return (T) Enum.valueOf((Class<T>) classOfT, json.getAsString());\n        }\n        catch (Exception e) {\n            return null;\n        }\n    }\n\n    @Override\n    public String toString() {\n        return EnumSafeChangeTypeAdapter.class.getSimpleName();\n    }\n}\n\nAlso, we have to register an instance creator to handle the null, otherwise\nwe get other exceptions:\n\nGsonBuilder builder = new GsonBuilder();\nbuilder.registerTypeAdapter(Enum.class, new InstanceCreator<Enum<?>>() {\npublic Enum<?> createInstance(Type type) {\nreturn null;\n}\n});\n```\n\nOriginal issue reported on code.google.com by `danw...@gmail.com` on 12 Oct 2009 at 8:29\n", "url": "https://github.com/google/gson/issues/165", "user": "GoogleCodeExporter", "labels": ["Milestone-Undefined", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:10", "closed": "2015-03-19 18:25:11", "commits": {"214234e2029919dd7d25c4a90e2fac825795c022": {"commitGHEventType": "referenced", "commitUser": "eranyarkon"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "214234e2029919dd7d25c4a90e2fac825795c022", "commitGHEventType": "referenced", "commitUser": "eranyarkon", "commitParents": ["bb924473172168261d20f3f06ccf0e4bfe88b77f"], "nameRev": "214234e2029919dd7d25c4a90e2fac825795c022 tags/gson-2.4~265", "commitMessage": "Support @SerializedName on annotations.\n\nFixes issue 347.\n", "commitDateTime": "2011-12-16 05:32:50", "authoredDateTime": "2011-12-16 05:32:50", "commitGitStats": [{"filePath": "gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java", "insertions": 19, "deletions": 4, "lines": 23}, {"filePath": "gson/src/test/java/com/google/gson/functional/EnumTest.java", "insertions": 15, "deletions": 3, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TypeAdapters.java", "spoonMethods": [{"spoonMethodName": "com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter", "TOT": 6, "UPD": 2, "INS": 2, "MOV": 1, "DEL": 1}, {"spoonMethodName": "com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter.read(com.google.gson.stream.JsonReader)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter.write(com.google.gson.stream.JsonWriter,java.lang.Enum)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EnumTest.java", "spoonMethods": [{"spoonMethodName": "com.google.gson.functional.EnumTest.testEnumCaseMapping()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.gson.functional.EnumTest.Gender", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["214234e2029919dd7d25c4a90e2fac825795c022"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 19, "deletions": 4, "lines": 23, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 9, "UPD": 5, "INS": 2, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["gson/src/main/java/com/google/gson/internal/bind"], "changesInPackagesSPOON": ["com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter", "com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter.write(com.google.gson.stream.JsonWriter,java.lang.Enum)", "com.google.gson.internal.bind.TypeAdapters.EnumTypeAdapter.read(com.google.gson.stream.JsonReader)"]}, {"title": "Check parent class for ParameterizedTypeHandlerMap", "body": "```\nTypeConverter need exact class\n\nregisterTypeAdapter(Foo.class, new FooTypeAdapter()) doesn't works for \nsubclass of Foo\n\nit must be \n\nregisterTypeAdapter(ChildOfFoo.class, new \nFooTypeAdapter()).registerTypeAdapter(Child2OfFoo.class, new \nFooTypeAdapter()).registerTypeAdapter(Child3OfFoo.class, new \nFooTypeAdapter())....\n\nthis patch can solve this problem.\n```\n\nOriginal issue reported on code.google.com by `zhouyanm...@gmail.com` on 10 Oct 2009 at 6:57\n\nAttachments:\n- [patch.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-164/comment-0/patch.txt)\n", "url": "https://github.com/google/gson/issues/164", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.7", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:08", "closed": "2015-03-19 18:25:08", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Add @PreSerialize annotation", "body": "```\n1.remove unused field value\npublic class User{\nprivate String username;\nprivate String password;\n@PreSerialize\npublic void preSerialize(){\nthis.password = null;\n}\n}\n\n2.set getter's value to field\nbecause gson doesn't support serialize getter method\n\npublic class TreeNode{\nprivate Collection<TreeNode> children;\nprivate boolean hasChildren;\n@PreSerialize\npublic void preSerialize(){\nthis.hasChildren = isHasChildren();\n}\npublic boolean isHasChildren(){\nreturn this.children != null && this.children.size() != 0;\n}\n}\n```\n\nOriginal issue reported on code.google.com by `zhouyanm...@gmail.com` on 10 Oct 2009 at 2:50\n", "url": "https://github.com/google/gson/issues/163", "user": "GoogleCodeExporter", "labels": ["Milestone-Undefined", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:06", "closed": "2015-03-19 18:25:06", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Thread issues with date formatter", "body": "```\nWhat steps will reproduce the problem?\n1.  Run high levels of threads which do date serialization\n2.  DefaultDateTypeAdapter uses SimpleDateFormat statically\n3.  See lots of exceptions on random occasions\n\nWhat is the expected output? What do you see instead?\n\nExpect date serialization to work!\n public JsonElement serialize(Date src, Type typeOfSrc,\nJsonSerializationContext context) {\n      String dateFormatAsString = format.format(src);\n      return new JsonPrimitive(dateFormatAsString);\n    }\nChanging the constructor to:\n public DefaultDateTypeAdapter(final String datePattern) {\n      this.format = new ThreadLocal<DateFormat>() {\n        protected DateFormat initialValue() {\n                   new SimpleDateFormat(datePattern);\n                };\n    }\n\n  public JsonElement serialize(Date src, Type typeOfSrc,\nJsonSerializationContext context) {\n      String dateFormatAsString = format.get().format(src);\n      return new JsonPrimitive(dateFormatAsString);\n    }\n\n  public Date deserialize(JsonElement json, Type typeOfT,\nJsonDeserializationContext context)\n        throws JsonParseException {\n      if (!(json instanceof JsonPrimitive)) {\n        throw new JsonParseException(\"The date should be a string value\");\n      }\n\n      try {\n        return format.get().parse(json.getAsString());\n      } catch (ParseException e) {\n        throw new JsonParseException(e);\n      }\n    }\n\n\nWould be a simple fix.\n\n\nWhat version of the product are you using? On what operating system?\n\nLatest GSON release.  Issue is using the date formatter statically, as\nSimpleDateFormat isn't thread safe, so you'll get random results with the\ndate format.  It will also randomly throw exceptions.  See stack trace below.\n\nPlease provide any additional information below.\n\njava.lang.ArrayIndexOutOfBoundsException: -28   at\nsun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate(BaseCalendar.java:43\n6)\nat\njava.util.GregorianCalendar.computeFields(GregorianCalendar.java:2081)  at\njava.util.GregorianCalendar.computeFields(GregorianCalendar.java:1996)  at\njava.util.Calendar.setTimeInMillis(Calendar.java:1066)  at\njava.util.Calendar.setTime(Calendar.java:1032)  at\njava.text.SimpleDateFormat.format(SimpleDateFormat.java:785)    at\njava.text.SimpleDateFormat.format(SimpleDateFormat.java:778)    at\njava.text.DateFormat.format(DateFormat.java:314)    at\ncom.google.gson.DefaultTypeAdapters$DefaultDateTypeAdapter.serialize(DefaultType\nAdapters.java:254)\nat \n```\n\nOriginal issue reported on code.google.com by `mcinto...@gmail.com` on 25 Sep 2009 at 4:12\n", "url": "https://github.com/google/gson/issues/162", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:04", "closed": "2015-03-19 18:25:04", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "BigDecimalTypeAdapter accepts invalid input when parsed alone", "body": "```\nnew Gson().fromJson(\"12345X67890\", BigDecimal.class) yields a BigDecimal \nrepresenting the number 12345. From the code it appears that \nBigDecimalTypeAdapter merely delegates parsing the String to BigDecimal \nitself, so the bug (or documented allowance) is there. However, this does \nnot appear to be valid json, and in the context of json parsing an \nexception should be thrown. It would appear the type adapter needs to \nenforce a format on the input before constructing the BD.\n\nFunny enough, it only passes in this situation. In these other three \nsituations, an exception *does* occur:\n\n1. Quoted String is given as input: new Gson().fromJson(\"\\\"12345X67890\\\"\", \nBigDecimal.class)\n2. Value is a field on an object, quoted : new \nGson().fromJson(\"{\\\"price\\\":\\\"12345X67890\\\"}\", StockQuote.class)\n3. Value is a field on an object, unquoted: new \nGson().fromJson(\"{\\\"price\\\":12345X67890}\", StockQuote.class)\n\nI don't get why this matters, since the same adapter, using the same code I \ncan see is used each time... perhaps it's late and I'm missing something.\n\nGson version is 1.3.\n```\n\nOriginal issue reported on code.google.com by `estebis...@gmail.com` on 25 Sep 2009 at 3:22\n", "url": "https://github.com/google/gson/issues/161", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:02", "closed": "2015-03-19 18:25:03", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JsonParseExceptions (or specialized sub-classes) should provide more specific info", "body": "```\nJsonParseException contains only the usual message and cause. What I am \nspecifically looking for is separate properties outlining details of what \nwent wrong when parsing a value. Specifically, the field name (if it was a \nfield), and target and actual data based on what went wrong. If the type \nwas wrong, show target and actual type (string vs. boolean vs. BigDecimal, \netc.). Perhaps a specific format is required, then I would want the text \nposition where the actual value diverges.\n\nThe JPE message do typically contain this information. The problem is that \nthey often contain information appropriate to a consumer over HTTP. Most \noften it's the name of the target Java class. With the bits of information \nprovided separately on the exception, I could construct a more appropriate \nerror message.\n\nSo, e.g., instead of:\n\nThe JsonDeserializer BigDecimalTypeAdapter failed to deserialized json \nobject \"abcde\" given the type class java.math.BigDecimal\n\nI would send to the client:\n\nFor field X: expected a decimal number and instead got a string\n\nWhich would be more friendly to non-java consumers of my json\n```\n\nOriginal issue reported on code.google.com by `estebis...@gmail.com` on 25 Sep 2009 at 3:08\n- Merged into: #395\n", "url": "https://github.com/google/gson/issues/160", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:00", "closed": "2015-03-19 18:25:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "How to serialize single-level simple arrays", "body": "```\nI've currently used net.sf.json and flexjson and was hoping google-gson \nwas as easy to use. Is it really necessary to write a custom serializer to \noutput a simple JsonArry as follows?\n\n[{\"xxx\",\"yyy\",\"zzz\"},{\"111\",\"222\",\"333\"}]\n\nWhat am I missing...a code snippet would be appreciated. \n```\n\nOriginal issue reported on code.google.com by `quin.h.m...@boeing.com` on 24 Sep 2009 at 6:33\n", "url": "https://github.com/google/gson/issues/159", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:25:00", "closed": "2015-03-19 18:25:00", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "gson doesn't build on Java 6", "body": "```\nWhen building gson using Java 6, I get the following error.\n\n  .../gson-trunk/gson/src/main/java/com/google/gson/Gson.java:[446,23]\n  type parameters of <T>T cannot be determined; no unique maximal instance\n  exists for type variable T with upper bounds T,java.lang.Object\n\nI can confirm this when using Sun's JDK, versions 6u12 through 6u16, but I\nsuspect that the error happens with all of Sun's Java 6 JDKs.\n\nI've attached a patch that fixes the issue.\n\n```\n\nOriginal issue reported on code.google.com by `tim.molo...@gmail.com` on 23 Sep 2009 at 2:03\n\nAttachments:\n- [Gson.fromJson-addCast.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-158/comment-0/Gson.fromJson-addCast.patch)\n", "url": "https://github.com/google/gson/issues/158", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:58", "closed": "2015-03-19 18:24:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Newlines not converted to json properly in JsonObject.toString()", "body": "```\nWhat steps will reproduce the problem?\n\n\nJsonObject obj = new JsonObject();\nobj.addProperty(\"someProp\", \"multiline\\nstring\");\nSystem.out.println(obj.toString());\n\nWhat is the expected output? What do you see instead?\n\nExpected Output: \n\n{\"someProp\":\"multiline\\nstring\"}\n\nObserved Output:\n\n{\"someProp\":\"multiline\nstring\"}\n\nWhat version of the product are you using? On what operating system?\nGson 1.3\nWindows Vista\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `vish.ram...@gmail.com` on 19 Sep 2009 at 1:48\n", "url": "https://github.com/google/gson/issues/157", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:58", "closed": "2015-03-19 18:24:58", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson should convert use the actual type of a field while serializing", "body": "```\nSee discussion at: \nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/937ca75af0c6869f\n```\n\nOriginal issue reported on code.google.com by `inder123` on 18 Sep 2009 at 8:11\n", "url": "https://github.com/google/gson/issues/156", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:57", "closed": "2015-03-19 18:24:57", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "An Object[] field should be serialized per the actual object types", "body": "```\nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/e4df79a0d0dc8959?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 10 Sep 2009 at 4:40\n", "url": "https://github.com/google/gson/issues/155", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:56", "closed": "2015-03-19 18:24:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "how to convert JsonObject to JSONString()?", "body": "```\ncall JsonObject.toString()  result is not a realy JSONString\nbecause some char is not quoted!!!\nGson gson = new Gson();\nJsonParser p = new JsonParser();\n\nJsonElement r = p.parse(\"{\\\"text\\\":\\\"good\\\\n after\\\\nnoom\\\"}\");\nJsonObject ob = r.getAsJsonObject();\n\nr.toString() \\\\ espect {\"text\":\"good\\\\n after\\\\nnoom\\\"} but {\"text\":\"good\nafter\nnoom\\\"}\n\n```\n\nOriginal issue reported on code.google.com by `lxb...@gmail.com` on 9 Sep 2009 at 9:56\n", "url": "https://github.com/google/gson/issues/154", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:55", "closed": "2015-03-19 18:24:55", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "setPrettyPrinting cause missing comma deliminator after an empty map", "body": "```\nif Gson instance is obtained from GsonBuilder with pretty print \n        GsonBuilder builder = new GsonBuilder();\n        builder.setPrettyPrinting();\n        Gson gson = builder.create();        \nit would produce un-parseable json string if the object contains an empty map\nexample:\n{\"viewsStale\":true,\"fireAllRules\":0,\"formRules\":[],\"dcs\":[{\"accountId\":1,\n      \"createdBy\":\"\",\"name\":\"dc1\",\"m_segmentGroup\":{\"accountId\":1,\n        \"nextRuleId\":0,\"name\":\"dc1\",\"createdBy\":\"\",\"rules\":{}\"description\":\n        \"desc\"},\"m_dcmTexts\":{}}],\"dispatchableName\":\"disp1\",\"typeCode\":-1,\n  \"subType\":\"GENERIC\",\"name\":\"disp1\",\"status\":\"A\"}\n\nnotice missing comma here (\"rules\":{}\"description\":)\n\ncorrect output without pretty print\n{\"viewsStale\":true,\"fireAllRules\":0,\"formRules\":[],\"dcs\":[{\"accountId\":1,\"create\ndBy\":\"\",\"name\":\"dc1\",\"m_segmentGroup\":{\"accountId\":1,\"nextRuleId\":0,\"name\":\"dc1\"\n,\"createdBy\":\"\",\"rules\":{},\"description\":\"desc\"},\"m_dcmTexts\":{}}],\"dispatchable\nName\":\"disp1\",\"typeCode\":-1,\"subType\":\"GENERIC\",\"name\":\"disp1\",\"status\":\"A\"}\n\nWhat version of the product are you using? On what operating system?\nlatest product. java: 1.6, os: xp\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `jackwum...@gmail.com` on 2 Sep 2009 at 9:13\n", "url": "https://github.com/google/gson/issues/153", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:54", "closed": "2015-03-19 18:24:55", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Minor javadoc documentation issue in com.google.gson.Gson", "body": "```\nThe Javadoc documentation for the class is eating some < characters:\n Type listType = new TypeToken>() {}.getType();\n List target = new LinkedList();\n...\n List target2 = gson.fromJson(json, listType);\n\n\nIt should be:\n Type listType = new TypeToken<List<String>>() {}.getType();\n List<String> target = new LinkedList<String>();\n...\n List<String> target2 = gson.fromJson(json, listType);\n\n```\n\nOriginal issue reported on code.google.com by `australi...@gmail.com` on 2 Sep 2009 at 2:22\n", "url": "https://github.com/google/gson/issues/152", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:54", "closed": "2015-03-19 18:24:54", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "WARN log level to high for message about overriding type handlers", "body": "```\nWhat steps will reproduce the problem?\n1. Create a GSON object: new GsonBuilder().create(); \n2. Retrotranslate the byte code to jdk 1.4, using Retrotranslator \nhttp://retrotranslator.sourceforge.net/\n3. Run the code.\n\nWhat is the expected output? What do you see instead?\n\nI would expect no WARNINGs to be logged. However, I see the following output to \nthe console:\n\ncom.google.gson.ParameterizedTypeHandlerMap register\nWARNING: Overriding the existing type handler for interface java.util.Collection\n\nWhat version of the product are you using? On what operating system?\n1.3 and also tested with 1.4 built from trunk.\n\nPlease provide any additional information below.\n\nThis log message comes from the following line of code:\nhttp://code.google.com/p/google-\ngson/source/browse/trunk/gson/src/main/java/com/google/gson/ParameterizedTypeHan\ndlerM\nap.java#49\n\n\nSpecifically, it is logged because the \nDefaultTypeAdapters.createDefaultInstanceCreators method \nadds a COLLECTION_TYPE_HANDLER for Collection.class, and then later, a \nQueue.class. \nBecause Queue.class is @since 1.5, retrotranslator replaces the class literal \n\"java.util.Queue\", with \n\"java.util.Collection\". This causes the Queue type handler to overwrite the \nCollection type \nhandler.\n\n    map.register(Map.class, MAP_TYPE_ADAPTER);\n\n    // Add Collection type instance creators\n    map.register(Collection.class, COLLECTION_TYPE_ADAPTER);\n    map.register(List.class, COLLECTION_TYPE_ADAPTER);\n    map.register(Queue.class, COLLECTION_TYPE_ADAPTER);\n\n\nI'm not sure that a WARNING is needed here, since both Collection and Queue \nhave the same \nCollection type handlers. \n\nEither the WARNING could be removed, or there could be some smarter registering \nof type \nhandlers so that the Queue class automatically gets the COLLECTION_TYPE_HANDLER.\n```\n\nOriginal issue reported on code.google.com by `npel...@gmail.com` on 27 Aug 2009 at 1:17\n", "url": "https://github.com/google/gson/issues/151", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:49", "closed": "2015-03-19 18:24:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "gson1.4 can't use in spring dm", "body": "```\n i download 1.4 source and build it to jar.then i put it into spring dm's\npickup dictionary ,after i start up spring dm ,got a error :\n\nsource.kernel.deployer.core.internal.StandardApplicationDeployer E\n<SPDE0018E> Unable to install application from location\n'file:/D:/spring_DM/dm-server-2.0.0.M3/pickup/gson-1.4.jar'. Could not\nsatisfy constraints for bundle 'com.google.gson' at version '1.4.0'. Cannot\nresolve: com.google.gson\n    Resolver report:\n        Missing constraint: <null> in bundle <com.google.gson_1.4.0>\n\nso i use spring budle tool(it have a maven plugin) to build a osgi bundle\nof gson!\n\n\n\n```\n\nOriginal issue reported on code.google.com by `1982hong...@gmail.com` on 23 Aug 2009 at 8:28\n", "url": "https://github.com/google/gson/issues/150", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:49", "closed": "2015-03-19 18:24:49", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "how to generate a Primitive json from a String?", "body": "```\nI use 1.3 version, I don't know whether my problem, how will a json \nrequest directly format string directly into the client executable json \nrequest directly? For example:\nMap<String,Object> map = new HashMap<String,Object>();\nmap.put(\"abc\",\"abc\");\nmap.put(\"data\",\"[['1','a'],['2','b']]\");\n\nI hope generates code: {\" ABC \":\" ABC \", \"data\" : [[' 1 ', 'a'], [' \n2 ', 'b']], \nbut not\uff0cI get:\n{\"abc\":\"abc\",\"data\":\"[['1','a'],['2','b']]\"}. Normally, we do not know \nwhat type of data format, here is String[][], to change how I get the \nresult?\n```\n\nOriginal issue reported on code.google.com by `wu.ar...@gmail.com` on 21 Aug 2009 at 1:43\n", "url": "https://github.com/google/gson/issues/149", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.5", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:47", "closed": "2015-03-19 18:24:47", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Few serialization strategies for same type", "body": "```\nI want to be able to serialize same object to different Json representations. \nExample:\n\npublic class Some {\nprivate String field;\nprivate String filed2;\nprivate String filed3;\n}\n\nI want to have a way to get JSON with field and field2, but also I want to \ncreate JSON with field and field3. \nI think, annotation @Mode({string}) could help.\n```\n\nOriginal issue reported on code.google.com by `yura.ta...@gmail.com` on 20 Aug 2009 at 2:52\n", "url": "https://github.com/google/gson/issues/148", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:46", "closed": "2015-03-19 18:24:46", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "JsonPrimitive.equals() should work with BigInteger and BigDecimal", "body": "```\nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/f6be51f5c5cf7168?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 19 Aug 2009 at 9:15\n", "url": "https://github.com/google/gson/issues/147", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:45", "closed": "2015-03-19 18:24:45", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson needs a more obust inclusion and exclusion mechanism", "body": "```\n\nGson has the ability to mark a method as exposed with @Expose, but another\nmode would be more useful. The ability to mark a class, so that all methods\nwill be exposed and putting a @Conceal annotation maybe on the methods you\ndon't want to expose. I am running into an issue where I have Hibernate\nobjects that are being handed to Gson and I have properties that are lazy\nloaded and Gson will try to load them if I don't mark them as transient\nmembers. I don't want these fields to be transient and I don't want to have\nto write a wrapper layer for my POJOs. I also think it is a bit of a kludge\nto have to mark all of my methods as @Expose that I want to expose. I'd\nrather say all methods are exposed, except ...\n```\n\nOriginal issue reported on code.google.com by `chrislha...@gmail.com` on 13 Aug 2009 at 12:14\n", "url": "https://github.com/google/gson/issues/146", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:44", "closed": "2015-03-19 18:24:44", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "compilation via maven fails due to generics bug in javac", "body": "```\nThe following javac error occurs when trying to compile gson using Maven.\n(this probably was not caught since Googlers use Eclipse)\n\n[INFO] Compilation failure\n/home/jdumay/code/google/gson/trunk/gson/src/main/java/com/google/gson/Gson.java\n:[446,23]\ntype parameters of <T>T cannot be determined; no unique maximal instance\nexists for type variable T with upper bounds T,java.lang.Object\n\nAnd its a bug in javac!\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6302954\n\nAttached is a patch that works around this problem.\n\n\n```\n\nOriginal issue reported on code.google.com by `james.w....@gmail.com` on 8 Aug 2009 at 3:34\n\nAttachments:\n- [compile-fix.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-145/comment-0/compile-fix.patch)\n", "url": "https://github.com/google/gson/issues/145", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:43", "closed": "2015-03-19 18:24:43", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Set formatting style in pretty printing", "body": "```\nhttp://groups.google.com/group/google-gson/browse_thread/thread/b03c165bfd1f6ce4\n?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 7 Aug 2009 at 8:32\n", "url": "https://github.com/google/gson/issues/143", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:41", "closed": "2015-03-19 18:24:41", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Deserialization/Serialization issue when json is injected via spring annotations", "body": "```\nWhat steps will reproduce the problem?\n\n1. Create the following java object\n\npublic class Search {\n\n    private String accountNumber = \"\";\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n    public void setAccountNumber(String accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n    public String getConfirmationNumber() {\n        return confirmationNumber;\n    }\n    public void setConfirmationNumber(String confirmationNumber) {\n        this.confirmationNumber = confirmationNumber;\n    }\n    public String getBankNumber() {\n        return bankNumber;\n    }\n    public void setBankNumber(String bankNumber) {\n        this.bankNumber = bankNumber;\n    }\n    private String confirmationNumber = \"\";\n    private String bankNumber = \"\";\n\n\n}\n\n\n2. Create a controller class in Spring and add this method\n\n\n\n@Controller(\"transactionController\")\n@RequestMapping(\"/transaction/*.jspx\")\npublic class TransactionController {\n\n     @RequestMapping(value = \"lookup.jspx\",\n              method = { RequestMethod.GET, RequestMethod.POST })\n    public ModelAndView lookup(@RequestParam(\"json\") String json) throws \nException {\n\n        String jsonString = \"\";\n\n\n        try {\n\n\n     Gson gson = new Gson();\n     System.out.println(json); //JSON prints fine here\n         Search ns = gson.fromJson(jsonString, Search.class); //runtime \nError occurs here, everytime\n\n   Replace the above code to this and it works fine.\n\n            JsonElement element = new JsonParser().parse(json);\n            gson.fromJson(element , Search.class);\n\n\n}\n\n3. Create a Junit test method inside another class. Run this test method.\n\n\n    @SpringBeanByName\n    public TransactionController transactionController;\n\n\n    @Test\n    public void testThis() throws Exception{\n\n\n        Gson gson = new Gson();\n        Search search = new Search();\n        search.setAccountNumber(\"5794749\");\n        String json = gson.toJson(search);\n        transactionController.lookup(json);\n     }\n\n\n\n\n\n4. You get this error \n\n{\"accountNumber\":\"5794749\",\"confirmationNumber\":\"\",\"bankNumber\":\"\"}\n05:56:00,288 ERROR \n[com.bbvacompass.webpromises.web.spring.mvc.TransactionController]  Failed \nto generate JSON!\ncom.google.gson.JsonParseException: Failed parsing JSON source: \njava.io.StringReader@51165116 to Json\n    at com.google.gson.JsonParser.parse(JsonParser.java:57)\n    at com.google.gson.Gson.fromJson(Gson.java:376)\n    at com.google.gson.Gson.fromJson(Gson.java:329)\n    at com.google.gson.Gson.fromJson(Gson.java:305)\n    at \ncom.bbvacompass.webpromises.web.spring.mvc.TransactionController.lookup\n(TransactionController.java:100)\n\n\n5. If you write a simple test, it works fine. \n\n\n\n    @Test\n    public void testJSONSearch(){\n\n        Search search = new Search();\n        search.setAccountNumber(\"123456\");\n        Gson gson = new Gson();\n        String json = gson.toJson(search);\n        search = gson.fromJson(json, Search.class);\n\n    }\n\n\n\nWhat is the expected output? What do you see instead?\n\nYou should get the object back either way\n\n\nWhat version of the product are you using? On what operating system?\n\n\nGson 1.3 on an IBM 1.6 JVM, but I believe that if you follow the exact \nsteps above and inject the value of json, it will bomb using the fromJson\n(String, Object) method. The fromJson(Jsonelement, class) works fine.\n\n\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `chrislha...@gmail.com` on 7 Aug 2009 at 11:07\n", "url": "https://github.com/google/gson/issues/142", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.5", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:40", "closed": "2015-03-19 18:24:40", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "com.google.gson.Gson should be able to toJson JsonElements/JsonObjects", "body": "```\ncom.google.gson.Gson should be able to toJson JsonElements/JsonObjects\n\nSomething like this would be stellar:\n  public String toJson(JsonElement jsonElement)\n  {\n      final StringWriter writer = new StringWriter();\n      try\n      {\n        formatter.format(jsonElement, writer, serializeNulls);\n      }\n      catch (IOException e)\n      {\n          throw new RuntimeException(e.getMessage(), e);\n      }\n      return writer.toString();\n  }\n```\n\nOriginal issue reported on code.google.com by `james.w....@gmail.com` on 7 Aug 2009 at 6:22\n", "url": "https://github.com/google/gson/issues/141", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:39", "closed": "2015-03-19 18:24:39", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Error Deserializing objects using fromJson(string, type)", "body": "```\nWhat steps will reproduce the problem?\n1. Created this class\n\npublic class Search {\n\n    private String accountNumber = \"\";\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n    public void setAccountNumber(String accountNumber) {\n        this.accountNumber = accountNumber;\n    }\n    public String getConfirmationNumber() {\n        return confirmationNumber;\n    }\n    public void setConfirmationNumber(String confirmationNumber) {\n        this.confirmationNumber = confirmationNumber;\n    }\n    public String getBankNumber() {\n        return bankNumber;\n    }\n    public void setBankNumber(String bankNumber) {\n        this.bankNumber = bankNumber;\n    }\n    private String confirmationNumber = \"\";\n    private String bankNumber = \"\";\n\n\n\n\n}\n\n\n2.run a toJson and then try to fromJson back to the object\n       Search search = new Search();\n       search.setAccountNumber(\"123456\");\n       String jsonString = new Gson().toJson(search);\n       Search search = new Gson().fromJson(jsonString, \nSearch.class); //Parse error here\n\n15:25:18,615 DEBUG []  Lookup JSON: \n{\"accountNumber\":\"5794749\",\"confirmationNumber\":\"\",\"bankNumber\":\"\"}\n15:25:18,615 ERROR []  Failed to generate JSON!\ncom.google.gson.JsonParseException: Failed parsing JSON source: \njava.io.StringReader@5b205b20 to Json\n    at com.google.gson.JsonParser.parse(JsonParser.java:57)\n    at com.google.gson.Gson.fromJson(Gson.java:376)\n    at com.google.gson.Gson.fromJson(Gson.java:329)\n    at com.google.gson.Gson.fromJson(Gson.java:305)\n\n\n\n3. This code works though\n\n            Gson gson = new Gson();\n        JsonElement root = new JsonParser().parse(json);\n        return  gson.fromJson(root, type);\n\n\n\nWhat is the expected output? What do you see instead?\n\nIt should work with either code\n\n\nWhat version of the product are you using? On what operating system?\n\n\n1.3 with IBM JVM 1.6\n\nPlease provide any additional information below.\n\nWhat appears to be happening is that inside the Library code, the string \ngets converted to a StringReader and then that get passed to a parse \nmethod, but the parse method tries to parse the StringReader.toSTring(), \nwhich doesn't yield a JSON string, only a class address. \n\n\n\n\n\n\n```\n\nOriginal issue reported on code.google.com by `chrislha...@gmail.com` on 6 Aug 2009 at 8:30\n", "url": "https://github.com/google/gson/issues/140", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:37", "closed": "2015-03-19 18:24:38", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "all should be strings", "body": "```\nVersion 1.3 does a good job of converting an Object to JSON string \nfollowing JSON standards.. However it does not suit my requirement, that \nis is all the data should be strings, meaning all the keys and values \nshould be enclosed by double quotes including for numbers, float, and \nintegers...\nexample:\n\"amount\":1.3300000000000000710542735760100185871124267578125  - current\n\"amount\":\"1.3300000000000000710542735760100185871124267578125\" - needed\n\nHow can i achieve this? Can i change the source code to get this behavior? \nwhere do i start? thanks a bunch in advance...\n-\n```\n\nOriginal issue reported on code.google.com by `pudur.ra...@gmail.com` on 30 Jul 2009 at 9:31\n", "url": "https://github.com/google/gson/issues/139", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:37", "closed": "2015-03-19 18:24:37", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson should have a way to provide custom exclusion strategies", "body": "```\nSee the request at: http://groups.google.com/group/google-\ngson/browse_thread/thread/573f7359be79f4db?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Jul 2009 at 9:03\n", "url": "https://github.com/google/gson/issues/138", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:36", "closed": "2015-03-19 18:24:36", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Having an inner class gives this error - No-args constructor for B does not exist.", "body": "```\nWhat steps will reproduce the problem?\n\nI have a Java representation of the JSON object. When I declared something\nlike this -\n\npublic class A{\n   public String i;\n   public int t;\n  public B[] q;\n//no arg constructor for A\n   class B{\n       public String j;\n       public String[] k;\n       //no arg constructor for B\n   }\n}\n\n\nIt throws an exception saying B does not have a no arg constructor. when I\ndebugged, the constructor for B is actually being passed as B(A).\n\nI could get it working by taking B out of A but shouldn't it be working as\nis? you don't want to create a separate class just for 2 variables right?\nThis is a a very basic case that is supposed to work.\n\nWhat is the expected output? What do you see instead?\nExpecetd to return an instance of A. But I see the following error.\n\"No-args constructor for B does not exist. Register an InstanceCreator with\nGson for this type to fix this problem.\"\n\nWhat version of the product are you using? On what operating system?\n1.3\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `radha.te...@gmail.com` on 8 Jul 2009 at 10:04\n", "url": "https://github.com/google/gson/issues/135", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:30", "closed": "2015-03-19 18:24:30", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "support java.sql.Date and Timestamp types", "body": "```\nApparently these two types are not supported in the DefaultTypeAdapters\n(v1.3). Would be very useful if they are provided out of the box, and saves\nusers from writing custom serializer/deserializer.\n\nThanks\n```\n\nOriginal issue reported on code.google.com by `HSajja...@gmail.com` on 8 Jul 2009 at 5:31\n", "url": "https://github.com/google/gson/issues/134", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.5", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:28", "closed": "2015-03-19 18:24:28", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Not able to deserialize.", "body": "```\nI'm using gson-1.3.jar.\n\nI'm serializing my object using gson lib and i get the proper json string.\nBut while deserializing i get following exception:\nMap objects need to be parameterized unless you use a custom serializer.\n\nHere I cannot do this (what exception says) as I'm using spring mvc, and\nwhat I'm trying to serialize is Springs ModelAndView's ModelMap class.\n\nsteps to reproduce the problem\n1. put attached classes folder in classpath (classes.rar)\n2. put attached jars in classpath (lib.rar)\n3. And run the following code-snippet:\n    Gson gson = new Gson(); \n\n    FileInputStream fin=new FileInputStream(\"c:\\\\mv.ser\");\n    ObjectInputStream oin=new ObjectInputStream(fin);\n    ModelMap map=(ModelMap)oin.readObject();\n    System.out.println(\"Map is:\"+map);\n\n    //serialize\n    String jsonString=gson .toJson(map);\n    System.out.println();\n    System.out.println(\"JSOn String is :\");\n    System.out.println(jsonString);\n\n    //deserialize\n    ModelMap modelMap=gson .fromJson(jsonString, ModelMap.class);\n    System.out.println(\"Map is:\"+modelMap);\n\nPlease let me is it possible to deserialize this using gson-lib or do I\nneed to use json-lib for deserialization.\n\nI would really appreciate if yoy reply me ASAP as we need to take decision\non which library to use.\n\n\n```\n\nOriginal issue reported on code.google.com by `leenabo...@gmail.com` on 7 Jul 2009 at 6:27\n\nAttachments:\n- [mv.ser](https://storage.googleapis.com/google-code-attachments/google-gson/issue-133/comment-0/mv.ser)\n- [classes.rar](https://storage.googleapis.com/google-code-attachments/google-gson/issue-133/comment-0/classes.rar)\n- [lib.rar](https://storage.googleapis.com/google-code-attachments/google-gson/issue-133/comment-0/lib.rar)\n", "url": "https://github.com/google/gson/issues/133", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:27", "closed": "2015-03-19 18:24:27", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Not able to deserialize.", "body": "```\nI'm using gson-1.3.jar.\n\nI'm serializing my object using gson lib and i get the proper json string.\nBut while deserializing i get following exception:\nMap objects need to be parameterized unless you use a custom serializer.\n\nHere is my code:\npublic class A {\n    Map map; //and getter and setter for this\n}\n\n//in main method of some other class\n    Map m=new HashMap();\n    m.put(\"entry1\", \"value1\");\n\n    A a=new A();\n        a.setMap(m);\n\n        //serialize\n    Gson gson = new Gson();\n    String jsonString=gson .toJson(a);\n\n    //deserialize\n    A newA =gson .fromJson(jsonString, A.class);\n    System.out.println(\"Map is:\"+newA);\n\nLee\n\n\n\nb.setProp(\"prop\");\n\n```\n\nOriginal issue reported on code.google.com by `leenabo...@gmail.com` on 7 Jul 2009 at 6:21\n", "url": "https://github.com/google/gson/issues/132", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:25", "closed": "2015-03-19 18:24:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Unbearable when toJson a long string(1M)", "body": "```\nWhat steps will reproduce the problem?\n1. a long xml type string, call toJson() method,\n2. cost exceed 1 minutes with cpu 100%\n3. I used disableEscapeHtml ,but it is no useful.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n1.3\n\nPlease provide any additional information below.\nI guess escape a very long string cost to much, maybe gson could offer a \nEscapedStringBuffer, so we can build an escaped string, and toJson then \noutput it directly.\n\n```\n\nOriginal issue reported on code.google.com by `iamj...@gmail.com` on 26 Jun 2009 at 3:35\n", "url": "https://github.com/google/gson/issues/130", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:22", "closed": "2015-03-19 18:24:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Permit type data in the serialized JSON", "body": "```\nWhat steps will reproduce the problem?\n1.\n2.\n3.\n\nWhat is the expected output? What do you see instead?\nGSon gson = new GSon();\nMyObject ob = new MyObject();\nString text = gson.toJson(ob);\nMyObject copy_ob = (MyObject)gson.fromJson(text);\n\nWhat version of the product are you using? On what operating system?\n1.3\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `new.r...@gmail.com` on 19 Jun 2009 at 5:41\n- Merged into: #231\n", "url": "https://github.com/google/gson/issues/129", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.7", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:21", "closed": "2015-03-19 18:24:21", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "please add support for getter method", "body": "```\ncurrently gson only serializing field and doesn't support java bean property\n```\n\nOriginal issue reported on code.google.com by `zhouyanm...@gmail.com` on 1 Jun 2009 at 9:04\n", "url": "https://github.com/google/gson/issues/128", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:20", "closed": "2015-03-19 18:24:20", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Should support custom serializers for map keys", "body": "```\nThis is actually a RFE for supporting custom serializers for map keys, the \ncurrent implementation \nrelies on result of String.valueOf for map keys, but if I've registered a \ncustom serialization type \nadapter for the type of map key it (obviously) doesn't get called\n\nWhat steps will reproduce the problem?\ncreate any class with toString method and register a JsonSerializer for it, try \nto serialize to JSON, \nyou'll see the toString method beeing called instead of the registered \nserializer\n\nWhat is the expected output? What do you see instead?\na call to JsonSerializer instead to toString method, and result from the \nserializer in the JSON \noutput\n\nWhat version of the product are you using? On what operating system?\ngson 1.4 on OSX Leopard 10.5.7\n\nPlease provide any additional information below.\npatch is attached, with a possible solution that calls into serialization \ncontext while honoring \ncurrent implementation's behavior for keys without registered serializers, and \na unit test for the \nspecific situation\n\n```\n\nOriginal issue reported on code.google.com by `zregv...@gmail.com` on 31 May 2009 at 6:30\n\nAttachments:\n- [map_key.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-127/comment-0/map_key.patch)\n", "url": "https://github.com/google/gson/issues/127", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:19", "closed": "2015-03-19 18:24:19", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Should not look into excluded (e.g. transient) fields for type information", "body": "```\nWhat steps will reproduce the problem?\n1. create a class with generic transient field; such as:\nclass ImGeneric<T> {\n  transient T dontLookAtMe;\n}\n2. try to serialize (or deserialize) with default settings\n\nWhat is the expected output? What do you see instead?\nexception from thrown from TypeInfoFactory.java:97 - Expecting parameterized \ntype, got class \nImGeneric.\n Are you missing the use of TypeToken idiom?\n See http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-\nGener\n\nWhat version of the product are you using? On what operating system?\ngson 1.4 on OSX Leopard 10.5.7\n\nPlease provide any additional information below.\nattached you'll find the patch and unit test for this issue\n```\n\nOriginal issue reported on code.google.com by `zregv...@gmail.com` on 31 May 2009 at 12:46\n\nAttachments:\n- [transient_generic_field.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-126/comment-0/transient_generic_field.patch)\n", "url": "https://github.com/google/gson/issues/126", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:17", "closed": "2015-03-19 18:24:18", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Custom field handler", "body": "```\nI have a problem in need of a solution.  I don't think that there is a\n\"easy\" way to do this in gson (there is a \"hard\" way).\n\nA little about the problem I am trying to solve.  I am using BDB and have a\nfew entities stored in the database. A few have key relationships that\nmight be nice to optionally bridge.  For example given the two classes:\nclass A {\n @PrimaryKey\n String key;\n @SecondaryKey(relatedEntity=B.class)\n String bKey;\n}\nclass B {\n @PrimaryKey\n String key;\n}\n\nIf I serialize an instance of A it would be nice to have the option to\ninclude the referenced instance of B in the serialized representation. \nCurrently the best option is to write a custom serializer for each entity\nobject that handles this.  This is the \"hard\" option.  This requires me to\nhand code a lot of stuff that gson gives me for free.\n\nThe \"easier\" option that I have thought of (though I am open to\nsuggestions) would be to have a way to get a callback on serialization when\nGson is at a field with some marker (say a annotation).  From this callback\nI could get a hold of the field in need of serialization, and the object\nunder serialization.  This would then allow me to serialize the field\nnormally (keeping the key - say the depth is far enough) or to substitute\nthe referenced entity into the serialized location.  The awkward part of\nthis approach is that there is no good analog for the deserialization side.\n\nConsider this a long winded enhancement request :) unless there comes a\nbetter option.  ~Brian\n```\n\nOriginal issue reported on code.google.com by `nairb...@gmail.com` on 18 May 2009 at 3:46\n", "url": "https://github.com/google/gson/issues/124", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:15", "closed": "2015-03-19 18:24:15", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson parser consumes more input that needed", "body": "```\nSee the discussion at: \nhttp://groups.google.com/group/google-gson/browse_thread/thread/af43e04cb644b734\n?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 May 2009 at 4:26\n", "url": "https://github.com/google/gson/issues/123", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:13", "closed": "2015-03-19 18:24:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "SerializedName should allow Java reserved words in JSON", "body": "```\nSee\nhttp://groups.google.com/group/google-gson/browse_thread/thread/085ae0279f57b8e9\n?hl=en\n```\n\nOriginal issue reported on code.google.com by `inder123` on 5 May 2009 at 11:37\n", "url": "https://github.com/google/gson/issues/121", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:08", "closed": "2015-03-19 18:24:08", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "[enhancement] Add OSGi Bundle manifest headers so gson can be used in OSGi environment.", "body": "```\nAttaching patch to the 1.3 POM which includes the bundle manifest headers into \nthe compiled jar.  \n```\n\nOriginal issue reported on code.google.com by `rfar...@gmail.com` on 5 May 2009 at 10:17\n\nAttachments:\n- [gson-osgi.patch](https://storage.googleapis.com/google-code-attachments/google-gson/issue-120/comment-0/gson-osgi.patch)\n", "url": "https://github.com/google/gson/issues/120", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:06", "closed": "2015-03-19 18:24:06", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "registerDeserializer in GsonBuilder is private", "body": "```\nWhat steps will reproduce the problem?\n1. See source code\n2.\n3.\n\nWhat is the expected output? What do you see instead?\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\nHow can a client register a custom deserializer?\n```\n\nOriginal issue reported on code.google.com by `kaveh.gh...@gmail.com` on 27 Apr 2009 at 8:35\n", "url": "https://github.com/google/gson/issues/119", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:05", "closed": "2015-03-19 18:24:05", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson should list the field that caused circular reference error", "body": "```\nSee the discussion at \nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/8570497f1d35479d\n```\n\nOriginal issue reported on code.google.com by `inder123` on 14 Apr 2009 at 8:44\n", "url": "https://github.com/google/gson/issues/118", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:04", "closed": "2015-03-19 18:24:04", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Can't seriallize/deseriallize a List<Object> with null element;", "body": "```\nWhat steps will reproduce the problem?\n   List<Object> d = new ArrayList<Object>();\n   d.add(null);\n   JsonElement je = gson.toJsonTree(d);\n\nWhat is the expected output? What do you see instead?\n   create json like \"[null]\"\nactually\n   throw a null pointer exception\n\nWhat version of the product are you using? On what operating system?\n   1.3\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `yufanyu...@gmail.com` on 8 Apr 2009 at 9:24\n", "url": "https://github.com/google/gson/issues/117", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:03", "closed": "2015-03-19 18:24:03", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Supporting associations like JS (Map based) is desired", "body": "```\nWhat steps will reproduce the problem?\n1.create something like String s = '{a:[1,2,\"b\"],c:[3,\"5\",6]}';\n2. gson.fromJson(s, Map.class);\n3. you get exception\n\nWhat is the expected output? What do you see instead?\nI expected Map (association) similar I have in JS. However I am forced to \ncreate a new Java type, like:\nstatic class MyType {\n  String[] a, c;}\n\n\nWhat version of the product are you using? On what operating system?\nversion 1.3 on Ubuntu\n\nPlease provide any additional information below.\n\nBTW if I have mixed array, why can't I deserialize in Object[] with \nautomatic fills of elements as Sting, Integer, Long, OtherObject\n\n```\n\nOriginal issue reported on code.google.com by `jAddress...@gmail.com` on 8 Apr 2009 at 1:11\n", "url": "https://github.com/google/gson/issues/116", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:02", "closed": "2015-03-19 18:24:02", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "JsonParser.jj wrong grammar", "body": "```\nWhat steps will reproduce the problem?\n\n1. Please take a look at the JsonParser.jj file in you source control.\nParse method looks like this:\n\npublic JsonElement parse() :\n{\n  JsonElement json = null;\n}\n{\n  [\")]}'\\n\"]( json=JsonObject() |\n    json=JsonArray() |\n    json=JsonPrimitive() |\n    json=JsonNull())\n  { return json; }\n}\n\nWhat is the expected output? What do you see instead?\n\nI've found at least two instances of json text causing to return incorrect\nresult. Try to proceed parsing with the following input:\n\n1. JsonElement element = new JsonParser(new StringReader(\"  \")).parse();\n\nExpected element is to be null, but it failed with exception:\n\nEncountered \"<EOF>\" at line 1, column 2.\nWas expecting one of:\n    <DIGITS> ...\n    \"null\" ...\n    \"NaN\" ...\n    \"Infinity\" ...\n    <BOOLEAN> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \"[\" ...\n    \"{\" ...\n    \"-\" ...\n    \")]}\\'\\n\" ...\n\n2. Second option is event more harmful:\nJsonElement element = new JsonParser(new StringReader(\"{}, 12, 23\")).parse();\n\nExpected: parse exception to be throws (indicating bad grammar).\nBut encountered empty JsonObject (parser stop parsing after it encounters\ncurly bracket and immediately returns).\n\nI want to provide you with a fix to JsonParser.jj grammar file.\n\npublic JsonElement parse():{\n  JsonElement json = null;\n}\n{\n  (<EOF>\n  | json = JsonObject()\n  | json = JsonArray()\n  | json = JsonPrimitive()\n  | json = JsonNull()) <EOF> {\n    return json;\n  }\n}\n\n\n```\n\nOriginal issue reported on code.google.com by `tazija@gmail.com` on 4 Apr 2009 at 12:19\n", "url": "https://github.com/google/gson/issues/115", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:24:00", "closed": "2015-03-19 18:24:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "GSON does not handle Object[] well", "body": "```\nWhat steps will reproduce the problem?\n1. Create a 1-element Object[] array\n2. Insert a Double into said array\n3. Convert said array to JSON using GSON\n\nWhat is the expected output? What do you see instead?\nI expected to get \"[1235.12411]\" but got \"[{}]\" instead.  This happens for\nother element types such as java.util.Date and java.lang.Integer.  I see\nthe expected output if I use a Double[] or List instead of Object[].\n\nUsing GSON 1.3 release on Ubuntu Intrepid Ibex.\n$ java -version\njava version \"1.6.0_10\"\nJava(TM) SE Runtime Environment (build 1.6.0_10-b33)\nJava HotSpot(TM) 64-Bit Server VM (build 11.0-b15, mixed mode)\n```\n\nOriginal issue reported on code.google.com by `ket...@gmail.com` on 2 Apr 2009 at 9:09\n\nAttachments:\n- [GsonDouble.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-114/comment-0/GsonDouble.java)\n", "url": "https://github.com/google/gson/issues/114", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:58", "closed": "2015-03-19 18:23:58", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Output of single element String arrays not consistent with multi-element String arrays", "body": "```\nWhat steps will reproduce the problem?\n1. String s = {\"hello\"};\n2. new Gson().toJson(s);\nResult: [\"hello\"]\nShould be:  \"[\\\"hello\\\"]\"\n\n1. String s = {\"hello\", \"goodbye\"};\n2. new Gson().toJson(s);\nResult: \"[\\\"hello\\\",\\\"goodbye\\\"]\" \n(correct)\n\n\nWhat version of the product are you using? On what operating system?\n1.2.2, Ubuntu\n\nPlease provide any additional information below.\n\n```\n\nOriginal issue reported on code.google.com by `ehin...@gmail.com` on 2 Apr 2009 at 1:29\n", "url": "https://github.com/google/gson/issues/113", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:57", "closed": "2015-03-19 18:23:57", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Verbose, multi-line formatter for Gson (patch included)", "body": "```\nIncluded is a patch to add a verbose, multi-line, one value per line\nformatter as discussed in issue 57\n(http://code.google.com/p/google-gson/issues/detail?id=57).\n\nThe changes to GsonBuilder are just examples and will probably be entirely\ndifferent if setFormatter becomes public. I just included them to make the\nformatter testable and to have atleast one way of using it myself.\n\nClass names and such have not been really thought out, so feel free to\nrename and mangle as much as you wish.\n\nLet me know if there's a need for copyright assignment or such.\n```\n\nOriginal issue reported on code.google.com by `nuutti.k...@gmail.com` on 29 Mar 2009 at 2:17\n\nAttachments:\n- [gson-verbose-formatter.diff](https://storage.googleapis.com/google-code-attachments/google-gson/issue-112/comment-0/gson-verbose-formatter.diff)\n", "url": "https://github.com/google/gson/issues/112", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.5", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:56", "closed": "2015-03-19 18:23:56", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "make JsonPrimitive.getAsObject a public method", "body": "```\nIn json-rpc, it's necessary to determining actual type of a JsonPrimitive, \nsuch as Interger, Long or BigInterger. This information can be make available \nby add several is*** function, but make JsonPrimitive.getAsObject a public \nmethod would be more easily. \n\n```\n\nOriginal issue reported on code.google.com by `yufanyu...@gmail.com` on 28 Mar 2009 at 1:33\n", "url": "https://github.com/google/gson/issues/111", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:55", "closed": "2015-03-19 18:23:55", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Trivial bug in user guide", "body": "```\nIn the user guide, on collection types, this is said:\n\n----\n(Deserialization)\nType collectionType = new TypeToken<Collection<Integer>>(){}.getType();\nCollection<Integer> ints2 = gson.fromJson(collectionType, json);\nints2 is same as ints\n----\n\nYet, gson.fromJson is most likely taking the String argument first, and\nthen the Type arguments.\n```\n\nOriginal issue reported on code.google.com by `nuutti.k...@gmail.com` on 26 Mar 2009 at 1:28\n", "url": "https://github.com/google/gson/issues/109", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:54", "closed": "2015-03-19 18:23:54", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Error during parsing hex codes.", "body": "```\nWhat steps will reproduce the problem?\n\n1. Try to parse string value with hex codes.\n\n{\n\"title\" : \"The Dun \\x26 Bradstreet Corporation\",\n\"id\" : \"10242\"\n}\n\nwe get:\n\nCaused by: com.google.gson.ParseException: Encountered \"\\\"\" at line 2,\ncolumn 20.\nWas expecting one of:\n    <DIGITS> ...\n    \"null\" ...\n    \"NaN\" ...\n    \"Infinity\" ...\n    <BOOLEAN> ...\n    <SINGLE_QUOTE_LITERAL> ...\n    <DOUBLE_QUOTE_LITERAL> ...\n    \"{\" ...\n    \"[\" ...\n    \"-\" ...\n\n\nWhat is the expected output? What do you see instead?\n\nThere must not be any errors!\n\nWhat version of the product are you using? On what operating system?\n\n1.3.b\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `alexande...@gmail.com` on 24 Mar 2009 at 8:38\n", "url": "https://github.com/google/gson/issues/108", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:53", "closed": "2015-03-19 18:23:53", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "toString on JsonPrimitve does not produce valid Json", "body": "```\nWhat steps will reproduce the problem?\n1. Compile attached file GsonTest.java\n2. Run it\n\nWhat is the expected output? What do you see instead?\nThe line break and tab should be escaped. Currently they are not escaped and\ntherefore the output is not valid Json. The documentation for the toString\nmethod claims that it is.\n\nWhat version of the product are you using? On what operating system?\n1.3b2 on Linux\n```\n\nOriginal issue reported on code.google.com by `dennis.b...@gmx.net` on 11 Mar 2009 at 5:46\n\nAttachments:\n- [GsonTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-107/comment-0/GsonTest.java)\n", "url": "https://github.com/google/gson/issues/107", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:50", "closed": "2015-03-19 18:23:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Please support java.util.Calendar by default", "body": "```\nWhat steps will reproduce the problem?\n1. Create a Class Customer with \nCustomer {\n String name;\n Calendar timestamp;\n}\n2.  Try Serializing this class and you will get an exception for Calendar\n\n3.\n            Customer c = new Customer();\n        c.setName(\"jjj sdss\");\n        c.setRegTime(Calendar.getInstance());\n                Gson gson = new Gson();\n        String json = gson.toJson(c);\n\nWhat is the expected output? What do you see instead?\nCalendar seems to be not supported\n\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\njava.lang.RuntimeException: Unable to invoke no-args constructor for class\njava.util.Calendar. Register an InstanceCreator with Gson for this type may\nfix this problem.\n\n\n\nCan java.util.Calendar be supported by default ??? \n\n```\n\nOriginal issue reported on code.google.com by `njun...@gmail.com` on 5 Mar 2009 at 8:01\n", "url": "https://github.com/google/gson/issues/106", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.3", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:50", "closed": "2015-03-19 18:23:50", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "ClassCastException thrown instead of ParseError", "body": "```\nWhat steps will reproduce the problem?\n1. class TestObjectA { TestObjectB b }\n2. String two = {\"b\" : [ ]}\n3. new Gson().fromJson(two, TestObjectA.class)\n\nWhat is the expected output? What do you see instead?\n\nExpected: parse error\n\nActual: ClassCastException: com.google.gson.JsonArray cannot be cast to\ncom.google.gson.JsonObject\n\nWhat version of the product are you using? On what operating system?\n\nv1.2.2 on Linux\n\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 4 Mar 2009 at 7:12\n", "url": "https://github.com/google/gson/issues/105", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.3", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:48", "closed": "2015-03-19 18:23:48", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "ClassCastException in 1.3b2 from line 91 in TypeInfoFactory.java", "body": "```\nhttp://groups.google.com/group/google-\ngson/browse_thread/thread/50e5c3b80ac7c7ab?hl=en\n\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 22 Feb 2009 at 6:27\n", "url": "https://github.com/google/gson/issues/103", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:46", "closed": "2015-03-19 18:23:46", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "ClassCastException in TypeInfoFactory", "body": "```\nGetting exception when trying to jsonify a internally created object. Stack\ntrace is \n\njava.lang.ClassCastException: java.lang.Class cannot be cast to\njava.lang.reflect.ParameterizedType\n    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:91)\n    at com.google.gson.TypeInfoFactory.extractRealTypes(TypeInfoFactory.java:110)\n    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:65)\n    at\ncom.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\n    at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:166)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at\ncom.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio\nnVisitor.java:163)\n    at\ncom.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis\nitor.java:137)\n    at\ncom.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisit\nor.java:132)\n    at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at\ncom.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio\nnVisitor.java:163)\n    at\ncom.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis\nitor.java:137)\n    at\ncom.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisit\nor.java:132)\n    at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at\ncom.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio\nnVisitor.java:163)\n    at\ncom.google.gson.JsonSerializationVisitor.addAsArrayElement(JsonSerializationVisi\ntor.java:150)\n    at\ncom.google.gson.JsonSerializationVisitor.visitCollection(JsonSerializationVisito\nr.java:78)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:137)\n    at\ncom.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio\nnVisitor.java:163)\n    at\ncom.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis\nitor.java:137)\n    at\ncom.google.gson.JsonSerializationVisitor.visitCollectionField(JsonSerializationV\nisitor.java:103)\n    at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:174)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at\ncom.google.gson.JsonSerializationVisitor.getJsonElementForChild(JsonSerializatio\nnVisitor.java:163)\n    at\ncom.google.gson.JsonSerializationVisitor.addAsChildOfObject(JsonSerializationVis\nitor.java:137)\n    at\ncom.google.gson.JsonSerializationVisitor.visitObjectField(JsonSerializationVisit\nor.java:132)\n    at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at\ncom.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationConte\nxtDefault.java:47)\n    at com.google.gson.Gson.toJson(Gson.java:273)\n    at com.google.gson.Gson.toJson(Gson.java:229)\n    at com.google.gson.Gson.toJson(Gson.java:209)\n    at com.company.it.widgetserver.AjaxServlet.doGet(AjaxServlet.java:138)\n\n\nWhat steps will reproduce the problem?\nCreate classes with generics and try to convert to json\n\nWhat version of the product are you using? On what operating system?\nTried with 1.3, 1.2.3, 1.2.2 and still getting same error.  It is on Windows.\n\n\n```\n\nOriginal issue reported on code.google.com by `brsan...@gmail.com` on 19 Feb 2009 at 8:07\n", "url": "https://github.com/google/gson/issues/102", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:44", "closed": "2015-03-19 18:23:44", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Does gson can support a method to create the BasicDynaBean from the json string?", "body": "```\njust like the json-lib does. thanks\n```\n\nOriginal issue reported on code.google.com by `killvin....@gmail.com` on 13 Feb 2009 at 9:32\n", "url": "https://github.com/google/gson/issues/101", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.5", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:42", "closed": "2015-03-19 18:23:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "deserializing a Set requires elements to implement Comparable, when ordering is not required", "body": "```\nWhat steps will reproduce the problem?\n1. See attached beans Tree and Monkey\n2. Run this test:\n\n    Tree tree = new Tree();\n    tree.getMonkeys().add(new Monkey());\n    tree.getMonkeys().add(new Monkey());\n\n    String serialised = json.toJson(tree);\n    Tree newTree = json.fromJson(serialised, Tree.class);\n\nWhat is the expected output? What do you see instead?\n\nDeserialize fails, Caused by: java.lang.ClassCastException:\ncom.jpmorgan.ibmlbus.beans.serialise.Monkey cannot be cast to\njava.lang.Comparable\n    at java.util.TreeMap.put(Unknown Source)\n    at java.util.TreeSet.add(Unknown Source)\n    at\ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTyp\neAdapters.java:404)\n    at\ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.deserialize(DefaultTyp\neAdapters.java:369)\n    at\ncom.google.gson.JsonDeserializerExceptionWrapper.deserialize(JsonDeserializerExc\neptionWrapper.java:50)\n    ... 27 more\n\nThe point is that Monkeys have no natural ordering. We should be able to\nuse them in a Set though, because uniqueness is fine.\n\nWhat version of the product are you using? On what operating system?\n1.2.3\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `aaron.b...@gmail.com` on 12 Feb 2009 at 4:08\n\nAttachments:\n- [Tree.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-100/comment-0/Tree.java)\n- [Monkey.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-100/comment-0/Monkey.java)\n", "url": "https://github.com/google/gson/issues/100", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.3", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:41", "closed": "2015-03-19 18:23:41", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Invalid serialization of a Map with null values", "body": "```\nWhat steps will reproduce the problem?\n\npublic class GsonTest {\n\n    private static class TestType {\n        Map<String, String> map = new TreeMap<String, String>();\n    }\n\n    /**\n     * @param args\n     */\n    public static void main(String[] args) {\n        TestType t = new TestType();\n        t.map.put(\"name1\", null);\n        t.map.put(\"name2\", \"value2\");\n\n        Gson gson = new Gson();\n        System.out.println(gson.toJson(t));\n    }\n\n}\n\nThe output is:\n{\"map\":{,\"name2\":\"value2\"}}\n\nNote the extra comma at the beginning of the map.\n\nThe expected output is:\n{\"map\":{\"name2\":\"value2\"}}\n\n\nWhat version of the product are you using? On what operating system?\n\nThis is gson 1.2.3 on Ubuntu 8.10 64-bit.\n\n\n\n```\n\nOriginal issue reported on code.google.com by `gary...@gmail.com` on 8 Feb 2009 at 6:55\n", "url": "https://github.com/google/gson/issues/99", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:40", "closed": "2015-03-19 18:23:40", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "JsonNull.createJsonNull should be public, constructor should be private", "body": "```\nVersion: gson-1.3 from http://google-gson.googlecode.com/svn/mavenrepo\n\nI assume it's not public because the original intention was to only need it\nin automatically gson serialization. However I'm writing a serializer and\nwould like to return json null programmatically when desired (say, to\nhandle GsonBuilder#serializeNulls).\n```\n\nOriginal issue reported on code.google.com by `estebis...@gmail.com` on 28 Jan 2009 at 4:51\n", "url": "https://github.com/google/gson/issues/97", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:38", "closed": "2015-03-19 18:23:38", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "StackOverflowError with long Collections", "body": "```\nWhat steps will reproduce the problem?\nimport java.lang.reflect.Type;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\nimport com.google.gson.Gson;\nimport com.google.gson.reflect.TypeToken;\n\n\npublic class TestGson\n{\n    private String name;\n    private String value;\n\n    public TestGson()\n    {\n    }\n\n\n    /**\n     * @param name\n     * @param value\n     */\n    public TestGson(String name, String value)\n    {\n        super();\n        this.name = name;\n        this.value = value;\n    }\n\n\n    public static void main(String[] args)\n    {\n        List<TestGson> list = new ArrayList<TestGson>(10000);\n\n        for (int x = 0; x < 10000;x++)\n        {\n            list.add(new TestGson(\"name\"+x,\"value\"+x));\n        }\n\n        Gson gson = new Gson();\n\n        String json = gson.toJson(list);\n        System.out.println(\"Json: \"+json);\n\n        Type collectionType = new TypeToken<ArrayList<TestGson>>(){}.getType();\n\n        List<TestGson> list2 = gson.fromJson(json,collectionType);\n\n    }\n}\n\nWhat is the expected output? What do you see instead?\n\nThe stack trace looks as follows:\n\nException in thread \"main\" com.google.gson.JsonParseException: Failed\nparsing JSON source: java.io.StringReader@1b9ce4b to Json\n    at com.google.gson.Gson.fromJson(Gson.java:380)\n    at com.google.gson.Gson.fromJson(Gson.java:321)\n    at TestGson.main(TestGson.java:48)\nCaused by: java.lang.StackOverflowError\n    at com.google.gson.SimpleCharStream.readChar(SimpleCharStream.java:198)\n    at\ncom.google.gson.JsonParserTokenManager.jjMoveNfa_0(JsonParserTokenManager.java:5\n84)\n    at\ncom.google.gson.JsonParserTokenManager.jjStartNfaWithStates_0(JsonParserTokenMan\nager.java:165)\n    at\ncom.google.gson.JsonParserTokenManager.jjMoveStringLiteralDfa0_0(JsonParserToken\nManager.java:172)\n    at\ncom.google.gson.JsonParserTokenManager.getNextToken(JsonParserTokenManager.java:\n935)\n    at com.google.gson.JsonParser.jj_ntk(JsonParser.java:396)\n    at com.google.gson.JsonParser.JsonString(JsonParser.java:274)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:76)\n    at com.google.gson.JsonParser.Members(JsonParser.java:61)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:134)\n    at com.google.gson.JsonParser.Elements(JsonParser.java:109)\n    at com.google.gson.JsonParser.Elements(JsonParser.java:113)\n    at com.google.gson.JsonParser.Elements(JsonParser.java:113)\n...\n\n\nWhat version of the product are you using? On what operating system?\nGSON 1.3\n\nPlease provide any additional information below.\nIt is strange that a linear collection is deserialized using recursion.\nThis will always fail with large collections. Sooner or later. With my\nstack size the limit was something like 8500 elements. \n\n```\n\nOriginal issue reported on code.google.com by `nit...@googlemail.com` on 22 Jan 2009 at 9:40\n", "url": "https://github.com/google/gson/issues/96", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.4", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:33", "closed": "2015-03-19 18:23:33", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "deserialize map of map", "body": "```\ni'm not sure that it is an issue but i haven't found document that explain\nhow to execute follow code\n\nMap map = new HashMap();\nMap nestedMap = new HashMap();\nnestedMap.put(\"1\", \"1\");\nnestedMap.put(\"2\", \"2\");\nmap.put(\"nestedMap\", nestedMap);\n\nString json = new Gson().toJson(map);\nassertThat(json, is(equalTo(\"{\\\"nestedMap\\\":{\\\"2\\\":\\\"2\\\",\\\"1\\\":\\\"1\\\"}}\")));\n\n// in next statements i try to deserialize json to obtain same map of map\nMap map2 = new Gson().fromJson(json, Map.class);\nString json2 = new Gson().toJson(map2);\nassertThat(json, is(equalTo(json2)));\n\n```\n\nOriginal issue reported on code.google.com by `luca.marrocco` on 21 Jan 2009 at 12:46\n", "url": "https://github.com/google/gson/issues/95", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:32", "closed": "2015-03-19 18:23:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Gson1.3 can't handle big number strings with exponent", "body": "```\nWhat steps will reproduce the problem?\npublic class FindIssue {\n    public double largeNumber;\n    public static void main(String[] args) {\n        Gson gson = new Gson();\n        FindIssue f=gson.fromJson(\"{largeNumber:1.234567899E8}\",\nFindIssue.class);\n        System.out.println(f.largeNumber);\n    }\n}\n\nWhat is the expected output? What do you see instead?\nexpected output: 1.234567899E8\ninstead: Exception in thread \"main\" com.google.gson.JsonParseException:\nFailed parsing JSON source: java.io.StringReader@f81843 to Json\n    at com.google.gson.Gson.fromJson(Gson.java:386)\n    at com.google.gson.Gson.fromJson(Gson.java:329)\n    at com.google.gson.Gson.fromJson(Gson.java:305)\n    at own.FindIssue.main(FindIssue.java:18)\nCaused by: com.google.gson.ParseException: Encountered \"E8\" at line 1,\ncolumn 25.\nWas expecting one of:\n    <E> ...\n    \"}\" ...\n    \",\" ...\n\n    at com.google.gson.JsonParser.generateParseException(JsonParser.java:624)\n    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:504)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:50)\n    at com.google.gson.JsonParser.parse(JsonParser.java:11)\n    at com.google.gson.Gson.fromJson(Gson.java:378)\n    ... 3 more\n\nWhat version of the product are you using? On what operating system?\ngson1.3-BETA, Linux (Ubuntu 8.10)\n\nPlease provide any additional information below.\nBecause of some changes in gson1.3, Parser can't detect literal E, it will\nalways find literal \"E#number#\" as one IDENTIFIER literal which is not\nhandled in JsonParser.JsonNumber()\n\n```\n\nOriginal issue reported on code.google.com by `J.Berin...@gmail.com` on 20 Jan 2009 at 10:07\n", "url": "https://github.com/google/gson/issues/94", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.3", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:30", "closed": "2015-03-19 18:23:30", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Pretty Printing Results in Omission of Comma following a Serialized Map", "body": "```\nWhat steps will reproduce the problem?\n1. Create a Gson object with pretty printing: new \nGsonBuilder().setPrettyPrinting().create();\n2. Serialize an object containing a map.\n\nWhat is the expected output? What do you see instead?\nAs pretty JSON: {\"baz\":{}\"fizzle\":\"bar\"}\n\nAs compact JSON: {\"baz\":{},\"fizzle\":\"bar\"}\n\n\nWhat version of the product are you using? On what operating system?\n1.2.3\n\nPlease provide any additional information below.\nHere's a simple example that produces the output above and demonstrates the \nproblem:\n\npackage com.joelpm;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class App {\n  public static class Foo {\n    private Map<String,String> baz;\n    private String fizzle;\n\n    public Foo(String fizzle) {\n      this.baz = new HashMap<String,String>();\n      this.fizzle = fizzle;\n    }\n  }\n\n  public static void main(String[] args) {\n    Foo quux = new Foo(\"bar\");\n    Gson gsonPretty = new GsonBuilder().setPrettyPrinting().create();\n    Gson gsonRegular = new GsonBuilder().create();\n    System.out.println(\"As pretty JSON: \" + gsonPretty.toJson(quux));\n    System.out.println(\"As compact JSON: \" + gsonRegular.toJson(quux));\n  }\n}\n\n\n\n```\n\nOriginal issue reported on code.google.com by `joel.me...@gmail.com` on 12 Jan 2009 at 10:52\n", "url": "https://github.com/google/gson/issues/93", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.3", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:29", "closed": "2015-03-19 18:23:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Use String.valueOf() for numeric and boolean types", "body": "```\nCurrently, if gson tries to convert a JSON integer into a String, it just\ntries casting, which throws an exception.  It should be smart enough to use\nString.valueOf() for numeric and boolean types.\n\nSee discussion\nhttp://groups.google.com/group/google-gson/browse_thread/thread/86e023adede4394c\n#\nfor more info.\n\n```\n\nOriginal issue reported on code.google.com by `tobini...@gmail.com` on 9 Jan 2009 at 1:46\n", "url": "https://github.com/google/gson/issues/89", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:25", "closed": "2015-03-19 18:23:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "gson library on Android throws java.lang.TypeNotPresentException", "body": "```\n\nGSON version:  trunk   (7 January 2009)\n\nAndroid platform:   Android 1.0 R2 SDK\n\n\nI can't get GSON to work properly on Android's Dalvik VM.   The Android \nruntime is throwing java.lang.TypeNotPresentException.\n\nI reproduced this bug with the Android SDK emulator and also on the Android\nG1 Developer Phone.\n\nHere is the stack trace:\n\nE/jpoco.android.ContactsActivity(  251): Type jpoco.client.Contact not present\nE/jpoco.android.ContactsActivity(  251):\njava.lang.TypeNotPresentException: Type jpoco.client.Contact not\npresent\nE/jpoco.android.ContactsActivity(  251):        at\norg.apache.harmony.luni.lang.reflect.ImplForType.getRawType(ImplForType.java:63)\nE/jpoco.android.ContactsActivity(  251):        at\norg.apache.harmony.luni.lang.reflect.ImplForType.getResolvedType(ImplForType.jav\na:72)\nE/jpoco.android.ContactsActivity(  251):        at\norg.apache.harmony.luni.lang.reflect.ListOfTypes.getResolvedTypes(ListOfTypes.ja\nva:68)\nE/jpoco.android.ContactsActivity(  251):        at\norg.apache.harmony.luni.lang.reflect.ImplForType.getActualTypeArguments(ImplForT\nype.java:40)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:65)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:136)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.ObjectNavigator.accept(ObjectNavigator.java:122)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextDefault.java:73)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefault.java:49)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.Gson.fromJson(Gson.java:381)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.Gson.fromJson(Gson.java:329)\nE/jpoco.android.ContactsActivity(  251):        at\ncom.google.gson.Gson.fromJson(Gson.java:305)\nE/jpoco.android.ContactsActivity(  251):        at\njpoco.io.Deserializer.deserialize(Deserializer.java:63)\nE/jpoco.android.ContactsActivity(  251):        at\njpoco.client.Client.fromString(Client.java:152)\n\n\n```\n\nOriginal issue reported on code.google.com by `sean%sea...@gtempaccount.com` on 7 Jan 2009 at 12:13\n", "url": "https://github.com/google/gson/issues/88", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:24", "closed": "2015-03-19 18:23:24", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Map<Integer, Object> has string keys after deserialization", "body": "```\nWhat steps will reproduce the problem?\n\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport com.google.gson.Gson;\n\n\npublic class TestGson\n{\n    Map<Integer, String> map = new HashMap<Integer, String>();\n\n    public static void main(String[] args)\n    {\n        TestGson testGson = new TestGson();\n        testGson.map.put(1, \"one\");\n\n        Gson gson = new Gson();\n\n        String json = gson.toJson(testGson);\n        System.out.println(\"Json: \"+json);\n\n        TestGson testGson2 = gson.fromJson(json, TestGson.class);\n\n        System.out.println(\"original:\");\n        System.out.println(testGson.map.containsKey(1));\n        System.out.println(testGson.map.containsKey(\"1\"));\n\n        System.out.println(\"fromJson:\");\n        System.out.println(testGson2.map.containsKey(1));\n        System.out.println(testGson2.map.containsKey(\"1\"));\n    }\n}\n\nOutput:\n\nJson: {\"map\":{\"1\":\"one\"}}\noriginal:\ntrue\nfalse\nfromJson:\nfalse\ntrue\n\n\nWhat is the expected output? What do you see instead?\n\nThe keys should be integers. It should be possible to check the generic\ntypes of the map and then assign the values accordingly. \n\n\nWhat version of the product are you using? On what operating system?\nGSON 1.2.3\n\n\n\n```\n\nOriginal issue reported on code.google.com by `nit...@googlemail.com` on 29 Dec 2008 at 7:53\n", "url": "https://github.com/google/gson/issues/85", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:21", "closed": "2015-03-19 18:23:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Nested classes cannot be deserialized", "body": "```\nWhat steps will reproduce the problem?\n1. Create a nested class (inside a test case for instance)\n2. Create Gson object\n3. Try to deserlialize an instance of the nested class\n\nWhat is the expected output? What do you see instead?\nExpected output is successfull deserailization. Insted an exception is\nthrown (No no-args constructor found for class blaablaa please use...)\n\n\nWhat version of the product are you using? On what operating system?\n1.2.3\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `miku.kop...@gmail.com` on 27 Dec 2008 at 11:07\n", "url": "https://github.com/google/gson/issues/84", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:20", "closed": "2015-03-19 18:23:20", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson does not handle null values in list properly ", "body": "```\nmy code:\n\nGson g=new Gson();      \nList<String> t6=new ArrayList<String>();\nt6.add(\"list 1\");\nt6.add(null);\nt6.add(\"list 2\");\nString s6=g.toJson(t6);\n\ntrace:\n\njava.lang.NullPointerException\n    at \ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize\n(DefaultTypeAdapters.java:414)\n    at \ncom.google.gson.DefaultTypeAdapters$CollectionTypeAdapter.serialize\n(DefaultTypeAdapters.java:1)\n    at com.google.gson.JsonSerializationVisitor.visitUsingCustomHandler\n(JsonSerializationVisitor.java:132)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:96)\n    at com.google.gson.JsonSerializationContextDefault.serialize\n(JsonSerializationContextDefault.java:47)\n    at com.google.gson.Gson.toJson(Gson.java:279)\n    at com.google.gson.Gson.toJson(Gson.java:230)\n    at com.google.gson.Gson.toJson(Gson.java:210)\n    at com.aisino.platform.view.json.TestGson.testToJson\n(TestGson.java:71)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:585)\n    at org.junit.internal.runners.TestMethodRunner.executeMethodBody\n(TestMethodRunner.java:99)\n    at org.junit.internal.runners.TestMethodRunner.runUnprotected\n(TestMethodRunner.java:81)\n    at org.junit.internal.runners.BeforeAndAfterRunner.runProtected\n(BeforeAndAfterRunner.java:34)\n    at org.junit.internal.runners.TestMethodRunner.runMethod\n(TestMethodRunner.java:75)\n    at org.junit.internal.runners.TestMethodRunner.run\n(TestMethodRunner.java:45)\n    at \norg.junit.internal.runners.TestClassMethodsRunner.invokeTestMethod\n(TestClassMethodsRunner.java:71)\n    at org.junit.internal.runners.TestClassMethodsRunner.run\n(TestClassMethodsRunner.java:35)\n    at org.junit.internal.runners.TestClassRunner$1.runUnprotected\n(TestClassRunner.java:42)\n    at org.junit.internal.runners.BeforeAndAfterRunner.runProtected\n(BeforeAndAfterRunner.java:34)\n    at org.junit.internal.runners.TestClassRunner.run\n(TestClassRunner.java:52)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run\n(JUnit4TestReference.java:45)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run\n(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests\n(RemoteTestRunner.java:460)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests\n(RemoteTestRunner.java:673)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run\n(RemoteTestRunner.java:386)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main\n(RemoteTestRunner.java:196)\n\n\nand  when I made some change on \ncom.google.gson.DefaultTypeAdapters,then ,it is ok.\n\n\npublic JsonElement serialize(Collection src, Type typeOfSrc, \nJsonSerializationContext context) {\n      if (src == null) {\n        return JsonNull.createJsonNull();\n      }\n      JsonArray array = new JsonArray();\n      Type childGenericType = null;\n      if (typeOfSrc instanceof ParameterizedType) {\n        childGenericType = new TypeInfoCollection(typeOfSrc).getElementType\n();        \n      }\n      for (Object child : src) {\n          if(child!=null){   // here, if null? \n        Type childType = (childGenericType == null || childGenericType == \nObject.class)\n            ? child.getClass() : childGenericType;\n        JsonElement element = context.serialize(child, childType);\n        array.add(element);\n          }else{   //  here, do when it is null\n              array.add(null);\n          }\n\n\n      }\n      return array;\n    }\n\n```\n\nOriginal issue reported on code.google.com by `iamj...@gmail.com` on 25 Dec 2008 at 1:18\n", "url": "https://github.com/google/gson/issues/83", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:18", "closed": "2015-03-19 18:23:19", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Deserialization of long primitive types can lead to data corruption", "body": "```\nWhat steps will reproduce the problem?\n1. Deserializing a long > 32 bits from javascript into a java long primitive\n\n\nWhat is the expected output? What do you see instead?\ni don't think you guys handle long conversion from JSON -> Java properly.\nIn javascript, there is no such thing as a long (the language doesn't\nsupport it - gwt plays tricks like using an array of doubles to keep\nprecision).\n\nSo, when passing back json, I have to quote my long id so it looks like a\nstring. However, Gson will try to cast the String to a Number which\nobviously fails.\nCould you change the default deserialization to take this case into\nconsideration?\n\nAlso, when serializing, I'm not so sure it makes sense to just convert a\nlong to a javascript number (like in your gson example doc).\n\nPerhaps some sort of annotation on the that can be used to indicate it is\nsafe to cast a string to a long.\n\nie:\n\n{ \"myLongVar\": \"1000000\" } should convert the String to a primitive long\n\nbut something like\n\n{ \"myLongVar\" : 20000 } should also work without the quotes.\n\nThere are a lot of cases where you want a long as an id where you are not\nperforming math and should be safe to serialize/deserialize\n\nWhat version of the product are you using? On what operating system?\n\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `dws...@gmail.com` on 16 Dec 2008 at 5:40\n", "url": "https://github.com/google/gson/issues/82", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:17", "closed": "2015-03-19 18:23:18", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Exception when deserializing Double.NaN, Double.NEGATIVE_INFINITY and Double.POSITIVE_INFINITY", "body": "```\nWhat steps will reproduce the problem?\n\npublic class GsonDouble\n{\n    private double negInf = Double.NEGATIVE_INFINITY;\n    private double posInf = Double.POSITIVE_INFINITY;\n    private double notANumber = Double.NaN;\n    private double number = 2.0;\n\n    public static void main(String[] args)\n    {\n        Gson gson = new Gson();\n\n        String json = gson.toJson(new GsonDouble());\n        System.out.println(json);\n\n        GsonDouble gsonDouble = gson.fromJson(json, GsonDouble.class);\n\n    }\n}\n\nException in thread \"main\" com.google.gson.JsonParseException: Failed\nparsing JSON source: java.io.StringReader@134bed0 to Json\n    at com.google.gson.Gson.fromJson(Gson.java:376)\n    at com.google.gson.Gson.fromJson(Gson.java:321)\n    at com.google.gson.Gson.fromJson(Gson.java:297)\n    at GsonDouble.main(GsonDouble.java:29)\nCaused by: com.google.gson.TokenMgrError: Lexical error at line 1, column\n12.  Encountered: \"I\" (73), after : \"\"\n    at\ncom.google.gson.JsonParserTokenManager.getNextToken(JsonParserTokenManager.java:\n999)\n    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:366)\n    at com.google.gson.JsonParser.Digits(JsonParser.java:267)\n    at com.google.gson.JsonParser.JsonInt(JsonParser.java:241)\n    at com.google.gson.JsonParser.JsonNumber(JsonParser.java:192)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:131)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:78)\n    at com.google.gson.JsonParser.Members(JsonParser.java:61)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)\n    at com.google.gson.JsonParser.parse(JsonParser.java:11)\n    at com.google.gson.Gson.fromJson(Gson.java:370)\n    ... 3 more\n\n\nThe serialized String looks as follows:\n\n{\"negInf\":-Infinity,\"posInf\":Infinity,\"notANumber\":NaN,\"number\":2.0}\n\nI guess the serialization is ok, since JavaScript uses Number.NaN,\nNumber.NEGATIVE_INFINITY and Number.POSITIVE_INFINITY and the text\nrepresentation fits the above JSON string.\nThe deserializer seems to be unaware of this.\n\nI would be great if you could fix this for the upcoming release.\n\n```\n\nOriginal issue reported on code.google.com by `nit...@googlemail.com` on 12 Dec 2008 at 1:09\n", "url": "https://github.com/google/gson/issues/81", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:14", "closed": "2015-03-19 18:23:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Is that gson not support Chinese charaterset?", "body": "```\nWhen serializing Chinese charater with gson like: gson.toJson('\u6d4b\u8bd5'); it \nwill return something like \"\\u6d4b\\u8bd5\".  Is that gson not support non-\nEnglish charaterset?I'm using the gson-1.2.3. Thanks!\n\n\n\n```\n\nOriginal issue reported on code.google.com by `roger.y2...@gmail.com` on 10 Dec 2008 at 9:12\n", "url": "https://github.com/google/gson/issues/80", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:13", "closed": "2015-03-19 18:23:13", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Custom Deserializer is not used when calling directly gson.fromJson(jsonString, MyCustomClass.class)", "body": "```\nWhat steps will reproduce the problem?\n1. Define a MyCustomClass\n2. Build a gson instance, with a MyCustomClassDeserializer bound to it.\n3. Try to deserialize directly a string to MyCustomClass (i.e. the\nMyCustomClass instance is not a member of an object to deserialize, it IS\nthe object to deserialize)\n\nWhat is the expected output? What do you see instead?\nThe JVM should pass through MyCustomClassDeserializer.deserialize, instead\nit searches for a no arg constructor in MyCustomClass\n\n\nWhat version of the product are you using? On what operating system?\nv1.2.3 on WinXP SP3.\n\nPlease provide any additional information below.\nN/A\n\n```\n\nOriginal issue reported on code.google.com by `nicolas....@gmail.com` on 9 Dec 2008 at 3:53\n", "url": "https://github.com/google/gson/issues/78", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:11", "closed": "2015-03-19 18:23:11", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Serializing a null value in a Map throws a NPE", "body": "```\nIf a Map contains a \"null\" as one of its entry values, the default Map\nserialization throws an NPE.\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 29 Nov 2008 at 1:03\n", "url": "https://github.com/google/gson/issues/77", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:11", "closed": "2015-03-19 18:23:11", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "A field with a SerializedName in common with another field isn't included in serialized output", "body": "```\nWhat steps will reproduce the problem?\n\n1.\n\npublic class Test {\n @SerializedName(\"a\")\n public Integer b;\n public Double a;\n}\n\n2.\n\nTest t = new Test();\nt.b = 3;\ngson.toJson(t)\n\nWhat is the expected output? What do you see instead?\n\nExpect: {\"a\":3}\nActual: {}\n\nWhat version of the product are you using? On what operating system?\n\nThis works as expected in v1.2.2, but broke in one of the more recent builds.\n\n\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 26 Nov 2008 at 9:06\n", "url": "https://github.com/google/gson/issues/76", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:10", "closed": "2015-03-19 18:23:10", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Exposing examples", "body": "```\nCould you please describe how to expose the following code\n@Expose\nprivate ObjectInterface obj1;\n\n@Expose\nprivate Set<ObjectInterface> objSet = new HashSet<ObjectInterface>();\n\nIt seems it doesn't work.\n\nThank you.\n```\n\nOriginal issue reported on code.google.com by `ant%biz...@gtempaccount.com` on 25 Nov 2008 at 10:18\n", "url": "https://github.com/google/gson/issues/75", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:04", "closed": "2015-03-19 18:23:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Backwards compatibility problem found - Serializing Collection<Object>", "body": "```\nGson use to be able to serialize a field and/or object of type\nCollection<Object>, but now fails to serialize properly.\n\nSupport in 1.2.2\nFails in 1.2.3\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 20 Nov 2008 at 1:22\n", "url": "https://github.com/google/gson/issues/73", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:03", "closed": "2015-03-19 18:23:03", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "BigDecimal loses precision on round trip", "body": "```\n* What steps will reproduce the problem?\n\nTry executing the following:\n\n    BigDecimal x = new BigDecimal(\"1.00\");\n    String json = new Gson().toJson(x);\n    BigDecimal y = new Gson().fromJson(json, BigDecimal.class);\n    assertEquals(x, y);\n\n\n* What is the expected output? What do you see instead?\n\nx and y should be equal, but they aren't.  The assertion fails with:\n\n    expected: <1.00> but was: <1.0>\n\nPrecision is lost: x.precision() is 3, but y.precision() is 2.  This\nseems to be happening because the JsonParser.JsonNumber() method is\ntrying to optimize the number representation -- see the clause beginning\nwith \"if (exppart != null)\".  Because there is no exponent, it chooses\na Double, which loses the information on how many digits of precision\nare present.\n\nThis problem doesn't happen for numbers with exponents.  Parsing \"1.00\"\nyields a BigDecimal with precision 2, but parsing \"1.00E+5\" does produce\na BigDecimal with precision 3.\n\nSince BigDecimal is carefully designed to preserve information in\nits string representation (see the Javadoc for BigDecimal.toString()),\nand its equals() method considers \"1.0\" and \"1.00\" to be unequal,\nit would be nice to carry this through.  I believe this would just be\na matter of always using BigDecimal as the representation in the parser,\nregardless of whether \"exppart\" or \"fracpart\" are present, and converting\nto another number type only when you know what kind of number is being\nrequested.\n\n\n* What version of the product are you using? On what operating system?\n\nI'm using Gson 1.2.3 on Linux.\n```\n\nOriginal issue reported on code.google.com by `p...@zesty.ca` on 18 Nov 2008 at 12:51\n", "url": "https://github.com/google/gson/issues/72", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:02", "closed": "2015-03-19 18:23:02", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Parser fails on \"1E+5\"", "body": "```\n* What steps will reproduce the problem?\n\nTry executing either of these lines:\n    Double x = new Gson().fromJson(\"1E+5\", Double.class);\n    BigDecimal y = new Gson().fromJson(\"1E+5\", BigDecimal.class);\n\n\n* What is the expected output? What do you see instead?\n\nThe expected result is a Double or BigDecimal containing the value 100000.\nThe actual behaviour is a NumberFormatException thrown from within the\njava.math.BigDecimal constructor.  The key line is in the method\nJsonParser.JsonNumber():\n\n    n = new java.math.BigDecimal(intpart + fracpart + exppart);\n\nAt this point, fracpart is null because there is no decimal point in\n\"1E+5\", and so the string addition produces \"1nullE+5\".  Is this a bug\nin JsonParser.jj or perhaps even in the parser generator?\n\n\n* What version of the product are you using? On what operating system?\n\nI'm using Gson release 1.2.3 on Linux.\n```\n\nOriginal issue reported on code.google.com by `p...@zesty.ca` on 18 Nov 2008 at 12:39\n", "url": "https://github.com/google/gson/issues/71", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:23:01", "closed": "2015-03-19 18:23:01", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "JsonArray of primative to Collection of non-Primative or Strings fails", "body": "```\nI have this model:\npublic class Foo {\n  private String part1;\n  private String part2;\n\n  public Foo(String string) {\n    String[] parts = strings.split[\"|\"];\n    part1 = parts[0];\n    part2 = parts[1];\n  }\n}\n\nI have this deserializer:\npublic class FooAdapter implements JsonDeserializer<Foo>,\nInstanceCreator<Foo> {\n\n    //Fill up Eden with objects that will be thrown away\n    public Foo createInstance(Type type) {\n        return new Foo(\"unknown|thing\");\n    }\n\n    public Foodeserialize(JsonElement src, Type type,\nJsonDeserializationContext context)\n            throws JsonParseException {\n        return new Foo(src.getAsString());\n    }\n}\n\nI think have this line that fails:\nnew GsonBuilder().registerTypeAdapter(Foo.class, new FooAdapter())\n                .create().fromJson(\"[\\\"Jacob|Tomaw\\\"]\", new\nTypeToken<Set<Foo>>() {}.getType());\n\ncom.google.gson.JsonParseException: Can not adapt type class\njava.lang.String to class Foo\n```\n\nOriginal issue reported on code.google.com by `jacob.to...@gmail.com` on 14 Nov 2008 at 5:44\n", "url": "https://github.com/google/gson/issues/70", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:59", "closed": "2015-03-19 18:22:59", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "createInstance before deserialize", "body": "```\nHi, only a cuestion:\n\nWhy call createInstance before deserialize?\nIn deserialize I'm need make new MyObj but before in createInstance already\ni'am make new MyObj.\n\nThanks\n```\n\nOriginal issue reported on code.google.com by `inad...@gmail.com` on 12 Nov 2008 at 11:54\n", "url": "https://github.com/google/gson/issues/69", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:58", "closed": "2015-03-19 18:22:58", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson should support null values for primitive wrapper types", "body": "```\nSee thread\nhttp://groups.google.com/group/google-gson/browse_thread/thread/8418964267ace8f1\n```\n\nOriginal issue reported on code.google.com by `inder123` on 30 Oct 2008 at 1:31\n", "url": "https://github.com/google/gson/issues/68", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:56", "closed": "2015-03-19 18:22:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Can't read own output", "body": "```\nWhat steps will reproduce the problem?\n\nAttempting to deserialize this string to a bean:\n\n{\"body\":{\"username\":\"some\ndude\",\"fullname\":\"w00t\",\"description\":\"testing\",\"loginCount\":0,\"failedLogins\":0,\n\"passwordLastChanged\":\"Oct\n12, 2008 2:44:01\nPM\",\"whoChanged\":\"mike\",\"email\":\"asdf@asdf.com\",\"userId\":82,\"whoCreated\":\"admin\"\n,\"external\":true,\"expiredPassword\":false,\"groups\":[],\"permissions\":[{\"permission\nId\":62,\"level\":7,\"privilege\":{\"privilegeId\":61,\"name\":\"Login\",\"description\":\"Per\nmission\nto login to\nCompass\",\"applicationId\":81}}],\"attributes\":{\"entities\":\"\\u0000\\u003d{\\\"entityId\n\\\":62452,\\\"name\\\":\\\"some\ncompany, LLC\\\",\\\"type\\\":\\\"Nam\\\"}\"}},\"version\":1,\"statusCode\":0}\n\n\nWhat is the expected output? What do you see instead?\n\nCaused by: com.google.gson.ParseException: Encountered \"e\" at line 1,\ncolumn 476.\nWas expecting one of:\n    \"}\" ...\n    \",\" ...\n\n    at com.google.gson.JsonParser.generateParseException(JsonParser.java:435)\n    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:374)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:48)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:134)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:78)\n    at com.google.gson.JsonParser.Members(JsonParser.java:61)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.Members(JsonParser.java:65)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:134)\n    at com.google.gson.JsonParser.Pair(JsonParser.java:78)\n    at com.google.gson.JsonParser.Members(JsonParser.java:61)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:42)\n    at com.google.gson.JsonParser.parse(JsonParser.java:11)\n    at com.google.gson.Gson.fromJson(Gson.java:376)\n\nWhat version of the product are you using? On what operating system?\n\n1.2.2, java6\n\nPlease provide any additional information below.\n\nIt seems to have trouble with this member:\n{\"entities\":\"\\u0000\\u003d{\\\"entityId\\\":62452,\\\"name\\\":\\\"some company,\nLLC\\\",\\\"type\\\":\\\"Nam\\\"}\"}\n\nIt's a string list written to a String by DataOutputStream and converted to\njson with gson.toJson(Object).\n\nThanks for the great product. I've been really happy with it so far.\n\n```\n\nOriginal issue reported on code.google.com by `mrjohns...@gmail.com` on 25 Oct 2008 at 5:45\n", "url": "https://github.com/google/gson/issues/67", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:55", "closed": "2015-03-19 18:22:56", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Deserializer too strict with string escapes???", "body": "```\nThe deserializer seems to be too strict (maybe not even compliant?) in\nhandling escapes in strings.\n\nIn particular, JSON feeds such as Twitter escape slashes in strings, and\ngson complains of a syntax error on encountering them.\n\nAlthough in theory only double-quotes, reverse solidusses (sp?), and\ncontrol characters need be escaped, the \"official\" JSON syntax at\nhttp://www.json.org/ explicitly lists the slash as being acceptable when\nescaped.\n\nYa, maybe JSON generators should not be escaping slashes. But in line with\na paraphrase of the Postel Principle (\"Generate strictly, accept\nleniently\"). maybe gson should accept any character when escaped?\n\nJust a thought, I could be wrong. Comments welcome and expected.\n\nJim Renkel\n```\n\nOriginal issue reported on code.google.com by `james.re...@gmail.com` on 22 Oct 2008 at 4:02\n", "url": "https://github.com/google/gson/issues/66", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:55", "closed": "2015-03-19 18:22:55", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "New JsonElements not equal", "body": "```\nWhat steps will reproduce the problem?\n1. assertEquals(new JsonElement(), new JsonElement())\n2. assertEquals(new JsonElement().hashCode(), new JsonElement().hashCode())\n3. assertTrue(new JsonElement().equals(new JsonElement()))\n\nWhat is the expected output? What do you see instead?\nAll these shoul dbe true, but they are false.\n\nWhat version of the product are you using? On what operating system?\n1.2.2\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `jacob.to...@gmail.com` on 20 Oct 2008 at 7:37\n", "url": "https://github.com/google/gson/issues/64", "user": "GoogleCodeExporter", "labels": ["Milestone-Release1.7", "Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:51", "closed": "2015-03-19 18:22:51", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson is not threadsafe", "body": "```\nGson throws ConcurrentModificationException when used concurrently. \nSee the discussion in http://groups.google.com/group/google-\ngson/browse_thread/thread/563bb51ee2495081\n\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 20 Oct 2008 at 6:28\n", "url": "https://github.com/google/gson/issues/63", "user": "GoogleCodeExporter", "labels": ["Priority-High", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:50", "closed": "2015-03-19 18:22:50", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Map serialization fails with non-Primitive type (or String) keys", "body": "```\nThe key gets serialized using the \"toString()\" method instead of actually\nserializing the key object.\n\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 17 Oct 2008 at 4:01\n", "url": "https://github.com/google/gson/issues/60", "user": "GoogleCodeExporter", "labels": ["Priority-High", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:46", "closed": "2015-03-19 18:22:46", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "java.lang.IllegalStateException when parsing String as double", "body": "```\nWhat steps will reproduce the problem?\n1. Define a class with a double type called \"test\"\n2. Construct some JSON passing a String in place of the double: {\"test\": \"-1\"}\n3. Parse the JSON into your class\n\nWhat is the expected output? What do you see instead?\n\nExpected: JSONException\n\nActual:\nException in thread \"Timer-0\" java.lang.IllegalStateException: How can the type \nvariable not be \npresent in the class declaration!\n    at com.google.gson.TypeInfoFactory.getIndex(TypeInfoFactory.java:121)\n    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:92)\n    at com.google.gson.TypeInfoFactory.extractRealTypes(TypeInfoFactory.java:110)\n    at com.google.gson.TypeInfoFactory.getActualType(TypeInfoFactory.java:65)\n    at com.google.gson.TypeInfoFactory.getTypeInfoForField(TypeInfoFactory.java:54)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:166)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at com.google.gson.JsonDeserializationVisitor.visitChild(JsonDeserializationVisitor.java:131)\n    at \ncom.google.gson.JsonDeserializationVisitor.visitChildAsObject(JsonDeserializatio\nnVisitor.java:93)\n    at \ncom.google.gson.JsonObjectDeserializationVisitor.visitObjectField(JsonObjectDese\nrializationVisit\nor.java:75)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:179)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:151)\n    at \ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextD\nefault.java:75)\n    at \ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefaul\nt.java:47)\n    at com.google.gson.Gson.fromJson(Gson.java:378)\n    at com.google.gson.Gson.fromJson(Gson.java:326)\n    at com.google.gson.Gson.fromJson(Gson.java:302)\n\nWhat version of the product are you using? On what operating system?\n\nGSON 1.2 on OSX\n\nPlease provide any additional information below.\n\n\n\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 15 Oct 2008 at 6:14\n", "url": "https://github.com/google/gson/issues/59", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:45", "closed": "2015-03-19 18:22:45", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson 1.2.1 incorrectly used subclass type for serialization/deserialization for fields of base class type ", "body": "```\nAs stated\n```\n\nOriginal issue reported on code.google.com by `inder123` on 14 Oct 2008 at 6:53\n", "url": "https://github.com/google/gson/issues/58", "user": "GoogleCodeExporter", "labels": ["Priority-High", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:44", "closed": "2015-03-19 18:22:44", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson does not serialize null fields for strings, arrays and collection types even when serializeNulls is set", "body": "```\nSee bug report at\n\nhttp://groups.google.com/group/google-gson/browse_thread/thread/1f7cc3301ca6e3e7\n```\n\nOriginal issue reported on code.google.com by `inder123` on 10 Oct 2008 at 10:32\n", "url": "https://github.com/google/gson/issues/56", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:39", "closed": "2015-03-19 18:22:39", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson can not handle JSON that uses single quote for field name/values", "body": "```\nr254 contains a test that illustrates this problem.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 10 Oct 2008 at 2:33\n", "url": "https://github.com/google/gson/issues/55", "user": "GoogleCodeExporter", "labels": ["Priority-High", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:38", "closed": "2015-03-19 18:22:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Serialization of Object fields ignores their types", "body": "```\nIf type of a class field is Object, then GSON serializes it as {} instead\nof the JSON for the actual object. See discussion at: \n\nhttp://groups.google.com/group/google-gson/browse_thread/thread/9241110c81f306b8\n```\n\nOriginal issue reported on code.google.com by `inder123` on 9 Oct 2008 at 5:11\n", "url": "https://github.com/google/gson/issues/54", "user": "GoogleCodeExporter", "labels": ["Priority-High", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:38", "closed": "2015-03-19 18:22:38", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson does not handle default deserialization of dates correctly", "body": "```\nAs pointed out in the thread, \nhttp://groups.google.com/group/google-gson/browse_thread/thread/af726d49986ac245\n\nGson doesn't handle deserialization of dates very well.\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 6 Oct 2008 at 10:00\n", "url": "https://github.com/google/gson/issues/53", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:37", "closed": "2015-03-19 18:22:37", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "fromJson fails with SubClasses", "body": "```\nWhen I use a code like:\n\npublic class GsonTester\n{\n...\n  class BagOfPrimitives {\n    private int value1 = 1;\n    private String value2 = \"abc\";\n    private transient int value3 = 3;\n  }\n...\n  public String getAObject()\n  {\n    BagOfPrimitives obj = new BagOfPrimitives();\n    Gson gson = new Gson();\n    String json = gson.toJson(obj); \n    BagOfPrimitives obj2 = gson.fromJson(json, BagOfPrimitives.class);  \n    return json;\n  }\n...\n}\n\nI can not use the standard \"fromJson\" method. Because the no-arg\nconstructor is not recognized.\n\n```\n\nOriginal issue reported on code.google.com by `mmuelle...@googlemail.com` on 30 Sep 2008 at 3:59\n", "url": "https://github.com/google/gson/issues/51", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:34", "closed": "2015-03-19 18:22:35", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "toJson inserts extraneous comma in Collection elements with pretty-printing turned on", "body": "```\nWhat steps will reproduce the problem?\n1. Compile and run the attached test case\n\nWhat is the expected output? What do you see instead?\n\nExpected:\n\nxxx{\"x\":\"hello\",\"y\":\"world\"}xxx\nxxx[{\"x\":\"hello\",\"y\":\"world\"}]xxx\nxxx{\"x\":\"hello\",\"y\":\"world\"}\nxxx\nxxx[{\"x\":\"hello\",\"y\":\"world\"}]\nxxx\n\nActual:\n\nxxx{\"x\":\"hello\",\"y\":\"world\"}xxx\nxxx[{\"x\":\"hello\",\"y\":\"world\"}]xxx\nxxx{\"x\":\"hello\",\"y\":\"world\"}\nxxx\nxxx[{,\"x\":\"hello\",\"y\":\"world\"}]\nxxx\nException in thread \"main\" com.google.gson.JsonParseException: Failed\nparsing JSON source: java.io.StringReader@860d49 to Json\n    at com.google.gson.Gson.fromJson(Gson.java:383)\n    at com.google.gson.Gson.fromJson(Gson.java:326)\n    at PPTest.main(PPTest.java:39)\nCaused by: com.google.gson.ParseException: Encountered \",\" at line 1, column 3.\nWas expecting one of:\n    \"\\\"\" ...\n    \"}\" ...\n\n    at com.google.gson.JsonParser.generateParseException(JsonParser.java:497)\n    at com.google.gson.JsonParser.jj_consume_token(JsonParser.java:436)\n    at com.google.gson.JsonParser.JsonObject(JsonParser.java:57)\n    at com.google.gson.JsonParser.JsonValue(JsonParser.java:141)\n    at com.google.gson.JsonParser.Elements(JsonParser.java:117)\n    at com.google.gson.JsonParser.JsonArray(JsonParser.java:103)\n    at com.google.gson.JsonParser.parse(JsonParser.java:25)\n    at com.google.gson.Gson.fromJson(Gson.java:375)\n    ... 2 more\n\n\nWhat version of the product are you using? On what operating system?\n\nGson 1.2 with Sun Java 1.6.0_07 (Ubuntu package sun-java6-jdk=6-07-3ubuntu2\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `christop...@gmail.com` on 28 Sep 2008 at 9:00\n\nAttachments:\n- [PPTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-50/comment-0/PPTest.java)\n", "url": "https://github.com/google/gson/issues/50", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:33", "closed": "2015-03-19 18:22:34", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Pretty Print generates invalid JSON", "body": "```\nVersion: 1.2\n\nThe following code returns an invalid JSON string:\n\n-----\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\n\npublic class App {\n    public static void main(String[] args) {\n        Node root = new Node(\"root\");\n        root.createChild(\"Pete\");\n\n        Gson gson = new GsonBuilder()\n                .setPrettyPrinting()\n                .create();\n\n        System.out.println(gson.toJson(root));\n    }\n}\n\nclass Node {\n    private final String name;\n    private final List<Node> children = new ArrayList<Node>();\n\n    public Node(String name) {\n        this.name = name;\n    }\n\n    public Node createChild(String childName) {\n        Node child = new Node(childName);\n        children.add(child);\n        return child;\n    }\n}\n```\n\nOriginal issue reported on code.google.com by `b.richt...@gmail.com` on 27 Sep 2008 at 5:54\n", "url": "https://github.com/google/gson/issues/49", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:33", "closed": "2015-03-19 18:22:33", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "StackOverflowError for big String values (JSON to Java)", "body": "```\nimport com.google.gson.Gson;\npublic class TestGson {\n\n  public static void main(String[] args) {\n    String str = getJsonString(Integer.parseInt(args[0]));\n    GString gString = new Gson().fromJson(str, GString.class);\n  }\n\n  public static String getJsonString(int size) {\n    StringBuilder builder = new StringBuilder();\n    builder.append(\"{\\\"value\\\":\\\"\");\n    for (int i = 0; i <= size; i++) {\n      builder.append(\"a\");\n    }\n    builder.append(\"\\\"}\");\n    return builder.toString();\n  }\n\n}\n\npublic class GString {\n\n  private String value = null;\n\n  public String getValue() {\n    return value;\n  }\n\n}\n\nThis will always end in an StackOverflowError for big Strings (e.g. 6112) \nat line 303 in JsonParser.java.\n```\n\nOriginal issue reported on code.google.com by `dominik....@gmail.com` on 22 Sep 2008 at 12:33\n", "url": "https://github.com/google/gson/issues/47", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:30", "closed": "2015-03-19 18:22:30", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Add toString() to Gson", "body": "```\nGson should provide a convenient toString() that displays the type-handlers \nthat have been registered alongwith any other configuration settings.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 15 Sep 2008 at 3:54\n", "url": "https://github.com/google/gson/issues/46", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:29", "closed": "2015-03-19 18:22:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Serializing/Deserializing simple maps should be better supported", "body": "```\nAttempting to simply serialize a map results in fairly useless output:\n\n// dead simple map\nMap<String, Object> m = new ArrayOrderedMap<String, Object>();\nm.put(\"id\", 123);\nm.put(\"thing\", \"AZ\");\n\n// serialize (annoyingly requires the typetoken thing)\nString encoded = gson.toJson(data, new TypeToken<Map<String, Object>>()\n{}.getType());\n\nencoded = {\"id\":{},\"thing\":{}}\n\nIt should have been:\nencoded = {\"id\":123,\"thing\":\"AZ\"}\n\nThis should really be able to handle the simple example of a map of\nprimitive/simple objects much better. The same type of thing happens when\nattempting to read back in the data.\n\nWith a more realistic example it is even worse because another map placed\ninside the first map results in an exception like so:\ncom.google.gson.JsonParseException: The JsonSerializer\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter@b27bb5 failed to\nserialized object {name=aaron, date=Mon Sep 15 11:58:33 BST 2008, num=456,\narray=[Ljava.lang.String;@fe3238} given the type class java.lang.Object\n    at\ncom.google.gson.JsonSerializerExceptionWrapper.serialize(JsonSerializerException\nWrapper.java:61)\n    at\ncom.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializati\nonVisitor.java:177)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:144)\n    at\ncom.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationConte\nxtDefault.java:47)\n    at\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters\n.java:301)\n    at\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters\n.java:293)\n    at\ncom.google.gson.JsonSerializerExceptionWrapper.serialize(JsonSerializerException\nWrapper.java:48)\n    at\ncom.google.gson.JsonSerializationVisitor.visitUsingCustomHandler(JsonSerializati\nonVisitor.java:177)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:144)\n    at\ncom.google.gson.JsonSerializationContextDefault.serialize(JsonSerializationConte\nxtDefault.java:47)\n    at com.google.gson.Gson.toJson(Gson.java:272)\n    at com.google.gson.Gson.toJson(Gson.java:228)\n    at\norg.sakaiproject.entitybroker.impl.EntityEncodingManager.encodeData(EntityEncodi\nngManager.java:586)\n    at\norg.sakaiproject.entitybroker.impl.EntityEncodingManagerTest.testEncode(EntityEn\ncodingManagerTest.java:243)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.jav\na:25)\n    at java.lang.reflect.Method.invoke(Method.java:585)\n    at junit.framework.TestCase.runTest(TestCase.java:154)\n    at junit.framework.TestCase.runBare(TestCase.java:127)\n    at junit.framework.TestResult$1.protect(TestResult.java:106)\n    at junit.framework.TestResult.runProtected(TestResult.java:124)\n    at junit.framework.TestResult.run(TestResult.java:109)\n    at junit.framework.TestCase.run(TestCase.java:118)\n    at junit.framework.TestSuite.runTest(TestSuite.java:208)\n    at junit.framework.TestSuite.run(TestSuite.java:203)\n    at\norg.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestR\neference.java:130)\n    at\norg.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\n.java:460)\n    at\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner\n.java:673)\n    at\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java\n:386)\n    at\norg.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.jav\na:196)\nCaused by: java.lang.IllegalArgumentException: Map objects need to be\nparameterized unless you use a custom serializer. Use the\ncom.google.gson.reflect.TypeToken to extract the ParameterizedType.\n    at com.google.gson.TypeInfoMap.<init>(TypeInfoMap.java:34)\n    at\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters\n.java:298)\n    at\ncom.google.gson.DefaultTypeAdapters$MapTypeAdapter.serialize(DefaultTypeAdapters\n.java:293)\n    at\ncom.google.gson.JsonSerializerExceptionWrapper.serialize(JsonSerializerException\nWrapper.java:48)\n    ... 31 more\n\n\n\n```\n\nOriginal issue reported on code.google.com by `azeckoski` on 15 Sep 2008 at 11:00\n", "url": "https://github.com/google/gson/issues/45", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:26", "closed": "2015-03-19 18:22:26", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Custom Deserializers fail if the deserializer context is used on the source JsonElement", "body": "```\nGson gets caught in infinite recursion if a client attempts to convert a\nJSON string into a Java object of type Foo with the following\nJsonDeserializer registered:\n\npublic static class FooTypeAdapter implements JsonDeserializer<Foo> {\n  public Foo deserialize(JsonElement json, Type typeOfT,\nJsonDeserializationContext context)\n      throws JsonParseException {\n    Foo fooObj = context.deserialize(json, typeOfT);\n    fooObj.setExtraField(\"ThisIsExtra\");\n    return fooObj;\n  }\n}\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:58\n- Merged into: #43\n", "url": "https://github.com/google/gson/issues/44", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:24", "closed": "2015-03-19 18:22:24", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Custom Serializers fail if the serializer context is used on the source", "body": "```\nGson will fail to serialize a class \"Foo\" if you create a custom serializer\nas follows:\n\npublic static class FooTypeAdapter implements JsonSerializer<Foo> {\n  public JsonElement serialize(Foo src, Type typeOfSrc,\nJsonSerializationContext context) {\n    return context.serialize(src, typeOfSrc);\n  }\n}\n\nBasically, it detects this as a circular reference.  Instead, we should\nallow this kind of custom serializer because a client may want to perform\nthe default serialization of an object and then add new fields into the\nJsonElement tree.\n\nFor example:\npublic static class FooTypeAdapter implements JsonSerializer<Foo> {\n  public JsonElement serialize(Foo src, Type typeOfSrc,\nJsonSerializationContext context) {\n    JsonElement element = context.serialize(src, typeOfSrc);\n    JsonObject jsonObject = element.getAsJsonObject();\n    jsonObject.add(\"someNewProperty\", new JsonPrimitive(1L));\n    return jsonObject;\n  }\n}\n\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 14 Sep 2008 at 7:53\n", "url": "https://github.com/google/gson/issues/43", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:20", "closed": "2015-03-19 18:22:21", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Fails to serialize/deserialize a class where a super-class has a type parameter", "body": "```\nUnfortunately, shortly after the Gson 1.2 release, I found a bug in the\nTypeVariable support.  Basically, the following class can not be serialized\nor deserialized using Gson:\n\npublic class Foo<T> {\n  private final T someField;\n\n  public Foo(T value) {\n    this.someField = value;\n  }\n\n  public boolean equals(Object o) {\n    if (!(o instanceof Foo)) {\n      return false;\n    } else {\n        return someField.equals(((Foo)o).someField);\n    }\n  }\n}\n\npublic class Bar extends Foo<Integer> {\n  public Bar(Integer i) {\n    super(i);\n  }\n}\n\nGson gson = new Gson();\nBar bar1 = new Bar(1);\nString json = gson.toJson(bar1);   // Fails\nBar bar2 = gson.fromJson(\"{\\\"someField\\\":1\", Bar.class);    // Fails\n\nassertEquals(bar1, bar2);\n\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 29 Aug 2008 at 11:53\n- Merged into: #168\n", "url": "https://github.com/google/gson/issues/40", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:13", "closed": "2015-03-19 18:22:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Gson should handle top-level \"null\"s for deserialization", "body": "```\nGson fails with a \"parse\" exception if the JSON string \"null\" is passed in.\n This should just set the expected type to \"null\".\n\nSee NullObjectAndFieldTest#testTopLevelNullDeserialization() test.\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 28 Aug 2008 at 7:12\n", "url": "https://github.com/google/gson/issues/38", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:12", "closed": "2015-03-19 18:22:12", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "http://groups.google.com/group/google-gson/t/677d56e9976d7761", "body": "```\nHi, guys!\n\nI was thinking of the problem and have concluded, that the solution of the\nissue (see link\nhttp://groups.google.com/group/google-gson/t/677d56e9976d7761):\nJsonObjectDeserializationVisitor should check if there is custom\ndeserializer registered for specified type and not create instance by.\n\n  Something like this:\n\n  @SuppressWarnings(\"unchecked\")\n  JsonObjectDeserializationVisitor(JsonElement json, Type type,\n      ObjectNavigatorFactory factory, ObjectConstructor objectConstructor,\n      TypeAdapter typeAdapter,\nParameterizedTypeHandlerMap<JsonDeserializer<?>> deserializers,\n      JsonDeserializationContext context) {\n    super(json, factory, objectConstructor, typeAdapter, deserializers,\ncontext);\n    JsonDeserializer deserialezer;\n    if ((deserialezer = deserializers.getHandlerFor(type)) != null) {\n      this.target = deserialezer.deserialize(json, type, context);\n    } else {\n      this.target = (T) objectConstructor.construct(type);\n    }\n  }\n\n\n```\n\nOriginal issue reported on code.google.com by `tazija@gmail.com` on 27 Aug 2008 at 7:57\n", "url": "https://github.com/google/gson/issues/37", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:10", "closed": "2015-03-19 18:22:10", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Exception Handling for Custom Serializers", "body": "```\nWe should add some exception handling around the \"custom\" type adapters to\nensure that all exceptions that are propagated out from the \"toJson\" and\n\"fromJson\" are JsonParseException.\n```\n\nOriginal issue reported on code.google.com by `joel.leitch@gmail.com` on 22 Aug 2008 at 6:09\n", "url": "https://github.com/google/gson/issues/36", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:08", "closed": "2015-03-19 18:22:08", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson should support Parameterized types with variable types as parameters", "body": "```\nIf a field is of wild-card type, Gson should be able to handle it. \n\nclass Foo<? extends Number> {\n}\n\nClass Bar {\n  Foo<Integer> foo;\n} \n\nshould serialize and deserialize correctly.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 21 Aug 2008 at 7:50\n", "url": "https://github.com/google/gson/issues/35", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:06", "closed": "2015-03-19 18:22:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Add support for java.math.BigDecimal", "body": "```\nJsonPrimitive provides support to get values as double through\ngetAsDouble(). However, to support higher precision (for example, while\ndealing with money objects), it should also provide support for BigDecimal. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 18 Aug 2008 at 8:47\n", "url": "https://github.com/google/gson/issues/34", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:05", "closed": "2015-03-19 18:22:05", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Read and write log files where each entry is in JSON format", "body": "```\nPerhaps Gson would be useful for reading and writing logs where each entry\nis in JSON format?\n\nI haven't looked closely, but it appears that Gson won't emit a newline\nwhen serializing to a file.  If this is something that Gson could\nguarantee, then we could use newlines as record separators and make each\nlog entry a JSON object, and also use GSon to iterate over a log file and\ndeserialize each line into an object.\n\n```\n\nOriginal issue reported on code.google.com by `bslesinsky` on 15 Aug 2008 at 3:39\n", "url": "https://github.com/google/gson/issues/32", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:22:02", "closed": "2015-03-19 18:22:02", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Map serialization fails", "body": "```\nWhat steps will reproduce the problem?\n1. new Gson().toJson(new HashMap<String, String>());\n\nWhat is the expected output?\n{}\n\nWhat do you see instead?\nFails with the attached exception.\n\nWhat version of the product are you using? On what operating system?\ngson 1.1.1\nJDK 1.5, JDK 1.6\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `cedric.v...@gmail.com` on 30 Jul 2008 at 9:57\n\nAttachments:\n- [ParameterizedTypeClassCastException.txt](https://storage.googleapis.com/google-code-attachments/google-gson/issue-26/comment-0/ParameterizedTypeClassCastException.txt)\n", "url": "https://github.com/google/gson/issues/26", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:54", "closed": "2015-03-19 18:21:54", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "java.lang.IllegalArgumentException when giving a double in place of a String", "body": "```\nWhat steps will reproduce the problem?\n\nTry to parse {\"version\": 1.0} into class A { String version; }\n\nWhat is the expected output? What do you see instead?\n\nI expect a JsonParsingException, but instead get:\n\njava.lang.IllegalArgumentException: Can not adapt type class java.lang.Double \nto class \njava.lang.String\n    at com.google.gson.PrimitiveTypeAdapter.adaptType(PrimitiveTypeAdapter.java:64)\n    at com.google.gson.TypeAdapterNotRequired.adaptType(TypeAdapterNotRequired.java:51)\n    at \ncom.google.gson.JsonObjectDeserializationVisitor.visitPrimitiveField(JsonObjectD\neserializationVis\nitor.java:131)\n    at com.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:177)\n    at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:152)\n    at \ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextD\nefault.java:75)\n    at \ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefaul\nt.java:47)\n    at com.google.gson.Gson.fromJson(Gson.java:326)\n    at com.google.gson.Gson.fromJson(Gson.java:299)\n\nWhat version of the product are you using? On what operating system?\nv1_1 on Linux\n\nPlease provide any additional information below.\n\n\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 29 Jul 2008 at 10:21\n", "url": "https://github.com/google/gson/issues/25", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:53", "closed": "2015-03-19 18:21:53", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson fails to parse strings with chinese characters", "body": "```\nGson fails to parse: \n\n{\"name\": \"\u597d\", \"code\": \"aa\", \"remark\": \"aa\"}\n\ngson.fromJson(jsonString, TbDepartment.class);\n\n\u7684\u65f6\u5019\u51fa\u73b0\u5f02\u5e38 Failed parsing JSON source: {\"name\": \"\u597d\", \"code\": \"aa\",\n\"remark\": \"aa\"} to Json \n\nSee:\nhttp://groups.google.com/group/google-gson/browse_thread/thread/588a87b9ef1fc479\n```\n\nOriginal issue reported on code.google.com by `inder123` on 29 Jul 2008 at 12:28\n", "url": "https://github.com/google/gson/issues/23", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:51", "closed": "2015-03-19 18:21:51", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "GsonBuilder.prettyPrint causes extra element when serializer returns JsonArray", "body": "```\nWhat steps will reproduce the problem?\n1. Run the attached unit test\n\nWhat is the expected output? What do you see instead?\n was expecting \"[1,2,3,4,5]\" and got \"[,1,2,3,4,5]\"\n\nWhat version of the product are you using? On what operating system?\n GSON 1.1.1, Windows XP, Java 1.6.0_04\n\nPlease provide any additional information below.\n If I don't call setPrettyPrint, the unit test passes.  (Sorry if this\nreport came in twice, Google barfed the first time I tried to submit it)\n\n```\n\nOriginal issue reported on code.google.com by `ericmu...@gmail.com` on 23 Jul 2008 at 8:30\n\nAttachments:\n- [GsonBuilderPrettyPrintArrayTest.java](https://storage.googleapis.com/google-code-attachments/google-gson/issue-22/comment-0/GsonBuilderPrettyPrintArrayTest.java)\n", "url": "https://github.com/google/gson/issues/22", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:49", "closed": "2015-03-19 18:21:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Gson should limit the allowed recursion depth", "body": "```\n(reported by Meder) While parsing untrusted JSON, or even during attempting\nto serialize classes, Gson should consider limiting the maximum allowed\ndepth for recursion. There should also be an option in GsonBuilder to set a\ndifferent value.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 Jul 2008 at 5:43\n", "url": "https://github.com/google/gson/issues/20", "user": "GoogleCodeExporter", "labels": ["Milestone-Undefined", "Priority-Low", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:46", "closed": "2015-03-19 18:21:46", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson should handle stack overflow and other errors happening from parsing untrusted JSON", "body": "```\n(reported by Meder):\n\n'print \"{\\\"a\\\":[],\\\"a\\\":\" x 2000'`\n`perl -e 'print \"{\\\"a\\\":[],\\\"\"; print \"X\" x 6000;'`\n\nto generate really large JSON and feed it to GSON. Gson brings down the JVM\nwith stack overflow error. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 Jul 2008 at 5:35\n", "url": "https://github.com/google/gson/issues/19", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:44", "closed": "2015-03-19 18:21:44", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson does not handle null values in arrays properly", "body": "```\n(reported by Ben Littman)\nThis:\n    System.out.println(gson.toJson(new String[]{\"foo\", \"bar\"}));\nresults in:\n[\"foo\", \"bar]\n\nBut should a null value be allowed, as in:\n    System.out.println(gson.toJson(new String[]{\"foo\", null,\"bar\"}));\nwhich results in:\njava.lang.NullPointerException\n        at\ncom.google.gson.JsonTreeNavigator.visitChild(JsonTreeNavigator.java:76)\n        at\ncom.google.gson.JsonTreeNavigator.navigate(JsonTreeNavigator.java:39)\n        at\ncom.google.gson.JsonCompactFormatter.format(JsonCompactFormatter.java:112)\n        at com.google.gson.Gson.toJson(Gson.java:270)\n        at com.google.gson.Gson.toJson(Gson.java:243)\n\nAlso, this:\n    String[] stringArray = gson.fromJson(\"[\\\"foo\\\", \\\"bar\\\"]\", String[].class);\nreturns the string array one would expect\n\nBut an serialized array with a null in it:\n    String[] stringArray = gson.fromJson(\"[\\\"foo\\\", null, \\\"bar\\\"]\",\nString[].class);\nresults in:\njava.lang.IllegalState\nException\n        at\ncom.google.gson.JsonArrayDeserializationVisitor.visitArray(JsonArrayDeserializat\nionVisi\ntor.java:73)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:136)\n        at\ncom.google.gson.JsonDeserializationContextDefault.fromJsonArray(JsonDeserializat\nionCont\nextDefault.java:63)\n        at\ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContex\ntDefault.java:45)\n        at com.google.gson.Gson.fromJson(Gson.java:319)\n        at com.google.gson.Gson.fromJson(Gson.java:292)\n```\n\nOriginal issue reported on code.google.com by `inder123` on 26 Jun 2008 at 7:38\n", "url": "https://github.com/google/gson/issues/18", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:44", "closed": "2015-03-19 18:21:44", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Can not parse null arrays", "body": "```\nWhat steps will reproduce the problem?\n1. JSON to parse: \n2. Java: class Test { Object[] my_array; }\n3. gson.fromJson(\"{\\\"my_array\\\": null}\", Test.class);\n\nWhat is the expected output? What do you see instead?\n\nExpected: A Test object with my_array initialized to null.\nActual: java.lang.NullPointerException\n        at\ncom.google.gson.JsonDeserializationVisitor.visitChildAsArray(JsonDeserialization\nVisitor.java:93)\n        at\ncom.google.gson.JsonObjectDeserializationVisitor.visitArrayField(JsonObjectDeser\nializationVisitor.java:114)\n        at\ncom.google.gson.ObjectNavigator.navigateClassFields(ObjectNavigator.java:172)\n        at com.google.gson.ObjectNavigator.accept(ObjectNavigator.java:152)\n        at\ncom.google.gson.JsonDeserializationContextDefault.fromJsonObject(JsonDeserializa\ntionContextDefault.java:75)\n        at\ncom.google.gson.JsonDeserializationContextDefault.deserialize(JsonDeserializatio\nnContextDefault.java:47)\n        at com.google.gson.Gson.fromJson(Gson.java:310)\n        at com.google.gson.Gson.fromJson(Gson.java:285)\n\nWhat version of the product are you using? On what operating system?\n\nv1_0 on Linux\n\n```\n\nOriginal issue reported on code.google.com by `ch...@gmail.com` on 2 Jun 2008 at 11:52\n", "url": "https://github.com/google/gson/issues/14", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:34", "closed": "2015-03-19 18:21:34", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Publish Gson jars in maven2 repository", "body": "```\nThe subject says it all. We should figure out how guice guys are doing it,\nand do the same. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 30 May 2008 at 10:00\n", "url": "https://github.com/google/gson/issues/13", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:32", "closed": "2015-03-19 18:21:32", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Edit User Guide to match 1.0 APIs", "body": "```\nAPI changed in the 1.0 release, and the guides are not yet updated to match\nthem. Also, publish the guides on the wiki for gson.\n```\n\nOriginal issue reported on code.google.com by `inder123` on 29 May 2008 at 4:10\n", "url": "https://github.com/google/gson/issues/12", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:31", "closed": "2015-03-19 18:21:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "publish javadocs on the web", "body": "```\nProbably best to check them in the svn alongwith setting properties to\nenable them to be viewed as HTML. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 29 May 2008 at 4:09\n", "url": "https://github.com/google/gson/issues/11", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:31", "closed": "2015-03-19 18:21:31", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Gson should provide an ability to restrict the namespace of classes used", "body": "```\nIt should be possible to restrict Gson to only java.*, javax.* and\ncom.google.checkout.api.model.* and nothing else. \n\nThis is probably a good security feature. We should look at Ant (or\neclipse) conventions for deciding how to define package mappings. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 22 May 2008 at 5:52\n", "url": "https://github.com/google/gson/issues/10", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:30", "closed": "2015-03-19 18:21:30", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Provide support to escape \" character", "body": "```\nif i have a property set to \"aaaa\\\"bbbb\" json loooks like \"aaaa\"bbbb\". The\noutput should be properly escaped. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 19 May 2008 at 6:19\n", "url": "https://github.com/google/gson/issues/8", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:28", "closed": "2015-03-19 18:21:28", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "JsonParser fails to parse decimal values correctly", "body": "```\n-122.08 is parsed as -122.0\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 8 May 2008 at 5:34\n", "url": "https://github.com/google/gson/issues/7", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:28", "closed": "2015-03-19 18:21:28", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Not serializing arrays of string", "body": "```\nWhat steps will reproduce the problem?\n\nTry to serialize and array of String\n\nWhat is the expected output? What do you see instead?\n\n[\"hello\", \"world\"]\n[{},{}]\n\nWhat version of the product are you using? On what operating system?\n\nCurrent.  Ubuntu ;)\n\nPlease provide any additional information below.\n\nit isn't serializing my array list of strings as it once was, I just get a\nlist of empty dicts of the same size.\n\nFor example the output of :\n\nimport com.google.gson.Gson;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class GsonExample {\n\n  public static void main(String args[]) {\n    List<String> vals = new ArrayList<String>();\n    vals.add(\"Hello\");\n    vals.add(\"World\");\n    Gson gson = new Gson();\n    System.out.println(gson.toJson(vals));\n    System.out.println(gson.toJson(vals, List.class));\n  }\n}\n\nIs :\n\n[{},{}]\n[{},{}]\n\nAt line 127 of JsonSerializationVisitor the fieldValue of my object is\n\"ade\" for instance and the fieldType is \"class java.lang.Object\"\n\nAt line 131, the childVisitor.getJsonElement() line always returns an empty\ndict {}\n\nRegards,\n\nCameron\n```\n\nOriginal issue reported on code.google.com by `camerong...@gmail.com` on 7 May 2008 at 6:21\n", "url": "https://github.com/google/gson/issues/6", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:27", "closed": "2015-03-19 18:21:27", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Provide a mode of operation to force explicit serialization and deserialization", "body": "```\nProvide a GsonBuilder setting that forces Gson to ignore all fields except\nthose marked with a specific annotation like \"@Expose\"\n\n```\n\nOriginal issue reported on code.google.com by `inder123` on 27 Apr 2008 at 2:34\n", "url": "https://github.com/google/gson/issues/4", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:24", "closed": "2015-03-19 18:21:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Provide support to escape HTML", "body": "```\nTo prevent against XSS attacks, Gson should provide a GsonBuilder option to\nautomatically escape and unescape HTML\n```\n\nOriginal issue reported on code.google.com by `inder123` on 25 Apr 2008 at 11:18\n", "url": "https://github.com/google/gson/issues/3", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:23", "closed": "2015-03-19 18:21:23", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Provide support for pretty printing", "body": "```\nGson should provide ability to print nicely indented Json. It should be\npossible to set print margin, default indentation, and so on. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 25 Apr 2008 at 9:10\n", "url": "https://github.com/google/gson/issues/2", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:22", "closed": "2015-03-19 18:21:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Provide default support for java.util.Map", "body": "```\nShould be able to convert the default representation of a Map. \nShould be able to deserialize {{\"a\":\"1\"},{\"b\":2\"}} as well as\n[{\"a\":\"1\"},{\"b\":2\"}] to a map. Consider using a concrete implementation\n(linked list) of Map that preserves the order of elements. \n```\n\nOriginal issue reported on code.google.com by `inder123` on 25 Apr 2008 at 7:16\n", "url": "https://github.com/google/gson/issues/1", "user": "GoogleCodeExporter", "labels": ["Priority-Medium", "Type-Defect", "auto-migrated"], "created": "2015-03-19 18:21:22", "closed": "2015-03-19 18:21:22", "commits": {}, "ttf": null, "commitsDetails": []}]}