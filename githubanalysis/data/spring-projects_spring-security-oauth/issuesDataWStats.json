{"projectName": "spring-projects/spring-security-oauth", "bugLabels": ["type: bug", "type: regression"], "captureTime": "Fri Jul  3 18:14:18 2020", "issues": [{"title": "JwkSetConverter should only accept public key use sig", "body": "Backport gh-1871", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1872", "user": "jgrandja", "labels": ["in: oauth2", "type: backport", "type: bug"], "created": "2020-05-28 13:04:03", "closed": "2020-05-28 13:08:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JwkSetConverter should only accept public key use sig", "body": "Re-opening this as an issue. I'm running into this, as well with tokens created from Microsoft Azure. Failing against spec is not correct behavior.\r\n\r\n_Originally posted by @sjoerd-michels in https://github.com/spring-projects/spring-security-oauth/pull/1348/files/b30dbe01e36082cc79d1e3e2e3e4cd896fef2d79_: \r\nThis should not have been closed: the implementation does not follow the spec, so this is a bug.\r\nNow, for example, Spring security does not work with the following JWK key set that is perfectly valid but that does not specify a use attribute:\r\n`{ \"keys\": [\r\n    { \"kty\": \"RSA\",\r\n      \"x5t#S256\": \"...\",\r\n      \"e\": \"...\",\r\n      \"x5t\": \"...\",\r\n      \"kid\": \"SIGNING_KEY\",\r\n      \"x5c\": [\r\n        \"...\",\r\n        \"...\"\r\n      ],\r\n      \"key_ops\": [\r\n        \"encrypt\",\r\n        \"verify\"\r\n      ],\r\n      \"alg\": \"RS256\",\r\n      \"n\": \"...\"\r\n    }\r\n  ]\r\n}`\r\nAnd unfortunately, it seems impossible to adapt the `JwkSetConverter`.\r\nThis should be re-opened / re-considered.\r\n\r\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1871", "user": "erichunterhawthorne", "labels": ["in: oauth2", "status: backported", "type: bug"], "created": "2020-05-27 22:05:51", "closed": "2020-05-28 13:06:33", "commits": {"93b06d60cd66b59697937d63fca73ff24da7da84": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "f047552c6292f89434f89c49b6a2075639386567": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "93b06d60cd66b59697937d63fca73ff24da7da84", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["b8a137bd9921323068c91f5c7336698170719875"], "nameRev": "93b06d60cd66b59697937d63fca73ff24da7da84 tags/jwt1.1.1.RELEASE~2", "commitMessage": "JwkSetConverter only accepts public key use sig\n\nFixes gh-1871\n", "commitDateTime": "2020-05-28 08:59:01", "authoredDateTime": "2020-05-28 08:36:06", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 4, "deletions": 6, "lines": 10}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTests.java", "insertions": 16, "deletions": 16, "lines": 32}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(java.io.InputStream)", "TOT": 5, "UPD": 1, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(java.util.Map)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createEllipticCurveJwkDefinition(java.util.Map)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "JwkSetConverterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTests.convertWhenJwkSetStreamHasRSAJwkElementWithMissingPublicKeyUseAttributeThenThrowJwkException()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTests.convertWhenJwkSetStreamHasECJwkElementWithMissingPublicKeyUseAttributeThenThrowJwkException()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTests.convertWhenJwkSetStreamHasECJwkElementWithMissingKeyIdAttributeThenThrowJwkException()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTests.convertWhenJwkSetStreamHasRSAJwkElementWithMissingKeyIdAttributeThenThrowJwkException()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "f047552c6292f89434f89c49b6a2075639386567", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["acb8990328b073223102da3c9558ffec1522a6c5"], "nameRev": "f047552c6292f89434f89c49b6a2075639386567 remotes/origin/2.4.x~1", "commitMessage": "JwkSetConverter only accepts public key use sig\n\nFixes gh-1871\n", "commitDateTime": "2020-05-28 09:06:44", "authoredDateTime": "2020-05-28 08:36:06", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 4, "deletions": 6, "lines": 10}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTests.java", "insertions": 16, "deletions": 16, "lines": 32}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(java.io.InputStream)", "TOT": 5, "UPD": 1, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(java.util.Map)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createEllipticCurveJwkDefinition(java.util.Map)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "JwkSetConverterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTests.convertWhenJwkSetStreamHasRSAJwkElementWithMissingPublicKeyUseAttributeThenThrowJwkException()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTests.convertWhenJwkSetStreamHasECJwkElementWithMissingPublicKeyUseAttributeThenThrowJwkException()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTests.convertWhenJwkSetStreamHasECJwkElementWithMissingKeyIdAttributeThenThrowJwkException()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTests.convertWhenJwkSetStreamHasRSAJwkElementWithMissingKeyIdAttributeThenThrowJwkException()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["93b06d60cd66b59697937d63fca73ff24da7da84"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 6, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 9, "UPD": 1, "INS": 3, "MOV": 2, "DEL": 3, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(java.util.Map)", "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(java.io.InputStream)", "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createEllipticCurveJwkDefinition(java.util.Map)"]}, {"title": "DefaultTokenServices should generate url-safe tokens", "body": "Backport gh-1857", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1864", "user": "jgrandja", "labels": ["in: oauth2", "type: backport", "type: bug"], "created": "2020-05-11 13:43:41", "closed": "2020-05-11 13:47:03", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Correctly handle when expires_in=0", "body": "Backport gh-1172", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1863", "user": "jgrandja", "labels": ["in: oauth2", "type: backport", "type: bug"], "created": "2020-05-11 03:58:44", "closed": "2020-05-11 04:02:41", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Potential NPE in OAuthProviderBeanDefinitionParser", "body": "Backport gh-925", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1860", "user": "jgrandja", "labels": ["in: oauth1", "type: backport", "type: bug"], "created": "2020-05-08 14:17:01", "closed": "2020-05-08 14:22:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultTokenServices should generate url-safe tokens", "body": "<!--\r\n******************\r\nDeprecation Notice\r\n******************\r\nThe Spring Security OAuth project is deprecated. \r\nThe latest OAuth 2.0 support is provided by Spring Security. \r\nSee the OAuth 2.0 Migration Guide https://github.com/spring-projects/spring-security/wiki/OAuth-2.0-Migration-Guide\r\n-->\r\n\r\n<!--\r\nFor Security Vulnerabilities, please use https://pivotal.io/security#reporting\r\n-->\r\n\r\n### Summary\r\nWith release 2.4.1 the token generation was switched from `UUID` to `SecureRandom`. The secure random byte-array is used as the token value after encoding it with base64.\r\n\r\nThis can lead to tokens with some special chars, for example `=` or `/`. When a I have a token with `=` and try to send it in an http header, the `=` is treated as a separator and the browser (any maybe also some client libs) removes it. \r\n\r\n\r\n### Actual Behavior\r\nThe methods `createRefreshToken()` and `createAccessToken()` use the `Base64.encodeBase64` method with default-values for `isChunked` and `urlSafe`:\r\n```\r\nString tokenValue = new String(Base64.encodeBase64(\r\n\t\t\t\tDEFAULT_TOKEN_GENERATOR.generateKey()));\r\n```\r\n<!-- \r\nPlease describe step by step the behavior you are observing\r\n-->\r\n\r\n### Expected Behavior\r\nUse `Base64.encodeBase64( DEFAULT_TOKEN_GENERATOR.generateKey(), true, true )` instead to get a url- and http-header-compatible encoded value.\r\n\r\n\r\n<!--\r\nPlease describe step by step the behavior you expect\r\n-->\r\n\r\n### Configuration\r\n\r\n<!--\r\nPlease provide any configuration you have.\r\n-->\r\n\r\n### Version\r\nspring-security-oauth2 release 2.4.1\r\n\r\nSee https://github.com/spring-projects/spring-security-oauth/pull/1720/ for the change from `UUID` to `SecureRandom`.\r\n\r\n<!--\r\nPlease describe what version you are using. Does the problem occur in other versions?\r\n-->\r\n\r\n### Sample\r\n\r\n<!--\r\nProviding a complete sample (i.e. link to a github repository) will give this issue higher\r\npriority than issues that do not have a complete sample\r\n-->\r\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1857", "user": "torstenkuhnhenne", "labels": ["in: oauth2", "status: backported", "type: bug"], "created": "2020-05-04 09:53:45", "closed": "2020-05-11 13:45:51", "commits": {"fa46bac51d98bc8d09a6c9e7093ac3a53ed17707": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "45e6310b6692f45da9c6617c9ace428bf4d0f3c3": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "fa46bac51d98bc8d09a6c9e7093ac3a53ed17707", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["611854e76db42f46a11556f2d577f93f50a3dd73"], "nameRev": "fa46bac51d98bc8d09a6c9e7093ac3a53ed17707 tags/2.5.0.RC1~2", "commitMessage": "DefaultTokenServices generates url-safe tokens\n\nFixes gh-1857\n", "commitDateTime": "2020-05-11 09:35:03", "authoredDateTime": "2020-05-05 07:20:53", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java", "insertions": 2, "deletions": 4, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createRefreshToken(org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication,org.springframework.security.oauth2.common.OAuth2RefreshToken)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "45e6310b6692f45da9c6617c9ace428bf4d0f3c3", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["e5a827818aadb4b0761cff9d0b6da0a1d0dec592"], "nameRev": "45e6310b6692f45da9c6617c9ace428bf4d0f3c3 remotes/origin/2.4.x~3", "commitMessage": "DefaultTokenServices generates url-safe tokens\n\nFixes gh-1857\n", "commitDateTime": "2020-05-11 09:45:57", "authoredDateTime": "2020-05-05 07:20:53", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java", "insertions": 2, "deletions": 4, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createRefreshToken(org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication,org.springframework.security.oauth2.common.OAuth2RefreshToken)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fa46bac51d98bc8d09a6c9e7093ac3a53ed17707"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 4, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.DefaultTokenServices.createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication,org.springframework.security.oauth2.common.OAuth2RefreshToken)", "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createRefreshToken(org.springframework.security.oauth2.provider.OAuth2Authentication)"]}, {"title": "RedisTokenStore should delete access_to_refresh key when removing refresh token", "body": "Backport gh-1836", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1855", "user": "jgrandja", "labels": ["in: oauth2", "type: backport", "type: bug"], "created": "2020-04-30 22:38:39", "closed": "2020-04-30 22:43:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultTokenServices should not handle invalid tokens", "body": "Backport gh-1852", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1854", "user": "jgrandja", "labels": ["in: oauth2", "type: backport", "type: bug"], "created": "2020-04-30 18:10:31", "closed": "2020-04-30 18:16:00", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultTokenServices should not handle invalid tokens", "body": "I think the solution applied to fix https://github.com/spring-projects/spring-security-oauth/issues/1522 is incorrect, by catching all exceptions in `DefaultTokenServices`, this would mean that if you have a `TokenStore` that relies on a database and the database is down, all calls will now return a 401 instead of a proper 500. This is valid for other exceptions and/or `TokenStore` implementations too.\r\n\r\nReturning a 500 is more appropriate and can also trigger backoff strategies client side. On the contrary, getting a 401 when validating a token can trigger a token refresh scenario which would amplify the problem.\r\n\r\nI think to solve https://github.com/spring-projects/spring-security-oauth/issues/1522, the proper exception handling should be put only in `JwtTokenStore` and not in the `DefaultTokenServices`.\r\n\r\nThanks", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1852", "user": "jebeaudet", "labels": ["in: oauth2", "status: backported", "type: bug"], "created": "2020-04-24 16:15:46", "closed": "2020-04-30 18:13:35", "commits": {"d2c3b9d8e5652da04b3f9d76c1973e1eb34ee0f3": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "5e53cffd0d71119276a0df9b721011db24c7ce7a": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "d2c3b9d8e5652da04b3f9d76c1973e1eb34ee0f3", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["68a87b99915043323bce7abbba8f1d58f9ae52ef"], "nameRev": "d2c3b9d8e5652da04b3f9d76c1973e1eb34ee0f3 tags/2.5.0.RC1~10", "commitMessage": "Handle failed JWT signature verification\n\nIssue gh-1522\n\nFixes gh-1852\n", "commitDateTime": "2020-04-30 14:02:50", "authoredDateTime": "2020-04-30 13:11:37", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverter.java", "insertions": 7, "deletions": 2, "lines": 9}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverterTests.java", "insertions": 22, "deletions": 0, "lines": 22}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkVerifyingJwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter.decode(java.lang.String)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "JwkVerifyingJwtAccessTokenConverterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverterTests.decodeWhenVerifySignatureFailsThenThrowInvalidTokenException()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "5e53cffd0d71119276a0df9b721011db24c7ce7a", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["d0f9749de0562bedcb2b456c69431b80a9ef8e63"], "nameRev": "5e53cffd0d71119276a0df9b721011db24c7ce7a remotes/origin/2.4.x~7", "commitMessage": "Handle failed JWT signature verification\n\nIssue gh-1522\n\nFixes gh-1852\n", "commitDateTime": "2020-04-30 14:13:52", "authoredDateTime": "2020-04-30 13:11:37", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverter.java", "insertions": 7, "deletions": 2, "lines": 9}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverterTests.java", "insertions": 22, "deletions": 0, "lines": 22}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkVerifyingJwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter.decode(java.lang.String)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "JwkVerifyingJwtAccessTokenConverterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverterTests.decodeWhenVerifySignatureFailsThenThrowInvalidTokenException()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d2c3b9d8e5652da04b3f9d76c1973e1eb34ee0f3"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 2, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter.decode(java.lang.String)"]}, {"title": "RefreshTokenGranter should handle AuthenticationException", "body": "Backport gh-1410", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1846", "user": "jgrandja", "labels": ["in: oauth2", "type: backport", "type: bug"], "created": "2020-04-13 00:56:21", "closed": "2020-04-13 01:01:27", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ResourceOwnerPasswordTokenGranter should handle UsernameNotFoundException", "body": "Backport gh-1408", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1845", "user": "jgrandja", "labels": ["in: oauth2", "type: backport", "type: bug"], "created": "2020-04-09 21:19:53", "closed": "2020-04-09 21:26:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NullPointerException if refresh_token not set", "body": "Backport gh-941", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1844", "user": "jgrandja", "labels": ["in: oauth2", "type: backport", "type: bug"], "created": "2020-04-08 19:06:05", "closed": "2020-04-08 19:14:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Fix check token NPE", "body": "Backport gh-1841", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1843", "user": "jgrandja", "labels": ["in: oauth2", "type: backport", "type: bug"], "created": "2020-04-08 18:06:51", "closed": "2020-04-08 18:12:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "RedisTokenStore should delete access_to_refresh key when removing refresh token", "body": "https://github.com/spring-projects/spring-security-oauth/blob/d72922e395aa9c2fd0fd5b2de2e557790c2b92c5/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStore.java#L364\r\n\r\nin line 364 want to delete refreshToken,  redis key  is ACCESS_TO_REFRESH + refreshToken, but in line 213 save key as ACCESS_TO_REFRESH + accessToken.\r\n\r\n![image](https://user-images.githubusercontent.com/40679671/76675246-46a60d80-65f2-11ea-83df-ffee6c16643c.png)\r\n![image](https://user-images.githubusercontent.com/40679671/76675237-2fffb680-65f2-11ea-89a3-bcaf2c0d0e91.png)", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1836", "user": "mashice", "labels": ["in: oauth2", "status: backported", "type: bug"], "created": "2020-03-14 04:55:48", "closed": "2020-04-30 22:41:52", "commits": {"0a3938e7b79804c4b09a614e8fcd304e25048437": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "a72e2b7bbbaf1f444aa85e489ef6125da45735b5": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 47.000277777777775, "commitsDetails": [{"commitHash": "0a3938e7b79804c4b09a614e8fcd304e25048437", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["d2c3b9d8e5652da04b3f9d76c1973e1eb34ee0f3"], "nameRev": "0a3938e7b79804c4b09a614e8fcd304e25048437 tags/2.5.0.RC1~9", "commitMessage": "Delete access_to_refresh key when removing refresh token in RedisTokenStore\n\nFixes gh-1836\n", "commitDateTime": "2020-04-30 18:34:10", "authoredDateTime": "2020-04-16 21:31:39", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStore.java", "insertions": 15, "deletions": 8, "lines": 23}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreMockTests.java", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreTests.java", "insertions": 48, "deletions": 1, "lines": 49}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RedisTokenStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore.storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 9, "UPD": 5, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore.removeRefreshToken(java.lang.String)", "TOT": 13, "UPD": 1, "INS": 1, "MOV": 9, "DEL": 2}]}, {"spoonFilePath": "RedisTokenStoreMockTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreMockTests.storeRefreshTokenRemoveRefreshTokenVerifyKeysRemoved()", "TOT": 6, "UPD": 0, "INS": 6, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RedisTokenStoreTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.setup()", "TOT": 9, "UPD": 0, "INS": 5, "MOV": 0, "DEL": 4}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.storeAccessTokenWithRefreshTokenRemoveRefreshTokenAndAccessTokenVerifyTokenRemoved()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.getValue(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "a72e2b7bbbaf1f444aa85e489ef6125da45735b5", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["5e53cffd0d71119276a0df9b721011db24c7ce7a"], "nameRev": "a72e2b7bbbaf1f444aa85e489ef6125da45735b5 remotes/origin/2.4.x~6", "commitMessage": "Delete access_to_refresh key when removing refresh token in RedisTokenStore\n\nFixes gh-1836\n", "commitDateTime": "2020-04-30 18:41:56", "authoredDateTime": "2020-04-16 21:31:39", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStore.java", "insertions": 15, "deletions": 8, "lines": 23}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreMockTests.java", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreTests.java", "insertions": 48, "deletions": 1, "lines": 49}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RedisTokenStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore.storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 9, "UPD": 5, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore.removeRefreshToken(java.lang.String)", "TOT": 13, "UPD": 1, "INS": 1, "MOV": 9, "DEL": 2}]}, {"spoonFilePath": "RedisTokenStoreMockTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreMockTests.storeRefreshTokenRemoveRefreshTokenVerifyKeysRemoved()", "TOT": 6, "UPD": 0, "INS": 6, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RedisTokenStoreTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.setup()", "TOT": 9, "UPD": 0, "INS": 5, "MOV": 0, "DEL": 4}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.storeAccessTokenWithRefreshTokenRemoveRefreshTokenAndAccessTokenVerifyTokenRemoved()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.getValue(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0a3938e7b79804c4b09a614e8fcd304e25048437"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 8, "lines": 23, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 22, "UPD": 6, "INS": 1, "MOV": 11, "DEL": 4, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore.removeRefreshToken(java.lang.String)", "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore.storeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)"]}, {"title": "OAuth2Exception isErrorDescriptionValid seems to not do what I would expect", "body": "### Summary\r\n\r\nI noticed that created a new OAuth2Exception has some unexpected behaviour, due to how `OAuth2Exception#isErrorDescriptionValid` checks the message as an error description\r\n\r\n<!-- \r\nPlease provide a high level summary of the issue you are having\r\n-->\r\n\r\n### Actual Behavior\r\n\r\n* null = ok\r\n* \"\" = fail\r\n* \"test\" = ok\r\n\r\n### Expected Behavior\r\n\r\nI would have expected empty string to be ok. The logic seems to check only the first char, and if valid, then return true.\r\n\r\nI would expect it would be the opposite, in that fail fast by returning false from the for loop when it finds an invalid character. Then at the end of the method, return true.\r\n\r\n### Configuration\r\n\r\n### Version\r\n\r\n2.3.7.RELEASE", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1795", "user": "maccamlc", "labels": ["type: bug"], "created": "2019-11-01 05:31:03", "closed": "2019-11-06 21:13:52", "commits": {}, "ttf": 5.000277777777778, "commitsDetails": []}, {"title": "Revert deserialization with closed whitelist", "body": "The commits 7095b4a (#1682) and b214a25 (#1759) introduced in the `2.3.7.RELEASE`, caused incompatibility with existing applications attempting to upgrade to `2.3.7.RELEASE`.\r\n\r\nWe need to revert both commits 7095b4a and b214a25 to ensure compatibility in the next patch release `2.3.8.RELEASE`.", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1785", "user": "jgrandja", "labels": ["type: bug"], "created": "2019-10-21 15:42:43", "closed": "2019-10-21 16:09:16", "commits": {"e7c2b970000ebd298d8ad15c5347c2e8c00bad2e": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "13b36fbb4163c6b5b603b642846745f5776f5a9a": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "e7c2b970000ebd298d8ad15c5347c2e8c00bad2e", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["eade3c6b22257aac8a03df5559db08f9e1ffd3ca"], "nameRev": "e7c2b970000ebd298d8ad15c5347c2e8c00bad2e tags/jwt1.1.0.RELEASE~17", "commitMessage": "Revert \"Safer deserialization in JDBC services\"\n\nThis reverts commit b214a25fdd8eae34c8ad803e7022fd17d1c63eb6.\n\nFixes gh-1785\n", "commitDateTime": "2019-10-21 11:51:42", "authoredDateTime": "2019-10-21 11:51:42", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/SerializationUtils.java", "insertions": 3, "deletions": 88, "lines": 91}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/util/SerializationUtilsTests.java", "insertions": 0, "deletions": 61, "lines": 61}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SerializationUtils.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.util.SerializationUtils.deserialize(byte[])", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.util.SerializationUtils", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "org.springframework.security.oauth2.common.util.SerializationUtils.SaferObjectInputStream", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "SerializationUtilsTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.util.SerializationUtilsTests", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "13b36fbb4163c6b5b603b642846745f5776f5a9a", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["e7c2b970000ebd298d8ad15c5347c2e8c00bad2e"], "nameRev": "13b36fbb4163c6b5b603b642846745f5776f5a9a tags/jwt1.1.0.RELEASE~16", "commitMessage": "Revert \"Safer deserialization in RedisTokenStore\"\n\nThis reverts commit 7095b4a8d24864727e988fb2fb0a451f018d78a6.\n\nFixes gh-1785\n", "commitDateTime": "2019-10-21 11:53:42", "authoredDateTime": "2019-10-21 11:53:42", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/JdkSerializationStrategy.java", "insertions": 13, "deletions": 75, "lines": 88}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/SaferObjectInputStream.java", "insertions": 0, "deletions": 78, "lines": 78}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/JdkSerializationStrategyTests.java", "insertions": 0, "deletions": 64, "lines": 64}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JdkSerializationStrategy.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.JdkSerializationStrategy", "TOT": 7, "UPD": 1, "INS": 1, "MOV": 2, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.JdkSerializationStrategy.deserializeInternal(byte[],java.lang.Class)", "TOT": 6, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 2}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.JdkSerializationStrategy.serializeInternal(java.lang.Object)", "TOT": 7, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 3}]}, {"spoonFilePath": "SaferObjectInputStream.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.SaferObjectInputStream", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "JdkSerializationStrategyTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.JdkSerializationStrategyTests", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e7c2b970000ebd298d8ad15c5347c2e8c00bad2e", "13b36fbb4163c6b5b603b642846745f5776f5a9a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 16, "deletions": 241, "lines": 257, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 25, "UPD": 6, "INS": 3, "MOV": 4, "DEL": 12, "spoonFilesChanged": 3, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.common.util.SerializationUtils.deserialize(byte[])", "org.springframework.security.oauth2.provider.token.store.redis.JdkSerializationStrategy.serializeInternal(java.lang.Object)", "org.springframework.security.oauth2.provider.token.store.redis.JdkSerializationStrategy", "org.springframework.security.oauth2.provider.token.store.redis.SaferObjectInputStream", "org.springframework.security.oauth2.common.util.SerializationUtils.SaferObjectInputStream", "org.springframework.security.oauth2.common.util.SerializationUtils", "org.springframework.security.oauth2.provider.token.store.redis.JdkSerializationStrategy.deserializeInternal(byte[],java.lang.Class)"]}, {"title": "Attribute ifAllGranted invalid for tag authorize", "body": "so gb what,,,\r\ni just clone and follow the readme step, \r\nexecute tonr2   tomcat7:run ,then open url for login\r\nhttp://localhost:8080/sparklr2/\r\njus press login button,then problem coming.\r\n\u4fe1\u606f: Initializing Spring FrameworkServlet 'dispatcher'\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://www.springframework.org/security/tags is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://www.springframework.org/tags is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://www.springframework.org/tags/form is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jstl/core_rt is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jstl/core is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jsp/jstl/core is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jstl/fmt_rt is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jstl/fmt is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jsp/jstl/fmt is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jsp/jstl/functions is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://jakarta.apache.org/taglibs/standard/permittedTaglibs is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://jakarta.apache.org/taglibs/standard/scriptfree is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jstl/sql_rt is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jstl/sql is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jsp/jstl/sql is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jstl/xml_rt is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jstl/xml is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.startup.TaglibUriRule body\r\n\u4fe1\u606f: TLD skipped. URI: http://java.sun.com/jsp/jstl/xml is already defined\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.core.ApplicationContext log\r\n\u4fe1\u606f: 1 Spring WebApplicationInitializers detected on classpath\r\n\u4e94\u6708 04, 2019 11:17:12 \u4e0a\u5348 org.apache.catalina.core.ApplicationContext log\r\n\u4fe1\u606f: Initializing Spring FrameworkServlet 'dispatcher'\r\n\u4e94\u6708 04, 2019 11:17:15 \u4e0a\u5348 org.apache.coyote.AbstractProtocol start\r\n\u4fe1\u606f: Starting ProtocolHandler [\"http-bio-8080\"]\r\n\u4e94\u6708 04, 2019 11:17:39 \u4e0a\u5348 org.apache.jasper.compiler.TldLocationsCache tldScanJar\r\n\u4fe1\u606f: At least one JAR was scanned for TLDs yet contained no TLDs. Enable debug logging for this logger for a complete list of JARs that were scanned but no TLDs were found in them. Skipping unneeded JARs during scanning can improve startup time and JSP compilation time.\r\n\u4e94\u6708 04, 2019 11:17:40 \u4e0a\u5348 org.apache.catalina.core.StandardWrapperValve invoke\r\n\u4e25\u91cd: Servlet.service() for servlet [jsp] in context with path [/sparklr2] threw exception [/index.jsp (line: 29, column: 2) Attribute ifAllGranted invalid for tag authorize according to TLD] with root cause\r\norg.apache.jasper.JasperException: /index.jsp (line: 29, column: 2) Attribute ifAllGranted invalid for tag authorize according to TLD\r\n\tat org.apache.jasper.compiler.DefaultErrorHandler.jspError(DefaultErrorHandler.java:42)\r\n\tat org.apache.jasper.compiler.ErrorDispatcher.dispatch(ErrorDispatcher.java:443)\r\n\tat org.apache.jasper.compiler.ErrorDispatcher.jspError(ErrorDispatcher.java:237)\r\n \r\ni dont hnow whey the tld skipped,(http://www.springframework.org/security/tags ) \r\n\r\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1672", "user": "xj20305", "labels": ["type: bug"], "created": "2019-05-04 03:43:28", "closed": "2019-10-14 01:32:00", "commits": {"947b03ca794b9f25d463e53c26c7be3d56fc745d": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "21571c279ca7e9efcbf032f49337ce8420e79af2": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "96a562a7a4938ec54cf5c6832bf71996dd1655ce": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "4b3141f6bee47ff811c0120479e46991d52a78ea": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 162.00027777777777, "commitsDetails": [{"commitHash": "947b03ca794b9f25d463e53c26c7be3d56fc745d", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["20b0c5ca88e43d681345d38944c63379ef0a86e5"], "nameRev": "947b03ca794b9f25d463e53c26c7be3d56fc745d tags/jwt1.0.11.RELEASE~13", "commitMessage": "Remove use of deprecated APIs in samples\n\nFixes gh-1672\n", "commitDateTime": "2019-10-13 21:26:38", "authoredDateTime": "2019-05-10 14:31:45", "commitGitStats": [{"filePath": "samples/oauth/sparklr/src/main/webapp/WEB-INF/jsp/access_confirmation.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/sparklr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/sparklr/src/main/webapp/login.jsp", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "samples/oauth/tonr/src/main/webapp/WEB-INF/jsp/picasa.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth/tonr/src/main/webapp/WEB-INF/jsp/sparklr.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth/tonr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/tonr/src/main/webapp/login.jsp", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "samples/oauth/tonr/src/main/webapp/oauth_error.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/sparklr/src/main/webapp/WEB-INF/jsp/access_confirmation.jsp", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "samples/oauth2/sparklr/src/main/webapp/index.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/WEB-INF/jsp/facebook.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/WEB-INF/jsp/sparklr.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "21571c279ca7e9efcbf032f49337ce8420e79af2", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["7ef92b90df15954fbe106749d5db1b9519ef2a1b"], "nameRev": "21571c279ca7e9efcbf032f49337ce8420e79af2 tags/2.2.6.RELEASE~10", "commitMessage": "Remove use of deprecated APIs in samples\n\nFixes gh-1672\n", "commitDateTime": "2019-10-15 14:22:17", "authoredDateTime": "2019-05-10 14:31:45", "commitGitStats": [{"filePath": "samples/oauth/sparklr/src/main/webapp/WEB-INF/jsp/access_confirmation.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/sparklr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/sparklr/src/main/webapp/login.jsp", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "samples/oauth/tonr/src/main/webapp/WEB-INF/jsp/picasa.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth/tonr/src/main/webapp/WEB-INF/jsp/sparklr.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth/tonr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/tonr/src/main/webapp/login.jsp", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "samples/oauth/tonr/src/main/webapp/oauth_error.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/sparklr/src/main/webapp/WEB-INF/jsp/access_confirmation.jsp", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "samples/oauth2/sparklr/src/main/webapp/index.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/WEB-INF/jsp/facebook.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/WEB-INF/jsp/sparklr.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "96a562a7a4938ec54cf5c6832bf71996dd1655ce", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["ca5a421352eb6f5223f4f9d017e055852229b03f"], "nameRev": "96a562a7a4938ec54cf5c6832bf71996dd1655ce tags/2.1.6.RELEASE~10", "commitMessage": "Remove use of deprecated APIs in samples\n\nFixes gh-1672\n", "commitDateTime": "2019-10-15 14:44:55", "authoredDateTime": "2019-05-10 14:31:45", "commitGitStats": [{"filePath": "samples/oauth/sparklr/src/main/webapp/WEB-INF/jsp/access_confirmation.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/sparklr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/sparklr/src/main/webapp/login.jsp", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "samples/oauth/tonr/src/main/webapp/WEB-INF/jsp/picasa.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth/tonr/src/main/webapp/WEB-INF/jsp/sparklr.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth/tonr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/tonr/src/main/webapp/login.jsp", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "samples/oauth/tonr/src/main/webapp/oauth_error.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/sparklr/src/main/webapp/WEB-INF/jsp/access_confirmation.jsp", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "samples/oauth2/sparklr/src/main/webapp/index.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/WEB-INF/jsp/facebook.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/WEB-INF/jsp/sparklr.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "4b3141f6bee47ff811c0120479e46991d52a78ea", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["3b57bea0639e044a0becb71a2950799263a40864"], "nameRev": "4b3141f6bee47ff811c0120479e46991d52a78ea tags/2.0.19.RELEASE~9", "commitMessage": "Remove use of deprecated APIs in samples\n\nFixes gh-1672\n", "commitDateTime": "2019-10-15 14:55:06", "authoredDateTime": "2019-05-10 14:31:45", "commitGitStats": [{"filePath": "samples/oauth/sparklr/src/main/webapp/WEB-INF/jsp/access_confirmation.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/sparklr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/sparklr/src/main/webapp/login.jsp", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "samples/oauth/tonr/src/main/webapp/WEB-INF/jsp/picasa.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth/tonr/src/main/webapp/WEB-INF/jsp/sparklr.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth/tonr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "samples/oauth/tonr/src/main/webapp/login.jsp", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "samples/oauth/tonr/src/main/webapp/oauth_error.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/sparklr/src/main/webapp/WEB-INF/jsp/access_confirmation.jsp", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "samples/oauth2/sparklr/src/main/webapp/index.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/WEB-INF/jsp/facebook.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/WEB-INF/jsp/sparklr.jsp", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "samples/oauth2/tonr/src/main/webapp/index.jsp", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["947b03ca794b9f25d463e53c26c7be3d56fc745d"], "filteredCommitsReason": {"duplicated": 3, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 31, "deletions": 31, "lines": 62, "gitFilesChange": 13}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["samples/oauth/tonr/src/main/webapp/WEB-INF/jsp/picasa.jsp", "samples/oauth/sparklr/src/main/webapp/WEB-INF/jsp/access_confirmation.jsp", "samples/oauth/sparklr/src/main/webapp/index.jsp", "samples/oauth/tonr/src/main/webapp/index.jsp", "samples/oauth/tonr/src/main/webapp/oauth_error.jsp", "samples/oauth2/tonr/src/main/webapp/WEB-INF/jsp/sparklr.jsp", "samples/oauth2/tonr/src/main/webapp/WEB-INF/jsp/facebook.jsp", "samples/oauth2/tonr/src/main/webapp/index.jsp", "samples/oauth2/sparklr/src/main/webapp/index.jsp", "samples/oauth/sparklr/src/main/webapp/login.jsp", "samples/oauth/tonr/src/main/webapp/login.jsp", "samples/oauth/tonr/src/main/webapp/WEB-INF/jsp/sparklr.jsp", "samples/oauth2/sparklr/src/main/webapp/WEB-INF/jsp/access_confirmation.jsp"]}, {"title": "DefaultRedirectResolver fails with NPE if URI has no host", "body": "The `DefaultRedirectResolver` fails with a `NullPointerException` if the registered redirect URI has no host, e.g. `mymobileapp:/oauthredirect`.\r\n\r\nThis type of URI can be used to redirect the user to a mobile app. The OAuth2 specs require the redirect URI to be an absolute URI, which this is.\r\n\r\nThe problem in the current implementation is that the redirect URI is expected to have a host component. If fails with an NPE if it doesn't. To fix it, the `hostMatches` method should assume that the provided host arguments can be null.\r\n\r\nThis problem is observed in version 2.0.16 and 2.0.17.\r\n\r\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1618", "user": "tomvandenberge", "labels": ["type: bug"], "created": "2019-03-14 08:32:25", "closed": "2019-10-11 16:17:13", "commits": {"f9eb94b74dd0d68120eb4b4cb7f623a83b505024": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "7614d244b6b96390d8cd2b7c9b950f54529598e1": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "e06b80caa0c794805e126e396541c61673c0155e": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "c5c636e78f3c39d217c2f78307081cfe4aafe9b0": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 211.00027777777777, "commitsDetails": [{"commitHash": "f9eb94b74dd0d68120eb4b4cb7f623a83b505024", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["87f8d8c7ef143a86e15ac3b4f7c9b877f2b32599"], "nameRev": "f9eb94b74dd0d68120eb4b4cb7f623a83b505024 tags/jwt1.0.11.RELEASE~20", "commitMessage": "Fix URI matching if URI has no host\n\nFixes gh-1618\n", "commitDateTime": "2019-10-11 11:56:18", "authoredDateTime": "2019-03-14 09:12:36", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 17, "deletions": 8, "lines": 25}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultRedirectResolver.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.hostMatches(java.lang.String,java.lang.String)", "TOT": 4, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DefaultRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectNoHost()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "7614d244b6b96390d8cd2b7c9b950f54529598e1", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["13118ae89a877d716c48e8a61873310f5f23536c"], "nameRev": "7614d244b6b96390d8cd2b7c9b950f54529598e1 tags/2.2.6.RELEASE~12", "commitMessage": "Fix URI matching if URI has no host\n\nFixes gh-1618\n", "commitDateTime": "2019-10-15 14:20:26", "authoredDateTime": "2019-03-14 09:12:36", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultRedirectResolver.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.hostMatches(java.lang.String,java.lang.String)", "TOT": 4, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DefaultRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectNoHost()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "e06b80caa0c794805e126e396541c61673c0155e", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["7f35d131a7be757f1b87a3c841d84066cebe47d5"], "nameRev": "e06b80caa0c794805e126e396541c61673c0155e tags/2.1.6.RELEASE~12", "commitMessage": "Fix URI matching if URI has no host\n\nFixes gh-1618\n", "commitDateTime": "2019-10-15 14:44:33", "authoredDateTime": "2019-03-14 09:12:36", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultRedirectResolver.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.hostMatches(java.lang.String,java.lang.String)", "TOT": 4, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DefaultRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectNoHost()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "c5c636e78f3c39d217c2f78307081cfe4aafe9b0", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["877a985b57787f5dcb8a3f5b903062d9fca2ffdb"], "nameRev": "c5c636e78f3c39d217c2f78307081cfe4aafe9b0 tags/2.0.19.RELEASE~11", "commitMessage": "Fix URI matching if URI has no host\n\nFixes gh-1618\n", "commitDateTime": "2019-10-15 14:54:06", "authoredDateTime": "2019-03-14 09:12:36", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultRedirectResolver.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.hostMatches(java.lang.String,java.lang.String)", "TOT": 4, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DefaultRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectNoHost()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f9eb94b74dd0d68120eb4b4cb7f623a83b505024"], "filteredCommitsReason": {"duplicated": 3, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 4, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.hostMatches(java.lang.String,java.lang.String)"]}, {"title": "'active' attribute is not returned by CheckTokenEndpoint", "body": "Actual Behavior\r\n------\r\n\r\nWhen using `@EnableAuthorizationServer`, the check token endpoint will not return the `active` attribute by default. Instead, it's necessary to supply a custom `AccessTokenConverter` bean.\r\n\r\nExpected Behavior\r\n------\r\n\r\nBy default, the `check_token` endpoint, as enabled by `@EnableAuthorizationServer`, would include the `active` attribute in the response.\r\n\r\nVersion\r\n------\r\n2.3.5.RELEASE\r\n\r\nSample Configuration\r\n------\r\nhttps://github.com/spring-projects/spring-security-oauth2-boot/tree/master/samples/spring-boot-sample-secure-oauth2-provider\r\n\r\n(Note that the sample is on 2.3.4.RELEASE, so if you don't mind, you can change the dependency in your local copy to 2.3.5.RELEASE before you run the tests.)", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1616", "user": "jzheaux", "labels": ["type: bug"], "created": "2019-03-12 21:31:29", "closed": "2019-10-15 14:11:05", "commits": {"ef28e1e4c6b67a18f4a9bdffbfe093747797f16f": {"commitGHEventType": "referenced", "commitUser": "jzheaux"}, "ed50c2f392730c1547b1e4cff1f2a4b6dce0f1b9": {"commitGHEventType": "referenced", "commitUser": "jzheaux"}, "61896f874d3b21fb833bd9cdd4c005e16df7fb44": {"commitGHEventType": "referenced", "commitUser": "jzheaux"}}, "ttf": 216.00027777777777, "commitsDetails": [{"commitHash": "ef28e1e4c6b67a18f4a9bdffbfe093747797f16f", "commitGHEventType": "referenced", "commitUser": "jzheaux", "commitParents": ["763af1f4d8c17ba069cace1c21c029c29ac7360a"], "nameRev": "ef28e1e4c6b67a18f4a9bdffbfe093747797f16f tags/jwt1.0.11.RELEASE~10", "commitMessage": "Revert 'active' attribute override\n\nThis reverts commit d8a0bb8f\n\nFixes: gh-1616\nFixes: gh-1747\n", "commitDateTime": "2019-10-15 08:11:04", "authoredDateTime": "2019-10-14 15:21:24", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java", "insertions": 7, "deletions": 33, "lines": 40}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpointTest.java", "insertions": 13, "deletions": 20, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "CheckTokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.CheckTokenAccessTokenConverter", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "CheckTokenEndpointTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenDefaultAccessTokenConverterThenActiveAttributeReturned()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenCustomAccessTokenConverterThenActiveAttributeNotReturned()", "TOT": 8, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 4}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.setUp()", "TOT": 21, "UPD": 1, "INS": 5, "MOV": 12, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "ed50c2f392730c1547b1e4cff1f2a4b6dce0f1b9", "commitGHEventType": "referenced", "commitUser": "jzheaux", "commitParents": ["17dfa6e089c13d273f59b82e10d1a9ce0ba28ac6"], "nameRev": "ed50c2f392730c1547b1e4cff1f2a4b6dce0f1b9 tags/2.2.6.RELEASE~5", "commitMessage": "Revert 'active' attribute override\n\nThis reverts commit d8a0bb8f\n\nFixes: gh-1616\nFixes: gh-1747\n", "commitDateTime": "2019-10-16 13:48:31", "authoredDateTime": "2019-10-14 15:21:24", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java", "insertions": 7, "deletions": 33, "lines": 40}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpointTest.java", "insertions": 13, "deletions": 20, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "CheckTokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.CheckTokenAccessTokenConverter", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "CheckTokenEndpointTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenDefaultAccessTokenConverterThenActiveAttributeReturned()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenCustomAccessTokenConverterThenActiveAttributeNotReturned()", "TOT": 8, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 4}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.setUp()", "TOT": 21, "UPD": 1, "INS": 5, "MOV": 12, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "61896f874d3b21fb833bd9cdd4c005e16df7fb44", "commitGHEventType": "referenced", "commitUser": "jzheaux", "commitParents": ["31a72a24a8ac20bdcef727f9e5e7eeeed3a69a4f"], "nameRev": "61896f874d3b21fb833bd9cdd4c005e16df7fb44 tags/2.1.6.RELEASE~5", "commitMessage": "Revert 'active' attribute override\n\nThis reverts commit d8a0bb8f\n\nFixes: gh-1616\nFixes: gh-1747\n", "commitDateTime": "2019-10-16 13:59:40", "authoredDateTime": "2019-10-14 15:21:24", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java", "insertions": 7, "deletions": 33, "lines": 40}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpointTest.java", "insertions": 13, "deletions": 20, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "CheckTokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.CheckTokenAccessTokenConverter", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "CheckTokenEndpointTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenDefaultAccessTokenConverterThenActiveAttributeReturned()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenCustomAccessTokenConverterThenActiveAttributeNotReturned()", "TOT": 8, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 4}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.setUp()", "TOT": 21, "UPD": 1, "INS": 5, "MOV": 12, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ef28e1e4c6b67a18f4a9bdffbfe093747797f16f"], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 33, "lines": 40, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 1, "INS": 3, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.CheckTokenAccessTokenConverter", "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)", "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint"]}, {"title": "Allow overriding 'active' attribute in CheckTokenEndpoint", "body": "Backport #1591", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1593", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-19 19:34:42", "closed": "2019-02-20 01:38:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Allow overriding 'active' attribute in CheckTokenEndpoint", "body": "Backport #1591", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1592", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-19 19:33:57", "closed": "2019-02-20 00:30:13", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Allow overriding 'active' attribute in CheckTokenEndpoint", "body": "Since 2.1.1 in #1070, the `CheckTokenEndpoint` returned the `active` attribute by default.\r\n\r\nIf this is not desired, you are now able to provide a custom `AccessTokenConverter` via  `CheckTokenEndpoint.setAccessTokenConverter()` and effectively override the default behaviour.", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1591", "user": "jgrandja", "labels": ["type: bug"], "created": "2019-02-19 18:04:14", "closed": "2019-02-19 21:49:52", "commits": {"d8a0bb8fba7cee90a4c7991610b30ae779df6b8d": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "3e5527d67b9a8678655eaafebdfd7228bb9dab25": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "f38fff7d4a0624f274140f67722b3fb80e3082ef": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "d8a0bb8fba7cee90a4c7991610b30ae779df6b8d", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["852cec2b6d4b91db8e2e392d714a7bfec4cbf53e"], "nameRev": "d8a0bb8fba7cee90a4c7991610b30ae779df6b8d tags/2.3.5.RELEASE~1", "commitMessage": "Allow overriding 'active' attribute in CheckTokenEndpoint\n\nFixes gh-1591\n", "commitDateTime": "2019-02-19 13:38:29", "authoredDateTime": "2019-02-19 13:06:05", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java", "insertions": 46, "deletions": 17, "lines": 63}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpointTest.java", "insertions": 20, "deletions": 13, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "CheckTokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.CheckTokenAccessTokenConverter", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CheckTokenEndpointTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenTokenValidThenReturnActiveAttribute()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.setUp()", "TOT": 27, "UPD": 3, "INS": 3, "MOV": 16, "DEL": 5}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenCustomAccessTokenConverterThenActiveAttributeNotReturned()", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "3e5527d67b9a8678655eaafebdfd7228bb9dab25", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["af789e0ba2f5403ba3fd754cfdad441a5b550d3a"], "nameRev": "3e5527d67b9a8678655eaafebdfd7228bb9dab25 tags/2.2.4.RELEASE~1", "commitMessage": "Allow overriding 'active' attribute in CheckTokenEndpoint\n\nFixes gh-1591\n", "commitDateTime": "2019-02-19 14:52:50", "authoredDateTime": "2019-02-19 13:06:05", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java", "insertions": 46, "deletions": 17, "lines": 63}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpointTest.java", "insertions": 20, "deletions": 13, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "CheckTokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.CheckTokenAccessTokenConverter", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CheckTokenEndpointTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenTokenValidThenReturnActiveAttribute()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.setUp()", "TOT": 27, "UPD": 3, "INS": 3, "MOV": 16, "DEL": 5}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenCustomAccessTokenConverterThenActiveAttributeNotReturned()", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "f38fff7d4a0624f274140f67722b3fb80e3082ef", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["16d39adbc04bb0cdf217226803d05d6956595d85"], "nameRev": "f38fff7d4a0624f274140f67722b3fb80e3082ef tags/2.1.4.RELEASE~1", "commitMessage": "Allow overriding 'active' attribute in CheckTokenEndpoint\n\nFixes gh-1591\n", "commitDateTime": "2019-02-19 14:53:29", "authoredDateTime": "2019-02-19 13:06:05", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java", "insertions": 46, "deletions": 17, "lines": 63}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpointTest.java", "insertions": 20, "deletions": 13, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "CheckTokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.CheckTokenAccessTokenConverter", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CheckTokenEndpointTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenTokenValidThenReturnActiveAttribute()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.setUp()", "TOT": 27, "UPD": 3, "INS": 3, "MOV": 16, "DEL": 5}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest.checkTokenWhenCustomAccessTokenConverterThenActiveAttributeNotReturned()", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d8a0bb8fba7cee90a4c7991610b30ae779df6b8d"], "filteredCommitsReason": {"duplicated": 2, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 46, "deletions": 17, "lines": 63, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 3, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.CheckTokenAccessTokenConverter", "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)", "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint"]}, {"title": "Ensure exact matching on path in DefaultRedirectResolver", "body": "Backport #1331", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1590", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-19 11:20:19", "closed": "2019-02-20 02:35:13", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultRedirectResolver should match on userinfo and query", "body": "Backport #1585", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1589", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-19 10:52:27", "closed": "2019-02-20 02:36:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultRedirectResolver should match on userinfo and query", "body": "Backport #1585", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1588", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-19 10:51:33", "closed": "2019-02-20 01:40:19", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultRedirectResolver should match on userinfo and query", "body": "Backport #1585", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1587", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-19 10:49:51", "closed": "2019-02-20 00:32:42", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Ensure double-checked locking when loading Jwk definitions", "body": "Backport #1405", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1586", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-19 10:44:49", "closed": "2019-02-20 00:33:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultRedirectResolver should match on userinfo and query", "body": "`DefaultRedirectResolver` should match on _userinfo_ and _query_ parts of `URI`.", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1585", "user": "jgrandja", "labels": ["type: bug"], "created": "2019-02-19 01:18:01", "closed": "2019-02-19 21:49:52", "commits": {"97e0b4ab282acbed3588e05be03d5a0c4dbf3367": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "b436f745af2be24924ecc68524fd2582bcdfdc38": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "16d39adbc04bb0cdf217226803d05d6956595d85": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "da157a89402eeb2d5d071db3558c3b417bfc3ed0": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "97e0b4ab282acbed3588e05be03d5a0c4dbf3367", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["1e5536af65d76696908fc277432f0399e31acc33"], "nameRev": "97e0b4ab282acbed3588e05be03d5a0c4dbf3367 tags/2.3.5.RELEASE~3", "commitMessage": "DefaultRedirectResolver matches on userinfo and query\n\nFixes gh-1585\n", "commitDateTime": "2019-02-18 20:18:09", "authoredDateTime": "2019-01-28 23:13:55", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 80, "deletions": 18, "lines": 98}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 117, "deletions": 11, "lines": 128}, {"filePath": "tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultRedirectResolver.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.redirectMatches(java.lang.String,java.lang.String)", "TOT": 57, "UPD": 19, "INS": 3, "MOV": 32, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.obtainMatchingRedirect(java.util.Set,java.lang.String)", "TOT": 8, "UPD": 0, "INS": 7, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.matchQueryParams(org.springframework.util.MultiValueMap,org.springframework.util.MultiValueMap)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.isEqual(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SubdomainRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.code.SubdomainRedirectResolverTests.testRedirectWatchdox()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.code.SubdomainRedirectResolverTests.testRedirectBadWatchdox()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredUserInfoNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredNoUserInfoNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredUserInfoMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredFragmentIgnoredAndStripped()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingIgnoringAdditionalParams()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingDifferentOrder()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsWithDifferentValues()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsPartiallyMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingWithMultipleValuesInRegistered()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingWithParamWithNoValue()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationCodeProviderCookieTests.java", "spoonMethods": [{"spoonMethodName": "demo.AuthorizationCodeProviderCookieTests.testPostToProtectedResource()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "b436f745af2be24924ecc68524fd2582bcdfdc38", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["799fb1a8170deb402faf993b40312f0063938b7f"], "nameRev": "b436f745af2be24924ecc68524fd2582bcdfdc38 tags/2.2.4.RELEASE~3", "commitMessage": "DefaultRedirectResolver matches on userinfo and query\n\nFixes gh-1585\n", "commitDateTime": "2019-02-18 20:41:07", "authoredDateTime": "2019-01-28 23:13:55", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 80, "deletions": 18, "lines": 98}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 116, "deletions": 10, "lines": 126}, {"filePath": "tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultRedirectResolver.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.redirectMatches(java.lang.String,java.lang.String)", "TOT": 57, "UPD": 19, "INS": 3, "MOV": 32, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.obtainMatchingRedirect(java.util.Set,java.lang.String)", "TOT": 8, "UPD": 0, "INS": 7, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.matchQueryParams(org.springframework.util.MultiValueMap,org.springframework.util.MultiValueMap)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.isEqual(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SubdomainRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.code.SubdomainRedirectResolverTests.testRedirectWatchdox()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.code.SubdomainRedirectResolverTests.testRedirectBadWatchdox()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredUserInfoNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredNoUserInfoNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredUserInfoMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredFragmentIgnoredAndStripped()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingIgnoringAdditionalParams()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingDifferentOrder()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsWithDifferentValues()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsPartiallyMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingWithMultipleValuesInRegistered()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingWithParamWithNoValue()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationCodeProviderCookieTests.java", "spoonMethods": [{"spoonMethodName": "demo.AuthorizationCodeProviderCookieTests.testPostToProtectedResource()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "16d39adbc04bb0cdf217226803d05d6956595d85", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["96f85b0500094a690047c1fafd69df58e26a72c1"], "nameRev": "16d39adbc04bb0cdf217226803d05d6956595d85 tags/2.1.4.RELEASE~2", "commitMessage": "DefaultRedirectResolver matches on userinfo and query\n\nFixes gh-1585\n", "commitDateTime": "2019-02-18 20:50:34", "authoredDateTime": "2019-01-28 23:13:55", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 80, "deletions": 18, "lines": 98}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 116, "deletions": 10, "lines": 126}, {"filePath": "tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultRedirectResolver.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.redirectMatches(java.lang.String,java.lang.String)", "TOT": 57, "UPD": 19, "INS": 3, "MOV": 32, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.obtainMatchingRedirect(java.util.Set,java.lang.String)", "TOT": 8, "UPD": 0, "INS": 7, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.matchQueryParams(org.springframework.util.MultiValueMap,org.springframework.util.MultiValueMap)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.isEqual(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SubdomainRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.code.SubdomainRedirectResolverTests.testRedirectWatchdox()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.code.SubdomainRedirectResolverTests.testRedirectBadWatchdox()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredUserInfoNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredNoUserInfoNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredUserInfoMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredFragmentIgnoredAndStripped()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingIgnoringAdditionalParams()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingDifferentOrder()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsWithDifferentValues()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsPartiallyMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingWithMultipleValuesInRegistered()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingWithParamWithNoValue()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationCodeProviderCookieTests.java", "spoonMethods": [{"spoonMethodName": "demo.AuthorizationCodeProviderCookieTests.testPostToProtectedResource()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "da157a89402eeb2d5d071db3558c3b417bfc3ed0", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["05166db04d61f24067db253cdebd7fea2bcf3d80"], "nameRev": "da157a89402eeb2d5d071db3558c3b417bfc3ed0 tags/2.0.17.RELEASE~1", "commitMessage": "DefaultRedirectResolver matches on userinfo and query\n\nFixes gh-1585\n", "commitDateTime": "2019-02-18 23:02:17", "authoredDateTime": "2019-01-28 23:13:55", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 80, "deletions": 18, "lines": 98}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 117, "deletions": 11, "lines": 128}, {"filePath": "tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultRedirectResolver.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.redirectMatches(java.lang.String,java.lang.String)", "TOT": 57, "UPD": 19, "INS": 3, "MOV": 32, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.obtainMatchingRedirect(java.util.Set,java.lang.String)", "TOT": 8, "UPD": 0, "INS": 7, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.matchQueryParams(org.springframework.util.MultiValueMap,org.springframework.util.MultiValueMap)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.isEqual(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SubdomainRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.code.SubdomainRedirectResolverTests.testRedirectWatchdox()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.code.SubdomainRedirectResolverTests.testRedirectBadWatchdox()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredUserInfoNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredNoUserInfoNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredUserInfoMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredFragmentIgnoredAndStripped()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingIgnoringAdditionalParams()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingDifferentOrder()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsWithDifferentValues()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsNotMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsPartiallyMatching()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingWithMultipleValuesInRegistered()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredQueryParamsMatchingWithParamWithNoValue()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationCodeProviderCookieTests.java", "spoonMethods": [{"spoonMethodName": "demo.AuthorizationCodeProviderCookieTests.testPostToProtectedResource()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["97e0b4ab282acbed3588e05be03d5a0c4dbf3367"], "filteredCommitsReason": {"duplicated": 3, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 80, "deletions": 18, "lines": 98, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 67, "UPD": 19, "INS": 12, "MOV": 32, "DEL": 4, "spoonFilesChanged": 1, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.isEqual(java.lang.String,java.lang.String)", "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.redirectMatches(java.lang.String,java.lang.String)", "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.obtainMatchingRedirect(java.util.Set,java.lang.String)", "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.matchQueryParams(org.springframework.util.MultiValueMap,org.springframework.util.MultiValueMap)"]}, {"title": "JwkSetConverter fails when public key use is \"enc\"", "body": "Backport #1470", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1583", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-18 10:03:54", "closed": "2019-02-18 10:07:03", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JwkSetConverter fails when public key use is \"enc\"", "body": "Backport #1470", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1582", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-18 09:56:38", "closed": "2019-02-18 10:00:18", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JwkSetConverter fails when public key use is \"enc\"", "body": "Backport #1470", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1581", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-18 09:50:22", "closed": "2019-02-18 09:53:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Allow missing \"active\" field in check_token/introspect response", "body": "Backport #1533", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1577", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-15 21:13:15", "closed": "2019-02-15 21:18:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Allow missing \"active\" field in check_token/introspect response", "body": "Backport #1533", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1576", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2019-02-15 21:12:00", "closed": "2019-02-15 21:15:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "KeyStoreKeyFactory: InputStream not being closed", "body": "Running out of file handles", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1527", "user": "jcpretorius", "labels": ["type: bug"], "created": "2018-11-19 10:10:52", "closed": "2019-10-14 00:39:49", "commits": {"3b41fe3630f73172d0e4f50da5fd131dcf687842": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "7ef92b90df15954fbe106749d5db1b9519ef2a1b": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "ca5a421352eb6f5223f4f9d017e055852229b03f": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "3b57bea0639e044a0becb71a2950799263a40864": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 328.0002777777778, "commitsDetails": [{"commitHash": "3b41fe3630f73172d0e4f50da5fd131dcf687842", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["a336fc2a2060f53971b0d23039749f922398116b"], "nameRev": "3b41fe3630f73172d0e4f50da5fd131dcf687842 tags/jwt1.0.11.RELEASE~15", "commitMessage": "Close unreleased/open streams in certain locations\n\nFixes #1527\n", "commitDateTime": "2019-10-13 20:34:02", "authoredDateTime": "2019-06-24 13:27:18", "commitGitStats": [{"filePath": "spring-security-oauth/src/main/java/org/springframework/security/oauth/config/ConsumerDetailsFactoryBean.java", "insertions": 19, "deletions": 3, "lines": 22}, {"filePath": "spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/client/CoreOAuthConsumerSupport.java", "insertions": 26, "deletions": 3, "lines": 29}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/KeyStoreKeyFactory.java", "insertions": 20, "deletions": 3, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConsumerDetailsFactoryBean.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.config.ConsumerDetailsFactoryBean", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth.config.ConsumerDetailsFactoryBean.getObject()", "TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "CoreOAuthConsumerSupport.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport.readResource(org.springframework.security.oauth.consumer.ProtectedResourceDetails,java.net.URL,java.lang.String,org.springframework.security.oauth.consumer.OAuthConsumerToken,java.util.Map,java.util.Map)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport.getTokenFromProvider(org.springframework.security.oauth.consumer.ProtectedResourceDetails,java.net.URL,java.lang.String,org.springframework.security.oauth.consumer.OAuthConsumerToken,java.util.Map)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "KeyStoreKeyFactory.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory.getKeyPair(java.lang.String,char[])", "TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "7ef92b90df15954fbe106749d5db1b9519ef2a1b", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["7614d244b6b96390d8cd2b7c9b950f54529598e1"], "nameRev": "7ef92b90df15954fbe106749d5db1b9519ef2a1b tags/2.2.6.RELEASE~11", "commitMessage": "Close unreleased/open streams in certain locations\n\nFixes #1527\n", "commitDateTime": "2019-10-15 14:21:36", "authoredDateTime": "2019-06-24 13:27:18", "commitGitStats": [{"filePath": "spring-security-oauth/src/main/java/org/springframework/security/oauth/config/ConsumerDetailsFactoryBean.java", "insertions": 19, "deletions": 3, "lines": 22}, {"filePath": "spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/client/CoreOAuthConsumerSupport.java", "insertions": 26, "deletions": 3, "lines": 29}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/KeyStoreKeyFactory.java", "insertions": 20, "deletions": 3, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConsumerDetailsFactoryBean.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.config.ConsumerDetailsFactoryBean", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth.config.ConsumerDetailsFactoryBean.getObject()", "TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "CoreOAuthConsumerSupport.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport.readResource(org.springframework.security.oauth.consumer.ProtectedResourceDetails,java.net.URL,java.lang.String,org.springframework.security.oauth.consumer.OAuthConsumerToken,java.util.Map,java.util.Map)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport.getTokenFromProvider(org.springframework.security.oauth.consumer.ProtectedResourceDetails,java.net.URL,java.lang.String,org.springframework.security.oauth.consumer.OAuthConsumerToken,java.util.Map)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "KeyStoreKeyFactory.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory.getKeyPair(java.lang.String,char[])", "TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "ca5a421352eb6f5223f4f9d017e055852229b03f", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["e06b80caa0c794805e126e396541c61673c0155e"], "nameRev": "ca5a421352eb6f5223f4f9d017e055852229b03f tags/2.1.6.RELEASE~11", "commitMessage": "Close unreleased/open streams in certain locations\n\nFixes #1527\n", "commitDateTime": "2019-10-15 14:44:45", "authoredDateTime": "2019-06-24 13:27:18", "commitGitStats": [{"filePath": "spring-security-oauth/src/main/java/org/springframework/security/oauth/config/ConsumerDetailsFactoryBean.java", "insertions": 19, "deletions": 3, "lines": 22}, {"filePath": "spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/client/CoreOAuthConsumerSupport.java", "insertions": 26, "deletions": 3, "lines": 29}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/KeyStoreKeyFactory.java", "insertions": 20, "deletions": 3, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConsumerDetailsFactoryBean.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.config.ConsumerDetailsFactoryBean", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth.config.ConsumerDetailsFactoryBean.getObject()", "TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "CoreOAuthConsumerSupport.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport.readResource(org.springframework.security.oauth.consumer.ProtectedResourceDetails,java.net.URL,java.lang.String,org.springframework.security.oauth.consumer.OAuthConsumerToken,java.util.Map,java.util.Map)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport.getTokenFromProvider(org.springframework.security.oauth.consumer.ProtectedResourceDetails,java.net.URL,java.lang.String,org.springframework.security.oauth.consumer.OAuthConsumerToken,java.util.Map)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "KeyStoreKeyFactory.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory.getKeyPair(java.lang.String,char[])", "TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "3b57bea0639e044a0becb71a2950799263a40864", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["c5c636e78f3c39d217c2f78307081cfe4aafe9b0"], "nameRev": "3b57bea0639e044a0becb71a2950799263a40864 tags/2.0.19.RELEASE~10", "commitMessage": "Close unreleased/open streams in certain locations\n\nFixes #1527\n", "commitDateTime": "2019-10-15 14:54:57", "authoredDateTime": "2019-06-24 13:27:18", "commitGitStats": [{"filePath": "spring-security-oauth/src/main/java/org/springframework/security/oauth/config/ConsumerDetailsFactoryBean.java", "insertions": 19, "deletions": 3, "lines": 22}, {"filePath": "spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/client/CoreOAuthConsumerSupport.java", "insertions": 26, "deletions": 3, "lines": 29}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/KeyStoreKeyFactory.java", "insertions": 20, "deletions": 3, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConsumerDetailsFactoryBean.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.config.ConsumerDetailsFactoryBean", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth.config.ConsumerDetailsFactoryBean.getObject()", "TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "CoreOAuthConsumerSupport.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport.readResource(org.springframework.security.oauth.consumer.ProtectedResourceDetails,java.net.URL,java.lang.String,org.springframework.security.oauth.consumer.OAuthConsumerToken,java.util.Map,java.util.Map)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport.getTokenFromProvider(org.springframework.security.oauth.consumer.ProtectedResourceDetails,java.net.URL,java.lang.String,org.springframework.security.oauth.consumer.OAuthConsumerToken,java.util.Map)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "KeyStoreKeyFactory.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory.getKeyPair(java.lang.String,char[])", "TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3b41fe3630f73172d0e4f50da5fd131dcf687842"], "filteredCommitsReason": {"duplicated": 3, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 65, "deletions": 9, "lines": 74, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 20, "UPD": 0, "INS": 15, "MOV": 4, "DEL": 1, "spoonFilesChanged": 3, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth/src/main/java/org/springframework/security/oauth/consumer/client", "spring-security-oauth/src/main/java/org/springframework/security/oauth/config", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth.config.ConsumerDetailsFactoryBean.getObject()", "org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory.getKeyPair(java.lang.String,char[])", "org.springframework.security.oauth.config.ConsumerDetailsFactoryBean", "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport", "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport.getTokenFromProvider(org.springframework.security.oauth.consumer.ProtectedResourceDetails,java.net.URL,java.lang.String,org.springframework.security.oauth.consumer.OAuthConsumerToken,java.util.Map)", "org.springframework.security.oauth2.provider.token.store.KeyStoreKeyFactory", "org.springframework.security.oauth.consumer.client.CoreOAuthConsumerSupport.readResource(org.springframework.security.oauth.consumer.ProtectedResourceDetails,java.net.URL,java.lang.String,org.springframework.security.oauth.consumer.OAuthConsumerToken,java.util.Map,java.util.Map)"]}, {"title": "JwkSetConverter fails when public key use is \"enc\"", "body": "I am trying to implement a standalone resource server that validates JWTs. My authorization server is provided by GLUU. The jwks endpoint for my GLUU server returns the following:\r\n\r\n```\r\n{\r\n\"keys\": [\r\n{\r\n\"kid\": \"2f2963f5-2e69-448d-8d4b-a0c573a0ae12\",\r\n\"kty\": \"RSA\",\r\n\"use\": \"sig\",\r\n\"alg\": \"RS256\",\r\n\"exp\": 1561073429125,\r\n\"n\": \"1i27yldjaqy1E43560by_mWC9weI9jilYGIHIYc_1nSM0QdVMg3OU-NVBfAcDZhw0ghJ4uZIyjnVVUBp-QqZfvQ9nMVPcYDb3Fycbag3jQ2zYJfU_lAVOoSQquq_Tk8pa4NlJWIbiEFCpkLlNZVZdP8950aZVJX5Z5AzZq6CognrnItuyjNxyA25r244dZyDiShvQ7AC3nX8u04AKTSu-bVBMuZEtJVb7wH3KDxUzgPSj-xZ2ddA9Af9I-GNKpIj5lM7KVun3GMKoVh_NsLVODAbBsJZpG_wKcN0IuHdtoJG3pCD95JmpaSUIlYbvnHH9y19tC45v5dHXUEyv1x8bw\",\r\n\"e\": \"AQAB\",\r\n\"x5c\": [\r\n\"MIIDBDCCAeygAwIBAgIhALFTvUWtPFdT9hBmo/5AlANq9RBZggZYbYW/2adHb50XMA0GCSqGSIb3DQEBCwUAMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMTgwNjIwMjMzMDE5WhcNMTkwNjIwMjMzMDI5WjAhMR8wHQYDVQQDDBZveEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1i27yldjaqy1E43560by/mWC9weI9jilYGIHIYc/1nSM0QdVMg3OU+NVBfAcDZhw0ghJ4uZIyjnVVUBp+QqZfvQ9nMVPcYDb3Fycbag3jQ2zYJfU/lAVOoSQquq/Tk8pa4NlJWIbiEFCpkLlNZVZdP8950aZVJX5Z5AzZq6CognrnItuyjNxyA25r244dZyDiShvQ7AC3nX8u04AKTSu+bVBMuZEtJVb7wH3KDxUzgPSj+xZ2ddA9Af9I+GNKpIj5lM7KVun3GMKoVh/NsLVODAbBsJZpG/wKcN0IuHdtoJG3pCD95JmpaSUIlYbvnHH9y19tC45v5dHXUEyv1x8bwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBAGvDX4s66Vd6Ca7yVZrRwprICYfD2+UWHhXzWZ1cDxH0nM74tHlKn2F5j5M7lDkr9nNkMGwWRzdUpRSmqBW6b3E4Z4JeZqdlOp3GOwV+FK7R1SL0HY4XVUlBh2WJ+WjPubK9G7PUVhKqFYb7yHHPjZsvTtxxr11J0w3xnUvnBdTmPu4ByawpzhEMwWfREMhKFuTdB1eqg72he5C4cYJy48mAs/OJ25hmG58UDgTcT/qSnKsstsaTbhpnf0ky/TuoT05bjHg4yl8sOlJyPmorScj+PCHmfysrp5GKZ682jL/ffuZUSpv5pwVtzI5pG0Be0DbVmUUcMXWOie0uvGIEWI4=\"\r\n]\r\n},\r\n{\r\n\"kid\": \"e9b10352-37f4-4421-9019-8507b3f41c90\",\r\n\"kty\": \"RSA\",\r\n\"use\": \"sig\",\r\n\"alg\": \"RS384\",\r\n\"exp\": 1561073429125,\r\n\"n\": \"jrl0mOjX6-yqiDKAAGJnGqnxXu_H4EaqoLdlmYjHOtZ8o0GpgXLP0zk9ez6EVb5Guav3SuJvBwnHlZjSNv60EZmjHRWmyr6BBMzTjJh48ofHWcd8TBuNL7UZWo0JU11jeghFIv8zWb7Iny2ovffhSBV03Bf_6K8DAYbgwJsEU4MKNerk2hF0RoBWOC7MBkgFcawTOtyU_Q2M6EGgz0zCFFT5Gg_K0LJTFF9H5R4HxGxYkNsGutEALUSRqgKcvcqFLMP6jOJxa_Gt_EZuNUimniwWtrzGWZ0p0ZCp4uvcuAAjO7_C7D8_O-FPl6iBb44ZlfM8bEPMiOBD3r7CQ8LTqQ\",\r\n\"e\": \"AQAB\",\r\n\"x5c\": [\r\n\"MIIDBDCCAeygAwIBAgIhAKMEhiRjhQYeSYCmTIhRpdOm4UcwNWdKELSjOkiLK9B1MA0GCSqGSIb3DQEBDAUAMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMTgwNjIwMjMzMDE5WhcNMTkwNjIwMjMzMDI5WjAhMR8wHQYDVQQDDBZveEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjrl0mOjX6+yqiDKAAGJnGqnxXu/H4EaqoLdlmYjHOtZ8o0GpgXLP0zk9ez6EVb5Guav3SuJvBwnHlZjSNv60EZmjHRWmyr6BBMzTjJh48ofHWcd8TBuNL7UZWo0JU11jeghFIv8zWb7Iny2ovffhSBV03Bf/6K8DAYbgwJsEU4MKNerk2hF0RoBWOC7MBkgFcawTOtyU/Q2M6EGgz0zCFFT5Gg/K0LJTFF9H5R4HxGxYkNsGutEALUSRqgKcvcqFLMP6jOJxa/Gt/EZuNUimniwWtrzGWZ0p0ZCp4uvcuAAjO7/C7D8/O+FPl6iBb44ZlfM8bEPMiOBD3r7CQ8LTqQIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQEMBQADggEBAIgz69L3jReBq0yKPsZa53LGsL2Fvf68a5tY8NAoDarMkrfv9FTPz5rnkFOr7OV1tH62EXeATzXKcHeICHZlaEYfgIgkOu3WBEKBoTX3ZJDBW8JTaWe6E0aseeXYHz4hnSlWixjcXCTHDQWsM9BraeijZJmw3OEjiZngoU1tXJb5+lRB/0eZPtjY3XB6KxZSSXTREvdpgr7ZAr52+ixav5oAEukdNQcNpV31kurGkzSc4xorKDAZiUJQOdffqXA1p8OzknaaEEVjOmN3Xxmagx95O+IYwUWFAE997l/iV7TdYiR3PKpOcu3buXoA3Z92YqCCGxwzqm8AXjy6c55Y+Nc=\"\r\n]\r\n},\r\n{\r\n\"kid\": \"009b8c46-1323-4c4b-b78a-355949d39dde\",\r\n\"kty\": \"RSA\",\r\n\"use\": \"sig\",\r\n\"alg\": \"RS512\",\r\n\"exp\": 1561073429125,\r\n\"n\": \"tUrE7ywuZrjrS2oNGG55WBOvhcFqsLDSZ3UcIIMmzUxeQzUDQqwDZcgvBtA0cCWtsNYnaXopHj-BRI-Ka-5WHM2OcS_aat-gwouiXMpZn9EoVitP9vmA2iys66StqNI8QmTTth5mSp6TW6qB-MOSddclIFnypQ7OZ2-cLsi_xZhGGqIrSpDRisr4qfKLVtV_0EnlE232RhDssrdEIIzZtx08cA9nyBOwWCVqgjH4SAthiLoUdvZhCFN9q2sGKfBJkwAnLDlXg2kfIlUNgVzGcLPuOA0MGGKPJ3DTlR3wluAljShfF17VBtPtFZWMAKrkoX4Y-OmITLLNUscotKtLhw\",\r\n\"e\": \"AQAB\",\r\n\"x5c\": [\r\n\"MIIDAzCCAeugAwIBAgIgRF8BQ4cKWAQBhO9MB3GYaZuUT8G8g0uSiHrZz+t8TvYwDQYJKoZIhvcNAQENBQAwITEfMB0GA1UEAwwWb3hBdXRoIENBIENlcnRpZmljYXRlczAeFw0xODA2MjAyMzMwMjBaFw0xOTA2MjAyMzMwMjlaMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC1SsTvLC5muOtLag0YbnlYE6+FwWqwsNJndRwggybNTF5DNQNCrANlyC8G0DRwJa2w1idpeikeP4FEj4pr7lYczY5xL9pq36DCi6Jcylmf0ShWK0/2+YDaLKzrpK2o0jxCZNO2HmZKnpNbqoH4w5J11yUgWfKlDs5nb5wuyL/FmEYaoitKkNGKyvip8otW1X/QSeUTbfZGEOyyt0QgjNm3HTxwD2fIE7BYJWqCMfhIC2GIuhR29mEIU32rawYp8EmTACcsOVeDaR8iVQ2BXMZws+44DQwYYo8ncNOVHfCW4CWNKF8XXtUG0+0VlYwAquShfhj46YhMss1Sxyi0q0uHAgMBAAGjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADANBgkqhkiG9w0BAQ0FAAOCAQEAqlT2BrvMDKZzaKtW1zdr1CmUQI6oFY9+xUcfb6mXjC0xv44fENOnWsGp5YKNeQjamVIzucQOwZJ+wGvzgg+uxvG4IxeB/WX4tMZ/2JcRWHYd+rlzvSz5ZwvB46SuuK9TE+GPlyS9IvA72c8rzLR3bPN/r1PjHSDQmZm4pOCFdUg2OIXEldhIHfhG9yhm/EQzRm/Yw+uNL/2s2AM/uNCl37zSP5FSCGK96+vyNSrNApjCod7KvO50txFdf9kuA3TseyWq8nzwJGQXAeeBmL4g78160cfRVGeEWoTHFcV02EIVcH4Tq+U0rmMmn/KyeuztKpkjkvUEid9djpnP7IzYww==\"\r\n]\r\n},\r\n{\r\n\"kid\": \"d99f2757-b2e5-4d14-bf21-e4a8f9ea6398\",\r\n\"kty\": \"EC\",\r\n\"use\": \"sig\",\r\n\"alg\": \"ES256\",\r\n\"exp\": 1561073429125,\r\n\"crv\": \"P-256\",\r\n\"x\": \"80bFoP-e2PtnJF6iTyy5iWm90rhshnZ5tfOjEJQYDC0\",\r\n\"y\": \"dyFd0A2UWTrJ-PS_j-d8XzRHybZ2x2OA_4bG3uvPK9o\",\r\n\"x5c\": [\r\n\"MIIBdzCCAR2gAwIBAgIgRhyihKWwMRIKCVL2hAh7vzqQ60GVbxBj1vqfoacHSzQwCgYIKoZIzj0EAwIwITEfMB0GA1UEAwwWb3hBdXRoIENBIENlcnRpZmljYXRlczAeFw0xODA2MjAyMzMwMjBaFw0xOTA2MjAyMzMwMjlaMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAATzRsWg/57Y+2ckXqJPLLmJab3SuGyGdnm186MQlBgMLXchXdANlFk6yfj0v4/nfF80R8m2dsdjgP+Gxt7rzyvaoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwCgYIKoZIzj0EAwIDSAAwRQIgWgaZZflS+D68jXKGhWPQgG53/VA6maHA3FibGW2ptQACIQDOsOA+9IWRwvFGfS/MtZffhZEpgR2KoLw5GitNLZp29g==\"\r\n]\r\n},\r\n{\r\n\"kid\": \"7344a82f-931d-4ce0-a1c2-65f7a8bc5e32\",\r\n\"kty\": \"EC\",\r\n\"use\": \"sig\",\r\n\"alg\": \"ES384\",\r\n\"exp\": 1561073429125,\r\n\"crv\": \"P-384\",\r\n\"x\": \"2d4XocbehdxgoBLsdeJogqncTwHH-k5EavRRTnbwMu0fextydt64KzsZkuY4V7_J\",\r\n\"y\": \"yJgLRYQ0-QBZMbb9wcMkUuphZ9xpxTjLercNcKjCu4pgy8opmwBwI_QwLF3BvctM\",\r\n\"x5c\": [\r\n\"MIIBtDCCATqgAwIBAgIgWYtvQySU8orYLrK1bscchtbI5h5/Ym9BfVI6c/HKeFYwCgYIKoZIzj0EAwMwITEfMB0GA1UEAwwWb3hBdXRoIENBIENlcnRpZmljYXRlczAeFw0xODA2MjAyMzMwMjBaFw0xOTA2MjAyMzMwMjlaMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATZ3hehxt6F3GCgEux14miCqdxPAcf6TkRq9FFOdvAy7R97G3J23rgrOxmS5jhXv8nImAtFhDT5AFkxtv3BwyRS6mFn3GnFOMt6tw1wqMK7imDLyimbAHAj9DAsXcG9y0yjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADAKBggqhkjOPQQDAwNoADBlAjEAkKJsUiggBnv5F/kBRFnaBnsARflIWdAQNiXSCo9EEZAFM+ekSC6NA1DpAjK1Vu9xAjAkgthSvjuNZskKKCNOiQ+js2SfkUhbWR9DrfTPCfxse4OIyOt4R3hZbohO5J9sOd8=\"\r\n]\r\n},\r\n{\r\n\"kid\": \"63338c83-6bda-4882-982b-03630e138243\",\r\n\"kty\": \"EC\",\r\n\"use\": \"sig\",\r\n\"alg\": \"ES512\",\r\n\"exp\": 1561073429125,\r\n\"crv\": \"P-521\",\r\n\"x\": \"fiy38Wv1OO_aD8DZfU1DkMA88SGbj3J6CMUV4ecBjVIh74pLiH8SFkqRp0odhl0RqpO4iy610Ia-_tCEw1zIVko\",\r\n\"y\": \"X0HlVWdlosnb_rOslW3_ezegml3bsGwgwCV7Nz5KAvHdDUMiF8yQJ5WkPHlMiMjscc7SR_ETjbiSPBVt0-YhxSA\",\r\n\"x5c\": [\r\n\"MIIB/zCCAWCgAwIBAgIgLKYJjILWuhkqSOBGpyENrlIPe7HePbRWEOYeLHyKeI4wCgYIKoZIzj0EAwQwITEfMB0GA1UEAwwWb3hBdXRoIENBIENlcnRpZmljYXRlczAeFw0xODA2MjAyMzMwMjBaFw0xOTA2MjAyMzMwMjlaMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwgZswEAYHKoZIzj0CAQYFK4EEACMDgYYABAB+LLfxa/U479oPwNl9TUOQwDzxIZuPcnoIxRXh5wGNUiHvikuIfxIWSpGnSh2GXRGqk7iLLrXQhr7+0ITDXMhWSgBfQeVVZ2Wiydv+s6yVbf97N6CaXduwbCDAJXs3PkoC8d0NQyIXzJAnlaQ8eUyIyOxxztJH8RONuJI8FW3T5iHFIKMnMCUwIwYDVR0lBBwwGgYIKwYBBQUHAwEGCCsGAQUFBwMCBgRVHSUAMAoGCCqGSM49BAMEA4GMADCBiAJCAac8gRQAl3Uxjj9VdNZFAW+H2t6zShxPhmPDGrozSriR7O+sKSVGybF2O1sG+iJv7eID0Fm3DGnHyKfiJQ4G6+0LAkIBkm+Rd0GW7ueXXP2jESVWEGH5z5bq54EY2jOVo4gZbqVEEORhF4f+ZCigVwaPR88oncISvDvlrmhcEIVOLZsML3o=\"\r\n]\r\n},\r\n{\r\n\"kid\": \"4e40e28f-3c23-4703-a4e5-256701729b9d\",\r\n\"kty\": \"RSA\",\r\n\"use\": \"enc\",\r\n\"alg\": \"RS256\",\r\n\"exp\": 1561073429125,\r\n\"n\": \"rVyl3F36BIXhSNK2ed4BtuptJNc2VC-PbTBp1_EvzKdOZH6hoYAS7aOlZyzSGBJ653jH1omFwwB2m3bABrSrkJWwW2bw4z-20ZuuZTXkhjGTVJF971jXAz7WWu5x2JGNx_Y6xPeE1ikZD81JYKwSYFGJBKxW7P_H_CsmufPbXUty6LAt49BqJTOApP-pInmoJAwEwexoKwZ5lg9pid6bOFAQb_38yX4wlFJ5sIm9xi1zhvOJfLti2-T9Kfldi3hyTTLbt8p2nWZpNydWTlu4Eo6tixl5TdWY2izTNOooll5ix-Y0weV648jAz5nZ61HC0QZzP9phce7D4rVozz-1Qw\",\r\n\"e\": \"AQAB\",\r\n\"x5c\": [\r\n\"MIIDBDCCAeygAwIBAgIhAI4ioYhsQvP+TfanCQ5cBFIMgWTgw1Zz6ZRdKXyaKtx8MA0GCSqGSIb3DQEBCwUAMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMTgwNjIwMjMzMDIwWhcNMTkwNjIwMjMzMDI5WjAhMR8wHQYDVQQDDBZveEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArVyl3F36BIXhSNK2ed4BtuptJNc2VC+PbTBp1/EvzKdOZH6hoYAS7aOlZyzSGBJ653jH1omFwwB2m3bABrSrkJWwW2bw4z+20ZuuZTXkhjGTVJF971jXAz7WWu5x2JGNx/Y6xPeE1ikZD81JYKwSYFGJBKxW7P/H/CsmufPbXUty6LAt49BqJTOApP+pInmoJAwEwexoKwZ5lg9pid6bOFAQb/38yX4wlFJ5sIm9xi1zhvOJfLti2+T9Kfldi3hyTTLbt8p2nWZpNydWTlu4Eo6tixl5TdWY2izTNOooll5ix+Y0weV648jAz5nZ61HC0QZzP9phce7D4rVozz+1QwIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQELBQADggEBABhoycn6/mX07QTWcJ5G9neSjwur7iJxzcI2I3oXvewHQ+Hd5WI5YDh0zIBK5wAmaveUGWVTLHQayh1eOape0u+cHjaK1uoyB9j/PmRXgvVihpxG+oRHR6vWIb2BUzSNZ9zZLlDFhov3ZLeT4qtetj3Zp5WYd4mnTbmqZDHoXOu/ApXvIqCR0wnMZs90fK9ye/gImur2eLi145yyp2t1Q7HP6MqFhyX6lBXETyzJrgIxekJr0gOBrtAx4/DC8gODMsfDJI94QSso/l0EBp5Gmb1auwVT8g8B1yesOJmavcmnDADsqc3GjZTUt4DfDBl5sIulX4lcwEuYAyJV8BhgkNs=\"\r\n]\r\n},\r\n{\r\n\"kid\": \"3f8a2a59-feb4-4ee7-8ba8-6f5f07d8f7a2\",\r\n\"kty\": \"RSA\",\r\n\"use\": \"enc\",\r\n\"alg\": \"RS384\",\r\n\"exp\": 1561073429125,\r\n\"n\": \"pULgKLTWg88gD4YTKM8No1V4iGCMD5kIx7upx2-u1P7Q0i-jxtAlI_RsB88Lo19CSG5ThdVgDlCr7UVayeQgT1929wzBEdH7P19aumsTHi5yvhaqsVQICsjvdYLIkmClOUFB_rFrI-cSeLOXEjAZ4NEiyK878eGecQP4KUgDSSnjd8FMFMjbwr6CbCnPEPs-VHfTDC3g3kEZFtUsqLUbEiVyRASfK8rmNEUgWZJLkpdQjTRoObkey8L55NjYuITbuCJYsEJLUZE_-nTBDoM6FBnpM31nUmbfEDV5jCVhKBbIbnyE2Re06QRgou45OxTHSOmJqbxDDblE_-3HIqhAbQ\",\r\n\"e\": \"AQAB\",\r\n\"x5c\": [\r\n\"MIIDAzCCAeugAwIBAgIgBS7A/cCZHMv5Mw8OO+MWNOz0HKVS6BNNhmtlkiPnNu0wDQYJKoZIhvcNAQEMBQAwITEfMB0GA1UEAwwWb3hBdXRoIENBIENlcnRpZmljYXRlczAeFw0xODA2MjAyMzMwMjBaFw0xOTA2MjAyMzMwMjlaMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQClQuAotNaDzyAPhhMozw2jVXiIYIwPmQjHu6nHb67U/tDSL6PG0CUj9GwHzwujX0JIblOF1WAOUKvtRVrJ5CBPX3b3DMER0fs/X1q6axMeLnK+FqqxVAgKyO91gsiSYKU5QUH+sWsj5xJ4s5cSMBng0SLIrzvx4Z5xA/gpSANJKeN3wUwUyNvCvoJsKc8Q+z5Ud9MMLeDeQRkW1SyotRsSJXJEBJ8ryuY0RSBZkkuSl1CNNGg5uR7Lwvnk2Ni4hNu4IliwQktRkT/6dMEOgzoUGekzfWdSZt8QNXmMJWEoFshufITZF7TpBGCi7jk7FMdI6YmpvEMNuUT/7cciqEBtAgMBAAGjJzAlMCMGA1UdJQQcMBoGCCsGAQUFBwMBBggrBgEFBQcDAgYEVR0lADANBgkqhkiG9w0BAQwFAAOCAQEAF4+jsQVuqNrLi2kYsg0ujeXhOmv4D1V91m0bBx3aViyqLehOBiVq4rUHGqLYuGo5CjCJ+xahBr8JvmXA52I83XViShxopgTNmbTMfB39VcBmcaO/BPXwZ51kVVZNXoSMKNa0jERDTBhPLBUT6k6LMFpvSPpnezyW9X98ZU6xiLGrfPLz3/OxRlHQM8+U1ph0/zTBgExcquf0FvncHJknElhlWAT84PR5X/9JtqGarufNZ6ssC9zMgb8xCs/6RcSiAOORGMpSweEADfXiQhWGSR+1FPW/WcLNpPlvmtWY5+1+wk7zy6eRwJKEN5Qmx4IMLmTy6WYZQmJVuw+zRmUKJA==\"\r\n]\r\n},\r\n{\r\n\"kid\": \"609dd2cc-df78-4a8a-9923-81b171e070cd\",\r\n\"kty\": \"RSA\",\r\n\"use\": \"enc\",\r\n\"alg\": \"RS512\",\r\n\"exp\": 1561073429125,\r\n\"n\": \"vXopfonpYStQEruhiZ_Ja_Ku11QL_dTaQT8lTeXfKX6dqi0OUxJYRjKDyf20tFCAjoyW182YU-N8c-Pq4t-AweAna2_-3e9mn32djBDuN-bvQqAjX3JFW-sp4ZDLlddfbrMgM6XKc2CS1aL3xeH_66V5IWjHH5PMgT110UDzjYNUQryYFZcCZ5KgnmGk24SCc_A4_GpZ4U95Vv5XGqKhloQjbH7bFneUbZbC0vghkTeu8g0Z-o8F3-orC80YDk5ZN_9Nh3Mrg9nUBbDBcZJzSdCeoV-uz6QZQ0k49_LZocqRr7h3LEKFptHSCrYjkGJ345srVHD-BH4ECNc437ch9w\",\r\n\"e\": \"AQAB\",\r\n\"x5c\": [\r\n\"MIIDBDCCAeygAwIBAgIhALG6Qyp6HnHP/cLGFL6wsYU/7oniV2JdJU56Wf0GBbenMA0GCSqGSIb3DQEBDQUAMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMTgwNjIwMjMzMDIwWhcNMTkwNjIwMjMzMDI5WjAhMR8wHQYDVQQDDBZveEF1dGggQ0EgQ2VydGlmaWNhdGVzMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAvXopfonpYStQEruhiZ/Ja/Ku11QL/dTaQT8lTeXfKX6dqi0OUxJYRjKDyf20tFCAjoyW182YU+N8c+Pq4t+AweAna2/+3e9mn32djBDuN+bvQqAjX3JFW+sp4ZDLlddfbrMgM6XKc2CS1aL3xeH/66V5IWjHH5PMgT110UDzjYNUQryYFZcCZ5KgnmGk24SCc/A4/GpZ4U95Vv5XGqKhloQjbH7bFneUbZbC0vghkTeu8g0Z+o8F3+orC80YDk5ZN/9Nh3Mrg9nUBbDBcZJzSdCeoV+uz6QZQ0k49/LZocqRr7h3LEKFptHSCrYjkGJ345srVHD+BH4ECNc437ch9wIDAQABoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwDQYJKoZIhvcNAQENBQADggEBAIvn/AYi52CPwI/e61DIn92QLg/IBu+kJrlGKtP9kgYA+Lryanr0oUEstvisRDhXRT5ldETnmNZRORAiDgkrYYB+d5Q4ZPlOmkCI9+AXscZlVo2BBkcCQz+P7QdKMce6klyJuDSLWITSNrI8K8EwzuBOAKI2sGkDLqDGjULjYQSFiBFfxG7LNDysBF55KlirxGUo9RPV79rqoZu6ktZDYu5o3nahnr+ihM2mPdLcCQ5UTU6SFyHg9JloWIYTKlJAZMF6TCeugAHeyMA1lw0LtBj6Lnmw2hLTop9efh5lx4BUD7EC9wmAjXzEOeXQvlfgUlXCM6aEcHdjQto6FJYqhXo=\"\r\n]\r\n},\r\n{\r\n\"kid\": \"6cfe3619-575c-4fc8-bc2e-93c4679e9597\",\r\n\"kty\": \"EC\",\r\n\"use\": \"enc\",\r\n\"alg\": \"ES256\",\r\n\"exp\": 1561073429125,\r\n\"crv\": \"P-256\",\r\n\"x\": \"ygYaHEJ_K6BsyytrhwpZhCUhxbqdhlrvAQxNiXVCcqU\",\r\n\"y\": \"ueQdTEJKhVztvwvZ1PP9JxsJnUr3tpa__6EB6847Jxo\",\r\n\"x5c\": [\r\n\"MIIBeTCCAR6gAwIBAgIhANyU/vc997Sdp1P+5Um3SSq5Nb1/8zA+I8U62PfyAf3kMAoGCCqGSM49BAMCMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMTgwNjIwMjMzMDIwWhcNMTkwNjIwMjMzMDI5WjAhMR8wHQYDVQQDDBZveEF1dGggQ0EgQ2VydGlmaWNhdGVzMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEygYaHEJ/K6BsyytrhwpZhCUhxbqdhlrvAQxNiXVCcqW55B1MQkqFXO2/C9nU8/0nGwmdSve2lr//oQHrzjsnGqMnMCUwIwYDVR0lBBwwGgYIKwYBBQUHAwEGCCsGAQUFBwMCBgRVHSUAMAoGCCqGSM49BAMCA0kAMEYCIQDo09q+5BQTRYH0S5+PK+EtRoVU15zI6Ft4uKPybYJWFgIhAM6o3ii31FywgTVtfXDkum6bhWDQKRs5RhuFfGYdOc8q\"\r\n]\r\n},\r\n{\r\n\"kid\": \"8ee2b879-5dfe-42ca-b742-1aa93fceff29\",\r\n\"kty\": \"EC\",\r\n\"use\": \"enc\",\r\n\"alg\": \"ES384\",\r\n\"exp\": 1561073429125,\r\n\"crv\": \"P-384\",\r\n\"x\": \"Ih1ypqTnXBLPrglExe8sqdcFz3rrr03DbvR5_Xvw_IwsM2kzce6Hd-Hc790K1s-q\",\r\n\"y\": \"hknuOyqeyjQwclOfx4jMKRGFmpNWmpFEqQAe662VXCxG593cuQu30nhVmCN73JmF\",\r\n\"x5c\": [\r\n\"MIIBtTCCATugAwIBAgIhAPV82DRA3dvertyMp55hHrRb9wpV3o0cd0so18r5GhunMAoGCCqGSM49BAMDMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwHhcNMTgwNjIwMjMzMDIwWhcNMTkwNjIwMjMzMDI5WjAhMR8wHQYDVQQDDBZveEF1dGggQ0EgQ2VydGlmaWNhdGVzMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEIh1ypqTnXBLPrglExe8sqdcFz3rrr03DbvR5/Xvw/IwsM2kzce6Hd+Hc790K1s+qhknuOyqeyjQwclOfx4jMKRGFmpNWmpFEqQAe662VXCxG593cuQu30nhVmCN73JmFoycwJTAjBgNVHSUEHDAaBggrBgEFBQcDAQYIKwYBBQUHAwIGBFUdJQAwCgYIKoZIzj0EAwMDaAAwZQIxAIbLx3RPOZDHMasFfWsvK6nR7WrCks8jHK+MQu5HGJ9K5puaHYTsHwW8FBTu470U4AIwTE7rkPkVWU2sWVQiJ2wdbTfy5KHGngonuntiX/Xhs/UM9ZHgsf8NFyNwztgFUzKZ\"\r\n]\r\n},\r\n{\r\n\"kid\": \"1e67353e-462c-4e12-894a-4abd90c1f00c\",\r\n\"kty\": \"EC\",\r\n\"use\": \"enc\",\r\n\"alg\": \"ES512\",\r\n\"exp\": 1561073429125,\r\n\"crv\": \"P-521\",\r\n\"x\": \"Acw4HDVc5NzzRz0YkfNh2j-X17lNsubsfKw3-xsAvgkSQQR7HL0CcHFprUuEbNWdOQJR5Mhy3EzckMCUkCA2_c1j\",\r\n\"y\": \"zGaAsv7hJE-Vf7LNQKkfL5Al7NwcPc_qGMa1xvWIIKMukmbVs_06TAxc63FBp1RDR5A2d4OpsokKEZOD7wGfH04\",\r\n\"x5c\": [\r\n\"MIIB/zCCAWCgAwIBAgIgW7V/nO5c7fxR3JAke8t6XA4w8l3eUsYlL53M2r9i3PowCgYIKoZIzj0EAwQwITEfMB0GA1UEAwwWb3hBdXRoIENBIENlcnRpZmljYXRlczAeFw0xODA2MjAyMzMwMjBaFw0xOTA2MjAyMzMwMjlaMCExHzAdBgNVBAMMFm94QXV0aCBDQSBDZXJ0aWZpY2F0ZXMwgZswEAYHKoZIzj0CAQYFK4EEACMDgYYABAHMOBw1XOTc80c9GJHzYdo/l9e5TbLm7HysN/sbAL4JEkEEexy9AnBxaa1LhGzVnTkCUeTIctxM3JDAlJAgNv3NYwDMZoCy/uEkT5V/ss1AqR8vkCXs3Bw9z+oYxrXG9Yggoy6SZtWz/TpMDFzrcUGnVENHkDZ3g6myiQoRk4PvAZ8fTqMnMCUwIwYDVR0lBBwwGgYIKwYBBQUHAwEGCCsGAQUFBwMCBgRVHSUAMAoGCCqGSM49BAMEA4GMADCBiAJCAIob2prewofAo0dxNl/RtsP9UKVQhIkBTWkIsSzQjawBzrCMlUD0VeJN7mP5nZmRVAFiP0p2wGKeorHE73IpEou+AkIB+eugeCV4b7gKpgosC9ERkAxGGVtJ5FRHcvisBrasVebhFdw3VwtfV0Nr/3tjLAOlCtXbLaprpchali+Kn+qCh/8=\"\r\n]\r\n}\r\n]\r\n}\r\n```\r\n\r\nIn this resource you can see that for `kty = RSA` it includes both `use == sig` and `use == enc`.\r\n\r\nWhen the `JwkSetConverter` parses this file it ends up failing when it encounters an RSA key with `use == enc`. Refer to: `org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(Map<String, String>)`\r\n\r\nWhy does the implementation explicitly fail when `use != sig`? ", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1470", "user": "troyhart", "labels": ["type: bug"], "created": "2018-08-31 16:49:59", "closed": "2019-02-18 09:32:26", "commits": {"1e5536af65d76696908fc277432f0399e31acc33": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "799fb1a8170deb402faf993b40312f0063938b7f": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "96f85b0500094a690047c1fafd69df58e26a72c1": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "35bc0f20457fb2dbb7e1848e81685beca3827951": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 170.00027777777777, "commitsDetails": [{"commitHash": "1e5536af65d76696908fc277432f0399e31acc33", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["ec78c7ba22e4c321ba24ff3b2b9f354faa212a7d"], "nameRev": "1e5536af65d76696908fc277432f0399e31acc33 tags/2.3.5.RELEASE~4", "commitMessage": "JwkSetConverter excludes enc keys\n\nskip unsupported public key use (enc) without discarding the entire set\n\nFixes gh-1470\n", "commitDateTime": "2019-02-18 04:17:30", "authoredDateTime": "2018-12-21 11:02:00", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 9, "deletions": 2, "lines": 11}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTest.java", "insertions": 7, "deletions": 9, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(java.io.InputStream)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwkSetConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.convertWhenJwkSetStreamHasRSAJwkElementWithENCPublicKeyUseAttributeThenThrowJwkException()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.convertWhenJwkSetStreamHasECJwkElementWithENCPublicKeyUseAttributeThenThrowJwkException()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "799fb1a8170deb402faf993b40312f0063938b7f", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["711894693ff65c17c04731a4f3c1522db8a0b7bb"], "nameRev": "799fb1a8170deb402faf993b40312f0063938b7f tags/2.2.4.RELEASE~4", "commitMessage": "JwkSetConverter excludes enc keys\n\nskip unsupported public key use (enc) without discarding the entire set\n\nFixes gh-1470\n", "commitDateTime": "2019-02-18 04:46:08", "authoredDateTime": "2018-12-21 11:02:00", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 10, "deletions": 2, "lines": 12}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTest.java", "insertions": 4, "deletions": 5, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(java.io.InputStream)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwkSetConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.convertWhenJwkSetStreamHasJwkElementWithENCPublicKeyUseAttributeThenThrowJwkException()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "96f85b0500094a690047c1fafd69df58e26a72c1", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["56cb4dbdc5da9ed47802d95005ca827c216e6700"], "nameRev": "96f85b0500094a690047c1fafd69df58e26a72c1 tags/2.1.4.RELEASE~3", "commitMessage": "JwkSetConverter excludes enc keys\n\nskip unsupported public key use (enc) without discarding the entire set\n\nFixes gh-1470\n", "commitDateTime": "2019-02-18 04:54:55", "authoredDateTime": "2018-12-21 11:02:00", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 10, "deletions": 2, "lines": 12}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTest.java", "insertions": 4, "deletions": 5, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(java.io.InputStream)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwkSetConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.convertWhenJwkSetStreamHasJwkElementWithENCPublicKeyUseAttributeThenThrowJwkException()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "35bc0f20457fb2dbb7e1848e81685beca3827951", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["c1c63f04a41f171bbbf7c5191b1e5ca7d451bab7"], "nameRev": "35bc0f20457fb2dbb7e1848e81685beca3827951 tags/2.0.17.RELEASE~3", "commitMessage": "JwkSetConverter excludes enc keys\n\nskip unsupported public key use (enc) without discarding the entire set\n\nFixes gh-1470\n", "commitDateTime": "2019-02-18 05:02:18", "authoredDateTime": "2018-12-21 11:02:00", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 10, "deletions": 2, "lines": 12}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTest.java", "insertions": 4, "deletions": 5, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(java.io.InputStream)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwkSetConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.convertWhenJwkSetStreamHasJwkElementWithENCPublicKeyUseAttributeThenThrowJwkException()", "TOT": 5, "UPD": 3, "INS": 0, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1e5536af65d76696908fc277432f0399e31acc33"], "filteredCommitsReason": {"duplicated": 3, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 2, "lines": 11, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(java.io.InputStream)"]}, {"title": "RefreshTokenGranter should handle AuthenticationException", "body": "_Similar to gh-1408_\r\n\r\n1. Generate a valid access and refresh token for a user.\r\n2. Deactivate user.\r\n3. Access `oauth` endpoint trying to refresh token.\r\n4.`RefreshTokenGranter` does NOT handle `AccountStatusException`(or `UsernameNotFoundException`) exceptions properly, it bubbles up to the API level and results into `401` response status. This behaviour is confusing, because for the token endpoint `401` means that client authentication failed. \r\n\r\nExpected results:\r\nAt step 3, `RefreshTokenGranter` must convert `AccountStatusException` and `UsernameNotFoundException` to `InvalidGrantException`, similar to what `ResourceOwnerPasswordTokenGranter` does to `AccountStatusException` and `BadCredentialsException`. If the exception if converted to `InvalidGrantException`, then it will set status code to `400`. ", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1410", "user": "aschatten", "labels": ["in: oauth2", "status: backported", "type: bug"], "created": "2018-06-23 01:33:59", "closed": "2020-04-13 00:59:12", "commits": {"a99f2e7cfd08ee9e7c606b75aa9dfbc122019790": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "d66cdb3b8c3b6830bfaa957005e2aed8f36b2366": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 659.0002777777778, "commitsDetails": [{"commitHash": "a99f2e7cfd08ee9e7c606b75aa9dfbc122019790", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["3dc144cbcfb505fb1019d5c5c59e9bb72f9c0538"], "nameRev": "a99f2e7cfd08ee9e7c606b75aa9dfbc122019790 tags/2.5.0.M1~11", "commitMessage": "RefreshTokenGranter handles AuthenticationException\n\nFixes gh-1410\n", "commitDateTime": "2020-04-12 20:47:59", "authoredDateTime": "2018-06-22 18:37:20", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/refresh/RefreshTokenGranter.java", "insertions": 13, "deletions": 2, "lines": 15}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/refresh/RefreshTokenGranterTests.java", "insertions": 124, "deletions": 0, "lines": 124}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RefreshTokenGranter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.refresh.RefreshTokenGranter.getAccessToken(org.springframework.security.oauth2.provider.ClientDetails,org.springframework.security.oauth2.provider.TokenRequest)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "RefreshTokenGranterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.refresh.RefreshTokenGranterTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "d66cdb3b8c3b6830bfaa957005e2aed8f36b2366", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["94373371b7589f60ce4377b477fb529522cd0c2b"], "nameRev": "d66cdb3b8c3b6830bfaa957005e2aed8f36b2366 remotes/origin/2.3.x~2", "commitMessage": "RefreshTokenGranter handles AuthenticationException\n\nFixes gh-1410\n", "commitDateTime": "2020-04-12 20:59:19", "authoredDateTime": "2018-06-22 18:37:20", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/refresh/RefreshTokenGranter.java", "insertions": 13, "deletions": 2, "lines": 15}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/refresh/RefreshTokenGranterTests.java", "insertions": 124, "deletions": 0, "lines": 124}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RefreshTokenGranter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.refresh.RefreshTokenGranter.getAccessToken(org.springframework.security.oauth2.provider.ClientDetails,org.springframework.security.oauth2.provider.TokenRequest)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "RefreshTokenGranterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.refresh.RefreshTokenGranterTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a99f2e7cfd08ee9e7c606b75aa9dfbc122019790"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 2, "lines": 15, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/refresh"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.refresh.RefreshTokenGranter.getAccessToken(org.springframework.security.oauth2.provider.ClientDetails,org.springframework.security.oauth2.provider.TokenRequest)"]}, {"title": "ResourceOwnerPasswordTokenGranter should handle UsernameNotFoundException", "body": "Steps to reproduce:\r\n1. Configure `AbstractUserDetailsAuthenticationProvider` implementation to allow `UsernameNotFoundException` to be throws, by setting `hideUserNotFoundExceptions` to true.\r\n2. Access `oauth` endpoint trying to get a token for a non-existing user. \r\n3. `ResourceOwnerPasswordTokenGranter` does NOT handle `UsernameNotFoundException` exception properly. `UsernameNotFoundException` bubbles to the API level and results into `401` response status. This behaviour is confusing, because for the token endpoint `401` means that client authentication failed. \r\n\r\nExpected results:\r\nAt step 3, `ResourceOwnerPasswordTokenGranter` must convert `UsernameNotFoundException` to `InvalidGrantException`(like it does for `AccountStatusException` and `BadCredentialsException`). If the exception if converted to `InvalidGrantException`, then it will set status code to `400`. ", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1408", "user": "aschatten", "labels": ["in: oauth2", "status: backported", "type: bug"], "created": "2018-06-23 01:09:38", "closed": "2020-04-09 21:20:59", "commits": {"3dc144cbcfb505fb1019d5c5c59e9bb72f9c0538": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "94373371b7589f60ce4377b477fb529522cd0c2b": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 656.0002777777778, "commitsDetails": [{"commitHash": "3dc144cbcfb505fb1019d5c5c59e9bb72f9c0538", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["6e062cbd600cde82a845f673cbc76ea219d597bc"], "nameRev": "3dc144cbcfb505fb1019d5c5c59e9bb72f9c0538 tags/2.5.0.M1~12", "commitMessage": "ResourceOwnerPasswordTokenGranter handles UsernameNotFoundException\n\nFixes gh-1408\n", "commitDateTime": "2020-04-09 17:13:20", "authoredDateTime": "2018-06-22 18:16:48", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/password/ResourceOwnerPasswordTokenGranter.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/password/ResourceOwnerPasswordTokenGranterTests.java", "insertions": 11, "deletions": 0, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ResourceOwnerPasswordTokenGranter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter.getOAuth2Authentication(org.springframework.security.oauth2.provider.ClientDetails,org.springframework.security.oauth2.provider.TokenRequest)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ResourceOwnerPasswordTokenGranterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranterTests.testUsernameNotFound()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "94373371b7589f60ce4377b477fb529522cd0c2b", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["cb4996f6e58325a14bd78d301cd4d0701325b057"], "nameRev": "94373371b7589f60ce4377b477fb529522cd0c2b remotes/origin/2.3.x~3", "commitMessage": "ResourceOwnerPasswordTokenGranter handles UsernameNotFoundException\n\nFixes gh-1408\n", "commitDateTime": "2020-04-09 17:21:03", "authoredDateTime": "2018-06-22 18:16:48", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/password/ResourceOwnerPasswordTokenGranter.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/password/ResourceOwnerPasswordTokenGranterTests.java", "insertions": 11, "deletions": 0, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ResourceOwnerPasswordTokenGranter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter.getOAuth2Authentication(org.springframework.security.oauth2.provider.ClientDetails,org.springframework.security.oauth2.provider.TokenRequest)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ResourceOwnerPasswordTokenGranterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranterTests.testUsernameNotFound()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3dc144cbcfb505fb1019d5c5c59e9bb72f9c0538"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 0, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/password"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.password.ResourceOwnerPasswordTokenGranter.getOAuth2Authentication(org.springframework.security.oauth2.provider.ClientDetails,org.springframework.security.oauth2.provider.TokenRequest)"]}, {"title": "Ensure double-checked locking when loading Jwk definitions", "body": "https://github.com/spring-projects/spring-security-oauth/blob/cc4c0a52086309a6eed3fd8a2304b31055e7c9d7/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java#L89\r\n\r\nJwkDefinitionSource.getDefinitionLoadIfNecessary should check if the definition has been loaded in the synchronized before clearing and loading definitions. The current implementation has the side effect of a second thread waiting for the lock will attempt to also reload the definitions. \r\n\r\nThe following code should prevent this duplicate work.\r\n\r\n```\r\nJwkDefinitionHolder getDefinitionLoadIfNecessary(String keyId) {\r\n\tJwkDefinitionHolder result = this.getDefinition(keyId);\r\n\tif (result != null) {\r\n\t\treturn result;\r\n\t}\r\n\tsynchronized (this.jwkDefinitions) {\r\n\t\tresult = this.getDefinition(keyId);\r\n\t\tif(result != null) {\r\n\t\t\treturn result;\r\n\t\t}\r\n\t\tthis.jwkDefinitions.clear();\r\n\t\tfor (URL jwkSetUrl : jwkSetUrls) {\r\n\t\t\tthis.jwkDefinitions.putAll(loadJwkDefinitions(jwkSetUrl));\r\n\t\t}\r\n\t\treturn this.getDefinition(keyId);\r\n\t}\r\n}\r\n```", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1405", "user": "cgaskill", "labels": ["type: bug"], "created": "2018-06-14 19:30:06", "closed": "2019-02-19 21:49:52", "commits": {"852cec2b6d4b91db8e2e392d714a7bfec4cbf53e": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "af789e0ba2f5403ba3fd754cfdad441a5b550d3a": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 250.00027777777777, "commitsDetails": [{"commitHash": "852cec2b6d4b91db8e2e392d714a7bfec4cbf53e", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["97e0b4ab282acbed3588e05be03d5a0c4dbf3367"], "nameRev": "852cec2b6d4b91db8e2e392d714a7bfec4cbf53e tags/2.3.5.RELEASE~2", "commitMessage": "Double-checked locking when loading Jwk definitions\n\nFixes gh-1405\n", "commitDateTime": "2019-02-19 05:22:04", "authoredDateTime": "2018-08-02 15:47:18", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java", "insertions": 4, "deletions": 0, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkDefinitionSource.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.getDefinitionLoadIfNecessary(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "af789e0ba2f5403ba3fd754cfdad441a5b550d3a", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["b436f745af2be24924ecc68524fd2582bcdfdc38"], "nameRev": "af789e0ba2f5403ba3fd754cfdad441a5b550d3a tags/2.2.4.RELEASE~2", "commitMessage": "Double-checked locking when loading Jwk definitions\n\nFixes gh-1405\n", "commitDateTime": "2019-02-19 05:37:46", "authoredDateTime": "2018-08-02 15:47:18", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java", "insertions": 4, "deletions": 0, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkDefinitionSource.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.getDefinitionLoadIfNecessary(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["852cec2b6d4b91db8e2e392d714a7bfec4cbf53e"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 0, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.getDefinitionLoadIfNecessary(java.lang.String)"]}, {"title": "Sample App SSO Issue", "body": "After logging into tonr2 when I click on \"view my sparklr photos\" and enter login credentials app is throwing this error:\r\n\r\nSparklr OAuth2 Error\r\nThere was a problem with the OAuth2 protocol ( error=\"invalid_request\", error_description=\"At least one redirect_uri must be registered with the client.\" )\r\n\r\nPlease go back to your client application and try again, or contact the owner and ask for support\r\n\r\nBrowser url:\r\nhttp://localhost:8080/sparklr2/oauth/authorize?client_id=tonr&redirect_uri=http://localhost:8080/tonr2/sparklr/photos&response_type=code&scope=read%20write&state=B8YlD3", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1366", "user": "royrajiv", "labels": ["type: bug"], "created": "2018-05-10 08:12:08", "closed": "2018-05-28 14:48:21", "commits": {"8251dfc0e3ca603c358a533c6b7e8cb69ee91372": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 18.00027777777778, "commitsDetails": [{"commitHash": "8251dfc0e3ca603c358a533c6b7e8cb69ee91372", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["95033777dde82c1cc82fb0ceec2307af24818184"], "nameRev": "8251dfc0e3ca603c358a533c6b7e8cb69ee91372 tags/2.3.4.RELEASE~5", "commitMessage": "Fix missing redirect-uri for tonr2 client\n\nFixes gh-1366\n", "commitDateTime": "2018-05-28 10:42:22", "authoredDateTime": "2018-05-28 10:42:22", "commitGitStats": [{"filePath": "samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/config/OAuth2ServerConfig.java", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2ServerConfig.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.examples.sparklr.config.OAuth2ServerConfig.AuthorizationServerConfiguration.configure(org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer)", "TOT": 12, "UPD": 10, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8251dfc0e3ca603c358a533c6b7e8cb69ee91372"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 0, "lines": 1, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 12, "UPD": 10, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth"], "changesInPackagesSPOON": ["org.springframework.security.oauth.examples.sparklr.config.OAuth2ServerConfig.AuthorizationServerConfiguration.configure(org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer)"]}, {"title": "Remove SpelView in WhitelabelApprovalEndpoint", "body": "Backport of #1340", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1362", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2018-05-07 21:18:43", "closed": "2018-05-08 15:13:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Remove SpelView in WhitelabelApprovalEndpoint", "body": "Backport of #1340", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1361", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2018-05-07 21:18:19", "closed": "2018-05-08 16:14:10", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Remove SpelView in WhitelabelApprovalEndpoint", "body": "Backport of #1340", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1360", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2018-05-07 21:17:46", "closed": "2018-05-08 18:58:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultOAuth2RequestAuthenticator should use Bearer", "body": "Backport of #1346", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1359", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2018-05-07 21:14:37", "closed": "2018-05-08 15:12:19", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultOAuth2RequestAuthenticator should use Bearer", "body": "Backport of #1346", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1358", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2018-05-07 21:13:54", "closed": "2018-05-08 16:13:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultOAuth2RequestAuthenticator should use Bearer", "body": "Backport of #1346", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1357", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2018-05-07 21:12:42", "closed": "2018-05-08 18:57:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultOAuth2RequestAuthenticator should use Bearer", "body": "`DefaultOAuth2RequestAuthenticator` should ensure the Authorization request header uses the **Bearer** scheme. The current implementation uses `OAuth2AccessToken.getTokenType()` as-is and if available, which in certain scenarios may be **bearer**.\r\n\r\nAs per [RFC6750](https://tools.ietf.org/html/rfc6750#section-2.1):\r\n\r\n> The syntax for Bearer credentials is as follows:\r\n          b64token    = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\r\n          credentials = **\"Bearer\"** 1*SP b64token\r\n\r\n`OAuth2AccessToken.getTokenType()` is derived by the `token_type` parameter returned in the [Token Response](https://tools.ietf.org/html/rfc6749#section-5.1). This **should not** be used as the authentication scheme for the Authorization Request header.\r\n\r\nThe fix here is to ensure that `DefaultOAuth2RequestAuthenticator` uses **Bearer** as the authentication scheme.\r\n\r\nWe should also consider changing the default for `DefaultOAuth2AccessToken.tokenType` which currently is `OAuth2AccessToken.BEARER_TYPE.toLowerCase()`. However, this is a non-passive change and will likely break current implementations so it may have to wait for a minor release.\r\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1346", "user": "jgrandja", "labels": ["type: bug"], "created": "2018-04-26 13:38:19", "closed": "2018-05-07 21:06:51", "commits": {"70e5ba84ca98b7ab42c1900bdd9fa51b393d611f": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "0411bca3a755a75795feddb66cabdb5572211499": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "360d56b298a185473f937e3f580949ccbd3bd4ca": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "3cae8a2ba6366dc3c10582dd5a171b79de131a9f": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 11.000277777777777, "commitsDetails": [{"commitHash": "70e5ba84ca98b7ab42c1900bdd9fa51b393d611f", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["f9414d549b5341bcac1475e0b5527511444640dc"], "nameRev": "70e5ba84ca98b7ab42c1900bdd9fa51b393d611f tags/2.3.3.RELEASE~2", "commitMessage": "DefaultOAuth2RequestAuthenticator resolves Bearer syntax\n\nFixes gh-1346\n", "commitDateTime": "2018-05-07 16:37:51", "authoredDateTime": "2018-05-07 16:37:51", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticator.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticatorTests.java", "insertions": 53, "deletions": 5, "lines": 58}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultOAuth2RequestAuthenticator.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticator.authenticate(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.OAuth2ClientContext,org.springframework.http.client.ClientHttpRequest)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "DefaultOAuth2RequestAuthenticatorTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.addsAccessToken()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerUppercaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerLowercaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerMixcaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeMACThenUseMAC()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "0411bca3a755a75795feddb66cabdb5572211499", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["0c034e4dfac53c6f736a3d7e858bae37328e0fab"], "nameRev": "0411bca3a755a75795feddb66cabdb5572211499 tags/2.0.15.RELEASE~2", "commitMessage": "DefaultOAuth2RequestAuthenticator resolves Bearer syntax\n\nFixes gh-1346\n", "commitDateTime": "2018-05-07 17:34:56", "authoredDateTime": "2018-05-07 16:37:51", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticator.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticatorTests.java", "insertions": 53, "deletions": 5, "lines": 58}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultOAuth2RequestAuthenticator.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticator.authenticate(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.OAuth2ClientContext,org.springframework.http.client.ClientHttpRequest)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "DefaultOAuth2RequestAuthenticatorTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.addsAccessToken()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerUppercaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerLowercaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerMixcaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeMACThenUseMAC()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "360d56b298a185473f937e3f580949ccbd3bd4ca", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["467ef03a005cc83bf1836f57d56dff9d58d8b445"], "nameRev": "360d56b298a185473f937e3f580949ccbd3bd4ca tags/2.1.2.RELEASE~2", "commitMessage": "DefaultOAuth2RequestAuthenticator resolves Bearer syntax\n\nFixes gh-1346\n", "commitDateTime": "2018-05-07 17:41:50", "authoredDateTime": "2018-05-07 16:37:51", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticator.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticatorTests.java", "insertions": 53, "deletions": 5, "lines": 58}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultOAuth2RequestAuthenticator.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticator.authenticate(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.OAuth2ClientContext,org.springframework.http.client.ClientHttpRequest)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "DefaultOAuth2RequestAuthenticatorTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.addsAccessToken()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerUppercaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerLowercaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerMixcaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeMACThenUseMAC()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "3cae8a2ba6366dc3c10582dd5a171b79de131a9f", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["d99aaf1a56189c420a7e9a398b015f75de7aaeda"], "nameRev": "3cae8a2ba6366dc3c10582dd5a171b79de131a9f tags/2.2.2.RELEASE~2", "commitMessage": "DefaultOAuth2RequestAuthenticator resolves Bearer syntax\n\nFixes gh-1346\n", "commitDateTime": "2018-05-07 18:31:17", "authoredDateTime": "2018-05-07 16:37:51", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticator.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticatorTests.java", "insertions": 53, "deletions": 5, "lines": 58}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultOAuth2RequestAuthenticator.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticator.authenticate(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.OAuth2ClientContext,org.springframework.http.client.ClientHttpRequest)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "DefaultOAuth2RequestAuthenticatorTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.addsAccessToken()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerUppercaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerLowercaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeBearerMixcaseThenUseBearer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticatorTests.authenticateWhenTokenTypeMACThenUseMAC()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["70e5ba84ca98b7ab42c1900bdd9fa51b393d611f"], "filteredCommitsReason": {"duplicated": 3, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 1, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticator.authenticate(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.OAuth2ClientContext,org.springframework.http.client.ClientHttpRequest)"]}, {"title": "Remove SpelView in WhitelabelApprovalEndpoint", "body": "", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1340", "user": "jgrandja", "labels": ["type: bug"], "created": "2018-04-18 14:39:35", "closed": "2018-05-08 19:28:26", "commits": {"1c6815ac1b26fb2f079adbe283c43a7fd0885f3d": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "6b1791179c1092553aa0690da22dac4dff2fc58d": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "8e9792c1963f1aeea81ca618785eb8d71d1cd1d2": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "adb1e6d19c681f394c9513799b81b527b0cb007c": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 20.00027777777778, "commitsDetails": [{"commitHash": "1c6815ac1b26fb2f079adbe283c43a7fd0885f3d", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["0411bca3a755a75795feddb66cabdb5572211499"], "nameRev": "1c6815ac1b26fb2f079adbe283c43a7fd0885f3d tags/2.0.15.RELEASE~1", "commitMessage": "Remove SpelView in WhitelabelApprovalEndpoint\n\nFixes gh-1340\n", "commitDateTime": "2018-05-07 17:35:07", "authoredDateTime": "2018-04-18 20:05:36", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java", "insertions": 0, "deletions": 80, "lines": 80}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java", "insertions": 75, "deletions": 35, "lines": 110}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpoint.java", "insertions": 21, "deletions": 8, "lines": 29}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/SpelViewTests.java", "insertions": 0, "deletions": 67, "lines": 67}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java", "insertions": 63, "deletions": 7, "lines": 70}, {"filePath": "tests/annotation/approval/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/annotation/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/xml/approval/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/xml/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SpelView.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.SpelView", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "WhitelabelApprovalEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.getAccessConfirmation(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 5, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.createTemplate(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 55, "UPD": 9, "INS": 26, "MOV": 14, "DEL": 6}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.createScopes(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 22, "UPD": 5, "INS": 6, "MOV": 9, "DEL": 2}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 4}]}, {"spoonFilePath": "WhitelabelErrorEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint.handleError(javax.servlet.http.HttpServletRequest)", "TOT": 8, "UPD": 1, "INS": 3, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "SpelViewTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.SpelViewTests", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "WhitelabelApprovalEndpointTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithSuspectScope()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithScopesInForm()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithoutScopesInForm()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationCodeProviderTests.java", "spoonMethods": [{"spoonMethodName": "demo.AuthorizationCodeProviderTests.verifyAuthorizationPage(java.lang.String)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "6b1791179c1092553aa0690da22dac4dff2fc58d", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["360d56b298a185473f937e3f580949ccbd3bd4ca"], "nameRev": "6b1791179c1092553aa0690da22dac4dff2fc58d tags/2.1.2.RELEASE~1", "commitMessage": "Remove SpelView in WhitelabelApprovalEndpoint\n\nFixes gh-1340\n", "commitDateTime": "2018-05-07 17:42:00", "authoredDateTime": "2018-04-18 20:05:36", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java", "insertions": 0, "deletions": 80, "lines": 80}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java", "insertions": 75, "deletions": 35, "lines": 110}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpoint.java", "insertions": 21, "deletions": 8, "lines": 29}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/SpelViewTests.java", "insertions": 0, "deletions": 67, "lines": 67}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java", "insertions": 63, "deletions": 7, "lines": 70}, {"filePath": "tests/annotation/approval/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/annotation/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/xml/approval/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/xml/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SpelView.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.SpelView", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "WhitelabelApprovalEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.getAccessConfirmation(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 5, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.createTemplate(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 55, "UPD": 9, "INS": 26, "MOV": 14, "DEL": 6}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.createScopes(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 22, "UPD": 5, "INS": 6, "MOV": 9, "DEL": 2}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 4}]}, {"spoonFilePath": "WhitelabelErrorEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint.handleError(javax.servlet.http.HttpServletRequest)", "TOT": 8, "UPD": 1, "INS": 3, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "SpelViewTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.SpelViewTests", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "WhitelabelApprovalEndpointTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithSuspectScope()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithScopesInForm()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithoutScopesInForm()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationCodeProviderTests.java", "spoonMethods": [{"spoonMethodName": "demo.AuthorizationCodeProviderTests.verifyAuthorizationPage(java.lang.String)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "8e9792c1963f1aeea81ca618785eb8d71d1cd1d2", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["3cae8a2ba6366dc3c10582dd5a171b79de131a9f"], "nameRev": "8e9792c1963f1aeea81ca618785eb8d71d1cd1d2 tags/2.2.2.RELEASE~1", "commitMessage": "Remove SpelView in WhitelabelApprovalEndpoint\n\nFixes gh-1340\n", "commitDateTime": "2018-05-07 18:31:30", "authoredDateTime": "2018-04-18 20:05:36", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java", "insertions": 0, "deletions": 80, "lines": 80}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java", "insertions": 75, "deletions": 35, "lines": 110}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpoint.java", "insertions": 21, "deletions": 8, "lines": 29}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/SpelViewTests.java", "insertions": 0, "deletions": 67, "lines": 67}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java", "insertions": 63, "deletions": 7, "lines": 70}, {"filePath": "tests/annotation/approval/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/annotation/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/xml/approval/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/xml/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SpelView.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.SpelView", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "WhitelabelApprovalEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.getAccessConfirmation(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 5, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.createTemplate(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 55, "UPD": 9, "INS": 26, "MOV": 14, "DEL": 6}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.createScopes(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 22, "UPD": 5, "INS": 6, "MOV": 9, "DEL": 2}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 4}]}, {"spoonFilePath": "WhitelabelErrorEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint.handleError(javax.servlet.http.HttpServletRequest)", "TOT": 8, "UPD": 1, "INS": 3, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "SpelViewTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.SpelViewTests", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "WhitelabelApprovalEndpointTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithSuspectScope()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithScopesInForm()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithoutScopesInForm()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationCodeProviderTests.java", "spoonMethods": [{"spoonMethodName": "demo.AuthorizationCodeProviderTests.verifyAuthorizationPage(java.lang.String)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "adb1e6d19c681f394c9513799b81b527b0cb007c", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["70e5ba84ca98b7ab42c1900bdd9fa51b393d611f"], "nameRev": "adb1e6d19c681f394c9513799b81b527b0cb007c tags/2.3.3.RELEASE~1", "commitMessage": "Remove SpelView in WhitelabelApprovalEndpoint\n\nFixes gh-1340\n", "commitDateTime": "2018-05-07 17:27:54", "authoredDateTime": "2018-04-18 20:05:36", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java", "insertions": 0, "deletions": 80, "lines": 80}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpoint.java", "insertions": 75, "deletions": 35, "lines": 110}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelErrorEndpoint.java", "insertions": 21, "deletions": 8, "lines": 29}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/SpelViewTests.java", "insertions": 0, "deletions": 67, "lines": 67}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/WhitelabelApprovalEndpointTests.java", "insertions": 63, "deletions": 7, "lines": 70}, {"filePath": "tests/annotation/approval/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/annotation/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/xml/approval/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "tests/xml/jdbc/src/test/java/demo/AuthorizationCodeProviderTests.java", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SpelView.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.SpelView", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "WhitelabelApprovalEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.getAccessConfirmation(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 5, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.createTemplate(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 55, "UPD": 9, "INS": 26, "MOV": 14, "DEL": 6}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.createScopes(java.util.Map,javax.servlet.http.HttpServletRequest)", "TOT": 22, "UPD": 5, "INS": 6, "MOV": 9, "DEL": 2}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 4}]}, {"spoonFilePath": "WhitelabelErrorEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint.handleError(javax.servlet.http.HttpServletRequest)", "TOT": 8, "UPD": 1, "INS": 3, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "SpelViewTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.SpelViewTests", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "WhitelabelApprovalEndpointTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithSuspectScope()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithScopesInForm()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpointTests.testApprovalPageWithoutScopesInForm()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationCodeProviderTests.java", "spoonMethods": [{"spoonMethodName": "demo.AuthorizationCodeProviderTests.verifyAuthorizationPage(java.lang.String)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1c6815ac1b26fb2f079adbe283c43a7fd0885f3d"], "filteredCommitsReason": {"duplicated": 3, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 96, "deletions": 123, "lines": 219, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 96, "UPD": 18, "INS": 36, "MOV": 26, "DEL": 16, "spoonFilesChanged": 3, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.getAccessConfirmation(java.util.Map,javax.servlet.http.HttpServletRequest)", "org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint.handleError(javax.servlet.http.HttpServletRequest)", "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.createTemplate(java.util.Map,javax.servlet.http.HttpServletRequest)", "org.springframework.security.oauth2.provider.endpoint.SpelView", "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint", "org.springframework.security.oauth2.provider.endpoint.WhitelabelErrorEndpoint", "org.springframework.security.oauth2.provider.endpoint.WhitelabelApprovalEndpoint.createScopes(java.util.Map,javax.servlet.http.HttpServletRequest)"]}, {"title": "Ensure RedisTokenStore.storeRefreshToken() works with spring-data-redis 2.x", "body": "Related #1319 ", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1335", "user": "jgrandja", "labels": ["type: bug"], "created": "2018-04-12 00:33:10", "closed": "2018-04-12 01:33:23", "commits": {"0c824015d7cca693066ff6c5ed98fcca73e51160": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "0c824015d7cca693066ff6c5ed98fcca73e51160", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["f901cff3128d679c755ac4daec48579c23966f6f"], "nameRev": "0c824015d7cca693066ff6c5ed98fcca73e51160 tags/2.3.2.RELEASE~1", "commitMessage": "Ensure RedisTokenStore.storeRefreshToken() works with spring-data-redis 2.x\n\nFixes gh-1335\n", "commitDateTime": "2018-04-11 20:52:51", "authoredDateTime": "2018-04-11 20:33:37", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStore.java", "insertions": 11, "deletions": 2, "lines": 13}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RedisTokenStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore.storeRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0c824015d7cca693066ff6c5ed98fcca73e51160"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 2, "lines": 13, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore.storeRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.provider.OAuth2Authentication)"]}, {"title": "Ensure exact matching on path in DefaultRedirectResolver", "body": "Backport #1331", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1333", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2018-04-10 00:44:04", "closed": "2018-04-10 00:48:58", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Ensure exact matching on path in DefaultRedirectResolver", "body": "Backport #1331", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1332", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2018-04-10 00:26:08", "closed": "2018-04-10 00:42:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Ensure exact matching on path in DefaultRedirectResolver", "body": "`DefaultRedirectResolver` should perform exact matching on the path component of the `redirect_uri`.", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1331", "user": "jgrandja", "labels": ["type: bug"], "created": "2018-04-09 18:26:45", "closed": "2018-04-10 00:10:04", "commits": {"c055eb6a3c6fc7146f0751800686f194002a5a47": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "d99aaf1a56189c420a7e9a398b015f75de7aaeda": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "467ef03a005cc83bf1836f57d56dff9d58d8b445": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "05166db04d61f24067db253cdebd7fea2bcf3d80": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "c055eb6a3c6fc7146f0751800686f194002a5a47", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["524a9e98dfd3cb8386f64ae73c59f47a66210519"], "nameRev": "c055eb6a3c6fc7146f0751800686f194002a5a47 tags/2.3.1.RELEASE~2", "commitMessage": "Perform exact matching on path in DefaultRedirectResolver\n\nFixes gh-1331\n", "commitDateTime": "2018-04-09 19:55:31", "authoredDateTime": "2018-04-09 12:19:09", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 24, "deletions": 32, "lines": 56}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 22, "deletions": 13, "lines": 35}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/ExactMatchRedirectResolverTests.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "tests/annotation/approval/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java", "insertions": 0, "deletions": 11, "lines": 11}, {"filePath": "tests/annotation/custom-grant/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/custom-grant/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/form/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/jaxb/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/jaxb/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jdbc/src/main/java/demo/Application.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/annotation/jpa/src/main/java/demo/Application.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jpa/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jwt/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/mappings/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/multi/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/vanilla/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/xml/approval/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java", "insertions": 7, "deletions": 24, "lines": 31}, {"filePath": "tests/xml/form/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/jdbc/src/main/resources/schema.sql", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "tests/xml/jwt/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/mappings/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/vanilla/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}, {"commitHash": "d99aaf1a56189c420a7e9a398b015f75de7aaeda", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["a55563daf51dc6d85cd711cf52aa04e1e9392053"], "nameRev": "d99aaf1a56189c420a7e9a398b015f75de7aaeda tags/2.2.2.RELEASE~3", "commitMessage": "Perform exact matching on path in DefaultRedirectResolver\n\nFixes gh-1331\n", "commitDateTime": "2018-04-09 20:37:37", "authoredDateTime": "2018-04-09 12:19:09", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 24, "deletions": 32, "lines": 56}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 22, "deletions": 13, "lines": 35}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/ExactMatchRedirectResolverTests.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "tests/annotation/approval/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java", "insertions": 0, "deletions": 11, "lines": 11}, {"filePath": "tests/annotation/custom-grant/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/custom-grant/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/form/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/jaxb/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/jaxb/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jdbc/src/main/java/demo/Application.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/annotation/jpa/src/main/java/demo/Application.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jpa/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jwt/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/mappings/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/multi/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/vanilla/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/xml/approval/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java", "insertions": 7, "deletions": 24, "lines": 31}, {"filePath": "tests/xml/form/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/jdbc/src/main/resources/schema.sql", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "tests/xml/jwt/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/mappings/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/vanilla/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}, {"commitHash": "467ef03a005cc83bf1836f57d56dff9d58d8b445", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["748e15170bd9dad24d2cb8b2702cf3412b2b1fc8"], "nameRev": "467ef03a005cc83bf1836f57d56dff9d58d8b445 tags/2.1.2.RELEASE~3", "commitMessage": "Perform exact matching on path in DefaultRedirectResolver\n\nFixes gh-1331\n", "commitDateTime": "2018-04-09 20:44:53", "authoredDateTime": "2018-04-09 12:19:09", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 24, "deletions": 32, "lines": 56}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 22, "deletions": 13, "lines": 35}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/ExactMatchRedirectResolverTests.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "tests/annotation/approval/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java", "insertions": 0, "deletions": 11, "lines": 11}, {"filePath": "tests/annotation/custom-grant/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/custom-grant/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/form/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/jaxb/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/jaxb/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jdbc/src/main/java/demo/Application.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/annotation/jpa/src/main/java/demo/Application.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jpa/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jwt/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/mappings/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/multi/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/vanilla/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/xml/approval/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java", "insertions": 7, "deletions": 24, "lines": 31}, {"filePath": "tests/xml/form/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/jdbc/src/main/resources/schema.sql", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "tests/xml/jwt/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/mappings/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/vanilla/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}, {"commitHash": "05166db04d61f24067db253cdebd7fea2bcf3d80", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["35bc0f20457fb2dbb7e1848e81685beca3827951"], "nameRev": "05166db04d61f24067db253cdebd7fea2bcf3d80 tags/2.0.17.RELEASE~2", "commitMessage": "Perform exact matching on path in DefaultRedirectResolver\n\nFixes gh-1331\n", "commitDateTime": "2019-02-18 23:01:02", "authoredDateTime": "2018-04-09 12:19:09", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 24, "deletions": 32, "lines": 56}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 22, "deletions": 13, "lines": 35}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/ExactMatchRedirectResolverTests.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "tests/annotation/approval/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java", "insertions": 0, "deletions": 11, "lines": 11}, {"filePath": "tests/annotation/custom-grant/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/custom-grant/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/form/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/jaxb/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/jaxb/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jdbc/src/main/java/demo/Application.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/annotation/jpa/src/main/java/demo/Application.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jpa/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jpa/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/jwt/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/mappings/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/multi/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/vanilla/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/AuthorizationCodeProviderCookieTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/ImplicitProviderTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/xml/approval/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/common/src/main/java/sparklr/common/AbstractAuthorizationCodeProviderTests.java", "insertions": 7, "deletions": 24, "lines": 31}, {"filePath": "tests/xml/form/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/jdbc/src/main/resources/schema.sql", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "tests/xml/jwt/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/mappings/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "tests/xml/vanilla/src/main/resources/context.xml", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}], "filteredCommits": ["c055eb6a3c6fc7146f0751800686f194002a5a47"], "filteredCommitsReason": {"duplicated": 3, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 37, "deletions": 36, "lines": 73, "gitFilesChange": 12}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["tests/xml/jdbc/src/main/resources/schema.sql", "tests/annotation/mappings/src/main/java/demo", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint", "tests/annotation/jpa/src/main/java/demo", "tests/annotation/custom-grant/src/main/java/demo", "tests/annotation/multi/src/main/java/demo", "tests/annotation/approval/src/main/java/demo", "tests/annotation/jaxb/src/main/java/demo", "tests/annotation/jdbc/src/main/java/demo", "tests/annotation/form/src/main/java/demo", "tests/annotation/vanilla/src/main/java/demo", "tests/annotation/jwt/src/main/java/demo"]}, {"title": "Token response does not include application/json Content-Type", "body": "As per spec, in [Section 5.1. Successful Response](https://tools.ietf.org/html/rfc6749#section-5.1), it states:\r\n\r\n> The parameters are included in the entity-body of the HTTP response  using the \"application/json\" media type...\r\n\r\nHowever, the `TokenEndpoint` does not include the `Content-Type` in the response. This needs to be included in the response and set to **application/json**.\r\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1268", "user": "jgrandja", "labels": ["type: bug"], "created": "2018-01-17 17:03:08", "closed": "2018-02-13 21:12:32", "commits": {"1a3ac6ee5446151f951a8da7f2e4ef7fcf5694d8": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 27.00027777777778, "commitsDetails": [{"commitHash": "1a3ac6ee5446151f951a8da7f2e4ef7fcf5694d8", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["a62250bdba177474e5e9520611c90523463629d2"], "nameRev": "1a3ac6ee5446151f951a8da7f2e4ef7fcf5694d8 tags/2.3.0.RC1~3", "commitMessage": "Token response returns application/json Content-Type\n\nFixes gh-1268\n", "commitDateTime": "2018-02-13 16:06:32", "authoredDateTime": "2018-02-13 15:48:32", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointTests.java", "insertions": 32, "deletions": 5, "lines": 37}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.getResponse(org.springframework.security.oauth2.common.OAuth2AccessToken)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TokenEndpointTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpointTests.testGetAccessTokenWithNoClientId()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpointTests.testGetAccessTokenWithScope()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpointTests.testGetAccessTokenWithSupportedRequestParametersNotPost()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpointTests.testImplicitGrant()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpointTests.testGetAccessTokenReturnsHeaderContentTypeJson()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1a3ac6ee5446151f951a8da7f2e4ef7fcf5694d8"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 0, "lines": 1, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.getResponse(org.springframework.security.oauth2.common.OAuth2AccessToken)"]}, {"title": "MethodNotFoundException occurred while store token with redis", "body": "the exception was\r\n```\r\nHandling error: NestedServletException, Handler dispatch failed; nested exception is java.lang.NoSuchMethodError: org.springframework.data.redis.connection.RedisConnection.set([B[B)V\r\n```\r\n\r\nEnv:\r\n- Spring Boot M6\r\n- Spring Data Redis 2.0.1.RELEASE\r\n- Spring Cloud Finchley.M4\r\n\r\nCode throws which throws exception blow:\r\nline 157 `conn.set(accessKey, serializedAccessToken); `\r\n\r\nhttps://github.com/spring-projects/spring-security-oauth/blob/0c034e4dfac53c6f736a3d7e858bae37328e0fab/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStore.java#L154-L163\r\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1230", "user": "rieonke", "labels": ["type: bug"], "created": "2017-11-21 07:16:17", "closed": "2018-03-27 17:54:24", "commits": {}, "ttf": 126.00027777777778, "commitsDetails": []}, {"title": "Correctly handle when expires_in=0", "body": "Some services ( vk.com \"vkontakte\" for example) responds with \"expires_in:0\" when requesting access_token witch will never expire (scope \"offline\" for vk )\r\nIn this case module produce OAuth2AccessToken instance with isExpired() instantly \"true\"\r\n\r\n ", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1172", "user": "alatushkin", "labels": ["in: oauth2", "status: backported", "type: bug"], "created": "2017-09-27 08:47:39", "closed": "2020-05-11 04:01:14", "commits": {"611854e76db42f46a11556f2d577f93f50a3dd73": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "e5a827818aadb4b0761cff9d0b6da0a1d0dec592": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 956.0002777777778, "commitsDetails": [{"commitHash": "611854e76db42f46a11556f2d577f93f50a3dd73", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["c6e56f1fdd4bbc9ecc3fb9d923e503860aa1c6cd"], "nameRev": "611854e76db42f46a11556f2d577f93f50a3dd73 tags/2.5.0.RC1~3", "commitMessage": "Handle expires_in when 0\n\nFixes gh-1172\n", "commitDateTime": "2020-05-10 23:27:00", "authoredDateTime": "2020-05-08 21:33:33", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2Deserializer.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/BaseOAuth2AccessTokenJacksonTest.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2DeserializerTests.java", "insertions": 7, "deletions": 0, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2AccessTokenJackson2Deserializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.OAuth2AccessTokenJackson2Deserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "BaseOAuth2AccessTokenJacksonTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.BaseOAuth2AccessTokenJacksonTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2AccessTokenJackson2DeserializerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.OAuth2AccessTokenJackson2DeserializerTests.readValueWithZeroExpiresAsNotExpired()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "e5a827818aadb4b0761cff9d0b6da0a1d0dec592", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["3d798919670e9edb78abcc5821f5820910a85979"], "nameRev": "e5a827818aadb4b0761cff9d0b6da0a1d0dec592 remotes/origin/2.4.x~4", "commitMessage": "Handle expires_in when 0\n\nFixes gh-1172\n", "commitDateTime": "2020-05-11 00:01:21", "authoredDateTime": "2020-05-08 21:33:33", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2Deserializer.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/BaseOAuth2AccessTokenJacksonTest.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/OAuth2AccessTokenJackson2DeserializerTests.java", "insertions": 7, "deletions": 0, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2AccessTokenJackson2Deserializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.OAuth2AccessTokenJackson2Deserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "BaseOAuth2AccessTokenJacksonTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.BaseOAuth2AccessTokenJacksonTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2AccessTokenJackson2DeserializerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.OAuth2AccessTokenJackson2DeserializerTests.readValueWithZeroExpiresAsNotExpired()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["611854e76db42f46a11556f2d577f93f50a3dd73"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.common.OAuth2AccessTokenJackson2Deserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)"]}, {"title": "Fix NPE when JWK alg not provided", "body": "Backport #1129", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1137", "user": "jgrandja", "labels": ["type: bug"], "created": "2017-08-14 19:32:00", "closed": "2017-08-14 20:10:55", "commits": {"a59c6ca2440838315a38b97ba3dc729fb965802e": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "a59c6ca2440838315a38b97ba3dc729fb965802e", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["feb1f4051d78723c9e778dd78c59e7822716f6ed"], "nameRev": "a59c6ca2440838315a38b97ba3dc729fb965802e tags/2.0.15.RELEASE~6", "commitMessage": "Fix NPE when JWK alg missing\n\nFixes gh-1137\n", "commitDateTime": "2017-08-14 16:03:15", "authoredDateTime": "2017-08-02 16:49:32", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverter.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverterTest.java", "insertions": 22, "deletions": 0, "lines": 22}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkVerifyingJwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter.decode(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwkVerifyingJwtAccessTokenConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverterTest.decodeWhenJwkAlgorithmNullAndJwtAlgorithmPresentThenDecodeStillSucceeds()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a59c6ca2440838315a38b97ba3dc729fb965802e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter.decode(java.lang.String)"]}, {"title": "Fix NPE when JWK alg not provided", "body": "Backport #1129 ", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1136", "user": "jgrandja", "labels": ["type: bug"], "created": "2017-08-14 19:31:25", "closed": "2017-08-14 19:59:38", "commits": {"8a1e2ebd4b936106506779f60c1ceffa4f8fc790": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "8a1e2ebd4b936106506779f60c1ceffa4f8fc790", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["88c207d8e8287bdcee53501acefab022ef615262"], "nameRev": "8a1e2ebd4b936106506779f60c1ceffa4f8fc790 tags/2.1.2.RELEASE~8", "commitMessage": "Fix NPE when JWK alg missing\n\nFixes gh-1136\n", "commitDateTime": "2017-08-14 15:52:15", "authoredDateTime": "2017-08-02 16:49:32", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverter.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverterTest.java", "insertions": 22, "deletions": 0, "lines": 22}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkVerifyingJwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter.decode(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwkVerifyingJwtAccessTokenConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverterTest.decodeWhenJwkAlgorithmNullAndJwtAlgorithmPresentThenDecodeStillSucceeds()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8a1e2ebd4b936106506779f60c1ceffa4f8fc790"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter.decode(java.lang.String)"]}, {"title": "Fix NPE when JWK alg not provided", "body": "_JwkVerifyingJwtAccessTokenConverter_ throws an NPE when the JWK does not provide the optional \"alg\".  _JwkSetConverter_  was changed in https://github.com/spring-projects/spring-security-oauth/issues/1097 to address this scenario, but  _JwkVerifyingJwtAccessTokenConverter_  attempts to compare the JWT signing algorithm to the JWKS algorithm without verifying the presence of the \"alg\" field within the JWKS.\r\n\r\nPlease see below:\r\n```\r\n\r\nCaused by: java.lang.NullPointerException\r\n\tat org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter.decode(JwkVerifyingJwtAccessTokenConverter.java:114)\r\n\tat org.springframework.security.oauth2.provider.token.store.JwtTokenStore.convertAccessToken(JwtTokenStore.java:88)\r\n\tat org.springframework.security.oauth2.provider.token.store.JwtTokenStore.readAccessToken(JwtTokenStore.java:80)\r\n\tat org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStore.readAccessToken(JwkTokenStore.java:212)\r\n```", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1129", "user": "jsmusgrave", "labels": ["type: bug"], "created": "2017-08-01 20:49:18", "closed": "2017-08-14 19:17:01", "commits": {"1a7cc9d2ed188f76bd339b6551e0220f06f3f3c3": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 12.000277777777777, "commitsDetails": [{"commitHash": "1a7cc9d2ed188f76bd339b6551e0220f06f3f3c3", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["179ec57cb1be8ea9175ad3c1685cd1ff7a4ec631"], "nameRev": "1a7cc9d2ed188f76bd339b6551e0220f06f3f3c3 tags/2.2.1.RELEASE~10", "commitMessage": "Fix NPE when JWK alg missing\n\nFixes gh-1129\n", "commitDateTime": "2017-08-14 15:01:07", "authoredDateTime": "2017-08-02 16:49:32", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverter.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverterTest.java", "insertions": 24, "deletions": 0, "lines": 24}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkVerifyingJwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter.decode(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwkVerifyingJwtAccessTokenConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverterTest.decodeWhenJwkAlgorithmNullAndJwtAlgorithmPresentThenDecodeStillSucceeds()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1a7cc9d2ed188f76bd339b6551e0220f06f3f3c3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter.decode(java.lang.String)"]}, {"title": "JwkSetConverter should not require an alg value", "body": "Backport #1097", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1119", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2017-07-14 20:10:04", "closed": "2017-07-14 20:13:45", "commits": {"88c207d8e8287bdcee53501acefab022ef615262": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "88c207d8e8287bdcee53501acefab022ef615262", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["0d38a03004aa3d3b5757cd4922d7585110f4db5d"], "nameRev": "88c207d8e8287bdcee53501acefab022ef615262 tags/2.1.2.RELEASE~9", "commitMessage": "JWK alg parameter should be optional\n\nFixes gh-1119\n", "commitDateTime": "2017-07-14 16:10:48", "authoredDateTime": "2017-07-13 11:20:53", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTest.java", "insertions": 0, "deletions": 10, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkDefinitionSource.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.createRsaVerifier(org.springframework.security.oauth2.provider.token.store.jwk.RsaJwkDefinition)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(java.util.Map)", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "JwkSetConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.convertWhenJwkSetStreamHasJwkElementWithMissingAlgorithmAttributeThenThrowJwkException()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["88c207d8e8287bdcee53501acefab022ef615262"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 4, "lines": 12, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 2, "MOV": 4, "DEL": 1, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.createRsaVerifier(org.springframework.security.oauth2.provider.token.store.jwk.RsaJwkDefinition)", "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(java.util.Map)"]}, {"title": "JwkSetConverter should not require an alg value", "body": "Backport #1097", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1116", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2017-07-13 15:43:05", "closed": "2017-07-13 15:57:06", "commits": {"feb1f4051d78723c9e778dd78c59e7822716f6ed": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "feb1f4051d78723c9e778dd78c59e7822716f6ed", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["695964f2b44f27e3314d64c37f1c89160c3b8a39"], "nameRev": "feb1f4051d78723c9e778dd78c59e7822716f6ed tags/2.0.15.RELEASE~7", "commitMessage": "JWK alg parameter should be optional\n\nFixes gh-1116\n", "commitDateTime": "2017-07-13 11:47:07", "authoredDateTime": "2017-07-13 11:20:53", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTest.java", "insertions": 0, "deletions": 10, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkDefinitionSource.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.createRsaVerifier(org.springframework.security.oauth2.provider.token.store.jwk.RsaJwkDefinition)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(java.util.Map)", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "JwkSetConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.convertWhenJwkSetStreamHasJwkElementWithMissingAlgorithmAttributeThenThrowJwkException()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["feb1f4051d78723c9e778dd78c59e7822716f6ed"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 4, "lines": 12, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 2, "MOV": 4, "DEL": 1, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.createRsaVerifier(org.springframework.security.oauth2.provider.token.store.jwk.RsaJwkDefinition)", "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(java.util.Map)"]}, {"title": "Potential Race Conditions in JwkDefinitionSource", "body": "There is a potential race condition between the clearing out of the mappings and putting the entries in. This should be a single operation.\r\n\r\n`JwkVerifyingJwtAccessTokenConverter decode` also has a race condition where a `JwkDefinition` might be found, another thread reloads the definitions which no longer contains the key id, then the `SignatureVerifier` is not found but a `JwkDefinition` is.", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1105", "user": "rwinch", "labels": ["in: jwt", "type: bug"], "created": "2017-06-28 21:40:17", "closed": "2017-06-29 14:24:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JwkSetConverter should not require an alg value", "body": "org.springframework.security.oauth2.provider.token.store.jwk.JwkException: unknown (alg) is currently not supported.\r\n\tat org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(JwkSetConverter.java:157) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]\r\n\tat org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createJwkDefinition(JwkSetConverter.java:126) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]\r\n\tat org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(JwkSetConverter.java:90) ~[spring-security-oauth2-2.0.14.RELEASE.jar:na]\r\n\r\nWhen trying to load https://login.microsoftonline.com/common/discovery/keys\r\n\r\nAccording to https://tools.ietf.org/html/rfc7517#page-7, this parameter is optional", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1097", "user": "npombourcq", "labels": ["type: bug"], "created": "2017-06-23 21:17:29", "closed": "2017-07-13 15:37:17", "commits": {"9b7d5767cb07a4e9d643d2d59843821a252f6fd1": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 19.00027777777778, "commitsDetails": [{"commitHash": "9b7d5767cb07a4e9d643d2d59843821a252f6fd1", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["8220da2c50228e0a0e1e893e2c341b2c5e5632bc"], "nameRev": "9b7d5767cb07a4e9d643d2d59843821a252f6fd1 tags/2.2.0.RC1~6", "commitMessage": "JWK alg parameter should be optional\n\nFixes gh-1097\n", "commitDateTime": "2017-07-13 11:22:54", "authoredDateTime": "2017-07-13 11:20:53", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTest.java", "insertions": 0, "deletions": 10, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkDefinitionSource.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.createRsaVerifier(org.springframework.security.oauth2.provider.token.store.jwk.RsaJwkDefinition)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(java.util.Map)", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "JwkSetConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.convertWhenJwkSetStreamHasJwkElementWithMissingAlgorithmAttributeThenThrowJwkException()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9b7d5767cb07a4e9d643d2d59843821a252f6fd1"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 4, "lines": 12, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 2, "MOV": 4, "DEL": 1, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.createRsaVerifier(org.springframework.security.oauth2.provider.token.store.jwk.RsaJwkDefinition)", "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.createRsaJwkDefinition(java.util.Map)"]}, {"title": "JwkSetConverter should handle arrays e.g x5c", "body": "We're trying to use Auth0, but JwkSetConverter is only set up to handle strings, yet x5c is an array (as specified at https://tools.ietf.org/html/rfc7515#section-4.1.6), so the parsing blows up.\r\n\r\nIs the workaround as simple as fix as it may appear (skip the x5 fields)?\r\n\r\n\r\n\r\n\r\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1082", "user": "nealeu", "labels": ["type: bug"], "created": "2017-06-06 11:58:46", "closed": "2017-06-19 14:18:49", "commits": {"65f54ebc8b155b832b24786317cf55529dda95a9": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 13.000277777777777, "commitsDetails": [{"commitHash": "65f54ebc8b155b832b24786317cf55529dda95a9", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["064dbfdc6883792475dffe08142b19b309d5c602"], "nameRev": "65f54ebc8b155b832b24786317cf55529dda95a9 tags/2.2.0.RC1~16", "commitMessage": "JwkSetConverter should handle arrays\n\nFixes gh-1082\n", "commitDateTime": "2017-06-19 10:06:25", "authoredDateTime": "2017-06-15 09:00:12", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 7, "deletions": 3, "lines": 10}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverterTest.java", "insertions": 18, "deletions": 1, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(java.io.InputStream)", "TOT": 7, "UPD": 0, "INS": 1, "MOV": 4, "DEL": 2}]}, {"spoonFilePath": "JwkSetConverterTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.createJwkObject(org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinition$KeyType,java.lang.String,org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinition$PublicKeyUse,org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinition$CryptoAlgorithm,java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.createJwkObject(org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinition$KeyType,java.lang.String,org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinition$PublicKeyUse,org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinition$CryptoAlgorithm,java.lang.String,java.lang.String,java.lang.String[])", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverterTest.convertWhenJwkSetStreamIsValidThenReturnJwkSet()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["65f54ebc8b155b832b24786317cf55529dda95a9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 3, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 1, "MOV": 4, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter.convert(java.io.InputStream)"]}, {"title": "CheckTokenEndpoint must return 'active' attribute", "body": "As per [RFC 7662](https://tools.ietf.org/search/rfc7662#section-2.2), the _active_ attribute of the Introspection Response is required.", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1070", "user": "jgrandja", "labels": ["type: bug"], "created": "2017-05-15 14:58:51", "closed": "2017-05-15 17:52:22", "commits": {"b418cab1f64c3a3dd6def25c75c9fcea26b19b53": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "b418cab1f64c3a3dd6def25c75c9fcea26b19b53", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["1cb6ce40d9d2a2524b1f8473989d7459a8e5bb81"], "nameRev": "b418cab1f64c3a3dd6def25c75c9fcea26b19b53 tags/2.1.1.RELEASE~7", "commitMessage": "CheckTokenEndpoint returns 'active' attribute\n\nFixes gh-1070\n", "commitDateTime": "2017-05-15 12:02:56", "authoredDateTime": "2017-05-15 12:02:56", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpoint.java", "insertions": 6, "deletions": 3, "lines": 9}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/CheckTokenEndpointTest.java", "insertions": 64, "deletions": 0, "lines": 64}], "commitSpoonAstDiffStats": [{"spoonFilePath": "CheckTokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CheckTokenEndpointTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpointTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b418cab1f64c3a3dd6def25c75c9fcea26b19b53"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 3, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(java.lang.String)"]}, {"title": "JwkTokenStore removeAccessToken() should not throw a JwkException on expired JWT", "body": "Backport of #1055", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1064", "user": "jgrandja", "labels": ["type: backport", "type: bug"], "created": "2017-05-08 19:50:02", "closed": "2017-05-08 19:57:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Read RSA PK modulus/exponent as unsigned int from JWK", "body": "Backport of #1010 ", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1056", "user": "rwinch", "labels": ["type: backport", "type: bug"], "created": "2017-05-02 13:30:13", "closed": "2017-05-08 17:52:38", "commits": {"2d7d28de2c3508804549aaf7938b672061825f45": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "2d7d28de2c3508804549aaf7938b672061825f45", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["7304c27fc5fda2c44246bfe602aedd0e84c4e4d1"], "nameRev": "2d7d28de2c3508804549aaf7938b672061825f45 tags/2.0.14.RELEASE~2", "commitMessage": "Read RSA PK modulus/exponent as unsigned int from JWK\n\nFixes gh-1056\n", "commitDateTime": "2017-05-08 13:40:45", "authoredDateTime": "2017-03-08 08:07:42", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSourceTest.java", "insertions": 37, "deletions": 0, "lines": 37}, {"filePath": "spring-security-oauth2/src/test/resources/org/springframework/security/oauth2/provider/token/store/jwk/jwk-set.json", "insertions": 12, "deletions": 0, "lines": 12}, {"filePath": "spring-security-oauth2/src/test/resources/org/springframework/security/oauth2/provider/token/store/jwk/token.jwt", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkDefinitionSource.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.createRsaVerifier(org.springframework.security.oauth2.provider.token.store.jwk.RsaJwkDefinition)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwkDefinitionSourceTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSourceTest.getVerifierWhenModulusMostSignificantBitIs1ThenVerifierStillVerifyContentSignature()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSourceTest.readToken(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2d7d28de2c3508804549aaf7938b672061825f45"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource.createRsaVerifier(org.springframework.security.oauth2.provider.token.store.jwk.RsaJwkDefinition)"]}, {"title": "JwkTokenStore removeAccessToken() should not throw a JwkException on expired JWT", "body": "[JwkTokenStore.removeAccessToken()](https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStore.java#L155) should pass through to the JwtTokenStore delegate (which actually does nothing rather than throw an exception)\r\n\r\nThis is needed in a ResourceServer context since this method is called when an Expired JWT is encountered in [DefaultTokenServices.loadAuthentication()](https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java#L234)", "url": "https://github.com/spring-projects/spring-security-oauth/issues/1055", "user": "barretttucker", "labels": ["type: bug"], "created": "2017-05-01 18:10:31", "closed": "2017-05-08 19:52:54", "commits": {"536de80971a74f76e9eebef921cbdadc5144d46c": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "4c08c636ae6535b1a646b1dc64b261632d4f0c4e": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "536de80971a74f76e9eebef921cbdadc5144d46c", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["0651688c5ef21c85a3a58576380b04870c47b12c"], "nameRev": "536de80971a74f76e9eebef921cbdadc5144d46c tags/jwt1.0.8.RELEASE~2", "commitMessage": "Call delegate when JwkTokenStore.removeAccessToken() called\n\nFixes gh-1055\n", "commitDateTime": "2017-05-08 15:46:13", "authoredDateTime": "2017-05-08 15:46:13", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStore.java", "insertions": 3, "deletions": 4, "lines": 7}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStoreTest.java", "insertions": 14, "deletions": 5, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkTokenStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStore.removeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "JwkTokenStoreTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStoreTest.removeAccessTokenWhenCalledThenThrowJwkException()", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStoreTest.storeAccessTokenWhenCalledThenThrowJwkException()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "4c08c636ae6535b1a646b1dc64b261632d4f0c4e", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["2d7d28de2c3508804549aaf7938b672061825f45"], "nameRev": "4c08c636ae6535b1a646b1dc64b261632d4f0c4e tags/2.0.14.RELEASE~1", "commitMessage": "Call delegate when JwkTokenStore.removeAccessToken() called\n\nFixes gh-1055\n", "commitDateTime": "2017-05-08 15:56:13", "authoredDateTime": "2017-05-08 15:46:13", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStore.java", "insertions": 3, "deletions": 4, "lines": 7}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStoreTest.java", "insertions": 14, "deletions": 5, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkTokenStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStore.removeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "JwkTokenStoreTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStoreTest.removeAccessTokenWhenCalledThenThrowJwkException()", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStoreTest.storeAccessTokenWhenCalledThenThrowJwkException()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["536de80971a74f76e9eebef921cbdadc5144d46c"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 4, "lines": 7, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStore.removeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken)"]}, {"title": "Invalid escape of error descriptions", "body": "Commit: \r\nhttps://github.com/spring-projects/spring-security-oauth/commit/0f43bb8c0de8be261479dc5d88926821f55468ca\r\n\r\nGithub Issue:\r\nhttps://github.com/spring-projects/spring-security-oauth/issues/889\r\n\r\nAccording to the IETF: [OAuth2 RFC](https://tools.ietf.org/html/rfc6749)\r\n\r\n> error_description\r\n>          OPTIONAL.  Human-readable ASCII [USASCII] text providing\r\n>          additional information, used to assist the client developer in\r\n>          understanding the error that occurred.\r\n>          Values for the \"error_description\" parameter **MUST NOT include\r\n>          characters outside the set %x20-21 / %x23-5B / %x5D-7E.**\r\n\r\nA single quote `'` character %x27 is being escaped with `&#39`. The HTML escape is incorrect.", "url": "https://github.com/spring-projects/spring-security-oauth/issues/997", "user": "fhanik", "labels": ["type: bug"], "created": "2017-03-01 22:07:33", "closed": "2019-10-15 16:05:33", "commits": {"9d84370e799ab7b9d7e3559829cd019ac3b72c96": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "36de7876499aa2f47c1d29673d5263c0e561b58f": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "de3e1083ddf331bb4615a267b9e17830d6637b4a": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "eb9e5cfd187d223ea7b24cc00111b797142c1362": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "46d14be2fccba596d7de7f902c06cbab87d84148": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "aad9c90e4c70de9b5e4dff5143062083222d66bf": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "838e352566d6c2045ab42e1858e97ab51703d446": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}, "d03a5df1885940cc9c6a24027f34dd4602986672": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 957.0002777777778, "commitsDetails": [{"commitHash": "9d84370e799ab7b9d7e3559829cd019ac3b72c96", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["ef28e1e4c6b67a18f4a9bdffbfe093747797f16f"], "nameRev": "9d84370e799ab7b9d7e3559829cd019ac3b72c96 tags/jwt1.0.11.RELEASE~9", "commitMessage": "Revert \"Html escape error response\"\n\nThis reverts commit 0f43bb8c0de8be261479dc5d88926821f55468ca.\n\nFixes gh-997\n", "commitDateTime": "2019-10-15 11:57:20", "authoredDateTime": "2019-10-14 20:13:01", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Serializer.java", "insertions": 1, "deletions": 6, "lines": 7}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Serializer.java", "insertions": 1, "deletions": 6, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2ExceptionJackson1Serializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson1Serializer.serialize(org.springframework.security.oauth2.common.exceptions.OAuth2Exception,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}]}, {"spoonFilePath": "OAuth2ExceptionJackson2Serializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Serializer.serialize(org.springframework.security.oauth2.common.exceptions.OAuth2Exception,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "36de7876499aa2f47c1d29673d5263c0e561b58f", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["9d84370e799ab7b9d7e3559829cd019ac3b72c96"], "nameRev": "36de7876499aa2f47c1d29673d5263c0e561b58f tags/jwt1.0.11.RELEASE~8", "commitMessage": "Validate OAuth2Exception error_description\n\nIssue #889 #997\n", "commitDateTime": "2019-10-15 11:57:20", "authoredDateTime": "2019-10-15 07:16:40", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java", "insertions": 27, "deletions": 2, "lines": 29}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionTests.java", "insertions": 40, "deletions": 0, "lines": 40}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Exception.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.assertErrorDescription(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.isErrorDescriptionValid(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.withinTheRangeOf(int,int,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "de3e1083ddf331bb4615a267b9e17830d6637b4a", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["21571c279ca7e9efcbf032f49337ce8420e79af2"], "nameRev": "de3e1083ddf331bb4615a267b9e17830d6637b4a tags/2.2.6.RELEASE~9", "commitMessage": "Revert \"Html escape error response\"\n\nThis reverts commit 0f43bb8c0de8be261479dc5d88926821f55468ca.\n\nFixes gh-997\n", "commitDateTime": "2019-10-15 14:25:08", "authoredDateTime": "2019-10-14 20:13:01", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Serializer.java", "insertions": 1, "deletions": 6, "lines": 7}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Serializer.java", "insertions": 1, "deletions": 6, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2ExceptionJackson1Serializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson1Serializer.serialize(org.springframework.security.oauth2.common.exceptions.OAuth2Exception,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}]}, {"spoonFilePath": "OAuth2ExceptionJackson2Serializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Serializer.serialize(org.springframework.security.oauth2.common.exceptions.OAuth2Exception,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "eb9e5cfd187d223ea7b24cc00111b797142c1362", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["de3e1083ddf331bb4615a267b9e17830d6637b4a"], "nameRev": "eb9e5cfd187d223ea7b24cc00111b797142c1362 tags/2.2.6.RELEASE~8", "commitMessage": "Validate OAuth2Exception error_description\n\nIssue #889 #997\n", "commitDateTime": "2019-10-15 14:25:17", "authoredDateTime": "2019-10-15 07:16:40", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java", "insertions": 27, "deletions": 2, "lines": 29}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionTests.java", "insertions": 40, "deletions": 0, "lines": 40}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Exception.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.assertErrorDescription(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.isErrorDescriptionValid(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.withinTheRangeOf(int,int,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "46d14be2fccba596d7de7f902c06cbab87d84148", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["96a562a7a4938ec54cf5c6832bf71996dd1655ce"], "nameRev": "46d14be2fccba596d7de7f902c06cbab87d84148 tags/2.1.6.RELEASE~9", "commitMessage": "Revert \"Html escape error response\"\n\nThis reverts commit 0f43bb8c0de8be261479dc5d88926821f55468ca.\n\nFixes gh-997\n", "commitDateTime": "2019-10-15 14:45:03", "authoredDateTime": "2019-10-14 20:13:01", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Serializer.java", "insertions": 1, "deletions": 6, "lines": 7}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Serializer.java", "insertions": 1, "deletions": 6, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2ExceptionJackson1Serializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson1Serializer.serialize(org.springframework.security.oauth2.common.exceptions.OAuth2Exception,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}]}, {"spoonFilePath": "OAuth2ExceptionJackson2Serializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Serializer.serialize(org.springframework.security.oauth2.common.exceptions.OAuth2Exception,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "aad9c90e4c70de9b5e4dff5143062083222d66bf", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["46d14be2fccba596d7de7f902c06cbab87d84148"], "nameRev": "aad9c90e4c70de9b5e4dff5143062083222d66bf tags/2.1.6.RELEASE~8", "commitMessage": "Validate OAuth2Exception error_description\n\nIssue #889 #997\n", "commitDateTime": "2019-10-15 14:45:13", "authoredDateTime": "2019-10-15 07:16:40", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java", "insertions": 27, "deletions": 2, "lines": 29}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionTests.java", "insertions": 40, "deletions": 0, "lines": 40}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Exception.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.assertErrorDescription(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.isErrorDescriptionValid(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.withinTheRangeOf(int,int,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "838e352566d6c2045ab42e1858e97ab51703d446", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["4b3141f6bee47ff811c0120479e46991d52a78ea"], "nameRev": "838e352566d6c2045ab42e1858e97ab51703d446 tags/2.0.19.RELEASE~8", "commitMessage": "Revert \"Html escape error response\"\n\nThis reverts commit 0f43bb8c0de8be261479dc5d88926821f55468ca.\n\nFixes gh-997\n", "commitDateTime": "2019-10-15 14:55:31", "authoredDateTime": "2019-10-14 20:13:01", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Serializer.java", "insertions": 1, "deletions": 6, "lines": 7}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Serializer.java", "insertions": 1, "deletions": 6, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2ExceptionJackson1Serializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson1Serializer.serialize(org.springframework.security.oauth2.common.exceptions.OAuth2Exception,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}]}, {"spoonFilePath": "OAuth2ExceptionJackson2Serializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Serializer.serialize(org.springframework.security.oauth2.common.exceptions.OAuth2Exception,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 3}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "d03a5df1885940cc9c6a24027f34dd4602986672", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["838e352566d6c2045ab42e1858e97ab51703d446"], "nameRev": "d03a5df1885940cc9c6a24027f34dd4602986672 tags/2.0.19.RELEASE~7", "commitMessage": "Validate OAuth2Exception error_description\n\nIssue #889 #997\n", "commitDateTime": "2019-10-15 14:55:39", "authoredDateTime": "2019-10-15 07:16:40", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java", "insertions": 27, "deletions": 2, "lines": 29}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionTests.java", "insertions": 40, "deletions": 0, "lines": 40}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Exception.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.assertErrorDescription(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.isErrorDescriptionValid(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.withinTheRangeOf(int,int,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9d84370e799ab7b9d7e3559829cd019ac3b72c96"], "filteredCommitsReason": {"duplicated": 6, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 12, "lines": 14, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 8, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 6, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson1Serializer.serialize(org.springframework.security.oauth2.common.exceptions.OAuth2Exception,org.codehaus.jackson.JsonGenerator,org.codehaus.jackson.map.SerializerProvider)", "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Serializer.serialize(org.springframework.security.oauth2.common.exceptions.OAuth2Exception,com.fasterxml.jackson.core.JsonGenerator,com.fasterxml.jackson.databind.SerializerProvider)"]}, {"title": "unable to use RSA public key without comment (id)", "body": "In `org.springframework.security.jwt.crypto.sign.RsaKeyHelper#parsePublicKey` a key without comment only matches if it has a trailing space.\r\nThis methot is called in `org.springframework.security.jwt.crypto.sign.RsaVerifier#RsaVerifier(java.lang.String)`, but a trailing space is removed by calling `trim()` on the key string.\r\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/949", "user": "mzeibig", "labels": ["in: jwt", "type: bug"], "created": "2017-01-16 09:30:54", "closed": "2020-05-08 13:28:44", "commits": {"0787ed593358a05409dcff12d0d27540f1c965e6": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 1208.0002777777777, "commitsDetails": [{"commitHash": "0787ed593358a05409dcff12d0d27540f1c965e6", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["f384bbfd8b2b3e6f509bc9c9a9209d75a9acb9a1"], "nameRev": "0787ed593358a05409dcff12d0d27540f1c965e6 tags/2.5.0.RC1~5", "commitMessage": "RsaKeyHelper parses public key without comment (id)\n\nFixes gh-949\n", "commitDateTime": "2020-05-08 09:15:04", "authoredDateTime": "2017-01-16 10:59:31", "commitGitStats": [{"filePath": "spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign/RsaKeyHelper.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "spring-security-jwt/src/test/java/org/springframework/security/jwt/crypto/cipher/RsaTestKeyData.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "spring-security-jwt/src/test/java/org/springframework/security/jwt/crypto/sign/RsaSigningTests.java", "insertions": 8, "deletions": 2, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RsaKeyHelper.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.jwt.crypto.sign.RsaKeyHelper", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RsaTestKeyData.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.jwt.crypto.cipher.RsaTestKeyData", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RsaSigningTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.jwt.crypto.sign.RsaSigningTests.rsaVerifierValidKeyWithoutComment()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0787ed593358a05409dcff12d0d27540f1c965e6"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 4, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-jwt/src/main/java/org/springframework/security/jwt/crypto/sign"], "changesInPackagesSPOON": ["org.springframework.security.jwt.crypto.sign.RsaKeyHelper"]}, {"title": "NullPointerException if refresh_token not set", "body": "I did a mistake in one of my clients and forget to set the refresh_token.\r\nI use oauth2 within spring-boot version 1.4.2.RELEASE. I try to get an access-token with a refresh-token but do not set the refresh token:\r\nRequest:\r\n---> POST http://XXX/oauth/token HTTP/1.1\r\nContent-Type: application/x-www-form-urlencoded\r\nAccept: application/json\r\nContent-Length: 24\r\nAuthorization: Basic XXX\r\n\r\ngrant_type=refresh_token\r\n\r\n\r\nResponse:\r\n<--- HTTP/1.1 500 (78ms)\r\nTransfer-Encoding: chunked\r\nX-Frame-Options: DENY\r\nCache-Control: no-store\r\nX-Content-Type-Options: nosniff\r\nConnection: close\r\nPragma: no-cache\r\nX-XSS-Protection: 1; mode=block\r\nX-Application-Context: XXX\r\nDate: Fri, 06 Jan 2017 12:36:41 GMT\r\nContent-Type: application/json;charset=UTF-8\r\n\r\n{\"error\":\"server_error\",\"error_description\":null}\r\n\r\nI think it would be better if the code would be 400 with the description \u201crefresh token not present\u201d or similar.  That would have helped me.\r\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/941", "user": "codemaker219", "labels": ["in: oauth2", "type: bug"], "created": "2017-01-06 12:42:26", "closed": "2020-04-08 19:10:04", "commits": {"bff72a9bf8f12b73f945e4e77f4dd206b3636e83": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "cb4996f6e58325a14bd78d301cd4d0701325b057": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 1188.0002777777777, "commitsDetails": [{"commitHash": "bff72a9bf8f12b73f945e4e77f4dd206b3636e83", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["9c09209f1078b83026f52607ca2282dd8928dcac"], "nameRev": "bff72a9bf8f12b73f945e4e77f4dd206b3636e83 tags/2.5.0.M1~15", "commitMessage": "Fix NPE when refresh_token is not provided\n\nThe NullPointerException can occur when the grant_type is refresh_token\nbut the refresh_token itself is not provided. And the response code\nwould be 500 as it is a server error.\n\nWith this fix, it will return 4xx as it is one of the client side error\nthat missed providing required parameter, refresh_token.\n\nFixes gh-941\n", "commitDateTime": "2020-04-08 15:09:12", "authoredDateTime": "2020-04-03 11:50:56", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointTests.java", "insertions": 38, "deletions": 0, "lines": 38}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.postAccessToken(java.security.Principal,java.util.Map)", "TOT": 6, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.isRefreshTokenRequest(java.util.Map)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "TokenEndpointTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpointTests.testRefreshTokenGrantTypeWithoutRefreshTokenParameter()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpointTests.testGetAccessTokenWithRefreshToken()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "cb4996f6e58325a14bd78d301cd4d0701325b057", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["17d396a187a23ff63dcf61ff1d1d9d0a792c1364"], "nameRev": "cb4996f6e58325a14bd78d301cd4d0701325b057 remotes/origin/2.3.x~4", "commitMessage": "Fix NPE when refresh_token is not provided\n\nThe NullPointerException can occur when the grant_type is refresh_token\nbut the refresh_token itself is not provided. And the response code\nwould be 500 as it is a server error.\n\nWith this fix, it will return 4xx as it is one of the client side error\nthat missed providing required parameter, refresh_token.\n\nFixes gh-941\n", "commitDateTime": "2020-04-08 15:10:16", "authoredDateTime": "2020-04-03 11:50:56", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpointTests.java", "insertions": 38, "deletions": 0, "lines": 38}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.postAccessToken(java.security.Principal,java.util.Map)", "TOT": 6, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.isRefreshTokenRequest(java.util.Map)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "TokenEndpointTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpointTests.testRefreshTokenGrantTypeWithoutRefreshTokenParameter()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpointTests.testGetAccessTokenWithRefreshToken()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bff72a9bf8f12b73f945e4e77f4dd206b3636e83"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 1, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 9, "UPD": 0, "INS": 2, "MOV": 5, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.postAccessToken(java.security.Principal,java.util.Map)", "org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.isRefreshTokenRequest(java.util.Map)"]}, {"title": "Potential NPE in OAuthProviderBeanDefinitionParser", "body": "After updating to Spring Security 4.2, NullPointerException occurs in `OAuthProviderBeanDefinitionParser`. NPE may occur if `BeanDefinition` of a filter has null `beanClassName` property.\r\n\r\n```\r\n2016-12-14 23:46:05,544 ERROR [localhost-startStop-1] <> o.s.w.c.ContextLoader - Context initialization failed\r\norg.springframework.beans.factory.BeanDefinitionStoreException: Unexpected exception parsing XML document from class path resource [webContext.xml]; nested exception is java.lang.NullPointerException\r\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:414) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:336) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:304) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:181) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:217) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:188) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:613) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:514) ~[spring-context-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:444) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:326) ~[spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:107) [spring-web-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4973) [catalina.jar:7.0.54]\r\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5467) [catalina.jar:7.0.54]\r\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150) [catalina.jar:7.0.54]\r\n\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559) [catalina.jar:7.0.54]\r\n\tat org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549) [catalina.jar:7.0.54]\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266) [na:1.8.0_72]\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_72]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_72]\r\n\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_72]\r\nCaused by: java.lang.NullPointerException: null\r\n\tat org.springframework.security.oauth.config.OAuthProviderBeanDefinitionParser.insertIndex(OAuthProviderBeanDefinitionParser.java:206) ~[spring-security-oauth-1.0.5.RELEASE.jar:na]\r\n\tat org.springframework.security.oauth.config.OAuthProviderBeanDefinitionParser.parse(OAuthProviderBeanDefinitionParser.java:180) ~[spring-security-oauth-1.0.5.RELEASE.jar:na]\r\n\tat org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:74) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1411) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1401) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:172) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:142) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:94) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:508) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:392) ~[spring-beans-4.3.4.RELEASE.jar:4.3.4.RELEASE]\r\n\t... 22 common frames omitted\r\n```\r\n\r\nIn Spring Security 4.2, `GrantedAuthorityDefaultsParserUtils.registerWithDefaultRolePrefix()` method generates such a BeanDefinition.\r\n\r\n```Java\r\nclass GrantedAuthorityDefaultsParserUtils {\r\n\r\n\tstatic RootBeanDefinition registerWithDefaultRolePrefix(ParserContext pc, Class<? extends AbstractGrantedAuthorityDefaultsBeanFactory> beanFactoryClass) {\r\n\t\tRootBeanDefinition beanFactoryDefinition = new RootBeanDefinition(beanFactoryClass);\r\n\t\tString beanFactoryRef = pc.getReaderContext().generateBeanName(beanFactoryDefinition);\r\n\t\tpc.getRegistry().registerBeanDefinition(beanFactoryRef, beanFactoryDefinition);\r\n\r\n\t\tRootBeanDefinition bean = new RootBeanDefinition();\r\n\t\tbean.setFactoryBeanName(beanFactoryRef);\r\n\t\tbean.setFactoryMethodName(\"getBean\");\r\n\t\treturn bean;\r\n\t}\r\n...\r\n```", "url": "https://github.com/spring-projects/spring-security-oauth/issues/925", "user": "yehara", "labels": ["in: oauth1", "status: backported", "type: bug"], "created": "2016-12-14 15:25:16", "closed": "2020-05-08 14:20:13", "commits": {"c6e56f1fdd4bbc9ecc3fb9d923e503860aa1c6cd": {"commitGHEventType": "closed", "commitUser": "jgrandja"}, "3d798919670e9edb78abcc5821f5820910a85979": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 1240.0002777777777, "commitsDetails": [{"commitHash": "c6e56f1fdd4bbc9ecc3fb9d923e503860aa1c6cd", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["0787ed593358a05409dcff12d0d27540f1c965e6"], "nameRev": "c6e56f1fdd4bbc9ecc3fb9d923e503860aa1c6cd tags/2.5.0.RC1~4", "commitMessage": "Fix potential NPE in OAuthProviderBeanDefinitionParser\n\nFixes gh-925\n", "commitDateTime": "2020-05-08 10:11:59", "authoredDateTime": "2016-12-15 00:38:08", "commitGitStats": [{"filePath": "spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthProviderBeanDefinitionParser.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuthProviderBeanDefinitionParser.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.config.OAuthProviderBeanDefinitionParser.insertIndex(java.util.List)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "3d798919670e9edb78abcc5821f5820910a85979", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["a72e2b7bbbaf1f444aa85e489ef6125da45735b5"], "nameRev": "3d798919670e9edb78abcc5821f5820910a85979 remotes/origin/2.4.x~5", "commitMessage": "Fix potential NPE in OAuthProviderBeanDefinitionParser\n\nFixes gh-925\n", "commitDateTime": "2020-05-08 10:20:46", "authoredDateTime": "2016-12-15 00:38:08", "commitGitStats": [{"filePath": "spring-security-oauth/src/main/java/org/springframework/security/oauth/config/OAuthProviderBeanDefinitionParser.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuthProviderBeanDefinitionParser.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.config.OAuthProviderBeanDefinitionParser.insertIndex(java.util.List)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c6e56f1fdd4bbc9ecc3fb9d923e503860aa1c6cd"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth/src/main/java/org/springframework/security/oauth/config"], "changesInPackagesSPOON": ["org.springframework.security.oauth.config.OAuthProviderBeanDefinitionParser.insertIndex(java.util.List)"]}, {"title": "OAuth2ErrorHandler incorrectly handles 'access_denied'", "body": "The current implementation of `OAuth2ErrorHandler` does not handle **_'access_denied'_** errors correctly.\n\nGiven the following response body:\n\n`{\"error\":\"access_denied\", \"error_description\":\"some error message\"}`\n\n`OAuth2ErrorHandler` will always throw a `UserDeniedAuthorizationException` ignoring the evaluation of the _Http Status_.\n\nThis scenario is correct when `HttpStatus.400`, however, incorrect when `HttpStatus.403`.\n\nIn the scenario where `HttpStatus.403`, it should throw a `OAuth2AccessDeniedException` instead.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/875", "user": "jgrandja", "labels": ["type: bug"], "created": "2016-10-10 18:09:48", "closed": "2016-10-10 18:49:58", "commits": {"f7cef65e03033297672936e4f5f4ce2dbb230819": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f7cef65e03033297672936e4f5f4ce2dbb230819", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["c4c2a80bde3c9591b1a9810ce393171f468ff579"], "nameRev": "f7cef65e03033297672936e4f5f4ce2dbb230819 tags/2.0.12.RELEASE~10", "commitMessage": "OAuth2ErrorHandler correctly handles 'access_denied'\n\nFixes gh-875\n", "commitDateTime": "2016-10-10 14:25:28", "authoredDateTime": "2016-10-10 14:25:28", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/http/OAuth2ErrorHandler.java", "insertions": 18, "deletions": 15, "lines": 33}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/http/OAuth2ErrorHandlerTests.java", "insertions": 32, "deletions": 6, "lines": 38}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2ErrorHandler.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.http.OAuth2ErrorHandler", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.http.OAuth2ErrorHandler.handleError(org.springframework.http.client.ClientHttpResponse)", "TOT": 6, "UPD": 5, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2ErrorHandlerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.http.OAuth2ErrorHandlerTests.testHandleErrorWhenAccessDeniedMessageAndStatus400ThenThrowsUserDeniedAuthorizationException()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.http.OAuth2ErrorHandlerTests.testHandleErrorWhenAccessDeniedMessageAndStatus403ThenThrowsOAuth2AccessDeniedException()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f7cef65e03033297672936e4f5f4ce2dbb230819"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 18, "deletions": 15, "lines": 33, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 10, "UPD": 9, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/http"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.client.http.OAuth2ErrorHandler", "org.springframework.security.oauth2.client.http.OAuth2ErrorHandler.handleError(org.springframework.http.client.ClientHttpResponse)"]}, {"title": "Inconsistent generation of `authentication_id`", "body": "If you subclass `DefaultAuthenticationKeyGenerator` and override the method `extractKey(...)` and make it return a debuggable key like below: \n\n``` Java\nMap<String, String> values = new LinkedHashMap<String, String>();\nOAuth2Request authorizationRequest = authentication.getOAuth2Request();\nif (!authentication.isClientOnly()) {\n   values.put(USERNAME, authentication.getName());\n}\nvalues.put(CLIENT_ID, authorizationRequest.getClientId());\nif (authorizationRequest.getScope() != null) {\n  values.put(SCOPE, OAuth2Utils.formatParameterList(authorizationRequest.getScope()));\n}\nreturn values.toString();\n```\n\nYou will see the `scopes` are some times out of order so the `authentication_id` will have a different checksum value.\n\nThe is caused by the `BaseRequest.getScope()` always returning a `HashSet`. From my perspective the proper fix is to always sort the scopes when generating the id so regardless what kind of collection we are given the results would remain the same.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/874", "user": "born2snipe", "labels": ["type: bug"], "created": "2016-10-10 14:57:50", "closed": "2016-10-20 19:52:42", "commits": {"dd369f2b48fe46a6ac32e57abffa2cdbfa75b392": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "dd369f2b48fe46a6ac32e57abffa2cdbfa75b392", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["165fc6a6495b0ca1acda481cd125f551ffbae0d0"], "nameRev": "dd369f2b48fe46a6ac32e57abffa2cdbfa75b392 tags/2.0.12.RELEASE~3", "commitMessage": "Sort scopes before generating key\n\nUpdated to always sort the scopes set before generating the checksum\nto ensure regardless where we got the scope set from the checksum\noutcome will remain the same\n\nFixes gh-874\n", "commitDateTime": "2016-10-20 15:34:24", "authoredDateTime": "2016-10-07 14:47:49", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/MapDigester.java", "insertions": 27, "deletions": 0, "lines": 27}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAuthenticationKeyGenerator.java", "insertions": 9, "deletions": 23, "lines": 32}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/DefaultAuthenticationKeyGeneratorTest.java", "insertions": 111, "deletions": 0, "lines": 111}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MapDigester.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.util.MapDigester", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultAuthenticationKeyGenerator.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGenerator.extractKey(org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 8, "UPD": 1, "INS": 2, "MOV": 2, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGenerator", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultAuthenticationKeyGeneratorTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGeneratorTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["dd369f2b48fe46a6ac32e57abffa2cdbfa75b392"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 36, "deletions": 23, "lines": 59, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 10, "UPD": 1, "INS": 4, "MOV": 2, "DEL": 3, "spoonFilesChanged": 2, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.common.util.MapDigester", "org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGenerator", "org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGenerator.extractKey(org.springframework.security.oauth2.provider.OAuth2Authentication)"]}, {"title": "RemoteTokenServices.loadAuthentication() should not check for client_id", "body": "Per [RFC 6749](https://tools.ietf.org/html/rfc6749#section-7) (which doesn't address the topic) and [RFC 7662](https://tools.ietf.org/html/rfc7662#section-2.2) (which explicitly permits this), a valid _check token_ response from the authorization server might not contain a `client_id`.  Therefore, it isn't appropriate for `RemoteTokenServices.loadAuthentication()` to validate this.  Rather, the contents of a token from an otherwise valid (i.e., non-error) response is the business of, say, `OAuth2AuthenticationManager.authenticate()`.  The check currently in place limits the usefulness of `RemoteTokenServices`, especially for bearer tokens.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/838", "user": "mekangas", "labels": ["type: bug"], "created": "2016-09-02 14:12:30", "closed": "2017-05-15 17:52:22", "commits": {"f1a9b976389672ff94dfe697d8315256eabc5bf3": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 255.00027777777777, "commitsDetails": [{"commitHash": "f1a9b976389672ff94dfe697d8315256eabc5bf3", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["b418cab1f64c3a3dd6def25c75c9fcea26b19b53"], "nameRev": "f1a9b976389672ff94dfe697d8315256eabc5bf3 tags/2.1.1.RELEASE~6", "commitMessage": "RemoteTokenServices validates 'active' attribute\n\nFixes gh-838\n", "commitDateTime": "2017-05-15 12:41:22", "authoredDateTime": "2017-05-12 17:19:50", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/RemoteTokenServices.java", "insertions": 6, "deletions": 2, "lines": 8}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/RemoteTokenServicesTest.java", "insertions": 92, "deletions": 0, "lines": 92}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RemoteTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.RemoteTokenServices.loadAuthentication(java.lang.String)", "TOT": 5, "UPD": 1, "INS": 1, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "RemoteTokenServicesTest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.RemoteTokenServicesTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f1a9b976389672ff94dfe697d8315256eabc5bf3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 2, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 5, "UPD": 1, "INS": 1, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.RemoteTokenServices.loadAuthentication(java.lang.String)"]}, {"title": "Empty scopes in AC when token endpoint responds with missing scope", "body": "As of https://tools.ietf.org/html/rfc6749#section-5.1, scope is optional in token endpoint response.\nIf missing, then scopes should be identical to the scopes requested by the Client.\n\nThe problem is that Spring OAuth initializes a context with no scopes in this case.\n\nI'm using Spring OAuth 2.0.10 and using this config : \n\n```\nsecurity:\n  oauth2:\n    client:\n      clientId: TsEXSAJg5fSKPA\n      clientSecret: yJhVPAgt1ZEnSNbGFbqx2g\n      scope: openid refreshToken hello.say\n      access-token-uri: http://localhost:9081/oidc/oauth2/token\n      user-authorization-uri: http://localhost:9081/oidc/idp/authorize\n      clientAuthenticationScheme: form\n    resource:\n      id: openid\n      scope: openid refreshToken hello.say\n      serviceId: ${PREFIX:}resource\n      userInfoUri: http://localhost:9081/oidc/users/userinfo\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/828", "user": "gonzalad", "labels": ["status: declined", "type: bug"], "created": "2016-08-23 14:46:26", "closed": "2016-10-12 20:38:19", "commits": {}, "ttf": 50.000277777777775, "commitsDetails": []}, {"title": "grant_type=refresh_token doesn't replace existing refreshToken", "body": "I'm using Spring OAuth 2.0.10.\n\nI have an OAuth Application Client.\nWhen my access token (AT) expires, Spring OAuth uses the refresh token (RT) to get a new AT from the Authorization Server (AS).\nProblem is if the AS returns a new RT along the new AT, Spring OAuth doesn't pick the new RT and continues using the old RT.\nSo on next refresh, I'll get an error.\n\nThis is due to https://github.com/spring-projects/spring-security-oauth/blob/b055772adbb9c10497b1077a0480bf2c2649fb04/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChain.java#L166.\n\nIt should check if there's a RT in the AS response.\nIf no, just keep using the old RT. If yes, use the new RT.\n\nIn my scenario, here's the request to the token endpoint :  \n\n```\nPOST /oidc/oauth2/token HTTP/1.1\ngrant_type=refresh_token&refresh_token=90a6e10e2801925583b69ba076c195\n```\n\nAnd the response : \n\n```\n{\n   \"access_token\":\"b6f54d7326354cdfb12227c96b6894a\",\n   \"token_type\":\"Bearer\",\n   \"expires_in\":3600,\n   \"scope\":\"openid hello.say\",\n   \"refresh_token\":\"e2f9d5d05ed793d2b096a59dcde10e2\",\n   \"id_token\":\"eyJhbGciOiJSUzI1NiJ9.eyJwcmVmZXJyZWRfdXNlcm5hbWUiOiJhbGljZSIsInN1YiI6IkNHUjBXTEpaNFdEb1p6ZXExM3h3UXciLCJpYXQiOjE0NzAyOTUxNDgsImV4cCI6MTQ3MDI5ODc0NywiaXNzIjoiYWNjb3VudHMudGFsZW5kLmNvbSIsImdpdmVuX25hbWUiOiJhbGljZSIsImZhbWlseV9uYW1lIjoiYWxpY2UiLCJlbWFpbCI6ImFsaWNlQGdtYWlsLmNvbSIsIm5hbWUiOiJhbGljZSBhbGljZSIsImF1ZCI6IkRCUW91c1N5OFpLNEFBIiwiYXpwIjoiREJRb3VzU3k4Wks0QUEiLCJhdF9oYXNoIjoiU2pyZkF4N2ozM2VvRWF4Vi1JeXRIQSJ9.XxTitaQ5RO7MKfphbKjb0cErBHLDTimj1UTYkYRN1M_EhDnS6TvSHGoryCwMhQ_yANdWOeqZeX_IUmQu2Wj549d_HpLAqzlzrzc1SAbd0nucjWoH3tcCZ2WsuOLigZvhJZpvyj-v-Z2Ov8usk_-fXAP0e-p-MpvGinQ3op-BJQARq2ktM07hQTs8tcVaekpMrjplu-MlxNmqeKSMOQI2TERFZnQRfIYFTQvbCm7hxIs1YJoHnFAh2R_TA_14AJYMBRKXI1yi_EvdJvBkfh-3b7Dxr4pIRIty6aRcsys_9jqF0y4Wdw9Dq6R3GgWgSgvOuyDxq5rmVaR7jLkSw2HVDw\"\n}\n```\n\nSpring OAuth keeps using the old RT (90a6e10e2801925583b69ba076c195) and not the new one (e2f9d5d05ed793d2b096a59dcde10e2).\n\nExtract from OAuth2 specs : \nSee https://tools.ietf.org/html/rfc6749#section-6\n\n> The authorization server MAY issue a new refresh token, in which case the client MUST discard the old refresh token and replace it with the new refresh token.  The authorization server MAY revoke the old refresh token after issuing a new refresh token to the client.  If a new refresh token is issued, the refresh token scope MUST be identical to that of the refresh token included by the client in the request.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/816", "user": "gonzalad", "labels": ["type: bug"], "created": "2016-08-04 13:07:53", "closed": "2016-09-22 12:53:32", "commits": {"fdb83727f28c59664b2b05aa7d90f9c6f1fc6d17": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 48.000277777777775, "commitsDetails": [{"commitHash": "fdb83727f28c59664b2b05aa7d90f9c6f1fc6d17", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["3861cb54ff6fad6e91d361c7ebf8cd2e2275aa36"], "nameRev": "fdb83727f28c59664b2b05aa7d90f9c6f1fc6d17 tags/2.0.12.RELEASE~13", "commitMessage": "Use incoming refresh token if it exists, otherwise revert to old one\n\nBefore this change the old refresh token was always retained after using\nit, discarding a new value that might be coming in from the auth server.\nMostly clients that use Spring Security auth servers wouldn't notice\nbecause the reuseRefreshTokens flag is true by default in the server.\n\nFixes gh-816\n", "commitDateTime": "2016-09-22 13:51:49", "authoredDateTime": "2016-09-22 13:51:49", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChain.java", "insertions": 32, "deletions": 19, "lines": 51}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChainTests.java", "insertions": 68, "deletions": 20, "lines": 88}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AccessTokenProviderChain.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChain.refreshAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.client.token.AccessTokenRequest)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "AccessTokenProviderChainTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChainTests.testRefreshAccessTokenTwicePreserveRefreshToken()", "TOT": 39, "UPD": 3, "INS": 1, "MOV": 34, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChainTests.testRefreshAccessTokenReplacingNullValue()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChainTests.testRefreshAccessTokenKeepingOldValue()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChainTests.getExpiredToken()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChainTests.getTokenProvider(org.springframework.security.oauth2.common.DefaultOAuth2AccessToken,org.springframework.security.oauth2.common.DefaultOAuth2AccessToken)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fdb83727f28c59664b2b05aa7d90f9c6f1fc6d17"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 32, "deletions": 19, "lines": 51, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.client.token.AccessTokenProviderChain.refreshAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.client.token.AccessTokenRequest)"]}, {"title": "Authorization Server and OAuth2 Client don't agree on HTTP status codes", "body": "I've setup a basic test showcasing the issue that I'm seeing and the results that I would have expected. The test case that fails specifically is the `access_admin_forbidden` test. The gist is that the server returns a 403 response code from the denied access, but when the client is processing the response it creates a UserDeniedAuthorizationException whose status code is set to 400. There appears to be a discrepancy, but I'd like to solicit some feedback before creating a PR.\n\n``` java\npackage demo.oauth;\n\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.test.SpringApplicationConfiguration;\nimport org.springframework.boot.test.TestRestTemplate;\nimport org.springframework.boot.test.WebIntegrationTest;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.oauth2.client.OAuth2RestTemplate;\nimport org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails;\nimport org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableAuthorizationServer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;\nimport org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;\nimport org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\nimport static org.junit.Assert.assertEquals;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@WebIntegrationTest(randomPort = true)\n@SpringApplicationConfiguration(classes = DemoOAuth2Application.class)\npublic class DemoOAuth2ApplicationTests {\n    @Value(\"${local.server.port}\")\n    private int port;\n\n    @Test\n    public void contextLoads() {\n    }\n\n    @Test\n    public void access_open_granted() {\n        TestRestTemplate rest = new TestRestTemplate();\n\n        ResponseEntity<String> response = rest.getForEntity(\"http://localhost:\" + this.port + \"/open\", String.class);\n\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertEquals(\"open\", response.getBody());\n    }\n\n    @Test\n    public void access_protected_granted() {\n        ClientCredentialsResourceDetails details = new ClientCredentialsResourceDetails();\n        details.setClientId(\"standard\");\n        details.setClientSecret(\"secret\");\n        details.setAccessTokenUri(\"http://localhost:\" + this.port + \"/oauth/token\");\n        OAuth2RestTemplate rest = new OAuth2RestTemplate(details);\n\n        ResponseEntity<String> response = rest.getForEntity(\"http://localhost:\" + this.port + \"/protected\", String.class);\n\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertEquals(\"protected\", response.getBody());\n    }\n\n    @Test\n    public void access_admin_granted() {\n        ClientCredentialsResourceDetails details = new ClientCredentialsResourceDetails();\n        details.setClientId(\"admin\");\n        details.setClientSecret(\"secret\");\n        details.setAccessTokenUri(\"http://localhost:\" + this.port + \"/oauth/token\");\n        OAuth2RestTemplate rest = new OAuth2RestTemplate(details);\n\n        ResponseEntity<String> response = rest.getForEntity(\"http://localhost:\" + this.port + \"/admin\", String.class);\n\n        assertEquals(HttpStatus.OK, response.getStatusCode());\n        assertEquals(\"admin\", response.getBody());\n    }\n\n    @Test\n    public void access_admin_forbidden() {\n        ClientCredentialsResourceDetails details = new ClientCredentialsResourceDetails();\n        details.setClientId(\"standard\");\n        details.setClientSecret(\"secret\");\n        details.setAccessTokenUri(\"http://localhost:\" + this.port + \"/oauth/token\");\n        OAuth2RestTemplate rest = new OAuth2RestTemplate(details);\n\n        ResponseEntity<String> response = rest.getForEntity(\"http://localhost:\" + this.port + \"/admin\", String.class);\n\n        assertEquals(HttpStatus.FORBIDDEN, response.getStatusCode());\n    }\n}\n\n@Configuration\n@EnableAutoConfiguration\n@RestController\n@EnableAuthorizationServer\n@EnableResourceServer\nclass DemoOAuth2Application {\n    public static void main(String[] args) {\n        SpringApplication.run(DemoOAuth2Application.class);\n    }\n\n    @RequestMapping(\"/open\")\n    public String openEndpoint() {\n        return \"open\";\n    }\n\n    @RequestMapping(\"/protected\")\n    public String protectedEndpoint() {\n        return \"protected\";\n    }\n\n    @RequestMapping(\"/admin\")\n    public String adminEndpoint() {\n        return \"admin\";\n    }\n\n    @Configuration\n    protected static class AuthConfig extends AuthorizationServerConfigurerAdapter {\n        @Override\n        public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n            clients.inMemory()\n                        .withClient(\"standard\")\n                            .secret(\"secret\")\n                            .authorizedGrantTypes(\"client_credentials\")\n                            .scopes(\"read\")\n                    .and()\n                        .withClient(\"admin\")\n                            .secret(\"secret\")\n                            .authorizedGrantTypes(\"client_credentials\")\n                            .scopes(\"read\")\n                            .authorities(\"ROLE_ADMIN\");\n        }\n\n        @Override\n        public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {\n            security.tokenKeyAccess(\"permitAll()\").checkTokenAccess(\"isAuthenticated()\");\n        }\n    }\n\n    @Configuration\n    protected static class ResourceConfig extends ResourceServerConfigurerAdapter {\n        @Override\n        public void configure(HttpSecurity http) throws Exception {\n            http.authorizeRequests()\n                    .antMatchers(\"/open\").permitAll()\n                    .antMatchers(\"/admin\").hasRole(\"ADMIN\")\n                    .anyRequest().authenticated();\n        }\n    }\n}\n```\n\nHere's my build file:\n\n``` gradle\nbuildscript {\n    repositories {\n        mavenCentral()\n    }\n    dependencies {\n        classpath \"org.springframework.boot:spring-boot-gradle-plugin:1.3.+\"\n    }\n}\n\napply plugin: 'java'\napply plugin: 'spring-boot'\n\nsourceCompatibility = 1.8\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile \"org.springframework.boot:spring-boot-starter-web\"\n    compile \"org.springframework.security.oauth:spring-security-oauth2\"\n\n    testCompile \"org.springframework.boot:spring-boot-starter-test\"\n}\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/810", "user": "shanman190", "labels": ["status: duplicate", "type: bug"], "created": "2016-07-22 21:06:31", "closed": "2016-10-10 18:47:24", "commits": {}, "ttf": 79.00027777777778, "commitsDetails": []}, {"title": "User can get token via client_credentials or password grants", "body": "This is a simple authorization server based on the samples. The only real difference is I plug in a custom UserDetailsService and ClientDetailsService. They just hardcode the credentials but I was working on implementing the database when I came across this.\n\nThe problem: if you have both a client and a user with the same ID (clientId and username) the user can get an access token using the client_credentials or password grant flow.\n\n[Here is the sample code](https://github.com/socket70/SpringOAuth2AuthenticationProvider).\n\nAm I doing something wrong or is this a bug?\n\nThanks.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/808", "user": "socket70", "labels": ["type: bug"], "created": "2016-07-16 20:42:43", "closed": "2016-08-25 15:12:51", "commits": {}, "ttf": 39.000277777777775, "commitsDetails": []}, {"title": "JwtTokenStore doesn't work properly in combination with custom DB approval store", "body": "I tried to use a custom approval store to store them inside a DB.\nProblem is: Whenever an access token is expired or a refresh token is used, the stored approvals are removed by the JwtTokenStore (and never added back). So as soon as the next access/refresh token is used, the token is rejected, as the DB approval store can't find any appovals.\nI'm not sure why it's implemented in this way, as this removes the purpose (at least for me) to use a custom approval store.\nSo either this is a bug or I'm using the approval store in a wrong way.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/807", "user": "GFriedrich", "labels": ["type: bug"], "created": "2016-07-12 16:42:02", "closed": "2016-10-11 19:50:23", "commits": {"7177f64a06081e0515500d10eb153a484ae75a8b": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 91.00027777777778, "commitsDetails": [{"commitHash": "7177f64a06081e0515500d10eb153a484ae75a8b", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["12b8c1c6f8339dffdfb5e73a8236e71524d5351b"], "nameRev": "7177f64a06081e0515500d10eb153a484ae75a8b tags/2.0.12.RELEASE~7", "commitMessage": "Removing AccessToken should not remove Approvals\n\nFixes gh-807\n", "commitDateTime": "2016-10-11 15:39:27", "authoredDateTime": "2016-10-11 15:39:27", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtTokenStore.java", "insertions": 4, "deletions": 19, "lines": 23}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JwtTokenStoreTests.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwtTokenStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStore.removeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStore.removeAccessTokenUsingRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "JwtTokenStoreTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.removeAccessToken()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.removeAccessTokenFromRefreshToken()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7177f64a06081e0515500d10eb153a484ae75a8b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 19, "lines": 23, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.JwtTokenStore.removeAccessTokenUsingRefreshToken(org.springframework.security.oauth2.common.OAuth2RefreshToken)", "org.springframework.security.oauth2.provider.token.store.JwtTokenStore.removeAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken)"]}, {"title": "Fix Travis Build", "body": "", "url": "https://github.com/spring-projects/spring-security-oauth/issues/752", "user": "rwinch", "labels": ["type: bug", "type: task"], "created": "2016-05-05 18:04:39", "closed": "2016-05-05 22:44:32", "commits": {"7ee390a31be15accea7ce1b65934606b6361a1cd": {"commitGHEventType": "referenced", "commitUser": "rwinch"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "7ee390a31be15accea7ce1b65934606b6361a1cd", "commitGHEventType": "referenced", "commitUser": "rwinch", "commitParents": ["1d102f19cb4ce2a5af60a0fd6ec83eb207a3dcba", "3b3a1d6c66ec306e48e17f2a7caebb3a5ed6d963"], "nameRev": "7ee390a31be15accea7ce1b65934606b6361a1cd tags/2.0.10.RELEASE~33", "commitMessage": "Merge pull request #753 from rwinch/gh-752-fix-travis\n\nFix Travis Build", "commitDateTime": "2016-05-05 17:44:32", "authoredDateTime": "2016-05-05 17:44:32", "commitGitStats": [{"filePath": ".travis.yml", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "pom.xml", "insertions": 7, "deletions": 4, "lines": 11}, {"filePath": "samples/oauth/sparklr/src/main/resources/simplelog.properties", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "samples/oauth/tonr/src/main/resources/simplelog.properties", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "samples/oauth2/sparklr/src/main/resources/simplelog.properties", "insertions": 2, "deletions": 6, "lines": 8}, {"filePath": "samples/oauth2/tonr/src/main/resources/simplelog.properties", "insertions": 2, "deletions": 6, "lines": 8}, {"filePath": "spring-security-oauth/src/test/resources/commons-logging.properties", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth/src/test/resources/simplelog.properties", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/resources/commons-logging.properties", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/resources/simplelog.properties", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "tests/annotation/approval/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/client/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/common/src/main/resources/logback.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/common/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/custom-authentication/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/custom-grant/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/form/src/main/resources/application.yml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/form/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/jaxb/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/jdbc/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/jpa/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/jwt/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/mappings/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/multi/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/resource/src/main/resources/logback.xml", "insertions": 0, "deletions": 7, "lines": 7}, {"filePath": "tests/annotation/resource/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/ssl/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/annotation/vanilla/src/main/resources/application.yml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/vanilla/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/xml/common/src/main/resources/commons-logging.properties", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "tests/xml/common/src/main/resources/logback.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/xml/common/src/main/resources/simplelog.properties", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "tests/xml/common/src/test/resources/logback-test.xml", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "tests/xml/jdbc/src/main/resources/application.yml", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Subdomain redirect matching in DefaultRedirectResolver accepts domains with same suffix", "body": "the current implementation of [hostMatches(String,String)](https://github.com/spring-projects/spring-security-oauth/blob/ac142a6ce0c948aeb07837f7e8704dad4d3e3134/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java#L133) looks like this:\n\n```\nprotected boolean hostMatches(String registered, String requested) {\n    if (matchSubdomains) {\n        return requested.endsWith(registered);\n    }\n    return registered.equals(requested);\n}\n```\n\nAssuming that \n- `registered = \"example.com\"`\n- `matchSubdomains = true` (the default)\n- `requested = \"badexample.com\"`\n\nit is `\"badexample.com\".endsWith(\"example.com\")` which is `true`\n\nthe implementation should be\n\n```\nprotected boolean hostMatches(String registered, String requested) {\n    if (matchSubdomains) {\n        return registered.equals(requested) || requested.endsWith(\".\" + registered);\n    }\n    return registered.equals(requested);\n}\n```\n\ntherefore `\"badexample.com\".equals(\"example.com\") || \"badexample.com\".endsWith(\".example.com\")` which is `false`\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/747", "user": "sfussenegger", "labels": ["type: bug"], "created": "2016-05-04 10:30:05", "closed": "2016-05-12 20:27:45", "commits": {"778f7758ad869f318008cd97bd89b22908002758": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 8.000277777777777, "commitsDetails": [{"commitHash": "778f7758ad869f318008cd97bd89b22908002758", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["3ba30c7c7c1db345102b93df52de461c58e345a6"], "nameRev": "778f7758ad869f318008cd97bd89b22908002758 tags/2.0.10.RELEASE~30", "commitMessage": "Fix subdomain matching in DefaultRedirectResolver\n\nFixes gh-747\n", "commitDateTime": "2016-05-12 16:18:28", "authoredDateTime": "2016-05-12 16:18:28", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 8, "deletions": 8, "lines": 16}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 17, "deletions": 1, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultRedirectResolver.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.hostMatches(java.lang.String,java.lang.String)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "DefaultRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectNotMatchingSubdomain()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectMatchingSubdomain()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["778f7758ad869f318008cd97bd89b22908002758"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 8, "lines": 16, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.hostMatches(java.lang.String,java.lang.String)"]}, {"title": "DefaultRedirectResolver ignores port", "body": "I think ports should be checked by default. In theory, an attacker could be able to run a process on the same host and redirect users to it.\n\nImplementation should be somewhat like this:\n\n```\nprotected boolean portMatches(String protocol, int registered, int requested) {\n  int defaultPort = \"http\".equals(protocol) ? 80 : (\"https\".equals(protocol) ? 443 : -1);\n  return (registered == -1 ? defaultPort : registered) == (requested == -1 ? defaultPort : requested);\n}\n```\n\nHowever I'm not sure if this is intentional or not. After all there is `ExactMatchRedirectResolver` as an alternative. If it is, it should at least be documented in the Javadoc of `DefaultRedirectResolver.redirectMatches(String,String).\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/746", "user": "sfussenegger", "labels": ["type: bug"], "created": "2016-05-04 10:21:56", "closed": "2016-05-12 22:04:42", "commits": {"3cc9b24ed6b75faa8384da8196231d753cdc79e5": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 8.000277777777777, "commitsDetails": [{"commitHash": "3cc9b24ed6b75faa8384da8196231d753cdc79e5", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["778f7758ad869f318008cd97bd89b22908002758"], "nameRev": "3cc9b24ed6b75faa8384da8196231d753cdc79e5 tags/2.0.10.RELEASE~29", "commitMessage": "Apply port matching in DefaultRedirectResolver\n\nFixes gh-746\n", "commitDateTime": "2016-05-12 18:01:10", "authoredDateTime": "2016-05-12 18:01:10", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java", "insertions": 7, "deletions": 2, "lines": 9}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java", "insertions": 33, "deletions": 0, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultRedirectResolver.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.redirectMatches(java.lang.String,java.lang.String)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DefaultRedirectResolverTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectNotMatchingPort()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectMatchingPort()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredPortSetRequestedPortNotSet()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolverTests.testRedirectRegisteredPortNotSetRequestedPortSet()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3cc9b24ed6b75faa8384da8196231d753cdc79e5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 2, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.DefaultRedirectResolver.redirectMatches(java.lang.String,java.lang.String)"]}, {"title": "NotOAuthRequestMatcher matches incorrectly when self define authorization server path mapping.", "body": "```\n   @Override\n        public boolean matches(HttpServletRequest request) {\n            String requestPath = getRequestPath(request);\n            for (String path : mapping.getPaths()) {\n                if (requestPath.startsWith(path)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n\n```\n\nit should check the mapped path, not the original path. \n\n```\n...\nif (requestPath.startsWith(mapping.getPath(path))) {\n                    return false;\n}\n...\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/743", "user": "wangjunwei87", "labels": ["status: waiting-for-feedback", "type: bug"], "created": "2016-04-29 02:27:14", "closed": "2016-06-03 10:29:37", "commits": {"ab9afdccb009726355792cc9a52398fc4bd7cdf4": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 35.000277777777775, "commitsDetails": [{"commitHash": "ab9afdccb009726355792cc9a52398fc4bd7cdf4", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["23ffa9856062549b610ef4751da1d332e93a43a7"], "nameRev": "ab9afdccb009726355792cc9a52398fc4bd7cdf4 tags/2.0.10.RELEASE~4", "commitMessage": "Match on mapped path instead of raw path\n\nFixes gh-743\n", "commitDateTime": "2016-06-03 11:27:23", "authoredDateTime": "2016-06-03 11:27:23", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfiguration.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ResourceServerConfiguration.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.NotOAuthRequestMatcher.matches(javax.servlet.http.HttpServletRequest)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ab9afdccb009726355792cc9a52398fc4bd7cdf4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.NotOAuthRequestMatcher.matches(javax.servlet.http.HttpServletRequest)"]}, {"title": "Remove Global AnonymousAuthenticationProvider", "body": "Per this [issue](https://github.com/spring-projects/spring-boot/issues/5536), lets remove the global AnonymousAuthenticationProvider registered via ResourceServerConfiguration and instead use the HttpSecurity to apply the authentication provider. \n\nAs a workaround, one can use a classpath patch with the changes included in this [gist](https://gist.github.com/PedroAlvarado/1ab59d055046f0506488bb24825f82f4).\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/737", "user": "PedroAlvarado", "labels": ["type: bug"], "created": "2016-04-09 22:15:03", "closed": "2016-05-03 14:37:10", "commits": {"a924e1047b05960202610f05a48810242e54b4ad": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 23.00027777777778, "commitsDetails": [{"commitHash": "a924e1047b05960202610f05a48810242e54b4ad", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["65d5f332e93ebaa2b11702a72597603daa4614d3"], "nameRev": "a924e1047b05960202610f05a48810242e54b4ad tags/2.0.10.RELEASE~35", "commitMessage": "Remove global anoymous authenticator from resource server config\n\nIt is quite difficult (if not impossible) to configure a resource\nserver to authenticate some of its resources not using OAuth2\nwithout this change. The global authentication manager should never\nbe anonymous generally, so it's better not to provide one at all\nthan try and guess what the default should be.\n\nFixes gh-737\n", "commitDateTime": "2016-05-03 15:35:00", "authoredDateTime": "2016-05-03 15:35:00", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfiguration.java", "insertions": 1, "deletions": 9, "lines": 10}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/ResourceServerConfigurationTests.java", "insertions": 43, "deletions": 76, "lines": 119}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ResourceServerConfiguration.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.init(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "ResourceServerConfigurationTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.ResourceServerConfigurationTests.ResourceServerAndAuthorizationServerContextAndGlobalMethodSecurity.setup(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a924e1047b05960202610f05a48810242e54b4ad"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 9, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.init(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder)", "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)"]}, {"title": "Incorrect reference to Sparklr app in Tonr app pom.xml (OAuth 1 example apps)", "body": "When running the sample OAuth 1 Tonr app with `mvn tomcat7:run` command, trying to access Sparkl app results in a 404 Not Found error.\n\nThe reason, apparently, is that in samples/oauth/tonr/pom.xml file configuration for the tomcat7-maven-plugin reference to the Sparklr app looks like: `<contextPath>/sparklr2</contextPath>`\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/732", "user": "sa1nt", "labels": ["type: bug"], "created": "2016-03-31 14:40:59", "closed": "2016-05-12 01:52:46", "commits": {"e30a7af8b1a98fe858fbf1c1448e4b88c3ea6c4a": {"commitGHEventType": "referenced", "commitUser": "rwinch"}}, "ttf": 41.000277777777775, "commitsDetails": [{"commitHash": "e30a7af8b1a98fe858fbf1c1448e4b88c3ea6c4a", "commitGHEventType": "referenced", "commitUser": "rwinch", "commitParents": ["7ee390a31be15accea7ce1b65934606b6361a1cd"], "nameRev": "e30a7af8b1a98fe858fbf1c1448e4b88c3ea6c4a tags/2.0.10.RELEASE~32", "commitMessage": "Changing reference to Sparkl OAuth 1 sample app, so that mvn tomcat7:run \ncommand would work correctly.\n\nFixing Github issue 732 \n(https://github.com/spring-projects/spring-security-oauth/issues/732)", "commitDateTime": "2016-05-11 20:47:02", "authoredDateTime": "2016-03-31 17:51:10", "commitGitStats": [{"filePath": "samples/oauth/tonr/pom.xml", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e30a7af8b1a98fe858fbf1c1448e4b88c3ea6c4a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Logout link not working on sample tonr2 index.jsp", "body": "![logout](https://cloud.githubusercontent.com/assets/4925994/14038097/610963be-f28f-11e5-90d8-2208a8924721.jpg)\n\nit should contains csrf token\n\nbelow codes are working well\n\n```\n<form action=\"${base}logout\" method=\"post\" role=\"form\">\n            <fieldset>\n                <button class=\"btn btn-primary\" type=\"submit\">Logout</button>\n                <input type=\"hidden\" name=\"${_csrf.parameterName}\"\n                    value=\"${_csrf.token}\" />\n            </fieldset>\n</form>\n\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/726", "user": "SeonghakJeong", "labels": ["type: bug"], "created": "2016-03-25 04:45:01", "closed": "2016-05-13 19:02:43", "commits": {"bbf38c2ac2c11a25fc685c958b45f2c343619d53": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 49.000277777777775, "commitsDetails": [{"commitHash": "bbf38c2ac2c11a25fc685c958b45f2c343619d53", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["51bde976111952cbbe1a3bf51ef9134e58366902"], "nameRev": "bbf38c2ac2c11a25fc685c958b45f2c343619d53 tags/2.0.10.RELEASE~20", "commitMessage": "Fix logout link tonr2 sample\n\nFixes gh-726\n", "commitDateTime": "2016-05-13 14:57:33", "authoredDateTime": "2016-05-13 14:57:33", "commitGitStats": [{"filePath": "samples/oauth2/tonr/src/main/webapp/index.jsp", "insertions": 7, "deletions": 1, "lines": 8}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bbf38c2ac2c11a25fc685c958b45f2c343619d53"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 1, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["samples/oauth2/tonr/src/main/webapp/index.jsp"]}, {"title": "Incorrect assignment in OAuth2Request constructor", "body": "In the public constructor of OAuth2Request, the resourceId parameter is not correctly set to the resourceId field:\n\n```\nif (resourceIds != null) {\n    this.resourceIds = new HashSet<String>(resourceIds);\n}\n...\nthis.resourceIds = resourceIds;\n```\n\nIf an object is provided, a defensive copy is made and assigned to the field, but later on the field is reassigned to the provided object.\n\nI think the last assignment should be removed.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/724", "user": "tomvandenberge", "labels": ["type: bug"], "created": "2016-03-23 12:28:41", "closed": "2016-05-13 20:14:22", "commits": {"3b6a9d00885152ce30d836d6d497a21f6bbc2869": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 51.000277777777775, "commitsDetails": [{"commitHash": "3b6a9d00885152ce30d836d6d497a21f6bbc2869", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["bbf38c2ac2c11a25fc685c958b45f2c343619d53"], "nameRev": "3b6a9d00885152ce30d836d6d497a21f6bbc2869 tags/2.0.10.RELEASE~19", "commitMessage": "Fix OAuth2Request.resourceIds constructor assignment\n\nFixes gh-724\n", "commitDateTime": "2016-05-13 16:12:27", "authoredDateTime": "2016-05-13 16:12:27", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/OAuth2Request.java", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/OAuth2RequestTests.java", "insertions": 15, "deletions": 2, "lines": 17}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Request.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Request", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "OAuth2RequestTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2RequestTests.testResourceIdsConstructorAssignment()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3b6a9d00885152ce30d836d6d497a21f6bbc2869"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 0, "deletions": 1, "lines": 1, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.OAuth2Request"]}, {"title": "Wrong deserialization of UnauthorizedClientException", "body": "OAuth2ExceptionJackson2Deserializer, when deserializing the following JSON:\n\n`{\"error\":\"unauthorized_client\",\"error_description\":\"Could not authenticate client\"}`\n\ncreates an instance of UnauthorizedUserException, and not UnauthorizedClientException. The problem is in the following lines (83-85 in 2.0.9.RELEASE):\n`\n                else if (\"unauthorized_client\".equals(errorCode)) {\n                        ex = new UnauthorizedUserException(errorMessage);\n                }\n`\n\nShould change the assignment of ex above to UnauthorizedClientException, and also have another else/if block for UnauthorizedUserException.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/720", "user": "jgdef", "labels": ["type: bug"], "created": "2016-03-22 19:53:22", "closed": "2016-05-25 16:23:17", "commits": {"af6cab557b9c76160ed86428bce09a46f1a81959": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 63.000277777777775, "commitsDetails": [{"commitHash": "af6cab557b9c76160ed86428bce09a46f1a81959", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["78f633f353f7a50abc9823ef6a39832a33906449"], "nameRev": "af6cab557b9c76160ed86428bce09a46f1a81959 tags/2.0.10.RELEASE~9", "commitMessage": "Fix deserialization of UnauthorizedClientException\n\nFixes gh-720\n", "commitDateTime": "2016-05-25 11:57:41", "authoredDateTime": "2016-05-25 11:57:41", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Deserializer.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Deserializer.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/OAuth2ExceptionDeserializerTests.java", "insertions": 2, "deletions": 12, "lines": 14}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/OAuth2ExceptionJackson2DeserializerTests.java", "insertions": 2, "deletions": 12, "lines": 14}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/OAuth2ExceptionSerializerTests.java", "insertions": 2, "deletions": 11, "lines": 13}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/http/converter/jaxb/JaxbOAuth2ExceptionMessageConverterTests.java", "insertions": 3, "deletions": 12, "lines": 15}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Exception.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.create(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionJackson1Deserializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson1Deserializer.deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionJackson2Deserializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Deserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionDeserializerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueInvalidGrant()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueInvalidRequest()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueInvalidScope()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueIsufficientScope()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueUnsupportedGrantType()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueUnauthorizedClient()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueAccessDenied()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueRedirectUriMismatch()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueInvalidToken()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueUndefinedException()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueInvalidClient()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueWithAdditionalDetails()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionDeserializerTests.readValueWithObjects()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionJackson2DeserializerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueInvalidGrant()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueInvalidRequest()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueInvalidScope()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueIsufficientScope()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueUnsupportedGrantType()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueUnauthorizedClient()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueAccessDenied()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueRedirectUriMismatch()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueInvalidToken()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueUndefinedException()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueInvalidClient()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueWithAdditionalDetails()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueWithObjects()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueWithNullErrorDescription()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionSerializerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringInvalidClient()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringInvalidGrant()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringInvalidRequest()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringInvalidScope()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringUnsupportedGrantType()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringUnauthorizedClient()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringAccessDenied()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringRedirectUriMismatch()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringInvalidToken()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringOAuth2Exception()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionSerializerTests.writeValueAsStringWithAdditionalDetails()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JaxbOAuth2ExceptionMessageConverterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeInvalidClient()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeInvalidGrant()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeInvalidRequest()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeInvalidScope()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeUnsupportedGrantType()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeUnauthorizedClient()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeAccessDenied()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeRedirectUriMismatch()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeInvalidToken()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeOAuth2Exception()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.writeCreatesNewUnmarshaller()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readInvalidGrant()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readInvalidRequest()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readInvalidScope()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readUnsupportedGrantType()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readUnauthorizedClient()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readAccessDenied()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readRedirectUriMismatch()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readInvalidToken()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readUndefinedException()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readInvalidClient()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.JaxbOAuth2ExceptionMessageConverterTests.readCreatesNewUnmarshaller()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["af6cab557b9c76160ed86428bce09a46f1a81959"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 3, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Deserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson1Deserializer.deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)", "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.create(java.lang.String,java.lang.String)"]}, {"title": "DefaultTokenServices.refreshAccessToken not grabbing (maybe) modified access token after enhancer call", "body": "DefaultTokenServices.refreshAccessToken is not getting the latest version of the refresh token after the access token is created and possibly enhanced. The effect is that if using an enhancer, refresh token stored in the token store is not enhanced, but the one returned to the requestor is. fix is to do this:\n\n``` java\nrefreshToken = accessToken.getRefreshToken();\n```\n\nright after this (line 177 in version 2.0.9.RELEASE):\n\n``` java\ntokenStore.storeAccessToken(accessToken, authentication);\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/714", "user": "ulisesbocchio", "labels": ["status: duplicate", "type: bug"], "created": "2016-03-11 04:18:00", "closed": "2016-05-13 20:40:19", "commits": {}, "ttf": 63.000277777777775, "commitsDetails": []}, {"title": "Refreshing access token removes refresh token", "body": "There is a issue with refreshing access token. Apparently `AccessTokenProviderChain` assigns to accessToken the result of method `refreshAccessToken` which is essentially the response from https://tools.ietf.org/html/rfc6749#section-5.1\n\n``` java\nif (refreshToken != null) {\n    accessToken = refreshAccessToken(resource, refreshToken, request);\n}\n```\n\nUnfortunately returning refresh token in this endpoint is optional, and many providers only returns it when exchanging code for access token or issuing new refresh token. As a result refresh token can be used only once, because next time it will be equal to null. \n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/712", "user": "mariuszluciow", "labels": ["type: bug"], "created": "2016-03-10 10:59:12", "closed": "2016-05-26 18:31:35", "commits": {"b055772adbb9c10497b1077a0480bf2c2649fb04": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 77.00027777777778, "commitsDetails": [{"commitHash": "b055772adbb9c10497b1077a0480bf2c2649fb04", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["af6cab557b9c76160ed86428bce09a46f1a81959"], "nameRev": "b055772adbb9c10497b1077a0480bf2c2649fb04 tags/2.0.10.RELEASE~8", "commitMessage": "Preserve refresh token on access token refresh\n\nFixes gh-712\n", "commitDateTime": "2016-05-26 14:21:34", "authoredDateTime": "2016-05-26 14:21:34", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChain.java", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChainTests.java", "insertions": 55, "deletions": 2, "lines": 57}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AccessTokenProviderChain.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChain.refreshAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.client.token.AccessTokenRequest)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "AccessTokenProviderChainTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChainTests.testSunnyDayWithTokenServicesGet()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChainTests.testSunnyDayWithExpiredTokenAndTokenServices()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChainTests.testRefreshAccessTokenTwicePreserveRefreshToken()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b055772adbb9c10497b1077a0480bf2c2649fb04"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 1, "lines": 7, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.client.token.AccessTokenProviderChain.refreshAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.common.OAuth2RefreshToken,org.springframework.security.oauth2.client.token.AccessTokenRequest)"]}, {"title": "http://www.springframework.org/schema/security/spring-security-oauth2.xsd is outdated", "body": "Attributes `check-token-endpoint-url` and `check-token-enabled` are missing in `authorization-server` element.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/698", "user": "ayakovlevgh", "labels": ["type: bug"], "created": "2016-02-14 12:20:52", "closed": "2016-05-16 13:09:20", "commits": {}, "ttf": 92.00027777777778, "commitsDetails": []}, {"title": "Memory abuse - OAuthAuthenticationDetails recursive references.", "body": "Hi\n\nwe are looking into some memory issues and this object came on top as a memory consumer.\nlooking into the code we found something very strange that is referencing an old authentication details with new authentication details, when these are kept in some kind of cache, there is a memory problem. here is the code. (from Oauth2AuthenticationManager.authenticate) \nconsidering that before calling authentication , Authentication details were constructed from request .\nso basically its the same data but still passed from old (token services) to new (request).\n\n```\nOAuth2Authentication auth = tokenServices.loadAuthentication(token);\n    if (auth == null) {\n        throw new InvalidTokenException(\"Invalid token: \" + token);\n    }\n\n    Collection<String> resourceIds = auth.getOAuth2Request().getResourceIds();\n    if (resourceId != null && resourceIds != null && !resourceIds.isEmpty() && !resourceIds.contains(resourceId)) {\n        throw new OAuth2AccessDeniedException(\"Invalid token does not contain resource id (\" + resourceId + \")\");\n    }\n\n    checkClientDetails(auth);\n\n    if (authentication.getDetails() instanceof OAuth2AuthenticationDetails) {\n        OAuth2AuthenticationDetails details = (OAuth2AuthenticationDetails) authentication.getDetails();\n        // Preserve the authentication details if any from the one loaded by token services\n        details.setDecodedDetails(auth.getDetails());\n    }\n    auth.setDetails(authentication.getDetails());\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/666", "user": "shlomicthailand", "labels": ["type: bug"], "created": "2015-12-31 14:54:11", "closed": "2016-02-11 13:51:37", "commits": {"13552734161085384de01721ca028b50da83c155": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 41.000277777777775, "commitsDetails": [{"commitHash": "13552734161085384de01721ca028b50da83c155", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["9501b0d671a7d420734b764388f32fe170388b2b"], "nameRev": "13552734161085384de01721ca028b50da83c155 tags/2.0.9.RELEASE~3", "commitMessage": "Fix potential cycle caused by cached details in token services\n\nA local cache of the result from ResourceServerTokenServices\nwill lead to a cycle of details pointing to themselves. This\nchange prevents a trivial cycle of length 1, which seems to be\nthe most likely outcome of using a cache.\n\nFixes gh-666\n", "commitDateTime": "2016-02-11 13:49:49", "authoredDateTime": "2016-02-11 13:49:49", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationManager.java", "insertions": 8, "deletions": 5, "lines": 13}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationManagerTests.java", "insertions": 20, "deletions": 2, "lines": 22}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2AuthenticationManager.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager.authenticate(org.springframework.security.core.Authentication)", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "OAuth2AuthenticationManagerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManagerTests.testDetailsEnhancedOnce()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["13552734161085384de01721ca028b50da83c155"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 5, "lines": 13, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 5, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager.authenticate(org.springframework.security.core.Authentication)"]}, {"title": "NullPointerException on /oauth/check_token with valid token and custom token enhancer", "body": "Hello, I have the following configuration with spring-security-oauth2 version 2.0.8.RELEASE:\n\n``` java\npublic class CustomTokenEnhancer implements TokenEnhancer {\n\n    @Override\n    public OAuth2AccessToken enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication) {\n        User principal = (User)authentication.getPrincipal();\n        Map<String, Object> additionalInfo = new HashMap<>();\n        additionalInfo.put(\"user_name\", principal.getUsername());\n\n        ((DefaultOAuth2AccessToken) accessToken).setAdditionalInformation(additionalInfo);\n\n        return accessToken;\n    }\n\n}\n```\n\n``` java\n@Configuration\n@EnableResourceServer\n@Order(SecurityProperties.ACCESS_OVERRIDE_ORDER-1)\npublic class ResourceServerConfiguration extends ResourceServerConfigurerAdapter{\n\n    @Autowired\n    TokenStore tokenStore;\n\n    @Override\n    public void configure(ResourceServerSecurityConfigurer resources) {\n        resources.resourceId(\"resource\").tokenStore(tokenStore);\n    }\n}\n```\n\n``` java\n@Configuration\n@EnableAuthorizationServer\npublic class AuthorizationServerConfiguration extends AuthorizationServerConfigurerAdapter{\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    @Override\n    public void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n        endpoints.authenticationManager(this.authenticationManager)\n        .tokenEnhancer(tokenEnhancer())\n        .tokenStore(tokenStore());\n    }\n\n    @Override\n    public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n        clients\n            .inMemory()\n                .withClient(\"client\")\n                .secret(\"secret\")\n                .authorizedGrantTypes(\"password\", \"refresh_token\")\n                .scopes(\"read\", \"write\")\n                .resourceIds(\"resource\").accessTokenValiditySeconds(60);\n    }\n\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer oauthServer) throws Exception\n    {\n       oauthServer.checkTokenAccess(\"isAuthenticated()\");    \n    }\n\n    @Bean\n    public TokenEnhancer tokenEnhancer() {\n        return new CustomTokenEnhancer();\n    }\n\n    @Bean\n    public TokenStore tokenStore() {\n        return new InMemoryTokenStore();\n    }\n\n}\n```\n\nCalling /oauth/token returns a token:\n\n```\ncurl -u client:secret -X POST http://localhost:8080/oauth/token -H \"Accept: application/json\" -d \"username=user&password=password&grant_type=password\"\n\n{\"access_token\":\"941fe30d-9235-46c8-89cf-af7cebd3f7a4\",\"token_type\":\"bearer\",\"refresh_token\":\"582338d9-b59e-43d4-a26e-fcb344a801f9\",\"expires_in\":59,\"scope\":\"read write\",\"user_name\":\"user\"}\n```\n\nCalling /oauth/check_token with an invalid token returns a non-valid message:\n\n```\ncurl -u client:secret -X POST http://localhost:8080/oauth/check_token -H \"Accept: application/json\" -d \"token=519ce11b-bc5d-49c2-b30e-6b6b02ea91b8\"\n\n{\"error\":\"invalid_token\",\"error_description\":\"Token was not recognised\"}\n```\n\nCalling /oauth/check_token with an expired token returns an expired message:\n\n```\ncurl -u client:secret -X POST http://localhost:8080/oauth/check_token -H \"Accept: application/json\" -d \"token=582338d9-b59e-43d4-a26e-fcb344a801f9\"\n\n{\"error\":\"invalid_token\",\"error_description\":\"Token has expired\"}\n```\n\nBut calling /oauth/check_token on a valid and non-expired token returns:\n\n```\ncurl -u client:secret -X POST http://localhost:8080/oauth/check_token -H \"Accept: application/json\" -d \"token=2e70671b-9f35-4f1a-b2cb-36728703d08b\"\n\n{\"timestamp\":1449164877694,\"status\":500,\"error\":\"Internal Server Error\",\"exception\":\"java.lang.NullPointerException\",\"message\":\"No message available\",\"path\":\"/oauth/check_token\"}\n```\n\nPrinting the following stack trace in the console:\n\n```\njava.lang.NullPointerException: null\n    at org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint.checkToken(CheckTokenEndpoint.java:84) ~[spring-security-oauth2-2.0.8.RELEASE.jar:na]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_45]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_45]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_45]\n    at java.lang.reflect.Method.invoke(Method.java:497) ~[na:1.8.0_45]\n    at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:222) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:137) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:814) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:737) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:959) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:893) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:648) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846) ~[spring-webmvc-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at javax.servlet.http.HttpServlet.service(HttpServlet.java:729) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:291) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) ~[tomcat-embed-websocket-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:242) ~[spring-boot-actuator-1.3.0.RELEASE.jar:1.3.0.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:111) ~[spring-boot-actuator-1.3.0.RELEASE.jar:1.3.0.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:316) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:114) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:122) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:169) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:48) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilterInternal(BasicAuthenticationFilter.java:213) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:120) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:64) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:91) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:53) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:213) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:176) ~[spring-security-web-4.0.3.RELEASE.jar:4.0.3.RELEASE]\n    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:262) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:87) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:121) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:103) ~[spring-boot-actuator-1.3.0.RELEASE.jar:1.3.0.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) ~[spring-web-4.2.3.RELEASE.jar:4.2.3.RELEASE]\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:239) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:217) ~[tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:106) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:502) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:142) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:88) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:518) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1091) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:673) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1500) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1456) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142) [na:1.8.0_45]\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617) [na:1.8.0_45]\n    at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) [tomcat-embed-core-8.0.28.jar:8.0.28]\n    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_45]\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/652", "user": "cenobyte321", "labels": ["type: bug"], "created": "2015-12-03 18:01:32", "closed": "2015-12-07 15:09:28", "commits": {"3e1d0e0398ad2a24afe4a6d05602353a6c372ce3": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "3e1d0e0398ad2a24afe4a6d05602353a6c372ce3", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["c4efb717db07cb8bc8242a650f75567f99f66827"], "nameRev": "3e1d0e0398ad2a24afe4a6d05602353a6c372ce3 tags/2.0.9.RELEASE~11", "commitMessage": "Ensure CheckTokenEndpoint has an AccessTokenCoverter\n\nIf the user added a custom TokenServices the access token converter\nwas never initialized, so itr was null in the endpoint.\n\nFixes gh-652\n", "commitDateTime": "2015-12-07 15:08:25", "authoredDateTime": "2015-12-07 15:08:25", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java", "insertions": 8, "deletions": 6, "lines": 14}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java", "insertions": 87, "deletions": 97, "lines": 184}, {"filePath": "tests/annotation/vanilla/src/main/java/demo/Application.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "tests/annotation/vanilla/src/main/resources/application.yml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/ResourceOwnerPasswordProviderTests.java", "insertions": 15, "deletions": 0, "lines": 15}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AuthorizationServerEndpointsConfiguration.java", "spoonMethods": []}, {"spoonFilePath": "AuthorizationServerEndpointsConfigurer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.getAccessTokenConverter()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "AuthorizationServerConfigurationTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.AuthorizationServerConfigurationTests.AuthorizationServerWithTokenServices", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.AuthorizationServerConfigurationTests.AuthorizationServerWithTokenServices.run()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Application.java", "spoonMethods": [{"spoonMethodName": "demo.Application.OAuth2Config.configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ResourceOwnerPasswordProviderTests.java", "spoonMethods": [{"spoonMethodName": "demo.ResourceOwnerPasswordProviderTests.testCheckToken()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3e1d0e0398ad2a24afe4a6d05602353a6c372ce3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 16, "deletions": 8, "lines": 24, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["tests/annotation/vanilla/src/main/resources/application.yml", "tests/annotation/vanilla/src/main/java/demo", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.getAccessTokenConverter()", "demo.Application.OAuth2Config.configure(org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer)"]}, {"title": "A code is generated even if the approval grant has status DENIED", "body": "Let's say you have an authorization server running on `http://localhost:8080` with an ApprovalStoreUserApprovalHandler with JdbcClientDetailStore and JdbcAprovalStore.\n\nAnd let's say you make the following request:\n`http://localhost:8080/oauth/authorize?grant_type=code&scope=sample_scope&esponse_type=code&amp;client_id=client&redirect_uri=https%3A%2F%2Fexample.com%2Fcb&secret=secret` (1)\nLet's also say that the client with id client_id has only one scope `sample_scope`\n\nSo if you submit the approval form with the param `sample_scope` set to false (e.g. you decline). That would cause an access denied error and would forward you to \n`/cb?error=access_denied&error_description=User%20denied%20access`\nWhich is as expected. Problem is, if you hit the same URL (1) again, it would redirect you to the following sample URL:\n`/cb?code=Nd7nmz`\n\nAs you can see, you get a valid code. Which is a big problem, because you can get an access token with this code.\n\nIf you take a look at ApprovalStoreUserApprovalHandler, method checkForPreApproval, line 143, you could see that each approval is added to validUserApprovedScopes without checking whether it was approved.  This should be in the if statement below on line 144. Because right now validUserApprovedScopes would always have the same elements as requestedScopes and the if statement on 156 will always return true. So if an approval was denied, it would still go to validUserApprovals and would case the autorizationRequest to have approved set to true.\n\nI've created a pull request regarding this issue - `https://github.com/spring-projects/spring-security-oauth/pull/653`\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/651", "user": "gharizanov92", "labels": ["type: bug"], "created": "2015-12-03 17:34:06", "closed": "2016-02-10 10:58:22", "commits": {"9501b0d671a7d420734b764388f32fe170388b2b": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 68.00027777777778, "commitsDetails": [{"commitHash": "9501b0d671a7d420734b764388f32fe170388b2b", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["ca1d8608cefa3646a8a55b0ff35e80d6c4789aea"], "nameRev": "9501b0d671a7d420734b764388f32fe170388b2b tags/2.0.9.RELEASE~4", "commitMessage": "Fixed denied access status generating code\n\nFixed unapproved approvals from being added to validUserApprovalScopes\nwhich would cause authorizationRequest to be approved,\neven though all of the userApprovals were with status DECLINED.\n\nFixes gh-653, fixes gh-651\n", "commitDateTime": "2016-02-10 10:57:51", "authoredDateTime": "2015-12-03 19:30:15", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/ApprovalStoreUserApprovalHandler.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/approval/ApprovalStoreUserApprovalHandlerTests.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ApprovalStoreUserApprovalHandler.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler.checkForPreApproval(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.core.Authentication)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "ApprovalStoreUserApprovalHandlerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandlerTests.testExplicitlyUnapprovedScopes()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9501b0d671a7d420734b764388f32fe170388b2b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler.checkForPreApproval(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.core.Authentication)"]}, {"title": "RedisTokenStoreTests fail on Windows due to embedded Redis not working on Windows", "body": "Hello everyone,\nI tried to install and run the samples as per the \"Getting started\" section in different ways and always run into the same errors during the maven test phase when running `mvn install -P bootstrap`\nHere are some of the variants I tried:\n- Downloaded v.2.0.9-SNAPSHOT with Eclipse egit\n  - changed to tagged release v2.0.8\n  - changed to tagged release v2.0.7\n  - changed to tagged release v2.0.6\n- Downloaded the 2.0.9-SNAPSHOT from master as a zip\n- Downloaded 2.0.8 release version as a zip\n- cleared the local maven repository (in fact referenced a blank dir in the maven settings.xml)\n- used to different maven versions (3.0.5 and 3.3.3) \n- used three different JDKs\n\nThe outcome of the test phase was always this:\n\n```\n[...]\nResults :\n\nTests in error: \n  testExpiringRefreshToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testExpiringRefreshToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testExpiringAccessToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testExpiringAccessToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testStoreRefreshToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testStoreRefreshToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testRetrieveAccessToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testRetrieveAccessToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testReadingRefreshTokenForTokenThatDoesNotExist(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testReadingRefreshTokenForTokenThatDoesNotExist(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testFindAccessTokensByClientId(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testFindAccessTokensByClientId(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testFindAccessTokensByClientIdAndUserName(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testFindAccessTokensByClientIdAndUserName(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testStoreAccessToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testStoreAccessToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testRemovedTokenCannotBeFoundByUsername(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testRemovedTokenCannotBeFoundByUsername(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testReadingAccessTokenForTokenThatDoesNotExist(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testReadingAccessTokenForTokenThatDoesNotExist(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testRemoveRefreshToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testRemoveRefreshToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testReadingAuthenticationForTokenThatDoesNotExist(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testReadingAuthenticationForTokenThatDoesNotExist(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testStoreAccessTokenTwice(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testStoreAccessTokenTwice(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testRefreshTokenIsNotStoredDuringAccessToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testRefreshTokenIsNotStoredDuringAccessToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testGetAccessTokenForDeletedUser(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n  testGetAccessTokenForDeletedUser(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)\n\nTests run: 610, Failures: 0, Errors: 30, Skipped: 0\n\n[INFO] ------------------------------------------------------------------------\n[INFO] Reactor Summary:\n[INFO] \n[INFO] OAuth for Spring Security .......................... SUCCESS [  2.044 s]\n[INFO] OAuth 1(a) for Spring Security ..................... SUCCESS [ 20.215 s]\n[INFO] OAuth2 for Spring Security ......................... FAILURE [ 29.350 s]\n[INFO] spring-oauth2-tests ................................ SKIPPED\n[INFO] spring-oauth2-tests-common ......................... SKIPPED\n[INFO] spring-oauth2-tests-vanilla ........................ SKIPPED\n[INFO] spring-oauth2-tests-mappings ....................... SKIPPED\n[INFO] spring-oauth2-tests-form ........................... SKIPPED\n[INFO] spring-oauth2-tests-jwt ............................ SKIPPED\n[INFO] spring-oauth2-tests-approval ....................... SKIPPED\n[INFO] spring-oauth2-tests-jdbc ........................... SKIPPED\n[INFO] spring-oauth-tests-custom-grant .................... SKIPPED\n[INFO] spring-oauth2-tests-multi .......................... SKIPPED\n[INFO] spring-oauth2-tests-client ......................... SKIPPED\n[INFO] spring-oauth2-tests-resource ....................... SKIPPED\n[INFO] spring-oauth2-tests-custom-authentication .......... SKIPPED\n[INFO] spring-oauth2-tests-xml ............................ SKIPPED\n[INFO] spring-oauth2-tests-xml-common ..................... SKIPPED\n[INFO] spring-oauth2-tests-xml-vanilla .................... SKIPPED\n[INFO] spring-oauth2-tests-xml-mappings ................... SKIPPED\n[INFO] spring-oauth2-tests-xml-form ....................... SKIPPED\n[INFO] spring-oauth2-tests-xml-jwt ........................ SKIPPED\n[INFO] spring-oauth2-tests-xml-approval ................... SKIPPED\n[INFO] spring-oauth2-tests-xml-jdbc ....................... SKIPPED\n[INFO] spring-oauth2-tests-xml-client ..................... SKIPPED\n[INFO] OAuth for Spring Security - Integration Tests ...... SKIPPED\n[INFO] OAuth for Spring Security - Sparklr (OAuth 1 Provider Example) SKIPPED\n[INFO] OAuth for Spring Security - Tonr (OAuth 1 Consumer Example) SKIPPED\n[INFO] OAuth for Spring Security - Sparklr2 (OAuth 2 Provider Example) SKIPPED\n[INFO] OAuth for Spring Security - Tonr2 (OAuth 2 Client Example) SKIPPED\n[INFO] OAuth for Spring Security - Samples ................ SKIPPED\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD FAILURE\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 52.860 s\n[INFO] Finished at: 2015-12-03T16:53:58+01:00\n[INFO] Final Memory: 59M/172M\n[INFO] ------------------------------------------------------------------------\n[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.12.4:test (default-test) on project spring-security-oauth2: There are test failures.\n[...]\n```\n\nHere are some of the exceptions I encountered during the tests:\n\n```\n[...]\ntestExpiringRefreshToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)  Time elapsed: 0.008 sec  <<< ERROR!\njava.lang.NullPointerException\n    at java.util.Objects.requireNonNull(Objects.java:203)\n    at java.nio.file.Files.copy(Files.java:2984)\n    at redis.embedded.RedisServer.extractExecutableFromJar(RedisServer.java:85)\n    at redis.embedded.RedisServer.<init>(RedisServer.java:69)\n    at redis.embedded.RedisServer.<init>(RedisServer.java:63)\n    at redis.embedded.RedisServer.<init>(RedisServer.java:55)\n    at org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.setup(RedisTokenStoreTests.java:40)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n    at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\n\ntestExpiringRefreshToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)  Time elapsed: 0.008 sec  <<< ERROR!\njava.lang.NullPointerException\n    at org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.tearDown(RedisTokenStoreTests.java:49)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:33)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n    at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\n\ntestExpiringAccessToken(org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests)  Time elapsed: 0 sec  <<< ERROR!\njava.lang.NullPointerException\n    at java.util.Objects.requireNonNull(Objects.java:203)\n    at java.nio.file.Files.copy(Files.java:2984)\n    at redis.embedded.RedisServer.extractExecutableFromJar(RedisServer.java:85)\n    at redis.embedded.RedisServer.<init>(RedisServer.java:69)\n    at redis.embedded.RedisServer.<init>(RedisServer.java:63)\n    at redis.embedded.RedisServer.<init>(RedisServer.java:55)\n    at org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.setup(RedisTokenStoreTests.java:40)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n    at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\n[...]\n```\n\nSince obviously noone else is encountering this behaviour I must do something really wrong but I dont have a clue what it could be. \n\nHoping for help,\n Bj\u00f6rn\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/650", "user": "BjoernSt", "labels": ["type: bug"], "created": "2015-12-03 16:12:08", "closed": "2015-12-08 10:42:38", "commits": {"4ed56514c08310fcce421967f6279357e598465b": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "4ed56514c08310fcce421967f6279357e598465b", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["3e1d0e0398ad2a24afe4a6d05602353a6c372ce3"], "nameRev": "4ed56514c08310fcce421967f6279357e598465b tags/2.0.9.RELEASE~10", "commitMessage": "Skip tests if embedded redis fails to start\n\nFixes gh-650\n", "commitDateTime": "2015-12-08 10:42:24", "authoredDateTime": "2015-12-08 10:42:20", "commitGitStats": [{"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreTests.java", "insertions": 6, "deletions": 1, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RedisTokenStoreTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.setup()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4ed56514c08310fcce421967f6279357e598465b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Immortal refresh tokens not working when using JWT", "body": "It seems that creating immortal refresh tokens is not working when using JWT.\nI have a client configured with refreshTokenValiditySeconds(0) but when using JwtAccessTokenConverter ([like here](https://github.com/spring-projects/spring-security-oauth/blob/master/tests/annotation/jwt/src/main/java/demo/Application.java)) the token expire at the same time as the access token.\n\nCould it be a bug or am I missing something?\n\nThanks\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/641", "user": "gerar2", "labels": ["type: bug"], "created": "2015-11-25 10:34:50", "closed": "2015-12-07 10:05:27", "commits": {"5505f6ed3f0e59bae9b7bd6317073664f7b03b15": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 11.000277777777777, "commitsDetails": [{"commitHash": "5505f6ed3f0e59bae9b7bd6317073664f7b03b15", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["260496181e515ddf7e7cda927900206b86c80b31"], "nameRev": "5505f6ed3f0e59bae9b7bd6317073664f7b03b15 tags/2.0.9.RELEASE~20", "commitMessage": "Ensure default refresh token is non-expiring in Jwt\n\nThe JwtAccessTokenConverter was working fine with expiring refresh\ntokens (which is recommended), but not with non-expiring ones because\nit copied the fields from the access token into the refresh token\nand only reset the expiry if it found it needed to.\n\nFixes gh-641\n", "commitDateTime": "2015-12-07 10:03:39", "authoredDateTime": "2015-12-07 10:03:39", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/AbstractDefaultTokenServicesTests.java", "insertions": 24, "deletions": 9, "lines": 33}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverterTests.java", "insertions": 30, "deletions": 0, "lines": 30}, {"filePath": "tests/annotation/jwt/src/main/java/demo/Application.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "tests/annotation/jwt/src/test/java/demo/RefreshTokenSupportTests.java", "insertions": 16, "deletions": 1, "lines": 17}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractDefaultTokenServicesTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractDefaultTokenServicesTests.testRefreshTokenNonExpiring()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwtAccessTokenConverterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverterTests.testExpiringRefreshTokenAdded()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverterTests.testRefreshTokenAdded()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Application.java", "spoonMethods": [{"spoonMethodName": "demo.Application.OAuth2Config.configure(org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer)", "TOT": 24, "UPD": 22, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "RefreshTokenSupportTests.java", "spoonMethods": [{"spoonMethodName": "demo.RefreshTokenSupportTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "demo.RefreshTokenSupportTests.verifyAccessTokens(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.common.OAuth2AccessToken)", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5505f6ed3f0e59bae9b7bd6317073664f7b03b15"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 0, "lines": 3, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 25, "UPD": 22, "INS": 2, "MOV": 1, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["tests/annotation/jwt/src/main/java/demo", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["demo.Application.OAuth2Config.configure(org.springframework.security.oauth2.config.annotation.configurers.ClientDetailsServiceConfigurer)", "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)"]}, {"title": "Using new sslOnly flag in AuthorizationServerSecurityConfigurer ends with IllegalStateException", "body": "We're implementing our own authorization server using spring-security-oauth 2.0.7 and we want to enforce SSL in both authorization and token endpoints.\n\nFor the authorization endpoint we have configured channel security, custom filters, etc. using a WebSecurityConfigurerAdapter.\n\nFor the token endpoint we could not get access to HttpSecurity to set our own security, so we thought that maybe defining another WebSecurityConfigurerAdapter with an order below 0 we could override the default security defined by the framework. But then we saw that version 2.0.8 was out and a new sslOnly method had been added to AuthorizationServerSecurityConfigurer. So we tried it out, but the result was the following error initializing spring context:\n\n```\nGRAVE: Exception sending context initialized event to listener instance of class org.springframework.web.context.ContextLoaderListener\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'springSecurityFilterChain' defined in class org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is **java.lang.IllegalStateException: Cannot apply org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer@289d53a8 to already built object**\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:599)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1111)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1006)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:504)\n    at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:476)\n    at org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:303)\n    at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:230)\n    at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)\n    at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:194)\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:755)\n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:757)\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:480)\n    at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:403)\n    at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306)\n    at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:106)\n    at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:4937)\n    at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5434)\n    at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1559)\n    at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1549)\n    at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [javax.servlet.Filter]: Factory method 'springSecurityFilterChain' threw exception; nested exception is java.lang.IllegalStateException: Cannot apply org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer@289d53a8 to already built object\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:189)\n    at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:588)\n    ... 23 more\nCaused by: java.lang.IllegalStateException: Cannot apply org.springframework.security.config.annotation.web.configurers.ChannelSecurityConfigurer@289d53a8 to already built object\n    at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.add(AbstractConfiguredSecurityBuilder.java:194)\n    at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.apply(AbstractConfiguredSecurityBuilder.java:129)\n    at org.springframework.security.config.annotation.web.builders.HttpSecurity.getOrApply(HttpSecurity.java:1187)\n    at org.springframework.security.config.annotation.web.builders.HttpSecurity.requiresChannel(HttpSecurity.java:875)\n    at org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer.configure(AuthorizationServerSecurityConfigurer.java:193)\n    at org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer.configure(AuthorizationServerSecurityConfigurer.java:54)\n    at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.configure(AbstractConfiguredSecurityBuilder.java:378)\n    at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.doBuild(AbstractConfiguredSecurityBuilder.java:328)\n    at org.springframework.security.config.annotation.AbstractSecurityBuilder.build(AbstractSecurityBuilder.java:41)\n    at org.springframework.security.config.annotation.web.builders.WebSecurity.performBuild(WebSecurity.java:289)\n    at org.springframework.security.config.annotation.web.builders.WebSecurity.performBuild(WebSecurity.java:74)\n    at org.springframework.security.config.annotation.AbstractConfiguredSecurityBuilder.doBuild(AbstractConfiguredSecurityBuilder.java:332)\n    at org.springframework.security.config.annotation.AbstractSecurityBuilder.build(AbstractSecurityBuilder.java:41)\n    at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.springSecurityFilterChain(WebSecurityConfiguration.java:105)\n    at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$641b9dc.CGLIB$springSecurityFilterChain$1(<generated>)\n    at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$641b9dc$$FastClassBySpringCGLIB$$c4a574fe.invoke(<generated>)\n    at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:228)\n    at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:309)\n    at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$$EnhancerBySpringCGLIB$$641b9dc.springSecurityFilterChain(<generated>)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:162)\n    ... 24 more\n```\n\nThis is our code for authorization server configuration:\n\n``` java\n@Configuration\n@EnableAuthorizationServer\npublic class AuthorizationServerCfg extends AuthorizationServerConfigurerAdapter {\n...\n    @Bean\n    public PasswordEncoder clientSecretEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Override\n    public void configure(AuthorizationServerSecurityConfigurer security) throws Exception {\n        security.passwordEncoder(clientSecretEncoder());\n                security.checkTokenAccess(\"isFullyAuthenticated()\");\n        security.allowFormAuthenticationForClients();\n        security.sslOnly();\n    }\n...\n}\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/638", "user": "marauzog", "labels": ["type: bug"], "created": "2015-11-24 16:41:28", "closed": "2017-11-21 03:07:30", "commits": {"7219ba461534d8c5eb437568d513baf1fc8ef790": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 727.0002777777778, "commitsDetails": [{"commitHash": "7219ba461534d8c5eb437568d513baf1fc8ef790", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["af51eaea694d64bd733a9f00f0c0db13b967c8fd"], "nameRev": "7219ba461534d8c5eb437568d513baf1fc8ef790 tags/2.2.1.RELEASE~2", "commitMessage": "Fix sslOnly in AuthorizationServerSecurityConfigurer\n\nFixes gh-638\n", "commitDateTime": "2017-11-20 21:47:52", "authoredDateTime": "2017-11-20 21:47:52", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerSecurityConfigurer.java", "insertions": 3, "deletions": 4, "lines": 7}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java", "insertions": 21, "deletions": 13, "lines": 34}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AuthorizationServerSecurityConfigurer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer.configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "AuthorizationServerConfigurationTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.AuthorizationServerConfigurationTests.AuthorizationServerSslEnabled", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.AuthorizationServerConfigurationTests.parameters()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7219ba461534d8c5eb437568d513baf1fc8ef790"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 4, "lines": 7, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerSecurityConfigurer.configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)"]}, {"title": "@EnableResourceServer creates a FilterChain that matches possible unwanted endpoints with Spring Security 4.0.3", "body": "In Spring Security 4.x, since https://github.com/spring-projects/spring-security/commit/fbf3672ecaf0497a52c557b7d3a05951be30c7ef, the method `HttpSecurity#requestMatchers()`, doesn't override the previous invocations of `requestMatchers()`. \n\nWhen using `@EnableResourceServer` in the same application of an authorization server configured with `@EnableAuthorizationServer`, the imported class `ResourceServerConfiguration` creates a `FilterChain` mapping on the matcher `ResourceServerConfiguration#NotOAuthRequestMatcher`. This will basically match everything except the authorization endpoints. The only way to override this now is to call the `HttpSecurity.requestMatcher(RequestMatcher requestMatcher)` with a built `RequestMatcher`. This is IMO less fluent than user the `RequestMatcherConfigurer`. \n\nThis issue is also present in the sparkl sample app. By enabling `debug=true` in `@EnableWebSecurity`, getting the login page yields to a different `FilterChain` being applied to the request : \n\n```\nRequest received for GET '/login.jsp':\norg.apache.catalina.connector.RequestFacade@38363d8b\nservletPath:/login.jsp\n[...]\n\nSecurity filter chain: [\n  WebAsyncManagerIntegrationFilter\n  SecurityContextPersistenceFilter\n  HeaderWriterFilter\n  LogoutFilter\n  OAuth2AuthenticationProcessingFilter\n  RequestCacheAwareFilter\n  SecurityContextHolderAwareRequestFilter\n  AnonymousAuthenticationFilter\n  SessionManagementFilter\n  ExceptionTranslationFilter\n  FilterSecurityInterceptor\n]\n```\n\nWith Spring security 3.2.8 :\n\n```\nRequest received for GET '/login.jsp':\norg.apache.catalina.connector.RequestFacade@467a6273\nservletPath:/login.jsp\n[...]\n\n\nSecurity filter chain: [\n  WebAsyncManagerIntegrationFilter\n  SecurityContextPersistenceFilter\n  HeaderWriterFilter\n  LogoutFilter\n  UsernamePasswordAuthenticationFilter\n  RequestCacheAwareFilter\n  SecurityContextHolderAwareRequestFilter\n  AnonymousAuthenticationFilter\n  SessionManagementFilter\n  ExceptionTranslationFilter\n  FilterSecurityInterceptor\n]\n```\n\nI'm thinking that maybe this part is superfluous in `ResourceServerConfiguration` : \n\n```\nif (endpoints != null) {\n    // Assume we are in an Authorization Server\n    requests.requestMatchers(new NotOAuthRequestMatcher(endpoints\n            .oauth2EndpointHandlerMapping()));\n}\n```\n\nOpinions? Thanks!!\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/634", "user": "jebeaudet", "labels": ["type: bug"], "created": "2015-11-18 20:21:57", "closed": "2015-12-07 12:06:29", "commits": {}, "ttf": 18.00027777777778, "commitsDetails": []}, {"title": "Wrong \"order\" of endpoint mapping for OAuth auto configuration in MVC environment", "body": "In MVC web environment Resource endpoint mapping and OAuth2 endpoint mapping have the same order so resource endpoint prevents oauth2 endpoints.\n@EnableWebMvc causes WebConfigurationSupport to provide a resource endpoint. When oauth2 authorization server is to be used, oauth2FrameworkHandlerMapping bean must be positioned higher than the resource endpoint.\nCurrently, this can be overcomed by adding a custom BeanPostProcessor to set order of the bean to a higher value manually\n\nOriginal Report: https://jira.spring.io/browse/SEC-2938\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/613", "user": "rwinch", "labels": ["type: bug"], "created": "2015-10-29 21:33:12", "closed": "2015-12-07 11:59:33", "commits": {"22298e1958a648d627ae3cbc3fe7bf0f2613286f": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 38.000277777777775, "commitsDetails": [{"commitHash": "22298e1958a648d627ae3cbc3fe7bf0f2613286f", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["e30aefd030c59f0d67a449e6fbc808c76580bbe8"], "nameRev": "22298e1958a648d627ae3cbc3fe7bf0f2613286f tags/2.0.9.RELEASE~18", "commitMessage": "Change default order in FrameworkEndpointHandlerMapping\n\nSo as not to conflict with the ResourceHandlerRegistry in Spring MVC\n\nFixes gh-613\n", "commitDateTime": "2015-12-07 10:56:30", "authoredDateTime": "2015-12-07 10:56:30", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/FrameworkEndpointHandlerMapping.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FrameworkEndpointHandlerMapping.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.FrameworkEndpointHandlerMapping", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["22298e1958a648d627ae3cbc3fe7bf0f2613286f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.FrameworkEndpointHandlerMapping"]}, {"title": "OAuth2ExceptionJackson2Deserializer NPE if error_description is null", "body": "[OAuth2ExceptionJackson2Serializer.java](https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Serializer.java#L38) will always write the field \"error_description\" to the serialized object, even if it is null.\n\n[OAuth2ExceptionJackson2Deserializer.java](https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Deserializer.java#L73) will throw a NPE if it sees an {..., \"error_description\": null}\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/594", "user": "stromnet", "labels": ["type: bug"], "created": "2015-10-12 12:48:23", "closed": "2016-05-18 16:17:59", "commits": {"877d096c9f325d621fb264d3c0ff04c4d810559e": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 219.00027777777777, "commitsDetails": [{"commitHash": "877d096c9f325d621fb264d3c0ff04c4d810559e", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["b081c601989d65c3c26727bc6d31268815516a21"], "nameRev": "877d096c9f325d621fb264d3c0ff04c4d810559e tags/2.0.10.RELEASE~14", "commitMessage": "Fix NPE in OAuth2ExceptionJackson2Deserializer\n\nFixes gh-594\n", "commitDateTime": "2016-05-18 12:16:05", "authoredDateTime": "2016-05-18 12:16:05", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Deserializer.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/OAuth2ExceptionJackson2DeserializerTests.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2ExceptionJackson2Deserializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Deserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "TOT": 6, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "OAuth2ExceptionJackson2DeserializerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests.readValueWithNullErrorDescription()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["877d096c9f325d621fb264d3c0ff04c4d810559e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 2, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Deserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)"]}, {"title": "Wrong equals implementation in BaseClientDetails#equals", "body": "[BaseClientDetails](https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/BaseClientDetails.java) equals method compares _accessTokenValiditySeconds_ and _refreshTokenValiditySeconds_ fields which are Integer (wrapper type) with != instead of equals:\n\n```\n@Override\npublic boolean equals(Object obj) {\n    //[...]\n    if (accessTokenValiditySeconds != other.accessTokenValiditySeconds)\n        return false;\n    if (refreshTokenValiditySeconds != other.refreshTokenValiditySeconds)\n        return false;\n    //[...]\n    return true;\n}\n```\n\nThis is wrong as wrapper types should be compared with `equals` instead of `==`/`!=`.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/589", "user": "superbob", "labels": ["type: bug"], "created": "2015-10-05 14:16:39", "closed": "2015-10-06 10:12:58", "commits": {"d3c09cb58d3d8a05b424930e59038d9e27d96c80": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "d3c09cb58d3d8a05b424930e59038d9e27d96c80", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["1b2ae987e9486a875b40424f18bb785baf0b898c"], "nameRev": "d3c09cb58d3d8a05b424930e59038d9e27d96c80 tags/2.0.8.RELEASE~15", "commitMessage": "Fix BaseClientDetails.equals() so it uses Integer wrappers\n\nFixes gh-589\n", "commitDateTime": "2015-10-06 11:12:14", "authoredDateTime": "2015-10-06 11:12:14", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/BaseClientDetails.java", "insertions": 8, "deletions": 2, "lines": 10}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/client/BaseClientDetailsTests.java", "insertions": 12, "deletions": 0, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BaseClientDetails.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.client.BaseClientDetails.equals(java.lang.Object)", "TOT": 16, "UPD": 0, "INS": 6, "MOV": 8, "DEL": 2}]}, {"spoonFilePath": "BaseClientDetailsTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.client.BaseClientDetailsTests.testEqualityOfValidity()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d3c09cb58d3d8a05b424930e59038d9e27d96c80"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 2, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 16, "UPD": 0, "INS": 6, "MOV": 8, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.client.BaseClientDetails.equals(java.lang.Object)"]}, {"title": "eraseCredentials() in OAuth2Authentication does not erase the credentials stored in the Authentication instance", "body": "The behavior of `eraseCredentials()`, which `OAuth2Authentication` inherits from `AbstractAuthenticationToken`, is to only erase the credentials from the principal, the details object and the authentication itself.\n\nAs such, because the principal's credentials are also stored in the accompanying `UsernamePasswordAuthenticationToken` in `OAuth2Authentication` (assuming the principal is a user and not a machine), calling `eraseCredentials()` will not erase the credentials from the `Authentication` as well, which forces you to use the following workaround:\n\n```\nauthentication.eraseCredentials();\nif (authentication.getUserAuthentication() instanceof CredentialsContainer) {\n    ((CredentialsContainer) authentication.getUserAuthentication()).eraseCredentials();\n}\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/573", "user": "octurion", "labels": ["type: bug"], "created": "2015-09-10 22:16:32", "closed": "2016-05-18 18:05:01", "commits": {"e8a8c46a0a25f4dd489dd55568ab4bf50f4f53c4": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 250.00027777777777, "commitsDetails": [{"commitHash": "e8a8c46a0a25f4dd489dd55568ab4bf50f4f53c4", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["877d096c9f325d621fb264d3c0ff04c4d810559e"], "nameRev": "e8a8c46a0a25f4dd489dd55568ab4bf50f4f53c4 tags/2.0.10.RELEASE~13", "commitMessage": "Erase credentials for User Authentication\n\nFixes gh-573\n", "commitDateTime": "2016-05-18 14:02:46", "authoredDateTime": "2016-05-18 14:02:46", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/OAuth2Authentication.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/OAuth2AuthenticationTests.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Authentication.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Authentication.eraseCredentials()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2AuthenticationTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2AuthenticationTests.testEraseCredentialsUserAuthentication()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e8a8c46a0a25f4dd489dd55568ab4bf50f4f53c4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 0, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.OAuth2Authentication.eraseCredentials()"]}, {"title": "Revoke tokens in Redis Token Store", "body": "I'm using the Redis Token Store from 2.0.8 SNAPSHOT and there seems to be some inconsistency when revoking access tokens:\n\nWhen I use the removeAccessToken method, I can see in my Redis Store, that the token has been deleted. But if I query for all tokens by its client_id (findTokensByClientId) I still get the revoked token in the result set. Investigating further I still see the keys client_id_to_access and name_to_access in the Redis store. They only get removed, when the token (which has been revoked before) expires.\n\nIt's not a major bug, because I can't access protected resources after revoking the token, but still it is a little bit confusing that the token is still listed when I search for it by its clientId.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/572", "user": "coco1979ka", "labels": ["type: bug"], "created": "2015-09-08 12:02:06", "closed": "2016-05-20 16:48:18", "commits": {"a0e2591163a9c2991648473b8f503dde11fff18c": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 255.00027777777777, "commitsDetails": [{"commitHash": "a0e2591163a9c2991648473b8f503dde11fff18c", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["6f0abcf154fb4938678d2152e8c11b0b87b5baf0"], "nameRev": "a0e2591163a9c2991648473b8f503dde11fff18c tags/2.0.10.RELEASE~11", "commitMessage": "Remove keys in RedisTokenStore on revoke\n\nFixes gh-572\n", "commitDateTime": "2016-05-20 12:42:13", "authoredDateTime": "2016-05-20 12:42:13", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStore.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreMockTests.java", "insertions": 109, "deletions": 0, "lines": 109}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/redis/RedisTokenStoreTests.java", "insertions": 26, "deletions": 12, "lines": 38}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RedisTokenStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore.removeRefreshToken(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RedisTokenStoreMockTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreMockTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RedisTokenStoreTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.testExpiringRefreshToken()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.testExpiringAccessToken()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStoreTests.storeAccessTokenWithoutRefreshTokenRemoveAccessTokenVerifyTokenRemoved()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a0e2591163a9c2991648473b8f503dde11fff18c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 0, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.redis.RedisTokenStore.removeRefreshToken(java.lang.String)"]}, {"title": "Inconsistent ids being generated by DefaultAuthenticationKeyGenerator", "body": "There is a bug on line 49 in org.springframework.security.oauth2.provider.token.DefaultAuthenticationKeyGenerator\n\n```\nvalues.put(SCOPE, OAuth2Utils.formatParameterList(authorizationRequest.getScope()));\n```\n\nauthorizationRequest.getScope() returns a Set<String>. This can (and likely) will be an un-ordered set of strings. Calling this multiple times can therefore return different values for the same set of scopes. This causes issues further down-stream where the same authentication can be given different ids.\n\nThe fix for this is to sort the scopes being fed into OAuth2Utils.formatParameterList.\n\ne.g.\n\n```\nList<String> scopesList = new ArrayList<>();\nscopesList.addAll(authorizationRequest.getScope());\nCollections.sort(scopesList);           \nvalues.put(SCOPE, OAuth2Utils.formatParameterList(scopesList));\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/569", "user": "alvinpb", "labels": ["type: bug"], "created": "2015-09-04 04:54:15", "closed": "2016-05-18 19:32:03", "commits": {}, "ttf": 257.0002777777778, "commitsDetails": []}, {"title": "Redis - make the dependencies optional", "body": "I thinks that the https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/pom.xml#L148 redis depedencies should be marked as optional, otherwise the Spring Boot autoconfiguration will catch that and try to initiate the default connection:\n\n```\nredis: {\nstatus: \"DOWN\",\nerror: \"org.springframework.data.redis.RedisConnectionFailureException: Cannot get Jedis connection; nested exception is redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool\"\n},\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/561", "user": "jmnarloch", "labels": ["type: bug"], "created": "2015-08-28 09:09:18", "closed": "2015-10-06 10:35:57", "commits": {}, "ttf": 39.000277777777775, "commitsDetails": []}, {"title": "DefaultTokenServices fail to store enhanced refresh token when refreshAccessToken method is invoked.", "body": "In contrast to the `createAccessToken` method where the enhanced version of the refresh token is saved, the `refreshAccessToken` method saves the refresh token without enhancements.\n\nI believe the behaviour should be something on these lines:\n\n```\nOAuth2AccessToken accessToken = createAccessToken(authentication, refreshToken);\n    tokenStore.storeAccessToken(accessToken, authentication);\n    // In case it was modified\n    refreshToken = accessToken.getRefreshToken();\n    if (refreshToken != null) {\n        tokenStore.storeRefreshToken(refreshToken, authentication);\n    }\n    return accessToken;\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/511", "user": "marcolenzo", "labels": ["type: bug"], "created": "2015-06-16 08:08:51", "closed": "2016-05-16 21:30:15", "commits": {"bf48599637287b82bd3fb21d3b61e79fe2f5baed": {"commitGHEventType": "closed", "commitUser": "jgrandja"}}, "ttf": 335.0002777777778, "commitsDetails": [{"commitHash": "bf48599637287b82bd3fb21d3b61e79fe2f5baed", "commitGHEventType": "closed", "commitUser": "jgrandja", "commitParents": ["3b6a9d00885152ce30d836d6d497a21f6bbc2869"], "nameRev": "bf48599637287b82bd3fb21d3b61e79fe2f5baed tags/2.0.10.RELEASE~18", "commitMessage": "Store enhanced refresh token on refreshAccessToken\n\nFixes gh-511\n", "commitDateTime": "2016-05-16 16:59:48", "authoredDateTime": "2016-01-23 17:01:19", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/TokenServicesWithTokenEnhancerTests.java", "insertions": 37, "deletions": 9, "lines": 46}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.refreshAccessToken(java.lang.String,org.springframework.security.oauth2.provider.TokenRequest)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "TokenServicesWithTokenEnhancerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenServicesWithTokenEnhancerTests", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenServicesWithTokenEnhancerTests.init()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenServicesWithTokenEnhancerTests.storeEnhancedRefreshTokenDuringRefresh()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bf48599637287b82bd3fb21d3b61e79fe2f5baed"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.DefaultTokenServices.refreshAccessToken(java.lang.String,org.springframework.security.oauth2.provider.TokenRequest)"]}, {"title": "Auto approval of scopes inconsistency", "body": "When you use the JdbcClientDetailsService to add ClientDetails and you want to auto approve all scopes for a client (e.g. skip the consent page) then you need to add a autoApproveScope collection containing one String \"true\". See JdbcClientDetailsService#getAutoApproveScopes\n\nThe BaseClientDetails#isAutoApprove also uses the String value \"true\" to determine if all scopes should be auto approved.\n\nHowever the ApprovalStoreUserApprovalHandler#checkForPreApproval uses the magic String \"all\" to decide if all scopes should be auto approved. This is inconsistent. It still works if you use an auto approve scope of \"true\" because ApprovalStoreUserApprovalHandler#checkForPreApproval also calls ClientDetails#isAutoApprove, but then the check for auto approve scope \"all\" is not needed / confusing. Note that when you use JdbcClientDetailsService to add ClientDetails then the autoapprove scope \"all\" does not even end up in the database, because it does not match \"true\"\n\nIf this is confirmed as a (very minor) bug I'm more then happy to  create a pull request with the introduction of a static final field that is used by JdbcClientDetailsService, BaseClientDetails and ApprovalStoreUserApprovalHandler to determine if all scopes should be auto approved as opposed to the current implementation where this magic String is inconsistently coded in all three related classes.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/479", "user": "oharsta", "labels": ["type: bug"], "created": "2015-05-14 07:16:04", "closed": "2015-06-12 11:33:54", "commits": {"21c1584b9439d22244378f0264b6209fce383375": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 29.00027777777778, "commitsDetails": [{"commitHash": "21c1584b9439d22244378f0264b6209fce383375", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["4faa1812835f2744fe0f26c299ed0edb98a4c654"], "nameRev": "21c1584b9439d22244378f0264b6209fce383375 tags/2.0.8.RELEASE~18", "commitMessage": "Fix for inconsistency in the auto approval of scopes\n\nMade the implementation of ClientDetails - e.g. the BaseClientDetails - solely\nresponsible for the decision if a scope can be auto approved. Marking a\nClientDetails - when using JdbcClientDetailsService - with 'true' for the\nautoapprove value will still cause all scopes to be auto approved. The consent\nscreen will be skipped in this scenario.\n\nFixes gh-479, fixes gh-482\n", "commitDateTime": "2015-06-12 12:33:05", "authoredDateTime": "2015-05-15 13:09:00", "commitGitStats": [{"filePath": "samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth/examples/sparklr/oauth/SparklrUserApprovalHandler.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/ApprovalStoreUserApprovalHandler.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/client/BaseClientDetailsTests.java", "insertions": 6, "deletions": 0, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SparklrUserApprovalHandler.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.examples.sparklr.oauth.SparklrUserApprovalHandler.checkForPreApproval(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.core.Authentication)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "ApprovalStoreUserApprovalHandler.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler.checkForPreApproval(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.core.Authentication)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "BaseClientDetailsTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.client.BaseClientDetailsTests.testBaseClientDetailsNullAutoApprove()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["21c1584b9439d22244378f0264b6209fce383375"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 2, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval", "samples/oauth2/sparklr/src/main/java/org/springframework/security/oauth"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.approval.ApprovalStoreUserApprovalHandler.checkForPreApproval(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.core.Authentication)", "org.springframework.security.oauth.examples.sparklr.oauth.SparklrUserApprovalHandler.checkForPreApproval(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.core.Authentication)"]}, {"title": "OAuth2Authentication equals() does not work if authentication details different", "body": "Equals only works if we compare the same object reference. The cause of the problem is the OAuth2AuthenticationDetails which does not override equals. When OAuth2Authentication.equals() delegates the call to AbstractAuthenticationToken.equals() and it calls equals on the details attribute Object.equals() gets executed.\n\nThis causes a problem with Spring Websocket support when used in long polling mode, since each request is authenticated and a new OAuth2Authentication is created. The Websocket implementation uses a Map<Authentication, Session> to find the Websocket session of the authenticated users. Since equals fails, the session is lost.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/478", "user": "pborbas", "labels": ["type: bug"], "created": "2015-05-13 18:47:49", "closed": "2015-05-14 16:43:59", "commits": {"9c06d8a50fba7321f1a35bbe33640738a3d8ebc8": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "9c06d8a50fba7321f1a35bbe33640738a3d8ebc8", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["efaf1d6124bf68ac40853f7a86ccb1488bd7bf37"], "nameRev": "9c06d8a50fba7321f1a35bbe33640738a3d8ebc8 tags/2.0.8.RELEASE~31", "commitMessage": "Ensure OAuth2Auth*Details has equals() and hashCode()\n\nFixes gh-478\n", "commitDateTime": "2015-05-14 17:43:21", "authoredDateTime": "2015-05-14 17:43:21", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/OAuth2Authentication.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationDetails.java", "insertions": 42, "deletions": 0, "lines": 42}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/OAuth2AuthenticationTests.java", "insertions": 13, "deletions": 0, "lines": 13}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/authentication/OAuth2AuthenticationDetailsTests.java", "insertions": 39, "deletions": 0, "lines": 39}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Authentication.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Authentication.equals(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2AuthenticationDetails.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails.hashCode()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails.equals(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2AuthenticationTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2AuthenticationTests.testSerializationWithDetails()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2AuthenticationDetailsTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetailsTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9c06d8a50fba7321f1a35bbe33640738a3d8ebc8"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 46, "deletions": 0, "lines": 46, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/authentication"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails.hashCode()", "org.springframework.security.oauth2.provider.OAuth2Authentication.equals(java.lang.Object)", "org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationDetails.equals(java.lang.Object)"]}, {"title": "NullPointerException in DefaultTokenServices", "body": "We get (very rare) NPEs in DefaultTokenServices:\n\n```\n25 Mar 2015 14:02:09:118 ERROR CustomOAuth2AuthenticationManager - Error while authenticating OAuth request\n\njava.lang.NullPointerException\n    at org.springframework.security.oauth2.provider.token.DefaultTokenServices.loadAuthentication(DefaultTokenServices.java:222) ~[spring-security-oauth2-2.0.5.RELEASE.jar:?]\n    at com.example.oauth.ExpirationExtendingTokenServices.loadAuthentication(ExpirationExtendingTokenServices.java:62) ~[ExpirationExtendingTokenServices.class:?]\n    at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationManager.authenticate(OAuth2AuthenticationManager.java:80) ~[spring-security-oauth2-2.0.5.RELEASE.jar:?]\n    at com.example.oauth.CustomOAuth2AuthenticationManager.authenticate(CustomOAuth2AuthenticationManager.java:22) [CustomOAuth2AuthenticationManager.class:?]\n    at org.springframework.security.oauth2.provider.authentication.OAuth2AuthenticationProcessingFilter.doFilter(OAuth2AuthenticationProcessingFilter.java:117) [spring-security-oauth2-2.0.5.RELEASE.jar:?]\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]\n    at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50) [spring-security-web-3.2.5.RELEASE.jar:3.2.5.RELEASE]\n    at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.4.RELEASE.jar:4.1.4.RELEASE]\n```\n\nThis NPE happens on the line `String clientId = result.getOAuth2Request().getClientId();` in the `loadAuthentication` method.\n\nI'm not sure if `result` is null or `result.getOAuth2Request()` returns null. I did not investigate the latter...\n\nMy assumption:\nThe access token is read multiple times form the DB in loadAuthentication by calling `OAuth2AccessToken accessToken = tokenStore.readAccessToken(accessTokenValue)` and `OAuth2Authentication result = tokenStore.readAuthentication(accessToken);`. If the token expires between these calls and another request comes in, the token gets deleted in the DB and the call to tokenStore.readAuthentication returns null.\n\nBut nothing is proven, it's just an assumption...\n\nThis could be fixed by changing the tokenStore interface. It probably would make sense to have a method that returns the OAuth2AccessToken and OAuth2Authentication in one call. This saves one DB roundtrip per request (!!!) (also in the default jdbc implementation) and solves the problem with the token dissapearing between calls.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/458", "user": "ractive", "labels": ["type: bug"], "created": "2015-04-16 08:31:35", "closed": "2015-04-16 10:53:23", "commits": {"10c6c4e5a26e391435c08952c868ed43386eb7ab": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "10c6c4e5a26e391435c08952c868ed43386eb7ab", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["5beebfd3ff5b4d9ab9830d4943da79f2266b8a2a"], "nameRev": "10c6c4e5a26e391435c08952c868ed43386eb7ab tags/2.0.8.RELEASE~35", "commitMessage": "Defensive coding against race condition / bug in TokenStore\n\nIf an access token is in the store it should always have a non-null\nauthentication attached. There is a possible race condition in\nDefaultTokenServices though, and this change guards against it\nbu throwing InvalidTokenException instead of the NullPointerException.\n\nFixes gh-458\n", "commitDateTime": "2015-04-16 11:51:20", "authoredDateTime": "2015-04-16 11:51:20", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/DefaultTokenServicesTests.java", "insertions": 33, "deletions": 0, "lines": 33}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.loadAuthentication(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultTokenServicesTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServicesTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["10c6c4e5a26e391435c08952c868ed43386eb7ab"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 0, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.DefaultTokenServices.loadAuthentication(java.lang.String)"]}, {"title": "client accepts authorization code with no state parameter", "body": "I attempt to access a protected resource and the client redirects me to the authorization server with a state parameter. Suppose I tamper with this parameter. If I change the value to something else, when the authorization server redirects me back to the client with the authorization code, I get a 401 return code, which is expected.  However, if I just remove the state parameter so it is omitted from the callback, the client accepts the authorization code (and uses it to get an access token, etc.).  Seems like this is a bug.  \n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/440", "user": "mikeroda", "labels": ["type: bug"], "created": "2015-03-23 20:02:30", "closed": "2015-04-14 10:42:22", "commits": {"eb9b5cc1c1c72282e187ebdb64e153cc975995fc": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 21.00027777777778, "commitsDetails": [{"commitHash": "eb9b5cc1c1c72282e187ebdb64e153cc975995fc", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["bbd7b7052b1d6479f9f9180a3de28712ab9f0504"], "nameRev": "eb9b5cc1c1c72282e187ebdb64e153cc975995fc tags/2.0.8.RELEASE~37", "commitMessage": "Add flag to auth code client to make state key mandatory by default\n\nUser has to choose explicitly the old behaviour where a null state\nkey was acceptable even when the wrong state key was an error.\n\nFixes gh-440\n", "commitDateTime": "2015-04-14 11:40:01", "authoredDateTime": "2015-04-14 11:40:01", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProvider.java", "insertions": 13, "deletions": 2, "lines": 15}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProviderTests.java", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/token/grant/code/AuthorizationCodeAccessTokenProviderWithConversionTests.java", "insertions": 4, "deletions": 0, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AuthorizationCodeAccessTokenProvider.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider.getParametersForTokenRequest(org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails,org.springframework.security.oauth2.client.token.AccessTokenRequest)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider.setStateMandatory(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationCodeAccessTokenProviderTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProviderTests.testGetAccessTokenFailsWithNoState()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProviderTests.testGetAccessToken()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "AuthorizationCodeAccessTokenProviderWithConversionTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProviderWithConversionTests.testGetAccessTokenFromJson()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProviderWithConversionTests.testGetErrorFromJson()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProviderWithConversionTests.testGetAccessTokenFromForm()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProviderWithConversionTests.testGetErrorFromForm()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["eb9b5cc1c1c72282e187ebdb64e153cc975995fc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 2, "lines": 15, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 5, "UPD": 1, "INS": 3, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider.setStateMandatory(boolean)", "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider", "org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeAccessTokenProvider.getParametersForTokenRequest(org.springframework.security.oauth2.client.token.grant.code.AuthorizationCodeResourceDetails,org.springframework.security.oauth2.client.token.AccessTokenRequest)"]}, {"title": "InMemoryTokenStore doesn't remove access token properly", "body": "After calling \n\n```\n//token is the access token generated for clientId = \"clientId\" and username = \"username\"\ndefaultTokenServices.revokeToken(token.getValue());\n```\n\ncalling\n\n```\ntokenStore.findTokensByClientIdAndUserName(\"clientId\", \"username\")\n```\n\nShould return null. But it actually returns the token again.\n\nI think this is caused because In InMemoryTokenStore.storeAccessToken, the userNameToAccessToken is populated by these lines\n\n```\n        if (!authentication.isClientOnly()) {\n            addToCollection(this.userNameToAccessTokenStore, getApprovalKey(authentication), token);\n        }\n```\n\nAnd in InMemoryTokenStore.removeAccessToken, the userNameToAccessTokenStore is cleared by these line:\n\n```\n            tokens = this.userNameToAccessTokenStore.get(authentication.getName());\n            if (tokens != null) {\n                tokens.remove(removed);\n            }\n```\n\nThe key used in these two methods are different. One is clientId plus username, the other is just user name.\n\nCan you confirm that this is a bug? If yes I can create a pull request for this.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/439", "user": "TimShi", "labels": ["type: bug"], "created": "2015-03-21 15:56:38", "closed": "2015-05-14 16:30:35", "commits": {"efaf1d6124bf68ac40853f7a86ccb1488bd7bf37": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 54.000277777777775, "commitsDetails": [{"commitHash": "efaf1d6124bf68ac40853f7a86ccb1488bd7bf37", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["0c0888ffbd321afb5ac910a33169b01afe9e92c2"], "nameRev": "efaf1d6124bf68ac40853f7a86ccb1488bd7bf37 tags/2.0.8.RELEASE~32", "commitMessage": "Fix key error in InMemoryTokenServices\n\nRemoving an access token used the wrong key for clientId\nand username, so the tokens were still findable even though\nthey had been removed.\n\nFixes gh-439\n", "commitDateTime": "2015-05-14 17:27:49", "authoredDateTime": "2015-05-14 17:27:49", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/InMemoryTokenStore.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/AbstractDefaultTokenServicesTests.java", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/TokenStoreBaseTests.java", "insertions": 60, "deletions": 29, "lines": 89}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InMemoryTokenStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore.removeAccessToken(java.lang.String)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "AbstractDefaultTokenServicesTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractDefaultTokenServicesTests.testRevokedTokenNotAvailable()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TokenStoreBaseTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.TokenStoreBaseTests.testRemovedTokenCannotBeFoundByUsername()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["efaf1d6124bf68ac40853f7a86ccb1488bd7bf37"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore.removeAccessToken(java.lang.String)"]}, {"title": "JWT: Client credentials token authorities lost on conversion from JSON", "body": "A client credentials token encodes authorities but these are lost when the `DefaultAccessTokenConverter.extractAuthentication()` is applied to the token claims.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/431", "user": "dsyer", "labels": ["type: bug"], "created": "2015-03-17 11:51:00", "closed": "2015-03-17 11:57:43", "commits": {"9823898f5d8da3dbfd4290e0e861574bab948cca": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "9823898f5d8da3dbfd4290e0e861574bab948cca", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["8a1fb1349d9f9822b0231913e9484478d31aab0b"], "nameRev": "9823898f5d8da3dbfd4290e0e861574bab948cca tags/2.0.7.RELEASE~3", "commitMessage": "Pass authorities through from claims in client credentials token\n\nA client credentials token has authorities, but these were not being\npassed on from the claims to the OAuthAuthentication in the\nDefaultAccessTokenConverter.\n\nFixes gh-431\n", "commitDateTime": "2015-03-17 11:56:18", "authoredDateTime": "2015-03-17 11:56:18", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java", "insertions": 9, "deletions": 1, "lines": 10}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverterTests.java", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter.extractAuthentication(java.util.Map)", "TOT": 3, "UPD": 1, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultAccessTokenConverterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverterTests.extractAuthentication()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverterTests.extractAuthenticationFromClientToken()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9823898f5d8da3dbfd4290e0e861574bab948cca"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 1, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 1, "INS": 2, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter.extractAuthentication(java.util.Map)"]}, {"title": "JWT refresh-token contains former base64 encoded refresh-token in JTI", "body": "I have an issue using JWT refresh-tokens. As you know, the JWT refresh-token contains two IDs (`jti` and `ati`). Using the \u201cpassword\u201d grant-type for authorization returns two tokens (access-token and refresh-token). The access-token contains a `jti` and the refresh-token contains another `jti` and an `ati`. Both `jti`\u2019s are strings like `\u201ce2492e9c-ae6e-474c-ba2d-bebd14bb8b4f\u201d` and the `ati` of the refresh-token equals the `jti` of the access-token. Here is everything as it is supposed to be. But if I use the refresh-token grant-type the `jti` of the refresh-token is not a random string anymore, it\u2019s the base64 encoded JWT value of the former refresh-token. I can\u2019t imagine that this is the intended behavior.\nSince I don\u2019t use the `jti` in my project, I just recognized this behavior because of a `HeadersTooLargeException`. Using the refresh-token multiple times in a row nests all the encoded former refresh-tokens in the new tokens `jti`. So it grows extremely large and becomes too large for the webresponse. \nThe `jti` is set by `refreshTokenInfo.put(TOKEN_ID, encodedRefreshToken.getValue());` in the `enhance(OAuth2AccessToken accessToken, OAuth2Authentication authentication)` method of the `JwtAccessTokenConverter`.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/429", "user": "skampa", "labels": ["type: bug"], "created": "2015-03-16 12:52:25", "closed": "2015-03-17 11:30:33", "commits": {"8a1fb1349d9f9822b0231913e9484478d31aab0b": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "8a1fb1349d9f9822b0231913e9484478d31aab0b", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["4ef028fe142877a081ef1c6032f94c6b4ba7925a"], "nameRev": "8a1fb1349d9f9822b0231913e9484478d31aab0b tags/2.0.7.RELEASE~4", "commitMessage": "Use existing JTI if there is one as ATI in a refresh token\n\nWhen a token is refreshed the access token itself is re-enhanced and\nso you have to pick out the derived fields from additionalInfo if\nthere are any.\n\nFixes gh-429\n", "commitDateTime": "2015-03-17 11:29:44", "authoredDateTime": "2015-03-17 11:29:44", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java", "insertions": 57, "deletions": 27, "lines": 84}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/DefaultTokenServicesWithJwtTests.java", "insertions": 59, "deletions": 2, "lines": 61}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverterTests.java", "insertions": 69, "deletions": 31, "lines": 100}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultTokenServicesWithJwtTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServicesWithJwtTests.testRefreshedTokenHasIdThatMatchesAccessToken()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServicesWithJwtTests.testDoubleRefresh()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwtAccessTokenConverterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverterTests.testRefreshTokenAdded()", "TOT": 11, "UPD": 1, "INS": 5, "MOV": 4, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverterTests.testEnhanceAccessToken()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverterTests.rsaKeyCreatesValidRsaSignedTokens()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverterTests.testRefreshTokenAccessTokenIdWhenDoubleEnhanced()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8a1fb1349d9f9822b0231913e9484478d31aab0b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 57, "deletions": 27, "lines": 84, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)"]}, {"title": "Maven profile 'spring4' has broken dependencies for tonr example", "body": "Profile spring4 has spring.version is 4.1.0.BUILD-SNAPSHOT however 4.0.8 is needed for the tonr example.\n\nI'm looking specifically a the latest tag RELEASE.2.0.6\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/416", "user": "galves", "labels": ["type: bug"], "created": "2015-02-26 10:54:31", "closed": "2015-03-18 11:29:19", "commits": {"ebddd5bc362a09530901241c011e5f56f9bc7585": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 20.00027777777778, "commitsDetails": [{"commitHash": "ebddd5bc362a09530901241c011e5f56f9bc7585", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["9823898f5d8da3dbfd4290e0e861574bab948cca"], "nameRev": "ebddd5bc362a09530901241c011e5f56f9bc7585 tags/2.0.7.RELEASE~2", "commitMessage": "Make samples work with Spring 4.2\n\nChanged profile spring4->springNext and fixed dependencies. Also\nhad to explicitly use Jackson2 in tonr2.\n\nFixes gh-416\n", "commitDateTime": "2015-03-18 11:27:44", "authoredDateTime": "2015-03-18 11:27:44", "commitGitStats": [{"filePath": "pom.xml", "insertions": 112, "deletions": 1, "lines": 113}, {"filePath": "samples/oauth2/sparklr/pom.xml", "insertions": 0, "deletions": 6, "lines": 6}, {"filePath": "samples/oauth2/tonr/pom.xml", "insertions": 16, "deletions": 12, "lines": 28}, {"filePath": "samples/oauth2/tonr/src/main/java/org/springframework/security/oauth/examples/config/WebMvcConfig.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "samples/oauth2/tonr/src/main/java/org/springframework/security/oauth/examples/tonr/mvc/FacebookController.java", "insertions": 5, "deletions": 4, "lines": 9}, {"filePath": "spring-security-oauth/pom.xml", "insertions": 1, "deletions": 11, "lines": 12}, {"filePath": "spring-security-oauth2/pom.xml", "insertions": 1, "deletions": 12, "lines": 13}], "commitSpoonAstDiffStats": [{"spoonFilePath": "WebMvcConfig.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.examples.config.WebMvcConfig.contentViewResolver()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth.examples.config.WebMvcConfig.ResourceConfiguration.facebookRestTemplate(org.springframework.security.oauth2.client.OAuth2ClientContext)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "FacebookController.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth.examples.tonr.mvc.FacebookController.photos(org.springframework.ui.Model)", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ebddd5bc362a09530901241c011e5f56f9bc7585"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 8, "lines": 17, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 8, "UPD": 8, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["samples/oauth2/tonr/src/main/java/org/springframework/security/oauth"], "changesInPackagesSPOON": ["org.springframework.security.oauth.examples.config.WebMvcConfig.ResourceConfiguration.facebookRestTemplate(org.springframework.security.oauth2.client.OAuth2ClientContext)", "org.springframework.security.oauth.examples.tonr.mvc.FacebookController.photos(org.springframework.ui.Model)", "org.springframework.security.oauth.examples.config.WebMvcConfig.contentViewResolver()"]}, {"title": "HTTP requests to the token endpoint other than POST return HTTP 500 instead of HTTP 405", "body": "As part of Spring Security OAuth2 2.0.6, the token endpoint prohibits all request methods other than POST by default. Any requests other than POST to the token endpoint _should_ return an HTTP status 405 \"Method Not Allowed\". Instead, HTTP 500 \"Server Error\" is returned.\n\nThis \"bug\" was actually introduced by my pull request (PR #334) to initially limit the token endpoint to POST by default. I'll see if I can create another PR to fix this behavior.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/408", "user": "ccampo133", "labels": ["type: bug"], "created": "2015-02-17 15:58:37", "closed": "2015-03-13 17:50:54", "commits": {"847e6ffde23e84b4f3e9de5940b892cd6f077a38": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 24.00027777777778, "commitsDetails": [{"commitHash": "847e6ffde23e84b4f3e9de5940b892cd6f077a38", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["cbe00d2512ca9c07c54dd081ccd18168e363f11c"], "nameRev": "847e6ffde23e84b4f3e9de5940b892cd6f077a38 tags/2.0.7.RELEASE~8", "commitMessage": "Add explicit handler for HttpRequestMethodNotSupportedException\n\nFixes gh-408\n", "commitDateTime": "2015-03-13 17:50:17", "authoredDateTime": "2015-03-13 17:50:17", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/TokenEndpoint.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "tests/annotation/jwt/src/main/resources/application.yml", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "tests/annotation/jwt/src/main/resources/logback.xml", "insertions": 0, "deletions": 8, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TokenEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.handleHttpRequestMethodNotSupportedException(org.springframework.web.HttpRequestMethodNotSupportedException)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["847e6ffde23e84b4f3e9de5940b892cd6f077a38"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 0, "lines": 9, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["tests/annotation/jwt/src/main/resources/application.yml", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.TokenEndpoint.handleHttpRequestMethodNotSupportedException(org.springframework.web.HttpRequestMethodNotSupportedException)"]}, {"title": "OAuth2Request.getGrantType() returns null for refresh_token grant", "body": "Accessing the grant type via `OAuth2Request.getGrantType(\u2026)` returns `null` if \u201crefresh_token\u201d grant is used. \nI\u2019m using the `DefaultTokenServices` with JWT. Using the \u201crefresh_token\u201d grant creates an `OAuth2Authentication` object in `refreshAccessToken(\u2026)` by calling `tokenStore.readAuthenticationForRefreshToken(refreshToken);`. This object doesn\u2019t contain information about the grant type. \nMy JWT contains user data and I need this grant type info in `JwtAccessTokenConverter` to reload this data from database via `UserDetailsService` to update the data that potentially changed during the \u201cAccess Token session\u201d. This information is important, because I just need to reload data from database if the refresh token grant is used (all other grant types already loaded the data from database at this point).\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/405", "user": "skampa", "labels": ["type: bug"], "created": "2015-02-16 14:30:40", "closed": "2015-02-17 08:50:23", "commits": {"befb023a5cd7ce6e4ee16c1eeab414895d01ab92": {"commitGHEventType": "referenced", "commitUser": "dsyer"}, "27a2b2513635a98642f62599677f9e9480507f26": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "befb023a5cd7ce6e4ee16c1eeab414895d01ab92", "commitGHEventType": "referenced", "commitUser": "dsyer", "commitParents": ["cc47a488385b16c3946d43f5583b038d4aecd559"], "nameRev": "befb023a5cd7ce6e4ee16c1eeab414895d01ab92 tags/2.0.7.RELEASE~30", "commitMessage": "Add includeGrantType flag in DefaultAccessTokenConverter\n\nDefaults to false (preserving existing behaviour and keeping JWT length\nto a minimum), but can be set to true and injected into a JwtTokenEnhancer\nto provide the original grant type when a token is decoded.\n\nSee gh-405.\n", "commitDateTime": "2015-02-16 16:43:56", "authoredDateTime": "2015-02-16 16:43:56", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AccessTokenConverter.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultAccessTokenConverter.java", "insertions": 18, "deletions": 0, "lines": 18}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JwtTokenStoreTests.java", "insertions": 14, "deletions": 2, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter.setIncludeGrantType(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter.convertAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter.extractAuthentication(java.util.Map)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwtAccessTokenConverter.java", "spoonMethods": []}, {"spoonFilePath": "JwtTokenStoreTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.testAuthenticationPreservesGrantType()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "27a2b2513635a98642f62599677f9e9480507f26", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["befb023a5cd7ce6e4ee16c1eeab414895d01ab92"], "nameRev": "27a2b2513635a98642f62599677f9e9480507f26 tags/2.0.7.RELEASE~29", "commitMessage": "New public methods in OAuth2Request identify a refresh token request\n\nProvided you use a DefaultTokenServices then the TokenEnhancer can now\nbe certain that it is enhancing a token that was refreshed. There's a\nboolean method isRefresh() and full access to the TokenRequest in case\nthere's anything useful in there as well (e.g. the requested scopes).\n\nFixes gh-405\n", "commitDateTime": "2015-02-16 17:22:38", "authoredDateTime": "2015-02-16 17:22:38", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/OAuth2Request.java", "insertions": 34, "deletions": 2, "lines": 36}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java", "insertions": 8, "deletions": 6, "lines": 14}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/AbstractDefaultTokenServicesTests.java", "insertions": 22, "deletions": 4, "lines": 26}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Request.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Request", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Request.refresh(org.springframework.security.oauth2.provider.TokenRequest)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Request.isRefresh()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Request.getRefreshTokenRequest()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Request.narrowScope(java.util.Set)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createRefreshedAuthentication(org.springframework.security.oauth2.provider.OAuth2Authentication,java.util.Set)", "TOT": 8, "UPD": 3, "INS": 0, "MOV": 3, "DEL": 2}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.refreshAccessToken(java.lang.String,org.springframework.security.oauth2.provider.TokenRequest)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createRefreshedAuthentication(org.springframework.security.oauth2.provider.OAuth2Authentication,org.springframework.security.oauth2.provider.TokenRequest)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractDefaultTokenServicesTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractDefaultTokenServicesTests.testClientSpecificTokenExpiry().3", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractDefaultTokenServicesTests.testRefreshTokenRequestHasRefreshFlag()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["befb023a5cd7ce6e4ee16c1eeab414895d01ab92", "27a2b2513635a98642f62599677f9e9480507f26"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 63, "deletions": 8, "lines": 71, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 26, "UPD": 3, "INS": 15, "MOV": 5, "DEL": 3, "spoonFilesChanged": 4, "spoonMethodsChanged": 13}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.DefaultTokenServices.createRefreshedAuthentication(org.springframework.security.oauth2.provider.OAuth2Authentication,org.springframework.security.oauth2.provider.TokenRequest)", "org.springframework.security.oauth2.provider.OAuth2Request.isRefresh()", "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter.convertAccessToken(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "org.springframework.security.oauth2.provider.OAuth2Request.narrowScope(java.util.Set)", "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter.extractAuthentication(java.util.Map)", "org.springframework.security.oauth2.provider.token", "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter.setIncludeGrantType(boolean)", "org.springframework.security.oauth2.provider.token.DefaultTokenServices.refreshAccessToken(java.lang.String,org.springframework.security.oauth2.provider.TokenRequest)", "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createRefreshedAuthentication(org.springframework.security.oauth2.provider.OAuth2Authentication,java.util.Set)", "org.springframework.security.oauth2.provider.token.DefaultAccessTokenConverter", "org.springframework.security.oauth2.provider.OAuth2Request.refresh(org.springframework.security.oauth2.provider.TokenRequest)", "org.springframework.security.oauth2.provider.OAuth2Request.getRefreshTokenRequest()", "org.springframework.security.oauth2.provider.OAuth2Request"]}, {"title": "Authorize redirect-uri with escaped = or & in a query-parameter-value", "body": "Doing a authorize-call with a redirect-uri containing an escaped = or & in a query-parameter-value, then the resulting redirect-uri contains those characters unescaped.\n\nFor instance an unsuccessful authorize: \nUsing redirect-uri <code>http://anywhere?t=a%3Db%26ep%3Dtest%2540test.me</code>\nis returned as       <code>http://anywhere?t=a%3Db&ep=test%2540test.me&error=...</code>\nWhile redirect-uri <code>http://anywhere?t=a%3Db%26ep%3Dtest%2540test.me&error=...</code> is expected.\n\nThis can be reproduced by using this redirect-uri in AuthorizationCodeProviderTests#testUserDeniesConfirmation junit-test.\n\nTested this with version 2.0.6.\nThis is a follow-up of issue https://github.com/spring-projects/spring-security-oauth/issues/349.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/404", "user": "barbaraj7", "labels": ["type: bug"], "created": "2015-02-16 11:49:21", "closed": "2015-02-23 12:05:48", "commits": {"05192c2d22634500d6707ad6e16ebe93c0700ac0": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "05192c2d22634500d6707ad6e16ebe93c0700ac0", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["b6e901244678825f2e0b220d9aeb016118f2282d"], "nameRev": "05192c2d22634500d6707ad6e16ebe93c0700ac0 tags/2.0.7.RELEASE~19", "commitMessage": "More tinkering with encoded query in redirect URI\n\nWe needed to add another special treatment for query params\nto only encode the ones coming from the authorization endpoint\n(unless they were registered as a redirect with special characters).\nThe output is slightly different but the URLs are more correct than\nbefore.\n\nFixes gh-404\n", "commitDateTime": "2015-02-23 12:05:33", "authoredDateTime": "2015-02-23 12:03:00", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java", "insertions": 22, "deletions": 24, "lines": 46}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpointTests.java", "insertions": 21, "deletions": 3, "lines": 24}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AuthorizationEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.append(java.lang.String,java.util.Map,java.util.Map,boolean)", "TOT": 39, "UPD": 12, "INS": 8, "MOV": 14, "DEL": 5}]}, {"spoonFilePath": "AuthorizationEndpointTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testAuthorizationCodeWithTrickyQueryParams()", "TOT": 7, "UPD": 1, "INS": 5, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testAuthorizationCodeWithMoreTrickyEncodedQueryParams()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["05192c2d22634500d6707ad6e16ebe93c0700ac0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 22, "deletions": 24, "lines": 46, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 39, "UPD": 12, "INS": 8, "MOV": 14, "DEL": 5, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.append(java.lang.String,java.util.Map,java.util.Map,boolean)"]}, {"title": "Transaction in DefaultTokenServices", "body": "In class DefaultTokenServices  the method loadAuthentication removes the token when it has expired, but the line below the InvalidTokenException exception is thrown and it only rollback the transaction.\n\nShould have something @Transaction(noRollbackFor=InvalidTokenException.class) in this method or in the class because the same bug for example happens in other methods as refreshAccessToken.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/399", "user": "peruzzo", "labels": ["type: bug"], "created": "2015-02-11 17:10:25", "closed": "2015-02-19 14:14:33", "commits": {"02c8afd65f04879204577a052f3ee760e5449416": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "02c8afd65f04879204577a052f3ee760e5449416", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["6620619b5f1e7a61c10c0de19af9d2634ebdaace"], "nameRev": "02c8afd65f04879204577a052f3ee760e5449416 tags/2.0.7.RELEASE~21", "commitMessage": "Move @Transactional down to method level in DefaultTokenServices\n\nIt didn't make sense for all methods, and for the refresh token case\nyou also need to set different rollback rules to avoid the data being\nunchanged after a failed grant.\n\nFixes gh-399\n", "commitDateTime": "2015-02-19 14:13:28", "authoredDateTime": "2015-02-19 14:13:28", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.refreshAccessToken(java.lang.String,org.springframework.security.oauth2.provider.TokenRequest)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["02c8afd65f04879204577a052f3ee760e5449416"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.DefaultTokenServices", "org.springframework.security.oauth2.provider.token.DefaultTokenServices.refreshAccessToken(java.lang.String,org.springframework.security.oauth2.provider.TokenRequest)", "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)"]}, {"title": "HTTP 401 when getting photos in sparklr2 sample application", "body": "I've been trying out the oauth2 sample apps. Everything is working fine for the most part - I can use Tonr to retrieve and display the photos for user marissa via oauth login to sparklr2. However, on sparklr2 itself, I can't see any photos even after logging in, with an error \"http://localhost:8080/sparklr2/photos  [HTTP/1.1 401 Unauthorized 2ms]\" in the browser console on /index.jsp. I also get a 401 if I try to go directly to /photos, with this xml error:\n\n```\n<oauth>\n<error_description>\nAn Authentication object was not found in the SecurityContext\n</error_description>\n<error>unauthorized</error>\n</oauth>\n```\n\nSame happens for user paul. Any idea what's going on?\n\nHere is part of the logs from around the error:\n\n```\nsparklr2 10:30:08.671 [DEBUG] FilterChainProxy - /photos?callback=pictureDisplay&format=json at position 4 of 10 in additional filter chain; firing Filter: 'LogoutFilter'\nsparklr2 10:30:08.671 [DEBUG] AntPathRequestMatcher - Checking match of request : '/photos'; against '/logout'\nsparklr2 10:30:08.671 [DEBUG] FilterChainProxy - /photos?callback=pictureDisplay&format=json at position 5 of 10 in additional filter chain; firing Filter: 'OAuth2AuthenticationProcessingFilter'\nsparklr2 10:30:08.671 [DEBUG] BearerTokenExtractor - Token not found in headers. Trying request parameters.\nsparklr2 10:30:08.671 [DEBUG] BearerTokenExtractor - Token not found in request parameters.  Not an OAuth2 request.\nsparklr2 10:30:08.671 [DEBUG] OAuth2AuthenticationProcessingFilter - No token in request, will continue chain.\nsparklr2 10:30:08.671 [DEBUG] FilterChainProxy - /photos?callback=pictureDisplay&format=json at position 6 of 10 in additional filter chain; firing Filter: 'RequestCacheAwareFilter'\nsparklr2 10:30:08.671 [DEBUG] FilterChainProxy - /photos?callback=pictureDisplay&format=json at position 7 of 10 in additional filter chain; firing Filter: 'SecurityContextHolderAwareRequestFilter'\nsparklr2 10:30:08.671 [DEBUG] FilterChainProxy - /photos?callback=pictureDisplay&format=json at position 8 of 10 in additional filter chain; firing Filter: 'SessionManagementFilter'\nsparklr2 10:30:08.671 [DEBUG] FilterChainProxy - /photos?callback=pictureDisplay&format=json at position 9 of 10 in additional filter chain; firing Filter: 'ExceptionTranslationFilter'\nsparklr2 10:30:08.671 [DEBUG] FilterChainProxy - /photos?callback=pictureDisplay&format=json at position 10 of 10 in additional filter chain; firing Filter: 'FilterSecurityInterceptor'\nsparklr2 10:30:08.672 [DEBUG] AntPathRequestMatcher - Checking match of request : '/photos'; against '/me'\nsparklr2 10:30:08.672 [DEBUG] AntPathRequestMatcher - Checking match of request : '/photos'; against '/photos'\nsparklr2 10:30:08.672 [DEBUG] FilterSecurityInterceptor - Secure object: FilterInvocation: URL: /photos?callback=pictureDisplay&format=json; Attributes: [#oauth2.throwOnError(#oauth2.hasScope('read') or (!#oauth2.isOAuth() and hasRole('ROLE_USER')))]\nsparklr2 10:30:08.672 [DEBUG] ExceptionTranslationFilter - Authentication exception occurred; redirecting to authentication entry point <org.springframework.security.authentication.AuthenticationCredentialsNotFoundException: An Authentication object was not found in the SecurityContext>org.springframework.security.authentication.AuthenticationCredentialsNotFoundException: An Authentication object was not found in the SecurityContext\n    at org.springframework.security.access.intercept.AbstractSecurityInterceptor.credentialsNotFound(AbstractSecurityInterceptor.java:339)\n    at org.springframework.security.access.intercept.AbstractSecurityInterceptor.beforeInvocation(AbstractSecurityInterceptor.java:198)\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/380", "user": "ShardPhoenix", "labels": ["type: bug"], "created": "2015-01-28 23:23:32", "closed": "2015-01-29 09:31:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JWT refresh tokens valid as access tokens", "body": "I've noticed the refresh tokens generated by JwtAccessTokenConverter are also valid as access tokens.\n\nUpon digging into this issue more, I've come to the following conclusions:\n- Since JWT does not store tokens in memory or a db, the only way to differentiate a refresh token from an access token is via the decoded JWT payload.\n- By default, the JWT payload does not include any information in the payload to indicate it's a refresh token.\n- At the moment, there does not appear to be a way to alter just the refresh token via configuration (for example, a refresh token specific ClientDetailsServiceBuilder.additionalInformation or unique refresh token scopes).\n\nI don't think this is a security flaw, but it's odd behavior.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/363", "user": "ronaldheft", "labels": ["type: bug"], "created": "2015-01-19 03:32:38", "closed": "2015-01-27 13:21:54", "commits": {"4be7f8d627d203e992135dafbcf302dd54665492": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 8.000277777777777, "commitsDetails": [{"commitHash": "4be7f8d627d203e992135dafbcf302dd54665492", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["d8cb5c4dab0c7f296da1111dd150616510e5ae7e"], "nameRev": "4be7f8d627d203e992135dafbcf302dd54665492 tags/2.0.6.RELEASE~13", "commitMessage": "Ensure JWT refresh tokens cannot be used as access tokens\n\n... and vice-versa (not such a problem). This change adds a new claim\nto JWT refresh tokens referring back to the original access token (ati).\n\nFixes gh-363\n", "commitDateTime": "2015-01-27 13:15:57", "authoredDateTime": "2015-01-27 13:15:57", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AccessTokenConverter.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtTokenStore.java", "insertions": 13, "deletions": 1, "lines": 14}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverterTests.java", "insertions": 15, "deletions": 11, "lines": 26}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/store/JwtTokenStoreTests.java", "insertions": 60, "deletions": 9, "lines": 69}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.isRefreshToken(org.springframework.security.oauth2.common.OAuth2AccessToken)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwtTokenStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStore.readAccessToken(java.lang.String)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStore.readRefreshToken(java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStore.createRefreshToken(org.springframework.security.oauth2.common.OAuth2AccessToken)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwtAccessTokenConverterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverterTests.testRefreshTokenAdded()", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwtTokenStoreTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.testReadRefreshToken()", "TOT": 6, "UPD": 2, "INS": 2, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.testReadRefreshTokenForUnapprovedScope()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.testReadNonExpiringRefreshToken()", "TOT": 5, "UPD": 1, "INS": 2, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.convertToRefreshToken(org.springframework.security.oauth2.common.DefaultOAuth2AccessToken)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.testNonAccessTokenNotReadable()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.testNonRefreshTokenNotReadable()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.testAccessTokenIsNotARefreshToken()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.testRefreshTokenIsNotAnAccessToken()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.init()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenStoreTests.testReadExpiringRefreshToken()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4be7f8d627d203e992135dafbcf302dd54665492"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 25, "deletions": 1, "lines": 26, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 9, "UPD": 2, "INS": 6, "MOV": 1, "DEL": 0, "spoonFilesChanged": 3, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter", "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.isRefreshToken(org.springframework.security.oauth2.common.OAuth2AccessToken)", "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "org.springframework.security.oauth2.provider.token.store.JwtTokenStore.readRefreshToken(java.lang.String)", "org.springframework.security.oauth2.provider.token.store.JwtTokenStore.createRefreshToken(org.springframework.security.oauth2.common.OAuth2AccessToken)", "org.springframework.security.oauth2.provider.token.store.JwtTokenStore.readAccessToken(java.lang.String)", "org.springframework.security.oauth2.provider.token"]}, {"title": "AuthorizationServerEndpointsConfigurer has the wrong default for reuseRefreshToken", "body": "It looks like the change in commit 793ebe0a made a false assumption about the default value in `DefaultTokenServices`.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/351", "user": "dsyer", "labels": ["type: bug"], "created": "2015-01-07 14:24:43", "closed": "2015-01-23 15:14:59", "commits": {"793ebe0a08b57f90b3c78147a21f36822ba3feab": {"commitGHEventType": "referenced", "commitUser": "dsyer"}, "bdb3390b19c54bdca3da6383ec9ad191ef4734cd": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 16.00027777777778, "commitsDetails": [{"commitHash": "793ebe0a08b57f90b3c78147a21f36822ba3feab", "commitGHEventType": "referenced", "commitUser": "dsyer", "commitParents": ["dd1ba7cb2795bb478adfaac104164dda11e826fa"], "nameRev": "793ebe0a08b57f90b3c78147a21f36822ba3feab tags/2.0.5.RELEASE~3", "commitMessage": "Add convenience method for reuseRefreshToken()\n\nLonger term (2.1.0) we should pull out the toke service builing into\na separate builder. It's too big a change for a point release though.\n\nFixes gh-318\n", "commitDateTime": "2014-12-16 11:55:29", "authoredDateTime": "2014-12-16 11:55:29", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java", "insertions": 8, "deletions": 0, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AuthorizationServerEndpointsConfigurer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.reuseRefreshTokens()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.createDefaultTokenServices()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "bdb3390b19c54bdca3da6383ec9ad191ef4734cd", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["395f2636bb36a69d91c5cbfa1256132756b24710"], "nameRev": "bdb3390b19c54bdca3da6383ec9ad191ef4734cd tags/2.0.6.RELEASE~21", "commitMessage": "Make it possible to change value of reuseRefreshToken\n\nFixes gh-351\n", "commitDateTime": "2015-01-23 15:14:20", "authoredDateTime": "2015-01-23 15:14:20", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AuthorizationServerEndpointsConfigurer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.reuseRefreshTokens()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.reuseRefreshTokens(boolean)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["793ebe0a08b57f90b3c78147a21f36822ba3feab", "bdb3390b19c54bdca3da6383ec9ad191ef4734cd"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 11, "deletions": 3, "lines": 14, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 6, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer", "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.reuseRefreshTokens()", "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.createDefaultTokenServices()", "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.reuseRefreshTokens(boolean)"]}, {"title": "Spring redirect-uri contains double encoded value.", "body": "If an OAuth2 authorize with `response_type=code` is done with a redirect-uri with a encoded character, that character is double encoded in the result redirect. \n\nEx: `redirect_uri=http://myhost/authorized?test=special%3Dvalue`\nThe authorize-call looks like: `/oauth/authorize?response_type=code&redirect_uri=http%3A%2F%2Fmyhost%2Fauthorized%3Ftest%3Dspecial%253Dvalue&client_id=myid`\n\nWith spring oauth2 version 2.0.2.RELEASE: the redirect-uri is `http://myhost/authorized?test=special%253Dvalue&code=xyz`, so the %3D is replaced by %253D.\nWhile with 1.0.5.RELEASE this worked as expected: the redirect-uri was `http://myhost/authorized?test=special%3Dvalue&code=xyz`\n\nCode where the redirect gets the double encoding: `AuthorizationEndpoint#getSuccessfulRedirect`\nInput: `authorizationRequest.getRedirectUri() = http://myhost/authorized?test=special%3Dvalue`\nReturns = `http://myhost/authorized?test=special%253Dvalue&code=xyz`\nThis code was changed to fix issue: `https://github.com/spring-projects/spring-security-oauth/issues/152`\nBut now if the original redirect-uri already contains an encoded character, then the updated redirect-uri contains a double-encoding, which is a bug?\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/349", "user": "barbaraj7", "labels": ["type: bug"], "created": "2015-01-06 13:12:20", "closed": "2015-01-27 16:12:53", "commits": {"684387b488247337a80ea700a67c2fa591a348a8": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 21.00027777777778, "commitsDetails": [{"commitHash": "684387b488247337a80ea700a67c2fa591a348a8", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["4be7f8d627d203e992135dafbcf302dd54665492"], "nameRev": "684387b488247337a80ea700a67c2fa591a348a8 tags/2.0.6.RELEASE~12", "commitMessage": "Rationalize redirect rendering in AuthorizationEndpoint\n\nThere are 3 methods in AuthorizationEndpoint that need to build a\nredirect URI, and up to now there were 3 different methods of\ndoing it. This change unifies them into a single convenience method.\n\nIt also allows the incoming redirect URI to be either encoded or\nunencoded (fixes gh-349). An unencoded URI can easily be provided\nas part of a ClientDetails registration, and an encoded one would\ncome in as a request parameter. (Actually request parameters can\nbe unencoded too, but most clients will encode to avoid\nambiguity.)\n", "commitDateTime": "2015-01-27 16:08:53", "authoredDateTime": "2015-01-27 16:08:53", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpoint.java", "insertions": 70, "deletions": 32, "lines": 102}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/AuthorizationEndpointTests.java", "insertions": 34, "deletions": 1, "lines": 35}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AuthorizationEndpoint.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.getUnsuccessfulRedirect(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.oauth2.common.exceptions.OAuth2Exception,boolean)", "TOT": 30, "UPD": 5, "INS": 1, "MOV": 21, "DEL": 3}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.appendAccessToken(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.oauth2.common.OAuth2AccessToken)", "TOT": 28, "UPD": 8, "INS": 1, "MOV": 8, "DEL": 11}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.getSuccessfulRedirect(org.springframework.security.oauth2.provider.AuthorizationRequest,java.lang.String)", "TOT": 11, "UPD": 7, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.append(java.lang.String,java.util.Map,boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.append(java.lang.String,java.util.Map,java.util.Map,boolean)", "TOT": 6, "UPD": 0, "INS": 6, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationEndpointTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitAppendsScopeWhenDefaulting()", "TOT": 10, "UPD": 1, "INS": 1, "MOV": 8, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitAppendsScopeWhenDefaulting().11", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitPreApprovedButInvalid().13", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitError().16", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitUnapproved().15", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testAuthorizationCodeWithTrickyEncodedQueryParams()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitPreApprovedButInvalid()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitWithAdditionalInfo()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitError()", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 5, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitUnapproved()", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 4, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitAppendsScopeWhenDefaulting().12.checkForPreApproval(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.core.Authentication)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpointTests.testImplicitAppendsScopeWhenDefaulting().12.updateAfterApproval(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.core.Authentication)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["684387b488247337a80ea700a67c2fa591a348a8"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 70, "deletions": 32, "lines": 102, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 76, "UPD": 20, "INS": 10, "MOV": 31, "DEL": 15, "spoonFilesChanged": 1, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.append(java.lang.String,java.util.Map,java.util.Map,boolean)", "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.getUnsuccessfulRedirect(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.oauth2.common.exceptions.OAuth2Exception,boolean)", "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.appendAccessToken(org.springframework.security.oauth2.provider.AuthorizationRequest,org.springframework.security.oauth2.common.OAuth2AccessToken)", "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.getSuccessfulRedirect(org.springframework.security.oauth2.provider.AuthorizationRequest,java.lang.String)", "org.springframework.security.oauth2.provider.endpoint.AuthorizationEndpoint.append(java.lang.String,java.util.Map,boolean)"]}, {"title": "Parameters are duplicated when AcceptsAuthorizationHeader is switched off in OAuthClientHttpRequestFactory", "body": "(spring-security-oauth version 2.0.5)\nHi,\n\nIn the OAuthClientHttpRequestFactory class, createRequest method - if you have AcceptsAuthorizationHeader set to false then it generates a queryString correctly (which includes all custom query parameters).\n\nHowever, at the line:\nuri = URI.create(uriValue.contains(\"?\") ? uriValue + \"&\" + queryString : uriValue + \"?\" + queryString);\nIt correctly checks whether there are existing params, but then it goes and adds on to the end, rather than just after the question mark.\n\nAs an example:\n\"http://localhost/oauth/duplicate/bug?param=DUPLICATE\"\n\nWill get converted to the url:\nhttp://localhost/oauth/duplicate/bug?param=DUPLICATE&oauth_consumer_key=key&oauth_nonce=8d854b67-a189-429d-985f-e9e8c02c4398&oauth_signature=hQx35gpqOPcchGwrzUv3OJAW8Wo%3D&oauth_signature_method=HMAC-SHA1&oauth_timestamp=1419954873&oauth_version=1.0&param=DUPLICATE\n\nOn the other end, \"param\" will be received twice, and if it's a Spring controller the value will be \"DUPLICATE,DUPLICATE\".\n\nUnless I'm doing something wrong?\nThanks,\nJulian\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/345", "user": "Jerbell", "labels": ["in: oauth1", "type: bug"], "created": "2014-12-30 16:02:26", "closed": "2015-02-19 14:17:54", "commits": {}, "ttf": 50.000277777777775, "commitsDetails": []}, {"title": "\"Could not wire ResourceServerTokenServices\" error", "body": "We have been using 2.0.4.SNAPSHOT version, but since we upgraded to 2.0.5-RELEASE we are receiving this error:\n\n```\nCould not wire ResourceServerTokenServices: please create a bean definition and mark it as @Primary.\n```\n\nDebugging, I found that the exception was caused by:\n\n```\norg.springframework.beans.factory.NoUniqueBeanDefinitionException:\nNo qualifying bean of type [org.springframework.security.oauth2.provider.token.ResourceServerTokenServices] is defined:\nexpected single matching bean but found 2:\nconsumerTokenServices,\ndefaultAuthorizationServerTokenServices\n```\n\n(code added on commit 45505c6ab815a8c282d6f566eb65a9b5da676f26)\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/342", "user": "jonasflesch", "labels": ["type: bug"], "created": "2014-12-18 15:48:48", "closed": "2015-03-12 15:45:09", "commits": {"4697d771a39d15f714997d8291250d7d66107d76": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 83.00027777777778, "commitsDetails": [{"commitHash": "4697d771a39d15f714997d8291250d7d66107d76", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["e6841d230349c731c956cf1e5725ea4b5901ab96"], "nameRev": "4697d771a39d15f714997d8291250d7d66107d76 tags/2.0.7.RELEASE~12", "commitMessage": "Compare AOP targets instead of proxy to resolve token services\n\nThe logic to detect an existing default ResourceServerTokenServices\nwas flawed in the case that the two default ones were proxied (e.g.\nas is the case with @EnableGlobalMethodSecurity. It has proved\nrather difficult to find a test that breaks on this one, but the\nsample project from gh-342 is fixed with this change.\n\nFixes gh-342\n", "commitDateTime": "2015-03-12 15:42:18", "authoredDateTime": "2015-03-12 15:42:18", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfiguration.java", "insertions": 64, "deletions": 38, "lines": 102}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/ResourceServerConfigurationTests.java", "insertions": 112, "deletions": 29, "lines": 141}, {"filePath": "tests/annotation/vanilla/src/test/java/demo/GlobalMethodSecurityTests.java", "insertions": 29, "deletions": 0, "lines": 29}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ResourceServerConfiguration.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.resolveTokenServices()", "TOT": 31, "UPD": 2, "INS": 7, "MOV": 15, "DEL": 7}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.TokenServicesConfiguration", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.elementsEqual(java.lang.Object,java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.findTarget(java.lang.Object)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ResourceServerConfigurationTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.ResourceServerConfigurationTests.testWithAuthServer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.ResourceServerConfigurationTests.testWithAuthServerAndGlobalMethodSecurity()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.ResourceServerConfigurationTests.ResourceServerAndAuthorizationServerContext", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.ResourceServerConfigurationTests.ResourceServerAndAuthorizationServerContextAndGlobalMethodSecurity", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "GlobalMethodSecurityTests.java", "spoonMethods": [{"spoonMethodName": "demo.GlobalMethodSecurityTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4697d771a39d15f714997d8291250d7d66107d76"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 64, "deletions": 38, "lines": 102, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 36, "UPD": 3, "INS": 10, "MOV": 15, "DEL": 8, "spoonFilesChanged": 1, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.resolveTokenServices()", "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.findTarget(java.lang.Object)", "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.elementsEqual(java.lang.Object,java.lang.Object)", "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.TokenServicesConfiguration", "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration"]}, {"title": "Dependency cycle or instantiation race condition if user defines @Bean TokenStore", "body": "The `AuthorizationServerConfiguration`  exposes a\n`TokenStore` as a `@Bean`, mainly as a convenience for a\n`ResourceServerConfiguration` that happens to be in the same context.\nThe problem is that there's a potential cycle if the user defines\ntheir own `@Bean TokenStore`, and uses it to configure a\nResource Server, when that also happens to be part of an Authorization\nServer.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/338", "user": "dsyer", "labels": ["type: bug"], "created": "2014-12-17 09:39:32", "closed": "2014-12-17 09:40:03", "commits": {"b86edc8c73b6391087c77e0053ff520868910d5f": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "b86edc8c73b6391087c77e0053ff520868910d5f", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["793ebe0a08b57f90b3c78147a21f36822ba3feab"], "nameRev": "b86edc8c73b6391087c77e0053ff520868910d5f tags/2.0.5.RELEASE~2", "commitMessage": "Remove the @Bean TokenStore from default configuration\n\nPreviously the AuthorizationServerConfiguration had exposed a\nTokenStore as a @Bean, mainly as a convenience for a\nResourceServerConfiguration that happened to be in the same context.\nThe problem is that there's a potential cycle if the user defines\ntheir own @Bean TokenStore, and uses it to configure a\nResource Server, when it also happens to be part of an Authorization\nServer.\n\nFixes gh-338\n", "commitDateTime": "2014-12-17 09:38:51", "authoredDateTime": "2014-12-17 09:35:28", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java", "insertions": 11, "deletions": 17, "lines": 28}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/ResourceServerConfiguration.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/ResourceServerConfigurationTests.java", "insertions": 12, "deletions": 3, "lines": 15}, {"filePath": "tests/annotation/jwt/src/test/java/demo/ApplicationTests.java", "insertions": 8, "deletions": 4, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AuthorizationServerEndpointsConfiguration.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.getEndpoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.authorizationEndpoint()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.checkTokenEndpoint()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.oauth2EndpointHandlerMapping()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.consumerTokenServices()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.oauth2RequestFactory()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.userApprovalHandler()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.oauth2RequestValidator()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.authorizationCodeServices()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.tokenGranter()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.tokenStore()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "ResourceServerConfiguration.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)", "TOT": 9, "UPD": 0, "INS": 3, "MOV": 5, "DEL": 1}]}, {"spoonFilePath": "ResourceServerConfigurationTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.ResourceServerConfigurationTests.TokenServicesContext.clientDetailsService()", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.ResourceServerConfigurationTests.testDefaults()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.ResourceServerConfigurationTests.testCustomTokenServices()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.ResourceServerConfigurationTests.TokenExtractorContext.configure(org.springframework.security.oauth2.config.annotation.web.configurers.ResourceServerSecurityConfigurer)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "ApplicationTests.java", "spoonMethods": [{"spoonMethodName": "demo.ApplicationTests", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "demo.ApplicationTests.contextLoads()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "demo.ApplicationTests.tokenStoreIsJwt()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b86edc8c73b6391087c77e0053ff520868910d5f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 14, "deletions": 19, "lines": 33, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 27, "UPD": 11, "INS": 3, "MOV": 11, "DEL": 2, "spoonFilesChanged": 2, "spoonMethodsChanged": 12}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.oauth2RequestValidator()", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.userApprovalHandler()", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.authorizationCodeServices()", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.tokenGranter()", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.getEndpoints()", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.tokenStore()", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.consumerTokenServices()", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.oauth2EndpointHandlerMapping()", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.oauth2RequestFactory()", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.checkTokenEndpoint()", "org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfiguration.configure(org.springframework.security.config.annotation.web.builders.HttpSecurity)", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.authorizationEndpoint()"]}, {"title": "Failure when defining a custom ClientDetailsService in AuthorizationServerConfigurerAdapter", "body": "This is a copy of https://jira.spring.io/browse/SECOAUTH-451\n\nWhile configuring a AuthorizationServer with `@EnableAuthorizationServer`and `AuthorizationServerConfigurerAdapter` I have the need to define a custom implementation of a `ClientDetailsService` which I tried like this:\n\n```\n@Override\npublic void configure(AuthorizationServerEndpointsConfigurer endpoints) throws Exception {\n    ClientDetailsService clientDetailsService = getCustomClientDetailsService();\n    endpoints.clientDetailsService(clientDetailsService);\n}\n```\n\nalthough this seems work in the first place, one still also has to override:\n\n```\n@Override\npublic void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n    clients.inMemory().withClient()....\n}\n```\n\nif not, the the following error will be thrown.\nThis makes it impossible to define a custom implementation of a `ClientDetailsService`.\n\n```\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'scopedTarget.clientDetailsService' defined in class path resource [org/springframework/security/oauth2/config/annotation/configuration/ClientDetailsServiceConfiguration.class]: Instantiation of bean failed;\nnested exception is org.springframework.beans.factory.BeanDefinitionStoreException: Factory method [public org.springframework.security.oauth2.provider.ClientDetailsService org.springframework.security.oauth2.config.annotation.configuration.ClientDetailsServiceConfiguration.clientDetailsService() throws java.lang.Exception] threw exception;\nnested exception is java.lang.UnsupportedOperationException: Cannot build client services (maybe use inMemory() or jdbc()).\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/336", "user": "imod", "labels": ["type: bug"], "created": "2014-12-16 16:57:01", "closed": "2014-12-17 14:28:22", "commits": {"fad4785a59d684a78cb9bed6adee41c6fb07a766": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "fad4785a59d684a78cb9bed6adee41c6fb07a766", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["b86edc8c73b6391087c77e0053ff520868910d5f"], "nameRev": "fad4785a59d684a78cb9bed6adee41c6fb07a766 tags/2.0.5.RELEASE~1", "commitMessage": "Remove builder convenience method for ClientDetailsService\n\nThe AuthorizationServerEndpointsConfigurer had a clientDetails() method\nthat was supposed to be for internal use (but unfortunately had to\nbe public so it can be called by a class in another package). Without\nchanging the packaging, the safest change at this point (even though\nit's a public API) is to change the method signature and document it\nto make it clear that it's not public.\n\nFixes gh-336\n", "commitDateTime": "2014-12-17 14:27:33", "authoredDateTime": "2014-12-17 14:25:14", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerEndpointsConfiguration.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/AuthorizationServerEndpointsConfigurer.java", "insertions": 11, "deletions": 6, "lines": 17}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java", "insertions": 25, "deletions": 2, "lines": 27}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AuthorizationServerEndpointsConfiguration.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.init()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationServerEndpointsConfigurer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.clientDetailsService(org.springframework.security.oauth2.provider.ClientDetailsService)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationServerConfigurationTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.AuthorizationServerConfigurationTests.AuthorizationServerCustomClientDetails", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.config.annotation.AuthorizationServerConfigurationTests.parameters()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fad4785a59d684a78cb9bed6adee41c6fb07a766"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 12, "deletions": 7, "lines": 19, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.config.annotation.web.configurers.AuthorizationServerEndpointsConfigurer.clientDetailsService(org.springframework.security.oauth2.provider.ClientDetailsService)", "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerEndpointsConfiguration.init()"]}, {"title": "sample oauth2 tonr2 app doesn't work as per tutorial.", "body": "Following instructions here:\nhttp://projects.spring.io/spring-security-oauth/docs/tutorial.html\n\n```\nmvn install\n    cd samples/oauth2/tonr\n    mvn tomcat:run\n```\n\nGo to http://localhost:8080/tonr2 in browser\n\nAttempt to login.   Result of login is a 404 for login.do:  `HTTP Status 404 - /tonr2/login.do`\n\nthis error is seen in the mvn output:\n`WARNING: Internal Error: File /WEB-INF/web.xml not found`\n\nNote:  Seems to work if you drop the tonr2 and sparklr2 wars into a tomcat7 webapp dir and start up tomcat normally.  \n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/280", "user": "scmadmin", "labels": ["type: bug"], "created": "2014-10-16 19:25:04", "closed": "2014-10-19 15:41:12", "commits": {"177305ddcdc26fe82646e0f010c956860ffe0388": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "177305ddcdc26fe82646e0f010c956860ffe0388", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["45505c6ab815a8c282d6f566eb65a9b5da676f26"], "nameRev": "177305ddcdc26fe82646e0f010c956860ffe0388 tags/2.0.4.RELEASE~15", "commitMessage": "Update context path for tonr2 (fixes gh-250, fixes gh-280)\n", "commitDateTime": "2014-10-19 16:40:59", "authoredDateTime": "2014-10-19 16:40:59", "commitGitStats": [{"filePath": "samples/oauth2/tonr/pom.xml", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["177305ddcdc26fe82646e0f010c956860ffe0388"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Missing resourceIds in the creation of an OAuth2Request in the TokenRequest class", "body": "using spring for: OAuth2 AuthN and AuthZ server, (securing) resource server, JWT based accessToken\nversion: spring-security-oauth2 v2.0.3.RELEASE\n### The short story\n\nI have done the following:\n- Defined a `resourceId` for a client.\n- Defiend a `resourceId` for the resource server\n\nI expected the `resourceId`  to be set in the (JWT) claim `aud`, but that step failed. \n\nI found out:\nThe hole chain fails at the following point: The class `org.springframework.security.oauth2.provider.TokenRequest` misses to pass through the `resourceIds` in the method`createOAuth2Request(ClientDetails client)`. `null` is passed instead of the `resourceIds`. Look at `return new OAuth2Request(modifiable, client.getClientId(), client.getAuthorities(), true, this.getScope(), null, null, null, null);`. Because the `resourceId` is missing in the `OAuth2Request` the `DefaultAccessTokenConverter` does not set the `aud` claim.\n\nI would suggest to pass through the `client.getResourceIds()` instead of `null`\nin the `TokenRequest` class. \nThank you.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/271", "user": "wjslawski", "labels": ["type: bug"], "created": "2014-10-10 10:12:46", "closed": "2014-10-11 15:48:07", "commits": {"2981cd74a76642cf13737a9d987932029ec0090c": {"commitGHEventType": "closed", "commitUser": "dsyer"}, "f66a16581f860354cb5323cc4af4eaf781edf3ba": {"commitGHEventType": "referenced", "commitUser": "jgrandja"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "2981cd74a76642cf13737a9d987932029ec0090c", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["4ab43f06317a2ac2f93877dbfe2189d479fb840c"], "nameRev": "2981cd74a76642cf13737a9d987932029ec0090c tags/2.0.4.RELEASE~21", "commitMessage": "Pass resource ids through to OAuth2Request from TokenRequest\n\nFixes gh-271\n", "commitDateTime": "2014-10-11 16:47:48", "authoredDateTime": "2014-10-11 16:47:18", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/TokenRequest.java", "insertions": 15, "deletions": 22, "lines": 37}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/request/DefaultAuthorizationRequestFactoryTests.java", "insertions": 3, "deletions": 0, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TokenRequest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.TokenRequest.createOAuth2Request(org.springframework.security.oauth2.provider.ClientDetails)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "DefaultAuthorizationRequestFactoryTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.request.DefaultAuthorizationRequestFactoryTests.start()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.request.DefaultAuthorizationRequestFactoryTests.testCreateTokenThenOAuth2RequestWithGrantType()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "f66a16581f860354cb5323cc4af4eaf781edf3ba", "commitGHEventType": "referenced", "commitUser": "jgrandja", "commitParents": ["6abfce20a70969873333ecde27684aab3afca64d"], "nameRev": "f66a16581f860354cb5323cc4af4eaf781edf3ba tags/2.1.0.RELEASE~8", "commitMessage": "Add TokenStore supporting Jwk verification\n\nFixes gh-271\n", "commitDateTime": "2017-02-13 15:48:07", "authoredDateTime": "2017-02-13 15:16:13", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkAttributes.java", "insertions": 35, "deletions": 0, "lines": 35}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinition.java", "insertions": 168, "deletions": 0, "lines": 168}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkDefinitionSource.java", "insertions": 117, "deletions": 0, "lines": 117}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkException.java", "insertions": 42, "deletions": 0, "lines": 42}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkSetConverter.java", "insertions": 144, "deletions": 0, "lines": 144}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkTokenStore.java", "insertions": 109, "deletions": 0, "lines": 109}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwkVerifyingJwtAccessTokenConverter.java", "insertions": 91, "deletions": 0, "lines": 91}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/JwtHeaderConverter.java", "insertions": 68, "deletions": 0, "lines": 68}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/jwk/RSAJwkDefinition.java", "insertions": 43, "deletions": 0, "lines": 43}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwkAttributes.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkAttributes", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwkDefinition.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinition", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwkDefinitionSource.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwkException.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkException", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwkSetConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwkTokenStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStore", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwkVerifyingJwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwtHeaderConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.JwtHeaderConverter", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RSAJwkDefinition.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.jwk.RSAJwkDefinition", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2981cd74a76642cf13737a9d987932029ec0090c", "f66a16581f860354cb5323cc4af4eaf781edf3ba"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 832, "deletions": 22, "lines": 854, "gitFilesChange": 10}, "spoonStatsSummary": {"TOT": 11, "UPD": 0, "INS": 10, "MOV": 0, "DEL": 1, "spoonFilesChanged": 10, "spoonMethodsChanged": 10}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.jwk.JwkAttributes", "org.springframework.security.oauth2.provider.token.store.jwk.JwkTokenStore", "org.springframework.security.oauth2.provider.token.store.jwk.JwkVerifyingJwtAccessTokenConverter", "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinition", "org.springframework.security.oauth2.provider.token.store.jwk.JwkSetConverter", "org.springframework.security.oauth2.provider.token.store.jwk.JwtHeaderConverter", "org.springframework.security.oauth2.provider.token.store.jwk.JwkDefinitionSource", "org.springframework.security.oauth2.provider.token.store.jwk.JwkException", "org.springframework.security.oauth2.provider.TokenRequest.createOAuth2Request(org.springframework.security.oauth2.provider.ClientDetails)", "org.springframework.security.oauth2.provider.token.store.jwk.RSAJwkDefinition"]}, {"title": "JdbcClientTokenServices throws NPE if absent Authentication", "body": "Hi, \n\nIn `JdbcClientTokenServices`, specifically in saveAccessToken, an NPE is thrown is there is no authentication in the SecurityContext by `authentication.getName()`.  In all of the other methods the authentication is checked when calling `keyGenerator.extractKey`.  I am assuming that this is not an intended behavior since authentication was not required up until that point.  If it is the intended behavior, could someone explain why?  Thank you in advance.  \n\nRegards,\nyoandy  \n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/259", "user": "yterradas", "labels": ["type: bug"], "created": "2014-09-14 04:45:22", "closed": "2014-09-18 10:41:05", "commits": {"371aad08ac93efa292d825d0e1e7604eae77f3f5": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "371aad08ac93efa292d825d0e1e7604eae77f3f5", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["2f3dece94df5fa16e341482fe9351098e040383c"], "nameRev": "371aad08ac93efa292d825d0e1e7604eae77f3f5 tags/2.0.4.RELEASE~31", "commitMessage": "Ensure token is stored in ClientTokenServices if provided (fixes gh-259)\n", "commitDateTime": "2014-09-18 11:40:54", "authoredDateTime": "2014-09-18 11:38:51", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter/OAuth2ClientAuthenticationProcessingFilter.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token/AccessTokenProviderChain.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/client/filter/OAuth2ClientAuthenticationProcessingFilterTests.java", "insertions": 13, "deletions": 0, "lines": 13}, {"filePath": "tests/annotation/approval/.gitignore", "insertions": 0, "deletions": 8, "lines": 8}, {"filePath": "tests/annotation/client/.gitignore", "insertions": 0, "deletions": 14, "lines": 14}, {"filePath": "tests/annotation/common/.gitignore", "insertions": 0, "deletions": 13, "lines": 13}, {"filePath": "tests/annotation/form/.gitignore", "insertions": 0, "deletions": 8, "lines": 8}, {"filePath": "tests/annotation/jdbc/.gitignore", "insertions": 0, "deletions": 15, "lines": 15}, {"filePath": "tests/annotation/jwt/.gitignore", "insertions": 0, "deletions": 9, "lines": 9}, {"filePath": "tests/annotation/mappings/.gitignore", "insertions": 0, "deletions": 10, "lines": 10}, {"filePath": "tests/annotation/multi/.gitignore", "insertions": 0, "deletions": 10, "lines": 10}, {"filePath": "tests/annotation/resource/.gitignore", "insertions": 0, "deletions": 11, "lines": 11}, {"filePath": "tests/annotation/vanilla/.gitignore", "insertions": 0, "deletions": 9, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2ClientAuthenticationProcessingFilter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.filter.OAuth2ClientAuthenticationProcessingFilter.successfulAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain,org.springframework.security.core.Authentication)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AccessTokenProviderChain.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.token.AccessTokenProviderChain.obtainAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.token.AccessTokenRequest)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "OAuth2ClientAuthenticationProcessingFilterTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.client.filter.OAuth2ClientAuthenticationProcessingFilterTests.testSuccessfulAuthentication()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.client.filter.OAuth2ClientAuthenticationProcessingFilterTests.testAuthentication()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["371aad08ac93efa292d825d0e1e7604eae77f3f5"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 108, "lines": 118, "gitFilesChange": 12}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["tests/annotation/resource/.gitignore", "tests/annotation/form/.gitignore", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/filter", "tests/annotation/vanilla/.gitignore", "tests/annotation/common/.gitignore", "tests/annotation/client/.gitignore", "tests/annotation/multi/.gitignore", "tests/annotation/jwt/.gitignore", "tests/annotation/jdbc/.gitignore", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/token", "tests/annotation/mappings/.gitignore", "tests/annotation/approval/.gitignore"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.client.filter.OAuth2ClientAuthenticationProcessingFilter.successfulAuthentication(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,javax.servlet.FilterChain,org.springframework.security.core.Authentication)", "org.springframework.security.oauth2.client.token.AccessTokenProviderChain.obtainAccessToken(org.springframework.security.oauth2.client.resource.OAuth2ProtectedResourceDetails,org.springframework.security.oauth2.client.token.AccessTokenRequest)"]}, {"title": "Missing setter for customizing JdbcApprovalStore", "body": "In customizing JdbcApprovalStore class, some setters for sql statements have been provided.\nBut it seems one of them have been forgotten: 'refreshApprovalStatement'. This statement is for updating approval in case it is already in ApprovalStore. I encountered this problem when I wanted to customize this class and I had to implement the interface again in order to use my own table and field names.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/254", "user": "miladkh", "labels": ["type: bug"], "created": "2014-09-07 11:58:17", "closed": "2014-09-18 10:41:05", "commits": {"2f3dece94df5fa16e341482fe9351098e040383c": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "2f3dece94df5fa16e341482fe9351098e040383c", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["190fbbb2b8de24c9c5a2b5aa802738738c7a9992"], "nameRev": "2f3dece94df5fa16e341482fe9351098e040383c tags/2.0.4.RELEASE~32", "commitMessage": "Add setter for SQL statememt (fixes gh-254)\n", "commitDateTime": "2014-09-18 11:39:11", "authoredDateTime": "2014-09-18 11:37:50", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval/JdbcApprovalStore.java", "insertions": 4, "deletions": 0, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JdbcApprovalStore.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.approval.JdbcApprovalStore.setRefreshApprovalStatement(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2f3dece94df5fa16e341482fe9351098e040383c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 0, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/approval"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.approval.JdbcApprovalStore.setRefreshApprovalStatement(java.lang.String)"]}, {"title": "JWT verifier key cannot be set without signing key on separate resource server", "body": "I'm using JwtTokenStore with JwtAccessTokenConverter. It is not possible to set only RSA public key to verify JWT on separate resource server because I'don't want to expose my private key to resource server. JwtAccessTokenConverter wants to check that signing and verifier keys match and does not allow setting only verifier key. \n\nJwtAccessTokenConverter.java:\n\n```\npublic void afterPropertiesSet() throws Exception {\n        // Check the signing and verification keys match\n        if (signer instanceof RsaSigner) {\n            RsaVerifier verifier;\n            try {\n                verifier = new RsaVerifier(verifierKey);\n            }\n            catch (Exception e) {\n                logger.warn(\"Unable to create an RSA verifier from verifierKey\");\n                return;\n            }\n            byte[] test = \"test\".getBytes();\n            try {\n                verifier.verify(test, signer.sign(test));\n                logger.info(\"Signing and verification RSA keys match\");\n            }\n            catch (InvalidSignatureException e) {\n                logger.error(\"Signing and verification RSA keys do not match\");\n            }\n        }\n        ...\n}\n```\n\nShould the JwtTokenStore use interface for JwtAccessTokenConverter and not the actual class? These implementations could be different when authorization and resource servers are separate. Then you could set only private key as signing key or public key as verifier key.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/245", "user": "norri", "labels": ["type: bug"], "created": "2014-08-22 06:06:54", "closed": "2014-08-22 15:33:36", "commits": {"22634032e611445955cae666a315d2a6ba0b09eb": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "22634032e611445955cae666a315d2a6ba0b09eb", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["4e42df86795dddca37126b41e358f57f639e5dc6"], "nameRev": "22634032e611445955cae666a315d2a6ba0b09eb tags/2.0.3.RELEASE~22", "commitMessage": "Fix validation of JwtAccessTokenConverter\n\nBecause of the order of the validation checks, before this change it\nwas impossible to use the JwtAccessTokenConverter purely for\nRSA verification (i.e. public key only).\n\nAlso moved token store tests into subpackage to match the classes they\ntest.\n\nFixes gh-245\n", "commitDateTime": "2014-08-22 16:33:08", "authoredDateTime": "2014-08-22 16:31:50", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java", "insertions": 8, "deletions": 17, "lines": 25}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/{ => store}/InMemoryTokenStoreTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/{ => store}/JdbcTokenStoreTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/{ => store}/JwtTokenEnhancerTests.java", "insertions": 26, "deletions": 3, "lines": 29}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/{ => store}/JwtTokenStoreTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/{ => store}/TokenStoreBaseTests.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.afterPropertiesSet()", "TOT": 10, "UPD": 1, "INS": 1, "MOV": 4, "DEL": 4}]}, {"spoonFilePath": "InMemoryTokenStoreTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.InMemoryTokenStoreTests", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.InMemoryTokenStoreTests.getTokenStore()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.InMemoryTokenStoreTests.createStore()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.InMemoryTokenStoreTests.testTokenCountConsistentWithExpiryQueue()", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.InMemoryTokenStoreTests.testAutoFlush()", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.InMemoryTokenStoreTests.testTokenCountConsistency()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JdbcTokenStoreTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.JdbcTokenStoreTests", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JdbcTokenStoreTests.getTokenStore()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JdbcTokenStoreTests.setUp()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JdbcTokenStoreTests.tearDown()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwtTokenEnhancerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenEnhancerTests.setUp()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenEnhancerTests.testEnhanceAccessToken()", "TOT": 9, "UPD": 9, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenEnhancerTests.testScopePreserved()", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenEnhancerTests.testRefreshTokenAdded()", "TOT": 7, "UPD": 7, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenEnhancerTests.publicKeyStringIsReturnedFromTokenKeyEndpoint()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenEnhancerTests.publicKeyStringIsReturnedFromTokenKeyEndpointWithNullPrincipal()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenEnhancerTests.sharedSecretIsReturnedFromTokenKeyEndpoint()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenEnhancerTests.rsaKeyCreatesValidRsaSignedTokens()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenEnhancerTests.keysNotMatchingWithMacSigner()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenEnhancerTests.TestAuthentication", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtTokenEnhancerTests.publicKeyStringIsReturnedFromTokenKeyEndpoint()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JwtTokenStoreTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.testAccessTokenCannotBeExtractedFromAuthentication()", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.testReadAccessToken()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.testReadRefreshToken()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.testReadAuthentication()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.testReadAuthenticationFromString()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.testReadAuthenticationForRefreshToken()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.removeAccessToken()", "TOT": 9, "UPD": 9, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.removeRefreshToken()", "TOT": 9, "UPD": 9, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.removeAccessTokenFromRefreshToken()", "TOT": 9, "UPD": 9, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.testReadRefreshTokenForUnapprovedScope()", "TOT": 8, "UPD": 8, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.checkAuthentications(org.springframework.security.oauth2.provider.OAuth2Authentication,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.init()", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.TestAuthentication", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenStoreTests.TestAuthentication.getPrincipal()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TokenStoreBaseTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testReadingAuthenticationForTokenThatDoesNotExist()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testStoreAccessToken()", "TOT": 11, "UPD": 11, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testStoreAccessTokenTwice()", "TOT": 12, "UPD": 12, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testRetrieveAccessToken()", "TOT": 18, "UPD": 18, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testFindAccessTokensByUserName()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testFindAccessTokensByClientId()", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testReadingAccessTokenForTokenThatDoesNotExist()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testRefreshTokenIsNotStoredDuringAccessToken()", "TOT": 6, "UPD": 6, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testStoreRefreshToken()", "TOT": 11, "UPD": 11, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testGetAccessTokenForDeletedUser()", "TOT": 13, "UPD": 13, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testRemoveRefreshToken()", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.testReadingRefreshTokenForTokenThatDoesNotExist()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.TestAuthentication", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TokenStoreBaseTests.TestAuthentication.getPrincipal()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["22634032e611445955cae666a315d2a6ba0b09eb"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 8, "deletions": 17, "lines": 25, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 10, "UPD": 1, "INS": 1, "MOV": 4, "DEL": 4, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.afterPropertiesSet()"]}, {"title": "Question about JwtAccessTokenConverter.enhance", "body": "The current code to set the refresh token on a JWT access token looks like:\n\n``` java\nif (refreshToken != null) {\n    DefaultOAuth2AccessToken encodedRefreshToken = new DefaultOAuth2AccessToken(accessToken);\n    DefaultOAuth2RefreshToken token = new DefaultOAuth2RefreshToken(encode(encodedRefreshToken, authentication));\n    if (refreshToken instanceof ExpiringOAuth2RefreshToken) {\n        Date expiration = ((ExpiringOAuth2RefreshToken) refreshToken).getExpiration();\n        encodedRefreshToken.setExpiration(expiration);\n        token = new DefaultExpiringOAuth2RefreshToken(encode(encodedRefreshToken, authentication), expiration);\n    }\n    result.setRefreshToken(token);\n}\n```\n\nShould the first line of the `if` look like:\n\n``` java\nDefaultOAuth2AccessToken encodedRefreshToken = new DefaultOAuth2AccessToken(accessToken);\nencodedRefreshToken.setValue(refreshToken.getValue());\n```\n\nrather than\n\n``` java\nDefaultOAuth2AccessToken encodedRefreshToken = new DefaultOAuth2AccessToken(accessToken);\n```\n\n(i.e. copy the refreshToken value rather than the accessToken's).\n\nOtherwise the original value of the refresh token will be lost.\n\nAlso the `jti` is set on the JWT encoded access token, but not on the JWT encoded refresh token. Is it a bug? This is done with the code:\n\n``` java\nString tokenId = result.getValue();\nif (!info.containsKey(TOKEN_ID)) {\n    info.put(TOKEN_ID, tokenId);\n}\n```\n\nwhich is in the same method but is only executed against the access token.\n\nIt would be great to have the `jti` set on the refresh token as well. I'm planning to persist the refresh token to allow users to revoke them (currently refreshing access token only looks at the JWT signature but I'd like to implement user revokation of these tokens and that would be the first step).\n\nThanks!\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/200", "user": "totof3110", "labels": ["type: bug"], "created": "2014-05-15 22:53:12", "closed": "2014-05-16 14:07:15", "commits": {"51eb6d8fdb5fe117f10525017c6d8ee833eeb4b4": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "51eb6d8fdb5fe117f10525017c6d8ee833eeb4b4", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["93e849ff6447c023995a28116657dc37f3727ca2"], "nameRev": "51eb6d8fdb5fe117f10525017c6d8ee833eeb4b4 tags/2.0.1.RELEASE~3", "commitMessage": "Copy refresh token value correctly in JwtAccessTokenConverter\n\nFixes gh-200\n", "commitDateTime": "2014-05-16 15:03:06", "authoredDateTime": "2014-05-16 15:03:06", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/store/JwtAccessTokenConverter.java", "insertions": 4, "deletions": 0, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JwtAccessTokenConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["51eb6d8fdb5fe117f10525017c6d8ee833eeb4b4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 0, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)"]}, {"title": "Bug in refresh token generation code for JWT", "body": "Line  341 in org.springframework.security.oauth2.provider.token.JwtTokenServices.createRefreshToken reads:\n\n``` java\naccessToken.setValue(encode(accessToken, authentication));\n```\n\nhowever setValue returns a new access token instead of modifying it. As a result, the value of the refresh token is unchanged and the expiration update is not taken into account.\n\nThe line should most likely read:\n\n``` java\naccessToken = accessToken.setValue(encode(accessToken, authentication));\n```\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/175", "user": "totof3110", "labels": ["type: bug"], "created": "2014-04-02 03:50:08", "closed": "2014-04-04 16:44:17", "commits": {"7c24bacd218eefcd7e8ad4651e846ae4075b6855": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "7c24bacd218eefcd7e8ad4651e846ae4075b6855", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["ad859587eb3915cfbc22e58bf15dbcbe9b018010"], "nameRev": "7c24bacd218eefcd7e8ad4651e846ae4075b6855 tags/2.0.0.RC1~38", "commitMessage": "Make access token setter for value more conventional\n\ni.e. it has a void return type. Previously it had returned a\nnew object, in an attempt to normalize the hashCode and equals\nimplementations. I believe those may now occasionally be invalid\n(e.g. if someone sets the expiration without setting the value)\nin some circumstances, but the value of a token is still used\nas the sole source of data for hashing.\n\nFixes gh-175\n", "commitDateTime": "2014-04-04 17:41:54", "authoredDateTime": "2014-04-04 17:41:54", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/DefaultOAuth2AccessToken.java", "insertions": 2, "deletions": 4, "lines": 6}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/JwtTokenEnhancer.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/JwtTokenServices.java", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/OAuth2ExceptionJackson2DeserializerTests.java", "insertions": 164, "deletions": 0, "lines": 164}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/AbstractTestDefaultTokenServices.java", "insertions": 71, "deletions": 112, "lines": 183}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/JwtTokenServicesTests.java", "insertions": 5, "deletions": 2, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultOAuth2AccessToken.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken.setValue(java.lang.String)", "TOT": 5, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 3}]}, {"spoonFilePath": "JwtTokenEnhancer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenEnhancer.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JwtTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenServices.createRefreshToken(org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenServices.getAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "OAuth2ExceptionJackson2DeserializerTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exception.OAuth2ExceptionJackson2DeserializerTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractTestDefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractTestDefaultTokenServices.testRefreshedTokenIsEnhanced().2.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "JwtTokenServicesTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenServicesTests.testDefaultTokenExpiry()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7c24bacd218eefcd7e8ad4651e846ae4075b6855"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 11, "lines": 21, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 15, "UPD": 7, "INS": 1, "MOV": 3, "DEL": 4, "spoonFilesChanged": 3, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.JwtTokenServices.getAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)", "org.springframework.security.oauth2.provider.token.JwtTokenEnhancer.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "org.springframework.security.oauth2.provider.token.JwtTokenServices.createRefreshToken(org.springframework.security.oauth2.provider.OAuth2Authentication)", "org.springframework.security.oauth2.common.DefaultOAuth2AccessToken.setValue(java.lang.String)"]}, {"title": "@Autowiring into lazy proxy causes infinite loop and Stackoverflow error", "body": "We encountered really strange problem (happened only for certain developers) which caused following stack trace when fetching token from /oauth/token endpoint:\n\n```\njava.lang.StackOverflowError\n    sun.reflect.GeneratedMethodAccessor54.invoke(Unknown Source)\n    sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    java.lang.reflect.Method.invoke(Method.java:606)\n    org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:317)\n    org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:190)\n    org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n    org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)\n    org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)\n    org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n    org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)\n    com.sun.proxy.$Proxy120.getAccessToken(Unknown Source)\n    sun.reflect.GeneratedMethodAccessor54.invoke(Unknown Source)\n    sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    java.lang.reflect.Method.invoke(Method.java:606)\n```\n\nError occured only when credentials were correct and \"AuthorizationServer\" tried to access TokenStore which in our case was JdbcTokenStore. Meaning that for example with bad credentials server was able to response {\n\"error\":\"invalid_grant\",\n\"error_description\":\"Bad credentials\"\n}\n\nI was able to fix this problem by removing @Autowired Tokenstore and creating it locally like this:\n\n```\nprivate TokenStore tokenStore;\n\n @PostConstruct\n private void init(){\n         tokenStore = new JdbcTokenStore(dataSource);\n  }\n\n@Override\n        public void configure(OAuth2AuthorizationServerConfigurer oauthServer) throws Exception {\n            oauthServer.allowFormAuthenticationForClients().tokenStore(tokenStore)\n                    .authenticationManager(authenticationManager).realm(\"woodforce/client\");\n        }\n```\n\nTokenStore was earlier defined in another Config class with @Bean annotation and autowired to class above which then cause stack overflow error.\n\nWe are running our auth server on Tomcat 7.0.47 with JRE 1.7.0.51 and building with Maven 3.1.1.\n\nOh and we are using M4 version of oauth with latest Spring (4.0.2) & Spring Security (3.2.3) versions.\n\nNot too critical issue because we were able to get around it but reported now anyways.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/173", "user": "ovaris", "labels": ["type: bug"], "created": "2014-04-01 09:06:02", "closed": "2014-04-15 12:22:51", "commits": {}, "ttf": 14.000277777777777, "commitsDetails": []}, {"title": "Error in AuthorizationEndpoint: 404 from /oauth/authorize (should be 400 in most cases)", "body": "Only applies to `@EnableAuthorizationServer` with no custom error page (it's the error page that's a 404). Steps to reproduce: set up a Spring Boot Actuator app and send null client id to an implicit grant request.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/158", "user": "dsyer", "labels": ["type: bug"], "created": "2014-03-10 14:41:42", "closed": "2014-03-10 14:55:00", "commits": {"32fb5d8df1b3ab464f3b926e10b64aa6a49a52d2": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "32fb5d8df1b3ab464f3b926e10b64aa6a49a52d2", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["872a7a5c946db91209c6aa35c7b01687804c8964"], "nameRev": "32fb5d8df1b3ab464f3b926e10b64aa6a49a52d2 tags/2.0.0.M4~13", "commitMessage": "Rename frameworkEndpointMapping\n\nFixes gh-158\n", "commitDateTime": "2014-03-10 14:54:44", "authoredDateTime": "2014-03-10 14:54:41", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configuration/AuthorizationServerConfiguration.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AuthorizationServerConfiguration.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfiguration.endpointHandlerMapping()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["32fb5d8df1b3ab464f3b926e10b64aa6a49a52d2"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.config.annotation.web.configuration.AuthorizationServerConfiguration.endpointHandlerMapping()"]}, {"title": "Default UserApprovalHandler in @EnableAuthorizationServer is null", "body": "", "url": "https://github.com/spring-projects/spring-security-oauth/issues/156", "user": "dsyer", "labels": ["type: bug"], "created": "2014-03-10 11:41:44", "closed": "2014-03-10 12:48:43", "commits": {"1c0c6a15cf6d6e9525823501dbd06ea35da7917c": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "1c0c6a15cf6d6e9525823501dbd06ea35da7917c", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["4b2503302037c3b979af6cf4ef41fa552ce82419"], "nameRev": "1c0c6a15cf6d6e9525823501dbd06ea35da7917c tags/2.0.0.M4~15", "commitMessage": "Add user approval handler to default configuration\n\nFixes gh-156\n", "commitDateTime": "2014-03-10 12:43:25", "authoredDateTime": "2014-03-10 12:43:25", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation/web/configurers/OAuth2AuthorizationServerConfigurer.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/config/annotation/AuthorizationServerConfigurationTests.java", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2AuthorizationServerConfigurer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer.userApprovalHandler()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AuthorizationServerConfigurationTests.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.config.annotation.AuthorizationServerConfigurationTests.AuthorizationServerExtras.run()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1c0c6a15cf6d6e9525823501dbd06ea35da7917c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 0, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/config/annotation"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.config.annotation.web.configurers.OAuth2AuthorizationServerConfigurer.userApprovalHandler()"]}, {"title": "[SECOAUTH-439] OAuthProviderProcessingFilter should not clear previousAuthentication", "body": "> **Priority**: Minor\n> **Original Assignee**: Dave Syer\n> **Reporter**: Hatanaka, Akihiro\n> **Created At**: Tue, 7 Jan 2014 10:00:42 +0000\n> **Last Updated on Jira**: Wed, 8 Jan 2014 14:42:11 +0000\n\nIn `OAuthProviderProcessingFilter#doFilter(ServletRequest, ServletResponse, FilterChain)`\n\n```\ntry{  \n...  \nAuthentication previousAuthentication = SecurityContextHolder.getContext().getAuthentication();  \ntry { ... } \n\nfinally  { resetPreviousAuthentication(previousAuthentication); } \n\n}  \ncatch(AuthenticationException ae)  { fail(request, response, ae); } \n```\n\nIn fail method, `SecurityContextHolder.getContext().setAuthentication(null)`;\n\nSo `AuthenticationException` is thrown in the inner try block, previousAuthentication is cleared in the outer catch clause. I think this does not match developer's intent. Developer want to maintain `previousAuthentication` even when exception is thrown.\n\nComments:\n\n**david_syer** on Wed, 8 Jan 2014 14:42:11 +0000\n\n> You could be right. If you submit a pull request please make sure all tests are passing. Add a test for the intended behaviour if you are feeling zealous.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/145", "user": "dsyer", "labels": ["in: oauth1", "type: bug"], "created": "2014-01-09 11:32:58", "closed": "2014-01-20 09:47:34", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "[SECOAUTH-428] Scope Parameter should be expressed as a list of space-delimited Strings as per RFC6749", "body": "> **Priority**: Major\n> **Original Assignee**: Dave Syer\n> **Reporter**: J\u00e1n Ondru\u0161ek\n> **Created At**: Thu, 10 Oct 2013 11:12:11 +0100\n> **Last Updated on Jira**: Thu, 10 Oct 2013 11:13:36 +0100\n\norg.springframework.security.oauth2.common.util.OAuth2Utils uses hard-coded static methods, which have no option to modify Facebook customized behavior.\n\npublic static Set<String> More ...parseParameterList(String values) {  \nSet<String> result = new TreeSet<String>();  \nif (values != null && values.trim().length() > 0)  { // the spec says the scope is separated by spaces, but Facebook uses commas, so we'll include commas, too. String[] tokens = values.split(\"[\\s+,]\"); result.addAll(Arrays.asList(tokens)); } \n\nreturn result;  \n}\n\nThis prevents supporting commas inside the OAuth2 Scope parameters, because they are automatically treated as delimiters, which is of course wrong and breaks the specification.\n\nhttp://tools.ietf.org/html/rfc6749#section-3.3\n\nscope = scope-token _( SP scope-token )  \nscope-token = 1_( %x21 / %x23-5B / %x5D-7E )\n\nMust allow any ASCII characters excluding SPACE (delimiter), DOUBLE QUOTES and BACKSLASH plus command characters.\n\nI suggest to make Facebook specific COMMA delimiter as optional and configurable. Current solution leads to high customization of Spring code.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/138", "user": "dsyer", "labels": ["type: bug"], "created": "2014-01-09 11:32:57", "closed": "2014-01-13 17:56:36", "commits": {"c7d36f8a3f3d92dfbd09fe9e7ebfd76b18bf11dc": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "c7d36f8a3f3d92dfbd09fe9e7ebfd76b18bf11dc", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["1a90daf995aac39b5b821bb6b28dddf81c808a0a"], "nameRev": "c7d36f8a3f3d92dfbd09fe9e7ebfd76b18bf11dc tags/2.0.0.M3~29", "commitMessage": "Allow scopes to contain non-whitespace (per spec)\n\nIt turns out that the Facebook \"feature\" was only used server side anyway\nso there's no reason we need to support it, and removing it is pretty painless.\n\nFixes gh-138\n", "commitDateTime": "2014-01-13 17:55:29", "authoredDateTime": "2014-01-13 17:55:29", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util/OAuth2Utils.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/TestAuthorizationRequest.java", "insertions": 10, "deletions": 10, "lines": 20}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Utils.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.util.OAuth2Utils.parseParameterList(java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestAuthorizationRequest.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.TestAuthorizationRequest.testSingleValueScopeIsExploded(char)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.TestAuthorizationRequest.testCommaSeparatedScopesAreExploded()", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.TestAuthorizationRequest.testSpaceSeparatedScopesAreExploded()", "TOT": 7, "UPD": 0, "INS": 1, "MOV": 5, "DEL": 1}, {"spoonMethodName": "org.springframework.security.oauth2.provider.TestAuthorizationRequest.testCommaInScopeIsAllowed()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c7d36f8a3f3d92dfbd09fe9e7ebfd76b18bf11dc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/util"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.common.util.OAuth2Utils.parseParameterList(java.lang.String)"]}, {"title": "[SECOAUTH-413] Refreshed tokens do not reduce their scope.", "body": "> **Priority**: Major\n> **Original Assignee**: Dave Syer\n> **Reporter**: Andr\u00e9s Monge Moreno\n> **Created At**: Mon, 8 Jul 2013 16:00:34 +0100\n> **Last Updated on Jira**: Fri, 12 Jul 2013 07:51:28 +0100\n\nWhen requesting the server to refresh a token, the class DefaultTokenServices generates a new Authentication called narrowed that is supposed to have the scope of the current request, given that it's included in the scope accepted in creation. However, in the actual implementation of DefaultTokenServices, the new authentication is created exactly as the one that is recovered from the tokenStore i.e. with the original scope and not with the recently requested one.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/134", "user": "dsyer", "labels": ["type: bug"], "created": "2014-01-09 11:32:55", "closed": "2014-01-13 17:30:15", "commits": {"1a90daf995aac39b5b821bb6b28dddf81c808a0a": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "1a90daf995aac39b5b821bb6b28dddf81c808a0a", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["28882aaad05222de717e9218673e54bf79655476"], "nameRev": "1a90daf995aac39b5b821bb6b28dddf81c808a0a tags/2.0.0.M3~30", "commitMessage": "Ensure scope is narrowed on refresh\n\nFixes gh-134\n", "commitDateTime": "2014-01-13 17:24:07", "authoredDateTime": "2014-01-13 17:19:07", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/OAuth2Request.java", "insertions": 44, "deletions": 22, "lines": 66}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java", "insertions": 140, "deletions": 79, "lines": 219}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/JwtTokenServices.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/AbstractTestDefaultTokenServices.java", "insertions": 118, "deletions": 55, "lines": 173}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/TestJwtTokenServices.java", "insertions": 12, "deletions": 2, "lines": 14}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Request.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Request.narrowScope(java.util.Set)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Request.getScope(java.util.Map)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.OAuth2Request.createOAuth2Request(java.util.Map)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "DefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createRefreshedAuthentication(org.springframework.security.oauth2.provider.OAuth2Authentication,java.util.Set)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "JwtTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.JwtTokenServices.createRefreshedAuthentication(org.springframework.security.oauth2.provider.OAuth2Authentication,java.util.Set)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "AbstractTestDefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractTestDefaultTokenServices.testRefreshedTokenHasNarrowedScopes()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractTestDefaultTokenServices.testRefreshedTokenHasScopes()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractTestDefaultTokenServices.createAuthentication()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "TestJwtTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.TestJwtTokenServices.testRefreshedTokenHasScopes()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TestJwtTokenServices.testRefreshedTokenNarrowsScopes()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TestJwtTokenServices.testRefreshedTokenInvalidWithWrongClient()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.TestJwtTokenServices.createAuthentication()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1a90daf995aac39b5b821bb6b28dddf81c808a0a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 186, "deletions": 102, "lines": 288, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 10, "UPD": 0, "INS": 6, "MOV": 2, "DEL": 2, "spoonFilesChanged": 3, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.DefaultTokenServices.createRefreshedAuthentication(org.springframework.security.oauth2.provider.OAuth2Authentication,java.util.Set)", "org.springframework.security.oauth2.provider.OAuth2Request.getScope(java.util.Map)", "org.springframework.security.oauth2.provider.token.JwtTokenServices.createRefreshedAuthentication(org.springframework.security.oauth2.provider.OAuth2Authentication,java.util.Set)", "org.springframework.security.oauth2.provider.OAuth2Request.narrowScope(java.util.Set)", "org.springframework.security.oauth2.provider.OAuth2Request.createOAuth2Request(java.util.Map)"]}, {"title": "[SECOAUTH-412] DefaultTokenServices override RefreshToken regardless of what TokenEnhancer does with it", "body": "> **Priority**: Minor\n> **Original Assignee**: Dave Syer\n> **Reporter**: J\u00e1n Ondru\u0161ek\n> **Created At**: Mon, 17 Jun 2013 10:44:18 +0100\n> **Last Updated on Jira**: Fri, 12 Jul 2013 07:47:44 +0100\n\nDefaultTokenServices:\n\npublic OAuth2AccessToken createAccessToken(OAuth2Authentication authentication):  \n...  \n// private method can use TokenEnhancer to override RefreshToken inside the AccessToken  \nOAuth2AccessToken accessToken = createAccessToken(authentication, refreshToken);  \ntokenStore.storeAccessToken(accessToken, authentication);  \n// here the original RefreshToken is stored  \nif (refreshToken != null)  { tokenStore.storeRefreshToken(refreshToken, authentication); } \n\n// method returns the modified AccessToken with modified RefreshToken !  \nreturn accessToken;\n\nMy suggestion:  \n1. let the TokenEnhancer to modify AccessToken with injected RefreshToken as it is - this is good approach  \n2. use the modified RefreshToken when storing via TokenStore\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/133", "user": "dsyer", "labels": ["type: bug"], "created": "2014-01-09 11:32:55", "closed": "2014-01-13 16:45:47", "commits": {"28882aaad05222de717e9218673e54bf79655476": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "28882aaad05222de717e9218673e54bf79655476", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["13e968c1f7758b07bc0dd44f54165daa17dcc33d"], "nameRev": "28882aaad05222de717e9218673e54bf79655476 tags/2.0.0.M3~31", "commitMessage": "Use enhanced token to obtain refresh token\n\nFixes gh-133.\n", "commitDateTime": "2014-01-13 16:45:13", "authoredDateTime": "2014-01-13 16:45:13", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/DefaultTokenServices.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/token/AbstractTestDefaultTokenServices.java", "insertions": 5, "deletions": 2, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.DefaultTokenServices.createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractTestDefaultTokenServices.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractTestDefaultTokenServices.testTokenEnhancerUpdatesStoredTokens()", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractTestDefaultTokenServices.testTokenEnhancerUpdatesStoredTokens().1.enhance(org.springframework.security.oauth2.common.OAuth2AccessToken,org.springframework.security.oauth2.provider.OAuth2Authentication)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["28882aaad05222de717e9218673e54bf79655476"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 0, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.token.DefaultTokenServices.createAccessToken(org.springframework.security.oauth2.provider.OAuth2Authentication)"]}, {"title": "[SECOAUTH-411] ClientCredentialsTokenGranter does not allow RefreshToken", "body": "> **Priority**: Major\n> **Original Assignee**: Dave Syer\n> **Reporter**: J\u00e1n Ondru\u0161ek\n> **Created At**: Mon, 17 Jun 2013 09:59:51 +0100\n> **Last Updated on Jira**: Fri, 12 Jul 2013 07:51:43 +0100\n\nIt is hard-coded in ClientCredentialsTokenGranter:\n\nDefaultOAuth2AccessToken norefresh = new DefaultOAuth2AccessToken(token);  \n// The spec says that client credentials are not allowed to get a refresh token\n\nwhich is wrong! The RFC 6749, http://tools.ietf.org/html/rfc6749#section-4.4.3 says:  \nA refresh token SHOULD NOT be included.\n\nLook at the definition of SHOULD NOT http://tools.ietf.org/html/rfc2119#section-4:\n\n\"NOT RECOMMENDED\"\n\nThis means, that framework must not prevent it.\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/132", "user": "dsyer", "labels": ["type: bug"], "created": "2014-01-09 11:32:55", "closed": "2014-01-13 16:29:16", "commits": {"13e968c1f7758b07bc0dd44f54165daa17dcc33d": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "13e968c1f7758b07bc0dd44f54165daa17dcc33d", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["e60a95e821866819c1860506bd56d356d200d84d"], "nameRev": "13e968c1f7758b07bc0dd44f54165daa17dcc33d tags/2.0.0.M3~32", "commitMessage": "Allow refresh tokens in client credentials grant\n\nFixes gh-132\n", "commitDateTime": "2014-01-13 16:29:02", "authoredDateTime": "2014-01-13 16:28:59", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client/ClientCredentialsTokenGranter.java", "insertions": 9, "deletions": 2, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ClientCredentialsTokenGranter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.client.ClientCredentialsTokenGranter", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.client.ClientCredentialsTokenGranter.setAllowRefresh(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.client.ClientCredentialsTokenGranter.grant(java.lang.String,org.springframework.security.oauth2.provider.TokenRequest)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["13e968c1f7758b07bc0dd44f54165daa17dcc33d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 2, "lines": 11, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/client"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.provider.client.ClientCredentialsTokenGranter", "org.springframework.security.oauth2.provider.client.ClientCredentialsTokenGranter.setAllowRefresh(boolean)", "org.springframework.security.oauth2.provider.client.ClientCredentialsTokenGranter.grant(java.lang.String,org.springframework.security.oauth2.provider.TokenRequest)"]}, {"title": "[SECOAUTH-405] AbstractTokenGranter#validateGrantType() throws wrong exception", "body": "> **Priority**: Minor\n> **Original Assignee**: Dave Syer\n> **Reporter**: Te Li\n> **Created At**: Thu, 23 May 2013 01:25:13 +0100\n> **Last Updated on Jira**: Thu, 23 May 2013 09:29:35 +0100\n\nAccording to the spec, \"unauthorized_client\", not \"invalid_grant\", is the error code when the authenticated client is not authorized to use the requested authorization grant type. \n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/130", "user": "dsyer", "labels": ["type: bug"], "created": "2014-01-09 11:32:54", "closed": "2014-01-13 16:04:14", "commits": {"e60a95e821866819c1860506bd56d356d200d84d": {"commitGHEventType": "closed", "commitUser": "dsyer"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "e60a95e821866819c1860506bd56d356d200d84d", "commitGHEventType": "closed", "commitUser": "dsyer", "commitParents": ["cfb87556dd71dcfcff542b8ac42979e4fb262032"], "nameRev": "e60a95e821866819c1860506bd56d356d200d84d tags/2.0.0.M3~33", "commitMessage": "Ensure AbstractTokenGranter throws correct exception\n\nPer the spec an unsupported grant type should be an InvalidClientException.\n\nFixes gh-130\n", "commitDateTime": "2014-01-13 16:02:49", "authoredDateTime": "2014-01-13 16:02:49", "commitGitStats": [{"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2Exception.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson1Deserializer.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/OAuth2ExceptionJackson2Deserializer.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions/UnauthorizedUserException.java", "insertions": 30, "deletions": 0, "lines": 30}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/password/ResourceOwnerPasswordTokenGranter.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token/AbstractTokenGranter.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/TestOAuth2ExceptionDeserializer.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/common/exception/TestOAuth2ExceptionSerializer.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/http/converter/jaxb/TestJaxbOAuth2ExceptionMessageConverter.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/password/TestResourceOwnerPasswordTokenGranter.java", "insertions": 52, "deletions": 23, "lines": 75}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OAuth2Exception.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.create(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionJackson1Deserializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson1Deserializer.deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OAuth2ExceptionJackson2Deserializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Deserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "UnauthorizedUserException.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exceptions.UnauthorizedUserException", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ResourceOwnerPasswordTokenGranter.java", "spoonMethods": []}, {"spoonFilePath": "AbstractTokenGranter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.token.AbstractTokenGranter.validateGrantType(java.lang.String,org.springframework.security.oauth2.provider.ClientDetails)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestOAuth2ExceptionDeserializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exception.TestOAuth2ExceptionDeserializer.readValueUnauthorizedClient()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestOAuth2ExceptionSerializer.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.common.exception.TestOAuth2ExceptionSerializer.writeValueAsStringUnauthorizedClient()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestJaxbOAuth2ExceptionMessageConverter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.TestJaxbOAuth2ExceptionMessageConverter.writeUnauthorizedClient()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.http.converter.jaxb.TestJaxbOAuth2ExceptionMessageConverter.readUnauthorizedClient()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestResourceOwnerPasswordTokenGranter.java", "spoonMethods": [{"spoonMethodName": "org.springframework.security.oauth2.provider.password.TestResourceOwnerPasswordTokenGranter", "TOT": 4, "UPD": 1, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.password.TestResourceOwnerPasswordTokenGranter.testGrantTypeNotSupported()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.springframework.security.oauth2.provider.password.TestResourceOwnerPasswordTokenGranter.2.loadClientByClientId(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e60a95e821866819c1860506bd56d356d200d84d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 37, "deletions": 7, "lines": 44, "gitFilesChange": 6}, "spoonStatsSummary": {"TOT": 5, "UPD": 4, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 5, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["spring-security-oauth2/src/main/java/org/springframework/security/oauth2/common/exceptions", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/token", "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/password"], "changesInPackagesSPOON": ["org.springframework.security.oauth2.common.exceptions.UnauthorizedUserException", "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson2Deserializer.deserialize(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "org.springframework.security.oauth2.common.exceptions.OAuth2ExceptionJackson1Deserializer.deserialize(org.codehaus.jackson.JsonParser,org.codehaus.jackson.map.DeserializationContext)", "org.springframework.security.oauth2.common.exceptions.OAuth2Exception.create(java.lang.String,java.lang.String)", "org.springframework.security.oauth2.provider.token.AbstractTokenGranter.validateGrantType(java.lang.String,org.springframework.security.oauth2.provider.ClientDetails)"]}, {"title": "[SECOAUTH-391] Spring oauth shouldn't return a 400 when the realm doesn't match", "body": "> **Priority**: Minor\n> **Original Assignee**: Dave Syer\n> **Reporter**: Christopher Ng\n> **Created At**: Wed, 6 Feb 2013 14:34:12 +0000\n> **Last Updated on Jira**: Wed, 2 Oct 2013 22:22:46 +0100\n\nIf the client passes in a realm and it doesn't match the configured realm name, then the framework returns a 400...shouldn't it return a 401 instead, with the correct WWW-Authenticate header?\n\nComments:\n\n**david_syer** on Fri, 8 Feb 2013 13:46:52 +0000\n\n> Can you pinpoint where exactly the 403 is coming from? If it's hard coded in a filter we probably need to refactor it anyway (see [SECOAUTH-386](https://jira.springsource.org/browse/SECOAUTH-386) for instance).\n\n**facboy** on Fri, 8 Feb 2013 15:11:35 +0000\n\n> hmm, i seem to have got myself confused, it's a 400 error it sends, not a 403. i still think it should send a 401, though i'm afraid i'm no security expert so perhaps this doesn't make sense. it seems a bit pointless to me for the client to ever send the realm with this implementation, given\n> 1.  if they send it and it's wrong, they get a 400 error (which tells them nothing, in particular it doesn't tell them what the correct realm is!)\n> 2.  if they don't send it they get authenticated anyway because the implementation ignores any configured realm on the server if the client doesn't bother to send one\n> 3.  it's optional in the spec anyway\n> \n> if the server returned a 401 with a WWW-Authenticate header and the correct realm then the client could send the correct realm at least...though i suppose i'm a bit confused as to what the point of the realm is in any case.\n> \n> this is the source:\n> \n> **OAuthProviderProcessingFilter.java:307**\n> \n> ```\n> if ((realm != null) && (!realm.equals(this.authenticationEntryPoint.getRealmName()))) {\n>       throw new InvalidOAuthParametersException(messages.getMessage(\"OAuthProcessingFilter.incorrectRealm\",\n>                                                                     new Object[]{realm, this.getAuthenticationEntryPoint().getRealmName()},\n>                                                                     \"Response realm name '{0}' does not match system realm name of '{1}'\"));\n>     }\n> ```\n> \n> and:\n> \n> **OAuthProviderProcessingFilter.java:376**\n> \n> ```\n> if (failure instanceof InvalidOAuthParametersException) {\n>       response.sendError(400, failure.getMessage());\n>     }\n> ```\n> \n> it does appear that it's something that would be addressable by [SECOAUTH-386](https://jira.springsource.org/browse/SECOAUTH-386).\n\n**david_syer** on Fri, 8 Feb 2013 17:10:12 +0000\n\n> OK, let's leave it for [SECOAUTH-386](https://jira.springsource.org/browse/SECOAUTH-386) (I'll leave this one open and close it when that is done).\n> \n> As for what a client expects, I think the use of \"realm\" as an OAuth parameter name is confusing, because in plain HTTP it's just a hint in the 401 response so the client can work out which credentials to use if it has many choices. At least if the client doesn't send a realm it gets the correct HTTP protocol behaviour (but maybe the wrong status code - can you find anywhere in the spec that nails the status code for this case?). And I'm not sure a 400 is at all inconsistent with what other OAuth providers do. It seems pretty common to me using various public providers that they don't give any information about what you did wrong if the request isn't perfect (which you are right does make it very hard to debug).\n\n**facboy** on Fri, 8 Feb 2013 17:23:30 +0000\n\n> http://tools.ietf.org/html/rfc5849#section-3.2:\n> \n> > The server SHOULD return a 400 (Bad Request) status code when receiving a request with unsupported parameters, an unsupported signature method, missing parameters, or duplicated protocol parameters. The server SHOULD return a 401 (Unauthorized) status code when receiving a request with invalid client credentials, an invalid or expired token, an invalid signature, or an invalid or used nonce.\n> \n> i regard the realm being wrong as a case of invalid credentials so it should be a 401, but i'm not an authority !\n", "url": "https://github.com/spring-projects/spring-security-oauth/issues/127", "user": "dsyer", "labels": ["in: oauth1", "type: bug"], "created": "2014-01-09 11:32:53", "closed": "2014-01-13 15:28:14", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}]}