{"bugLabels": ["breaking change", "defect", "not a bug"], "projectName": "line/armeria", "captureTime": "Fri Jul  3 16:50:50 2020", "issues": [{"created": "2020-06-06 07:33:37", "commits": {"c4cdf5f6e76c7601526fe93e6cd4f4cef1228abf": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2020-06-23 14:49:38", "filteredCommits": [], "commitsDetails": [{"nameRev": "c4cdf5f6e76c7601526fe93e6cd4f4cef1228abf master~4", "commitMessage": "Remove StreamMessage.drainAll() (#2827)\n\nMotivation:\r\n`StreamMessage.drainAll()` is mostly used in tests and we can replace that with `StepVerifier`.\r\n\r\nModification:\r\n- Remove `StreamMessage.drainAll()` and its variants\r\n\r\nResult:\r\n- `StreamMessage.drainAll()` and its variants are gone.\r\n- Close #2782", "commitParents": ["04d9c0c53ea51b511383c87e85aa71558ff30dba"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "c4cdf5f6e76c7601526fe93e6cd4f4cef1228abf", "authoredDateTime": "2020-06-23 23:49:37", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/client/DefaultWebClientTest.java"}, {"insertions": 0, "deletions": 11, "lines": 11, "filePath": "core/src/main/java/com/linecorp/armeria/common/HeaderOverridingHttpRequest.java"}, {"insertions": 35, "deletions": 31, "lines": 66, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpResponseWrapperTest.java"}, {"insertions": 0, "deletions": 174, "lines": 174, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDrainerTest.java"}, {"insertions": 8, "deletions": 4, "lines": 12, "filePath": "core/src/test/java/com/linecorp/armeria/common/HttpRequestTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "examples/grpc-kotlin/gen-src/main/grpc/example/armeria/grpc/kotlin/HelloServiceGrpc.java"}, {"insertions": 14, "deletions": 12, "lines": 26, "filePath": "core/src/test/java/com/linecorp/armeria/common/DefaultAggregatedHttpRequestTest.java"}, {"insertions": 26, "deletions": 26, "lines": 52, "filePath": "core/src/test/java/com/linecorp/armeria/common/DefaultAggregatedHttpResponseTest.java"}, {"insertions": 7, "deletions": 4, "lines": 11, "filePath": "core/src/test/java/com/linecorp/armeria/server/encoding/HttpEncodedResponseTest.java"}, {"insertions": 0, "deletions": 23, "lines": 23, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java"}, {"insertions": 0, "deletions": 30, "lines": 30, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java"}, {"insertions": 0, "deletions": 16, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageWrapper.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/AbstractReactiveWebServerCustomKeyAliasTest.java"}, {"insertions": 23, "deletions": 14, "lines": 37, "filePath": "core/src/test/java/com/linecorp/armeria/server/DecodedHttpRequestTest.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "benchmarks/src/jmh/java/com/linecorp/armeria/grpc/GrpcServiceBenchmark.java"}, {"insertions": 0, "deletions": 24, "lines": 24, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/FilteredStreamMessage.java"}, {"insertions": 0, "deletions": 31, "lines": 31, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java"}, {"insertions": 20, "deletions": 10, "lines": 30, "filePath": "core/src/test/java/com/linecorp/armeria/internal/common/DefaultHttpResponseTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java"}, {"insertions": 0, "deletions": 11, "lines": 11, "filePath": "core/src/test/java/com/linecorp/armeria/client/Http1ConnectionReuseTest.java"}, {"insertions": 42, "deletions": 9, "lines": 51, "filePath": "core/src/test/java/com/linecorp/armeria/client/encoding/HttpDecodedResponseTest.java"}, {"insertions": 1, "deletions": 67, "lines": 68, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java"}], "commitDateTime": "2020-06-23 23:49:37", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2782", "ttf": 17.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Remove StreamMessage.drainAll?", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I was looking through the codebases for usage of `drainAll` and couldn't find any that seemed important (most were testing the `drainAll` method itself). Let me know if I missed any.\r\n\r\n`drainAll` seems to be a poor version of `aggregate`, is there any use case we imagine for `drainAll`?", "labels": ["breaking change"]}, {"created": "2020-05-10 09:14:00", "commits": {"1e131c6600a24e7740e46de86b659b0dbb043f40": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "closed": "2020-07-01 06:56:38", "filteredCommits": [], "commitsDetails": [{"nameRev": "", "commitMessage": "", "commitParents": [], "spoonStatsSkippedReason": "", "commitHash": "1e131c6600a24e7740e46de86b659b0dbb043f40", "authoredDateTime": "", "commitGHEventType": "referenced", "commitGitStats": [], "commitDateTime": "", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2696", "ttf": 51.000277777777775, "title": "Logging decorator factories should match semantics of empty builder", "statsSkippedReason": "", "user": "anuraaga", "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 1, "multipleIssueFixes": 0, "alsoFixesPhrase": 0}, "body": "We deviated the behavior of the factories and builders a long time ago to preserve backwards compatibility of factories before we added the builders, but at the time we figured the better default for successful requests is `TRACE` to reduce log spam. So we should change the factory finally to just call `builder().build()` to reduce confusion of the defaults. This would mean either the factory's behavior changes to TRACE successful log entries, or the builder needs to be changed so successful log entries are INFO.", "labels": ["breaking change"]}, {"created": "2020-03-17 10:47:59", "commits": {"a459ca6584aa7142a3f007c4ed87dc2e80c7dc34": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-03-25 11:09:02", "filteredCommits": [], "commitsDetails": [{"nameRev": "a459ca6584aa7142a3f007c4ed87dc2e80c7dc34 tags/armeria-0.99.0~3", "commitMessage": "Make `ClosedSessionException` extend `ClosedStreamException` (#2616)\n\nMotivation:\r\n\r\n`ClosedSessionException` also means that all sessions are closed.\r\nIf `ClosedSessionException` extends `ClosedSessionException`,\r\na `ClosedSessionException` can be caught by `ClosedSessionException`.\r\nIt will be useful when a user wants to make their own retrying strategy.\r\n\r\nModifications:\r\n\r\n- Make `ClosedStreamException` extensible\r\n- `ClosedSessionException` extends `ClosedStreamException` instead of `RuntimeException`\r\n\r\nResult:\r\n\r\n- You can now catch `ClosedSessionException` by `ClosedStreamException`\r\n- Fixes #2596", "commitParents": ["d6ca9b81e3b5d6d420175442a9afac3f2c979968"], "spoonStatsSkippedReason": "", "commitHash": "a459ca6584aa7142a3f007c4ed87dc2e80c7dc34", "authoredDateTime": "2020-03-25 20:09:01", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/ClosedStreamException.java"}, {"insertions": 0, "deletions": 1, "lines": 1, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java"}, {"insertions": 13, "deletions": 4, "lines": 17, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java"}, {"insertions": 7, "deletions": 5, "lines": 12, "filePath": "grpc/src/main/java/com/linecorp/armeria/internal/common/grpc/GrpcStatus.java"}, {"insertions": 3, "deletions": 1, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/common/ClosedSessionException.java"}], "commitDateTime": "2020-03-25 20:09:01", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.common.grpc.GrpcStatus.fromThrowable(java.lang.Throwable)"}], "spoonFilePath": "GrpcStatus.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 11, "MOV": 6, "INS": 4, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.HttpServerHandler"}], "spoonFilePath": "HttpServerHandler.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.ClosedStreamException"}], "spoonFilePath": "ClosedStreamException.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.ClosedSessionException"}], "spoonFilePath": "ClosedSessionException.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.util.Exceptions.isStreamCancelling(java.lang.Throwable)"}], "spoonFilePath": "Exceptions.java"}]}], "url": "https://github.com/line/armeria/issues/2596", "ttf": 8.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Make `ClosedSessionException` extend `ClosedStreamException`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When a connection is closed, it inherently means that all streams associated with it are closed. Therefore, `ClosedSessionException` could be a `ClosedStreamException`.\r\n\r\n", "labels": ["breaking change", "improvement"]}, {"created": "2019-12-08 02:08:59", "commits": {"1e439e3578a6c3692f20ea73a9178d91afa4be82": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-12-30 07:32:44", "filteredCommits": [], "commitsDetails": [{"nameRev": "1e439e3578a6c3692f20ea73a9178d91afa4be82 tags/armeria-0.98.0~99", "commitMessage": "Remove Tomcat 8.0 support (#2350)\n\nMotivation:\r\n\r\nWe didn't see any Tomcat 8.0 releases for last several months while 8.5\r\nhad many micro bumps.\r\n\r\nModifications:\r\n\r\n- Remove `:tomcat8.0` from the source tree.\r\n\r\nResult:\r\n\r\n- (Breaking) `armeria-tomcat8.0` has been removed.\r\n- Closes #2304", "commitParents": ["ba99b612ec9d9bd56a76351ce2969233a85fa775"], "spoonStatsSkippedReason": "", "commitHash": "1e439e3578a6c3692f20ea73a9178d91afa4be82", "authoredDateTime": "2019-12-30 16:32:43", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 0, "deletions": 102, "lines": 102, "filePath": "tomcat8.0/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat80ProtocolHandler.java"}, {"insertions": 0, "deletions": 54, "lines": 54, "filePath": "tomcat8.0/build.gradle"}, {"insertions": 0, "deletions": 1, "lines": 1, "filePath": "settings.gradle"}, {"insertions": 0, "deletions": 58, "lines": 58, "filePath": "tomcat8.0/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat80OutputBuffer.java"}, {"insertions": 0, "deletions": 48, "lines": 48, "filePath": "tomcat8.0/src/main/java/com/linecorp/armeria/server/tomcat/Tomcat80InputBuffer.java"}], "commitDateTime": "2019-12-30 16:32:43", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.tomcat.Tomcat80OutputBuffer"}], "spoonFilePath": "Tomcat80OutputBuffer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.tomcat.Tomcat80ProtocolHandler"}], "spoonFilePath": "Tomcat80ProtocolHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.tomcat.Tomcat80InputBuffer"}], "spoonFilePath": "Tomcat80InputBuffer.java"}]}], "url": "https://github.com/line/armeria/issues/2304", "ttf": 22.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Drop support for Tomcat 8.0", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Didn't see any Tomcat 8.0 releases for last several months while 8.5 had many micro bumps.", "labels": ["breaking change", "dependencies"]}, {"created": "2019-10-30 08:24:21", "commits": {"e21448a95b963cc0e6f349710f7ec1cf572b87af": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-11-12 06:23:26", "filteredCommits": [], "commitsDetails": [{"nameRev": "e21448a95b963cc0e6f349710f7ec1cf572b87af tags/armeria-0.96.0~18", "commitMessage": "Make 'none+' serialization format as optional. (#2241)\n\nMotivation:\r\n\r\nImprove API UX, by not forcing application to provide none+ serialization format.\r\n\r\nModifications:\r\n\r\n- Update `Scheme.parse()` and `tryParse()` to default to `none+`, if no serialization format is passed.\r\n- Update `DefaultClientFactory` to normalize URI by removing `none+` from URI scheme.\r\n\r\nResult:\r\n\r\n- Fixes #2219", "commitParents": ["4e0d43526ce3f28180da0241d6e8737b8b46dc9d"], "spoonStatsSkippedReason": "", "commitHash": "e21448a95b963cc0e6f349710f7ec1cf572b87af", "authoredDateTime": "2019-11-11 23:23:26", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 5, "deletions": 6, "lines": 11, "filePath": "core/src/main/java/com/linecorp/armeria/client/AbstractClientFactory.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientBuilder.java"}, {"insertions": 48, "deletions": 0, "lines": 48, "filePath": "core/src/test/java/com/linecorp/armeria/client/ClientBuilderTest.java"}, {"insertions": 8, "deletions": 8, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/common/Scheme.java"}, {"insertions": 64, "deletions": 0, "lines": 64, "filePath": "core/src/test/java/com/linecorp/armeria/common/SchemeTest.java"}, {"insertions": 20, "deletions": 0, "lines": 20, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java"}], "commitDateTime": "2019-11-12 15:23:26", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.AbstractClientFactory.validateScheme(java.net.URI)"}], "spoonFilePath": "AbstractClientFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.DefaultClientFactory.newClient(java.net.URI,java.lang.Class,com.linecorp.armeria.client.ClientOptions)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.DefaultClientFactory.normalizeUri(java.net.URI,com.linecorp.armeria.common.Scheme)"}], "spoonFilePath": "DefaultClientFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientBuilderTest"}], "spoonFilePath": "ClientBuilderTest.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 8, "MOV": 2, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.Scheme.parse(java.lang.String)"}, {"UPD": 0, "TOT": 5, "MOV": 1, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.Scheme.tryParse(java.lang.String)"}], "spoonFilePath": "Scheme.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientBuilder"}], "spoonFilePath": "HttpClientBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.SchemeTest"}], "spoonFilePath": "SchemeTest.java"}]}], "url": "https://github.com/line/armeria/issues/2219", "ttf": 12.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Accept URIs without `none+` and return URIs without `none+`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I see usability issues with `none+` prefix in URI scheme:\r\n\r\n- A user must specify a URL that starts with `none+` to create an `HttpClient` with a `ClientBuilder`.\r\n  - We could assume `none+` exists when a user did not prepend it.\r\n  - It becomes a little bit more ambiguous, I think it will not be that confusing. It's like removing 0 from 0.1 (= .1).\r\n- `HttpClient.uri()` returns a URI that starts with `none+`, which is somewhat confusing. For example, a user cannot convert the returned URI into a URL:\r\n  ```java\r\n  HttpClient client = ...;\r\n  client.uri().toURL(); // Fail\r\n  ```\r\n\r\nI'd like to:\r\n\r\n- Make the `none+` prefix optional when creating a client.\r\n- Make `ClientBuildParams.uri()` return a URI without the `none+` prefix.", "labels": ["breaking change", "good first issue", "improvement"]}, {"created": "2019-09-26 10:48:23", "commits": {"62021f3c334d548c31d8756dc68dfd8726b5dfae": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2019-12-05 06:48:15", "filteredCommits": [], "commitsDetails": [{"nameRev": "62021f3c334d548c31d8756dc68dfd8726b5dfae tags/armeria-0.97.0~12", "commitMessage": "Automatic redirection with a trailing slash (#2292)\n\nMotivation:\r\n\r\nFor example, if a user bound a service at `prefix:/docs`, the service\r\nwill get requests only when the request path starts with `/docs/`, which\r\nmeans `/docs` will not be matched.\r\n\r\nThis is not a problem when there is no other mappings that match `/docs`\r\nbecause Armeria will automatically redirect you to `/docs/`.\r\n\r\nHowever, the following code will not work:\r\n\r\n    // `/docs` will not be redirected to `/docs/` but handled by\r\n    // `HttpFileService`.\r\n    Server server =\r\n        Server.builder()\r\n              .service(\"prefix:/docs\", new DocService())\r\n              .service(\"prefix:/\", HttpFileService.of(...))\r\n              .build();\r\n\r\n... because the `HttpFileService` will handle the request to `/docs`.\r\n\r\nTo address this issue, we need to introduce some special casing for the\r\npath without a trailing slash unless there's an explicit binding at it:\r\n\r\n    // `/docs` will not be redirected to `/docs/` but handled by\r\n    // `someOtherService`.\r\n    Server server =\r\n        Server.builder()\r\n              .service(\"prefix:/docs\", new DocService())\r\n              .service(\"/docs\", someOtherService)\r\n              .build();\r\n\r\nModifications:\r\n\r\n- Modified `Routers.router()` to add the redirect mappings that maps to\r\n  the fallback service for `EXACT`, `PREFIX` and `PARAMETERIZED` path\r\n  types.\r\n  - `FallbackService.handleNotFound()` will send a redirect response.\r\n- Modified `RoutingTrie` to have precedence (high or low) for values.\r\n  - Redirect mappings will have low precedence while other will have\r\n    high precedence, so that a user-specified mapping has precedence.\r\n- Miscellaneous:\r\n  - `Router.findAll()` now returns `List` instead of `Stream`.\r\n  - Tiny optimization in `CompositeRouter.findAll()`\r\n  - Made `RoutingTrie` completely immutable.\r\n    - Added `RoutingTrieBuilder` and `NodeBuilder`.\r\n\r\nResult:\r\n\r\n- Fixes #2116\r\n- Known issues:\r\n  - `GLOB`, `REGEX` and `REGEX_WITH_PREFIX` path types are unsupported,\r\n    although this is expected due to complexity and ambiguity.", "commitParents": ["cc57ef9236d715b14cc784a053d27f8913f648dd"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "62021f3c334d548c31d8756dc68dfd8726b5dfae", "authoredDateTime": "2019-12-05 15:48:15", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 18, "deletions": 6, "lines": 24, "filePath": "core/src/main/java/com/linecorp/armeria/server/CompositeRouter.java"}, {"insertions": 79, "deletions": 20, "lines": 99, "filePath": "core/src/test/java/com/linecorp/armeria/server/RoutingTrieTest.java"}, {"insertions": 4, "deletions": 5, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/RouteCache.java"}, {"insertions": 104, "deletions": 0, "lines": 104, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerAutoRedirectTest.java"}, {"insertions": 38, "deletions": 23, "lines": 61, "filePath": "core/src/main/java/com/linecorp/armeria/server/Routers.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/server/Router.java"}, {"insertions": 52, "deletions": 379, "lines": 431, "filePath": "core/src/main/java/com/linecorp/armeria/server/RoutingTrie.java"}, {"insertions": 422, "deletions": 0, "lines": 422, "filePath": "core/src/main/java/com/linecorp/armeria/server/RoutingTrieBuilder.java"}, {"insertions": 7, "deletions": 6, "lines": 13, "filePath": "core/src/test/java/com/linecorp/armeria/server/RouterTest.java"}], "commitDateTime": "2019-12-05 15:48:15", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2116", "ttf": 69.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`prefix` path mapping is overly strict.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "For example, if a user bound a service at `prefix:/docs`, the service\r\nwill get requests only when the request path starts with `/docs/`, which\r\nmeans `/docs` will not be matched.\r\n\r\nThis is not a problem when there is no other mappings that match `/docs`\r\nbecause Armeria will automatically redirect you to `/docs/`.\r\n\r\nHowever, the following code will not work:\r\n\r\n```java\r\n// `/docs` will not be redirected to `/docs/` but handled by\r\n// `HttpFileService`.\r\nServer server =\r\n    Server.builder()\r\n          .service(\"prefix:/docs\", new DocService())\r\n          .service(\"prefix:/\", HttpFileService.of(...))\r\n          .build();\r\n```\r\n\r\n... because the `HttpFileService` will handle the request to `/docs`.\r\n\r\nTo address this issue, we need to introduce some special casing for the\r\npath without a trailing slash.\r\n\r\nHowever, the redirection should not occur when there's an explicit binding\r\nfor the path without a trailing slash:\r\n\r\n```java\r\n// `/docs` will not be redirected to `/docs/` but handled by\r\n// `someOtherService`.\r\nServer server =\r\n    Server.builder()\r\n          .service(\"prefix:/docs\", new DocService())\r\n          .service(\"/docs\", someOtherService)\r\n          .build();\r\n```", "labels": ["breaking change", "defect"]}, {"created": "2019-09-16 08:05:54", "commits": {"8974da9f636843e12cd4d7548ca3ea01f45be8de": {"commitGHEventType": "referenced", "commitUser": "minwoox"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-10-24 06:48:41", "filteredCommits": [], "commitsDetails": [{"nameRev": "8974da9f636843e12cd4d7548ca3ea01f45be8de tags/armeria-0.95.0~10", "commitMessage": "Some annotated service methods are run from blocking task execu\u2026 (#2187)\n\nMotivation:\r\nThe annotated services whose return type is neither `HttpResponse` nor `CompeltableFuture`, are run using a `blockingTaskExecutor` by default.\r\nWe should fix this to use `EventLoop` by default and let a user choose to use `blockingTaskExecutor` if he/she wants.\r\n\r\nModifications:\r\n- Add `@Blocking` which makes the annotated service run using `blockingTaskExecutor`\r\n- Make all annotated services run from `EventLoop`\r\n\r\nResult:\r\n- Fix #2078\r\n- (Breaking) All annotated services are now run from `EventLoop` by default", "commitParents": ["e8c424a9a7a431a1829365ed8ea10fb48b4dd9f6"], "spoonStatsSkippedReason": "", "commitHash": "8974da9f636843e12cd4d7548ca3ea01f45be8de", "authoredDateTime": "2019-10-24 13:48:40", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 41, "deletions": 12, "lines": 53, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpService.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceFactory.java"}, {"insertions": 34, "deletions": 0, "lines": 34, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/Blocking.java"}, {"insertions": 19, "deletions": 29, "lines": 48, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceTest.java"}, {"insertions": 172, "deletions": 0, "lines": 172, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceBlockingTest.java"}], "commitDateTime": "2019-10-24 15:48:40", "commitUser": "minwoox", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.annotation"}], "spoonFilePath": "Blocking.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceBlockingTest"}], "spoonFilePath": "AnnotatedHttpServiceBlockingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.MyAnnotatedService5.postStringAggregateResponse2(com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.RequestContext)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testAggregation()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.1"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testNonDefaultRoute()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testReturnVoid()"}, {"UPD": 3, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.request(com.linecorp.armeria.common.HttpMethod,java.lang.String,java.lang.String,java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testClassScopeMediaTypeAnnotations()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testParam()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testRequestHeaderInjection()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testAnnotatedHttpService()"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testAdvancedAnnotatedHttpService()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testServiceThrowHttpResponseException()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testServiceThrowIllegalArgumentException()"}], "spoonFilePath": "AnnotatedHttpServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpService"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpService.convertResponse(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpHeaders,java.lang.Object,com.linecorp.armeria.common.HttpHeaders)"}, {"UPD": 0, "TOT": 6, "MOV": 3, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpService.serve0(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "AnnotatedHttpService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.create(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.util.List,java.util.List,java.util.List)"}], "spoonFilePath": "AnnotatedHttpServiceFactory.java"}]}], "url": "https://github.com/line/armeria/issues/2078", "ttf": 37.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Some annotated service methods are run from blocking task executors.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Related: #2064 \r\n\r\nFor example, when the return type of a service method is `AggregatedHttpResponse` or response object conversion is involved, the service method is currently executed via the blocking task executor. By contrast, if a service method returns `HttpResponse`, it will be executed from a event loop thread. This behavioral difference is too subtle and confusing.\r\n\r\nWe need to:\r\n\r\n- Make the service methods run from an event loop thread by default, regardless of their return types.\r\n- Introduce an annotation that makes the service methods run from a blocking task executor.\r\n- Provide some migration plan, like:\r\n  - Introduce a flag that enables this change, whose default is false (disabled).\r\n  - When the flag is disabled, issue a warning log message to tell people to migrate.\r\n  - After a few releases, change the default from false to true.\r\n", "labels": ["breaking change", "defect"]}, {"created": "2019-09-11 06:21:37", "commits": {"0df59824c6020da4408158c81c8fbc3960af5d4a": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2019-10-01 08:21:31", "filteredCommits": [], "commitsDetails": [{"nameRev": "0df59824c6020da4408158c81c8fbc3960af5d4a tags/armeria-0.94.0~11", "commitMessage": "Provide a way to decorate multiple services by `Route` (#2040)\n\nMotivation:\r\n\r\nA decorator has to decorate all services or some services which were statically bound to server configuration.\r\nIt is difficult to decorate services under a specific directory.\r\nThis PR is able to bind a decorator to multiple services whose `Route` match the given `route` dynamically.\r\n\r\nModifications:\r\n\r\n* Additions\r\n  * Add `findAll(RoutingContext)` to `Router` and its implementation for finding all matched `Route`\r\n  * Add `findAll` method to `RoutingTrie` for finding all matched values\r\n  * Add `routeDecoratorCache()` to `Flags` for caching the matched result\r\n  * Add `wrapRouteDecoratingServiceRouter(Router<RouteDecoratingService>)` to `RouteCache` for wrapping with `CacheRouter`\r\n  * Add `ofRouteDecoratingService(List<RouteDecoratingService>)` to `Routers`\r\n  * Add `routeDecorator()` to `VirtualHost` and `ServerBuilder` for returning `DecoratingServiceBindingBuilder`.\r\n  * Add class `RouteDecoratingService` for decorating a `Service` whose `Route` matches the given `route`.\r\n  * Add new builder class `AbstractBindingBuilder` for binding something to a `Route` fluently.\r\n* Deprecations\r\n  * Deprecate `AbstractBindingBuilder#pathUnder(String prefix)`, use `AbstractBindingBuilder#pathPrefix(String prefix)`\r\n  * Deprecate `RouteBuilder#prefix(String prefix)`, use `RouteBuilder#pathPrefix(String prefix)`\r\n  * Deprecate `RouteBuilder#prefix(String prefix, boolean stripPrefix)`, use `RouteBuilder#pathPrefix(String prefix, boolean stripPrefix)`\r\n  * Deprecate `RouteBuilder#pathWithPrefix(String prefix, String pathPattern)`, use `RouteBuilder#path(String prefix, String pathPattern)`\r\n* Break Changes\r\n  * A default virtual host **service** could serve a custom virtual host **request**. Please see #2057 for more information.\r\n    * Before: if a custom virtual host fails to find a service being matched to the given request it returns `NOT_FOUND`.\r\n    * After: if a custom virtual host fails to find a service being matched to the given request, try to route to a default virtual host to find a fallback service.\r\n* Write documentation for `Decorating a service by path mapping`\r\n\r\nResult:\r\n\r\nA user could decorate multiple services whose `Route` match the specified `route`.\r\n\r\n```java\r\nsb.routeDecorator()\r\n  .pathPrefix(\"/api/users\")\r\n  .build((delegate, ctx, req) -> {\r\n      if (!AUTHORIZATION.equals(req.headers().get(\"Authorization\"))) {\r\n          return HttpResponse.of(HttpStatus.UNAUTHORIZED);\r\n      }\r\n      return delegate.serve(ctx, req);\r\n  });\r\n```\r\n\r\nFixes: #582 #2057", "commitParents": ["1147cfdad854450bf225dce7c597aa11564d111f"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "0df59824c6020da4408158c81c8fbc3960af5d4a", "authoredDateTime": "2019-10-01 17:05:07", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 9, "deletions": 0, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/CompositeRouter.java"}, {"insertions": 11, "deletions": 1, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServiceBindingBuilder.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpDocServicePluginTest.java"}, {"insertions": 211, "deletions": 0, "lines": 211, "filePath": "core/src/test/java/com/linecorp/armeria/server/RouteDecoratingTest.java"}, {"insertions": 184, "deletions": 0, "lines": 184, "filePath": "core/src/main/java/com/linecorp/armeria/server/DecoratingServiceBindingBuilder.java"}, {"insertions": 28, "deletions": 5, "lines": 33, "filePath": "core/src/main/java/com/linecorp/armeria/common/Flags.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingBuilderTest.java"}, {"insertions": 9, "deletions": 1, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/server/Router.java"}, {"insertions": 18, "deletions": 0, "lines": 18, "filePath": "core/src/test/java/com/linecorp/armeria/server/VirtualHostBuilderTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "brave/src/test/java/com/linecorp/armeria/server/brave/ServerRequestContextAdapterTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/server/composition/CompositeServiceEntry.java"}, {"insertions": 97, "deletions": 34, "lines": 131, "filePath": "core/src/main/java/com/linecorp/armeria/server/RoutingTrie.java"}, {"insertions": 8, "deletions": 8, "lines": 16, "filePath": "core/src/test/java/com/linecorp/armeria/server/PathWithPrefixTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcDocServicePluginTest.java"}, {"insertions": 22, "deletions": 0, "lines": 22, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServiceConfigBuilder.java"}, {"insertions": 84, "deletions": 20, "lines": 104, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServerBuilderTest.java"}, {"insertions": 79, "deletions": 0, "lines": 79, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServiceConfigBuilderTest.java"}, {"insertions": 145, "deletions": 30, "lines": 175, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}, {"insertions": 320, "deletions": 0, "lines": 320, "filePath": "core/src/main/java/com/linecorp/armeria/server/AbstractBindingBuilder.java"}, {"insertions": 77, "deletions": 5, "lines": 82, "filePath": "core/src/test/java/com/linecorp/armeria/server/RoutingTrieTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/RoutePathType.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "core/src/test/java/com/linecorp/armeria/server/VirtualHostServiceBindingBuilderTest.java"}, {"insertions": 186, "deletions": 0, "lines": 186, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHostDecoratingServiceBindingBuilder.java"}, {"insertions": 119, "deletions": 0, "lines": 119, "filePath": "core/src/test/java/com/linecorp/armeria/server/AbstractBindingBuilderTest.java"}, {"insertions": 112, "deletions": 16, "lines": 128, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java"}, {"insertions": 76, "deletions": 0, "lines": 76, "filePath": "site/src/sphinx/server-decorator.rst"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceFactory.java"}, {"insertions": 35, "deletions": 0, "lines": 35, "filePath": "core/src/main/java/com/linecorp/armeria/server/Routers.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java"}, {"insertions": 46, "deletions": 6, "lines": 52, "filePath": "core/src/test/java/com/linecorp/armeria/server/RouterTest.java"}, {"insertions": 4, "deletions": 236, "lines": 240, "filePath": "core/src/main/java/com/linecorp/armeria/server/AbstractServiceBindingBuilder.java"}, {"insertions": 11, "deletions": 1, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHostServiceBindingBuilder.java"}, {"insertions": 71, "deletions": 12, "lines": 83, "filePath": "core/src/main/java/com/linecorp/armeria/server/RouteCache.java"}, {"insertions": 10, "deletions": 10, "lines": 20, "filePath": "core/src/test/java/com/linecorp/armeria/server/RouteTest.java"}, {"insertions": 21, "deletions": 0, "lines": 21, "filePath": "site/src/sphinx/server-basics.rst"}, {"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/server/composition/AbstractCompositeService.java"}, {"insertions": 84, "deletions": 35, "lines": 119, "filePath": "core/src/main/java/com/linecorp/armeria/server/RouteBuilder.java"}, {"insertions": 144, "deletions": 0, "lines": 144, "filePath": "core/src/main/java/com/linecorp/armeria/server/RouteDecoratingService.java"}], "commitDateTime": "2019-10-01 17:05:07", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2057", "ttf": 20.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Discuss decorating scope of `ServerBuilder.decorator(decorating)`", "statsSkippedReason": "", "user": "ikhoon", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "While I was working on `Decorate a service by path mapping` #582, I realized that `ServerBuilder.decorator(decorator)` works for all virtual-host though `ServerBuilder.service(route, service)` only works for default virtual host.\r\n```java\r\n/**\r\n * Binds the specified {@link Service} at the specified {@link Route} of the default\r\n * {@link VirtualHost}.\r\n */\r\npublic ServerBuilder service(Route route, Service<HttpRequest, HttpResponse> service) {\r\n    defaultVirtualHostBuilder.service(route, service);\r\n    return this;\r\n}\r\n```\r\n\r\nI'm going to add `ServerBuilder.decorator(route, service)` for decorating a service whose route matches the given route. `ServerBuilder` will have similar methods but they work on different scopes.\r\n\r\n* `ServerBuilder.service(route, service)` binds service for **default** virtual host.\r\n* `ServerBuilder.decorator(decorator)` decorates **all** virtual hosts.\r\n* `ServerBuilder.decorator(route, decorator)` will decorate **all** virtual hosts. (new method)\r\n\r\nNow we keep the original policy to avoid breaking change, but we need to discuss this policy whether decorating default virtual-host or all virtual-host for API consistency. \r\n\r\nThe following code shows how `ServerBuilder.decorator(decorator)` decorates all virtual hosts.\r\n\r\n````java\r\n ServerRule server = new ServerRule() {\r\n    @Override\r\n    protected void configure(ServerBuilder sb) throws Exception {\r\n        sb.service(\"/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK))\r\n          .service(\"/test\", (ctx, req) -> HttpResponse.of(HttpStatus.OK))\r\n          .decorator((delegate, ctx, req) -> {  // decorates all virtual-host\r\n              ctx.addAdditionalResponseHeader(\"global_decorator\", \"true\");\r\n              return delegate.serve(ctx, req);\r\n          })\r\n          .virtualHost(\"*.example.com\")\r\n          .service(\"/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK))\r\n          .decorator((delegate, ctx, req) -> {\r\n              ctx.addAdditionalResponseHeader(\"virtualhost_decorator\", \"true\");\r\n              return delegate.serve(ctx, req);\r\n          })\r\n          .build();\r\n```", "labels": ["breaking change", "discussion"]}, {"created": "2019-06-05 08:09:56", "commits": {"992364807fe535dc16bed96af8a977109fe8660b": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-06-07 06:25:22", "filteredCommits": [], "commitsDetails": [{"nameRev": "992364807fe535dc16bed96af8a977109fe8660b tags/armeria-0.87.0~16", "commitMessage": "Move `Client/ServerCacheControl` to `common` (#1816)\n\nMotivation:\r\n\r\nBoth `ClientCacheControl` and `ServerCacheControl` can be used in either\r\nclient or server side and thus they should be in the `common` package.\r\n\r\nModifications:\r\n\r\n- Move `Client/ServerCacheControl` to `common`.\r\n\r\nResult:\r\n\r\n- Fixes #1813\r\n- Better organization", "commitParents": ["b65c947aef667c5ac096139ede8d63d42b9dfa03"], "spoonStatsSkippedReason": "", "commitHash": "992364807fe535dc16bed96af8a977109fe8660b", "authoredDateTime": "2019-06-07 15:25:21", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/docs/DocService.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "site/src/sphinx/server-http-file.rst"}, {"insertions": 0, "deletions": 2, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/common/HttpHeadersTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/server/file/HttpFileServiceAdditionalHeadersTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/server/file/HttpFileTest.java"}, {"insertions": 1, "deletions": 3, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/{server => common}/ServerCacheControl.java"}, {"insertions": 1, "deletions": 4, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/{client => common}/ClientCacheControlBuilder.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/{client => common}/ClientCacheControlTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "examples/proxy-server/src/main/java/example/armeria/proxy/Main.java"}, {"insertions": 0, "deletions": 3, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/common/CacheControl.java"}, {"insertions": 0, "deletions": 5, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/CacheControlBuilder.java"}, {"insertions": 1, "deletions": 3, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/{client => common}/ClientCacheControl.java"}, {"insertions": 1, "deletions": 4, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/{server => common}/ServerCacheControlBuilder.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/{server => common}/ServerCacheControlTest.java"}], "commitDateTime": "2019-06-07 15:25:21", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 5, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlTest.testToBuilder()"}, {"UPD": 15, "TOT": 15, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlTest.testIsEmpty()"}, {"UPD": 12, "TOT": 12, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlTest.testStaleIfError()"}, {"UPD": 12, "TOT": 12, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlTest.testMinFresh()"}, {"UPD": 10, "TOT": 10, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlTest.testOnlyIfCached()"}, {"UPD": 10, "TOT": 10, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlTest.testMaxStale()"}, {"UPD": 10, "TOT": 10, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlTest.testParse()"}, {"UPD": 12, "TOT": 12, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlTest.testStaleWhileRevalidate()"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlTest.testConstants()"}, {"UPD": 12, "TOT": 12, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlTest.testMaxStaleWithValue()"}], "spoonFilePath": "ClientCacheControlTest.java"}, {"spoonMethods": [{"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.sMaxAgeSeconds(long)"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.cachePublic(boolean)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.cachePublic()"}, {"UPD": 9, "TOT": 9, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.build(boolean,boolean,boolean,long)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.cachePrivate()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.mustRevalidate()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.build()"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.sMaxAge(java.time.Duration)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.immutable()"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.mustRevalidate(boolean)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.proxyRevalidate()"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.immutable(boolean)"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.proxyRevalidate(boolean)"}, {"UPD": 8, "TOT": 8, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlBuilder.cachePrivate(boolean)"}], "spoonFilePath": "ServerCacheControlBuilder.java"}, {"spoonMethods": [], "spoonFilePath": "HttpHeadersTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.sMaxAgeSeconds()"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.toBuilder()"}, {"UPD": 12, "TOT": 12, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.asHeaderValue()"}, {"UPD": 7, "TOT": 7, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.equals(java.lang.Object)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.cachePublic()"}, {"UPD": 6, "TOT": 6, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.isEmpty()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.cachePrivate()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.parse(java.lang.String[])"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.immutable()"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.parse(java.lang.Iterable)"}, {"UPD": 7, "TOT": 7, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.hashCode()"}, {"UPD": 14, "TOT": 14, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.proxyRevalidate()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControl.mustRevalidate()"}], "spoonFilePath": "ServerCacheControl.java"}, {"spoonMethods": [], "spoonFilePath": "HttpFileTest.java"}, {"spoonMethods": [{"UPD": 7, "TOT": 7, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.onlyIfCached(boolean)"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.staleWhileRevalidate(java.time.Duration)"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.maxStale(boolean)"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.staleIfError(java.time.Duration)"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.staleWhileRevalidateSeconds(long)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.build()"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.maxStaleSeconds(long)"}, {"UPD": 7, "TOT": 7, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.build(boolean,boolean,boolean,long)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.onlyIfCached()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.maxStale()"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.maxStale(java.time.Duration)"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.staleIfErrorSeconds(long)"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.minFresh(java.time.Duration)"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControlBuilder.minFreshSeconds(long)"}], "spoonFilePath": "ClientCacheControlBuilder.java"}, {"spoonMethods": [], "spoonFilePath": "Main.java"}, {"spoonMethods": [], "spoonFilePath": "HttpFileServiceAdditionalHeadersTest.java"}, {"spoonMethods": [{"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlTest.testConstants()"}, {"UPD": 10, "TOT": 10, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlTest.testImmutable()"}, {"UPD": 10, "TOT": 10, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlTest.testPublic()"}, {"UPD": 5, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlTest.testToBuilder()"}, {"UPD": 12, "TOT": 12, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlTest.testSMaxAge()"}, {"UPD": 15, "TOT": 15, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlTest.testIsEmpty()"}, {"UPD": 10, "TOT": 10, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlTest.testProxyRevalidate()"}, {"UPD": 10, "TOT": 10, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlTest.testPrivate()"}, {"UPD": 10, "TOT": 10, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlTest.testMustRevalidate()"}, {"UPD": 7, "TOT": 7, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerCacheControlTest.testParse()"}], "spoonFilePath": "ServerCacheControlTest.java"}, {"spoonMethods": [], "spoonFilePath": "DocService.java"}, {"spoonMethods": [], "spoonFilePath": "CacheControlBuilder.java"}, {"spoonMethods": [], "spoonFilePath": "CacheControl.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.staleWhileRevalidateSeconds()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.staleIfErrorSeconds()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.maxStaleSeconds()"}, {"UPD": 5, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.isEmpty()"}, {"UPD": 6, "TOT": 6, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.equals(java.lang.Object)"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.parse(java.lang.Iterable)"}, {"UPD": 11, "TOT": 11, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl"}, {"UPD": 15, "TOT": 15, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.asHeaderValue()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.hasMaxStale()"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.toBuilder()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.onlyIfCached()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.minFreshSeconds()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.parse(java.lang.String[])"}, {"UPD": 9, "TOT": 9, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientCacheControl.hashCode()"}], "spoonFilePath": "ClientCacheControl.java"}]}], "url": "https://github.com/line/armeria/issues/1813", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Move `ClientCacheControl` and `ServerCacheControl` to `common` package.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": ".. because they can be used for both client and server side, e.g. client using `ServerCacheControl.parse()` to handle the `cache-control` header from server.", "labels": ["breaking change", "cleanup"]}, {"created": "2019-03-22 01:48:27", "user": "hyangtack", "body": "In some cases, we cannot set every objects required for start/stop when initiating a `StartStopSupport` instance. So it would be useful if we can pass an argument into `doStart()`/`doStop()` when calling its `start()`/`stop()` method. IMHO, we can add one more generic parameter to `StartStopSupport` for the argument.", "closed": "2019-03-22 07:48:20", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1673", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["breaking change", "new feature"], "title": "Make StartStopSupport.start()/stop() accept an argument"}, {"created": "2018-07-06 04:07:30", "commits": {"35b23e2e8da53adcfcafe474dd339389affa61a9": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-07-12 02:41:21", "filteredCommits": [], "commitsDetails": [{"nameRev": "35b23e2e8da53adcfcafe474dd339389affa61a9 tags/armeria-0.67.2~5", "commitMessage": "Do not add HTTP port if TLS was enabled and no port was specified (#1285)\n\nMotivation:\r\n\r\nWhen a user sets up his or her server like the following:\r\n\r\n    new ServerBuilder()\r\n            .tls(...)\r\n            .service(...)\r\n            .build();\r\n\r\nThe server will listen at two ephemeral ports, one for HTTP and the\r\nother for HTTPS.\r\n\r\nThis is a surprising behavior - a user would expect the server to listen\r\nat an HTTPS port only.\r\n\r\nModifications:\r\n\r\n- Do not add HTTP port but only HTTPS port if TLS was enabled and no\r\n  port was specified.\r\n\r\nResult:\r\n\r\n- Fixes #1279", "commitParents": ["d7a53d877f8be2bd3714ff31a7f4274bc6ee3e7c"], "spoonStatsSkippedReason": "", "commitHash": "35b23e2e8da53adcfcafe474dd339389affa61a9", "authoredDateTime": "2018-07-12 11:41:20", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}], "commitDateTime": "2018-07-12 11:41:20", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.build()"}], "spoonFilePath": "ServerBuilder.java"}]}], "url": "https://github.com/line/armeria/issues/1279", "ttf": 5.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "ServerBuilder.tls should cause server to only start with HTTPS?", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I was confused recently when I used `ServerBuilder.tls(ctx)` and it started with both HTTP and HTTPS. I was expecting behavior similar to when calling `ServerBuilder.https(0)` in that when TLS is requested, it is the only one enabled. Does anyone else feel the same confusion?", "labels": ["breaking change", "defect"]}, {"created": "2018-05-21 07:11:39", "commits": {"d26bc9a76126d98c8dae96aaae2f1cb779063ab0": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-05-24 08:52:11", "filteredCommits": [], "commitsDetails": [{"nameRev": "d26bc9a76126d98c8dae96aaae2f1cb779063ab0 tags/armeria-0.65.0~9", "commitMessage": "Rename the `status` tag to `httpStatus` in `MeterIdPrefixFunction.ofDefault()` (#1219)\n\nFixes #1215", "commitParents": ["f662e34fe9bb2d209794e164e717225f79d2efb8"], "spoonStatsSkippedReason": "", "commitHash": "d26bc9a76126d98c8dae96aaae2f1cb779063ab0", "authoredDateTime": "2018-05-24 17:52:10", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 30, "deletions": 27, "lines": 57, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java"}, {"insertions": 9, "deletions": 8, "lines": 17, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java"}, {"insertions": 14, "deletions": 13, "lines": 27, "filePath": "grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java"}, {"insertions": 15, "deletions": 11, "lines": 26, "filePath": "core/src/test/java/com/linecorp/armeria/internal/metric/RequestMetricSupportTest.java"}], "commitDateTime": "2018-05-24 17:52:10", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.ofDefault(java.lang.String)"}], "spoonFilePath": "MeterIdPrefixFunction.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.clientMetricNameWithStatusAndResult(java.lang.String,int,java.lang.String)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.serverMetricName(java.lang.String,int)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.clientMetricNameWithStatus(java.lang.String,int)"}, {"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.serverMetricNameWithStatusAndResult(java.lang.String,int,java.lang.String)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.serverMetricNameWithStatus(java.lang.String,int)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.clientMetricName(java.lang.String,int)"}], "spoonFilePath": "DropwizardMetricsIntegrationTest.java"}, {"spoonMethods": [{"UPD": 6, "TOT": 6, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.grpc.GrpcMetricsIntegrationTest.normal()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.grpc.GrpcMetricsIntegrationTest.findClientMeter(java.lang.String,java.lang.String,io.micrometer.core.instrument.Statistic,java.lang.String[])"}, {"UPD": 6, "TOT": 6, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.grpc.GrpcMetricsIntegrationTest.unframed()"}], "spoonFilePath": "GrpcMetricsIntegrationTest.java"}, {"spoonMethods": [{"UPD": 6, "TOT": 6, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupportTest.httpSuccess()"}, {"UPD": 5, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupportTest.httpFailure()"}], "spoonFilePath": "RequestMetricSupportTest.java"}, {"spoonMethods": [{"UPD": 13, "TOT": 17, "MOV": 0, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.hello_first_endpoint()"}, {"UPD": 11, "TOT": 17, "MOV": 4, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.hello_second_endpoint()"}], "spoonFilePath": "PrometheusMetricsIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/1215", "ttf": 3.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Rename the 'status' tag to 'httpStatus' in 'MeterIdPrefixFunction.ofDefault()'", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": ".. because `status` is somewhat unclear.", "labels": ["breaking change"]}, {"created": "2018-04-10 04:05:45", "commits": {"8a412fb2790665908b7efd5ae724c7ebdec2bbe2": {"commitGHEventType": "closed", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2019-01-18 05:38:53", "filteredCommits": [], "commitsDetails": [{"nameRev": "8a412fb2790665908b7efd5ae724c7ebdec2bbe2 tags/armeria-0.79.0~12", "commitMessage": "Support different CORS policy for different origins. (#1526)\n\nFixes #1139 \r\n\r\nMotivation\r\nA user may want to use different CORS policy for different origins.\r\n\r\nModification\r\n- Added `CorsPolicy`, `AbstractCorsPolicyBuilder`, `ChainedCorsPolicyBuilder`, `CorsPolicyBuilder` classes.\r\n- (Breaking change) Moved most of fields and their getters of `CorsConfig` and `CorsServiceBuilder` except for `anyOriginSupported`, `shortCircuit` to `CorsPolicy` and `AbstractCorsPolicyBuilder` class\r\n- Added `Set<CorsPolicy>` for `CorsConfig` field to support multiple CORS policies.\r\n- Added `andForOrigins` method which returns `ChainedCorsPolicyBuilder` for supporting method chaining. Like the usage of `ServerBuilder` and `ChainedVirtualHostBuilder`, a user can get `CorsServiceBuilder` back via `ChainedCorsPolicyBuilder.and()`.\r\n\r\n\r\nUsage:\r\n- A user can set a new policy for different origins via `andForOrigins`, and he or she has to use `and()` to make a new decorator or build.\r\n\r\n- There is no different if a user wants to use just one policy. \r\n\r\n- A user can also create a `CorsPolicy` via CorsPolicyBuilder and add it via `CorsServiceBuilder.addPolicy`\r\n\r\nFor example,\r\n\r\n```java\r\n\t// Usage 1 - 1 policy\r\nServerBuilder sb = new ServerBuilder().service(\u201c/cors\u201d, new AbstractHttpService() {\r\n\t\u2026\r\n}.decorator(CorsServiceBuilder.forOrigin(\u201chttp://example.com\u201d)\r\n\t\t\t\u2026\r\n\t\t\t.newDecorator());\r\n\r\n// Usage 2 - multiple policies\r\n\r\nServerBuilder sb = new ServerBuilder().service(\u201c/cors\u201d, new AbstractHttpService() {\r\n\t\u2026\r\n}.decorator(CorsServiceBuilder.forOrigin(\u201chttp://example.com\u201d)\r\n\t\t\t\t\u2026\r\n\t\t\t.andForOrigins(\u201chttp://example2.com\u201d)\r\n\t\t\t\t\u2026\r\n\t\t\t.andForOrigins(\u201chttp://example3.com\u201d, \u201chttp://example4.com\u201d)\r\n\t\t\t\t\u2026\r\n\t\t\t.and()\r\n\t\t\t.newDecorator());\r\n```", "commitParents": ["89f07a3e37476c13f11ff408cb8ea07d43867dbc"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "8a412fb2790665908b7efd5ae724c7ebdec2bbe2", "authoredDateTime": "2019-01-18 14:38:51", "commitGHEventType": "closed", "commitGitStats": [{"insertions": 290, "deletions": 0, "lines": 290, "filePath": "core/src/main/java/com/linecorp/armeria/server/cors/CorsPolicy.java"}, {"insertions": 46, "deletions": 0, "lines": 46, "filePath": "core/src/main/java/com/linecorp/armeria/server/cors/CorsPolicyBuilder.java"}, {"insertions": 46, "deletions": 112, "lines": 158, "filePath": "core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java"}, {"insertions": 129, "deletions": 205, "lines": 334, "filePath": "core/src/main/java/com/linecorp/armeria/server/cors/CorsServiceBuilder.java"}, {"insertions": 69, "deletions": 0, "lines": 69, "filePath": "core/src/main/java/com/linecorp/armeria/server/cors/ChainedCorsPolicyBuilder.java"}, {"insertions": 311, "deletions": 0, "lines": 311, "filePath": "core/src/main/java/com/linecorp/armeria/server/cors/AbstractCorsPolicyBuilder.java"}, {"insertions": 184, "deletions": 9, "lines": 193, "filePath": "core/src/test/java/com/linecorp/armeria/server/cors/HttpServerCorsTest.java"}, {"insertions": 42, "deletions": 237, "lines": 279, "filePath": "core/src/main/java/com/linecorp/armeria/server/cors/CorsConfig.java"}], "commitDateTime": "2019-01-18 14:38:51", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1139", "ttf": 283.0002777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Allow specifying different CORS policies for different origins", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Currently, it is not possible to specify different CORS policies for different origins, due to the limitation in our API design.\r\n\r\nRelated: https://github.com/netty/netty/issues/7785 https://github.com/netty/netty/pull/7800\r\n\r\nWe could change our API, for example:\r\n\r\n```java\r\nCorsServiceBuilder.forOrigin(\"foo\")...\r\n                  .andForOrigin(\"bar\")...\r\n                  .newDecorator();\r\n```\r\n\r\nI believe `CorsConfig` will have breaking changes.\r\n\r\n/cc @jprante", "labels": ["breaking change", "new feature"]}, {"created": "2018-02-12 08:18:28", "commits": {"1e1f965ca1869cd4d7662030cd6261a754df69c3": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-02-19 09:26:26", "filteredCommits": [], "commitsDetails": [{"nameRev": "1e1f965ca1869cd4d7662030cd6261a754df69c3 tags/armeria-0.59.0~43", "commitMessage": "Remove ZooKeeperEndpointGroup#Mode (#1006)\n\nMotivation:\r\n\r\n- The constructor of ZooKeeperUpdatingListener (and underlying ZooKeeperRegistration) does not provide a way to specify Mode to use; Actually, its value is fixed to Mode.IN_CHILD_NODES and there is no way to change it.\r\n- Even if ZooKeeperUpdatingListener and ZooKeeperRegistration support Mode parameter, there is another problem: Zookeeper can't detect whether the server registered in node value is alive; Since it is a value of Persistent Node.\r\n\r\nModifications:\r\n\r\n- Remove ZooKeeperEndpointGroup.Mode\r\n- Fix type: endPoint -> endpoint\r\n\r\nResult:\r\n\r\n- Resolves #1005", "commitParents": ["b2c1f53072b80d18170ffdeeba4445a2bb01e0b2"], "spoonStatsSkippedReason": "", "commitHash": "1e1f965ca1869cd4d7662030cd6261a754df69c3", "authoredDateTime": "2018-02-19 18:26:25", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java"}, {"insertions": 1, "deletions": 4, "lines": 5, "filePath": "site/src/sphinx/advanced-zookeeper.rst"}, {"insertions": 9, "deletions": 42, "lines": 51, "filePath": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/EndpointGroupTest.java"}, {"insertions": 30, "deletions": 69, "lines": 99, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java"}], "commitDateTime": "2018-02-19 18:26:25", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup.createListener(com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup$Mode)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup.Mode"}, {"UPD": 0, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 5, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup"}], "spoonFilePath": "ZooKeeperEndpointGroup.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListener"}], "spoonFilePath": "ZooKeeperUpdatingListener.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.endpointGroups()"}, {"UPD": 0, "TOT": 5, "MOV": 4, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.testUpdateEndpointGroup()"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.connectZk()"}], "spoonFilePath": "EndpointGroupTest.java"}]}], "url": "https://github.com/line/armeria/issues/1005", "ttf": 7.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Mode.IN_NODE_VALUE in Zookeeper-based service discovery is meaningless", "statsSkippedReason": "", "user": "dongjinleekr", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I found this problem while I was working on #882.\r\n\r\n1. The constructor of `ZooKeeperUpdatingListener` (and underlying `ZooKeeperRegistration`) does not provide a way to specify `Mode` to use; Actually, its value is fixed to `Mode.IN_CHILD_NODES` and there is no way to change it.\r\n2. `ZooKeeperRegistrationTest` also tests the case of `Mode.IN_CHILD_NODES` only.\r\n3. Even if `ZooKeeperUpdatingListener` and `ZooKeeperRegistration` support `Mode` parameter, there is another problem: Zookeeper can't detect whether the server registered in node value is alive; Since it is a value of Persistent Node.\r\n\r\nSo: `Mode` should be removed and [the documentation](https://github.com/line/armeria/tree/master/site/src/sphinx/advanced-zookeeper.rst) should also be updated, before progressing #882. (In that update, Zookeeper-based service discovery feature is implemented with `CuratorFramework` instance only.)", "labels": ["breaking change", "defect"]}, {"created": "2018-01-18 08:24:42", "commits": {"f0cb2e11fea11c36ecab924f5a3314c11a42154a": {"commitGHEventType": "closed", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-05-10 02:49:44", "filteredCommits": [], "commitsDetails": [{"nameRev": "f0cb2e11fea11c36ecab924f5a3314c11a42154a tags/armeria-0.64.0~23", "commitMessage": "Add status code tag to request metrics (#1172)\n\nRelated: #962\r\nFixes #961", "commitParents": ["d070e06845f28b2f4840c09f425f32c13856e0d6"], "spoonStatsSkippedReason": "", "commitHash": "f0cb2e11fea11c36ecab924f5a3314c11a42154a", "authoredDateTime": "2018-05-10 11:49:42", "commitGHEventType": "closed", "commitGitStats": [{"insertions": 1, "deletions": 0, "lines": 1, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java"}, {"insertions": 28, "deletions": 8, "lines": 36, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java"}, {"insertions": 18, "deletions": 18, "lines": 36, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java"}, {"insertions": 19, "deletions": 11, "lines": 30, "filePath": "grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java"}, {"insertions": 32, "deletions": 88, "lines": 120, "filePath": "core/src/main/java/com/linecorp/armeria/internal/metric/RequestMetricSupport.java"}, {"insertions": 15, "deletions": 6, "lines": 21, "filePath": "core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java"}, {"insertions": 37, "deletions": 18, "lines": 55, "filePath": "core/src/test/java/com/linecorp/armeria/internal/metric/RequestMetricSupportTest.java"}], "commitDateTime": "2018-05-10 11:49:42", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpRequestSubscriber.fail(java.lang.Throwable)"}], "spoonFilePath": "HttpRequestSubscriber.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.onRequest(com.linecorp.armeria.common.logging.RequestLog,com.linecorp.armeria.common.metric.MeterIdPrefixFunction)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.active()"}, {"UPD": 3, "TOT": 8, "MOV": 1, "INS": 1, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.setup(com.linecorp.armeria.common.RequestContext,com.linecorp.armeria.common.metric.MeterIdPrefixFunction)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.DefaultRequestMetrics.active()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.onResponse(com.linecorp.armeria.common.logging.RequestLog,com.linecorp.armeria.common.metric.MeterIdPrefixFunction,com.linecorp.armeria.internal.metric.RequestMetricSupport$ActiveRequestMetrics)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.requestMetrics(com.linecorp.armeria.common.logging.RequestLog)"}, {"UPD": 3, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.RequestMetricsPlaceholder"}, {"UPD": 0, "TOT": 5, "MOV": 3, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.DefaultRequestMetrics"}, {"UPD": 2, "TOT": 13, "MOV": 10, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.onRequestStart(com.linecorp.armeria.common.logging.RequestLog,com.linecorp.armeria.common.metric.MeterIdPrefixFunction)"}, {"UPD": 5, "TOT": 14, "MOV": 8, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.onRequestEnd(com.linecorp.armeria.common.logging.RequestLog)"}, {"UPD": 2, "TOT": 5, "MOV": 1, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.onResponse(com.linecorp.armeria.common.logging.RequestLog)"}], "spoonFilePath": "RequestMetricSupport.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 12, "MOV": 0, "INS": 12, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.grpc.GrpcMetricsIntegrationTest.normal()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.grpc.GrpcMetricsIntegrationTest.findClientMeter(java.lang.String,java.lang.String,io.micrometer.core.instrument.Statistic,java.lang.String[])"}, {"UPD": 1, "TOT": 13, "MOV": 2, "INS": 10, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.grpc.GrpcMetricsIntegrationTest.unframed()"}], "spoonFilePath": "GrpcMetricsIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupportTest.httpFailure()"}, {"UPD": 7, "TOT": 9, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupportTest.http()"}], "spoonFilePath": "RequestMetricSupportTest.java"}, {"spoonMethods": [], "spoonFilePath": "HttpServerHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.clientMetricNameWithStatusAndResult(java.lang.String,int,java.lang.String)"}, {"UPD": 2, "TOT": 6, "MOV": 2, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.assertSummary(java.util.Map,java.lang.String,int)"}, {"UPD": 0, "TOT": 12, "MOV": 4, "INS": 4, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.normal()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.serverMetricNameWithStatusAndResult(java.lang.String,int,java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.serverMetricNameWithStatus(java.lang.String,int)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.clientMetricNameWithStatus(java.lang.String,int)"}], "spoonFilePath": "DropwizardMetricsIntegrationTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 13, "MOV": 5, "INS": 5, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.metric.ofDefault(java.lang.String)"}], "spoonFilePath": "MeterIdPrefixFunction.java"}, {"spoonMethods": [{"UPD": 10, "TOT": 10, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.hello_first_endpoint()"}, {"UPD": 8, "TOT": 8, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.hello_second_endpoint()"}], "spoonFilePath": "PrometheusMetricsIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/961", "ttf": 111.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Make default MetricIdPrefixFunction  aware of response as well", "statsSkippedReason": "", "user": "huydx", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Original request is to adding status code tag to metrics. To do that we need to make MetricIdPrefixFunction aware of response as well.\r\nCurrent implement at MetricIdPrefixFunction#ofDefault is called only once at `RequestMetricSupport#onRequestStart`, therefore at the creation moment, there is no information about response yet.\r\n", "labels": ["breaking change", "new feature"]}, {"created": "2017-11-03 13:05:24", "commits": {"8e209745effa75d29e93224a6c0734a4a552da82": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2018-11-19 03:22:23", "filteredCommits": [], "commitsDetails": [{"nameRev": "8e209745effa75d29e93224a6c0734a4a552da82 tags/armeria-0.76.0~14", "commitMessage": "Revamp connection pool (#1441)\n\nRelated: #818\r\n\r\nMotivation:\r\n\r\n- Unlike HTTP/1 connections, HTTP/2 connections do not need to be\r\n  removed from the connection pool. We has slight loss of efficiency\r\n  because we currently remove an HTTP/2 connection from the pool and\r\n  add it back.\r\n- Current connection pool implementation has unnecessarily deep type\r\n  hierarchy and high level of indirection which weren't very useful.\r\n- There's circular package dependency between `armeria.client` and\r\n  `armeria.client.pool` which is undesirable.\r\n\r\nModifications:\r\n\r\n- Merged `HttpSessionChannelFactory`, `KeyedChannelPool` and\r\n  `DefaultKeyedChannelPool` into `HttpChannelPool`.\r\n  - Tuned the internal data structure of `DefaultKeyedChannelPool`.\r\n    - `PoolKey` does not include `SessionProtocol` anymore. We keep\r\n      separate `Map` for each `SessionProtocol`.\r\n  - Improved the connection pool implementation so that the connections\r\n    with the same session protocol are grouped together even if they\r\n    were created from different URI schemes. For example, both `h2c://`\r\n    and `http://` can create `h2c` connections, but their connections\r\n    were treated differently, but not anymore.\r\n  - Removed unnecessary synchronization since all code in\r\n    `HttpChannelPool` should be run in an event loop.\r\n- Replaced `KeyedChannelPoolHandler` and its related classes with\r\n  `ConnectionPoolListener` et al.\r\n  - We do not notify the listeners about acquisition and release because\r\n    it has no meaning for HTTP/2 and it is more meaningful to retrieve\r\n    such information from `RequestLog`. Let me know if you have a\r\n    suggestions for more listener methods.\r\n\r\nResult:\r\n\r\n- Fixes #818\r\n- Connection pool listener API has a breaking change.", "commitParents": ["7798b0ceaee449005660f7f7b1a8e081ac04051a"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "8e209745effa75d29e93224a6c0734a4a552da82", "authoredDateTime": "2018-11-19 12:22:22", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 0, "deletions": 133, "lines": 133, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSessionChannelFactory.java"}, {"insertions": 0, "deletions": 69, "lines": 69, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/KeyedChannelPool.java"}, {"insertions": 36, "deletions": 45, "lines": 81, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java"}, {"insertions": 63, "deletions": 0, "lines": 63, "filePath": "core/src/main/java/com/linecorp/armeria/client/ConnectionPoolListenerWrapper.java"}, {"insertions": 89, "deletions": 0, "lines": 89, "filePath": "core/src/main/java/com/linecorp/armeria/client/logging/ConnectionPoolLoggingListener.java"}, {"insertions": 10, "deletions": 14, "lines": 24, "filePath": "thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java"}, {"insertions": 51, "deletions": 0, "lines": 51, "filePath": "core/src/main/java/com/linecorp/armeria/client/ConnectionPoolListener.java"}, {"insertions": 603, "deletions": 0, "lines": 603, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java"}, {"insertions": 0, "deletions": 33, "lines": 33, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/KeyedPool.java"}, {"insertions": 0, "deletions": 75, "lines": 75, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/SafeKeyedChannelPoolHandler.java"}, {"insertions": 0, "deletions": 47, "lines": 47, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/KeyedChannelPoolHandlerAdapter.java"}, {"insertions": 42, "deletions": 0, "lines": 42, "filePath": "core/src/main/java/com/linecorp/armeria/client/PooledChannel.java"}, {"insertions": 0, "deletions": 179, "lines": 179, "filePath": "core/src/main/java/com/linecorp/armeria/client/logging/KeyedChannelPoolLoggingHandler.java"}, {"insertions": 14, "deletions": 71, "lines": 85, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java"}, {"insertions": 0, "deletions": 373, "lines": 373, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/DefaultKeyedChannelPool.java"}, {"insertions": 0, "deletions": 109, "lines": 109, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/PoolKey.java"}, {"insertions": 5, "deletions": 7, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java"}, {"insertions": 0, "deletions": 33, "lines": 33, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/KeyedChannelPoolUtil.java"}, {"insertions": 0, "deletions": 66, "lines": 66, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/KeyedChannelPoolHandlerWrapper.java"}, {"insertions": 48, "deletions": 0, "lines": 48, "filePath": "core/src/main/java/com/linecorp/armeria/client/ConnectionPoolListenerAdapter.java"}, {"insertions": 0, "deletions": 23, "lines": 23, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/package-info.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java"}, {"insertions": 0, "deletions": 54, "lines": 54, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/KeyedChannelPoolHandler.java"}, {"insertions": 0, "deletions": 7, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSession.java"}], "commitDateTime": "2018-11-19 12:22:22", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/818", "ttf": 380.0002777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "HTTP/2 connection pool can create extra connections unnecessarily", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When an HTTP/2 connection is acquired from a `KeyedChannelPool`, it is removed from the pool:\r\n\r\n- https://github.com/line/armeria/blob/armeria-0.54.1/core/src/main/java/com/linecorp/armeria/client/pool/DefaultKeyedChannelPool.java#L128\r\n\r\nand then added back after the initial request headers are written:\r\n\r\n- https://github.com/line/armeria/blob/armeria-0.54.1/core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java#L168\r\n\r\nWhen another client makes a request at the same time, a new HTTP/2 connection may be created unnecessarily, because the connection acquired for the first request disappears briefly from the pool.\r\n\r\nInstead of removing the connection completely from the pool's data structure, we could count the number of active requests for each connection and return the one with the least number of active requests, which is similar to what `EventLoopScheduler` does.\r\n\r\n----\r\n\r\nFor even more efficiency, we could merge `EventLoopScheduler` and `DefaultKeyedChannelPool` into one and defer the selection of `EventLoop` as late as possible. Then, we won't need to count per-`EventLoop` active requests at all to select the most idle `EventLoop`; we can just find the connection with the least active requests and that will get us the right `EventLoop`. \r\n\r\nTo make this happen, we need to make a breaking change on `RequestContext.eventLoop()`:\r\n\r\n- Replace `RequestContext.eventLoop()` with `RequestContext.eventLoopFuture()` which returns `CompletableFuture<EventLoop>` (Note that `ServiceRequestContext.eventLoop()` is retained.)\r\n\r\n.. because otherwise we must select the `EventLoop` when creating a `ClientRequestContext`, which is way earlier than `HttpClientDelegate.execute()`.\r\n\r\nRelated discussion: https://github.com/line/armeria/issues/816\r\n\r\n----\r\n\r\nThe question would be: Is the second change worth the breaking change? Wouldn't just the first change be enough, although having binary heap at two levels is not ideal? Do we use `ClientRequestContext.eventLoop()` that often? Thoughts?", "labels": ["breaking change", "improvement"]}, {"created": "2017-09-25 07:14:02", "commits": {"b0d918e1919cffccc788844f23f8a4e5c9342778": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-10-27 06:45:16", "filteredCommits": [], "commitsDetails": [{"nameRev": "b0d918e1919cffccc788844f23f8a4e5c9342778 tags/armeria-0.55.0~40", "commitMessage": "Make EndpointSelector.select() aware of current request (#797)\n\nFixes #766 \r\n\r\nSome load-balancing mechanism uses a property of the current request as its input, e.g. the current user's ID and the current request's certain parameter. However, it's not possible to implement such a mechanism with our endpoint API at the moment because `EndpointSelector.select()` does not accept any parameters. I propose to add `ClientRequestContext` to the parameter list of:\r\n\r\n- `EndpointSelector.select()`\r\n- `EndpointGroupRegistry.selectNode()`\r\n- `Endpoint.resolve()`\r\n\r\nso that a user can inject some information which could be used for load-balancing into `ClientRequestContext` attribute map.", "commitParents": ["f400962dc2a9485819c02484d7bade63636de1b0"], "spoonStatsSkippedReason": "", "commitHash": "b0d918e1919cffccc788844f23f8a4e5c9342778", "authoredDateTime": "2017-10-27 15:45:15", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 2, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointSelector.java"}, {"insertions": 6, "deletions": 4, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/client/Endpoint.java"}, {"insertions": 83, "deletions": 72, "lines": 155, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategyTest.java"}, {"insertions": 3, "deletions": 1, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategy.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java"}, {"insertions": 21, "deletions": 6, "lines": 27, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategyTest.java"}, {"insertions": 4, "deletions": 3, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroupRegistry.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategy.java"}], "commitDateTime": "2017-10-27 15:45:15", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.Endpoint.resolve(com.linecorp.armeria.client.ClientRequestContext)"}], "spoonFilePath": "Endpoint.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.WeightedRoundRobinStrategyTest"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.WeightedRoundRobinStrategyTest.select()"}, {"UPD": 0, "TOT": 56, "MOV": 0, "INS": 56, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.WeightedRoundRobinStrategyTest.testWeightedRoundRobinSelect()"}, {"UPD": 0, "TOT": 13, "MOV": 6, "INS": 7, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.WeightedRoundRobinStrategyTest.selectFromDynamicEndpointGroup()"}, {"UPD": 0, "TOT": 6, "MOV": 0, "INS": 6, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.WeightedRoundRobinStrategyTest.testRoundRobinSelect()"}], "spoonFilePath": "WeightedRoundRobinStrategyTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientDelegate.execute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "HttpClientDelegate.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.RoundRobinStrategyTest"}, {"UPD": 0, "TOT": 8, "MOV": 4, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.RoundRobinStrategyTest.select_empty()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.RoundRobinStrategyTest.select()"}], "spoonFilePath": "RoundRobinStrategyTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.RoundRobinStrategy.RoundRobinSelector.select(com.linecorp.armeria.client.ClientRequestContext)"}], "spoonFilePath": "RoundRobinStrategy.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.WeightedRoundRobinStrategy.WeightedRoundRobinSelector.select(com.linecorp.armeria.client.ClientRequestContext)"}], "spoonFilePath": "WeightedRoundRobinStrategy.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.select(com.linecorp.armeria.client.ClientRequestContext)"}], "spoonFilePath": "EndpointSelector.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.EndpointGroupRegistry.selectNode(com.linecorp.armeria.client.ClientRequestContext,java.lang.String)"}], "spoonFilePath": "EndpointGroupRegistry.java"}]}], "url": "https://github.com/line/armeria/issues/766", "ttf": 31.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Make EndpointSelector.select() aware of current request", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Some load-balancing mechanism uses a property of the current request as its input, e.g. the current user's ID and the current request's certain parameter. However, it's not possible to implement such a mechanism with our endpoint API at the moment because `EndpointSelector.select()` does not accept any parameters. I propose to add `ClientRequestContext` to the parameter list of:\r\n\r\n- `EndpointSelector.select()`\r\n- `EndpointGroupRegistry.selectNode()`\r\n- `Endpoint.resolve()`\r\n\r\nso that a user can inject some information which could be used for load-balancing into `ClientRequestContext` attribute map.", "labels": ["breaking change", "new feature"]}, {"created": "2017-08-30 08:41:25", "user": "trustin", "body": "e.g.\r\n\r\n```java\r\n@Get(\"/users/{userId}\")\r\npublic HttpResponse getUser(@Param(\"userId\") Optional<String> userId) {\r\n    ....\r\n}\r\n```\r\n\r\n... which would let a user choose to use our `@Optional` annotation or JDK's `Optional`.", "closed": "2017-10-17 02:00:52", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/738", "ttf": 47.000277777777775, "commits": {}, "labels": ["breaking change", "new feature"], "title": "Support the parameters whose type is `Optional` for annotated services"}, {"created": "2017-07-28 05:36:08", "user": "imasahiro", "body": "A user want to use Armeria on Netty 4.0 based system (e.g. Apache Flink uses Netty 4.0) but because Armeria uses methods that is newly added in Netty 4.1, it causes NoSuchMethodException at runtime.\r\n\r\nTo solve this, he/she can relocate Netty4.1 by himself/herself.\r\nBut I think, it would be nice if we provide an armeria library that shade Netty dependency.\r\n\r\n/cc @okdtsk\r\n", "closed": "2018-05-09 06:30:53", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/705", "ttf": 285.0002777777778, "commits": {}, "labels": ["breaking change", "will not fix"], "title": "Shade Netty to simplify dependency conflicts against other systems"}, {"created": "2020-06-26 13:13:18", "commits": {"aca35ec33424de5ea4fc985dead36508a56d1fc7": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "closed": "2020-06-30 01:33:30", "filteredCommits": [], "commitsDetails": [{"nameRev": "", "commitMessage": "", "commitParents": [], "spoonStatsSkippedReason": "", "commitHash": "aca35ec33424de5ea4fc985dead36508a56d1fc7", "authoredDateTime": "", "commitGHEventType": "referenced", "commitGitStats": [], "commitDateTime": "", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2846", "ttf": 3.000277777777778, "title": "ServiceRequestContext.routingContext().hostname() yields different result depending on h2 vs http1.1", "statsSkippedReason": "", "user": "tobias-", "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 1, "multipleIssueFixes": 0, "alsoFixesPhrase": 0}, "body": "I'm having weird behaviour with ServiceRequestContext.routingContext().hostname(). When *passed through HAProxy* gives me\r\na) for http1.1 the hostname(i.e. what running `hostname` in a shell would give you)\r\nb) for h2 what you put in the Host: header\r\n\r\n`a` is never exhibited when curling Armeria directly without HAproxy. (using `curl --resolve yxvanus.staging.example.com:443:x.x.x.x`)\r\n\r\nThere is no difference when upgrading to 0.98.6 -> 0.99.7.\r\n\r\nThe actual discussion:\r\nhttps://app.slack.com/client/T1NH00FK9/C1NGPBUH2/thread/C1NGPBUH2-1593150821.017200\r\n\r\ncurl https://yxvanus.staging.example.com\r\ncurl https://yxvanus.staging.example.com --http1.1\r\n\r\nThe actual requests as seen from the haproxy outside of it:\r\n```\r\nhaproxy: 00001394:web.accept(0008)=000d from [66.249.93.192:54202] ALPN=<none>\r\nhaproxy: 00001394:web.clireq[000d:ffffffff]: GET /?cachebuster=1560797474 HTTP/1.1\r\nhaproxy: 00001394:web.clihdr[000d:ffffffff]: host: yxvanus.staging.example.com\r\nhaproxy: 00001394:web.clihdr[000d:ffffffff]: accept: */*\r\nhaproxy: 00001394:web.clihdr[000d:ffffffff]: user-agent: Mozilla/5.0 (compatible; Google-Site-Verification/1.0)\r\nhaproxy: 00001394:web.clihdr[000d:ffffffff]: accept-encoding: gzip,deflate,br\r\nhaproxy: 00001394:armeria.srvrep[000d:000f]: HTTP/2.0 303\r\nhaproxy: 00001394:armeria.srvhdr[000d:000f]: location: https://www.example.com\r\nhaproxy: 00001394:armeria.srvhdr[000d:000f]: content-length: 0\r\nhaproxy: 00001394:armeria.srvhdr[000d:000f]: strict-transport-security: max-age=31536000; includeSubDomains; preload\r\nhaproxy: 00001394:armeria.srvhdr[000d:000f]: x-rest-version: 0.0.1-YN-1-SNAPSHOT\r\nhaproxy: 00001394:armeria.srvhdr[000d:000f]: x-robots-tag: noindex\r\nhaproxy: 00001394:armeria.srvhdr[000d:000f]: server: Armeria/0.98.6\r\nhaproxy: 00001394:armeria.srvhdr[000d:000f]: date: Fri, 26 Jun 2020 01:41:20 GMT\r\nhaproxy: 00001394:armeria.srvcls[000d:000f]\r\nhaproxy: 00001394:armeria.clicls[000d:000f]\r\nhaproxy: 00001394:armeria.closed[000d:000f]\r\n```\r\n\r\n```\r\nhaproxy: 00003e0a:web.clireq[000e:ffffffff]: GET https://yxvanus.staging.example.com/ HTTP/2.0\r\nhaproxy: 00003e0a:web.clihdr[000e:ffffffff]: user-agent: curl/7.68.0\r\nhaproxy: 00003e0a:web.clihdr[000e:ffffffff]: accept: */*\r\nhaproxy: 00003e0a:web.clihdr[000e:ffffffff]: host: yxvanus.staging.example.com\r\nhaproxy: 00003e0c:web.closed[0012:ffffffff]\r\nhaproxy: 00003e0a:armeria.srvrep[000e:0010]: HTTP/2.0 200 \r\nhaproxy: 00003e0a:armeria.srvhdr[000e:0010]: content-type: text/html; charset=utf-8\r\nhaproxy: 00003e0a:armeria.srvhdr[000e:0010]: content-length: 5092\r\nhaproxy: 00003e0a:armeria.srvhdr[000e:0010]: strict-transport-security: max-age=31536000; includeSubDomains; preload\r\nhaproxy: 00003e0a:armeria.srvhdr[000e:0010]: x-rest-version: 0.0.1-YN-1-SNAPSHOT\r\nhaproxy: 00003e0a:armeria.srvhdr[000e:0010]: x-robots-tag: noindex\r\nhaproxy: 00003e0a:armeria.srvhdr[000e:0010]: server: Armeria/0.98.6\r\nhaproxy: 00003e0a:armeria.srvhdr[000e:0010]: date: Fri, 26 Jun 2020 05:55:57 GMT\r\nhaproxy: 00003e0a:armeria.srvcls[000e:0010]\r\nhaproxy: 00003e0a:armeria.clicls[000e:0010]\r\nhaproxy: 00003e0a:armeria.closed[000e:0010]\r\n```\r\n\r\n", "labels": ["defect"]}, {"created": "2020-06-23 10:04:28", "commits": {"344798358bad7e9adfb4e58c41782d605b686dd5": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "closed": "2020-06-26 09:24:59", "filteredCommits": [], "commitsDetails": [{"nameRev": "", "commitMessage": "", "commitParents": [], "spoonStatsSkippedReason": "", "commitHash": "344798358bad7e9adfb4e58c41782d605b686dd5", "authoredDateTime": "", "commitGHEventType": "referenced", "commitGitStats": [], "commitDateTime": "", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2830", "ttf": 2.000277777777778, "title": "'You tried to set the content preview twice' warning on a client with one preview decorator", "statsSkippedReason": "", "user": "trustin", "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 1, "multipleIssueFixes": 0, "alsoFixesPhrase": 0}, "body": "We got a report from an internal user:\r\n\r\n```\r\nYou tried to set the content preview twice: ... \r\nDid you apply content previewing decorator more than once?\r\n```\r\n\r\nNot enough information at the moment to reproduce the problem, but just for the record. \ud83d\ude04 \r\n\r\nIt seems like the client is decorated with `RetryingClient`, too.\r\n", "labels": ["defect", "needs info"]}, {"created": "2020-06-15 11:31:14", "user": "ikhoon", "body": "Some subscribers call `Subscrition.cancel()` when receiving `onComplete` signal.\r\nThis violates https://github.com/reactive-streams/reactive-streams-jvm#2.3\r\n> Subscriber.onComplete() and Subscriber.onError(Throwable t) MUST NOT call any methods on the Subscription or the Publisher.\r\n\r\nThis issue causes a race condition like #2797", "closed": "2020-06-19 09:34:02", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2798", "ttf": 3.000277777777778, "commits": {}, "labels": ["defect"], "title": "Respect the specification of Reactive Streams 2.3 "}, {"created": "2020-06-03 06:06:03", "commits": {"2255dfa7c8f36d0a8861f763ed00361d4f4a153a": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2020-06-16 09:30:13", "filteredCommits": [], "commitsDetails": [{"nameRev": "2255dfa7c8f36d0a8861f763ed00361d4f4a153a tags/armeria-0.99.7~25", "commitMessage": "Provide type parameter information to `RequestConverterFunction` (#2779)\n\nMotivation:\r\n\r\nSome generic converters such as `JacksonRequestConverterFunction` need\r\nto get the complete type parameter information from annotated service\r\nmethods, so that the type of elements of a container type is known.\r\n\r\nFor example, let's say a user posts a JSON array:\r\n\r\n    [1, 2, 3]\r\n\r\nto an annotated service method:\r\n\r\n    @Post(\"/post\")\r\n    public String post(List<Long> values) {\r\n        return Joiner.on(\", \").join(values);\r\n    }\r\n\r\nWithout proper type parameter information, `JacksonRequestConverterFunction`\r\ncannot convert the elements into `Long`.\r\n\r\nModifications:\r\n\r\n- (Breaking) Changed the signature of `RequestConverterFunction.convertRequest()`\r\n  so that a converter is given with `ParameterizedType`.\r\n- (Breaking) `Optional` is now always handled automatically.\r\n  - If you wrote a `RequestConverterFunction` that converts to an `Optional`, it will not work anymore. Return `null` instead.\r\n- (Breaking) Without `@Nullable`, `null` will never be injected into a request object,\r\n  which was possible when a `RequestConverterFunction` returns `null`.\r\n  - Add `@Nullable` if your converter returns `null`.\r\n- Made sure `ParameterizedType` is passed to the request converter when\r\n  necessary.\r\n- Micellaneous:\r\n  - A value can now be converted to `AsciiString`, `CharSequence` or `Object`.\r\n  - `JacksonRequestConverterFunction` now knows how to convert to\r\n    `TreeNode` and `JsonNode`.\r\n\r\nResult:\r\n\r\n- Closes #2769\r\n- `JacksonRequestConverterFunction` now considers type parameters during\r\n  conversion.\r\n- A user can write more complex request object converter.\r\n- Can inject `CharSequence`, `AsciiString` and `Object` now.\r\n- (Breaking) Changed the signature of `RequestConverterFunction.convertRequest()`\r\n  so that a converter is given with `ParameterizedType`.\r\n- (Breaking) `Optional` is now always handled automatically.\r\n  - If you wrote a `RequestConverterFunction` that converts to an `Optional`, it will not work anymore. Return `null` instead.\r\n- (Breaking) Without `@Nullable`, `null` will never be injected into a request object,\r\n  which was possible when a `RequestConverterFunction` returns `null`.\r\n  - Add `@Nullable` if your converter returns `null`.", "commitParents": ["b44f46cecf0d628b5d3da547b9c071e174fb1cbe"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "2255dfa7c8f36d0a8861f763ed00361d4f4a153a", "authoredDateTime": "2020-06-16 18:30:12", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 228, "deletions": 142, "lines": 370, "filePath": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedValueResolver.java"}, {"insertions": 9, "deletions": 6, "lines": 15, "filePath": "examples/annotated-http-service/src/main/java/example/armeria/server/annotated/MessageConverterService.java"}, {"insertions": 66, "deletions": 10, "lines": 76, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunction.java"}, {"insertions": 27, "deletions": 20, "lines": 47, "filePath": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceBuilderTest.java"}, {"insertions": 8, "deletions": 2, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayRequestConverterFunction.java"}, {"insertions": 5, "deletions": 2, "lines": 7, "filePath": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceAnnotationAliasTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/server/annotation/ByteArrayRequestConverterFunctionTest.java"}, {"insertions": 6, "deletions": 47, "lines": 53, "filePath": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "site/src/pages/docs/server-annotated-service.mdx"}, {"insertions": 55, "deletions": 31, "lines": 86, "filePath": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceRequestConverterTest.java"}, {"insertions": 21, "deletions": 10, "lines": 31, "filePath": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceHandlersOrderTest.java"}, {"insertions": 67, "deletions": 4, "lines": 71, "filePath": "core/src/test/java/com/linecorp/armeria/server/annotation/JacksonRequestConverterFunctionTest.java"}, {"insertions": 11, "deletions": 1, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/RequestConverterFunction.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/server/annotation/StringRequestConverterFunctionTest.java"}, {"insertions": 146, "deletions": 0, "lines": 146, "filePath": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceGenericsTest.java"}, {"insertions": 7, "deletions": 6, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedBeanFactoryRegistry.java"}, {"insertions": 7, "deletions": 2, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/StringRequestConverterFunction.java"}], "commitDateTime": "2020-06-16 18:30:12", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2769", "ttf": 13.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`@RequestObject List<Long>` is injected with `List<Integer>`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "In the following annotated service method:\r\n\r\n```java\r\n@Post(\"/\")\r\npublic String method(@RequestObject List<Long> values) {\r\n    for (Long v : values) {\r\n        // ClassCastException in runtime\r\n    }\r\n}\r\n```\r\n\r\n`values` is injected with a `List` of `Integer`s, which is not correct, causing `ClassCastException` in runtime. As usual, the request to reproduce is a POST request whose content is a JSON array of numbers, e.g. `[1, 2, 3]`", "labels": ["defect"]}, {"created": "2020-06-03 05:13:20", "commits": {"b792aecdc642b9fa6b0a54b25befb9c911b587c7": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-06-05 14:08:11", "filteredCommits": [], "commitsDetails": [{"nameRev": "b792aecdc642b9fa6b0a54b25befb9c911b587c7 tags/armeria-0.99.7~36", "commitMessage": "Validate a boolean parameter strictly in annotated services (#2774)\n\nMotivation:\r\n\r\nGiven the following annotated service:\r\n\r\n    public class MyService {\r\n        @Get(\"/get\")\r\n        public String get(@Param boolean value) {\r\n            return String.valueOf(value);\r\n        }\r\n    }\r\n\r\n`GET /get?value=` or `GET /get?value=badvalue` injects `false` into\r\nthe parameter `value`, which is unclear to many users.\r\n\r\nModifications:\r\n\r\n- Use a custom function for parsing a boolean parameter instead of\r\n  `Boolean.valueOf()`.\r\n\r\nResult:\r\n\r\n- Less surprising behavior\r\n  - `true`, `false`, `0` and `1` are supported.\r\n- Fixes #2767", "commitParents": ["228a8ca65b8ea4f27d8019a77661b4aaed408d58"], "spoonStatsSkippedReason": "", "commitHash": "b792aecdc642b9fa6b0a54b25befb9c911b587c7", "authoredDateTime": "2020-06-05 23:08:10", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 0, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTest.java"}, {"insertions": 19, "deletions": 2, "lines": 21, "filePath": "core/src/main/java/com/linecorp/armeria/internal/server/annotation/AnnotatedServiceTypeUtil.java"}], "commitDateTime": "2020-06-05 23:08:10", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 3, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.server.annotation.AnnotatedServiceTypeUtil"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.server.annotation.AnnotatedServiceTypeUtil.parseBoolean(java.lang.String)"}], "spoonFilePath": "AnnotatedServiceTypeUtil.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.server.annotation.AnnotatedServiceTest.testAnnotatedService()"}], "spoonFilePath": "AnnotatedServiceTest.java"}]}], "url": "https://github.com/line/armeria/issues/2767", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "An empty string (or an invalid value) should not be injected as `false` in annotated services", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Currently, the query string `?foo=` will inject false in the following service method:\r\n\r\n```java\r\n@Get(\"/\")\r\npublic String serve(@Param Optional<Boolean> foo) {\r\n    return \"foo: \" + foo;\r\n}\r\n```\r\n\r\nWe should probably inject `Optional.empty()` when the query parameter is not a valid boolean value.\r\n\r\n/cc @KarboniteKream ", "labels": ["defect"]}, {"created": "2020-06-02 01:27:32", "commits": {"be846a601b78e5f3c422cf199faca492769d62e6": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-06-19 12:47:18", "filteredCommits": [], "commitsDetails": [{"nameRev": "be846a601b78e5f3c422cf199faca492769d62e6 tags/armeria-0.99.7~6", "commitMessage": "Fix a bug where `PATCH` method could not use request body in DocService (#2819)\n\nMotivation:\r\n\r\n`PATCH` method is allowed to use request body in DocService. See #2756\r\nWhile checking the spec, `DELETE` may have request body.\r\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/DELETE\r\n\r\nModifications:\r\n\r\n- Add `PATCH` and `DELETE` to request body allowed methods.\r\n\r\nResult:\r\n\r\nYou can now use request body with `PATCH` and `DELETE` in Debug page.\r\nFixes #2756", "commitParents": ["a51a48277b58bc86c50b244945a2b2f0568d9577"], "spoonStatsSkippedReason": "", "commitHash": "be846a601b78e5f3c422cf199faca492769d62e6", "authoredDateTime": "2020-06-19 21:47:17", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 8, "deletions": 8, "lines": 16, "filePath": "core/src/test/java/com/linecorp/armeria/internal/server/annotation/AnnotatedDocServiceTest.java"}, {"insertions": 8, "deletions": 1, "lines": 9, "filePath": "docs-client/src/containers/MethodPage/index.tsx"}], "commitDateTime": "2020-06-19 21:47:17", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.server.annotation.AnnotatedDocServiceTest.jsonSpecification()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.server.annotation.AnnotatedDocServiceTest.excludeAllServices()"}, {"UPD": 2, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.internal.server.annotation.AnnotatedDocServiceTest"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.server.annotation.AnnotatedDocServiceTest.1"}], "spoonFilePath": "AnnotatedDocServiceTest.java"}]}], "url": "https://github.com/line/armeria/issues/2756", "ttf": 17.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "I have a question about DocService.", "statsSkippedReason": "", "user": "sokangmin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I have a question about DocService.\r\nWhy doesn't @PATCH have a requestbody?\r\n\r\n![patch](https://user-images.githubusercontent.com/6380365/83469809-9e4e6980-a4bb-11ea-85f8-e19074a5540d.jpg)\r\n", "labels": ["defect", "question"]}, {"created": "2020-05-15 08:30:01", "commits": {"c3200f6cd1cec97ede769f91f5e1b2e4a5fb39d9": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-05-21 04:33:31", "filteredCommits": [], "commitsDetails": [{"nameRev": "c3200f6cd1cec97ede769f91f5e1b2e4a5fb39d9 tags/armeria-0.99.6~13", "commitMessage": "Fix a bug where a WebClient created without URI does not respect auth\u2026 (#2730)\n\n\u2026ority header\r\n\r\nMotivation:\r\n\r\nA WebClient created without a specific endpoint does not respect the authority header.\r\nSee #2715\r\n\r\nModifications:\r\n\r\n- Use HttpRequest.uri() when a request headers contains both the scheme\r\nand authority header.\r\n\r\nResult:\r\n\r\nYou can set a target endpoint using the authority and scheme header when sending a request with a WebClient.\r\nFixes #2715", "commitParents": ["be4334d6d7c7c19524ae08e26d8ffb08cda03228"], "spoonStatsSkippedReason": "", "commitHash": "c3200f6cd1cec97ede769f91f5e1b2e4a5fb39d9", "authoredDateTime": "2020-05-21 13:33:31", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 40, "deletions": 0, "lines": 40, "filePath": "core/src/test/java/com/linecorp/armeria/client/WebClientBuilderTest.java"}, {"insertions": 5, "deletions": 1, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java"}], "commitDateTime": "2020-05-21 13:33:31", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.DefaultWebClient.execute(com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "DefaultWebClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.WebClientBuilderTest.authorityHeader()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.WebClientBuilderTest"}], "spoonFilePath": "WebClientBuilderTest.java"}]}], "url": "https://github.com/line/armeria/issues/2715", "ttf": 5.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Client requests not using RequestHeaders.authority", "statsSkippedReason": "", "user": "jrhee17", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Not sure if this is intentional, but it was definitely unexpected\r\n\r\nMinimal reproducer\r\n\r\n```\r\nfinal RequestHeadersBuilder requestHeadersBuilder =\r\n                RequestHeaders.builder()\r\n                              .authority(\"localhost:8080\")\r\n                              .scheme(\"h2c\")\r\n                              .add(\"param1\", \"val1\")\r\n                              .path(\"/path1\");\r\n\r\n        final AggregatedHttpRequest request = AggregatedHttpRequest.of(\r\n                requestHeadersBuilder.method(HttpMethod.GET).build());\r\n        final AggregatedHttpResponse response = WebClient.of().execute(request).aggregate().join();\r\n```\r\n\r\nLogs\r\n```\r\nCaused by: java.lang.IllegalArgumentException: no authority: /path1\r\n\tat com.linecorp.armeria.client.DefaultWebClient.execute(DefaultWebClient.java:70)\r\n\tat com.linecorp.armeria.client.DefaultWebClient.execute(DefaultWebClient.java:101)\r\n\t... 64 more\r\n```", "labels": ["defect"]}, {"created": "2020-05-11 10:11:49", "commits": {"70cc16b9794c1adef07710847b11d1f3bdb0a329": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-05-14 04:39:12", "filteredCommits": [], "commitsDetails": [{"nameRev": "70cc16b9794c1adef07710847b11d1f3bdb0a329 tags/armeria-0.99.5~9", "commitMessage": "Handle h1c retry failure correctly for proxy requests (#2705)\n\nRelated to #2698 \r\n\r\n**Motivation**\r\n\r\nIf `needsRetryWithH1C=true` with `ProxyConfig`, the retry attempts to eventually connect to the `proxyAddress` instead of `destinationAddress`. Fix this\r\n\r\n**Modifications**\r\n- Remember `proxyDestinationAddress` from a successful`ProxyConnectionEvent`.\r\n- Use `proxyDestinationAddress` for `retryWithH1C`\r\n- Add tests for http/2 upgrade, preface request retries", "commitParents": ["461ef6138ac2545c72e31b71d1d89bcb3aa092c6"], "spoonStatsSkippedReason": "", "commitHash": "70cc16b9794c1adef07710847b11d1f3bdb0a329", "authoredDateTime": "2020-05-14 13:37:23", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 5, "deletions": 0, "lines": 5, "filePath": "testing-internal/src/main/java/com/linecorp/armeria/internal/testing/NettyServerExtension.java"}, {"insertions": 134, "deletions": 16, "lines": 150, "filePath": "core/src/test/java/com/linecorp/armeria/client/proxy/ProxyClientIntegrationTest.java"}, {"insertions": 14, "deletions": 3, "lines": 17, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java"}], "commitDateTime": "2020-05-14 13:37:23", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 6, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testProxyWithUserName()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.HttpProxyServerHandler.channelRead0(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.FullHttpRequest)"}, {"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testSocks5BasicCase()"}, {"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testSocks4BasicCase()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.IntermediaryProxyServerHandler.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"}, {"UPD": 0, "TOT": 6, "MOV": 0, "INS": 6, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testHttpProxyPrefaceFailure()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testProxyWithH2C()"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testProxy_connectionTimeoutFailure_throwsException()"}, {"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testDisabledProxyBasicCase()"}, {"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testHttpsProxyBasicCase()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.2.configure(io.netty.channel.Channel)"}, {"UPD": 1, "TOT": 7, "MOV": 1, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testProxy_protocolUpgrade_notSharableExceptionNotThrown()"}, {"UPD": 5, "TOT": 15, "MOV": 9, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testProxy_responseFailure_throwsException()"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.beforeEach()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testHttpProxyUpgradeRequestFailure()"}, {"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testHttpProxyBasicCase()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.proxy.ProxyClientIntegrationTest.testProxy_connectionFailure_throwsException()"}], "spoonFilePath": "ProxyClientIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.testing.NettyServerExtension.endpoint()"}], "spoonFilePath": "NettyServerExtension.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 6, "MOV": 4, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler.channelInactive(io.netty.channel.ChannelHandlerContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"}], "spoonFilePath": "HttpSessionHandler.java"}]}], "url": "https://github.com/line/armeria/issues/2698", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Do not attempt to upgrade to HTTP/2 before sending a `CONNECT` request to an HTTP proxy server", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Reported by @imasahiro\r\n\r\nWhen a user attempts to connect to an endpoint via an HTTP proxy server, Armeria currently tries to upgrade to HTTP/2 before sending a `CONNECT` request. After realizing that the upgrade attempt failed, it forgets to send a `CONNECT` request again.\r\n\r\nWe do not really need to attempt to upgrade to HTTP/2 when connecting to an endpoint via an HTTP proxy server, because it's not efficient at all and we need to attempt to upgrade again after a `CONNECT` request succeeds.\r\n\r\nA workaround is to use `h1c` or `h1` instead of `http` or `https`.", "labels": ["defect"]}, {"created": "2020-05-06 10:30:53", "commits": {"177c834db1f0c2b359c6750366b3082b2e1311c4": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2020-06-26 07:21:40", "filteredCommits": [], "commitsDetails": [{"nameRev": "177c834db1f0c2b359c6750366b3082b2e1311c4 master~2", "commitMessage": "Add a documentation link of example requests for DebugPage (#2828)\n\nMotivation:\r\n\r\nSome users might not know that they can specify example requests or headers for DebugPage.\r\nRelated: #2690\r\n\r\nModifications:\r\n\r\n- Add a tip to the top of Debug console\r\n\r\nResult:\r\nMore user friendly.", "commitParents": ["618875b41546ac7f0db135c35750c856178f3e4e"], "spoonStatsSkippedReason": "", "commitHash": "177c834db1f0c2b359c6750366b3082b2e1311c4", "authoredDateTime": "2020-06-24 17:54:34", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 12, "deletions": 0, "lines": 12, "filePath": "docs-client/src/containers/MethodPage/DebugPage.tsx"}, {"insertions": 12, "deletions": 0, "lines": 12, "filePath": "docs-client/package-lock.json"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "docs-client/package.json"}], "commitDateTime": "2020-06-24 17:54:34", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2690", "ttf": 50.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Some default gRPC request examples do not have default fields set.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "For example, `CreateGreetingRequest` is serialized into an empty JSON object when `GrpcDocServicePlugin` builds its default example request:\r\n\r\n```protobuf\r\nmessage CreateGreetingRequest {\r\n    FullName full_name = 1;\r\n}\r\nmessage FullName {\r\n    string first_name = 1;\r\n    string last_name = 2;\r\n}\r\n```\r\n\r\nA workaround is to specify an example object explicitly when building a `DocService`, as documented in https://line.github.io/armeria/server-docservice.html#example-requests-and-headers\r\n\r\n/cc @gary-lo", "labels": ["defect"]}, {"created": "2020-05-05 09:36:19", "commits": {"29bb9bb359b8da4d9c5de58015a2b5e886dccc6d": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-05-13 06:58:53", "filteredCommits": [], "commitsDetails": [{"nameRev": "29bb9bb359b8da4d9c5de58015a2b5e886dccc6d tags/armeria-0.99.5~19", "commitMessage": "Fix for issue #2688 (armeria-jetty: ArmeriaConnector - NPE when DEBUG logging enabled) (#2691)\n\nPrevented NPE in ArmeriaConnector during Jetty server startup with DEBUG logging enabled. Added a check for \"armeriaServer\" instance being NULL and return some mockup values.\r\n", "commitParents": ["eab4c3e34bab73ef6b42d1b23277279db507410a"], "spoonStatsSkippedReason": "", "commitHash": "29bb9bb359b8da4d9c5de58015a2b5e886dccc6d", "authoredDateTime": "2020-05-12 08:19:00", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 134, "deletions": 0, "lines": 134, "filePath": "jetty/src/test/java/com/linecorp/armeria/server/jetty/JettyServiceStartupTest.java"}, {"insertions": 17, "deletions": 1, "lines": 18, "filePath": "jetty/src/main/java/com/linecorp/armeria/server/jetty/ArmeriaConnector.java"}], "commitDateTime": "2020-05-12 15:19:00", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.jetty.JettyServiceStartupTest"}], "spoonFilePath": "JettyServiceStartupTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.jetty.ArmeriaConnector.getLocalPort()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.jetty.ArmeriaConnector.getHost()"}], "spoonFilePath": "ArmeriaConnector.java"}]}], "url": "https://github.com/line/armeria/issues/2688", "ttf": 7.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "armeria-jetty: ArmeriaConnector - NPE when DEBUG logging enabled", "statsSkippedReason": "", "user": "max904-github", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "### Problem:\r\nTo reproduce, simply enable `DEBUG` logging via Logback and run the unit tests for armeria-jetty project...\r\n\r\nYou'll see numerous exceptions like below:\r\n```\r\nSLF4J: Failed toString() invocation on an object of type [com.linecorp.armeria.server.jetty.ArmeriaConnector]\r\nReported exception:\r\njava.lang.NullPointerException\r\n\tat com.linecorp.armeria.server.jetty.ArmeriaConnector.getHost(ArmeriaConnector.java:64)\r\n\tat org.eclipse.jetty.server.AbstractNetworkConnector.toString(AbstractNetworkConnector.java:122)\r\n\tat org.slf4j.helpers.MessageFormatter.safeObjectAppend(MessageFormatter.java:277)\r\n\tat org.slf4j.helpers.MessageFormatter.deeplyAppendParameter(MessageFormatter.java:249)\r\n\tat org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:211)\r\n\tat org.slf4j.helpers.MessageFormatter.arrayFormat(MessageFormatter.java:161)\r\n\tat org.eclipse.jetty.util.log.JettyAwareLogger.log(JettyAwareLogger.java:624)\r\n\tat org.eclipse.jetty.util.log.JettyAwareLogger.debug(JettyAwareLogger.java:206)\r\n\tat org.eclipse.jetty.util.log.Slf4jLog.debug(Slf4jLog.java:95)\r\n\tat org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(ContainerLifeCycle.java:412)\r\n\tat org.eclipse.jetty.util.component.ContainerLifeCycle.addBean(ContainerLifeCycle.java:330)\r\n\tat org.eclipse.jetty.server.AbstractConnector.<init>(AbstractConnector.java:211)\r\n\tat org.eclipse.jetty.server.AbstractNetworkConnector.<init>(AbstractNetworkConnector.java:44)\r\n\tat org.eclipse.jetty.server.ServerConnector.<init>(ServerConnector.java:212)\r\n\tat org.eclipse.jetty.server.ServerConnector.<init>(ServerConnector.java:129)\r\n\tat com.linecorp.armeria.server.jetty.ArmeriaConnector.<init>(ArmeriaConnector.java:46)\r\n\tat com.linecorp.armeria.server.jetty.JettyService.start(JettyService.java:160)\r\n\tat com.linecorp.armeria.server.jetty.JettyService$Configurator.serverStarting(JettyService.java:463)\r\n\tat com.linecorp.armeria.server.Server$ServerStartStopSupport.notifyStarting(Server.java:630)\r\n\tat com.linecorp.armeria.server.Server$ServerStartStopSupport.notifyStarting(Server.java:377)\r\n\tat com.linecorp.armeria.common.util.StartStopSupport.notifyListeners(StartStopSupport.java:371)\r\n\tat com.linecorp.armeria.common.util.StartStopSupport.lambda$start0$3(StartStopSupport.java:184)\r\n\tat io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run(GlobalEventExecutor.java:243)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:830)\r\n\r\n```\r\n### Analysis:\r\n`ArmeriaConnector` extends Jetty's `ServerConnector`. Here is its simplified constructor definition (note that `armeriaServer` only assigned after `super` constructor called):\r\n```\r\n    ArmeriaConnector(Server server, com.linecorp.armeria.server.Server armeriaServer) {\r\n        super(server, -1, -1, new ArmeriaConnectionFactory());\r\n        this.armeriaServer = armeriaServer;\r\n        ...\r\n    }\r\n```\r\nWhile `getHost()`, `getPort()`, `getLocalPort()`, etc. methods overridden like following:\r\n```\r\n    @Override\r\n    public String getHost() {\r\n        return armeriaServer.defaultHostname();\r\n    }\r\n```\r\nThe problem occurs in `DEBUG` mode, where Jetty's `ServerConnector` internally logs its state during construction, which assumes invocation of `getHost()` and `getPort()` methods, which will cause NPE.\r\n### Possible solution:\r\n`ArmeriaConnector` methods like `getHost()` and `getPort()` could check `armeriaServer` state and avoid `NullPointerException` during components initialization.\r\n", "labels": ["defect"]}, {"created": "2020-04-15 13:10:34", "commits": {"7e1e3cbabf4714dd891a25deb762c57a615b0e07": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-04-16 11:35:16", "filteredCommits": [], "commitsDetails": [{"nameRev": "7e1e3cbabf4714dd891a25deb762c57a615b0e07 tags/armeria-0.99.4~2", "commitMessage": "Make DNS resolver handle timeout correctly when querying AAAA & A\u2026 (#2665)\n\n\u2026 records at same time\r\n\r\nIf one of the DNS query timeouts when resolver sends A/AAAA queries together, the resolver will have IllegalStateException internally and return DnsTimeoutException. The resolver should return resolved one instead of return error.\r\n\r\nModifications:\r\n* Return DNS timeout exception only when all the queries are not completed yet.\r\n* Make result follow the preferred order\r\n\r\nResult:\r\n* Fixes #2664 ", "commitParents": ["ad3ac182d12aaadfa4d1648fffe4ff4e47f7e8cc"], "spoonStatsSkippedReason": "", "commitHash": "7e1e3cbabf4714dd891a25deb762c57a615b0e07", "authoredDateTime": "2020-04-16 20:35:15", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 126, "deletions": 0, "lines": 126, "filePath": "core/src/test/java/com/linecorp/armeria/client/RefreshingAddressResolverTest.java"}, {"insertions": 24, "deletions": 10, "lines": 34, "filePath": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java"}], "commitDateTime": "2020-04-16 20:35:15", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverTest.returnPartialDnsQuestions()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverTest.DelayHandler"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverTest.AlwaysTimeoutHandler"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverTest.returnDnsQuestionsWhenAllQueryTimeout()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverTest.preferredOrderIpv4()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverTest.preferredOrderIpv6()"}], "spoonFilePath": "RefreshingAddressResolverTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 2, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.client.DefaultDnsNameResolver.configureTimeout(java.util.List,java.lang.String,io.netty.util.concurrent.Promise,java.util.List)"}, {"UPD": 2, "TOT": 5, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.client.DefaultDnsNameResolver.sendQueries(java.util.List,java.lang.String).1.operationComplete(io.netty.util.concurrent.Future)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.client.DefaultDnsNameResolver"}], "spoonFilePath": "DefaultDnsNameResolver.java"}]}], "url": "https://github.com/line/armeria/issues/2664", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "DNS resolver may throws IllegalStateException when client is not using IPv4 only", "statsSkippedReason": "", "user": "kojilin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When we have ipv4, ipv6 DNS query, \r\nIf DNS query timeout is shorter than retry failed of DNS query, the cancels mechanism of DefaultDnsNameResolver at https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java#L145 will set aggregatedPromise to failed. \r\nBut due to it also calls promises' cancel method. At https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java#L86 will enter with Future of CancelException and try to set aggregatedPromise again and throw IllegalStateException.", "labels": ["defect"]}, {"created": "2020-04-15 04:12:24", "commits": {"b1decb5d0d33122ab4e42a06a0230cbc2f79249c": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2020-05-06 06:52:03", "filteredCommits": [], "commitsDetails": [{"nameRev": "b1decb5d0d33122ab4e42a06a0230cbc2f79249c tags/armeria-0.99.5~26", "commitMessage": "Support Kotlin-gRPC client CoroutineStub (#2669)\n\nMotivation:\r\n\r\ngRPC for Kotlin is actively developed and\r\n[0.1.1](https://github.com/grpc/grpc-kotlin/releases/tag/v0.1.1) has been released last week.\r\n\r\nModifications:\r\n\r\n- Allow GrpcClientFactory creating client from CoroutineStub\r\n- Migrate Kotlin example to gRPC-Kotlin\r\n\r\nResult:\r\n\r\n- Partially fixes #2662\r\n- You can now run Armeria gRPC client with `gproto*` and gRPC-Kotlin CoroutinStub\r\n\r\nCo-authored-by: Gary Lo <gary.lo@airtasker.com>", "commitParents": ["be7786238f86250b4f8950ed90dd7319bbdffb84"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "b1decb5d0d33122ab4e42a06a0230cbc2f79249c", "authoredDateTime": "2020-05-06 15:52:01", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 1, "lines": 4, "filePath": "dependencies.yml"}, {"insertions": 0, "deletions": 0, "lines": 0, "filePath": "examples/grpc-kotlin/gen-src/main/resources/META-INF/armeria/grpc/armeria-main.dsc"}, {"insertions": 619, "deletions": 0, "lines": 619, "filePath": "examples/grpc-kotlin/gen-src/main/grpc/example/armeria/grpc/kotlin/HelloServiceGrpc.java"}, {"insertions": 1205, "deletions": 0, "lines": 1205, "filePath": "examples/grpc-kotlin/gen-src/main/java/example/armeria/grpc/kotlin/Hello.java"}, {"insertions": 50, "deletions": 118, "lines": 168, "filePath": "examples/grpc-kotlin/src/test/kotlin/example/armeria/grpc/kotlin/HelloServiceTest.kt"}, {"insertions": 37, "deletions": 11, "lines": 48, "filePath": "grpc/src/main/java/com/linecorp/armeria/internal/client/grpc/GrpcClientFactory.java"}, {"insertions": 27, "deletions": 4, "lines": 31, "filePath": "examples/grpc-kotlin/build.gradle.kts"}, {"insertions": 297, "deletions": 0, "lines": 297, "filePath": "examples/grpc-kotlin/gen-src/main/kotlinGrpc/example/armeria/grpc/kotlin/HelloGrpcKt.kt"}, {"insertions": 68, "deletions": 85, "lines": 153, "filePath": "examples/grpc-kotlin/src/main/kotlin/example/armeria/grpc/kotlin/HelloServiceImpl.kt"}], "commitDateTime": "2020-05-06 15:52:01", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2662", "ttf": 21.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Support CoroutineStubs from grpc-kotlin", "statsSkippedReason": "", "user": "gary-lo", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "[grpc-kotlin](https://github.com/grpc/grpc-kotlin) generates client stubs are currently incompatible with Armeria GrpcClientFactories see the following stacktrace\r\n```\r\nCaused by: java.lang.IllegalArgumentException: Unknown client type: com.airtasker.application.adapters.grpc.MitchServiceGrpcKt$MitchServiceCoroutineStub (expected: a gRPC client stub class, e.g. MyServiceGrpc.MyServiceStub)\r\n\tat com.linecorp.armeria.internal.client.grpc.GrpcClientFactory.newUnknownClientTypeException(GrpcClientFactory.java:155)\r\n\tat com.linecorp.armeria.internal.client.grpc.GrpcClientFactory.findStubFactoryMethod(GrpcClientFactory.java:148)\r\n\tat com.linecorp.armeria.internal.client.grpc.GrpcClientFactory.newClient(GrpcClientFactory.java:93)\r\n\tat com.linecorp.armeria.client.DefaultClientFactory.newClient(DefaultClientFactory.java:148)\r\n\tat com.linecorp.armeria.client.ClientBuilder.build(ClientBuilder.java:106)\r\n\tat com.linecorp.armeria.client.Clients.newClient(Clients.java:54)\r\n```\r\n\r\nCurrently gRPC Factory looks via naming findStubFactoryMethod \r\n```\r\n            final String methodName = method.getName();\r\n            if (!(methodName.startsWith(\"new\") && methodName.endsWith(\"Stub\"))) {\r\n                // Must be named as `new*Stub()`.\r\n                continue;\r\n            }\r\n```\r\n\r\nWhich do not exist in the generated stubs see example\r\nhttps://github.com/grpc/grpc-kotlin/blob/master/compiler/src/test/java/io/grpc/kotlin/generator/GreeterCoroutineStub.expected#L26\r\n```\r\n**\r\n * A stub for issuing RPCs to a(n) helloworld.Greeter service as suspending coroutines.\r\n */\r\n@StubFor(GreeterGrpc::class)\r\nclass GreeterCoroutineStub @JvmOverloads constructor(\r\n  channel: Channel,\r\n  callOptions: CallOptions = DEFAULT\r\n) : AbstractCoroutineStub<GreeterCoroutineStub>(channel, callOptions) {\r\n  override fun build(channel: Channel, callOptions: CallOptions): GreeterCoroutineStub =\r\n      GreeterCoroutineStub(channel, callOptions)\r\n```", "labels": ["defect"]}, {"created": "2020-03-24 07:42:44", "commits": {"c7edfb686cf3b9d926ca12f10d724f024afed6f2": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-03-25 06:29:41", "filteredCommits": [], "commitsDetails": [{"nameRev": "c7edfb686cf3b9d926ca12f10d724f024afed6f2 tags/armeria-0.99.0~5", "commitMessage": "Fix a bug where DNS resolution is not timed out (#2623)\n\nMotivation:\r\nDNS resolution could take longer when there's more than one `DnsServerAddressStream`.\r\n\r\nModifications:\r\n- DNS resolution is timed out after `queryTimeoutMillis`.\r\n\r\nResult:\r\n- DNS resolution is timed out after `queryTimeoutMillis`.\r\n- Close #2621", "commitParents": ["79cda1df1dd4b7d5056ad385e5484d384ed72a14"], "spoonStatsSkippedReason": "", "commitHash": "c7edfb686cf3b9d926ca12f10d724f024afed6f2", "authoredDateTime": "2020-03-25 15:29:41", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 3, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroup.java"}, {"insertions": 46, "deletions": 7, "lines": 53, "filePath": "core/src/test/java/com/linecorp/armeria/client/RefreshingAddressResolverTest.java"}, {"insertions": 47, "deletions": 7, "lines": 54, "filePath": "core/src/main/java/com/linecorp/armeria/internal/client/DefaultDnsNameResolver.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroup.java"}, {"insertions": 13, "deletions": 1, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroupBuilder.java"}, {"insertions": 31, "deletions": 0, "lines": 31, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroupBuilder.java"}, {"insertions": 13, "deletions": 1, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsTextEndpointGroupBuilder.java"}, {"insertions": 12, "deletions": 1, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroupBuilder.java"}, {"insertions": 7, "deletions": 2, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroup.java"}, {"insertions": 11, "deletions": 8, "lines": 19, "filePath": "core/src/main/java/com/linecorp/armeria/client/DnsResolverGroupBuilder.java"}, {"insertions": 45, "deletions": 0, "lines": 45, "filePath": "core/src/main/java/com/linecorp/armeria/client/DnsTimeoutException.java"}, {"insertions": 7, "deletions": 3, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/client/RefreshingAddressResolverGroup.java"}, {"insertions": 4, "deletions": 3, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsTextEndpointGroup.java"}], "commitDateTime": "2020-03-25 15:29:41", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsEndpointGroup"}], "spoonFilePath": "DnsEndpointGroup.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsTextEndpointGroup"}], "spoonFilePath": "DnsTextEndpointGroup.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsEndpointGroupBuilder.queryTimeoutMillis()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsEndpointGroupBuilder.queryTimeout(java.time.Duration)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsEndpointGroupBuilder.queryTimeoutMillis(long)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsEndpointGroupBuilder"}], "spoonFilePath": "DnsEndpointGroupBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsAddressEndpointGroupBuilder.queryTimeoutMillis(long)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsAddressEndpointGroupBuilder.build()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsAddressEndpointGroupBuilder.queryTimeout(java.time.Duration)"}], "spoonFilePath": "DnsAddressEndpointGroupBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsServiceEndpointGroup"}], "spoonFilePath": "DnsServiceEndpointGroup.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsServiceEndpointGroupBuilder.queryTimeoutMillis(long)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsServiceEndpointGroupBuilder.queryTimeout(java.time.Duration)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsServiceEndpointGroupBuilder.build()"}], "spoonFilePath": "DnsServiceEndpointGroupBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverGroup"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverGroup.newResolver(io.netty.util.concurrent.EventExecutor)"}], "spoonFilePath": "RefreshingAddressResolverGroup.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.DnsTimeoutException"}], "spoonFilePath": "DnsTimeoutException.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsAddressEndpointGroup"}], "spoonFilePath": "DnsAddressEndpointGroup.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 11, "MOV": 4, "INS": 4, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverTest.negativeTtl()"}, {"UPD": 7, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverTest.builder(com.linecorp.armeria.client.endpoint.dns.TestDnsServer)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.RefreshingAddressResolverTest.timeout()"}], "spoonFilePath": "RefreshingAddressResolverTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 17, "MOV": 5, "INS": 10, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.client.DefaultDnsNameResolver.sendQueries(java.util.List,java.lang.String)"}, {"UPD": 3, "TOT": 5, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.client.DefaultDnsNameResolver.executor()"}, {"UPD": 0, "TOT": 5, "MOV": 0, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.client.DefaultDnsNameResolver"}], "spoonFilePath": "DefaultDnsNameResolver.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.DnsResolverGroupBuilder"}, {"UPD": 2, "TOT": 6, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.DnsResolverGroupBuilder.build(io.netty.channel.EventLoopGroup)"}], "spoonFilePath": "DnsResolverGroupBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsTextEndpointGroupBuilder.queryTimeoutMillis(long)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsTextEndpointGroupBuilder.build()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsTextEndpointGroupBuilder.queryTimeout(java.time.Duration)"}], "spoonFilePath": "DnsTextEndpointGroupBuilder.java"}]}], "url": "https://github.com/line/armeria/issues/2621", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "DNS resolution timeout may take longer", "statsSkippedReason": "", "user": "minwoox", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Let's say that `/etc/resolve.conf` contains:\r\n```\r\na.svc.cluster.local svc.cluster.local cluster.local\r\n```\r\nIf `queryTimeoutMillis` is 5 seconds and the client tries to find the address of `a.com`, it sends DNS queries sequencially as follow:\r\n```\r\na.com.a.svc.cluster.local.  // 5 seconds timeout.\r\na.com.svc.cluster.local.    // 5 seconds timeout.\r\na.com.cluster.local.        // 5 seconds timeout.\r\na.com.                      // 5 seconds timeout.\r\n```\r\nThe timeout is for the individual query not for whole DNS resolution, so it could take more than 5 seconds.\r\n\r\nTo fix this, we can:\r\n1. Provide to set the whole timeout for DNS resolution, or\r\n2. Apply `queryTimeoutMillis` to whole DNS resolution.\r\n\r\nI prefer to just do 2) because a user does not care about the individual queries, but just wants to get the result.\r\nIf there's a demand for 1) later, I will implement it later.", "labels": ["defect"]}, {"created": "2020-03-18 05:00:24", "user": "jrhee17", "body": "While running a unit test for proxy clients based on the current master branch, I found a test started to fail in my local env. (I expect CI should also be failing)\r\n\r\n**Relevant Test** `ProxyClientIntegrationTest.testProxy_protocolUpgrade_notSharableExceptionNotThrown`\r\n\r\nIt seems like we can't guarantee `channel.remoteAddress` is non-null.\r\n(I can investigate later.. but probably after work.     I would appreciate if anyone else can also take a look)\r\n\r\n```\r\n13:51:22.147 [armeria-common-worker-nio-9-1] WARN  c.l.a.client.HttpSessionHandler - [id: 0xbfe17139, L:0.0.0.0/0.0.0.0:49458] Unexpected suppressed exception:\r\ncom.linecorp.armeria.common.ClosedSessionException: null\r\nCaused by: java.lang.NullPointerException: remoteAddress\r\n\tat io.netty.util.internal.ObjectUtil.checkNotNull(ObjectUtil.java:33)\r\n\tat io.netty.bootstrap.Bootstrap.connect(Bootstrap.java:137)\r\n\tat com.linecorp.armeria.client.HttpChannelPool.connect(HttpChannelPool.java:416)\r\n\tat com.linecorp.armeria.client.HttpSessionHandler.channelInactive(HttpSessionHandler.java:320)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:262)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:248)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:241)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:386)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:351)\r\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.channelInactive(Http2ConnectionHandler.java:415)\r\n\tat com.linecorp.armeria.client.Http2ClientConnectionHandler.channelInactive(Http2ClientConnectionHandler.java:85)\r\n```", "closed": "2020-03-20 07:15:10", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2603", "ttf": 2.000277777777778, "commits": {}, "labels": ["defect"], "title": "Investigate NPE while retryWithH1C for integration test"}, {"created": "2020-03-18 02:59:49", "user": "minwoox", "body": "Because it's an unprocessed request.", "closed": "2020-03-23 02:00:31", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2601", "ttf": 4.000277777777778, "commits": {}, "labels": ["defect"], "title": "Wrap ProxyConnectException with UnprocessedRequestException"}, {"created": "2020-03-04 12:13:29", "commits": {"727ea3c4849c3354445589ad9d40a0fda78be737": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-03-12 11:53:04", "filteredCommits": [], "commitsDetails": [{"nameRev": "727ea3c4849c3354445589ad9d40a0fda78be737 tags/armeria-0.99.0~35", "commitMessage": "Copy RequestLog properties to child in RetryingClient (#2560)\n\nMotivation:\r\nWhen retrying, certain properties of `RequestLog` such as `name()`,  `requestContent()` and `requestContentPreview()` can be copied to the child context, so they are used.\r\n\r\nModifications:\r\n- Copy `name()`, `SerializationFormat`, `requestContent` and `requestContentPreview` manually when creating derived ctx in `RetryingClient`.\r\n  - This is not happening in `newDerivedContext` because we don't know which properties should be copied when deriving.\r\n  - Copy `responseContent` and `responseContentPreview` if `deferResponseContent(|Preview)` is called.\r\n\r\nResult:\r\n- Close #2551\r\n- You can now retry depending on the content of the request.", "commitParents": ["9b8a182677347c839a791f9af305b3dcd32d65f7"], "spoonStatsSkippedReason": "", "commitHash": "727ea3c4849c3354445589ad9d40a0fda78be737", "authoredDateTime": "2020-03-12 20:53:03", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 52, "deletions": 2, "lines": 54, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java"}, {"insertions": 4, "deletions": 0, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/common/logging/DefaultRequestLogTest.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java"}, {"insertions": 20, "deletions": 0, "lines": 20, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java"}, {"insertions": 38, "deletions": 7, "lines": 45, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java"}, {"insertions": 36, "deletions": 7, "lines": 43, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestOnlyLog.java"}], "commitDateTime": "2020-03-12 20:53:03", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClientWithLoggingTest.loggingDecorator()"}, {"UPD": 2, "TOT": 20, "MOV": 6, "INS": 10, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClientWithLoggingTest.retryingThenLogging()"}, {"UPD": 1, "TOT": 6, "MOV": 3, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClientWithLoggingTest.loggingThenRetrying()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClientWithLoggingTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1.doGet(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "RetryingClientWithLoggingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.isDeferRequestContentSet()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.isDeferRequestContentPreviewSet()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.isDeferResponseContentSet()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.isDeferResponseContentPreviewSet()"}], "spoonFilePath": "RequestLogBuilder.java"}, {"spoonMethods": [], "spoonFilePath": "ClientRequestContext.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLogTest.addChild()"}], "spoonFilePath": "DefaultRequestLogTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 20, "MOV": 2, "INS": 16, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.retry.AbstractRetryingClient.newDerivedContext(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.RpcRequest,boolean)"}], "spoonFilePath": "AbstractRetryingClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.serializationFormat()"}], "spoonFilePath": "RequestOnlyLog.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.isDeferResponseContentPreviewSet()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.isDeferRequestContentPreviewSet()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.isDeferRequestContentSet()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.CompleteRequestLog.serializationFormat()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.serializationFormat()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.propagateResponseSideLog(com.linecorp.armeria.common.logging.RequestLog)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.isDeferResponseContentSet()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.isDeferredFlagSet(com.linecorp.armeria.common.logging.RequestLogProperty)"}], "spoonFilePath": "DefaultRequestLog.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.handleBackoff(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpResponse,java.util.concurrent.CompletableFuture,com.linecorp.armeria.common.HttpResponse,java.lang.Runnable)"}], "spoonFilePath": "RetryingClient.java"}]}], "url": "https://github.com/line/armeria/issues/2551", "ttf": 7.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "RequestLog is not propagated to child RequestLog when created", "statsSkippedReason": "", "user": "minwoox", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When `orginalCtx.newDerivedContext()` is called, if the `RequestLog` of the `orginalCtx` has certain `RequestLogProperty`s already (e.g. `RequestLog.name()`), the `RequestLog` of the derived context should have same `RequestLogProperty`s.", "labels": ["defect"]}, {"created": "2020-02-26 10:24:15", "commits": {"95217b3b61d92bec6ced49286fd8a7d88e5dc259": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "d5132aa3017c14d50c8cbb22bd56018932f8d09f": {"commitGHEventType": "referenced", "commitUser": "ikhoon"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-03-18 02:03:37", "filteredCommits": [], "commitsDetails": [{"nameRev": "95217b3b61d92bec6ced49286fd8a7d88e5dc259 tags/armeria-0.99.0~66", "commitMessage": "Fix a bug where `ctx.set*Timeout()` does not schedule a timeout (#2537)\n\n... when no timeout was scheduled before.\r\n\r\nMotivation:\r\n\r\nWhen a timeout is not scheduled for a request, a new timeout set by\r\n`set{Request,Response}Timeout` does not work well.\r\nSee #2535\r\n\r\nModifications:\r\n\r\n- Make `set{Request,Response}Timeout` call `set{Request,Reponse}TimeoutAfterMillis`\r\n  if a timeout is not scheduled yet.\r\n\r\nResult:\r\n\r\nThe `set{Request,Response}Timeout*` properly set the new timeout when no timeout is scheduled.", "commitParents": ["93c04dddbf9df3c43ff54709a084f332bfcfb12d"], "spoonStatsSkippedReason": "", "commitHash": "95217b3b61d92bec6ced49286fd8a7d88e5dc259", "authoredDateTime": "2020-02-28 13:52:33", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 20, "deletions": 0, "lines": 20, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientResponseTimeoutTest.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerRequestTimeoutTest.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java"}], "commitDateTime": "2020-02-28 13:52:33", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.DefaultClientRequestContext.setResponseTimeoutMillis(long)"}], "spoonFilePath": "DefaultClientRequestContext.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerRequestTimeoutTest.2.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerRequestTimeoutTest.limitRequestTimeoutByDecorator(java.lang.String)"}], "spoonFilePath": "HttpServerRequestTimeoutTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientResponseTimeoutTest.shouldSetResponseTimeoutWithNoTimeout()"}], "spoonFilePath": "HttpClientResponseTimeoutTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultServiceRequestContext.setRequestTimeoutMillis(long)"}], "spoonFilePath": "DefaultServiceRequestContext.java"}]}, {"nameRev": "", "commitMessage": "", "commitParents": [], "spoonStatsSkippedReason": "", "commitHash": "d5132aa3017c14d50c8cbb22bd56018932f8d09f", "authoredDateTime": "", "commitGHEventType": "referenced", "commitGitStats": [], "commitDateTime": "", "commitUser": "ikhoon", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2535", "ttf": 20.00027777777778, "gitStatsSummary": {"insertions": 0.0, "deletions": 0.0, "lines": 0.0, "gitFilesChange": 0}, "title": "Undeprecate `ctx.setRequest/ResponseTimeout()`?", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0.0, "spoonMethodsChanged": 0, "TOT": 0.0, "MOV": 0.0, "INS": 0.0, "DEL": 0.0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 1, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "We got some internal inquiry about what should a user do instead of `ServiceRequestContext.setRequestTimeoutMillis(long)`. IIUC the current API, it has to be:\r\n\r\n```java\r\nfinal requestStartTimeMillis = \r\n    ctx.log().ensureAvailable(RequestLogProperty.REQUEST_START_TIME)\r\n             .requestStartTimeMillis();\r\nctx.setRequestTimeoutAt(Instant.ofEpochMillis(requestStartTimeMillis + timeout);\r\n```\r\n\r\n... which is not ideal.\r\n\r\nOn the other hand, I found a bug where the current `setRequestTimeoutMillis()` implementation uses `extendRequestTimeout()`, which means the timeout will not be set when there's no timeout scheduled yet.", "labels": ["defect", "discussion"]}, {"created": "2020-02-21 02:10:18", "user": "Boozilla", "body": "I still get the same problem at 0.98.2\r\n\r\n```\r\n[globalEventExecutor-2-1] 10:51:10.237 WARN  com.linecorp.armeria.server.Server - Failed to notify a server listener: com.linecorp.armeria.server.docs.DocService$1@3c48f376\r\njava.lang.IllegalStateException: zip file closed\r\n        at java.base/java.util.zip.ZipFile.ensureOpen(ZipFile.java:850)\r\n        at java.base/java.util.zip.ZipFile.stream(ZipFile.java:639)\r\n        at java.base/java.util.zip.ZipFile$1.stream(ZipFile.java:1066)\r\n        at java.base/java.util.jar.JarFile.stream(JarFile.java:534)\r\n        at com.linecorp.armeria.internal.shaded.reflections.vfs.ZipDir.lambda$getFiles$2(ZipDir.java:21)\r\n        at com.linecorp.armeria.internal.shaded.reflections.Reflections.scan(Reflections.java:260)\r\n        at com.linecorp.armeria.internal.shaded.reflections.Reflections.scan(Reflections.java:216)\r\n        at com.linecorp.armeria.internal.shaded.reflections.Reflections.<init>(Reflections.java:137)\r\n        at com.linecorp.armeria.server.docs.DocStringExtractor.getAllDocStrings0(DocStringExtractor.java:83)\r\n        at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1705)\r\n        at com.linecorp.armeria.server.docs.DocStringExtractor.getAllDocStrings(DocStringExtractor.java:69)\r\n        at com.linecorp.armeria.internal.server.grpc.GrpcDocServicePlugin.lambda$loadDocStrings$5(GrpcDocServicePlugin.java:209)\r\n        at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:271)\r\n        at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\r\n        at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)\r\n        at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)\r\n        at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\r\n        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n        at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\r\n        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n        at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\r\n        at com.linecorp.armeria.internal.server.grpc.GrpcDocServicePlugin.loadDocStrings(GrpcDocServicePlugin.java:211)\r\n        at com.linecorp.armeria.server.docs.DocService.lambda$addDocStrings$4(DocService.java:197)\r\n        at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:271)\r\n        at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\r\n        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n        at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\r\n        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n        at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\r\n        at com.linecorp.armeria.server.docs.DocService.addDocStrings(DocService.java:199)\r\n        at com.linecorp.armeria.server.docs.DocService.access$200(DocService.java:81)\r\n        at com.linecorp.armeria.server.docs.DocService$1.serverStarting(DocService.java:172)\r\n        at com.linecorp.armeria.server.Server$ServerStartStopSupport.notifyStarting(Server.java:614)\r\n        at com.linecorp.armeria.server.Server$ServerStartStopSupport.notifyStarting(Server.java:362)\r\n        at com.linecorp.armeria.common.util.StartStopSupport.notifyListeners(StartStopSupport.java:371)\r\n        at com.linecorp.armeria.common.util.StartStopSupport.lambda$start0$3(StartStopSupport.java:184)\r\n        at io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run(GlobalEventExecutor.java:242)\r\n        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n        at java.base/java.lang.Thread.run(Thread.java:830)\r\n[globalEventExecutor-2-1] 10:51:10.267 WARN  com.linecorp.armeria.server.Server - Failed to notify a server listener: com.linecorp.armeria.server.docs.DocService$1@607d0b50\r\njava.lang.IllegalStateException: zip file closed\r\n        at java.base/java.util.zip.ZipFile.ensureOpen(ZipFile.java:850)\r\n        at java.base/java.util.zip.ZipFile.stream(ZipFile.java:639)\r\n        at java.base/java.util.zip.ZipFile$1.stream(ZipFile.java:1066)\r\n        at java.base/java.util.jar.JarFile.stream(JarFile.java:534)\r\n        at com.linecorp.armeria.internal.shaded.reflections.vfs.ZipDir.lambda$getFiles$2(ZipDir.java:21)\r\n        at com.linecorp.armeria.internal.shaded.reflections.Reflections.scan(Reflections.java:260)\r\n        at com.linecorp.armeria.internal.shaded.reflections.Reflections.scan(Reflections.java:216)\r\n        at com.linecorp.armeria.internal.shaded.reflections.Reflections.<init>(Reflections.java:137)\r\n        at com.linecorp.armeria.server.docs.DocStringExtractor.getAllDocStrings0(DocStringExtractor.java:83)\r\n        at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1705)\r\n        at com.linecorp.armeria.server.docs.DocStringExtractor.getAllDocStrings(DocStringExtractor.java:69)\r\n        at com.linecorp.armeria.internal.server.grpc.GrpcDocServicePlugin.lambda$loadDocStrings$5(GrpcDocServicePlugin.java:209)\r\n        at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:271)\r\n        at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\r\n        at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)\r\n        at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)\r\n        at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\r\n        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n        at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\r\n        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n        at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\r\n        at com.linecorp.armeria.internal.server.grpc.GrpcDocServicePlugin.loadDocStrings(GrpcDocServicePlugin.java:211)\r\n        at com.linecorp.armeria.server.docs.DocService.lambda$addDocStrings$4(DocService.java:197)\r\n        at java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:271)\r\n        at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)\r\n        at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n        at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n        at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)\r\n        at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n        at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)\r\n        at com.linecorp.armeria.server.docs.DocService.addDocStrings(DocService.java:199)\r\n        at com.linecorp.armeria.server.docs.DocService.access$200(DocService.java:81)\r\n        at com.linecorp.armeria.server.docs.DocService$1.serverStarting(DocService.java:172)\r\n        at com.linecorp.armeria.server.Server$ServerStartStopSupport.notifyStarting(Server.java:614)\r\n        at com.linecorp.armeria.server.Server$ServerStartStopSupport.notifyStarting(Server.java:362)\r\n        at com.linecorp.armeria.common.util.StartStopSupport.notifyListeners(StartStopSupport.java:371)\r\n        at com.linecorp.armeria.common.util.StartStopSupport.lambda$start0$3(StartStopSupport.java:184)\r\n        at io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run(GlobalEventExecutor.java:242)\r\n        at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n        at java.base/java.lang.Thread.run(Thread.java:830)\r\n```", "closed": "2020-02-21 05:13:11", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2518", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "ReflectionsException while extracting doc strings"}, {"created": "2020-02-19 12:55:44", "commits": {"25a5e751f470e38bb86720f7a77c5b3cd531d882": {"commitGHEventType": "closed", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-02-20 14:37:13", "filteredCommits": [], "commitsDetails": [{"nameRev": "25a5e751f470e38bb86720f7a77c5b3cd531d882 tags/armeria-0.98.3~12", "commitMessage": "Make `RequestContextExporter` capable of exporting request ID (#2515)\n\nMotivation:\r\n\r\n`RequestContextExportor` did not have `BuiltInProperty` for request ID.\r\n\r\nModification:\r\n\r\n- Add `BuiltInProperty.REQ_ID` and export it if necessary.\r\n\r\nResult:\r\n\r\n- Fixes #2511", "commitParents": ["5f01ce1e4d1a34ba5a26221675d7c1e33506461e"], "spoonStatsSkippedReason": "", "commitHash": "25a5e751f470e38bb86720f7a77c5b3cd531d882", "authoredDateTime": "2020-02-20 23:37:11", "commitGHEventType": "closed", "commitGitStats": [{"insertions": 8, "deletions": 0, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporter.java"}, {"insertions": 10, "deletions": 5, "lines": 15, "filePath": "logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "core/src/test/java/com/linecorp/armeria/common/logging/RequestContextExporterTest.java"}, {"insertions": 4, "deletions": 0, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/BuiltInProperty.java"}], "commitDateTime": "2020-02-20 23:37:11", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 3, "TOT": 5, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.testClientContextWithFullLogs()"}, {"UPD": 3, "TOT": 5, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.testServiceContextWithFullLogs()"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.testServiceContextWithMinimalLogs()"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.testClientContextWithMinimalLogs()"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.testServiceContextWithoutLogs()"}], "spoonFilePath": "RequestContextExportingAppenderTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.BuiltInProperty"}], "spoonFilePath": "BuiltInProperty.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.RequestContextExporterTest.shouldNotExportNullValue()"}], "spoonFilePath": "RequestContextExporterTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.RequestContextExporter.exportId(java.util.Map,com.linecorp.armeria.common.RequestContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.RequestContextExporter.export(java.util.Map,com.linecorp.armeria.common.RequestContext,com.linecorp.armeria.common.logging.RequestLog)"}], "spoonFilePath": "RequestContextExporter.java"}]}], "url": "https://github.com/line/armeria/issues/2511", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`RequestContextExporter` does not export a request ID.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Originally reported by @andrewoma\r\n\r\nWe could add a new enum value `BuildInProperty.REQ_ID` and export it into a `req.id` map entry.", "labels": ["defect", "good first issue"]}, {"created": "2020-02-14 06:44:47", "commits": {"ae84af3c27533baac21d94e24495223d49ce745b": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-02-14 10:48:26", "filteredCommits": [], "commitsDetails": [{"nameRev": "ae84af3c27533baac21d94e24495223d49ce745b tags/armeria-0.98.2~9", "commitMessage": "Fix `ReflectionsException` while scanning docstrings (#2494)\n\nMotivation:\r\n\r\n`DocStringsExtractor` makes `Reflections` throw a `ReflectionsException`\r\nif a resource folder (e.g. `META-INF/armeria/grpc`) exists but it\r\ncontains no files.\r\n\r\nModifications:\r\n\r\n- Do not attempt to call `Reflections.getResources()` if the resource\r\n  folder does not contain any files.\r\n\r\nResult:\r\n\r\n- No more `ReflectionsException` while scanning docstrings.\r\n- Fixes #2491", "commitParents": ["37883ed4822d7aac657f9e05e405067e3114e432"], "spoonStatsSkippedReason": "", "commitHash": "ae84af3c27533baac21d94e24495223d49ce745b", "authoredDateTime": "2020-02-14 19:48:25", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 17, "deletions": 5, "lines": 22, "filePath": "core/src/main/java/com/linecorp/armeria/server/docs/DocStringExtractor.java"}], "commitDateTime": "2020-02-14 19:48:25", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 10, "MOV": 2, "INS": 5, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.DocStringExtractor.getAllDocStrings0(java.lang.ClassLoader)"}], "spoonFilePath": "DocStringExtractor.java"}]}], "url": "https://github.com/line/armeria/issues/2491", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "ReflectionsException while extracting doc strings", "statsSkippedReason": "", "user": "ikhoon", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```java\r\n2020-02-14 12:18:02.414  WARN 15673 --- [globalEventExecutor-3-1] com.linecorp.armeria.server.Server       : Failed to notify a server listener: com.linecorp.armeria.server.docs.DocService$1@65375e63\r\ncom.linecorp.armeria.internal.shaded.reflections.ReflectionsException: Scanner ResourcesScanner was not configured\r\n        at com.linecorp.armeria.internal.shaded.reflections.Store.get(Store.java:39)\r\n        at com.linecorp.armeria.internal.shaded.reflections.Store.get(Store.java:61)\r\n        at com.linecorp.armeria.internal.shaded.reflections.Store.get(Store.java:56)\r\n        at com.linecorp.armeria.internal.shaded.reflections.Reflections.getResources(Reflections.java:564)\r\n        at com.linecorp.armeria.server.docs.DocStringExtractor.getAllDocStrings0(DocStringExtractor.java:80)\r\n        at java.base/java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1705)\r\n        at com.linecorp.armeria.server.docs.DocStringExtractor.getAllDocStrings(DocStringExtractor.java:67)\r\n        at com.linecorp.armeria.internal.server.grpc.GrpcDocServicePlugin.lambda$loadDocStrings$5(GrpcDocServicePlugin.java:209)\r\n```", "labels": ["defect"]}, {"created": "2020-02-10 10:06:15", "commits": {"32b3d5a5caf18fb1ea0b1d8b29ade61d18935d05": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2020-03-10 04:47:30", "filteredCommits": [], "commitsDetails": [{"nameRev": "32b3d5a5caf18fb1ea0b1d8b29ade61d18935d05 tags/armeria-0.99.0~42", "commitMessage": "Handle exceptions from Subscribers (#2553)\n\nMotivation:\r\nAn exception raised by a `Subscriber`'s `onNext()` or other handler methods can cause an unexpected connection drop.\r\nWe should handle it.\r\n\r\nModifications:\r\n- Catch the exception thrown by `onSubscribe()` and `onNext()` from `Subscriber`s.\r\n  - Aabort the stream or call `onError` with the cause.\r\n- Catch the exception thrown by `onComplete()` and `onError()`, and log it.\r\n- Fork `CompositeException` from RxJava.\r\n\r\nResult:\r\n- Close #2475\r\n- The connection is not closed by unhandled exceptions from `Subscriber`s anymore.", "commitParents": ["721f185e0d9b203d2c1e3345201db4b9ad02126a"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "32b3d5a5caf18fb1ea0b1d8b29ade61d18935d05", "authoredDateTime": "2020-03-10 13:47:29", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 10, "deletions": 0, "lines": 10, "filePath": "NOTICE.txt"}, {"insertions": 36, "deletions": 6, "lines": 42, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java"}, {"insertions": 55, "deletions": 10, "lines": 65, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessageDuplicator.java"}, {"insertions": 159, "deletions": 0, "lines": 159, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/SubscriberThrowingExceptionTest.java"}, {"insertions": 14, "deletions": 1, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/server/encoding/HttpEncodedResponse.java"}, {"insertions": 0, "deletions": 4, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpMessageAggregator.java"}, {"insertions": 313, "deletions": 0, "lines": 313, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/CompositeException.java"}, {"insertions": 31, "deletions": 0, "lines": 31, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java"}, {"insertions": 16, "deletions": 2, "lines": 18, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/FixedStreamMessage.java"}, {"insertions": 201, "deletions": 0, "lines": 201, "filePath": "licenses/LICENSE.rxjava.al20.txt"}, {"insertions": 33, "deletions": 0, "lines": 33, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/DefaultStreamMessageTest.java"}, {"insertions": 8, "deletions": 0, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/TwoElementFixedStreamMessage.java"}, {"insertions": 0, "deletions": 4, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java"}, {"insertions": 31, "deletions": 15, "lines": 46, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java"}, {"insertions": 7, "deletions": 0, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/RegularFixedStreamMessage.java"}, {"insertions": 97, "deletions": 80, "lines": 177, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java"}, {"insertions": 13, "deletions": 1, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/OneElementFixedStreamMessage.java"}, {"insertions": 0, "deletions": 4, "lines": 4, "filePath": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/AbstractSubscriber.java"}, {"insertions": 54, "deletions": 15, "lines": 69, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java"}], "commitDateTime": "2020-03-10 13:47:29", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2475", "ttf": 28.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Handle exceptions thrown by `Subscriber`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "An exception raised by a `Subscriber`'s `onNext()` or other handler methods can cause an unexpected connection drop. The following stack trace shows the case where an exception raised by `onNext()` is propagated to `Http2ResponseDecoder` which triggers an HTTP/2 connection error:\r\n\r\n```\r\nHTTP/2 connection error:\r\nio.netty.handler.codec.http2.Http2Exception: failed to consume a HEADERS frame\r\n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:117)\r\n\tat com.linecorp.armeria.client.Http2ResponseDecoder.onHeadersRead(Http2ResponseDecoder.java:200)\r\n\tat com.linecorp.armeria.client.Http2ResponseDecoder.onHeadersRead(Http2ResponseDecoder.java:213)\r\n\tat io.netty.handler.codec.http2.Http2FrameListenerDecorator.onHeadersRead(Http2FrameListenerDecorator.java:48)\r\n\tat io.netty.handler.codec.http2.Http2EmptyDataFrameListener.onHeadersRead(Http2EmptyDataFrameListener.java:63)\r\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onHeadersRead(DefaultHttp2ConnectionDecoder.java:373)\r\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader$1.processFragment(DefaultHttp2FrameReader.java:457)\r\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readHeadersFrame(DefaultHttp2FrameReader.java:464)\r\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:254)\r\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\r\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:174)\r\n\tat io.netty.handler.codec.http2.DecoratingHttp2ConnectionDecoder.decodeFrame(DecoratingHttp2ConnectionDecoder.java:63)\r\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:378)\r\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:438)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:498)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:437)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\r\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:227)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\r\n\tat io.netty.handler.flush.FlushConsolidationHandler.channelRead(FlushConsolidationHandler.java:152)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\r\n\tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:286)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\r\n\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:792)\r\n\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:475)\r\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:830)\r\nCaused by: java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 2\r\n\tat java.base/java.lang.String.checkBoundsBeginEnd(String.java:3720)\r\n\tat java.base/java.lang.String.substring(String.java:1909)\r\n\tat com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker$HealthCheckResponseSubscriber.updateLongPollingSettings(HttpHealthChecker.java:250)\r\n\tat com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker$HealthCheckResponseSubscriber.onNext(HttpHealthChecker.java:189)\r\n\tat com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker$HealthCheckResponseSubscriber.onNext(HttpHealthChecker.java:149)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriberWithElements(DefaultStreamMessage.java:344)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber0(DefaultStreamMessage.java:322)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber(DefaultStreamMessage.java:255)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.addObjectOrEvent(DefaultStreamMessage.java:241)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.addObject(DefaultStreamMessage.java:161)\r\n\tat com.linecorp.armeria.common.stream.AbstractStreamMessageAndWriter.tryWrite(AbstractStreamMessageAndWriter.java:74)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.tryWrite(DefaultStreamMessage.java:65)\r\n\tat com.linecorp.armeria.client.DecodedHttpResponse.tryWrite(DecodedHttpResponse.java:55)\r\n\tat com.linecorp.armeria.client.HttpResponseDecoder$HttpResponseWrapper.tryWrite(HttpResponseDecoder.java:227)\r\n\tat com.linecorp.armeria.client.Http2ResponseDecoder.onHeadersRead(Http2ResponseDecoder.java:197)\r\n\t... 41 common frames omitted\r\n```\r\n\r\nWe must catch any exceptions raised by `Subscriber` and abort the `StreamMessage` with the caught exception.", "labels": ["defect"]}, {"created": "2020-02-10 08:02:22", "commits": {"2ed97c069c6b7d070a351e60ad9d6afedfad0f1c": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-02-10 12:25:06", "filteredCommits": [], "commitsDetails": [{"nameRev": "2ed97c069c6b7d070a351e60ad9d6afedfad0f1c tags/armeria-0.98.1~1", "commitMessage": "Fix blocking operation warnings from `FileService` (#2478)\n\nMotivation:\r\n\r\n`EventLoopCheckingFuture` logs a warning about any blocking operations\r\nthat occur in an event loop, and we do blocking operations in\r\n`FileService` and `CachingHttpFile`.\r\n\r\nModifications:\r\n\r\n- Read files via `blockingTaskExecutor` or a user-specified `Executor`.\r\n\r\nResult:\r\n\r\n- Fixes #2473 ", "commitParents": ["c72e119ff5e3fa5fbe13c9752afc643c8d2e604c"], "spoonStatsSkippedReason": "", "commitHash": "2ed97c069c6b7d070a351e60ad9d6afedfad0f1c", "authoredDateTime": "2020-02-10 21:25:05", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 20, "deletions": 20, "lines": 40, "filePath": "core/src/main/java/com/linecorp/armeria/server/file/CachingHttpFile.java"}, {"insertions": 13, "deletions": 13, "lines": 26, "filePath": "core/src/main/java/com/linecorp/armeria/server/file/FileService.java"}], "commitDateTime": "2020-02-10 21:25:05", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 17, "MOV": 9, "INS": 3, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.file.FileService.cache(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.server.file.FileService$PathAndEncoding,com.linecorp.armeria.server.file.HttpFile)"}], "spoonFilePath": "FileService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.CachingHttpFile.read(java.util.concurrent.Executor,io.netty.buffer.ByteBufAllocator)"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.CachingHttpFile.cache(java.util.concurrent.Executor)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.CachingHttpFile.aggregateWithPooledObjects(java.util.concurrent.Executor,io.netty.buffer.ByteBufAllocator)"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.CachingHttpFile.getFile(java.util.concurrent.Executor)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.CachingHttpFile.aggregate(java.util.concurrent.Executor)"}, {"UPD": 2, "TOT": 15, "MOV": 7, "INS": 0, "DEL": 6, "spoonMethodName": "com.linecorp.armeria.server.file.CachingHttpFile.cache()"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.CachingHttpFile.asService()"}], "spoonFilePath": "CachingHttpFile.java"}]}], "url": "https://github.com/line/armeria/issues/2473", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Blocking operation warning in `FileService`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```\r\njava.lang.IllegalStateException: Blocking event loop, don't do this.\r\n\tat com.linecorp.armeria.internal.common.util.EventLoopCheckingUtil.maybeLogIfOnEventLoop(EventLoopCheckingUtil.java:48)\r\n\tat com.linecorp.armeria.common.util.EventLoopCheckingFuture.get(EventLoopCheckingFuture.java:56)\r\n\tat com.linecorp.armeria.server.file.FileService.lambda$cache$1(FileService.java:325)\r\n```", "labels": ["defect"]}, {"created": "2020-02-06 09:45:02", "user": "anuraaga", "body": "I had a report that after upgrading Armeria, requests started to fail with for example `com.linecorp.armeria.client.UnprocessedRequestException: io.netty.channel.AbstractChannel$AnnotatedNoRouteToHostException: null: cloudtrace.googleapis.com/2404:6800:4004:80a:0:0:0:200a:443, scheme=gproto+https, headers=[:method=UNKNOWN, :path=?, :scheme=https, :authority=?], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=google.devtools.cloudtrace.v2.TraceService/BatchWriteSpans`\r\n\r\nhttps://github.com/netty/netty/pull/9048 was added to Netty to fix things like this but there may be a regression after Armeria forked the DNS resolver. Haven't investigated anything though.\r\n\r\n/cc @danada", "closed": "2020-02-07 08:36:27", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2463", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "Verify using IPv4 addresess when IPv6 isn't available logic for Armeria's DNS resolvers work"}, {"created": "2020-01-23 19:28:18", "commits": {"fcfa023e62df732f17dc0aef6016d449b80416ac": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-01-29 11:38:21", "filteredCommits": [], "commitsDetails": [{"nameRev": "fcfa023e62df732f17dc0aef6016d449b80416ac tags/armeria-0.98.0~49", "commitMessage": "Fix StackOverFlow when dumpOpenSslInfo is set to true (#2418)\n\nMotivation:\r\nRelated #2417\r\n\r\nModification:\r\n- Fix not to call `Flags.useOpenSsl()` in `Flags.useOpenSsl()`.\r\n\r\nResult:\r\n- Closes #2417\r\n- You can now set `com.linecorp.armeria.dumpOpenSslInfo=true` property.", "commitParents": ["ce7609d3cdd23b46f1845b07995e4ef1479a186a"], "spoonStatsSkippedReason": "", "commitHash": "fcfa023e62df732f17dc0aef6016d449b80416ac", "authoredDateTime": "2020-01-29 20:38:20", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 81, "deletions": 12, "lines": 93, "filePath": "core/src/test/java/com/linecorp/armeria/common/FlagsTest.java"}, {"insertions": 24, "deletions": 7, "lines": 31, "filePath": "core/src/main/java/com/linecorp/armeria/common/Flags.java"}], "commitDateTime": "2020-01-29 20:38:20", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 15, "MOV": 11, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.FlagsTest.epollAvailableOnLinux()"}, {"UPD": 3, "TOT": 7, "MOV": 3, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.FlagsTest.openSslAvailable()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.FlagsTest.FlagsClassLoader"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.FlagsTest.dumpOpenSslInfoDoNotThrowStackOverFlowError()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.FlagsTest"}], "spoonFilePath": "FlagsTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 4, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.Flags"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.Flags.setUseOpenSslAndDumpOpenSslInfo()"}, {"UPD": 1, "TOT": 6, "MOV": 1, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.Flags.dumpOpenSslInfo()"}, {"UPD": 2, "TOT": 9, "MOV": 5, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.Flags.useOpenSsl()"}], "spoonFilePath": "Flags.java"}]}], "url": "https://github.com/line/armeria/issues/2417", "ttf": 5.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Dcom.linecorp.armeria.dumpOpenSslInfo=true flag throws server into infinite loop", "statsSkippedReason": "", "user": "abkura", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Version: Armeria 0.95\r\n\r\n```\r\n2020-01-23 19:24:36.539  INFO 6 --- [           main] c.l.a.c.Flags                            : Using OpenSSL: BoringSSL, 0x1010007f\r\n2020-01-23 19:24:36.539  INFO 6 --- [           main] c.l.a.c.Flags                            : com.linecorp.armeria.useOpenSsl: true (default)\r\n2020-01-23 19:24:36.539  INFO 6 --- [           main] c.l.a.c.Flags                            : Using OpenSSL: BoringSSL, 0x1010007f\r\n2020-01-23 19:24:36.539  INFO 6 --- [           main] c.l.a.c.Flags                            : com.linecorp.armeria.useOpenSsl: true (default)\r\n2020-01-23 19:24:36.539  INFO 6 --- [           main] c.l.a.c.Flags                            : Using OpenSSL: BoringSSL, 0x1010007f\r\n2020-01-23 19:24:36.539  INFO 6 --- [           main] c.l.a.c.Flags                            : com.linecorp.armeria.useOpenSsl: true (default)\r\n2020-01-23 19:24:36.539  INFO 6 --- [           main] c.l.a.c.Flags                            : Using OpenSSL: BoringSSL, 0x1010007f\r\n2020-01-23 19:24:36.543  WARN 6 --- [           main] s.c.a.AnnotationConfigApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'armeriaServer' defined in com.linecorp.armeria.spring.ArmeriaAutoConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.linecorp.armeria.server.Server]: Factory method 'armeriaServer' threw exception; nested exception is java.lang.StackOverflowError\r\n2020-01-23 19:24:36.577  INFO 6 --- [           main] ConditionEvaluationReportLoggingListener :\r\n\r\nError starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.\r\n2020-01-23 19:24:36.595 ERROR 6 --- [           main] o.s.b.SpringApplication                  : Application run failed\r\n\r\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'armeriaServer' defined in com.linecorp.armeria.spring.ArmeriaAutoConfiguration: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.linecorp.armeria.server.Server]: Factory method 'armeriaServer' threw exception; nested exception is java.lang.StackOverflowError\r\n        at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:645) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:625) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:879) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:878) ~[spring-context-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:550) ~[spring-context-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.0.RELEASE.jar:2.2.0.RELEASE]\r\n        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.0.RELEASE.jar:2.2.0.RELEASE]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.0.RELEASE.jar:2.2.0.RELEASE]\r\n        at org.springframework.boot.builder.SpringApplicationBuilder.run(SpringApplicationBuilder.java:140) [spring-boot-2.2.0.RELEASE.jar:2.2.0.RELEASE]\r\n        at zipkin.server.ZipkinServer.main(ZipkinServer.java:54) [classes/:?]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_232]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_232]\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_232]\r\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_232]\r\n        at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [zipkin-server/:?]\r\n        at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [zipkin-server/:?]\r\n        at org.springframework.boot.loader.Launcher.launch(Launcher.java:51) [zipkin-server/:?]\r\n        at org.springframework.boot.loader.PropertiesLauncher.main(PropertiesLauncher.java:597) [zipkin-server/:?]\r\nCaused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.linecorp.armeria.server.Server]: Factory method 'armeriaServer' threw exception; nested exception is java.lang.StackOverflowError\r\n        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:640) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]\r\n        ... 25 more\r\nCaused by: java.lang.StackOverflowError\r\n        at org.apache.logging.log4j.core.pattern.DatePatternConverter.getThreadLocalFormatter(DatePatternConverter.java:299) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.pattern.DatePatternConverter.formatWithoutAllocation(DatePatternConverter.java:295) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.pattern.DatePatternConverter.format(DatePatternConverter.java:288) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.pattern.DatePatternConverter.format(DatePatternConverter.java:265) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.springframework.boot.logging.log4j2.ColorConverter.format(ColorConverter.java:121) ~[spring-boot-2.2.0.RELEASE.jar:2.2.0.RELEASE]\r\n        at org.apache.logging.log4j.core.pattern.PatternFormatter.format(PatternFormatter.java:38) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.layout.PatternLayout$PatternSerializer.toSerializable(PatternLayout.java:341) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.layout.PatternLayout.toText(PatternLayout.java:240) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:225) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.layout.PatternLayout.encode(PatternLayout.java:59) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.directEncodeEvent(AbstractOutputStreamAppender.java:197) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.tryAppend(AbstractOutputStreamAppender.java:190) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.appender.AbstractOutputStreamAppender.append(AbstractOutputStreamAppender.java:181) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.config.AppenderControl.tryCallAppender(AppenderControl.java:156) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.config.AppenderControl.callAppender0(AppenderControl.java:129) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.config.AppenderControl.callAppenderPreventRecursion(AppenderControl.java:120) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.config.AppenderControl.callAppender(AppenderControl.java:84) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.config.LoggerConfig.callAppenders(LoggerConfig.java:543) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.config.LoggerConfig.processLogEvent(LoggerConfig.java:502) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:485) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.config.LoggerConfig.log(LoggerConfig.java:460) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.config.AwaitCompletionReliabilityStrategy.log(AwaitCompletionReliabilityStrategy.java:82) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.core.Logger.log(Logger.java:162) ~[log4j-core-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.spi.AbstractLogger.tryLogMessage(AbstractLogger.java:2190) ~[log4j-api-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.spi.AbstractLogger.logMessageTrackRecursion(AbstractLogger.java:2144) ~[log4j-api-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.spi.AbstractLogger.logMessageSafely(AbstractLogger.java:2127) ~[log4j-api-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.spi.AbstractLogger.logMessage(AbstractLogger.java:2026) ~[log4j-api-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.log4j.spi.AbstractLogger.logIfEnabled(AbstractLogger.java:1899) ~[log4j-api-2.12.1.jar:2.12.1]\r\n        at org.apache.logging.slf4j.Log4jLogger.info(Log4jLogger.java:189) ~[log4j-slf4j-impl-2.12.1.jar:2.12.1]\r\n        at com.linecorp.armeria.common.Flags.getNormalized(Flags.java:931) ~[armeria-0.95.0.jar:?]\r\n        at com.linecorp.armeria.common.Flags.getBoolean(Flags.java:875) ~[armeria-0.95.0.jar:?]\r\n        at com.linecorp.armeria.common.Flags.getBoolean(Flags.java:871) ~[armeria-0.95.0.jar:?]\r\n        at com.linecorp.armeria.common.Flags.useOpenSsl(Flags.java:413) ~[armeria-0.95.0.jar:?]\r\n        at com.linecorp.armeria.internal.SslContextUtil.createSslContext(SslContextUtil.java:90) ~[armeria-0.95.0.jar:?]\r\n        at com.linecorp.armeria.common.Flags.useOpenSsl(Flags.java:426) ~[armeria-0.95.0.jar:?]\r\n        at com.linecorp.armeria.internal.SslContextUtil.createSslContext(SslContextUtil.java:90) ~[armeria-0.95.0.jar:?]\r\n        at com.linecorp.armeria.common.Flags.useOpenSsl(Flags.java:426) ~[armeria-0.95.0.jar:?]\r\n        at com.linecorp.armeria.internal.SslContextUtil.createSslContext(SslContextUtil.java:90) ~[armeria-0.95.0.jar:?]\r\n\t\t```", "labels": ["defect"]}, {"created": "2020-01-22 09:35:12", "commits": {"f9b38ea6c164ccf62b76f72aea74756a7a842226": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-01-23 11:09:27", "filteredCommits": [], "commitsDetails": [{"nameRev": "f9b38ea6c164ccf62b76f72aea74756a7a842226 tags/armeria-0.98.0~51", "commitMessage": "Fix a bug where callbacks are invoked with the wrong context (#2415)\n\nMotivation:\r\nWhen we send a data, we don't buffer but flush them to the socket one by one.\r\nHowever, under heavy load, especially when using HTTP/2, there's a chance that the data is not fully written(partial write) or nor written at all because of the lack of the space in sending buffer. http://man7.org/linux/man-pages/man2/write.2.html\r\nEven though we try to push the data to the socket while spinning (16 times by default), it could fail.\r\nIn that case, we just store data to `ChannelOutboundBuffer` and try it next time when writing other data.\r\n\r\nThis is where the trouble begins. The next write that would be handling a different request, which means different `RequestContext` in the thread-local, completes the writing and executes all callbacks. Some of the callback should not be invoked with the `RequestContext`.\r\n\r\nThis could happen to some of the other `ChannelFuture`s used, so I updated them as well.\r\n\r\nModification:\r\n- Remove the `RequestContext` if exists in `ChannelFuture` listener.\r\n\r\nResult:\r\n- Callbacks are not invoked with the wrong context in the thread-local\r\n- Close #2414", "commitParents": ["46984cea5eabbfe110a518d4c54ef009da7a437f"], "spoonStatsSkippedReason": "", "commitHash": "f9b38ea6c164ccf62b76f72aea74756a7a842226", "authoredDateTime": "2020-01-23 20:09:26", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 25, "deletions": 21, "lines": 46, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java"}, {"insertions": 42, "deletions": 34, "lines": 76, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java"}, {"insertions": 9, "deletions": 6, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java"}, {"insertions": 21, "deletions": 0, "lines": 21, "filePath": "core/src/main/java/com/linecorp/armeria/internal/RequestContextUtil.java"}, {"insertions": 8, "deletions": 4, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java"}, {"insertions": 23, "deletions": 19, "lines": 42, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java"}, {"insertions": 12, "deletions": 0, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/internal/RequestContextThreadLocal.java"}], "commitDateTime": "2020-01-23 20:09:26", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 2, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpRequestSubscriber.operationComplete(io.netty.channel.ChannelFuture)"}], "spoonFilePath": "HttpRequestSubscriber.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.RequestContextUtil.pop()"}], "spoonFilePath": "RequestContextUtil.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 4, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientDelegate.handleEarlyRequestException(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest,java.lang.Throwable)"}], "spoonFilePath": "HttpClientDelegate.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 6, "MOV": 5, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler.handleEarlyCancellation(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.client.DecodedHttpResponse)"}], "spoonFilePath": "HttpSessionHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 2, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpResponseSubscriber.addCallbackAndFlush(java.lang.Throwable,com.linecorp.armeria.server.HttpResponseSubscriber$State,io.netty.channel.ChannelFuture)"}, {"UPD": 0, "TOT": 6, "MOV": 5, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpResponseSubscriber.write(com.linecorp.armeria.common.HttpObject,boolean)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpResponseSubscriber.maybeLogFirstResponseBytesTransferred()"}], "spoonFilePath": "HttpResponseSubscriber.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 2, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerHandler.respond(com.linecorp.armeria.server.ServiceRequestContext,boolean,com.linecorp.armeria.common.ResponseHeadersBuilder,com.linecorp.armeria.common.HttpData,java.lang.Throwable)"}], "spoonFilePath": "HttpServerHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.RequestContextThreadLocal.getAndRemove()"}], "spoonFilePath": "RequestContextThreadLocal.java"}]}], "url": "https://github.com/line/armeria/issues/2414", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Unexpected Exception when pushing`RequestContext`", "statsSkippedReason": "", "user": "ikhoon", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "While testing gRPC server & client, I saw the following exception with `WARN` message. \r\n```java\r\n[armeria-common-worker-nio-2-1] WARN  i.n.util.concurrent.DefaultPromise - An exception was thrown by com.linecorp.armeria.server.HttpResponseSubscriber$$Lambda$630/0x000000080153f040.operationComplete()\r\njava.lang.IllegalStateException: Trying to call object wrapped with context [S][id: 0x36589007, L:/127.0.0.1:54739 - R:/127.0.0.1:54740][h2c://ihi.local:54739/armeria.GithubService/Simple#POST], but context is currently set to [S][id: 0x36589007, L:/127.0.0.1:54739 - R:/127.0.0.1:54740][h2c://ihi.local:54739/armeria.GithubService/Simple#POST]. This means the callback was called from unexpected thread or forgetting to close previous context.\r\n\tat com.linecorp.armeria.internal.RequestContextUtil.newIllegalContextPushingException(RequestContextUtil.java:46)\r\n\tat com.linecorp.armeria.server.ServiceRequestContext.push(ServiceRequestContext.java:228)\r\n\tat com.linecorp.armeria.common.logging.RequestLogListenerInvoker.invokeOnRequestLog(RequestLogListenerInvoker.java:58)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.updateAvailability(DefaultRequestLog.java:985)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.endResponse0(DefaultRequestLog.java:961)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.endResponse0(DefaultRequestLog.java:940)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.endResponse(DefaultRequestLog.java:921)\r\n\tat com.linecorp.armeria.server.HttpResponseSubscriber.lambda$write$1(HttpResponseSubscriber.java:325)\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)\r\n\tat io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)\r\n\tat io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)\r\n\tat io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:604)\r\n\tat io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\r\n\tat io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator.tryPromise(Http2CodecUtil.java:383)\r\n\tat io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator.trySuccess(Http2CodecUtil.java:349)\r\n\tat io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator.trySuccess(Http2CodecUtil.java:261)\r\n\tat io.netty.util.internal.PromiseNotificationUtil.trySuccess(PromiseNotificationUtil.java:48)\r\n\tat io.netty.channel.ChannelOutboundBuffer.safeSuccess(ChannelOutboundBuffer.java:715)\r\n\tat io.netty.channel.ChannelOutboundBuffer.remove(ChannelOutboundBuffer.java:270)\r\n\tat io.netty.channel.ChannelOutboundBuffer.removeBytes(ChannelOutboundBuffer.java:350)\r\n\tat io.netty.channel.socket.nio.NioSocketChannel.doWrite(NioSocketChannel.java:431)\r\n\tat io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:931)\r\n\tat io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.flush0(AbstractNioChannel.java:354)\r\n\tat io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:898)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1384)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:749)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:741)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:727)\r\n\tat io.netty.handler.flush.FlushConsolidationHandler.flushNow(FlushConsolidationHandler.java:206)\r\n\tat io.netty.handler.flush.FlushConsolidationHandler.flush(FlushConsolidationHandler.java:140)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:749)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:741)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:727)\r\n\tat com.linecorp.armeria.internal.TrafficLoggingHandler.flush(TrafficLoggingHandler.java:49)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:749)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:741)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:727)\r\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.flush(Http2ConnectionHandler.java:189)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:749)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:741)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:727)\r\n\tat com.linecorp.armeria.server.HttpResponseSubscriber.write(HttpResponseSubscriber.java:342)\r\n\tat com.linecorp.armeria.server.HttpResponseSubscriber.onNext(HttpResponseSubscriber.java:225)\r\n\tat com.linecorp.armeria.server.HttpResponseSubscriber.onNext(HttpResponseSubscriber.java:59)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriberWithElements(DefaultStreamMessage.java:341)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber0(DefaultStreamMessage.java:319)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber(DefaultStreamMessage.java:252)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.addObjectOrEvent(DefaultStreamMessage.java:238)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.addObject(DefaultStreamMessage.java:158)\r\n\tat com.linecorp.armeria.common.stream.AbstractStreamMessageAndWriter.tryWrite(AbstractStreamMessageAndWriter.java:74)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.tryWrite(DefaultStreamMessage.java:63)\r\n\tat com.linecorp.armeria.common.stream.StreamWriter.write(StreamWriter.java:71)\r\n\tat com.linecorp.armeria.server.grpc.ArmeriaServerCall.doSendHeaders(ArmeriaServerCall.java:242)\r\n\tat com.linecorp.armeria.server.grpc.ArmeriaServerCall.sendHeaders(ArmeriaServerCall.java:208)\r\n\tat io.grpc.stub.ServerCalls$ServerCallStreamObserverImpl.onNext(ServerCalls.java:348)\r\n\tat com.linecorp.armeria.it.grpc.GithubApiService.simple(GithubApiService.java:47)\r\n\tat com.linecorp.armeria.grpc.GithubServiceGrpc$MethodHandlers.invoke(GithubServiceGrpc.java:277)\r\n\tat io.grpc.stub.ServerCalls$UnaryServerCallHandler$UnaryServerCallListener.onHalfClose(ServerCalls.java:172)\r\n\tat com.linecorp.armeria.server.grpc.ArmeriaServerCall.invokeHalfClose(ArmeriaServerCall.java:436)\r\n\tat com.linecorp.armeria.server.grpc.ArmeriaServerCall.endOfStream(ArmeriaServerCall.java:429)\r\n\tat com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.close(ArmeriaMessageDeframer.java:313)\r\n\tat com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.closeWhenComplete(ArmeriaMessageDeframer.java:293)\r\n\tat com.linecorp.armeria.internal.grpc.HttpStreamReader.closeDeframer(HttpStreamReader.java:204)\r\n\tat com.linecorp.armeria.internal.grpc.HttpStreamReader.apply(HttpStreamReader.java:183)\r\n\tat com.linecorp.armeria.internal.grpc.HttpStreamReader.apply(HttpStreamReader.java:48)\r\n\tat java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:930)\r\n\tat java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:907)\r\n\tat java.base/java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:478)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:510)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:518)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$6.run(SingleThreadEventExecutor.java:1050)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:835)\r\n```\r\n\r\nThe error can be reproduced by executing the `simpleNonBlocking` test with 20% chance.\r\nhttps://github.com/line/armeria/blob/08afa31fbe512e65a2e38bfcd6a3315ed313c241/grpc/src/test/java/com/linecorp/armeria/it/grpc/DownstreamSimpleBenchmarkTest.java#L95-L113", "labels": ["defect"]}, {"created": "2020-01-16 03:48:42", "commits": {"5c583a41570798b1f8a80d1b5d2da7b5e0b58250": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "1f6dd12346aa36baf9a16557b40ec6043e4be2a8": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-01-20 04:04:52", "filteredCommits": [], "commitsDetails": [{"nameRev": "5c583a41570798b1f8a80d1b5d2da7b5e0b58250 tags/armeria-0.98.0~59", "commitMessage": "Add test for #2404 (Reactor non-blocking integration) (#2405)\n\nSee: #2404", "commitParents": ["e839f8acb952e3482bb4997b7c0f9d62e81ce751"], "spoonStatsSkippedReason": "", "commitHash": "5c583a41570798b1f8a80d1b5d2da7b5e0b58250", "authoredDateTime": "2020-01-16 20:58:10", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 45, "deletions": 0, "lines": 45, "filePath": "core/src/test/java/com/linecorp/armeria/internal/EventLoopThreadTest.java"}], "commitDateTime": "2020-01-16 20:58:10", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.EventLoopThreadTest"}], "spoonFilePath": "EventLoopThreadTest.java"}]}, {"nameRev": "1f6dd12346aa36baf9a16557b40ec6043e4be2a8 tags/armeria-0.98.0~56", "commitMessage": "Prevent ProGuard from pruning Reactor `NonBlocking` (#2411)\n\nRelated: #2404\r\nMotivation:\r\n\r\nWe allowed Proguard to prune all classes that are not under\r\n`com.linecorp.armeria` (except the internal ones). This can make our own\r\nforked tag interface `reactor.core.scheduler.NonBlocking` to be pruned\r\nby ProGuard, although it is currently kept indirectly and automatically.\r\nIt'll be safer if we configure ProGuard explicitly.\r\n\r\nModifications:\r\n\r\n- Add ProGuard `keep` for `reactor.core.scheduler.NonBlocking`\r\n\r\nResult:\r\n\r\n- No chance of regression", "commitParents": ["81e2a1cb5fba412a8b4908f98d0e8d28b67cfeb0"], "spoonStatsSkippedReason": "", "commitHash": "1f6dd12346aa36baf9a16557b40ec6043e4be2a8", "authoredDateTime": "2020-01-21 00:42:25", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 0, "lines": 3, "filePath": "core/build.gradle"}], "commitDateTime": "2020-01-21 00:42:25", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2404", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Schedulers.isInNonBlockingThread() should return true on EventLoop", "statsSkippedReason": "", "user": "minwoox", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0.0, "spoonMethodsChanged": 0, "TOT": 0.0, "MOV": 0.0, "INS": 0.0, "DEL": 0.0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 2, "alsoFixesPhrase": 0}, "body": "In #1665, we made our `EventLoop` implement `NonBlocking` interface so that a user who uses Project Reactor gets a warning log when he/she is using a blocking call on our `EventLoop`s.\r\nWe didn't use `NonBlocking` in Project Reactor, but added it under our own `reactor.core.scheduler` directory because we didn't want to add the Reactor dependency to the core.\r\nHowever, it doesn't seem to work so we should fix it.\r\n\r\nSample snippet from @joonhaeng:\r\n```java\r\n@Slf4j\r\n@RestController\r\npublic class DemoController {\r\n    @RequestMapping(\"/test\")\r\n    public String test() {\r\n        log.debug(\"{}\",Thread.currentThread().getName());\r\n        log.debug(\"{}\",Thread.currentThread().getClass());\r\n        String test[] = new String[] {\"1\", \"2\", \"3\", \"4\", \"5\"};\r\n        return Flux.fromArray(test).blockFirst(); // A warning log should appear.\r\n    }\r\n}\r\n```\r\n", "labels": ["defect"]}, {"created": "2020-01-10 02:37:14", "user": "minwoox", "body": "Currently, if the request is not sent and failed, we just log the request cause and dummy headers. But we can log the request headers so that a user can get more information from the exception logs.", "closed": "2020-02-26 02:15:12", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2389", "ttf": 46.000277777777775, "commits": {}, "labels": ["defect"], "title": "Log requestHeaders when it's failed to send the headers"}, {"created": "2020-01-09 06:28:14", "commits": {"75108265eda02f18871dd8b721400084422d3a13": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-01-14 03:25:45", "filteredCommits": [], "commitsDetails": [{"nameRev": "75108265eda02f18871dd8b721400084422d3a13 tags/armeria-0.98.0~67", "commitMessage": "Send periodic `102 Processing` headers for long-polling health\u2026 (#2392)\n\nMotivation:\r\n\r\nWith long-polling health check, it is currently not possible to\r\ndistinguish unresponsive servers who just accepts sockets doing nothing.\r\n`HealthCheckService` must send some informational headers periodically,\r\nsuch as `102 Processing`.\r\n\r\nModifications:\r\n\r\n- Change the format of the `armeria-lphc` header value to contain two\r\n  values:\r\n  - `maxLongPollingTimeoutSeconds`\r\n  - `pingIntervalSeconds`\r\n- Change the behavior of `HealthCheckService` to send `102 Processing`\r\n  informational headers every `pingIntervalSeconds`.\r\n  - Updated `HealthCheckServiceBuilder.longPolling()`\r\n- Change the behavior of `HealthCheckedEndpointGroup` to mark an\r\n  `Endpoint` as unhealthy when not receiving a ping for last\r\n  `pingIntervalSeconds * 2` seconds.\r\n- Miscellaneous:\r\n  - Removed `Http` from the test classes that test `HealthCheckEndpointGroup`\r\n\r\nResult:\r\n\r\n- Fixes #2386\r\n- `HealthCheckedEndpointGroup` now marks an unresponsive endpoints as\r\n  soon as possible when long-polling is enabled.\r\n- The old Armeria clients will automatically fall back to traditional\r\n  periodic health check, because it does not understand the new header\r\n  format.", "commitParents": ["c8ada44b98598d0dc793e679097ecf9cfb829ffa"], "spoonStatsSkippedReason": "", "commitHash": "75108265eda02f18871dd8b721400084422d3a13", "authoredDateTime": "2020-01-14 12:25:44", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java"}, {"insertions": 151, "deletions": 44, "lines": 195, "filePath": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckService.java"}, {"insertions": 35, "deletions": 20, "lines": 55, "filePath": "core/src/test/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceTest.java"}, {"insertions": 191, "deletions": 53, "lines": 244, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthChecker.java"}, {"insertions": 247, "deletions": 0, "lines": 247, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupLongPollingPingTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/{HttpHealthCheckedEndpointGroupTest.java => HealthCheckedEndpointGroupIntegrationTest.java}"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/{HttpHealthCheckedEndpointGroupLongPollingTest.java => HealthCheckedEndpointGroupLongPollingTest.java}"}, {"insertions": 73, "deletions": 7, "lines": 80, "filePath": "core/src/main/java/com/linecorp/armeria/server/healthcheck/HealthCheckServiceBuilder.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/{HttpHealthCheckedEndpointGroupAuthorityTest.java => HealthCheckedEndpointGroupAuthorityTest.java}"}, {"insertions": 32, "deletions": 9, "lines": 41, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroupTest.java"}], "commitDateTime": "2020-01-14 12:25:44", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.DefaultClientRequestContext.setResponseTimeoutAtMillis(long)"}], "spoonFilePath": "DefaultClientRequestContext.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupLongPollingTest"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupLongPollingTest.immediateNotification()"}, {"UPD": 7, "TOT": 8, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupLongPollingTest.longPollingDisabledOnStop()"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupLongPollingTest.waitForGroup(com.linecorp.armeria.client.endpoint.EndpointGroup,com.linecorp.armeria.client.Endpoint)"}, {"UPD": 7, "TOT": 7, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupLongPollingTest.keepEndpointHealthinessWhenLongPollingTimeout()"}, {"UPD": 5, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupLongPollingTest.periodicCheckWhenConnectionRefused()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupLongPollingTest.startServer()"}], "spoonFilePath": "HealthCheckedEndpointGroupLongPollingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.PingTask"}, {"UPD": 6, "TOT": 12, "MOV": 1, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.PendingResponse"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.setCommonHeaders(com.linecorp.armeria.common.ResponseHeaders,long,long)"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.getResponse(boolean)"}, {"UPD": 9, "TOT": 21, "MOV": 5, "INS": 5, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.serve(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.PendingResponse.cancelAllScheduledFutures()"}, {"UPD": 2, "TOT": 14, "MOV": 3, "INS": 8, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.setCommonHeaders(com.linecorp.armeria.common.AggregatedHttpResponse)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.TimeoutTask"}, {"UPD": 2, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.addCommonHeaders(com.linecorp.armeria.common.AggregatedHttpResponse,long)"}, {"UPD": 4, "TOT": 9, "MOV": 5, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.addCommonHeaders(com.linecorp.armeria.common.AggregatedHttpResponse)"}, {"UPD": 0, "TOT": 18, "MOV": 13, "INS": 2, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.newResponse(com.linecorp.armeria.common.HttpMethod,boolean)"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.getLongPollingTimeoutMillis(com.linecorp.armeria.common.HttpRequest)"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckService.onHealthCheckerUpdate(com.linecorp.armeria.server.healthcheck.HealthChecker)"}], "spoonFilePath": "HealthCheckService.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest.endpoints(com.linecorp.armeria.common.SessionProtocol,boolean)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest.initialHealthCheckCanHaveEndpoints()"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest.endpoints_withIpAndNoIp(com.linecorp.armeria.common.SessionProtocol)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest.endpoints_customAuthority(com.linecorp.armeria.common.SessionProtocol)"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest.endpoints_duplicateEntries(com.linecorp.armeria.common.SessionProtocol)"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest.endpoints_customPort(com.linecorp.armeria.common.SessionProtocol)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest.endpoints_containsUnhealthyServer(com.linecorp.armeria.common.SessionProtocol)"}], "spoonFilePath": "HealthCheckedEndpointGroupIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HealthCheckedEndpointGroupLongPollingPingTest"}], "spoonFilePath": "HealthCheckedEndpointGroupLongPollingPingTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.updateUsingPatch()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.getWhenHealthy()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.headWhenUnhealthy()"}, {"UPD": 2, "TOT": 5, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.waitTimeout()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.waitUntilHealthyWithImmediateWakeUp()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.updateUsingPutOrPost()"}, {"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.waitUntilUnhealthy()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.waitUntilUnhealthyWithImmediateWakeup()"}, {"UPD": 3, "TOT": 5, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.custom()"}, {"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.waitUntilHealthy()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.getWhenUnhealthy()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.headWhenHealthy()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceTest.longPollingDisabled()"}], "spoonFilePath": "HealthCheckServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 2, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder.longPolling(java.time.Duration)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder.longPolling(long,double,long)"}, {"UPD": 0, "TOT": 4, "MOV": 3, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder.longPolling(long)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder.build()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder"}, {"UPD": 0, "TOT": 7, "MOV": 3, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder.longPolling(long,double)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder.longPolling(java.time.Duration,double,java.time.Duration)"}, {"UPD": 0, "TOT": 11, "MOV": 6, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.HealthCheckServiceBuilder.longPolling(java.time.Duration,double)"}], "spoonFilePath": "HealthCheckServiceBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HealthCheckedEndpointGroupTest.HealthCheckServerExtension"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HealthCheckedEndpointGroupTest"}], "spoonFilePath": "HealthCheckedEndpointGroupTest.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupAuthorityTest.hostOnlyOrIpAddrOnly(java.lang.String,java.lang.String)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupAuthorityTest.clearLogs()"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupAuthorityTest.hostAndIpAddr(java.lang.String,java.lang.String,java.lang.String)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupAuthorityTest"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupAuthorityTest.alternativePort(java.lang.String,int,java.lang.String)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupAuthorityTest.build(com.linecorp.armeria.client.Endpoint)"}], "spoonFilePath": "HealthCheckedEndpointGroupAuthorityTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker.HealthCheckResponseSubscriber"}, {"UPD": 9, "TOT": 48, "MOV": 26, "INS": 1, "DEL": 12, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker.check()"}, {"UPD": 1, "TOT": 6, "MOV": 3, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker.closeAsync()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker.getMaxLongPollingSeconds(com.linecorp.armeria.common.AggregatedHttpResponse)"}, {"UPD": 0, "TOT": 9, "MOV": 0, "INS": 9, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker.HealthCheckResponseSubscriber.updateHealth()"}, {"UPD": 0, "TOT": 5, "MOV": 3, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker.ResponseTimeoutUpdater.execute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest)"}, {"UPD": 0, "TOT": 12, "MOV": 0, "INS": 12, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthChecker.HealthCheckResponseSubscriber.onNext(com.linecorp.armeria.common.HttpObject)"}], "spoonFilePath": "HttpHealthChecker.java"}]}], "url": "https://github.com/line/armeria/issues/2386", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Long-polling health check cannot detect unresponsive servers", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "With long-polling health check, it is currently not possible to distinguish unresponsive servers who just accepts sockets doing nothing. `HealthCheckService` must send some informational headers periodically, such as `102 Processing`.\r\n\r\nFor compatibility with the old long-polling `HealthCheckedEndpointGroup`, we're gonna have to update the format of the `armeria-lphc` header value.", "labels": ["defect"]}, {"created": "2020-01-08 18:57:33", "commits": {"df48dc6931a94a83fcde4d177ef8e5c5f03fb806": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-01-13 08:22:19", "filteredCommits": [], "commitsDetails": [{"nameRev": "df48dc6931a94a83fcde4d177ef8e5c5f03fb806 tags/armeria-0.98.0~70", "commitMessage": "Preserve default `CHANNEL_OPTION`s in  `ClientFactoryBuilder` (#2387)\n\nMotivation:\r\nWhen the default ClientFactoryOptions is passed to ClientFactoryBulider via `options(ClientFactoryOptionsptions)`,\r\nChannelOption.CONNECT_TIMEOUT_MILLIS is set to null.\r\nIt causes `NullPointException` in initialization of  `HttpChannelPool`. #2385\r\nhttps://github.com/line/armeria/blob/f0d870fde1088114070be31b67f7df0a21e835c6/core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java#L109-L110\r\n\r\nModifications:\r\n* Make `ClientFactoryOption.CHANNEL_OPTIONS` immutable.\r\n* Copy new CHANNEL_OPTIONS and preserve the existing one.\r\n  * Also make it immutable.\r\n\r\nResult:\r\nNo more `NullPointException` with `ClientFactoryOptions.of()` during client connection.\r\nFixes #2385", "commitParents": ["29c82d80689ffb74d22cf54347640df9d7c8224d"], "spoonStatsSkippedReason": "", "commitHash": "df48dc6931a94a83fcde4d177ef8e5c5f03fb806", "authoredDateTime": "2020-01-13 17:22:18", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 38, "deletions": 15, "lines": 53, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java"}, {"insertions": 33, "deletions": 0, "lines": 33, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java"}, {"insertions": 16, "deletions": 0, "lines": 16, "filePath": "core/src/test/java/com/linecorp/armeria/client/ClientFactoryBuilderTest.java"}], "commitDateTime": "2020-01-13 17:22:18", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientFactoryBuilderTest.shouldPreserveChannelOptionInClientFactory()"}], "spoonFilePath": "ClientFactoryBuilderTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientFactoryBuilder.option(com.linecorp.armeria.client.ClientFactoryOptionValue)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.ClientFactoryBuilder.channelOptions(java.util.Map)"}, {"UPD": 3, "TOT": 21, "MOV": 16, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.ClientFactoryBuilder.channelOption(io.netty.channel.ChannelOption,java.lang.Object)"}], "spoonFilePath": "ClientFactoryBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testDefaultClientFactoryOptions()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testEmptyClientFactoryOptions()"}], "spoonFilePath": "HttpClientIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.ClientFactoryOptions"}], "spoonFilePath": "ClientFactoryOptions.java"}]}], "url": "https://github.com/line/armeria/issues/2385", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Using ClientFactoryOptions causes NPE during client connection", "statsSkippedReason": "", "user": "max904-github", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "`ClientFactoryOptions.DEFAULT` overrides the defaults set by `ClientFactoryBuilder` which causes NPE (at `HttpChannelPool` constructor) during client connection, which makes `ClientFactoryOptions` impossible to use.\r\n\r\n**The code to reproduce the issue:**\r\n\r\n```\r\n  ClientFactoryBuilder clientFactoryBuilder = ClientFactory.builder();\r\n  clientFactoryBuilder.options(ClientFactoryOptions.of()); // or any other \"of\" method\r\n  clientBuilder.factory(clientFactoryBuilder.build());\r\n\r\n```\r\n**The exception thrown during client connect:**\r\n\r\n```\r\n  java.lang.NullPointerException\r\n    at com.linecorp.armeria.client.HttpChannelPool.<init>(HttpChannelPool.java:109)\r\n\r\n```\r\n**The code that throws NPE (`HttpChannelPool.<init>`):**\r\n\r\n```\r\n  this.connectTimeoutMillis = (Integer)baseBootstrap.config().options().get(ChannelOption.CONNECT_TIMEOUT_MILLIS);\r\n```\r\n\r\n**Analysis:**\r\n\r\n`ClientFactoryBuilder` sets some defaults during the construction [`ClientFactory.builder()` --> `new ClientFactoryBuilder()`].\r\nMore specifically it sets `CHANNEL_OPTIONS` with a default `CONNECT_TIMEOUT_MILLIS` as following:\r\n\r\n```\r\n  connectTimeoutMillis(Flags.defaultConnectTimeoutMillis());\r\n```\r\n\r\nIn the debugger I see the following after executing `ClientFactory.builder()`:\r\n```\r\n  options = {java.util.LinkedHashMap@2624}  size = 1\r\n   {com.linecorp.armeria.client.ClientFactoryOption@2629} \"CHANNEL_OPTIONS\" -> {com.linecorp.armeria.client.ClientFactoryOptionValue@2630} \"CHANNEL_OPTIONS={CONNECT_TIMEOUT_MILLIS=>3200}\"\r\n```\r\n\r\nOn a contrary, `ClientFactoryOptions` defines its own set of defaults (via its `DEFAULT_OPTIONS`) which defines empty `CHANNEL_OPTIONS` as following:\r\n\r\n```\r\n  ClientFactoryOption.CHANNEL_OPTIONS.newValue(new Object2ObjectArrayMap<>()),\r\n```\r\n\r\nWhen `ClientFactoryBuilder#options()` method invoked with any `ClientFactoryOptions` it will override previous `CHANNEL_OPTIONS` default.\r\nThen, it empties `CHANNEL_OPTIONS`, while `CONNECT_TIMEOUT_MILLIS` expected by `HttpChannelPool` and possibly by other places.\r\n\r\nIn the debugger I see the following after executing `clientFactoryBuilder.options(ClientFactoryOptions.of())`:\r\n```\r\n  {com.linecorp.armeria.client.ClientFactoryOption@2629} \"CHANNEL_OPTIONS\" -> {com.linecorp.armeria.client.ClientFactoryOptionValue@2688} \"CHANNEL_OPTIONS={}\"\r\n```\r\n\r\n**Expectation:**\r\n\r\n1. The use of `ClientFactoryOptions` should not cause any failure. `ClientFactoryOptions` defaults should not override any defaults set by `ClientFactoryBuilder`.\r\n2. The solution should only take those options defined by the user and apply those to `ClientFactoryBuilder`.\r\n3. `HttpChannelPool` should not fail with NPE when some expected configurations are missing. It should provide reasonable problem indication or/and fall back to a default.\r\n\r\n**Current Workaround:**\r\n\r\nAvoid using `ClientFactoryOptions` and use individual user defined options as a collection of `ClientFactoryOptions` and add those to `ClientFactoryBuilder` via `ClientFactoryBuilder#option()` method as following:\r\n\r\n```\r\n  Collection<ClientFactoryOptionValue<?>> clientFactoryOptions = ...\r\n  if (clientFactoryOptions != null && !clientFactoryOptions.isEmpty()) {\r\n    clientFactoryOptions.forEach(clientFactoryBuilder::option);\r\n  }\r\n  clientBuilder.factory(clientFactoryBuilder.build());\r\n```\r\n", "labels": ["defect"]}, {"created": "2019-12-16 10:04:39", "commits": {"e14613a9699ce6e483e5aea07018478fab2ee270": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2019-12-24 10:49:42", "filteredCommits": [], "commitsDetails": [{"nameRev": "e14613a9699ce6e483e5aea07018478fab2ee270 tags/armeria-0.98.0~104", "commitMessage": "Add and clean up TLS configuration methods (#2340)\n\nMotivation:\r\n\r\n- `{Server,VirtualHost}Builder.tls(SslContext)` opens a hole which\r\n  allows a user to specify a misconfigured `SslContext`, causing an\r\n  unexpected server behavior, such as what's described in #2325.\r\n- `tls()` methods do not cover all ways to build server-side `SslContext`,\r\n  such as `SslContextBuilder.forServer(InputStream, InputStream)` and\r\n  `forServer(PrivateKey, X509Certificate...)`.\r\n\r\nModifications:\r\n\r\n- Add `{Server,VirtualHost}Builder.tlsCustomizer(Consumer)}`, so we do\r\n  not have to overload all `tls()` methods with an additional `Consumer`\r\n  parameter.\r\n  - As a result, the instantiation of `SslContext` has been deferred\r\n    again to the last `build()` call, and thus `tls()` methods do not\r\n    have a `throws SSLException` clause anymore.\r\n- Deprecate all `tls()` methods that require `Consumer tlsCustomizer`.\r\n- Add more `tls()` methods to expose all ways to create an `SslContextBuilder`.\r\n- Make sure a user can customize the `SslContext` even when it's built\r\n  via `tlsSelfSigned()`\r\n- Make client-side changes for consistency:\r\n  - `ClientFactoryOption.SSL_CONTEXT_CUSTOMIZER` has been deprecated in\r\n    favor of `TLS_CUSTOMIZER`.\r\n  - `ClientFactoryBuilder.sslContextCustomizer()` has been deprecated in\r\n    favor of `tlsCustomizer()`.\r\n    - `tlsCustomizer()` is additive, unlike `sslContextCustomizer()`.\r\n  - Add `ClientFactoryBuilder.tlsNoVerify()` shortcut method\r\n  - Add `ClientFactory.insecure()`\r\n\r\nResult:\r\n\r\n- A user is given with more safe ways to construct an `SslContext`.\r\n- A user can customize an `SslContext` via `tlsCustomizer()` for both\r\n  client and server.\r\n- A user can now customize an `SslContext` via `tlsCustomizer()` even\r\n  when it was created via `tlsSelfSigned()`.\r\n- `ClientFactoryBuilder.tlsNoVerify()` shortcut method\r\n- `ClientFactory.insecure()`\r\n- Closes #2325\r\n- (Breaking) `{Server,VirtualHost}Builder.tls()` methods do not throw an\r\n  `SSLException` anymore. `build()` will throw an `IllegalStateException`\r\n  instead. As a result, any SSL configuration failure will be known when\r\n  a user calls `build()`, rather than `tls()`.\r\n- (Deprecation) `tls()` method that require `SslContext` has been\r\n  deprecated without a replacement, because it's not safe.\r\n  - This should be OK, because we provide the same set of `tls()`\r\n    methods with what's provided by `SslContextBuilder.forServer()`.\r\n    For example, a user can use `tls(InputStream, InputStream)` in #2325.\r\n- (Deprecation) `tls()` methods that require `Consumer tlsCustomizer`\r\n  have been deprecated in favor of `tlsCustomizer()`, which helps us\r\n  keep the number of overloaded `tls()` methods under control.\r\n", "commitParents": ["db47ad38554319a7d323e1acdd63e3d5c2505f5e"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "e14613a9699ce6e483e5aea07018478fab2ee270", "authoredDateTime": "2019-12-24 19:49:42", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 7, "lines": 8, "filePath": "benchmarks/src/jmh/java/com/linecorp/armeria/retrofit2/downstream/DownstreamSimpleBenchmark.java"}, {"insertions": 14, "deletions": 3, "lines": 17, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOptions.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/common/Flags.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientSniTest.java"}, {"insertions": 1, "deletions": 6, "lines": 7, "filePath": "testing-internal/src/main/java/com/linecorp/armeria/testing/internal/webapp/WebAppContainerTest.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerAutoConfigurationTest.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerStreamingTest.java"}, {"insertions": 11, "deletions": 13, "lines": 24, "filePath": "it/server/src/test/java/com/linecorp/armeria/server/http/ClientAuthIntegrationTest.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java"}, {"insertions": 2, "deletions": 8, "lines": 10, "filePath": "thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java"}, {"insertions": 1, "deletions": 3, "lines": 4, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaWebClientTest.java"}, {"insertions": 1, "deletions": 8, "lines": 9, "filePath": "testing/junit/src/test/java/com/linecorp/armeria/testing/junit/server/mock/MockWebServiceExtensionTest.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java"}, {"insertions": 142, "deletions": 0, "lines": 142, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServerBuilderTest.java"}, {"insertions": 6, "deletions": 4, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java"}, {"insertions": 12, "deletions": 15, "lines": 27, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServerTlsValidationTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java"}, {"insertions": 1, "deletions": 3, "lines": 4, "filePath": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaSslConfigurationTest.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java"}, {"insertions": 5, "deletions": 10, "lines": 15, "filePath": "dropwizard/src/main/java/com/linecorp/armeria/dropwizard/connector/ArmeriaHttpsConnectorFactory.java"}, {"insertions": 6, "deletions": 7, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/internal/SslContextUtil.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactoryTest.java"}, {"insertions": 1, "deletions": 13, "lines": 14, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerHeaderValidationTest.java"}, {"insertions": 285, "deletions": 114, "lines": 399, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java"}, {"insertions": 3, "deletions": 4, "lines": 7, "filePath": "site/src/sphinx/advanced-spring-webflux-integration.rst"}, {"insertions": 3, "deletions": 9, "lines": 12, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroupTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHost.java"}, {"insertions": 15, "deletions": 3, "lines": 18, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpHeaderUtil.java"}, {"insertions": 1, "deletions": 7, "lines": 8, "filePath": "core/src/test/java/com/linecorp/armeria/server/PortUnificationServerTest.java"}, {"insertions": 11, "deletions": 1, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryOption.java"}, {"insertions": 44, "deletions": 2, "lines": 46, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/AbstractReactiveWebServerCustomKeyAliasTest.java"}, {"insertions": 128, "deletions": 17, "lines": 145, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}, {"insertions": 8, "deletions": 8, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerConfig.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "it/server/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerInteropTest.java"}, {"insertions": 4, "deletions": 6, "lines": 10, "filePath": "examples/spring-boot-webflux/src/main/java/example/springframework/boot/webflux/HelloConfiguration.java"}], "commitDateTime": "2019-12-24 19:49:42", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2325", "ttf": 8.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "SessionProtocolNegotiationException when HTTP/2 is enforced", "statsSkippedReason": "", "user": "andrey-tpt", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Hi guys,\r\n\r\nI tried to run 4 cases on the same private key and certificate - just a basic ping request / response over TLS.  Test setup is also straightforward - create client and server and then call remote 'ping' method in the loop 10*1000 times. \r\n\r\n1. Bare gRPC / Netty client and server takes ~ 1ms on average locally\r\n2. Bare gRPC / Netty server with Armeria client (h2 protocol) also takes ~ 1ms on average locally\r\n3. Armeria server with Armeria client (https protocol) takes ~ 3ms on average locally and 8ms in AWS us-east-1 - unacceptable performance for my case. I guess this is because the communication protocol is downgraded to h1. \r\n4. Armeria server with Armeria client (h2 protocol) fails with \"SessionProtocolNegotiationException: expected: h2, actual: h1, reason: unexpected protocol negotiation result\"  \r\n\r\nFind it really surprising that Armeria can't talk to Armeria when H2 is enforced but Armeria client works fine with gRPC server and gives reasonable latency (2nd case). \r\n\r\nThe server is configured like below: \r\n\r\n```java\r\n byte[] certPem = Files.readAllBytes(new File(\"/tmp/cert.pem\").toPath());\r\n byte[] privPem = Files.readAllBytes(new File(\"/tmp/key.pem\").toPath());\r\n ServerBuilder serverBuilder  =  Server.builder()\r\n          .service(new GrpcServiceBuilder().addService(new PingService()).build());\r\n try (InputStream cert = new ByteArrayInputStream(certPem);\r\n        InputStream priv = new ByteArrayInputStream(privPem))\r\n {\r\n      serverBuilder = serverBuilder   \r\n          .https(port)\r\n          .tls(SslContextBuilder.forServer(cert, priv).build());\r\n }\r\n return serverBuilder.build();\r\n```\r\n\r\nDependencies closure:\r\n - Armeria - 0.97\r\n - gRPC - 1.25\r\n - Netty - 4.1.43.Final\r\n - netty-tcnative-boringssl-static - 2.0.26.Final \r\n\r\nSincerely,\r\nAndrey\r\n\r\nPS. Sorry for raising few issues recently - really like Armeria's model and want to use it in my projects. ", "labels": ["defect"]}, {"created": "2019-11-19 06:08:43", "commits": {"74d8425803031e82f5fb29cb74b1fcdc06281151": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "72b1d953dce6e9d5b3fa8f62ec393bbe8fe8b782": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-02-03 05:51:13", "filteredCommits": [], "commitsDetails": [{"nameRev": "74d8425803031e82f5fb29cb74b1fcdc06281151 tags/armeria-0.98.0~38", "commitMessage": "Make requestStartTime set before a connection attempt (#2436)\n\nMotivation:\r\n\r\nWhen a request involves a new connection attempt, `requestDuration` and\r\n`totalDuration` of the request must include the time taken for\r\nestablishing a connection.\r\n\r\nModifications:\r\n\r\n- Split `RequestLogBuilder.startRequest()` into `startRequest()` and\r\n  `session()`, so that `requestStartTime` can be set as soon as\r\n  possible.\r\n  - `DefaultClientRequestContext` now calls `startRequest()` at its\r\n    construction time.\r\n- `ClientConnectionTimings` is now a first-class citizen of `RequestLog`.\r\n  - Moved `ClientConnectionTimings` to `common.logging`.\r\n  - Added `RequestOnlyLog.connectionTimings()`.\r\n- Added `ClientRequestContextBuilder.connectionTimings()`.\r\n- Miscellaneous:\r\n  - Removed some constructors in `Default{Client,Service}RequestContext`\r\n    for simplicity.\r\n\r\nResult:\r\n\r\n- Fixes #2272\r\n- Client-side `RequestLog.requestStartTime()` is much more accurate now.\r\n- `requestDuration` and `totalDuration` now include the time taken for\r\n  creating a new connection.\r\n- Easier to retrieve `ClientConnectionTimings`", "commitParents": ["3d3663fd9c9e160e613563acde94b52a1a750b23"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "74d8425803031e82f5fb29cb74b1fcdc06281151", "authoredDateTime": "2020-02-03 14:51:12", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 18, "deletions": 6, "lines": 24, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java"}, {"insertions": 17, "deletions": 8, "lines": 25, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContextBuilder.java"}, {"insertions": 4, "deletions": 3, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogProperty.java"}, {"insertions": 13, "deletions": 43, "lines": 56, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java"}, {"insertions": 16, "deletions": 3, "lines": 19, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java"}, {"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/client/UserClient.java"}, {"insertions": 1, "deletions": 6, "lines": 7, "filePath": "benchmarks/src/jmh/java/com/linecorp/armeria/internal/metric/RequestMetricSupportBenchmark.java"}, {"insertions": 0, "deletions": 1, "lines": 1, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java"}, {"insertions": 65, "deletions": 54, "lines": 119, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "core/src/test/java/com/linecorp/armeria/common/logging/DefaultRequestLogTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultWebClient.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/internal/ClientUtil.java"}, {"insertions": 5, "deletions": 4, "lines": 9, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientWithRequestLogTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/internal/metric/RequestMetricSupport.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/{client => common/logging}/ClientConnectionTimingsTest.java"}, {"insertions": 7, "deletions": 43, "lines": 50, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java"}, {"insertions": 12, "deletions": 0, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestOnlyLog.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTServletIntegrationTest.java"}, {"insertions": 5, "deletions": 2, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/{client => common/logging}/ClientConnectionTimingsBuilder.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "core/src/test/java/com/linecorp/armeria/client/DefaultClientRequestContextTest.java"}, {"insertions": 6, "deletions": 10, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextBuilder.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java"}, {"insertions": 3, "deletions": 56, "lines": 59, "filePath": "core/src/main/java/com/linecorp/armeria/{client => common/logging}/ClientConnectionTimings.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java"}, {"insertions": 11, "deletions": 14, "lines": 25, "filePath": "core/src/test/java/com/linecorp/armeria/internal/metric/RequestMetricSupportTest.java"}], "commitDateTime": "2020-02-03 14:51:12", "commitUser": "trustin", "commitSpoonAstDiffStats": []}, {"nameRev": "72b1d953dce6e9d5b3fa8f62ec393bbe8fe8b782 tags/armeria-0.97.0~23", "commitMessage": "Add connection timing annotations to client spans. (#2273)\n\nAnnotations are displayed in the Zipkin UI as a table to be able to see time spent in individual steps of a span. It should be useful to users to be able to see client connection timings in spans.\r\n\r\nInterestingly, until #2272 it's likely these annotations will happen before the span start time, which is not how spans are normally recorded. It shouldn't hurt though to have them since they're just numbers in a table. The other issue is actually a lot more work, so in the meantime at least this provides useful numbers.\r\n\r\nFixes #2271 ", "commitParents": ["55504a873d84717ac3b90b8afbc840dcc84b0563"], "spoonStatsSkippedReason": "", "commitHash": "72b1d953dce6e9d5b3fa8f62ec393bbe8fe8b782", "authoredDateTime": "2019-11-26 21:01:17", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 31, "deletions": 0, "lines": 31, "filePath": "brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java"}, {"insertions": 36, "deletions": 10, "lines": 46, "filePath": "brave/src/test/java/com/linecorp/armeria/it/brave/BraveIntegrationTest.java"}], "commitDateTime": "2019-11-26 21:01:17", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.brave.BraveClient.execute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.brave.BraveClient.logTiming(brave.Span,java.lang.String,java.lang.String,long,long)"}], "spoonFilePath": "BraveClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.testServiceHasMultipleClientRequests()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.testSpanInThreadPoolHasSameTraceId()"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.testHttp1ClientTimesOut()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.testNonRequestContextThreadPatternTraceable()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.testClientInitiatedTrace()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.testServiceInitiatedTrace()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.testServerTimesOut()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.testClientTimesOut()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.testNoRequestContextTraceable()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.brave.BraveIntegrationTest.testTimingAnnotations()"}], "spoonFilePath": "BraveIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/2272", "ttf": 75.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Request time does not take into account connection creation", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0.0, "spoonMethodsChanged": 0, "TOT": 0.0, "MOV": 0.0, "INS": 0.0, "DEL": 0.0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 2, "alsoFixesPhrase": 0}, "body": "Reported in https://line-armeria.slack.com/archives/C1NGPBUH2/p1574122806097100\r\n\r\nI believe this is a regression after moving `Endpoint` selection to the begging of the request. We call `startRequest` only when about to send the request, but not anymore. This is affecting spans, but I think it also affects our `totalDuration` metric equally.", "labels": ["defect"]}, {"created": "2019-11-13 03:46:46", "commits": {"6ed874dd9dbffa9988b2476bc5fec8c1cb359b18": {"commitGHEventType": "closed", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2020-02-17 09:38:04", "filteredCommits": [], "commitsDetails": [{"nameRev": "6ed874dd9dbffa9988b2476bc5fec8c1cb359b18 tags/armeria-0.98.2~5", "commitMessage": "Fix `MAX_CONCURRENT_STREAMS` violation on client side (#2374)\n\nMotivation:\r\n\r\nCurrently an exception is thrown when a burst of requests are made for HTTP/2 clients (More specifically, when `MAX_CONCURRENT_STREAMS` is violated for pendingAcquisitions). This PR attempts to modify so that no exceptions are thrown\r\n\r\nModifications\r\n\r\n- Reschedule pending requests when exceeding `MAX_CONCURRENT_STREAMS`\r\n- Modify the definition of `pendingAcquisitionDuration` to be total duration of `pendingAcquisition` (no matter how many connections are attempted)\r\n    - `pendingAcquisitionStart` is set only once\r\n    - `pendingAcquisitionEnd` can be set more than once\r\n\r\nResult:\r\n\r\n- Fixes #2256", "commitParents": ["d168c5793fae8a15faf3981b3c4ad35a67f19f50"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "6ed874dd9dbffa9988b2476bc5fec8c1cb359b18", "authoredDateTime": "2020-02-17 18:38:02", "commitGHEventType": "closed", "commitGitStats": [{"insertions": 15, "deletions": 1, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java"}, {"insertions": 4, "deletions": 3, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/ClientConnectionTimingsBuilder.java"}, {"insertions": 257, "deletions": 26, "lines": 283, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientMaxConcurrentStreamTest.java"}], "commitDateTime": "2020-02-17 18:38:02", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2256", "ttf": 96.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Violate MAX_CONCURRENT_STREAMS on client side", "statsSkippedReason": "", "user": "ikhoon", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "After initializing HTTP2 session, Armeria client respect `MAX_CONCURRENT_STREAM`.  #1206 #1481\r\nHowever, before fully initializing HTTP2 session, Armeria client defers acquiring connection until previous request of acquiring of connection is complete and multiplex the connection. \r\n\r\nWhile the parallel requests more then `MAX_CONCURRENT_STREAMS` which is not received yet could be registered to the callback of `pendingAuquisition.handle(...)`. \r\nhttps://github.com/line/armeria/blob/e21448a95b963cc0e6f349710f7ec1cf572b87af/core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java#L270-L277\r\n\r\n It could cause `Unexpected exception:\r\nio.netty.handler.codec.http2.Http2Exception$StreamException: Maximum active streams violated for this endpoint.`.\r\n\r\n```java\r\n12:17:21.476 [armeria-eventloop-nio-4-1] WARN  c.l.a.client.HttpRequestSubscriber - [id: 0x90ccd40e, L:/127.0.0.1:61796 - R:127.0.0.1/127.0.0.1:18080][h2c] Unexpected exception:\r\nio.netty.handler.codec.http2.Http2Exception$StreamException: Maximum active streams violated for this endpoint.\r\n    at io.netty.handler.codec.http2.Http2Exception.streamError(Http2Exception.java:147)\r\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$DefaultEndpoint.checkNewStreamAllowed(DefaultHttp2Connection.java:896)\r\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$DefaultEndpoint.createStream(DefaultHttp2Connection.java:748)\r\n    at io.netty.handler.codec.http2.DefaultHttp2Connection$DefaultEndpoint.createStream(DefaultHttp2Connection.java:668)\r\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:176)\r\n    at io.netty.handler.codec.http2.DefaultHttp2ConnectionEncoder.writeHeaders(DefaultHttp2ConnectionEncoder.java:151)\r\n    at io.netty.handler.codec.http2.DecoratingHttp2FrameWriter.writeHeaders(DecoratingHttp2FrameWriter.java:45)\r\n    at com.linecorp.armeria.internal.Http2ObjectEncoder.doWriteHeaders(Http2ObjectEncoder.java:74)\r\n    at com.linecorp.armeria.internal.HttpObjectEncoder.writeHeaders(HttpObjectEncoder.java:56)\r\n    at com.linecorp.armeria.client.HttpRequestSubscriber.write0(HttpRequestSubscriber.java:298)\r\n    at com.linecorp.armeria.client.HttpRequestSubscriber.writeFirstHeader(HttpRequestSubscriber.java:183)\r\n    at com.linecorp.armeria.client.HttpRequestSubscriber.onSubscribe(HttpRequestSubscriber.java:161)\r\n    at com.linecorp.armeria.common.stream.DefaultStreamMessage.subscribe(DefaultStreamMessage.java:121)\r\n    at com.linecorp.armeria.common.stream.AbstractStreamMessage.subscribe(AbstractStreamMessage.java:93)\r\n    at com.linecorp.armeria.common.stream.AbstractStreamMessage.subscribe(AbstractStreamMessage.java:84)\r\n    at com.linecorp.armeria.common.HeaderOverridingHttpRequest.subscribe(HeaderOverridingHttpRequest.java:114)\r\n    at com.linecorp.armeria.client.HttpSessionHandler.invoke(HttpSessionHandler.java:161)\r\n    at com.linecorp.armeria.client.HttpClientDelegate.doExecute(HttpClientDelegate.java:234)\r\n    at com.linecorp.armeria.client.HttpClientDelegate.lambda$acquireConnectionAndExecute$2(HttpClientDelegate.java:142)\r\n    at java.base/java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:930)\r\n    at java.base/java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:907)\r\n    at java.base/java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:506)\r\n    at java.base/java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:2144)\r\n    at com.linecorp.armeria.client.HttpChannelPool.notifyConnect(HttpChannelPool.java:422)\r\n    at com.linecorp.armeria.client.HttpChannelPool.lambda$connect$5(HttpChannelPool.java:332)\r\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)\r\n    at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:551)\r\n    at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)\r\n    at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)\r\n    at io.netty.util.concurrent.DefaultPromise.setSuccess0(DefaultPromise.java:604)\r\n    at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104)\r\n    at com.linecorp.armeria.client.HttpSessionHandler.userEventTriggered(HttpSessionHandler.java:278)\r\n....\r\n```\r\n\r\nI think we need to reschedule the pending requests which are registered in the callback. When the number of pending requests is larger than received `MAX_CONCURRENT_STREAM`, a new connection should be created.", "labels": ["defect"]}, {"created": "2019-10-15 09:08:42", "commits": {"5647766bf11b2bdf0e650b5a88ed7837b5efa317": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-10-17 07:34:57", "filteredCommits": [], "commitsDetails": [{"nameRev": "5647766bf11b2bdf0e650b5a88ed7837b5efa317 tags/armeria-0.95.0~17", "commitMessage": "Fix `ClassCastException` when calling `*HeadersBuilder.build()`\u2026 (#2193)\n\nMotivation:\r\n\r\nThe following code, which calls `*HeadersBuilder.build()` twice, fails\r\nwith a `ClassCastException`.\r\n\r\n    HttpHeadersBuilder b = HttpHeaders.builder();\r\n    b.add(\"foo\", \"bar\");\r\n    b.build();\r\n    b.build(); // Throws a ClassCastException\r\n\r\nModifications:\r\n\r\n- Make sure the `parent` is of a desired type. Rebuild if not.\r\n\r\nResult:\r\n\r\n- Fixes #2190", "commitParents": ["84362c4ae1b85f11e4b0fd422c6db9d25e513484"], "spoonStatsSkippedReason": "", "commitHash": "5647766bf11b2bdf0e650b5a88ed7837b5efa317", "authoredDateTime": "2019-10-17 16:34:56", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 7, "deletions": 0, "lines": 7, "filePath": "core/src/test/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilderTest.java"}, {"insertions": 15, "deletions": 8, "lines": 23, "filePath": "core/src/test/java/com/linecorp/armeria/common/DefaultHttpHeadersBuilderTest.java"}, {"insertions": 5, "deletions": 1, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/common/DefaultResponseHeadersBuilder.java"}, {"insertions": 11, "deletions": 4, "lines": 15, "filePath": "core/src/test/java/com/linecorp/armeria/common/DefaultResponseHeadersBuilderTest.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/AbstractHttpHeadersBuilder.java"}, {"insertions": 5, "deletions": 1, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/common/DefaultRequestHeadersBuilder.java"}, {"insertions": 8, "deletions": 1, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/common/DefaultHttpHeadersBuilder.java"}], "commitDateTime": "2019-10-17 16:34:56", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.AbstractHttpHeadersBuilder.updateParent(com.linecorp.armeria.common.HttpHeadersBase)"}], "spoonFilePath": "AbstractHttpHeadersBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultRequestHeadersBuilder.build()"}], "spoonFilePath": "DefaultRequestHeadersBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.DefaultRequestHeadersBuilderTest.buildTwice()"}], "spoonFilePath": "DefaultRequestHeadersBuilderTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultResponseHeadersBuilderTest.validation()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.DefaultResponseHeadersBuilderTest.buildTwice()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultResponseHeadersBuilderTest.noMutationNoCopy()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultResponseHeadersBuilderTest.mutationAfterBuild()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultResponseHeadersBuilderTest"}], "spoonFilePath": "DefaultResponseHeadersBuilderTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultHttpHeadersBuilder.build()"}], "spoonFilePath": "DefaultHttpHeadersBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultResponseHeadersBuilder.build()"}], "spoonFilePath": "DefaultResponseHeadersBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultHttpHeadersBuilderTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultHttpHeadersBuilderTest.set()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultHttpHeadersBuilderTest.empty()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultHttpHeadersBuilderTest.mutationAfterBuild()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultHttpHeadersBuilderTest.mutationEndOfStreamOnly()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.DefaultHttpHeadersBuilderTest.buildTwice()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultHttpHeadersBuilderTest.noMutationNoCopy()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultHttpHeadersBuilderTest.mutation()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultHttpHeadersBuilderTest.add()"}], "spoonFilePath": "DefaultHttpHeadersBuilderTest.java"}]}], "url": "https://github.com/line/armeria/issues/2190", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`ClassCastException` while building a `Client` with additional headers", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```\r\nCaused by: java.lang.ClassCastException: com.linecorp.armeria.common.HttpHeadersBase cannot be cast to com.linecorp.armeria.common.HttpHeaders\r\n    at com.linecorp.armeria.common.DefaultHttpHeadersBuilder.build(DefaultHttpHeadersBuilder.java:38)\r\n    at com.linecorp.armeria.client.AbstractClientOptionsBuilder.buildOptions(AbstractClientOptionsBuilder.java:430)\r\n    at com.linecorp.armeria.client.ClientBuilder.build(ClientBuilder.java:162)\r\n```", "labels": ["defect", "good first issue"]}, {"created": "2019-10-11 02:47:12", "user": "alex-lx", "body": "The Armeria using the shared `Tracing` instance created by the sleuth-starter. Is it encouraged or necessary to use two `Tracing` instance for each of them?\r\nHere's the log\r\n```\r\n2019-10-11 10:20:07.035 WARN  [RMI TCP Connection(4)-10.0.5.2] c.l.a.c.b.RequestContextCurrentTraceContext Attempted to propagate trace context, but no request context available. Did you forget to use RequestContext.contextAwareExecutor() or RequestContext.makeContextAware()?\r\ncom.linecorp.armeria.common.brave.RequestContextCurrentTraceContext$LogRequestContextWarningOnce$NoRequestContextException: null\r\n\tat com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext$LogRequestContextWarningOnce$ClassLoaderHack.<clinit>(RequestContextCurrentTraceContext.java:266)\r\n\tat com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext$LogRequestContextWarningOnce.get(RequestContextCurrentTraceContext.java:254)\r\n\tat com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext$LogRequestContextWarningOnce.get(RequestContextCurrentTraceContext.java:247)\r\n\tat com.linecorp.armeria.common.RequestContext.mapCurrent(RequestContext.java:108)\r\n\tat com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext.getRequestContextOrWarnOnce(RequestContextCurrentTraceContext.java:232)\r\n\tat com.linecorp.armeria.common.brave.RequestContextCurrentTraceContext.get(RequestContextCurrentTraceContext.java:143)\r\n\tat brave.Tracer.currentSpan(Tracer.java:440)\r\n\tat org.springframework.cloud.sleuth.instrument.reactor.ReactorSleuth.scopePassingSpanSubscription(ReactorSleuth.java:113)\r\n\tat org.springframework.cloud.sleuth.instrument.reactor.ReactorSleuth.lambda$scopePassingSpanOperator$1(ReactorSleuth.java:87)\r\n\tat reactor.core.publisher.MonoLift.subscribe(MonoLift.java:41)\r\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:3590)\r\n\tat reactor.core.publisher.Mono.subscribeWith(Mono.java:3696)\r\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:3584)\r\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:3551)\r\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:3523)\r\n\tat io.lettuce.core.AbstractRedisClient.initializeChannelAsync(AbstractRedisClient.java:289)\r\n\tat io.lettuce.core.RedisClient.connectStatefulAsync(RedisClient.java:314)\r\n\tat io.lettuce.core.RedisClient.connectStandaloneAsync(RedisClient.java:271)\r\n\tat io.lettuce.core.RedisClient.connect(RedisClient.java:204)\r\n\tat org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.lambda$getConnection$1(StandaloneConnectionProvider.java:113)\r\n\tat java.util.Optional.orElseGet(Optional.java:267)\r\n\tat org.springframework.data.redis.connection.lettuce.StandaloneConnectionProvider.getConnection(StandaloneConnectionProvider.java:113)\r\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getNativeConnection(LettuceConnectionFactory.java:1085)\r\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory$SharedConnection.getConnection(LettuceConnectionFactory.java:1065)\r\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getSharedReactiveConnection(LettuceConnectionFactory.java:875)\r\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getReactiveConnection(LettuceConnectionFactory.java:376)\r\n\tat org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory.getReactiveConnection(LettuceConnectionFactory.java:90)\r\n\tat org.springframework.boot.actuate.redis.RedisReactiveHealthIndicator.doHealthCheck(RedisReactiveHealthIndicator.java:48)\r\n\tat org.springframework.boot.actuate.health.AbstractReactiveHealthIndicator.health(AbstractReactiveHealthIndicator.java:34)\r\n\tat org.springframework.boot.actuate.autoconfigure.health.HealthIndicatorRegistryBeans$ReactiveHealthIndicators.lambda$adapt$1(HealthIndicatorRegistryBeans.java:61)\r\n\tat org.springframework.boot.actuate.health.CompositeHealthIndicator.health(CompositeHealthIndicator.java:98)\r\n\tat org.springframework.boot.actuate.health.HealthEndpoint.health(HealthEndpoint.java:50)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:244)\r\n\tat org.springframework.boot.actuate.endpoint.invoke.reflect.ReflectiveOperationInvoker.invoke(ReflectiveOperationInvoker.java:76)\r\n\tat org.springframework.boot.actuate.endpoint.annotation.AbstractDiscoveredOperation.invoke(AbstractDiscoveredOperation.java:61)\r\n\tat org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:126)\r\n\tat org.springframework.boot.actuate.endpoint.jmx.EndpointMBean.invoke(EndpointMBean.java:99)\r\n\tat com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:819)\r\n\tat com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)\r\n\tat javax.management.remote.rmi.RMIConnectionImpl.doOperation(RMIConnectionImpl.java:1468)\r\n\tat javax.management.remote.rmi.RMIConnectionImpl.access$300(RMIConnectionImpl.java:76)\r\n\tat javax.management.remote.rmi.RMIConnectionImpl$PrivilegedOperation.run(RMIConnectionImpl.java:1309)\r\n\tat javax.management.remote.rmi.RMIConnectionImpl.doPrivilegedOperation(RMIConnectionImpl.java:1401)\r\n\tat javax.management.remote.rmi.RMIConnectionImpl.invoke(RMIConnectionImpl.java:829)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat sun.rmi.server.UnicastServerRef.dispatch(UnicastServerRef.java:357)\r\n\tat sun.rmi.transport.Transport$1.run(Transport.java:200)\r\n\tat sun.rmi.transport.Transport$1.run(Transport.java:197)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat sun.rmi.transport.Transport.serviceCall(Transport.java:196)\r\n\tat sun.rmi.transport.tcp.TCPTransport.handleMessages(TCPTransport.java:573)\r\n\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run0(TCPTransport.java:834)\r\n\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.lambda$run$0(TCPTransport.java:688)\r\n\tat java.security.AccessController.doPrivileged(Native Method)\r\n\tat sun.rmi.transport.tcp.TCPTransport$ConnectionHandler.run(TCPTransport.java:687)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nAnd the dependencies(part):\r\n```groovy\r\n    [\r\n            'armeria-grpc',\r\n            'armeria-tomcat',\r\n            'armeria-logback',\r\n            'armeria-rxjava',\r\n            'armeria-spring-boot-starter',\r\n            'armeria-spring-boot-actuator-starter',\r\n            'armeria-brave'\r\n    ].each {\r\n        implementation(\"com.linecorp.armeria:${it}\")\r\n    }\r\n    implementation('org.springframework.boot:spring-boot-starter-actuator')\r\n    implementation('org.springframework.boot:spring-boot-starter-data-redis')\r\n    implementation('org.springframework.cloud:spring-cloud-starter-sleuth')\r\n    implementation('org.springframework.cloud:spring-cloud-starter-zipkin')\r\n```\r\nAnd some spring configuration:\r\n```java\r\n    @Bean\r\n    CurrentTraceContext.Builder currentTraceContext() {\r\n        return RequestContextCurrentTraceContext.builder();\r\n    }\r\n```", "closed": "2019-10-23 07:52:50", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2181", "ttf": 12.000277777777777, "commits": {}, "labels": ["defect", "question"], "title": "RequestContextCurrentTraceContext warns when using with `spring-data-redis-starter` and `spring-cloud-starter-zipkin`"}, {"created": "2019-10-03 00:51:10", "commits": {"987fd8ec504a7b72f558efec990812207d59e7c9": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-10-04 01:43:58", "filteredCommits": [], "commitsDetails": [{"nameRev": "987fd8ec504a7b72f558efec990812207d59e7c9 tags/armeria-0.95.0~41", "commitMessage": "Fix EndpointGroup.of(Iterable) type (#2146)\n\nFixes #2143", "commitParents": ["c3b072014ff50f6013461ed2bdf5ff8a076610d1"], "spoonStatsSkippedReason": "", "commitHash": "987fd8ec504a7b72f558efec990812207d59e7c9", "authoredDateTime": "2019-10-04 10:43:57", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 1, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/EndpointGroupTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroup.java"}], "commitDateTime": "2019-10-04 10:43:57", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [], "spoonFilePath": "EndpointGroup.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 4, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.EndpointGroupTest.orElse()"}], "spoonFilePath": "EndpointGroupTest.java"}]}], "url": "https://github.com/line/armeria/issues/2143", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Wrong type parameter in `EndpointGroup.of(Iterable)`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "`Iterable<EndpointGroup>` -> `Iterable<? extends EndpointGroup>`", "labels": ["defect"]}, {"created": "2019-09-26 10:53:25", "commits": {"c3b072014ff50f6013461ed2bdf5ff8a076610d1": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-10-12 01:56:39", "filteredCommits": [], "commitsDetails": [{"nameRev": "c3b072014ff50f6013461ed2bdf5ff8a076610d1 tags/armeria-0.95.0~42", "commitMessage": "Use TreeMap in Version Class to Sort the Versions (#2145)\n\nMotivation:\r\n\r\nFix sorting defect #2117\r\n\r\nModifications:\r\n\r\nUse a TreeMap instead of a HashMap when identifying versions.\r\n\r\nResult:\r\n\r\nVersions are now sorted by their artifactId, which is the TreeMap key.\r\nDocService displays the modules sorted alphabetically.", "commitParents": ["9fb403e14f333ba08e2fb7347e698c09ed8b87bc"], "spoonStatsSkippedReason": "", "commitHash": "c3b072014ff50f6013461ed2bdf5ff8a076610d1", "authoredDateTime": "2019-10-03 21:43:11", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/Version.java"}], "commitDateTime": "2019-10-04 10:43:11", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.util.Version.identify(java.lang.ClassLoader)"}], "spoonFilePath": "Version.java"}]}], "url": "https://github.com/line/armeria/issues/2117", "ttf": 15.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Version information in `DocService` index page is not sorted.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Could be sorted for aesthetics' sake:\r\n\r\n![image](https://user-images.githubusercontent.com/173918/65683043-44c5ad80-e097-11e9-8d59-17283fa0703f.png)\r\n", "labels": ["defect", "good first issue"]}, {"created": "2019-09-26 10:48:23", "commits": {"62021f3c334d548c31d8756dc68dfd8726b5dfae": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2019-12-05 06:48:15", "filteredCommits": [], "commitsDetails": [{"nameRev": "62021f3c334d548c31d8756dc68dfd8726b5dfae tags/armeria-0.97.0~12", "commitMessage": "Automatic redirection with a trailing slash (#2292)\n\nMotivation:\r\n\r\nFor example, if a user bound a service at `prefix:/docs`, the service\r\nwill get requests only when the request path starts with `/docs/`, which\r\nmeans `/docs` will not be matched.\r\n\r\nThis is not a problem when there is no other mappings that match `/docs`\r\nbecause Armeria will automatically redirect you to `/docs/`.\r\n\r\nHowever, the following code will not work:\r\n\r\n    // `/docs` will not be redirected to `/docs/` but handled by\r\n    // `HttpFileService`.\r\n    Server server =\r\n        Server.builder()\r\n              .service(\"prefix:/docs\", new DocService())\r\n              .service(\"prefix:/\", HttpFileService.of(...))\r\n              .build();\r\n\r\n... because the `HttpFileService` will handle the request to `/docs`.\r\n\r\nTo address this issue, we need to introduce some special casing for the\r\npath without a trailing slash unless there's an explicit binding at it:\r\n\r\n    // `/docs` will not be redirected to `/docs/` but handled by\r\n    // `someOtherService`.\r\n    Server server =\r\n        Server.builder()\r\n              .service(\"prefix:/docs\", new DocService())\r\n              .service(\"/docs\", someOtherService)\r\n              .build();\r\n\r\nModifications:\r\n\r\n- Modified `Routers.router()` to add the redirect mappings that maps to\r\n  the fallback service for `EXACT`, `PREFIX` and `PARAMETERIZED` path\r\n  types.\r\n  - `FallbackService.handleNotFound()` will send a redirect response.\r\n- Modified `RoutingTrie` to have precedence (high or low) for values.\r\n  - Redirect mappings will have low precedence while other will have\r\n    high precedence, so that a user-specified mapping has precedence.\r\n- Miscellaneous:\r\n  - `Router.findAll()` now returns `List` instead of `Stream`.\r\n  - Tiny optimization in `CompositeRouter.findAll()`\r\n  - Made `RoutingTrie` completely immutable.\r\n    - Added `RoutingTrieBuilder` and `NodeBuilder`.\r\n\r\nResult:\r\n\r\n- Fixes #2116\r\n- Known issues:\r\n  - `GLOB`, `REGEX` and `REGEX_WITH_PREFIX` path types are unsupported,\r\n    although this is expected due to complexity and ambiguity.", "commitParents": ["cc57ef9236d715b14cc784a053d27f8913f648dd"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "62021f3c334d548c31d8756dc68dfd8726b5dfae", "authoredDateTime": "2019-12-05 15:48:15", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 18, "deletions": 6, "lines": 24, "filePath": "core/src/main/java/com/linecorp/armeria/server/CompositeRouter.java"}, {"insertions": 79, "deletions": 20, "lines": 99, "filePath": "core/src/test/java/com/linecorp/armeria/server/RoutingTrieTest.java"}, {"insertions": 4, "deletions": 5, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/RouteCache.java"}, {"insertions": 104, "deletions": 0, "lines": 104, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerAutoRedirectTest.java"}, {"insertions": 38, "deletions": 23, "lines": 61, "filePath": "core/src/main/java/com/linecorp/armeria/server/Routers.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/server/Router.java"}, {"insertions": 52, "deletions": 379, "lines": 431, "filePath": "core/src/main/java/com/linecorp/armeria/server/RoutingTrie.java"}, {"insertions": 422, "deletions": 0, "lines": 422, "filePath": "core/src/main/java/com/linecorp/armeria/server/RoutingTrieBuilder.java"}, {"insertions": 7, "deletions": 6, "lines": 13, "filePath": "core/src/test/java/com/linecorp/armeria/server/RouterTest.java"}], "commitDateTime": "2019-12-05 15:48:15", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2116", "ttf": 69.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`prefix` path mapping is overly strict.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "For example, if a user bound a service at `prefix:/docs`, the service\r\nwill get requests only when the request path starts with `/docs/`, which\r\nmeans `/docs` will not be matched.\r\n\r\nThis is not a problem when there is no other mappings that match `/docs`\r\nbecause Armeria will automatically redirect you to `/docs/`.\r\n\r\nHowever, the following code will not work:\r\n\r\n```java\r\n// `/docs` will not be redirected to `/docs/` but handled by\r\n// `HttpFileService`.\r\nServer server =\r\n    Server.builder()\r\n          .service(\"prefix:/docs\", new DocService())\r\n          .service(\"prefix:/\", HttpFileService.of(...))\r\n          .build();\r\n```\r\n\r\n... because the `HttpFileService` will handle the request to `/docs`.\r\n\r\nTo address this issue, we need to introduce some special casing for the\r\npath without a trailing slash.\r\n\r\nHowever, the redirection should not occur when there's an explicit binding\r\nfor the path without a trailing slash:\r\n\r\n```java\r\n// `/docs` will not be redirected to `/docs/` but handled by\r\n// `someOtherService`.\r\nServer server =\r\n    Server.builder()\r\n          .service(\"prefix:/docs\", new DocService())\r\n          .service(\"/docs\", someOtherService)\r\n          .build();\r\n```", "labels": ["breaking change", "defect"]}, {"created": "2019-09-23 15:42:17", "commits": {"3959fc3b351fd5841ea0a0ef56b2c0379a836926": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-09-25 04:48:19", "filteredCommits": [], "commitsDetails": [{"nameRev": "3959fc3b351fd5841ea0a0ef56b2c0379a836926 tags/armeria-0.93.0~11", "commitMessage": "Make Dropwizard Metrics and Prometheus optional for Spring Boot integration (#2107)\n\nMotivation:\r\n\r\nA user may not want to pull in Dropwizard Metrics at all.\r\n\r\nModifications:\r\n\r\n- Access anything related with Dropwizard using the reflection API.\r\n- Make `io.dropwizard.metrics:metrics-json` optional.\r\n\r\nResult:\r\n\r\n- Fixes #2106\r\n- A user can exclude `io.dropwizard.metrics:metrics-core` as well as\r\n  `metrics-json`.", "commitParents": ["6dbf75f328a6de1c80c47ad9a27ad4a4c10bfaf8"], "spoonStatsSkippedReason": "", "commitHash": "3959fc3b351fd5841ea0a0ef56b2c0379a836926", "authoredDateTime": "2019-09-25 13:48:19", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 32, "deletions": 59, "lines": 91, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java"}, {"insertions": 6, "deletions": 2, "lines": 8, "filePath": "spring/boot-autoconfigure/build.gradle"}, {"insertions": 6, "deletions": 2, "lines": 8, "filePath": "spring/boot1-autoconfigure/build.gradle"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "examples/spring-boot-tomcat/src/test/java/example/springframework/boot/tomcat/HelloIntegrationTest.java"}, {"insertions": 68, "deletions": 0, "lines": 68, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/PrometheusSupport.java"}, {"insertions": 58, "deletions": 0, "lines": 58, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/DropwizardSupport.java"}, {"insertions": 8, "deletions": 2, "lines": 10, "filePath": "spring/boot-webflux-autoconfigure/build.gradle"}], "commitDateTime": "2019-09-25 13:48:19", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.PrometheusSupport"}], "spoonFilePath": "PrometheusSupport.java"}, {"spoonMethods": [{"UPD": 6, "TOT": 26, "MOV": 9, "INS": 6, "DEL": 5, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings(com.linecorp.armeria.server.ServerBuilder,com.linecorp.armeria.spring.ArmeriaSettings,io.micrometer.core.instrument.MeterRegistry,java.util.List)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.contentEncodingDecorator(java.lang.String[],java.lang.String[],long)"}, {"UPD": 6, "TOT": 9, "MOV": 3, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.addPrometheusExposition(com.linecorp.armeria.spring.ArmeriaSettings,com.linecorp.armeria.server.ServerBuilder,io.micrometer.prometheus.PrometheusMeterRegistry)"}, {"UPD": 3, "TOT": 6, "MOV": 3, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings(com.linecorp.armeria.server.ServerBuilder,com.linecorp.armeria.spring.ArmeriaSettings,io.micrometer.core.instrument.MeterRegistry,java.util.List).1.doGet(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "ArmeriaConfigurationUtil.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "example.springframework.boot.tomcat.HelloIntegrationTest.healthCheck()"}], "spoonFilePath": "HelloIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.DropwizardSupport"}], "spoonFilePath": "DropwizardSupport.java"}]}], "url": "https://github.com/line/armeria/issues/2106", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Accidental strict dep on codahale metrics", "statsSkippedReason": "", "user": "adriancole", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "ArmeriaConfigurationUtil calls `meterRegistry instanceof DropwizardMeterRegistry` which results in `java.lang.ClassNotFoundException: com.codahale.metrics.json.MetricsModule` if you excluded codahale. I think we want to do Class.forName or similar to guard instead.", "labels": ["defect"]}, {"created": "2019-09-17 06:30:16", "commits": {"01ac6d3b11934fcb4ff4b20047e142f4a3107c73": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-09-18 03:21:04", "filteredCommits": [], "commitsDetails": [{"nameRev": "01ac6d3b11934fcb4ff4b20047e142f4a3107c73 tags/armeria-0.92.0~15", "commitMessage": "Fix not to raise an exception that indicates the log should\u2026 (#2083)\n\n\u2026 have at least one child in RetryingClient\r\n\r\nMotivation:\r\nIn `RetryingClient`, it always brings the response log from the last child to finish retrying.\r\nHowever, an exception can be raised before `RetryingClient` sends a request which means it does not have any child yet.\r\n\r\nModifications:\r\n- When an exception is raised even before first attempt\r\n  - Call `logBuilder.endRequest(cause)` and `logBuilder.endResponse(cause)` on the `logBuilder` from the initial `ClientRequestContext`.\r\n- When an excpetion is raised during the retrying\r\n  - Call `logBuilder.endResponse(cause)` on the `logBuilder` from the initial `ClientRequestContext`.\r\n\r\nResult:\r\n- Fix #2082\r\n- `IllegalStateException` that indicates the log should have at least one child is no longer raised when retrying.", "commitParents": ["c87e9cb3f47a0667442606601755f6638776a46a"], "spoonStatsSkippedReason": "", "commitHash": "01ac6d3b11934fcb4ff4b20047e142f4a3107c73", "authoredDateTime": "2019-09-18 12:21:03", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java"}, {"insertions": 13, "deletions": 8, "lines": 21, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java"}, {"insertions": 30, "deletions": 3, "lines": 33, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientTest.java"}, {"insertions": 12, "deletions": 8, "lines": 20, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java"}, {"insertions": 12, "deletions": 1, "lines": 13, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/client/retry/RetryingRpcClientTest.java"}], "commitDateTime": "2019-09-18 12:21:03", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 15, "MOV": 4, "INS": 8, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.client.retry.RetryingRpcClientTest.doNotRetryWhenResponseIsCancelled()"}], "spoonFilePath": "RetryingRpcClientTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.newDerivedContext(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.Request,int)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.newDerivedContext(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.Request,boolean)"}], "spoonFilePath": "RetryingClient.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.handleException(com.linecorp.armeria.client.ClientRequestContext,java.util.concurrent.CompletableFuture,java.lang.Throwable)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.handleException(com.linecorp.armeria.client.ClientRequestContext,java.util.concurrent.CompletableFuture,java.lang.Throwable,boolean)"}, {"UPD": 1, "TOT": 8, "MOV": 1, "INS": 5, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.doExecute0(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcRequest,com.linecorp.armeria.common.RpcResponse,java.util.concurrent.CompletableFuture)"}], "spoonFilePath": "RetryingRpcClient.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.shouldGetExceptionWhenFactoryIsClosed()"}, {"UPD": 0, "TOT": 9, "MOV": 2, "INS": 6, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.doNotRetryWhenRequestIsAborted()"}, {"UPD": 1, "TOT": 17, "MOV": 5, "INS": 9, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.doNotRetryWhenResponseIsAborted()"}], "spoonFilePath": "RetryingHttpClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.handleBackoff(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpResponse,java.util.concurrent.CompletableFuture,com.linecorp.armeria.common.HttpResponse,java.lang.Runnable,boolean)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.handleException(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,java.util.concurrent.CompletableFuture,java.lang.Throwable,boolean)"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.handleException(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,java.util.concurrent.CompletableFuture,java.lang.Throwable)"}, {"UPD": 1, "TOT": 7, "MOV": 2, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute0(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpResponse,java.util.concurrent.CompletableFuture,boolean)"}], "spoonFilePath": "RetryingHttpClient.java"}]}], "url": "https://github.com/line/armeria/issues/2082", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "RetryingClient does not have a child request if a root request is already done", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I'm pretty not sure how to reproduce it but here is the stacktrace from our service.\r\n\r\n* OS: Linux\r\n* Client: Armeria-0.91.0\r\n* Server: Armeria-0.88.0\r\n\r\n```\r\nCaused by: java.lang.IllegalStateException: at least one child should be already added\r\n\tat com.linecorp.armeria.internal.shaded.guava.base.Preconditions.checkState(Preconditions.java:508)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.endResponseWithLastChild(DefaultRequestLog.java:234)\r\n\tat com.linecorp.armeria.client.retry.RetryingClient.onRetryingComplete(RetryingClient.java:128)\r\n\tat com.linecorp.armeria.client.retry.RetryingHttpClient.handleException(RetryingHttpClient.java:204)\r\n\tat com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute0(RetryingHttpClient.java:151)\r\n\tat com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute(RetryingHttpClient.java:141)\r\n\tat com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute(RetryingHttpClient.java:58)\r\n\tat com.linecorp.armeria.client.retry.RetryingClient.execute(RetryingClient.java:115)\r\n\tat com.linecorp.armeria.client.metric.MetricCollectingClient.execute(MetricCollectingClient.java:73)\r\n\tat com.linecorp.armeria.client.tracing.HttpTracingClient.execute(HttpTracingClient.java:154)\r\n\tat com.linecorp.armeria.client.tracing.HttpTracingClient.execute(HttpTracingClient.java:63)\r\n\tat com.linecorp.armeria.internal.ClientUtil.pushAndExecute(ClientUtil.java:82)\r\n\tat com.linecorp.armeria.internal.ClientUtil.initContextAndExecuteWithFallback(ClientUtil.java:51)\r\n\tat com.linecorp.armeria.client.UserClient.execute(UserClient.java:148)\r\n\tat com.linecorp.armeria.client.DefaultHttpClient.execute(DefaultHttpClient.java:99)\r\n\tat com.linecorp.armeria.client.DefaultHttpClient.execute(DefaultHttpClient.java:90)\r\n\tat com.linecorp.armeria.client.DefaultHttpClient.execute(DefaultHttpClient.java:117)\r\n\tat com.linecorp.armeria.client.DefaultHttpClient.execute(DefaultHttpClient.java:113)\r\n\tat com.linecorp.armeria.client.HttpClient.execute(HttpClient.java:217)\r\n\tat com.linecorp.armeria.client.HttpClient.get(HttpClient.java:259)\r\n```\r\n", "labels": ["defect"]}, {"created": "2019-09-17 02:02:14", "commits": {"095506b2a49d41ccd79f431943b5d9169f2b0bab": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-09-19 09:35:48", "filteredCommits": [], "commitsDetails": [{"nameRev": "095506b2a49d41ccd79f431943b5d9169f2b0bab tags/armeria-0.92.0~8", "commitMessage": "Allow Spring WebFlux `DefaultWebClient` to subscribe to respons\u2026 (#2087)\n\nInspired by @socar-brad's work: #2080 and #2081\r\nTest case written by @socar-brad\r\n\r\nMotivation:\r\n\r\nPreviously, Spring WebFlux `DefaultWebClient` subscribed only once to\r\nthe response body stream. However, since 5.1.3, it may subscribe more\r\nthan once:\r\n\r\n- https://github.com/spring-projects/spring-framework/blob/c187cb2fa13af2a6ff6e92d588ba70b458707460/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java#L443-L446\r\n\r\nModifications:\r\n\r\n- Improve `ArmetiaHttpClientResponseSubscriber` so that the caller can\r\n  subscribe to its `ResponseBodyPublisher` multiple times, although only\r\n  the first `Subscriber` will get the actual content.\r\n  - However, this limitation is just enough because what\r\n    `DefaultWebClient` tries to do is just draining the body stream.\r\n- Clean-up\r\n  - Use `SubscriptionOption` to simplify the completion logic.\r\n\r\nResult:\r\n\r\n- Fixes #2080", "commitParents": ["81ffb5af7c263d1ea3188e1c74054198059c9ec4"], "spoonStatsSkippedReason": "", "commitHash": "095506b2a49d41ccd79f431943b5d9169f2b0bab", "authoredDateTime": "2019-09-19 18:35:47", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpConnector.java"}, {"insertions": 14, "deletions": 0, "lines": 14, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaWebClientTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ArmeriaClientHttpResponseTest.java"}, {"insertions": 110, "deletions": 87, "lines": 197, "filePath": "spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaHttpClientResponseSubscriber.java"}], "commitDateTime": "2019-09-19 18:35:47", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 3, "TOT": 12, "MOV": 6, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.onNext(com.linecorp.armeria.common.HttpObject)"}, {"UPD": 1, "TOT": 8, "MOV": 3, "INS": 1, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.toResponseBodyPublisher()"}, {"UPD": 1, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.complete(java.lang.Throwable)"}, {"UPD": 6, "TOT": 19, "MOV": 9, "INS": 1, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.ResponseBodyPublisher.request(long)"}, {"UPD": 4, "TOT": 11, "MOV": 2, "INS": 4, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.ResponseBodyPublisher"}, {"UPD": 7, "TOT": 17, "MOV": 2, "INS": 7, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.ResponseBodyPublisher.cancel()"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.onComplete()"}, {"UPD": 4, "TOT": 12, "MOV": 7, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.apply(java.lang.Void,java.lang.Throwable)"}, {"UPD": 4, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.ensureSubscribed(java.lang.Object)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.ResponseBodyPublisher.relayOnComplete()"}, {"UPD": 0, "TOT": 9, "MOV": 5, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.ResponseBodyPublisher.subscribe(org.reactivestreams.Subscriber)"}, {"UPD": 0, "TOT": 3, "MOV": 2, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.ResponseBodyPublisher.relayOnError(java.lang.Throwable)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.httpHeadersFuture()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.ensureSubscribed()"}, {"UPD": 2, "TOT": 8, "MOV": 1, "INS": 3, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.ResponseBodyPublisher.relayOnNext(com.linecorp.armeria.common.HttpObject)"}, {"UPD": 2, "TOT": 8, "MOV": 5, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber.onError(java.lang.Throwable)"}], "spoonFilePath": "ArmeriaHttpClientResponseSubscriber.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaClientHttpResponseTest.response(com.linecorp.armeria.spring.web.reactive.ArmeriaHttpClientResponseSubscriber,com.linecorp.armeria.common.HttpHeaders)"}], "spoonFilePath": "ArmeriaClientHttpResponseTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaWebClientTest.getConflictUsingBodyToMono()"}], "spoonFilePath": "ArmeriaWebClientTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaClientHttpConnector.connect(org.springframework.http.HttpMethod,java.net.URI,java.util.function.Function)"}], "spoonFilePath": "ArmeriaClientHttpConnector.java"}]}], "url": "https://github.com/line/armeria/issues/2080", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Spring WebFlux client isn't working with body extraction methods", "statsSkippedReason": "", "user": "socar-brad", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "5.1.3.RELEASE or later, Spring WebFlux's body handling logic has changed when response has an error.\r\n\r\nSee below\r\nhttps://github.com/spring-projects/spring-framework/blob/c187cb2fa13af2a6ff6e92d588ba70b458707460/spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java#L443-L446\r\n\r\nThis changed logic handles body twice if status code of the response determines that there is an error. But `ArmeriaHttpClientResponseSubscriber` doesn't remember that the response body is canceled or completed. Therefore erroneous response using methods like `bodyToMono()` doesn't end.", "labels": ["defect"]}, {"created": "2019-09-16 08:05:54", "commits": {"8974da9f636843e12cd4d7548ca3ea01f45be8de": {"commitGHEventType": "referenced", "commitUser": "minwoox"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-10-24 06:48:41", "filteredCommits": [], "commitsDetails": [{"nameRev": "8974da9f636843e12cd4d7548ca3ea01f45be8de tags/armeria-0.95.0~10", "commitMessage": "Some annotated service methods are run from blocking task execu\u2026 (#2187)\n\nMotivation:\r\nThe annotated services whose return type is neither `HttpResponse` nor `CompeltableFuture`, are run using a `blockingTaskExecutor` by default.\r\nWe should fix this to use `EventLoop` by default and let a user choose to use `blockingTaskExecutor` if he/she wants.\r\n\r\nModifications:\r\n- Add `@Blocking` which makes the annotated service run using `blockingTaskExecutor`\r\n- Make all annotated services run from `EventLoop`\r\n\r\nResult:\r\n- Fix #2078\r\n- (Breaking) All annotated services are now run from `EventLoop` by default", "commitParents": ["e8c424a9a7a431a1829365ed8ea10fb48b4dd9f6"], "spoonStatsSkippedReason": "", "commitHash": "8974da9f636843e12cd4d7548ca3ea01f45be8de", "authoredDateTime": "2019-10-24 13:48:40", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 41, "deletions": 12, "lines": 53, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpService.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceFactory.java"}, {"insertions": 34, "deletions": 0, "lines": 34, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/Blocking.java"}, {"insertions": 19, "deletions": 29, "lines": 48, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceTest.java"}, {"insertions": 172, "deletions": 0, "lines": 172, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceBlockingTest.java"}], "commitDateTime": "2019-10-24 15:48:40", "commitUser": "minwoox", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.annotation"}], "spoonFilePath": "Blocking.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceBlockingTest"}], "spoonFilePath": "AnnotatedHttpServiceBlockingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.MyAnnotatedService5.postStringAggregateResponse2(com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.RequestContext)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testAggregation()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.1"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testNonDefaultRoute()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testReturnVoid()"}, {"UPD": 3, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.request(com.linecorp.armeria.common.HttpMethod,java.lang.String,java.lang.String,java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testClassScopeMediaTypeAnnotations()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testParam()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testRequestHeaderInjection()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testAnnotatedHttpService()"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testAdvancedAnnotatedHttpService()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testServiceThrowHttpResponseException()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testServiceThrowIllegalArgumentException()"}], "spoonFilePath": "AnnotatedHttpServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpService"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpService.convertResponse(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpHeaders,java.lang.Object,com.linecorp.armeria.common.HttpHeaders)"}, {"UPD": 0, "TOT": 6, "MOV": 3, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpService.serve0(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "AnnotatedHttpService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.create(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.util.List,java.util.List,java.util.List)"}], "spoonFilePath": "AnnotatedHttpServiceFactory.java"}]}], "url": "https://github.com/line/armeria/issues/2078", "ttf": 37.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Some annotated service methods are run from blocking task executors.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Related: #2064 \r\n\r\nFor example, when the return type of a service method is `AggregatedHttpResponse` or response object conversion is involved, the service method is currently executed via the blocking task executor. By contrast, if a service method returns `HttpResponse`, it will be executed from a event loop thread. This behavioral difference is too subtle and confusing.\r\n\r\nWe need to:\r\n\r\n- Make the service methods run from an event loop thread by default, regardless of their return types.\r\n- Introduce an annotation that makes the service methods run from a blocking task executor.\r\n- Provide some migration plan, like:\r\n  - Introduce a flag that enables this change, whose default is false (disabled).\r\n  - When the flag is disabled, issue a warning log message to tell people to migrate.\r\n  - After a few releases, change the default from false to true.\r\n", "labels": ["breaking change", "defect"]}, {"created": "2019-09-13 09:46:31", "user": "adriancole", "body": "Right now, if the delegate to HealthCheckedEndpointGroup succeeds, by producing endpoints, but all of them fail a check, the `HealthCheckedEndpointGroup.initialEndpointsFuture()` is left uncompleted.\r\n\r\nThis seems to do with state management around https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java#L335\r\n\r\nBasically, `healthyEndpoints` is empty and removing from empty doesn't incur an update. Nothing calls `setEndpoints` which completes the initial future.\r\n\r\nI think we'd want some sort of exception to complete on error IFF we have cycled through all the hosts and none passed.\r\n\r\nex a message like `\"couldn't connect any of \" + delegate.endpoints()`", "closed": "2019-09-18 09:24:04", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2075", "ttf": 4.000277777777778, "commits": {}, "labels": ["defect"], "title": "Fail HealthCheckedEndpointGroup.initialEndpointsFuture() when all hosts fail check"}, {"created": "2019-09-11 13:24:48", "commits": {"3f0e2e926e118f03c4e4a4662c52803878621e71": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "60c5a17b12b5943f0b3ecdc462a5752f24500cec": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-09-16 03:40:13", "filteredCommits": [], "commitsDetails": [{"nameRev": "3f0e2e926e118f03c4e4a4662c52803878621e71 tags/armeria-0.92.0~20", "commitMessage": "Add an example that processes streaming replies in a blocking \u2026 (#2068)\n\n\u2026way to help with #2065", "commitParents": ["5636a5a9a42f89254783d5f17dc7d7f0037d367d"], "spoonStatsSkippedReason": "", "commitHash": "3f0e2e926e118f03c4e4a4662c52803878621e71", "authoredDateTime": "2019-09-16 04:39:12", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 39, "deletions": 0, "lines": 39, "filePath": "examples/grpc-service/src/test/java/example/armeria/grpc/HelloServiceTest.java"}], "commitDateTime": "2019-09-16 12:39:12", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 3, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "example.armeria.grpc.HelloServiceTest.bidirectionalHello().4.onCompleted()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "example.armeria.grpc.HelloServiceTest.bidirectionalHello().5.onCompleted()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "example.armeria.grpc.HelloServiceTest.sendLotsOfGreetings().3"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "example.armeria.grpc.HelloServiceTest.blockForLotsOfReplies()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "example.armeria.grpc.HelloServiceTest.sendLotsOfGreetings().4.onCompleted()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "example.armeria.grpc.HelloServiceTest.bidirectionalHello().4"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "example.armeria.grpc.HelloServiceTest.bidirectionalHello().5.onNext(example.armeria.grpc.Hello.HelloReply)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "example.armeria.grpc.HelloServiceTest.sendLotsOfGreetings().3.onCompleted()"}, {"UPD": 0, "TOT": 4, "MOV": 4, "INS": 0, "DEL": 0, "spoonMethodName": "example.armeria.grpc.HelloServiceTest.bidirectionalHello().4.onNext(example.armeria.grpc.Hello.HelloReply)"}, {"UPD": 2, "TOT": 7, "MOV": 3, "INS": 0, "DEL": 2, "spoonMethodName": "example.armeria.grpc.HelloServiceTest.sendLotsOfGreetings().3.onNext(example.armeria.grpc.Hello.HelloReply)"}], "spoonFilePath": "HelloServiceTest.java"}]}, {"nameRev": "60c5a17b12b5943f0b3ecdc462a5752f24500cec tags/armeria-0.92.0~19", "commitMessage": "Notify blocking stub executor on message. (#2066)\n\nI had no idea blocking stubs supported querying server streaming endpoints like this. Turns out we need to notify a call's executor when messages are received so a blocking stub can read individual messages, not just the final one as we currently support.\r\n\r\nFixes #2065", "commitParents": ["3f0e2e926e118f03c4e4a4662c52803878621e71"], "spoonStatsSkippedReason": "", "commitHash": "60c5a17b12b5943f0b3ecdc462a5752f24500cec", "authoredDateTime": "2019-09-16 04:40:12", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 40, "deletions": 0, "lines": 40, "filePath": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java"}], "commitDateTime": "2019-09-16 12:40:12", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.pingPong()"}, {"UPD": 1, "TOT": 4, "MOV": 3, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.clientStreaming()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.unimplementedMethod()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.unimplementedService()"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.serverStreamingShouldBeFlowControlled()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.maxOutboundSize_tooBig()"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.deadlineExceeded()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.halfDuplexCallShouldSucceed()"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.exchangeHeadersUnaryCall_grpcMetadata()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.cancelAfterFirstResponse()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.exchangeHeadersStreamingCall()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.maxInboundSize_tooBig()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.statusCodeAndMessage()"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.deadlineExceededServerStreaming()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.emptyStream()"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.veryLargeResponse()"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.exchangeHeadersUnaryCall_armeriaHeaders()"}, {"UPD": 2, "TOT": 4, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.fullDuplexCallShouldSucceed()"}, {"UPD": 2, "TOT": 11, "MOV": 8, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.veryLargeRequest()"}], "spoonFilePath": "GrpcClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.ArmeriaClientCall.messageRead(com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageDeframer.ByteBufOrStream)"}], "spoonFilePath": "ArmeriaClientCall.java"}]}], "url": "https://github.com/line/armeria/issues/2065", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Problem trying to parse response from gRPC endpoint", "statsSkippedReason": "", "user": "anirudhr95", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 2, "alsoFixesPhrase": 0}, "body": "Hello, I have a gRPC server, trying to serve a few things from an array blocking queue. That works fine (As far as I can tell).\r\n\r\nMy proto files - \r\n\r\n```\r\nsyntax = \"proto3\";\r\n\r\npackage queue;\r\n\r\noption java_package = \"com.sink.queue\";\r\noption java_outer_classname = \"queue\";\r\noption java_multiple_files = true;\r\noption optimize_for = SPEED;\r\n\r\n/*\r\n    * Assuming Producer Response can be 1 file or more (In byte format)\r\n*/\r\n\r\nmessage ResponseFromQueueSource {\r\n    repeated bytes file = 1;\r\n}\r\n\r\nmessage RequestFromSink {\r\n\r\n}\r\n\r\nservice GetMessageFromQueue {\r\n    rpc getItem(RequestFromSink) returns (stream ResponseFromQueueSource) {}\r\n}\r\n```\r\n\r\nIn my client, I am creating a thread pool and I am hitting gRPC the endpoint continuously.\r\n\r\n\r\n```\r\n  public static void main(String[] args) throws InterruptedException {\r\n\r\n        ExecutorService executorService = Executors.newFixedThreadPool(idealNumberOfThreads);\r\n\r\n        for(int i = 0; i < Runtime.getRuntime().availableProcessors() + 1; i++) {\r\n            executorService.execute(new PerformRequestAndSaveFile(commandLine.getOptionValue(\"e\")));\r\n        }\r\n\r\n        executorService.shutdown();\r\n\r\n        while( ! executorService.isTerminated() ) {\r\n\r\n        }\r\n\r\n       log.info(\"Total time taken - \" + (System.nanoTime() - startTime) + \" ns\");\r\n    }\r\n```\r\n\r\n\r\nLike so.\r\n\r\nThe code for hitting the endpoint is - \r\n\r\n```\r\npublic class PerformRequestAndSaveFile implements Runnable {\r\n\r\n\tprivate static final Logger log = LoggerFactory.getLogger(PerformRequestAndSaveFile.class);\r\n\r\n\tprivate GetMessageFromQueueGrpc.GetMessageFromQueueBlockingStub getMessageFromQueueStub;\r\n\r\n\tprivate RequestFromSink request;\r\n\r\n\tprivate StreamObserver<ResponseFromQueueSource> responseStream;\r\n\r\n\tPerformRequestAndSaveFile(String endpointURL) {\r\n\r\n\t\tthis.getMessageFromQueueStub = getClientForEndPoint(endpointURL);\r\n\r\n\t\tthis.request = getRequestObject();\r\n\t\tisQueueEmpty = false;\r\n\r\n\t}\r\n\r\n\tprivate RequestFromSink getRequestObject() {\r\n\t\treturn RequestFromSink.newBuilder().build();\r\n\t}\r\n\r\n\tprivate GetMessageFromQueueBlockingStub getClientForEndPoint(String endpointURL) {\r\n\t\treturn Clients.newClient(\"gproto+http://\" + endpointURL, GetMessageFromQueueBlockingStub.class);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void run() {\r\n\r\n\t\tIterator<ResponseFromQueueSource> responseIterator = getIteratedResponseFromGRPCServer();\r\n\t\t** log.info(\"Got response - {}\", responseIterator.hasNext());*\r\n\r\n\t\twhile (responseIterator.hasNext()) {\r\n\r\n\t\t\tResponseFromQueueSource responseFromQueueSource = responseIterator.next();\r\n\t\t\tList<ByteString> fileList = responseFromQueueSource.getFileList();\r\n\r\n\t\t\tif (fileList == null || fileList.size() == 0) {\r\n\t\t\t\tisQueueEmpty = true;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tfor (ByteString file : fileList) {\r\n\t\t\t\tResponseJsonPojo responseJsonPojo = null;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tresponseJsonPojo = objectMapper.readValue(file.toStringUtf8(), ResponseJsonPojo.class);\r\n\t\t\t\t\tobjectMapper.writeValue(new File(responseJsonPojo.getMessageId() + \".json\"), responseJsonPojo);\r\n\t\t\t\t} catch (Exception e) {\r\n\t\t\t\t\tlog.error(\"Error while parsing JSON / Writing to file for JSON - \", file.toStringUtf8(), e);\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tprivate Iterator<ResponseFromQueueSource> getIteratedResponseFromGRPCServer() {\r\n\t\treturn this.getMessageFromQueueStub.getItem(request);\r\n\t}\r\n```\r\n\r\nlog.info(\"Got response - {}\", responseIterator.hasNext()); is actually commented.\r\n\r\nWhen I try this normally, I get nothing :| (Especially in the run method)\r\n\r\nHowever, if I debug, I get the output:\r\n<img width=\"909\" alt=\"Screenshot 2019-09-11 at 6 52 55 PM\" src=\"https://user-images.githubusercontent.com/2638126/64700935-777f7b80-d4c5-11e9-8d65-31cffe5f7edb.png\">\r\n\r\nIt cannot be due to the delay right? This is blocking stub after all (and not asynchronous).\r\n\r\n```\r\n\tprivate Iterator<ResponseFromQueueSource> getIteratedResponseFromGRPCServer() {\r\n\t\treturn this.getMessageFromQueueStub.getItem(request);\r\n\t}\r\n```\r\nshould be a synchronous call no?\r\n\r\n(**Additional question on top of this:** If I use server-side streaming, can I use async stub in the client? )", "labels": ["defect"]}, {"created": "2019-09-04 10:41:27", "commits": {"e9dfd44978524ef6fae09e7ce0ca291ebed5e76d": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-09-06 03:23:18", "filteredCommits": [], "commitsDetails": [{"nameRev": "e9dfd44978524ef6fae09e7ce0ca291ebed5e76d tags/armeria-0.91.0~4", "commitMessage": "Implement `ProtocolDetectionHandler.exceptionCaught()` (#2048)\n\nMotivation:\r\n\r\nWhen an Armeria server is serving multiple protocols on the same port,\r\nthe last `ChannelHandler` in a `ChannelPipeline` is a `ProtocolDetectionHandler`,\r\nwhich does not implement `exceptionCaught()` handler method properly.\r\n\r\nAs a result, a user will see the following warning message when the\r\nconnection is closed before the current session protocol is detected.\r\n\r\n    An exceptionCaught() event was fired, and it reached at the tail of\r\n    the pipeline. It usually means the last handler in the pipeline did\r\n    not handle the exception.\r\n\r\nModifications:\r\n\r\n- Implement `ProtocolDetectionHandler.exceptionCaught()` properly.\r\n- Make sure the connection is closed when protocol detection is not\r\n  finished in time.\r\n\r\nResult:\r\n\r\n- No more confusing warning log message on premature disconnection.\r\n- Timeout is now enforced during protocol detection.\r\n- Fixes #2043", "commitParents": ["fe7a3a913ae074c7fd9e64423ea5128dc88b635c"], "spoonStatsSkippedReason": "", "commitHash": "e9dfd44978524ef6fae09e7ce0ca291ebed5e76d", "authoredDateTime": "2019-09-06 12:23:17", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 31, "deletions": 2, "lines": 33, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java"}], "commitDateTime": "2019-09-06 12:23:17", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.configurePipeline(io.netty.channel.ChannelPipeline,java.util.Set,com.linecorp.armeria.server.ProxiedAddresses)"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.ProtocolDetectionHandler"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.ProtocolDetectionHandler.exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.ProtocolDetectionHandler.decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"}], "spoonFilePath": "HttpServerPipelineConfigurator.java"}]}], "url": "https://github.com/line/armeria/issues/2043", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "'Connection reset by peer` error logged by `DefaultChannelPipeline`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "An Armeria server sometimes gets the following warning log message from `DefaultChannelPipeline`:\r\n\r\n```\r\nAn exceptionCaught() event was fired, and it reached at the tail of the pipeline. It usually means the last handler in the pipeline did not handle the exception.\r\nio.netty.channel.unix.Errors$NativeIoException: readAddress(..) failed: Connection reset by peer\r\n```\r\n\r\n... which should not occur.\r\n\r\n", "labels": ["defect"]}, {"created": "2019-09-04 10:25:20", "commits": {"7205fccdbc2da7b616548b9c2b0c07b6f6c9c0b6": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-10-02 06:15:32", "filteredCommits": [], "commitsDetails": [{"nameRev": "7205fccdbc2da7b616548b9c2b0c07b6f6c9c0b6 tags/armeria-0.94.0~8", "commitMessage": "Adding log for DefaultExceptionHandler when JSON parse error ha\u2026 (#2131)\n\nMotivation:\r\n\r\nWhen a JSON document cannot be converted into Java object, an `IllegalArgumentException` is thrown. And this is converted to 400 status code. But it would be nice to have a log statement in `DefaultExceptionHandler` to log what is wrong with the request\r\n\r\nCloses #2041", "commitParents": ["e39ea9f31c85cd6bc30934eedcd37b6339d8c318"], "spoonStatsSkippedReason": "", "commitHash": "7205fccdbc2da7b616548b9c2b0c07b6f6c9c0b6", "authoredDateTime": "2019-10-02 02:15:32", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 10, "deletions": 3, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/DefaultExceptionHandler.java"}], "commitDateTime": "2019-10-02 15:15:32", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.DefaultExceptionHandler.log(java.util.function.Consumer)"}, {"UPD": 0, "TOT": 7, "MOV": 4, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.DefaultExceptionHandler.handleException(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest,java.lang.Throwable)"}], "spoonFilePath": "DefaultExceptionHandler.java"}]}], "url": "https://github.com/line/armeria/issues/2041", "ttf": 27.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "No exception logged when JSON request conversion fails in an annotated service", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "For example:\r\n\r\n```java\r\npublic class MyService {\r\n    @Post(\"/post\")\r\n    void post(MyValue value) {\r\n        ...\r\n    }\r\n}\r\n\r\npublic class MyValue {\r\n    final String value;\r\n    public MyValue(String value) {\r\n        this.value = value;\r\n    }\r\n}   \r\n```\r\n\r\nWhen an HTTP client posts a JSON document:\r\n\r\n```\r\ncurl -X POST \\\r\n  http://localhost:8080/post \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Host: localhost:8080' \\\r\n  -d '{ \"value\": \"foo\" }'\r\n```\r\n\r\n.. a `400 Bad Request` response is sent by the server, but no log message is written, making it hard to know what is wrong. The problem goes away if a user annotates `MyValue.<init>` with `@JsonCreator` and the parameter `value` with `@JsonProperty(\"value\")`.", "labels": ["defect"]}, {"created": "2019-08-26 07:15:28", "user": "anuraaga", "body": "From slack, it seems that the gRPC web serialization format may not be working correctly on client side. Any of our formats should work both in server and client.\r\n\r\nhttps://line-armeria.slack.com/archives/C1NGPBUH2/p1566800641169400?thread_ts=1566800641.169400&cid=C1NGPBUH2", "closed": "2019-09-18 01:53:17", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2030", "ttf": 22.00027777777778, "commits": {}, "labels": ["defect"], "title": "gRPC-web client doesn't apply framing"}, {"created": "2019-08-24 04:24:41", "commits": {"9e074d4343223c095842cf627c821f3b14973f7d": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-01-06 08:05:32", "filteredCommits": [], "commitsDetails": [{"nameRev": "9e074d4343223c095842cf627c821f3b14973f7d tags/armeria-0.98.0~84", "commitMessage": "Propagate client TLS errors to user (#2338)\n\nFixes (#2025)\r\n\r\n**Motivation**\r\n\r\nPointing https requests at a plaintext endpoint results in a general `ClosedSessionException`.\r\nExplicitly throwing an exception may help clients handle configuration errors better\r\n\r\n**Modifications**\r\n\r\n- Introduce a `PENDING_EXCEPTION` channel attribute which can be thrown from `HttpSessionHandler`\r\n- Remove TLS handshake logging\r\n\r\n**Related PR** (#1297)\r\n\r\n", "commitParents": ["c260bfee7a68abbb5a6ca90814ed23d2e1f38f05"], "spoonStatsSkippedReason": "", "commitHash": "9e074d4343223c095842cf627c821f3b14973f7d", "authoredDateTime": "2020-01-04 14:56:00", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 12, "deletions": 3, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java"}, {"insertions": 30, "deletions": 1, "lines": 31, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java"}], "commitDateTime": "2020-01-04 14:56:00", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.httpsRequestWithInvalidCertificate()"}, {"UPD": 1, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.newEndpoint()"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.newEndpoint(java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.httpsRequestToPlainTextEndpoint()"}], "spoonFilePath": "HttpClientIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.configureAsHttps(io.netty.channel.Channel,java.net.InetSocketAddress).1.exceptionCaught(io.netty.channel.ChannelHandlerContext,java.lang.Throwable)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.configureAsHttps(io.netty.channel.Channel,java.net.InetSocketAddress).1.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"}], "spoonFilePath": "HttpClientPipelineConfigurator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 6, "MOV": 1, "INS": 4, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler.channelInactive(io.netty.channel.ChannelHandlerContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler"}], "spoonFilePath": "HttpSessionHandler.java"}]}], "url": "https://github.com/line/armeria/issues/2025", "ttf": 135.00027777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Propagate client TLS errors to users", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Currently, client TLS errors are logged but the user just gets a `ClosedSessionException` with no message or stack trace. TLS errors are generally not transient and are a result of a configuration error that the user needs to fix so we should propagate them as the cause of the exception.\r\n\r\nRelated https://github.com/openzipkin/zipkin/issues/2776", "labels": ["defect"]}, {"created": "2019-08-23 10:06:14", "commits": {"affd7d878cce3ca5d0caf892edc5640936412be6": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-11-04 13:46:45", "filteredCommits": [], "commitsDetails": [{"nameRev": "affd7d878cce3ca5d0caf892edc5640936412be6 tags/armeria-0.96.0~31", "commitMessage": "Add service level settings to annotated services (#2222)\n\nMotivation:\r\n\r\nIt is good to provide an ability to user to configure per service level settings for annotated service.\r\n\r\nModifications:\r\n\r\n- Pulled all methods that `AbstractServiceBindingBuilder` (minus `AbstractBindingBuilder`) has into an interface called `ServiceConfigSetter`.\r\n- `AbstractServiceBindingBuilder` now implements this (`ServiceConfigSetter`) interface and also extends `AbstractBindingBuilder`.\r\n- Added a default implementation of `ServiceConfigSetter` called `DefaultServiceConfigSetter`, which is shared between `AbstractServiceBindingBuilder` and `AbstractServiceBuilder` to avoid code duplication.\r\n- Added `AnnotatedServiceBindingBuilder` and `VirtualHostAnnotatedServiceBindingBuilder`.\r\n\r\nResult:\r\n\r\n- Closes #2023\r\n- Annotated services can now be configured to have service-specific properties.", "commitParents": ["b29ea824f72b6c18a47ca55aef7f1902c958b043"], "spoonStatsSkippedReason": "", "commitHash": "affd7d878cce3ca5d0caf892edc5640936412be6", "authoredDateTime": "2019-11-04 08:46:44", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 28, "deletions": 153, "lines": 181, "filePath": "core/src/main/java/com/linecorp/armeria/server/AbstractServiceBindingBuilder.java"}, {"insertions": 218, "deletions": 0, "lines": 218, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilder.java"}, {"insertions": 130, "deletions": 0, "lines": 130, "filePath": "core/src/test/java/com/linecorp/armeria/server/AnnotatedServiceBindingBuilderTest.java"}, {"insertions": 182, "deletions": 0, "lines": 182, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceConfigSetters.java"}, {"insertions": 55, "deletions": 14, "lines": 69, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java"}, {"insertions": 103, "deletions": 0, "lines": 103, "filePath": "core/src/test/java/com/linecorp/armeria/server/VirtualHostAnnotatedServiceBindingBuilderTest.java"}, {"insertions": 51, "deletions": 14, "lines": 65, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}, {"insertions": 18, "deletions": 0, "lines": 18, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceFactory.java"}, {"insertions": 20, "deletions": 0, "lines": 20, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceElement.java"}, {"insertions": 208, "deletions": 0, "lines": 208, "filePath": "core/src/main/java/com/linecorp/armeria/server/AnnotatedServiceBindingBuilder.java"}, {"insertions": 138, "deletions": 0, "lines": 138, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServiceConfigSetters.java"}], "commitDateTime": "2019-11-04 22:46:44", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.annotatedService()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.annotatedService(java.lang.String,java.lang.Object,java.util.function.Function,java.util.List,java.util.List,java.util.List)"}, {"UPD": 9, "TOT": 33, "MOV": 22, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.annotatedService(java.lang.String,java.lang.Object,java.util.function.Function,java.lang.Iterable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.registerHttpServiceElement(java.util.List,java.util.function.Function)"}], "spoonFilePath": "VirtualHostBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedServiceBindingBuilder"}], "spoonFilePath": "AnnotatedServiceBindingBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostAnnotatedServiceBindingBuilderTest"}], "spoonFilePath": "VirtualHostAnnotatedServiceBindingBuilderTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostAnnotatedServiceBindingBuilder"}], "spoonFilePath": "VirtualHostAnnotatedServiceBindingBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceElement.buildSafeDecoratedService(java.util.function.Function)"}], "spoonFilePath": "AnnotatedHttpServiceElement.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.registerHttpServiceElement(java.util.List,java.util.function.Function)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.annotatedService(java.lang.String,java.lang.Object,java.util.function.Function,java.util.List,java.util.List,java.util.List)"}, {"UPD": 9, "TOT": 32, "MOV": 21, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.annotatedService(java.lang.String,java.lang.Object,java.util.function.Function,java.lang.Iterable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.annotatedService()"}], "spoonFilePath": "ServerBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.maxRequestLength(long)"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.requestTimeoutMillis(long)"}, {"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.responseContentPreviewerFactory(com.linecorp.armeria.common.logging.ContentPreviewerFactory)"}, {"UPD": 2, "TOT": 10, "MOV": 3, "INS": 2, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.decorator(java.util.function.Function)"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.verboseResponses(boolean)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.decorate(com.linecorp.armeria.server.Service)"}, {"UPD": 4, "TOT": 15, "MOV": 4, "INS": 1, "DEL": 6, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.build0(com.linecorp.armeria.server.Service)"}, {"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.contentPreview(int)"}, {"UPD": 2, "TOT": 10, "MOV": 0, "INS": 1, "DEL": 7, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder"}, {"UPD": 0, "TOT": 5, "MOV": 1, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.accessLogWriter(com.linecorp.armeria.server.logging.AccessLogWriter,boolean)"}, {"UPD": 0, "TOT": 8, "MOV": 4, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.requestContentPreviewerFactory(com.linecorp.armeria.common.logging.ContentPreviewerFactory)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.requestTimeout(java.time.Duration)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.contentPreview(int,java.nio.charset.Charset)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.accessLogFormat(java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractServiceBindingBuilder.contentPreviewerFactory(com.linecorp.armeria.common.logging.ContentPreviewerFactory)"}], "spoonFilePath": "AbstractServiceBindingBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedServiceBindingBuilderTest"}], "spoonFilePath": "AnnotatedServiceBindingBuilderTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server"}], "spoonFilePath": "ServiceConfigSetters.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.getInstance(java.lang.Class)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.find(java.lang.String,java.lang.Object,java.util.List,java.util.List,java.util.List)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.getInstance(java.lang.annotation.Annotation,java.lang.Class)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.newDecorator(com.linecorp.armeria.server.annotation.Decorator)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.getHttpMethodAnnotatedPatternMap(java.util.Set)"}], "spoonFilePath": "AnnotatedHttpServiceFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultServiceConfigSetters"}], "spoonFilePath": "DefaultServiceConfigSetters.java"}]}], "url": "https://github.com/line/armeria/issues/2023", "ttf": 73.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Per-service setting is not possible for annotated service", "statsSkippedReason": "", "user": "minwoox", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "A user can configure per-service settings using fluent `Route` API.\r\nHowever, this is only for the services which implement `HttpService`, not for the annotated service.\r\nWe should provide a way for annotated service as well.", "labels": ["defect"]}, {"created": "2019-08-21 12:11:38", "commits": {"3c64582c8a7dced2eec967d1ffb582263c23b6e7": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-08-30 02:41:32", "filteredCommits": [], "commitsDetails": [{"nameRev": "3c64582c8a7dced2eec967d1ffb582263c23b6e7 tags/armeria-0.91.0~11", "commitMessage": "Call channel.remoteAddress before the connection is closed (#2021)\n\nMotivation:\r\nConnection can be closed while reading. If `channel.remoteAddress()` is called after\r\nthe connection closed it will return `null`. So we should call `channel.remoteAddress()`\r\nbefore a read event happens so that we can cache the address and reuse later.\r\n\r\nModifications:\r\n- Call `channel.remoteAddress()` after the connection is established in `HttpSessionHandler` and where necessary\r\n- Remove unused class: `LoggingUtil`\r\n\r\nResult:\r\n- You no longer see NPE when the remote server requries a downgrade\r\n- Fix #2010", "commitParents": ["850090c2caa2ed2e31e99721516ddd5b022c1dd3"], "spoonStatsSkippedReason": "", "commitHash": "3c64582c8a7dced2eec967d1ffb582263c23b6e7", "authoredDateTime": "2019-08-30 11:41:31", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 8, "deletions": 6, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java"}, {"insertions": 5, "deletions": 1, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java"}, {"insertions": 0, "deletions": 52, "lines": 52, "filePath": "core/src/main/java/com/linecorp/armeria/internal/logging/LoggingUtil.java"}, {"insertions": 13, "deletions": 4, "lines": 17, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java"}], "commitDateTime": "2019-08-30 11:41:31", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpRequestSubscriber.writeFirstHeader()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpRequestSubscriber.autoFillHeaders()"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpRequestSubscriber"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.client.HttpRequestSubscriber.autoFillHeaders(io.netty.channel.Channel)"}], "spoonFilePath": "HttpRequestSubscriber.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 6, "MOV": 2, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.UpgradeRequestHandler.onUpgradeResponse(io.netty.channel.ChannelHandlerContext,boolean)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.configureAsHttps(io.netty.channel.Channel,java.net.InetSocketAddress).1.userEventTriggered(io.netty.channel.ChannelHandlerContext,java.lang.Object)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.remoteAddress(io.netty.channel.ChannelHandlerContext)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.DowngradeHandler.decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"}], "spoonFilePath": "HttpClientPipelineConfigurator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler.invoke(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.client.DecodedHttpResponse)"}], "spoonFilePath": "HttpSessionHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.logging.LoggingUtil"}], "spoonFilePath": "LoggingUtil.java"}]}], "url": "https://github.com/line/armeria/issues/2010", "ttf": 8.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "NPE in HttpSessionHandler.channelInactive with JRE11", "statsSkippedReason": "", "user": "mauhiz", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "The following issue is reproduced on latest armeria (0.90.x) with openjdk 11.0.2 when the remote server requires a downgrade from HTTP2 to H1C :\r\n\r\n```\r\njava.lang.NullPointerException: remoteAddress\r\n\tat io.netty.util.internal.ObjectUtil.checkNotNull(ObjectUtil.java:33)\r\n\tat io.netty.bootstrap.Bootstrap.connect(Bootstrap.java:141)\r\n\tat com.linecorp.armeria.client.HttpChannelPool.connect(HttpChannelPool.java:347)\r\n\tat com.linecorp.armeria.client.HttpSessionHandler.channelInactive(HttpSessionHandler.java:306)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:257)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:243)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:236)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:393)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:358)\r\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.channelInactive(Http2ConnectionHandler.java:415)\r\n```\r\n\r\nIt appears that the Channel's remoteAddress is not set. (requestedRemoteAddress is set though)\r\n\r\nThis cannot be reproduced e.g. with oracle 10.0.2 where remoteAddress = requestedRemoteAddress\r\n\r\nIt could be an issue with netty (interop with recent openJDKs) or with the way Armeria uses Netty.", "labels": ["defect"]}, {"created": "2019-08-21 06:25:34", "commits": {"15e884de6aa026fb02778e4ffe23edd91de5459d": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "f734626689232447417bc6b21956ae60f1fa1000": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-12-04 06:11:23", "filteredCommits": [], "commitsDetails": [{"nameRev": "15e884de6aa026fb02778e4ffe23edd91de5459d tags/armeria-0.97.0~16", "commitMessage": "Respect gRPC stub deadline. (#2284)\n\n- Add support for the `deadline` option of a gRPC client stub. Now, if this is provided, for example by one of the gRPC integration tests, it is handled correctly at the client side - previously it only sort of worked because it would often be handled at the server side.\r\n- Add an option, not available in usptream, to ignore a client-specified timeout in the server. I've always felt it unsafe that gRPC server uses a client header to determine timeout, and this flag can be used for situations without trusted clients (and unit tests :) ).\r\n- Update the server cancellation logic to match upstream logic.\r\n\r\nFixes #2008 ", "commitParents": ["9150cc14dced5ec4fa83a32086bf39d2cbfd3ed2"], "spoonStatsSkippedReason": "", "commitHash": "15e884de6aa026fb02778e4ffe23edd91de5459d", "authoredDateTime": "2019-12-04 15:11:23", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 27, "deletions": 1, "lines": 28, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java"}, {"insertions": 0, "deletions": 10, "lines": 10, "filePath": "it/server/src/test/java/com/linecorp/armeria/server/grpc/interop/ArmeriaGrpcServerInteropTest.java"}, {"insertions": 35, "deletions": 1, "lines": 36, "filePath": "grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java"}, {"insertions": 16, "deletions": 11, "lines": 27, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java"}, {"insertions": 36, "deletions": 17, "lines": 53, "filePath": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java"}, {"insertions": 3, "deletions": 0, "lines": 3, "filePath": "grpc/src/test/proto/com/linecorp/armeria/grpc/testing/test.proto"}, {"insertions": 17, "deletions": 0, "lines": 17, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcServiceBuilder.java"}], "commitDateTime": "2019-12-04 15:11:23", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.3.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.clientSocketClosedBeforeHalfClose(java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.ignoreClientTimeout()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.UnitTestServiceImpl.timesOut(com.linecorp.armeria.grpc.testing.Messages.SimpleRequest,io.grpc.stub.StreamObserver)"}], "spoonFilePath": "GrpcServiceServerTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceBuilder"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceBuilder.useClientTimeoutHeader(boolean)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceBuilder.build()"}], "spoonFilePath": "GrpcServiceBuilder.java"}, {"spoonMethods": [], "spoonFilePath": "ArmeriaServerCall.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcService"}, {"UPD": 1, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcService.doPost(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "GrpcService.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.unimplementedMethod()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.statusCodeAndMessage()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.maxInboundSize_tooBig()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.maxOutboundSize_tooBig()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.unimplementedService()"}, {"UPD": 15, "TOT": 29, "MOV": 12, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.deadlineInPast()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.deadlineInFuture()"}], "spoonFilePath": "GrpcClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.grpc.interop.ArmeriaGrpcServerInteropTest.deadlineExceeded()"}], "spoonFilePath": "ArmeriaGrpcServerInteropTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.ArmeriaClientCall.start(com.linecorp.armeria.client.grpc.Listener,io.grpc.Metadata)"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.ArmeriaClientCall.close(io.grpc.Status,io.grpc.Metadata)"}], "spoonFilePath": "ArmeriaClientCall.java"}]}, {"nameRev": "f734626689232447417bc6b21956ae60f1fa1000 tags/armeria-0.96.0~10", "commitMessage": "Allow handling response timeout with specific cause on the clie\u2026 (#2248)\n\nMotivation:\r\n`ServiceRequestContext` can configure response timeout handler by adding `setResponseTimeoutHandler`.\r\nBut `ClientRequestContext` is less customizable than server-side.\r\nWe need to add a response timeout handler in the client-side to solve the problem in #2008.\r\n\r\nModifications:\r\n* Add `setResponseTimeoutHandler(Runnable responseTimeoutHandler)` to `ClientRequestContext`.\r\n* Add `abort(Throwable)` to StreamMessage and its implementations.\r\n* Add new factory method `AbortingSubscriber.get(Throwable)`.\r\n* Add `Runnable requestTimeoutHandler()` to `ServiceRequestContext`.\r\n* Update existing test logic.\r\n* Dependency\r\n  * Add TestNG(7.0.0) to core test dependency for running Reactive Streams TCK on modern IntelliJ\r\n* Deprecate `NoopRequestLogBuilder`.\r\n\r\nResult:\r\nA user can configure a custom response timeout handler to intercept default logic and abort request with a specific cause.", "commitParents": ["225bbbdea2c69d7e67b8f99437684a6818a99924"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "f734626689232447417bc6b21956ae60f1fa1000", "authoredDateTime": "2019-11-14 16:11:51", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 14, "deletions": 1, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/common/HeaderOverridingHttpRequest.java"}, {"insertions": 18, "deletions": 21, "lines": 39, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java"}, {"insertions": 3, "deletions": 0, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java"}, {"insertions": 57, "deletions": 23, "lines": 80, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/DeferredStreamMessageTest.java"}, {"insertions": 162, "deletions": 0, "lines": 162, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientResponseTimeoutHandlerTest.java"}, {"insertions": 21, "deletions": 8, "lines": 29, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageDeframer.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/internal/ClientUtil.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageWrapper.java"}, {"insertions": 11, "deletions": 0, "lines": 11, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContextWrapper.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/FilteredStreamMessage.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/internal/Http2GoAwayHandler.java"}, {"insertions": 25, "deletions": 0, "lines": 25, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java"}, {"insertions": 19, "deletions": 4, "lines": 23, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbortingSubscriber.java"}, {"insertions": 18, "deletions": 18, "lines": 36, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/FixedStreamMessage.java"}, {"insertions": 59, "deletions": 26, "lines": 85, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorTest.java"}, {"insertions": 6, "deletions": 4, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java"}, {"insertions": 13, "deletions": 5, "lines": 18, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java"}, {"insertions": 50, "deletions": 25, "lines": 75, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessageTest.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java"}, {"insertions": 8, "deletions": 0, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java"}, {"insertions": 2, "deletions": 4, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java"}, {"insertions": 68, "deletions": 40, "lines": 108, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientTest.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextWrapper.java"}, {"insertions": 3, "deletions": 0, "lines": 3, "filePath": "dependencies.yml"}, {"insertions": 52, "deletions": 30, "lines": 82, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java"}, {"insertions": 9, "deletions": 1, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java"}, {"insertions": 2, "deletions": 4, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpResponseWrapperTest.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/NoopRequestLogBuilder.java"}, {"insertions": 3, "deletions": 0, "lines": 3, "filePath": "core/build.gradle"}, {"insertions": 30, "deletions": 0, "lines": 30, "filePath": "core/src/test/java/com/linecorp/armeria/common/HttpRequestTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageUtil.java"}, {"insertions": 11, "deletions": 5, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultHttpClient.java"}, {"insertions": 12, "deletions": 0, "lines": 12, "filePath": "core/src/test/java/com/linecorp/armeria/client/DefaultHttpClientTest.java"}, {"insertions": 28, "deletions": 17, "lines": 45, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java"}, {"insertions": 25, "deletions": 13, "lines": 38, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java"}, {"insertions": 5, "deletions": 1, "lines": 6, "filePath": "grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java"}, {"insertions": 44, "deletions": 22, "lines": 66, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java"}, {"insertions": 39, "deletions": 0, "lines": 39, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/AbortCauseArgumentProvider.java"}, {"insertions": 75, "deletions": 42, "lines": 117, "filePath": "brave/src/test/java/com/linecorp/armeria/it/brave/BraveIntegrationTest.java"}, {"insertions": 20, "deletions": 11, "lines": 31, "filePath": "core/src/test/java/com/linecorp/armeria/internal/DefaultHttpRequestTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java"}, {"insertions": 9, "deletions": 6, "lines": 15, "filePath": "core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerHttpClientIntegrationTest.java"}, {"insertions": 14, "deletions": 0, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java"}, {"insertions": 47, "deletions": 5, "lines": 52, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java"}, {"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java"}], "commitDateTime": "2019-11-14 16:11:51", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/2008", "ttf": 104.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`NullPointerException` in `ArmeriaGrpcServerInteropTest`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0.0, "spoonMethodsChanged": 0, "TOT": 0.0, "MOV": 0.0, "INS": 0.0, "DEL": 0.0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 2, "alsoFixesPhrase": 0}, "body": "Found this from CI:\r\n\r\n```\r\ncom.linecorp.armeria.server.grpc.interop.ArmeriaGrpcServerInteropTest > deadlineExceeded FAILED\r\n    java.lang.NullPointerException\r\n```\r\n\r\nNo stack trace unfortunately.", "labels": ["defect"]}, {"created": "2019-08-17 12:46:25", "commits": {"4f103125b80c32a5d6808ce9dc6917e12d7ae8ab": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-10-02 10:32:26", "filteredCommits": [], "commitsDetails": [{"nameRev": "4f103125b80c32a5d6808ce9dc6917e12d7ae8ab tags/armeria-0.94.0~4", "commitMessage": "Do not notify `ResponseTimeoutException` twice (#2138)\n\nMotivation:\r\n\r\n- `HttpResponseDecoder` logs a `ResponseTimeoutException` while\r\n  notifying it to a user, which is a double notification.\r\n\r\nModifications:\r\n\r\n- Do not log a `ResponseTimeoutException` when the response has been\r\n  timed out and the `HttpResponse` was closed with the same exception.\r\n\r\nResult:\r\n\r\n- Fixes #2000", "commitParents": ["acff7d0fb5d9f1e48a8304da1e4522032eafd2e2"], "spoonStatsSkippedReason": "", "commitHash": "4f103125b80c32a5d6808ce9dc6917e12d7ae8ab", "authoredDateTime": "2019-10-02 19:32:25", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 8, "deletions": 8, "lines": 16, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpResponseWrapperTest.java"}, {"insertions": 35, "deletions": 27, "lines": 62, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java"}], "commitDateTime": "2019-10-02 19:32:25", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 3, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseWrapperTest.splitTrailersIsIgnored()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseWrapperTest.headersAndData()"}, {"UPD": 0, "TOT": 4, "MOV": 3, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseWrapperTest.headersAndTrailers()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseWrapperTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseWrapperTest.splitTrailersAfterDataIsIgnored()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseWrapperTest.dataIsIgnoreAfterSecondHeaders()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseWrapperTest.informationalHeadersHeadersDataAndTrailers()"}], "spoonFilePath": "HttpResponseWrapperTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseDecoder.HttpResponseWrapper.cancelTimeoutOrLog(java.lang.Throwable,java.util.function.Consumer)"}, {"UPD": 1, "TOT": 9, "MOV": 6, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseDecoder.HttpResponseWrapper.cancelTimeout()"}, {"UPD": 3, "TOT": 23, "MOV": 18, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseDecoder.HttpResponseWrapper.close(java.lang.Throwable,java.util.function.Consumer)"}], "spoonFilePath": "HttpResponseDecoder.java"}]}], "url": "https://github.com/line/armeria/issues/2000", "ttf": 45.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Response Timeouts both logged and returned to user", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Currently, it seems that here we log a response timeout despite returning it to the user\r\n\r\nhttps://github.com/line/armeria/blob/f2b67df619b8bf5df9b92c4eb87dbc4bfea24f3f/core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java#L289\r\n\r\nI think we're supposed to not be logging ResponseTimeoutException since we return it anyways and it ends up double logged.", "labels": ["defect"]}, {"created": "2019-08-16 12:54:31", "commits": {"37370f3b88bc9e8b4bb36d0865b04983debfc8b3": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "9a4a062bb6c8eaec9fb830e68f42ca14d692fe0c": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-08-21 06:16:20", "filteredCommits": [], "commitsDetails": [{"nameRev": "37370f3b88bc9e8b4bb36d0865b04983debfc8b3 tags/armeria-0.90.3~2", "commitMessage": "Fix `byte[]` and `HttpData` conversion (#2005)\n\nMotivation:\r\n\r\nThe following annotated service method will fail because\r\n`ByteArrayResponseConverterFunction` currently does not convert `byte[]`\r\nor `HttpData` with the content type other than\r\n`application/octet-stream` or `application/binary`.\r\n\r\nModifications:\r\n\r\n- Convert `byte[]` or `HttpData` even if the content type is neither\r\n  `application/octet-stream` nor `application/binary`.\r\n- Also fix the case where `byte[]` or `HttpData` is not converted when a\r\n  service method produces text content.\r\n\r\nResult:\r\n\r\n- Fixes #1999", "commitParents": ["0796216b1b9ece351f7a8691d583faa733e30436"], "spoonStatsSkippedReason": "", "commitHash": "37370f3b88bc9e8b4bb36d0865b04983debfc8b3", "authoredDateTime": "2019-08-21 15:16:19", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 76, "deletions": 25, "lines": 101, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceResponseConverterTest.java"}, {"insertions": 15, "deletions": 9, "lines": 24, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayResponseConverterFunction.java"}, {"insertions": 22, "deletions": 6, "lines": 28, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java"}], "commitDateTime": "2019-08-21 15:19:46", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 0, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.httpDataPng()"}, {"UPD": 0, "TOT": 13, "MOV": 2, "INS": 5, "DEL": 6, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.shouldBeConvertedByDefaultResponseConverter(com.linecorp.armeria.client.HttpClient)"}, {"UPD": 0, "TOT": 6, "MOV": 2, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.httpResultWithPublisher()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).2.string()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1.jsonNode()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.httpDataTxt()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.ObjectPublisher"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.byteArray()"}, {"UPD": 1, "TOT": 5, "MOV": 3, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).2.jsonNode()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).2.httpData()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.byteArrayGif()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1.httpData()"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).2"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1.byteArray()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1.string()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).5.monoJsonNode()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).2.byteArray()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).5.jsonNode()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.httpData()"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.jsonNode()"}, {"UPD": 1, "TOT": 28, "MOV": 18, "INS": 5, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.produceTypeAnnotationBasedDefaultResponseConverter()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.byteArrayTxt()"}], "spoonFilePath": "AnnotatedHttpServiceResponseConverterTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 14, "MOV": 3, "INS": 5, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.server.annotation.StringResponseConverterFunction.toHttpData(java.lang.Object,java.nio.charset.Charset)"}], "spoonFilePath": "StringResponseConverterFunction.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 10, "MOV": 7, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.annotation.ByteArrayResponseConverterFunction.convertResponse(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.ResponseHeaders,java.lang.Object,com.linecorp.armeria.common.HttpHeaders)"}], "spoonFilePath": "ByteArrayResponseConverterFunction.java"}]}, {"nameRev": "9a4a062bb6c8eaec9fb830e68f42ca14d692fe0c tags/armeria-0.91.0~23", "commitMessage": "Fix `byte[]` and `HttpData` conversion (#2005)\n\nMotivation:\r\n\r\nThe following annotated service method will fail because\r\n`ByteArrayResponseConverterFunction` currently does not convert `byte[]`\r\nor `HttpData` with the content type other than\r\n`application/octet-stream` or `application/binary`.\r\n\r\nModifications:\r\n\r\n- Convert `byte[]` or `HttpData` even if the content type is neither\r\n  `application/octet-stream` nor `application/binary`.\r\n- Also fix the case where `byte[]` or `HttpData` is not converted when a\r\n  service method produces text content.\r\n\r\nResult:\r\n\r\n- Fixes #1999", "commitParents": ["708cde454ae90ac04bf52a3c83fd56c95e17971e"], "spoonStatsSkippedReason": "", "commitHash": "9a4a062bb6c8eaec9fb830e68f42ca14d692fe0c", "authoredDateTime": "2019-08-21 15:16:19", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 76, "deletions": 25, "lines": 101, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceResponseConverterTest.java"}, {"insertions": 15, "deletions": 9, "lines": 24, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/ByteArrayResponseConverterFunction.java"}, {"insertions": 22, "deletions": 6, "lines": 28, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java"}], "commitDateTime": "2019-08-21 15:16:19", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 0, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.httpDataPng()"}, {"UPD": 0, "TOT": 13, "MOV": 2, "INS": 5, "DEL": 6, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.shouldBeConvertedByDefaultResponseConverter(com.linecorp.armeria.client.HttpClient)"}, {"UPD": 0, "TOT": 6, "MOV": 2, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.httpResultWithPublisher()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).2.string()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1.jsonNode()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.httpDataTxt()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.ObjectPublisher"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.byteArray()"}, {"UPD": 1, "TOT": 5, "MOV": 3, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).2.jsonNode()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).2.httpData()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.byteArrayGif()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1.httpData()"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).2"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1.byteArray()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1.string()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).5.monoJsonNode()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).2.byteArray()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).5.jsonNode()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.httpData()"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).1"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.jsonNode()"}, {"UPD": 1, "TOT": 28, "MOV": 18, "INS": 5, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.produceTypeAnnotationBasedDefaultResponseConverter()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceResponseConverterTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6.byteArrayTxt()"}], "spoonFilePath": "AnnotatedHttpServiceResponseConverterTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 14, "MOV": 3, "INS": 5, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.server.annotation.StringResponseConverterFunction.toHttpData(java.lang.Object,java.nio.charset.Charset)"}], "spoonFilePath": "StringResponseConverterFunction.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 10, "MOV": 7, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.annotation.ByteArrayResponseConverterFunction.convertResponse(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.ResponseHeaders,java.lang.Object,com.linecorp.armeria.common.HttpHeaders)"}], "spoonFilePath": "ByteArrayResponseConverterFunction.java"}]}], "url": "https://github.com/line/armeria/issues/1999", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "ByteArrayResponseConverterFunction clamped to two MediaTypes", "statsSkippedReason": "", "user": "tobias-", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 1, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "The following snippet should imho work:\r\n```\r\n    @Get(\"/favicon.ico\")\r\n    @Produces(\"image/gif\")\r\n    private ByteArray favicon() {\r\n        return new byte[0]\r\n    }\r\n```\r\n\r\nIt does not work however, because if the `contentType` isn't null, and isn't one of APPLICATION_BINARY or OCTET_STREAM, the converter will not be used.\r\n\r\nDiscussion about problem:\r\nhttps://app.slack.com/client/T1NH00FK9/C1NGPBUH2/thread/C1NGPBUH2-1565946569.136900", "labels": ["defect"]}, {"created": "2019-08-12 06:50:35", "commits": {"45c1633e1cdea43fcfc729a03739dcdb8ad0b49c": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2019-09-27 03:28:44", "filteredCommits": [], "commitsDetails": [{"nameRev": "45c1633e1cdea43fcfc729a03739dcdb8ad0b49c tags/armeria-0.94.0~16", "commitMessage": "Implement the methods that are available only in Java 9+ for `RequestContextAwareCompletableFuture` (#2052)\n\nMotivation:\r\n- `RequestContextAwareCompletableFuture` does not override the `CompletableFuture` methods that are available only in Java 9+.\r\n\r\nModifications:\r\n- Override the `CompletableFuture` methods that are available only in Java 9+.\r\n\r\nResult:\r\n- All `CompletableFuture` methods are now context-aware.\r\n- Fixes #1991 ", "commitParents": ["25db175c56ba0ee344eccc1972546e09a69e23d5"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "45c1633e1cdea43fcfc729a03739dcdb8ad0b49c", "authoredDateTime": "2019-09-27 12:28:43", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 296, "deletions": 0, "lines": 296, "filePath": "core/src/main/java/com/linecorp/armeria/common/RequestContextAwareMinimalStage.java"}, {"insertions": 70, "deletions": 0, "lines": 70, "filePath": "core/src/test/java/com/linecorp/armeria/common/RequestContextTest.java"}, {"insertions": 93, "deletions": 37, "lines": 130, "filePath": "core/src/main/java/com/linecorp/armeria/common/RequestContextAwareCompletableFuture.java"}], "commitDateTime": "2019-09-27 12:28:43", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1991", "ttf": 45.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Override new  Java 9 `CompletableFuture` API for  `RequestContextAwareCompletableFuture`", "statsSkippedReason": "", "user": "ikhoon", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Armeria `RequestContextAwareCompletableFuture` extends `CompletableFuture` and override their methods based on Java 8.\r\nhttps://github.com/line/armeria/blob/54e124d73178609b4f0af6d833ea562a1ce15bd9/core/src/main/java/com/linecorp/armeria/common/RequestContextAwareCompletableFuture.java#L27\r\nJava 9 comes with [some changes](https://www.baeldung.com/java-9-completablefuture) to the\u00a0CompletableFuture\u00a0class.\r\nWe need to override the following methods:\r\n* [completeAsync\u200b(Supplier<? extends T>\u00a0supplier)\r\n](https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html#completeAsync-java.util.function.Supplier-)\r\n* [completeAsync\u200b(Supplier<? extends T>\u00a0supplier, Executor\u00a0executor)](https://docs.oracle.com/javase/9/docs/api/java/util/concurrent/CompletableFuture.html#completeAsync-java.util.function.Supplier-java.util.concurrent.Executor-)\r\n\r\nNB: To keep compatibility with Java 8\r\n* Don't use `@Override` keyword\r\n* Branch policy is required depending on Java version.\r\n\r\nAdditionally, We can detect un-override cases early by scanning `javadoc` and find a class which `implements` or `extends`, but is not `com.linecorp.armeria` package. \r\nRelated work: https://github.com/line/armeria/blob/0419e5b24ef5a12cfa3e4937b08fcb0f24f501d3/site/build.gradle#L72-L77\r\n\r\ncc: Thanks for inquiry on this issue. @jongyeol", "labels": ["defect", "good first issue"]}, {"created": "2019-08-12 02:00:55", "commits": {"e27e0b0818682ca204c0d8ff490ab9a637c0cbf5": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-08-12 04:25:14", "filteredCommits": [], "commitsDetails": [{"nameRev": "e27e0b0818682ca204c0d8ff490ab9a637c0cbf5 tags/armeria-0.90.1~5", "commitMessage": "Fix not to raise ConcurrentModificationException in HealthCheckedEndp\u2026 (#1990)\n\n\u2026ointGroup.\r\n\r\nFix #1989", "commitParents": ["b545a9d06ac9f5a861de1b92ce75bd0ebcc31242"], "spoonStatsSkippedReason": "", "commitHash": "e27e0b0818682ca204c0d8ff490ab9a637c0cbf5", "authoredDateTime": "2019-08-12 13:25:13", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java"}, {"insertions": 5, "deletions": 1, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/healthcheck/HealthCheckedEndpointGroup.java"}], "commitDateTime": "2019-08-12 13:25:13", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 8, "MOV": 1, "INS": 5, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HealthCheckedEndpointGroup"}], "spoonFilePath": "HealthCheckedEndpointGroup.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.DynamicEndpointGroup.addEndpoint(com.linecorp.armeria.client.Endpoint)"}], "spoonFilePath": "DynamicEndpointGroup.java"}]}], "url": "https://github.com/line/armeria/issues/1989", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`ConcurrentModificationException` in `HealthCheckedEndpointGroup.<init>`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```\r\nCaused by: java.util.ConcurrentModificationException: null\r\n\tat java.base/java.util.HashMap$Values.forEach(HashMap.java:979)\r\n\tat com.linecorp.armeria.client.endpoint.healthcheck.HealthCheckedEndpointGroup.<init>(HealthCheckedEndpointGroup.java:126)\r\n\tat com.linecorp.armeria.client.endpoint.healthcheck.AbstractHealthCheckedEndpointGroupBuilder.build(AbstractHealthCheckedEndpointGroupBuilder.java:147)\r\n```", "labels": ["defect"]}, {"created": "2019-08-10 16:45:54", "commits": {"0d820e04b260ba03c93debeed2c007481609bb06": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-08-12 09:55:08", "filteredCommits": [], "commitsDetails": [{"nameRev": "0d820e04b260ba03c93debeed2c007481609bb06 tags/armeria-0.90.1~4", "commitMessage": "Disable TLS v1.3 when not supported (#1986)\n\nMotivation:\r\n\r\nArmeria should disable TLSv1.3 when using `JdkSslContext` and the current Java version is lower than 11.\r\n\r\nModifications:\r\n\r\n- Filter out unsupported TLS protocols.\r\n- Miscellaneous:\r\n  - Update `CONTRIBUTING.md`\r\n\r\nResult:\r\n\r\n- Fixes #1984", "commitParents": ["e27e0b0818682ca204c0d8ff490ab9a637c0cbf5"], "spoonStatsSkippedReason": "", "commitHash": "0d820e04b260ba03c93debeed2c007481609bb06", "authoredDateTime": "2019-08-12 02:55:08", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "CONTRIBUTING.md"}, {"insertions": 51, "deletions": 0, "lines": 51, "filePath": "core/src/test/java/com/linecorp/armeria/internal/SslContextUtilTest.java"}, {"insertions": 69, "deletions": 10, "lines": 79, "filePath": "core/src/main/java/com/linecorp/armeria/internal/SslContextUtil.java"}], "commitDateTime": "2019-08-12 18:55:08", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 27, "MOV": 12, "INS": 11, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.internal.SslContextUtil.createSslContext(java.util.function.Supplier,boolean,java.util.function.Consumer)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.SslContextUtil.supportedProtocols(io.netty.handler.ssl.SslContextBuilder)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.SslContextUtil"}], "spoonFilePath": "SslContextUtil.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.SslContextUtilTest"}], "spoonFilePath": "SslContextUtilTest.java"}]}], "url": "https://github.com/line/armeria/issues/1984", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Do not enable `TLSv1.3` when the current `SSLEngine` does not support it.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "For example, when a user is running Armeria on an old JDK without TLSv1.3 support *and* BoringSSL is not loaded, he or she will get the following exception:\r\n\r\n```\r\n[armeria-common-worker-epoll-2-1] WARN com.linecorp.armeria.server.HttpServerPipelineConfigurator - [id: 0xc833df45, L:/127.0.0.1:8080 - R:/127.0.0.1:46360] Unexpected exception:\r\nio.netty.handler.codec.DecoderException: java.lang.IllegalArgumentException: TLSv1.3\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:475)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:283)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.handler.flush.FlushConsolidationHandler.channelRead(FlushConsolidationHandler.java:154)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1421)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\r\n\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:794)\r\n\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:424)\r\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:326)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.lang.IllegalArgumentException: TLSv1.3\r\n\tat sun.security.ssl.ProtocolVersion.valueOf(ProtocolVersion.java:187)\r\n\tat sun.security.ssl.ProtocolList.convert(ProtocolList.java:84)\r\n\tat sun.security.ssl.ProtocolList.<init>(ProtocolList.java:52)\r\n\tat sun.security.ssl.SSLEngineImpl.setEnabledProtocols(SSLEngineImpl.java:2070)\r\n\tat io.netty.handler.ssl.JdkSslContext.configureAndWrapEngine(JdkSslContext.java:341)\r\n\tat io.netty.handler.ssl.JdkSslContext.newEngine(JdkSslContext.java:330)\r\n\tat io.netty.handler.ssl.SslContext.newHandler(SslContext.java:943)\r\n\tat io.netty.handler.ssl.SslContext.newHandler(SslContext.java:935)\r\n\tat io.netty.handler.ssl.SniHandler.newSslHandler(SniHandler.java:151)\r\n\tat io.netty.handler.ssl.SniHandler.replaceHandler(SniHandler.java:133)\r\n\tat io.netty.handler.ssl.SniHandler.onLookupComplete(SniHandler.java:114)\r\n\tat io.netty.handler.ssl.AbstractSniHandler.select(AbstractSniHandler.java:211)\r\n\tat io.netty.handler.ssl.AbstractSniHandler.decode(AbstractSniHandler.java:203)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:505)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:444)\r\n\t... 19 more\r\n[armeria-common-worker-epoll-2-1] WARN com.linecorp.armeria.server.HttpServerPipelineConfigurator - [id: 0xc833df45, L:/127.0.0.1:8080 ! R:/127.0.0.1:46360] Unexpected exception:\r\nio.netty.handler.codec.DecoderException: java.lang.IllegalArgumentException: TLSv1.3\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:475)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:408)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:375)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:358)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:257)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:243)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:236)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1416)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:257)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:243)\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:912)\r\n\tat io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:816)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:416)\r\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:331)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:918)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.lang.IllegalArgumentException: TLSv1.3\r\n\tat sun.security.ssl.ProtocolVersion.valueOf(ProtocolVersion.java:187)\r\n\tat sun.security.ssl.ProtocolList.convert(ProtocolList.java:84)\r\n\tat sun.security.ssl.ProtocolList.<init>(ProtocolList.java:52)\r\n\tat sun.security.ssl.SSLEngineImpl.setEnabledProtocols(SSLEngineImpl.java:2070)\r\n\tat io.netty.handler.ssl.JdkSslContext.configureAndWrapEngine(JdkSslContext.java:341)\r\n\tat io.netty.handler.ssl.JdkSslContext.newEngine(JdkSslContext.java:330)\r\n\tat io.netty.handler.ssl.SslContext.newHandler(SslContext.java:943)\r\n\tat io.netty.handler.ssl.SslContext.newHandler(SslContext.java:935)\r\n\tat io.netty.handler.ssl.SniHandler.newSslHandler(SniHandler.java:151)\r\n\tat io.netty.handler.ssl.SniHandler.replaceHandler(SniHandler.java:133)\r\n\tat io.netty.handler.ssl.SniHandler.onLookupComplete(SniHandler.java:114)\r\n\tat io.netty.handler.ssl.AbstractSniHandler.select(AbstractSniHandler.java:211)\r\n\tat io.netty.handler.ssl.AbstractSniHandler.decode(AbstractSniHandler.java:203)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:505)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:444)\r\n\t... 18 more\r\n```\r\n\r\nWe could avoid enabling `TLSv1.3` when the current `SSLEngine` implementation we are going to use does not support it.\r\n\r\nSee: https://github.com/line/armeria/blob/44a7e1291c34fa4f6a1f2ae1b876129676b61f19/core/src/main/java/com/linecorp/armeria/internal/SslContextUtil.java#L66-L78", "labels": ["defect", "good first issue"]}, {"created": "2019-08-07 08:09:13", "commits": {"dd14a0396c6dbf07b6e52e97afded64bae0b8748": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "bc0bca3bc848acd7ee18ef2b69bfbf950e21c6a1": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-08-07 11:26:25", "filteredCommits": [], "commitsDetails": [{"nameRev": "dd14a0396c6dbf07b6e52e97afded64bae0b8748 tags/armeria-0.89.1~1", "commitMessage": "Make `RetryingClient` respect the `Endpoint` selection order (#1974)\n\nMotivation:\r\n\r\n`RetryingClient.newDerivedContext()` always selects a new `Endpoint`,\r\nbut it should never for the first attempt, because the `Endpoint` for\r\nthe first attempt has been already selected by the parent context.\r\n\r\nModifications:\r\n\r\n- Add `totalAttempt` parameter to `RetryingClient.newDerivedContext()`\r\n  and do not select a new `Endpoint` when it's greater than 1.\r\n- Add a test case\r\n\r\nResult:\r\n\r\n- Fixes #1973", "commitParents": ["7bd9168ea0988f80f47b53899f4c602113c12374"], "spoonStatsSkippedReason": "", "commitHash": "dd14a0396c6dbf07b6e52e97afded64bae0b8748", "authoredDateTime": "2019-08-07 20:26:24", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java"}, {"insertions": 143, "deletions": 0, "lines": 143, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientLoadBalancingTest.java"}], "commitDateTime": "2019-08-12 23:45:40", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClientLoadBalancingTest"}], "spoonFilePath": "RetryingClientLoadBalancingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.newDerivedContext(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.Request,int)"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.newDerivedContext(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.Request)"}], "spoonFilePath": "RetryingClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.doExecute0(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcRequest,com.linecorp.armeria.common.RpcResponse,java.util.concurrent.CompletableFuture)"}], "spoonFilePath": "RetryingRpcClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute0(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpResponse,java.util.concurrent.CompletableFuture,boolean)"}], "spoonFilePath": "RetryingHttpClient.java"}]}, {"nameRev": "bc0bca3bc848acd7ee18ef2b69bfbf950e21c6a1 tags/armeria-0.90.0~11", "commitMessage": "Make `RetryingClient` respect the `Endpoint` selection order (#1974)\n\nMotivation:\r\n\r\n`RetryingClient.newDerivedContext()` always selects a new `Endpoint`,\r\nbut it should never for the first attempt, because the `Endpoint` for\r\nthe first attempt has been already selected by the parent context.\r\n\r\nModifications:\r\n\r\n- Add `totalAttempt` parameter to `RetryingClient.newDerivedContext()`\r\n  and do not select a new `Endpoint` when it's greater than 1.\r\n- Add a test case\r\n\r\nResult:\r\n\r\n- Fixes #1973", "commitParents": ["51c220eb8c18f3a8f9dce6c8e598744e50c8e545"], "spoonStatsSkippedReason": "", "commitHash": "bc0bca3bc848acd7ee18ef2b69bfbf950e21c6a1", "authoredDateTime": "2019-08-07 20:26:24", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java"}, {"insertions": 143, "deletions": 0, "lines": 143, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientLoadBalancingTest.java"}], "commitDateTime": "2019-08-07 20:26:24", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClientLoadBalancingTest"}], "spoonFilePath": "RetryingClientLoadBalancingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.newDerivedContext(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.Request,int)"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.newDerivedContext(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.Request)"}], "spoonFilePath": "RetryingClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.doExecute0(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcRequest,com.linecorp.armeria.common.RpcResponse,java.util.concurrent.CompletableFuture)"}], "spoonFilePath": "RetryingRpcClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute0(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpResponse,java.util.concurrent.CompletableFuture,boolean)"}], "spoonFilePath": "RetryingHttpClient.java"}]}], "url": "https://github.com/line/armeria/issues/1973", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "RetryClient produces extra endpoint selection if the parent context has EndpointSelector", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 1, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "After version up to 0.89, I realized that, the request to upstream servers become imbalance because an `Endpoint` is already selected at `DefaultClientRequestContext#init` but `RetryingClient#newDerivedContext` also selects `Endpoint`.\r\n\r\nHere is minimal reproducible code. You realized that, with `RetryingHttpClient`, it expects to send requests to `port:8080`, `port:8081` servers but it does not.\r\n\r\n```java\r\n    private static int port(Server server) {\r\n        return server.activePort().get().localAddress().getPort();\r\n    }\r\n\r\n    @Test\r\n    void endpoint() {\r\n        List<Server> servers = new ArrayList<>();\r\n        AtomicInteger port = new AtomicInteger(8080);\r\n        for (int i = 0; i < 2; i++) {\r\n            Server s = new ServerBuilder()\r\n                    .http(port.getAndIncrement())\r\n                    .service(Route.builder().catchAll().build(),\r\n                             new AbstractHttpService() {\r\n                                 @Override\r\n                                 public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) {\r\n                                     return HttpResponse.of(HttpStatus.OK, MediaType.ANY_TYPE,\r\n                                                            Integer.toString(port(ctx.server())));\r\n                                 }\r\n                             })\r\n                    .build();\r\n            s.start().join();\r\n            servers.add(s);\r\n        }\r\n\r\n        List<Endpoint> l = new ArrayList<>();\r\n        for (Server server : servers) {\r\n            l.add(Endpoint.of(\"127.0.0.1\", port(server)).withWeight(1000));\r\n        }\r\n\r\n        StaticEndpointGroup g = new StaticEndpointGroup(l);\r\n\r\n        assertThat(g.endpoints()).hasSize(2);\r\n        EndpointGroupRegistry.register(\"test\", g, EndpointSelectionStrategy.WEIGHTED_ROUND_ROBIN);\r\n        HttpClient c = new HttpClientBuilder(\"http://group:test/\")\r\n                .decorator(new RetryingHttpClientBuilder(RetryStrategy.onServerErrorStatus()).newDecorator())\r\n                .build();\r\n        List<String> responses = ImmutableList.of(\r\n                c.get(\"/monitor/l7check\").aggregate().join().contentAscii(),\r\n                c.get(\"/monitor/l7check\").aggregate().join().contentAscii());\r\n        assertThat(responses.get(0)).isEqualTo(\"8080\");\r\n        assertThat(responses.get(1)).isEqualTo(\"8081\");\r\n    }\r\n```", "labels": ["defect"]}, {"created": "2019-08-06 02:46:08", "commits": {"323c66eb3cbefc7b770da969b3ec3f9eb4ecf77f": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-08-06 05:51:47", "filteredCommits": [], "commitsDetails": [{"nameRev": "323c66eb3cbefc7b770da969b3ec3f9eb4ecf77f tags/armeria-0.90.0~13", "commitMessage": "Fix to contain te header in gRPC request (#1965)\n\nMotivation:\r\nAccording to the [spec](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md#requests),\r\ngRPC `Request-Headers` has to conatin te header in order to detect incompatible proxies.\r\n\r\nModification:\r\n- Add te header to gRPC request headers\r\n\r\nResult:\r\n- Fix #1963", "commitParents": ["15cdfd59632ce2f781eec0b7f2e9eeaef42b2b77"], "spoonStatsSkippedReason": "", "commitHash": "323c66eb3cbefc7b770da969b3ec3f9eb4ecf77f", "authoredDateTime": "2019-08-06 14:51:46", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 12, "deletions": 2, "lines": 14, "filePath": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java"}, {"insertions": 3, "deletions": 1, "lines": 4, "filePath": "grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaChannel.java"}, {"insertions": 3, "deletions": 1, "lines": 4, "filePath": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/UnaryGrpcClient.java"}], "commitDateTime": "2019-08-06 14:51:46", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.grpc.protocol.UnaryGrpcClient.execute(java.lang.String,byte[])"}], "spoonFilePath": "UnaryGrpcClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.exchangeHeadersStreamingCall()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.exchangeHeadersUnaryCall_grpcMetadata()"}], "spoonFilePath": "GrpcClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.ArmeriaChannel.newCall(io.grpc.MethodDescriptor,io.grpc.CallOptions)"}], "spoonFilePath": "ArmeriaChannel.java"}]}], "url": "https://github.com/line/armeria/issues/1963", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Armeria failed to call python gRPC server", "statsSkippedReason": "", "user": "dawnbreaks", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Hi, armeria client can not call the python server, and please refer to the following debug output of the python server, it seems that it is caused by the missing header of TE . It would be appreciated anyone can fix this issue soon.\r\n\r\narmeria version: 0.89\r\npython gRPC server: 1.22.0\r\n\r\n```\r\nD0806 02:31:27.965091212      19 tcp_posix.cc:1258]          cannot set inq fd=11 errno=92\r\nI0806 02:31:27.965223260      19 chttp2_transport.cc:841]    W:0x55d743561940 SERVER [ipv4:172.16.71.203:53095] state IDLE -> WRITING [TRANSPORT_FLOW_CONTROL]\r\nI0806 02:31:27.965250787      19 chttp2_transport.cc:841]    W:0x55d743561940 SERVER [ipv4:172.16.71.203:53095] state WRITING -> WRITING+MORE [INITIAL_WRITE]\r\nI0806 02:31:27.965306897      19 chttp2_transport.cc:1877]   perform_transport_op[t=0x55d743561940]: ON_CONNECTIVITY_STATE_CHANGE:p=0x55d743566380:from=IDLE SET_ACCEPT_STREAM:0x7f13f1ba2950(0x55d743566318,...)\r\nI0806 02:31:27.965330061      19 chttp2_transport.cc:1877]   perform_transport_op[t=0x55d743561940]: ON_CONNECTIVITY_STATE_CHANGE:p=0x55d743566380:from=READY\r\nI0806 02:31:27.965365425      19 writing.cc:116]             SERVER: Ping sent [ipv4:172.16.71.203:53095]: 2/2\r\nI0806 02:31:27.965388285      19 chttp2_transport.cc:841]    W:0x55d743561940 SERVER [ipv4:172.16.71.203:53095] state WRITING+MORE -> WRITING [begin write in current thread]\r\nI0806 02:31:27.965439262      19 chttp2_transport.cc:2623]   ipv4:172.16.71.203:53095: Start BDP ping err=\"No Error\"\r\nI0806 02:31:27.965462732      19 chttp2_transport.cc:841]    W:0x55d743561940 SERVER [ipv4:172.16.71.203:53095] state WRITING -> IDLE [finish writing]\r\nI0806 02:31:27.972813083      19 frame_settings.cc:222]      0x55d743561940[svr] adding 983041 for initial_window change\r\nI0806 02:31:27.972845071      19 frame_settings.cc:229]      CHTTP2:SVR:ipv4:172.16.71.203:53095: got setting INITIAL_WINDOW_SIZE = 1048576\r\nI0806 02:31:27.972856826      19 frame_settings.cc:229]      CHTTP2:SVR:ipv4:172.16.71.203:53095: got setting MAX_HEADER_LIST_SIZE = 8192\r\nI0806 02:31:28.041162088      19 chttp2_transport.cc:2639]   ipv4:172.16.71.203:53095: Complete BDP ping err=\"No Error\"\r\nI0806 02:31:28.073737463      19 parsing.cc:656]             parsing initial_metadata\r\nI0806 02:31:28.073776189      19 hpack_parser.cc:636]        Decode: ':method: POST', elem_interned=1 [3], k_interned=1, v_interned=1\r\nI0806 02:31:28.073800916      19 parsing.cc:407]             HTTP:3:HDR:SVR: :method: 50 4f 53 54 'POST'\r\nI0806 02:31:28.073835161      19 hpack_parser.cc:636]        Decode: ':path: /infra.commonserver.address.RakeKeywordsService/ListKeywords', elem_interned=1 [1], k_interned=1, v_interned=1\r\nI0806 02:31:28.073859783      19 parsing.cc:407]             HTTP:3:HDR:SVR: :path: 2f 69 6e 66 72 61 2e 63 6f 6d 6d 6f 6e 73 65 72 76 65 72 2e 61 64 64 72 65 73 73 2e 52 61 6b 65 4b 65 79 77 6f 72 64 73 53 65 72 76 69 63 65 2f 4c 69 73 74 4b 65 79 77 6f 72 64 73 '/infra.commonserver.address.RakeKeywordsService/ListKeywords'\r\nI0806 02:31:28.073882947      19 hpack_parser.cc:636]        Decode: ':authority: 192.168.4.63:8080', elem_interned=1 [1], k_interned=1, v_interned=1\r\nI0806 02:31:28.073905810      19 parsing.cc:407]             HTTP:3:HDR:SVR: :authority: 31 39 32 2e 31 36 38 2e 34 2e 36 33 3a 38 30 38 30 '192.168.4.63:8080'\r\nI0806 02:31:28.073926531      19 hpack_parser.cc:636]        Decode: ':scheme: http', elem_interned=1 [3], k_interned=1, v_interned=1\r\nI0806 02:31:28.073942873      19 parsing.cc:407]             HTTP:3:HDR:SVR: :scheme: 68 74 74 70 'http'\r\nI0806 02:31:28.073967299      19 hpack_parser.cc:636]        Decode: 'content-type: application/grpc', elem_interned=1 [3], k_interned=1, v_interned=1\r\nI0806 02:31:28.073996457      19 parsing.cc:407]             HTTP:3:HDR:SVR: content-type: 61 70 70 6c 69 63 61 74 69 6f 6e 2f 67 72 70 63 'application/grpc'\r\nI0806 02:31:28.074023374      19 hpack_parser.cc:636]        Decode: 'grpc-accept-encoding: gzip', elem_interned=1 [3], k_interned=1, v_interned=1\r\nI0806 02:31:28.074046275      19 parsing.cc:407]             HTTP:3:HDR:SVR: grpc-accept-encoding: 67 7a 69 70 'gzip'\r\nI0806 02:31:28.074065980      19 hpack_parser.cc:636]        Decode: 'grpc-timeout: 15000000u', elem_interned=1 [1], k_interned=1, v_interned=1\r\nI0806 02:31:28.074084423      19 parsing.cc:407]             HTTP:3:HDR:SVR: grpc-timeout: 31 35 30 30 30 30 30 30 75 '15000000u'\r\nI0806 02:31:28.074111118      19 hpack_parser.cc:636]        Decode: 'user-agent: armeria/0.89.0', elem_interned=1 [1], k_interned=1, v_interned=1\r\nI0806 02:31:28.074129307      19 parsing.cc:407]             HTTP:3:HDR:SVR: user-agent: 61 72 6d 65 72 69 61 2f 30 2e 38 39 2e 30 'armeria/0.89.0'\r\nI0806 02:31:28.074151135      19 chttp2_transport.cc:1710]   perform_stream_op[s=0x55d7435406d8]:  RECV_INITIAL_METADATA\r\nI0806 02:31:28.074168288      19 chttp2_transport.cc:1406]   perform_stream_op_locked:  RECV_INITIAL_METADATA; on_complete = 0\r\nI0806 02:31:28.074243885      19 chttp2_transport.cc:1710]   perform_stream_op[s=0x55d7435406d8]:  CANCEL:{\"created\":\"@1565058688.074188451\",\"description\":\"Missing :authority or :path\",\"file\":\"src/core/lib/surface/server.cc\",\"file_line\":772,\"referenced_errors\":[{\"created\":\"@1565058688.074184687\",\"description\":\"Failed processing incoming headers\",\"file\":\"src/core/ext/filters/http/server/http_server_filter.cc\",\"file_line\":122,\"referenced_errors\":[{\"created\":\"@1565058688.074181256\",\"description\":\"Missing header\",\"file\":\"src/core/ext/filters/http/server/http_server_filter.cc\",\"file_line\":178,\"key\":\"te\"}]}]}\r\nI0806 02:31:28.074260044      19 chttp2_transport.cc:1406]   perform_stream_op_locked:  CANCEL:{\"created\":\"@1565058688.074188451\",\"description\":\"Missing :authority or :path\",\"file\":\"src/core/lib/surface/server.cc\",\"file_line\":772,\"referenced_errors\":[{\"created\":\"@1565058688.074184687\",\"description\":\"Failed processing incoming headers\",\"file\":\"src/core/ext/filters/http/server/http_server_filter.cc\",\"file_line\":122,\"referenced_errors\":[{\"created\":\"@1565058688.074181256\",\"description\":\"Missing header\",\"file\":\"src/core/ext/filters/http/server/http_server_filter.cc\",\"file_line\":178,\"key\":\"te\"}]}]}; on_complete = 0x55d74366bb20\r\nI0806 02:31:28.074277377      19 chttp2_transport.cc:841]    W:0x55d743561940 SERVER [ipv4:172.16.71.203:53095] state IDLE -> WRITING [RST_STREAM]\r\nI0806 02:31:28.074298577      19 chttp2_transport.cc:1255]   complete_closure_step: t=0x55d743561940 0x55d74366bb20 refs=0 flags=0x0000 desc=op->on_complete err=\"No Error\" write_state=WRITING\r\nI0806 02:31:28.074319104      19 chttp2_transport.cc:841]    W:0x55d743561940 SERVER [ipv4:172.16.71.203:53095] state WRITING -> WRITING [begin write in current thread]\r\nI0806 02:31:28.074351314      19 chttp2_transport.cc:841]    W:0x55d743561940 SERVER [ipv4:172.16.71.203:53095] state WRITING -> IDLE [finish writing]\r\nI0806 02:31:28.154671248      19 chttp2_transport.cc:1157]   ipv4:172.16.71.203:53095: Got goaway [0] err={\"created\":\"@1565058688.154629453\",\"description\":\"GOAWAY received\",\"file\":\"src/core/ext/transport/chttp2/transport/chttp2_transport.cc\",\"file_line\":1151,\"grpc_status\":14,\"http2_error\":0,\"raw_bytes\":\"\"}\r\nI0806 02:31:28.154707571      19 chttp2_transport.cc:2828]   set connectivity_state=3\r\nI0806 02:31:28.154728520      19 chttp2_transport.cc:1877]   perform_transport_op[t=0x55d743561940]: ON_CONNECTIVITY_STATE_CHANGE:p=0x55d743566380:from=TRANSIENT_FAILURE\r\nI0806 02:31:28.154752879      19 chttp2_transport.cc:2828]   set connectivity_state=4\r\nI0806 02:31:28.154798453      19 chttp2_transport.cc:1877]   perform_transport_op[t=0x55d743561940]: SET_ACCEPT_STREAM:0(0,...)\r\nI0806 02:31:28.154854008      19 chttp2_transport.cc:2623]   ipv4:172.16.71.203:53095: Start BDP ping err={\"created\":\"@1565058688.154749048\",\"description\":\"Endpoint read failed\",\"file\":\"src/core/ext/transport/chttp2/transport/chttp2_transport.cc\",\"file_line\":2532,\"occurred_during_write\":0,\"referenced_errors\":[{\"created\":\"@1565058688.154743074\",\"description\":\"Socket closed\",\"fd\":11,\"file\":\"src/core/lib/iomgr/tcp_posix.cc\",\"file_line\":509,\"grpc_status\":14,\"target_address\":\"ipv4:172.16.71.203:53095\"},{\"created\":\"@1565058688.154629453\",\"description\":\"GOAWAY received\",\"file\":\"src/core/ext/transport/chttp2/transport/chttp2_transport.cc\",\"file_line\":1151,\"grpc_status\":14,\"http2_error\":0,\"raw_bytes\":\"\"}]}\r\nI0806 02:31:28.154869391      19 chttp2_transport.cc:2639]   ipv4:172.16.71.203:53095: Complete BDP ping err={\"created\":\"@1565058688.154749048\",\"description\":\"Endpoint read failed\",\"file\":\"src/core/ext/transport/chttp2/transport/chttp2_transport.cc\",\"file_line\":2532,\"occurred_during_write\":0,\"referenced_errors\":[{\"created\":\"@1565058688.154743074\",\"description\":\"Socket closed\",\"fd\":11,\"file\":\"src/core/lib/iomgr/tcp_posix.cc\",\"file_line\":509,\"grpc_status\":14,\"target_address\":\"ipv4:172.16.71.203:53095\"},{\"created\":\"@1565058688.154629453\",\"description\":\"GOAWAY received\",\"file\":\"src/core/ext/transport/chttp2/transport/chttp2_transport.cc\",\"file_line\":1151,\"grpc_status\":14,\"http2_error\":0,\"raw_bytes\":\"\"}]}\r\n```", "labels": ["defect"]}, {"created": "2019-07-18 15:44:33", "commits": {"850090c2caa2ed2e31e99721516ddd5b022c1dd3": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-08-30 02:34:36", "filteredCommits": [], "commitsDetails": [{"nameRev": "850090c2caa2ed2e31e99721516ddd5b022c1dd3 tags/armeria-0.91.0~12", "commitMessage": "Remove unnecessary ignore of brave client integration test (#2032)\n\nLooks like some changes fix this problem(Not sure which one). So remove the ignore assumption and add back the test for HTTP/1.1 .\r\n\r\nCloses #1914", "commitParents": ["15896635630785aadad60de6f80ce58902eff7b0"], "spoonStatsSkippedReason": "", "commitHash": "850090c2caa2ed2e31e99721516ddd5b022c1dd3", "authoredDateTime": "2019-08-30 10:34:35", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 0, "deletions": 10, "lines": 10, "filePath": "brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java"}], "commitDateTime": "2019-08-30 11:34:35", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.brave.BraveClientIntegrationTest.addsErrorTagOnTransportException()"}], "spoonFilePath": "BraveClientIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/1914", "ttf": 42.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "HTTP/1.1 requestLog doesn't record exception when getting ClosedSessionException", "statsSkippedReason": "", "user": "kojilin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Testing with okhttp's MockWebServer.\r\n`new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AT_START)`\r\n`new MockResponse().setSocketPolicy(SocketPolicy.DISCONNECT_AFTER_REQUEST)`\r\n\r\nClient side will get exception but there is no cause in RequestLog.\r\n\r\n--\r\nHTTP/2 works well with above socket policy.\r\n", "labels": ["defect"]}, {"created": "2019-07-18 09:18:45", "commits": {"ae3b5d4b564521aeb09e1ef8b92b836ae3df0617": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-07-22 03:19:25", "filteredCommits": [], "commitsDetails": [{"nameRev": "ae3b5d4b564521aeb09e1ef8b92b836ae3df0617 tags/armeria-0.89.0~11", "commitMessage": "Do not record wire timestamp when no request was transferred (#1912)\n\nMotivation:\r\n\r\nOn the client side, it is possible that a request is not sent to the\r\nwire, e.g. when connection error or validation failure occurs.\r\n\r\nModifications:\r\n\r\n- Make sure `REQUEST_FIRST_BYTES_TRANSFERRED` is available before\r\n  logging wire receive.\r\n\r\nResult:\r\n\r\n- No more `RequestLogAvailabilityException` in `BraveClient` and\r\n  `HttpTracingClient`.\r\n- Fixes #1911", "commitParents": ["c7681ebf1e7f8d0448379b8016ca8d18da8d2077"], "spoonStatsSkippedReason": "", "commitHash": "ae3b5d4b564521aeb09e1ef8b92b836ae3df0617", "authoredDateTime": "2019-07-22 12:19:25", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 1, "lines": 5, "filePath": "brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "zipkin/src/main/java/com/linecorp/armeria/client/tracing/HttpTracingClient.java"}], "commitDateTime": "2019-07-22 12:19:25", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.tracing.HttpTracingClient.execute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "HttpTracingClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.brave.BraveClient.execute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "BraveClient.java"}]}], "url": "https://github.com/line/armeria/issues/1911", "ttf": 3.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`RequestLogAvailabilityException: REQUEST_FIRST_BYTES_TRANSFERRED` when `RequestLogAvailability` is `COMPLETE`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Reported by @adriancole:\r\n\r\n```\r\nWARN 88577 --- [orageComponent}] c.l.a.c.l.RequestLogListenerInvoker      : onRequestLog() failed with an exception:com.linecorp.armeria.common.logging.RequestLogAvailabilityException: REQUEST_FIRST_BYTES_TRANSFERRED\r\n    at com.linecorp.armeria.common.logging.RequestLog.ensureAvailability(RequestLog.java:120) ~[armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.requestFirstBytesTransferredTimeNanos(DefaultRequestLog.java:446) ~[armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.client.brave.BraveClient.lambda$execute$2(BraveClient.java:126) ~[armeria-brave-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.common.logging.RequestLogListenerInvoker.invokeOnRequestLog(RequestLogListenerInvoker.java:38) [armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.notifyListeners(DefaultRequestLog.java:1036) [armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.updateAvailability(DefaultRequestLog.java:993) [armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.endResponse0(DefaultRequestLog.java:970) [armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.endResponse0(DefaultRequestLog.java:949) [armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.endResponse(DefaultRequestLog.java:935) [armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.internal.ClientUtil.executeWithFallback(ClientUtil.java:50) [armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.client.UserClient.execute(UserClient.java:159) [armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.client.DefaultHttpClient.execute(DefaultHttpClient.java:61) [armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.client.DefaultHttpClient.execute(DefaultHttpClient.java:78) [armeria-0.88.0.jar!/:?]\r\n    at com.linecorp.armeria.client.DefaultHttpClient.execute(DefaultHttpClient.java:74) [armeria-0.88.0.jar!/:?]\r\n    at zipkin2.elasticsearch.internal.client.HttpCall.sendRequest(HttpCall.java:145) [zipkin-storage-elasticsearch-2.15.1-SNAPSHOT.jar!/:?]\r\n    at zipkin2.elasticsearch.internal.client.HttpCall.doExecute(HttpCall.java:101) [zipkin-storage-elasticsearch-2.15.1-SNAPSHOT.jar!/:?]\r\n    at zipkin2.Call$Base.execute(Call.java:379) [zipkin-2.15.1-SNAPSHOT.jar!/:?]\r\n    at zipkin2.reporter.AsyncReporter$BoundedAsyncReporter.flush(AsyncReporter.java:286) [zipkin-reporter-2.8.4.jar!/:?]\r\n    at zipkin2.reporter.AsyncReporter$Builder$1.run(AsyncReporter.java:190) [zipkin-reporter-2.8.4.jar!/:?]\r\n```\r\n\r\nIn BraveClient.java:\r\n\r\n```java\r\n        ctx.log().addListener(log -> {\r\n            SpanTags.logWireSend(span, log.requestFirstBytesTransferredTimeNanos(), log);\r\n\r\n            // If the client timed-out the request, we will have never received any response data at all.\r\n            if (log.isAvailable(RequestLogAvailability.RESPONSE_FIRST_BYTES_TRANSFERRED)) {\r\n                SpanTags.logWireReceive(span, log.responseFirstBytesTransferredTimeNanos(), log);\r\n            }\r\n\r\n            finishSpan(span, log);\r\n        }, RequestLogAvailability.COMPLETE);\r\n```\r\n\r\n/cc @anuraaga ", "labels": ["defect"]}, {"created": "2019-07-11 07:58:09", "commits": {"feac657e78593edcb91471f40607679a9633406d": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-07-15 00:51:29", "filteredCommits": [], "commitsDetails": [{"nameRev": "feac657e78593edcb91471f40607679a9633406d tags/armeria-0.89.0~17", "commitMessage": "Use OPTIONS instead of HEAD for HTTP/2 upgrade. (#1896)\n\nUse OPTIONS instead of HEAD for upgrade request to untie upgrade from business logic.\r\nThis allows the upgrade to happen without user business logic having to worry about it.\r\n\r\nFixes #1895", "commitParents": ["1d1235b20339afa84435d1434d6c781ae6d9d95e"], "spoonStatsSkippedReason": "", "commitHash": "feac657e78593edcb91471f40607679a9633406d", "authoredDateTime": "2019-07-15 09:51:28", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 29, "deletions": 0, "lines": 29, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java"}], "commitDateTime": "2019-07-15 09:51:28", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.clearError()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testUpgradeRequestExecutesLogicOnlyOnce()"}], "spoonFilePath": "HttpClientIntegrationTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.UpgradeRequestHandler.channelActive(io.netty.channel.ChannelHandlerContext)"}], "spoonFilePath": "HttpClientPipelineConfigurator.java"}]}], "url": "https://github.com/line/armeria/issues/1895", "ttf": 3.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "serviceUnder(\"/\") and useHttp2Preface(false) cause service to be executed twice", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Found a strange corner case, it seems that when mounting a service using `serviceUnder(\"/\")` and disabling HTTP/2 preface on a client, the service logic gets executed twice. This is the exact combination that causes the issue - mounting to a different path e.g. `serviceUnder(\"/foo\")` does not have the problem and enabling HTTP/2 preface also doesn't have the problem.\r\n\r\nDepending on the logic of the service, being executed twice for a request can be quite problematic.", "labels": ["defect"]}, {"created": "2019-07-09 11:55:40", "commits": {"da79d3e63daf3e17906241df16734316dda17fd7": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-07-12 01:41:51", "filteredCommits": [], "commitsDetails": [{"nameRev": "da79d3e63daf3e17906241df16734316dda17fd7 tags/armeria-0.89.0~19", "commitMessage": "Enable message compression on server by default. (#1889)\n\nThis matches the default as documented in `ServerCall.setMessageCompression`. I personally don't like the default very much though... I think we would generally want to encourage using stream encoding via `HttpEncodingService` / `HttpDecodingClient` instead of message compression, which will have much better performance.\r\n\r\nFixes #1885", "commitParents": ["f9ff8356c844526f8be8215128a8b2d9989925ca"], "spoonStatsSkippedReason": "", "commitHash": "da79d3e63daf3e17906241df16734316dda17fd7", "authoredDateTime": "2019-07-12 10:41:50", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 1, "lines": 3, "filePath": "grpc-protocol/src/main/java/com/linecorp/armeria/common/grpc/protocol/ArmeriaMessageFramer.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java"}], "commitDateTime": "2019-07-12 10:41:50", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.ArmeriaServerCall"}], "spoonFilePath": "ArmeriaServerCall.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.grpc.protocol.ArmeriaMessageFramer"}], "spoonFilePath": "ArmeriaMessageFramer.java"}]}], "url": "https://github.com/line/armeria/issues/1885", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "gRPC server should default to message compression enabled.", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I seem to have missed the spec, server should allow message compression by default if the server requests it.", "labels": ["defect"]}, {"created": "2019-06-26 07:36:39", "commits": {"db94a793651997565953c87b5808d8b89f4a5dcd": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-06-28 05:41:06", "filteredCommits": [], "commitsDetails": [{"nameRev": "db94a793651997565953c87b5808d8b89f4a5dcd tags/armeria-0.88.0~11", "commitMessage": "Handle the case where `@Default` annotation is specified withou\u2026 (#1864)\n\nMotivation:\r\n\r\nA `NoSuchElementException` is raised during server startup time if a\r\nuser specified a `@Default` annotation without a value:\r\n\r\n    public class MyAnnotatedService {\r\n        @Get(\"/foo\")\r\n        public String foo(@Param @Default String value) {\r\n            return String.valueOf(value);\r\n        }\r\n    }\r\n\r\nModifications:\r\n\r\n- Allow having no value in `@Default` annotation\r\n\r\nResult:\r\n\r\n- Fixes #1858", "commitParents": ["e6cd27331a28aa1aa2a621aeb625f10335ac1a98"], "spoonStatsSkippedReason": "", "commitHash": "db94a793651997565953c87b5808d8b89f4a5dcd", "authoredDateTime": "2019-06-28 14:41:05", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedValueResolver.java"}, {"insertions": 9, "deletions": 0, "lines": 9, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceTest.java"}], "commitDateTime": "2019-06-28 14:41:05", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedValueResolver.Builder.build()"}], "spoonFilePath": "AnnotatedValueResolver.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.MyAnnotatedService7.paramDefaultNull(com.linecorp.armeria.common.RequestContext,java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testParam()"}], "spoonFilePath": "AnnotatedHttpServiceTest.java"}]}], "url": "https://github.com/line/armeria/issues/1858", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Null case of @Default not covered", "statsSkippedReason": "", "user": "southernkasaist", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "https://github.com/line/armeria/blob/61a72e99c9a53008effc1e55ac63567fefc4ebce/core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedValueResolver.java#L1026\r\n\r\nWhen intent to use `null` for default value like `@Param(\"foo\") @Default FooType foo`, `AnnotatedValueResolver` doesn't check if `Optional.isPresent` but directly get underlying value, which will be ended up with `No value present`.\r\n\r\nExpected is following:\r\n```java\r\nfinal Optional<String> specifiedValue = getSpecifiedValue(aDefault.value());\r\ndefaultValue = specifiedValue.isPresent() ? specifiedValue.get() : null;\r\n```", "labels": ["defect"]}, {"created": "2019-06-25 15:16:48", "commits": {"cc1acdb901767ceb5cb7b668467ca37319653fe0": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2019-06-26 12:20:23", "filteredCommits": [], "commitsDetails": [{"nameRev": "cc1acdb901767ceb5cb7b668467ca37319653fe0 tags/armeria-0.88.0~14", "commitMessage": "Ensure a user set the endpoint path in DocService when the path is not\u2026 (#1857)\n\n\u2026 an exact path type\r\n\r\nMotivation:\r\nWhen the path of s service in `DocService` is not an exact path type, a user should set the endpoint path\r\nand we must validate it.\r\n\r\nModifications:\r\n- Ensure a user set the endpoint path when the path is not an exact type.\r\n- Rename `PROXY_PORT` to `ARMERIA_PORT` for clarity.\r\n\r\nResult:\r\n- Close #1856", "commitParents": ["bf3e1bc9a4582cbcd9bfcb6d8ce9892297c2c256"], "spoonStatsSkippedReason": "", "commitHash": "cc1acdb901767ceb5cb7b668467ca37319653fe0", "authoredDateTime": "2019-06-26 21:20:22", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 3, "lines": 6, "filePath": "docs-client/README.md"}, {"insertions": 5, "deletions": 4, "lines": 9, "filePath": "docs-client/src/containers/MethodPage/DebugPage.tsx"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "docs-client/scripts/serve.ts"}], "commitDateTime": "2019-06-26 21:20:22", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1856", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "DocService annotated http paths are mangled if not exact", "statsSkippedReason": "", "user": "tobias-", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "This line mangles all annotated http paths that aren't exact.\r\nhttps://github.com/line/armeria/commit/35416c2b77fd020ee37c4c42d582b142400bbefd#diff-3b29757cfa7d6be5d3ca726a154114b1R54\r\n\r\nwill chop off the first 6 characters of the path mangling it badly. While the path may not be usable anyway, it will not give a unexpected 404 or 405 error message.\r\n\r\n@minwoox If you're doing https://github.com/line/armeria/issues/1855 anyway, this might be an easy fix?", "labels": ["defect"]}, {"created": "2019-06-19 04:00:20", "commits": {"850d8a0f2d4e76f765e36a8eb1041b0c5f4bdc43": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-06-28 06:17:49", "filteredCommits": [], "commitsDetails": [{"nameRev": "850d8a0f2d4e76f765e36a8eb1041b0c5f4bdc43 tags/armeria-0.88.0~10", "commitMessage": "Fall back to the service with less constraint when content nego\u2026 (#1860)\n\nMotivation:\r\nCurrently, a request which does not have a `content-type` header is not matched with the service which has `consumes` types.\r\nWe should relax the restriction so that the request can still find a service when there are no services which have exact matching conditions.\r\n\r\nModifications:\r\n- Change the content negotiation logic\r\n  - Exact matching first: `method`, `content-type` and `accept` of a request are contained in `methods`, `consumes` and `produces`, respectively, or both are `null`.\r\n  - Do not enforce a request to have `content-type` and `accept` header.\r\n    - The request can still find the service which has `consumes` and `produces` types.    \r\n- Parse `accept` header when it's needed\r\n- Make the log message which is logged while parsing invalid `accept` headers, more comprehensive and remove stack trace\r\n\r\nResult:\r\n- Close #1849", "commitParents": ["db94a793651997565953c87b5808d8b89f4a5dcd"], "spoonStatsSkippedReason": "", "commitHash": "850d8a0f2d4e76f765e36a8eb1041b0c5f4bdc43", "authoredDateTime": "2019-06-28 15:17:49", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 2, "lines": 4, "filePath": "spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java"}, {"insertions": 0, "deletions": 4, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/server/RouteTest.java"}, {"insertions": 91, "deletions": 0, "lines": 91, "filePath": "core/src/main/java/com/linecorp/armeria/server/RoutingContextWrapper.java"}, {"insertions": 3, "deletions": 5, "lines": 8, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java"}, {"insertions": 6, "deletions": 7, "lines": 13, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceTest.java"}, {"insertions": 6, "deletions": 2, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/server/RoutingContext.java"}, {"insertions": 5, "deletions": 2, "lines": 7, "filePath": "core/src/test/java/com/linecorp/armeria/server/cors/HttpServerCorsTest.java"}, {"insertions": 15, "deletions": 17, "lines": 32, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultRoutingContext.java"}, {"insertions": 4, "deletions": 13, "lines": 17, "filePath": "core/src/main/java/com/linecorp/armeria/server/Routers.java"}, {"insertions": 21, "deletions": 18, "lines": 39, "filePath": "core/src/test/java/com/linecorp/armeria/server/RoutingContextTest.java"}, {"insertions": 19, "deletions": 15, "lines": 34, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultRoute.java"}], "commitDateTime": "2019-06-28 15:17:49", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.cors.HttpServerCorsTest.MyAnnotatedService.duptest()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.cors.HttpServerCorsTest.MyAnnotatedService.dupTest()"}], "spoonFilePath": "HttpServerCorsTest.java"}, {"spoonMethods": [{"UPD": 8, "TOT": 46, "MOV": 9, "INS": 11, "DEL": 18, "spoonMethodName": "com.linecorp.armeria.server.RoutingContextTest.testEquals()"}], "spoonFilePath": "RoutingContextTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.RoutingContextWrapper"}], "spoonFilePath": "RoutingContextWrapper.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.RouteTest.testAcceptType2()"}], "spoonFilePath": "RouteTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.Routers.findBest(com.linecorp.armeria.server.RoutingContext,java.util.List,java.util.function.Function)"}], "spoonFilePath": "Routers.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServiceBindingTest.consumesAndProduces()"}, {"UPD": 0, "TOT": 7, "MOV": 3, "INS": 1, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.ServiceBindingTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}], "spoonFilePath": "ServiceBindingTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationTest.testMissingMediaType()"}], "spoonFilePath": "ArmeriaSpringActuatorAutoConfigurationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.overridePath(java.lang.String)"}], "spoonFilePath": "RoutingContext.java"}, {"spoonMethods": [{"UPD": 9, "TOT": 19, "MOV": 4, "INS": 1, "DEL": 5, "spoonMethodName": "com.linecorp.armeria.server.DefaultRoutingContext"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.DefaultRoutingContext.extractAcceptTypes(com.linecorp.armeria.common.HttpHeaders)"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.DefaultRoutingContext.contentType()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultRoutingContext.of(com.linecorp.armeria.server.VirtualHost,java.lang.String,java.lang.String,java.lang.String,com.linecorp.armeria.common.RequestHeaders,boolean)"}, {"UPD": 0, "TOT": 6, "MOV": 2, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.DefaultRoutingContext.acceptTypes()"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.DefaultRoutingContext.method()"}], "spoonFilePath": "DefaultRoutingContext.java"}, {"spoonMethods": [{"UPD": 7, "TOT": 19, "MOV": 4, "INS": 4, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.server.DefaultRoute.apply(com.linecorp.armeria.server.RoutingContext)"}], "spoonFilePath": "DefaultRoute.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 7, "MOV": 4, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceTest.testAdvancedAnnotatedHttpService()"}], "spoonFilePath": "AnnotatedHttpServiceTest.java"}]}], "url": "https://github.com/line/armeria/issues/1849", "ttf": 9.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Failed to parse the media type in 'accept' header: *; q=.2", "statsSkippedReason": "", "user": "Adanz", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I use armeria-tomcat service, version 0.87, Configures an Armeria to redirect the incoming requests to the Tomcat instance provided by Spring Boot. like: examples\\spring-boot-tomcat\r\nAnd Client use java.net.HttpURLConnection, but found below failed issue:\r\n\r\n019-06-18 16:14:06.728 [armeria-common-worker-nio-5-1] DEBUG com.linecorp.armeria.server.DefaultRoutingContext - Failed to parse the media type in 'accept' header: *; q=.2\r\njava.lang.IllegalArgumentException: Could not parse '*; q=.2'\r\n\tat com.linecorp.armeria.common.MediaType.parse(MediaType.java:994)\r\n\tat com.linecorp.armeria.server.DefaultRoutingContext.lambda$extractAcceptTypes$0(DefaultRoutingContext.java:177)\r\n\tat java.util.Iterator.forEachRemaining(Iterator.java:116)\r\n\tat java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)\r\n\tat java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:580)\r\n\tat com.linecorp.armeria.server.DefaultRoutingContext.lambda$extractAcceptTypes$1(DefaultRoutingContext.java:174)\r\n\tat com.linecorp.armeria.internal.shaded.guava.collect.ImmutableList.forEach(ImmutableList.java:405)\r\n\tat com.linecorp.armeria.server.DefaultRoutingContext.extractAcceptTypes(DefaultRoutingContext.java:173)\r\n\tat com.linecorp.armeria.server.DefaultRoutingContext.of(DefaultRoutingContext.java:57)\r\n\tat com.linecorp.armeria.server.HttpServerHandler.handleRequest(HttpServerHandler.java:329)\r\n\tat com.linecorp.armeria.server.HttpServerHandler.channelRead(HttpServerHandler.java:250)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat com.linecorp.armeria.server.Http1RequestDecoder.channelRead(Http1RequestDecoder.java:185)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:438)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:323)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:310)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:426)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\r\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:253)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.handlerRemoved(ByteToMessageDecoder.java:249)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:507)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.handler.flush.FlushConsolidationHandler.channelRead(FlushConsolidationHandler.java:154)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:287)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:352)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:374)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:360)\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\r\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:682)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:617)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:534)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:496)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:906)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.lang.IllegalStateException: null\r\n\tat com.linecorp.armeria.internal.shaded.guava.base.Preconditions.checkState(Preconditions.java:492)\r\n\tat com.linecorp.armeria.common.MediaType$Tokenizer.consumeCharacter(MediaType.java:1030)\r\n\tat com.linecorp.armeria.common.MediaType.parse(MediaType.java:964)\r\n\t... 62 common frames omitted\r\n2019-06-18 16:14:06.790 [armeria-common-worker-nio-5-1] INFO  armeria.services.api.test - [id: 0xf2709a41, L:/127.0.0.1:8096 - R:/127.0.0.1:64177][h1c://xxxxxx:8096/api/test/login#POST] Request: {startTime=2019-06-18T08:14:06.743Z(1560845646743000), length=114B, duration=24607\u00b5s(24607248ns), scheme=none+h1c, headers=[:method=POST, :path=/api/test/login, :scheme=http, :authority=localhost:8096, content-type=application/json, authorization=Bearer 123, user-agent=Java/1.8.0_161, accept=text/html, image/gif, image/jpeg, *; q=.2, */*; q=.2, content-length=114]}\r\n\r\nwhat can I do? thank.", "labels": ["defect"]}, {"created": "2019-06-18 03:36:50", "commits": {"bf3e1bc9a4582cbcd9bfcb6d8ce9892297c2c256": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-06-26 11:29:44", "filteredCommits": [], "commitsDetails": [{"nameRev": "bf3e1bc9a4582cbcd9bfcb6d8ce9892297c2c256 tags/armeria-0.88.0~15", "commitMessage": "Ignore `CancelledSubscriptionException` and `AbortedStreamException` (#1859)\n\n.. while handling a WebFlux response.\r\n\r\nMotivation:\r\n\r\nWhen handling a `HEAD` request, Webflux can get the response from a `GET`\r\nrequest handler and cancel the body subscription immediately. In that\r\ncase, `PublisherBasedHttpResponse` will fail its `completionFuture` with\r\na `CancelledSubscriptionException`, which will be propagated to WebFlux\r\nas an unhandled exception.\r\n\r\nModifications:\r\n\r\n- Filter out `CancelledSubscriptionException` and\r\n  `AbortedStreamException` so that WebFlux does not write an ERROR log\r\n  about an unhandled exception.\r\n- Do not log at DEBUG level about a cancelled stream when the current\r\n  request method is `HEAD` because it's expected.\r\n\r\nResult:\r\n\r\n- Less noisy error handling\r\n- Fixes #1847", "commitParents": ["05b00c0136335cb0d42ff72b4f0f2b19b4f04bd1"], "spoonStatsSkippedReason": "", "commitHash": "bf3e1bc9a4582cbcd9bfcb6d8ce9892297c2c256", "authoredDateTime": "2019-06-26 20:29:43", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 1, "lines": 5, "filePath": "spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java"}, {"insertions": 91, "deletions": 0, "lines": 91, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerLoadBalancerInteropTest.java"}, {"insertions": 6, "deletions": 1, "lines": 7, "filePath": "spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaServerHttpResponse.java"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "spring/boot-webflux-autoconfigure/src/test/resources/config/application-test_loadbalancer.yml"}], "commitDateTime": "2019-06-26 20:29:43", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 2, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaReactiveWebServerFactory.configureService(com.linecorp.armeria.server.ServerBuilder,org.springframework.http.server.reactive.HttpHandler,com.linecorp.armeria.spring.web.reactive.DataBufferFactoryWrapper,java.lang.String)"}], "spoonFilePath": "ArmeriaReactiveWebServerFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ReactiveWebServerLoadBalancerInteropTest"}], "spoonFilePath": "ReactiveWebServerLoadBalancerInteropTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ArmeriaServerHttpResponse.write(reactor.core.publisher.Flux)"}], "spoonFilePath": "ArmeriaServerHttpResponse.java"}]}], "url": "https://github.com/line/armeria/issues/1847", "ttf": 8.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Webflux: `CancelledSubscriptionException` for a request but `ServerHttpResponse` already committed (200 OK)", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Perhaps we should suppress `CancelledSubscriptionException` when a response has been committed already.", "labels": ["defect"]}, {"created": "2019-06-17 08:27:51", "commits": {"26c8fae5f4106383d2a3e5217a629c541e9dcd9f": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-10-08 13:53:16", "filteredCommits": [], "commitsDetails": [{"nameRev": "26c8fae5f4106383d2a3e5217a629c541e9dcd9f tags/armeria-0.95.0~23", "commitMessage": "Validate `SslContext` thoroughly (#2124)\n\nMotivation:\r\n\r\nIn some case, a server can start with a misconfigured `SslContext` and\r\nfail when the serving its first request. If a server refuses to start\r\nin such a case, users could fix their configuration problem at an earlier\r\nstage with much less confusion.\r\n\r\nModifications:\r\n\r\n- Move `VirtualHost.validateSslContext()` to `VirtualHostBuilder`\r\n- Make an actual `SslEngine` with the given `SslContext` and perform\r\n  an initial handshake to trigger most configuration issues.\r\n- Add `throws SSLException` to `tls()` builder methods.\r\n- Remove the deprecated `sslContext()` methods.\r\n\r\nResult:\r\n\r\n- Fixes #1844\r\n- (Breaking) `tls()` now throws a checked `SSLException`.\r\n- (Breaking) `sslContext()` methods, previously deprecated, have been\r\n  removed.", "commitParents": ["7bb11503694ff0492be6c385f1631bb35a0bbc82"], "spoonStatsSkippedReason": "", "commitHash": "26c8fae5f4106383d2a3e5217a629c541e9dcd9f", "authoredDateTime": "2019-10-08 22:53:15", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 0, "deletions": 0, "lines": 0, "filePath": "core/src/test/resources/com/linecorp/armeria/server/keystore.jks"}, {"insertions": 0, "deletions": 0, "lines": 0, "filePath": "core/src/test/resources/com/linecorp/armeria/server/keystore.p12"}, {"insertions": 46, "deletions": 44, "lines": 90, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHostBuilder.java"}, {"insertions": 1, "deletions": 39, "lines": 40, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}, {"insertions": 1, "deletions": 9, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHost.java"}, {"insertions": 83, "deletions": 0, "lines": 83, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServerTlsValidationTest.java"}], "commitDateTime": "2019-10-08 22:53:15", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.tls(io.netty.handler.ssl.SslContext)"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.sslContext(com.linecorp.armeria.common.SessionProtocol,java.io.File,java.io.File)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.sslContext(com.linecorp.armeria.common.SessionProtocol,java.io.File,java.io.File,java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.sslContext(io.netty.handler.ssl.SslContext)"}], "spoonFilePath": "ServerBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.validateSslContext(io.netty.handler.ssl.SslContext)"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.sslContext(io.netty.handler.ssl.SslContext)"}, {"UPD": 5, "TOT": 11, "MOV": 5, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.tls(java.io.File,java.io.File,java.lang.String)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.tls(io.netty.handler.ssl.SslContext)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.accessLogger(java.lang.String)"}, {"UPD": 2, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.sslContext(com.linecorp.armeria.common.SessionProtocol,java.io.File,java.io.File)"}, {"UPD": 1, "TOT": 6, "MOV": 5, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.sslContext(com.linecorp.armeria.common.SessionProtocol,java.io.File,java.io.File,java.lang.String)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.accessLogger(org.slf4j.Logger)"}, {"UPD": 4, "TOT": 10, "MOV": 5, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostBuilder.tls(java.io.File,java.io.File)"}], "spoonFilePath": "VirtualHostBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.VirtualHost"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.VirtualHost.validateSslContext(io.netty.handler.ssl.SslContext)"}], "spoonFilePath": "VirtualHost.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerTlsValidationTest"}], "spoonFilePath": "ServerTlsValidationTest.java"}]}], "url": "https://github.com/line/armeria/issues/1844", "ttf": 113.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Cryptic error message when TLS key store password is incorrect.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Slack thread: https://line-armeria.slack.com/archives/C1NGPBUH2/p1560738924028700\r\n\r\nWhen a user starts a TLS server without correct key store password, the server has to refuse to start. Currently, it starts up without an error and fails to serve a request with a cryptic error message such as `NO_CERTIFICATE_SET` and `No available authentication scheme`.\r\n\r\n/cc @adriancole \r\n\r\n", "labels": ["defect", "good first issue"]}, {"created": "2019-06-17 08:23:11", "commits": {"3315ad339b9be59644f017a9c895589106c0c3bb": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-07-02 06:45:22", "filteredCommits": [], "commitsDetails": [{"nameRev": "3315ad339b9be59644f017a9c895589106c0c3bb tags/armeria-0.88.0~3", "commitMessage": "Add support for a Spring Boot custom key alias (#1865)\n\nMotivation:\r\n\r\nThe `ssl.keyAlias` configuration in Spring Boot is currently\r\nunsupported.\r\n\r\nModifications:\r\n\r\n- Add `CustomAliasKeyManagerFactory` and `CustomAliasX509ExtendedKeyManager`\r\n- Wrap the `KeyManagerFactory` with `CustomAliasKeyManagerFactory` to\r\n  support custom key alias\r\n- Miscellaneous:\r\n  - Add `@Nullable` annotations where necessary\r\n\r\nResult:\r\n\r\n- Fixes #1843", "commitParents": ["294e987e4716a1fb327f91034ad086462b337a68"], "spoonStatsSkippedReason": "", "commitHash": "3315ad339b9be59644f017a9c895589106c0c3bb", "authoredDateTime": "2019-07-02 15:45:21", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 0, "lines": 3, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java"}, {"insertions": 57, "deletions": 0, "lines": 57, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/CustomAliasKeyManagerFactory.java"}, {"insertions": 45, "deletions": 15, "lines": 60, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/Ssl.java"}, {"insertions": 8, "deletions": 3, "lines": 11, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java"}, {"insertions": 89, "deletions": 0, "lines": 89, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/CustomAliasX509ExtendedKeyManager.java"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": ".gitattributes"}, {"insertions": 37, "deletions": 0, "lines": 37, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerCustomKeyAlias1Test.java"}, {"insertions": 0, "deletions": 0, "lines": 0, "filePath": "spring/boot-webflux-autoconfigure/src/test/resources/keystore_with_two_keys.pkcs12"}, {"insertions": 8, "deletions": 0, "lines": 8, "filePath": "spring/boot-webflux-autoconfigure/src/test/resources/config/application-test_custom_key_alias_1.yml"}, {"insertions": 37, "deletions": 0, "lines": 37, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/ReactiveWebServerCustomKeyAlias2Test.java"}, {"insertions": 8, "deletions": 0, "lines": 8, "filePath": "spring/boot-webflux-autoconfigure/src/test/resources/config/application-test_custom_key_alias_2.yml"}, {"insertions": 97, "deletions": 0, "lines": 97, "filePath": "spring/boot-webflux-autoconfigure/src/test/java/com/linecorp/armeria/spring/web/reactive/AbstractReactiveWebServerCustomKeyAliasTest.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "spring/boot-webflux-autoconfigure/build.gradle"}], "commitDateTime": "2019-07-02 15:45:21", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ReactiveWebServerCustomKeyAlias2Test"}], "spoonFilePath": "ReactiveWebServerCustomKeyAlias2Test.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.AbstractReactiveWebServerCustomKeyAliasTest"}], "spoonFilePath": "AbstractReactiveWebServerCustomKeyAliasTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.CustomAliasKeyManagerFactory"}], "spoonFilePath": "CustomAliasKeyManagerFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 25, "MOV": 11, "INS": 14, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.Ssl"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getTrustStoreType()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getKeyStorePassword()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getKeyStore()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.isEnabled()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getTrustStoreProvider()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getClientAuth()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getKeyStoreProvider()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getTrustStore()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getKeyPassword()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getEnabledProtocols()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getTrustStorePassword()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getCiphers()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getKeyStoreType()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getProvider()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.Ssl.getKeyAlias()"}], "spoonFilePath": "Ssl.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.web.reactive.ReactiveWebServerCustomKeyAlias1Test"}], "spoonFilePath": "ReactiveWebServerCustomKeyAlias1Test.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.CustomAliasX509ExtendedKeyManager"}], "spoonFilePath": "CustomAliasX509ExtendedKeyManager.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaSettings.Port"}], "spoonFilePath": "ArmeriaSettings.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configurePorts(com.linecorp.armeria.server.ServerBuilder,java.util.List)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.getKeyManagerFactory(com.linecorp.armeria.spring.Ssl,java.util.function.Supplier)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureTls(com.linecorp.armeria.server.ServerBuilder,com.linecorp.armeria.spring.Ssl,java.util.function.Supplier,java.util.function.Supplier)"}], "spoonFilePath": "ArmeriaConfigurationUtil.java"}]}], "url": "https://github.com/line/armeria/issues/1843", "ttf": 14.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Spring Ssl.getKeyAlias not used", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "While digging through spring TLS stuff, I noticed that [Ssl.getKeyAlias](https://github.com/line/armeria/blob/master/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/Ssl.java#L163) is not referenced anywhere. Not sure what the impact is, but I guess a keystore with multiple aliaseses might not work.", "labels": ["defect"]}, {"created": "2019-06-13 08:41:43", "commits": {"3b45295fccc2b8b7edc395afb03c797d9f4e7333": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-06-28 10:32:08", "filteredCommits": [], "commitsDetails": [{"nameRev": "3b45295fccc2b8b7edc395afb03c797d9f4e7333 tags/armeria-0.88.0~9", "commitMessage": "Handle `HttpStatus/ResponseException` in `THttpService` (#1867)\n\nMotivation:\r\n\r\nWhen a Thrift service fails with an `HttpStatusException` or an\r\n`HttpResponseException`. `THttpService` wraps it with a\r\n`TApplicationException` and sends a `200 OK` response. Instead, we could\r\nmake `THttpService` respect such exceptions and send a proper HTTP error\r\nresponse.\r\n\r\nThis can be useful when a service wants to send a timeout response such\r\nas `503 Service Unavailable`, because otherwise a client will have to\r\nhandle two different timeouts in two different ways:\r\n\r\n- `503 Service Unavailable` (when Thrift service method failed to\r\n  produce a response before the request times out.)\r\n- `200 OK` with a Thrift-level timeout exception (when Thrift service\r\n  method produces an error response that tells the request has timed out.)\r\n\r\nModifications:\r\n\r\n- Make `THttpService` handle `HttpStatusException` and\r\n  `HttpResponseException` rather than encoding it into a\r\n  `TApplicationException`.\r\n\r\nResult:\r\n\r\n- Closes #1839", "commitParents": ["850d8a0f2d4e76f765e36a8eb1041b0c5f4bdc43"], "spoonStatsSkippedReason": "", "commitHash": "3b45295fccc2b8b7edc395afb03c797d9f4e7333", "authoredDateTime": "2019-06-28 19:32:07", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 6, "deletions": 2, "lines": 8, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/thrift/ThrottlingRpcServiceTest.java"}, {"insertions": 89, "deletions": 0, "lines": 89, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftHttpErrorResponseTest.java"}, {"insertions": 12, "deletions": 0, "lines": 12, "filePath": "thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java"}], "commitDateTime": "2019-06-28 19:32:07", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.thrift.ThrottlingRpcServiceTest.throttle()"}], "spoonFilePath": "ThrottlingRpcServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.thrift.ThriftHttpErrorResponseTest"}], "spoonFilePath": "ThriftHttpErrorResponseTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.handleException(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.RpcResponse,java.util.concurrent.CompletableFuture,com.linecorp.armeria.common.SerializationFormat,int,com.linecorp.armeria.internal.thrift.ThriftFunction,java.lang.Throwable)"}], "spoonFilePath": "THttpService.java"}]}], "url": "https://github.com/line/armeria/issues/1839", "ttf": 15.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Make `THttpService` respect `HttpStatusException` and `HttpResponseException`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When a Thrift service fails with an `HttpStatusException` or an `HttpResponseException`. `THttpService` wraps it with a `TApplicationException` and sends a `200 OK` response. Instead, we could make `THttpService` respect such exceptions and send a proper HTTP error response.\r\n\r\nThis can be useful when a service wants to send a timeout response such as `503 Service Unavailable`, because otherwise a client will have to handle two different timeouts in two different ways:\r\n\r\n- `503 Service Unavailable` (when Thrift service method failed to produce a response before the request times out.)\r\n- `200 OK` with a Thrift-level timeout exception (when Thrift service method produces an error response that tells the request has timed out.)", "labels": ["defect"]}, {"created": "2019-05-24 03:00:10", "user": "dawnbreaks", "body": "Hi, Now trailers isn't passed to the client, and hope to work in the same way as the official grpc-java. \r\n\r\n```java\r\nnew GreeterGrpc.GreeterImplBase() {\r\n      @Override\r\n      public void sayHello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\r\n        Metadata trailers = new Metadata();\r\n        trailers.put(DEBUG_INFO_TRAILER_KEY, DEBUG_INFO);\r\n        responseObserver.onError(Status.INTERNAL.withDescription(DEBUG_DESC).asRuntimeException(trailers));\r\n      }\r\n    }\r\n```", "closed": "2019-05-29 09:12:49", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1788", "ttf": 5.000277777777778, "commits": {}, "labels": ["defect"], "title": "armeria-grpc does not support gRPC Metadata"}, {"created": "2019-05-16 03:24:36", "commits": {"b809af1dc6c53cb928392126300ab8e6eac49a34": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-05-17 09:19:23", "filteredCommits": [], "commitsDetails": [{"nameRev": "b809af1dc6c53cb928392126300ab8e6eac49a34 tags/armeria-0.86.0~3", "commitMessage": "Fill scheme and authority pseudo headers in the request decoder (#1776)\n\nFix #1773\r\n", "commitParents": ["e09e165908ec606aefc69a2f953e2241622f91a7"], "spoonStatsSkippedReason": "", "commitHash": "b809af1dc6c53cb928392126300ab8e6eac49a34", "authoredDateTime": "2019-05-17 18:19:23", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/server/VirtualHostServiceBindingBuilderTest.java"}, {"insertions": 9, "deletions": 0, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpRequest.java"}, {"insertions": 1, "deletions": 27, "lines": 28, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "site/src/sphinx/advanced-structured-logging.rst"}, {"insertions": 6, "deletions": 3, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java"}, {"insertions": 38, "deletions": 1, "lines": 39, "filePath": "core/src/test/java/com/linecorp/armeria/internal/ArmeriaHttpUtilTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/server/Http2ServerConnectionHandler.java"}, {"insertions": 45, "deletions": 12, "lines": 57, "filePath": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHostServiceBindingBuilder.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java"}, {"insertions": 24, "deletions": 0, "lines": 24, "filePath": "tomcat/src/test/java/com/linecorp/armeria/server/tomcat/UnmanagedTomcatServiceTest.java"}, {"insertions": 3, "deletions": 5, "lines": 8, "filePath": "site/src/sphinx/server-basics.rst"}, {"insertions": 6, "deletions": 5, "lines": 11, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "site/src/sphinx/server-access-log.rst"}], "commitDateTime": "2019-05-17 11:19:22", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toArmeria(com.linecorp.armeria.common.HttpHeadersBuilder,io.netty.handler.codec.http2.Http2Headers,boolean)"}, {"UPD": 14, "TOT": 27, "MOV": 12, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toArmeria(io.netty.handler.codec.http2.Http2Headers,boolean,boolean)"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toArmeria(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http.HttpRequest,com.linecorp.armeria.server.ServerConfig)"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toArmeriaRequestHeaders(io.netty.channel.ChannelHandlerContext,io.netty.handler.codec.http2.Http2Headers,boolean,java.lang.String,com.linecorp.armeria.server.ServerConfig)"}], "spoonFilePath": "ArmeriaHttpUtil.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostServiceBindingBuilder.service(com.linecorp.armeria.server.Service)"}], "spoonFilePath": "VirtualHostServiceBindingBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.HttpServerHandler.fillSchemeAndAuthorityIfMissing(io.netty.channel.ChannelHandlerContext,com.linecorp.armeria.common.RequestHeaders)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.HttpServerHandler.handleRequest(io.netty.channel.ChannelHandlerContext,com.linecorp.armeria.server.DecodedHttpRequest)"}], "spoonFilePath": "HttpServerHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Http2ServerConnectionHandler"}], "spoonFilePath": "Http2ServerConnectionHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Http2RequestDecoder"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Http2RequestDecoder.onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,boolean)"}], "spoonFilePath": "Http2RequestDecoder.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostServiceBindingBuilderTest.serviceBindingBuilder()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.VirtualHostServiceBindingBuilderTest.withRoute()"}], "spoonFilePath": "VirtualHostServiceBindingBuilderTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.tomcat.UnmanagedTomcatServiceTest.okWithoutAuthorityHeader()"}], "spoonFilePath": "UnmanagedTomcatServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.Http2PrefaceOrHttpHandler.configureHttp2(io.netty.channel.ChannelHandlerContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.Http2PrefaceOrHttpHandler.configureHttp1WithUpgrade(io.netty.channel.ChannelHandlerContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.Http2OrHttpHandler.addHttp2Handlers(io.netty.channel.ChannelHandlerContext)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.newHttp2ConnectionHandler(io.netty.channel.ChannelPipeline,io.netty.util.AsciiString)"}], "spoonFilePath": "HttpServerPipelineConfigurator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtilTest.toArmeriaRequestHeaders()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtilTest.serverConfig()"}], "spoonFilePath": "ArmeriaHttpUtilTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.of(com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.RequestHeaders)"}], "spoonFilePath": "HttpRequest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Http1RequestDecoder.channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"}], "spoonFilePath": "Http1RequestDecoder.java"}]}], "url": "https://github.com/line/armeria/issues/1773", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "NullPointerException ", "statsSkippedReason": "", "user": "dawnbreaks", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Hi, we got a NullPointerException because of the Authority header missing, and please refer to the stack trace message below.\r\n\r\nThe method fillSchemeAndAuthorityIfMissing of class HttpServerHandler creating a new RequestHeaders instance instead of filling the existing one, and this cause the NullPointerException.\r\n\r\n```java\r\n2019-05-15 17:40:43.245 WARN [armeria-common-worker-epoll-2-1] c.l.a.s.t.TomcatService [id: 0x7fb03509, L:/192.168.5.137:8080 - R:/192.168.3.170:29786][h2c://test-grpc-demo-0:8080/index#GET] Failed to invoke Tomcat:\r\njava.lang.NullPointerException: null\r\n        at com.linecorp.armeria.server.tomcat.TomcatService.convertRequest(TomcatService.java:356)\r\n        at com.linecorp.armeria.server.tomcat.TomcatService.lambda$serve$3(TomcatService.java:287)\r\n        at java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n        at java.util.concurrent.CompletableFuture.uniHandleStage(CompletableFuture.java:834)\r\n        at java.util.concurrent.CompletableFuture.handle(CompletableFuture.java:2155)\r\n        at com.linecorp.armeria.server.tomcat.TomcatService.serve(TomcatService.java:279)\r\n        at com.linecorp.armeria.server.tomcat.TomcatService.serve(TomcatService.java:77)\r\n        at com.linecorp.armeria.server.HttpServerHandler.handleRequest(HttpServerHandler.java:376)\r\n        at com.linecorp.armeria.server.HttpServerHandler.channelRead(HttpServerHandler.java:250)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at com.linecorp.armeria.server.Http2RequestDecoder.onHeadersRead(Http2RequestDecoder.java:143)\r\n        at com.linecorp.armeria.server.Http2RequestDecoder.onHeadersRead(Http2RequestDecoder.java:164)\r\n        at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onHeadersRead(DefaultHttp2ConnectionDecoder.java:317)\r\n        at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onHeadersRead(DefaultHttp2ConnectionDecoder.java:265)\r\n        at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$PrefaceFrameListener.onHeadersRead(DefaultHttp2ConnectionDecoder.java:600)\r\n        at io.netty.handler.codec.http2.DefaultHttp2FrameReader$2.processFragment(DefaultHttp2FrameReader.java:483)\r\n        at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readHeadersFrame(DefaultHttp2FrameReader.java:491)\r\n        at io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:254)\r\n        at io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\r\n        at io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\r\n        at io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\r\n        at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:254)\r\n        at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.handlerRemoved(ByteToMessageDecoder.java:249)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:507)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441)\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.handler.flush.FlushConsolidationHandler.channelRead(FlushConsolidationHandler.java:154)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.handler.timeout.IdleStateHandler.channelRead(IdleStateHandler.java:286)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930)\r\n        at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:799)\r\n        at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:427)\r\n        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:328)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n        at java.lang.Thread.run(Thread.java:748)\r\n```", "labels": ["defect"]}, {"created": "2019-05-15 17:32:56", "commits": {"7f27eeb4f153c3afae2fe5afbbe9d0e0d2d7360a": {"commitGHEventType": "referenced", "commitUser": "minwoox"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-05-16 07:40:58", "filteredCommits": [], "commitsDetails": [{"nameRev": "7f27eeb4f153c3afae2fe5afbbe9d0e0d2d7360a tags/armeria-0.86.0~5", "commitMessage": "Fail fast when configuring a server for TLS but HTTP/2 is not available. (#1774)\n\nFor #1772\r\n", "commitParents": ["1efccff2dc86ccbf3e67f13df7128ecf10434552"], "spoonStatsSkippedReason": "", "commitHash": "7f27eeb4f153c3afae2fe5afbbe9d0e0d2d7360a", "authoredDateTime": "2019-05-17 10:11:18", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 11, "deletions": 0, "lines": 11, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}, {"insertions": 23, "deletions": 0, "lines": 23, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/SystemInfo.java"}], "commitDateTime": "2019-05-17 10:11:18", "commitUser": "minwoox", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.build()"}], "spoonFilePath": "ServerBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.util.SystemInfo"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.util.SystemInfo.jettyAlpnOptionalOrAvailable()"}], "spoonFilePath": "SystemInfo.java"}]}], "url": "https://github.com/line/armeria/issues/1772", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Disabled OpenSSL raises ALPN unsupported: use Conscrypt", "statsSkippedReason": "", "user": "gquintana", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When I run Armeria 0.84 with `-Dcom.linecorp.armeria.useOpenSsl=false` I get the following error:\r\n\r\n```\r\n2019-05-15T19:23:14,920 WARN  com.linecorp.armeria.common.util.Exceptions - [id: 0x89878206, L:/10.122.135.222:9411 ! R:/10.121.199.16:36088] Unexpected exception:\r\nio.netty.handler.codec.DecoderException: java.lang.RuntimeException: ALPN unsupported. Is your classpath configured correctly? For Conscrypt, add the appropriate Conscrypt JAR to classpath and set the security provider. For Jetty-ALPN, see http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-starting\r\n        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:472) ~[netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:405) ~[netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:372) ~[netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:355) ~[netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:242) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:228) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:221) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.ChannelInboundHandlerAdapter.channelInactive(ChannelInboundHandlerAdapter.java:75) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:242) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:228) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:221) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1403) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:242) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:228) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:912) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:827) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) [netty-common-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) [netty-common-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:333) [netty-transport-native-epoll-4.1.34.Final-linux-x86_64.jar!/:4.1.34.Final]\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905) [netty-common-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at java.lang.Thread.run(Thread.java:748) [?:1.8.0_202]\r\nCaused by: java.lang.RuntimeException: ALPN unsupported. Is your classpath configured correctly? For Conscrypt, add the appropriate Conscrypt JAR to classpath and set the security provider. For Jetty-ALPN, see http://www.eclipse.org/jetty/documentation/current/alpn-chapter.html#alpn-starting\r\n        at io.netty.handler.ssl.JdkAlpnApplicationProtocolNegotiator$FailureWrapper.wrapSslEngine(JdkAlpnApplicationProtocolNegotiator.java:122) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.JdkSslContext.configureAndWrapEngine(JdkSslContext.java:361) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.JdkSslContext.newEngine(JdkSslContext.java:331) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SslContext.newHandler(SslContext.java:896) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SslContext.newHandler(SslContext.java:888) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SniHandler.newSslHandler(SniHandler.java:151) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SniHandler.replaceHandler(SniHandler.java:133) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SniHandler.onLookupComplete(SniHandler.java:114) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.AbstractSniHandler.select(AbstractSniHandler.java:229) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.AbstractSniHandler.decode(AbstractSniHandler.java:221) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502) ~[netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441) ~[netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        ... 21 more\r\n```\r\nIf I add the Conscrypt JAR to the classpath, SSL will based on BoringSSL, so there is no benefit in using the aforementioned flag.\r\n\r\nIs it possible to use Armeria with JDK8 SSL engine?", "labels": ["defect"]}, {"created": "2019-05-14 08:34:47", "user": "alex-lx", "body": "We have a spring-mvc application. It uses spring-cloud-sleuth for distributed tracking. We also use Ameria's Client to call our backend Ameria Grpc service.\r\n\r\nExpect:\r\nTracing should work good, Ameria's client should use the same trace of spring mvc's request.\r\n\r\nBut in fact:\r\nAmeria's client create a new trace.\r\n\r\nMore info:\r\n\r\nsome code:\r\n```java\r\n    @Bean\r\n    RecommendServiceGrpc.RecommendServiceBlockingStub recommendServiceBlockingStub(\r\n            Tracing tracing\r\n    ) {\r\n\r\n        return new ClientBuilder(\"gproto+http://group:ai-recommend-v2/\")\r\n                .decorator(HttpTracingClient.newDecorator(tracing))\r\n                .build(RecommendServiceGrpc.RecommendServiceBlockingStub.class);\r\n    }\r\n    @Bean\r\n    CurrentTraceContext.Builder sleuthCurrentTraceContextBuilder() {\r\n        return RequestContextCurrentTraceContext.newBuilder();\r\n    }\r\n```\r\n\r\nwarning in log:\r\n```\r\n2019-05-14 15:35:50.425  WARN [,,,] 34541 --- [nio-8081-exec-1] .a.c.t.RequestContextCurrentTraceContext : Attempted to propagate trace context, but no request context available. Did you forget to use RequestContext.contextAwareExecutor() or RequestContext.makeContextAware()?\r\n```\r\n\r\nWe tried to customize the executor of tomcat, but the application would throw RequestContext unavailable when starting up.\r\n```java\r\n    @Bean\r\n    WebServerFactoryCustomizer<TomcatServletWebServerFactory> tomcatServletWebServerFactoryWebServerFactoryCustomizer() {\r\n        return new WebServerFactoryCustomizer<TomcatServletWebServerFactory>() {\r\n            @Override\r\n            public void customize(TomcatServletWebServerFactory factory) {\r\n                factory.addConnectorCustomizers(\r\n                        new TomcatConnectorCustomizer() {\r\n                            @Override\r\n                            public void customize(Connector connector) {\r\n                                ProtocolHandler handler = connector.getProtocolHandler();\r\n                                if (handler instanceof AbstractProtocol) {\r\n                                    AbstractProtocol protocol = (AbstractProtocol) handler;\r\n                                    protocol.setExecutor(\r\n                                            RequestContext.current().makeContextAware(\r\n                                                    protocol.getExecutor()\r\n                                            )\r\n                                    );\r\n\r\n                                }\r\n                            }\r\n                        }\r\n                );\r\n\r\n            }\r\n        };\r\n    }\r\n```\r\n\r\n```\r\norg.springframework.context.ApplicationContextException: Unable to start web server; nested exception is java.lang.IllegalStateException: RequestContext unavailable\r\n.....\r\nCaused by: java.lang.IllegalStateException: RequestContext unavailable\r\n\tat com.linecorp.armeria.common.RequestContext.current(RequestContext.java:75) \r\n```", "closed": "2019-05-17 09:20:28", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1767", "ttf": 3.000277777777778, "commits": {}, "labels": ["defect"], "title": "Using armeria grpc client in spring mvc can't propagate trace context"}, {"created": "2019-04-22 00:39:32", "user": "adriancole", "body": "\"http.url\" is elsewhere a valid addressable URL. We issue a pattern that is probably surprising to some people. Ex. from zipkin self-tracing `\"http.url\":\"none+h1c://localhost:9411/api/v2/traces\"` I would have expected `http://localhost:9411/api/v2/traces`\r\n\r\nIs this too hip? or should we clarify in zipkin that \"http.url\" must be in URL syntax, but might not be addressable?", "closed": "2019-05-10 06:28:40", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1733", "ttf": 18.00027777777778, "commits": {}, "labels": ["defect"], "title": "tracing: http.url tag is curious"}, {"created": "2019-04-19 10:29:42", "commits": {"db01fcaa558f32af608f9fc79c893e41d74d3e21": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-04-22 09:14:21", "filteredCommits": [], "commitsDetails": [{"nameRev": "db01fcaa558f32af608f9fc79c893e41d74d3e21 tags/armeria-0.84.0~2", "commitMessage": "DefaultPathMapping now generates the correct regex pattern for a path ending with a slash (#1735)\n\nModifications:\r\n- Used `Splitter` other than `String.split()` method, in order not to ignore the slash on the last index of the path.\r\n\r\nResult:\r\n- Closes #1730", "commitParents": ["a6c9fccdea470e5db385bbd5747b40824e8ad102"], "spoonStatsSkippedReason": "", "commitHash": "db01fcaa558f32af608f9fc79c893e41d74d3e21", "authoredDateTime": "2019-04-22 18:14:20", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 9, "deletions": 0, "lines": 9, "filePath": "core/src/test/java/com/linecorp/armeria/server/DefaultPathMappingTest.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultPathMapping.java"}], "commitDateTime": "2019-04-22 18:14:20", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMappingTest.testPathEndsWithSlash()"}], "spoonFilePath": "DefaultPathMappingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMapping"}], "spoonFilePath": "DefaultPathMapping.java"}]}], "url": "https://github.com/line/armeria/issues/1730", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Cannot find a service if DefaultPathMapping ends with '/'", "statsSkippedReason": "", "user": "hyangtack", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Simple repro is as follows:\r\n```\r\npublic class SimpleTest {\r\n\r\n    @ClassRule\r\n    public static ServerRule rule = new ServerRule() {\r\n        @Override\r\n        protected void configure(ServerBuilder sb) throws Exception {\r\n            sb.service(\"/{any}/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK));\r\n        }\r\n    };\r\n\r\n    @Test\r\n    public void test() {\r\n        final AggregatedHttpMessage msg =\r\n                HttpClient.of(\"h1c://127.0.0.1:\" + rule.httpPort()).get(\"/hello/\").aggregate().join();\r\n        assertThat(msg.status()).isEqualTo(HttpStatus.OK);\r\n    }\r\n}\r\n```", "labels": ["defect"]}, {"created": "2019-04-19 06:39:11", "commits": {"666155dfa5071945c88eb40b255869143d149943": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-04-22 02:08:11", "filteredCommits": [], "commitsDetails": [{"nameRev": "666155dfa5071945c88eb40b255869143d149943 tags/armeria-0.84.0~7", "commitMessage": "Use `Class.getDeclaredField()` instead of `getField()` when fetching Thrift metadata. (#1729)\n\nRelated: https://github.com/line/armeria/issues/1728\r\n\r\nMotivation:\r\n\r\nWhen a user builds a `.thrift` file with the `private-members` option enabled,\r\nArmeria fails to find some fields in the generated code.\r\n\r\nModifications:\r\n\r\n- Use `Class.getDeclaredField()` instead of `getField()`.\r\n\r\nResult:\r\n\r\n- Fixes #1728", "commitParents": ["64fdf38eccae067ef7011bb887ff3121c31d459d"], "spoonStatsSkippedReason": "", "commitHash": "666155dfa5071945c88eb40b255869143d149943", "authoredDateTime": "2019-04-22 10:08:10", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "thrift/src/main/java/com/linecorp/armeria/internal/thrift/ThriftFunction.java"}], "commitDateTime": "2019-04-22 11:08:10", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.thrift.ThriftFunction"}], "spoonFilePath": "ThriftFunction.java"}]}], "url": "https://github.com/line/armeria/issues/1728", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "armeria-thrift does not handle service method throwing exception", "statsSkippedReason": "", "user": "edgao", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "With this thrift file: (compiled using thrift 0.11.0)\r\n```thrift\r\nexception TestException {\r\n  1: string foo;\r\n}\r\n\r\nservice TestService {\r\n  string ping() throws (1: TestException te);\r\n}\r\n```\r\n\r\nand this main method: (using armeria 0.83.0)\r\n```java\r\n  public static void main(String[] args) throws Exception {\r\n    Server server = new ServerBuilder()\r\n        .verboseResponses(true)\r\n        .http(SERVICE_PORT)\r\n        .service(\r\n            \"/\" + SERVICE_LOCATION,\r\n            THttpService.ofFormats(\r\n                (TestService.Iface)() -> \"pong\",\r\n                ThriftSerializationFormats.COMPACT\r\n            )\r\n        ).build();\r\n    CompletableFuture<Void> future = server.start();\r\n    future.join();\r\n  }\r\n```\r\n\r\nArmeria throws this exception:\r\n```text\r\nException in thread \"main\" java.lang.IllegalArgumentException: failed to retrieve function metadata: com.liveramp.partner_stats_service.TestService$Iface.ping()\r\n\tat com.linecorp.armeria.internal.thrift.ThriftServiceMetadata.registerFunction(ThriftServiceMetadata.java:190)\r\n\tat com.linecorp.armeria.internal.thrift.ThriftServiceMetadata.lambda$init$1(ThriftServiceMetadata.java:94)\r\n\tat java.util.HashMap.forEach(HashMap.java:1289)\r\n\tat java.util.Collections$UnmodifiableMap.forEach(Collections.java:1505)\r\n\tat com.linecorp.armeria.internal.thrift.ThriftServiceMetadata.init(ThriftServiceMetadata.java:93)\r\n\tat com.linecorp.armeria.internal.thrift.ThriftServiceMetadata.init(ThriftServiceMetadata.java:72)\r\n\tat com.linecorp.armeria.internal.thrift.ThriftServiceMetadata.<init>(ThriftServiceMetadata.java:60)\r\n\tat com.linecorp.armeria.server.thrift.ThriftServiceEntry.<init>(ThriftServiceEntry.java:49)\r\n\tat com.linecorp.armeria.internal.shaded.guava.collect.CollectCollectors.lambda$toImmutableMap$1(CollectCollectors.java:61)\r\n\tat java.util.stream.ReduceOps$3ReducingSink.accept(ReduceOps.java:169)\r\n\tat java.util.Iterator.forEachRemaining(Iterator.java:116)\r\n\tat java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)\r\n\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)\r\n\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)\r\n\tat java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)\r\n\tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)\r\n\tat com.linecorp.armeria.server.thrift.ThriftCallService.<init>(ThriftCallService.java:95)\r\n\tat com.linecorp.armeria.server.thrift.ThriftCallService.of(ThriftCallService.java:73)\r\n\tat com.linecorp.armeria.server.thrift.THttpService.ofFormats(THttpService.java:241)\r\n\tat com.linecorp.armeria.server.thrift.THttpService.ofFormats(THttpService.java:189)\r\n\tat com.liveramp.partner_stats_service.service.PartnerStatsServer.main(PartnerStatsServer.java:69)\r\nCaused by: java.lang.NoSuchFieldException: te\r\n\tat java.lang.Class.getField(Class.java:1703)\r\n\tat com.linecorp.armeria.internal.thrift.ThriftFunction.<init>(ThriftFunction.java:105)\r\n\tat com.linecorp.armeria.internal.thrift.ThriftFunction.<init>(ThriftFunction.java:63)\r\n\tat com.linecorp.armeria.internal.thrift.ThriftServiceMetadata.registerFunction(ThriftServiceMetadata.java:183)\r\n\t... 21 more\r\n```\r\n\r\nOur build.gradle, in case anything odd is happening with dependencies:\r\n```groovy\r\ngroup = 'com.liveramp'\r\nversion = '1.0-SNAPSHOT'\r\n\r\napply from: \"$rootProject.projectDir/deps/hadoop.gradle\"\r\napply from: \"$rootProject.projectDir/deps/uberjar.gradle\"\r\n\r\ndependencies {\r\n  configurations.all {\r\n    resolutionStrategy {\r\n      force 'org.apache.thrift:libthrift:0.11.0'\r\n    }\r\n  }\r\n\r\n  implementation 'com.squareup.okhttp:okhttp:2.7.0'\r\n  implementation 'com.squareup.retrofit:retrofit:1.9.0'\r\n  implementation 'org.apache.curator:curator-test:2.5.0'\r\n  implementation 'com.linecorp.armeria:armeria:0.83.0'\r\n  implementation 'com.linecorp.armeria:armeria-thrift:0.83.0'\r\n\r\n  implementation 'com.liveramp:db_schemas:1.0-SNAPSHOT'\r\n  implementation 'com.liveramp:dist_types:1.0-SNAPSHOT'\r\n  implementation 'com.liveramp:java_support:1.0-SNAPSHOT'\r\n  implementation 'com.liveramp:partner_apis:1.0-SNAPSHOT'\r\n  implementation 'com.liveramp:s2s_distribution_lib:1.0-SNAPSHOT'\r\n  implementation 'com.liveramp:servile:1.0-SNAPSHOT'\r\n}\r\n```\r\n(there are some internal libraries in there, let me know if it would help to see the full dependency tree)", "labels": ["defect"]}, {"created": "2019-04-17 09:58:48", "commits": {"8d0e58e376f3210a09892312ffc0060b428c727e": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-04-18 10:14:08", "filteredCommits": [], "commitsDetails": [{"nameRev": "8d0e58e376f3210a09892312ffc0060b428c727e tags/armeria-0.84.0~10", "commitMessage": "UnframedGrpcService now sends a response even there is no content to respond (#1723)\n\nModifications:\r\n- Made the future completed correctly with `HttpResponse` even if no message was read by `ArmeriaMessageDeframer`.\r\n\r\nResult:\r\n- Closes #1721", "commitParents": ["957ecd7b5be9f458aad123ac8ec8283e6331647c"], "spoonStatsSkippedReason": "", "commitHash": "8d0e58e376f3210a09892312ffc0060b428c727e", "authoredDateTime": "2019-04-18 19:14:07", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 8, "deletions": 3, "lines": 11, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java"}, {"insertions": 28, "deletions": 18, "lines": 46, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/UnframedGrpcServiceTest.java"}], "commitDateTime": "2019-04-18 19:14:07", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.UnframedGrpcServiceTest.noContent()"}, {"UPD": 1, "TOT": 17, "MOV": 13, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.grpc.UnframedGrpcServiceTest.statusCancelled()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.grpc.UnframedGrpcServiceTest"}, {"UPD": 1, "TOT": 10, "MOV": 7, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.grpc.UnframedGrpcServiceTest.statusOk()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.UnframedGrpcServiceTest.buildUnframedGrpcService(io.grpc.BindableService)"}], "spoonFilePath": "UnframedGrpcServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.UnframedGrpcService.deframeAndRespond(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.AggregatedHttpMessage,java.util.concurrent.CompletableFuture).1.endOfStream()"}], "spoonFilePath": "UnframedGrpcService.java"}]}], "url": "https://github.com/line/armeria/issues/1721", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "No response from UnframedGrpcService if onNext call is missing", "statsSkippedReason": "", "user": "hyangtack", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Assume that we have a following implementation for `Hello` method:\r\n```\r\n    @Override\r\n    public void hello(HelloRequest request, StreamObserver<HelloReply> responseObserver) {\r\n        // Note that 'responseObserver.onNext()' is not called.\r\n        responseObserver.onCompleted();\r\n    }\r\n```\r\n\r\nIf a user calls `Hello` method from the `DocService`, the server does not respond anything.\r\n\r\n/cc @anuraaga ", "labels": ["defect"]}, {"created": "2019-04-11 16:11:53", "commits": {"b165ff615d133f2679db95b5c88bd2bd9810dc3a": {"commitGHEventType": "referenced", "commitUser": "minwoox"}, "342ccd1311330e518f1b88119436cc41918fc534": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-04-18 04:00:58", "filteredCommits": [], "commitsDetails": [{"nameRev": "b165ff615d133f2679db95b5c88bd2bd9810dc3a tags/armeria-0.86.0~7", "commitMessage": "Add a flag that can dump available ciphers on startup. (#1777)\n\nCurrently it is very difficult to know what ciphers are supported by a given armeria-based server that uses OpenSSL (JDK users can look at JDK's documentation) because OpenSSL may be boring, or system, depending on configuration, and the version always changes. This PR adds a flag to dump information about ciphers so users can see the exact ciphers that would be used in their environment.\r\n\r\nI tried also using getEnabledProtocols to see what protocols are enabled by default, but it always seems to return SSLV2 and TLS1, 1.1, even though when I use testssl.sh, it always only shows TLS1.2, so for now I haven't tried logging that since I don't know how to get the right value.\r\n\r\n-Dcom.linecorp.armeria.dumpOpenSslInfo=true\r\n\r\nFor #1711", "commitParents": ["d7057d51347c3dfd452201087c928cfcbebd4424"], "spoonStatsSkippedReason": "", "commitHash": "b165ff615d133f2679db95b5c88bd2bd9810dc3a", "authoredDateTime": "2019-05-17 10:07:09", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 35, "deletions": 0, "lines": 35, "filePath": "core/src/main/java/com/linecorp/armeria/common/Flags.java"}], "commitDateTime": "2019-05-17 10:07:09", "commitUser": "minwoox", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 7, "MOV": 2, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.Flags"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.Flags.dumpOpenSslInfo()"}], "spoonFilePath": "Flags.java"}]}, {"nameRev": "342ccd1311330e518f1b88119436cc41918fc534 tags/armeria-0.84.0~12", "commitMessage": "Support SslContextBuilder customizer when configuring TLS with Server\u2026 (#1717)\n\nMotivation:\r\nWhen configuring a TLS server, the server needs to configure some common part, for example, setting a `SslProvider` to the context depending on the `Flags.useOpenSsl()` property. But it should be done by a user implementation if the user builds a `SslContext` by themselves. It would be better provide a way to customize the `SslContext` after configuring common part by Armeria.\r\n\r\nModifications:\r\n- Added the following methods to the `ServerBuilder` and `AbstractVirtualHostBuilder`:\r\n  - `tls(File keyCertChainFile, File keyFile, Consumer<SslContextBuilder> tlsCustomizer)`\r\n  - `tls(File keyCertChainFile, File keyFile, @Nullable String keyPassword, Consumer<SslContextBuilder> tlsCustomizer)`\r\n  - `tls(KeyManagerFactory keyManagerFactory, Consumer<SslContextBuilder> tlsCustomizer)`\r\n- Used `tls(KeyManagerFactory, Consumer<SslContextBuilder>)` when configuring TLS server with `spring-boot-autoconfigure` and `spring-boot-webflux-autoconfigure` module.\r\n\r\nResult:\r\n- Hopefully closes #1711.", "commitParents": ["7caa3359b2f70f43d1cde8183ef16b7fc0fdf679"], "spoonStatsSkippedReason": "", "commitHash": "342ccd1311330e518f1b88119436cc41918fc534", "authoredDateTime": "2019-04-18 13:00:57", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 23, "deletions": 25, "lines": 48, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java"}, {"insertions": 66, "deletions": 22, "lines": 88, "filePath": "core/src/main/java/com/linecorp/armeria/server/AbstractVirtualHostBuilder.java"}, {"insertions": 49, "deletions": 3, "lines": 52, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}], "commitDateTime": "2019-04-18 13:00:57", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.tls(java.io.File,java.io.File,java.lang.String,java.util.function.Consumer)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.tls(javax.net.ssl.KeyManagerFactory,java.util.function.Consumer)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.tls(java.io.File,java.io.File,java.util.function.Consumer)"}], "spoonFilePath": "ServerBuilder.java"}, {"spoonMethods": [{"UPD": 7, "TOT": 35, "MOV": 18, "INS": 4, "DEL": 6, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureTls(com.linecorp.armeria.server.ServerBuilder,com.linecorp.armeria.spring.Ssl,java.util.function.Supplier,java.util.function.Supplier)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.contentEncodingDecorator(java.lang.String[],java.lang.String[],long)"}], "spoonFilePath": "ArmeriaConfigurationUtil.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractVirtualHostBuilder.buildSslContext(java.util.function.Supplier,java.util.function.Consumer)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractVirtualHostBuilder.tls(java.io.File,java.io.File,java.util.function.Consumer)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractVirtualHostBuilder.accessLogger(org.slf4j.Logger)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractVirtualHostBuilder.tls(javax.net.ssl.KeyManagerFactory,java.util.function.Consumer)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractVirtualHostBuilder.tls(java.io.File,java.io.File)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractVirtualHostBuilder.accessLogger(java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractVirtualHostBuilder.tls(java.io.File,java.io.File,java.lang.String,java.util.function.Consumer)"}, {"UPD": 0, "TOT": 18, "MOV": 15, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.AbstractVirtualHostBuilder.tls(java.io.File,java.io.File,java.lang.String)"}], "spoonFilePath": "AbstractVirtualHostBuilder.java"}]}], "url": "https://github.com/line/armeria/issues/1711", "ttf": 6.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "TLS Protocols & Ciphers with Spring Boot", "statsSkippedReason": "", "user": "gquintana", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 2, "alsoFixesPhrase": 0}, "body": "This is related to issue #1659 \r\n\r\nHTTPS is working properly until I set armeria.ssl.enabled-protocols or armeria.ssl.ciphers\r\n\r\nHere is my spring boot configuration\r\n```\r\nserver:\r\n  port: 9411\r\n  ssl:\r\n    enabled: true\r\n    key-alias: \"myhost.mycompany.fr\"\r\n    # ciphers: \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256\"\r\n    #enabled-protocols: \"TLSv1.2\"\r\n    key-store: \"/opt/zipkin-2.12.8/keystore.jks\"\r\n    key-store-password: \"changeme\"\r\n    trust-store: \"/opt/zipkin-2.12.8/keystore.jks\"\r\n    trust-store-password: \"changeme\"\r\n\r\narmeria:\r\n  ports:\r\n    - port: 9411\r\n      protocol: HTTPS\r\n  ssl:\r\n    key-alias: \"myhost.mycompany.fr\"\r\n    # ciphers: \"TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256,TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256,TLS_RSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_128_GCM_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_128_CBC_SHA256\"\r\n    #enabled-protocols: \"TLSv1.2\"\r\n    key-store: \"/opt/zipkin-2.12.8/keystore.jks\"\r\n    key-store-password: \"changeme\"\r\n    trust-store: \"/opt/zipkin-2.12.8/keystore.jks\"\r\n    trust-store-password: \"changeme\"\r\n```\r\n\r\nWhen I uncomment enabled-protocols:\r\n```\r\n2019-04-11T18:01:29,975 WARN  com.linecorp.armeria.server.HttpServerPipelineConfigurator$Http2OrHttpHandler - [id: 0xd9cf80d2, L:/10.122.135.222:9411 - R:/163.113.65.61:48292] TLS handshake failed:\r\njavax.net.ssl.SSLHandshakeException: error:1000009c:SSL routines:OPENSSL_internal:HTTP_REQUEST\r\n        at io.netty.handler.ssl.ReferenceCountedOpenSslEngine.shutdownWithError(ReferenceCountedOpenSslEngine.java:973) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.ReferenceCountedOpenSslEngine.sslReadErrorResult(ReferenceCountedOpenSslEngine.java:1231) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap(ReferenceCountedOpenSslEngine.java:1185) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap(ReferenceCountedOpenSslEngine.java:1256) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.ReferenceCountedOpenSslEngine.unwrap(ReferenceCountedOpenSslEngine.java:1299) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SslHandler$SslEngineType$1.unwrap(SslHandler.java:217) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SslHandler.unwrap(SslHandler.java:1330) [netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SslHandler.decodeNonJdkCompatible(SslHandler.java:1237) [netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1274) [netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:502) [netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441) [netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278) [netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.handlerRemoved(ByteToMessageDecoder.java:249) [netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:507) [netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:441) [netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:278) [netty-codec-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.flush.FlushConsolidationHandler.channelRead(FlushConsolidationHandler.java:154) [netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:337) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:359) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:345) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930) [netty-transport-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:796) [netty-transport-native-epoll-4.1.34.Final-linux-x86_64.jar!/:4.1.34.Final]\r\n        at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:427) [netty-transport-native-epoll-4.1.34.Final-linux-x86_64.jar!/:4.1.34.Final]\r\n        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:328) [netty-transport-native-epoll-4.1.34.Final-linux-x86_64.jar!/:4.1.34.Final]\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905) [netty-common-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at java.lang.Thread.run(Thread.java:748) [?:1.8.0_202]\r\n```\r\n\r\nWhen I uncomment ciphers (but not protocols):\r\n```\r\nCaused by: java.lang.IllegalArgumentException: unsupported cipher suite: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384(ECDHE-ECDSA-AES256-SHA384)\r\n        at io.netty.handler.ssl.CipherSuiteConverter.convertToCipherStrings(CipherSuiteConverter.java:470) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.ReferenceCountedOpenSslContext.<init>(ReferenceCountedOpenSslContext.java:254) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.OpenSslContext.<init>(OpenSslContext.java:43) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.OpenSslServerContext.<init>(OpenSslServerContext.java:345) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.OpenSslServerContext.<init>(OpenSslServerContext.java:333) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SslContext.newServerContextInternal(SslContext.java:423) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at io.netty.handler.ssl.SslContextBuilder.build(SslContextBuilder.java:447) ~[netty-handler-4.1.34.Final.jar!/:4.1.34.Final]\r\n        at com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureTls(ArmeriaConfigurationUtil.java:383) ~[armeria-spring-boot-autoconfigure-0.83.0.jar!/:?]\r\n        at com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureTls(ArmeriaConfigurationUtil.java:343) ~[armeria-spring-boot-autoconfigure-0.83.0.jar!/:?]\r\n        at com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtil.configureServerWithArmeriaSettings(ArmeriaConfigurationUtil.java:163) ~[armeria-spring-boot-autoconfigure-0.83.0.jar!/:?]\r\n        at com.linecorp.armeria.spring.ArmeriaAutoConfiguration.armeriaServer(ArmeriaAutoConfiguration.java:105) ~[armeria-spring-boot-autoconfigure-0.83.0.jar!/:?]\r\n        at com.linecorp.armeria.spring.ArmeriaAutoConfiguration$$EnhancerBySpringCGLIB$$16ba9c43.CGLIB$armeriaServer$0(<generated>) ~[armeria-spring-boot-autoconfigure-0.83.0.jar!/:?]\r\n        at com.linecorp.armeria.spring.ArmeriaAutoConfiguration$$EnhancerBySpringCGLIB$$16ba9c43$$FastClassBySpringCGLIB$$ad64608f.invoke(<generated>) ~[armeria-spring-boot-autoconfigure-0.83.0.jar!/:?]\r\n        at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.1.6.RELEASE.jar!/:5.1.6.RELEASE]\r\n        at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.1.6.RELEASE.jar!/:5.1.6.RELEASE]\r\n        at com.linecorp.armeria.spring.ArmeriaAutoConfiguration$$EnhancerBySpringCGLIB$$16ba9c43.armeriaServer(<generated>) ~[armeria-spring-boot-autoconfigure-0.83.0.jar!/:?]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_202]\r\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_202]\r\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_202]\r\n        at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_202]\r\n        at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.1.6.RELEASE.jar!/:5.1.6.RELEASE]\r\n        at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622) ~[spring-beans-5.1.6.RELEASE.jar!/:5.1.6.RELEASE]\r\n        ... 25 more\r\n```\r\n\r\nWhat are the appropriate values for fields ciphers and enabled-protocols ?\r\n* SSL Protocols https://docs.oracle.com/javase/8/docs/technotes/guides/security/StandardNames.html#SSLContext\r\n* SSL Cipher Suites https://docs.oracle.com/javase/8/docs/technotes/guides/security/SunProviders.html#SupportedCipherSuites\r\n\r\nWe are running Java 8 u202 which supports cipher TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384\r\n```\r\n$  java  -version\r\nopenjdk version \"1.8.0_202\"\r\nOpenJDK Runtime Environment (AdoptOpenJDK)(build 1.8.0_202-b08)\r\nOpenJDK 64-Bit Server VM (AdoptOpenJDK)(build 25.202-b08, mixed mode)\r\n```", "labels": ["defect"]}, {"created": "2019-04-09 03:33:46", "commits": {"c7fa3a773e9b1f5b7ac9e480d130b63f6e578988": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-04-15 09:10:16", "filteredCommits": [], "commitsDetails": [{"nameRev": "c7fa3a773e9b1f5b7ac9e480d130b63f6e578988 tags/armeria-0.84.0~15", "commitMessage": "Fix NPE while DocService scans gRPC services (#1715)\n\nMotivation:\r\n\r\nWhile `GrpcDocServicePlugin` scans the gRPC services to retrieve their\r\n`ServiceDescriptor`s, a `NullPointerException` can occur in some\r\nservices.\r\n\r\nModifications:\r\n\r\n- Skip the service whose `getServiceDescriptor()` and\r\n  `getSchemaDesciptor()` return `null`.\r\n- Skip the service whose `getSchemaDescriptor()` returns a descriptor\r\n  that's not a `ProtoFileDescriptorSupplier`.\r\n\r\nResult:\r\n\r\n- No more NPE\r\n- Fixes #1705", "commitParents": ["3c4ec5a4f8e784aa225ab5ac8c846fdaee3769f7"], "spoonStatsSkippedReason": "", "commitHash": "c7fa3a773e9b1f5b7ac9e480d130b63f6e578988", "authoredDateTime": "2019-04-15 18:10:15", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 21, "deletions": 16, "lines": 37, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcDocServicePlugin.java"}], "commitDateTime": "2019-04-15 18:10:15", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcDocServicePlugin.generate(java.util.List,com.linecorp.armeria.server.docs.DocServiceFilter)"}, {"UPD": 8, "TOT": 22, "MOV": 9, "INS": 1, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcDocServicePlugin.generateSpecification(java.util.Set,com.linecorp.armeria.server.docs.DocServiceFilter)"}], "spoonFilePath": "GrpcDocServicePlugin.java"}]}], "url": "https://github.com/line/armeria/issues/1705", "ttf": 6.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "tolerate null GRPC schema descriptor", "statsSkippedReason": "", "user": "adriancole", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "io.grpc.MethodDescriptor.getSchemaDescriptor() is nullable and not of a guaranteed type. It would be nice to rid the NPE here for a debug log message.\r\n\r\n```\r\njava.lang.NullPointerException: null\r\n\tat com.linecorp.armeria.server.grpc.GrpcDocServicePlugin.lambda$generateSpecification$1(GrpcDocServicePlugin.java:154) ~[armeria-grpc-0.83.0.jar:?]\r\n\tat java.util.HashMap.computeIfAbsent(HashMap.java:1127) ~[?:1.8.0_181]\r\n\tat com.linecorp.armeria.server.grpc.GrpcDocServicePlugin.generateSpecification(GrpcDocServicePlugin.java:150) ~[armeria-grpc-0.83.0.jar:?]\r\n\tat com.linecorp.armeria.server.docs.DocService.lambda$generate$3(DocService.java:173) ~[armeria-0.83.0.jar:?]\r\n\tat java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193) ~[?:1.8.0_181]\r\n\tat java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948) ~[?:1.8.0_181]\r\n\tat java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481) ~[?:1.8.0_181]\r\n\tat java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471) ~[?:1.8.0_181]\r\n\tat java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708) ~[?:1.8.0_181]\r\n\tat java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234) ~[?:1.8.0_181]\r\n\tat java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499) ~[?:1.8.0_181]\r\n\tat com.linecorp.armeria.server.docs.DocService.generate(DocService.java:175) ~[armeria-0.83.0.jar:?]\r\n\tat com.linecorp.armeria.server.docs.DocService.access$100(DocService.java:80) ~[armeria-0.83.0.jar:?]\r\n\tat com.linecorp.armeria.server.docs.DocService$1.serverStarting(DocService.java:159) ~[armeria-0.83.0.jar:?]\r\n\tat com.linecorp.armeria.server.Server$ServerStartStopSupport.notifyStarting(Server.java:473) ~[armeria-0.83.0.jar:?]\r\n\tat com.linecorp.armeria.server.Server$ServerStartStopSupport.notifyStarting(Server.java:266) ~[armeria-0.83.0.jar:?]\r\n\tat com.linecorp.armeria.common.util.StartStopSupport.notifyListeners(StartStopSupport.java:342) ~[armeria-0.83.0.jar:?]\r\n\tat com.linecorp.armeria.common.util.StartStopSupport.lambda$start$3(StartStopSupport.java:171) ~[armeria-0.83.0.jar:?]\r\n\tat io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run(GlobalEventExecutor.java:248) [netty-common-4.1.34.Final.jar:4.1.34.Final]\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.34.Final.jar:4.1.34.Final]\r\n\tat java.lang.Thread.run(Thread.java:748) [?:1.8.0_181]\r\n```", "labels": ["defect"]}, {"created": "2019-04-04 03:05:21", "commits": {"826f52076448f88e11b12b57b1d6687bbe82ee16": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-04-05 03:29:50", "filteredCommits": [], "commitsDetails": [{"nameRev": "826f52076448f88e11b12b57b1d6687bbe82ee16 tags/armeria-0.84.0~20", "commitMessage": "Fix a bug where `DnsEndpointGroup` does not respect search domains in `/etc/resolv.conf` (#1697)\n\nMotivation:\r\n\r\nWhen using `Dns*EndpointGroup` with search domains in\r\n`/etc/resolv.conf`, the resolver should try all search domains until the\r\nhost name is resolved.\r\n\r\nHowever, it treats the specified host name as a full domain name by\r\nappending a dot (.) to the specified host name.\r\n\r\nModifications:\r\n\r\n- Introduce a new `DnsQuestion` implementation called\r\n  `DnsQuestionWithoutTrailingDot` which does not append a dot at the end\r\n  of the host name.\r\n\r\nResult:\r\n\r\n- `Dns*EndpointGroup` respects the search domains in `/etc/resolv.conf`.\r\n- Fixes #1694", "commitParents": ["4e20585134c4a04dd4a823056b9b1c5f2348fb04"], "spoonStatsSkippedReason": "", "commitHash": "826f52076448f88e11b12b57b1d6687bbe82ee16", "authoredDateTime": "2019-04-05 12:29:49", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 3, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsAddressEndpointGroup.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsServiceEndpointGroup.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsEndpointGroup.java"}, {"insertions": 85, "deletions": 0, "lines": 85, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsQuestionWithoutTrailingDot.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/dns/DnsTextEndpointGroup.java"}], "commitDateTime": "2019-04-05 12:29:49", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsEndpointGroup.sendQueries()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsEndpointGroup"}], "spoonFilePath": "DnsEndpointGroup.java"}, {"spoonMethods": [], "spoonFilePath": "DnsServiceEndpointGroup.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.dns.DnsQuestionWithoutTrailingDot"}], "spoonFilePath": "DnsQuestionWithoutTrailingDot.java"}, {"spoonMethods": [], "spoonFilePath": "DnsTextEndpointGroup.java"}, {"spoonMethods": [], "spoonFilePath": "DnsAddressEndpointGroup.java"}]}], "url": "https://github.com/line/armeria/issues/1694", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "DNS query failed in k8s by service name", "statsSkippedReason": "", "user": "dawnbreaks", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Hi,  the DnsAddressEndpointGroup can not resolve successfully by the k8s service name, and must use a fully qualified domain name.\r\ne.g. \r\n\r\n```java\r\n//query failed\r\nnew DnsAddressEndpointGroupBuilder(\"service-a\").port(8080).build()\r\n//only a fully qualified domain name work\r\nnew DnsAddressEndpointGroupBuilder(\"service-a.infra.svc.cluster.local\").port(8080).build()\r\n````\r\n\r\n\r\n", "labels": ["defect"]}, {"created": "2019-03-28 00:47:03", "commits": {"4e20585134c4a04dd4a823056b9b1c5f2348fb04": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2019-04-05 03:29:36", "filteredCommits": [], "commitsDetails": [{"nameRev": "4e20585134c4a04dd4a823056b9b1c5f2348fb04 tags/armeria-0.84.0~21", "commitMessage": "Fix `IllegalReferenceCountException` in `TwoElementFixedStreamMessage` (#1695)\n\nMotivation:\r\nWe should assign `null` to fields in `TwoElementFixedStreamMessage` before calling\r\n`Subscriber.onNext()` as we do in `OneElementFixedStreamMessage` and `RegularElementFixedStreamMessage`.\r\n\r\nModification:\r\n- Assign `null` to fields before calling `Subscriber.onNext()`.\r\n\r\nMisc:\r\n- Remove `EventLoopStreamMessage`.\r\n\r\nResult:\r\n- Close #1687\r\n- `IllegalReferenceCountException` is no longer raised when using `TwoElementFixedStreamMessage`.", "commitParents": ["f7b957958b8e891215a0a498561429c4f56a58b5"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "4e20585134c4a04dd4a823056b9b1c5f2348fb04", "authoredDateTime": "2019-04-05 12:29:35", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 94, "deletions": 0, "lines": 94, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/TwoElementFixedStreamMessageTest.java"}, {"insertions": 0, "deletions": 467, "lines": 467, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/EventLoopStreamMessage.java"}, {"insertions": 6, "deletions": 10, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/TwoElementFixedStreamMessage.java"}], "commitDateTime": "2019-04-05 12:29:35", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1687", "ttf": 8.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`IllegalReferenceCountException` in `TwoElementFixedStreamMessage`?", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Found this:\r\n\r\n```\r\nio.netty.util.IllegalReferenceCountException: refCnt: 0, decrement: 1\r\n at io.netty.buffer.AbstractReferenceCountedByteBuf.toLiveRealCnt(AbstractReferenceCountedByteBuf.java:190)\r\n at io.netty.buffer.AbstractReferenceCountedByteBuf.release0(AbstractReferenceCountedByteBuf.java:142)\r\n at io.netty.buffer.AbstractReferenceCountedByteBuf.release(AbstractReferenceCountedByteBuf.java:133)\r\n at com.linecorp.armeria.unsafe.ByteBufHttpData.release(ByteBufHttpData.java:119)\r\n at io.netty.util.ReferenceCountUtil.release(ReferenceCountUtil.java:88)\r\n at io.netty.util.ReferenceCountUtil.safeRelease(ReferenceCountUtil.java:113)\r\n at com.linecorp.armeria.common.stream.TwoElementFixedStreamMessage.cleanupObjects(TwoElementFixedStreamMessage.java:57)\r\n at com.linecorp.armeria.common.stream.FixedStreamMessage.cleanup(FixedStreamMessage.java:70)\r\n at com.linecorp.armeria.common.stream.FixedStreamMessage.notifySubscriberOfCloseEvent(FixedStreamMessage.java:129)\r\n at com.linecorp.armeria.common.stream.FixedStreamMessage.cleanup(FixedStreamMessage.java:66)\r\n at com.linecorp.armeria.common.stream.FixedStreamMessage.cancelOrAbort(FixedStreamMessage.java:163)\r\n at com.linecorp.armeria.common.stream.FixedStreamMessage.cancel(FixedStreamMessage.java:135)\r\n at com.linecorp.armeria.common.stream.AbstractStreamMessage$SubscriptionImpl.cancel(AbstractStreamMessage.java:275)\r\n at com.linecorp.armeria.common.stream.DeferredStreamMessage.doCancel(DeferredStreamMessage.java:206)\r\n at com.linecorp.armeria.common.stream.DeferredStreamMessage.cancel(DeferredStreamMessage.java:196)\r\n at com.linecorp.armeria.common.stream.AbstractStreamMessage$SubscriptionImpl.cancel(AbstractStreamMessage.java:275)\r\n at com.linecorp.armeria.server.HttpResponseSubscriber.lambda$write$1(HttpResponseSubscriber.java:360)\r\n at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:502)\r\n at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:476)\r\n at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:415)\r\n at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:540)\r\n at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:533)\r\n at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:114)\r\n at io.netty.util.internal.PromiseNotificationUtil.tryFailure(PromiseNotificationUtil.java:64)\r\n at io.netty.channel.DelegatingChannelPromiseNotifier.operationComplete(DelegatingChannelPromiseNotifier.java:57)\r\n at io.netty.channel.DelegatingChannelPromiseNotifier.operationComplete(DelegatingChannelPromiseNotifier.java:31)\r\n at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:502)\r\n at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:495)\r\n at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:474)\r\n at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:415)\r\n at io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:540)\r\n at io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:533)\r\n at io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:114)\r\n at io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator.tryPromise(Http2CodecUtil.java:380)\r\n at io.netty.handler.codec.http2.Http2CodecUtil$SimpleChannelPromiseAggregator.tryFailure(Http2CodecUtil.java:301)\r\n at io.netty.util.internal.PromiseNotificationUtil.tryFailure(PromiseNotificationUtil.java:64)\r\n at io.netty.channel.ChannelOutboundBuffer.safeFail(ChannelOutboundBuffer.java:709)\r\n at io.netty.channel.ChannelOutboundBuffer.remove0(ChannelOutboundBuffer.java:294)\r\n at io.netty.channel.ChannelOutboundBuffer.failFlushed(ChannelOutboundBuffer.java:646)\r\n at io.netty.channel.AbstractChannel$AbstractUnsafe.close(AbstractChannel.java:749)\r\n at io.netty.channel.AbstractChannel$AbstractUnsafe.flush0(AbstractChannel.java:951)\r\n at io.netty.channel.epoll.AbstractEpollChannel$AbstractEpollUnsafe.flush0(AbstractEpollChannel.java:514)\r\n at io.netty.channel.AbstractChannel$AbstractUnsafe.flush(AbstractChannel.java:906)\r\n at io.netty.channel.DefaultChannelPipeline$HeadContext.flush(DefaultChannelPipeline.java:1370)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:739)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:731)\r\n at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:717)\r\n at io.netty.channel.ChannelDuplexHandler.flush(ChannelDuplexHandler.java:117)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:739)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:731)\r\n at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:717)\r\n at io.netty.handler.flush.FlushConsolidationHandler.flushNow(FlushConsolidationHandler.java:206)\r\n at io.netty.handler.flush.FlushConsolidationHandler.flush(FlushConsolidationHandler.java:140)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:739)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:731)\r\n at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:717)\r\n at io.netty.channel.ChannelOutboundHandlerAdapter.flush(ChannelOutboundHandlerAdapter.java:115)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:739)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:731)\r\n at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:717)\r\n at com.linecorp.armeria.internal.TrafficLoggingHandler.flush(TrafficLoggingHandler.java:49)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:739)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:731)\r\n at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:717)\r\n at io.netty.handler.codec.http2.Http2ConnectionHandler.flush(Http2ConnectionHandler.java:201)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush0(AbstractChannelHandlerContext.java:739)\r\n at io.netty.channel.AbstractChannelHandlerContext.invokeFlush(AbstractChannelHandlerContext.java:731)\r\n at io.netty.channel.AbstractChannelHandlerContext.flush(AbstractChannelHandlerContext.java:717)\r\n at com.linecorp.armeria.server.HttpResponseSubscriber.write(HttpResponseSubscriber.java:366)\r\n at com.linecorp.armeria.server.HttpResponseSubscriber.onNext(HttpResponseSubscriber.java:243)\r\n at com.linecorp.armeria.server.HttpResponseSubscriber.onNext(HttpResponseSubscriber.java:51)\r\n at com.linecorp.armeria.common.stream.FilteredStreamMessage$FilteringSubscriber.onNext(FilteredStreamMessage.java:196)\r\n at com.linecorp.armeria.common.stream.DeferredStreamMessage$ForwardingSubscriber.onNext(DeferredStreamMessage.java:305)\r\n at com.linecorp.armeria.common.stream.TwoElementFixedStreamMessage.doNotifyObject(TwoElementFixedStreamMessage.java:122)\r\n at com.linecorp.armeria.common.stream.TwoElementFixedStreamMessage.doNotify(TwoElementFixedStreamMessage.java:110)\r\n at com.linecorp.armeria.common.stream.TwoElementFixedStreamMessage.doRequest(TwoElementFixedStreamMessage.java:72)\r\n at com.linecorp.armeria.common.stream.FixedStreamMessage.request(FixedStreamMessage.java:88)\r\n at com.linecorp.armeria.common.stream.AbstractStreamMessage$SubscriptionImpl.request(AbstractStreamMessage.java:269)\r\n at com.linecorp.armeria.common.stream.DeferredStreamMessage$ForwardingSubscriber.onSubscribe(DeferredStreamMessage.java:298)\r\n at com.linecorp.armeria.common.stream.FixedStreamMessage.subscribe(FixedStreamMessage.java:115)\r\n at com.linecorp.armeria.common.stream.AbstractStreamMessage.subscribe(AbstractStreamMessage.java:72)\r\n at com.linecorp.armeria.common.stream.DeferredStreamMessage.safeOnSubscribeToDelegate(DeferredStreamMessage.java:261)\r\n at com.linecorp.armeria.common.stream.DeferredStreamMessage.delegate(DeferredStreamMessage.java:115)\r\n at com.linecorp.armeria.common.DeferredHttpResponse.delegate(DeferredHttpResponse.java:39)\r\n at com.linecorp.armeria.common.HttpResponse.lambda$from$0(HttpResponse.java:72)\r\n at java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n at java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797)\r\n at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474)\r\n at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1962)\r\n at com.linecorp.armeria.server.thrift.THttpService.respond(THttpService.java:703)\r\n at com.linecorp.armeria.server.thrift.THttpService.handleSuccess(THttpService.java:665)\r\n at com.linecorp.armeria.server.thrift.THttpService.lambda$invoke$4(THttpService.java:623)\r\n at java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n at java.util.concurrent.CompletableFuture.uniHandleStage(CompletableFuture.java:834)\r\n at java.util.concurrent.CompletableFuture.handle(CompletableFuture.java:2155)\r\n at java.util.concurrent.CompletableFuture.handle(CompletableFuture.java:110)\r\n at com.linecorp.armeria.server.thrift.THttpService.invoke(THttpService.java:611)\r\n at com.linecorp.armeria.server.thrift.THttpService.decodeAndInvoke(THttpService.java:580)\r\n at com.linecorp.armeria.server.thrift.THttpService.lambda$doPost$3(THttpService.java:434)\r\n at java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n at java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797)\r\n at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474)\r\n at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1962)\r\n at com.linecorp.armeria.common.HttpMessageAggregator.apply(HttpMessageAggregator.java:151)\r\n at com.linecorp.armeria.common.HttpMessageAggregator.apply(HttpMessageAggregator.java:36)\r\n at java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n at java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797)\r\n at java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:442)\r\n at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)\r\n at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:333)\r\n at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\r\n at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n at java.lang.Thread.run(Thread.java:745) \r\n```\r\n\r\nServer setup:\r\n\r\nhttps://github.com/line/centraldogma/blob/422cec92ab1b4999e52277097883bacd4c15292e/server/src/main/java/com/linecorp/centraldogma/server/CentralDogma.java#L560-L573", "labels": ["defect"]}, {"created": "2019-03-19 08:55:56", "commits": {"7ab804be8f5deca46d44d2bd6a9ada70c396690e": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-03-21 08:49:49", "filteredCommits": [], "commitsDetails": [{"nameRev": "7ab804be8f5deca46d44d2bd6a9ada70c396690e tags/armeria-0.83.0~13", "commitMessage": "Add HttpHeaderNames.PREFER back (#1669)\n\nMotivation:\r\n\r\nWe removed `HttpHeaderNames.PREFER` by mistake at\r\n35c8b7914ee2335b6400b178dcab5a33203ef0d9.\r\n\r\nModification:\r\n\r\n- Add `HttpHeaderNames.PREFER` back.\r\n\r\nResult:\r\n\r\n- A past mistake is undone.\r\n- Fixes #1664", "commitParents": ["a259fab6707b1bdd6e16f47fcffdaa3781099710"], "spoonStatsSkippedReason": "", "commitHash": "7ab804be8f5deca46d44d2bd6a9ada70c396690e", "authoredDateTime": "2019-03-21 17:49:49", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java"}], "commitDateTime": "2019-03-21 17:49:49", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.HttpHeaderNames"}], "spoonFilePath": "HttpHeaderNames.java"}]}], "url": "https://github.com/line/armeria/issues/1664", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "HttpHeaderNames.PREFER is missing.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Removed by mistake.. :scream: ", "labels": ["defect"]}, {"created": "2019-03-15 17:09:36", "commits": {"3d3a5f32ea2be8313ebff8b164efcf8b16f835a1": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2019-04-01 05:05:03", "filteredCommits": [], "commitsDetails": [{"nameRev": "3d3a5f32ea2be8313ebff8b164efcf8b16f835a1 tags/armeria-0.83.0~7", "commitMessage": "Add TLS configuration support to spring-autoconfigure (#1663)\n\nChanges:\r\n- Fork Spring's Ssl to support both spring-boot1, spring-boot2.\r\n- Move TLS configuration setup to boot-autoconfigure to allow to setup TLS at non-reactive servers\r\n\r\nResults:\r\n- Cloeses #1659 ", "commitParents": ["6070b3012beedfac3eff3684c8112e1d69f7ad03"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "3d3a5f32ea2be8313ebff8b164efcf8b16f835a1", "authoredDateTime": "2019-03-28 15:45:58", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 5, "deletions": 0, "lines": 5, "filePath": "NOTICE.txt"}, {"insertions": 118, "deletions": 0, "lines": 118, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtil.java"}, {"insertions": 48, "deletions": 0, "lines": 48, "filePath": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaOkServiceConfiguration.java"}, {"insertions": 300, "deletions": 0, "lines": 300, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/Ssl.java"}, {"insertions": 2, "deletions": 21, "lines": 23, "filePath": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java"}, {"insertions": 8, "deletions": 0, "lines": 8, "filePath": "spring/boot-autoconfigure/src/test/resources/config/application-sslTest.yml"}, {"insertions": 2, "deletions": 23, "lines": 25, "filePath": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaMeterBindersConfigurationTest.java"}, {"insertions": 2, "deletions": 19, "lines": 21, "filePath": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java"}, {"insertions": 64, "deletions": 105, "lines": 169, "filePath": "spring/boot-webflux-autoconfigure/src/main/java/com/linecorp/armeria/spring/web/reactive/ArmeriaReactiveWebServerFactory.java"}, {"insertions": 30, "deletions": 1, "lines": 31, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "spring/boot-webflux-autoconfigure/build.gradle"}, {"insertions": 126, "deletions": 0, "lines": 126, "filePath": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaSslConfigurationTest.java"}], "commitDateTime": "2019-03-28 15:45:58", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1659", "ttf": 16.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "TLS support in Spring auto configuration", "statsSkippedReason": "", "user": "gquintana", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Spring Boot Configuration \r\n```\r\nserver:\r\n  port: 9411\r\n  ssl:\r\n    enabled: true\r\n    key-alias: \"host.name.com\"\r\n    key-store: \"keystore.jks\"\r\n    key-store-password: \"changeme\"\r\n    trust-store: \"truststore.jks\"\r\n    trust-store-password: \"changeme\"\r\narmeria:\r\n  ports:\r\n    - port: 9411\r\n      protocol: HTTPS\r\n\r\n```\r\nException raised\r\n```\r\nCaused by: java.lang.IllegalArgumentException: TLS not configured; cannot serve HTTPS\r\n        at com.linecorp.armeria.server.ServerBuilder.build(ServerBuilder.java:1340) ~[armeria-0.80.0.jar!/:?]\r\n        at com.linecorp.armeria.spring.ArmeriaAutoConfiguration.armeriaServer(ArmeriaAutoConfiguration.java:113) ~[armeria-spring-boot-autoconfigure-0.80.0.jar!/:?]\r\n        at com.linecorp.armeria.spring.ArmeriaAutoConfiguration$$EnhancerBySpringCGLIB$$2f3f223e.CGLIB$armeriaServer$0(<generated>) ~[armeria-spring-boot-autoconfigure-0.80.0.jar!/:?]\r\n        at com.linecorp.armeria.spring.ArmeriaAutoConfiguration$$EnhancerBySpringCGLIB$$2f3f223e$$FastClassBySpringCGLIB$$b07f737b.invoke(<generated>) ~[armeria-spring-boot-autoconfigure-0.80.0.jar!/:?]\r\n```\r\nThere is a TODO https://github.com/line/armeria/blob/armeria-0.80.0/spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaSettings.java#L43\r\n\r\nVersion: 0.80.0", "labels": ["defect"]}, {"created": "2019-03-09 12:43:08", "commits": {"839da063d8460594b779e7535860e307a0f667e9": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-03-18 08:51:34", "filteredCommits": [], "commitsDetails": [{"nameRev": "839da063d8460594b779e7535860e307a0f667e9 tags/armeria-0.82.0~3", "commitMessage": "Strip a leading slash in an `HttpFile` resource path (#1661)\n\nMotivation:\r\n\r\nUnlike `ClassPathHttpVfs.get()`, `HttpFile.ofResource()` does not strip\r\na leading slash in a given path.\r\n\r\nModifications:\r\n\r\n- Strip a leading slash in `HttpFileBuilder.ofResource()`\r\n\r\nResult:\r\n\r\n- Fixes #1650.", "commitParents": ["35c8b7914ee2335b6400b178dcab5a33203ef0d9"], "spoonStatsSkippedReason": "", "commitHash": "839da063d8460594b779e7535860e307a0f667e9", "authoredDateTime": "2019-03-18 17:51:33", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 7, "deletions": 0, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/server/file/HttpFileBuilder.java"}, {"insertions": 8, "deletions": 0, "lines": 8, "filePath": "core/src/test/java/com/linecorp/armeria/server/file/HttpFileTest.java"}], "commitDateTime": "2019-03-18 17:51:33", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.HttpFileBuilder.ofResource(java.lang.ClassLoader,java.lang.String)"}], "spoonFilePath": "HttpFileBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.HttpFileTest.leadingSlashInResourcePath()"}], "spoonFilePath": "HttpFileTest.java"}]}], "url": "https://github.com/line/armeria/issues/1650", "ttf": 8.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "HttpFile and HttpFileService have different semantics for parsing resource URL", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I found that `HttpFile` does not work if a resource starts with `/` but `HttpFileService` strips it off\r\n\r\nhttps://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/server/file/ClassPathHttpVfs.java#L39\r\n\r\nI think the two should have same semantics to prevent confusion (I was expecting the same constant with a filename appended I was using with `HttpFileService` to work with `HttpFile` but it was ending up as not-found).", "labels": ["defect"]}, {"created": "2019-03-07 19:12:46", "commits": {"f4f2941599377934a09975eda5001a754c40c70d": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-03-08 07:05:29", "filteredCommits": [], "commitsDetails": [{"nameRev": "f4f2941599377934a09975eda5001a754c40c70d tags/armeria-0.81.0~4", "commitMessage": "Support non-JSON Spring Actuator responses (#1641)\n\n* Support non-JSON Spring Actuator responses\r\n\r\nMotivation:\r\n\r\nSpring Actuator responses are not always JSON. It can be a plaintext or\r\neven an octet stream.\r\n\r\nModifications:\r\n\r\n- Respect the negotiated media type.\r\n- Added support for a plaintext response represented as a `CharSequence`.\r\n- Added support for a binary response represented as a `Resource`.\r\n- Miscellaneous:\r\n  - `msg` -> `req` or `res`\r\n  - Added `final` wherever applicable.\r\n  - Added missing `spring.factories` to `armeria-spring-boot-actuator-autoconfigure`.\r\n  - Made all Spring Boot examples use our actuator implementation.\r\n  - Fixed a packaging issue which made more than one `Server`\r\n    instantiated. (The fix originally written by @hyangtack)\r\n\r\nResult:\r\n\r\n- Fixes #1637\r\n- A user can also retrieve the heap dump via the Actuator service.\r\n- A user does not need to import `ArmeriaSpringActuatorAutoConfiguration`\r\n  manually anymore.\r\n- `Server` startup does not fail anymore when a user pulls both\r\n  `armeria-spring-boot-actuator-starter` and\r\n  `armeria-spring-boot-webflux-starter`.", "commitParents": ["4213d1a30879356ad6d79285fc2741a958f77936"], "spoonStatsSkippedReason": "", "commitHash": "f4f2941599377934a09975eda5001a754c40c70d", "authoredDateTime": "2019-03-08 16:05:28", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 0, "lines": 2, "filePath": "examples/spring-boot-tomcat/build.gradle"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "examples/spring-boot-webflux/build.gradle"}, {"insertions": 173, "deletions": 25, "lines": 198, "filePath": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/WebOperationHttpService.java"}, {"insertions": 0, "deletions": 1, "lines": 1, "filePath": "spring/boot-actuator-starter/build.gradle"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "spring/boot-actuator-autoconfigure/src/main/resources/META-INF/spring.factories"}, {"insertions": 13, "deletions": 3, "lines": 16, "filePath": "spring/boot-actuator-autoconfigure/build.gradle"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "spring/boot-actuator-autoconfigure/src/main/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfiguration.java"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "examples/spring-boot-minimal/build.gradle"}, {"insertions": 77, "deletions": 27, "lines": 104, "filePath": "spring/boot-actuator-autoconfigure/src/test/java/com/linecorp/armeria/spring/actuate/ArmeriaSpringActuatorAutoConfigurationTest.java"}], "commitDateTime": "2019-03-08 16:05:28", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfiguration.actuatorServerConfigurator(org.springframework.boot.actuate.endpoint.web.WebEndpointsSupplier,org.springframework.boot.actuate.endpoint.web.EndpointMediaTypes,org.springframework.boot.actuate.autoconfigure.endpoint.web.WebEndpointProperties)"}], "spoonFilePath": "ArmeriaSpringActuatorAutoConfiguration.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 4, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationTest.testHealth()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationTest.testHeapdump()"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationTest.newUrl(java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationTest.testPrometheus()"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationTest.testMissingMediaType()"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationTest.testInvalidMediaType()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationTest"}, {"UPD": 7, "TOT": 8, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationTest.testLoggers()"}, {"UPD": 3, "TOT": 4, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.ArmeriaSpringActuatorAutoConfigurationTest.testLinks()"}], "spoonFilePath": "ArmeriaSpringActuatorAutoConfigurationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.WebOperationHttpService.close(com.linecorp.armeria.common.HttpResponseWriter,java.io.Closeable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.WebOperationHttpService.read(java.nio.channels.ReadableByteChannel,io.netty.buffer.ByteBuf)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.WebOperationHttpService.streamResource(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpResponseWriter,java.nio.channels.ReadableByteChannel,long)"}, {"UPD": 1, "TOT": 4, "MOV": 2, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.actuate.WebOperationHttpService.getArguments(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.AggregatedHttpMessage)"}, {"UPD": 9, "TOT": 25, "MOV": 11, "INS": 0, "DEL": 5, "spoonMethodName": "com.linecorp.armeria.spring.actuate.WebOperationHttpService.handleResult(java.lang.Object,com.linecorp.armeria.common.HttpMethod)"}, {"UPD": 0, "TOT": 13, "MOV": 0, "INS": 13, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.WebOperationHttpService.handleResult(com.linecorp.armeria.server.ServiceRequestContext,java.lang.Object,com.linecorp.armeria.common.HttpMethod)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.WebOperationHttpService"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.WebOperationHttpService.close(java.io.Closeable)"}, {"UPD": 3, "TOT": 6, "MOV": 2, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.WebOperationHttpService.invoke(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.AggregatedHttpMessage,java.util.concurrent.CompletableFuture)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.actuate.WebOperationHttpService.close(com.linecorp.armeria.common.HttpResponseWriter,java.io.Closeable,java.lang.Exception)"}], "spoonFilePath": "WebOperationHttpService.java"}]}], "url": "https://github.com/line/armeria/issues/1637", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Actuator endpoint accidentally json quotes plain text", "statsSkippedReason": "", "user": "adriancole", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "See https://github.com/line/armeria/pull/1578/files#r263519826 for context", "labels": ["defect"]}, {"created": "2019-03-06 16:25:37", "commits": {"4213d1a30879356ad6d79285fc2741a958f77936": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-03-08 04:23:05", "filteredCommits": [], "commitsDetails": [{"nameRev": "4213d1a30879356ad6d79285fc2741a958f77936 tags/armeria-0.81.0~5", "commitMessage": "Reduce the search space of AnnotationUtil.getAnnotations() and find() (#1635)\n\nMotivation:\r\n\r\nThere is no cyclic reference detection implemented in `AnnotationUtil`,\r\nwhich means an annotation like the following can trigger a\r\n`StackOverflowError`:\r\n\r\n    @Cyclic\r\n    @Retention(RUNTIME)\r\n    @interface Cyclic {}\r\n\r\nThis was not a problem before because we blacklisted well known JDK\r\nclasses that has cyclic references, but it does not work for other\r\nclasses.\r\n\r\nModifications:\r\n\r\n- Added cyclic dependency detection in the traversal logic.\r\n- Added a blacklist of the annotation types with cyclic dependencies.\r\n\r\nResult:\r\n\r\n- Annotation scanning is faster.\r\n- Annotation scanning does not trigger a `StackOverflowException`.\r\n- Fixes #1632\r\n- Fixes #1633\r\n\r\n/cc @iEAmi @tobias- ", "commitParents": ["de80157a1192eed9106adba3b70dcac06511022e"], "spoonStatsSkippedReason": "", "commitHash": "4213d1a30879356ad6d79285fc2741a958f77936", "authoredDateTime": "2019-03-08 13:23:05", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 80, "deletions": 48, "lines": 128, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotationUtilTest.java"}, {"insertions": 98, "deletions": 26, "lines": 124, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotationUtil.java"}], "commitDateTime": "2019-03-08 13:23:05", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 6, "MOV": 2, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.cglibProxy()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.findAll_cyclic()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.getAnnotations_inherited()"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.declared()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.TestClassWithCyclicAnnotation"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.getAnnotations_all_cyclic()"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.declared_repeatable()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.declared_repeatable_multi()"}, {"UPD": 3, "TOT": 9, "MOV": 3, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.findAll_includingRepeatable_multi()"}, {"UPD": 3, "TOT": 9, "MOV": 3, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.findAll_includingRepeatable()"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.lookupSuperClass()"}, {"UPD": 2, "TOT": 36, "MOV": 19, "INS": 6, "DEL": 9, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.getAnnotations_all()"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.lookupSuperClass_repeatable()"}, {"UPD": 2, "TOT": 6, "MOV": 2, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.lookupMetaAnnotations_declared()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.getAnnotations_declared()"}, {"UPD": 2, "TOT": 6, "MOV": 2, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.findAll_interfaces()"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.lookupSuperClass_repeatable_multi()"}], "spoonFilePath": "AnnotationUtilTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 20, "MOV": 14, "INS": 1, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.getMetaAnnotations(com.google.common.collect.ImmutableList$Builder,java.lang.annotation.Annotation,java.util.function.Predicate)"}, {"UPD": 2, "TOT": 13, "MOV": 8, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.findMetaAnnotations(com.google.common.collect.ImmutableList$Builder,java.lang.annotation.Annotation,java.lang.Class,java.lang.Class)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.blacklistAnnotation(java.lang.Class)"}, {"UPD": 3, "TOT": 14, "MOV": 7, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.getMetaAnnotations(com.google.common.collect.ImmutableList$Builder,java.lang.annotation.Annotation,java.util.function.Predicate,java.util.Set)"}, {"UPD": 0, "TOT": 8, "MOV": 0, "INS": 8, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.findMetaAnnotations(com.google.common.collect.ImmutableList$Builder,java.lang.annotation.Annotation,java.lang.Class,java.lang.Class,java.util.Set)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.collectSuperClasses(java.lang.Class,com.google.common.collect.ImmutableList$Builder,boolean)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.getAnnotations(java.lang.reflect.AnnotatedElement,java.util.EnumSet)"}], "spoonFilePath": "AnnotationUtil.java"}]}], "url": "https://github.com/line/armeria/issues/1633", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Stack overflow in armeria 0.80 (works in 0.79) with AnnotatedServices in Kotlin", "statsSkippedReason": "", "user": "tobias-", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "In #1569 the behaviour of annotations was modified to allow for recursive annotations(?). Unfortunately, there is a bug in it causing AnnotatedServices written in Kotlin to stack overflow on server init. The following is a short test\r\n```kotlin\r\nfun startTestWebserver() =\r\n   ServerBuilder()\r\n       .annotatedService(\"/\", MiniServer)\r\n       .apply {\r\n           port(12341, SessionProtocol.HTTP)\r\n       }\r\n       .build()\r\n\r\nobject MiniServer {\r\n   @Post(\"/test/{pathParam}\")\r\n   @Consumes(\"application/json\")\r\n   fun test(@Param(\"pathParam\") pathParam: String?, doodle: String) = HttpResponse.of(HttpStatus.NO_CONTENT)\r\n}\r\n```\r\n\r\nIn kotlin there are a couple of annotations similar but with extensions to the java annotations explicitly excluded via `BUILT_IN_META_ANNOTATIONS`. Unless there are strong reasons for it, a cache might be better for avoiding stack overflows rather than expanding the black list.", "labels": ["defect"]}, {"created": "2019-03-06 16:23:42", "commits": {"4213d1a30879356ad6d79285fc2741a958f77936": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-03-08 04:23:05", "filteredCommits": [], "commitsDetails": [{"nameRev": "4213d1a30879356ad6d79285fc2741a958f77936 tags/armeria-0.81.0~5", "commitMessage": "Reduce the search space of AnnotationUtil.getAnnotations() and find() (#1635)\n\nMotivation:\r\n\r\nThere is no cyclic reference detection implemented in `AnnotationUtil`,\r\nwhich means an annotation like the following can trigger a\r\n`StackOverflowError`:\r\n\r\n    @Cyclic\r\n    @Retention(RUNTIME)\r\n    @interface Cyclic {}\r\n\r\nThis was not a problem before because we blacklisted well known JDK\r\nclasses that has cyclic references, but it does not work for other\r\nclasses.\r\n\r\nModifications:\r\n\r\n- Added cyclic dependency detection in the traversal logic.\r\n- Added a blacklist of the annotation types with cyclic dependencies.\r\n\r\nResult:\r\n\r\n- Annotation scanning is faster.\r\n- Annotation scanning does not trigger a `StackOverflowException`.\r\n- Fixes #1632\r\n- Fixes #1633\r\n\r\n/cc @iEAmi @tobias- ", "commitParents": ["de80157a1192eed9106adba3b70dcac06511022e"], "spoonStatsSkippedReason": "", "commitHash": "4213d1a30879356ad6d79285fc2741a958f77936", "authoredDateTime": "2019-03-08 13:23:05", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 80, "deletions": 48, "lines": 128, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotationUtilTest.java"}, {"insertions": 98, "deletions": 26, "lines": 124, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotationUtil.java"}], "commitDateTime": "2019-03-08 13:23:05", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 6, "MOV": 2, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.cglibProxy()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.findAll_cyclic()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.getAnnotations_inherited()"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.declared()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.TestClassWithCyclicAnnotation"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.getAnnotations_all_cyclic()"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.declared_repeatable()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.declared_repeatable_multi()"}, {"UPD": 3, "TOT": 9, "MOV": 3, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.findAll_includingRepeatable_multi()"}, {"UPD": 3, "TOT": 9, "MOV": 3, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.findAll_includingRepeatable()"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.lookupSuperClass()"}, {"UPD": 2, "TOT": 36, "MOV": 19, "INS": 6, "DEL": 9, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.getAnnotations_all()"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.lookupSuperClass_repeatable()"}, {"UPD": 2, "TOT": 6, "MOV": 2, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.lookupMetaAnnotations_declared()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.getAnnotations_declared()"}, {"UPD": 2, "TOT": 6, "MOV": 2, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.findAll_interfaces()"}, {"UPD": 4, "TOT": 12, "MOV": 4, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtilTest.lookupSuperClass_repeatable_multi()"}], "spoonFilePath": "AnnotationUtilTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 20, "MOV": 14, "INS": 1, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.getMetaAnnotations(com.google.common.collect.ImmutableList$Builder,java.lang.annotation.Annotation,java.util.function.Predicate)"}, {"UPD": 2, "TOT": 13, "MOV": 8, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.findMetaAnnotations(com.google.common.collect.ImmutableList$Builder,java.lang.annotation.Annotation,java.lang.Class,java.lang.Class)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.blacklistAnnotation(java.lang.Class)"}, {"UPD": 3, "TOT": 14, "MOV": 7, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.getMetaAnnotations(com.google.common.collect.ImmutableList$Builder,java.lang.annotation.Annotation,java.util.function.Predicate,java.util.Set)"}, {"UPD": 0, "TOT": 8, "MOV": 0, "INS": 8, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.findMetaAnnotations(com.google.common.collect.ImmutableList$Builder,java.lang.annotation.Annotation,java.lang.Class,java.lang.Class,java.util.Set)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.collectSuperClasses(java.lang.Class,com.google.common.collect.ImmutableList$Builder,boolean)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotationUtil.getAnnotations(java.lang.reflect.AnnotatedElement,java.util.EnumSet)"}], "spoonFilePath": "AnnotationUtil.java"}]}], "url": "https://github.com/line/armeria/issues/1632", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "StackOverflowError exception with annotatedService in Kotlin", "statsSkippedReason": "", "user": "iEAmi", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Hi.\r\nI am using armeria with kotlin lang. When I create an annotatedService a StackOverflowError exception occur in server start-up.\r\n```\r\nclass PikaRest {\r\n\r\n    @Get(\"/{id}\")\r\n    fun redirect(ctx: ServiceRequestContext, @Param(\"id\") id: String): HttpResponse {\r\n\r\n    }\r\n\r\n}\r\n```", "labels": ["defect"]}, {"created": "2019-01-25 11:27:44", "commits": {"0a65ae41576ae5ed696dabf574255c0e5626fbe7": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-01-28 03:54:16", "filteredCommits": [], "commitsDetails": [{"nameRev": "0a65ae41576ae5ed696dabf574255c0e5626fbe7 tags/armeria-0.80.0~34", "commitMessage": "Only initialize json marshaller when needed. (#1558)\n\nBytecode generation can take a while during initialization and is pointless if it won't be needed. Client already had this check.\r\n\r\nFixes #1556 ", "commitParents": ["d6878cb9b2707f26a3be1f55478319754e9ff8ec"], "spoonStatsSkippedReason": "", "commitHash": "0a65ae41576ae5ed696dabf574255c0e5626fbe7", "authoredDateTime": "2019-01-28 12:54:16", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java"}, {"insertions": 9, "deletions": 3, "lines": 12, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java"}], "commitDateTime": "2019-01-28 12:54:16", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.ArmeriaServerCall"}], "spoonFilePath": "ArmeriaServerCall.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcService"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcService.jsonMarshaller(com.linecorp.armeria.server.grpc.HandlerRegistry,java.util.Set)"}], "spoonFilePath": "GrpcService.java"}]}], "url": "https://github.com/line/armeria/issues/1556", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "gRPC json marshaller should only be created when needed.", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "There isn't any reason to create a json marshaller if json won't ever be created. Initialization performance can be improved by skipping the creation when not needed.", "labels": ["defect"]}, {"created": "2019-01-25 07:30:29", "user": "trustin", "body": "Originally reported by @southernkasaist\r\n\r\n```java\r\n// Trailer is sent.\r\nctx.addAdditionalResponseTrailer(HttpHeaderNames.WWW_AUTHENTICATE,\r\n                                 \"Basic realm=\\\"Authentication required for this page\\\"\");\r\nreturn HttpResponse.of(HttpStatus.UNAUTHORIZED,\r\n                       MediaType.HTML_UTF_8,\r\n                       HttpData.ofUtf8(\"401 Forbidden\"));\r\n\r\n// Trailer is not set.\r\nreturn HttpResponse.of(HttpStatus.UNAUTHORIZED,\r\n                       MediaType.HTML_UTF_8,\r\n                       HttpData.ofUtf8(\"401 Forbidden\"),\r\n                       HttpHeaders.of(HttpHeaderNames.WWW_AUTHENTICATE,\r\n                                      \"Basic realm=\\\"Authentication required for this page\\\"\"));\r\n```\r\n\r\nIn the second case, after writing `HttpData.ofUtf8(\"401 Forbidden\")`, connection was closed and the trailing headers of `WWW-Authenticate` was subscribed but not written to response.", "closed": "2019-01-31 10:15:36", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1554", "ttf": 6.000277777777778, "commits": {}, "labels": ["defect"], "title": "HttpResponse's trailing headers are not sent."}, {"created": "2019-01-15 05:37:52", "commits": {"6d91b4f4ef5b030ff5412f3c7177471ca5f5b0ba": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-01-21 07:25:34", "filteredCommits": [], "commitsDetails": [{"nameRev": "6d91b4f4ef5b030ff5412f3c7177471ca5f5b0ba tags/armeria-0.79.0~5", "commitMessage": "Fix a bug where CorsService does not work with annotated HTTP services (#1537)\n\nMotivation:\r\nA preflight request cannot be handled even if the method is decorated with `CorsService` when no `@Options` annotation is specified on the service method.\r\n\r\nModifications:\r\n- Add `isPreflight()` method to `PathMappingContext` interface.\r\n- The router skips checking whether the HTTP method of a request is supported or not, if the request is preflight.\r\n\r\nResult:\r\n- Closes #1531", "commitParents": ["c459a36a6942a325a2a015f1affc7dc6198aed8e"], "spoonStatsSkippedReason": "", "commitHash": "6d91b4f4ef5b030ff5412f3c7177471ca5f5b0ba", "authoredDateTime": "2019-01-21 16:25:34", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 14, "deletions": 2, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java"}, {"insertions": 9, "deletions": 0, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/PathMappingContext.java"}, {"insertions": 1, "deletions": 14, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/server/cors/CorsService.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java"}, {"insertions": 8, "deletions": 1, "lines": 9, "filePath": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/internal/spring/ArmeriaConfigurationUtilTest.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/server/PathMappingContextWrapper.java"}, {"insertions": 65, "deletions": 0, "lines": 65, "filePath": "core/src/test/java/com/linecorp/armeria/server/cors/HttpServerCorsTest.java"}, {"insertions": 25, "deletions": 1, "lines": 26, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultPathMappingContext.java"}, {"insertions": 27, "deletions": 3, "lines": 30, "filePath": "core/src/main/java/com/linecorp/armeria/internal/annotation/AnnotatedHttpServiceFactory.java"}, {"insertions": 9, "deletions": 2, "lines": 11, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpHeaderPathMapping.java"}], "commitDateTime": "2019-01-21 16:25:34", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.isCorsPreflightRequest(com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "ArmeriaHttpUtil.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.cors.HttpServerCorsTest.testNoCorsDecoratorForAnnotatedService()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.cors.HttpServerCorsTest.testAnnotatedServiceHandlesOptions()"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.cors.HttpServerCorsTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.cors.HttpServerCorsTest.testWorkingWithAnnotatedService()"}], "spoonFilePath": "HttpServerCorsTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerHandler.handleRequest(io.netty.channel.ChannelHandlerContext,com.linecorp.armeria.server.DecodedHttpRequest)"}], "spoonFilePath": "HttpServerHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.decorator(java.lang.reflect.Method,java.lang.Class)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.getInstance(java.lang.Class)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.decorator(java.lang.reflect.Method,java.lang.Class,java.util.function.Function)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.newDecorator(com.linecorp.armeria.server.annotation.Decorator)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.annotationValues(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.annotationValues0(com.google.common.collect.ImmutableList$Builder,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.Class,java.lang.Class)"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.create(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.util.List,java.util.List,java.util.List)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.toHttpMethods(java.util.Set)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.annotation.AnnotatedHttpServiceFactory.getInstance(java.lang.annotation.Annotation,java.lang.Class)"}], "spoonFilePath": "AnnotatedHttpServiceFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 8, "MOV": 4, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.HttpHeaderPathMapping.apply(com.linecorp.armeria.server.PathMappingContext)"}], "spoonFilePath": "HttpHeaderPathMapping.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.DummyPathMappingContext.isCorsPreflight()"}], "spoonFilePath": "RequestContextExportingAppenderTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.cors.CorsService.isCorsPreflightRequest(com.linecorp.armeria.common.HttpRequest)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.cors.CorsService.serve(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "CorsService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMappingContext.isCorsPreflight()"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMappingContext.of(com.linecorp.armeria.server.VirtualHost,java.lang.String,java.lang.String,java.lang.String,com.linecorp.armeria.common.HttpHeaders,com.linecorp.armeria.common.MediaTypeSet)"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMappingContext"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMappingContext.of(com.linecorp.armeria.server.VirtualHost,java.lang.String,java.lang.String,java.lang.String,com.linecorp.armeria.common.HttpHeaders,com.linecorp.armeria.common.MediaTypeSet,boolean)"}], "spoonFilePath": "DefaultPathMappingContext.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.isCorsPreflight()"}], "spoonFilePath": "PathMappingContext.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.PathMappingContextWrapper.isCorsPreflight()"}], "spoonFilePath": "PathMappingContextWrapper.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.spring.ArmeriaConfigurationUtilTest.SimpleService.root()"}], "spoonFilePath": "ArmeriaConfigurationUtilTest.java"}]}], "url": "https://github.com/line/armeria/issues/1531", "ttf": 6.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "CorsService does not work with annotated HTTP services", "statsSkippedReason": "", "user": "hyangtack", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "For the following annotated service method, a preflight request cannot be handled even if the method is decorated with `CorsService`, because Armeria cannot find the service for a path with `OPTIONS` method.\r\n\r\n```\r\n@Get(\"/hello\")\r\npublic String hello() { ... }\r\n```\r\n\r\n", "labels": ["defect"]}, {"created": "2019-01-04 01:13:59", "commits": {"319d7201c84f074662321ca47f02eb08e03ae9e2": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-01-14 07:40:39", "filteredCommits": [], "commitsDetails": [{"nameRev": "319d7201c84f074662321ca47f02eb08e03ae9e2 tags/armeria-0.79.0~16", "commitMessage": "Less verbose error logging / Fix incorrect behavior when 'verboseExceptions' is set. (#1529)\n\nMotivation:\r\n\r\n1. `Exceptions.isExpected(Throwable)` should always return `false` when\r\n   `verboseExceptions` flag is set. However, it currently always returns\r\n   `true` by coding mistake.\r\n2. I found a few more exception messages which do not really need to be\r\n   logged at high level:\r\n\r\n       SSLException: SSLEngine closed already\r\n       Sent a GOAWAY frame: lastStreamId=..., errorCode=INTERNAL_ERROR(2), debugData=\"Error flushing\"\r\n\r\nBoth errors can happen when a socket connection has been closed by a\r\nremote peer, which should be treated in a similar manner with\r\n'connection reset by peer' errors.\r\n\r\nModifications:\r\n\r\n- Update `Exceptions.isExpected()` to always return `false` when\r\n  `verboseExceptions` flag is set.\r\n- Update `Exceptions.isExpected()` to return `true` for\r\n  `SSLException: SSLEngine closed already`.\r\n- Update `Http2GoAwayHandler` to log at DEBUG level for\r\n  `Sent a GOAWAY frame: ... debugData=\"Error flushing\"`.\r\n\r\nResult:\r\n\r\n- Fixes #1515\r\n- `com.linecorp.armeria.verboseExceptions` flag works as expected.\r\n- Cleaner log file with less WARN-level log messages.", "commitParents": ["1cf563a9b1ca53857e2b1ee71950f995297a52c6"], "spoonStatsSkippedReason": "", "commitHash": "319d7201c84f074662321ca47f02eb08e03ae9e2", "authoredDateTime": "2019-01-14 16:40:38", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 11, "deletions": 1, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java"}, {"insertions": 40, "deletions": 0, "lines": 40, "filePath": "core/src/test/java/com/linecorp/armeria/internal/Http2GoAwayHandlerTest.java"}, {"insertions": 38, "deletions": 0, "lines": 38, "filePath": "core/src/test/java/com/linecorp/armeria/common/util/ExceptionsTest.java"}, {"insertions": 33, "deletions": 7, "lines": 40, "filePath": "core/src/main/java/com/linecorp/armeria/internal/Http2GoAwayHandler.java"}], "commitDateTime": "2019-01-14 16:40:38", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.Http2GoAwayHandler"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.Http2GoAwayHandler.isExpected(long,io.netty.buffer.ByteBuf)"}, {"UPD": 1, "TOT": 19, "MOV": 8, "INS": 7, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.internal.Http2GoAwayHandler.onGoAway(io.netty.channel.Channel,java.lang.String,int,long,io.netty.buffer.ByteBuf)"}], "spoonFilePath": "Http2GoAwayHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.util.ExceptionsTest.testIsExpected()"}], "spoonFilePath": "ExceptionsTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.Http2GoAwayHandlerTest"}], "spoonFilePath": "Http2GoAwayHandlerTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.util.Exceptions.isExpected(java.lang.Throwable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.util.Exceptions"}], "spoonFilePath": "Exceptions.java"}]}], "url": "https://github.com/line/armeria/issues/1515", "ttf": 10.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Do not log 'Sent a GOAWAY frame: debugData=\"Error flushing\"'", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": ".. because it basically means the connection is already over or the connection has been reset.\r\n\r\nRelated: #1401\r\n", "labels": ["defect"]}, {"created": "2018-12-04 20:07:29", "commits": {"931225fc9e621f9159333ca2d93996a8ed19178b": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-12-21 05:09:40", "filteredCommits": [], "commitsDetails": [{"nameRev": "931225fc9e621f9159333ca2d93996a8ed19178b tags/armeria-0.78.0~1", "commitMessage": "Send 'content-length' header for an empty PUT/POST/PATCH request (#1499)\n\nMotivation:\r\n\r\nAlthough not a protocol violation, Armeria does not send a\r\n`content-length` header when a client sends an empty PUT/POST/PATCH\r\nrequest, which may confuse some server implementations or users.\r\n\r\nModifications:\r\n\r\n- Make sure that an empty PUT/POST/PATCH request always has the\r\n  `content-length: 0` header.\r\n\r\nResult:\r\n\r\n- Fixes #1476", "commitParents": ["ca434ef0d44d5bf7852277f1aa45cadc65ba941f"], "spoonStatsSkippedReason": "", "commitHash": "931225fc9e621f9159333ca2d93996a8ed19178b", "authoredDateTime": "2018-12-21 14:09:40", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 21, "deletions": 1, "lines": 22, "filePath": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java"}, {"insertions": 99, "deletions": 0, "lines": 99, "filePath": "core/src/test/java/com/linecorp/armeria/client/Http1EmptyRequestTest.java"}], "commitDateTime": "2018-12-21 14:09:40", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.Http1ObjectEncoder.convertClientHeaders(int,com.linecorp.armeria.common.HttpHeaders,boolean)"}], "spoonFilePath": "Http1ObjectEncoder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.Http1EmptyRequestTest"}], "spoonFilePath": "Http1EmptyRequestTest.java"}]}], "url": "https://github.com/line/armeria/issues/1476", "ttf": 16.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Armeria removes ContentLength header when performing PUT requests without content", "statsSkippedReason": "", "user": "sschepens", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When performing a PUT http request without content and with Content-Length=0 with armeria, the Content-Length header gets removed [here](https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java#L247). This was added in #226 which speaks of GET requests, but this logic is being applied to all request methods, including PUT, POST, etc., which are supposed to have content.", "labels": ["defect"]}, {"created": "2018-12-03 11:56:36", "commits": {"ca9dcead3c3c77c394fbc1c07c041b10bff3371f": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-12-08 03:26:23", "filteredCommits": [], "commitsDetails": [{"nameRev": "ca9dcead3c3c77c394fbc1c07c041b10bff3371f tags/armeria-0.77.0~5", "commitMessage": "Support Spring validation on annotated HTTP services (#1480)\n\nMotivation:\r\nIf a user uses Spring and Armeria together, he or she may want to apply Java Bean Validation framework to Armeria annotated HTTP service.\r\n\r\nModifications:\r\n- Use `org.reflections.ReflectionUtils` when getting methods or constructors from a class.\r\n- Check all super classes when getting annotations from a class.\r\n  - `ReflectionUtils.getAllAnnotations()` returns a `HashSet` of `Annotations` which does not preserve their specified order.\r\n- Add `HelloAnnotatedService` and related classes to `examples/spring-boo-webflux` in order to show how to use an annotated HTTP service with Spring framework.\r\n\r\nResult:\r\n- Closes #1473", "commitParents": ["8f6ec102ace06fd6db6983918da1c5f0461b1587"], "spoonStatsSkippedReason": "", "commitHash": "ca9dcead3c3c77c394fbc1c07c041b10bff3371f", "authoredDateTime": "2018-12-11 15:47:18", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 113, "deletions": 40, "lines": 153, "filePath": "core/src/main/java/com/linecorp/armeria/server/AnnotatedHttpServiceFactory.java"}, {"insertions": 32, "deletions": 0, "lines": 32, "filePath": "examples/spring-boot-webflux/src/main/java/example/springframework/boot/webflux/HelloAnnotatedService.java"}, {"insertions": 20, "deletions": 1, "lines": 21, "filePath": "examples/spring-boot-webflux/src/test/java/example/springframework/boot/webflux/HelloApplicationIntegrationTest.java"}, {"insertions": 95, "deletions": 0, "lines": 95, "filePath": "examples/spring-boot-webflux/src/main/java/example/springframework/boot/webflux/ValidationExceptionHandler.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "examples/spring-boot-webflux/src/main/java/example/springframework/boot/webflux/HelloConfiguration.java"}], "commitDateTime": "2018-12-11 15:47:18", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "example.springframework.boot.webflux.HelloAnnotatedService"}], "spoonFilePath": "HelloAnnotatedService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "example.springframework.boot.webflux.HelloConfiguration.armeriaServerConfigurator(example.springframework.boot.webflux.HelloAnnotatedService)"}], "spoonFilePath": "HelloConfiguration.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "example.springframework.boot.webflux.HelloApplicationIntegrationTest.getHelloWorld()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "example.springframework.boot.webflux.HelloApplicationIntegrationTest.fromArmeriaAnnotatedService()"}], "spoonFilePath": "HelloApplicationIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.findAnnotation(java.lang.reflect.AnnotatedElement,java.lang.Class)"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.consumableMediaTypes(java.lang.reflect.AnnotatedElement)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.findAnnotations(java.lang.reflect.AnnotatedElement,java.lang.Class)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.requestConverters(java.lang.reflect.Method,java.lang.Class)"}, {"UPD": 0, "TOT": 5, "MOV": 1, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.invokeValueMethod(java.lang.annotation.Annotation)"}, {"UPD": 1, "TOT": 7, "MOV": 2, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.getInstance(java.lang.annotation.Annotation,java.lang.Class)"}, {"UPD": 6, "TOT": 16, "MOV": 6, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.requestMappingMethods(java.lang.Object)"}, {"UPD": 1, "TOT": 7, "MOV": 2, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.getInstance(java.lang.Class)"}, {"UPD": 0, "TOT": 6, "MOV": 2, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.collectDecorators(java.util.List,java.lang.annotation.Annotation[])"}, {"UPD": 1, "TOT": 13, "MOV": 6, "INS": 4, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.userDefinedDecorator(java.lang.annotation.Annotation)"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.producibleMediaTypes(java.lang.reflect.AnnotatedElement)"}, {"UPD": 0, "TOT": 5, "MOV": 0, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.annotationValues0(com.google.common.collect.ImmutableList$Builder,java.lang.reflect.AnnotatedElement,java.lang.Class,java.lang.Class,java.lang.Class)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.annotationValues(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.lang.Class,java.lang.Class)"}, {"UPD": 2, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.httpMethodAnnotations(java.lang.reflect.Method)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.getClasses(java.lang.Class,com.google.common.collect.ImmutableList$Builder)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.newDecorator(com.linecorp.armeria.server.annotation.Decorator)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.responseConverters(java.lang.reflect.Method,java.lang.Class)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.exceptionHandlers(java.lang.reflect.Method,java.lang.Class)"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.order(java.lang.reflect.Method)"}, {"UPD": 6, "TOT": 32, "MOV": 23, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.annotationValues(java.lang.reflect.Method,java.lang.Class,java.lang.Class,java.lang.Class)"}, {"UPD": 0, "TOT": 8, "MOV": 4, "INS": 1, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.findPattern(java.lang.reflect.Method,java.util.Set)"}], "spoonFilePath": "AnnotatedHttpServiceFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "example.springframework.boot.webflux.ValidationExceptionHandler"}], "spoonFilePath": "ValidationExceptionHandler.java"}]}], "url": "https://github.com/line/armeria/issues/1473", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "support for spring  validation framework", "statsSkippedReason": "", "user": "edisonrf", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "is there a way to integrate armeria with spring  validation framework?\r\n\r\ncurrently, when I use annotation @org.springframework.validation.annotation.Validated with @RequestObject on http post body, it it not working.\r\n\r\nwhat is the correct way to validate http post data in armeria?\r\n\r\nthanks in advance.", "labels": ["defect"]}, {"created": "2018-11-27 05:45:51", "commits": {"52edf978cbfe8bc4814a4a247c2aa3e602db7a23": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-11-27 08:45:24", "filteredCommits": [], "commitsDetails": [{"nameRev": "52edf978cbfe8bc4814a4a247c2aa3e602db7a23 tags/armeria-0.76.2~2", "commitMessage": "Unescape gRPC message description in client. (#1461)\n\nMotivation:\r\n\r\nWhen a user raises a status exception with non-ASCII description:\r\n\r\n    observer.onError(Status.INTERNAL\r\n                           .withCause(e)\r\n                           .withDescription(\"\uc624\ub958\")\r\n                           .asRuntimeException());\r\n\r\nA user who uses Armeria client should get the status description `\"\uc624\ub958\"`, but gets its \r\npercent-encoded value.\r\n\r\nModifications:\r\n\r\n- Unescape gRPC message description in Armeria gRPC client.\r\n\r\nResult:\r\n\r\nFixes #1460", "commitParents": ["2d9293907eba408d8684e60dba6ca7626c005401"], "spoonStatsSkippedReason": "", "commitHash": "52edf978cbfe8bc4814a4a247c2aa3e602db7a23", "authoredDateTime": "2018-11-27 17:45:23", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 14, "deletions": 0, "lines": 14, "filePath": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "grpc/src/main/java/com/linecorp/armeria/internal/grpc/HttpStreamReader.java"}], "commitDateTime": "2018-11-27 17:45:23", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.grpc.HttpStreamReader.onNext(com.linecorp.armeria.common.HttpObject)"}], "spoonFilePath": "HttpStreamReader.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.nonAsciiStatusMessage()"}], "spoonFilePath": "GrpcClientTest.java"}]}], "url": "https://github.com/line/armeria/issues/1460", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "gRPC status description is not decoded.", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When a user raises a status exception with non-ASCII description:\r\n\r\n```java\r\nobserver.onError(Status.INTERNAL.withCause(e).withDescription(\"\uc624\ub958\").asRuntimeException());\r\n```\r\n\r\nA user who uses Armeria client should get the status description `\"\uc624\ub958\"`, but gets its percent-encoded value.\r\n\r\nOriginally reported by @cj848\r\n\r\n/cc @anuraaga ", "labels": ["defect"]}, {"created": "2018-11-19 01:09:32", "commits": {"7a9925f03c651884e22a4d699091eb4635877b83": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-11-22 13:43:00", "filteredCommits": [], "commitsDetails": [{"nameRev": "7a9925f03c651884e22a4d699091eb4635877b83 tags/armeria-0.76.0~12", "commitMessage": "Fix NPE in AbstractStreamMessageDuplicator (#1449)\n\nMotivation:\r\n`StreamMessageDuplicator` feed null to its `Subscriber`. (related with #1446)\r\n\r\nModifications:\r\n- Assign the `elements` to a local variable in the method `get(index)` in `SignalQueue` so that the reference is not changed during the get operation\r\n- Add some `assert` statements which produce useful information for debugging purpose\r\n\r\nResult:\r\n- Fewer bugs", "commitParents": ["91fe62ea0fa92c5e81ac37cfc33dfe6efa412828"], "spoonStatsSkippedReason": "", "commitHash": "7a9925f03c651884e22a4d699091eb4635877b83", "authoredDateTime": "2018-11-20 18:08:30", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 49, "deletions": 7, "lines": 56, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java"}], "commitDateTime": "2018-11-20 18:08:30", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 10, "MOV": 2, "INS": 5, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.SignalQueue.removeElements()"}, {"UPD": 2, "TOT": 7, "MOV": 1, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.SignalQueue.get(int)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.SignalQueue.toString()"}, {"UPD": 0, "TOT": 6, "MOV": 2, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.DownstreamSubscription.doSignalSingle(com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$SignalQueue)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.SignalQueue.doubleCapacity()"}, {"UPD": 0, "TOT": 8, "MOV": 2, "INS": 4, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.SignalQueue.addAndRemoveIfRequested(java.lang.Object)"}], "spoonFilePath": "AbstractStreamMessageDuplicator.java"}]}], "url": "https://github.com/line/armeria/issues/1446", "ttf": 3.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "StreamMessageDuplicator feeds null to its Subscriber", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```\r\njava.lang.NullPointerException: null \r\n\tat com.linecorp.armeria.common.HttpMessageAggregator.onData(HttpMessageAggregator.java:91) \r\n\tat com.linecorp.armeria.common.HttpResponseAggregator.onData(HttpResponseAggregator.java:96) \r\n\tat com.linecorp.armeria.common.HttpMessageAggregator.onNext(HttpMessageAggregator.java:78) \r\n\tat com.linecorp.armeria.common.HttpMessageAggregator.onNext(HttpMessageAggregator.java:36) \r\n\tat com.linecorp.armeria.common.stream.DeferredStreamMessage$ForwardingSubscriber.onNext(DeferredStreamMessage.java:302) \r\n\tat com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.doSignalSingle(AbstractStreamMessageDuplicator.java:747) \r\n\tat com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.doSignal(AbstractStreamMessageDuplicator.java:657) \r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) \r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404) \tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:326) \r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897) \r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) \r\n\tat java.lang.Thread.run(Thread.java:745)\r\n```", "labels": ["defect"]}, {"created": "2018-11-16 02:51:02", "commits": {"1cf563a9b1ca53857e2b1ee71950f995297a52c6": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2019-01-14 06:53:38", "filteredCommits": [], "commitsDetails": [{"nameRev": "1cf563a9b1ca53857e2b1ee71950f995297a52c6 tags/armeria-0.79.0~17", "commitMessage": "Prevent cyclic call in CircuitBreakerListener (#1528)\n\nMotivation:\r\nThe methods in `CircuitBreakerListener` are invoked with the `CircuitBreaker` instance. In our default implementation of `CircuitBreaker` which is `NonBlockingCircuitBreaker`, `canRequest()` calls `CircuitBreakerListener.onRequestRejected()` internally. So if `canRequest()` is called inside `onRequestRejected()`, it makes cycle, so we should prevent it.\r\n\r\nModifications:\r\n- Make all methods in `CircuitBreakerListener` deprecated, and add methods which take the circuit breaker name as an argument.\r\n- Fix flaky test in CircuitBreakerHttpClientTest\r\n- Add CircuitBreakerListenerAdapter\r\n\r\nResult:\r\n- Less cycle\r\n- Less flakiness\r\n- Fix #1443 ", "commitParents": ["ec693e837bdbeca3f41ec929ffdc0a81c96567d0"], "spoonStatsSkippedReason": "", "commitHash": "1cf563a9b1ca53857e2b1ee71950f995297a52c6", "authoredDateTime": "2019-01-14 15:53:37", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerListenerAdapter.java"}, {"insertions": 8, "deletions": 8, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/MetricCollectingCircuitBreakerListener.java"}, {"insertions": 33, "deletions": 0, "lines": 33, "filePath": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerListenerAdapter.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/ConnectionPoolListenerAdapter.java"}, {"insertions": 5, "deletions": 5, "lines": 10, "filePath": "core/src/test/java/com/linecorp/armeria/client/circuitbreaker/MetricCollectingCircuitBreakerListenerTest.java"}, {"insertions": 33, "deletions": 3, "lines": 36, "filePath": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerListener.java"}, {"insertions": 10, "deletions": 12, "lines": 22, "filePath": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/NonBlockingCircuitBreaker.java"}, {"insertions": 13, "deletions": 13, "lines": 26, "filePath": "core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerHttpClientTest.java"}], "commitDateTime": "2019-01-14 15:53:37", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerListenerAdapter"}], "spoonFilePath": "CircuitBreakerListenerAdapter.java"}, {"spoonMethods": [], "spoonFilePath": "ConnectionPoolListenerAdapter.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 10, "MOV": 5, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.MetricCollectingCircuitBreakerListenerTest.test()"}], "spoonFilePath": "MetricCollectingCircuitBreakerListenerTest.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.MetricCollectingCircuitBreakerListener.onRequestRejected(com.linecorp.armeria.client.circuitbreaker.CircuitBreaker)"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.MetricCollectingCircuitBreakerListener.onStateChanged(com.linecorp.armeria.client.circuitbreaker.CircuitBreaker,com.linecorp.armeria.client.circuitbreaker.CircuitState)"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.MetricCollectingCircuitBreakerListener.metricsOf(com.linecorp.armeria.client.circuitbreaker.CircuitBreaker)"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.MetricCollectingCircuitBreakerListener.onEventCountUpdated(com.linecorp.armeria.client.circuitbreaker.CircuitBreaker,com.linecorp.armeria.client.circuitbreaker.EventCount)"}], "spoonFilePath": "MetricCollectingCircuitBreakerListener.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.onRequestRejected(java.lang.String)"}, {"UPD": 0, "TOT": 3, "MOV": 2, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.onEventCountUpdated(com.linecorp.armeria.client.circuitbreaker.CircuitBreaker,com.linecorp.armeria.client.circuitbreaker.EventCount)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.onStateChanged(java.lang.String,com.linecorp.armeria.client.circuitbreaker.CircuitState)"}, {"UPD": 0, "TOT": 3, "MOV": 2, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.onRequestRejected(com.linecorp.armeria.client.circuitbreaker.CircuitBreaker)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.onEventCountUpdated(java.lang.String,com.linecorp.armeria.client.circuitbreaker.EventCount)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.onStateChanged(com.linecorp.armeria.client.circuitbreaker.CircuitBreaker,com.linecorp.armeria.client.circuitbreaker.CircuitState)"}], "spoonFilePath": "CircuitBreakerListener.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClientTest.strategyWithoutContent()"}, {"UPD": 6, "TOT": 24, "MOV": 12, "INS": 2, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClientTest.circuitBreakerIsOpenOnServerError(com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClientBuilder)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClientTest.strategyWithContent()"}], "spoonFilePath": "CircuitBreakerHttpClientTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 9, "MOV": 5, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.NonBlockingCircuitBreaker.notifyCountUpdated(com.linecorp.armeria.client.circuitbreaker.EventCount)"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.NonBlockingCircuitBreaker.notifyStateChanged(com.linecorp.armeria.client.circuitbreaker.CircuitState)"}, {"UPD": 0, "TOT": 6, "MOV": 0, "INS": 6, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.NonBlockingCircuitBreaker.notifyCountUpdated(com.linecorp.armeria.client.circuitbreaker.CircuitBreakerListener,com.linecorp.armeria.client.circuitbreaker.EventCount)"}], "spoonFilePath": "NonBlockingCircuitBreaker.java"}, {"spoonMethods": [], "spoonFilePath": "ServerListenerAdapter.java"}]}], "url": "https://github.com/line/armeria/issues/1443", "ttf": 59.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Flaky test: CircuitBreakerHttpClientTest.startegyWithContent", "statsSkippedReason": "", "user": "minwoox", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```\r\ncom.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClientTest > strategyWithContent FAILED\r\n    org.awaitility.core.ConditionTimeoutException: Assertion condition defined as a lambda expression in com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClientTest that uses com.linecorp.armeria.client.circuitbreaker.CircuitBreaker expected:<[fals]e> but was:<[tru]e> within 10 seconds.\r\n        at org.awaitility.core.ConditionAwaiter.await(ConditionAwaiter.java:145)\r\n        at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:122)\r\n        at org.awaitility.core.AssertionCondition.await(AssertionCondition.java:32)\r\n        at org.awaitility.core.ConditionFactory.until(ConditionFactory.java:902)\r\n        at org.awaitility.core.ConditionFactory.untilAsserted(ConditionFactory.java:723)\r\n        at com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClientTest.circuitBreakerIsOpenOnServerError(CircuitBreakerHttpClientTest.java:175)\r\n        at com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClientTest.strategyWithContent(CircuitBreakerHttpClientTest.java:135)\r\n        Caused by:\r\n        org.junit.ComparisonFailure: expected:<[fals]e> but was:<[tru]e>\r\n            at jdk.internal.reflect.GeneratedConstructorAccessor16.newInstance(Unknown Source)\r\n            at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n            at com.linecorp.armeria.client.circuitbreaker.CircuitBreakerHttpClientTest.lambda$circuitBreakerIsOpenOnServerError$3(CircuitBreakerHttpClientTest.java:175)\r\n02:26:38.558 [Thread-4] DEBUG c.l.armeria.client.ClientFactory - Closing the default ClientFactory\r\n```", "labels": ["defect"]}, {"created": "2018-11-08 01:12:20", "user": "trustin", "body": "```\r\ncom.linecorp.armeria.it.client.retry.RetryingRpcClientTest > shouldGetExceptionWhenFactoryIsClosed FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n      <java.lang.IllegalStateException: executor not accepting a task>\r\n    to be an instance of:\r\n      <com.linecorp.armeria.client.ClosedClientFactoryException>\r\n    but was:\r\n      <\"java.lang.IllegalStateException: executor not accepting a task\r\n    \tat io.netty.resolver.AddressResolverGroup.getResolver(AddressResolverGroup.java:60)\r\n    \tat io.netty.bootstrap.Bootstrap.doResolveAndConnect0(Bootstrap.java:200)\r\n    \tat io.netty.bootstrap.Bootstrap.doResolveAndConnect(Bootstrap.java:170)\r\n    \tat io.netty.bootstrap.Bootstrap.connect(Bootstrap.java:145)\r\n    \tat com.linecorp.armeria.client.HttpSessionChannelFactory.connect(HttpSessionChannelFactory.java:92)\r\n    \tat com.linecorp.armeria.client.HttpSessionChannelFactory.apply(HttpSessionChannelFactory.java:79)\r\n    \tat com.linecorp.armeria.client.HttpSessionChannelFactory.apply(HttpSessionChannelFactory.java:43)\r\n    \tat com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.acquireHealthyFromPoolOrNew(DefaultKeyedChannelPool.java:126)\r\n    \tat com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.acquire(DefaultKeyedChannelPool.java:103)\r\n    \tat com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.acquire(DefaultKeyedChannelPool.java:94)\r\n    \tat com.linecorp.armeria.client.HttpClientDelegate.executeWithIpAddr(HttpClientDelegate.java:108)\r\n    \tat com.linecorp.armeria.client.HttpClientDelegate.execute(HttpClientDelegate.java:73)\r\n    \tat com.linecorp.armeria.client.HttpClientDelegate.execute(HttpClientDelegate.java:45)\r\n    \tat com.linecorp.armeria.client.thrift.THttpClientDelegate.execute(THttpClientDelegate.java:128)\r\n    \tat com.linecorp.armeria.client.thrift.THttpClientDelegate.execute(THttpClientDelegate.java:69)\r\n    \tat com.linecorp.armeria.internal.ClientUtil.executeWithFallback(ClientUtil.java:42)\r\n    \tat com.linecorp.armeria.client.retry.RetryingRpcClient.doExecute0(RetryingRpcClient.java:109)\r\n    \tat com.linecorp.armeria.client.retry.RetryingRpcClient.lambda$doExecute0$2(RetryingRpcClient.java:122)\r\n    \tat com.linecorp.armeria.common.AbstractRequestContext.lambda$makeContextAware$1(AbstractRequestContext.java:72)\r\n    \tat io.netty.util.concurrent.PromiseTask$RunnableAdapter.call(PromiseTask.java:38)\r\n    \tat io.netty.util.concurrent.ScheduledFutureTask.run(ScheduledFutureTask.java:127)\r\n    \tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n    \tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)\r\n    \tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:335)\r\n    \tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)\r\n    \tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n    \tat java.base/java.lang.Thread.run(Thread.java:844)\r\n    \">\r\n        at com.linecorp.armeria.it.client.retry.RetryingRpcClientTest.shouldGetExceptionWhenFactoryIsClosed(RetryingRpcClientTest.java:174)\r\n```", "closed": "2019-02-14 06:37:31", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1432", "ttf": 98.00027777777778, "commits": {}, "labels": ["defect"], "title": "'IllegalStateException: executor not accepting a task' when sending a request when ClientFactory is closing."}, {"created": "2018-10-29 07:23:34", "commits": {"17a4e59ee221c998d4da394b298256171cf6b188": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-10-31 03:00:17", "filteredCommits": [], "commitsDetails": [{"nameRev": "17a4e59ee221c998d4da394b298256171cf6b188 tags/armeria-0.75.0~13", "commitMessage": "Don't rewrite the user's path if it is valid since it may be escaped. (#1417)\n\nUsers may have a specific reason to use special escaping in a client request (it may be the contract of the server such as [here](https://cloud.google.com/storage/docs/json_api/#encoding)). While the client should make sure request paths are valid, it should not overwrite whatever escaping the user may have used.\r\n\r\nA side effect is double slashes are sent as is instead of rewriting them to single slashes. It's conceivable that a server requires double slashes for whatever reason and the client should support it (grudgingly).\r\n\r\nFixes #1416 ", "commitParents": ["e24940570b7f8d7834d3cb83614d5043e40a8881"], "spoonStatsSkippedReason": "", "commitHash": "17a4e59ee221c998d4da394b298256171cf6b188", "authoredDateTime": "2018-10-31 12:00:16", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 18, "lines": 21, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java"}, {"insertions": 19, "deletions": 19, "lines": 38, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java"}], "commitDateTime": "2018-10-31 12:00:16", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testEscapedPathParam()"}, {"UPD": 1, "TOT": 7, "MOV": 5, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testDoubleSlashSuppression()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testDoubleSlashSuppression(java.lang.String,java.lang.String)"}], "spoonFilePath": "HttpClientIntegrationTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientDelegate.sanitizePath(com.linecorp.armeria.common.HttpRequest)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientDelegate.execute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "HttpClientDelegate.java"}]}], "url": "https://github.com/line/armeria/issues/1416", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Cannot issue HTTP request with escaped slashes in path", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I think it happened somewhere around #1356 but whereas previously `HttpClientDelegate` sent the user's request path correctly, now it decodes the user's path, which is not correct. It means currently it's not possible to issue a request with, for example, escaped path parameters as they get decoded and sent as a raw path instead.\r\n\r\nWhile refactoring `PathAndQuery` I guess we forgot that `HttpClientDelegate` also uses it for sanitizing.\r\n\r\nhttps://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java#L172", "labels": ["defect"]}, {"created": "2018-10-25 08:56:46", "commits": {"1e1520047a4117180d8231972cb980133bf25213": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-02-04 08:56:00", "filteredCommits": [], "commitsDetails": [{"nameRev": "1e1520047a4117180d8231972cb980133bf25213 tags/armeria-0.98.0~31", "commitMessage": "Fix 'cannot start a new stream with a DATA frame' error under l\u2026 (#2429)\n\nMotivation:\r\nWhen a server under load receives `GOAWAY` frame from client,\r\nthe server try to close the given connection with the flowing step:\r\n1) The server receives the `GOAWAY` frame.\r\n2) Close all active streams before closing connection.\r\n3) Flush `outboundBuffer` buffer.\r\n4) The callback of `future.addListener` is called after successfully writing `nioBuffers` to channel.\r\nhttps://github.com/line/armeria/blob/84403ba1424faf85ca883bb6a299705a3198c4bd/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java#L307\r\n5) Request the next item in the `future.addListener`.\r\nhttps://github.com/line/armeria/blob/84403ba1424faf85ca883bb6a299705a3198c4bd/core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java#L333\r\n6) Try to write the next item to the stream, but it was already closed on 2)\r\n\r\nIf try to write `HttpData` to the closed stream, it will throw 'cannot start a new stream with a DATA frame'.\r\n\r\nModification:\r\n* Add `isWritable(id, streamId)` to `HttpObjectEncoder`\r\n* Cancel subscription and propagate error\r\n\r\nResult:\r\nNo more 'cannot start a new stream with a DATA frame' error when receiving GOAWAY with non empty `ChannelOutboundBuffer`.\r\nFixes: #1410", "commitParents": ["ada55675ab222e6d0401bdae7e9e640bfaacb73c"], "spoonStatsSkippedReason": "", "commitHash": "1e1520047a4117180d8231972cb980133bf25213", "authoredDateTime": "2020-02-04 17:55:59", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/internal/HttpObjectEncoder.java"}, {"insertions": 15, "deletions": 1, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpRequestSubscriber.java"}, {"insertions": 10, "deletions": 18, "lines": 28, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/metric/DropwizardMetricsIntegrationTest.java"}, {"insertions": 7, "deletions": 1, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/internal/Http2ObjectEncoder.java"}, {"insertions": 28, "deletions": 6, "lines": 34, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpResponseSubscriber.java"}, {"insertions": 12, "deletions": 3, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/internal/Http1ObjectEncoder.java"}], "commitDateTime": "2020-02-04 17:55:59", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.Http1ObjectEncoder.doWriteReset(int,int,io.netty.handler.codec.http2.Http2Error)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.Http1ObjectEncoder.isWritable(int)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.Http1ObjectEncoder.doWriteData(int,int,com.linecorp.armeria.common.HttpData,boolean)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.Http1ObjectEncoder.isWritable(int,int)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.Http1ObjectEncoder.doWriteHeaders(int,int,com.linecorp.armeria.common.HttpHeaders,boolean)"}], "spoonFilePath": "Http1ObjectEncoder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpRequestSubscriber.write0(com.linecorp.armeria.common.HttpObject,boolean,boolean)"}], "spoonFilePath": "HttpRequestSubscriber.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.HttpObjectEncoder.isWritable(int,int)"}], "spoonFilePath": "HttpObjectEncoder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpResponseSubscriber.fail(java.lang.Throwable)"}, {"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.HttpResponseSubscriber.write(com.linecorp.armeria.common.HttpObject,boolean)"}], "spoonFilePath": "HttpResponseSubscriber.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.Http2ObjectEncoder.doWriteData(int,int,com.linecorp.armeria.common.HttpData,boolean)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.Http2ObjectEncoder.isWritable(int,int)"}], "spoonFilePath": "Http2ObjectEncoder.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.1"}, {"UPD": 2, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.closeClientFactory()"}, {"UPD": 0, "TOT": 3, "MOV": 2, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.metric.DropwizardMetricsIntegrationTest.normal()"}], "spoonFilePath": "DropwizardMetricsIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/1410", "ttf": 466.0002777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "'cannot start a new stream with a DATA frame' error under load", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": ".. probably due to an unexpected disconnection.\r\n\r\n```\r\n17:06:32.883 [armeria-common-worker-epoll-2-11] WARN  c.l.armeria.server.HttpServerHandler - [id: 0x39d2ed0f, L:/127.0.0.1:44525 - R:/127.0.0.1:40232][h2c] Unexpected exception:\r\njava.lang.IllegalStateException: cannot start a new stream 177893 with a DATA frame\r\n        at com.linecorp.armeria.internal.Http2ObjectEncoder.doWriteData(Http2ObjectEncoder.java:92)\r\n        at com.linecorp.armeria.internal.HttpObjectEncoder.writeData(HttpObjectEncoder.java:74)\r\n        at com.linecorp.armeria.server.HttpResponseSubscriber.write0(HttpResponseSubscriber.java:295)\r\n        at com.linecorp.armeria.server.HttpResponseSubscriber.lambda$write$1(HttpResponseSubscriber.java:286)\r\n        at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)\r\n        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:326)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:897)\r\n        at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n        at java.base/java.lang.Thread.run(Thread.java:844)\r\n```", "labels": ["defect"]}, {"created": "2018-10-22 22:13:45", "user": "trustin", "body": "Saw this log:\r\n\r\n```\r\n01:50:19 [WARN] (Http2GoAwayListener.java:65) [id: 0x2f91f9a1, L:... ! R:...]\r\nSent a GOAWAY frame: lastStreamId=1, errorCode=INTERNAL_ERROR(2), debugData=\"\r\ntype: n/a, message: n/a, \r\ncause: io.netty.channel.unix.Errors$NativeIoException: syscall:writev(..) failed: Broken pipe\"\r\n```\r\n\r\nThere's no reason to send a GOAWAY frame to a closed channel.", "closed": "2018-10-23 05:42:04", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1401", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "Do not log a GOAWAY message at WARN if connection is over."}, {"created": "2018-10-05 13:29:46", "commits": {"79a7b967c2fb5d341cd4bd1a5576e9815f4de015": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-10-08 10:56:23", "filteredCommits": [], "commitsDetails": [{"nameRev": "79a7b967c2fb5d341cd4bd1a5576e9815f4de015 tags/armeria-0.73.0~6", "commitMessage": "Allow specifying the `Executor` used for invoking `Server` start/stop callbacks (#1379)\n\nMotivation:\r\n\r\nA user may not prefer using `GlobalEventExecutor` to invoke `Server`\r\nstart/stop callbacks.\r\n\r\n- The user may want the context `ClassLoader` to be preserved.\r\n- The user may want to use a different `Executor` for many other reasons such as\r\n  organizational policy, personal preferences, and more.\r\n\r\nModifications:\r\n\r\n- Add `ServerBuilder.startStopExecutor()`\r\n\r\nResult:\r\n\r\n- Fixes #1378", "commitParents": ["5ff61390a93b6d0e202555224c2558b5f44b20e4"], "spoonStatsSkippedReason": "", "commitHash": "79a7b967c2fb5d341cd4bd1a5576e9815f4de015", "authoredDateTime": "2018-10-08 19:56:22", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 10, "deletions": 10, "lines": 20, "filePath": "core/src/main/java/com/linecorp/armeria/server/Server.java"}, {"insertions": 13, "deletions": 1, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerConfig.java"}, {"insertions": 13, "deletions": 1, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}, {"insertions": 68, "deletions": 1, "lines": 69, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServerTest.java"}], "commitDateTime": "2018-10-08 19:56:22", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.Server.ServerStartStopSupport"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.Server"}], "spoonFilePath": "Server.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerConfig.startStopExecutor()"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerConfig"}], "spoonFilePath": "ServerConfig.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.ThreadRecordingServerListener"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.defaultStartStopExecutor()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.customStartStopExecutor()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.duplicatedPort()"}], "spoonFilePath": "ServerTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.build()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.startStopExecutor(java.util.concurrent.Executor)"}], "spoonFilePath": "ServerBuilder.java"}]}], "url": "https://github.com/line/armeria/issues/1378", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Don't use Netty's GlobalEventExecutor for events because it's nulling out the ClassLoader", "statsSkippedReason": "", "user": "rkapsi", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Starting with Armeria 0.7.0 and the introduction of the StartStopSupport change in particular I've run into the problem that the start event is fired on the GlobalEventExecutor thread which has its \"Context ClassLoader\" (see this change https://github.com/netty/netty/commit/63bae0956aeb42e875ad303a2281989ad92acbf2) nulled out. This causes problems down the road if you're trying to do something on the event thread that requires the ClassLoader.", "labels": ["defect"]}, {"created": "2018-09-19 06:32:45", "commits": {"d4f13e4c4dc90826d001bfb73d6ca05dce19689c": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-09-20 01:02:11", "filteredCommits": [], "commitsDetails": [{"nameRev": "d4f13e4c4dc90826d001bfb73d6ca05dce19689c tags/armeria-0.72.0~4", "commitMessage": "Fix ByteBuf leaks in gRPC client and server (#1371)\n\n- Closes #1370\r\n- Make sure a request is always closed in `ArmeriaClientCall`\r\n- Make sure an `HttpStreamReader` is always cleaned up when a request it\r\n  is reading is closed.\r\n- Fixed an incomplete test case `GrpcClientTest.largeUnary_unsafe()`\r\n- Fixed a leak in `ArmeriaServerCallTest`", "commitParents": ["c8da9794ef1186a22bc533c264a60aa483d1d5ae"], "spoonStatsSkippedReason": "", "commitHash": "d4f13e4c4dc90826d001bfb73d6ca05dce19689c", "authoredDateTime": "2018-09-20 10:02:10", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 0, "lines": 2, "filePath": "build.gradle"}, {"insertions": 23, "deletions": 7, "lines": 30, "filePath": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java"}, {"insertions": 17, "deletions": 7, "lines": 24, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java"}, {"insertions": 12, "deletions": 0, "lines": 12, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/ArmeriaServerCallTest.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java"}], "commitDateTime": "2018-09-20 10:02:10", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.ArmeriaServerCall.setClientStreamClosed()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.ArmeriaServerCall.isCloseCalled()"}, {"UPD": 0, "TOT": 5, "MOV": 3, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.grpc.ArmeriaServerCall.doClose(io.grpc.Status,io.grpc.Metadata)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.ArmeriaServerCall.closeListener(io.grpc.Status)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.grpc.ArmeriaServerCall.endOfStream()"}], "spoonFilePath": "ArmeriaServerCall.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.ArmeriaServerCallTest.tearDown()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.ArmeriaServerCallTest.messageRead_wrappedByteBuf()"}], "spoonFilePath": "ArmeriaServerCallTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.largeUnary_unsafe().2.onCompleted()"}, {"UPD": 0, "TOT": 7, "MOV": 6, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.largeUnary_unsafe().2.onNext(com.linecorp.armeria.grpc.testing.Messages.SimpleResponse)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.largeUnary_unsafe().2.onError(java.lang.Throwable)"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.GrpcClientTest.largeUnary_unsafe()"}], "spoonFilePath": "GrpcClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.grpc.ArmeriaClientCall.close(io.grpc.Status)"}], "spoonFilePath": "ArmeriaClientCall.java"}]}], "url": "https://github.com/line/armeria/issues/1370", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Buffer leak in gRPC ArmeriaMessageDeframer", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```\r\n15:22:58.153 [Time-limited test] ERROR io.netty.util.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.\r\nRecent access records: \r\nCreated at:\r\n\tio.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:221)\r\n\tio.netty.buffer.AbstractByteBufAllocator.compositeDirectBuffer(AbstractByteBufAllocator.java:216)\r\n\tio.netty.buffer.AbstractByteBufAllocator.compositeBuffer(AbstractByteBufAllocator.java:191)\r\n\tcom.linecorp.armeria.internal.grpc.ArmeriaMessageDeframer.<init>(ArmeriaMessageDeframer.java:197)\r\n\tcom.linecorp.armeria.server.grpc.ArmeriaServerCall.<init>(ArmeriaServerCall.java:161)\r\n\tcom.linecorp.armeria.server.grpc.GrpcService.startCall(GrpcService.java:178)\r\n\tcom.linecorp.armeria.server.grpc.GrpcService.doPost(GrpcService.java:158)\r\n\tcom.linecorp.armeria.server.AbstractHttpService.serve(AbstractHttpService.java:76)\r\n\tcom.linecorp.armeria.server.AbstractHttpService.serve(AbstractHttpService.java:46)\r\n\tcom.linecorp.armeria.internal.grpc.TestServiceImpl$EchoRequestHeadersInTrailers.serve(TestServiceImpl.java:517)\r\n\tcom.linecorp.armeria.internal.grpc.TestServiceImpl$EchoRequestHeadersInTrailers.serve(TestServiceImpl.java:505)\r\n\tcom.linecorp.armeria.client.grpc.GrpcClientTest$1.lambda$configure$0(GrpcClientTest.java:134)\r\n\tcom.linecorp.armeria.server.FunctionalDecoratingService.serve(FunctionalDecoratingService.java:46)\r\n\tcom.linecorp.armeria.server.HttpServerHandler.handleRequest(HttpServerHandler.java:363)\r\n\tcom.linecorp.armeria.server.HttpServerHandler.channelRead(HttpServerHandler.java:244)\r\n\tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n\tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n\tio.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n\tcom.linecorp.armeria.server.Http2RequestDecoder.onHeadersRead(Http2RequestDecoder.java:118)\r\n\tcom.linecorp.armeria.server.Http2RequestDecoder.onHeadersRead(Http2RequestDecoder.java:139)\r\n\tio.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onHeadersRead(DefaultHttp2ConnectionDecoder.java:317)\r\n\tio.netty.handler.codec.http2.DefaultHttp2FrameReader$1.processFragment(DefaultHttp2FrameReader.java:457)\r\n\tio.netty.handler.codec.http2.DefaultHttp2FrameReader.readHeadersFrame(DefaultHttp2FrameReader.java:464)\r\n\tio.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:254)\r\n\tio.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\r\n\tio.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:118)\r\n\tio.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:390)\r\n\tio.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450)\r\n\tio.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:489)\r\n\tio.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:428)\r\n\tio.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:265)\r\n\tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n\tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n\tio.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n\tio.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:241)\r\n\tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n\tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n\tio.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n\tio.netty.handler.flush.FlushConsolidationHandler.channelRead(FlushConsolidationHandler.java:147)\r\n\tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n\tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n\tio.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340)\r\n\tio.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1434)\r\n\tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n\tio.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348)\r\n\tio.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:965)\r\n\tio.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:808)\r\n\tio.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:410)\r\n\tio.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:310)\r\n\tio.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884)\r\n\tio.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tjava.base/java.lang.Thread.run(Thread.java:844)\r\n```\r\n\r\n/cc @anuraaga \r\n\r\nDoesn't look like a leak in a test case. I think it's reproducible via one of the tests in `GrpcClientTest`. Will update once I know which.", "labels": ["defect"]}, {"created": "2018-09-15 08:48:48", "commits": {"8f1eeac1964dd6d4060b68ec6736c55b3ed9153b": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-11-23 07:38:12", "filteredCommits": [], "commitsDetails": [{"nameRev": "8f1eeac1964dd6d4060b68ec6736c55b3ed9153b tags/armeria-0.76.0~2", "commitMessage": "Make One-way Thrift call responses sent early (#1455)\n\nRelated: #1368 #1372\r\nMotivation:\r\n\r\nWhen a Thrift client sends a one-way call, it expects that the server\r\nsends its response even before the call is actually handled.\r\n\r\nOur current implementation sends a response after the call is handled,\r\nwhich is not an expected behavior comparing to the official Thrift\r\nimplementation.\r\n\r\nModifications:\r\n\r\n- Completed `RpcResponse` as soon as possible.\r\n- Log at WARN level when a one-way call fails instead of failing\r\n  `RpcResponse` because it's done already.\r\n\r\nResult:\r\n\r\n- Fixes #1368", "commitParents": ["52389874b6ad82d3dc8d9625a96616e4758ae2d0"], "spoonStatsSkippedReason": "", "commitHash": "8f1eeac1964dd6d4060b68ec6736c55b3ed9153b", "authoredDateTime": "2018-11-23 16:38:11", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 79, "deletions": 0, "lines": 79, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java"}, {"insertions": 48, "deletions": 14, "lines": 62, "filePath": "thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftCallService.java"}], "commitDateTime": "2018-11-23 16:38:11", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.AbstractThriftOverHttpTest.testOnewayAsyncInvocation()"}, {"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.AbstractThriftOverHttpTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.AbstractThriftOverHttpTest.verifyOneWayInvocation(java.lang.Class,java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.AbstractThriftOverHttpTest.testOnewaySyncInvocation()"}], "spoonFilePath": "AbstractThriftOverHttpTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftCallService.invokeAsynchronously(java.lang.Object,com.linecorp.armeria.internal.thrift.ThriftFunction,org.apache.thrift.TBase,com.linecorp.armeria.common.DefaultRpcResponse).1"}, {"UPD": 0, "TOT": 6, "MOV": 4, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftCallService.invokeAsynchronously(java.lang.Object,com.linecorp.armeria.internal.thrift.ThriftFunction,org.apache.thrift.TBase,com.linecorp.armeria.common.DefaultRpcResponse)"}, {"UPD": 0, "TOT": 4, "MOV": 3, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftCallService.invokeAsynchronously(java.lang.Object,com.linecorp.armeria.internal.thrift.ThriftFunction,org.apache.thrift.TBase,com.linecorp.armeria.common.DefaultRpcResponse).1.onComplete(java.lang.Object)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftCallService"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftCallService.logOneWayFunctionFailure(com.linecorp.armeria.common.RequestContext,java.lang.Throwable)"}, {"UPD": 0, "TOT": 4, "MOV": 2, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftCallService.invokeSynchronously(com.linecorp.armeria.server.ServiceRequestContext,java.lang.Object,com.linecorp.armeria.internal.thrift.ThriftFunction,org.apache.thrift.TBase,com.linecorp.armeria.common.DefaultRpcResponse)"}], "spoonFilePath": "ThriftCallService.java"}]}], "url": "https://github.com/line/armeria/issues/1368", "ttf": 68.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Thrift oneway sync call need to wait server handle complete???", "statsSkippedReason": "", "user": "yanfeipeng", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```java\r\n    private static void invokeSynchronously(\r\n            ServiceRequestContext ctx, Object impl,\r\n            ThriftFunction func, TBase<?, ?> args, DefaultRpcResponse reply) {\r\n\r\n        final ProcessFunction<Object, TBase<?, ?>> f = func.syncFunc();\r\n        ctx.blockingTaskExecutor().execute(() -> {\r\n            if (reply.isDone()) {\r\n                // Closed already most likely due to timeout.\r\n                return;\r\n            }\r\n\r\n            try {\r\n                final TBase<?, ?> result = f.getResult(impl, args);\r\n                if (func.isOneWay()) {\r\n                    reply.complete(null);\r\n                } else {\r\n                    reply.complete(func.getResult(result));\r\n                }\r\n            } catch (Throwable t) {\r\n                reply.completeExceptionally(t);\r\n            }\r\n        });\r\n    }\r\n````\r\n\r\nsomething wrong with \r\n\r\n```java\r\n                final TBase<?, ?> result = f.getResult(impl, args);\r\n                if (func.isOneWay()) {\r\n                    reply.complete(null);\r\n                } else {\r\n                    reply.complete(func.getResult(result));\r\n                }\r\n```", "labels": ["defect"]}, {"created": "2018-08-29 08:54:46", "commits": {"579bb5cf309dff705b87012d8cadf810f18f400d": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-09-07 05:05:00", "filteredCommits": [], "commitsDetails": [{"nameRev": "579bb5cf309dff705b87012d8cadf810f18f400d tags/armeria-0.71.0~4", "commitMessage": "Fix an assertion error caused by simultaneous `StartStopSupport.start()` or `stop()` (#1358)\n\nMotivation:\r\n\r\nAn `AssertionError` can be triggered when a user calls `StartStopSupport.start()`\r\nor `stop()` because we do not switch the state into `STARTING` or `STOPPING`\r\nin a single transaction.\r\n\r\nModifications:\r\n\r\n- Enter `STARTING` or `STOPPING` before submitting a start/stop task.\r\n- Roll back to `STOPPED` or `STARTED` if the task submission failed.\r\n\r\nResult:\r\n\r\n- Fixes #1351", "commitParents": ["d33deefc3e650da13fac0e5805f9e1e9fc514378"], "spoonStatsSkippedReason": "", "commitHash": "579bb5cf309dff705b87012d8cadf810f18f400d", "authoredDateTime": "2018-09-07 14:04:59", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 24, "deletions": 5, "lines": 29, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/StartStopSupport.java"}], "commitDateTime": "2018-09-07 14:04:59", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 9, "MOV": 2, "INS": 5, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.util.StartStopSupport.start(boolean)"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.util.StartStopSupport.enter(com.linecorp.armeria.common.util.StartStopSupport$State,java.lang.Object)"}, {"UPD": 1, "TOT": 10, "MOV": 2, "INS": 6, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.util.StartStopSupport.stop(boolean)"}], "spoonFilePath": "StartStopSupport.java"}]}], "url": "https://github.com/line/armeria/issues/1351", "ttf": 8.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Assertion error in StartStopSupport", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```\r\njava.lang.AssertionError: null\r\n\tat com.linecorp.armeria.common.util.StartStopSupport.lambda$stop$10(StartStopSupport.java:196)\r\n\tat io.netty.util.concurrent.GlobalEventExecutor$TaskRunner.run(GlobalEventExecutor.java:248)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:844)\r\n```", "labels": ["defect"]}, {"created": "2018-08-13 05:56:29", "user": "anuraaga", "body": "I tried running an armeria server with the `gcr.io/distroless/java` docker image which does not include the `hostname` command. Is it too scary of an output?\r\n\r\n```\r\nWARN ] 2018-08-13 05:51:29.848 [main] com.linecorp.armeria.server.AbstractVirtualHostBuilder - Failed to get the hostname using the 'hostname' command; using InetAddress.getLocalHost() instead\r\njava.io.IOException: Cannot run program \"hostname\": error=2, No such file or directory\r\n\tat java.lang.ProcessBuilder.start(ProcessBuilder.java:1048) ~[?:1.8.0_171]\r\n\tat java.lang.Runtime.exec(Runtime.java:620) ~[?:1.8.0_171]\r\n\tat java.lang.Runtime.exec(Runtime.java:450) ~[?:1.8.0_171]\r\n\tat java.lang.Runtime.exec(Runtime.java:347) ~[?:1.8.0_171]\r\n\tat com.linecorp.armeria.server.AbstractVirtualHostBuilder.<clinit>(AbstractVirtualHostBuilder.java:92) [armeria-0.65.1.jar:?]\r\n\tat com.linecorp.armeria.server.ServerBuilder.<init>(ServerBuilder.java:140) [armeria-0.65.1.jar:?]\r\n\tat org.curioswitch.common.server.framework.ServerModule.armeriaServer(ServerModule.java:334) [curio-server-framework-0.0.70.jar:?]\r\n\tat org.curioswitch.common.server.framework.ServerModule_ArmeriaServerFactory.proxyArmeriaServer(ServerModule_ArmeriaServerFactory.java:344) [curio-server-framework-0.0.70.jar:?]\r\n\tat org.curioswitch.common.server.framework.ServerModule_ArmeriaServerFactory.provideInstance(ServerModule_ArmeriaServerFactory.java:223) [curio-server-framework-0.0.70.jar:?]\r\n\tat org.curioswitch.common.server.framework.ServerModule_ArmeriaServerFactory.get(ServerModule_ArmeriaServerFactory.java:163) [curio-server-framework-0.0.70.jar:?]\r\n\tat org.curioswitch.common.server.framework.ServerModule_ArmeriaServerFactory.get(ServerModule_ArmeriaServerFactory.java:41) [curio-server-framework-0.0.70.jar:?]\r\n\tat dagger.internal.DoubleCheck.get(DoubleCheck.java:47) [dagger-2.16.jar:?]\r\n\tat com.stellarstation.api.fakeserver.DaggerFakeServerMain_FakeServerComponent.server(DaggerFakeServerMain_FakeServerComponent.java:322) [classes/:?]\r\n\tat com.stellarstation.api.fakeserver.FakeServerMain.main(FakeServerMain.java:63) [classes/:?]\r\nCaused by: java.io.IOException: error=2, No such file or directory\r\n\tat java.lang.UNIXProcess.forkAndExec(Native Method) ~[?:1.8.0_171]\r\n\tat java.lang.UNIXProcess.<init>(UNIXProcess.java:247) ~[?:1.8.0_171]\r\n\tat java.lang.ProcessImpl.start(ProcessImpl.java:134) ~[?:1.8.0_171]\r\n\tat java.lang.ProcessBuilder.start(ProcessBuilder.java:1029) ~[?:1.8.0_171]\r\n\t... 13 more\r\n```", "closed": "2018-08-28 05:47:43", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1333", "ttf": 14.000277777777777, "commits": {}, "labels": ["defect"], "title": "Failed to get the hostname using the 'hostname' should not be a warning?"}, {"created": "2018-08-06 15:44:08", "commits": {"bf1ee522002db3284c8057a7e4b4c90e861a21d2": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2018-08-10 09:05:09", "filteredCommits": [], "commitsDetails": [{"nameRev": "bf1ee522002db3284c8057a7e4b4c90e861a21d2 tags/armeria-0.69.0~3", "commitMessage": "More strict path validation (#1329)\n\nMotivation:\r\n\r\n- A user can send a request to an invalid URL using HttpClient:\r\n\r\n  ```java\r\n  HttpClient.newClient(...).get(\"/a\\nb\");\r\n  ```\r\n\r\n- A server accepts a path that contains control characters.\r\n- A server does not filter out the paths with double dots when they are\r\n  encoded, e.g. `/%2e%2e/%2e%2e/secret.txt`\r\n\r\nModifications:\r\n\r\n- Reject control characters\r\n- Decode percent-encoded characters before complex validation\r\n- Encode a raw Unicode string to UTF-8\r\n- Various optimizations\r\n  - Slash deduplication while decoding\r\n  - Percent encoding validation while decoding\r\n  - Convert regular expressions into manual code\r\n- Add/Fix test cases\r\n\r\nResult:\r\n\r\n- Fixes #1323\r\n- A user cannot send an invalid request with Armeria.\r\n- Armeria filters out more potentially malicious requests.", "commitParents": ["60893304ba1090611091f7b146f952d4794a6882"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "bf1ee522002db3284c8057a7e4b4c90e861a21d2", "authoredDateTime": "2018-08-10 18:05:09", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 2, "lines": 5, "filePath": "retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallFactoryTest.java"}, {"insertions": 5, "deletions": 3, "lines": 8, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerPathTest.java"}, {"insertions": 202, "deletions": 0, "lines": 202, "filePath": "core/src/test/java/com/linecorp/armeria/internal/PathAndQueryTest.java"}, {"insertions": 309, "deletions": 57, "lines": 366, "filePath": "core/src/main/java/com/linecorp/armeria/internal/PathAndQuery.java"}], "commitDateTime": "2018-08-10 18:05:09", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1323", "ttf": 3.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Provides more strict path pattern validation to PathAndQuery", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "If a user send a HTTP request to `\\n` contained uri with `HttpClient`, `HttpClient` requests the uri without validation or url-encoding and it breaks HTTP protocol like \r\n```\r\nGET /foo\\n\r\nbar HTTP/1.1\\r\\n\r\n```\r\n\r\nCurrently, we have few path validation to uri path part but it woud be required to provide more strict parsing/validating uri path in for example, `PathAndQuery`.\r\n\r\n```java\r\n    @Test\r\n    public void parse_newline() {\r\n        assertThat(PathAndQuery.parse(\"/a\\nb\")).isNull();\r\n        // should be null but currently, return { path: \"/a\\nb\", query: null }\r\n    }\r\n```\r\ncc: @mauhiz ", "labels": ["defect"]}, {"created": "2018-08-01 07:33:46", "commits": {"2d2445b16664d769834090faf47327d6c8924da8": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-08-01 08:25:47", "filteredCommits": [], "commitsDetails": [{"nameRev": "2d2445b16664d769834090faf47327d6c8924da8 tags/armeria-0.68.2~1", "commitMessage": "Revert HttpServerPipelineConfigurator TLS Hostname verification chang\u2026 (#1318)\n\nIn general, servers don't verify hostname of client, since client doesn't have a hostname.\r\n\r\nFixes #1317", "commitParents": ["efb760b634f7e33ff145a3f8f6d09d375dd6ebde"], "spoonStatsSkippedReason": "", "commitHash": "2d2445b16664d769834090faf47327d6c8924da8", "authoredDateTime": "2018-08-01 17:25:46", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 0, "deletions": 18, "lines": 18, "filePath": "core/src/main/java/com/linecorp/armeria/internal/ChannelUtil.java"}, {"insertions": 1, "deletions": 30, "lines": 31, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java"}, {"insertions": 17, "deletions": 2, "lines": 19, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java"}], "commitDateTime": "2018-08-01 17:25:46", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.HttpsSniHandler"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.configureHttps(io.netty.channel.ChannelPipeline,com.linecorp.armeria.server.ProxiedAddresses)"}], "spoonFilePath": "HttpServerPipelineConfigurator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.ChannelUtil.configureSslHandler(io.netty.handler.ssl.SslHandler)"}], "spoonFilePath": "ChannelUtil.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.configureAsHttps(io.netty.channel.Channel,java.net.InetSocketAddress)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.configureSslHandler(io.netty.handler.ssl.SslHandler)"}], "spoonFilePath": "HttpClientPipelineConfigurator.java"}]}], "url": "https://github.com/line/armeria/issues/1317", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "TLS handshake failure on 0.68.1 due to NPE", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "After trying out 0.68.1, which changed the way TLS handshakes work, I see this on my server. I am using TLS mutual auth in case that is affecting this case.\r\n\r\nJRE: OpenJDK 10.0.2\r\n\r\n```\r\nCaused by: java.lang.NullPointerException\r\n\tat sun.net.util.IPAddressUtil.textToNumericFormatV4(IPAddressUtil.java:49) ~[?:?]\r\n\tat sun.net.util.IPAddressUtil.isIPv4LiteralAddress(IPAddressUtil.java:241) ~[?:?]\r\n\tat sun.security.util.HostnameChecker.isIpAddress(HostnameChecker.java:139) ~[?:?]\r\n\tat sun.security.util.HostnameChecker.match(HostnameChecker.java:97) ~[?:?]\r\n\tat sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:481) ~[?:?]\r\n\tat sun.security.ssl.X509TrustManagerImpl.checkIdentity(X509TrustManagerImpl.java:456) ~[?:?]\r\n\tat sun.security.ssl.X509TrustManagerImpl.checkTrusted(X509TrustManagerImpl.java:296) ~[?:?]\r\n\tat sun.security.ssl.X509TrustManagerImpl.checkClientTrusted(X509TrustManagerImpl.java:139) ~[?:?]\r\n\tat io.netty.handler.ssl.ReferenceCountedOpenSslServerContext$ExtendedTrustManagerVerifyCallback.verify(ReferenceCountedOpenSslServerContext.java:232) ~[netty-handler-4.1.27.Final.jar:4.1.27.Final]\r\n\tat io.netty.handler.ssl.ReferenceCountedOpenSslContext$AbstractCertificateVerifier.verify(ReferenceCountedOpenSslContext.java:621) ~[netty-handler-4.1.27.Final.jar:4.1.27.Final]\r\n\t... 29 more\r\n\"    \r\n```", "labels": ["defect"]}, {"created": "2018-07-31 08:17:11", "commits": {"ee4a867a34e56b8c3c4f7e8a6424524ad8d1bec5": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2018-08-01 01:23:55", "filteredCommits": [], "commitsDetails": [{"nameRev": "ee4a867a34e56b8c3c4f7e8a6424524ad8d1bec5 tags/armeria-0.68.1~1", "commitMessage": "Don't return empty string when prettifying / minifying empty object. (#1314)\n\nMotivation:\r\n\r\nI may be handling query parameters slightly differently than the old version which causes this to trigger, it seems like `jsonMinify` (which we use as is from upstream) and `jsonPrettify` (which we wrote based on it) handle `{}` incorrectly.\r\n\r\nModifications:\r\n\r\n- Don't return empty string when prettifying empty object.\r\n- Work around jsonMinify minifies {} as ''\r\n\r\nResult:\r\n\r\nFixes #1313", "commitParents": ["c53bfccd1bad83ed64598c1ebf928a1477a5e5d5"], "spoonStatsSkippedReason": "", "commitHash": "ee4a867a34e56b8c3c4f7e8a6424524ad8d1bec5", "authoredDateTime": "2018-08-01 10:23:54", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 0, "lines": 4, "filePath": "docs-client/src/lib/json-prettify.ts"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "docs-client/src/containers/MethodPage/index.tsx"}], "commitDateTime": "2018-08-01 10:23:54", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1313", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "The new DocService can't send `{}` as body", "statsSkippedReason": "", "user": "rfkm", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I tried the new DocService and found an issue where it doesn't send a request whose body is `{}`.\r\nSo, I can't test 0-arity RPC methods.\r\n\r\nEDIT: tested with Chrome/Firefox on Mac", "labels": ["defect"]}, {"created": "2018-07-06 04:07:30", "commits": {"35b23e2e8da53adcfcafe474dd339389affa61a9": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-07-12 02:41:21", "filteredCommits": [], "commitsDetails": [{"nameRev": "35b23e2e8da53adcfcafe474dd339389affa61a9 tags/armeria-0.67.2~5", "commitMessage": "Do not add HTTP port if TLS was enabled and no port was specified (#1285)\n\nMotivation:\r\n\r\nWhen a user sets up his or her server like the following:\r\n\r\n    new ServerBuilder()\r\n            .tls(...)\r\n            .service(...)\r\n            .build();\r\n\r\nThe server will listen at two ephemeral ports, one for HTTP and the\r\nother for HTTPS.\r\n\r\nThis is a surprising behavior - a user would expect the server to listen\r\nat an HTTPS port only.\r\n\r\nModifications:\r\n\r\n- Do not add HTTP port but only HTTPS port if TLS was enabled and no\r\n  port was specified.\r\n\r\nResult:\r\n\r\n- Fixes #1279", "commitParents": ["d7a53d877f8be2bd3714ff31a7f4274bc6ee3e7c"], "spoonStatsSkippedReason": "", "commitHash": "35b23e2e8da53adcfcafe474dd339389affa61a9", "authoredDateTime": "2018-07-12 11:41:20", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}], "commitDateTime": "2018-07-12 11:41:20", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.build()"}], "spoonFilePath": "ServerBuilder.java"}]}], "url": "https://github.com/line/armeria/issues/1279", "ttf": 5.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "ServerBuilder.tls should cause server to only start with HTTPS?", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I was confused recently when I used `ServerBuilder.tls(ctx)` and it started with both HTTP and HTTPS. I was expecting behavior similar to when calling `ServerBuilder.https(0)` in that when TLS is requested, it is the only one enabled. Does anyone else feel the same confusion?", "labels": ["breaking change", "defect"]}, {"created": "2018-07-03 04:37:38", "commits": {"63310c1ae486ead0298616adb1c09192710e3239": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "77ae35978bdb23f8b801aee0b733e1352939ca69": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-07-11 02:26:44", "filteredCommits": [], "commitsDetails": [{"nameRev": "77ae35978bdb23f8b801aee0b733e1352939ca69 tags/armeria-0.67.2~9", "commitMessage": "Fix build errors on JDK 10 (#1277)\n\n- Fixed a Javadoc error about a `<table>` tag\r\n- Fixed a compilation error in `ThriftServiceUtils`\r\n- Changed the CI services to use JDK 10\r\n- Update netty-tcnative-boringssl-static to 2.0.12, which may solve #1275\r\n- Relaxed `ArmeriaMeterBindersConfigurationTest.testDefaultMetrics()`\r\n- Use `--release` option instead of animal sniffer\r\n- Make sure a release is performed with JDK 10\r\n", "commitParents": ["0c907be68664f926b8d6d300a0d65b4625b687cf"], "spoonStatsSkippedReason": "", "commitHash": "77ae35978bdb23f8b801aee0b733e1352939ca69", "authoredDateTime": "2018-07-10 14:12:16", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 0, "lines": 2, "filePath": ".gitignore"}, {"insertions": 14, "deletions": 1, "lines": 15, "filePath": "build.gradle"}, {"insertions": 13, "deletions": 10, "lines": 23, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ThriftServiceUtils.java"}, {"insertions": 0, "deletions": 33, "lines": 33, "filePath": ".travis/install-jdk.sh"}, {"insertions": 2, "deletions": 4, "lines": 6, "filePath": ".travis.yml"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": ".appveyor.yml"}, {"insertions": 6, "deletions": 1, "lines": 7, "filePath": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaMeterBindersConfigurationTest.java"}, {"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/client/circuitbreaker/MetricCollectingCircuitBreakerListener.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "dependencies.yml"}], "commitDateTime": "2018-07-10 14:12:16", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaMeterBindersConfigurationTest.testDefaultMetrics()"}], "spoonFilePath": "ArmeriaMeterBindersConfigurationTest.java"}, {"spoonMethods": [], "spoonFilePath": "MetricCollectingCircuitBreakerListener.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 10, "MOV": 4, "INS": 1, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.spring.ThriftServiceUtils.toServiceName(java.util.Collection)"}, {"UPD": 0, "TOT": 6, "MOV": 2, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.spring.ThriftServiceUtils.serviceNames(com.linecorp.armeria.server.Service)"}], "spoonFilePath": "ThriftServiceUtils.java"}]}, {"nameRev": "63310c1ae486ead0298616adb1c09192710e3239 tags/armeria-0.67.2~8", "commitMessage": "Downgrade tcnative to 2.0.10 because latest version doesn't work with client auth. (#1278)\n\nFixes #1275", "commitParents": ["77ae35978bdb23f8b801aee0b733e1352939ca69"], "spoonStatsSkippedReason": "", "commitHash": "63310c1ae486ead0298616adb1c09192710e3239", "authoredDateTime": "2018-07-11 11:26:43", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "dependencies.yml"}, {"insertions": 75, "deletions": 0, "lines": 75, "filePath": "it/server/src/test/java/com/linecorp/armeria/server/http/ClientAuthIntegrationTest.java"}], "commitDateTime": "2018-07-11 11:26:43", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.ClientAuthIntegrationTest"}], "spoonFilePath": "ClientAuthIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/1275", "ttf": 7.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "AbstractMethodError in latest tcnative", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 2, "alsoFixesPhrase": 0}, "body": "I tried upgrading armeria, which gets the latest netty and tcnative, but I get the below exception on all client requests. JDK10 issue? Fixing tcnative to 2.0.10 works fine.\r\n\r\nJava: JDK10\r\narmeria: 0.67.1\r\nnetty: 4.1.25\r\ntcnative: 2.0.11\r\n\r\n```\r\njava.lang.AbstractMethodError: null\r\n\tat io.netty.internal.tcnative.SSL.doHandshake(Native Method) ~[netty-tcnative-boringssl-static-2.0.11.Final.jar:2.0.11.Final]\r\n\tat io.netty.handler.ssl.ReferenceCountedOpenSslEngine.handshake(ReferenceCountedOpenSslEngine.java:1563) ~[netty-handler-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.handler.ssl.ReferenceCountedOpenSslEngine.wrap(ReferenceCountedOpenSslEngine.java:652) ~[netty-handler-4.1.25.Final.jar:4.1.25.Final]\r\n\tat javax.net.ssl.SSLEngine.wrap(SSLEngine.java:511) ~[?:?]\r\n\tat io.netty.handler.ssl.SslHandler.wrap(SslHandler.java:997) ~[netty-handler-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.handler.ssl.SslHandler.wrap(SslHandler.java:803) ~[netty-handler-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.handler.ssl.SslHandler.wrapAndFlush(SslHandler.java:771) ~[netty-handler-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.handler.ssl.SslHandler.handleUnwrapThrowable(SslHandler.java:1207) ~[netty-handler-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.handler.ssl.SslHandler.decodeNonJdkCompatible(SslHandler.java:1191) ~[netty-handler-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.handler.ssl.SslHandler.decode(SslHandler.java:1223) ~[netty-handler-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:489) ~[netty-codec-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:428) ~[netty-codec-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:265) ~[netty-codec-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) [netty-transport-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) [netty-transport-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) [netty-transport-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.handler.flush.FlushConsolidationHandler.channelRead(FlushConsolidationHandler.java:147) [netty-handler-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) [netty-transport-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) [netty-transport-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) [netty-transport-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1434) [netty-transport-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) [netty-transport-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) [netty-transport-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:965) [netty-transport-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:808) [netty-transport-native-epoll-4.1.25.Final-linux-x86_64.jar:4.1.25.Final]\r\n\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:408) [netty-transport-native-epoll-4.1.25.Final-linux-x86_64.jar:4.1.25.Final]\r\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:308) [netty-transport-native-epoll-4.1.25.Final-linux-x86_64.jar:4.1.25.Final]\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884) [netty-common-4.1.25.Final.jar:4.1.25.Final]\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-common-4.1.25.Final.jar:4.1.25.Final]\r\n\tat java.lang.Thread.run(Thread.java:844) [?:?]\r\n```", "labels": ["defect", "dependencies"]}, {"created": "2018-06-14 10:34:57", "commits": {"ff918a90e7ccddf793b3752aa526de2e8f23f08d": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "46c2cfeb3b433efafad135af8fb78a3c7e3fcbed": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-06-15 02:17:49", "filteredCommits": [], "commitsDetails": [{"nameRev": "ff918a90e7ccddf793b3752aa526de2e8f23f08d tags/armeria-0.66.0~1", "commitMessage": "Add a dedicated factory method for active request gauges to MeterIdPrefixFunction (#1260)\n\nMotivation:\r\n\r\n`MeterIdFunction.apply()` is currently used for generating both 1)\r\nactive request gauges and 2) other meters. This can make the active\r\nrequest gauges have unexpected tags such as `httpStatus`, which does not\r\nmake sense for 'active' requests.\r\n\r\nModifications:\r\n\r\n- Add `MeterIdFunction.activeRequestsPrefix()`\r\n- Modify `MeterIdFunction.andThen()` so that the given `BiFunction` is\r\n  applied to both `apply()` and `activeRequestsPrefix()`\r\n- Modify `RequestMetricSupport` to use `activeRequestsPrefix()` for\r\n  active request gauges\r\n\r\nResult:\r\n\r\n- Active request gauges does not happen to have a weird `httpStatus` tag.\r\n- Fixes #1258", "commitParents": ["7ad31e77b5c24757f47d97dd9601a9ab925d8db4"], "spoonStatsSkippedReason": "", "commitHash": "ff918a90e7ccddf793b3752aa526de2e8f23f08d", "authoredDateTime": "2018-06-15 11:17:48", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 17, "deletions": 1, "lines": 18, "filePath": "core/src/test/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunctionTest.java"}, {"insertions": 3, "deletions": 4, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/internal/metric/RequestMetricSupport.java"}, {"insertions": 77, "deletions": 29, "lines": 106, "filePath": "core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java"}], "commitDateTime": "2018-06-15 11:17:48", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.metric.MeterIdPrefixFunctionTest.testAndThen()"}], "spoonFilePath": "MeterIdPrefixFunctionTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 15, "MOV": 13, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.metric.ofDefault(java.lang.String)"}, {"UPD": 0, "TOT": 10, "MOV": 7, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.metric.andThen(java.util.function.BiFunction)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.andThen(java.util.function.BiFunction).2.activeRequestPrefix(io.micrometer.core.instrument.MeterRegistry,com.linecorp.armeria.common.logging.RequestLog)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.withTags(java.lang.Iterable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.activeRequestPrefix(io.micrometer.core.instrument.MeterRegistry,com.linecorp.armeria.common.logging.RequestLog)"}], "spoonFilePath": "MeterIdPrefixFunction.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 10, "MOV": 6, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupport.onRequest(com.linecorp.armeria.common.logging.RequestLog,com.linecorp.armeria.common.metric.MeterIdPrefixFunction)"}], "spoonFilePath": "RequestMetricSupport.java"}]}, {"nameRev": "46c2cfeb3b433efafad135af8fb78a3c7e3fcbed tags/armeria-0.80.0~33", "commitMessage": "Fix missing `httpStatus` tag in the default `MeterIdPrefixFunction` (#1559)\n\nRelated commits:\r\n- ff918a90e7ccddf793b3752aa526de2e8f23f08d #1258 #1260\r\n- b268e04650bdf677a3f7bd6712c5af678c68b765 #1421 #1423\r\n\r\nMotivation:\r\n\r\n1. The default `MeterIdPrefixFunction` sometimes does not add the\r\n   `httpStatus` tag. We should add it with an unknown status instead.\r\n2. `requestFirstBytesTransferred` and `responseFirstBytesTransferred` in\r\n   `RequestLog` should be independent from other availability types,\r\n   because a request can have headers even if the request or response\r\n   was not transferred at all.\r\n\r\nModifications:\r\n\r\n- Fixed the default `MeterIdPrefixFunction` implementation so that `0`\r\n  is used for an unknown status.\r\n- Changed the read/write dependency of `requestFirstBytesTransferred`\r\n  and `responseFirstBytesTransferred` so that a request can be complete\r\n  even if no bytes were transferred.\r\n- Added a variant of `RequestLog.requestFirstBytesTransferred()` and\r\n  `responseFirstByteTransferred()` so that a user can specify a timestamp.\r\n\r\nResult:\r\n\r\n- Prometheus does not complain about inconsistent tags anymore.\r\n- `RequestLog` reaches the `COMPLETE` availability even if no bytes were\r\n  transferred, i.e. Fixed a bug where some `RequestLog` did not reach\r\n  the `COMPLETE` availability forever.", "commitParents": ["0a65ae41576ae5ed696dabf574255c0e5626fbe7"], "spoonStatsSkippedReason": "", "commitHash": "46c2cfeb3b433efafad135af8fb78a3c7e3fcbed", "authoredDateTime": "2019-01-28 19:25:33", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 89, "deletions": 0, "lines": 89, "filePath": "core/src/test/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunctionTest.java"}, {"insertions": 26, "deletions": 10, "lines": 36, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java"}, {"insertions": 28, "deletions": 12, "lines": 40, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java"}, {"insertions": 10, "deletions": 0, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java"}, {"insertions": 11, "deletions": 11, "lines": 22, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogAvailability.java"}, {"insertions": 7, "deletions": 1, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/common/metric/MeterIdPrefixFunction.java"}, {"insertions": 13, "deletions": 0, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/NoopRequestLogBuilder.java"}, {"insertions": 0, "deletions": 1, "lines": 1, "filePath": "core/src/test/java/com/linecorp/armeria/internal/metric/RequestMetricSupportTest.java"}], "commitDateTime": "2019-01-28 19:25:33", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 9, "TOT": 27, "MOV": 7, "INS": 3, "DEL": 8, "spoonMethodName": "com.linecorp.armeria.common.logging.RequestLogAvailability"}], "spoonFilePath": "RequestLogAvailability.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.MeterIdPrefixFunctionTest.defaultActiveRequestPrefix()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.MeterIdPrefixFunctionTest.newContext(com.linecorp.armeria.common.HttpMethod,java.lang.String,java.lang.Object)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.MeterIdPrefixFunctionTest.defaultApply()"}], "spoonFilePath": "MeterIdPrefixFunctionTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 9, "MOV": 4, "INS": 4, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.metric.ofDefault(java.lang.String).1.apply(io.micrometer.core.instrument.MeterRegistry,com.linecorp.armeria.common.logging.RequestLog)"}], "spoonFilePath": "MeterIdPrefixFunction.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 6, "MOV": 3, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.requestFirstBytesTransferred()"}, {"UPD": 3, "TOT": 6, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.requestFirstBytesTransferred(long)"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.responseFirstBytesTransferred()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.requestFirstBytesTransferred0(long)"}, {"UPD": 1, "TOT": 8, "MOV": 2, "INS": 4, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.responseFirstBytesTransferred(long)"}], "spoonFilePath": "DefaultRequestLog.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.NoopRequestLogBuilder.startRequest(io.netty.channel.Channel,com.linecorp.armeria.common.SessionProtocol)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.NoopRequestLogBuilder.requestFirstBytesTransferred(long)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.NoopRequestLogBuilder.startRequest(io.netty.channel.Channel,com.linecorp.armeria.common.SessionProtocol,long,long)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.NoopRequestLogBuilder.responseFirstBytesTransferred(long)"}], "spoonFilePath": "NoopRequestLogBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.metric.RequestMetricSupportTest.httpSuccess()"}], "spoonFilePath": "RequestMetricSupportTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.requestFirstBytesTransferred(long)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.responseFirstBytesTransferred(long)"}], "spoonFilePath": "RequestLogBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 0, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.makeRequest(java.lang.String,java.lang.String,java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.MeterIdPrefixFunctionImpl"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.MeterIdPrefixFunctionImpl.apply(io.micrometer.core.instrument.MeterRegistry,com.linecorp.armeria.common.logging.RequestLog)"}, {"UPD": 2, "TOT": 8, "MOV": 3, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.meterIdPrefix(io.micrometer.core.instrument.MeterRegistry,com.linecorp.armeria.common.logging.RequestLog,java.lang.String,java.lang.String)"}], "spoonFilePath": "PrometheusMetricsIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/1258", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Default MeterIdFunction implementation sometimes adds 'httpStatus' tag to 'activeRequests'", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 2, "alsoFixesPhrase": 0}, "body": "Stack trace:\r\n\r\n```\r\nonRequestLog() failed with an exception:\r\njava.lang.IllegalArgumentException: Prometheus requires that all meters with the same name have the same set of tag keys. There is already an existing meter containing tag keys [hostnamePattern, method, pathMapping, service]. The meter you are attempting to register has keys [hostnamePattern, httpStatus, method, pathMapping, service].\r\n\tat io.micrometer.prometheus.PrometheusMeterRegistry.lambda$collectorByName$9(PrometheusMeterRegistry.java:361)\r\n\tat java.util.concurrent.ConcurrentHashMap.compute(ConcurrentHashMap.java:1877)\r\n\tat io.micrometer.prometheus.PrometheusMeterRegistry.collectorByName(PrometheusMeterRegistry.java:348)\r\n\tat io.micrometer.prometheus.PrometheusMeterRegistry.newGauge(PrometheusMeterRegistry.java:225)\r\n\tat io.micrometer.core.instrument.MeterRegistry.lambda$gauge$1(MeterRegistry.java:244)\r\n\tat io.micrometer.core.instrument.MeterRegistry.lambda$registerMeterIfNecessary$5(MeterRegistry.java:514)\r\n\tat io.micrometer.core.instrument.MeterRegistry.getOrCreateMeter(MeterRegistry.java:563)\r\n\tat io.micrometer.core.instrument.MeterRegistry.registerMeterIfNecessary(MeterRegistry.java:525)\r\n\tat io.micrometer.core.instrument.MeterRegistry.registerMeterIfNecessary(MeterRegistry.java:514)\r\n\tat io.micrometer.core.instrument.MeterRegistry.gauge(MeterRegistry.java:244)\r\n\tat io.micrometer.core.instrument.Gauge$Builder.register(Gauge.java:128)\r\n\tat io.micrometer.core.instrument.MeterRegistry.gauge(MeterRegistry.java:426)\r\n\tat com.linecorp.armeria.internal.metric.RequestMetricSupport.lambda$onRequest$1(RequestMetricSupport.java:68)\r\n\tat com.linecorp.armeria.internal.metric.MicrometerUtil.lambda$register$2(MicrometerUtil.java:95)\r\n\tat java.util.concurrent.ConcurrentHashMap.computeIfAbsent(ConcurrentHashMap.java:1688)\r\n\tat com.linecorp.armeria.internal.metric.MicrometerUtil.register(MicrometerUtil.java:92)\r\n\tat com.linecorp.armeria.internal.metric.MicrometerUtil.register(MicrometerUtil.java:77)\r\n\tat com.linecorp.armeria.internal.metric.RequestMetricSupport.onRequest(RequestMetricSupport.java:65)\r\n\tat com.linecorp.armeria.internal.metric.RequestMetricSupport.lambda$setup$0(RequestMetricSupport.java:53)\r\n\tat com.linecorp.armeria.common.logging.RequestLogListenerInvoker.invokeOnRequestLog(RequestLogListenerInvoker.java:39)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.notifyListeners(DefaultRequestLog.java:766)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.updateAvailability(DefaultRequestLog.java:723)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.endRequest0(DefaultRequestLog.java:522)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.endRequest0(DefaultRequestLog.java:505)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.endRequest(DefaultRequestLog.java:496)\r\n\tat com.linecorp.armeria.server.HttpServerHandler.lambda$handleRequest$3(HttpServerHandler.java:404)\r\n\tat com.linecorp.armeria.common.util.Functions.lambda$voidFunction$1(Functions.java:192)\r\n\tat java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n\tat java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797)\r\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474)\r\n\tat java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1962)\r\n\tat com.linecorp.armeria.common.stream.AbstractStreamMessage$CloseEvent.notifySubscriber(AbstractStreamMessage.java:286)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriberOfCloseEvent(DefaultStreamMessage.java:193)\r\n\tat com.linecorp.armeria.common.stream.AbstractStreamMessage.cleanupQueue(AbstractStreamMessage.java:161)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.cleanup(DefaultStreamMessage.java:390)\r\n\tat io.netty.util.concurrent.ImmediateEventExecutor.execute(ImmediateEventExecutor.java:111)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.cancelOrAbort(DefaultStreamMessage.java:222)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.abort(DefaultStreamMessage.java:144)\r\n\tat com.linecorp.armeria.server.HttpServerHandler.lambda$handleRequest$4(HttpServerHandler.java:412)\r\n\tat com.linecorp.armeria.common.util.Functions.lambda$voidFunction$1(Functions.java:192)\r\n\tat java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n\tat java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797)\r\n\tat java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:442)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)\r\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:313)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:884)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nWe'd beter define two methods for `MeterIdPrefixFunction` - one for `activeRequests` and the other for other meters.", "labels": ["defect"]}, {"created": "2018-06-12 14:48:10", "commits": {"667ba29e50b57afe6a4c3830a5927c78e4cd2002": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-07-26 07:06:50", "filteredCommits": [], "commitsDetails": [{"nameRev": "667ba29e50b57afe6a4c3830a5927c78e4cd2002 tags/armeria-0.68.0~9", "commitMessage": "Improve GRPC exception status code to HTTP status code conversion (#1305)\n\nFixes #1252", "commitParents": ["7d38c986c759b7e8b524db077a223ba4c5f2c008"], "spoonStatsSkippedReason": "", "commitHash": "667ba29e50b57afe6a4c3830a5927c78e4cd2002", "authoredDateTime": "2018-07-26 16:06:49", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 8, "deletions": 0, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpStatus.java"}, {"insertions": 3, "deletions": 0, "lines": 3, "filePath": "dependencies.yml"}, {"insertions": 13, "deletions": 2, "lines": 15, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java"}, {"insertions": 51, "deletions": 0, "lines": 51, "filePath": "grpc/src/test/java/com/linecorp/armeria/internal/grpc/GrpcStatusTest.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "grpc/build.gradle"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java"}, {"insertions": 139, "deletions": 0, "lines": 139, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/UnframedGrpcServiceTest.java"}, {"insertions": 41, "deletions": 0, "lines": 41, "filePath": "grpc/src/main/java/com/linecorp/armeria/internal/grpc/GrpcStatus.java"}], "commitDateTime": "2018-07-26 16:06:49", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.grpc.GrpcStatusTest"}], "spoonFilePath": "GrpcStatusTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.grpc.GrpcMetricsIntegrationTest.unframed()"}], "spoonFilePath": "GrpcMetricsIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.HttpStatus"}], "spoonFilePath": "HttpStatus.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.grpc.GrpcStatus.grpcCodeToHttpStatus(io.grpc.Status$Code)"}], "spoonFilePath": "GrpcStatus.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 11, "MOV": 1, "INS": 7, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.grpc.UnframedGrpcService.deframeAndRespond(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.AggregatedHttpMessage,java.util.concurrent.CompletableFuture)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.UnframedGrpcService"}], "spoonFilePath": "UnframedGrpcService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.UnframedGrpcServiceTest"}], "spoonFilePath": "UnframedGrpcServiceTest.java"}]}], "url": "https://github.com/line/armeria/issues/1252", "ttf": 43.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "GRPC exception status code to HTTP status code could be improved", "statsSkippedReason": "", "user": "rui-gao", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Currently, Armeria-GRPC is mapping GRPC exception response status code very generally, for example:   For status ALREADY_EXISTS(GRPC status code: 6) to Http status 500.\r\n\r\nWhile the upstream [GRPC gateway](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/third_party/googleapis/google/rpc/code.proto) is mapping  ALREADY_EXISTS(GRPC status code: 6) to [Http status 409(Conflict)](https://github.com/grpc-ecosystem/grpc-gateway/blob/master/third_party/googleapis/google/rpc/code.proto#L96), which is makes more sense for making status code meaning more specific and clear.\r\n\r\nDo you think it will be good to improve GPRC status code and HTTP status mapping in Armeria-GRPC? \r\n\r\n@trustin @anuraaga \r\n", "labels": ["defect"]}, {"created": "2018-05-22 07:45:18", "commits": {"f662e34fe9bb2d209794e164e717225f79d2efb8": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-05-23 11:26:16", "filteredCommits": [], "commitsDetails": [{"nameRev": "f662e34fe9bb2d209794e164e717225f79d2efb8 tags/armeria-0.65.0~10", "commitMessage": "Have DynamicEndpointGroup ignore updates that do not change the list of endpoints and order them for more stable comparison (#1220)\n\nCurrently, `DynamicEndpointGroup` listeners are notified anytime an endpoint refresh happens, even if the endpoints didn't change. This doesn't seem useful so now `DynamicEndpointGroup` compares the old and new endpoints and only notifies when they change.\r\n\r\nI guess insertion sort can be used for `addEndpoint` to avoid a copy but the complexity didn't seem worth it for a method that shouldn't be called with that much concurrency.\r\n\r\nFixes #1216 ", "commitParents": ["5e6a9ec12728e418341a37fc3d2a7469dd0340af"], "spoonStatsSkippedReason": "", "commitHash": "f662e34fe9bb2d209794e164e717225f79d2efb8", "authoredDateTime": "2018-05-23 20:26:15", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/healthcheck/HttpHealthCheckedEndpointGroupTest.java"}, {"insertions": 13, "deletions": 7, "lines": 20, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroupTest.java"}, {"insertions": 12, "deletions": 6, "lines": 18, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java"}], "commitDateTime": "2018-05-23 20:26:15", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest.endpoints()"}], "spoonFilePath": "HttpHealthCheckedEndpointGroupTest.java"}, {"spoonMethods": [{"UPD": 7, "TOT": 10, "MOV": 2, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.DynamicEndpointGroup.addEndpoint(com.linecorp.armeria.client.Endpoint)"}, {"UPD": 0, "TOT": 6, "MOV": 1, "INS": 4, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.DynamicEndpointGroup.setEndpoints(java.lang.Iterable)"}], "spoonFilePath": "DynamicEndpointGroup.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 15, "MOV": 6, "INS": 5, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.DynamicEndpointGroupTest.updateEndpoints()"}], "spoonFilePath": "DynamicEndpointGroupTest.java"}]}], "url": "https://github.com/line/armeria/issues/1216", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "DynamicEndpointGroup should only notify when endpoints changed", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Currently, `DynamicEndpointGroup` notifies listeners anytime when `setEndpoints` is called. This happens even if the endpoints didn't change, which doesn't seem very useful. I think a couple options would be\r\n\r\n1) (preferred) `DynamicEndpointGroup` doesn't call `notifyListeners` when endpoints didn't change (by using `Object.equals` to compare the old and new ones)\r\n2) `DynamicEndpointGroup` notifies listeners of both new and old endpoints so they can make the decision of whether to execute business logic even if nothing changed.\r\n\r\nWhat do you think?", "labels": ["defect"]}, {"created": "2018-05-18 10:43:59", "user": "LiYing2010", "body": "The following code checks if all the path mapping parameters are consumed by function parameters:\r\nhttps://github.com/line/armeria/blob/0296b6cb71945cf0871ac957e896fe95b8c64151/core/src/main/java/com/linecorp/armeria/server/AnnotatedHttpServices.java#L574-L580\r\n\r\nif not, it will output a warning log.\r\n\r\nBut we added a new feature: [`Injecting value of parameters and HTTP headers into a Java object`](https://line.github.io/armeria/server-annotated-service.html#injecting-value-of-parameters-and-http-headers-into-a-java-object), which can inject parameters into a Java Bean, and function can consume this Java Bean.\r\n\r\nSo, in this case, the check logic mentioned above will raise a false warning.\r\nActually, these false warnings happened in my project.\r\n\r\nSolution:\r\nthis check logic should check more deeply, not only the function parameters, but also the the Java Beans which used in function parameters.\r\n", "closed": "2020-04-07 14:24:07", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1213", "ttf": 690.0002777777778, "commits": {}, "labels": ["defect"], "title": "False warning about path param auto-injection"}, {"created": "2018-05-17 16:13:12", "commits": {"e3ebe458c69bbb119d137101ea3681b1c83927e5": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-12-11 03:14:14", "filteredCommits": [], "commitsDetails": [{"nameRev": "e3ebe458c69bbb119d137101ea3681b1c83927e5 tags/armeria-0.77.0~10", "commitMessage": "Respect MAX_CONCURRENT_STREAMS on the client side (#1481)\n\nRelated: #1206\r\nMotivation:\r\n\r\nArmeria HTTP client does not respect `MAX_CONCURRENT_STREAMS` HTTP/2\r\nsetting. As a result, it is possible for a user to create more streams\r\nthan allowed accidentally, which results it protocol violation.\r\n\r\nModifications:\r\n\r\n- Do not reuse an existing HTTP/2 connection but create a new one when\r\n  the connection already has many concurrent streams.\r\n- Clean up acquisition logic in `HttpChannelPool`.\r\n\r\nResult:\r\n\r\n- Fixes #1206\r\n- No more protocol violation", "commitParents": ["ff6ca7225813be9b1a02a7b2e780c07710f805fa"], "spoonStatsSkippedReason": "", "commitHash": "e3ebe458c69bbb119d137101ea3681b1c83927e5", "authoredDateTime": "2018-12-11 12:14:13", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientIdleTimeoutHandlerTest.java"}, {"insertions": 4, "deletions": 0, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java"}, {"insertions": 34, "deletions": 14, "lines": 48, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSessionHandler.java"}, {"insertions": 169, "deletions": 0, "lines": 169, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientMaxConcurrentStreamTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java"}, {"insertions": 50, "deletions": 45, "lines": 95, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpChannelPool.java"}, {"insertions": 11, "deletions": 3, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpSession.java"}], "commitDateTime": "2018-12-11 12:14:13", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientMaxConcurrentStreamTest"}], "spoonFilePath": "HttpClientMaxConcurrentStreamTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientDelegate.acquireConnectionAndExecute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.client.Endpoint,java.lang.String,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.client.DecodedHttpResponse)"}], "spoonFilePath": "HttpClientDelegate.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 8, "MOV": 4, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler.channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler.maxUnfinishedResponses()"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpSessionHandler.hasUnfinishedResponses()"}], "spoonFilePath": "HttpSessionHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseDecoder.unfinishedResponses()"}], "spoonFilePath": "HttpResponseDecoder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.maxUnfinishedResponses()"}, {"UPD": 2, "TOT": 3, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.hasUnfinishedResponses()"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.1.hasUnfinishedResponses()"}], "spoonFilePath": "HttpSession.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 4, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIdleTimeoutHandlerTest.MockHttpSessionHandler.hasUnfinishedResponses()"}], "spoonFilePath": "HttpClientIdleTimeoutHandlerTest.java"}, {"spoonMethods": [{"UPD": 5, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpChannelPool.connect(com.linecorp.armeria.common.SessionProtocol,com.linecorp.armeria.client.HttpChannelPool$PoolKey,java.util.concurrent.CompletableFuture)"}, {"UPD": 2, "TOT": 8, "MOV": 3, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpChannelPool.usePendingAcquisition(com.linecorp.armeria.common.SessionProtocol,com.linecorp.armeria.client.HttpChannelPool$PoolKey,java.util.concurrent.CompletableFuture)"}, {"UPD": 2, "TOT": 11, "MOV": 6, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpChannelPool.acquireNowExact(com.linecorp.armeria.client.HttpChannelPool$PoolKey,com.linecorp.armeria.common.SessionProtocol)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpChannelPool.Http1PooledChannel.release()"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpChannelPool.notifyConnect(com.linecorp.armeria.common.SessionProtocol,com.linecorp.armeria.client.HttpChannelPool$PoolKey,io.netty.util.concurrent.Future,java.util.concurrent.CompletableFuture)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpChannelPool.acquire(com.linecorp.armeria.common.SessionProtocol,com.linecorp.armeria.client.HttpChannelPool$PoolKey)"}, {"UPD": 6, "TOT": 17, "MOV": 9, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.HttpChannelPool.acquire(com.linecorp.armeria.common.SessionProtocol,com.linecorp.armeria.client.HttpChannelPool$PoolKey,java.util.concurrent.CompletableFuture)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpChannelPool.closeChannel(io.netty.channel.Channel)"}], "spoonFilePath": "HttpChannelPool.java"}]}], "url": "https://github.com/line/armeria/issues/1206", "ttf": 207.00027777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "ArmeriaRetrofitBuilder & HTTP2 - Max Number of Streams", "statsSkippedReason": "", "user": "DrMattFaulkner", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Hi,\r\n\r\nI'm using the ArmeriaRetrofitBuilder to wrap an HTTP2 REST API call asynchronous:\r\n\r\n```\r\nRetrofit retrofit = new ArmeriaRetrofitBuilder()\r\n        .baseUrl(url)\r\n        .addConverterFactory(JacksonConverterFactory.create(mapper))\r\n        .addCallAdapterFactory(Java8CallAdapterFactory.create())\r\n        .build();\r\n\r\nSomeService service = retrofit.create(SomeService.class);\r\nCall<String> sayHello = server.sayHello();\r\nsayHello.enqueue(this);\r\n\r\n```\r\n\r\nBut I am getting this error:\r\n\r\n`io.netty.handler.codec.http2.Http2Exception$StreamException: Maximum active streams violated for this endpoint.`\r\n\r\n\r\nAm I using something wrong?\r\nIf not, how do I set the max number of active streams?\r\n\r\nThanks", "labels": ["defect"]}, {"created": "2018-05-16 09:42:15", "commits": {"eb3b2c2d72b557a6b9ba0c811de3e2c00643857a": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-05-18 09:23:24", "filteredCommits": [], "commitsDetails": [{"nameRev": "eb3b2c2d72b557a6b9ba0c811de3e2c00643857a tags/armeria-0.64.0~6", "commitMessage": "More robust fallback to HTTP/2 (#1210)\n\nRelated: #1201\r\n\r\nMotivation:\r\n\r\nArmeria client assumes a server supports HTTP/2 and sends the HTTP/2\r\nconnection preface as soon as a connection is established. The servers\r\nwhich does not understand HTTP/2 is supposed to send a response that\r\nstarts with an HTTP version string (e.g. `HTTP/1.1 400 Bad Request`),\r\nbut some implementations seem to send something different.\r\n\r\nModifications:\r\n\r\n- Change the automatic downgrade logic so that it falls back to HTTP/1\r\n  when the server sent anything that's not HTTP/2\r\n  - Old behavior was: fall back *only* on an HTTP/1 response\r\n\r\nResult:\r\n\r\n- Fixes #1201", "commitParents": ["d788c55c546fb14e0e33ec5fb92a03eb638092aa"], "spoonStatsSkippedReason": "", "commitHash": "eb3b2c2d72b557a6b9ba0c811de3e2c00643857a", "authoredDateTime": "2018-05-18 18:23:23", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 12, "deletions": 6, "lines": 18, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java"}], "commitDateTime": "2018-05-18 18:23:23", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.DowngradeHandler.isSettingsFrame(io.netty.buffer.ByteBuf)"}, {"UPD": 1, "TOT": 7, "MOV": 2, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.DowngradeHandler.decode(io.netty.channel.ChannelHandlerContext,io.netty.buffer.ByteBuf,java.util.List)"}], "spoonFilePath": "HttpClientPipelineConfigurator.java"}]}], "url": "https://github.com/line/armeria/issues/1201", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "HttpClient using h2c for http URL for some reason", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Using armeria to fetch access tokens in Google Cloud, I ran into weird behavior that it tries to use `h2c` for an `http` URL, and fails when the response is `h1c`.\r\n\r\n```\r\nRequest: {startTime=2018-05-16T09:10:26.732Z(1526461826732), length=0B, duration=775\u00b5s(775385ns), scheme=none+h2c, host=169.254.169.254, headers=[:method=GET, metadata-flavor=Google, :authority=169.254.169.254, :scheme=http, user-agent=armeria/0.63.1, :path=/computeMetadata/v1/instance/service-accounts/default/token]}\r\n```\r\n\r\nNote that `:scheme` is `http` but `scheme` is `none+h2c`.\r\n\r\nThe user code fails with `ClosedSessionException` and there is a log\r\n\r\n```\r\n[id: 0xc013be2e, L:/10.146.0.11:35526 - R:169.254.169.254/169.254.169.254:80] Sent a GOAWAY frame: lastStreamId=0, errorCode=PROTOCOL_ERROR(1), debugData=\"type: io.netty.handler.codec.http2.Http2Exception, message: First received frame was not SETTINGS. Hex dump for first 5 bytes: 3c21444f43, cause: io.netty.handler.codec.http2.Http2Exception:\r\nFirst received frame was not SETTINGS. Hex dump for first 5 bytes: 3c21444f43 at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:85) at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.verifyFirstFrameIsSettings(Http2ConnectionHandler.java:350) at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:251) at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:450) at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:489) at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:428) at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:265) at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) at\r\n```\r\nThe decoded bytes are `<DOCT`. This is somewhat strange too since you'd expect an HTTP/1 response to start with `HTTP `.\r\n\r\nChanging the url from `http` to `h1c` fixes the problem. If this is a server side issue (a server that initiates `http2` upgrade but later responds with `http` weirdly?), then I'll close this but filing just in case it's an issue in armeria.", "labels": ["defect"]}, {"created": "2018-04-26 17:03:54", "commits": {"c2d389400d5470c28c0d4f6bceebfc78a3eab459": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-04-27 12:52:54", "filteredCommits": [], "commitsDetails": [{"nameRev": "c2d389400d5470c28c0d4f6bceebfc78a3eab459 tags/armeria-0.64.0~37", "commitMessage": "Return `204 No Content` if there is no response converter for 'null' result (#1166)\n\nModifications:\r\n- Return `204 No Content` response if there is no response converter which is able to convert 'null' result to a response. Until now, `500 Internal Server Error` has been sent.\r\n\r\nResult:\r\n- Closes #1165", "commitParents": ["6621b49c9728addaf8548fb94a5fa56660d4159e"], "spoonStatsSkippedReason": "", "commitHash": "c2d389400d5470c28c0d4f6bceebfc78a3eab459", "authoredDateTime": "2018-04-27 21:52:54", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 30, "deletions": 3, "lines": 33, "filePath": "core/src/test/java/com/linecorp/armeria/server/AnnotatedHttpServiceTest.java"}, {"insertions": 7, "deletions": 2, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/AnnotatedHttpServiceMethod.java"}], "commitDateTime": "2018-04-27 21:52:54", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceMethod.convertResponse(com.linecorp.armeria.server.ServiceRequestContext,java.lang.Object)"}], "spoonFilePath": "AnnotatedHttpServiceMethod.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceTest.VoidTo200ResponseConverter"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceTest.MyAnnotatedService1.void200()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceTest.testReturnVoid()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceTest.MyAnnotatedService1.void204()"}], "spoonFilePath": "AnnotatedHttpServiceTest.java"}]}], "url": "https://github.com/line/armeria/issues/1165", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "NPE from void service method", "statsSkippedReason": "", "user": "rkapsi", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Void service methods throw a NPE and result in a `HTTP 500 Internal Server Error` response. IMHO they shouldn't result in a NPE and be handled as `HTTP 204 No Content`.\r\n\r\n```java\r\npublic class FooService {\r\n  @Get(\"/foo\")\r\n  public void doFoo() {\r\n  }\r\n}\r\n```\r\n\r\n```java\r\n2018-04-26 12:53:23,200 [armeria-common-worker-epoll-5-6] HttpResponseSubscriber WARN : [id: 0xbb5add58, L:/127.0.0.1:8080 - R:/127.0.0.1:4052] Unexpected exception from a service or a response publisher: AnnotatedHttpService{pathMapping=[exact:/foo, {supportedMethods=[GET], consumeTypes=[], produceTypes=[]}], delegate=com.linecorp.armeria.server.AnnotatedHttpServiceMethod@5fafa7d1, decorator=java.util.function.Function$$Lambda$34/1952194564@58efa595}\r\n java.lang.NullPointerException: null\r\n\tat com.linecorp.armeria.server.AnnotatedHttpServiceMethod.convertResponse(AnnotatedHttpServiceMethod.java:218) ~[armeria-0.62.0.jar:?]\r\n\tat com.linecorp.armeria.server.AnnotatedHttpServiceMethod.lambda$serve$0(AnnotatedHttpServiceMethod.java:124) ~[armeria-0.62.0.jar:?]\r\n\tat java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822) ~[?:1.8.0_162]\r\n\tat java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797) ~[?:1.8.0_162]\r\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474) ~[?:1.8.0_162]\r\n\tat java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1595) ~[?:1.8.0_162]\r\n\tat com.linecorp.armeria.common.AbstractRequestContext.lambda$makeContextAware$1(AbstractRequestContext.java:72) ~[armeria-0.62.0.jar:?]\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[?:1.8.0_162]\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[?:1.8.0_162]\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) [netty-all-4.1.24.Final.jar:4.1.24.Final]\r\n\tat java.lang.Thread.run(Thread.java:748) [?:1.8.0_162]\r\n```", "labels": ["defect"]}, {"created": "2018-04-10 08:39:32", "commits": {"2fa8c78d2aca4f7d42a1d18a486f2d74523f6624": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-05-10 06:00:23", "filteredCommits": [], "commitsDetails": [{"nameRev": "2fa8c78d2aca4f7d42a1d18a486f2d74523f6624 tags/armeria-0.64.0~22", "commitMessage": "Provides a way to specify exception/request/response handlers in AnnotatedServiceRegitrationBean (#1173)\n\nMotivation:\r\n\r\nThere's no way to specify exception handlers and converters when registering an annotated service via `AnnotatedServiceRegistrationBean`. A user may be able to use `@ExceptionHandler`, `@RequestConverter` or `@ResponseConverter`, but it may not be possible if they do not have default constructor.\r\n\r\nModifications:\r\n\r\n- Add more setters to AnnotatedServiceRegistration\r\n\r\nResult:\r\n\r\nFixes #1141", "commitParents": ["f0cb2e11fea11c36ecab924f5a3314c11a42154a"], "spoonStatsSkippedReason": "", "commitHash": "2fa8c78d2aca4f7d42a1d18a486f2d74523f6624", "authoredDateTime": "2018-05-10 15:00:22", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 9, "deletions": 1, "lines": 10, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java"}, {"insertions": 46, "deletions": 1, "lines": 47, "filePath": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationTest.java"}, {"insertions": 101, "deletions": 1, "lines": 102, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/AnnotatedServiceRegistrationBean.java"}], "commitDateTime": "2018-05-10 15:00:22", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaAutoConfigurationTest.AnnotatedService.getV2()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaAutoConfigurationTest.IllegalArgumentExceptionHandler"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaAutoConfigurationTest.TestConfiguration.annotatedService()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaAutoConfigurationTest.StringResponseConverter"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaAutoConfigurationTest.testAnnotatedServiceRegistrationBean()"}], "spoonFilePath": "ArmeriaAutoConfigurationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaAutoConfiguration.armeriaServer(com.linecorp.armeria.spring.ArmeriaSettings,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional)"}], "spoonFilePath": "ArmeriaAutoConfiguration.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.setExceptionHandlers(java.util.Collection)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.getExceptionHandlers()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.getRequestConverters()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.getResponseConverters()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.setResponseConverters(com.linecorp.armeria.server.annotation.ResponseConverterFunction[])"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.setExceptionHandlers(com.linecorp.armeria.server.annotation.ExceptionHandlerFunction[])"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.setResponseConverters(java.util.Collection)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.setRequestConverters(com.linecorp.armeria.server.annotation.RequestConverterFunction[])"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.AnnotatedServiceRegistrationBean.setRequestConverters(java.util.Collection)"}], "spoonFilePath": "AnnotatedServiceRegistrationBean.java"}]}], "url": "https://github.com/line/armeria/issues/1141", "ttf": 29.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Missing properties in AnnotatedServiceRegitrationBean", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Reported by @taicki \r\n\r\nThere's no way to specify exception handlers and converters when registering an annotated service via `AnnotatedServiceRegistrationBean`. A user may be able to use `@ExceptionHandler`, `@RequestConverter` or `@ResponseConverter`, but it may not be possible if they do not have default constructor.", "labels": ["defect"]}, {"created": "2018-04-09 09:19:59", "commits": {"68cbfc45c8822b22917d8d8ebc42d7b0973db1dd": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-04-11 06:15:46", "filteredCommits": [], "commitsDetails": [{"nameRev": "68cbfc45c8822b22917d8d8ebc42d7b0973db1dd tags/armeria-0.63.0~15", "commitMessage": "Fix a bug where a GrpcDocServicePlugin does not handle exact path map\u2026 (#1138)\n\nMotivation:\r\n\r\nWhen a user adds a GrpcService with ServerBuilder.service(ServiceWithPathMappings),\r\nGrpcDocServicePlugin fails to add the service endpoints to ServiceSpecification.\r\n\r\nTo work around this issue, a user has to fall back to the old usage:\r\n\r\n    ServerBuilder sb = ...;\r\n    sb.serviceUnder(\"/\", grpcService); // Works\r\n    sb.service(grpcService); // Does not work\r\n\r\nModifications:\r\n\r\n- Update the endpoint detection logic in GrpcDocServicePlugin\r\n\r\nResult:\r\n\r\n- Fixes #1136", "commitParents": ["3165b7847bba1bea6a689c2206b099c0032e01f8"], "spoonStatsSkippedReason": "", "commitHash": "68cbfc45c8822b22917d8d8ebc42d7b0973db1dd", "authoredDateTime": "2018-04-11 15:15:45", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 22, "deletions": 17, "lines": 39, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcDocServicePlugin.java"}, {"insertions": 36, "deletions": 14, "lines": 50, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcDocServicePluginTest.java"}], "commitDateTime": "2018-04-11 15:15:45", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 13, "MOV": 5, "INS": 4, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcDocServicePlugin.generateSpecification(java.util.Set)"}], "spoonFilePath": "GrpcDocServicePlugin.java"}, {"spoonMethods": [{"UPD": 8, "TOT": 23, "MOV": 6, "INS": 7, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcDocServicePluginTest.services()"}], "spoonFilePath": "GrpcDocServicePluginTest.java"}]}], "url": "https://github.com/line/armeria/issues/1136", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "GrpcDocServicePlugin does not handle the services with exact mapping", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When a user binds a `GrpcService` using `ServerBuilder.service(ServiceWithPathMappings)`, its debug form does not show up in `DocService`, because `GrpcDocServicePlugin` only accepts the `ServiceConfig`s with a prefix-mapping. See `GrpcDocServicePlugin.java:149`.", "labels": ["defect"]}, {"created": "2018-03-15 09:47:12", "commits": {"04ac82e2010e55b38e3da45239fbdf872c184f06": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "6859257676531d248397900b29f01b148d497d75": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-03-16 02:41:02", "filteredCommits": [], "commitsDetails": [{"nameRev": "04ac82e2010e55b38e3da45239fbdf872c184f06 tags/armeria-0.59.1~3", "commitMessage": "Fix a bug where resources are not cleaned up after calling duplicator.close() (#1097)\n\n- Fixes #1092", "commitParents": ["18512ef2808b983cff4605bc053958ac293522c1"], "spoonStatsSkippedReason": "", "commitHash": "04ac82e2010e55b38e3da45239fbdf872c184f06", "authoredDateTime": "2018-03-16 11:41:01", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 0, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorTest.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java"}], "commitDateTime": "2018-04-05 16:50:13", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.StreamMessageProcessor.doCleanup()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.StreamMessageProcessor.doClose()"}], "spoonFilePath": "AbstractStreamMessageDuplicator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.StreamMessageDuplicatorTest.lastDuplicateStream()"}], "spoonFilePath": "StreamMessageDuplicatorTest.java"}]}, {"nameRev": "6859257676531d248397900b29f01b148d497d75 tags/armeria-0.60.0~13", "commitMessage": "Fix a bug where resources are not cleaned up after calling duplicator.close() (#1097)\n\n- Fixes #1092", "commitParents": ["b409f63920a796cb98ada437edafa69a805ee20d"], "spoonStatsSkippedReason": "", "commitHash": "6859257676531d248397900b29f01b148d497d75", "authoredDateTime": "2018-03-16 11:41:01", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 0, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorTest.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java"}], "commitDateTime": "2018-03-16 11:41:01", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.StreamMessageProcessor.doCleanup()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.StreamMessageProcessor.doClose()"}], "spoonFilePath": "AbstractStreamMessageDuplicator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.StreamMessageDuplicatorTest.lastDuplicateStream()"}], "spoonFilePath": "StreamMessageDuplicatorTest.java"}]}], "url": "https://github.com/line/armeria/issues/1092", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Buffer leak reported during StreamMessageDuplicatorTest", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 1, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Got this while running `./gradlew -Pleak clean test`:\r\n\r\n```\r\n18:39:06.272 [Time-limited test] ERROR io.netty.util.ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it's garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for more information.\r\nRecent access records: \r\n#1:\r\n\tcom.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.doSignalSingle(AbstractStreamMessageDuplicator.java:706)\r\n\tcom.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.doSignal(AbstractStreamMessageDuplicator.java:653)\r\n\tcom.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.signal(AbstractStreamMessageDuplicator.java:645)\r\n\tjava.util.concurrent.ConcurrentHashMap$KeySetView.forEach(ConcurrentHashMap.java:4649)\r\n\tjava.util.Collections$SetFromMap.forEach(Collections.java:5476)\r\n\tcom.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$StreamMessageProcessor.doPushSignal(AbstractStreamMessageDuplicator.java:284)\r\n\tcom.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$StreamMessageProcessor.pushSignal(AbstractStreamMessageDuplicator.java:249)\r\n\tcom.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$StreamMessageProcessor.onNext(AbstractStreamMessageDuplicator.java:231)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriberWithElements(DefaultStreamMessage.java:341)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber0(DefaultStreamMessage.java:319)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber(DefaultStreamMessage.java:252)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.addObjectOrEvent(DefaultStreamMessage.java:238)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.addObject(DefaultStreamMessage.java:150)\r\n\tcom.linecorp.armeria.common.stream.AbstractStreamMessageAndWriter.tryWrite(AbstractStreamMessageAndWriter.java:72)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.tryWrite(DefaultStreamMessage.java:65)\r\n\tcom.linecorp.armeria.common.stream.StreamWriter.write(StreamWriter.java:70)\r\n\tcom.linecorp.armeria.common.stream.StreamMessageDuplicatorTest.lastDuplicateStream(StreamMessageDuplicatorTest.java:318)\r\n\tsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tjava.lang.reflect.Method.invoke(Method.java:498)\r\n\torg.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\torg.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\torg.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\torg.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\torg.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)\r\n\torg.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)\r\n\tjava.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tjava.lang.Thread.run(Thread.java:748)\r\n#2:\r\n\tcom.linecorp.armeria.common.stream.AbstractStreamMessage.prepareObjectForNotification(AbstractStreamMessage.java:140)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriberWithElements(DefaultStreamMessage.java:340)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber0(DefaultStreamMessage.java:319)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber(DefaultStreamMessage.java:252)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.addObjectOrEvent(DefaultStreamMessage.java:238)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.addObject(DefaultStreamMessage.java:150)\r\n\tcom.linecorp.armeria.common.stream.AbstractStreamMessageAndWriter.tryWrite(AbstractStreamMessageAndWriter.java:72)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.tryWrite(DefaultStreamMessage.java:65)\r\n\tcom.linecorp.armeria.common.stream.StreamWriter.write(StreamWriter.java:70)\r\n\tcom.linecorp.armeria.common.stream.StreamMessageDuplicatorTest.lastDuplicateStream(StreamMessageDuplicatorTest.java:318)\r\n\tsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tjava.lang.reflect.Method.invoke(Method.java:498)\r\n\torg.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\torg.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\torg.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\torg.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\torg.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)\r\n\torg.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)\r\n\tjava.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tjava.lang.Thread.run(Thread.java:748)\r\n#3:\r\n\tcom.linecorp.armeria.common.stream.AbstractStreamMessageAndWriter.tryWrite(AbstractStreamMessageAndWriter.java:60)\r\n\tcom.linecorp.armeria.common.stream.DefaultStreamMessage.tryWrite(DefaultStreamMessage.java:65)\r\n\tcom.linecorp.armeria.common.stream.StreamWriter.write(StreamWriter.java:70)\r\n\tcom.linecorp.armeria.common.stream.StreamMessageDuplicatorTest.lastDuplicateStream(StreamMessageDuplicatorTest.java:318)\r\n\tsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tjava.lang.reflect.Method.invoke(Method.java:498)\r\n\torg.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\torg.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\torg.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\torg.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\torg.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)\r\n\torg.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)\r\n\tjava.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tjava.lang.Thread.run(Thread.java:748)\r\nCreated at:\r\n\tio.netty.buffer.AdvancedLeakAwareByteBuf.writeByte(AdvancedLeakAwareByteBuf.java:544)\r\n\tcom.linecorp.armeria.common.stream.StreamMessageDuplicatorTest.newUnpooledBuffer(StreamMessageDuplicatorTest.java:350)\r\n\tcom.linecorp.armeria.common.stream.StreamMessageDuplicatorTest.lastDuplicateStream(StreamMessageDuplicatorTest.java:316)\r\n\tsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tjava.lang.reflect.Method.invoke(Method.java:498)\r\n\torg.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n\torg.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n\torg.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n\torg.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n\torg.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:298)\r\n\torg.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:292)\r\n\tjava.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\tjava.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nYou can check if there was a leak simply by running `grap -rFl 'LEAK:' .`", "labels": ["defect"]}, {"created": "2018-03-12 07:15:10", "commits": {"ba99b612ec9d9bd56a76351ce2969233a85fa775": {"commitGHEventType": "referenced", "commitUser": "minwoox"}}, "numCommits": 0, "closed": "2019-12-27 11:50:59", "filteredCommits": [], "commitsDetails": [{"nameRev": "ba99b612ec9d9bd56a76351ce2969233a85fa775 tags/armeria-0.98.0~100", "commitMessage": "Provide our own attribute mapping APIs for RequestContext (#2322)\n\nMotivation:\r\n- `Attribute` in Netty has deprecated APIs which causes a race condition. We don't have to implement it but just have our own APIs for attribute mapping.\r\n- When a user writes a service that invokes a request using an Armeria client, the client cannot access the `ServiceRequestContext`.\r\n\r\nModifications\r\n- `RequestContext` does not extend `AttributeMap` in Netty anymore.\r\n  - It has now its own methods to retreive and set the value:\r\n    - `T attr(AttributeKey<T> key)`\r\n    - `void setAttr(AttributeKey<T> key, @Nullable T value)`\r\n    - `T setAttrIfAbsent(AttributeKey<T> key, T value)`\r\n    - `T computeAttrIfAbsent(AttributeKey<T> key, T value)`\r\n    - `Iterator<Entry<AttributeKey<?>, Object>> attrs()`\r\n    - `T ownAttr(AttributeKey<T> key)` (in `ClientRequestContext` only)\r\n    - `Iterator<Entry<AttributeKey<?>, Object>> ownAttrs()` (in `ClientRequestContext` only)\r\n- Add `ClientRequestContext.rootContext()`\r\n  - The `rootContext` is from the service that invokes a client request which created the `ClientRequestContext`.\r\n  - When `attr()` is called, the `ClientRequestContext` looks for the `rootContext` if it doesn't have the value.\r\n  - `attrs()` returns the combined iterator of `ClientRequestContext` and `rootContext`.\r\n\r\nResult:\r\n- (Breaking) `RequestContext` does not extend `AttributeMap` anymore.\r\n  ```java\r\n  RequestContext ctx = ...\r\n  AttributeKey<Integer> KEY = AttributeKey.valueOf(MyClass.class, \"key\");\r\n\r\n  // before\r\n  Attribute<Integer> attr = ctx.attr(KEY);\r\n  attr.set(10);\r\n  assert attr.get() == 10;\r\n\r\n  // after\r\n  ctx.setAttr(KEY, 11);\r\n  assert ctx.attr(KEY) == 10;\r\n  ```\r\n- (Breaking) `RequestLog` does not extend `AttributeMap` anymore. You should use context:\r\n  ```java\r\n  RquestLog log = ...\r\n  log.context().setAttr(...)\r\n  ```\r\n- You can get the `ServiceRequestContext` of a service that invokes the client's request and its attributes without copying.\r\n- Close #1083 ", "commitParents": ["89a0166df98bde34bae1e6f306144d0e03320559"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "ba99b612ec9d9bd56a76351ce2969233a85fa775", "authoredDateTime": "2019-12-27 20:50:59", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "examples/spring-boot-minimal/src/test/java/example/springframework/boot/minimal/HelloApplicationIntegrationTest.java"}, {"insertions": 41, "deletions": 7, "lines": 48, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultClientRequestContext.java"}, {"insertions": 23, "deletions": 48, "lines": 71, "filePath": "brave/src/test/java/com/linecorp/armeria/common/brave/RequestContextCurrentTraceContextTest.java"}, {"insertions": 506, "deletions": 0, "lines": 506, "filePath": "core/src/main/java/com/linecorp/armeria/common/DefaultAttributeMap.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java"}, {"insertions": 24, "deletions": 9, "lines": 33, "filePath": "core/src/main/java/com/linecorp/armeria/common/RequestContextWrapper.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "examples/dropwizard/src/test/java/example/dropwizard/DropwizardArmeriaApplicationTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/ArmeriaServerCallTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/StickyEndpointSelectionStrategyTest.java"}, {"insertions": 54, "deletions": 9, "lines": 63, "filePath": "core/src/main/java/com/linecorp/armeria/common/NonWrappingRequestContext.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "benchmarks/src/jmh/java/com/linecorp/armeria/internal/PathParsingBenchmark.java"}, {"insertions": 6, "deletions": 1, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/client/metric/AbstractMetricCollectingClient.java"}, {"insertions": 8, "deletions": 6, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/internal/metric/RequestMetricSupport.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "site/src/sphinx/advanced-logging.rst"}, {"insertions": 4, "deletions": 5, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/client/Clients.java"}, {"insertions": 49, "deletions": 4, "lines": 53, "filePath": "core/src/test/java/com/linecorp/armeria/client/DefaultClientRequestContextTest.java"}, {"insertions": 49, "deletions": 13, "lines": 62, "filePath": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java"}, {"insertions": 10, "deletions": 20, "lines": 30, "filePath": "brave/src/main/java/com/linecorp/armeria/common/brave/RequestContextCurrentTraceContext.java"}, {"insertions": 0, "deletions": 4, "lines": 4, "filePath": "brave/src/main/java/com/linecorp/armeria/client/brave/BraveClient.java"}, {"insertions": 3, "deletions": 5, "lines": 8, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java"}, {"insertions": 7, "deletions": 14, "lines": 21, "filePath": "brave/src/main/java/com/linecorp/armeria/internal/brave/TraceContextUtil.java"}, {"insertions": 0, "deletions": 4, "lines": 4, "filePath": "brave/src/main/java/com/linecorp/armeria/server/brave/BraveService.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServiceBindingTest.java"}, {"insertions": 277, "deletions": 0, "lines": 277, "filePath": "core/src/test/java/com/linecorp/armeria/common/DefaultAttributeMapTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategyTest.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "grpc/src/main/java/com/linecorp/armeria/unsafe/grpc/GrpcUnsafeBufferUtil.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/InvocationUtil.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/thrift/ThrottlingRpcServiceTest.java"}, {"insertions": 0, "deletions": 17, "lines": 17, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractRetryingClient.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "brave/src/test/java/com/linecorp/armeria/server/brave/ServerRequestContextAdapterTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/RoundRobinStrategyTest.java"}, {"insertions": 0, "deletions": 319, "lines": 319, "filePath": "core/src/main/java/com/linecorp/armeria/internal/DefaultAttributeMap.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "brave/src/test/java/com/linecorp/armeria/client/brave/BraveClientIntegrationTest.java"}, {"insertions": 1, "deletions": 31, "lines": 32, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java"}, {"insertions": 20, "deletions": 0, "lines": 20, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContextWrapper.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/common/RequestContextTest.java"}, {"insertions": 71, "deletions": 14, "lines": 85, "filePath": "core/src/test/java/com/linecorp/armeria/internal/metric/RequestMetricSupportTest.java"}, {"insertions": 5, "deletions": 6, "lines": 11, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "brave/src/test/java/com/linecorp/armeria/client/brave/ClientRequestContextAdapterTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTServletIntegrationTest.java"}, {"insertions": 0, "deletions": 190, "lines": 190, "filePath": "core/src/test/java/com/linecorp/armeria/internal/DefaultAttributeMapTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "examples/spring-boot-webflux/src/test/java/example/springframework/boot/webflux/HelloApplicationIntegrationTest.java"}, {"insertions": 5, "deletions": 2, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/server/RouteDecoratingService.java"}, {"insertions": 3, "deletions": 5, "lines": 8, "filePath": "core/src/test/java/com/linecorp/armeria/internal/annotation/AnnotatedServiceAnnotationAliasTest.java"}, {"insertions": 2, "deletions": 3, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/server/logging/AccessLogComponent.java"}, {"insertions": 6, "deletions": 1, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/server/metric/MetricCollectingService.java"}, {"insertions": 7, "deletions": 18, "lines": 25, "filePath": "site/src/sphinx/advanced-custom-attributes.rst"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/server/logging/AccessLogFormatsTest.java"}, {"insertions": 112, "deletions": 0, "lines": 112, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientRequestContext.java"}, {"insertions": 2, "deletions": 5, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientConnectionTimings.java"}, {"insertions": 6, "deletions": 9, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporter.java"}], "commitDateTime": "2019-12-27 20:50:59", "commitUser": "minwoox", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1083", "ttf": 655.0002777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "A user may get the wrong RequestContext when contexts are nested", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When a user writes a service that invokes a request using an Armeria client, the `ServiceRequestContext` will be *hidden* by the client's `ClientRequestContext`. This can cause various unexpected hard-to-spot behaviors, especially when a user is using frameworks like RxJava, such as:\r\n\r\n- When a user accesses the properties of `RequestContext`, a wrong value may be returned.\r\n- When a user assumes the context is `ServiceRequestContext`, a `ClassCastException` will be raised.\r\n- When a user access an attribute, the attribute may be missing. A user has to copy all attributes using `onChild()` to work around this.", "labels": ["defect"]}, {"created": "2018-03-12 07:04:11", "commits": {"825ccf7ab57f94f41842cef11bf55fce6a0a3ea5": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-12-08 05:16:56", "filteredCommits": [], "commitsDetails": [{"nameRev": "825ccf7ab57f94f41842cef11bf55fce6a0a3ea5 tags/armeria-0.77.0~18", "commitMessage": "Allow disabling default ClientFactory shutdown hook (#1472)\n\nSee: #1082\r\nMotivation:\r\n\r\nA Spring user who uses `ClientFactory.DEFAULT` may observe the problem\r\nwhere the default `ClientFactory` is closed before his/her Spring\r\napplication is fully destroyed.\r\n\r\nModifications:\r\n\r\n- Added `ClientFactory.disableShutdownHook()`\r\n\r\nResult:\r\n\r\n- A user have full control over when the default `ClientFactory` can be\r\n  closed.", "commitParents": ["68b01bed48a34fbd781607c3973fdf2d0dcdde2e"], "spoonStatsSkippedReason": "", "commitHash": "825ccf7ab57f94f41842cef11bf55fce6a0a3ea5", "authoredDateTime": "2018-12-03 20:45:35", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 11, "deletions": 2, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java"}, {"insertions": 11, "deletions": 1, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/client/DefaultClientFactory.java"}], "commitDateTime": "2018-12-03 20:45:35", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.disableShutdownHook()"}], "spoonFilePath": "ClientFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.DefaultClientFactory"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.DefaultClientFactory.disableShutdownHook0()"}], "spoonFilePath": "DefaultClientFactory.java"}]}], "url": "https://github.com/line/armeria/issues/1082", "ttf": 270.0002777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Default ClientFactory's shutdown hook conflicts Spring's shutdown hook", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "A Spring user who uses `ClientFactory.DEFAULT` may observe the problem where the default `ClientFactory` is closed before his/her Spring application is fully destroyed.\r\n\r\nWe should figure out what the best way to solve this. One option would be to provide an option to disable the shutdown hook, but it doesn't look elegant to me.", "labels": ["defect"]}, {"created": "2018-03-01 12:39:27", "user": "anuraaga", "body": "I am writing a cloud storage client based on armeria where it is common for the client to send multiple, e.g. 1MB requests across the same HTTP/2 connection at the same time. I encountered issues though where with simultaneous requests, some would complete while others just hang forever. With Logging client enabled, the requests are all shown but only zero to one responses when 2-4 requests are sent at the same time (haven't tried with more that 4). The response never completes, future never completes, and further business logic cannot be run. Eventually the backend usually closes the socket. Note that the business logic will not attempt to send another request on the connection until it gets a response for the precious one, so during the stuck state there are no additional bytes being added, until it timesout, tries the next chunk, and gets stuck again. Also, there are occasional cases where both succeed and processing can go normally (very rare with 4 writres a bit more common with just 2).\r\n\r\nSwitching to H1 makes the writes completely reliable (just changed the url from https to h1). I suspect that flow control is an issue and it's possible that a bug prevents throttled frames from ever being sent. I guess we'd need to start by adding detailed logging of flow control of a connection (allowed bytes, pending bytes, etc).", "closed": "2018-03-15 12:30:00", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1040", "ttf": 13.000277777777777, "commits": {}, "labels": ["defect", "needs info"], "title": "Possible race in HTTP/2 flow control handling"}, {"created": "2018-03-01 05:36:28", "user": "anuraaga", "body": "I noticed that a refcnt exception in the duplicator stream gets logged but is not returned to the subscriber. This means that an exception causes the stream to just hang forever, with futures never completing. This might be ok, since the alternative is way too many `catch (Throwable)`, and it just means we have to be careful in righting code that can't throw exceptions, but want to hear what you think.\r\n\r\nThis sort of stacktrace gets logged when the stream gets hung.\r\n\r\n```\r\nio.netty.util.IllegalReferenceCountException: refCnt: 0 at io.netty.buffer.AbstractByteBuf.ensureAccessible(AbstractByteBuf.java:1415) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at io.netty.buffer.AbstractByteBuf.checkIndex(AbstractByteBuf.java:1354) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at io.netty.buffer.UnsafeByteBufUtil.getBytes(UnsafeByteBufUtil.java:481) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at io.netty.buffer.PooledUnsafeDirectByteBuf.getBytes(PooledUnsafeDirectByteBuf.java:131) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at io.netty.buffer.AbstractUnpooledSlicedByteBuf.getBytes(AbstractUnpooledSlicedByteBuf.java:243) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:862) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at io.netty.buffer.CompositeByteBuf.getBytes(CompositeByteBuf.java:44) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at io.netty.buffer.AbstractUnpooledSlicedByteBuf.getBytes(AbstractUnpooledSlicedByteBuf.java:243) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at io.netty.buffer.UnpooledHeapByteBuf.setBytes(UnpooledHeapByteBuf.java:262) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at io.netty.buffer.AbstractByteBuf.writeBytes(AbstractByteBuf.java:1080) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at io.netty.buffer.Unpooled.copiedBuffer(Unpooled.java:436) \r\n[netty-buffer-4.1.21.Final.jar:4.1.21.Final] at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.copy(AbstractStreamMessageDuplicator.java:766) \r\n[armeria-0.58.1.jar:?] at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.doSignalSingle(AbstractStreamMessageDuplicator.java:711) \r\n[armeria-0.58.1.jar:?] at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.doSignal(AbstractStreamMessageDuplicator.java:649) \r\n[armeria-0.58.1.jar:?] at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.signal(AbstractStreamMessageDuplicator.java:641) \r\n[armeria-0.58.1.jar:?] at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.request(AbstractStreamMessageDuplicator.java:624) \r\n[armeria-0.58.1.jar:?] at com.linecorp.armeria.client.HttpRequestSubscriber.operationComplete(HttpRequestSubscriber.java:95) \r\n[armeria-0.58.1.jar:?] at com.linecorp.armeria.client.HttpRequestSubscriber.operationComplete(HttpRequestSubscriber.java:48) \r\n[armeria-0.58.1.jar:?] at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:512) [netty-common-4.1.21.Final.jar:4.1.21.Final] at io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:505) [netty-common-4.1.21.Final.jar:4.1.21.Final] at io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:484) [netty-common-4.1.21.Final.jar:4.1.21.Final] at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:425) [netty-common-4.1.21.Final.jar:4.1.21.Final] at io.netty.util.concurrent.DefaultPromise.trySuccess(DefaultPromise.java:104) [netty-common-4.1.21.Final.jar:4.1.21.Final] at io.netty.handler.codec.http2.Http2CodecUtil$SimpleChanne\r\n```", "closed": "2018-03-09 02:17:22", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1039", "ttf": 7.000277777777778, "commits": {}, "labels": ["defect"], "title": "Unexpected exceptions in duplicate stream may not be notified to subscribers"}, {"created": "2018-02-27 15:06:07", "commits": {"78adb8806abcc2e599c7b13c2d95c61fbe744e45": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2018-03-08 12:54:40", "filteredCommits": [], "commitsDetails": [{"nameRev": "78adb8806abcc2e599c7b13c2d95c61fbe744e45 tags/armeria-0.59.0~5", "commitMessage": "Implement flow control of gRPC stream writes. (#1064)\n\nMotivation:\r\n\r\nCurrently, reads from the stream are correctly handled by propagating `request` through the stub, but writes are not since `isReady` is not properly implemented. When I first implemented the streams, I didn't understand `StreamWriter` properly, but now I do and realize we can use `onDemand` for this :)\r\n\r\nModifications:\r\n\r\n- Report the 'readiness' of the stream correctly by maintaining the number of pending messages.\r\n\r\nResult:\r\n\r\nWith the change, the stream is only considered ready for writes when there is a request for them. I sort of want to optimize the non-backpressure case by only doing this if `isReady` is called, as that's a heuristic that should generally show the caller is implementing backpressure, but it's a bit weird and for unary calls the one call to `onDemand` doesn't seem like a big deal.\r\n\r\nFixes #1037", "commitParents": ["ee9862e29d6ae677baa74680c309295eaef28ff0"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "78adb8806abcc2e599c7b13c2d95c61fbe744e45", "authoredDateTime": "2018-03-08 21:54:39", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 324, "deletions": 0, "lines": 324, "filePath": "grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcFlowControlTest.java"}, {"insertions": 18, "deletions": 13, "lines": 31, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/ArmeriaServerCall.java"}, {"insertions": 37, "deletions": 0, "lines": 37, "filePath": "grpc/src/test/proto/com/linecorp/armeria/grpc/testing/flow.proto"}, {"insertions": 22, "deletions": 0, "lines": 22, "filePath": "grpc/src/main/java/com/linecorp/armeria/client/grpc/ArmeriaClientCall.java"}], "commitDateTime": "2018-03-08 21:54:39", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1037", "ttf": 8.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Check gRPC backpressure code.", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Since the gRPC stream reader requests an HTTP frame as soon as it gets another one, I don't think it is correctly implementing backpressure, it should probably only request as many frames as needed to satisfy the current request of messages.", "labels": ["defect"]}, {"created": "2018-02-26 13:42:35", "commits": {"6dd9d99d4d7793edc78d6616a67ae6bc8af46e02": {"commitGHEventType": "closed", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2018-04-08 13:33:51", "filteredCommits": [], "commitsDetails": [{"nameRev": "6dd9d99d4d7793edc78d6616a67ae6bc8af46e02 tags/armeria-0.63.0~21", "commitMessage": "Use Curator framework for ZooKeeper service registration and discovery (#1044)\n\n- Closes #882 \r\n- Closes #1007 \r\n- Closes #1035 \r\n\r\n- Add curator-recipes dependency\r\n- Add `ZooKeeperUpdatingListenerBuilder`.\r\n- ZooKeeperUpdatingListener(String, String, int, Endpoint) implementation is changed into `CuratorFramework` based one.\r\n- ZooKeeperUpdatingListener#of methods are implemented; they covers the most common cases, including traditional `ZooKeeperUpdatingListener(String, String, int)` and `ZooKeeperUpdatingListener(String, String, int, Endpoint)`.\r\n- Update Documentation: site/src/sphinx/advanced-zookeeper.rst.\r\n- Make ZooKeeperUpdatingListener#nodeValueCodec specifiable\r\n", "commitParents": ["3e3eae2b04539224773cd6964407ddd9dc073d75"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "6dd9d99d4d7793edc78d6616a67ae6bc8af46e02", "authoredDateTime": "2018-04-08 22:33:47", "commitGHEventType": "closed", "commitGitStats": [{"insertions": 8, "deletions": 0, "lines": 8, "filePath": "dependencies.yml"}, {"insertions": 0, "deletions": 338, "lines": 338, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/ZooKeeperConnector.java"}, {"insertions": 0, "deletions": 58, "lines": 58, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/common/zookeeper/ZooKeeperException.java"}, {"insertions": 25, "deletions": 8, "lines": 33, "filePath": "site/src/sphinx/advanced-zookeeper.rst"}, {"insertions": 5, "deletions": 57, "lines": 62, "filePath": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/EndpointGroupTest.java"}, {"insertions": 0, "deletions": 101, "lines": 101, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistration.java"}, {"insertions": 3, "deletions": 0, "lines": 3, "filePath": "zookeeper/build.gradle"}, {"insertions": 93, "deletions": 59, "lines": 152, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java"}, {"insertions": 66, "deletions": 32, "lines": 98, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java"}, {"insertions": 8, "deletions": 7, "lines": 15, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/package-info.java"}, {"insertions": 203, "deletions": 0, "lines": 203, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListenerBuilder.java"}, {"insertions": 27, "deletions": 83, "lines": 110, "filePath": "zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java"}, {"insertions": 1, "deletions": 18, "lines": 19, "filePath": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/TestBase.java"}, {"insertions": 10, "deletions": 19, "lines": 29, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/{common/zookeeper/ZooKeeperListener.java => internal/zookeeper/ZooKeeperDefaults.java}"}], "commitDateTime": "2018-04-08 22:33:47", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1035", "ttf": 40.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Can't specify NodeValueCodec when creating ZooKeeperUpdatingListener instance", "statsSkippedReason": "", "user": "dongjinleekr", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I found this problem while working on #882 and #1005.\r\n\r\nAs of now, there is a parity problem in the service discovery feature; Although `ZookeeperEndpointGroup` provides a way to specify `NodeValueCodec` with `ZooKeeperEndpointGroup(String, String, int, NodeValueCodec)`, the counterpart is missing in `ZooKeeperUpdatingListener`.\r\n\r\nWe should provide a way to specify `NodeValueCodec`, which determines how the node value would be stored.", "labels": ["defect"]}, {"created": "2018-02-23 13:20:27", "commits": {"0218d817140048221f499fe17ba03bf07cbd7eb0": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-03-02 10:22:49", "filteredCommits": [], "commitsDetails": [{"nameRev": "0218d817140048221f499fe17ba03bf07cbd7eb0 tags/armeria-0.59.0~24", "commitMessage": "Close in-progress responses when channel is closed. (#1030)\n\nCurrently, there is no notification to response streams if the client disconnects. If the client disconnects before finishing a request, server logic will be notified in the request stream, but if it disconnects after finshing a request but before finishing a response, the server logic has no way of knowing to abort processing.\r\n\r\n- Now, any in-progress response streams are aborted when channel is closed\r\n- Default behavior of `StreamMessage.write` changed to throw an exception when stream is closed, which is more natural. `tryWrite` can be used when this is not desired.\r\n- Also fix that a client close on HTTP/1 request did not notify the request stream of closure\r\n- Fixes a test which kept a stream in a static variable and writing consecutively to it\r\n\r\nFixes #1028", "commitParents": ["04fb15d7b4cbfc6b4f71cfb0de6401cb3330b068"], "spoonStatsSkippedReason": "", "commitHash": "0218d817140048221f499fe17ba03bf07cbd7eb0", "authoredDateTime": "2018-03-02 19:22:48", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 4, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java"}, {"insertions": 4, "deletions": 0, "lines": 4, "filePath": "grpc/src/test/proto/com/linecorp/armeria/grpc/testing/test.proto"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "tomcat/src/main/java/com/linecorp/armeria/server/tomcat/TomcatService.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/AbstractStreamMessageTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/EventLoopStreamMessageVerification.java"}, {"insertions": 3, "deletions": 1, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/DeferredStreamMessageTest.java"}, {"insertions": 32, "deletions": 3, "lines": 35, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/StreamWriter.java"}, {"insertions": 16, "deletions": 3, "lines": 19, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageAndWriter.java"}, {"insertions": 13, "deletions": 0, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java"}, {"insertions": 79, "deletions": 9, "lines": 88, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java"}, {"insertions": 6, "deletions": 4, "lines": 10, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/AbstractStreamMessageAndWriterTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "jetty/src/main/java/com/linecorp/armeria/server/jetty/JettyService.java"}, {"insertions": 11, "deletions": 15, "lines": 26, "filePath": "core/src/test/java/com/linecorp/armeria/server/healthcheck/ManagedHttpHealthCheckServiceTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/DecodedHttpResponse.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/DefaultStreamMessageVerification.java"}], "commitDateTime": "2018-03-02 19:22:48", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.EventLoopStreamMessageVerification.stream(long,boolean,java.util.concurrent.atomic.AtomicLong,com.linecorp.armeria.common.stream.EventLoopStreamMessage)"}], "spoonFilePath": "EventLoopStreamMessageVerification.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.write(java.lang.Object)"}, {"UPD": 2, "TOT": 3, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.write(java.util.function.Supplier)"}], "spoonFilePath": "StreamWriter.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerTest.stream(com.linecorp.armeria.common.stream.StreamWriter,long,int)"}], "spoonFilePath": "HttpServerTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageAndWriter.write(java.lang.Object)"}], "spoonFilePath": "AbstractStreamMessageAndWriter.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageTest.releaseOnConsumption_ByteBuf()"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageTest.releaseOnConsumption_HttpData()"}], "spoonFilePath": "AbstractStreamMessageTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.DefaultStreamMessageVerification.stream(long,boolean,java.util.concurrent.atomic.AtomicLong,com.linecorp.armeria.common.stream.DefaultStreamMessage)"}], "spoonFilePath": "DefaultStreamMessageVerification.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.jetty.JettyService.invoke(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpResponseWriter,com.linecorp.armeria.server.jetty.JettyService$ArmeriaHttpTransport,org.eclipse.jetty.server.HttpChannel)"}], "spoonFilePath": "JettyService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.StreamMessageDuplicatorTest.lastDuplicateStream()"}], "spoonFilePath": "StreamMessageDuplicatorTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.tomcat.TomcatService.serve(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "TomcatService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.UnitTestServiceImpl.streamClientCancelsBeforeResponseClosed(com.linecorp.armeria.grpc.testing.Messages.SimpleRequest,io.grpc.stub.StreamObserver)"}, {"UPD": 6, "TOT": 21, "MOV": 14, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.clientSocketClosedHttp2()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.setUp()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.clientSocketClosedBeforeHalfClose(java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.clientSocketClosedAfterHalfCloseBeforeCloseHttp2()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.clientSocketClosedBeforeHalfCloseHttp2()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.clientSocketClosedAfterHalfCloseBeforeCloseHttp1()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.clientSocketClosedAfterHalfCloseBeforeClose(java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.clientSocketClosedBeforeHalfCloseHttp1()"}], "spoonFilePath": "GrpcServiceServerTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.ManagedHttpHealthCheckServiceTest.setUp()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.ManagedHttpHealthCheckServiceTest.turnOn()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.ManagedHttpHealthCheckServiceTest.turnOff()"}, {"UPD": 9, "TOT": 14, "MOV": 2, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.healthcheck.ManagedHttpHealthCheckServiceTest"}], "spoonFilePath": "ManagedHttpHealthCheckServiceTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.DecodedHttpResponse.write(com.linecorp.armeria.common.HttpObject)"}], "spoonFilePath": "DecodedHttpResponse.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerHandler.channelUnregistered(io.netty.channel.ChannelHandlerContext)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerHandler"}, {"UPD": 2, "TOT": 8, "MOV": 1, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerHandler.handleRequest(io.netty.channel.ChannelHandlerContext,com.linecorp.armeria.server.DecodedHttpRequest)"}], "spoonFilePath": "HttpServerHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.DeferredStreamMessageTest.testEarlyAbortWithSubscriber()"}], "spoonFilePath": "DeferredStreamMessageTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseDecoder.HttpResponseWrapper.write(com.linecorp.armeria.common.HttpObject)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseDecoder.HttpResponseWrapper.write(java.util.function.Supplier)"}], "spoonFilePath": "HttpResponseDecoder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageAndWriterTest.releaseWhenWritingToClosedStream_ByteBuf()"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageAndWriterTest.releaseWhenWritingToClosedStream_HttpData()"}], "spoonFilePath": "AbstractStreamMessageAndWriterTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DecodedHttpRequest.write(com.linecorp.armeria.common.HttpObject)"}], "spoonFilePath": "DecodedHttpRequest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Http1RequestDecoder.channelUnregistered(io.netty.channel.ChannelHandlerContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Http1RequestDecoder"}], "spoonFilePath": "Http1RequestDecoder.java"}]}], "url": "https://github.com/line/armeria/issues/1028", "ttf": 6.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Zombie gRPC connections", "statsSkippedReason": "", "user": "tobias-", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When using constructs of the type:\r\n```\r\nrpc StreamClientCancels2(SimpleRequest) returns (stream SimpleResponse);\r\n```\r\nthere is no way to know if the client has disconnected. OnCancelHandler is not called, nor is there any exception thrown when sending more data. It will just silently discard all data sent.\r\n\r\nI've added a test case (CC0 on my changes, claim ownership if you want)\r\nhttps://github.com/tobias-/armeria/tree/zombie_connections\r\n\r\n", "labels": ["defect"]}, {"created": "2018-02-22 06:32:55", "commits": {"9aa4168448072a209866079e8f69937694956c23": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-03-02 12:38:03", "filteredCommits": [], "commitsDetails": [{"nameRev": "9aa4168448072a209866079e8f69937694956c23 tags/armeria-0.59.0~23", "commitMessage": "Fix ConcurrentModificationException in DefaultKeyedChannelPool.doClose() (#1045)\n\nMotivation:\r\n\r\nDefaultKeyedChannelPool.doClose() can trigger\r\nConcurrentModificationException while iterating over allChannels.\r\n\r\nModifications:\r\n\r\n- Do not trigger Channel.close() operation while iterating over\r\n  allChannels. Call Channel.close() later.\r\n\r\nResult:\r\n\r\n- Fixes #1022", "commitParents": ["0218d817140048221f499fe17ba03bf07cbd7eb0"], "spoonStatsSkippedReason": "", "commitHash": "9aa4168448072a209866079e8f69937694956c23", "authoredDateTime": "2018-03-02 21:38:02", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 12, "deletions": 11, "lines": 23, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/DefaultKeyedChannelPool.java"}], "commitDateTime": "2018-03-02 21:38:02", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.acquireHealthyFromPoolOrNew(java.lang.Object,io.netty.util.concurrent.Promise)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.release(java.lang.Object,io.netty.channel.Channel,io.netty.util.concurrent.Promise)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.notifyConnect(java.lang.Object,io.netty.util.concurrent.Future,io.netty.util.concurrent.Promise)"}, {"UPD": 1, "TOT": 3, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.doClose(boolean)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.removeUnhealthy(java.util.Deque)"}], "spoonFilePath": "DefaultKeyedChannelPool.java"}]}], "url": "https://github.com/line/armeria/issues/1022", "ttf": 8.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "ConcurrentModificationException in DefaultKeyedChannelPool.doClose()", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```\r\nException in thread \"Thread-2\" java.util.ConcurrentModificationException \r\nat java.util.HashMap$HashIterator.nextNode(HashMap.java:1437) \r\nat java.util.HashMap$KeyIterator.next(HashMap.java:1461) \r\nat com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.doClose(DefaultKeyedChannelPool.java:326) \r\nat com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.lambda$close$6(DefaultKeyedChannelPool.java:313)\r\n...\r\n```", "labels": ["defect"]}, {"created": "2018-02-20 14:30:53", "commits": {"04d7b46eefd50c7f2c417e4cc3504a344d90d2e9": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "bab293b2493e3081cbd7478b0e7f7fa898192206": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "3aa9f2ee934322372995f0bbff0995bf748ae7f9": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-02-23 09:12:59", "filteredCommits": [], "commitsDetails": [{"nameRev": "04d7b46eefd50c7f2c417e4cc3504a344d90d2e9 tags/armeria-0.59.0~33", "commitMessage": "Handle split headers in Http(Request|Response).aggregate() (#1027)\n\nMotivation:\r\n\r\nSome HTTP/2 implementations can send additional headers after sending a\r\nnon-informational HEADERS frame.\r\n\r\nHttpRequest.aggregate() and HttpResponse.aggregate() will not merge the\r\nsplit headers correctly, making AggregatedHttpMessage.informationals()\r\ncontain split headers and headers() and trailingHeaders() omit some\r\nheaders.\r\n\r\nModifications:\r\n\r\n- Merge the split HTTP headers correctly.\r\n\r\nResult:\r\n\r\n- Fixes #1014 for HttpRequest.aggregate() and HttpResponse.aggregate()", "commitParents": ["bab293b2493e3081cbd7478b0e7f7fa898192206"], "spoonStatsSkippedReason": "", "commitHash": "04d7b46eefd50c7f2c417e4cc3504a344d90d2e9", "authoredDateTime": "2018-03-02 12:20:36", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 31, "deletions": 0, "lines": 31, "filePath": "core/src/test/java/com/linecorp/armeria/internal/DefaultHttpResponseTest.java"}, {"insertions": 9, "deletions": 1, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpRequestAggregator.java"}, {"insertions": 54, "deletions": 11, "lines": 65, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpResponseAggregator.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpMessageAggregator.java"}, {"insertions": 24, "deletions": 0, "lines": 24, "filePath": "core/src/test/java/com/linecorp/armeria/internal/DefaultHttpRequestTest.java"}], "commitDateTime": "2018-03-02 12:20:36", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.HttpRequestAggregator.onHeaders(com.linecorp.armeria.common.HttpHeaders)"}], "spoonFilePath": "HttpRequestAggregator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.DefaultHttpRequestTest.splitHeaders()"}], "spoonFilePath": "DefaultHttpRequestTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.DefaultHttpResponseTest.splitHeaders()"}], "spoonFilePath": "DefaultHttpResponseTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.HttpResponseAggregator.onData(com.linecorp.armeria.common.HttpData)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.HttpResponseAggregator.State"}, {"UPD": 0, "TOT": 5, "MOV": 2, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.HttpResponseAggregator"}, {"UPD": 1, "TOT": 16, "MOV": 8, "INS": 5, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.HttpResponseAggregator.onHeaders(com.linecorp.armeria.common.HttpHeaders)"}], "spoonFilePath": "HttpResponseAggregator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.HttpMessageAggregator"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.HttpMessageAggregator.onData(com.linecorp.armeria.common.HttpData)"}], "spoonFilePath": "HttpMessageAggregator.java"}]}, {"nameRev": "bab293b2493e3081cbd7478b0e7f7fa898192206 tags/armeria-0.59.0~34", "commitMessage": "Handle split headers in ArmeriaCallSubscriber (#1024)\n\nMotivation:\r\n\r\nSome HTTP/2 implementations can send additional headers after sending a\r\nnon-informational HEADERS frame.\r\n\r\nArmeriaCallSubscriber will fail with NPE because it assumes HttpHeaders\r\nalways have a `:status` header, but it's not the case of split headers.\r\n\r\nModifications:\r\n\r\n- Append the HTTP headers received after the first non-informational\r\n  HTTP headers\r\n- Defer the call to `Response.Builder.body()` so that we can handle\r\n  `content-type` or `content-length` header even if it is not in the\r\n  first HEADERS frame.\r\n\r\nResult:\r\n\r\n- Fixes #1014", "commitParents": ["3aa9f2ee934322372995f0bbff0995bf748ae7f9"], "spoonStatsSkippedReason": "", "commitHash": "bab293b2493e3081cbd7478b0e7f7fa898192206", "authoredDateTime": "2018-02-23 18:12:58", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 33, "deletions": 4, "lines": 37, "filePath": "retrofit2/src/test/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallSubscriberTest.java"}, {"insertions": 35, "deletions": 15, "lines": 50, "filePath": "retrofit2/src/main/java/com/linecorp/armeria/client/retrofit2/ArmeriaCallSubscriber.java"}], "commitDateTime": "2018-02-23 18:12:58", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 3, "TOT": 34, "MOV": 13, "INS": 10, "DEL": 8, "spoonMethodName": "com.linecorp.armeria.client.retrofit2.ArmeriaCallSubscriber.onNext(com.linecorp.armeria.common.HttpObject)"}, {"UPD": 2, "TOT": 8, "MOV": 2, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retrofit2.ArmeriaCallSubscriber"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retrofit2.ArmeriaCallSubscriber.onComplete()"}], "spoonFilePath": "ArmeriaCallSubscriber.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 1, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retrofit2.ArmeriaCallSubscriberTest"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retrofit2.ArmeriaCallSubscriberTest.ManualMockCallback"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retrofit2.ArmeriaCallSubscriberTest.splitHeaders()"}], "spoonFilePath": "ArmeriaCallSubscriberTest.java"}]}, {"nameRev": "3aa9f2ee934322372995f0bbff0995bf748ae7f9 tags/armeria-0.59.0~35", "commitMessage": "Allow overriding ':authority' header (#1017)\n\nMotivation:\r\n\r\nSome L7 reverse proxies such as Linkerd requires a user to send a\r\ndifferent ':authority' header than the actual host name.\r\n\r\nModification:\r\n\r\n- Do not blacklist ':authority' header from ClientOptions.HTTP_HEADERS.\r\n\r\nResult:\r\n\r\n- Partially fix for #1014", "commitParents": ["252ee6d3fd33f81922ef0424b0d3b762c1f58957"], "spoonStatsSkippedReason": "", "commitHash": "3aa9f2ee934322372995f0bbff0995bf748ae7f9", "authoredDateTime": "2018-02-23 14:39:24", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 5, "deletions": 3, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientDelegate.java"}, {"insertions": 43, "deletions": 13, "lines": 56, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java"}, {"insertions": 0, "deletions": 1, "lines": 1, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientOptions.java"}], "commitDateTime": "2018-02-23 14:39:24", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder).5"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder).4"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testAuthorityOverridableByRequestHeader()"}, {"UPD": 1, "TOT": 8, "MOV": 2, "INS": 1, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testUserAgentOverridableByClientOption()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testAuthorityOverridableByClientOption()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder).6"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 4, "TOT": 11, "MOV": 2, "INS": 1, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testUserAgentOverridableByRequestHeader()"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testHeaderOverridableByClientOption(java.lang.String,io.netty.util.AsciiString,java.lang.String)"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testHeaderOverridableByRequestHeader(java.lang.String,io.netty.util.AsciiString,java.lang.String)"}], "spoonFilePath": "HttpClientIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.ClientOptions"}], "spoonFilePath": "ClientOptions.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 8, "MOV": 2, "INS": 3, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.HttpClientDelegate.autoFillHeaders(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.client.Endpoint,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "HttpClientDelegate.java"}]}], "url": "https://github.com/line/armeria/issues/1014", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "H2 with Linkerd", "statsSkippedReason": "", "user": "daveconde", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 3, "alsoFixesPhrase": 0}, "body": "I am trying to get retrofit to proxy via Linkerd using h2c. I need to be able to override the authority header as mentioned [here](https://linkerd.io/getting-started/k8s/) while still keeping the URL pointing at the linkerd host and port. How do I set this using the armeria client?\r\n\r\nThanks", "labels": ["defect"]}, {"created": "2018-02-20 10:56:32", "user": "anuraaga", "body": "Currently, `HttpStatusBasedRetryStrategy` ignores exceptions in the result. It is common to have exceptions like `ClosedSessionException`, which should be retried since they can be random socket closures, so it seems like a bad default to ignore the exceptions. Should we have it default to retrying on exception?", "closed": "2018-03-08 13:07:59", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1013", "ttf": 16.00027777777778, "commits": {}, "labels": ["defect"], "title": "HttpStatusBasedRetryStrategy should allow retrying on exceptions rather than just HTTP status"}, {"created": "2018-02-13 00:59:28", "user": "tanakeeeeen", "body": "Hi\r\nI wanna use the armeria BOM, but it seems to be lack of armeria core artifacts as below.\r\nhttp://repo1.maven.org/maven2/com/linecorp/armeria/armeria-bom/0.57.0/armeria-bom-0.57.0.pom\r\narmeria\r\narmeria-grpc\r\narmeria-jetty\r\n...etc\r\n\r\nCould you add the artifacts as above to BOM?", "closed": "2018-03-06 02:39:40", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1008", "ttf": 21.00027777777778, "commits": {}, "labels": ["defect"], "title": "Lack of armeria essential artifacts in the BOM"}, {"created": "2018-02-12 08:18:28", "commits": {"1e1f965ca1869cd4d7662030cd6261a754df69c3": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-02-19 09:26:26", "filteredCommits": [], "commitsDetails": [{"nameRev": "1e1f965ca1869cd4d7662030cd6261a754df69c3 tags/armeria-0.59.0~43", "commitMessage": "Remove ZooKeeperEndpointGroup#Mode (#1006)\n\nMotivation:\r\n\r\n- The constructor of ZooKeeperUpdatingListener (and underlying ZooKeeperRegistration) does not provide a way to specify Mode to use; Actually, its value is fixed to Mode.IN_CHILD_NODES and there is no way to change it.\r\n- Even if ZooKeeperUpdatingListener and ZooKeeperRegistration support Mode parameter, there is another problem: Zookeeper can't detect whether the server registered in node value is alive; Since it is a value of Persistent Node.\r\n\r\nModifications:\r\n\r\n- Remove ZooKeeperEndpointGroup.Mode\r\n- Fix type: endPoint -> endpoint\r\n\r\nResult:\r\n\r\n- Resolves #1005", "commitParents": ["b2c1f53072b80d18170ffdeeba4445a2bb01e0b2"], "spoonStatsSkippedReason": "", "commitHash": "1e1f965ca1869cd4d7662030cd6261a754df69c3", "authoredDateTime": "2018-02-19 18:26:25", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java"}, {"insertions": 1, "deletions": 4, "lines": 5, "filePath": "site/src/sphinx/advanced-zookeeper.rst"}, {"insertions": 9, "deletions": 42, "lines": 51, "filePath": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/EndpointGroupTest.java"}, {"insertions": 30, "deletions": 69, "lines": 99, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/client/zookeeper/ZooKeeperEndpointGroup.java"}], "commitDateTime": "2018-02-19 18:26:25", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup.createListener(com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup$Mode)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup.Mode"}, {"UPD": 0, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 5, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.ZooKeeperEndpointGroup"}], "spoonFilePath": "ZooKeeperEndpointGroup.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListener"}], "spoonFilePath": "ZooKeeperUpdatingListener.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.endpointGroups()"}, {"UPD": 0, "TOT": 5, "MOV": 4, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.testUpdateEndpointGroup()"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.connectZk()"}], "spoonFilePath": "EndpointGroupTest.java"}]}], "url": "https://github.com/line/armeria/issues/1005", "ttf": 7.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Mode.IN_NODE_VALUE in Zookeeper-based service discovery is meaningless", "statsSkippedReason": "", "user": "dongjinleekr", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I found this problem while I was working on #882.\r\n\r\n1. The constructor of `ZooKeeperUpdatingListener` (and underlying `ZooKeeperRegistration`) does not provide a way to specify `Mode` to use; Actually, its value is fixed to `Mode.IN_CHILD_NODES` and there is no way to change it.\r\n2. `ZooKeeperRegistrationTest` also tests the case of `Mode.IN_CHILD_NODES` only.\r\n3. Even if `ZooKeeperUpdatingListener` and `ZooKeeperRegistration` support `Mode` parameter, there is another problem: Zookeeper can't detect whether the server registered in node value is alive; Since it is a value of Persistent Node.\r\n\r\nSo: `Mode` should be removed and [the documentation](https://github.com/line/armeria/tree/master/site/src/sphinx/advanced-zookeeper.rst) should also be updated, before progressing #882. (In that update, Zookeeper-based service discovery feature is implemented with `CuratorFramework` instance only.)", "labels": ["breaking change", "defect"]}, {"created": "2018-02-09 06:42:55", "user": "sh1n1chi8acker", "body": "Hi, I'm using shaded jar, but it contains redundant dependencies.\r\n\r\nhttps://line.github.io/armeria/setup-maven.html\r\n```\r\nArmeria also provides its artifacts as a shaded JAR so that it can coexist with other components better. The following is the list of the shaded dependencies:\r\n\r\nCaffeine\r\ncompletable-futures\r\nfastutil\r\nGuava\r\nJCTools\r\nReflections\r\n```\r\n\r\nBut armeria-shaded:jar:0.58.0 contains\r\n\r\n```\r\n[INFO] +- com.linecorp.armeria:armeria-shaded:jar:0.58.0:compile\r\n[INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.4:compile\r\n[INFO] |  +- com.fasterxml.jackson.core:jackson-core:jar:2.9.4:compile\r\n[INFO] |  +- com.github.ben-manes.caffeine:caffeine:jar:2.6.1:compile\r\n[INFO] |  +- com.google.code.findbugs:jsr305:jar:3.0.2:compile\r\n[INFO] |  +- com.google.guava:guava:jar:24.0-jre:compile\r\n[INFO] |  |  \\- org.checkerframework:checker-compat-qual:jar:2.3.2:compile\r\n[INFO] |  +- com.spotify:completable-futures:jar:0.3.2:compile\r\n[INFO] |  +- io.micrometer:micrometer-core:jar:1.0.0-rc.9:compile\r\n[INFO] |  |  +- org.hdrhistogram:HdrHistogram:jar:2.1.10:compile\r\n[INFO] |  |  \\- org.latencyutils:LatencyUtils:jar:2.0.3:compile\r\n[INFO] |  +- io.netty:netty-codec-http2:jar:4.1.21.Final:compile\r\n[INFO] |  |  +- io.netty:netty-codec-http:jar:4.1.21.Final:compile\r\n[INFO] |  |  |  \\- io.netty:netty-codec:jar:4.1.21.Final:compile\r\n[INFO] |  |  \\- io.netty:netty-handler:jar:4.1.21.Final:compile\r\n[INFO] |  +- io.netty:netty-resolver-dns:jar:4.1.21.Final:compile\r\n[INFO] |  |  +- io.netty:netty-resolver:jar:4.1.21.Final:compile\r\n[INFO] |  |  \\- io.netty:netty-codec-dns:jar:4.1.21.Final:compile\r\n[INFO] |  +- io.netty:netty-tcnative-boringssl-static:jar:2.0.7.Final:compile\r\n[INFO] |  +- io.netty:netty-transport:jar:4.1.21.Final:compile\r\n[INFO] |  |  \\- io.netty:netty-buffer:jar:4.1.21.Final:compile\r\n[INFO] |  +- io.netty:netty-transport-native-epoll:jar:linux-x86_64:4.1.21.Final:compile\r\n[INFO] |  |  +- io.netty:netty-common:jar:4.1.21.Final:compile\r\n[INFO] |  |  \\- io.netty:netty-transport-native-unix-common:jar:4.1.21.Final:compile\r\n[INFO] |  +- io.netty:netty-transport-native-unix-common:jar:linux-x86_64:4.1.21.Final:compile\r\n[INFO] |  +- it.unimi.dsi:fastutil:jar:8.1.1:compile\r\n[INFO] |  +- org.javassist:javassist:jar:3.22.0-GA:compile\r\n[INFO] |  +- org.jctools:jctools-core:jar:2.1.1:compile\r\n[INFO] |  \\- org.reactivestreams:reactive-streams:jar:1.0.2:compile\r\n```\r\n\r\nAs of armeria-shaded:jar:0.55, not contains\r\n```\r\n[INFO] +- com.linecorp.armeria:armeria-shaded:jar:0.55.1:compile\r\n[INFO] |  +- com.fasterxml.jackson.core:jackson-core:jar:2.9.2:compile\r\n[INFO] |  +- com.fasterxml.jackson.core:jackson-annotations:jar:2.9.2:compile\r\n[INFO] |  +- io.micrometer:micrometer-core:jar:1.0.0-rc.5:compile\r\n[INFO] |  |  +- org.hdrhistogram:HdrHistogram:jar:2.1.10:compile\r\n[INFO] |  |  \\- org.latencyutils:LatencyUtils:jar:2.0.3:compile\r\n[INFO] |  +- io.micrometer:micrometer-registry-prometheus:jar:1.0.0-rc.5:compile\r\n[INFO] |  +- io.netty:netty-transport:jar:4.1.17.Final:compile\r\n[INFO] |  |  +- io.netty:netty-buffer:jar:4.1.17.Final:compile\r\n[INFO] |  |  \\- io.netty:netty-resolver:jar:4.1.17.Final:compile\r\n[INFO] |  +- io.netty:netty-codec-http2:jar:4.1.17.Final:compile\r\n[INFO] |  |  +- io.netty:netty-codec-http:jar:4.1.17.Final:compile\r\n[INFO] |  |  |  \\- io.netty:netty-codec:jar:4.1.17.Final:compile\r\n[INFO] |  |  \\- io.netty:netty-handler:jar:4.1.17.Final:compile\r\n[INFO] |  +- io.netty:netty-resolver-dns:jar:4.1.17.Final:compile\r\n[INFO] |  |  \\- io.netty:netty-codec-dns:jar:4.1.17.Final:compile\r\n[INFO] |  +- io.netty:netty-transport-native-unix-common:jar:linux-x86_64:4.1.17.Final:compile\r\n[INFO] |  |  \\- io.netty:netty-common:jar:4.1.17.Final:compile\r\n[INFO] |  +- io.netty:netty-transport-native-epoll:jar:linux-x86_64:4.1.17.Final:compile\r\n[INFO] |  |  \\- io.netty:netty-transport-native-unix-common:jar:4.1.17.Final:compile\r\n[INFO] |  +- io.netty:netty-tcnative-boringssl-static:jar:2.0.7.Final:compile\r\n[INFO] |  +- io.prometheus:simpleclient_common:jar:0.1.0:compile\r\n[INFO] |  |  \\- io.prometheus:simpleclient:jar:0.1.0:compile\r\n[INFO] |  +- org.reactivestreams:reactive-streams:jar:1.0.1:compile\r\n[INFO] |  \\- org.javassist:javassist:jar:3.22.0-GA:compile\r\n```\r\n", "closed": "2018-02-09 08:02:49", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1001", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "Shaded Armeria jar contains redundant dependencies"}, {"created": "2018-02-09 03:07:26", "commits": {"075924697ce800cbdcb934d78e3f5e82379ceda1": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-03-02 08:03:05", "filteredCommits": [], "commitsDetails": [{"nameRev": "075924697ce800cbdcb934d78e3f5e82379ceda1 tags/armeria-0.59.0~27", "commitMessage": "Make sure RPC information is set to metrics for unframed requests. (#1031)\n\n- Fixes #1000\r\n\r\n", "commitParents": ["2e3596448525e7550e065467de70786905ebac34"], "spoonStatsSkippedReason": "", "commitHash": "075924697ce800cbdcb934d78e3f5e82379ceda1", "authoredDateTime": "2018-03-02 17:03:05", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 6, "deletions": 0, "lines": 6, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/UnframedGrpcService.java"}, {"insertions": 3, "deletions": 0, "lines": 3, "filePath": "grpc/src/test/proto/com/linecorp/armeria/grpc/testing/test.proto"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcDocServicePluginTest.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceTest.java"}, {"insertions": 51, "deletions": 0, "lines": 51, "filePath": "grpc/src/test/java/com/linecorp/armeria/it/grpc/GrpcMetricsIntegrationTest.java"}], "commitDateTime": "2018-03-02 17:03:05", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcDocServicePluginTest.newServiceInfo()"}], "spoonFilePath": "GrpcDocServicePluginTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.grpc.GrpcMetricsIntegrationTest.makeUnframedRequest(java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.grpc.GrpcMetricsIntegrationTest.unframed()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.grpc.GrpcMetricsIntegrationTest.TestServiceImpl.unaryCall2(com.linecorp.armeria.grpc.testing.Messages.SimpleRequest,io.grpc.stub.StreamObserver)"}], "spoonFilePath": "GrpcMetricsIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.UnframedGrpcService.serve(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "UnframedGrpcService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceTest.pathMappings()"}], "spoonFilePath": "GrpcServiceTest.java"}]}], "url": "https://github.com/line/armeria/issues/1000", "ttf": 21.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`MeterIdPrefixFunction.ofDefault` doesn't collect service level metrics for unframed request", "statsSkippedReason": "", "user": "openaphid", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Please refer to https://gist.github.com/openaphid/63ee584a4b7bb4c646137ff5eea92dea for a reproducible case.\r\n\r\nA custom `MeterIdPrefixFunction` could extract method name from `ServiceRequestContext` correctly, but I think there are some execution order issues in `UnframedGrpcService` and `GrpcService`.\r\n\r\nFor unframed requests, `requestContent` is not attached to context log:\r\nhttps://github.com/line/armeria/blob/d3334ce5c25e9ecb45b0c94c54b9b99f2fb0e9ea/grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java#L143", "labels": ["defect"]}, {"created": "2018-02-08 02:30:58", "commits": {"ad976eeec827ad84cbccec7a2900401e9f4287e2": {"commitGHEventType": "closed", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-02-20 03:11:17", "filteredCommits": [], "commitsDetails": [{"nameRev": "ad976eeec827ad84cbccec7a2900401e9f4287e2 tags/armeria-0.59.0~42", "commitMessage": "Unwrap Future of RpcResponse to encode service response correctly (#998)\n\nRelated: #997 #996\r\nOriginal fix by @kojilin  \r\n\r\nMotivation:\r\n\r\nThrottlingService does not handle a RpcResponse correctly, resulting in a RpcResponse of\r\na RpcResponse.\r\n\r\nModifications:\r\n\r\n- Handle RpcResponse specially.\r\n\r\nResult:\r\n\r\n- Fixes #996", "commitParents": ["1e1f965ca1869cd4d7662030cd6261a754df69c3"], "spoonStatsSkippedReason": "", "commitHash": "ad976eeec827ad84cbccec7a2900401e9f4287e2", "authoredDateTime": "2018-02-20 12:11:15", "commitGHEventType": "closed", "commitGitStats": [{"insertions": 89, "deletions": 0, "lines": 89, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/thrift/ThrottlingRpcServiceTest.java"}, {"insertions": 12, "deletions": 0, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/common/RpcResponse.java"}, {"insertions": 30, "deletions": 0, "lines": 30, "filePath": "core/src/test/java/com/linecorp/armeria/common/RpcResponseTest.java"}], "commitDateTime": "2018-02-20 12:11:15", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.thrift.ThrottlingRpcServiceTest"}], "spoonFilePath": "ThrottlingRpcServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.from(java.util.concurrent.CompletionStage)"}], "spoonFilePath": "RpcResponse.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.RpcResponseTest.failedFromResponseFuture()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.RpcResponseTest.successfulFromResponseFuture()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.RpcResponseTest.failedFromFailedResponseFuture()"}], "spoonFilePath": "RpcResponseTest.java"}]}], "url": "https://github.com/line/armeria/issues/996", "ttf": 12.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Throttling decorator for rpc can't works well", "statsSkippedReason": "", "user": "kojilin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "due to https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/server/throttling/ThrottlingService.java#L70\r\n\r\nit may create RpcResponse of RpcResponse.\r\n\r\nI think 1 way is make `RpcResponse#from` supports `CompletableFuture<? extends RpcResponse>` like\r\n```\r\nstatic RpcResponse from(CompletionStage<?> stage) {\r\n        requireNonNull(stage, \"stage\");\r\n        final DefaultRpcResponse res = new DefaultRpcResponse();\r\n        stage.whenComplete((value, cause) -> {\r\n            if (cause != null) {\r\n                res.completeExceptionally(cause);\r\n                return;\r\n            }\r\n            if (value instanceof RpcResponse) {\r\n                ((RpcResponse) value).whenComplete((rpcResponseResult, rpcResponseCause) -> {\r\n                    if (rpcResponseCause != null) {\r\n                        res.completeExceptionally(Exceptions.peel(rpcResponseCause));\r\n                        return;\r\n                    }\r\n                    res.complete(rpcResponseResult);\r\n                });\r\n            } else {\r\n                res.complete(value);\r\n            }\r\n        });\r\n        return res;\r\n    }\r\n```\r\n\r\nBut this make me think how about `CompletableFuture<CompletableFuture<RpcResponse>>` or nested `RpcResponse`. or we should separate RPC's implementation of `ThrottlingRpcService` from `ThrottlingService`?", "labels": ["defect"]}, {"created": "2018-01-25 03:49:45", "commits": {"152f8b92c4a5734d6104f74af966773fe7d07394": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-01-26 04:03:50", "filteredCommits": [], "commitsDetails": [{"nameRev": "152f8b92c4a5734d6104f74af966773fe7d07394 tags/armeria-0.57.0~14", "commitMessage": "Keep track of created channels to close them if the connection pool is closed (#975)\n\nAlso changes the behavior to wait for channel close, as it seems like it's intended to block (similar to how the factory blocks on worker group shutdown when closed).\r\n\r\nFixes #972", "commitParents": ["4983aaf1b741f33b87d3a302b3d076d0e29f9a6b"], "spoonStatsSkippedReason": "", "commitHash": "152f8b92c4a5734d6104f74af966773fe7d07394", "authoredDateTime": "2018-01-26 13:03:49", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 51, "deletions": 13, "lines": 64, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/DefaultKeyedChannelPool.java"}, {"insertions": 6, "deletions": 1, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java"}, {"insertions": 63, "deletions": 0, "lines": 63, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientIntegrationTest.java"}], "commitDateTime": "2018-01-26 13:03:49", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Http2RequestDecoder.onStreamRemoved(io.netty.handler.codec.http2.Http2Stream)"}], "spoonFilePath": "Http2RequestDecoder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.testCloseClientFactory()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientIntegrationTest"}], "spoonFilePath": "HttpClientIntegrationTest.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 17, "MOV": 11, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.close()"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.notifyConnect(java.lang.Object,io.netty.util.concurrent.Future,io.netty.util.concurrent.Promise)"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.doClose(boolean)"}, {"UPD": 1, "TOT": 4, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.acquireHealthyFromPoolOrNew(java.lang.Object,io.netty.util.concurrent.Promise)"}], "spoonFilePath": "DefaultKeyedChannelPool.java"}]}], "url": "https://github.com/line/armeria/issues/972", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "ClientFactory.close doesn't actually close in-progress connections", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I was trying to simulate a scenario where a client opens a connection to the server (e.g., starts a gRPC stream) but then forcibly closes the socket. I would expect `ClientFactory.close` to close the socket, but it doesn't actually seem to. It calls `DefaultKeyedChannelPool.close`, but that only keeps track of available connections, not offered connections, so the actual stream doesn't seem to be affected. Should the pool also keep track of offered connections to allow closing them when needed?", "labels": ["defect"]}, {"created": "2018-01-24 13:50:34", "commits": {"4cbb5e30faae8e95dfd196ba7061c58eda1b3d47": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-01-26 04:04:32", "filteredCommits": [], "commitsDetails": [{"nameRev": "4cbb5e30faae8e95dfd196ba7061c58eda1b3d47 tags/armeria-0.57.0~13", "commitMessage": "Closes the request stream message when the HTTP/2 stream is removed from the connection (#973)\n\nIn the case of an abrupt HTTP/2 connection close, HTTP/2 streams will be removed from the connection before the client has sent an END_STREAM frame. Without handling this and closing the request stream message, there is no way for server logic to handle this error for e.g., cleanup actions, especially if they disable response timeout because the stream is intended to have infinite length.\r\n\r\nBecause clients are expected to send END_STREAM in normal circumstances, this case is handled as a ClosedSessionException.\r\n\r\nLogic change originally proposed by @tobias-.\r\n\r\nFixes #971", "commitParents": ["152f8b92c4a5734d6104f74af966773fe7d07394"], "spoonStatsSkippedReason": "", "commitHash": "4cbb5e30faae8e95dfd196ba7061c58eda1b3d47", "authoredDateTime": "2018-01-26 13:04:31", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 53, "deletions": 0, "lines": 53, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java"}, {"insertions": 3, "deletions": 0, "lines": 3, "filePath": "grpc/src/test/proto/com/linecorp/armeria/grpc/testing/test.proto"}], "commitDateTime": "2018-01-26 13:04:31", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.UnitTestServiceImpl.streamClientCancels(io.grpc.stub.StreamObserver)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.clientSocketClosedHttp2()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.setUp()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest"}], "spoonFilePath": "GrpcServiceServerTest.java"}]}], "url": "https://github.com/line/armeria/issues/971", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Get client disconnect notifications in bidirectional async gRPC", "statsSkippedReason": "", "user": "tobias-", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "We don't get any notification when the client closes the connection when using asynchronous bidirectional stream calls.\r\n\r\nhttps://github.com/SourceForgery/tachikoma/blob/ddfb03ba5d25f3de61e8fe1e1b2cb9be2aba0eb4/tachikoma-grpc/src/main/kotlin/com/sourceforgery/tachikoma/mta/MTAEmailQueueService.kt#L31\r\n\r\nWe get neither `onComplete()`, nor `onError()` in the ~ResponseObserver~`StreamObserver` when the client closes the socket.\r\n\r\nJust to clarify the code, the `getEmails()` method will return immediately, but will hook up a listener to the RabbitMQ which will then deliver messages via `responseObserver.onNext(response)`. The RabbitMQ will stop delivering messages when the future is finished (which will only happen in response to exceptions or close).\r\n\r\nThe lifetime of this call is counted in months, as it's more of a subscription than anything else.", "labels": ["defect"]}, {"created": "2018-01-22 13:16:06", "commits": {"d3334ce5c25e9ecb45b0c94c54b9b99f2fb0e9ea": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-01-31 08:15:01", "filteredCommits": [], "commitsDetails": [{"nameRev": "d3334ce5c25e9ecb45b0c94c54b9b99f2fb0e9ea tags/armeria-0.57.0~7", "commitMessage": "Only cache non-exact path mappings when opted-in by the service. (#981)\n\nCurrently, prefix mappings used with an infinite number of URLs (common for a frontend proxy) will cause cache-thrashing. While it can be disabled for these situations, defaulting to exact paths + our common services should be good for most cases either way.\r\n\r\nFixes #967", "commitParents": ["a55ca6a5a6b50c3377b4ea157a149571d777fa6b"], "spoonStatsSkippedReason": "", "commitHash": "d3334ce5c25e9ecb45b0c94c54b9b99f2fb0e9ea", "authoredDateTime": "2018-01-31 17:15:00", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java"}, {"insertions": 16, "deletions": 0, "lines": 16, "filePath": "core/src/test/java/com/linecorp/armeria/server/file/HttpFileServiceTest.java"}, {"insertions": 48, "deletions": 0, "lines": 48, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java"}, {"insertions": 15, "deletions": 0, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/server/file/HttpFileService.java"}, {"insertions": 10, "deletions": 0, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/server/Service.java"}, {"insertions": 22, "deletions": 0, "lines": 22, "filePath": "core/src/main/java/com/linecorp/armeria/internal/PathAndQuery.java"}, {"insertions": 7, "deletions": 0, "lines": 7, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "grpc/src/main/java/com/linecorp/armeria/server/grpc/GrpcService.java"}, {"insertions": 7, "deletions": 0, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/server/DecoratingService.java"}], "commitDateTime": "2018-01-31 17:15:00", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.setUp()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcServiceServerTest.unary_normal()"}], "spoonFilePath": "GrpcServiceServerTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.shouldCachePath(java.lang.String,java.lang.String,com.linecorp.armeria.server.PathMapping)"}], "spoonFilePath": "Service.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 6, "MOV": 3, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.HttpServerHandler.handleRequest(io.netty.channel.ChannelHandlerContext,com.linecorp.armeria.server.DecodedHttpRequest)"}], "spoonFilePath": "HttpServerHandler.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 4, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerTest.1.configure(com.linecorp.armeria.server.ServerBuilder).17"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerTest.resetOptions()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerTest.testPrefixPath_cacheForced()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerTest.testExactPathCached()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerTest.testPrefixPathNotCached()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerTest.1.configure(com.linecorp.armeria.server.ServerBuilder).17.serve(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest)"}], "spoonFilePath": "HttpServerTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.HttpFileServiceTest.setUp()"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.HttpFileServiceTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.HttpFileServiceTest.testClassPathGet()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.HttpFileServiceTest.testGetPreCompressedSupportsNone()"}], "spoonFilePath": "HttpFileServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.HttpFileService.shouldCachePath(java.lang.String,java.lang.String,com.linecorp.armeria.server.PathMapping)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.HttpFileService.OrElseHttpService.shouldCachePath(java.lang.String,java.lang.String,com.linecorp.armeria.server.PathMapping)"}], "spoonFilePath": "HttpFileService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.grpc.GrpcService.shouldCachePath(java.lang.String,java.lang.String,com.linecorp.armeria.server.PathMapping)"}], "spoonFilePath": "GrpcService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.PathAndQuery.clearCachedPaths()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.PathAndQuery.cachedPaths()"}], "spoonFilePath": "PathAndQuery.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DecoratingService.shouldCachePath(java.lang.String,java.lang.String,com.linecorp.armeria.server.PathMapping)"}], "spoonFilePath": "DecoratingService.java"}]}], "url": "https://github.com/line/armeria/issues/967", "ttf": 8.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Disable path mapping cache for prefix mapping", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "We currently cache a path mapping result as long as the response status is successful and the mapping does not have any path parameters: https://github.com/line/armeria/blob/8e6cbc36a92de7ae3e03a41531e7ab486cd0121a/core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java#L334-L338\r\n\r\nThis does not work well with prefix mapping which can map to infinit number of paths, because the mapping result will always have zero path parameters.\r\n\r\nTo address this issue, we could:\r\n\r\n1. Disable caching for prefix mapping by default\r\n2. Provide a way to enable path mapping caching for some special cases, e.g. `HttpFileService` would use prefix mapping but still could use cache because it will return successful response status for a limited number of paths.\r\n   - Annotation? e.g. `@EnablePathMappingCache`\r\n   - Interface?\r\n\r\n     ```java\r\n     public interface SomeInterfaceThatServiceWillImplement {\r\n         boolean canCache(PathMapping, PathAndQuery);\r\n     }\r\n     ```\r\n\r\nThoughts?\r\n\r\n/cc @hyangtack @huydx @anuraaga ", "labels": ["defect", "new feature"]}, {"created": "2018-01-01 17:38:15", "commits": {"c2014b6f453f7b67b8903e3f1954e159d4ece1b2": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-01-02 10:23:22", "filteredCommits": [], "commitsDetails": [{"nameRev": "c2014b6f453f7b67b8903e3f1954e159d4ece1b2 tags/armeria-0.56.1~5", "commitMessage": "Fix NoSuchElementException in ZooKeeperUpdatingListener (#936)\n\nMotivation:\r\n\r\nZooKeeperUpdatingListener attempts to access `Server.activePort()` in\r\n`serverStarting()`. `Server.activePort()` is supposed to be available in\r\n`serverStarted()`.\r\n\r\nModifications:\r\n\r\nUse `serverStarted()` rather than `serverStarting()`.\r\n\r\nResult:\r\n\r\n- Fixes #933", "commitParents": ["2793fc14ddf9b6ba9a6afef07acbe6b9fecfc61e"], "spoonStatsSkippedReason": "", "commitHash": "c2014b6f453f7b67b8903e3f1954e159d4ece1b2", "authoredDateTime": "2018-01-02 19:23:21", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "zookeeper/src/main/java/com/linecorp/armeria/server/zookeeper/ZooKeeperUpdatingListener.java"}], "commitDateTime": "2018-01-02 19:23:21", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListener.serverStarting(com.linecorp.armeria.server.Server)"}], "spoonFilePath": "ZooKeeperUpdatingListener.java"}]}], "url": "https://github.com/line/armeria/issues/933", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "java.util.NoSuchElementException: No value present when using ZooKeeperUpdatingListener", "statsSkippedReason": "", "user": "liuzhengyang", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Hi, I am new to armeria. I build a simple project using armeria 0.5.60 according to [armeria documentation](http://line.github.io/armeria/index.html), everything goes well until using 'Service discovery with ZooKeeper'. I got this exception\r\n```\r\njava.util.NoSuchElementException: No value present\r\n\tat java.util.Optional.get(Optional.java:135)\r\n\tat java.util.concurrent.CompletableFuture.reportJoin(CompletableFuture.java:375)\r\n\tat com.linecorp.armeria.server.zookeeper.ZooKeeperUpdatingListener.serverStarting(ZooKeeperUpdatingListener.java:69)\r\n\tat java.util.concurrent.CompletableFuture.join(CompletableFuture.java:1934)\r\n\tat com.linecorp.armeria.server.Server$StateManager.notifyState(Server.java:585)\r\n\tat com.github.liuzhengyang.server.Bootstrap.main(Bootstrap.java:38)\r\n\tat com.linecorp.armeria.server.Server$StateManager.enterStarting(Server.java:541)\r\nCaused by: java.lang.IllegalStateException: failed to notify all server listeners\r\n\tat com.linecorp.armeria.server.Server.start(Server.java:250)\r\n\tat com.linecorp.armeria.server.Server$StateManager.enterStarting(Server.java:542)\r\n\tat com.linecorp.armeria.server.Server.start(Server.java:235)\r\n\tat com.linecorp.armeria.server.Server.start(Server.java:250)\r\n\tat com.github.liuzhengyang.server.Bootstrap.main(Bootstrap.java:38)\r\n\tat com.linecorp.armeria.server.Server.start(Server.java:235)\r\n\t... 1 more\r\n```\r\nAnd here is my example code.\r\n```\r\npublic class Bootstrap {\r\n    public static void main(String[] args) {\r\n\r\n        ServerBuilder sb = new ServerBuilder();\r\n        sb.port(8081, \"http\");\r\n\r\n        sb.serviceUnder(\"/hello\",\r\n                        new GrpcServiceBuilder()\r\n                                .addService(new MyHelloService())\r\n                                .supportedSerializationFormats(GrpcSerializationFormats.values())\r\n                                .enableUnframedRequests(true)\r\n                                .build());\r\n        sb.accessLogWriter(AccessLogWriters.common());\r\n\r\n        sb.serviceUnder(\"/docs\", new DocService());\r\n\r\n        Server server = sb.build();\r\n\r\n        ServerListener serverListener = new ZooKeeperUpdatingListener(\"localhost:2181\", \"/myProducionEndpoints\", 1000);\r\n        server.addListener(serverListener);\r\n\r\n        server.start().join();\r\n    }\r\n}\r\n```\r\nIf i remove the `ServerListener`, it works well. And i looked into `com.linecorp.armeria.server.Server`, found `primaryActivePort` is set in `ServerPortStartListener`, but `ZooKeeperUpdatingListener.serverStarting` is triggered before `ServerPortStartListener` added to Server start future listeners.\r\n\r\nDid I miss something?\r\nI am not sure whether I explained this problem clear or not. Thanks in advance.", "labels": ["defect"]}, {"created": "2017-12-28 11:55:01", "commits": {"e12a8ff831bc83a9a2d4b491ec2ccb6fcea70223": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-12-29 06:24:10", "filteredCommits": [], "commitsDetails": [{"nameRev": "e12a8ff831bc83a9a2d4b491ec2ccb6fcea70223 tags/armeria-0.56.1~9", "commitMessage": "Fix incorrect cookie split (#931)\n\nMotivation:\r\n\r\nThe pull request #929 introduced the violation of RFC 7540 section\r\n8.1.2.5:\r\n\r\n> If there are multiple Cookie header fields after decompression, these\r\n> MUST be concatenated into a single octet string ..\r\n\r\nModifications:\r\n\r\n- Merge and split cookies in a correct and robust way using StringJoiner\r\n  and Splitter\r\n- Inline Http2ToHttpHeaderTranslator which is used only in a single place\r\n\r\nResult:\r\n\r\n- Fixes #930", "commitParents": ["f1e373c0119837760ac14a5bb33e97b85b46b38b"], "spoonStatsSkippedReason": "", "commitHash": "e12a8ff831bc83a9a2d4b491ec2ccb6fcea70223", "authoredDateTime": "2017-12-29 15:24:09", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 108, "deletions": 118, "lines": 226, "filePath": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java"}, {"insertions": 59, "deletions": 2, "lines": 61, "filePath": "core/src/test/java/com/linecorp/armeria/internal/ArmeriaHttpUtilTest.java"}], "commitDateTime": "2017-12-29 15:24:09", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 11, "MOV": 3, "INS": 5, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toArmeria(io.netty.handler.codec.http2.Http2Headers)"}, {"UPD": 1, "TOT": 8, "MOV": 6, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.Http2ToHttpHeaderTranslator"}, {"UPD": 0, "TOT": 17, "MOV": 12, "INS": 4, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toNettyHttp1(int,com.linecorp.armeria.common.HttpHeaders,io.netty.handler.codec.http.HttpHeaders,io.netty.handler.codec.http.HttpVersion,boolean,boolean)"}, {"UPD": 8, "TOT": 18, "MOV": 8, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toNettyHttp1(com.linecorp.armeria.common.HttpHeaders)"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil"}, {"UPD": 9, "TOT": 22, "MOV": 9, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toNettyHttp2(com.linecorp.armeria.common.HttpHeaders)"}, {"UPD": 5, "TOT": 21, "MOV": 13, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.Http2ToHttpHeaderTranslator.translate(java.util.Map$Entry)"}, {"UPD": 16, "TOT": 39, "MOV": 17, "INS": 4, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toArmeria(io.netty.handler.codec.http.HttpHeaders,com.linecorp.armeria.common.HttpHeaders)"}], "spoonFilePath": "ArmeriaHttpUtil.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 9, "MOV": 8, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtilTest.testCookieSplit()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtilTest.outboundCookiesMustBeMergedForHttp1()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtilTest.inboundCookiesMustBeMergedForHttp2()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ArmeriaHttpUtilTest.inboundCookiesMustBeMergedForHttp1()"}], "spoonFilePath": "ArmeriaHttpUtilTest.java"}]}], "url": "https://github.com/line/armeria/issues/930", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "ArmeriaHttpUtil.toArmeria breakes cookie into linked list entry which will lead only the first cookie entry can be obtained", "statsSkippedReason": "", "user": "southernkasaist", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Netty's `DefaultHeaders` will only get the value of first entry after head node:\r\nhttps://github.com/netty/netty/blob/4.1/codec/src/main/java/io/netty/handler/codec/DefaultHeaders.java#L117\r\n\r\nBut in armeria's header conversion, value of cookie header is broken into linked list entries.\r\nhttps://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java#L329\r\n\r\nThis will lead armera's cookie can only obtain the first cookie entry's value.\r\n\r\nExample:\r\n```\r\ncookie: a=1; b=2;\r\n\r\nBut only a=1 will be obtained from HttpRequest#headers().get(\"cookie\").\r\n```", "labels": ["defect"]}, {"created": "2017-12-06 02:03:42", "commits": {"3584bcaf647399d9522abb4718b093489c22f85e": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-12-06 09:56:44", "filteredCommits": [], "commitsDetails": [{"nameRev": "3584bcaf647399d9522abb4718b093489c22f85e tags/armeria-0.56.0~33", "commitMessage": "Replace HttpVfs.toString() with HttpVfs.meterTag() (#896)\n\nMotivation:\r\n\r\nUsing toString() as a way to get the specific information is not a good\r\nidea in general since toString() always has the default implementation.\r\n\r\nModifications:\r\n\r\n- Add HttpVfs.meterTag()\r\n  - HttpVfs is not a functional interface anymore.\r\n- Add AbstractHttpVfs which overrides toString()\r\n- Rename the 'rootDir' tag to 'vfs'\r\n\r\nResult:\r\n\r\n- Fixes #893\r\n- HttpVfs is not a functional interface anymore due to the addition of\r\n  meterTag()\r\n- Tag name has been changed from 'rootDir' to 'vfs'.", "commitParents": ["470d55ddcfbef6df56029bf6798e8fb7f86192f1"], "spoonStatsSkippedReason": "", "commitHash": "3584bcaf647399d9522abb4718b093489c22f85e", "authoredDateTime": "2017-12-06 18:56:43", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/server/file/FileSystemHttpVfs.java"}, {"insertions": 7, "deletions": 2, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/docs/DocService.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/file/HttpFileService.java"}, {"insertions": 31, "deletions": 0, "lines": 31, "filePath": "core/src/main/java/com/linecorp/armeria/server/file/AbstractHttpVfs.java"}, {"insertions": 8, "deletions": 1, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/file/HttpVfs.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/server/file/ClassPathHttpVfs.java"}], "commitDateTime": "2017-12-06 18:56:43", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.AbstractHttpVfs"}], "spoonFilePath": "AbstractHttpVfs.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.file"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.meterTag()"}], "spoonFilePath": "HttpVfs.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.HttpFileService.serviceAdded(com.linecorp.armeria.server.ServiceConfig)"}], "spoonFilePath": "HttpFileService.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.FileSystemHttpVfs.toString()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.FileSystemHttpVfs"}], "spoonFilePath": "FileSystemHttpVfs.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.docs.DocService.DocServiceVfs"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.docs.DocService.DocServiceVfs.meterTag()"}], "spoonFilePath": "DocService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.ClassPathHttpVfs"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.file.ClassPathHttpVfs.toString()"}], "spoonFilePath": "ClassPathHttpVfs.java"}]}], "url": "https://github.com/line/armeria/issues/893", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Generate more user friendly tag of Vfs caffeine cache metrics", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Because DocServiceVfs does not implement toString method, rootDir tag in Vfs cache metrics for DocServiceVfs is hard to understand.\r\n```\r\n# HELP armeria_server_file_vfs_cache_eviction_weight_total  \r\n# TYPE armeria_server_file_vfs_cache_eviction_weight_total counter\r\narmeria_server_file_vfs_cache_eviction_weight_total{hostnamePattern=\"*\",pathMapping=\"prefix:/internal/docs/\",rootDir=\"com.linecorp.armeria.server.docs.DocService$DocServiceVfs@650997b0\",} 0.0\r\narmeria_server_file_vfs_cache_eviction_weight_total{hostnamePattern=\"*\",pathMapping=\"prefix:/internal/docs/\",rootDir=\"classpath:com/linecorp/armeria/server/docs\",} 0.0\r\n```", "labels": ["defect"]}, {"created": "2017-11-28 13:38:12", "user": "trustin", "body": "Need to understand why these timeouts occur.\r\n\r\n```\r\nGradle suite > Gradle test > com.linecorp.armeria.common.stream.PublisherBasedStreamMessageVerification.required_abortMustNotifySubscriber FAILED \r\n   java.lang.AssertionError: Did not receive expected element within 10000 ms \r\n   Caused by: \r\n      java.lang.AssertionError: Did not receive expected element within 10000 ms\r\n```\r\n\r\n```\r\nGradle suite > Gradle test > com.linecorp.armeria.common.stream.PublisherBasedStreamMessageVerification.required_spec317_mustSupportACumulativePendingElementCountUpToLongMaxValue FAILED\r\n    java.lang.AssertionError: Could not subscribe org.reactivestreams.tck.TestEnvironment$ManualSubscriberWithSubscriptionSupport@213f411f to Publisher com.linecorp.armeria.common.stream.PublisherBasedStreamMessage@41584659 within 200 ms\r\n```\r\n\r\n", "closed": "2017-11-29 06:30:23", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/873", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "Fix PublisherBasedStreamMessageVerification failures"}, {"created": "2017-11-28 09:41:46", "commits": {"73f833edabdffca76594e0f97daa93b21e5e28c9": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-12-12 00:39:57", "filteredCommits": [], "commitsDetails": [{"nameRev": "73f833edabdffca76594e0f97daa93b21e5e28c9 tags/armeria-0.56.0~26", "commitMessage": "Add addChild method to RequestLogBuilder (#900)\n\nMotivation:\r\n`RetryingClient` could not record the logs properly.\r\n\r\nModifications:\r\n- Add `addChild` to `RequestLogBuilder` to propagate the logs from child\r\n\r\nResult:\r\n- Close #869", "commitParents": ["0fbd218098670231ba66bfd0b9be7ec1a1780b9c"], "spoonStatsSkippedReason": "", "commitHash": "73f833edabdffca76594e0f97daa93b21e5e28c9", "authoredDateTime": "2017-12-12 09:39:56", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 13, "deletions": 0, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLogBuilder.java"}, {"insertions": 8, "deletions": 6, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java"}, {"insertions": 8, "deletions": 2, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java"}, {"insertions": 21, "deletions": 14, "lines": 35, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java"}, {"insertions": 8, "deletions": 0, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java"}, {"insertions": 32, "deletions": 0, "lines": 32, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java"}, {"insertions": 156, "deletions": 0, "lines": 156, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingClientWithLoggingTest.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/NoopRequestLogBuilder.java"}, {"insertions": 8, "deletions": 2, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java"}, {"insertions": 155, "deletions": 14, "lines": 169, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/DefaultRequestLog.java"}, {"insertions": 74, "deletions": 0, "lines": 74, "filePath": "core/src/test/java/com/linecorp/armeria/common/logging/DefaultRequestLogTest.java"}], "commitDateTime": "2017-12-12 09:39:56", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClientWithLoggingTest"}], "spoonFilePath": "RetryingClientWithLoggingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.onRetryingComplete(com.linecorp.armeria.client.ClientRequestContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.executeDelegate(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.Request)"}], "spoonFilePath": "RetryingClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLogTest.rpcFailure_endResponseDifferentCause()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLogTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLogTest.endResponseFailure()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLogTest.endRequestSuccess()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLogTest.addChild()"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLogTest.rpcFailure_endResponseWithoutCause()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLogTest.endResponseSuccess()"}], "spoonFilePath": "DefaultRequestLogTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.Http2ResponseDecoder.addResponse(int,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.client.DecodedHttpResponse,com.linecorp.armeria.common.logging.RequestLogBuilder,long,long)"}], "spoonFilePath": "Http2ResponseDecoder.java"}, {"spoonMethods": [{"UPD": 5, "TOT": 18, "MOV": 8, "INS": 3, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.doExecute0(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcRequest,com.linecorp.armeria.common.DefaultRpcResponse)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.completeOnException(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.DefaultRpcResponse,java.lang.Throwable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.getResponse(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcRequest)"}], "spoonFilePath": "RetryingRpcClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.Http1ResponseDecoder.addResponse(int,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.client.DecodedHttpResponse,com.linecorp.armeria.common.logging.RequestLogBuilder,long,long)"}], "spoonFilePath": "Http1ResponseDecoder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.requestStartTimeNanos()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.requestEndTimeNanos()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.responseStartTimeNanos()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.responseEndTimeNanos()"}], "spoonFilePath": "RequestLog.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.endResponse0(java.lang.Throwable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.endResponseFrom(com.linecorp.armeria.common.logging.RequestLog)"}, {"UPD": 0, "TOT": 5, "MOV": 2, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.startResponse0(boolean)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.responseStartTimeNanos()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.propagateRequestSideLog(com.linecorp.armeria.common.logging.RequestLog)"}, {"UPD": 0, "TOT": 6, "MOV": 0, "INS": 6, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.startRequest0(long,long,io.netty.channel.Channel,com.linecorp.armeria.common.SessionProtocol,java.lang.String,boolean)"}, {"UPD": 0, "TOT": 6, "MOV": 0, "INS": 6, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.startResponse0(long,long,boolean)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.toString()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.requestEndTimeNanos()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.addChild(com.linecorp.armeria.common.logging.RequestLog)"}, {"UPD": 0, "TOT": 5, "MOV": 0, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.endResponse0(long,java.lang.Throwable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.endResponseWithLastChild()"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.endRequest0(long,java.lang.Throwable)"}, {"UPD": 0, "TOT": 5, "MOV": 2, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.startRequest0(io.netty.channel.Channel,com.linecorp.armeria.common.SessionProtocol,java.lang.String,boolean)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.responseEndTimeNanos()"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.endRequest0(java.lang.Throwable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.propagateResponseSideLog(com.linecorp.armeria.common.logging.RequestLog)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.DefaultRequestLog.requestStartTimeNanos()"}], "spoonFilePath": "DefaultRequestLog.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.NoopRequestLogBuilder.endResponseWithLastChild()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.NoopRequestLogBuilder.addChild(com.linecorp.armeria.common.logging.RequestLog)"}], "spoonFilePath": "NoopRequestLogBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.addChild(com.linecorp.armeria.common.logging.RequestLog)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.endResponseWithLastChild()"}], "spoonFilePath": "RequestLogBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.closeOnException(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.DeferredHttpResponse,com.linecorp.armeria.common.HttpRequestDuplicator,java.lang.Throwable)"}, {"UPD": 0, "TOT": 8, "MOV": 1, "INS": 4, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute0(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,com.linecorp.armeria.common.DeferredHttpResponse)"}], "spoonFilePath": "RetryingHttpClient.java"}]}], "url": "https://github.com/line/armeria/issues/869", "ttf": 13.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "RetryingHttpClient has to create a new context on each retry", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "`RetryingHttpClient` currently reuses the initial `ClientRequestContext` for retry requests. This has the following issues:\r\n\r\n- `RequestLog` of the retries are not recorded.\r\n- The `RequestLog` of the original request is recorded as 'failed' prematurely. We could record it as 'succeeded' if a retry succeeded.\r\n- If there is a stateful `DecoratingClient`, which keeps its state in the context attribute map, between `RetryingHttpClient` and `HttpClientDelegate`, the `DecoratingClient` may not function correctly because the state of the retries may confuse it.\r\n\r\n/cc @minwoox ", "labels": ["defect"]}, {"created": "2017-11-22 08:38:48", "commits": {"976d85aafab837ccd86e7276a0823747771a01db": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2017-11-27 03:27:45", "filteredCommits": [], "commitsDetails": [{"nameRev": "976d85aafab837ccd86e7276a0823747771a01db tags/armeria-0.55.0~5", "commitMessage": "Enforce single-threaded Subscriber in StreamMessage (#860)\n\nMotivation:\r\n\r\nIn the current API, subscribing to a StreamMessage without specifying an\r\nExecutor will leave no guarantee on which thread will invoke Subscriber.\r\nThis introduces various complication such as thread-safety issues.\r\n\r\nModifications:\r\n\r\n- Choose the EventLoop of the current RequestContext or one of\r\n  CommonPools.workerGroup() EventLoops when subscribing without\r\n  specifing an Executor.\r\n- Use EventExecutor instead of Executor so that we have fair confidence\r\n  that the signals will be handled in a single thread.\r\n- Miscellaneous:\r\n  - Fix a race condition in AbstrctStreamMessageDuplicator.requestDemand(),\r\n    which passes a non-positive demand to Subscription.request()\r\n  - Skip the multi-subscriber tests in Reactive Streams TCK\r\n  - Add com.linecorp.armeria.verboseExceptions=true system property for\r\n    easier debugging\r\n\r\nResult:\r\n\r\n- Thread-safety\r\n- Less error-prone\r\n- Fixes #853", "commitParents": ["04159a6def800a25c8492fa945e11c256b116094"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "976d85aafab837ccd86e7276a0823747771a01db", "authoredDateTime": "2017-11-27 20:39:33", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 0, "lines": 3, "filePath": "dependencies.yml"}, {"insertions": 7, "deletions": 0, "lines": 7, "filePath": "build.gradle"}, {"insertions": 4, "deletions": 3, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessageWrapper.java"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpResponseAggregator.java"}, {"insertions": 7, "deletions": 16, "lines": 23, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java"}, {"insertions": 8, "deletions": 19, "lines": 27, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/DeferredStreamMessageTest.java"}, {"insertions": 13, "deletions": 2, "lines": 15, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessageTest.java"}, {"insertions": 202, "deletions": 0, "lines": 202, "filePath": "licenses/LICENSE.jctools.al20.txt"}, {"insertions": 3, "deletions": 4, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/client/DecodedHttpResponse.java"}, {"insertions": 4, "deletions": 3, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/StreamMessage.java"}, {"insertions": 12, "deletions": 9, "lines": 21, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java"}, {"insertions": 5, "deletions": 3, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/FilteredStreamMessage.java"}, {"insertions": 35, "deletions": 32, "lines": 67, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/PublisherBasedStreamMessage.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "NOTICE.txt"}, {"insertions": 9, "deletions": 1, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/EventLoopStreamMessage.java"}, {"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpRequest.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpRequestDuplicator.java"}, {"insertions": 37, "deletions": 3, "lines": 40, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageVerification.java"}, {"insertions": 45, "deletions": 34, "lines": 79, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java"}, {"insertions": 7, "deletions": 8, "lines": 15, "filePath": "core/src/test/java/com/linecorp/armeria/client/limit/ConcurrencyLimitingHttpClientTest.java"}, {"insertions": 16, "deletions": 21, "lines": 37, "filePath": "core/src/test/java/com/linecorp/armeria/common/stream/StreamMessageDuplicatorTest.java"}, {"insertions": 2, "deletions": 4, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/server/DecodedHttpRequest.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpResponseDuplicator.java"}, {"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpResponse.java"}, {"insertions": 22, "deletions": 16, "lines": 38, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessage.java"}, {"insertions": 33, "deletions": 39, "lines": 72, "filePath": "core/src/test/java/com/linecorp/armeria/common/DefaultHttpRequestTest.java"}, {"insertions": 33, "deletions": 39, "lines": 72, "filePath": "core/src/test/java/com/linecorp/armeria/common/DefaultHttpResponseTest.java"}], "commitDateTime": "2017-11-27 20:39:33", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/853", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "NoSuchElementException from DefaultStreamMessage", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Possibly due to #848 or #836?\r\n\r\n```\r\ncom.linecorp.armeria.client.retry.RetryingHttpClientTest > differentBackoffBasedOnStatus FAILED\r\n    java.util.concurrent.CompletionException: java.util.NoSuchElementException\r\n        at java.util.concurrent.CompletableFuture.reportJoin(CompletableFuture.java:375)\r\n        at java.util.concurrent.CompletableFuture.join(CompletableFuture.java:1934)\r\n        at com.linecorp.armeria.client.retry.RetryingHttpClientTest.differentBackoffBasedOnStatus(RetryingHttpClientTest.java:490)\r\n        Caused by:\r\n        java.util.NoSuchElementException\r\n            at java.util.AbstractQueue.remove(AbstractQueue.java:117)\r\n            at com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriberWithElements(DefaultStreamMessage.java:384)\r\n            at com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber0(DefaultStreamMessage.java:367)\r\n            at com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber(DefaultStreamMessage.java:298)\r\n            at com.linecorp.armeria.common.stream.DefaultStreamMessage$SubscriptionImpl.request(DefaultStreamMessage.java:580)\r\n            at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$StreamMessageProcessor.requestDemand(AbstractStreamMessageDuplicator.java:321)\r\n            at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.request(AbstractStreamMessageDuplicator.java:576)\r\n            at com.linecorp.armeria.internal.HttpHeaderSubscriber.onSubscribe(HttpHeaderSubscriber.java:56)\r\n            at com.linecorp.armeria.common.stream.FilteredStreamMessage$FilteringSubscriber.onSubscribe(FilteredStreamMessage.java:129)\r\n            at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription.invokeOnSubscribe(AbstractStreamMessageDuplicator.java:558)\r\n            at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$StreamMessageProcessor.subscribe(AbstractStreamMessageDuplicator.java:272)\r\n            at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$ChildStreamMessage.subscribe0(AbstractStreamMessageDuplicator.java:437)\r\n            at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$ChildStreamMessage.subscribe(AbstractStreamMessageDuplicator.java:409)\r\n            at com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$ChildStreamMessage.subscribe(AbstractStreamMessageDuplicator.java:403)\r\n            at com.linecorp.armeria.common.stream.StreamMessageWrapper.subscribe(StreamMessageWrapper.java:68)\r\n            at com.linecorp.armeria.common.stream.FilteredStreamMessage.subscribe(FilteredStreamMessage.java:89)\r\n            at com.linecorp.armeria.client.retry.HttpStatusBasedRetryStrategy.shouldRetry(HttpStatusBasedRetryStrategy.java:52)\r\n            at com.linecorp.armeria.client.retry.HttpStatusBasedRetryStrategy.shouldRetry(HttpStatusBasedRetryStrategy.java:35)\r\n            at com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute0(RetryingHttpClient.java:132)\r\n            at com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute(RetryingHttpClient.java:116)\r\n            at com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute(RetryingHttpClient.java:52)\r\n            at com.linecorp.armeria.client.retry.RetryingClient.execute(RetryingClient.java:69)\r\n            at com.linecorp.armeria.client.UserClient.execute(UserClient.java:160)\r\n            at com.linecorp.armeria.client.DefaultHttpClient.execute(DefaultHttpClient.java:55)\r\n            at com.linecorp.armeria.client.DefaultHttpClient.execute(DefaultHttpClient.java:68)\r\n            at com.linecorp.armeria.client.DefaultHttpClient.execute(DefaultHttpClient.java:64)\r\n            at com.linecorp.armeria.client.HttpClient.execute(HttpClient.java:156)\r\n            at com.linecorp.armeria.client.HttpClient.get(HttpClient.java:198)\r\n            ... 1 more\r\n```", "labels": ["defect"]}, {"created": "2017-11-18 12:06:23", "commits": {"3c327a39dc38d996125af0c088b967f436f8bbdc": {"commitGHEventType": "referenced", "commitUser": "imasahiro"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-11-20 03:38:55", "filteredCommits": [], "commitsDetails": [{"nameRev": "3c327a39dc38d996125af0c088b967f436f8bbdc tags/armeria-0.55.0~17", "commitMessage": "Change isEmpty() in ChildStreamMessage (#843)\n\nMotivation:\r\nCurrently, `isEmpty()` and `isOpen()` in the `streamMessge` from a `duplicator` using different layer to check their return value.\r\nThis is the problem because, for example, if the `streamMessage` has 3 signals and the streamMessage\u2019s `close()` is called, it\u2019s status will be closed and not empty.\r\nHowever, a `ChildStreamMessage`\u2019s status will be closed(upstream\u2019s status) and empty(downstream\u2019s status) because `request(long)` is not called.\r\n\r\nThere are two options to solve this problems. First one is using downstream\u2019s(or processor in the `duplicator`) status.\r\nIf we using this, the child stream will be open until it receives `onComplete()` or `onError()` even thought the upstream is closed already.\r\n\r\nSecond one is using upstream\u2019s status with dealing the situation when ChildStream\u2019s `abort()` is called.\r\n\r\nI prefer second one because the `HttpRequestSubscriber` will do its work right away when it writes a http request without the body.(If I use the first one, it needs one more subscription.request(1)).\r\n\r\nModifications:\r\n- Change the inside of `isEmpty()`\r\nResult:\r\n- Fix #842", "commitParents": ["8c92b21f9d71d3d85e74883baa7d00751592eb5b"], "spoonStatsSkippedReason": "", "commitHash": "3c327a39dc38d996125af0c088b967f436f8bbdc", "authoredDateTime": "2017-11-20 12:38:55", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 33, "deletions": 0, "lines": 33, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientTest.java"}, {"insertions": 1, "deletions": 4, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java"}], "commitDateTime": "2017-11-20 12:38:55", "commitUser": "imasahiro", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.DownstreamSubscription"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.ChildStreamMessage.isEmpty()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.DownstreamSubscription.doSignalSingle(com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$SignalQueue)"}], "spoonFilePath": "AbstractStreamMessageDuplicator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.retryWithRequestBody()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}], "spoonFilePath": "RetryingHttpClientTest.java"}]}], "url": "https://github.com/line/armeria/issues/842", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Retrying http request does not contains http content", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When a RetryingHttpClient resend a request, it only contains http headers and http content is not sent to server.\r\n\r\n* Test code\r\n```java\r\n    @Rule\r\n    public final ServerRule server = new ServerRule() {\r\n        @Override\r\n        protected void configure(ServerBuilder sb) throws Exception {\r\n            sb.service(\"/post-ping-pong\", new AbstractHttpService() {\r\n                final AtomicInteger reqPostCount = new AtomicInteger();\r\n\r\n                @Override\r\n                protected void doPost(ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res)\r\n                        throws Exception {\r\n                    req.aggregate().handle(voidFunction((message, thrown) -> {\r\n                        if (reqPostCount.getAndIncrement() < 1) {\r\n                            res.respond(HttpStatus.SERVICE_UNAVAILABLE);\r\n                        } else {\r\n                            res.respond(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, message.content());\r\n                        }\r\n                    }));\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    @Test\r\n    public void sendHttpBodyCorrectly() {\r\n        final Backoff backoffOnServerError = Backoff.fixed(10);\r\n        final RetryStrategy<HttpRequest, HttpResponse> strategy =\r\n                RetryStrategy.onServerErrorStatus(backoffOnServerError);\r\n        final HttpClient client =\r\n                new HttpClientBuilder(server.uri(\"/\"))\r\n                        .factory(clientFactory)\r\n                        .decorator(RetryingHttpClient.newDecorator(strategy))\r\n                        .build();\r\n\r\n        final AggregatedHttpMessage res = client.post(\"/post-ping-pong\", \"bar\").aggregate().join();\r\n        assertThat(res.content().toStringUtf8()).isEqualTo(\"bar\");\r\n    }\r\n```\r\n\r\n* Test result:\r\n```\r\norg.junit.ComparisonFailure: \r\nExpected :\"bar\"\r\nActual   :\"\"\r\n```", "labels": ["defect"]}, {"created": "2017-11-12 12:48:30", "commits": {"64b233bd7f4bca57bfd9b49da4f4c97a2ed11343": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-11-14 03:27:57", "filteredCommits": [], "commitsDetails": [{"nameRev": "64b233bd7f4bca57bfd9b49da4f4c97a2ed11343 tags/armeria-0.55.0~24", "commitMessage": "Fix IndexOutOfBoundsException in RollingHdrQuantiles (#830)\n\nTo be honest, I'm not sure why Recorder throws an\r\nIndexOutOfBoundsException which is not specified in the API\r\nspecification, but we have to deal with it.\r\n\r\nNote that this is just a stopgap solution until we upgrade to Micrometer\r\n1.0.0-rc.4.\r\n\r\nFixes #827", "commitParents": ["429b658cf057be454691b2489270cc4ca4f55fb6"], "spoonStatsSkippedReason": "", "commitHash": "64b233bd7f4bca57bfd9b49da4f4c97a2ed11343", "authoredDateTime": "2017-11-14 12:27:57", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 10, "deletions": 2, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/common/metric/RollingHdrQuantiles.java"}], "commitDateTime": "2017-11-14 12:27:57", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantiles.observe(double,double)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantiles.safeRecord(com.linecorp.armeria.common.metric.RollingHdrQuantiles$Phase,double,double)"}], "spoonFilePath": "RollingHdrQuantiles.java"}]}], "url": "https://github.com/line/armeria/issues/827", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "IndexOutOfBoundsException in RollingHdrHistogram", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "https://travis-ci.org/line/armeria/builds/300907942\r\n\r\nWe'd better catch `IndexOutOfBoundsException` for safety.\r\n\r\n```\r\n11:33:01.946 [armeria-common-worker-epoll-3-2] WARN  c.l.a.c.l.RequestLogListenerInvoker - onRequestLog() failed with an exception:\r\njava.lang.IndexOutOfBoundsException: index 560\r\n\tat java.util.concurrent.atomic.AtomicLongArray.checkedByteOffset(AtomicLongArray.java:65)\r\n\tat java.util.concurrent.atomic.AtomicLongArray.getAndAdd(AtomicLongArray.java:215)\r\n\tat java.util.concurrent.atomic.AtomicLongArray.addAndGet(AtomicLongArray.java:246)\r\n\tat org.HdrHistogram.ConcurrentHistogram.recordConvertedDoubleValueWithCount(ConcurrentHistogram.java:184)\r\n\tat org.HdrHistogram.DoubleHistogram.recordCountAtValue(DoubleHistogram.java:340)\r\n\tat org.HdrHistogram.DoubleHistogram.recordValueWithCountAndExpectedInterval(DoubleHistogram.java:356)\r\n\tat org.HdrHistogram.DoubleHistogram.recordValueWithExpectedInterval(DoubleHistogram.java:330)\r\n\tat org.HdrHistogram.DoubleRecorder.recordValueWithExpectedInterval(DoubleRecorder.java:118)\r\n\tat com.linecorp.armeria.common.metric.RollingHdrQuantiles.observe(RollingHdrQuantiles.java:136)\r\n\tat com.linecorp.armeria.common.metric.RollingHdrQuantiles.observe(RollingHdrQuantiles.java:127)\\\r\n\tat io.micrometer.core.instrument.prometheus.internal.CustomPrometheusSummary$Child.observe(CustomPrometheusSummary.java:132)\r\n\tat io.micrometer.core.instrument.prometheus.PrometheusTimer.record(PrometheusTimer.java:40)\r\n\tat com.linecorp.armeria.internal.metric.RequestMetricSupport.onResponse(RequestMetricSupport.java:95)\r\n\tat com.linecorp.armeria.common.logging.RequestLogListenerInvoker.invokeOnRequestLog(RequestLogListenerInvoker.java:39)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.notifyListeners(DefaultRequestLog.java:607)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.updateAvailability(DefaultRequestLog.java:565)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.updateAvailability(DefaultRequestLog.java:552)\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.responseContent(DefaultRequestLog.java:500)\r\n\tat com.linecorp.armeria.client.thrift.THttpClientDelegate.handleSuccess(THttpClientDelegate.java:252)\r\n\tat com.linecorp.armeria.client.thrift.THttpClientDelegate.handle(THttpClientDelegate.java:219)\r\n    ...\r\n```", "labels": ["defect"]}, {"created": "2017-10-31 16:36:16", "user": "kojilin", "body": "I found that sometimes my code has unpredictable `currentSpan` in some thread. I suspect that there is nested makeContextAware and cause unbalanced zipkin span scope open/close. Should we implement SpanContextUtil like below?\r\n\r\n```\r\n    public static void setupContext(RequestContext ctx, Span span, Tracer tracer) {\r\n        ctx.onEnter(unused -> {\r\n            Deque<SpanInScope> queue = ctx.attr(SPAN_IN_SCOPE_KEY).get();\r\n            if (queue == null) {\r\n                queue = new ArrayDeque<>();\r\n                ctx.attr(SPAN_IN_SCOPE_KEY).set(queue);\r\n            }\r\n            queue.push(tracer.withSpanInScope(span));\r\n        });\r\n        ctx.onExit(unused -> {\r\n            Deque<SpanInScope> spanInScopes = ctx.attr(SPAN_IN_SCOPE_KEY).get();\r\n            if (spanInScopes != null) {\r\n                SpanInScope currentSpan = spanInScopes.pop();\r\n                if (currentSpan != null) {\r\n                    currentSpan.close();\r\n                }\r\n            }\r\n        });\r\n    }\r\n```\r\nIf onEnter & onExit will be called in pairs, we don't need to do null check.(and it should, right?)", "closed": "2017-11-01 11:23:06", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/811", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "Zipkin trace doesn't open/close span correctly?"}, {"created": "2017-10-30 12:27:01", "commits": {"95dc2a2f4152736ba5b77054427139d0b330a366": {"commitGHEventType": "closed", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-11-01 07:53:09", "filteredCommits": [], "commitsDetails": [{"nameRev": "95dc2a2f4152736ba5b77054427139d0b330a366 tags/armeria-0.55.0~35", "commitMessage": "Fix ArrayIndexOutOfBoundsException from HdrHistogram (#810)\n\nMotivation:\r\n\r\nDoubleRecorder from HdrHistogram can throw\r\nArrayIndexOutOfBoundsException even if auto-resize is enabled for its\r\nDoubleHistograms when the range of values is too wide. For example, when\r\na histogram contains 0.000000001 (1 nanosecond), it can only contain up\r\nto 16, which is way too small for our use case.\r\n\r\nModifications:\r\n\r\n- Limit the minimum value to 0.001 (1 millisecond)\r\n- Limit the maximum value to the extent that does not trigger\r\n  ArrayIndexOutOfBoundsException\r\n- Fix an overflow bug in rotate() method due to incorrect cast order\r\n\r\nResult:\r\n\r\n- ArrayIndexOutOfBoundsException is not raised even if too small or big\r\n  value is recorded.\r\n- Fixes #809", "commitParents": ["f9229834ad7f6ede51d1a6581dc73324e609d18e"], "spoonStatsSkippedReason": "", "commitHash": "95dc2a2f4152736ba5b77054427139d0b330a366", "authoredDateTime": "2017-11-01 16:53:06", "commitGHEventType": "closed", "commitGitStats": [{"insertions": 31, "deletions": 9, "lines": 40, "filePath": "core/src/main/java/com/linecorp/armeria/common/metric/RollingHdrQuantiles.java"}, {"insertions": 79, "deletions": 7, "lines": 86, "filePath": "core/src/test/java/com/linecorp/armeria/common/metric/RollingHdrQuantilesTest.java"}], "commitDateTime": "2017-11-01 16:53:06", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantiles.Phase"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantiles.observe(double,double)"}, {"UPD": 2, "TOT": 8, "MOV": 0, "INS": 4, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantiles"}], "spoonFilePath": "RollingHdrQuantiles.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantilesTest.runInParallel(com.linecorp.armeria.common.metric.RollingHdrQuantiles,long)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantilesTest.valueRanges()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantilesTest.testMinValue()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantilesTest.testThatConcurrentThreadsNotHungWithThreeChunks()"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantilesTest.test()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantilesTest.findMaxValue(int)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantilesTest.canRecord(int,long)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantilesTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.metric.RollingHdrQuantilesTest.testMaxValue()"}], "spoonFilePath": "RollingHdrQuantilesTest.java"}]}], "url": "https://github.com/line/armeria/issues/809", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "java.lang.ArrayIndexOutOfBoundsException: index out of covered value range", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Probably not a flaky test:\r\n```\r\nRollingHdrQuantilesTest.testThatConcurrentThreadsNotHungWithThreeChunks: FAILURE\r\n\r\ncom.linecorp.armeria.common.metric.RollingHdrQuantilesTest > testThatConcurrentThreadsNotHungWithThreeChunks FAILED\r\n    java.lang.ArrayIndexOutOfBoundsException: index out of covered value range\r\n        at org.HdrHistogram.AbstractHistogram.normalizeIndex(AbstractHistogram.java:2281)\r\n        at org.HdrHistogram.ConcurrentHistogram.recordConvertedDoubleValueWithCount(ConcurrentHistogram.java:185)\r\n        at org.HdrHistogram.DoubleHistogram.recordCountAtValue(DoubleHistogram.java:340)\r\n        at org.HdrHistogram.DoubleHistogram.recordValueWithCountAndExpectedInterval(DoubleHistogram.java:356)\r\n        at org.HdrHistogram.DoubleHistogram.recordValueWithExpectedInterval(DoubleHistogram.java:330)\r\n        at org.HdrHistogram.DoubleRecorder.recordValueWithExpectedInterval(DoubleRecorder.java:118)\r\n        at com.linecorp.armeria.common.metric.RollingHdrQuantiles.observe(RollingHdrQuantiles.java:114)\r\n        at com.linecorp.armeria.common.metric.RollingHdrQuantiles.observe(RollingHdrQuantiles.java:107)\r\n        at com.linecorp.armeria.common.metric.RollingHdrQuantilesTest.lambda$runInParallel$2(RollingHdrQuantilesTest.java:149)\r\n```", "labels": ["defect"]}, {"created": "2017-10-27 07:59:44", "commits": {"ccf8e17ac3def952a644bc7c65ba019bf1ac38bf": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-10-28 01:30:39", "filteredCommits": [], "commitsDetails": [{"nameRev": "ccf8e17ac3def952a644bc7c65ba019bf1ac38bf tags/armeria-0.55.0~39", "commitMessage": "Wait until a pending connection completes before trying to acquire a channel for the same key. (#803)\n\nFixes #802 \r\n\r\n`DefaultKeyedChannelPool` doesn't synchronize channel creation on a given key (e.g., using `computeIfAbsent`), so when starting many connections concurrently, channels are never reused.", "commitParents": ["b0d918e1919cffccc788844f23f8a4e5c9342778"], "spoonStatsSkippedReason": "", "commitHash": "ccf8e17ac3def952a644bc7c65ba019bf1ac38bf", "authoredDateTime": "2017-10-28 10:30:38", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 15, "deletions": 4, "lines": 19, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/DefaultKeyedChannelPool.java"}], "commitDateTime": "2017-10-28 10:30:38", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.notifyConnect(java.lang.Object,io.netty.util.concurrent.Future,io.netty.util.concurrent.Promise)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool"}, {"UPD": 0, "TOT": 5, "MOV": 3, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.acquireHealthyFromPoolOrNew(java.lang.Object,io.netty.util.concurrent.Promise)"}], "spoonFilePath": "DefaultKeyedChannelPool.java"}]}], "url": "https://github.com/line/armeria/issues/802", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Armeria opens lots of files in synthetic benchmark", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "If I create a JMH benchmark which creates a single empty HTTP endpoint and single client that accesses it, and a benchmark which just hits the endpoint without blocking, the server spews exceptions of too many open files (on Linux). Is this expected? My intuition would be that the client and server have a single HTTP/2 connection, so there should only be one socket and therefore open file for this benchmark even though there are many concurrent requests because the benchmark doesn't block for the response between requests.\r\n\r\nException\r\n```\r\nio.netty.channel.unix.Errors$NativeIoException: accept(..) failed: Too many open files\r\n        at io.netty.channel.unix.Errors.newIOException(Errors.java:117)\r\n        at io.netty.channel.unix.Socket.accept(Socket.java:314)\r\n        at io.netty.channel.epoll.AbstractEpollServerChannel$EpollServerSocketUnsafe.epollInReady(AbstractEpollServerChannel.java:112)\r\n        at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:404)\r\n        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:304)\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n        at java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\nThe benchmark code\r\n\r\nhttps://github.com/anuraaga/armeria/blob/dev_rag2/core/src/jmh/java/com/linecorp/armeria/benchmarks/HttpServerBenchmark.java#L71", "labels": ["defect"]}, {"created": "2017-10-24 04:35:21", "commits": {"4315bec7db22230f84c9099ab45665f9df8c8330": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2017-10-26 06:26:25", "filteredCommits": [], "commitsDetails": [{"nameRev": "4315bec7db22230f84c9099ab45665f9df8c8330 tags/armeria-0.54.1~1", "commitMessage": "Use HdrHistogram as the default Quantiles implementation (#796)\n\nMotivation:\r\n\r\nThe Quantiles implementations provided by Micrometer are not\r\nthread-safe, causing various races.\r\n\r\nModifications:\r\n\r\n- Replace CKMSQuantiles with RollingHdrQuantiles, which is a forked\r\n  version of Rolling Metrics ResetByChunksAccumulator\r\n  - https://github.com/vladimir-bukhtoyarov/rolling-metrics/blob/2.0.3/src/main/java/com/github/rollingmetrics/histogram/accumulator/ResetByChunksAccumulator.java\r\n  - Rolling Metrics supports only long integer values so I had to fork\r\n    it to support double values.\r\n- Add the metrics for HdrHistograms used by RollingHdrQuantiles\r\n- Add MicrometerUtil.registerLater()\r\n\r\nResult:\r\n\r\n- Fixes #793", "commitParents": ["5dbf0e9e8260fc4d20b3c6e5004436bb28f3c217"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "4315bec7db22230f84c9099ab45665f9df8c8330", "authoredDateTime": "2017-10-26 15:26:24", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 10, "deletions": 0, "lines": 10, "filePath": "NOTICE.txt"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "build.gradle"}, {"insertions": 52, "deletions": 17, "lines": 69, "filePath": "core/src/main/java/com/linecorp/armeria/common/metric/MoreMeters.java"}, {"insertions": 51, "deletions": 0, "lines": 51, "filePath": "core/src/test/java/com/linecorp/armeria/common/metric/MoreMetersTest.java"}, {"insertions": 3, "deletions": 0, "lines": 3, "filePath": "dependencies.yml"}, {"insertions": 121, "deletions": 0, "lines": 121, "filePath": "licenses/LICENSE.hdrhistogram.cc0.txt"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "core/build.gradle"}, {"insertions": 167, "deletions": 0, "lines": 167, "filePath": "core/src/test/java/com/linecorp/armeria/common/metric/RollingHdrQuantilesTest.java"}, {"insertions": 101, "deletions": 4, "lines": 105, "filePath": "core/src/main/java/com/linecorp/armeria/internal/metric/MicrometerUtil.java"}, {"insertions": 338, "deletions": 0, "lines": 338, "filePath": "core/src/main/java/com/linecorp/armeria/common/metric/RollingHdrQuantiles.java"}, {"insertions": 4, "deletions": 0, "lines": 4, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java"}, {"insertions": 202, "deletions": 0, "lines": 202, "filePath": "licenses/LICENSE.rolling-metrics.al20.txt"}], "commitDateTime": "2017-10-26 15:26:24", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/793", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Failed to handle request by logging listener error", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When I upgrade armeria to 0.54.0, maybe because it has some bug on metrics collection, it causes thrift handler failure.\r\n\r\n```\r\n2017-10-24 11:06:04.129  WARN 66691 --- [armeria-common-worker-epoll-3-29] c.l.a.c.l.RequestLogListenerInvoker      : onRequestLog() failed with an exception:\r\njava.lang.ArrayIndexOutOfBoundsException: 500\r\n    at io.micrometer.core.instrument.stats.quantile.CKMSQuantiles.observe(CKMSQuantiles.java:81)\r\n    at io.micrometer.core.instrument.prometheus.internal.CustomPrometheusSummary$Child.observe(CustomPrometheusSummary.java:132)\r\n    at io.micrometer.core.instrument.prometheus.PrometheusTimer.record(PrometheusTimer.java:40)\r\n    at com.linecorp.armeria.internal.metric.micrometer.ConcurrentCompositeTimer.lambda$record$0(ConcurrentCompositeTimer.java:67)\r\n    at java.util.concurrent.ConcurrentHashMap$ValuesView.forEach(ConcurrentHashMap.java:4707)\r\n    at com.linecorp.armeria.internal.metric.micrometer.ConcurrentCompositeTimer.record(ConcurrentCompositeTimer.java:67)\r\n    at com.linecorp.armeria.internal.metric.RequestMetricSupport.onResponse(RequestMetricSupport.java:93)\r\n    at com.linecorp.armeria.common.logging.RequestLogListenerInvoker.invokeOnRequestLog(RequestLogListenerInvoker.java:39)\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.notifyListeners(DefaultRequestLog.java:607)\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.updateAvailability(DefaultRequestLog.java:565)\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.updateAvailability(DefaultRequestLog.java:552)\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.responseContent(DefaultRequestLog.java:500)\r\n    at com.linecorp.armeria.client.thrift.THttpClientDelegate.handleSuccess(THttpClientDelegate.java:252)\r\n    at com.linecorp.armeria.client.thrift.THttpClientDelegate.handle(THttpClientDelegate.java:219)\r\n    at com.linecorp.armeria.client.thrift.THttpClientDelegate.lambda$execute$0(THttpClientDelegate.java:144)\r\n    at com.linecorp.armeria.common.util.Functions.lambda$voidFunction$1(Functions.java:192)\r\n    at java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n    at java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797)\r\n    at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474)\r\n    at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1962)\r\n    at com.linecorp.armeria.common.HttpMessageAggregator.accept(HttpMessageAggregator.java:120)\r\n    at com.linecorp.armeria.common.HttpMessageAggregator.accept(HttpMessageAggregator.java:29)\r\n    at java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:760)\r\n    at java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:736)\r\n    at java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474)\r\n    at java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1962)\r\n    at com.linecorp.armeria.common.stream.DefaultStreamMessage$CloseEvent.notifySubscriber(DefaultStreamMessage.java:633)\r\n    at com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriberWithCloseEvent(DefaultStreamMessage.java:403)\r\n    at com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber(DefaultStreamMessage.java:317)\r\n    at com.linecorp.armeria.common.stream.DefaultStreamMessage.lambda$notifySubscriber$2(DefaultStreamMessage.java:298)\r\n    at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n    at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403)\r\n    at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:309)\r\n    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n    at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\r\n    at java.lang.Thread.run(Thread.java:745)\r\n```", "labels": ["defect"]}, {"created": "2017-10-20 12:08:38", "commits": {"04d624d965eacad3c9e45288e761e0bb52cf99eb": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-10-23 03:12:03", "filteredCommits": [], "commitsDetails": [{"nameRev": "04d624d965eacad3c9e45288e761e0bb52cf99eb tags/armeria-0.54.0~7", "commitMessage": "Handle as success even if one way thrift function throw exception (#783)\n\nBecause there is no way to notify server-side exception to client on\r\none-way thrift API, thrift service does not need to return exception\r\nresponse.\r\n\r\nResults\r\n- Thrift service handles exception throwned one-way method correctly\r\n- Fixes #782", "commitParents": ["37ef7cdd3deac0f6ecd1474af6ef1db744b69e64"], "spoonStatsSkippedReason": "", "commitHash": "04d624d965eacad3c9e45288e761e0bb52cf99eb", "authoredDateTime": "2017-10-23 12:12:03", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 40, "deletions": 1, "lines": 41, "filePath": "thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java"}], "commitDateTime": "2017-10-23 12:12:03", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.invoke(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.SerializationFormat,int,com.linecorp.armeria.internal.thrift.ThriftFunction,com.linecorp.armeria.common.RpcRequest,com.linecorp.armeria.common.HttpResponseWriter)"}], "spoonFilePath": "THttpService.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.ThriftOverHttpClientTest.destroy()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.ThriftOverHttpClientTest"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.ThriftOverHttpClientTest.init()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.ThriftOverHttpClientTest.testExceptionThrowingOnewayServiceAsync()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.ThriftOverHttpClientTest.testExceptionThrowingOnewayServiceSync()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.ThriftOverHttpClientTest.Handlers"}], "spoonFilePath": "ThriftOverHttpClientTest.java"}]}], "url": "https://github.com/line/armeria/issues/782", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "NullPointerException if an exception is thrown from one way thrift method", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "If a thrift service throws an exception on one-way method, it causes NullPointerException because  ThriftFunction does not have a value if the method is one-way.\r\n\r\n```java\r\n@Mock\r\nprivate OnewayHelloService.Iface serviceHandler = mock(OnewayHelloService.Iface.class);\r\n\r\n@Rule\r\npublic final ServerRule server = new ServerRule() {\r\n    @Override\r\n    protected void configure(ServerBuilder sb) throws Exception {\r\n        sb.service(\"/thrift\", THttpService.of(serviceHandler));\r\n    }\r\n};\r\n\r\n@Test\r\npublic void execute_oneway() throws Exception {\r\n    OnewayHelloService.Iface client = new ClientBuilder(server.uri(BINARY, \"/thrift\"))\r\n            .build(OnewayHelloService.Iface.class);\r\n    doThrow(new IllegalArgumentException())\r\n            .doThrow(new IllegalArgumentException())\r\n            .doNothing()\r\n            .when(onewayServiceHandler).hello(anyString());\r\n    client.hello(\"hello\");\r\n    verify(onewayServiceHandler, times(3)).hello(\"hello\");\r\n}\r\n```\r\n\r\n```\r\n20:52:32.367 [armeria-common-blocking-tasks-2-1] WARN  c.l.a.common.util.CompletionActions - Unexpected exception from a completion action:\r\njava.util.concurrent.CompletionException: java.lang.NullPointerException\r\n\tat java.util.concurrent.CompletableFuture.encodeThrowable(CompletableFuture.java:273)\r\n\tat java.util.concurrent.CompletableFuture.completeThrowable(CompletableFuture.java:280)\r\n\tat java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:824)\r\n\tat java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797)\r\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474)\r\n\tat java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1977)\r\n\tat com.linecorp.armeria.common.DefaultRpcResponse.completeExceptionally(DefaultRpcResponse.java:75)\r\n\tat com.linecorp.armeria.server.thrift.ThriftCallService.lambda$invokeSynchronously$0(ThriftCallService.java:176)\r\n\tat com.linecorp.armeria.common.AbstractRequestContext.lambda$makeContextAware$1(AbstractRequestContext.java:72)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\nCaused by: java.lang.NullPointerException: null\r\n\tat com.linecorp.armeria.internal.thrift.ThriftFunction.newResult(ThriftFunction.java:219)\r\n\tat com.linecorp.armeria.server.thrift.THttpService.handleException(THttpService.java:661)\r\n\tat com.linecorp.armeria.server.thrift.THttpService.lambda$invoke$4(THttpService.java:595)\r\n\tat com.linecorp.armeria.common.util.Functions.lambda$voidFunction$1(Functions.java:192)\r\n\tat java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n\t... 10 common frames omitted\r\n```", "labels": ["defect"]}, {"created": "2017-10-20 11:36:43", "commits": {"37ef7cdd3deac0f6ecd1474af6ef1db744b69e64": {"commitGHEventType": "closed", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-10-23 03:10:44", "filteredCommits": [], "commitsDetails": [{"nameRev": "37ef7cdd3deac0f6ecd1474af6ef1db744b69e64 tags/armeria-0.54.0~8", "commitMessage": "Client side Thrift callback not notified correctly for a void method with RetryingRpcClient (#780) (#781)\n\n- Fixes #780\r\n- Add unit test for RetryingRpcClient + void method", "commitParents": ["8c6c6c666b9c3e1c26313854f1790e2e1480ec78"], "spoonStatsSkippedReason": "", "commitHash": "37ef7cdd3deac0f6ecd1474af6ef1db744b69e64", "authoredDateTime": "2017-10-23 12:10:42", "commitGHEventType": "closed", "commitGitStats": [{"insertions": 22, "deletions": 0, "lines": 22, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/client/retry/RetryingRpcClientTest.java"}, {"insertions": 3, "deletions": 1, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java"}], "commitDateTime": "2017-10-23 12:10:42", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.client.retry.RetryingRpcClientTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.client.retry.RetryingRpcClientTest.execute_void()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.client.retry.RetryingRpcClientTest"}], "spoonFilePath": "RetryingRpcClientTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.doExecute0(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcRequest,com.linecorp.armeria.common.DefaultRpcResponse)"}], "spoonFilePath": "RetryingRpcClient.java"}]}], "url": "https://github.com/line/armeria/issues/780", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Client side Thrift callback not notified correctly for a void method with RetryingRpcClient", "statsSkippedReason": "", "user": "LiYing2010", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I am using the latest Armeria v0.53.2, but something is going wrong.\r\n\r\nWhen I call a method via Thrift, if this method has not return value, for example:\r\n`public void doSomething(p1, p2)`\r\n\r\nThe thrift client side will go into deadlock.\r\n\r\nI did some research, traced into source code of Armeria, and find these source is not working well:\r\nhttps://github.com/line/armeria/blob/54e124d73178609b4f0af6d833ea562a1ce15bd9/core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java#L117-L121\r\n\r\nIf the method has not return value, the \"result\" will be null, the RPC call is completed normally, but RetryingRpcClient process this case as an error, and it will call the \"responseFuture.completeExceptionally(thrown)\" branch.\r\n", "labels": ["defect"]}, {"created": "2017-09-26 01:04:49", "commits": {"a80101cfd2c9764643bf7912156c84549e122163": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-10-10 07:12:58", "filteredCommits": [], "commitsDetails": [{"nameRev": "a80101cfd2c9764643bf7912156c84549e122163 tags/armeria-0.54.0~15", "commitMessage": "Use global MeterRegistry if MeterRegistry bean is not present (#770)\n\nResults:\r\n- Fix #767", "commitParents": ["f6930aadf741801528ab020734157ffa8c6f0fa3"], "spoonStatsSkippedReason": "", "commitHash": "a80101cfd2c9764643bf7912156c84549e122163", "authoredDateTime": "2017-10-10 16:12:57", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 89, "deletions": 0, "lines": 89, "filePath": "spring-boot/autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaAutoConfigurationWithoutMeterTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "spring-boot/autoconfigure/src/test/java/com/linecorp/armeria/spring/ArmeriaMeterBindersTest.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "spring-boot/autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java"}], "commitDateTime": "2017-10-10 16:12:57", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaAutoConfigurationWithoutMeterTest"}], "spoonFilePath": "ArmeriaAutoConfigurationWithoutMeterTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaAutoConfiguration.armeriaServer(com.linecorp.armeria.spring.ArmeriaSettings,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional)"}], "spoonFilePath": "ArmeriaAutoConfiguration.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaMeterBindersTest"}], "spoonFilePath": "ArmeriaMeterBindersTest.java"}]}], "url": "https://github.com/line/armeria/issues/767", "ttf": 14.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Spring boot when default config will Caused by: java.util.NoSuchElementException: No value present", "statsSkippedReason": "", "user": "Adanz", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I upgrade 0.53.1 from 0.52 and use  armeria-spring-boot-starter,   but found when default config like\r\napplication.properties:\r\narmeria.ports[0].port=8080\r\narmeria.ports[0].protocol=HTTP\r\n\r\nAn unexpected close has occurred:\r\nCaused by: java.util.NoSuchElementException: No value present\r\n\r\nand I debug source code, found if add \r\n\r\narmeria.enableMetrics = false\r\n\r\nthen normal.\r\n\r\n", "labels": ["defect"]}, {"created": "2017-09-22 07:06:50", "commits": {"6e2b0034dd88e7583f3d27dedf12b1c585e173a9": {"commitGHEventType": "referenced", "commitUser": "minwoox"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-01-09 05:30:54", "filteredCommits": [], "commitsDetails": [{"nameRev": "6e2b0034dd88e7583f3d27dedf12b1c585e173a9 tags/armeria-0.98.0~92", "commitMessage": "Propagate ClientRequestContext to Thrift client callback (#2328)\n\n* Propagate ClientRequestContext to Thrift client callback\r\nMotivation:\r\n`ClientRequestContext` is not propagate to `AsyncMethodCallback` and the callbacks registered to `RpcResponse`.\r\n\r\nModification:\r\n- Introduce `RequestContextAwareRpcResponse`\r\n\r\nResult:\r\n- You can now get `ClientRequestContext` in `AsyncMethodCallback`\r\n- Fix a problem in #760. (still have to solve https://github.com/line/armeria/issues/760#issuecomment-476503179)", "commitParents": ["6dbec275420fc15294ab2c98bacc19cf59921cc8"], "spoonStatsSkippedReason": "", "commitHash": "6e2b0034dd88e7583f3d27dedf12b1c585e173a9", "authoredDateTime": "2019-12-31 23:04:03", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/internal/RequestContextAwareCompletableFuture.java"}, {"insertions": 11, "deletions": 1, "lines": 12, "filePath": "core/src/main/java/com/linecorp/armeria/internal/JavaVersionSpecific.java"}, {"insertions": 74, "deletions": 0, "lines": 74, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftServiceContextAwareTest.java"}, {"insertions": 9, "deletions": 9, "lines": 18, "filePath": "thrift/src/main/java/com/linecorp/armeria/client/thrift/THttpClientDelegate.java"}, {"insertions": 96, "deletions": 0, "lines": 96, "filePath": "core/src/main/java/com/linecorp/armeria/internal/RequestContextAwareRpcResponse.java"}, {"insertions": 8, "deletions": 8, "lines": 16, "filePath": "thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftCallService.java"}, {"insertions": 9, "deletions": 1, "lines": 10, "filePath": "core/src/main/java9/com/linecorp/armeria/internal/Java9VersionSpecific.java"}, {"insertions": 96, "deletions": 0, "lines": 96, "filePath": "core/src/main/java9/com/linecorp/armeria/internal/Java9RequestContextAwareRpcResponse.java"}, {"insertions": 98, "deletions": 0, "lines": 98, "filePath": "thrift/src/test/java/com/linecorp/armeria/client/thrift/ClientRequestContextPushedOnCallbackTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java9/com/linecorp/armeria/internal/Java9RequestContextAwareCompletableFuture.java"}, {"insertions": 5, "deletions": 3, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/common/DefaultRpcResponse.java"}], "commitDateTime": "2019-12-31 23:04:03", "commitUser": "minwoox", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.DefaultRpcResponse.obtrudeException(java.lang.Throwable)"}, {"UPD": 0, "TOT": 9, "MOV": 5, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.DefaultRpcResponse.completeExceptionally(java.lang.Throwable)"}], "spoonFilePath": "DefaultRpcResponse.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftServiceContextAwareTest"}], "spoonFilePath": "ThriftServiceContextAwareTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.RequestContextAwareRpcResponse"}], "spoonFilePath": "RequestContextAwareRpcResponse.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.Java9RequestContextAwareRpcResponse"}], "spoonFilePath": "Java9RequestContextAwareRpcResponse.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.ClientRequestContextPushedOnCallbackTest"}], "spoonFilePath": "ClientRequestContextPushedOnCallbackTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.Java9VersionSpecific.newRequestContextAwareFuture(com.linecorp.armeria.common.RequestContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.Java9VersionSpecific.newRequestContextAwareRpcResponse(com.linecorp.armeria.common.RequestContext)"}], "spoonFilePath": "Java9VersionSpecific.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 5, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.thrift.THttpClientDelegate.execute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcRequest)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.THttpClientDelegate.handlePreDecodeException(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.DefaultRpcResponse,com.linecorp.armeria.internal.thrift.ThriftFunction,java.lang.Throwable)"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.THttpClientDelegate.handleSuccess(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.DefaultRpcResponse,java.lang.Object,com.linecorp.armeria.common.thrift.ThriftReply)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.THttpClientDelegate.handleException(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcResponse,com.linecorp.armeria.common.thrift.ThriftReply,java.lang.Exception)"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.THttpClientDelegate.handleException(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.DefaultRpcResponse,com.linecorp.armeria.common.thrift.ThriftReply,java.lang.Exception)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.THttpClientDelegate.handle(com.linecorp.armeria.client.ClientRequestContext,int,com.linecorp.armeria.common.DefaultRpcResponse,com.linecorp.armeria.internal.thrift.ThriftFunction,com.linecorp.armeria.common.HttpData)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.THttpClientDelegate.handleSuccess(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcResponse,java.lang.Object,com.linecorp.armeria.common.thrift.ThriftReply)"}], "spoonFilePath": "THttpClientDelegate.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftCallService.invokeAsynchronously(java.lang.Object,com.linecorp.armeria.internal.thrift.ThriftFunction,org.apache.thrift.TBase,com.linecorp.armeria.common.DefaultRpcResponse)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftCallService.invoke(com.linecorp.armeria.server.ServiceRequestContext,java.lang.Object,com.linecorp.armeria.internal.thrift.ThriftFunction,java.util.List,com.linecorp.armeria.common.DefaultRpcResponse)"}, {"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftCallService.serve(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.RpcRequest)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftCallService.invokeSynchronously(com.linecorp.armeria.server.ServiceRequestContext,java.lang.Object,com.linecorp.armeria.internal.thrift.ThriftFunction,org.apache.thrift.TBase,com.linecorp.armeria.common.DefaultRpcResponse)"}], "spoonFilePath": "ThriftCallService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.RequestContextAwareCompletableFuture"}], "spoonFilePath": "RequestContextAwareCompletableFuture.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.Java9RequestContextAwareCompletableFuture"}], "spoonFilePath": "Java9RequestContextAwareCompletableFuture.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.JavaVersionSpecific.newRequestContextAwareFuture(com.linecorp.armeria.common.RequestContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.JavaVersionSpecific.newRequestContextAwareRpcResponse(com.linecorp.armeria.common.RequestContext)"}], "spoonFilePath": "JavaVersionSpecific.java"}]}], "url": "https://github.com/line/armeria/issues/760", "ttf": 838.0002777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "ClientRequestContext is not propagated to client callbacks", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "`THttpClientInvocationHandler` and `THttpClientDelegate` do not seem to propagate `ClientRequestContext` properly to `AsyncMethodCallback` and the callbacks registered to `RpcResponse`.\r\n\r\nSimilarly, `HttpClientDelegate` doesn't seem to do so either.\r\n\r\n`UserClient.execute(...)` pushes the client context, but that is not enough.", "labels": ["defect"]}, {"created": "2017-09-13 08:50:41", "commits": {"8dbfcd9d18402b3ad6ebd3c1022826d0c4fd154d": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2018-09-06 09:17:47", "filteredCommits": [], "commitsDetails": [{"nameRev": "8dbfcd9d18402b3ad6ebd3c1022826d0c4fd154d tags/armeria-0.71.0~6", "commitMessage": "Add decodedPath() and decodedMappedPath() / Decode path params (#1356)\n\nMotivation:\r\n\r\n- It is fairly often for a user to decode the request path.\r\n  `RequestContext.path()`, `mappedPath()` and other path getters in\r\n  Armeria always return a raw path, which may require an extra work on\r\n  user-side.\r\n- Path parameters are currently provided in an encoded form. In this\r\n  case, a user would almost always expect a decoded form.\r\n\r\nModifications:\r\n\r\n- Add `RequestContext.decodedPath()`, `ServiceRequestContext.decodedMappedPath()`,\r\n  `RequestLog.decodedPath()` and `PathMappingResult.decodedPath()` which\r\n  return the decoded path string.\r\n- Update all `PathMapping` implementations so that path parameters are\r\n  always decoded.\r\n- Add `PathMappingResultBuilder` to build a non-trivial mapping result\r\n  more conveniently.\r\n- Add `PathMappingResult.of(String path)` for convenience.\r\n- Add `ArmeriaHttpUtil.decodePath()`\r\n- Fix a bug where `HttpFileService` does not handle UTF8-encoded paths\r\n  correctly.\r\n- Miscellaneous:\r\n  - Fix missing `@Nonnull` annotations for some `RequestContext`s.\r\n  - Remove `PathAndQuery.isHexadecimal()` which was unnecessary.\r\n  - Fix inefficient string conversion in `StringResponseConverterFunction`\r\n\r\nResult:\r\n\r\n- Fixes #756\r\n- More convenient to retrieve a decoded request path\r\n- `HttpFileService` handles CJK paths correctly.\r\n- Breaking change: path parameters are not encoded anymore.", "commitParents": ["fafe079219999ed5f5f9516578e997e52b6f803f"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "8dbfcd9d18402b3ad6ebd3c1022826d0c4fd154d", "authoredDateTime": "2018-09-06 18:17:46", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 9, "deletions": 0, "lines": 9, "filePath": "core/src/test/java/com/linecorp/armeria/server/GlobPathMappingTest.java"}, {"insertions": 4, "deletions": 6, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/server/RegexPathMapping.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/test/java/com/linecorp/armeria/server/DefaultServiceRequestContextTest.java"}, {"insertions": 18, "deletions": 0, "lines": 18, "filePath": "core/src/test/java/com/linecorp/armeria/internal/ArmeriaHttpUtilTest.java"}, {"insertions": 4, "deletions": 10, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/internal/PathAndQuery.java"}, {"insertions": 9, "deletions": 0, "lines": 9, "filePath": "core/src/test/java/com/linecorp/armeria/server/DefaultPathMappingTest.java"}, {"insertions": 44, "deletions": 0, "lines": 44, "filePath": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/RequestContextWrapper.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/StringResponseConverterFunction.java"}, {"insertions": 10, "deletions": 0, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestLog.java"}, {"insertions": 88, "deletions": 0, "lines": 88, "filePath": "core/src/main/java/com/linecorp/armeria/server/PathMappingResultBuilder.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultPathMapping.java"}, {"insertions": 13, "deletions": 0, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/common/NonWrappingRequestContext.java"}, {"insertions": 27, "deletions": 0, "lines": 27, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java"}, {"insertions": 36, "deletions": 11, "lines": 47, "filePath": "core/src/main/java/com/linecorp/armeria/server/PathMappingResult.java"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "core/src/test/java/com/linecorp/armeria/server/AnnotatedHttpServiceTest.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/common/RequestContext.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/server/GlobPathMapping.java"}, {"insertions": 10, "deletions": 4, "lines": 14, "filePath": "core/src/test/java/com/linecorp/armeria/server/composition/CompositeServiceTest.java"}, {"insertions": 9, "deletions": 0, "lines": 9, "filePath": "core/src/test/java/com/linecorp/armeria/server/RegexPathMappingTest.java"}, {"insertions": 23, "deletions": 0, "lines": 23, "filePath": "core/src/test/java/com/linecorp/armeria/server/file/HttpFileServiceTest.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "\"core/src/test/resources/com/linecorp/armeria/server/file/bar/\\302\\242.txt\""}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/server/file/HttpFileService.java"}, {"insertions": 19, "deletions": 0, "lines": 19, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextWrapper.java"}, {"insertions": 8, "deletions": 2, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java"}, {"insertions": 13, "deletions": 0, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/server/composition/AbstractCompositeService.java"}], "commitDateTime": "2018-09-06 18:17:46", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/756", "ttf": 358.0002777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "URL encoded path mapping", "statsSkippedReason": "", "user": "hyangtack", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "As described in [RFC3986](https://tools.ietf.org/html/rfc3986), a path component might be percent-encoded. If a regex path mapping has any reserved characters like `*` in its pattern and a request path is percent-encoded, the request might not be mapped to the path mapping.", "labels": ["defect", "new feature"]}, {"created": "2017-09-11 00:08:48", "commits": {"557b6f0be4b871c9be2f17a1ec4386ce2a4bf768": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-10-23 07:44:56", "filteredCommits": [], "commitsDetails": [{"nameRev": "557b6f0be4b871c9be2f17a1ec4386ce2a4bf768 tags/armeria-0.54.0~2", "commitMessage": "Do not throw exception on unsupported HTTP method (#788)\n\nMotivation:\r\n\r\nArmeria's HttpMethod is an enum, and thus HttpMethod.valueOf() will\r\nraise an exception when the given method name does not match any enum\r\nvalues.\r\n\r\nIn contrast, Netty's HttpMethod is not an enum and thus supports\r\narbitrary method names.\r\n\r\nAs a result, when a user sends a request whose method is not supported\r\nby Armeria's HttpMethod, the server will fail the request with an\r\nunexpected IllegalArgumentException rather than sending '405 Method\r\nNot Allowed' response.\r\n\r\nModifications:\r\n\r\n- Add HttpMethod.isSupported(String)\r\n- Add the validation of request method for HTTP/1 and 2\r\n\r\nResult:\r\n\r\n- Fixes #754\r\n- Armeria responds with '405 Method Not Allowed' when a client sends a\r\n  request with unsupported method.", "commitParents": ["0a0d2456712f6e06e9154ecb8e00a764c5a3754b"], "spoonStatsSkippedReason": "", "commitHash": "557b6f0be4b871c9be2f17a1ec4386ce2a4bf768", "authoredDateTime": "2017-10-23 16:44:56", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 7, "deletions": 0, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/server/Http1RequestDecoder.java"}, {"insertions": 16, "deletions": 5, "lines": 21, "filePath": "core/src/main/java/com/linecorp/armeria/server/Http2RequestDecoder.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServerTest.java"}, {"insertions": 25, "deletions": 0, "lines": 25, "filePath": "core/src/main/java/com/linecorp/armeria/common/HttpMethod.java"}], "commitDateTime": "2017-10-23 16:44:56", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 10, "MOV": 3, "INS": 4, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.Http2RequestDecoder.onHeadersRead(io.netty.channel.ChannelHandlerContext,int,io.netty.handler.codec.http2.Http2Headers,int,boolean)"}], "spoonFilePath": "Http2RequestDecoder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.HttpMethod.isSupported(java.lang.String)"}], "spoonFilePath": "HttpMethod.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Http1RequestDecoder.channelRead(io.netty.channel.ChannelHandlerContext,java.lang.Object)"}], "spoonFilePath": "Http1RequestDecoder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testUnsupportedMethod()"}], "spoonFilePath": "ServerTest.java"}]}], "url": "https://github.com/line/armeria/issues/754", "ttf": 42.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Unexpected http methods are not handled correctly", "statsSkippedReason": "", "user": "krrrr38", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I guess it should be return 405 with correct error handling or http method implementation.\r\n\r\nw/armeria 0.52.0\r\n\r\n```\r\n19:28:34.564 WARN [armeria-common-worker-epoll-7-19] c.linecorp.armeria.server.Http1RequestDecoder:188 - Unexpected exception: \r\njava.lang.IllegalArgumentException: No enum constant com.linecorp.armeria.common.HttpMethod.RDSZ\r\nat java.lang.Enum.valueOf(Enum.java:238)\r\nat com.linecorp.armeria.common.HttpMethod.valueOf(HttpMethod.java:36)\r\nat com.linecorp.armeria.internal.ArmeriaHttpUtil.toArmeria(ArmeriaHttpUtil.java:341)\r\nat com.linecorp.armeria.server.Http1RequestDecoder.channelRead(Http1RequestDecoder.java:131)\r\nat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362)\r\n...\r\n```\r\n\r\nnetty HttpMethod class handles any http methods, but armeria HttpMethod is enum.\r\n\r\nhttps://github.com/line/armeria/blob/41059e7295ef16e7835b135c5c6174c3d6033605/core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java#L343\r\n", "labels": ["defect"]}, {"created": "2017-09-07 10:49:06", "user": "trustin", "body": "```java\r\n    public static DnsServiceEndpointGroup of(String hostname) {\r\n        return DnsServiceEndpointGroup.of(hostname);\r\n    }\r\n```\r\n\r\nShould be:\r\n\r\n```java\r\n    public static DnsServiceEndpointGroup of(String hostname) {\r\n        return DnsServiceEndpointGroup.of(hostname, CommonPools.workerGroup().next());\r\n    }\r\n```\r\n\r\n/cc @anuraaga ", "closed": "2017-09-08 08:19:42", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/751", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "Stack overflow at DnsServiceEndpointGroup.of(String)"}, {"created": "2017-08-15 05:46:37", "user": "imasahiro", "body": "I just start to investigate the issue. So I'm still not sure whether root cause is located at armeria side.\r\n\r\n```\r\n2017-08-15 14:19:19.624  WARN 42997 --- [armeria-common-worker-epoll-3-8] c.l.a.c.l.RequestLogListenerInvoker      : onRequestLog() failed with an exception:\r\njava.lang.NullPointerException: null\r\n    at com.linecorp.armeria.client.metric.DropwizardMetricCollectingClient.defaultMetricName(DropwizardMetricCollectingClient.java:97)\r\n    at com.linecorp.armeria.client.metric.DropwizardMetricCollectingClient.lambda$newDecorator$1(DropwizardMetricCollectingClient.java:88)\r\n    at com.linecorp.armeria.internal.metric.DropwizardMetricCollector.getRequestMetrics(DropwizardMetricCollector.java:101)\r\n    at com.linecorp.armeria.internal.metric.DropwizardMetricCollector.onRequestEnd(DropwizardMetricCollector.java:56)\r\n    at com.linecorp.armeria.common.logging.RequestLogListenerInvoker.invokeOnRequestLog(RequestLogListenerInvoker.java:39)\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.notifyListeners(DefaultRequestLog.java:607)\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.updateAvailability(DefaultRequestLog.java:565)\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.endRequest0(DefaultRequestLog.java:395)\r\n    at com.linecorp.armeria.common.logging.DefaultRequestLog.endRequest(DefaultRequestLog.java:382)\r\n    at com.linecorp.armeria.client.HttpRequestSubscriber.fail(HttpRequestSubscriber.java:258)\r\n    at com.linecorp.armeria.client.HttpRequestSubscriber.failAndRespond(HttpRequestSubscriber.java:268)\r\n    at com.linecorp.armeria.client.HttpRequestSubscriber.writeFirstHeader(HttpRequestSubscriber.java:139)\r\n    at io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n    at io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403)\r\n    at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:311)\r\n    at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n    at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\r\n    at java.lang.Thread.run(Thread.java:745)\r\n```\r\n\r\nHere is configuration of decorators.\r\n* version 0.52.0\r\n* Uses armeria-retrofit2\r\n\r\n```java\r\ncb.decorator(HttpRequest.class, HttpResponse.class,\r\n             DropwizardMetricCollectingClient.newDecorator(\r\n                     metricRegistry,\r\n                     MetricNames.clientMetricName(\"MyClient\")));\r\ncb.decorator(HttpRequest.class, HttpResponse.class,\r\n             LoggingClient.newDecorator());\r\ncb.decorator(HttpRequest.class, HttpResponse.class, RetryingHttpClient.newDecorator(\r\n        (request, response) -> response.aggregate().handle(\r\n                (message, thrown) -> thrown instanceof ClosedSessionException),\r\n        () -> Backoff.exponential(INITIAL_RETRY_DELAY_MILLIS,\r\n                                  MAX_RETRY_DELAY_MILLIS)\r\n                     .withJitter(0.1)\r\n                     .withMaxAttempts(MAX_ATTEMPTS)));\r\n```", "closed": "2017-08-23 03:30:40", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/724", "ttf": 7.000277777777778, "commits": {}, "labels": ["defect"], "title": "NullPointerException at DropwizardMetricCollectingClient.defaultMetricName??"}, {"created": "2017-08-08 09:33:32", "user": "krisjey", "body": "Hi, guys.\r\n\r\nI'm using armeria as a REST API server. Like below.\r\nGET http://foobar.com/cache/keyname::hello\r\n\r\nSometimes armeria server response 404.\r\nGET http://foobar.com/cache/key*::hello\r\n\r\nThe reason is that HTTP 1.1 path should be allowed *(asterisk) character.\r\nPlease check below link.\r\nhttps://stackoverflow.com/questions/25085992/when-should-an-asterisk-be-encoded-in-an-http-url\r\n\r\nFix code https://github.com/line/armeria/pull/714", "closed": "2017-08-08 23:35:58", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/715", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "A path that contains an asterisk (*) is not accepted."}, {"created": "2017-07-26 06:49:30", "user": "Adanz", "body": "hello, I use armeria and spring boot,  below bean before version 0.51.0 (i.e. 0.46.0 - 0.50.0) is normal,\r\nuse armeria-spring-boot-starter.  (but not use spring-boot-starter-web)\r\n```java\r\n@Configuration\r\npublic class RpcServiceConfiguration {\r\n    @Bean\r\n    public ThriftServiceRegistrationBean rpcService(RpcHandler rpcHandler) {\r\n        return new ThriftServiceRegistrationBean()\r\n                .setServiceName(\"RpcService\")\r\n                .setService(THttpService.of(rpcHandler, ThriftSerializationFormats.COMPACT))\r\n                .setPath(\"/api/data\");\r\n    }\r\n}\r\n```\r\n\r\nbut in 0.51.0, An unexpected close has occurred, like:\r\n\r\n[main]   : Started Application in 8.869 seconds (JVM running for 9.946)\r\n[Thread-2] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@6e0f5f7f: startup date [Wed Jul 26 14:35:19 CST 2017]; root of context hierarchy\r\n[Thread-2] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown\r\nDisconnected from the target VM, address: '127.0.0.1:58717', transport: 'socket'\r\n\r\nHow can I do? thank!", "closed": "2017-07-28 04:56:02", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/702", "ttf": 1.0002777777777778, "commits": {}, "labels": ["defect"], "title": "Spring Boot armeria server always shutdown in 0.51.0"}, {"created": "2017-06-30 05:28:47", "commits": {"fcefb125fa33c67f3783f9edfef4df232893b09a": {"commitGHEventType": "referenced", "commitUser": "hyangtack"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-07-04 05:17:35", "filteredCommits": [], "commitsDetails": [{"nameRev": "fcefb125fa33c67f3783f9edfef4df232893b09a tags/armeria-0.51.0~21", "commitMessage": "Fix PathMapping implementations to produce their loggerName and metricName correctly (#659)\n\nMotivation:\r\n\r\n- For some cases, a user may get '__UNKNOWN__' as loggerName and/or '__UNKNOWN_PATH__' as metricName.\r\n\r\nModifications:\r\n\r\n- Set loggerName and metricName when instantiating PrefixAddingPathMapping and DefaultPathMapping class.\r\n- A glob pattern not starting with '/' will be treated as '/**/..pattern..' for loggerName and metricName.\r\n- Make metricName of RegexPathMapping as '/regex:...' instead of 'regex:...'.\r\n\r\nResult:\r\n\r\n- Fixes #651", "commitParents": ["d3d8972af0a73d915e9f77f73d705517322e5b16"], "spoonStatsSkippedReason": "", "commitHash": "fcefb125fa33c67f3783f9edfef4df232893b09a", "authoredDateTime": "2017-07-04 14:17:35", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 7, "deletions": 0, "lines": 7, "filePath": "core/src/test/java/com/linecorp/armeria/server/GlobPathMappingTest.java"}, {"insertions": 3, "deletions": 1, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/server/RegexPathMapping.java"}, {"insertions": 17, "deletions": 1, "lines": 18, "filePath": "core/src/main/java/com/linecorp/armeria/server/AnnotatedHttpServices.java"}, {"insertions": 8, "deletions": 2, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/server/GlobPathMapping.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/test/java/com/linecorp/armeria/server/PrefixPathMappingTest.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/test/java/com/linecorp/armeria/server/RegexPathMappingTest.java"}, {"insertions": 11, "deletions": 0, "lines": 11, "filePath": "core/src/test/java/com/linecorp/armeria/server/DefaultPathMappingTest.java"}, {"insertions": 46, "deletions": 0, "lines": 46, "filePath": "core/src/test/java/com/linecorp/armeria/server/PrefixAddingPathMappingTest.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/test/java/com/linecorp/armeria/server/CatchAllPathMappingTest.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/src/test/java/com/linecorp/armeria/server/ExactPathMappingTest.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/server/AbstractPathMapping.java"}, {"insertions": 16, "deletions": 0, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultPathMapping.java"}], "commitDateTime": "2017-07-04 14:17:35", "commitUser": "hyangtack", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AbstractPathMapping.loggerName(java.lang.String)"}], "spoonFilePath": "AbstractPathMapping.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServices.PrefixAddingPathMapping.loggerName()"}, {"UPD": 0, "TOT": 8, "MOV": 1, "INS": 6, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServices.PrefixAddingPathMapping"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServices.PrefixAddingPathMapping.metricName()"}], "spoonFilePath": "AnnotatedHttpServices.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ExactPathMappingTest.testMetricName()"}], "spoonFilePath": "ExactPathMappingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.CatchAllPathMappingTest.testMetricName()"}], "spoonFilePath": "CatchAllPathMappingTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GlobPathMapping.metricName()"}, {"UPD": 1, "TOT": 5, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GlobPathMapping"}], "spoonFilePath": "GlobPathMapping.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.RegexPathMappingTest.testMetricName()"}], "spoonFilePath": "RegexPathMappingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMappingTest.testLoggerName()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMappingTest.testMetricName()"}], "spoonFilePath": "DefaultPathMappingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.PrefixAddingPathMappingTest"}], "spoonFilePath": "PrefixAddingPathMappingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.PrefixPathMappingTest.testMetricName()"}], "spoonFilePath": "PrefixPathMappingTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.RegexPathMapping.metricName()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.RegexPathMapping"}], "spoonFilePath": "RegexPathMapping.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GlobPathMappingTest.testMetricName()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GlobPathMappingTest.testLoggerName()"}], "spoonFilePath": "GlobPathMappingTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMapping.loggerName()"}, {"UPD": 0, "TOT": 4, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMapping"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMapping.metricName()"}], "spoonFilePath": "DefaultPathMapping.java"}]}], "url": "https://github.com/line/armeria/issues/651", "ttf": 3.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Add specific name field to AnnotatedHttpService related annotations for logger/metrics", "statsSkippedReason": "", "user": "krrrr38", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "## problem\r\ncurrrently when we use `AnnotatedHttpService`, logger/metrics names become followings \r\n\r\n- loggerName\r\n  - `armeria.services.__UNKNOWN__`\r\n- metricName example (get from metrics path)\r\n  - `server.${serviceName}.__UNKNOWN_PATH__.GET.successes`\r\n\r\n## proposal\r\nadd metricName or something into `@Get`, `@Post`, ... annotations. then fill-in into logger/metrics name.", "labels": ["defect"]}, {"created": "2017-06-30 01:13:48", "commits": {"f7a1afe4133d197830d3d6fca401a0f0bef8bdb7": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 1, "changesInPackagesSPOON": ["com.linecorp.armeria.spring.ThriftServiceUtils", "com.linecorp.armeria.spring.ArmeriaAutoConfiguration.armeriaServer(com.linecorp.armeria.spring.ArmeriaSettings,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional)"], "closed": "2018-05-09 02:28:01", "filteredCommits": ["f7a1afe4133d197830d3d6fca401a0f0bef8bdb7"], "commitsDetails": [{"nameRev": "f7a1afe4133d197830d3d6fca401a0f0bef8bdb7 tags/armeria-0.64.0~29", "commitMessage": "Fetches thrift service names using reflection not to access armeria-thrift package (#1182)\n\nMotivation:\r\n- armeria-thrift-* dependencies are removed from armeria-spring-boot*-autoconfigure to choose thrift\r\n  implementations by a user but it causes NoClassDefFoundError if armeria-thrift-* dependency is not\r\n  populated in dependency list.\r\n\r\nChanges:\r\n- Add a reflection based implementation to retrieve names of thrift service\r\n- Fixes https://github.com/line/armeria/issues/650", "commitParents": ["01e06ea6aafe4951c95782664f1087e05effc9cb"], "spoonStatsSkippedReason": "", "commitHash": "f7a1afe4133d197830d3d6fca401a0f0bef8bdb7", "authoredDateTime": "2018-05-09 11:28:00", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 91, "deletions": 0, "lines": 91, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ThriftServiceUtils.java"}, {"insertions": 44, "deletions": 0, "lines": 44, "filePath": "spring/boot-autoconfigure/src/test/java/com/linecorp/armeria/spring/ThriftServiceUtilsTest.java"}, {"insertions": 3, "deletions": 8, "lines": 11, "filePath": "spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring/ArmeriaAutoConfiguration.java"}], "commitDateTime": "2018-05-09 11:28:00", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ThriftServiceUtilsTest"}], "spoonFilePath": "ThriftServiceUtilsTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 11, "MOV": 5, "INS": 1, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.spring.ArmeriaAutoConfiguration.armeriaServer(com.linecorp.armeria.spring.ArmeriaSettings,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional,java.util.Optional)"}], "spoonFilePath": "ArmeriaAutoConfiguration.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.spring.ThriftServiceUtils"}], "spoonFilePath": "ThriftServiceUtils.java"}]}], "url": "https://github.com/line/armeria/issues/650", "ttf": 313.0002777777778, "gitStatsSummary": {"insertions": 94, "deletions": 8, "lines": 102, "gitFilesChange": 2}, "title": "Spring integration fails with NoClassDefFoundError without armeria-thrift", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": ["spring/boot-autoconfigure/src/main/java/com/linecorp/armeria/spring"], "spoonStatsSummary": {"UPD": 2, "spoonMethodsChanged": 2, "TOT": 12, "MOV": 5, "INS": 2, "DEL": 3, "spoonFilesChanged": 2}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 0, "alsoFixesPhrase": 0}, "body": "/cc @imasahiro @yuinacor \r\n\r\nWe recently removed armeria-thrift(-shaded) from the dependency list of Spring integration. However, Spring integration won't start if a user doesn't add it to the dependency list even if he or she doesn't use Thrift registration beans at all. Spring integration should work without armeria-thrift if a user doesn't have a Thrift service.", "labels": ["defect"]}, {"created": "2017-06-26 04:45:23", "commits": {"6558aba736ad94b25bfa1066c71dc24e4bb3cb9d": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "62a183d358c5e9ee766f794e92c9c7d01a9e18b6": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-06-26 06:36:02", "filteredCommits": [], "commitsDetails": [{"nameRev": "6558aba736ad94b25bfa1066c71dc24e4bb3cb9d tags/armeria-0.50.0~3", "commitMessage": "Restore idle timeout handler to beginning of pipeline and use channel.close instead of ctx.close to make sure all handlers are run on idle timeout connection close. (#641)\n\nWith the current implementation, for HTTP/2 connections, IdleTimeoutHandler will not see any more channel reads after the initial handshake and will treat streaming requests as idle. Instead, we restore idle timeout handler to the beginning of the pipeline so it sees all channel reads, and have it close the channel, instead of the handler context, to ensure all outbound handlers are called, which will ensure logic like HTTP/2 goaway runs as described in #637\r\n\r\nThe regression test is quite slow and I'm worried about flakiness, it might not be worth it.", "commitParents": ["4aa7980fb7018849aacc8b9e1e18e1388cb0f4ba"], "spoonStatsSkippedReason": "", "commitHash": "6558aba736ad94b25bfa1066c71dc24e4bb3cb9d", "authoredDateTime": "2017-06-26 20:42:42", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerPipelineConfigurator.java"}, {"insertions": 23, "deletions": 1, "lines": 24, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientPipelineConfigurator.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/internal/IdleTimeoutHandler.java"}], "commitDateTime": "2017-06-26 20:42:42", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.IdleTimeoutHandler.channelIdle(io.netty.channel.ChannelHandlerContext,io.netty.handler.timeout.IdleStateEvent)"}], "spoonFilePath": "IdleTimeoutHandler.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerPipelineConfigurator.configureRequestCountingHandlers(io.netty.channel.ChannelPipeline)"}], "spoonFilePath": "HttpServerPipelineConfigurator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.HttpServerTest.testStreamRequestLongerThanTimeout()"}], "spoonFilePath": "HttpServerTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.HttpClientPipelineConfigurator.finishSuccessfully(io.netty.channel.ChannelPipeline,com.linecorp.armeria.common.SessionProtocol)"}], "spoonFilePath": "HttpClientPipelineConfigurator.java"}]}, {"nameRev": "62a183d358c5e9ee766f794e92c9c7d01a9e18b6 tags/armeria-0.50.0~7", "commitMessage": "Add idle timeout handler after http2 handler, not before, for proper connection closing (#638)\n\nThe idle timeout handler is at the beginning of the pipeline, so when it calls ctx.close(), it gets handled by the head handler, not connection handler.\r\n\r\nFixes #637", "commitParents": ["156f03249d5c342015477e9eaa9a9b82a3e546ea"], "spoonStatsSkippedReason": "", "commitHash": "62a183d358c5e9ee766f794e92c9c7d01a9e18b6", "authoredDateTime": "2017-06-26 15:36:02", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/http/HttpClientPipelineConfigurator.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/http/HttpServerPipelineConfigurator.java"}], "commitDateTime": "2017-06-26 15:36:02", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerPipelineConfigurator.configureRequestCountingHandlers(io.netty.channel.ChannelPipeline)"}], "spoonFilePath": "HttpServerPipelineConfigurator.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.HttpClientPipelineConfigurator.finishSuccessfully(io.netty.channel.ChannelPipeline,com.linecorp.armeria.common.SessionProtocol)"}], "spoonFilePath": "HttpClientPipelineConfigurator.java"}]}], "url": "https://github.com/line/armeria/issues/637", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Verify HTTP/2 idle timeout sends goaway from server", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 2, "alsoFixesPhrase": 0}, "body": "I am trying to debug an interaction between official C++ gRPC client and armeria server where idle timeout is not recognized properly by the client, it treats the socket closure as unexpected.\r\n\r\nAfter adding some debugging to Http2ServerConnectionHandler and Http2ConnectionHandler, I feel that http2 close is not happening for an idle timeout. I see IdleTimeoutHandler calling ctx.close, but the close() logic in Http2ServerConnectionHandler or Http2ConnectionHandler don't seem to be called.\r\n\r\nI have pushed a branch with some logging hacks and a test case. @trustin Do you think you could help point out how to debug this or if I'm totally on the wrong track?\r\n\r\nhttps://github.com/anuraaga/armeria/tree/idle_timeout_test\r\n\r\nDebugging output based on the branch\r\n```\r\nAdding idle timeout handler!\r\nAdding http/2 handlers for preface!\r\n13:41:46.949 [armeria-server-nio-5-1] DEBUG c.l.a.internal.IdleTimeoutHandler - [id: 0xc9ed434c, L:/127.0.0.1:65261 - R:/127.0.0.1:65262] Closing an idle server connection\r\n// NB: There is no \"Closing the HTTP/2 connection!\" here which is unexpected\r\nAdding idle timeout handler!\r\nAdding http/2 handlers for preface!\r\n// NB: This seems to be in response to the client closing down (debugger stack trace shows this comes during onGoAwayReceived), and server still hasn't ever sent goaway.\r\nClosing the HTTP/2 connection!ChannelHandlerContext(Http2ServerConnectionHandler#0, [id: 0xd0116458, L:/127.0.0.1:65261 - R:/127.0.0.1:65279])\r\nChannelHandlerContext(Http2ServerConnectionHandler#0, [id: 0xd0116458, L:/127.0.0.1:65261 - R:/127.0.0.1:65279])\r\n```", "labels": ["defect"]}, {"created": "2017-06-26 04:18:20", "commits": {"c551f874624538dc6f74d553fa7b8bf4271a25e1": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "3f7a9aff3005b796e61a48d4e0ec1c5f3caebd98": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-06-30 08:26:05", "filteredCommits": [], "commitsDetails": [{"nameRev": "c551f874624538dc6f74d553fa7b8bf4271a25e1 tags/armeria-0.51.0~13", "commitMessage": "Fix flaky tests in RetryingHttpClientTest (#671)\n\nMotivation:\r\n\r\nNeed to fix flaky tests.\r\n\r\nModifications:\r\n\r\n- Relax the assertions a little bit, like in #636\r\n- Increase the timing tolerance of responseTimeout and reduce backoff delay so\r\n  when unexpected exception happens which adds 3200 milliseconds to test, still pass the test\r\n\r\nResult:\r\n\r\n- Fix #666", "commitParents": ["26751098c251da7babad1e33bee475e9baf849b1"], "spoonStatsSkippedReason": "", "commitHash": "c551f874624538dc6f74d553fa7b8bf4271a25e1", "authoredDateTime": "2017-07-10 14:44:20", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 5, "deletions": 3, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java"}, {"insertions": 29, "deletions": 17, "lines": 46, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientTest.java"}], "commitDateTime": "2017-07-10 14:44:20", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 3, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.respectRetryAfter()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.retryWhenStatusMatched()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.1.configure(com.linecorp.armeria.server.ServerBuilder).3.doGet(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpResponseWriter)"}, {"UPD": 0, "TOT": 7, "MOV": 2, "INS": 3, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.timeoutWhenServerDoseNotResponse()"}, {"UPD": 0, "TOT": 7, "MOV": 2, "INS": 3, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.timeoutWhenServerSendServiceUnavailable()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.differentResponseTimeout()"}, {"UPD": 0, "TOT": 10, "MOV": 3, "INS": 4, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.consecutiveRequests()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.retryWhenContentMatched()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 5, "MOV": 0, "INS": 3, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.retryAfterOneYear()"}], "spoonFilePath": "RetryingHttpClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.retry0(int,com.linecorp.armeria.client.retry.Backoff,com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,java.util.function.Function,com.linecorp.armeria.common.DefaultHttpResponse,java.lang.Throwable,long)"}, {"UPD": 0, "TOT": 2, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.retry(int,com.linecorp.armeria.client.retry.Backoff,com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,java.util.function.Function,com.linecorp.armeria.common.DefaultHttpResponse)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.getRetryAfterMillis(com.linecorp.armeria.common.HttpResponse)"}], "spoonFilePath": "RetryingHttpClient.java"}]}, {"nameRev": "3f7a9aff3005b796e61a48d4e0ec1c5f3caebd98 tags/armeria-0.51.0~23", "commitMessage": "Add common EventLoopGroups and blocking task Executor (#652)\n\nMotivation:\r\n\r\nA simple application would use the default settings usually, and it will\r\nmake each ClientFactory and Server has its own EventLoopGroups, which\r\nmay create too many event loop threads.\r\n\r\nModifications:\r\n\r\n- Add CommonPools that provides the common EventLoopGroups and blocking\r\n  task Executor which are used when a user did not override the default\r\n- Make a user specify whether to shutdown the EventLoopGroups when\r\n  specifying them\r\n- ClientFactory and Server do not create a new EventLoopGroup by\r\n  themselves anymore\r\n  - Add EventLoopGroups.newEventLoopGroup() utility method so that a\r\n    user can create a compatible EventLoopGroup easily instead\r\n- Miscellaneous:\r\n  - Fix flakiness of ServerTest\r\n  - Fix flakiness of ThriftStructuredLoggingTest\r\n  - Clean up GrpcClientTest\r\n\r\nResult:\r\n\r\n- Saner default behavior\r\n- Fixes #646\r\n- Fixes #636", "commitParents": ["4194f2c87612008b791a4e50129233b4e5798cae"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "3f7a9aff3005b796e61a48d4e0ec1c5f3caebd98", "authoredDateTime": "2017-06-30 17:26:04", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 3, "lines": 7, "filePath": "core/src/test/java/com/linecorp/armeria/internal/ConnectionLimitingHandlerIntegrationTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/client/HttpClientPipeliningTest.java"}, {"insertions": 15, "deletions": 31, "lines": 46, "filePath": "core/src/main/java/com/linecorp/armeria/common/Flags.java"}, {"insertions": 83, "deletions": 0, "lines": 83, "filePath": "core/src/main/java/com/linecorp/armeria/common/CommonPools.java"}, {"insertions": 52, "deletions": 0, "lines": 52, "filePath": "core/src/main/java/com/linecorp/armeria/internal/ChannelUtil.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java"}, {"insertions": 5, "deletions": 7, "lines": 12, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/thrift/ThriftStructuredLoggingTest.java"}, {"insertions": 18, "deletions": 59, "lines": 77, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientFactoryBuilder.java"}, {"insertions": 18, "deletions": 19, "lines": 37, "filePath": "grpc/src/test/java/com/linecorp/armeria/client/grpc/GrpcClientTest.java"}, {"insertions": 78, "deletions": 77, "lines": 155, "filePath": "core/src/main/java/com/linecorp/armeria/server/Server.java"}, {"insertions": 17, "deletions": 1, "lines": 18, "filePath": "core/src/main/java/com/linecorp/armeria/internal/ConnectionLimitingHandler.java"}, {"insertions": 61, "deletions": 28, "lines": 89, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpClientFactory.java"}, {"insertions": 6, "deletions": 2, "lines": 8, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpServerTest.java"}, {"insertions": 14, "deletions": 17, "lines": 31, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServerTest.java"}, {"insertions": 6, "deletions": 1, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/client/pool/DefaultKeyedChannelPool.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/ClientFactory.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "grpc/src/test/java/com/linecorp/armeria/server/grpc/GrpcServiceServerTest.java"}, {"insertions": 82, "deletions": 0, "lines": 82, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/EventLoopGroups.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "thrift/src/main/java/com/linecorp/armeria/internal/thrift/ThriftFieldAccess.java"}, {"insertions": 30, "deletions": 45, "lines": 75, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}, {"insertions": 49, "deletions": 33, "lines": 82, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerConfig.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/Exceptions.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientTest.java"}], "commitDateTime": "2017-06-30 17:26:04", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/636", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Flaky test: ServerTest.testIdleTimeoutByNoContentSent ", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0.0, "spoonMethodsChanged": 0, "TOT": 0.0, "MOV": 0.0, "INS": 0.0, "DEL": 0.0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 2, "alsoFixesPhrase": 0}, "body": "```\r\ncom.linecorp.armeria.server.ServerTest > testIdleTimeoutByNoContentSent FAILED\r\n    java.lang.AssertionError: \r\n    Expected: is a value equal to or greater than <500L>\r\n         but: <498L> was less than <500L>\r\n        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n        at org.junit.Assert.assertThat(Assert.java:956)\r\n        at org.junit.Assert.assertThat(Assert.java:923)\r\n        at com.linecorp.armeria.server.ServerTest.testIdleTimeoutByNoContentSent(ServerTest.java:208)\r\n```\r\n\r\nhttps://travis-ci.org/line/armeria/builds/246949908", "labels": ["defect"]}, {"created": "2017-06-22 08:56:57", "commits": {"bb095bfa1724018ea705dacbbebe9e9f15504fda": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-07-06 12:35:57", "filteredCommits": [], "commitsDetails": [{"nameRev": "bb095bfa1724018ea705dacbbebe9e9f15504fda tags/armeria-0.51.0~15", "commitMessage": "Enable response timeout is enforced across the retries by RetryingClient (#656)\n\nMotivation:\r\n\r\nCurrently, response timeout is applied to an individual retry made by RetryingClient.\r\nHowever, the timeout needs to happen when the time passed timout milliseconds from the first attempt.\r\n\r\nModification:\r\n\r\n- Add timestamp and reset the responseTimeoutMillis whenever retries is made\r\n\r\nResult:\r\n\r\nClose #627", "commitParents": ["a2559c1d659ad23af6582e08b619e564ea326952"], "spoonStatsSkippedReason": "", "commitHash": "bb095bfa1724018ea705dacbbebe9e9f15504fda", "authoredDateTime": "2017-07-06 21:35:56", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 16, "lines": 20, "filePath": "core/src/main/java/com/linecorp/armeria/internal/HttpHeaderSubscriber.java"}, {"insertions": 10, "deletions": 10, "lines": 20, "filePath": "core/src/main/java/com/linecorp/armeria/client/HttpResponseDecoder.java"}, {"insertions": 15, "deletions": 7, "lines": 22, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingHttpClient.java"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/Http2ResponseDecoder.java"}, {"insertions": 11, "deletions": 3, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingRpcClient.java"}, {"insertions": 14, "deletions": 11, "lines": 25, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/AbstractStreamMessageDuplicator.java"}, {"insertions": 73, "deletions": 7, "lines": 80, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RetryingClient.java"}, {"insertions": 12, "deletions": 7, "lines": 19, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/HttpStatusBasedRetryStrategy.java"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/Http1ResponseDecoder.java"}, {"insertions": 178, "deletions": 34, "lines": 212, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RetryingHttpClientTest.java"}], "commitDateTime": "2017-07-06 21:35:56", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.StreamMessageProcessor.subscribe(com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator$DownstreamSubscription)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.ChildStreamMessage.isOpen()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.duplicateStream()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.StreamMessageProcessor.isOpen()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.StreamMessageProcessor.State"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.StreamMessageProcessor.close()"}, {"UPD": 1, "TOT": 5, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.ChildStreamMessage.isEmpty()"}, {"UPD": 1, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.AbstractStreamMessageDuplicator.StreamMessageProcessor"}], "spoonFilePath": "AbstractStreamMessageDuplicator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.Http2ResponseDecoder.addResponse(int,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.client.DecodedHttpResponse,com.linecorp.armeria.common.logging.RequestLogBuilder,long,long)"}], "spoonFilePath": "Http2ResponseDecoder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.doExecute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcRequest,com.linecorp.armeria.client.retry.Backoff)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.retry0(int,com.linecorp.armeria.client.retry.Backoff,com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcRequest,java.util.function.Supplier,com.linecorp.armeria.common.DefaultRpcResponse,java.lang.Throwable)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingRpcClient.execute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.RpcRequest)"}], "spoonFilePath": "RetryingRpcClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.Http1ResponseDecoder.addResponse(int,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.client.DecodedHttpResponse,com.linecorp.armeria.common.logging.RequestLogBuilder,long,long)"}], "spoonFilePath": "Http1ResponseDecoder.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 7, "MOV": 3, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.internal.HttpHeaderSubscriber.onNext(com.linecorp.armeria.common.HttpObject)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.HttpHeaderSubscriber.accept(java.lang.Void,java.lang.Throwable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.HttpHeaderSubscriber"}], "spoonFilePath": "HttpHeaderSubscriber.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.HttpResponseDecoder.HttpResponseWrapper.cancelTimeout()"}], "spoonFilePath": "HttpResponseDecoder.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 7, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.respectRetryAfter()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.1.configure(com.linecorp.armeria.server.ServerBuilder).3.doGet(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpResponseWriter)"}, {"UPD": 2, "TOT": 5, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.respectRetryAfterWithHttpDate()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.timeoutWhenServerDoseNotResponse()"}, {"UPD": 0, "TOT": 7, "MOV": 0, "INS": 7, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.differentResponseTimeout()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.retryingHttpClientOf(long,com.linecorp.armeria.client.retry.RetryStrategy)"}, {"UPD": 1, "TOT": 3, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.1.configure(com.linecorp.armeria.server.ServerBuilder).5"}, {"UPD": 3, "TOT": 8, "MOV": 4, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.retryingClientWith(com.linecorp.armeria.client.retry.RetryStrategy)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.RetryStrategyWrapper"}, {"UPD": 1, "TOT": 4, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.consecutiveRequests()"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.retryWhenStatusMatched()"}, {"UPD": 2, "TOT": 8, "MOV": 6, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.1.configure(com.linecorp.armeria.server.ServerBuilder).5.doGet(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpResponseWriter)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.timeoutWhenServerSendServiceUnavailable()"}, {"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.retryWhenContentMatched()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.disableResponseTimeout()"}, {"UPD": 0, "TOT": 6, "MOV": 0, "INS": 6, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.1.configure(com.linecorp.armeria.server.ServerBuilder).8.doGet(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpResponseWriter)"}, {"UPD": 12, "TOT": 31, "MOV": 16, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClientTest.retryAfterOneYear()"}], "spoonFilePath": "RetryingHttpClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.newBackoff()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.getNextDelay(long,com.linecorp.armeria.client.ClientRequestContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.setDeadlineOfThisRequest(com.linecorp.armeria.client.ClientRequestContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.execute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.Request)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.resetResponseTimeout(com.linecorp.armeria.client.ClientRequestContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.doExecute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.Request,com.linecorp.armeria.client.retry.Backoff)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingClient.responseTimeoutMillis(com.linecorp.armeria.client.ClientRequestContext)"}], "spoonFilePath": "RetryingClient.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 15, "MOV": 8, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.retry.HttpStatusBasedRetryStrategy.shouldRetry(com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.common.HttpResponse)"}], "spoonFilePath": "HttpStatusBasedRetryStrategy.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 8, "MOV": 3, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.retry0(int,com.linecorp.armeria.client.retry.Backoff,com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequestDuplicator,java.util.function.Function,com.linecorp.armeria.common.DefaultHttpResponse,java.lang.Throwable,long)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.execute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.getHttpHeaders(com.linecorp.armeria.common.HttpResponse)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.getRetryAfterMillis(com.linecorp.armeria.common.HttpResponse)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RetryingHttpClient.doExecute(com.linecorp.armeria.client.ClientRequestContext,com.linecorp.armeria.common.HttpRequest,com.linecorp.armeria.client.retry.Backoff)"}], "spoonFilePath": "RetryingHttpClient.java"}]}], "url": "https://github.com/line/armeria/issues/627", "ttf": 14.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Ensure response timeout is enforced across the retries by RetryingClient", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Currently, response timeout is applied to an individual retry made by RetryingClient. It means, when response timeout is 10 seconds, the following request will never time out:\r\n\r\n1. RetryingClient sends a request that took 3 seconds.\r\n2. The result of the request 1 was a failure. RetryingClient schedules a retry in 3 seconds.\r\n3. Repeat from 1.\r\n\r\nBecause each attempt takes less than 10 seconds, RetryingClient can keep retrying for indefinite amount of time. It may not be a critical issue though, because RetryingClient ensures that a `Backoff` is decorated by `.withMaxAttempts()`.", "labels": ["defect"]}, {"created": "2017-06-22 06:15:59", "commits": {"f77b6a041c9403491e8275e777e1933bd2e13fac": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-06-23 01:48:06", "filteredCommits": [], "commitsDetails": [{"nameRev": "f77b6a041c9403491e8275e777e1933bd2e13fac tags/armeria-0.49.0~2", "commitMessage": "Fix a race condition in DeferredStreamMessage.subscribeToDelegate() (#626)\n\nMotivation:\r\n\r\nDeferredStreamMessage.subscribeToDelegate() can subscribe to the\r\ndelegate twice when one thread calls subscribe() and the other one calls\r\ndelegate().\r\n\r\nModifications:\r\n\r\n- Make sure subscribeToDelegate() call StreamMessage.subscribe() only\r\n  once by using CAS\r\n\r\nResult:\r\n\r\n- Fixes #623", "commitParents": ["a7e474f2c3a62afabe6afd319f10f97b89a245e5"], "spoonStatsSkippedReason": "", "commitHash": "f77b6a041c9403491e8275e777e1933bd2e13fac", "authoredDateTime": "2017-06-23 10:48:05", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 7, "deletions": 2, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java"}, {"insertions": 71, "deletions": 33, "lines": 104, "filePath": "core/src/main/java/com/linecorp/armeria/common/stream/DeferredStreamMessage.java"}], "commitDateTime": "2017-06-23 10:48:05", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 6, "MOV": 2, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.DefaultStreamMessage.subscribe0(com.linecorp.armeria.common.stream.DefaultStreamMessage$SubscriptionImpl)"}], "spoonFilePath": "DefaultStreamMessage.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.DeferredStreamMessage.PendingSubscription"}, {"UPD": 7, "TOT": 8, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.DeferredStreamMessage.delegate(com.linecorp.armeria.common.stream.StreamMessage,boolean)"}, {"UPD": 1, "TOT": 4, "MOV": 3, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.DeferredStreamMessage.subscribeToDelegate(org.reactivestreams.Subscriber,java.util.concurrent.Executor,boolean)"}, {"UPD": 0, "TOT": 5, "MOV": 0, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.DeferredStreamMessage.subscribeToDelegate(com.linecorp.armeria.common.stream.DeferredStreamMessage$PendingSubscription,boolean)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.DeferredStreamMessage.abort()"}, {"UPD": 4, "TOT": 12, "MOV": 0, "INS": 4, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.common.stream.DeferredStreamMessage.subscribe0(org.reactivestreams.Subscriber,java.util.concurrent.Executor,boolean)"}, {"UPD": 7, "TOT": 9, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.stream.DeferredStreamMessage"}], "spoonFilePath": "DeferredStreamMessage.java"}]}], "url": "https://github.com/line/armeria/issues/623", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "IllegalStateException in HttpServerHandler", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Seems like a race condition where a response is aborted before `HttpServerHandler` subscribes to it.\r\n\r\n```\r\n08:50:17.918 [armeria-server-nio-29-1] WARN  c.l.a.server.http.HttpServerHandler - [id: 0x294cb5da, L:/127.0.0.1:1218 - R:/127.0.0.1:1219][h1c] Unexpected exception:\r\njava.lang.IllegalStateException: subscribed by other subscriber already: com.linecorp.armeria.server.http.HttpResponseSubscriber@64b7a4c6\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.subscribe0(DefaultStreamMessage.java:184)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.subscribe(DefaultStreamMessage.java:178)\r\n\tat com.linecorp.armeria.common.stream.DeferredStreamMessage.subscribeToDelegate(DeferredStreamMessage.java:205)\r\n\tat com.linecorp.armeria.common.stream.DeferredStreamMessage.subscribe0(DeferredStreamMessage.java:195)\r\n\tat com.linecorp.armeria.common.stream.DeferredStreamMessage.subscribe(DeferredStreamMessage.java:182)\r\n\tat com.linecorp.armeria.server.http.HttpServerHandler.handleRequest(HttpServerHandler.java:335)\r\n\tat com.linecorp.armeria.server.http.HttpServerHandler.channelRead(HttpServerHandler.java:198)\r\n```\r\n\r\nhttps://ci.appveyor.com/project/trustin/armeria/build/master.550", "labels": ["defect"]}, {"created": "2017-06-13 07:17:56", "commits": {"2304282567d6915363be5bcf630f1aec719a691a": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2017-06-15 01:38:30", "filteredCommits": [], "commitsDetails": [{"nameRev": "2304282567d6915363be5bcf630f1aec719a691a tags/armeria-0.48.0~7", "commitMessage": "Add missing source files to armeria-tomcat8.0 and armeria-thrift0.9 (#609)\n\n- Fixes #604\r\n- Also generates Javadoc JARs correctly", "commitParents": ["ee50e9f961c40cc01ebae40fa5301ed5df197ff6"], "spoonStatsSkippedReason": "", "commitHash": "2304282567d6915363be5bcf630f1aec719a691a", "authoredDateTime": "2017-06-15 10:38:30", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 0, "lines": 2, "filePath": "build.gradle"}, {"insertions": 3, "deletions": 0, "lines": 3, "filePath": "thrift0.9/build.gradle"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "tomcat8.0/build.gradle"}, {"insertions": 0, "deletions": 20, "lines": 20, "filePath": "tomcat8.0/src/main/java/com/linecorp/armeria/server/http/tomcat/package-info.java"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "settings/checkstyle/checkstyle-suppressions.xml"}], "commitDateTime": "2017-06-15 10:38:30", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [], "spoonFilePath": "package-info.java"}]}], "url": "https://github.com/line/armeria/issues/604", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "maven archive armeria-tomcat8.0-source.jar   does not include completed classes", "statsSkippedReason": "", "user": "jonefeewang", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "maven archive armeria-tomcat8.0-source.jar does not include completed classes, in a project using armeria-tomcat8.0, when navigated to class \"TomcatServiceBuilder\" for example,  IntelliJ Idea is showing the decompiled class file, not the source file", "labels": ["defect"]}, {"created": "2017-06-01 10:33:53", "commits": {"eef17a3ad6417ffc6c8c1cc9ed3d389684b0fbbf": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-06-02 02:32:30", "filteredCommits": [], "commitsDetails": [{"nameRev": "eef17a3ad6417ffc6c8c1cc9ed3d389684b0fbbf tags/armeria-0.48.0~26", "commitMessage": "Support path parameter names that start with a digit (#587)\n\nMotivation:\r\n\r\nFor example, the following will fail:\r\n\r\n    PathMapping.of(\"/{0}\");\r\n\r\n.. because we use the path parameter name a user specified in verbatim\r\nwhen building a regular expression. We don't really need to use named\r\ncapturing groups in the generated regular expression. We can simply keep\r\nan array which contains the path parameter names in the order of\r\nappearance and then map the capturing group number into a path parameter\r\nname at O(1) time.\r\n\r\nModifications:\r\n\r\n- Use numbered capturing groups for the regular expression generated by\r\n  DefaultPathMapping\r\n\r\nResult:\r\n\r\n- Fixes #586", "commitParents": ["bd865a7f214e143b67552ed3c32b34d9ee0f8f87"], "spoonStatsSkippedReason": "", "commitHash": "eef17a3ad6417ffc6c8c1cc9ed3d389684b0fbbf", "authoredDateTime": "2017-06-02 11:32:29", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 11, "deletions": 0, "lines": 11, "filePath": "core/src/test/java/com/linecorp/armeria/server/DefaultPathMappingTest.java"}, {"insertions": 40, "deletions": 32, "lines": 72, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultPathMapping.java"}], "commitDateTime": "2017-06-02 11:32:29", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMappingTest.testNumericPathParamNames()"}], "spoonFilePath": "DefaultPathMappingTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 4, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMapping.hashCode()"}, {"UPD": 2, "TOT": 6, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMapping.equals(java.lang.Object)"}, {"UPD": 8, "TOT": 33, "MOV": 11, "INS": 10, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMapping"}, {"UPD": 2, "TOT": 17, "MOV": 7, "INS": 5, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.DefaultPathMapping.doApply(java.lang.String,java.lang.String)"}], "spoonFilePath": "DefaultPathMapping.java"}]}], "url": "https://github.com/line/armeria/issues/586", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Cannot build a PathMapping with a path parameter name starts with a digit", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "For example, the following will fail:\r\n\r\n    PathMapping.of(\"/{0}\");\r\n\r\n.. because we use the path parameter name a user specified in verbatim when building a regular expression. We don't really need to use named capturing groups in the generated regular expression. We can simply keep an array which contains the path parameter names in the order of appearance and then map the capturing group number into a path parameter name at O(1) time.", "labels": ["defect"]}, {"created": "2017-05-30 10:42:04", "commits": {"fbd4adc930828cf4db0a0dd12987d4ed7a24e0cd": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2017-08-07 03:10:48", "filteredCommits": [], "commitsDetails": [{"nameRev": "fbd4adc930828cf4db0a0dd12987d4ed7a24e0cd tags/armeria-0.53.0~31", "commitMessage": "Enhance annotated service path mapping: HTTP method and media type based mapping (#696)\n\nMotivation:\r\n\r\nCurrently we cannot bind two or more service methods with the same path even if they have different HTTP methods. Also, we need to bind them depending on 'content-type' or 'accept' header of the request for some cases.\r\nThese modifications will affect only to annotated service for now, and then apply this feature to the other services later.\r\n\r\nModifications:\r\n\r\n- Fix a bug that might get a wrong service instance from the cache when finding a service.\r\n- Add `PathMappingContext` and use it as a `PathMapping`'s argument instead of '(path, query)'.\r\n- Introduce a simple content negotiation mechanism to find a service method by 'content-type' or 'accept' header.\r\n- Add 'score' to `PathMappingResult` to find the best suitable service method.\r\n- Add 'Router' and 'RoutingTrie' in order to find a service in an efficient way.\r\n- Remove 'PathMappings' and use 'Router' instead.\r\n- Apply caffeine cache to improve the efficiency of the service cache.\r\n\r\nResult:\r\n\r\n- Fixes #579", "commitParents": ["7b2e5238a5e914c9e964e337f2a4cbde6c27358e"], "spoonStatsSkippedReason": "tooManyFiles", "commitHash": "fbd4adc930828cf4db0a0dd12987d4ed7a24e0cd", "authoredDateTime": "2017-08-07 12:10:47", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 4, "deletions": 21, "lines": 25, "filePath": "core/src/main/java/com/linecorp/armeria/server/AnnotatedHttpService.java"}, {"insertions": 20, "deletions": 8, "lines": 28, "filePath": "core/src/main/java/com/linecorp/armeria/server/PathMapping.java"}, {"insertions": 120, "deletions": 1, "lines": 121, "filePath": "core/src/main/java/com/linecorp/armeria/common/MediaType.java"}, {"insertions": 86, "deletions": 8, "lines": 94, "filePath": "core/src/main/java/com/linecorp/armeria/common/Flags.java"}, {"insertions": 4, "deletions": 5, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/RegexPathMapping.java"}, {"insertions": 27, "deletions": 12, "lines": 39, "filePath": "core/src/main/java/com/linecorp/armeria/server/VirtualHost.java"}, {"insertions": 11, "deletions": 0, "lines": 11, "filePath": "core/src/test/java/com/linecorp/armeria/common/MediaTypeTest.java"}, {"insertions": 80, "deletions": 5, "lines": 85, "filePath": "core/src/main/java/com/linecorp/armeria/server/PathMappingResult.java"}, {"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/test/java/com/linecorp/armeria/server/ExactPathMappingTest.java"}, {"insertions": 141, "deletions": 0, "lines": 141, "filePath": "core/src/test/java/com/linecorp/armeria/server/PathMappingContextTest.java"}, {"insertions": 85, "deletions": 5, "lines": 90, "filePath": "logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java"}, {"insertions": 117, "deletions": 0, "lines": 117, "filePath": "core/src/main/java/com/linecorp/armeria/server/PathMappingContextWrapper.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/server/PathMapped.java"}, {"insertions": 15, "deletions": 11, "lines": 26, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultPathMapping.java"}, {"insertions": 6, "deletions": 5, "lines": 11, "filePath": "core/src/main/java/com/linecorp/armeria/common/NonWrappingRequestContext.java"}, {"insertions": 183, "deletions": 0, "lines": 183, "filePath": "core/src/test/java/com/linecorp/armeria/server/RoutingTrieTest.java"}, {"insertions": 3, "deletions": 1, "lines": 4, "filePath": "build.gradle"}, {"insertions": 73, "deletions": 10, "lines": 83, "filePath": "core/src/main/java/com/linecorp/armeria/server/AnnotatedHttpServices.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/server/PathMappingTest.java"}, {"insertions": 28, "deletions": 0, "lines": 28, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpResponseException.java"}, {"insertions": 21, "deletions": 10, "lines": 31, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java"}, {"insertions": 10, "deletions": 9, "lines": 19, "filePath": "core/src/test/java/com/linecorp/armeria/server/GlobPathMappingTest.java"}, {"insertions": 246, "deletions": 0, "lines": 246, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultPathMappingContext.java"}, {"insertions": 260, "deletions": 0, "lines": 260, "filePath": "core/src/main/java/com/linecorp/armeria/server/Routers.java"}, {"insertions": 76, "deletions": 0, "lines": 76, "filePath": "core/src/test/java/com/linecorp/armeria/server/RouterTest.java"}, {"insertions": 7, "deletions": 6, "lines": 13, "filePath": "core/src/test/java/com/linecorp/armeria/server/DefaultPathMappingTest.java"}, {"insertions": 11, "deletions": 4, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/server/PrefixPathMapping.java"}, {"insertions": 116, "deletions": 0, "lines": 116, "filePath": "core/src/main/java/com/linecorp/armeria/server/RouteCache.java"}, {"insertions": 15, "deletions": 0, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContext.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerConfig.java"}, {"insertions": 226, "deletions": 0, "lines": 226, "filePath": "core/src/main/java/com/linecorp/armeria/server/HttpHeaderPathMapping.java"}, {"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/test/java/com/linecorp/armeria/server/RegexPathMappingTest.java"}, {"insertions": 66, "deletions": 0, "lines": 66, "filePath": "core/src/main/java/com/linecorp/armeria/server/CompositeRouter.java"}, {"insertions": 4, "deletions": 100, "lines": 104, "filePath": "core/src/main/java/com/linecorp/armeria/common/MediaTypeSet.java"}, {"insertions": 14, "deletions": 0, "lines": 14, "filePath": "site/src/sphinx/server-basics.rst"}, {"insertions": 14, "deletions": 0, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServiceRequestContextWrapper.java"}, {"insertions": 43, "deletions": 0, "lines": 43, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/ProduceType.java"}, {"insertions": 43, "deletions": 0, "lines": 43, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/ConsumeType.java"}, {"insertions": 550, "deletions": 0, "lines": 550, "filePath": "core/src/main/java/com/linecorp/armeria/server/RoutingTrie.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "core/build.gradle"}, {"insertions": 3, "deletions": 4, "lines": 7, "filePath": "core/src/main/java/com/linecorp/armeria/server/composition/SimpleCompositeService.java"}, {"insertions": 0, "deletions": 140, "lines": 140, "filePath": "core/src/main/java/com/linecorp/armeria/server/PathMappings.java"}, {"insertions": 161, "deletions": 0, "lines": 161, "filePath": "core/src/test/java/com/linecorp/armeria/server/HttpHeaderPathMappingTest.java"}, {"insertions": 35, "deletions": 0, "lines": 35, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/ProduceTypes.java"}, {"insertions": 35, "deletions": 0, "lines": 35, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/ConsumeTypes.java"}, {"insertions": 202, "deletions": 0, "lines": 202, "filePath": "licenses/LICENSE.caffeine.al20.txt"}, {"insertions": 20, "deletions": 7, "lines": 27, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java"}, {"insertions": 28, "deletions": 72, "lines": 100, "filePath": "core/src/test/java/com/linecorp/armeria/server/TestConverters.java"}, {"insertions": 5, "deletions": 0, "lines": 5, "filePath": "NOTICE.txt"}, {"insertions": 314, "deletions": 218, "lines": 532, "filePath": "core/src/test/java/com/linecorp/armeria/server/AnnotatedHttpServiceTest.java"}, {"insertions": 8, "deletions": 5, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/server/ExactPathMapping.java"}, {"insertions": 5, "deletions": 1, "lines": 6, "filePath": "dependencies.yml"}, {"insertions": 4, "deletions": 6, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/server/GlobPathMapping.java"}, {"insertions": 15, "deletions": 1, "lines": 16, "filePath": "core/src/main/java/com/linecorp/armeria/server/AbstractVirtualHostBuilder.java"}, {"insertions": 38, "deletions": 0, "lines": 38, "filePath": "core/src/main/java/com/linecorp/armeria/server/Router.java"}, {"insertions": 4, "deletions": 0, "lines": 4, "filePath": "site/src/apidocs/package-lists/caffeine/package-list"}, {"insertions": 105, "deletions": 0, "lines": 105, "filePath": "core/src/main/java/com/linecorp/armeria/server/PathMappingContext.java"}, {"insertions": 38, "deletions": 0, "lines": 38, "filePath": "core/src/main/java/com/linecorp/armeria/server/annotation/Order.java"}, {"insertions": 2, "deletions": 4, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/server/CatchAllPathMapping.java"}, {"insertions": 12, "deletions": 20, "lines": 32, "filePath": "core/src/main/java/com/linecorp/armeria/server/composition/AbstractCompositeService.java"}, {"insertions": 9, "deletions": 11, "lines": 20, "filePath": "core/src/main/java/com/linecorp/armeria/server/AbstractPathMapping.java"}, {"insertions": 2, "deletions": 1, "lines": 3, "filePath": "core/src/test/java/com/linecorp/armeria/server/PrefixPathMappingTest.java"}], "commitDateTime": "2017-08-07 12:10:47", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/579", "ttf": 68.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "AnnotatedHttpService: Unable to bind two methods with same path patterns and different HTTP methods", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "The following is not possible:\r\n\r\n```java\r\npublic class FooService {\r\n    @Get\r\n    @Path(\"/foo\")\r\n    public Object foo() { ... }\r\n\r\n    @Post\r\n    @Path(\"/foo\")\r\n    public Object fooPost() { ... } \r\n}\r\n```\r\n\r\nMore complicated one with path variables:\r\n\r\n```java\r\npublic class BarService {\r\n    @Get\r\n    @Path(\"/bar/{getName}\")\r\n    public Object bar(@PathParam(\"getName\") String name) { ... }\r\n\r\n    @Post\r\n    @Path(\"/bar/{postName}\") // Basically same with bar(), but has different param name.\r\n    public Object barPost(@PathParam(\"postName\") String name) { ... } \r\n}\r\n```\r\n\r\nThings will get even more complicated once we add an annotation for media type negotiation.", "labels": ["defect"]}, {"created": "2017-05-29 07:22:14", "commits": {"6228d4832e81f974bd02b97cff7cbfc22fc32d76": {"commitGHEventType": "referenced", "commitUser": "hyangtack"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-05-29 10:20:29", "filteredCommits": [], "commitsDetails": [{"nameRev": "6228d4832e81f974bd02b97cff7cbfc22fc32d76 tags/armeria-0.47.0~3", "commitMessage": "Notify HTTP message aggregation future even on abortion (#572)\n\nMotivation:\r\n\r\nHttpMessageAggregator and its subtypes were relying on\r\nSubscriber.onError() and onComplete() to get notified when an HTTP\r\nmessage stream is closed. However, they are not invoked when the message\r\nis aborted or cancelled due to timeout, leaving the future returned by\r\naggregate() never fulfilled.\r\n\r\nModifications:\r\n\r\n- Use StreamMessage.closeFuture() to always get notified when a stream\r\n  being aggregated is closed\r\n- Overall clean-up\r\n  - Move the common code up from HttpRequest/ResponseAggregator to\r\n    HttpMessageAggregator\r\n  - Make most methods in HttpMessageAggregator final\r\n- Add test cases\r\n\r\nResult:\r\n\r\n- Fixes #571", "commitParents": ["1e4767cb06459845a2ec69b9076d927bf60535d4"], "spoonStatsSkippedReason": "", "commitHash": "6228d4832e81f974bd02b97cff7cbfc22fc32d76", "authoredDateTime": "2017-05-29 19:20:28", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 70, "deletions": 22, "lines": 92, "filePath": "core/src/main/java/com/linecorp/armeria/common/http/HttpMessageAggregator.java"}, {"insertions": 6, "deletions": 2, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/common/http/HttpResponse.java"}, {"insertions": 6, "deletions": 2, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/common/http/HttpRequest.java"}, {"insertions": 90, "deletions": 0, "lines": 90, "filePath": "core/src/test/java/com/linecorp/armeria/common/http/DefaultHttpResponseTest.java"}, {"insertions": 5, "deletions": 16, "lines": 21, "filePath": "core/src/main/java/com/linecorp/armeria/common/http/HttpRequestAggregator.java"}, {"insertions": 90, "deletions": 0, "lines": 90, "filePath": "core/src/test/java/com/linecorp/armeria/common/http/DefaultHttpRequestTest.java"}, {"insertions": 15, "deletions": 28, "lines": 43, "filePath": "core/src/main/java/com/linecorp/armeria/common/http/HttpResponseAggregator.java"}], "commitDateTime": "2017-05-29 19:20:28", "commitUser": "hyangtack", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.onFailure()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.onHeaders(com.linecorp.armeria.common.http.HttpHeaders)"}, {"UPD": 3, "TOT": 13, "MOV": 8, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.add(com.linecorp.armeria.common.http.HttpData)"}, {"UPD": 2, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.finish()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.onError(java.lang.Throwable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.onNext(com.linecorp.armeria.common.http.HttpObject)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.onSuccess(com.linecorp.armeria.common.http.HttpData)"}, {"UPD": 3, "TOT": 5, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.clear()"}, {"UPD": 0, "TOT": 5, "MOV": 0, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.onData(com.linecorp.armeria.common.http.HttpData)"}, {"UPD": 1, "TOT": 4, "MOV": 3, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.onSubscribe(org.reactivestreams.Subscription)"}, {"UPD": 3, "TOT": 4, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.future()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpMessageAggregator.doClear()"}], "spoonFilePath": "HttpMessageAggregator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.DefaultHttpRequestTest"}], "spoonFilePath": "DefaultHttpRequestTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.http.HttpRequestAggregator.onComplete()"}, {"UPD": 5, "TOT": 7, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpRequestAggregator.onNext(com.linecorp.armeria.common.http.HttpObject)"}, {"UPD": 5, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpRequestAggregator.onError(java.lang.Throwable)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpRequestAggregator.doClear()"}], "spoonFilePath": "HttpRequestAggregator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.aggregate()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.aggregate(java.util.concurrent.Executor)"}], "spoonFilePath": "HttpResponse.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.DefaultHttpResponseTest"}], "spoonFilePath": "DefaultHttpResponseTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.aggregate()"}, {"UPD": 0, "TOT": 4, "MOV": 1, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.aggregate(java.util.concurrent.Executor)"}], "spoonFilePath": "HttpRequest.java"}, {"spoonMethods": [{"UPD": 4, "TOT": 6, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpResponseAggregator.onNext(com.linecorp.armeria.common.http.HttpObject)"}, {"UPD": 5, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpResponseAggregator.onError(java.lang.Throwable)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.common.http.HttpResponseAggregator.onComplete()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.http.HttpResponseAggregator.doClear()"}], "spoonFilePath": "HttpResponseAggregator.java"}]}], "url": "https://github.com/line/armeria/issues/571", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Future returned by HttpRequest.aggregate() may not complete if request times out", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "The internal subscriber implementation of `HttpRequest.aggregate()` and `HttpResponse.aggregate()` operation do not complete the returned `CompletableFuture` when the subscription has been cancelled, because a `StreamMessage` will not call `Subscriber.onComplete()` or `onError()` when the subscription is cancelled. We need to rely on `StreamMessage.closeFuture()`.", "labels": ["defect"]}, {"created": "2017-05-23 06:04:17", "user": "trustin", "body": "Due to the following bug in Netty: https://github.com/netty/netty/issues/6770\r\n\r\nIt seems like the connection is closed. An exception will be logged by Netty, which is potentially expensive. It's probably OK to leave it as it is, but we should keep track of this.\r\n\r\n```\r\n05:53:55.405 [armeria-server-boss-epoll-26-1] WARN  io.netty.channel.AbstractChannel - Failed to close a channel.\r\njava.lang.IllegalStateException: channel not registered to an event loop\r\n\tat io.netty.channel.AbstractChannel.eventLoop(AbstractChannel.java:158)\r\n\tat io.netty.channel.epoll.AbstractEpollChannel.doDeregister(AbstractEpollChannel.java:140)\r\n\tat io.netty.channel.epoll.AbstractEpollChannel.doClose(AbstractEpollChannel.java:117)\r\n\tat io.netty.channel.epoll.AbstractEpollStreamChannel.doClose(AbstractEpollStreamChannel.java:721)\r\n\tat io.netty.channel.AbstractChannel$AbstractUnsafe.closeForcibly(AbstractChannel.java:703)\r\n```", "closed": "2017-07-11 06:25:27", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/558", "ttf": 49.000277777777775, "commits": {}, "labels": ["defect"], "title": "Exception raised when closing a connection that exceeded maxNumConnections"}, {"created": "2017-05-11 15:31:24", "commits": {"b62fddff7587de72335d0a6f2ac7dea2d9ee755f": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-05-18 10:46:00", "filteredCommits": [], "commitsDetails": [{"nameRev": "b62fddff7587de72335d0a6f2ac7dea2d9ee755f tags/armeria-0.46.0~11", "commitMessage": "Ignore a flaky test until it's fixed (#550)\n\n- Closes #530", "commitParents": ["5e3951f69b229cf2171e4d335e315236d3a2068f"], "spoonStatsSkippedReason": "", "commitHash": "b62fddff7587de72335d0a6f2ac7dea2d9ee755f", "authoredDateTime": "2017-05-18 19:45:59", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 0, "lines": 2, "filePath": "thrift/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTServletIntegrationTest.java"}], "commitDateTime": "2017-05-18 19:45:59", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.ThriftOverHttpClientTServletIntegrationTest.sendHelloViaHttp1()"}], "spoonFilePath": "ThriftOverHttpClientTServletIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/530", "ttf": 6.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Appveyor build flaky", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "I often notice Appveyor build takes forever, and has random failures due to timeouts (e.g., ClosedSessionException). I guess the containers aren't very powerful. If I remember correctly, we requested strong machines from Travis, maybe that'd be a possibility here. Otherwise, how about removing shaded tests from the windows build? I think it's very unlikely that there'd be a windows-only issue with shaded jars, and they add a lot of time / load to the build. I dunno why, but I feel like most flakes on both Travis and Appveyor happen during shaded tests (perhaps time-based throttling).", "labels": ["defect"]}, {"created": "2017-05-11 11:35:27", "commits": {"9a94550ccb0fe83455dc5e54f294be4666408f54": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2018-06-08 06:52:06", "filteredCommits": [], "commitsDetails": [{"nameRev": "9a94550ccb0fe83455dc5e54f294be4666408f54 tags/armeria-0.66.0~10", "commitMessage": "Reject most duplicate path mappings (#1247)\n\nMotivation:\r\n\r\nWhen a user binds more than one service at the same path mapping,\r\n`ServerBuilder` should reject such a configuration.\r\n\r\nModifications:\r\n\r\n- Add duplicate mapping detection to `Routers.routers()`\r\n- Miscellaneous:\r\n  - Weaken `PathMapping` types in `AnnotatedHttpServiceFactory`\r\n\r\nResult:\r\n\r\n- Almost fixes #529\r\n- Note that this changeset does not detect all possible cases. For\r\n  example, it does not consider the relationship between media types.\r\n  It will detect most silly mistakes though, which should be enough.", "commitParents": ["98c81aea81cfad8d111a231b01bd0c388a8a9a53"], "spoonStatsSkippedReason": "", "commitHash": "9a94550ccb0fe83455dc5e54f294be4666408f54", "authoredDateTime": "2018-06-08 15:52:05", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 6, "deletions": 7, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/server/AnnotatedHttpServiceFactory.java"}, {"insertions": 6, "deletions": 0, "lines": 6, "filePath": "core/src/main/java/com/linecorp/armeria/server/CatchAllPathMapping.java"}, {"insertions": 0, "deletions": 2, "lines": 2, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java"}, {"insertions": 74, "deletions": 0, "lines": 74, "filePath": "core/src/main/java/com/linecorp/armeria/server/Routers.java"}, {"insertions": 101, "deletions": 0, "lines": 101, "filePath": "core/src/test/java/com/linecorp/armeria/server/RouterTest.java"}], "commitDateTime": "2018-06-08 15:52:05", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.thrift.AbstractThriftOverHttpTest"}], "spoonFilePath": "AbstractThriftOverHttpTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.RouterTest.testDuplicateMappings(com.linecorp.armeria.server.PathMapping[])"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.RouterTest.duplicateMappingsWithHeaders()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.RouterTest.testNonDuplicateMappings(com.linecorp.armeria.server.PathMapping[])"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.RouterTest.duplicateMappingsWithRegex()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.RouterTest.duplicateMappings()"}], "spoonFilePath": "RouterTest.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.create(java.lang.String,java.lang.Object,java.lang.reflect.Method,java.util.List,java.util.List,java.util.List)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.AnnotatedHttpServiceElement"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.AnnotatedHttpServiceFactory.AnnotatedHttpServiceElement.pathMapping()"}], "spoonFilePath": "AnnotatedHttpServiceFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Routers.rejectDuplicateMapping(com.linecorp.armeria.server.PathMapping,com.linecorp.armeria.server.PathMapping)"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Routers.router(boolean,java.util.List,java.util.function.Function)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Routers.routers(java.lang.Iterable,java.util.function.Function)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Routers.rejectDuplicateMapping(java.lang.Iterable,java.util.function.Function)"}], "spoonFilePath": "Routers.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.CatchAllPathMapping.triePath()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.CatchAllPathMapping"}], "spoonFilePath": "CatchAllPathMapping.java"}]}], "url": "https://github.com/line/armeria/issues/529", "ttf": 392.0002777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Show/Throw Error if register Service to the same path", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When a user register multiple service to the same path through `ServerBuilder#serviceAt`, armeria creates a `Server` with services but PathMappings only map a request to a service that is registered first.\r\n```java\r\n    @ClassRule\r\n    public static final ServerRule server = new ServerRule() {\r\n        @Override\r\n        protected void configure(ServerBuilder sb) throws Exception {\r\n            sb.serviceAt(\"/api\", new EchoService(\"1\"))\r\n              .serviceAt(\"/api\", new EchoService(\"2\"))\r\n              .serviceAt(\"/api\", new EchoService(\"3\"));\r\n        }\r\n    };\r\n    @Test\r\n    public void test1() throws Exception {\r\n        try (CloseableHttpClient hc = HttpClients.createMinimal()) {\r\n            final HttpGet req = new HttpGet(server.uri(\"/api\"));\r\n            try (CloseableHttpResponse res = hc.execute(req)) {\r\n                assertThat(EntityUtils.toString(res.getEntity()), is(\"1\"));\r\n            }\r\n        }\r\n    }\r\n    private static class EchoService extends AbstractHttpService {\r\n        private final String s;\r\n\r\n        public EchoService(String s) {\r\n            this.s = s;\r\n        }\r\n\r\n        @Override\r\n        protected final void doGet(ServiceRequestContext ctx, HttpRequest req, HttpResponseWriter res) {\r\n            res.write(HttpHeaders.of(HttpStatus.OK));\r\n            res.write(HttpData.of(s.getBytes()));\r\n            res.close();\r\n        }\r\n    }\r\n```\r\n\r\nIt would be better to show message (or throw Exception) when ServerBuilder detects same path.\r\n\r\n", "labels": ["defect"]}, {"created": "2017-05-02 05:57:53", "commits": {"ed7dbd0fa287509eb4e417522c21dbbe285c787e": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-05-12 09:36:40", "filteredCommits": [], "commitsDetails": [{"nameRev": "ed7dbd0fa287509eb4e417522c21dbbe285c787e tags/armeria-0.45.0~1", "commitMessage": "Remove maxPendingRequests and implement maxNumConnections (#527)\n\nRelated: #520\r\n\r\nMotivation:\r\n- We need to remove or implement unimplemented configuration properties.\r\n\r\nModifications:\r\n- Remove maxPendingRequests configuration property from ServerConfig and ServerBuilder classes.\r\n- Add ConnectionLimitingHandler to limit the number of open connections.\r\n- Change DEFAULT_MAX_CONNECTIONS from 65536 to Integer.MAX_VALUE in order not to limit open connections by default.\r\n\r\nResult:\r\n- maxPendingRequests configuration property is removed.\r\n- We can limit the number of open connections to the configured value.", "commitParents": ["d8094f56201faeb753ce59969ae6c9b1f685641f"], "spoonStatsSkippedReason": "", "commitHash": "ed7dbd0fa287509eb4e417522c21dbbe285c787e", "authoredDateTime": "2017-05-12 18:33:51", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 87, "deletions": 0, "lines": 87, "filePath": "core/src/test/java/com/linecorp/armeria/internal/ConnectionLimitingHandlerIntegrationTest.java"}, {"insertions": 57, "deletions": 0, "lines": 57, "filePath": "core/src/test/java/com/linecorp/armeria/internal/ConnectionLimitingHandlerTest.java"}, {"insertions": 13, "deletions": 0, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/server/Server.java"}, {"insertions": 111, "deletions": 0, "lines": 111, "filePath": "core/src/main/java/com/linecorp/armeria/internal/ConnectionLimitingHandler.java"}, {"insertions": 12, "deletions": 33, "lines": 45, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerConfig.java"}, {"insertions": 10, "deletions": 17, "lines": 27, "filePath": "core/src/main/java/com/linecorp/armeria/server/ServerBuilder.java"}], "commitDateTime": "2017-05-12 18:33:51", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerConfig.maxPendingRequests()"}, {"UPD": 3, "TOT": 6, "MOV": 0, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.ServerConfig.toString(java.lang.Class,java.lang.Iterable,com.linecorp.armeria.server.VirtualHost,java.util.List,int,int,int,long,long,long,java.time.Duration,java.time.Duration,java.util.concurrent.Executor,java.lang.String)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerConfig.validateMaxPendingRequests(int)"}, {"UPD": 2, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerConfig.validateMaxConnections(int)"}, {"UPD": 5, "TOT": 10, "MOV": 1, "INS": 0, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.server.ServerConfig"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerConfig.toString()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerConfig.validateMaxNumConnections(int)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerConfig.maxConnections()"}], "spoonFilePath": "ServerConfig.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ConnectionLimitingHandler"}], "spoonFilePath": "ConnectionLimitingHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Server.numConnections()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Server.start(com.linecorp.armeria.server.ServerPort)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Server"}], "spoonFilePath": "Server.java"}, {"spoonMethods": [{"UPD": 4, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.maxConnections(int)"}, {"UPD": 4, "TOT": 8, "MOV": 2, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.toString()"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.build()"}, {"UPD": 1, "TOT": 5, "MOV": 3, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerBuilder.maxPendingRequests(int)"}], "spoonFilePath": "ServerBuilder.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ConnectionLimitingHandlerTest"}], "spoonFilePath": "ConnectionLimitingHandlerTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.internal.ConnectionLimitingHandlerIntegrationTest"}], "spoonFilePath": "ConnectionLimitingHandlerIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/520", "ttf": 10.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Remove unimplemented configuration properties", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "For example, `ServerConfig.maxPendingRequests` is not implemented at all. We can add them when they are really implemented.", "labels": ["defect"]}, {"created": "2017-04-26 03:01:47", "commits": {"b3fd64c6ed75aba7bfb7db5bbe45cbfe9724434d": {"commitGHEventType": "referenced", "commitUser": "imasahiro"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-04-27 06:53:23", "filteredCommits": [], "commitsDetails": [{"nameRev": "b3fd64c6ed75aba7bfb7db5bbe45cbfe9724434d tags/armeria-0.44.0~13", "commitMessage": "Improve randomized backoff (#516)\n\nRelated: #513 #514\r\n\r\nMotivation:\r\n\r\n- There's off-by-one validation error in RandomBackoff\r\n- RandomBackoff uses Random.longs() which is expensive to create\r\n- Backoff.withJitter() doesn't accept negative jitters\r\n\r\nModifications:\r\n\r\n- Add AbstractBackoff that performs validation on numAttemptsSoFar\r\n- Do not make JitterAddingBackoff delegate to RandomBackoff\r\n- Fix the validation error in RandomBackoff\r\n- Make RandomBackoff not create a LongSupplier every time when\r\n  generating a random number\r\n\r\nResult:\r\n\r\n- Fixes #513\r\n- Fixes #514\r\n- Efficiency", "commitParents": ["919222019062766842f268054912b4561f324238"], "spoonStatsSkippedReason": "", "commitHash": "b3fd64c6ed75aba7bfb7db5bbe45cbfe9724434d", "authoredDateTime": "2017-04-27 15:53:23", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 7, "deletions": 1, "lines": 8, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/Backoff.java"}, {"insertions": 2, "deletions": 0, "lines": 2, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/AttemptLimitingBackoff.java"}, {"insertions": 18, "deletions": 4, "lines": 22, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/RandomBackoffTest.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/FixedBackoff.java"}, {"insertions": 23, "deletions": 5, "lines": 28, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/JitterAddingBackoff.java"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/ExponentialBackoff.java"}, {"insertions": 40, "deletions": 0, "lines": 40, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/AbstractBackoff.java"}, {"insertions": 14, "deletions": 15, "lines": 29, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/BackoffTest.java"}, {"insertions": 29, "deletions": 8, "lines": 37, "filePath": "core/src/main/java/com/linecorp/armeria/client/retry/RandomBackoff.java"}, {"insertions": 7, "deletions": 7, "lines": 14, "filePath": "core/src/test/java/com/linecorp/armeria/client/retry/ExponentialBackoffTest.java"}], "commitDateTime": "2017-04-27 15:53:23", "commitUser": "imasahiro", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.AttemptLimitingBackoff.nextIntervalMillis(int)"}], "spoonFilePath": "AttemptLimitingBackoff.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RandomBackoff.nextLong(java.util.Random,long)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RandomBackoff.nextIntervalMillis(int)"}, {"UPD": 2, "TOT": 12, "MOV": 6, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.RandomBackoff"}], "spoonFilePath": "RandomBackoff.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.AbstractBackoff"}], "spoonFilePath": "AbstractBackoff.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.ExponentialBackoff"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.ExponentialBackoff.nextIntervalMillis(int)"}], "spoonFilePath": "ExponentialBackoff.java"}, {"spoonMethods": [{"UPD": 8, "TOT": 8, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RandomBackoffTest.nextIntervalMillis()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.RandomBackoffTest.validation()"}], "spoonFilePath": "RandomBackoffTest.java"}, {"spoonMethods": [{"UPD": 5, "TOT": 14, "MOV": 0, "INS": 8, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.JitterAddingBackoff"}, {"UPD": 1, "TOT": 5, "MOV": 1, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.JitterAddingBackoff.nextIntervalMillis(int)"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.JitterAddingBackoff.toString()"}], "spoonFilePath": "JitterAddingBackoff.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.FixedBackoff"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.FixedBackoff.nextIntervalMillis(int)"}], "spoonFilePath": "FixedBackoff.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 10, "MOV": 5, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.retry.ExponentialBackoffTest.testOverflow()"}, {"UPD": 5, "TOT": 6, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.ExponentialBackoffTest.test()"}], "spoonFilePath": "ExponentialBackoffTest.java"}, {"spoonMethods": [], "spoonFilePath": "Backoff.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.BackoffTest.withoutDelay()"}, {"UPD": 5, "TOT": 8, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.BackoffTest.withJitter()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.retry.BackoffTest.withMaxAttempts()"}, {"UPD": 10, "TOT": 12, "MOV": 2, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.BackoffTest.exponential()"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.retry.BackoffTest.fixed()"}], "spoonFilePath": "BackoffTest.java"}]}], "url": "https://github.com/line/armeria/issues/513", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Off-by-one validation error in RandomBackoff", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```java\r\nCaused by: java.lang.IllegalArgumentException: minIntervalMillis: 0 (expected: >= 0)\r\n\tat com.linecorp.armeria.internal.shaded.guava.base.Preconditions.checkArgument(Preconditions.java:179)\r\n\tat com.linecorp.armeria.client.retry.RandomBackoff.<init>(RandomBackoff.java:33)\r\n\tat com.linecorp.armeria.client.retry.JitterAddingBackoff.<init>(JitterAddingBackoff.java:31)\r\n\tat com.linecorp.armeria.client.retry.Backoff.withJitter(Backoff.java:77)\r\n\tat com.linecorp.armeria.client.retry.Backoff.withJitter(Backoff.java:69)\r\n```", "labels": ["defect"]}, {"created": "2017-04-12 03:18:48", "commits": {"9c2efcbae47b40448e6f53f48bcf0aba19e733e4": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-04-25 02:13:12", "filteredCommits": [], "commitsDetails": [{"nameRev": "9c2efcbae47b40448e6f53f48bcf0aba19e733e4 tags/armeria-0.43.0~1", "commitMessage": "Notify all Endpoint list change to listners correctly (#504)\n\nMotivations:\r\n- A EndpointGroup that has delegated Endpoint (for example, OrElseEndpointGroup) does not notify endpoint list\r\n  change to listeners (#498)\r\n\r\nModifications:\r\n- Add Listenable and AbstractListenable\r\n- Make EndpointGroup extend Listenable\r\n- Make EndpointGroup a functional interface\r\n\r\nResults:\r\n- Endpoint list changes are notified to listeners correctly\r\n- Easier to build a static endpoint list", "commitParents": ["f34ac6c5754545211c156863d12bcad83be02e73"], "spoonStatsSkippedReason": "", "commitHash": "9c2efcbae47b40448e6f53f48bcf0aba19e733e4", "authoredDateTime": "2017-04-25 10:24:13", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 64, "deletions": 0, "lines": 64, "filePath": "core/src/test/java/com/linecorp/armeria/client/endpoint/OrElseEndpointGroupTest.java"}, {"insertions": 4, "deletions": 1, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/OrElseEndpointGroup.java"}, {"insertions": 9, "deletions": 1, "lines": 10, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/EndpointGroup.java"}, {"insertions": 18, "deletions": 0, "lines": 18, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/Listenable.java"}, {"insertions": 51, "deletions": 0, "lines": 51, "filePath": "core/src/main/java/com/linecorp/armeria/common/util/AbstractListenable.java"}, {"insertions": 5, "deletions": 38, "lines": 43, "filePath": "core/src/main/java/com/linecorp/armeria/client/endpoint/DynamicEndpointGroup.java"}], "commitDateTime": "2017-04-25 10:24:13", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.removeListener(java.util.function.Consumer)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.addListener(java.util.function.Consumer)"}], "spoonFilePath": "EndpointGroup.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.util.AbstractListenable"}], "spoonFilePath": "AbstractListenable.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.util"}], "spoonFilePath": "Listenable.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.OrElseEndpointGroup"}], "spoonFilePath": "OrElseEndpointGroup.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.DynamicEndpointGroup.addEndpoint(com.linecorp.armeria.client.Endpoint)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.DynamicEndpointGroup.addListener(java.util.function.Consumer)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.DynamicEndpointGroup"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.DynamicEndpointGroup.notifyListeners()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.DynamicEndpointGroup.removeEndpoint(com.linecorp.armeria.client.Endpoint)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.endpoint.DynamicEndpointGroup.removeListener(java.util.function.Consumer)"}], "spoonFilePath": "DynamicEndpointGroup.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.endpoint.OrElseEndpointGroupTest"}], "spoonFilePath": "OrElseEndpointGroupTest.java"}]}], "url": "https://github.com/line/armeria/issues/498", "ttf": 12.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "OrElseEndpointGroup does not notify delegated endpoint change to endpoint listeners", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "If delegated endpoints of `OrElseEndpointGroup` changes endpoint lists, OrElseEndpointGroup needs to notify the change to other endpoint listeners (for example, [WeightedRoundRobinSelector](https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/client/endpoint/WeightedRoundRobinStrategy.java#L51)).\r\n\r\nTo solve this, OrElseEndpointGroup needs to extends DynamicEndpointGroup.", "labels": ["defect"]}, {"created": "2017-04-12 01:11:23", "user": "trustin", "body": "```\r\ncom.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest > endpoints FAILED\r\n    org.junit.ComparisonFailure: expected:<[1]> but was:<[2]>\r\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\r\n        at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\r\n        at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\r\n        at com.linecorp.armeria.client.endpoint.healthcheck.HttpHealthCheckedEndpointGroupTest.endpoints(HttpHealthCheckedEndpointGroupTest.java:85)\r\n424 tests completed, 1 failed\r\n:shaded-test:shadedCoreTest FAILED\r\n```", "closed": "2017-04-13 05:30:21", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/497", "ttf": 1.0002777777777778, "commits": {}, "labels": ["defect"], "title": "Sporadic HttpHealthCheckedEndpointGroupTest failure"}, {"created": "2017-03-22 08:14:53", "commits": {"aa5ecb90bfff16c14225882e43a1127c1861afae": {"commitGHEventType": "referenced", "commitUser": "imasahiro"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-03-24 05:22:58", "filteredCommits": [], "commitsDetails": [{"nameRev": "aa5ecb90bfff16c14225882e43a1127c1861afae tags/armeria-0.42.0~14", "commitMessage": "Allow 'charset=utf-8' parameter in 'content-type' and 'accept' headers of Thrift requests (#474)\n\nMotivation:\r\n\r\nSome clients seem to append the 'charset=utf-8' parameter to the media\r\ntypes/ranges specified in the 'content-type' and 'accept' headers of a\r\nThrift request. This leads the THttpService to respond with '415\r\nUnsupported Media Type' which may be confusing to a user.\r\n\r\nModifications:\r\n\r\n- Add the media types with the 'charset=utf-8' parameter to\r\n  ThriftSerializationFormatProvider\r\n- Clean up MediaTypeSet.containsAllParameters for clarity\r\n\r\nResult:\r\n\r\n- Fixes #473\r\n- THttpService now accepts the media types with the 'charset=utf-8'\r\n  parameter.", "commitParents": ["f4b8228d97fdf66c2d9c57983ef5d579d33d25c1"], "spoonStatsSkippedReason": "", "commitHash": "aa5ecb90bfff16c14225882e43a1127c1861afae", "authoredDateTime": "2017-03-24 14:22:57", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 20, "deletions": 14, "lines": 34, "filePath": "core/src/main/java/com/linecorp/armeria/common/MediaTypeSet.java"}, {"insertions": 22, "deletions": 9, "lines": 31, "filePath": "thrift/src/main/java/com/linecorp/armeria/common/thrift/ThriftSerializationFormatProvider.java"}, {"insertions": 20, "deletions": 0, "lines": 20, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftSerializationFormatsTest.java"}], "commitDateTime": "2017-03-24 14:22:57", "commitUser": "imasahiro", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 8, "TOT": 30, "MOV": 10, "INS": 6, "DEL": 6, "spoonMethodName": "com.linecorp.armeria.common.thrift.ThriftSerializationFormatProvider.entries()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.thrift.ThriftSerializationFormatProvider.create(java.lang.String,java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.thrift.ThriftSerializationFormatProvider.create(java.lang.String)"}], "spoonFilePath": "ThriftSerializationFormatProvider.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 12, "MOV": 0, "INS": 12, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftSerializationFormatsTest.findByMediaType()"}], "spoonFilePath": "ThriftSerializationFormatsTest.java"}, {"spoonMethods": [{"UPD": 10, "TOT": 10, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.MediaTypeSet.containsAllParameters(java.util.Map,java.util.Map)"}, {"UPD": 5, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.MediaTypeSet.containsAllRequiredValues(java.util.List,java.util.List)"}, {"UPD": 3, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.MediaTypeSet.containsRequiredValue(java.lang.String,java.util.List)"}], "spoonFilePath": "MediaTypeSet.java"}]}], "url": "https://github.com/line/armeria/issues/473", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "SerializationFormat.isAccepted cannot handle \"application/x-thrift; protocol=TJSON; charset=UTF-8\" as MediaType parameters comparison maybe wrong", "statsSkippedReason": "", "user": "southernkasaist", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "https://github.com/line/armeria/blob/master/core/src/main/java/com/linecorp/armeria/common/MediaTypeSet.java#L233\r\n\r\n`range.parameters()` (actual) and `candidate.parameters()` (required) have wrong argument order?\r\n\r\n```java\r\n    private static boolean matches(MediaType range, MediaType candidate) {\r\n        // Similar to what MediaType.is(MediaType) does except that this one\r\n        // compares the parameters case-insensitively and excludes 'q' parameter.\r\n        return (WILDCARD.equals(range.type()) || range.type().equals(candidate.type())) &&\r\n               (WILDCARD.equals(range.subtype()) || range.subtype().equals(candidate.subtype())) &&\r\n               containsAllParameters(range.parameters(), candidate.parameters());\r\n    }\r\n```", "labels": ["defect"]}, {"created": "2017-03-20 11:15:20", "commits": {"8d5980e26fd80f695242f3e8ddb318a42fbe66cb": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "2a2e8184ea342f894bd88e36d263205146f0b186": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-05-26 05:21:20", "filteredCommits": [], "commitsDetails": [{"nameRev": "8d5980e26fd80f695242f3e8ddb318a42fbe66cb tags/armeria-0.46.1~1", "commitMessage": "Potential fix for flaky HttpServerTest.testTimeout() (#564)\n\nMotivation:\r\n\r\nHttpServerTest.testTimeout() sometimes fails with the following\r\nassertion failure:\r\n\r\n    com.linecorp.armeria.server.http.HttpServerTest > testTimeout[1: h1] FAILED\r\n        java.lang.AssertionError:\r\n        Expected: is <503>\r\n             but: was <200>\r\n            at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n            at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)\r\n            at com.linecorp.armeria.server.http.HttpServerTest.testTimeout(HttpServerTest.java:407)\r\n\r\nwhich means the server sent the '503 Service Unavailable' response\r\ncorrectly, but the RequestLog in the queue contains '200 OK'.\r\n\r\nWe clean the queue of RequestLogs before starting each test, but it is\r\npossible that the RequestLog of the previous test is added *after* the\r\nnext test is started. i.e. '200 OK' ResponseLog may not be for the\r\ncurrent test.\r\n\r\nModifications:\r\n\r\n- Keep the number of expected RequestLogs and wait until all RequestLogs\r\n  are complete between each test\r\n- Fix a bug where a RequestLog is never completed when '413 Request\r\n  Entity Too Large' error occurs\r\n- Miscellaneous:\r\n  - Do not specify atMost(10 secs) for Awaitility because it waits for\r\n    up to 10 seconds by default\r\n  - Use await() instead of given()\r\n\r\nResult:\r\n\r\n- May fix #467. It's difficult to say this will fix the flakiness\r\n  because it's been only reproducible in CI machines at low chance.\r\n- RequestLog is completed even when '413 Request Entity Too Large' error\r\n  occurs.", "commitParents": ["70f7da97da6d1e6efb05b241642c6d97432ef9b3"], "spoonStatsSkippedReason": "", "commitHash": "8d5980e26fd80f695242f3e8ddb318a42fbe66cb", "authoredDateTime": "2017-05-26 14:21:20", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 20, "deletions": 4, "lines": 24, "filePath": "core/src/test/java/com/linecorp/armeria/server/http/HttpServerTest.java"}, {"insertions": 7, "deletions": 2, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/http/HttpServerHandler.java"}, {"insertions": 25, "deletions": 28, "lines": 53, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/test/java/com/linecorp/armeria/internal/ConnectionLimitingHandlerIntegrationTest.java"}], "commitDateTime": "2017-06-07 22:24:25", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.ConnectionLimitingHandlerIntegrationTest.testExceedMaxNumConnections()"}], "spoonFilePath": "ConnectionLimitingHandlerIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 7, "MOV": 4, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerHandler.handleRequest(io.netty.channel.ChannelHandlerContext,com.linecorp.armeria.server.http.DecodedHttpRequest)"}], "spoonFilePath": "HttpServerHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerTest.clearRequestLogs()"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerTest.reset()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerTest"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerTest.1.configure(com.linecorp.armeria.server.ServerBuilder).14.serve(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.http.HttpRequest)"}], "spoonFilePath": "HttpServerTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.hello_first_endpoint()"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.hello_second_endpoint()"}], "spoonFilePath": "PrometheusMetricsIntegrationTest.java"}]}, {"nameRev": "2a2e8184ea342f894bd88e36d263205146f0b186 tags/armeria-0.47.0~7", "commitMessage": "Potential fix for flaky HttpServerTest.testTimeout() (#564)\n\nMotivation:\r\n\r\nHttpServerTest.testTimeout() sometimes fails with the following\r\nassertion failure:\r\n\r\n    com.linecorp.armeria.server.http.HttpServerTest > testTimeout[1: h1] FAILED\r\n        java.lang.AssertionError:\r\n        Expected: is <503>\r\n             but: was <200>\r\n            at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n            at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)\r\n            at com.linecorp.armeria.server.http.HttpServerTest.testTimeout(HttpServerTest.java:407)\r\n\r\nwhich means the server sent the '503 Service Unavailable' response\r\ncorrectly, but the RequestLog in the queue contains '200 OK'.\r\n\r\nWe clean the queue of RequestLogs before starting each test, but it is\r\npossible that the RequestLog of the previous test is added *after* the\r\nnext test is started. i.e. '200 OK' ResponseLog may not be for the\r\ncurrent test.\r\n\r\nModifications:\r\n\r\n- Keep the number of expected RequestLogs and wait until all RequestLogs\r\n  are complete between each test\r\n- Fix a bug where a RequestLog is never completed when '413 Request\r\n  Entity Too Large' error occurs\r\n- Miscellaneous:\r\n  - Do not specify atMost(10 secs) for Awaitility because it waits for\r\n    up to 10 seconds by default\r\n  - Use await() instead of given()\r\n\r\nResult:\r\n\r\n- May fix #467. It's difficult to say this will fix the flakiness\r\n  because it's been only reproducible in CI machines at low chance.\r\n- RequestLog is completed even when '413 Request Entity Too Large' error\r\n  occurs.", "commitParents": ["2c0ce39d62947f118396c300c3266655a880d463"], "spoonStatsSkippedReason": "", "commitHash": "2a2e8184ea342f894bd88e36d263205146f0b186", "authoredDateTime": "2017-05-26 14:21:20", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 20, "deletions": 4, "lines": 24, "filePath": "core/src/test/java/com/linecorp/armeria/server/http/HttpServerTest.java"}, {"insertions": 7, "deletions": 2, "lines": 9, "filePath": "core/src/main/java/com/linecorp/armeria/server/http/HttpServerHandler.java"}, {"insertions": 25, "deletions": 28, "lines": 53, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/metric/PrometheusMetricsIntegrationTest.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/test/java/com/linecorp/armeria/internal/ConnectionLimitingHandlerIntegrationTest.java"}], "commitDateTime": "2017-05-26 14:21:20", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.internal.ConnectionLimitingHandlerIntegrationTest.testExceedMaxNumConnections()"}], "spoonFilePath": "ConnectionLimitingHandlerIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 7, "MOV": 4, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerHandler.handleRequest(io.netty.channel.ChannelHandlerContext,com.linecorp.armeria.server.http.DecodedHttpRequest)"}], "spoonFilePath": "HttpServerHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerTest.clearRequestLogs()"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerTest.reset()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerTest"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerTest.1.configure(com.linecorp.armeria.server.ServerBuilder).14.serve(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.http.HttpRequest)"}], "spoonFilePath": "HttpServerTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.hello_first_endpoint()"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metric.PrometheusMetricsIntegrationTest.hello_second_endpoint()"}], "spoonFilePath": "PrometheusMetricsIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/467", "ttf": 66.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "HttpServerTest.testTimeout flaky", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 1, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Had this failure happen on a build, rebuild with no code change fixed.\r\n\r\n```\r\n:shaded-test:shadedCoreTest[jetty-alpn-agent] Using: alpn-boot-8.1.10.v20161026.jar\r\ncom.linecorp.armeria.server.http.HttpServerTest > testTimeout[1: h1] FAILED\r\n    java.lang.AssertionError: \r\n    Expected: is <503>\r\n         but: was <200>\r\n        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:20)\r\n        at org.hamcrest.MatcherAssert.assertThat(MatcherAssert.java:8)\r\n        at com.linecorp.armeria.server.http.HttpServerTest.testTimeout(HttpServerTest.java:407)\r\n```", "labels": ["defect"]}, {"created": "2017-03-18 18:29:08", "commits": {"4935e8b202c1e3ee049e880a548cf67302fef158": {"commitGHEventType": "referenced", "commitUser": "imasahiro"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-03-20 11:32:13", "filteredCommits": [], "commitsDetails": [{"nameRev": "4935e8b202c1e3ee049e880a548cf67302fef158 tags/armeria-0.41.0~9", "commitMessage": "Fix NPE in DefaultServiceRequestContext.toString() (#463)\n\nFixes #462", "commitParents": ["826acc393d165c8370f783d9b6da134c03c1829f"], "spoonStatsSkippedReason": "", "commitHash": "4935e8b202c1e3ee049e880a548cf67302fef158", "authoredDateTime": "2017-03-20 20:32:12", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 10, "deletions": 4, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/server/DefaultServiceRequestContext.java"}], "commitDateTime": "2017-03-20 20:32:12", "commitUser": "imasahiro", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 14, "MOV": 8, "INS": 5, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.DefaultServiceRequestContext.toString()"}], "spoonFilePath": "DefaultServiceRequestContext.java"}]}], "url": "https://github.com/line/armeria/issues/462", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "LoggingService#onRequestLog fails with NPE when handling local request", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When I try to make a local-server to local server request (like [this](https://github.com/line/armeria/commit/ea776db5e2d8ec1bd557f066c7482b5b9c70f77f#diff-90a210dcc6322121a9622928b3705d37R18)) LoggingService throws NullPointerException with following stacktrace.\r\n\r\n```\r\n2017-03-19 03:00:22.246  INFO 17383 --- [-client-nio-2-1] c.l.a.client.logging.LoggingClient       : [id: 0x25d95b80, L:/127.0.0.1:64175 - R:/127.0.0.1:8080][http://127.0.0.1:8080/thrift/async#hello] Request: {startTime=2017-03-18T18:00:22.225Z(1489860022225), length=30B, duration=13426\u00b5s(13426608ns), scheme=tbinary+h2c, host=127.0.0.1, method=POST, path=/thrift/async, envelope=[:method=POST, :path=/thrift/async, content-type=application/x-thrift; protocol=TBINARY, :authority=127.0.0.1:8080, :scheme=http, user-agent=armeria/0.41.0-SNAPSHOT], content=DefaultRpcRequest{serviceType=HelloService$Iface, method=hello, params=[world]}}\r\n2017-03-19 03:00:22.277  INFO 17383 --- [-server-nio-6-2] c.l.a.client.logging.LoggingClient       : [id: 0x620d80e2, L:/127.0.0.1:64176 - R:/127.0.0.1:8080][http://127.0.0.1:8080/thrift/sync#hello] Request: {startTime=2017-03-18T18:00:22.274Z(1489860022274), length=30B, duration=2545\u00b5s(2545837ns), scheme=tbinary+h2c, host=127.0.0.1, method=POST, path=/thrift/sync, envelope=[:method=POST, :path=/thrift/sync, content-type=application/x-thrift; protocol=TBINARY, :authority=127.0.0.1:8080, :scheme=http, user-agent=armeria/0.41.0-SNAPSHOT], content=DefaultRpcRequest{serviceType=HelloService$AsyncIface, method=hello, params=[world]}}\r\n2017-03-19 03:00:22.304  INFO 17383 --- [-server-nio-6-3] armeria.services.thrift.sync             : [id: 0x39f7eb55, L:/127.0.0.1:8080 - R:/127.0.0.1:64176][h2c://mac.local:64176/thrift/sync#POST] Request: {startTime=2017-03-18T18:00:22.277Z(1489860022277), length=30B, duration=26773\u00b5s(26773662ns), scheme=tbinary+h2c, host=mac.local, method=POST, path=/thrift/sync, envelope=[:method=POST, :path=/thrift/sync, :authority=127.0.0.1:8080, :scheme=http, content-type=application/x-thrift; protocol=TBINARY, user-agent=armeria/0.41.0-SNAPSHOT], content=DefaultRpcRequest{serviceType=HelloService$Iface, method=hello, params=[world]}}\r\n2017-03-19 03:00:22.308  INFO 17383 --- [-server-nio-6-3] armeria.services.thrift.sync             : [id: 0x39f7eb55, L:/127.0.0.1:8080 - R:/127.0.0.1:64176][h2c://mac.local:64176/thrift/sync#POST] Response: {startTime=2017-03-18T18:00:22.300Z(1489860022300), length=36B, duration=7736\u00b5s(7736472ns), statusCode=200, envelope=[:status=200, content-type=application/x-thrift; protocol=TBINARY, content-length=36], content=DefaultRpcResponse{Hello world}}\r\n2017-03-19 03:00:22.314  INFO 17383 --- [-server-nio-6-2] c.l.a.client.logging.LoggingClient       : [id: 0x620d80e2, L:/127.0.0.1:64176 - R:/127.0.0.1:8080][http://127.0.0.1:8080/thrift/sync#hello] Response: {startTime=2017-03-18T18:00:22.304Z(1489860022304), length=36B, duration=8535\u00b5s(8535733ns), statusCode=200, envelope=[:status=200, content-type=application/x-thrift; protocol=TBINARY, content-length=36], content=DefaultRpcResponse{Hello world}}\r\n2017-03-19 03:00:22.317  INFO 17383 --- [-server-nio-6-2] armeria.services.thrift.async            : [id: 0xf9634d0f, L:/127.0.0.1:8080 - R:/127.0.0.1:64175][h2c://mac.local:64175/thrift/async#POST] Request: {startTime=2017-03-18T18:00:22.233Z(1489860022233), length=30B, duration=83759\u00b5s(83759062ns), scheme=tbinary+h2c, host=mac.local, method=POST, path=/thrift/async, envelope=[:method=POST, :path=/thrift/async, :authority=127.0.0.1:8080, :scheme=http, content-type=application/x-thrift; protocol=TBINARY, user-agent=armeria/0.41.0-SNAPSHOT], content=DefaultRpcRequest{serviceType=HelloService$AsyncIface, method=hello, params=[world]}}\r\n2017-03-19 03:00:22.318  INFO 17383 --- [-server-nio-6-2] armeria.services.thrift.async            : [id: 0xf9634d0f, L:/127.0.0.1:8080 - R:/127.0.0.1:64175][h2c://mac.local:64175/thrift/async#POST] Response: {startTime=2017-03-18T18:00:22.316Z(1489860022316), length=36B, duration=1467\u00b5s(1467558ns), statusCode=200, envelope=[:status=200, content-type=application/x-thrift; protocol=TBINARY, content-length=36], content=DefaultRpcResponse{Hello world}}\r\n2017-03-19 03:00:22.319  INFO 17383 --- [-client-nio-2-1] c.l.a.client.logging.LoggingClient       : [id: 0x25d95b80, L:/127.0.0.1:64175 - R:/127.0.0.1:8080][http://127.0.0.1:8080/thrift/async#hello] Response: {startTime=2017-03-18T18:00:22.317Z(1489860022317), length=36B, duration=1761\u00b5s(1761100ns), statusCode=200, envelope=[:status=200, content-type=application/x-thrift; protocol=TBINARY, content-length=36], content=DefaultRpcResponse{Hello world}}\r\n2017-03-19 03:00:32.098  WARN 17383 --- [-server-nio-6-1] c.l.a.c.l.RequestLogListenerInvoker      : onRequestLog() failed with an exception:\r\n\r\njava.lang.NullPointerException: null\r\n\tat com.linecorp.armeria.server.DefaultServiceRequestContext.toString(DefaultServiceRequestContext.java:244) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.server.RequestContextAwareLogger.decorate(RequestContextAwareLogger.java:36) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.server.RequestContextAwareLogger.info(RequestContextAwareLogger.java:228) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.common.logging.LogLevel.log(LogLevel.java:104) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.server.logging.LoggingService.logRequest(LoggingService.java:74) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.common.logging.RequestLogListenerInvoker.invokeOnRequestLog(RequestLogListenerInvoker.java:39) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.notifyListeners(DefaultRequestLog.java:637) [armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.updateAvailability(DefaultRequestLog.java:595) [armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.endRequest0(DefaultRequestLog.java:409) [armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.common.logging.DefaultRequestLog.endRequest(DefaultRequestLog.java:396) [armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.server.http.HttpServerHandler.lambda$handleRequest$3(HttpServerHandler.java:326) [armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.common.util.Functions.lambda$voidFunction$1(Functions.java:192) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822) ~[na:1.8.0_112]\r\n\tat java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797) ~[na:1.8.0_112]\r\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474) ~[na:1.8.0_112]\r\n\tat java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1977) ~[na:1.8.0_112]\r\n\tat com.linecorp.armeria.common.stream.DeferredStreamMessage.lambda$delegate$0(DeferredStreamMessage.java:88) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822) ~[na:1.8.0_112]\r\n\tat java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797) ~[na:1.8.0_112]\r\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474) ~[na:1.8.0_112]\r\n\tat java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1977) ~[na:1.8.0_112]\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.cleanup(DefaultStreamMessage.java:383) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber(DefaultStreamMessage.java:247) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.lambda$notifySubscriber$1(DefaultStreamMessage.java:239) ~[armeria-0.41.0-SNAPSHOT.jar:na]\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163) ~[netty-common-4.1.8.Final.jar:4.1.8.Final]\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403) ~[netty-common-4.1.8.Final.jar:4.1.8.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:445) ~[netty-transport-4.1.8.Final.jar:4.1.8.Final]\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858) ~[netty-common-4.1.8.Final.jar:4.1.8.Final]\r\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144) ~[netty-common-4.1.8.Final.jar:4.1.8.Final]\r\n\tat java.lang.Thread.run(Thread.java:745) ~[na:1.8.0_112]\r\n```", "labels": ["defect"]}, {"created": "2017-03-17 12:21:57", "commits": {"ebee30498ce346c4890e782e453a6c64cceb736d": {"commitGHEventType": "referenced", "commitUser": "imasahiro"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-03-21 02:37:40", "filteredCommits": [], "commitsDetails": [{"nameRev": "ebee30498ce346c4890e782e453a6c64cceb736d tags/armeria-0.41.0~8", "commitMessage": "Choose correct SerializationFormat when content-type is 'application/thrift' (#464)\n\nMotivation:\r\n\r\nWhen a Thrift client sends a request with content type\r\n'application/thrift' without a 'protocol' parameter, THttpService\r\ncurrently can choose a non-default SerializationFormat.\r\n\r\nModifications:\r\n\r\n- Choose the default Thrift SerializationFormat when a Thrift client\r\n  sends a request with content type 'application/thrift'.\r\n- Add a test case written by @imasahiro\r\n\r\nResult:\r\n\r\n- Fixes #458", "commitParents": ["4935e8b202c1e3ee049e880a548cf67302fef158"], "spoonStatsSkippedReason": "", "commitHash": "ebee30498ce346c4890e782e453a6c64cceb736d", "authoredDateTime": "2017-03-21 11:37:40", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 28, "deletions": 1, "lines": 29, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftSerializationFormatsTest.java"}, {"insertions": 6, "deletions": 11, "lines": 17, "filePath": "thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftService.java"}, {"insertions": 53, "deletions": 47, "lines": 100, "filePath": "thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java"}], "commitDateTime": "2017-03-21 11:37:40", "commitUser": "imasahiro", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftSerializationFormatsTest.defaultSerializationFormat()"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftSerializationFormatsTest.configureServer(com.linecorp.armeria.server.ServerBuilder)"}], "spoonFilePath": "ThriftSerializationFormatsTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 4, "MOV": 1, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftService.ofFormats(java.lang.Object,com.linecorp.armeria.common.SerializationFormat,java.lang.Iterable)"}, {"UPD": 3, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftService"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftService.of(java.lang.Object,com.linecorp.armeria.common.SerializationFormat)"}], "spoonFilePath": "ThriftService.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.findSerializationFormat(java.lang.String)"}, {"UPD": 1, "TOT": 5, "MOV": 3, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.ofFormats(java.util.Map,com.linecorp.armeria.common.SerializationFormat,java.lang.Iterable)"}, {"UPD": 2, "TOT": 4, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.newDecorator(com.linecorp.armeria.common.SerializationFormat)"}, {"UPD": 1, "TOT": 12, "MOV": 6, "INS": 2, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.validateRequestAndDetermineSerializationFormat(com.linecorp.armeria.common.http.HttpRequest,com.linecorp.armeria.common.http.HttpResponseWriter)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.defaultSerializationFormat()"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.of(java.util.Map,com.linecorp.armeria.common.SerializationFormat)"}, {"UPD": 4, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.newDecorator(com.linecorp.armeria.common.SerializationFormat,java.lang.Iterable)"}, {"UPD": 3, "TOT": 11, "MOV": 3, "INS": 4, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.newAllowedSerializationFormats(com.linecorp.armeria.common.SerializationFormat,java.lang.Iterable)"}, {"UPD": 1, "TOT": 5, "MOV": 2, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.ofFormats(java.lang.Object,com.linecorp.armeria.common.SerializationFormat,java.lang.Iterable)"}, {"UPD": 7, "TOT": 12, "MOV": 1, "INS": 1, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.of(java.lang.Object,com.linecorp.armeria.common.SerializationFormat)"}], "spoonFilePath": "THttpService.java"}]}], "url": "https://github.com/line/armeria/issues/458", "ttf": 3.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "THttpService does not respect default SerializationFormat?", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When a thrift http client sends a request with \"Content-Type:application/x-thrift\" (no protocol in content-type), armeria-thrift-v0.40.0's THttpService format handles it as TBINARY protocol and it does not fallback to defaultSerializationFormat.\r\n\r\n(In 0.38.0, the request is handled with defaultSerializationFormat)\r\n\r\nHere is test code for reproduce https://github.com/line/armeria/commit/47a89c91c9229828321245f39456914c13bdc79f#diff-31d817c4f8fdf55602732a5ffd0c47b2R112\r\n```java\r\nnew ServerBuilder()\r\n.serviceAt(\"/hellojsononly\", THttpService.ofFormat(impl, JSON)\r\n.serviceAt(\"/hellobinaryonly\", THttpService.ofFormat(impl, BINARY)\r\n.build();\r\n\r\ntry (CloseableHttpClient hc = HttpClients.createMinimal()) {\r\n    HttpPost req = new HttpPost(uri(\"/hellojsononly\"));\r\n    req.setHeader(\"Content-type\", \"application/x-thrift\");\r\n    try (CloseableHttpResponse res = hc.execute(req)) {\r\n        // Should be 400 but response is 415 because the request is treated as TBINARY.\r\n        assertThat(res.getStatusLine().toString()).isEqualTo(\"HTTP/1.1 415 Unsupported Media Type\");\r\n    }\r\n    HttpPost req2 = new HttpPost(uri(\"/hellobinaryonly\"));\r\n    req2.setHeader(\"Content-type\", \"application/x-thrift\");\r\n    try (CloseableHttpResponse res = hc.execute(req2)) {\r\n        // Looks default thrift protocol is TBINARY???\r\n        assertThat(res.getStatusLine().toString()).isEqualTo(\"HTTP/1.1 400 Bad Request\");\r\n    }\r\n}\r\n```\r\n", "labels": ["defect"]}, {"created": "2017-03-17 04:56:46", "user": "trustin", "body": "/cc @anuraaga \r\n\r\nNot sure when this happens but saw this failure a few times today:\r\n\r\n```\r\ncom.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest > enumType FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <{}>\r\n    to contain:\r\n     <[MapEntry[key=\"armeria.grpc.testing.CompressionType\", value=\" Compression algorithms\r\n    \"]]>\r\n    but could not find:\r\n     <[MapEntry[key=\"armeria.grpc.testing.CompressionType\", value=\" Compression algorithms\r\n    \"]]>\r\n        at com.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest.enumType(GrpcDocStringExtractorTest.java:76)\r\n\r\ncom.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest > method FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <{}>\r\n    to contain:\r\n     <[MapEntry[key=\"armeria.grpc.testing.TestService/UnaryCall\", value=\" One request followed by one response.\r\n    \"]]>\r\n    but could not find:\r\n     <[MapEntry[key=\"armeria.grpc.testing.TestService/UnaryCall\", value=\" One request followed by one response.\r\n    \"]]>\r\n        at com.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest.method(GrpcDocStringExtractorTest.java:40)\r\n\r\ncom.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest > nestedMessage FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <{}>\r\n    to contain:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest.NestedRequest\", value=\" A request nested in another request.\r\n    \"]]>\r\n    but could not find:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest.NestedRequest\", value=\" A request nested in another request.\r\n    \"]]>\r\n        at com.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest.nestedMessage(GrpcDocStringExtractorTest.java:62)\r\n\r\ncom.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest > nestedEnumType FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <{}>\r\n    to contain:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest.NestedEnum\", value=\" An enum nested in a request.\r\n    \"]]>\r\n    but could not find:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest.NestedEnum\", value=\" An enum nested in a request.\r\n    \"]]>\r\n        at com.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest.nestedEnumType(GrpcDocStringExtractorTest.java:90)\r\n\r\ncom.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest > field FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <{}>\r\n    to contain:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest/response_type\", value=\" Desired payload type in the response from the server.\r\n     If response_type is RANDOM, server randomly chooses one from other formats.\r\n    \"]]>\r\n    but could not find:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest/response_type\", value=\" Desired payload type in the response from the server.\r\n     If response_type is RANDOM, server randomly chooses one from other formats.\r\n    \"]]>\r\n        at com.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest.field(GrpcDocStringExtractorTest.java:54)\r\n\r\ncom.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest > nestedEnumValue FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <{}>\r\n    to contain:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest.NestedEnum/OK\", value=\" We're ok.\r\n    \"]]>\r\n    but could not find:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest.NestedEnum/OK\", value=\" We're ok.\r\n    \"]]>\r\n        at com.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest.nestedEnumValue(GrpcDocStringExtractorTest.java:97)\r\n\r\ncom.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest > enumValue FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <{}>\r\n    to contain:\r\n     <[MapEntry[key=\"armeria.grpc.testing.CompressionType/NONE\", value=\" No compression\r\n    \"]]>\r\n    but could not find:\r\n     <[MapEntry[key=\"armeria.grpc.testing.CompressionType/NONE\", value=\" No compression\r\n    \"]]>\r\n        at com.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest.enumValue(GrpcDocStringExtractorTest.java:83)\r\n\r\ncom.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest > message FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <{}>\r\n    to contain:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest\", value=\" Unary request.\r\n    \"]]>\r\n    but could not find:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest\", value=\" Unary request.\r\n    \"]]>\r\n        at com.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest.message(GrpcDocStringExtractorTest.java:47)\r\n\r\ncom.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest > nestedMessageField FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <{}>\r\n    to contain:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest.NestedRequest/nested_payload\", value=\" The payload for a nested request.\r\n    \"]]>\r\n    but could not find:\r\n     <[MapEntry[key=\"armeria.grpc.testing.SimpleRequest.NestedRequest/nested_payload\", value=\" The payload for a nested request.\r\n    \"]]>\r\n        at com.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest.nestedMessageField(GrpcDocStringExtractorTest.java:69)\r\n\r\ncom.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest > service FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <{}>\r\n    to contain:\r\n     <[MapEntry[key=\"armeria.grpc.testing.TestService\", value=\" A simple service to test the various types of RPCs and experiment with\r\n     performance with various types of payload.\r\n    \"]]>\r\n    but could not find:\r\n     <[MapEntry[key=\"armeria.grpc.testing.TestService\", value=\" A simple service to test the various types of RPCs and experiment with\r\n     performance with various types of payload.\r\n    \"]]>\r\n        at com.linecorp.armeria.server.grpc.GrpcDocStringExtractorTest.service(GrpcDocStringExtractorTest.java:32)\r\n```", "closed": "2017-03-17 12:30:28", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/454", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "GrpcDocStringExtractorTest sometimes fails"}, {"created": "2017-03-17 04:38:28", "user": "trustin", "body": "It seems like there's a timing issue with `client.zookeeper.EndpointGroupTest.testUpdateEndpointGroup()`\r\n\r\n```\r\nEndpointGroupTest.testUpdateEndpointGroup[1]: FAILURE\r\ncom.linecorp.armeria.client.zookeeper.EndpointGroupTest > testUpdateEndpointGroup[1] FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n      <[Endpoint(127.0.0.1:2345/4),\r\n        Endpoint(127.0.0.1:3456/2),\r\n        Endpoint(127.0.0.1:1234/2)]>\r\n    to contain only:\r\n      <[Endpoint(127.0.0.1:8001/2), Endpoint(127.0.0.1:8002/3)]>\r\n    elements not found:\r\n      <[Endpoint(127.0.0.1:8001/2), Endpoint(127.0.0.1:8002/3)]>\r\n    and elements not expected:\r\n      <[Endpoint(127.0.0.1:2345/4),\r\n        Endpoint(127.0.0.1:3456/2),\r\n        Endpoint(127.0.0.1:1234/2)]>\r\n        at com.linecorp.armeria.client.zookeeper.EndpointGroupTest.testUpdateEndpointGroup(EndpointGroupTest.java:131)\r\n```\r\n\r\n@jonefeewang PTAL", "closed": "2017-03-21 09:06:14", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/453", "ttf": 4.000277777777778, "commits": {}, "labels": ["defect"], "title": "Fix flaky ZooKeeper EndpointGroupTest"}, {"created": "2017-03-10 07:33:51", "commits": {"451addfef02e057864dd0b7ce56b5756d669640e": {"commitGHEventType": "referenced", "commitUser": "imasahiro"}}, "numCommits": 0, "closed": "2017-03-15 07:29:54", "filteredCommits": [], "commitsDetails": [{"nameRev": "451addfef02e057864dd0b7ce56b5756d669640e tags/armeria-0.40.0~8", "commitMessage": "Add MediaTypeSet and handle 'accept' header properly in THttpService (#446)\n\nMotivation:\r\n\r\nTHttpService fails to handle the 'accept' HTTP header whose value\r\ncontains:\r\n\r\n- comma-separated media ranges\r\n- a wildcard range\r\n- a range with a qvalue parameter\r\n\r\nModifications:\r\n\r\n- Add MediaTypeSet which provides the utility methods for content\r\n  negotiation\r\n- Make SerializationFormat.find() accept media ranges\r\n- Change the return type of SerializationFormat.mediaTypes() from Set to\r\n  MediaTypeSet\r\n- Fix THttpService to handle the 'accept' HTTP header correctly\r\n\r\nResult:\r\n\r\n- Fixes #443", "commitParents": ["2ab8c58a6b66ce4b79ae8c2d5939fd8de3c39642"], "spoonStatsSkippedReason": "tooManyChanges", "commitHash": "451addfef02e057864dd0b7ce56b5756d669640e", "authoredDateTime": "2017-03-15 16:29:53", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 384, "deletions": 0, "lines": 384, "filePath": "core/src/main/java/com/linecorp/armeria/common/MediaTypeSet.java"}, {"insertions": 22, "deletions": 90, "lines": 112, "filePath": "core/src/main/java/com/linecorp/armeria/common/SerializationFormat.java"}, {"insertions": 5, "deletions": 1, "lines": 6, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/THttp2Client.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftSerializationFormatsTest.java"}, {"insertions": 6, "deletions": 5, "lines": 11, "filePath": "core/src/main/java/com/linecorp/armeria/common/SerializationFormatProvider.java"}, {"insertions": 8, "deletions": 2, "lines": 10, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftOverHttp2Test.java"}, {"insertions": 68, "deletions": 2, "lines": 70, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/AbstractThriftOverHttpTest.java"}, {"insertions": 171, "deletions": 0, "lines": 171, "filePath": "core/src/test/java/com/linecorp/armeria/common/MediaTypeSetTest.java"}, {"insertions": 23, "deletions": 16, "lines": 39, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftOverHttp1Test.java"}, {"insertions": 8, "deletions": 17, "lines": 25, "filePath": "thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java"}], "commitDateTime": "2017-03-15 16:29:53", "commitUser": "imasahiro", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/443", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "THttpService.validateRequestAndDetermineSerializationFormat on MediaType.parse(accept) failure behavior", "statsSkippedReason": "", "user": "southernkasaist", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "@trustin \r\n\r\nThe following code will end with `HTTP 406` for accept header such as `text/plan, */*; q=0.5`.\r\n\r\nhttps://github.com/line/armeria/blob/master/thrift/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java#L465\r\n\r\nI have two concerns.\r\n\r\n- `MediaType.parse` maybe not capable for `accept` header parsing according to https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\r\n- When `MediaType.parse` ends with exception, how about using `serializationFormat` as the fallback output serialization format?", "labels": ["defect"]}, {"created": "2017-03-07 07:13:55", "user": "trustin", "body": "Since Jetty 9.4, creating a `DefaultSessionIdManager` requires `Server` as its constructor parameter. This contradicts the `JettyServiceBuilder.sessionIdManager()` which requires a user to specify a `SessionIdManager` instance when Jetty `Server` instance is not available yet.\r\n\r\nWe need to replace it with the following:\r\n\r\n```java\r\npublic JettyServiceBuilder sessionIdManagerFactory(Function<? super Server, ? extends SessionIdManager> factory) { ... }\r\n```", "closed": "2017-03-10 07:04:44", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/435", "ttf": 2.000277777777778, "commits": {}, "labels": ["defect"], "title": "Cannot specify SessionIdManager when building JettyService"}, {"created": "2017-03-02 05:19:42", "commits": {"ff562f9bfd7eb4cfc180109db73d804a0d191bb4": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-03-06 08:48:41", "filteredCommits": [], "commitsDetails": [{"nameRev": "ff562f9bfd7eb4cfc180109db73d804a0d191bb4 tags/armeria-0.39.0~6", "commitMessage": "Close all zookeeper connections opened in test code. (#433)\n\nFixes #431 \r\n\r\nThis is an alternative to #432 which removes log spam from non-closed zookeeper clients by making sure to close all clients.\r\n\r\nAdditional changes:\r\n- Raises the zookeeper startup timeout a little, it was too fast for my Mac\r\n- Creates child node data persistently instead of ephemereally. This was probably intended, and only happened to work because the connection wasn't closed.\r\n- Adds a sync after updating endpoints in zookeeper, the watcher would run too slow without it. I'm not sure if this is idiomatic.", "commitParents": ["d2b155fd83a99c74b8a31b6aa212604ba3eaab4c"], "spoonStatsSkippedReason": "", "commitHash": "ff562f9bfd7eb4cfc180109db73d804a0d191bb4", "authoredDateTime": "2017-03-06 17:48:40", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 2, "lines": 5, "filePath": "zookeeper/src/test/java/com/linecorp/armeria/server/zookeeper/ZooKeeperRegistrationTest.java"}, {"insertions": 2, "deletions": 4, "lines": 6, "filePath": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/TestBase.java"}, {"insertions": 44, "deletions": 39, "lines": 83, "filePath": "zookeeper/src/test/java/com/linecorp/armeria/client/zookeeper/EndpointGroupTest.java"}], "commitDateTime": "2017-03-06 17:48:40", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.testUpdateEndpointGroup()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.connectZk()"}, {"UPD": 0, "TOT": 18, "MOV": 8, "INS": 6, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.setNodeValue(byte[])"}, {"UPD": 0, "TOT": 5, "MOV": 2, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.disconnectZk()"}, {"UPD": 2, "TOT": 19, "MOV": 5, "INS": 7, "DEL": 5, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.EndpointGroupTest.setNodeChild(java.util.Set)"}], "spoonFilePath": "EndpointGroupTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.TestBase"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.zookeeper.TestBase.start()"}], "spoonFilePath": "TestBase.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 25, "MOV": 4, "INS": 13, "DEL": 5, "spoonMethodName": "com.linecorp.armeria.server.zookeeper.ZooKeeperRegistrationTest.testServerNodeCreateAndDelete()"}], "spoonFilePath": "ZooKeeperRegistrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/431", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Exception flooding in ZooKeeperRegistrationTest", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "https://travis-ci.org/line/armeria/builds/206876098#L1240\r\n\r\n```\r\n05:14:02.621 [Executors-Default-1-SendThread(127.0.0.1:45011)] WARN  org.apache.zookeeper.ClientCnxn - Session 0x15a8d7038580016 for server null, unexpected error, closing socket connection and attempting reconnect\r\njava.net.ConnectException: Connection refused\r\n\tat sun.nio.ch.SocketChannelImpl.checkConnect(Native Method)\r\n\tat sun.nio.ch.SocketChannelImpl.finishConnect(SocketChannelImpl.java:717)\r\n\tat org.apache.zookeeper.ClientCnxnSocketNIO.doTransport(ClientCnxnSocketNIO.java:361)\r\n\tat org.apache.zookeeper.ClientCnxn$SendThread.run(ClientCnxn.java:1141)\r\n...\r\n```\r\n\r\nProbably some race condition? Could you take a look, @jonefeewang ?", "labels": ["defect"]}, {"created": "2017-02-21 11:29:03", "commits": {"3c0e7240a44afaa93f1c5b7c63a0a9803af958a2": {"commitGHEventType": "referenced", "commitUser": "imasahiro"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-02-23 05:29:48", "filteredCommits": [], "commitsDetails": [{"nameRev": "3c0e7240a44afaa93f1c5b7c63a0a9803af958a2 tags/armeria-0.38.0~1", "commitMessage": "Fix DocService by handling Thrift typedefs as an UnresolvedClassInfo (#417)\n\n* Add test case for ThriftServiceSpecificationGenerator typedef-ed type\r\n\r\n```\r\nThriftServiceSpecificationGeneratorTest.servicesTest: FAILURE\r\n\r\ncom.linecorp.armeria.server.thrift.ThriftServiceSpecificationGeneratorTest > servicesTest FAILED\r\n    java.lang.IllegalArgumentException: unexpected field value type: 12\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newTypeInfo(ThriftServiceSpecificationGenerator.java:346)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newFieldInfo(ThriftServiceSpecificationGenerator.java:291)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.lambda$newFunctionInfo$9(ThriftServiceSpecificationGenerator.java:251)\r\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\r\n        at java.util.Iterator.forEachRemaining(Iterator.java:116)\r\n        at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)\r\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)\r\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)\r\n        at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)\r\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n        at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newFunctionInfo(ThriftServiceSpecificationGenerator.java:252)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newFunctionInfo(ThriftServiceSpecificationGenerator.java:225)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newServiceInfo(ThriftServiceSpecificationGenerator.java:158)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.lambda$generate$4(ThriftServiceSpecificationGenerator.java:129)\r\n        at java.util.ArrayList.forEach(ArrayList.java:1249)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.generate(ThriftServiceSpecificationGenerator.java:126)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.generate(ThriftServiceSpecificationGenerator.java:117)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGeneratorTest.servicesTest(ThriftServiceSpecificationGeneratorTest.java:102)\r\n```\r\n\r\n* Handle Thrift typedefs as an UnresolvedClassInfo\r\n\r\nMotivation:\r\n\r\nThe FieldValueMetaData of a typedef'd field does not provide enough\r\ninformation to infer its effective type. Translate typedef'd field into\r\na new type called UnresolvedClassInfo so that\r\nThriftServiceSpecificationGenerator does not fail at least.\r\n\r\nModifications:\r\n\r\n- Add UnresolvedClassInfo\r\n- Modify ThriftServiceSpecificationGenerator so that it does not fail on\r\n  a typedef'd field\r\n- Revise @imasahiro's test case to reflect the modification of\r\n  ThriftServiceSpecificationGenerator\r\n\r\nResult:\r\n\r\n- DocService does not fail to start when typedef is used in .thrift\r\n  files.\r\n- Fixes #413\r\n", "commitParents": ["dc0bf3ca22bba5ff2701549fc694fce62a470435"], "spoonStatsSkippedReason": "", "commitHash": "3c0e7240a44afaa93f1c5b7c63a0a9803af958a2", "authoredDateTime": "2017-02-23 14:29:47", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 28, "deletions": 1, "lines": 29, "filePath": "thrift/src/test/java/com/linecorp/armeria/server/thrift/ThriftServiceSpecificationGeneratorTest.java"}, {"insertions": 48, "deletions": 33, "lines": 81, "filePath": "thrift/src/main/java/com/linecorp/armeria/server/thrift/ThriftServiceSpecificationGenerator.java"}, {"insertions": 12, "deletions": 2, "lines": 14, "filePath": "core/src/main/java/com/linecorp/armeria/server/docs/ClassInfo.java"}, {"insertions": 15, "deletions": 1, "lines": 16, "filePath": "thrift/src/test/thrift/main.thrift"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/server/docs/StructInfo.java"}, {"insertions": 107, "deletions": 0, "lines": 107, "filePath": "core/src/main/java/com/linecorp/armeria/server/docs/UnresolvedClassInfo.java"}], "commitDateTime": "2017-02-23 14:29:47", "commitUser": "imasahiro", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 6, "TOT": 64, "MOV": 27, "INS": 21, "DEL": 10, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newTypeInfo(org.apache.thrift.meta_data.FieldValueMetaData,java.util.Map)"}], "spoonFilePath": "ThriftServiceSpecificationGenerator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.docs.UnresolvedClassInfo"}], "spoonFilePath": "UnresolvedClassInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.docs.StructInfo.equals(java.lang.Object)"}], "spoonFilePath": "StructInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGeneratorTest.testNewStructInfoTest()"}, {"UPD": 1, "TOT": 6, "MOV": 0, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGeneratorTest.testNewServiceInfo()"}], "spoonFilePath": "ThriftServiceSpecificationGeneratorTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 7, "MOV": 2, "INS": 4, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.packageName()"}, {"UPD": 0, "TOT": 7, "MOV": 3, "INS": 3, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.simpleName()"}], "spoonFilePath": "ClassInfo.java"}]}], "url": "https://github.com/line/armeria/issues/413", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Failed to generate type infomation for typedef-ed type", "statsSkippedReason": "", "user": "imasahiro", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When I define a type alias for exisiting thrift type like `typedef map<string, string> TypedefedMap`, it causes \r\nIllegalArgumentException during starting up thrift service.\r\n\r\nHere is a test code to reproduce the error.\r\nhttps://github.com/imasahiro/armeria/commit/4da9e8297b7e341cdfe3009afdef54eb29656728#diff-a2202e0d6b7d5b3fa867ca2bf3c2cf63R93\r\n\r\n```\r\ncom.linecorp.armeria.server.thrift.ThriftServiceSpecificationGeneratorTest > servicesTest FAILED\r\n    java.lang.IllegalArgumentException: unexpected field value type: 12\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newTypeInfo(ThriftServiceSpecificationGenerator.java:346)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newFieldInfo(ThriftServiceSpecificationGenerator.java:291)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.lambda$newFunctionInfo$9(ThriftServiceSpecificationGenerator.java:251)\r\n        at java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:193)\r\n        at java.util.Iterator.forEachRemaining(Iterator.java:116)\r\n        at java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)\r\n        at java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:481)\r\n        at java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:471)\r\n        at java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:708)\r\n        at java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n        at java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:499)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newFunctionInfo(ThriftServiceSpecificationGenerator.java:252)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newFunctionInfo(ThriftServiceSpecificationGenerator.java:225)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.newServiceInfo(ThriftServiceSpecificationGenerator.java:158)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.lambda$generate$4(ThriftServiceSpecificationGenerator.java:129)\r\n        at java.util.ArrayList.forEach(ArrayList.java:1249)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.generate(ThriftServiceSpecificationGenerator.java:126)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGenerator.generate(ThriftServiceSpecificationGenerator.java:117)\r\n        at com.linecorp.armeria.server.thrift.ThriftServiceSpecificationGeneratorTest.servicesTest(ThriftServiceSpecificationGeneratorTest.java:102)\r\n```", "labels": ["defect"]}, {"created": "2017-02-21 09:13:39", "commits": {"dc0bf3ca22bba5ff2701549fc694fce62a470435": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-02-22 11:31:33", "filteredCommits": [], "commitsDetails": [{"nameRev": "dc0bf3ca22bba5ff2701549fc694fce62a470435 tags/armeria-0.38.0~2", "commitMessage": "Handle the case where POST body is empty correctly (#410) (#412)\n\nThis commit fixes a bug where an empty POST body triggers a NullPointerException.", "commitParents": ["93f52dca0a9550ef05e0c82713c2e7b7ccd5a4bc"], "spoonStatsSkippedReason": "", "commitHash": "dc0bf3ca22bba5ff2701549fc694fce62a470435", "authoredDateTime": "2017-02-22 20:31:12", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 4, "lines": 6, "filePath": "tomcat/src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java"}, {"insertions": 42, "deletions": 0, "lines": 42, "filePath": "tomcat/src/test/java-shared/com/linecorp/armeria/test/webapp/WebAppContainerTest.java"}, {"insertions": 15, "deletions": 0, "lines": 15, "filePath": "tomcat/src/test/resources-shared/tomcat_service/echo_post.jsp"}], "commitDateTime": "2017-02-22 20:31:12", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.test.webapp.WebAppContainerTest.testEchoPostEmptyBody()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.test.webapp.WebAppContainerTest.testEchoPost()"}], "spoonFilePath": "WebAppContainerTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.http.tomcat.TomcatService.convertRequest(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.http.AggregatedHttpMessage)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.tomcat.TomcatService.InputBufferImpl.doRead(org.apache.tomcat.util.buf.ByteChunk)"}], "spoonFilePath": "TomcatService.java"}]}], "url": "https://github.com/line/armeria/issues/410", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "NPE occur when request body is empty. (TomcatService)", "statsSkippedReason": "", "user": "be-hase", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Hi.\r\n\r\nI am using armeria-tomcat with spring-mvc.\r\nFor example, controller is like the following code.\r\n\r\n```\r\n@RestController\r\npublic static class MyController {\r\n\r\n    @PostMapping(\"/hoge\")\r\n    public String hoge(\r\n            @RequestBody String body\r\n    ) {\r\n        return \"POST\";\r\n    }\r\n}\r\n```\r\n\r\nNPE occur when request body is empty.  \r\nStack trace is like the following.\r\n\r\n```\r\njava.lang.NullPointerException: null\r\n        at org.apache.coyote.Request.doRead(Request.java:511)\r\n        at org.apache.catalina.connector.InputBuffer.realReadBytes(InputBuffer.java:318)\r\n        at org.apache.tomcat.util.buf.ByteChunk.checkEof(ByteChunk.java:397)\r\n        at org.apache.tomcat.util.buf.ByteChunk.substract(ByteChunk.java:363)\r\n        at org.apache.catalina.connector.InputBuffer.readByte(InputBuffer.java:329)\r\n        at org.apache.catalina.connector.CoyoteInputStream.read(CoyoteInputStream.java:93)\r\n        at java.io.FilterInputStream.read(FilterInputStream.java:83)\r\n        at java.io.PushbackInputStream.read(PushbackInputStream.java:139)\r\n        at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver$EmptyBodyCheckingHttpInputMessage.<init>(AbstractMessageConverterMethodArgumentResolver.java:311)\r\n        at org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodArgumentResolver.readWithMessageConverters(AbstractMessageConverterMethodArgumentResolver.java:185)\r\n        at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.readWithMessageConverters(RequestResponseBodyMethodProcessor.java:149)\r\n        at org.springframework.web.servlet.mvc.method.annotation.RequestResponseBodyMethodProcessor.resolveArgument(RequestResponseBodyMethodProcessor.java:127)\r\n        at org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:121)\r\n        at org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:160)\r\n        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:129)\r\n        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)\r\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\r\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\r\n        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\r\n        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)\r\n        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)\r\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\r\n        at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:872)\r\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:707)\r\n        at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\r\n        at javax.servlet.http.HttpServlet.service(HttpServlet.java:790)\r\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230)\r\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\r\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n        at org.springframework.session.web.http.SessionRepositoryFilter.doFilterInternal(SessionRepositoryFilter.java:164)\r\n        at org.springframework.session.web.http.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:80)\r\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)\r\n        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\r\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\r\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\r\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)\r\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108)\r\n        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\r\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)\r\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\r\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)\r\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)\r\n        at com.linecorp.armeria.server.http.tomcat.TomcatService.lambda$null$4(TomcatService.java:407)\r\n        at com.linecorp.armeria.common.AbstractRequestContext.lambda$makeContextAware$1(AbstractRequestContext.java:59)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:144)\r\n        at java.lang.Thread.run(Thread.java:745)\r\n```\r\n\r\nIt seems to be null because it is not set here when content is empty.\r\n\r\nhttps://github.com/line/armeria/blob/master/tomcat/src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java#L467-L469\r\n\r\nCan I send PR ?\r\n\r\n```\r\n@@ -464,9 +464,7 @@ public final class TomcatService implements HttpService {\r\n \r\n         // Set the content.\r\n         final HttpData content = req.content();\r\n-        if (!content.isEmpty()) {\r\n-            coyoteReq.setInputBuffer(new InputBufferImpl(content));\r\n-        }\r\n+        coyoteReq.setInputBuffer(new InputBufferImpl(content));\r\n \r\n         return coyoteReq;\r\n     }\r\n@@ -574,7 +572,7 @@ public final class TomcatService implements HttpService {\r\n \r\n         @Override\r\n         public int doRead(ByteChunk chunk) {\r\n-            if (read) {\r\n+            if (read || content.isEmpty()) {\r\n                 // Read only once.\r\n                 return -1;\r\n             }\r\n\r\n```", "labels": ["defect"]}, {"created": "2017-02-15 08:36:21", "commits": {"9d03f816dca147ec9d2caae32350a917847422be": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-03-17 04:36:38", "filteredCommits": [], "commitsDetails": [{"nameRev": "9d03f816dca147ec9d2caae32350a917847422be tags/armeria-0.40.0~2", "commitMessage": "Fix flaky DropwizardMetricsIntegrationTest (#452)\n\nMotivation:\r\n\r\nA metric-collecting client relies on the availability of RequestLog. A\r\nRequestLog may not be available immediately after an invocation is\r\nfinished.\r\n\r\nModifications:\r\n\r\n- Use a CountDownLatch to wait until all RequestLogs are collected\r\n  before the assertions\r\n\r\nResult:\r\n\r\n- Fixes #404\r\n- No more flaky test", "commitParents": ["cc0516c6502d1d1df1ded32a2a344812e7c06bf9"], "spoonStatsSkippedReason": "", "commitHash": "9d03f816dca147ec9d2caae32350a917847422be", "authoredDateTime": "2017-03-17 13:36:37", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 37, "deletions": 8, "lines": 45, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/metrics/DropwizardMetricsIntegrationTest.java"}], "commitDateTime": "2017-03-17 13:36:37", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 9, "MOV": 0, "INS": 9, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metrics.DropwizardMetricsIntegrationTest.normal()"}, {"UPD": 0, "TOT": 1, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metrics.DropwizardMetricsIntegrationTest.makeRequest(java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metrics.DropwizardMetricsIntegrationTest.CountDownClient"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.metrics.DropwizardMetricsIntegrationTest.makeRequest(java.lang.String,java.util.concurrent.CountDownLatch)"}], "spoonFilePath": "DropwizardMetricsIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/404", "ttf": 29.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Flaky test or race condition?", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Found this on Travis for a PR that didn't touch this code\r\n\r\n```\r\ncom.linecorp.armeria.it.metrics.DropwizardMetricsIntegrationTest > normal FAILED\r\n    java.lang.AssertionError: expected:<4> but was:<3>\r\n        at org.junit.Assert.fail(Assert.java:88)\r\n        at org.junit.Assert.failNotEquals(Assert.java:834)\r\n        at org.junit.Assert.assertEquals(Assert.java:645)\r\n        at org.junit.Assert.assertEquals(Assert.java:631)\r\n        at com.linecorp.armeria.it.metrics.DropwizardMetricsIntegrationTest.normal(DropwizardMetricsIntegrationTest.java:67)\r\n```", "labels": ["defect"]}, {"created": "2017-02-15 07:37:27", "commits": {"e6703cf0386e08729d28dc6315f1cf014c305a3f": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-02-28 08:24:49", "filteredCommits": [], "commitsDetails": [{"nameRev": "e6703cf0386e08729d28dc6315f1cf014c305a3f tags/armeria-0.98.0~13", "commitMessage": "Fix flaky tests (#2465)\n\n- `ServerTest.testIdleTimeoutByContentSent()`\r\n  - Fixes #403\r\n- `GracefulShutdownIntegrationTest.testHardTimeout()`\r\n  - Fixes #2451\r\n- Fixed sporadic `jacocoTestReport` task failure\r\n  - Excluded `CurrentJavaVersionSpecific` from the report so that the\r\n    task does not fail with duplicate multi-release JAR classes.", "commitParents": ["e95e07b528092d90566281dac7673a71305a2705"], "spoonStatsSkippedReason": "", "commitHash": "e6703cf0386e08729d28dc6315f1cf014c305a3f", "authoredDateTime": "2020-02-07 12:46:47", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 1, "lines": 2, "filePath": "gradle.properties"}, {"insertions": 18, "deletions": 9, "lines": 27, "filePath": "thrift/src/test/java/com/linecorp/armeria/it/server/GracefulShutdownIntegrationTest.java"}, {"insertions": 39, "deletions": 41, "lines": 80, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServerTest.java"}], "commitDateTime": "2020-02-07 12:46:47", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.server.GracefulShutdownIntegrationTest"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.server.GracefulShutdownIntegrationTest.1.configure(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.it.server.GracefulShutdownIntegrationTest.waitsForRequestToComplete()"}, {"UPD": 2, "TOT": 7, "MOV": 0, "INS": 4, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.server.GracefulShutdownIntegrationTest.testHardTimeout()"}, {"UPD": 1, "TOT": 5, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.it.server.GracefulShutdownIntegrationTest.interruptsSlowRequests()"}], "spoonFilePath": "GracefulShutdownIntegrationTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.1"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testIdleTimeoutByContentSent()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testSimple(java.lang.String,java.lang.String,java.lang.String[])"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testChannelOptions()"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testIdleTimeoutByNoContentSent()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testDynamicRequestTimeoutInvocation()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.versionMetrics()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.notGracefulShutdownBlockingTaskExecutor()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testActiveLocalPort()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testUnsupportedMethod()"}, {"UPD": 2, "TOT": 4, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.ServerTest"}, {"UPD": 0, "TOT": 5, "MOV": 2, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.duplicatedPort()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testDelayedResponseApiInvocationExpectedTimeout()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.customStartStopExecutor()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.startServer()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testStartStop()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testInvocation()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.unsuccessfulStartupTerminatesBossGroup()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.defaultStartStopExecutor()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testOptions()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testRequestTimeoutInvocation()"}, {"UPD": 0, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testBuggyService()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.checkMetrics()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.gracefulShutdownBlockingTaskExecutor()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServerTest.testInvalidPath()"}], "spoonFilePath": "ServerTest.java"}]}], "url": "https://github.com/line/armeria/issues/403", "ttf": 13.000277777777777, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Test failures when running locally, but not on CI", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "These tests always fail for me on a macbook pro when run from ```./gradlew :core:test```\r\n\r\n```\r\nServerTest.testIdleTimeoutByContentSent: FAILURE\r\n\r\ncom.linecorp.armeria.server.ServerTest > testIdleTimeoutByContentSent FAILED\r\n    org.junit.runners.model.TestTimedOutException: test timed out after 2500 milliseconds\r\n        at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)\r\n        at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:928)\r\n        at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1323)\r\n        at java.net.InetAddress.getLocalHost(InetAddress.java:1500)\r\n        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:204)\r\n        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\r\n        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\r\n        at java.net.Socket.connect(Socket.java:589)\r\n        at java.net.Socket.connect(Socket.java:538)\r\n        at com.linecorp.armeria.server.ServerTest.testIdleTimeoutByContentSent(ServerTest.java:204)\r\n.....\r\ncom.linecorp.armeria.server.ServerTest > testIdleTimeoutByNoContentSent FAILED\r\n    org.junit.runners.model.TestTimedOutException: test timed out after 2500 milliseconds\r\n        at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)\r\n        at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:928)\r\n        at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1323)\r\n        at java.net.InetAddress.getLocalHost(InetAddress.java:1500)\r\n        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:204)\r\n        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\r\n        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\r\n        at java.net.Socket.connect(Socket.java:589)\r\n        at java.net.Socket.connect(Socket.java:538)\r\n        at com.linecorp.armeria.server.ServerTest.testIdleTimeoutByNoContentSent(ServerTest.java:188)\r\nServerTest.testBuggyService: FAILURE\r\n\r\ncom.linecorp.armeria.server.ServerTest > testBuggyService FAILED\r\n    org.junit.runners.model.TestTimedOutException: test timed out after 2500 milliseconds\r\n        at java.net.InetAddress.getLocalHost(InetAddress.java:1486)\r\n        at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:204)\r\n        at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\r\n        at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\r\n        at java.net.Socket.connect(Socket.java:589)\r\n        at java.net.Socket.connect(Socket.java:538)\r\n        at com.linecorp.armeria.server.ServerTest.testBuggyService(ServerTest.java:231)\r\n```", "labels": ["defect"]}, {"created": "2017-02-08 09:26:17", "commits": {"dbd716241f1c059d4c1b97c3901ff3460e375efb": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-02-16 03:53:27", "filteredCommits": [], "commitsDetails": [{"nameRev": "dbd716241f1c059d4c1b97c3901ff3460e375efb tags/armeria-0.36.0~3", "commitMessage": "Remove duplicated code for tomcat version logging (#394) (#405)\n\nTomcat version logging is done at TomcatVersion.java already.", "commitParents": ["3eb689b710431b62dcf9760fd3d533bfc669bd31"], "spoonStatsSkippedReason": "", "commitHash": "dbd716241f1c059d4c1b97c3901ff3460e375efb", "authoredDateTime": "2017-02-16 12:46:10", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 0, "deletions": 24, "lines": 24, "filePath": "tomcat/src/main/java/com/linecorp/armeria/server/http/tomcat/TomcatService.java"}], "commitDateTime": "2017-02-16 12:46:10", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 8, "MOV": 0, "INS": 0, "DEL": 8, "spoonMethodName": "com.linecorp.armeria.server.http.tomcat.TomcatService"}], "spoonFilePath": "TomcatService.java"}]}], "url": "https://github.com/line/armeria/issues/394", "ttf": 7.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Tomcat version is logged twice", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "```\r\n09:23:54.257 [Test worker] INFO  c.l.a.s.http.tomcat.TomcatService - Tomcat version: 8.5.6.0 (major: 8)\r\n09:23:54.320 [Test worker] INFO  c.l.a.s.http.tomcat.TomcatVersion - Tomcat version: 8.5.6.0 (8.5)\r\n```", "labels": ["defect"]}, {"created": "2017-02-08 07:32:02", "commits": {"21f9552e787f0fb1019f19617abda6a75061e6b3": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2017-02-16 06:44:04", "filteredCommits": [], "commitsDetails": [{"nameRev": "21f9552e787f0fb1019f19617abda6a75061e6b3 tags/armeria-0.36.0~1", "commitMessage": "Correct the scope of the inter-module dependencies in POM (#391) (#406)\n\nMotivation:\r\n\r\n'maven-publish' plugin has a bug which sets the scopes of all\r\ndependencies to 'runtime' even when they should be 'compile':\r\n\r\n- https://discuss.gradle.org/t/maven-publish-plugin-generated-pom-making-dependency-scope-runtime/7494\r\n\r\nOur script has the workaround, but it doesn't seem to handle the project\r\ndependencies correctly.\r\n\r\nModifications:\r\n\r\n- Handle project dependencies correctly\r\n- Miscellaneous:\r\n  - Update Gradle to 3.3\r\n\r\nResult:\r\n\r\n- Fixes #391, producing the correct POM\r\n- Gradle 3.3", "commitParents": ["22b7d6aa98ceb2c8e2d77247dc7291cb4c145ecb"], "spoonStatsSkippedReason": "", "commitHash": "21f9552e787f0fb1019f19617abda6a75061e6b3", "authoredDateTime": "2017-02-16 15:44:03", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 15, "deletions": 5, "lines": 20, "filePath": "build.gradle"}, {"insertions": 0, "deletions": 0, "lines": 0, "filePath": "gradle/wrapper/gradle-wrapper.jar"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "gradle/wrapper/gradle-wrapper.properties"}], "commitDateTime": "2017-02-16 15:44:03", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/391", "ttf": 7.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Incorrect inter-module dependency scope in POM", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "For an unknown reason, it seems like the module dependencies like:\r\n\r\n```groovy\r\ndependency {\r\n    compile project(':core')\r\n}\r\n```\r\n\r\nis translated into the following POM:\r\n\r\n```xml\r\n<dependency>\r\n    <groupId>com.linecorp.armeria</groupId>\r\n    <artifactId>armeria</artifactId>\r\n    <version>...</version>\r\n    <scope>runtime</scope> <!-- should be compile -->\r\n</dependency>\r\n```", "labels": ["defect"]}, {"created": "2017-01-17 09:22:53", "commits": {"a5f9bd1d778f4596731d14b87528697380c49809": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-01-20 02:29:59", "filteredCommits": [], "commitsDetails": [{"nameRev": "a5f9bd1d778f4596731d14b87528697380c49809 tags/armeria-0.35.0~1", "commitMessage": "Fix to use armeria client's uri for Retrofit's base URL (#377)\n\nMotivation:\r\n- Currently, a response of armeria-retrofit returns wrong uri like `\"http://0.0.0.0/\"` and it can make a user confusion\r\n\r\nModifications:\r\n- Fix to use armeria client's uri instead of dummy uri for Retrofit's base URL\r\n- Use AbstractServerTest at ArmeriaCallFactoryTest\r\n- Fix to use try-with resource for Buffer due to Buffer is AutoCloseable\r\n\r\nResult:\r\n- Fixes #376", "commitParents": ["c7eacf1349fe8f90663dfd189ae2f99aca25c391"], "spoonStatsSkippedReason": "", "commitHash": "a5f9bd1d778f4596731d14b87528697380c49809", "authoredDateTime": "2017-01-20 11:29:58", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 3, "lines": 6, "filePath": "retrofit2/src/main/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaCallFactory.java"}, {"insertions": 121, "deletions": 108, "lines": 229, "filePath": "retrofit2/src/test/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaCallFactoryTest.java"}, {"insertions": 34, "deletions": 0, "lines": 34, "filePath": "retrofit2/src/test/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaRetrofitTest.java"}, {"insertions": 37, "deletions": 2, "lines": 39, "filePath": "retrofit2/src/main/java/com/linecorp/armeria/client/http/retrofit2/ArmeriaRetrofit.java"}], "commitDateTime": "2017-01-20 11:29:58", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaRetrofit.builder(com.linecorp.armeria.client.http.HttpClient)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaRetrofit"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaRetrofit.convertToOkHttpCompatUri(java.net.URI)"}], "spoonFilePath": "ArmeriaRetrofit.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 8, "MOV": 5, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaCallFactory.ArmeriaCall.doCall(com.linecorp.armeria.client.http.HttpClient,okhttp3.Request)"}], "spoonFilePath": "ArmeriaCallFactory.java"}, {"spoonMethods": [{"UPD": 8, "TOT": 13, "MOV": 4, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaCallFactoryTest.init()"}, {"UPD": 0, "TOT": 10, "MOV": 7, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaCallFactoryTest.setUp()"}, {"UPD": 0, "TOT": 6, "MOV": 4, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaCallFactoryTest.destroy()"}, {"UPD": 0, "TOT": 6, "MOV": 1, "INS": 1, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaCallFactoryTest"}, {"UPD": 0, "TOT": 5, "MOV": 0, "INS": 5, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaCallFactoryTest.respectsHttpClientUri_endpointGroup()"}, {"UPD": 0, "TOT": 5, "MOV": 3, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaCallFactoryTest.formEncoded()"}, {"UPD": 0, "TOT": 5, "MOV": 3, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaCallFactoryTest.post()"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaCallFactoryTest.configureServer(com.linecorp.armeria.server.ServerBuilder)"}], "spoonFilePath": "ArmeriaCallFactoryTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.retrofit2.ArmeriaRetrofitTest"}], "spoonFilePath": "ArmeriaRetrofitTest.java"}]}], "url": "https://github.com/line/armeria/issues/376", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "The raw okhttp3.Request object always has 0.0.0.0 authority when armeria-retrofit2 is used", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When you use armeria-retrofit2 and receive a response from Retrofit2:\r\n\r\n```java\r\n        // From ArmeriaCallFactoryTest.java\r\n        Response<Void> response = service.postForm(\"Cony\", 26).get();\r\n        assertThat(response.isSuccessful());\r\n        System.err.println(response.raw().request().url());\r\n```\r\n\r\n.. it will print the following URL that contains a misleading 0.0.0.0 rather than the actual hostname:\r\n\r\n```\r\nhttp://0.0.0.0/postForm\r\n```\r\n\r\nThis can make a user think the request was sent to a wrong host.", "labels": ["defect"]}, {"created": "2017-01-17 09:09:23", "commits": {"e18fa37fd9d78e48d308c520be3ba91f764468d7": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-02-21 06:23:47", "filteredCommits": [], "commitsDetails": [{"nameRev": "e18fa37fd9d78e48d308c520be3ba91f764468d7 tags/armeria-0.37.0~3", "commitMessage": "Make HttpClient respect the path in the client URI (#375) (#408)\n\n- Added respecting client URI logic to DefaultHttpClient.\r\n- Added test cases for modification.\r\n- Added more restrict concatenate path logic\r\n  - Replace all consecutive '/' to '/'\r\n  - If URI path does not end with '/' and request path does not start with '/', add slash between client URI path and request path.\r\n", "commitParents": ["9aa0595b47353e50e5b8b496d7649f96243873ac"], "spoonStatsSkippedReason": "", "commitHash": "e18fa37fd9d78e48d308c520be3ba91f764468d7", "authoredDateTime": "2017-02-21 14:38:29", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 30, "deletions": 0, "lines": 30, "filePath": "core/src/main/java/com/linecorp/armeria/client/http/DefaultHttpClient.java"}, {"insertions": 67, "deletions": 0, "lines": 67, "filePath": "core/src/test/java/com/linecorp/armeria/client/http/DefaultHttpClientTest.java"}, {"insertions": 27, "deletions": 0, "lines": 27, "filePath": "core/src/test/java/com/linecorp/armeria/client/http/HttpClientIntegrationTest.java"}], "commitDateTime": "2017-02-21 14:38:29", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.DefaultHttpClientTest"}], "spoonFilePath": "DefaultHttpClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.HttpClientIntegrationTest"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.HttpClientIntegrationTest.givenHttpClientUriPathAndRequestPath_whenGet_thenRequestToConcatenatedPath()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.HttpClientIntegrationTest.givenRequestPath_whenGet_thenRequestToPath()"}], "spoonFilePath": "HttpClientIntegrationTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.DefaultHttpClient.execute(io.netty.channel.EventLoop,com.linecorp.armeria.common.http.HttpRequest)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.DefaultHttpClient"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.http.DefaultHttpClient.concatPath(java.lang.String,java.lang.String)"}], "spoonFilePath": "DefaultHttpClient.java"}]}], "url": "https://github.com/line/armeria/issues/375", "ttf": 34.000277777777775, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "HttpClient does not respect the path in the client URI", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When a user creates an `HttpClient` with a URI that contains a path:\r\n\r\n```java\r\nHttpClient client = Clients.newClient(\"none+http://example.com/hello\", HttpClient.class);\r\n```\r\n\r\nThe path information is discarded silently. As a result:\r\n\r\n```java\r\nclient.get(\"/world\");\r\n```\r\n\r\n... will send a request to `http://example.com/world` rather than `http://example.com/hello/world` which is confusing.\r\n\r\nWe should:\r\n\r\n- respect the path in a clientURI or\r\n- raise an exception when the path of a client URI is not '/' or empty.", "labels": ["defect"]}, {"created": "2017-01-12 08:31:59", "commits": {"bc0647e8af66472d0dfadbb6f782dac41f66df80": {"commitGHEventType": "referenced", "commitUser": "imasahiro"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2017-01-16 08:04:19", "filteredCommits": [], "commitsDetails": [{"nameRev": "bc0647e8af66472d0dfadbb6f782dac41f66df80 tags/armeria-0.35.0~6", "commitMessage": "Fix graceful shutdown (#363) (#371)\n\nMotivation:\r\n\r\nGraceful shutdown has been broken since the streaming rewrite. It only\r\nworked for HTTP/1 traffic.\r\n\r\nModifications:\r\n\r\n- Rename GracefulShutdownHandler to GracefulShutdownSupport\r\n  - Make it an abstract class and provide two implementations; the\r\n    default one and the disabled one\r\n  - GracefulShutdownSupport is not a ChannelHandler anymore but just a\r\n    utility class\r\n- HttpServerHandler now requires GracefulShutdownSupport to count the\r\n  number of pending responses.\r\n- Add more tests and improve the existing ones in\r\n  GracefulShutdownIntegrationTest\r\n\r\nResult:\r\n\r\n- Graceful shutdown should work as expected.\r\n- Fixes #363", "commitParents": ["dc88a791932cfb5751a9974f02d982ec2ca8ee45"], "spoonStatsSkippedReason": "", "commitHash": "bc0647e8af66472d0dfadbb6f782dac41f66df80", "authoredDateTime": "2017-01-16 17:04:19", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 7, "deletions": 8, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/server/http/HttpServerPipelineConfigurator.java"}, {"insertions": 82, "deletions": 7, "lines": 89, "filePath": "core/src/test/java/com/linecorp/armeria/server/GracefulShutdownIntegrationTest.java"}, {"insertions": 145, "deletions": 0, "lines": 145, "filePath": "core/src/main/java/com/linecorp/armeria/server/GracefulShutdownSupport.java"}, {"insertions": 11, "deletions": 2, "lines": 13, "filePath": "core/src/main/java/com/linecorp/armeria/server/http/HttpServerHandler.java"}, {"insertions": 16, "deletions": 15, "lines": 31, "filePath": "core/src/main/java/com/linecorp/armeria/server/Server.java"}, {"insertions": 0, "deletions": 129, "lines": 129, "filePath": "core/src/main/java/com/linecorp/armeria/server/GracefulShutdownHandler.java"}, {"insertions": 37, "deletions": 46, "lines": 83, "filePath": "core/src/test/java/com/linecorp/armeria/server/{GracefulShutdownHandlerTest.java => GracefulShutdownSupportTest.java}"}], "commitDateTime": "2017-01-16 17:04:19", "commitUser": "imasahiro", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandler"}], "spoonFilePath": "GracefulShutdownHandler.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 3, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerHandler"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerHandler.handleRequest(io.netty.channel.ChannelHandlerContext,com.linecorp.armeria.server.http.DecodedHttpRequest)"}], "spoonFilePath": "HttpServerHandler.java"}, {"spoonMethods": [{"UPD": 16, "TOT": 16, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.activeRequestsNotPassedQuietPeriod()"}, {"UPD": 6, "TOT": 10, "MOV": 3, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.setUp()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownSupportTest.setUp()"}, {"UPD": 2, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.activeBlockingTaskPassedQuietPeriod()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.submitLongTask()"}, {"UPD": 22, "TOT": 23, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.noActiveRequestsPassedQuietPeriod()"}, {"UPD": 22, "TOT": 22, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.noActiveRequestsNotPassedQuietPeriod()"}, {"UPD": 16, "TOT": 16, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.assertWithoutPendingTasks(boolean,int,long,long)"}, {"UPD": 1, "TOT": 2, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.tearDown()"}, {"UPD": 14, "TOT": 14, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.assertWithPendingTasks(int,long)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.noRequestsNotPassedQuietPeriod()"}, {"UPD": 3, "TOT": 4, "MOV": 1, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.activeBlockingTaskNotPassedQuietPeriod()"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.noRequestsPassedQuietPeriod()"}, {"UPD": 16, "TOT": 16, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.activeRequestsPassedQuietPeriod()"}, {"UPD": 44, "TOT": 44, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownHandlerTest.testQuietPeriodExtensionOnRequest()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownSupportTest.tearDown()"}], "spoonFilePath": "GracefulShutdownSupportTest.java"}, {"spoonMethods": [{"UPD": 3, "TOT": 5, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.Server.start(java.util.concurrent.CompletableFuture)"}, {"UPD": 0, "TOT": 3, "MOV": 1, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.Server.start(com.linecorp.armeria.server.ServerPort)"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.Server"}, {"UPD": 5, "TOT": 13, "MOV": 5, "INS": 2, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.Server.stop0(java.util.concurrent.CompletableFuture)"}], "spoonFilePath": "Server.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownSupport"}], "spoonFilePath": "GracefulShutdownSupport.java"}, {"spoonMethods": [{"UPD": 6, "TOT": 7, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerPipelineConfigurator"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerPipelineConfigurator.Http2OrHttpHandler.addHttp2Handlers(io.netty.channel.ChannelHandlerContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerPipelineConfigurator.Http2OrHttpHandler.addHttpHandlers(io.netty.channel.ChannelHandlerContext)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerPipelineConfigurator.configureHttp(io.netty.channel.ChannelPipeline)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.http.HttpServerPipelineConfigurator.configureRequestCountingHandlers(io.netty.channel.ChannelPipeline)"}], "spoonFilePath": "HttpServerPipelineConfigurator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownIntegrationTest.testBaseline()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownIntegrationTest"}, {"UPD": 3, "TOT": 7, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownIntegrationTest.waitsForRequestToComplete()"}, {"UPD": 1, "TOT": 5, "MOV": 1, "INS": 1, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownIntegrationTest.configureServer(com.linecorp.armeria.server.ServerBuilder)"}, {"UPD": 2, "TOT": 6, "MOV": 0, "INS": 4, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownIntegrationTest.interruptsSlowRequests()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownIntegrationTest.testHardTimeout()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.GracefulShutdownIntegrationTest.baselineNanos()"}], "spoonFilePath": "GracefulShutdownIntegrationTest.java"}]}], "url": "https://github.com/line/armeria/issues/363", "ttf": 3.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "core module class `GracefulShutdownHandler` import wrong type of  HttpRequest ", "statsSkippedReason": "", "user": "jonefeewang", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "core module `GracefulShutdownHandler` import wrong type of  HttpRequest, cause method\r\n `boolean isRequestStart(Object msg) {\r\n        return msg instanceof HttpRequest;\r\n    }` useless. It should be `com.linecorp.armeria.common.http.HttpRequest` rather than `io.netty.handler.codec.http.HttpRequest`.", "labels": ["defect"]}, {"created": "2016-12-10 15:11:10", "commits": {"dc586a799fc06ef7c294c5fd2d85c1a05224ddf2": {"commitGHEventType": "referenced", "commitUser": "kojilin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2016-12-13 06:48:25", "filteredCommits": [], "commitsDetails": [{"nameRev": "dc586a799fc06ef7c294c5fd2d85c1a05224ddf2 tags/armeria-0.33.1~2", "commitMessage": "Do not check null on RpcRequest parameters / Easier instantiation of RpcRequest and RpcResponse (#352)\n\nRelated issue: #350\r\n\r\nMotivation:\r\n\r\n- Attempting to send a null parameter fails since 0.33.0 due to the use\r\n  of ImmutableList.copyOf() and GuavaCollectors.toImmutableList(), which\r\n  does numm checks on elements.\r\n- We could make users' lives easier by adding some static factory\r\n  methods to RpcRequest and RpcResponse\r\n\r\nModifications:\r\n\r\n- Do not use ImmutableList.copyOf() and\r\n  GuavaCollectors.toImmutableList() when constructing the RPC parameter\r\n  list\r\n- Add various static factory methods to RpcRequest and RpcResponse\r\n- Add more convenience constructors to DefaultRpcRequest\r\n\r\nResult:\r\n\r\n- Fixes #350, the regression introduced in 0.33.0\r\n- A user can instantiate RpcRequest and RpcResponse more easily.", "commitParents": ["8acbaf2933648a7dd3982f6b18e46046f94c9683"], "spoonStatsSkippedReason": "", "commitHash": "dc586a799fc06ef7c294c5fd2d85c1a05224ddf2", "authoredDateTime": "2016-12-13 15:48:24", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 4, "lines": 6, "filePath": "zipkin/src/test/java/com/linecorp/armeria/server/tracing/TracingServiceTest.java"}, {"insertions": 1, "deletions": 3, "lines": 4, "filePath": "core/src/test/java/com/linecorp/armeria/server/ServiceTest.java"}, {"insertions": 15, "deletions": 0, "lines": 15, "filePath": "core/src/main/java/com/linecorp/armeria/common/RpcResponse.java"}, {"insertions": 2, "deletions": 4, "lines": 6, "filePath": "zipkin/src/test/java/com/linecorp/armeria/client/tracing/TracingClientTest.java"}, {"insertions": 61, "deletions": 0, "lines": 61, "filePath": "core/src/main/java/com/linecorp/armeria/common/RpcRequest.java"}, {"insertions": 29, "deletions": 0, "lines": 29, "filePath": "core/src/test/java/com/linecorp/armeria/server/thrift/ThriftServiceTest.java"}, {"insertions": 26, "deletions": 7, "lines": 33, "filePath": "core/src/main/java/com/linecorp/armeria/server/thrift/THttpService.java"}, {"insertions": 52, "deletions": 13, "lines": 65, "filePath": "core/src/main/java/com/linecorp/armeria/common/DefaultRpcRequest.java"}, {"insertions": 1, "deletions": 0, "lines": 1, "filePath": "core/src/test/java/com/linecorp/armeria/client/thrift/ThriftOverHttpClientTest.java"}, {"insertions": 1, "deletions": 2, "lines": 3, "filePath": "core/src/main/java/com/linecorp/armeria/client/thrift/DefaultTHttpClient.java"}, {"insertions": 5, "deletions": 7, "lines": 12, "filePath": "core/src/test/java/com/linecorp/armeria/client/circuitbreaker/CircuitBreakerClientTest.java"}], "commitDateTime": "2016-12-13 15:48:24", "commitUser": "kojilin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftServiceTest.testSync_HelloService_hello_with_null()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.ThriftServiceTest.testAsync_HelloService_hello_with_null()"}], "spoonFilePath": "ThriftServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 1, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.tracing.TracingServiceTest.testServiceInvocation(boolean)"}], "spoonFilePath": "TracingServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.of(java.lang.Object)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.ofFailure(java.lang.Throwable)"}], "spoonFilePath": "RpcResponse.java"}, {"spoonMethods": [{"UPD": 10, "TOT": 24, "MOV": 6, "INS": 8, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.DefaultRpcRequest"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.DefaultRpcRequest.params()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.DefaultRpcRequest.copyParams(java.lang.Object[])"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.DefaultRpcRequest.copyParams(java.lang.Iterable)"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.DefaultRpcRequest.toString()"}], "spoonFilePath": "DefaultRpcRequest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.client.thrift.DefaultTHttpClient.executeMultiplexed(java.lang.String,java.lang.Class,java.lang.String,java.lang.String,java.lang.Object[])"}], "spoonFilePath": "DefaultTHttpClient.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 11, "MOV": 3, "INS": 4, "DEL": 4, "spoonMethodName": "com.linecorp.armeria.client.circuitbreaker.CircuitBreakerClientTest"}], "spoonFilePath": "CircuitBreakerClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 3, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.ServiceTest.testLambdaExpressionDecorator()"}], "spoonFilePath": "ServiceTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 1, "INS": 2, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.client.tracing.TracingClientTest.testRemoteInvocationWithSamplingRate(float)"}], "spoonFilePath": "TracingClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.of(java.lang.Class,java.lang.String)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.of(java.lang.Class,java.lang.String,java.lang.Iterable)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.of(java.lang.Class,java.lang.String,java.lang.Object[])"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.of(java.lang.Class,java.lang.String,java.lang.Object)"}], "spoonFilePath": "RpcRequest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.client.thrift.ThriftOverHttpClientTest.testHelloServiceSync()"}], "spoonFilePath": "ThriftOverHttpClientTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 2, "INS": 1, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.invoke(com.linecorp.armeria.server.ServiceRequestContext,com.linecorp.armeria.common.SerializationFormat,int,java.lang.String,com.linecorp.armeria.internal.thrift.ThriftFunction,org.apache.thrift.TBase,com.linecorp.armeria.common.http.HttpResponseWriter)"}, {"UPD": 5, "TOT": 8, "MOV": 3, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.thrift.THttpService.toList(org.apache.thrift.TBase)"}], "spoonFilePath": "THttpService.java"}]}], "url": "https://github.com/line/armeria/issues/350", "ttf": 2.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "null parameter value not allowed", "statsSkippedReason": "", "user": "alex-arana", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "As of 0.33.0 the following no longer works when the input parameter value is null:\r\n\r\n`{ string ping(1:string echo) }`\r\n\r\nLooking at the changes is looks like the DefaultRpcRequest constructor now copies the input parameters using a [Guava ImmutableList](https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ImmutableCollection.html) which does prohibit null elements:\r\n\r\n", "labels": ["defect"]}, {"created": "2016-09-27 07:51:08", "commits": {"d5d958fd8f8bf284eaaa52f7dada6252465f634c": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2016-09-28 08:24:09", "filteredCommits": [], "commitsDetails": [{"nameRev": "d5d958fd8f8bf284eaaa52f7dada6252465f634c tags/armeria-0.27.0.Final~1", "commitMessage": "Cleanup a stream message after notifying subscribers of completion instead of before. (#291)\n\nPreviously, closeFuture would trigger before subscribers, meaning the connection may be closed before finishing the HTTP response. While I saw the bad behavior with nginx, I think it may be possible for any case where Keep-Alive isn't used.\r\n\r\nConfirmed this fixes the buggy behavior I saw when using armeria with nginx. The solution seems a bit shady to me though, please check if this makes any sense at all.\r\n\r\nFixes #290", "commitParents": ["72131fba8b3b610e8511dc0a885c94c8b748db98"], "spoonStatsSkippedReason": "", "commitHash": "d5d958fd8f8bf284eaaa52f7dada6252465f634c", "authoredDateTime": "2016-09-28 17:24:09", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 17, "deletions": 15, "lines": 32, "filePath": "src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java"}], "commitDateTime": "2016-09-28 17:24:09", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 4, "MOV": 3, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriberWithCloseEvent(org.reactivestreams.Subscriber,com.linecorp.armeria.common.stream.DefaultStreamMessage$CloseEvent)"}], "spoonFilePath": "DefaultStreamMessage.java"}]}], "url": "https://github.com/line/armeria/issues/290", "ttf": 1.0002777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Race condition when closing a stream", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When trying to use an armeria server using TomcatService behind nginx, I found that the response is always incomplete. Investigating into it, I found that DefaultStreamMessage completes closeFuture before notifying a subscriber of completion, because it cleans up before notifying subscribers. I think cleanup should be moved after notifying, but am a bit confused since cancel() also triggers a cleanup() which has no possibility of triggering a subscriber - is that ok (I would expect to notify subscribers of the cancellation)?\n\nHere cleanup() is called\nhttps://github.com/line/armeria/blob/master/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java#L313\n\nWhich calls closeFuture here\nhttps://github.com/line/armeria/blob/master/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java#L383\n\nWhich will directlly call HttpServerHandler's connection close logic here\nhttps://github.com/line/armeria/blob/43f95f3bb5f1039711d347822014e0aa835ee7b9/src/main/java/com/linecorp/armeria/server/http/HttpServerHandler.java#L297\n\nThis is before the stream notified the subscriber here\nhttps://github.com/line/armeria/blob/master/src/main/java/com/linecorp/armeria/common/stream/DefaultStreamMessage.java#L318\n\nWhich would have called very important logic in HttpResponseSubscriber here\nhttps://github.com/line/armeria/blob/cf909a011e80334ddd5c2d82f0e0057d90e19f8f/src/main/java/com/linecorp/armeria/server/http/HttpResponseSubscriber.java#L218\n", "labels": ["defect"]}, {"created": "2016-09-13 07:07:30", "user": "kojilin", "body": "https://github.com/line/armeria/pull/261 has some problem if client access path is like\nhttp://localhost/parameter?=${variable}  or http://localhost/parameter/${variable}\nIt's not suitable when variable has lots variation.\n", "closed": "2016-09-20 09:24:00", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/278", "ttf": 7.000277777777778, "commits": {}, "labels": ["defect"], "title": "Metrics of http client may have memory/size problem"}, {"created": "2016-09-12 05:12:25", "user": "trustin", "body": "Seems like `JSON.parse()` loses some digits when parsing a large integer:\n\nhttp://stackoverflow.com/questions/18755125/node-js-is-there-any-proper-way-to-parse-json-with-large-numbers-long-bigint\n", "closed": "2016-09-19 01:45:35", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/273", "ttf": 6.000277777777778, "commits": {}, "labels": ["defect"], "title": "Cannot send a large integer with the DocService debug form"}, {"created": "2016-09-06 19:22:55", "user": "gotchazipc", "body": "While digging into code, I found that <code>HttpClientDelegate</code> always set User-Agent header with a fixed value, over-writing existing one. Is this behavior intended? It would be nice to make the value customizable. \n", "closed": "2016-09-09 14:54:24", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/266", "ttf": 2.000277777777778, "commits": {}, "labels": ["defect"], "title": "User-agent header is not changeable."}, {"created": "2016-08-02 11:23:22", "user": "anuraaga", "body": "When using armeria 0.21, Tomcat redirect responses don't seem to be returned to the browser. This is with HTTP1 (not https).\n\nThe CoyoteResponse has a status of 302 and  MimeHeaderField with key Location and value of a URL. But the browser seems to treat the response returned as corrupt - it doesn't redirect and in developer tools, it shows an error \"Provisional headers are shown\".\n", "closed": "2016-08-03 01:10:46", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/210", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "armeria 0.21 does not properly handle Tomcat redirect responses (maybe others too?)"}, {"created": "2016-06-06 07:27:02", "commits": {"4df7b24001f399c296c812cb3fe915d32040b3e0": {"commitGHEventType": "referenced", "commitUser": "trustin"}, "70a8f99f049036c0448e49ec1495b33e0f04065e": {"commitGHEventType": "closed", "commitUser": "trustin"}}, "numCommits": 1, "changesInPackagesSPOON": ["com.linecorp.armeria.server.docs.MapInfo.of(org.apache.thrift.meta_data.MapMetaData,java.lang.String,java.util.Map)", "com.linecorp.armeria.server.docs.FieldInfo.of(org.apache.thrift.meta_data.FieldMetaData,java.lang.String,java.util.Map)", "com.linecorp.armeria.server.docs.ListInfo.of(org.apache.thrift.meta_data.ListMetaData,java.lang.String,java.util.Map)", "com.linecorp.armeria.server.docs.SetInfo.of(org.apache.thrift.meta_data.SetMetaData)", "com.linecorp.armeria.server.docs.StructInfo.of(org.apache.thrift.meta_data.StructMetaData)", "com.linecorp.armeria.server.docs.MapInfo.of(org.apache.thrift.meta_data.MapMetaData)", "com.linecorp.armeria.server.docs.TypeInfo.of(org.apache.thrift.meta_data.FieldValueMetaData,java.lang.String,java.util.Map)", "com.linecorp.armeria.server.docs.ThriftDocString.traverseChildren(com.google.common.collect.ImmutableMap$Builder,java.lang.String,java.lang.String,java.lang.Object)", "com.linecorp.armeria.server.docs.StructInfo.of(org.apache.thrift.meta_data.StructMetaData,java.lang.String,java.util.Map)", "com.linecorp.armeria.server.docs.ListInfo.of(org.apache.thrift.meta_data.ListMetaData)", "com.linecorp.armeria.server.docs.SetInfo.of(org.apache.thrift.meta_data.SetMetaData,java.lang.String,java.util.Map)"], "closed": "2016-06-17 01:44:36", "filteredCommits": ["70a8f99f049036c0448e49ec1495b33e0f04065e"], "commitsDetails": [{"nameRev": "4df7b24001f399c296c812cb3fe915d32040b3e0 tags/armeria-0.20.1.Final~4", "commitMessage": "Merge pull request #190 from jongyeol/feature/fix-doc-service-struct-param\n\nFix #186 DocService Struct field docstrings are not reliably included", "commitParents": ["88f48bb814de9b483a598baa962fcf71bf1a6b49", "70a8f99f049036c0448e49ec1495b33e0f04065e"], "spoonStatsSkippedReason": "", "commitHash": "4df7b24001f399c296c812cb3fe915d32040b3e0", "authoredDateTime": "2016-06-17 10:44:34", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 16, "deletions": 6, "lines": 22, "filePath": "src/test/resources/META-INF/armeria/thrift/cassandra.json"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "src/main/java/com/linecorp/armeria/server/docs/ListInfo.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "src/main/java/com/linecorp/armeria/server/docs/MapInfo.java"}, {"insertions": 5, "deletions": 8, "lines": 13, "filePath": "src/main/java/com/linecorp/armeria/server/docs/TypeInfo.java"}, {"insertions": 35, "deletions": 14, "lines": 49, "filePath": "src/test/thrift/cassandra.thrift"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "src/main/java/com/linecorp/armeria/server/docs/ThriftDocString.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "src/main/java/com/linecorp/armeria/server/docs/SetInfo.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "src/main/java/com/linecorp/armeria/server/docs/FieldInfo.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "src/main/java/com/linecorp/armeria/server/docs/StructInfo.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "src/test/java/com/linecorp/armeria/server/docs/ThriftDocStringTest.java"}], "commitDateTime": "2016-06-17 10:44:34", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.SetInfo.of(org.apache.thrift.meta_data.SetMetaData)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.docs.SetInfo.of(org.apache.thrift.meta_data.SetMetaData,java.lang.String,java.util.Map)"}], "spoonFilePath": "SetInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.docs.ThriftDocString.traverseChildren(com.google.common.collect.ImmutableMap$Builder,java.lang.String,java.lang.String,java.lang.Object)"}], "spoonFilePath": "ThriftDocString.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.docs.ThriftDocStringTest.testCassandraJson()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.docs.ThriftDocStringTest.testThriftTestJson()"}], "spoonFilePath": "ThriftDocStringTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.StructInfo.of(org.apache.thrift.meta_data.StructMetaData,java.lang.String,java.util.Map)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.StructInfo.of(org.apache.thrift.meta_data.StructMetaData)"}], "spoonFilePath": "StructInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.FieldInfo.of(org.apache.thrift.meta_data.FieldMetaData,java.lang.String,java.util.Map)"}], "spoonFilePath": "FieldInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 5, "spoonMethodName": "com.linecorp.armeria.server.docs.TypeInfo.of(org.apache.thrift.meta_data.FieldValueMetaData,java.lang.String,java.util.Map)"}], "spoonFilePath": "TypeInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.docs.ListInfo.of(org.apache.thrift.meta_data.ListMetaData,java.lang.String,java.util.Map)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.ListInfo.of(org.apache.thrift.meta_data.ListMetaData)"}], "spoonFilePath": "ListInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.docs.MapInfo.of(org.apache.thrift.meta_data.MapMetaData,java.lang.String,java.util.Map)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.MapInfo.of(org.apache.thrift.meta_data.MapMetaData)"}], "spoonFilePath": "MapInfo.java"}]}, {"nameRev": "70a8f99f049036c0448e49ec1495b33e0f04065e tags/armeria-0.20.1.Final~4^2", "commitMessage": "Fix #186 DocService Struct field docstrings are not reliably included\n", "commitParents": ["88f48bb814de9b483a598baa962fcf71bf1a6b49"], "spoonStatsSkippedReason": "", "commitHash": "70a8f99f049036c0448e49ec1495b33e0f04065e", "authoredDateTime": "2016-06-16 22:12:32", "commitGHEventType": "closed", "commitGitStats": [{"insertions": 16, "deletions": 6, "lines": 22, "filePath": "src/test/resources/META-INF/armeria/thrift/cassandra.json"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "src/main/java/com/linecorp/armeria/server/docs/ListInfo.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "src/main/java/com/linecorp/armeria/server/docs/MapInfo.java"}, {"insertions": 5, "deletions": 8, "lines": 13, "filePath": "src/main/java/com/linecorp/armeria/server/docs/TypeInfo.java"}, {"insertions": 35, "deletions": 14, "lines": 49, "filePath": "src/test/thrift/cassandra.thrift"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "src/main/java/com/linecorp/armeria/server/docs/ThriftDocString.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "src/main/java/com/linecorp/armeria/server/docs/SetInfo.java"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "src/main/java/com/linecorp/armeria/server/docs/FieldInfo.java"}, {"insertions": 4, "deletions": 4, "lines": 8, "filePath": "src/main/java/com/linecorp/armeria/server/docs/StructInfo.java"}, {"insertions": 3, "deletions": 3, "lines": 6, "filePath": "src/test/java/com/linecorp/armeria/server/docs/ThriftDocStringTest.java"}], "commitDateTime": "2016-06-17 10:08:27", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.SetInfo.of(org.apache.thrift.meta_data.SetMetaData)"}, {"UPD": 0, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.docs.SetInfo.of(org.apache.thrift.meta_data.SetMetaData,java.lang.String,java.util.Map)"}], "spoonFilePath": "SetInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.docs.ThriftDocString.traverseChildren(com.google.common.collect.ImmutableMap$Builder,java.lang.String,java.lang.String,java.lang.Object)"}], "spoonFilePath": "ThriftDocString.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.docs.ThriftDocStringTest.testCassandraJson()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.server.docs.ThriftDocStringTest.testThriftTestJson()"}], "spoonFilePath": "ThriftDocStringTest.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "MOV": 1, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.StructInfo.of(org.apache.thrift.meta_data.StructMetaData,java.lang.String,java.util.Map)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.StructInfo.of(org.apache.thrift.meta_data.StructMetaData)"}], "spoonFilePath": "StructInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.FieldInfo.of(org.apache.thrift.meta_data.FieldMetaData,java.lang.String,java.util.Map)"}], "spoonFilePath": "FieldInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 5, "MOV": 0, "INS": 0, "DEL": 5, "spoonMethodName": "com.linecorp.armeria.server.docs.TypeInfo.of(org.apache.thrift.meta_data.FieldValueMetaData,java.lang.String,java.util.Map)"}], "spoonFilePath": "TypeInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 2, "spoonMethodName": "com.linecorp.armeria.server.docs.ListInfo.of(org.apache.thrift.meta_data.ListMetaData,java.lang.String,java.util.Map)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.ListInfo.of(org.apache.thrift.meta_data.ListMetaData)"}], "spoonFilePath": "ListInfo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "MOV": 0, "INS": 0, "DEL": 3, "spoonMethodName": "com.linecorp.armeria.server.docs.MapInfo.of(org.apache.thrift.meta_data.MapMetaData,java.lang.String,java.util.Map)"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.server.docs.MapInfo.of(org.apache.thrift.meta_data.MapMetaData)"}], "spoonFilePath": "MapInfo.java"}]}], "url": "https://github.com/line/armeria/issues/186", "ttf": 10.000277777777777, "gitStatsSummary": {"insertions": 21, "deletions": 24, "lines": 45, "gitFilesChange": 7}, "title": "DocService - Struct field docstrings are not reliably included", "statsSkippedReason": "", "user": "anuraaga", "changesInPackagesGIT": ["src/main/java/com/linecorp/armeria/server/docs"], "spoonStatsSummary": {"UPD": 1, "spoonMethodsChanged": 11, "TOT": 22, "MOV": 2, "INS": 1, "DEL": 18, "spoonFilesChanged": 7}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "When applying the docstring changes to an actual service, I found that field comments don't always show up, even though they are included in the JSON. I suspect something to do with the \"field key\" computation.\n", "labels": ["defect"]}, {"created": "2016-05-27 03:28:35", "user": "imasahiro", "body": "Currently it seems TTextProtocol do not support reading ailased enum. When we use DocService with enum, got ClassCastException with following stack trace.\n\nhttps://gist.github.com/imasahiro/2c02f1b27c4a2068dd06597fd77bb101 is a patch which can reproduce this error.\n\n```\n$ mvn test\n(snip)\nTests run: 11, Failures: 0, Errors: 1, Skipped: 0, Time elapsed: 0.029 sec <<< FAILURE! - in com.linecorp.armeria.common.thrift.text.TTextProtocolTest\ntTextProtocolReadWriteTest(com.linecorp.armeria.common.thrift.text.TTextProtocolTest)  Time elapsed: 0.012 sec  <<< ERROR!\n\njava.lang.ClassCastException: org.apache.thrift.meta_data.FieldValueMetaData cannot be cast to org.apache.thrift.meta_data.EnumMetaData\n        at com.linecorp.armeria.common.thrift.text.TTextProtocolTest.tTextProtocolReadWriteTest(TTextProtocolTest.java:90)\n```\n", "closed": "2016-05-27 03:54:13", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/180", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "ClassCastException at TTextProtocol.readStructBegin when reading ailased enum."}, {"created": "2016-03-03 10:53:34", "user": "trustin", "body": "10MB vs 1MB. We should use the sensible identical default value. Suggestions?\n/cc @anuraaga @inch772 \n", "closed": "2016-03-04 04:23:14", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/118", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["defect"], "title": "Default maxFrameLength differs between client and server side"}, {"created": "2016-01-29 16:18:35", "user": "dittos", "body": "I found that the Thrift binary included in the repo is not a vanilla version:\n\n```\n$ ./src/build/thrift.osx-x86_64 -version\nThrift version 0.9.1-LINE\n```\n\nIs there any difference in the generated code? I know these binaries are only used for generating test code, but was just curious :blush: \n\nAdded: Linux binary is not a customized version, but from 0.9.2.\n\n```\n$ ./thrift.linux-x86_64 -version\nThrift version 0.9.2\n```\n", "closed": "2017-02-23 07:45:15", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/104", "ttf": 390.0002777777778, "commits": {}, "labels": ["defect"], "title": "Version of bundled Thrift binary"}, {"created": "2016-01-28 06:13:58", "user": "anuraaga", "body": "While looking through armeria code in an unrelated matter, I found this method\n\nhttps://github.com/line/armeria/blob/master/src/main/java/com/linecorp/armeria/client/HttpSessionChannelFactory.java#L81\n\nIt computes a value for a map using more parameters than are provided to the key of the map. This is usually wrong, so I tried looking through and it seems that the specified host is only used for specifying the HOST header of the HTTP2 upgrader request.\n\nhttps://github.com/line/armeria/blob/master/src/main/java/com/linecorp/armeria/client/HttpConfigurator.java#L260\n\nI haven't ran anything to verify the behavior, but looking at the code it seems likely that all upgrade requests will have the host of the very first client to send a request for the session protocol on a given remote invoker factory, which there is usually only one of in a binary.\n", "closed": "2016-03-07 08:10:29", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/98", "ttf": 39.000277777777775, "commits": {}, "labels": ["defect"], "title": "Verify HOST header of upgrade requests"}, {"created": "2016-01-18 05:43:12", "user": "trustin", "body": "When an Armeria client sends the `HEAD /` upgrade request, some HTTP/1 servers send a 404 response with a `Connection: close` header instead of keeping the connection alive. The Armeria client attempts to send an HTTP/1 request for the current invocation to the closed connection after receiving the rejected upgrade response, which is incorrect and thus raises a `SessionClosedException`.\n\nTo fix this issue, we could make Armeria client handle `Connection: close` header properly and remember the list of the hosts that rejected the upgrade request.\n\n(Originally reported by @anuraaga)\n", "closed": "2016-03-07 08:12:52", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/86", "ttf": 49.000277777777775, "commits": {}, "labels": ["defect"], "title": "A failed H2C upgrade causes an invocation failure when server sends 'Connection: close' header."}, {"created": "2016-01-11 08:46:45", "user": "yfinkelstein", "body": "It looks like at the moment remote address is not passed to coyote request. It's quite easy to do with some thing like this in TomcatServiceInvocationHandler.java (I modified the signature to pass the entire context):\n\n```\n    private static Request convertRequest(ServiceInvocationContext ctx) {\n\n        final Request coyoteReq = new Request();\n        InetSocketAddress remote = (InetSocketAddress)ctx.remoteAddress();\n        //byte[] address = remote.getAddress().getAddress();\n\n        coyoteReq.setRemotePort (remote.getPort());\n        coyoteReq.remoteAddr().setString (remote.getHostName());\n\n```\n\nI had a servlet that was performing some authorization based on the remote address. With the change above is works fine now :)\n", "closed": "2016-01-13 05:11:48", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/81", "ttf": 1.0002777777777778, "commits": {}, "labels": ["defect"], "title": "Remote address is not set in TomcatServiceInvocationHandler"}, {"created": "2015-12-11 04:29:28", "user": "trustin", "body": "When we keep an HTTP/2 connection long enough to handle more than 1G requests, the stream ID will exceed `Integer.MAX_VALUE`. It's probably a good idea for an Armeria client to close the connection before hitting the limit.\n", "closed": "2016-03-30 07:08:38", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/69", "ttf": 110.00027777777778, "commits": {}, "labels": ["defect"], "title": "Disconnect before HTTP/2 stream ID overflow"}, {"created": "2015-11-17 06:41:32", "user": "anuraaga", "body": "Currently, armeria client does not seem to set HOST header on the upgrade request. When the request is processed by a HTTP1.1 server, like jetty in default settings, the server issues warning logs like\n\nWARN  org.eclipse.jetty.http.HttpParser - bad HTTP parsed: 400 No Host for HttpChannelOverHttp@4373aa09{r=0,c=false,a=IDLE,uri=null}\n\nThis is reasonable since HTTP1.1 requests, including an upgrade request must have a Host header as in:\nhttps://http2.github.io/http2-spec/#discover-http\n", "closed": "2015-11-27 05:44:54", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/5", "ttf": 9.000277777777777, "commits": {}, "labels": ["defect"], "title": "Armeria client should set HOST header on upgrade request"}, {"created": "2015-11-17 06:41:27", "user": "anuraaga", "body": "Currently it seems armeria client does not work when using HTTP upgrade and the server rejects upgrade. When forcing HTTP1 without upgrade using h1c://, it works fine.\n\nExample failing integration test: https://github.com/anuraaga/armeria/pull/1\n\nThe stacktrace seems to indicate that the issue is the upgrade user event handler is triggered inline, meaning that the session listener is triggered right away and the actual RPC request is sent - however, this is before HttpClientUpgradeHandler has had a chance to remove itself from the pipeline, which happens after the user event is triggered. The RPC request goes through HttpClientUpgradeHandler once again, where it fails since the failed upgrade is still in progress (just a couple of lines of code left to run though...).\n\nI tried moving the markConnectionFinished call in HttpConfigurator from userEventTriggered to channelRead or channelReadCompleted but couldn't figure out a resulting \"connection reset by peer\".\n\n```\njava.lang.IllegalStateException: Attempting to write HTTP request with upgrade in progress\n    at io.netty.handler.codec.http.HttpClientUpgradeHandler.write(HttpClientUpgradeHandler.java:161)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeWriteNow(ChannelHandlerInvokerUtil.java:157)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeWrite(DefaultChannelHandlerInvoker.java:337)\n    at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:265)\n    at io.netty.handler.timeout.IdleStateHandler.write(IdleStateHandler.java:284)\n    at com.linecorp.armeria.client.HttpClientIdleTimeoutHandler.write(HttpClientIdleTimeoutHandler.java:69)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeWriteNow(ChannelHandlerInvokerUtil.java:157)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeWrite(DefaultChannelHandlerInvoker.java:337)\n    at io.netty.channel.AbstractChannelHandlerContext.write(AbstractChannelHandlerContext.java:265)\n    at com.linecorp.armeria.client.HttpSessionHandler.write(HttpSessionHandler.java:126)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeWriteNow(ChannelHandlerInvokerUtil.java:157)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeWrite(DefaultChannelHandlerInvoker.java:337)\n    at io.netty.channel.AbstractChannelHandlerContext.writeAndFlush(AbstractChannelHandlerContext.java:281)\n    at io.netty.channel.DefaultChannelPipeline.writeAndFlush(DefaultChannelPipeline.java:1049)\n    at io.netty.channel.AbstractChannel.writeAndFlush(AbstractChannel.java:283)\n    at com.linecorp.armeria.client.HttpRemoteInvoker.writeRequest(HttpRemoteInvoker.java:216)\n    at com.linecorp.armeria.client.HttpRemoteInvoker.invoke0(HttpRemoteInvoker.java:166)\n    at com.linecorp.armeria.client.HttpRemoteInvoker.lambda$invoke$53(HttpRemoteInvoker.java:135)\n    at com.linecorp.armeria.client.HttpRemoteInvoker$$Lambda$17/1021436681.operationComplete(Unknown Source)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:567)\n    at io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:397)\n    at com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.notifyConnect(DefaultKeyedChannelPool.java:154)\n    at com.linecorp.armeria.client.pool.DefaultKeyedChannelPool.lambda$acquireHealthyFromPoolOrNew$35(DefaultKeyedChannelPool.java:125)\n    at com.linecorp.armeria.client.pool.DefaultKeyedChannelPool$$Lambda$21/100945895.operationComplete(Unknown Source)\n    at io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:680)\n    at io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:567)\n    at io.netty.util.concurrent.DefaultPromise.setSuccess(DefaultPromise.java:397)\n    at com.linecorp.armeria.client.HttpSessionChannelFactory$3.userEventTriggered(HttpSessionChannelFactory.java:137)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeUserEventTriggeredNow(ChannelHandlerInvokerUtil.java:75)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeUserEventTriggered(DefaultChannelHandlerInvoker.java:135)\n    at io.netty.channel.AbstractChannelHandlerContext.fireUserEventTriggered(AbstractChannelHandlerContext.java:149)\n    at io.netty.channel.ChannelInboundHandlerAdapter.userEventTriggered(ChannelInboundHandlerAdapter.java:108)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeUserEventTriggeredNow(ChannelHandlerInvokerUtil.java:75)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeUserEventTriggered(DefaultChannelHandlerInvoker.java:135)\n    at io.netty.channel.AbstractChannelHandlerContext.fireUserEventTriggered(AbstractChannelHandlerContext.java:149)\n    at com.linecorp.armeria.client.HttpSessionChannelFactory$DefaultSessionListener.sessionActivated(HttpSessionChannelFactory.java:152)\n    at com.linecorp.armeria.client.HttpConfigurator.markHttpConnectionFinished(HttpConfigurator.java:170)\n    at com.linecorp.armeria.client.HttpConfigurator.access$300(HttpConfigurator.java:67)\n    at com.linecorp.armeria.client.HttpConfigurator$3.userEventTriggered(HttpConfigurator.java:195)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeUserEventTriggeredNow(ChannelHandlerInvokerUtil.java:75)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeUserEventTriggered(DefaultChannelHandlerInvoker.java:135)\n    at io.netty.channel.AbstractChannelHandlerContext.fireUserEventTriggered(AbstractChannelHandlerContext.java:149)\n    at io.netty.handler.codec.http.HttpClientUpgradeHandler.decode(HttpClientUpgradeHandler.java:213)\n    at io.netty.handler.codec.http.HttpClientUpgradeHandler.decode(HttpClientUpgradeHandler.java:38)\n    at io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:89)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeChannelReadNow(ChannelHandlerInvokerUtil.java:83)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeChannelRead(DefaultChannelHandlerInvoker.java:153)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:157)\n    at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:265)\n    at io.netty.channel.ChannelHandlerInvokerUtil.invokeChannelReadNow(ChannelHandlerInvokerUtil.java:83)\n    at io.netty.channel.DefaultChannelHandlerInvoker.invokeChannelRead(DefaultChannelHandlerInvoker.java:153)\n    at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:157)\n    at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:946)\n    at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:125)\n```\n", "closed": "2015-11-27 05:44:54", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/4", "ttf": 9.000277777777777, "commits": {}, "labels": ["defect"], "title": "Armeria client does not work with HTTP1 servers when using upgrade."}, {"created": "2020-03-17 19:37:31", "user": "sdual", "body": "I'm attempting to set the timeout as the following code. But a timeout seems not to work properly. Even if a request takes longer than the specified timeout, the server does not terminate it.\r\n\r\nIs this a bug, or is my setting wrong?\r\n\r\n```java\r\n@Get(\"/hello\")\r\n public HttpResponse hello(ServiceRequestContext ctx, QueryParams params) {\r\n   ctx.setRequestTimeoutAfterMillis(timeout);\r\n\r\n   // do something.\r\n\r\n   return HttpResponse.of(HttpStatus.OK, MediaType.PLAIN_TEXT_UTF_8, \"OK\");\r\n }\r\n ```", "closed": "2020-03-18 06:52:58", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2600", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["not a bug", "question"], "title": "Timeout not working"}, {"created": "2020-02-24 06:18:30", "user": "JunoJunho", "body": "Current `ofDefault` method in `CircuitBreakerMapping` uses `KeyedCircuitBreakerMapping.defaultMapping`, which is `CircuitBreaker.of` method with empty name, but in some case, there is a need to give circuitBreaker name on this.\r\n\r\nHow about adding override method for this?", "closed": "2020-03-17 09:49:00", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2527", "ttf": 22.00027777777778, "commits": {}, "labels": ["not a bug"], "title": "Adding circuitBreaker name on into CircuitBreakerMapping"}, {"created": "2020-02-19 13:12:07", "commits": {"56321a61ce7f7dd6064ff7b29ebc19d44008bce3": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "changesInPackagesSPOON": [], "closed": "2020-02-24 04:02:59", "filteredCommits": [], "commitsDetails": [{"nameRev": "56321a61ce7f7dd6064ff7b29ebc19d44008bce3 tags/armeria-0.98.3~7", "commitMessage": "Allow `RequestContextExporter` to export an `AttributeKey` with\u2026 (#2521)\n\n\u2026different aliases\r\n\r\nMotivation:\r\nWhen a user tries to export an attribute with different aliases, the later one will be ignored.\r\nFor example:\r\n```xml\r\n<export>attrs.request_id:com.example.Context#KEY:com.example.ContextRequestIdString</export>\r\n<export>attrs.trace_id:com.example.Context#KEY:com.example.ContextTraceIdString</export>\r\n```\r\nThe `attrs.trace_id` is ignored and only the `attrs.request_id` is output.\r\nBecause the `ExportEntry` overrides `equals` that only compares `ExportEntry.key`. \r\nWhen it is added to `RequestContextExporterBuilder.attrs`, the later `ExportEntry` is ignored.\r\n\r\nModifications:\r\n- Change `ExportEntry.equals` to compare `key` and `exportKey`\r\n\r\nResult:\r\nYou can now export an `Attribute` with different aliases.\r\nFixes: The second issue in #2513", "commitParents": ["dd1f83aa761d474327c1d0d9b64afcb3def1b6e4"], "spoonStatsSkippedReason": "", "commitHash": "56321a61ce7f7dd6064ff7b29ebc19d44008bce3", "authoredDateTime": "2020-02-24 12:55:03", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 2, "deletions": 1, "lines": 3, "filePath": "logback/src/test/resources/com/linecorp/armeria/common/logback/testXmlConfig.xml"}, {"insertions": 2, "deletions": 2, "lines": 4, "filePath": "logback/src/test/java/com/linecorp/armeria/common/logback/{CustomValueStringifier.java => CustomObjectValueStringifier.java}"}, {"insertions": 3, "deletions": 2, "lines": 5, "filePath": "core/src/main/java/com/linecorp/armeria/common/logging/RequestContextExporter.java"}, {"insertions": 15, "deletions": 10, "lines": 25, "filePath": "logback/src/test/java/com/linecorp/armeria/common/logback/RequestContextExportingAppenderTest.java"}, {"insertions": 36, "deletions": 0, "lines": 36, "filePath": "logback/src/test/java/com/linecorp/armeria/common/logback/CustomObject.java"}, {"insertions": 18, "deletions": 0, "lines": 18, "filePath": "core/src/test/java/com/linecorp/armeria/common/logging/RequestContextExporterTest.java"}, {"insertions": 4, "deletions": 9, "lines": 13, "filePath": "logback/src/test/java/com/linecorp/armeria/common/logback/{CustomValue.java => CustomObjectNameStringifier.java}"}], "commitDateTime": "2020-02-24 12:55:03", "commitUser": "trustin", "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.CustomObject"}], "spoonFilePath": "CustomObject.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.CustomValue"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.CustomObjectNameStringifier.apply(com.linecorp.armeria.common.logback.CustomObject)"}, {"UPD": 1, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 1, "spoonMethodName": "com.linecorp.armeria.common.logback.CustomValue.toString()"}], "spoonFilePath": "CustomObjectNameStringifier.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.RequestContextExporterTest.shouldExportDifferentAliasOnSameKey()"}], "spoonFilePath": "RequestContextExporterTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.RequestContextExporter.ExportEntry.equals(java.lang.Object)"}, {"UPD": 0, "TOT": 2, "MOV": 1, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logging.RequestContextExporter.ExportEntry.hashCode()"}], "spoonFilePath": "RequestContextExporter.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.CustomValueStringifier"}, {"UPD": 1, "TOT": 1, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.CustomValueStringifier.apply(com.linecorp.armeria.common.logback.CustomValue)"}], "spoonFilePath": "CustomObjectValueStringifier.java"}, {"spoonMethods": [{"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.newServiceContext(java.lang.String,java.lang.String)"}, {"UPD": 9, "TOT": 12, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.testServiceContextWithFullLogs()"}, {"UPD": 0, "TOT": 1, "MOV": 0, "INS": 1, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.testXmlConfig()"}, {"UPD": 2, "TOT": 2, "MOV": 0, "INS": 0, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.newClientContext(java.lang.String,java.lang.String)"}, {"UPD": 9, "TOT": 12, "MOV": 1, "INS": 2, "DEL": 0, "spoonMethodName": "com.linecorp.armeria.common.logback.RequestContextExportingAppenderTest.testClientContextWithFullLogs()"}], "spoonFilePath": "RequestContextExportingAppenderTest.java"}]}], "url": "https://github.com/line/armeria/issues/2513", "ttf": 4.000277777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "`RequestContextExporter` does not work with `AttributeKey` created with `newInstance()`", "statsSkippedReason": "", "user": "trustin", "changesInPackagesGIT": [], "spoonStatsSummary": {"UPD": 0, "spoonMethodsChanged": 0, "TOT": 0, "MOV": 0, "INS": 0, "DEL": 0, "spoonFilesChanged": 0}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "Reported by @andrewoma:\r\n\r\n> it seems you have to create your key in the form of\r\n> ```\r\n> AttributeKey.valueOf(Context.class, \"FOO\")\r\n> ```\r\n> The `AttributeKey.newInstance(Context.class)` form isn't supported and that took me quite some debugging to realise\r\n\r\n(in `RequestContextExporter`)\r\n", "labels": ["not a bug"]}, {"created": "2020-02-05 11:04:01", "user": "ikhoon", "body": "After uploading Armeria artifacts by `./gradlew publish`, I couldn't download the BOM.\r\n\r\nWhen upgrading Armeria version to `0.97.1-SNAPSHOT` in Central Dogma with updated Gradle script. It could not download the BOM.\r\n~https://packages.atlassian.com/content/groups/public/com/linecorp/armeria/armeria-bom/0.97.1-SNAPSHOT/~ (improper proper link)\r\n\r\nhttps://oss.sonatype.org/content/repositories/snapshots/com/linecorp/armeria/armeria-bom/0.97.1-SNAPSHOT/maven-metadata.xml\r\n\r\nWhen I upgrade Armeria version in other project, it was no problem.\r\n```\r\nFAILURE: Build failed with an exception.\r\n\r\n* Where:\r\nScript '/Users/ikhun/src/centraldogma/gradle/scripts/lib/common-dependencies.gradle' line: 66\r\n\r\n* What went wrong:\r\nA problem occurred evaluating script.\r\n> Could not resolve all dependencies for configuration ':detachedConfiguration1'.\r\n   > Could not find com.linecorp.armeria:armeria-bom:0.97.1-SNAPSHOT.\r\n     Searched in the following locations:\r\n       - https://repo.maven.apache.org/maven2/com/linecorp/armeria/armeria-bom/0.97.1-SNAPSHOT/maven-metadata.xml\r\n       - https://repo.maven.apache.org/maven2/com/linecorp/armeria/armeria-bom/0.97.1-SNAPSHOT/armeria-bom-0.97.1-SNAPSHOT.pom\r\n       - https://jcenter.bintray.com/com/linecorp/armeria/armeria-bom/0.97.1-SNAPSHOT/maven-metadata.xml\r\n       - https://jcenter.bintray.com/com/linecorp/armeria/armeria-bom/0.97.1-SNAPSHOT/armeria-bom-0.97.1-SNAPSHOT.pom\r\n     Required by:\r\n         project :\r\n```\r\n\r\n", "closed": "2020-02-06 02:56:12", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2455", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["not a bug"], "title": "Gradle task fail to download `BOM`"}, {"created": "2019-12-13 13:22:23", "user": "andrey-tpt", "body": "Hi guys,\r\n\r\nCould be red herring but I was playing with Armeria 0.97 a bit (like it was recommended in https://github.com/line/armeria/issues/2319). It looks like that that I can't stop a server with single gRPC service, line (1) from the code below never returns. \r\n\r\n```java\r\nServerBuilder sb = new ServerBuilder();\r\n    Server server =\r\n        sb.service(new GrpcServiceBuilder().addService(new PingService()).build())\r\n            .port(1234, SessionProtocol.HTTP).build();\r\n\r\n    CompletableFuture startFuture = server.start();\r\n    startFuture.join();\r\n\r\n    CompletableFuture stopFuture = server.stop();\r\n    stopFuture.join(); //  (1)\r\n```\r\n\r\nThe same code worked fine in 0.88. \r\n\r\nSincerely,\r\nAndrey\r\n\r\nPS. The test is executed from IntelliJ Idea 2019.2 on openjdk 12.0.2+10", "closed": "2020-02-18 04:42:39", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2324", "ttf": 66.00027777777778, "commits": {}, "labels": ["not a bug"], "title": "Cannot stop server with gRPC service in 0.97"}, {"created": "2019-12-12 16:09:39", "user": "andrey-tpt", "body": "Hi guys,\r\n\r\nFound a small discrepancy (unless I'm doing something wrong), when I tested Armeria gRPC client (0.88). StatusRuntimeException/UNAVAILABLE is returned if I send a request to a closed port via pure gRPC client (1.21), however Armeria client in this case returns StatusRuntimeException/UNKNOWN. \r\n\r\nThis looks misleading - the service is clearly unavailable on the closed port. \r\n\r\nSincerely,\r\nAndrey", "closed": "2020-01-30 04:04:33", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2319", "ttf": 48.000277777777775, "commits": {}, "labels": ["not a bug"], "title": "Status.UNKNOWN in attempt to connect to a closed port"}, {"created": "2019-12-12 09:36:11", "user": "trustin", "body": "For example, in `armeria-0.97.0.jar/META-INF/com.linecorp.armeria.versions.properties`:\r\n\r\n```\r\n#Fri Dec 06 18:06:07 KST 2019\r\narmeria.longCommitHash=d5ba7e73cd6d4df72e6ed55fe9153b6f7a7f19e9\r\narmeria.commitDate=2019-12-06 17\\:23\\:34 +0900\r\narmeria.shortCommitHash=d5ba7e73c\r\narmeria.version=0.97.0\r\narmeria.repoStatus=dirty\r\n```", "closed": "2019-12-12 09:40:13", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2317", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["cleanup", "not a bug"], "title": "Release JARs' `versions.properties` file has `repoStatus=dirty`."}, {"created": "2019-10-06 16:40:59", "user": "ikhoon", "body": "While I was testing about `JsonTextSequences`, `RxJava` `Flowable` didn't get notified on `cancel` signal when `ResponseConversionUtil` fail to covert an `Object` into `HttpData` in the following test case.\r\nhttps://github.com/line/armeria/blob/d27fed6e49c12ebc7e4719af89e841f9ae24e857/core/src/test/java/com/linecorp/armeria/server/streaming/JsonTextSequencesTest.java#L62-L67\r\n\r\nhttps://github.com/line/armeria/blob/a1ede9e89e56c4394c2740fd9bf232b5b16333b1/core/src/main/java/com/linecorp/armeria/internal/ResponseConversionUtil.java#L214-L215\r\n\r\n`ResponseConversionUtil` delegate the `cancel` to `StreamWriter` but `StreamWriter` doesn't cancel it. Because the subscription of `StreamWriter` is `null`. I think the error occurred before the initialization of the `StreamWriter` subscription.\r\nhttps://github.com/line/armeria/blob/9d4d5864d979bfb888131ce88aa64ec4c75965f5/core/src/main/java/com/linecorp/armeria/server/HttpServerHandler.java#L444  \r\n\r\n\r\n\r\n", "closed": "2019-10-07 02:44:56", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/2160", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["not a bug"], "title": "Buffer leak when `ResponseConversionUtil` fail to convert to `HttpData` with RxJava `Flowable`"}, {"created": "2019-07-11 04:16:30", "user": "sh1n1chi8acker", "body": "I will use armeria-bom in 0.88.0, but armeria-testing version is 0.84.0 in the BOM.\r\n\r\n```\r\n[INFO]   com.linecorp.armeria:armeria ........................ 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-grpc ................... 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-jetty .................. 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-kafka .................. 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-logback ................ 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-retrofit2 .............. 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-rxjava ................. 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-saml ................... 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-spring-boot-actuator-autoconfigure ...\r\n[INFO]                                                         0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-spring-boot-actuator-starter ...\r\n[INFO]                                                         0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-spring-boot-autoconfigure ...\r\n[INFO]                                                         0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-spring-boot-starter .... 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-spring-boot-webflux-autoconfigure ...\r\n[INFO]                                                         0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-spring-boot-webflux-starter ...\r\n[INFO]                                                         0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-spring-boot1-autoconfigure ...\r\n[INFO]                                                         0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-spring-boot1-starter ... 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-testing ................ 0.83.0 -> 0.84.0\r\n[INFO]   com.linecorp.armeria:armeria-thrift ................. 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-thrift0.9 .............. 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-tomcat ................. 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-tomcat8.0 .............. 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-tomcat8.5 .............. 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-zipkin ................. 0.83.0 -> 0.88.0\r\n[INFO]   com.linecorp.armeria:armeria-zookeeper .............. 0.83.0 -> 0.88.0\r\n[INFO]\r\n```", "closed": "2019-07-11 05:13:34", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1894", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["not a bug"], "title": "Unmatch armeria-testing version in armeria-bom"}, {"created": "2019-05-21 02:30:49", "user": "JunoJunho", "body": "https://line.github.io/armeria/client-retry.html\r\n\r\nIn above link, I do not get any difference between two code chunks except import statements.\r\n\r\nIf you have any other intention, please tell me and let me fix.", "closed": "2019-06-08 06:45:15", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1781", "ttf": 18.00027777777778, "commits": {}, "labels": ["not a bug"], "title": "Does documentation for RetryClient loss some detail?"}, {"created": "2019-04-02 07:34:11", "user": "eonezhang", "body": "Armeria Client no respond encountered, would you please help look into this issue.\r\nArmeria version is `0.81.0`\r\n\r\n## Background:\r\n\r\n### Service Provider: Thrift Based Service\r\n\r\nservice registration as below:\r\n\r\n```java\r\npublic static ThriftServiceRegistrationBean serviceRegistrationBean(Object serviceIfaceBean) {\r\n    String path = null;\r\n    Class<?> parent = serviceIfaceBean.getClass();\r\n    for (Class<?> iface : parent.getInterfaces()) {\r\n        if (iface.getName().endsWith(\"Iface\")) {\r\n            path = iface.getName();\r\n            break;\r\n        }\r\n    }\r\n\r\n    requireNonNull(path, \"Thrift Service must implement Iface or AsyncIface\");\r\n\r\n    return new ThriftServiceRegistrationBean()\r\n            .setServiceName(serviceIfaceBean.getClass().getName())\r\n            .setService(THttpService.of(serviceIfaceBean))\r\n            .setPath(\"/\" + path)\r\n            .setDecorators(LoggingService.newDecorator(), ServerAuthCheckDecorator.newDecorator());\r\n}\r\n```\r\n\r\n### Client:\r\nclient code as below:\r\n\r\n```java\r\npublic static <T> T generateClient(String endpoint, Class<T> clazz) {\r\n    endpoint = String.format(\"tbinary+h2c://%s/%s\", endpoint, clazz.getName());\r\n    return build(endpoint, clazz);\r\n}\r\n\r\nprivate static <T> T build(String endpoint, Class<T> clazz) {\r\n    ClientBuilder builder = new ClientBuilder(endpoint);\r\n    builder.decorator(ClientAuthCheckDecorator.newDecorator());\r\n    return builder.build(clazz);\r\n}\r\n```\r\n\r\n## The Problem\r\n\r\nwhen `service A` call `service B`, by the help of the logging, we found that, the `request` didn't reach up to `service B`, and `the thread` was hung up, client is waiting forever.\r\nhere is the thread dump for the hung up thread.\r\n```\r\n\"armeria-common-worker-epoll-2-2\" #79 daemon prio=5 os_prio=0 tid=0x00007fad0c006000 nid=0x5f waiting on condition [0x00007facfa6ea000]\r\n   java.lang.Thread.State: WAITING (parking)\r\n\tat sun.misc.Unsafe.park(Native Method)\r\n\t- parking to wait for  <0x00000000f252edf0> (a java.util.concurrent.CompletableFuture$Signaller)\r\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\r\n\tat java.util.concurrent.CompletableFuture$Signaller.block(CompletableFuture.java:1693)\r\n\tat java.util.concurrent.ForkJoinPool.managedBlock(ForkJoinPool.java:3323)\r\n\tat java.util.concurrent.CompletableFuture.waitingGet(CompletableFuture.java:1729)\r\n\tat java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)\r\n\tat com.linecorp.armeria.client.thrift.THttpClientInvocationHandler.invokeClientMethod(THttpClientInvocationHandler.java:135)\r\n\tat com.linecorp.armeria.client.thrift.THttpClientInvocationHandler.invoke(THttpClientInvocationHandler.java:85)\r\n\tat com.sun.proxy.$Proxy68.getOrgThirdPartResConfig(Unknown Source)\r\n\tat com.hnair.phoenix.mgmt.services.project.domain.service.impl.ApplicationServiceImpl.sendCreatApplicationEvent(ApplicationServiceImpl.java:129)\r\n\tat com.hnair.phoenix.mgmt.services.project.domain.service.impl.ApplicationServiceImpl.createApplication(ApplicationServiceImpl.java:110)\r\n\tat com.hnair.phoenix.mgmt.services.project.domain.service.impl.ApplicationServiceImpl$$FastClassBySpringCGLIB$$94c5215e.invoke(<generated>)\r\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)\r\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:684)\r\n\tat com.hnair.phoenix.mgmt.services.project.domain.service.impl.ApplicationServiceImpl$$EnhancerBySpringCGLIB$$49a6a3f4.createApplication(<generated>)\r\n\tat com.hnair.phoenix.mgmt.services.project.interfaces.facade.impl.ApplicationServiceFacadeImpl.createApplication(ApplicationServiceFacadeImpl.java:54)\r\n\tat com.hnair.phoenix.mgmt.services.project.api.ApplicationServiceAsyncApi.createApplication(ApplicationServiceAsyncApi.java:68)\r\n\tat com.hnair.phoenix.services.project.v1.ApplicationService$AsyncProcessor$createApplication.start(ApplicationService.java:1342)\r\n\tat com.hnair.phoenix.services.project.v1.ApplicationService$AsyncProcessor$createApplication.start(ApplicationService.java:1280)\r\n\tat com.linecorp.armeria.server.thrift.ThriftCallService.invokeAsynchronously(ThriftCallService.java:162)\r\n\tat com.linecorp.armeria.server.thrift.ThriftCallService.invoke(ThriftCallService.java:145)\r\n\tat com.linecorp.armeria.server.thrift.ThriftCallService.serve(ThriftCallService.java:129)\r\n\tat com.linecorp.armeria.server.thrift.ThriftCallService.serve(ThriftCallService.java:52)\r\n\tat com.linecorp.armeria.server.thrift.THttpService.invoke(THttpService.java:605)\r\n\tat com.linecorp.armeria.server.thrift.THttpService.decodeAndInvoke(THttpService.java:580)\r\n\tat com.linecorp.armeria.server.thrift.THttpService.lambda$doPost$3(THttpService.java:434)\r\n\tat com.linecorp.armeria.server.thrift.THttpService$$Lambda$631/883285835.apply(Unknown Source)\r\n\tat java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n\tat java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797)\r\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:474)\r\n\tat java.util.concurrent.CompletableFuture.complete(CompletableFuture.java:1962)\r\n\tat com.linecorp.armeria.common.HttpMessageAggregator.apply(HttpMessageAggregator.java:151)\r\n\tat com.linecorp.armeria.common.HttpMessageAggregator.apply(HttpMessageAggregator.java:36)\r\n\tat java.util.concurrent.CompletableFuture.uniHandle(CompletableFuture.java:822)\r\n\tat java.util.concurrent.CompletableFuture$UniHandle.tryFire(CompletableFuture.java:797)\r\n\tat java.util.concurrent.CompletableFuture$Completion.run(CompletableFuture.java:442)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)\r\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:333)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.lang.Thread.run(Thread.java:748)\r\n```\r\n\r\n## The current workaround\r\nAt the moment, we setup the timeout for the client as following.\r\nIt's curious that why the request didn't send out, and no exception occured, but the thread is still waiting for the response.\r\n\r\n```\r\nprivate static <T> T build(String endpoint, Class<T> clazz) {\r\n    ClientBuilder builder = new ClientBuilder(endpoint);\r\n    builder.defaultWriteTimeoutMillis(1000L)\r\n        .defaultResponseTimeoutMillis(5000)\r\n        .decorator(ClientAuthCheckDecorator.newDecorator());\r\n    return builder.build(clazz);\r\n}       \r\n```", "closed": "2019-04-11 09:01:26", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1693", "ttf": 9.000277777777777, "commits": {}, "labels": ["not a bug"], "title": "Armeria Client no respond encountered"}, {"created": "2019-03-21 13:35:53", "user": "jorgheymans", "body": "over in zipkin, it seems that the switch to Armeria had an impact on server shutdown times, see\r\nhttps://github.com/openzipkin/zipkin/issues/2454 .", "closed": "2019-03-22 08:30:13", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1672", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["not a bug"], "title": "long shutdown time of armeriaServerBean"}, {"created": "2018-12-08 13:23:23", "user": "trustin", "body": "Armeria currently suspends network reads when more than 128KiB are unconsumed by the stream subscribers. (See: [InboundTrafficController](https://github.com/line/armeria/blob/armeria-0.76.2/core/src/main/java/com/linecorp/armeria/internal/InboundTrafficController.java))\r\n\r\nHowever, we should not disable network reads at all in an HTTP/2 connection because HTTP/2 has its own traffic control mechanism (`WINDOW_UPDATE` frame. See: [The Flow-Control Window](https://http2.github.io/http2-spec/#rfc.section.6.9.1)) Actually, arbitrarily disabling network reads can cause an unexpected permanent stall (i.e. dead lock) of an HTTP/2 connection because it can prevent the HTTP/2 implementation from reading a `WINDOW_UPDATE` frame.\r\n\r\nTherefore, we should use `InboundTrafficController` only for HTTP/1 connections. We may also have some opportunity to gain additional performance thanks to this because 1) we do not need to suspend network reads and 2) we do not need to count the number of pending inbound bytes.", "closed": "2018-12-11 03:12:55", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1487", "ttf": 2.000277777777778, "commits": {}, "labels": ["not a bug"], "title": "Do not suspend network reads in an HTTP/2 connection."}, {"created": "2018-11-14 06:19:55", "user": "anuraaga", "body": "In a service that is scraped by prometheus using `new LoggingServiceBuilder().build()`, which enables logging of error responses, a large number of scrapes get logged as errors - creates quite a lot of spam. Perhaps this is a problem with prometheus's golang HTTP client, but wonder if there could be something going wrong in Armeria. The metrics are all available in prometheus so the scrape seems to be succeeding fine.\r\n\r\nLog errors are usually Connection reset by peer\r\n```\r\n[h1://scrubbed:8080//internal/metrics#GET] Response: {startTime=2018-11-14T04:16:01.624Z(1542168961624), length=58903B, duration=1039\u00b5s(1039150ns), cause=io.netty.channel.unix.Errors$NativeIoException: writevAddresses(..) failed: Connection reset by peer, headers=[:status=200, content-type=text/plain; version=0.0.4; charset=utf-8, content-length=58903]}\r\n```\r\n\r\nUsing armeria's default `PrometheusExpositionService`.", "closed": "2018-11-29 08:24:56", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1437", "ttf": 15.000277777777777, "commits": {}, "labels": ["not a bug"], "title": "Error logged for blackbox_exporter scrape"}, {"created": "2018-07-23 05:03:14", "user": "trustin", "body": "```\r\ncom.linecorp.armeria.server.tomcat.ManagedTomcatServiceTest > echoPostWithEmptyBody FAILED\r\n    org.junit.ComparisonFailure: expected:<\"HTTP/1.1 [200 OK]\"> but was:<\"HTTP/1.1 [503 Service Unavailable]\">\r\n```", "closed": "2018-08-09 03:39:35", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1301", "ttf": 16.00027777777778, "commits": {}, "labels": ["not a bug"], "title": "Intermittent test failure: ManagedTomcatServiceTest.echoPostWithEmptyBody()"}, {"created": "2018-04-09 09:23:31", "user": "trustin", "body": "Let's say we created a `GrpcService`:\r\n\r\n```java\r\nGrpcService service = new GrpcServiceBuilder()...build();\r\nServerBuilder sb = new ServerBuilder();\r\n// This works.\r\nsb.service(service);\r\n// This does not work because it's not a `ServiceWithPathMappings` anymore.\r\nsb.service(service.decorate(...));\r\n```\r\n\r\nTo fix this issue, we need to remove the type constraint of `ServerBuilder.service(ServiceWithPathMappings)` and do runtime validation only.\r\n\r\nWhat do you think?\r\n/cc @anuraaga ", "closed": "2018-04-10 03:41:15", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1137", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["not a bug"], "title": "ServiceWithPathMappings is hard to decorate"}, {"created": "2018-03-27 10:38:19", "user": "techno", "body": "We are using Armeria with Spring-boot 2 and Gradle.\r\n\r\nSince spring-boot 2.0, spring-boot gradle plugin no longer add group name to the name of jar.\r\nhttps://github.com/spring-projects/spring-boot/issues/10778\r\n\r\nAs a result, conflict zipkin artifacts used by Armeria in jar.\r\nJar file contains two `BOOT-INF/lib/zipkin-2.5.1.jar` in our project.\r\nAlso application booting up failed sometime.... (result depends on build env)\r\n\r\n```\r\n2018-03-27 15:45:37.940 ERROR 18459 --- [           main] o.s.boot.SpringApplication               : Application run failed\r\njava.lang.IllegalStateException: Error processing condition on com.linecorp.armeria.spring.ArmeriaAutoConfiguration\r\n    at org.springframework.boot.autoconfigure.condition.SpringBootCondition.matches(SpringBootCondition.java:64)\r\n...\r\n    at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51)\r\nCaused by: java.lang.TypeNotPresentException: Type zipkin2.Span not present\r\n```\r\n\r\nLooks Armeria depends `io.zipkin.java:zipkin` which depends on `io.zipkin.zipkin2:zipkin`.\r\nHowever, `io.zipkin.java:zipkin` seems just a alias artifact of zipkin2.\r\nIf armeria depends on `io.zipkin.zipkin2:zipkin`, this issue might be resolved.\r\n\r\n```\r\n|    +--- com.linecorp.armeria:armeria-zipkin-shaded:0.59.0\r\n|    |    +--- com.linecorp.armeria:armeria-shaded:0.59.0 (*)\r\n|    |    +--- com.google.code.findbugs:jsr305:3.0.2\r\n|    |    +--- io.zipkin.brave:brave:4.17.2\r\n|    |    |    +--- io.zipkin.zipkin2:zipkin:2.5.1\r\n|    |    |    \\--- io.zipkin.reporter2:zipkin-reporter:2.4.1\r\n|    |    |         \\--- io.zipkin.zipkin2:zipkin:2.5.1\r\n|    |    +--- io.zipkin.java:zipkin:2.5.1\r\n|    |    |    \\--- io.zipkin.zipkin2:zipkin:2.5.1\r\n|    |    \\--- org.slf4j:slf4j-api:1.7.25\r\n```", "closed": "2018-04-03 07:18:29", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/1104", "ttf": 6.000277777777778, "commits": {}, "labels": ["not a bug"], "title": "Zipkin dependency issue with spring-boot2"}, {"created": "2018-03-01 17:14:04", "commits": {"ae09e64168180f9a932555c01cdda7525d0e4607": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2018-06-07 05:08:10", "filteredCommits": [], "commitsDetails": [{"nameRev": "ae09e64168180f9a932555c01cdda7525d0e4607 tags/armeria-0.59.0~2", "commitMessage": "Always call .join() on Server start futures in examples (#1068)\n\nRelated: #1042\r\n\r\nMotivation:\r\n\r\nA user who is not used to asynchronous nature of our API may be confused\r\nwhen a server fails to start up, because the failure is only notified\r\nvia the returned CompletableFuture.\r\n\r\nModifications:\r\n\r\nUpdate all examples that calls Server.start() also call join() against\r\nthe returned future.\r\n\r\nResult:\r\n\r\n- Hopefully less confusing", "commitParents": ["158a9c403d86926e67d5f77ad7edb072b4d4666a"], "spoonStatsSkippedReason": "", "commitHash": "ae09e64168180f9a932555c01cdda7525d0e4607", "authoredDateTime": "2018-03-09 10:46:36", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 3, "deletions": 1, "lines": 4, "filePath": "site/src/sphinx/server-basics.rst"}], "commitDateTime": "2018-03-09 10:46:36", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/1042", "ttf": 97.00027777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "Exception should be thrown when the port collides.", "statsSkippedReason": "", "user": "kishida", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "The code does not throw any `Exception`, not put any logs.\r\n```\r\nServer server1 = new ServerBuilder()\r\n        .port(8080, SessionProtocol.HTTP)\r\n        .service(\"/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK,\r\n                MediaType.PLAIN_TEXT_UTF_8, \"Hello!\"))\r\n        .build();\r\nserver1.start();\r\nServer server2 = new ServerBuilder()\r\n        .port(8080, SessionProtocol.HTTP)\r\n        .service(\"/\", (ctx, req) -> HttpResponse.of(HttpStatus.OK,\r\n                MediaType.PLAIN_TEXT_UTF_8, \"Great!!\"))\r\n        .build();\r\nserver2.start();\r\n```\r\nIt will make hard to find a mistake especially when starting to use Armeria.", "labels": ["not a bug"]}, {"created": "2017-11-16 11:14:38", "user": "trustin", "body": "```\r\nZooKeeperRegistrationTest.testConnectionRecovery: FAILURE\r\n---------------------------------------------------------\r\n09:51:56.248 [Test worker-EventThread] ERROR org.apache.zookeeper.ClientCnxn - Caught unexpected throwable\r\ncom.linecorp.armeria.common.zookeeper.ZooKeeperException: Failed to notify ZooKeeper listener\r\n\tat com.linecorp.armeria.common.zookeeper.ZooKeeperConnector.notifyChange(ZooKeeperConnector.java:186)\r\n\tat com.linecorp.armeria.common.zookeeper.ZooKeeperConnector.access$600(ZooKeeperConnector.java:48)\r\n\tat com.linecorp.armeria.common.zookeeper.ZooKeeperConnector$ZkWatcher.processResult(ZooKeeperConnector.java:266)\r\n\tat org.apache.zookeeper.ClientCnxn$EventThread.processEvent(ClientCnxn.java:554)\r\n\tat org.apache.zookeeper.ClientCnxn$EventThread.run(ClientCnxn.java:505)\r\nCaused by: com.linecorp.armeria.common.zookeeper.ZooKeeperException: org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /testEndPoints/127.0.0.1_61351\r\n\tat com.linecorp.armeria.common.zookeeper.ZooKeeperConnector.lambda$notifyChange$0(ZooKeeperConnector.java:177)\r\n\tat java.util.ArrayList.forEach(ArrayList.java:1249)\r\n\tat com.linecorp.armeria.common.zookeeper.ZooKeeperConnector.notifyChange(ZooKeeperConnector.java:171)\r\n\t... 4 common frames omitted\r\nCaused by: org.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /testEndPoints/127.0.0.1_61351\r\n\tat org.apache.zookeeper.KeeperException.create(KeeperException.java:111)\r\n\tat org.apache.zookeeper.KeeperException.create(KeeperException.java:51)\r\n\tat org.apache.zookeeper.ZooKeeper.getData(ZooKeeper.java:1212)\r\n\tat org.apache.zookeeper.ZooKeeper.getData(ZooKeeper.java:1241)\r\n\tat com.linecorp.armeria.common.zookeeper.ZooKeeperConnector.lambda$notifyChange$0(ZooKeeperConnector.java:174)\r\n\t... 6 common frames omitted\r\n09:51:58.107 [Test worker-SendThread(127.0.0.1:43207)] WARN  org.apache.zookeeper.ClientCnxn - Unable to reconnect to ZooKeeper service, session 0x15fc43dd6170009 has expired\r\ncom.linecorp.armeria.server.zookeeper.ZooKeeperRegistrationTest > testConnectionRecovery FAILED\r\n    java.lang.AssertionError: \r\n    Expecting:\r\n     <0>\r\n    to be greater than:\r\n     <0> \r\n        at com.linecorp.armeria.server.zookeeper.ZooKeeperRegistrationTest.testConnectionRecovery(ZooKeeperRegistrationTest.java:149)\r\n```", "closed": "2017-11-16 11:28:46", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/838", "ttf": 0.0002777777777777778, "commits": {}, "labels": ["not a bug"], "title": "Flaky test: ZooKeeperRegistrationTest.testConnectionRecovery"}, {"created": "2017-08-30 08:45:40", "user": "sunning9001", "body": "I sent 10 requests simultaneously, nine of which were executed successfully, but one of them returned immediately before the logic code was executed.\r\n\r\nI set the timeout timeout of 30 seconds, but within one second, one of the requests returned immediately. My logical code was not yet running\r\n\r\n1. The first black font section is the response received from one of the requests\r\n\r\n2.The second black font part is the log for immediate response\r\n\r\n\r\nCould you please help me to see what might have caused this ???  @minwoox @anuraaga \r\n\r\n\r\n\r\nthe  client  side    log:\r\n\r\n2017-08-23 09:26:31.927  INFO 19313 --- [orker-epoll-3-3] c.l.a.client.logging.LoggingClient       : [id: 0x63f1ab03, L:/192.168.1.25:40158 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Request: {startTime=2017-08-23T01:26:31.922Z(1503451591922), length=67B, duration=3728\u00b5s(3728273ns), scheme=gproto+h2c, host=192.168.1.25, headers=[:method=POST, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, :authority=192.168.1.25:8181, :scheme=http, user-agent=armeria/0.52.0, :path=/rpc/MarketChargeService/marketCharge], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n1 ------------------------\r\n2017-08-23 09:26:31.929  INFO 19313 --- [orker-epoll-3-1] c.l.a.client.logging.LoggingClient       : [id: 0x27ae5be7, L:/192.168.1.25:40156 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Request: {startTime=2017-08-23T01:26:31.922Z(1503451591922), length=66B, duration=6532\u00b5s(6532253ns), scheme=gproto+h2c, host=192.168.1.25, headers=[:method=POST, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, :authority=192.168.1.25:8181, :scheme=http, user-agent=armeria/0.52.0, :path=/rpc/BalanceFreezeService/BalanceFreeze], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=BalanceFreezeService/BalanceFreeze, params=[]}}\r\n2--------------------------------\r\n2017-08-23 09:26:31.930  INFO 19313 --- [rker-epoll-3-10] c.l.a.client.logging.LoggingClient       : [id: 0xed3b6cff, L:/192.168.1.25:40165 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Request: {startTime=2017-08-23T01:26:31.925Z(1503451591925), length=68B, duration=4557\u00b5s(4557678ns), scheme=gproto+h2c, host=192.168.1.25, headers=[:method=POST, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, :authority=192.168.1.25:8181, :scheme=http, user-agent=armeria/0.52.0, :path=/rpc/BalanceFreezeService/BalanceFreeze], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=BalanceFreezeService/BalanceFreeze, params=[]}}\r\n\r\n3--------------------------------\r\n2017-08-23 09:26:31.930  INFO 19313 --- [orker-epoll-3-2] c.l.a.client.logging.LoggingClient       : [id: 0x162b58b9, L:/192.168.1.25:40157 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Request: {startTime=2017-08-23T01:26:31.925Z(1503451591925), length=67B, duration=4406\u00b5s(4406489ns), scheme=gproto+h2c, host=192.168.1.25, headers=[:method=POST, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, :authority=192.168.1.25:8181, :scheme=http, user-agent=armeria/0.52.0, :path=/rpc/MarketChargeService/marketCharge], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n4--------------------------------\r\n2017-08-23 09:26:31.930  INFO 19313 --- [orker-epoll-3-8] c.l.a.client.logging.LoggingClient       : [id: 0x0b10107e, L:/192.168.1.25:40163 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Request: {startTime=2017-08-23T01:26:31.925Z(1503451591925), length=67B, duration=4493\u00b5s(4493467ns), scheme=gproto+h2c, host=192.168.1.25, headers=[:method=POST, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, :authority=192.168.1.25:8181, :scheme=http, user-agent=armeria/0.52.0, :path=/rpc/BalanceFreezeService/BalanceFreeze], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=BalanceFreezeService/BalanceFreeze, params=[]}}\r\n5--------------------------------\r\n2017-08-23 09:26:31.932  INFO 19313 --- [orker-epoll-3-7] c.l.a.client.logging.LoggingClient       : [id: 0x0c41ec0e, L:/192.168.1.25:40162 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Request: {startTime=2017-08-23T01:26:31.925Z(1503451591925), length=67B, duration=6497\u00b5s(6497804ns), scheme=gproto+h2c, host=192.168.1.25, headers=[:method=POST, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, :authority=192.168.1.25:8181, :scheme=http, user-agent=armeria/0.52.0, :path=/rpc/MarketChargeService/marketCharge], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n\r\n6--------------------------------\r\n2017-08-23 09:26:31.933  INFO 19313 --- [orker-epoll-3-4] c.l.a.client.logging.LoggingClient       : [id: 0x68548a21, L:/192.168.1.25:40159 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Request: {startTime=2017-08-23T01:26:31.925Z(1503451591925), length=67B, duration=7775\u00b5s(7775595ns), scheme=gproto+h2c, host=192.168.1.25, headers=[:method=POST, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, :authority=192.168.1.25:8181, :scheme=http, user-agent=armeria/0.52.0, :path=/rpc/MarketChargeService/marketCharge], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n\r\n7-----------------------------\r\n2017-08-23 09:26:31.933  INFO 19313 --- [orker-epoll-3-5] c.l.a.client.logging.LoggingClient       : [id: 0xa9acd948, L:/192.168.1.25:40160 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Request: {startTime=2017-08-23T01:26:31.926Z(1503451591926), length=67B, duration=7479\u00b5s(7479765ns), scheme=gproto+h2c, host=192.168.1.25, headers=[:method=POST, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, :authority=192.168.1.25:8181, :scheme=http, user-agent=armeria/0.52.0, :path=/rpc/MarketChargeService/marketCharge], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n8----------------------------------\r\n2017-08-23 09:26:31.934  INFO 19313 --- [orker-epoll-3-6] c.l.a.client.logging.LoggingClient       : [id: 0x95f74610, L:/192.168.1.25:40161 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Request: {startTime=2017-08-23T01:26:31.926Z(1503451591926), length=68B, duration=7936\u00b5s(7936793ns), scheme=gproto+h2c, host=192.168.1.25, headers=[:method=POST, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, :authority=192.168.1.25:8181, :scheme=http, user-agent=armeria/0.52.0, :path=/rpc/BalanceFreezeService/BalanceFreeze], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=BalanceFreezeService/BalanceFreeze, params=[]}}\r\n9---------------------------------------------\r\n2017-08-23 09:26:31.936  INFO 19313 --- [orker-epoll-3-9] c.l.a.client.logging.LoggingClient       : [id: 0x2573ca57, L:/192.168.1.25:40164 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Request: {startTime=2017-08-23T01:26:31.928Z(1503451591928), length=67B, duration=7777\u00b5s(7777088ns), scheme=gproto+h2c, host=192.168.1.25, headers=[:method=POST, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, :authority=192.168.1.25:8181, :scheme=http, user-agent=armeria/0.52.0, :path=/rpc/MarketChargeService/marketCharge], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n10----------------------------------------\r\n\r\n\r\n\r\n**2017-08-23 09:26:33.183  INFO 19313 --- [orker-epoll-3-1] c.l.a.client.logging.LoggingClient       : [id: 0x27ae5be7, L:/192.168.1.25:40156 - R:192.168.1.25/192.168.1.25:8181][http://192.168.1.25:8181/rpc/#POST] Response: {startTime=2017-08-23T01:26:33.181Z(1503451593181), length=0B, duration=110\u00b5s(110421ns), headers=[:status=200, content-type=application/grpc+proto, grpc-status=0], content=DefaultRpcResponse{success}}\r\njava.util.concurrent.TimeoutException: io.grpc.StatusRuntimeException: INTERNAL: No value received for unary call\r\n        at com.afis.jzcg.PingAnFunction.balanceFreeze(PingAnFunction.java:128)\r\n        at com.afis.jx.htp.util.FundTransfer$27.get(FundTransfer.java:1750)\r\n        at com.afis.jx.htp.util.FundTransfer$27.get(FundTransfer.java:1743)\r\n        at java.util.concurrent.CompletableFuture$AsyncSupply.run(CompletableFuture.java:1590)\r\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n        at java.lang.Thread.run(Thread.java:745)**\r\n\r\n\r\n\r\nthe  server side log:\r\n\r\n\r\n2017-08-23 09:26:31.924 [DEBUG] [armeria-server-epoll-5-4] c.l.a.internal.Http2GoAwayListener - [id: 0xf4642e1f, L:/192.168.1.25:8181 - R:/192.168.1.25:40159] HTTP/2 upgrade stream removed: CLOSED\r\n2017-08-23 09:26:31.924 [DEBUG] [armeria-server-epoll-5-6] c.l.a.internal.Http2GoAwayListener - [id: 0xe765d8de, L:/192.168.1.25:8181 - R:/192.168.1.25:40161] HTTP/2 upgrade stream removed: CLOSED\r\n2017-08-23 09:26:31.925 [DEBUG] [armeria-server-epoll-5-1] c.l.a.internal.Http2GoAwayListener - [id: 0xb4672d97, L:/192.168.1.25:8181 - R:/192.168.1.25:40156] HTTP/2 upgrade stream removed: CLOSED\r\n2017-08-23 09:26:31.926 [DEBUG] [armeria-server-epoll-5-9] c.l.a.internal.Http2GoAwayListener - [id: 0x75360336, L:/192.168.1.25:8181 - R:/192.168.1.25:40164] HTTP/2 upgrade stream removed: CLOSED\r\n2017-08-23 09:26:31.926 [DEBUG] [armeria-server-epoll-5-8] c.l.a.internal.Http2GoAwayListener - [id: 0x128b3bf1, L:/192.168.1.25:8181 - R:/192.168.1.25:40163] HTTP/2 upgrade stream removed: CLOSED\r\n2017-08-23 09:26:31.926 [DEBUG] [armeria-server-epoll-5-5] c.l.a.internal.Http2GoAwayListener - [id: 0x58e3169b, L:/192.168.1.25:8181 - R:/192.168.1.25:40160] HTTP/2 upgrade stream removed: CLOSED\r\n2017-08-23 09:26:31.927 [DEBUG] [armeria-server-epoll-5-10] c.l.a.internal.Http2GoAwayListener - [id: 0xc6457a94, L:/192.168.1.25:8181 - R:/192.168.1.25:40165] HTTP/2 upgrade stream removed: CLOSED\r\n2017-08-23 09:26:31.926 [DEBUG] [armeria-server-epoll-5-3] c.l.a.internal.Http2GoAwayListener - [id: 0x4f5bac9c, L:/192.168.1.25:8181 - R:/192.168.1.25:40158] HTTP/2 upgrade stream removed: CLOSED\r\n2017-08-23 09:26:31.927 [DEBUG] [armeria-server-epoll-5-7] c.l.a.internal.Http2GoAwayListener - [id: 0xee49da00, L:/192.168.1.25:8181 - R:/192.168.1.25:40162] HTTP/2 upgrade stream removed: CLOSED\r\n2017-08-23 09:26:31.927 [DEBUG] [armeria-server-epoll-5-2] c.l.a.internal.Http2GoAwayListener - [id: 0x7652431f, L:/192.168.1.25:8181 - R:/192.168.1.25:40157] HTTP/2 upgrade stream removed: CLOSED\r\n2017-08-23 09:26:32.056 [INFO ] [armeria-server-epoll-5-1] armeria.services.rpc - [id: 0xb4672d97, L:/192.168.1.25:8181 - R:/192.168.1.25:40156][h2c://afistest25:8181/rpc/BalanceFreezeService/BalanceFreeze#POST] Request: {startTime=2017-08-23T01:26:31.948Z(1503451591948), length=66B, duration=69053\u00b5s(69053619ns), scheme=gproto+h2c, host=afistest25, headers=[:method=POST, :authority=192.168.1.25:8181, :scheme=http, :path=/rpc/BalanceFreezeService/BalanceFreeze, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, user-agent=armeria/0.52.0], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=BalanceFreezeService/BalanceFreeze, params=[]}}\r\n2017-08-23 09:26:32.056 [INFO ] [armeria-server-epoll-5-7] armeria.services.rpc - [id: 0xee49da00, L:/192.168.1.25:8181 - R:/192.168.1.25:40162][h2c://afistest25:8181/rpc/MarketChargeService/marketCharge#POST] Request: {startTime=2017-08-23T01:26:31.948Z(1503451591948), length=67B, duration=65892\u00b5s(65892274ns), scheme=gproto+h2c, host=afistest25, headers=[:method=POST, :authority=192.168.1.25:8181, :scheme=http, :path=/rpc/MarketChargeService/marketCharge, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, user-agent=armeria/0.52.0], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n2017-08-23 09:26:32.056 [INFO ] [armeria-server-epoll-5-2] armeria.services.rpc - [id: 0x7652431f, L:/192.168.1.25:8181 - R:/192.168.1.25:40157][h2c://afistest25:8181/rpc/MarketChargeService/marketCharge#POST] Request: {startTime=2017-08-23T01:26:31.948Z(1503451591948), length=67B, duration=71103\u00b5s(71103886ns), scheme=gproto+h2c, host=afistest25, headers=[:method=POST, :authority=192.168.1.25:8181, :scheme=http, :path=/rpc/MarketChargeService/marketCharge, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, user-agent=armeria/0.52.0], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n2017-08-23 09:26:32.056 [INFO ] [armeria-server-epoll-5-4] armeria.services.rpc - [id: 0xf4642e1f, L:/192.168.1.25:8181 - R:/192.168.1.25:40159][h2c://afistest25:8181/rpc/MarketChargeService/marketCharge#POST] Request: {startTime=2017-08-23T01:26:31.948Z(1503451591948), length=67B, duration=68835\u00b5s(68835603ns), scheme=gproto+h2c, host=afistest25, headers=[:method=POST, :authority=192.168.1.25:8181, :scheme=http, :path=/rpc/MarketChargeService/marketCharge, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, user-agent=armeria/0.52.0], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n2017-08-23 09:26:32.056 [INFO ] [armeria-server-epoll-5-8] armeria.services.rpc - [id: 0x128b3bf1, L:/192.168.1.25:8181 - R:/192.168.1.25:40163][h2c://afistest25:8181/rpc/BalanceFreezeService/BalanceFreeze#POST] Request: {startTime=2017-08-23T01:26:31.948Z(1503451591948), length=67B, duration=63811\u00b5s(63811621ns), scheme=gproto+h2c, host=afistest25, headers=[:method=POST, :authority=192.168.1.25:8181, :scheme=http, :path=/rpc/BalanceFreezeService/BalanceFreeze, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, user-agent=armeria/0.52.0], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=BalanceFreezeService/BalanceFreeze, params=[]}}\r\n2017-08-23 09:26:32.056 [INFO ] [armeria-server-epoll-5-10] armeria.services.rpc - [id: 0xc6457a94, L:/192.168.1.25:8181 - R:/192.168.1.25:40165][h2c://afistest25:8181/rpc/BalanceFreezeService/BalanceFreeze#POST] Request: {startTime=2017-08-23T01:26:31.948Z(1503451591948), length=68B, duration=66461\u00b5s(66461073ns), scheme=gproto+h2c, host=afistest25, headers=[:method=POST, :authority=192.168.1.25:8181, :scheme=http, :path=/rpc/BalanceFreezeService/BalanceFreeze, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, user-agent=armeria/0.52.0], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=BalanceFreezeService/BalanceFreeze, params=[]}}\r\n2017-08-23 09:26:32.056 [INFO ] [armeria-server-epoll-5-6] armeria.services.rpc - [id: 0xe765d8de, L:/192.168.1.25:8181 - R:/192.168.1.25:40161][h2c://afistest25:8181/rpc/BalanceFreezeService/BalanceFreeze#POST] Request: {startTime=2017-08-23T01:26:31.948Z(1503451591948), length=68B, duration=68037\u00b5s(68037037ns), scheme=gproto+h2c, host=afistest25, headers=[:method=POST, :authority=192.168.1.25:8181, :scheme=http, :path=/rpc/BalanceFreezeService/BalanceFreeze, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, user-agent=armeria/0.52.0], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=BalanceFreezeService/BalanceFreeze, params=[]}}\r\n2017-08-23 09:26:32.056 [INFO ] [armeria-server-epoll-5-3] armeria.services.rpc - [id: 0x4f5bac9c, L:/192.168.1.25:8181 - R:/192.168.1.25:40158][h2c://afistest25:8181/rpc/MarketChargeService/marketCharge#POST] Request: {startTime=2017-08-23T01:26:31.948Z(1503451591948), length=67B, duration=64857\u00b5s(64857458ns), scheme=gproto+h2c, host=afistest25, headers=[:method=POST, :authority=192.168.1.25:8181, :scheme=http, :path=/rpc/MarketChargeService/marketCharge, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, user-agent=armeria/0.52.0], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n2017-08-23 09:26:32.056 [INFO ] [armeria-server-epoll-5-9] armeria.services.rpc - [id: 0x75360336, L:/192.168.1.25:8181 - R:/192.168.1.25:40164][h2c://afistest25:8181/rpc/MarketChargeService/marketCharge#POST] Request: {startTime=2017-08-23T01:26:31.948Z(1503451591948), length=67B, duration=65194\u00b5s(65194608ns), scheme=gproto+h2c, host=afistest25, headers=[:method=POST, :authority=192.168.1.25:8181, :scheme=http, :path=/rpc/MarketChargeService/marketCharge, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, user-agent=armeria/0.52.0], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n2017-08-23 09:26:32.056 [INFO ] [armeria-server-epoll-5-5] armeria.services.rpc - [id: 0x58e3169b, L:/192.168.1.25:8181 - R:/192.168.1.25:40160][h2c://afistest25:8181/rpc/MarketChargeService/marketCharge#POST] Request: {startTime=2017-08-23T01:26:31.948Z(1503451591948), length=67B, duration=64189\u00b5s(64189296ns), scheme=gproto+h2c, host=afistest25, headers=[:method=POST, :authority=192.168.1.25:8181, :scheme=http, :path=/rpc/MarketChargeService/marketCharge, content-type=application/grpc+proto, grpc-accept-encoding=gzip, grpc-timeout=30000000u, user-agent=armeria/0.52.0], content=DefaultRpcRequest{serviceType=GrpcLogUtil, method=MarketChargeService/marketCharge, params=[]}}\r\n2017-08-23 09:26:32.088 [DEBUG] [armeria-blocking-tasks-1-3] org.apache.ibatis.logging.LogFactory - Logging initialized using 'class org.apache.ibatis.logging.slf4j.Slf4jImpl' adapter.\r\n2017-08-23 09:26:32.442 [DEBUG] [armeria-blocking-tasks-1-3] o.a.i.d.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.\r\n2017-08-23 09:26:32.442 [DEBUG] [armeria-blocking-tasks-1-3] o.a.i.d.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.\r\n2017-08-23 09:26:32.442 [DEBUG] [armeria-blocking-tasks-1-3] o.a.i.d.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.\r\n2017-08-23 09:26:32.442 [DEBUG] [armeria-blocking-tasks-1-3] o.a.i.d.pooled.PooledDataSource - PooledDataSource forcefully closed/removed all connections.\r\n2017-08-23 09:26:33.171 [DEBUG] [armeria-blocking-tasks-1-8] o.a.i.t.jdbc.JdbcTransaction - Opening JDBC Connection\r\n2017-08-23 09:26:33.171 [DEBUG] [armeria-blocking-tasks-1-9] o.a.i.t.jdbc.JdbcTransaction - Opening JDBC Connection\r\n2017-08-23 09:26:33.171 [DEBUG] [armeria-blocking-tasks-1-5] o.a.i.t.jdbc.JdbcTransaction - Opening JDBC Connection\r\n2017-08-23 09:26:33.171 [DEBUG] [armeria-blocking-tasks-1-2] o.a.i.t.jdbc.JdbcTransaction - Opening JDBC Connection\r\n2017-08-23 09:26:33.171 [DEBUG] [armeria-blocking-tasks-1-7] o.a.i.t.jdbc.JdbcTransaction - Opening JDBC Connection\r\n2017-08-23 09:26:33.171 [DEBUG] [armeria-blocking-tasks-1-1] o.a.i.t.jdbc.JdbcTransaction - Opening JDBC Connection\r\n2017-08-23 09:26:33.171 [DEBUG] [armeria-blocking-tasks-1-6] o.a.i.t.jdbc.JdbcTransaction - Opening JDBC Connection\r\n2017-08-23 09:26:33.171 [DEBUG] [armeria-blocking-tasks-1-3] o.a.i.t.jdbc.JdbcTransaction - Opening JDBC Connection\r\n2017-08-23 09:26:33.171 [DEBUG] [armeria-blocking-tasks-1-4] o.a.i.t.jdbc.JdbcTransaction - Opening JDBC Connection\r\n**2017-08-23 09:26:33.180 [INFO ] [armeria-server-epoll-5-1] armeria.services.rpc - [id: 0xb4672d97, L:/192.168.1.25:8181 - R:/192.168.1.25:40156][h2c://afistest25:8181/rpc/BalanceFreezeService/BalanceFreeze#POST] Response: {startTime=2017-08-23T01:26:33.170Z(1503451593170), length=0B, duration=9471\u00b5s(9471389ns), headers=[:status=200, content-type=application/grpc+proto, grpc-status=0], content=DefaultRpcResponse{success}}**\r\n", "closed": "2017-09-04 05:13:12", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/739", "ttf": 4.000277777777778, "commits": {}, "labels": ["not a bug"], "title": "Why   response  to  request   immediately,not execute  my business code ?"}, {"created": "2017-08-14 12:01:16", "commits": {"4a760e1dd3c55ef5f78e7e54f1342c4a9ad3d527": {"commitGHEventType": "referenced", "commitUser": "trustin"}}, "numCommits": 0, "closed": "2017-08-15 05:48:03", "filteredCommits": [], "commitsDetails": [{"nameRev": "4a760e1dd3c55ef5f78e7e54f1342c4a9ad3d527 tags/armeria-0.81.0~13", "commitMessage": "[docs] Add info about client timeouts (#1613)\n\nSlightly related to #723, this PR describes how the default client timeouts can be overridden.\r\n\r\n(This wasn't obvious to me at first, so adding this in the hope that it helps others. Note that the `ClientBuilder` class can also be used to tweak this; it's not 100% clear to me when to use that one and when to go with the `Clients.newClient` method.)", "commitParents": ["e04e0f9c68716114201453432ea95264c6b92ed2"], "spoonStatsSkippedReason": "", "commitHash": "4a760e1dd3c55ef5f78e7e54f1342c4a9ad3d527", "authoredDateTime": "2019-03-04 06:33:49", "commitGHEventType": "referenced", "commitGitStats": [{"insertions": 1, "deletions": 0, "lines": 1, "filePath": "site/src/sphinx/client.rst"}, {"insertions": 1, "deletions": 1, "lines": 2, "filePath": "site/src/sphinx/client-custom-http-headers.rst"}, {"insertions": 47, "deletions": 0, "lines": 47, "filePath": "site/src/sphinx/client-timeouts.rst"}], "commitDateTime": "2019-03-04 13:33:49", "commitUser": "trustin", "commitSpoonAstDiffStats": []}], "url": "https://github.com/line/armeria/issues/723", "ttf": 0.0002777777777777778, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "title": "io.grpc.StatusRuntimeException: DEADLINE_EXCEEDED   ", "statsSkippedReason": "", "user": "sunning9001", "changesInPackagesGIT": [], "spoonStatsSummary": {}, "filteredCommitsReason": {"unavailable": 0, "moreThanOneParent": 0, "mergeCommitUsed": 0, "duplicated": 0, "multipleIssueFixes": 1, "alsoFixesPhrase": 0}, "body": "env:  JDK 1.8   os:  windows    armeria  version:  0.52.0   data format: google protocal buffer\r\n\r\non the rpc client ,I  set idleTimeout =50 second , and  rpc  server   ,I set  idleTimeout =50 secord ,requestTimeout =50 secord .  but  10 second pass, the  **io.grpc.StatusRuntimeException: DEADLINE_EXCEEDED**   occur.\r\n\r\n\r\nI also know  that  only  the  default  IDLE_TIMEOUT_MILLIS is  ten second. \r\n\r\nwhy   the parameters  I had set  do not work ??\r\n\r\n\r\nthe rpc client code:\r\n\r\n\t    \tClientFactory factory=  new ClientFactoryBuilder().idleTimeout( Duration.ofSeconds(50)).build();\r\n\t\t\r\n\t\t\t\tClientBuilder builder = new ClientBuilder(\"gproto+http://127.0.0.1:8080/\")\r\n\t\t\t\t\t\t.decorator(HttpRequest.class, HttpResponse.class, LoggingClient.newDecorator()).factory(factory);\r\n\t\t\t\t\r\n\t\t\t\tHelloServiceFutureStub helloService = builder.build(HelloServiceFutureStub.class);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// HelloServiceFutureStub.class\r\n\t\t\t\t\t\r\n\t\t\t\tHelloRequest request = HelloRequest.newBuilder().setName(\"Armerian World\").build();\r\n\t\t\t\tListenableFuture<HelloReply> reply = helloService.hello(request);\r\n\t\t\t\treply.get();\r\n\r\nthe rpc server code:\r\n\r\n\t\tServerBuilder sb = new ServerBuilder().idleTimeout( Duration.ofSeconds(50)).defaultRequestTimeout( Duration.ofSeconds(50));\r\n\t\tsb.port(8080, HTTP);\r\n\t\tsb.serviceUnder(\"/\", new GrpcServiceBuilder().addService(new MyHelloService()).build());\r\n\r\n\t\tServer server = sb.build();\r\n\t\tserver.start();\r\n\r\n\r\nthe  exception  code:\r\njava.util.concurrent.ExecutionException: io.grpc.StatusRuntimeException: DEADLINE_EXCEEDED\r\n\tat com.google.common.util.concurrent.AbstractFuture.getDoneValue(AbstractFuture.java:503)\r\n\tat com.google.common.util.concurrent.AbstractFuture.get(AbstractFuture.java:482)\r\n\tat GrpcClient.main(GrpcClient.java:40)\r\n\u65f6\u95f411\r\nCaused by: io.grpc.StatusRuntimeException: DEADLINE_EXCEEDED\r\n\tat io.grpc.Status.asRuntimeException(Status.java:543)\r\n\tat io.grpc.stub.ClientCalls$UnaryStreamToFuture.onClose(ClientCalls.java:442)\r\n\tat com.linecorp.armeria.client.grpc.ArmeriaClientCall.transportReportStatus(ArmeriaClientCall.java:241)\r\n\tat com.linecorp.armeria.internal.grpc.HttpStreamReader.onNext(HttpStreamReader.java:100)\r\n\tat com.linecorp.armeria.internal.grpc.HttpStreamReader.onNext(HttpStreamReader.java:41)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriberWithElements(DefaultStreamMessage.java:359)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.notifySubscriber(DefaultStreamMessage.java:331)\r\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.lambda$notifySubscriber$2(DefaultStreamMessage.java:298)\r\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:403)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:462)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:858)\r\n\tat io.netty.util.concurrent.DefaultThreadFactory$DefaultRunnableDecorator.run(DefaultThreadFactory.java:138)\r\n\tat java.lang.Thread.run(Thread.java:745)", "labels": ["not a bug"]}, {"created": "2017-01-05 00:34:41", "user": "xtarx", "body": "After following the maven  [here](http://line.github.io/armeria/setup-maven.html) and running the main class I get this error\r\n\r\n> Error: Could not find or load main class hiwi.trail.App\r\n\r\nNote: When I remove all the dependancies from the POM.xml the project works completely fine.\r\n", "closed": "2017-01-06 22:26:17", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/361", "ttf": 1.0002777777777778, "commits": {}, "labels": ["not a bug"], "title": "\"Error: Could not find or load main class\" When importing the maven configuration"}, {"created": "2016-08-03 09:25:47", "user": "trustin", "body": "In some environment, there's no point of retrieving IPv6 addresses from a DNS lookup, because a connection attempt will fail anyway. Let's add a `RemoteInvokerOption` that allows a user to override [this setting](http://netty.io/4.1/api/io/netty/resolver/dns/DnsNameResolver.html#resolvedAddressTypes%28%29), although we should respect Netty's default if not overridden.\n", "closed": "2016-08-11 09:03:02", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/215", "ttf": 7.000277777777778, "commits": {}, "labels": ["not a bug"], "title": "Add a RemoteInvokerOption that configures the allowed inet protocol families for DNS lookup"}, {"created": "2016-06-12 03:27:05", "user": "xiemeilong", "body": "```\nCaused by: java.lang.ClassCastException: org.apache.thrift.meta_data.FieldValueMetaData cannot be cast to org.apache.thrift.meta_data.StructMetaData\n    at com.linecorp.armeria.common.thrift.ThriftUtil.toJavaType(ThriftUtil.java:82)\n    at com.linecorp.armeria.server.thrift.ThriftFunction.<init>(ThriftFunction.java:106)\n    at com.linecorp.armeria.server.thrift.ThriftFunction.<init>(ThriftFunction.java:52)\n    at com.linecorp.armeria.server.thrift.ThriftServiceCodec.registerFunction(ThriftServiceCodec.java:146)\n```\n", "closed": "2016-06-15 02:07:15", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/187", "ttf": 2.000277777777778, "commits": {}, "labels": ["not a bug"], "title": "FieldValueMetaData cannot be cast to org.apache.thrift.meta_data.StructMetaData"}, {"created": "2015-11-18 16:18:00", "user": "trustin", "body": "Currently, `HttpServerIdleTimeoutHandler` is added _after_ `HttpObjectAggregator`.  This yields an interesting behavior; when `pendingResCount` is 0, the request (usually the first request of a connection) must be received within `<idleTimeoutMillis>` milliseconds, because `HttpObjectAggregator` will not produce anything until a full HTTP message is built.\n\nI think this behavior is fine, although it sort of looks like an unintended side effect.\n\nHowever, I see the following edge case:\n1. The client sends the first request. (`pendingResCount` becomes 1)\n2. The server did not send the first response yet and the client starts to send the second request\n3. The server did not send the first response yet again, the client sends the second request partially, and then stops sending anything.\n4. `HttpServerIdleTimeoutHandler.channelIdle()` will be invoked, but it will be ignored because `pendingResCount` is 1.\n5. The server sends the first response finally (`pendingResCount` becomes 0), but the client did not send anything since the step (3).\n6. `HttpServerIdleTimeoutHandler.channelIdle()` will be invoked again, but will be ignored again because it's not the first event this time (see the `evt.isFirst()` check.)\n\nA quick fix would be to remove the `evt.isFirst()` check, but I wonder if we had a good reason for having it in the first place. Do you remember why, @inch772?\n", "closed": "2015-11-20 14:08:35", "commitsDetails": [], "url": "https://github.com/line/armeria/issues/14", "ttf": 1.0002777777777778, "commits": {}, "labels": ["not a bug"], "title": "HttpServerIdleTimeoutHandler can keep an idle connection open."}]}