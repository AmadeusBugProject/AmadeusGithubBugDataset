{"bugLabels": ["type:bug"], "issues": [{"labels": ["atn-analysis", "type:bug"], "filteredCommits": ["74779f334a59083873120d9fce8dfe71c6b0db24"], "url": "https://github.com/antlr/antlr4/issues/2172", "gitStatsSummary": {"insertions": 2, "gitFilesChange": 1, "lines": 4, "deletions": 2}, "numCommits": 1, "commits": {"74779f334a59083873120d9fce8dfe71c6b0db24": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 1.0002777777777778, "user": "niccroad", "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime/atn"], "body": "In this function of PredictionContext.\r\n\r\n```\r\npublic static PredictionContext mergeRoot(SingletonPredictionContext a,\r\n\t\t\t\t\t\t\t\t\t\t\t  SingletonPredictionContext b,\r\n\t\t\t\t\t\t\t\t\t\t\t  boolean rootIsWildcard)\r\n\t{\r\n\t\tif ( rootIsWildcard ) {\r\n\t\t\tif ( a == EMPTY ) return EMPTY;  // * + b = *\r\n\t\t\tif ( b == EMPTY ) return EMPTY;  // a + * = *\r\n\t\t}\r\n\t\telse {\r\n\t\t\tif ( a == EMPTY && b == EMPTY ) return EMPTY; // $ + $ = $\r\n\t\t\tif ( a == EMPTY ) { // $ + x = [$,x]\r\n\t\t\t\tint[] payloads = {b.returnState, EMPTY_RETURN_STATE};\r\n\t\t\t\tPredictionContext[] parents = {b.parent, null};\r\n\t\t\t\tPredictionContext joined =\r\n\t\t\t\t\tnew ArrayPredictionContext(parents, payloads);\r\n\t\t\t\treturn joined;\r\n\t\t\t}\r\n\t\t\tif ( b == EMPTY ) { // x + $ = [$,x] ($ is always first if present)\r\n\t\t\t\tint[] payloads = {a.returnState, EMPTY_RETURN_STATE};\r\n\t\t\t\tPredictionContext[] parents = {a.parent, null};\r\n\t\t\t\tPredictionContext joined =\r\n\t\t\t\t\tnew ArrayPredictionContext(parents, payloads);\r\n\t\t\t\treturn joined;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n```\r\nThe comments // $ + x = [$,x]\r\nand more explicitly // x + $ = [$,x] ($ is always first if present)\r\n\r\nSeem to contradict the implementation. This was done 6 years ago by @parrt.\r\nShould the order in the comments not be [x,$], ($ is always second if present)?\r\n\r\n\r\n\r\n<!--\r\nBefore submitting an issue to ANTLR, please check off these boxes:\r\n \r\n- [ ] I am not submitting a question on how to use ANTLR; instead, go to [antlr4-discussion google group](https://groups.google.com/forum/#!forum/antlr-discussion) or ask at [stackoverflow](http://stackoverflow.com/questions/tagged/antlr4)\r\n- [ ] I have done a search of the existing issues to make sure I'm not sending in a duplicate\r\n\r\nPlease include information about the expected behavior, actual behavior, and the smallest grammar or code that reproduces the behavior. If appropriate, please indicate the code generation targets such as Java, C#, ...  Pointers into offending code regions are also very welcome.\r\n-->\r\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Comment contradicts code (in all run-times)?", "statsSkippedReason": "", "closed": "2017-12-19 20:33:27", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2017-12-19 12:33:09", "commitHash": "74779f334a59083873120d9fce8dfe71c6b0db24", "commitParents": ["ba47b092e90853876a16cbc451d33f2d953e29ca"], "commitGHEventType": "closed", "nameRev": "74779f334a59083873120d9fce8dfe71c6b0db24 tags/4.7.2~71", "commitGitStats": [{"insertions": 2, "lines": 4, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/PredictionContext.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [], "spoonFilePath": "PredictionContext.java"}], "commitMessage": "tweak comment to be consistent with code. Fixes #2172\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2017-12-19 12:32:30"}], "created": "2017-12-18 02:36:29"}, {"labels": ["code-gen", "comp:tool", "status:invalid", "target:go", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/2027", "title": "Go target emits invalid Go for PHP lexer", "closed": "2017-09-25 22:24:19", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2017-09-25 17:25:44", "user": "willfaught", "body": "```\r\n$ git clone https://github.com/antlr/grammars-v4.git\r\n$ cd grammars-v4/php\r\n$ antlr4 -Dlanguage=Go PHPLexer.g4\r\n$ go build\r\n# _/Users/willfaught/grammars-v4/php\r\n./php_lexer.go:1414:1: syntax error: non-declaration statement outside function body\r\n./php_lexer.go:1423:1: invalid character U+0040 '@'\r\n./php_lexer.go:1476:84: unknown escape sequence\r\n./php_lexer.go:1509:40: invalid character U+003F '?'\r\n./php_lexer.go:1510:30: invalid character U+003F '?'\r\n./php_lexer.go:1568:19: syntax error: unexpected newline, expecting { after if clause\r\n./php_lexer.go:1570:24: syntax error: unexpected newline, expecting { after if clause\r\n./php_lexer.go:1574:8: syntax error: unexpected else, expecting }\r\n./php_lexer.go:1575:8: syntax error: unexpected { at end of statement\r\n./php_lexer.go:1580:4: syntax error: non-declaration statement outside function body\r\n./php_lexer.go:1580:4: too many errors\r\n```\r\n\r\nLine ./php_lexer.go:1414:\r\n\r\n```go\r\n1401 // PHPLexer modes.\r\n1402 const (\r\n1403   PHPLexerINSIDE = iota + 1\r\n1404   PHPLexerHtmlQuoteStringMode\r\n1405   PHPLexerHtmlDoubleQuoteStringMode\r\n1406   PHPLexerSCRIPT\r\n1407   PHPLexerSTYLE\r\n1408   PHPLexerPHP\r\n1409   PHPLexerInterpolationString\r\n1410   PHPLexerSingleLineCommentMode\r\n1411   PHPLexerHereDoc\r\n1412 )\r\n1413 \r\n1414 public boolean AspTags = true;\r\n1415 boolean _scriptTag;\r\n1416 boolean _styleTag;\r\n1417 String _heredocIdentifier;\r\n1418 int _prevTokenType;\r\n1419 String _htmlNameText;\r\n1420 boolean _phpScript;\r\n1421 boolean _insideString;\r\n1422 \r\n1423 @Override\r\n1424 public Token nextToken()\r\n```\r\n\r\nThe problem is that lines 1414\u20131421 are Java syntax, not Go.\r\n\r\nI'm not sure how the tests are even passing if some of the Go target sub-templates haven't been updated to emit Go instead of Java. Is this particular target sub-template rarely invoked? @parrt @pboyer \r\n\r\n- [x] I am not submitting a question on how to use ANTLR; instead, go to [antlr4-discussion google group](https://groups.google.com/forum/#!forum/antlr-discussion) or ask at [stackoverflow](http://stackoverflow.com/questions/tagged/antlr4)\r\n- [x] I have done a search of the existing issues to make sure I'm not sending in a duplicate"}, {"labels": ["actions", "code-gen", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1997", "title": "Can not generate java files from Rust grammar file", "closed": "2017-10-10 19:55:30", "commitsDetails": [], "commits": {}, "ttf": 41.000277777777775, "created": "2017-08-30 14:03:21", "user": "onekosha", "body": "<!--\r\nBefore submitting an issue to ANTLR, please check off these boxes:\r\n \r\n- [  ] I am not submitting a question on how to use ANTLR; instead, go to [antlr4-discussion google group](https://groups.google.com/forum/#!forum/antlr-discussion) or ask at [stackoverflow](http://stackoverflow.com/questions/tagged/antlr4)\r\n- [  ] I have done a search of the existing issues to make sure I'm not sending in a duplicate\r\n\r\nPlease include information about the expected behavior, actual behavior, and the smallest grammar or code that reproduces the behavior. If appropriate, please indicate the code generation targets such as Java, C#, ...  Pointers into offending code regions are also very welcome.\r\n-->\r\nI try to generate from Rust grammar file getting https://github.com/jorendorff/rust-grammar j\r\n\r\n\r\n\r\nava files. ANTLR4 generates two files with mistake.\r\nSome code from file xidstart.java:\r\n// Generated from src\\main\\antlr4\\imports\\xidstart.g4 by ANTLR 4.7\r\npackage src.main.antlr4.imports;\r\nimport org.antlr.v4.runtime.Lexer;\r\nimport org.antlr.v4.runtime.CharStream;\r\nimport org.antlr.v4.runtime.Token;\r\nimport org.antlr.v4.runtime.TokenStream;\r\nimport org.antlr.v4.runtime.*;\r\nimport org.antlr.v4.runtime.atn.*;\r\nimport org.antlr.v4.runtime.dfa.DFA;\r\nimport org.antlr.v4.runtime.misc.*;\r\n\r\n@SuppressWarnings({\"all\", \"warnings\", \"unchecked\", \"unused\", \"cast\"})\r\npublic class xidstart extends Lexer {\r\n\tstatic { RuntimeMetaData.checkVersion(\"4.7\", RuntimeMetaData.VERSION); }\r\n\r\n\tprotected static final DFA[] _decisionToDFA;\r\n\tprotected static final PredictionContextCache _sharedContextCache =\r\n\t\tnew PredictionContextCache();\r\n\tpublic static final int\r\n;\r\n\tpublic static String[] channelNames = {\r\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"\r\n\t};\r\n\r\nSome code from file xidcontinue.java:\r\n// Generated from src\\main\\antlr4\\imports\\xidcontinue.g4 by ANTLR 4.7\r\npackage src.main.antlr4.imports;\r\nimport org.antlr.v4.runtime.Lexer;\r\nimport org.antlr.v4.runtime.CharStream;\r\nimport org.antlr.v4.runtime.Token;\r\nimport org.antlr.v4.runtime.TokenStream;\r\nimport org.antlr.v4.runtime.*;\r\nimport org.antlr.v4.runtime.atn.*;\r\nimport org.antlr.v4.runtime.dfa.DFA;\r\nimport org.antlr.v4.runtime.misc.*;\r\n\r\n@SuppressWarnings({\"all\", \"warnings\", \"unchecked\", \"unused\", \"cast\"})\r\npublic class xidcontinue extends Lexer {\r\n\tstatic { RuntimeMetaData.checkVersion(\"4.7\", RuntimeMetaData.VERSION); }\r\n\r\n\tprotected static final DFA[] _decisionToDFA;\r\n\tprotected static final PredictionContextCache _sharedContextCache =\r\n\t\tnew PredictionContextCache();\r\n\tpublic static final int\r\n;\r\n\tpublic static String[] channelNames = {\r\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"\r\n\t};\r\nProject with code places on https://github.com/onekosha/nb-rust. Apache Maven 3.5.0. Windows 10 64 bit. JDK 1.8.0_141 64 bit. Add files from folder 'generated-sources'.\r\n[generated-sources.zip](https://github.com/antlr/antlr4/files/1263828/generated-sources.zip)\r\n If I use Clojure grammar file all good. I try to use other versions ANTLR4 but it does not help me. I think that problem in xidcontinue.g4 and xidstart.g4 but I find not other newer version for these files. Thanks."}, {"labels": ["comp:tool", "type:bug"], "filteredCommits": ["f858cd594898e9a42b50dedbc5588e2d2a362b61", "80aa7907a4d96964d172c725e02a176c94875c06"], "url": "https://github.com/antlr/antlr4/issues/1815", "gitStatsSummary": {"insertions": 68, "gitFilesChange": 8, "lines": 125, "deletions": 57}, "numCommits": 2, "commits": {"60a81577198c2e2b80af497e5fbffb9399ba6b52": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "9519bfc36fcab155a4c37fbb32e5e83e02d58a6f": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "f858cd594898e9a42b50dedbc5588e2d2a362b61": {"commitUser": "parrt", "commitGHEventType": "closed"}, "80aa7907a4d96964d172c725e02a176c94875c06": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "parrt", "changesInPackagesSPOON": ["org.antlr.v4.misc.EscapeSequenceParsing.parseEscape(java.lang.String,int)", "org.antlr.v4.misc.EscapeSequenceParsing.Result", "org.antlr.v4.tool.ast.GrammarASTWithOptions.getOptionString(java.lang.String)", "org.antlr.v4.codegen.Target.getTargetStringLiteralFromANTLRStringLiteral(org.antlr.v4.codegen.CodeGenerator,java.lang.String,boolean)", "org.antlr.v4.automata.LexerATNFactory.getSetFromCharSetLiteral(org.antlr.v4.tool.ast.GrammarAST)", "org.antlr.v4.misc.EscapeSequenceParsing.invalid(int,int)", "org.antlr.v4.tool.ErrorType", "org.antlr.v4.automata.LexerATNFactory.stringLiteral(org.antlr.v4.tool.ast.TerminalAST)"], "changesInPackagesGIT": ["runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors", "tool/src/org/antlr/v4/misc", "tool/src/org/antlr/v4/tool", "tool/src/org/antlr/v4/automata", "tool/src/org/antlr/v4/parse/ATNBuilder.g", "tool/src/org/antlr/v4/codegen", "tool/src/org/antlr/v4/parse/ANTLRLexer.g", "tool/src/org/antlr/v4/tool/ast"], "body": "[SqlBase.g4](https://github.com/apache/spark/blob/master/sql/catalyst/src/main/antlr4/org/apache/spark/sql/catalyst/parser/SqlBase.g4) gives\r\n\r\n```bash\r\n$ a4.7 SqlBase.g4 \r\nwarning(156): SqlBase.g4:951:7: invalid escape sequence\r\nwarning(156): SqlBase.g4:951:16: invalid escape sequence\r\nwarning(156): SqlBase.g4:951:41: invalid escape sequence\r\nerror(144): SqlBase.g4:951:15: multi-character literals are not allowed in lexer sets: '\r\nException in thread \"main\" java.lang.NullPointerException\r\n\tat org.antlr.v4.automata.ParserATNFactory.elemList(ParserATNFactory.java:469)\r\n\tat org.antlr.v4.automata.ParserATNFactory.alt(ParserATNFactory.java:455)\r\n\tat org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:559)\r\n\tat org.antlr.v4.parse.ATNBuilder.ruleBlock(ATNBuilder.java:293)\r\n\tat org.antlr.v4.automata.ParserATNFactory._createATN(ParserATNFactory.java:161)\r\n\tat org.antlr.v4.automata.LexerATNFactory.createATN(LexerATNFactory.java:120)\r\n\tat org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:389)\r\n\tat org.antlr.v4.Tool.process(Tool.java:354)\r\n\tat org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:321)\r\n\tat org.antlr.v4.Tool.main(Tool.java:168)\r\n```\r\n\r\nThe `'\\\"` give that \"multi-character literals are not ...\" error. Should be better as that will be common.", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 2}, "spoonStatsSummary": {"spoonMethodsChanged": 8, "UPD": 12, "TOT": 56, "DEL": 14, "INS": 19, "spoonFilesChanged": 5, "MOV": 11}, "title": "Null ptr exception in SqlBase.g4", "statsSkippedReason": "", "closed": "2017-04-06 21:36:24", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2017-04-06 10:30:29", "commitHash": "60a81577198c2e2b80af497e5fbffb9399ba6b52", "commitParents": ["8af00801037d3b8933f29d0903daac3e9c05349e", "80aa7907a4d96964d172c725e02a176c94875c06"], "commitGHEventType": "referenced", "nameRev": "60a81577198c2e2b80af497e5fbffb9399ba6b52 tags/intellij-1.8.4-version~3", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "tool/src/org/antlr/v4/tool/ast/GrammarASTWithOptions.java", "deletions": 1}, {"insertions": 19, "lines": 37, "filePath": "tool/src/org/antlr/v4/parse/ANTLRLexer.g", "deletions": 18}, {"insertions": 1, "lines": 2, "filePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "deletions": 1}, {"insertions": 4, "lines": 6, "filePath": "tool/src/org/antlr/v4/automata/LexerATNFactory.java", "deletions": 2}, {"insertions": 28, "lines": 57, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestEscapeSequenceParsing.java", "deletions": 29}, {"insertions": 16, "lines": 32, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestToolSyntaxErrors.java", "deletions": 16}, {"insertions": 31, "lines": 47, "filePath": "tool/src/org/antlr/v4/misc/EscapeSequenceParsing.java", "deletions": 16}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ast.GrammarASTWithOptions.getOptionString(java.lang.String)"}], "spoonFilePath": "GrammarASTWithOptions.java"}, {"spoonMethods": [{"UPD": 5, "TOT": 5, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testInvalidCharSetsAndStringLiterals()"}, {"UPD": 8, "TOT": 8, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testInvalidUnicodeEscapesInCharSet()"}, {"UPD": 3, "TOT": 3, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testInvalidEscapeSequences()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.automata.LexerATNFactory.stringLiteral(org.antlr.v4.tool.ast.TerminalAST)"}, {"UPD": 1, "TOT": 4, "DEL": 1, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.automata.LexerATNFactory.getSetFromCharSetLiteral(org.antlr.v4.tool.ast.GrammarAST)"}], "spoonFilePath": "LexerATNFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.misc.EscapeSequenceParsing.invalid(int,int)"}, {"UPD": 3, "TOT": 29, "DEL": 11, "INS": 11, "MOV": 4, "spoonMethodName": "org.antlr.v4.misc.EscapeSequenceParsing.parseEscape(java.lang.String,int)"}, {"UPD": 4, "TOT": 9, "DEL": 0, "INS": 2, "MOV": 3, "spoonMethodName": "org.antlr.v4.misc.EscapeSequenceParsing.Result"}], "spoonFilePath": "EscapeSequenceParsing.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ErrorType"}], "spoonFilePath": "ErrorType.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseJustBackslash()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeBMP()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeTooBig()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodePropertyMissingCloseBrace()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeTooShort()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodePropertyTooShort()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeSMPTooShort()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseEmpty()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodePropertyInvertedTooShort()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseInvalidEscape()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodePropertyInvertedMissingCloseBrace()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodePropertyInverted()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeSMP()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseNewline()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseTab()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeProperty()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeSMPMissingCloseBrace()"}], "spoonFilePath": "TestEscapeSequenceParsing.java"}], "commitMessage": "Merge pull request #1817 from parrt/fix-1815\n\nFixes #1815. Invalid escape error msgs kinda sucked. Prevent null ptr later in pipeline.", "spoonStatsSkippedReason": "", "authoredDateTime": "2017-04-06 10:30:29"}, {"commitUser": "parrt", "commitDateTime": "2017-04-06 10:26:03", "commitHash": "80aa7907a4d96964d172c725e02a176c94875c06", "commitParents": ["8af00801037d3b8933f29d0903daac3e9c05349e"], "commitGHEventType": "closed", "nameRev": "80aa7907a4d96964d172c725e02a176c94875c06 tags/intellij-1.8.4-version~3^2", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "tool/src/org/antlr/v4/tool/ast/GrammarASTWithOptions.java", "deletions": 1}, {"insertions": 19, "lines": 37, "filePath": "tool/src/org/antlr/v4/parse/ANTLRLexer.g", "deletions": 18}, {"insertions": 1, "lines": 2, "filePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "deletions": 1}, {"insertions": 4, "lines": 6, "filePath": "tool/src/org/antlr/v4/automata/LexerATNFactory.java", "deletions": 2}, {"insertions": 28, "lines": 57, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestEscapeSequenceParsing.java", "deletions": 29}, {"insertions": 16, "lines": 32, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestToolSyntaxErrors.java", "deletions": 16}, {"insertions": 31, "lines": 47, "filePath": "tool/src/org/antlr/v4/misc/EscapeSequenceParsing.java", "deletions": 16}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ast.GrammarASTWithOptions.getOptionString(java.lang.String)"}], "spoonFilePath": "GrammarASTWithOptions.java"}, {"spoonMethods": [{"UPD": 5, "TOT": 5, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testInvalidCharSetsAndStringLiterals()"}, {"UPD": 8, "TOT": 8, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testInvalidUnicodeEscapesInCharSet()"}, {"UPD": 3, "TOT": 3, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testInvalidEscapeSequences()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.automata.LexerATNFactory.stringLiteral(org.antlr.v4.tool.ast.TerminalAST)"}, {"UPD": 1, "TOT": 4, "DEL": 1, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.automata.LexerATNFactory.getSetFromCharSetLiteral(org.antlr.v4.tool.ast.GrammarAST)"}], "spoonFilePath": "LexerATNFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.misc.EscapeSequenceParsing.invalid(int,int)"}, {"UPD": 3, "TOT": 29, "DEL": 11, "INS": 11, "MOV": 4, "spoonMethodName": "org.antlr.v4.misc.EscapeSequenceParsing.parseEscape(java.lang.String,int)"}, {"UPD": 4, "TOT": 9, "DEL": 0, "INS": 2, "MOV": 3, "spoonMethodName": "org.antlr.v4.misc.EscapeSequenceParsing.Result"}], "spoonFilePath": "EscapeSequenceParsing.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ErrorType"}], "spoonFilePath": "ErrorType.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseJustBackslash()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeBMP()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeTooBig()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodePropertyMissingCloseBrace()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeTooShort()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodePropertyTooShort()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeSMPTooShort()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseEmpty()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodePropertyInvertedTooShort()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseInvalidEscape()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodePropertyInvertedMissingCloseBrace()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodePropertyInverted()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeSMP()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseNewline()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseTab()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeProperty()"}, {"UPD": 1, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestEscapeSequenceParsing.testParseUnicodeSMPMissingCloseBrace()"}], "spoonFilePath": "TestEscapeSequenceParsing.java"}], "commitMessage": "Fixes #1815. Add info on what the invalid escape is. Match \\x for any x but give error. This prevents \\x from appearing like a sequence of 2 char.  Updated unit tests.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2017-04-06 10:26:03"}, {"commitUser": "parrt", "commitDateTime": "2017-04-06 14:34:37", "commitHash": "f858cd594898e9a42b50dedbc5588e2d2a362b61", "commitParents": ["60a81577198c2e2b80af497e5fbffb9399ba6b52"], "commitGHEventType": "closed", "nameRev": "f858cd594898e9a42b50dedbc5588e2d2a362b61 tags/intellij-1.8.4-version~1^2", "commitGitStats": [{"insertions": 2, "lines": 3, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/LexerErrorsDescriptors.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "tool/src/org/antlr/v4/parse/ATNBuilder.g", "deletions": 1}, {"insertions": 5, "lines": 11, "filePath": "tool/src/org/antlr/v4/automata/LexerATNFactory.java", "deletions": 6}, {"insertions": 0, "lines": 9, "filePath": "tool/src/org/antlr/v4/parse/ANTLRLexer.g", "deletions": 9}, {"insertions": 24, "lines": 26, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestToolSyntaxErrors.java", "deletions": 2}, {"insertions": 4, "lines": 6, "filePath": "tool/src/org/antlr/v4/codegen/Target.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 3, "TOT": 7, "DEL": 2, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.automata.LexerATNFactory.stringLiteral(org.antlr.v4.tool.ast.TerminalAST)"}], "spoonFilePath": "LexerATNFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testDoubleQuoteInTwoStringLiterals()"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testInvalidCharSetsAndStringLiterals()"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testInvalidEscapeSequences()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [], "spoonFilePath": "LexerErrorsDescriptors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 2, "spoonMethodName": "org.antlr.v4.codegen.Target.getTargetStringLiteralFromANTLRStringLiteral(org.antlr.v4.codegen.CodeGenerator,java.lang.String,boolean)"}], "spoonFilePath": "Target.java"}], "commitMessage": "Fixes #1815 (for real this time!). Fix text set for erroneous escapes so tool doesn't fail later. Remove some duplicate error messages. Add test for #1815.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2017-04-06 14:34:37"}, {"commitUser": "parrt", "commitDateTime": "2017-04-06 14:36:22", "commitHash": "9519bfc36fcab155a4c37fbb32e5e83e02d58a6f", "commitParents": ["6d4e019b167a4d9367c1deec22d4276cce543dea", "f858cd594898e9a42b50dedbc5588e2d2a362b61"], "commitGHEventType": "referenced", "nameRev": "9519bfc36fcab155a4c37fbb32e5e83e02d58a6f tags/intellij-1.8.4-version~1", "commitGitStats": [{"insertions": 2, "lines": 3, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/LexerErrorsDescriptors.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "tool/src/org/antlr/v4/parse/ATNBuilder.g", "deletions": 1}, {"insertions": 5, "lines": 11, "filePath": "tool/src/org/antlr/v4/automata/LexerATNFactory.java", "deletions": 6}, {"insertions": 0, "lines": 9, "filePath": "tool/src/org/antlr/v4/parse/ANTLRLexer.g", "deletions": 9}, {"insertions": 24, "lines": 26, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestToolSyntaxErrors.java", "deletions": 2}, {"insertions": 4, "lines": 6, "filePath": "tool/src/org/antlr/v4/codegen/Target.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 3, "TOT": 7, "DEL": 2, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.automata.LexerATNFactory.stringLiteral(org.antlr.v4.tool.ast.TerminalAST)"}], "spoonFilePath": "LexerATNFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testDoubleQuoteInTwoStringLiterals()"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testInvalidCharSetsAndStringLiterals()"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testInvalidEscapeSequences()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [], "spoonFilePath": "LexerErrorsDescriptors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 0, "INS": 1, "MOV": 2, "spoonMethodName": "org.antlr.v4.codegen.Target.getTargetStringLiteralFromANTLRStringLiteral(org.antlr.v4.codegen.CodeGenerator,java.lang.String,boolean)"}], "spoonFilePath": "Target.java"}], "commitMessage": "Merge pull request #1818 from parrt/fix-1815-again\n\nFixes #1815 (for real this time!)", "spoonStatsSkippedReason": "", "authoredDateTime": "2017-04-06 14:36:22"}], "created": "2017-04-05 22:12:58"}, {"labels": ["target:javascript", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1638", "title": "BailErrorStrategy in JavaScript", "closed": "2017-03-14 17:43:06", "commitsDetails": [], "commits": {}, "ttf": 42.000277777777775, "created": "2017-01-30 18:47:58", "user": "fdeitelhoff", "body": "I'm working with ANTLR 4.6 and the JavaScript Target. I'm wondering if a BailErrorStrategy exists in JavaScript, too?\r\n\r\nI tried something like this: `parser._errHandler = new antlr4.error.BailErrorStrategy();` but I get errors when I'm trying to parse input:\r\n\r\n```\r\nError: ParseCancellationException is not a constructor\r\n\r\nTypeError: ParseCancellationException is not a constructor\r\n    at BailErrorStrategy.recover (E:\\Masterthesis\\Simplex-Electron\\node_modules\\antlr4\\error\\ErrorStrategy.js:743:11)\r\n    at SimplexParser.expression (E:\\Masterthesis\\Simplex-Electron\\src\\Model\\Simplex-Lang\\SimplexParser.js:2926:27)\r\n    at SimplexParser.expression (E:\\Masterthesis\\Simplex-Electron\\src\\Model\\Simplex-Lang\\SimplexParser.js:2840:46)\r\n    at SimplexParser.assignmentStatement (E:\\Masterthesis\\Simplex-Electron\\src\\Model\\Simplex-Lang\\SimplexParser.js:1597:33)\r\n    at SimplexParser.statement (E:\\Masterthesis\\Simplex-Electron\\src\\Model\\Simplex-Lang\\SimplexParser.js:1215:34)\r\n    at SimplexParser.typeless (E:\\Masterthesis\\Simplex-Electron\\src\\Model\\Simplex-Lang\\SimplexParser.js:619:18)\r\n    at SimplexParser.simplex (E:\\Masterthesis\\Simplex-Electron\\src\\Model\\Simplex-Lang\\SimplexParser.js:343:18)\r\n    at SimplexCompiler.parse (E:\\Masterthesis\\Simplex-Electron\\src\\Model\\Compiler\\SLX\\SimplexCompiler.js:42:29)\r\n```\r\n\r\nAm I missing something? Is the BailErrorStrategy not available in JavaScript?"}, {"labels": ["grammars", "parsers", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1545", "title": "Parentheses without quantifier in parser rule lead to syntax error on non-root rule parsing", "closed": "2016-12-28 05:47:13", "commitsDetails": [], "commits": {}, "ttf": 4.000277777777778, "created": "2016-12-23 14:54:56", "user": "rslemos", "body": "Consider the following grammar:\r\n\r\n```ANTLR\r\ngrammar OpenDeviceStatement;\r\n\r\nprogram : statement+ '.' ;\r\n\r\nstatement : 'OPEN' ( 'DEVICE' (  OPT1  |  OPT2  |  OPT3  )? )+ ;\r\n\r\n//statement : 'OPEN' ( 'DEVICE' ( (OPT1) |  OPT2  |  OPT3  )? )+ ;\r\n//statement : 'OPEN' ( 'DEVICE' (  OPT1  | (OPT2) |  OPT3  )? )+ ;\r\n//statement : 'OPEN' ( 'DEVICE' (  OPT1  |  OPT2  | (OPT3) )? )+ ;\r\n//statement : 'OPEN' ( 'DEVICE' ( (OPT1) | (OPT2) |  OPT3  )? )+ ;\r\n//statement : 'OPEN' ( 'DEVICE' ( (OPT1) |  OPT2  | (OPT3) )? )+ ;\r\n//statement : 'OPEN' ( 'DEVICE' (  OPT1  | (OPT2) | (OPT3) )? )+ ;\r\n//statement : 'OPEN' ( 'DEVICE' ( (OPT1) | (OPT2) | (OPT3) )? )+ ;\r\n\r\nOPT1 : 'OPT-1';\r\nOPT2 : 'OPT-2';\r\nOPT3 : 'OPT-3';\r\n\r\nWS : (' '|'\\n')+ -> channel(HIDDEN);\r\n\r\n```\r\n\r\nWhen parsing the text ```OPEN DEVICE DEVICE``` (directly through ```statement()```, and **not** through ```program()```) everything works fine.\r\n\r\nTrace output:\r\n```\r\nenter   statement, LT(1)=OPEN\r\nconsume [@0,0:3='OPEN',<2>,1:0] rule statement\r\nconsume [@2,5:10='DEVICE',<3>,1:5] rule statement\r\nconsume [@4,12:17='DEVICE',<3>,1:12] rule statement\r\nexit    statement, LT(1)=<EOF>\r\n```\r\n\r\nTree output:\r\n```\r\n(statement OPEN DEVICE DEVICE)\r\n```\r\n\r\n### Exercise 1\r\n\r\nNow consider substituting any of the alternative ```statement``` definitions (where one or more ```OPTx``` tokens are parenthized).\r\n\r\nTree output is still the same. But now some ```syntaxError()``` get reported on the ```ANTLRErrorListener```. Here the trace along with ```ConsoleErrorListener``` output:\r\n\r\n```\r\nenter   statement, LT(1)=OPEN\r\nconsume [@0,0:3='OPEN',<2>,1:0] rule statement\r\nconsume [@2,5:10='DEVICE',<3>,1:5] rule statement\r\nconsume [@4,12:17='DEVICE',<3>,1:12] rule statement\r\nline 1:18 no viable alternative at input '<EOF>'\r\nexit    statement, LT(1)=<EOF>\r\n```\r\n\r\nMaybe ANTLR4 is expecting either: any ```OPTx``` (an optional argument to the previous ```DEVICE```), another ```DEVICE```, ```OPEN``` (for a new ```statement```) or ```.``` (period, to close the ```program```). I understand that ```<EOF>``` is not to be expected if we were to parse the text from the root rule ```program``` (here I just assume that ANTLR4 breaks its promise to be able to parse from any rule, giving no rule the special quality of being *the root rule* or *the main rule*).\r\n\r\n### Exercise 2 (on top of exercise 1)\r\n\r\nGoing one step further, lets then parse the text ```OPEN DEVICE DEVICE.``` (notice the period). Again our parsing starts at ```statement``` rule.\r\n\r\nWhat trace do we get?\r\n\r\n```\r\nenter   statement, LT(1)=OPEN\r\nconsume [@0,0:3='OPEN',<2>,1:0] rule statement\r\nconsume [@2,5:10='DEVICE',<3>,1:5] rule statement\r\nconsume [@4,12:17='DEVICE',<3>,1:12] rule statement\r\nline 1:18 extraneous input '.' expecting {<EOF>, 'DEVICE', 'OPT-1', 'OPT-2', 'OPT-3'}\r\nline 1:19 no viable alternative at input '<EOF>'\r\nexit    statement, LT(1)=<EOF>\r\n```\r\n\r\nWeirdly it **is** expecting ```<EOF>``` (and not ```OPEN``` nor ```.``` because they are outside ```statement``` rule).\r\n\r\nThe output tree wrongly incorporates the ```.```: \r\n```\r\n(statement OPEN DEVICE DEVICE .)\r\n```\r\n(well, at least I expected it to stop at the second ```DEVICE```, leaving the ```.``` unparsed)\r\n\r\n--------------------------------------------------------------------------------\r\nI think there are 3 bugs here:\r\n1. the superfluous parentheses around ```OPTx``` should have no effect in the generated parser;\r\n2. the parsing through the non-root rule ```statement``` should not see the ```<EOF>``` as unexpected (after ```DEVICE``` or any ```OPTx``` token);\r\n3. the parsing through the non-root rule ```statement``` should not consume the ```.``` token (not sure about this one; this may only apply to lexers, not to parsers).\r\n\r\nWhat do you think?"}, {"labels": ["comp:tool", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1543", "title": "type mismatch between left and right labels in left-recursive rule", "closed": "2017-01-29 21:34:33", "commitsDetails": [], "commits": {}, "ttf": 38.000277777777775, "created": "2016-12-22 17:34:38", "user": "parrt", "body": "We thought we fixed this in https://github.com/antlr/antlr4/issues/195#issuecomment-268737026 but here's another case reported:\r\n\r\n@ferhaterata says: provided a Grammar that ANTLR generates recognizer in 4.5.1 and 4.5.3 but fails in 4.6.1. The labels 'left' and 'right' represent two different types. Sorry for preparing a verbose grammar.\r\n\r\n```\r\ngrammar Test;\r\n\r\nmodule: formula* ;\r\n\r\nformula:\r\n      left=expression 'in'  right=expression    #in\r\n    | left=formula    'and' right=formula       #and\r\n    ;\r\n\r\nexpression:\r\n      left=expression '+' right=expression      #union\r\n    | variable                                  #var\r\n    ;\r\n\r\nvariable: IDENTIFIER;\r\n\r\nIDENTIFIER : [a-zA-Z];\r\n``` \r\nIt throws\r\n\r\n> error(75): Test.g4:2:13: label left=expression type mismatch with previous definition: left=formula\r\n> error(75): Test.g4:5:57: label right=formula type mismatch with previous definition: right=expression\r\n\r\nIn fact, this one works fine,\r\n\r\n```\r\ngrammar test1;\r\n\r\nexample:\r\n    left=integer '*' right=integer  #integerExample\r\n  | left=string  '+' right=string   #stringExample\r\n  ;\r\n\r\ninteger: IDENTIFIER;\r\nstring: INTEGER;\r\n\r\nSTRING: [a-zA-Z];\r\nINTEGER: [a-zA-Z];\r\n```\r\n\r\nI assume the problem occurs once repetitions are allowed in labels.\r\n"}, {"labels": ["target:python2", "type:bug"], "filteredCommits": [], "url": "https://github.com/antlr/antlr4/issues/1538", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"abf16b08b901d4a7bb3217ddcf3f9ca9e141c849": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 1.0002777777777778, "user": "arifogel", "changesInPackagesGIT": [], "body": "Sorry for not including code right off, but this looks like an obvious bug with an obvious fix:\r\nIn the removeOne function in runtime/Python2/src/antlr4/IntervalSet.py, in the last elif case, a 'range' is used instead of an Interval. This causes a type error later on where an Interval is expected instead of a list.\r\n\r\n`self.intervals[k] = range(v + 1, i.stop)`\r\nShould be:\r\n`self.intervals[k] = Interval(v + 1, i.stop)`\r\n \r\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {}, "title": "python2: Bug in IntervalSet.py:removeOne causes exception when taking complement", "statsSkippedReason": "", "closed": "2016-12-22 17:26:22", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-22 09:19:58", "commitHash": "abf16b08b901d4a7bb3217ddcf3f9ca9e141c849", "commitParents": ["bec0c36a328d7773c8a6b00953403a451d887216", "4125fbad8a6c40c664b0d85a3d652cd3ff301297"], "commitGHEventType": "referenced", "nameRev": "abf16b08b901d4a7bb3217ddcf3f9ca9e141c849 tags/4.7~165", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/Python2/src/antlr4/IntervalSet.py", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #1541 from ericvergnaud/fix-#1538\n\nFix a Python 2 typo", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-22 09:19:58"}], "created": "2016-12-21 00:12:11"}, {"labels": ["target:python2", "target:python3", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1529", "title": "'CommonToken' object has no attribute 'stopIndex' in Python{2|3}", "closed": "2017-02-27 21:54:40", "commitsDetails": [], "commits": {}, "ttf": 70.00027777777778, "created": "2016-12-19 17:38:50", "user": "KvanTTT", "body": "### Python code\r\n\r\nConsider the following Python3 code and custom grammar `Separated`:\r\n\r\n```Python\r\nimport sys;\r\nfrom antlr4 import *\r\nfrom SeparatedLexer import SeparatedLexer\r\nfrom SeparatedParser import SeparatedParser\r\n\r\ndef main(argv):\r\n    code = open('Text', 'r').read()\r\n    codeStream = InputStream(code)\r\n    lexer = SeparatedLexer(codeStream)\r\n    tokens = lexer.getAllTokens()\r\n    tokensSource = ListTokenSource.ListTokenSource(tokens)\r\n    tokensStream = CommonTokenStream(tokensSource)\r\n    #tokensStream = CommonTokenStream(lexer) # use this statement to overcome the bug\r\n    parser = SeparatedParser(tokensStream)\r\n    tree = parser.rule1()\r\n    print(\"Tree \", tree.toStringTree(recog=parser));\r\n\r\nif __name__ == '__main__':\r\n    main(sys.argv)\r\n```\r\n\r\nIt's not working properly. The following error occurs:\r\n\r\n### Error\r\n\r\n```\r\nTraceback (most recent call last):\r\n  File \"main.py\", line 20, in <module>\r\n    main(sys.argv)\r\n  File \"main.py\", line 16, in main\r\n    tree = parser.rule1()\r\n  File \"SeparatedParser.py\", line 122, i\r\nn rule1\r\n    localctx.t1 = self.a()\r\n  File \"SeparatedParser.py\", line 326, i\r\nn a\r\n    self.match(SeparatedParser.A)\r\n  File \"Parser.py\", line 113, in match\r\n    self.consume()\r\n  File \"Parser.py\", line 329, in consume\r\n    self.getInputStream().consume()\r\n  File \"BufferedTokenStream.py\", line 99, in consume\r\n    if self.sync(self.index + 1):\r\n  File \"BufferedTokenStream.py\", line 111, in sync\r\n    fetched = self.fetch(n)\r\n  File \"BufferedTokenStream.py\", line 123, in fetch\r\n    t = self.tokenSource.nextToken()\r\n  File \"ListTokenSource.py\", line 81, in nextToken\r\n    previousStop = self.tokens[len(self.tokens) - 1].stopIndex\r\nAttributeError: 'CommonToken' object has no attribute 'stopIndex'\r\n```\r\n\r\n### Java\r\n\r\nMeanwhile the Java code works good:\r\n\r\n```Java\r\nString code = readFile(args[0]);\r\nANTLRInputStream codeStream = new ANTLRInputStream(code);\r\nSeparatedLexer lexer = new SeparatedLexer(codeStream);\r\nList<? extends Token> tokens = lexer.getAllTokens();\r\nListTokenSource tokensSource = new ListTokenSource(tokens);\r\nCommonTokenStream tokensStream = new CommonTokenStream(tokensSource);\r\nSeparatedParser parser = new SeparatedParser(tokensStream);\r\nParserRuleContext ast = parser.rule1();\r\nString stringTree = ast.toStringTree(parser);\r\nSystem.out.print(\"Tree \" + stringTree);\r\n```\r\n\r\nSo, I am not able to parse the custom tokens list.\r\n"}, {"labels": ["comp:build", "status:invalid", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1504", "title": "`mvn -Dtest=java.* test` doesn't work anymore", "closed": "2016-12-14 18:35:12", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2016-12-14 00:18:50", "user": "parrt", "body": ""}, {"labels": ["target:python2", "type:bug"], "filteredCommits": [], "url": "https://github.com/antlr/antlr4/issues/1496", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"65982518eff5d5736df8633d58647eab55cb38e2": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "mitchell-as", "changesInPackagesGIT": [], "body": "Before submitting an issue to ANTLR, please check off these boxes:\r\n \r\n- [x] I am not submitting a question on how to use ANTLR; instead, go to [antlr4-discussion google group](https://groups.google.com/forum/#!forum/antlr-discussion) or ask at [stackoverflow](http://stackoverflow.com/questions/tagged/antlr4)\r\n- [x] I have done a search of the existing issues to make sure I'm not sending in a duplicate\r\n\r\n[cut]\r\nPlease include information about the expected behavior, actual behavior, and the smallest grammar or code that reproduces the behavior. If appropriate, please indicate the code generation targets such as Java, C#, ...  Pointers into offending code regions are also very welcome.\r\n[/cut]\r\n\r\nThe Python 2 runtime target produces problematic tokens during error recovery. This issue is only seen when you try to call `node.getText()` on a node with a child error token in it. The runtime error message is:\r\n\r\n```\r\n  File \"/.../antlr4/RuleContext.py\", line 107, in getText\r\n    builder.write(child.getText())\r\nTypeError: unicode argument expected, got 'str'\r\n```\r\n\r\nThe fix is to prepend `u` to the strings in the following two lines:\r\n\r\n* https://github.com/antlr/antlr4/blob/b2d67261f29ec87a3bde19d738b13840a693581d/runtime/Python2/src/antlr4/error/ErrorStrategy.py#L487\r\n* https://github.com/antlr/antlr4/blob/b2d67261f29ec87a3bde19d738b13840a693581d/runtime/Python2/src/antlr4/error/ErrorStrategy.py#L494\r\n\r\n`tokenText = u\"...\"`\r\n\r\nNow `node.getText()` will no longer throw an error and the error token text will show up in the result.\r\n\r\nThanks for your consideration.", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {}, "title": "Python 2 Target's ErrorStrategy Creates Problematic Tokens", "statsSkippedReason": "", "closed": "2016-12-13 18:37:03", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-13 10:37:03", "commitHash": "65982518eff5d5736df8633d58647eab55cb38e2", "commitParents": ["ec5f2ecf311510bb21f973413f4d06368026965a", "e15e88a049c54cc6465069257b2de0d1e70df1ef"], "commitGHEventType": "referenced", "nameRev": "65982518eff5d5736df8633d58647eab55cb38e2 tags/4.6-rc1~14", "commitGitStats": [{"insertions": 2, "lines": 4, "filePath": "runtime/Python2/src/antlr4/error/ErrorStrategy.py", "deletions": 2}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #1499 from ericvergnaud/fix-#1496\n\nfix unicode issue in Python 2", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-13 10:37:03"}], "created": "2016-12-12 21:13:09"}, {"labels": ["atn-analysis", "comp:runtime", "status:cannot-reproduce", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1480", "title": "getExpectedTokens() doesn't get all tokens from FOLLOW set", "closed": "2016-12-10 18:34:37", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2016-12-10 17:49:23", "user": "parrt", "body": "This bug was originally posted as a bug that got converted into a feature request: https://github.com/antlr/antlr4/issues/1428\r\n\r\nAt the ATN state following the recognition of `ID` after input `( x`, `getExpectedTokens()` should return {`)`, `+`}, but it only returns {`+`}.\r\n```\r\nexpr : '(' expr ')'\r\n       | expr '+' expr\r\n       | ID\r\n       ;\r\n```"}, {"labels": ["grammars", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1402", "title": "Prefix rules that also recurse are not detected", "closed": "2016-11-24 20:59:24", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2016-11-24 20:36:40", "user": "sharwell", "body": "In a left-recursive rule `expr`, alternatives like the following are not detected as \"prefix\" form.\r\n\r\n```\r\n'(' expr ')' expr\r\n```\r\n\r\nWhen the LR rule is rewritten, both of these references have precedence 0. It was expected that the reference on the right edge would be given a precedence greater than zero according to the precedence hierarchy for the rule."}, {"labels": ["target:go", "type:bug"], "filteredCommits": [], "url": "https://github.com/antlr/antlr4/issues/1397", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"3ccb8279bf977dea51cab3ff918fed1a4d6c6574": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 8.000277777777777, "user": "ereyes01", "changesInPackagesGIT": [], "body": " Before submitting an issue to ANTLR, please check off these boxes:\r\n \r\n- [*] I am not submitting a question on how to use ANTLR; instead, go to [antlr4-discussion google group](https://groups.google.com/forum/#!forum/antlr-discussion) or ask at [stackoverflow](http://stackoverflow.com/questions/tagged/antlr4)\r\n- [*] I have done a search of the existing issues to make sure I'm not sending in a duplicate\r\n\r\n### Expected behavior\r\n\r\n`antlr4 -Dlanguage=Go Java.g4` should generate Go code that compiles. Java.g4 was taken from github.com/antlr/grammars-v4\r\n\r\nOther info:\r\n\r\nantlr4 command is: `alias antlr4='java -Xmx500M -cp \"/home/ereyes/.m2/repository/org/antlr/antlr4/4.6-SNAPSHOT/antlr4-4.6-SNAPSHOT.jar:$CLASSPATH\" org.antlr.v4.Tool'`\r\n\r\n```\r\n$ go version\r\ngo version go1.7.1 linux/amd64\r\n```\r\n\r\n### Actual behavior\r\n\r\nThe generated code does not compile. Here's what the Go compiler says:\r\n\r\n```\r\n$ go install ./\r\n# /home/ereyes/code/antlr4-java/parser\r\n./java_lexer.go:726: syntax error: unexpected _input, expecting comma or )\r\n./java_lexer.go:739: syntax error: unexpected _input, expecting comma or )\r\n```\r\n\r\n### Steps to reproduce the behavior\r\n\r\n```\r\n$ cd ~/code\r\n$ git clone https://github.com/antlr/grammars-v4\r\n$ mkdir -p antlr4-java/src/parser\r\n$ export GOPATH=$HOME/code/antlr4-java\r\n$ cd antlr4-java/src/parser\r\n$ cp ~/code/grammars-v4/java/Java.g4 ./\r\n$ antlr4 -Dlanguage=Go Java.g4\r\n$ go get github.com/antlr/antlr4/runtime/Go/antlr\r\n$ go install ./\r\n```\r\n\r\nI looked at the error and attempted to fix by applying the patch below, but it still doesn't fix the problem:\r\n\r\n```\r\ndiff --git a/java_lexer.go b/java_lexer.go\r\nindex b7b70c6..4b5114f 100644\r\n--- a/java_lexer.go\r\n+++ b/java_lexer.go\r\n@@ -723,7 +723,7 @@ func (p *JavaLexer) JavaLetter_Sempred(localctx antlr.RuleContext, predIndex int\r\n \t\t\treturn Character.isJavaIdentifierStart(_input.LA(-1))\r\n \r\n \tcase 1:\r\n-\t\t\treturn Character.isJavaIdentifierStart(Character.toCodePoint((char)_input.LA(-2), (char)_input.LA(-1)))\r\n+\t\t\treturn Character.isJavaIdentifierStart(Character.toCodePoint((char)(_input.LA(-2)), (char)(_input.LA(-1))))\r\n \r\n \tdefault:\r\n \t\tpanic(\"No predicate with index: \" + fmt.Sprint(predIndex))\r\n@@ -736,7 +736,7 @@ func (p *JavaLexer) JavaLetterOrDigit_Sempred(localctx antlr.RuleContext, predIn\r\n \t\t\treturn Character.isJavaIdentifierPart(_input.LA(-1))\r\n \r\n \tcase 3:\r\n-\t\t\treturn Character.isJavaIdentifierPart(Character.toCodePoint((char)_input.LA(-2), (char)_input.LA(-1)))\r\n+\t\t\treturn Character.isJavaIdentifierPart(Character.toCodePoint((char)(_input.LA(-2)), (char)(_input.LA(-1))))\r\n \r\n \tdefault:\r\n \t\tpanic(\"No predicate with index: \" + fmt.Sprint(predIndex))\r\n\r\n```\r\n\r\n... I tried to fix the parentheses in the cast in java_lexer.go. I also wondered if the intention was to cast to `rune` instead of  char, which isn't a built-in type in Go. Anyways, here are the compiler errors after applying this patch:\r\n\r\n```\r\n./java_lexer.go:723: undefined: Character in Character.isJavaIdentifierStart\r\n./java_lexer.go:723: undefined: _input in _input.LA\r\n./java_lexer.go:726: undefined: Character in Character.isJavaIdentifierStart\r\n./java_lexer.go:726: undefined: char\r\n./java_lexer.go:726: undefined: _input in _input.LA\r\n./java_lexer.go:726: undefined: char\r\n./java_lexer.go:726: undefined: _input in _input.LA\r\n./java_lexer.go:736: undefined: Character in Character.isJavaIdentifierPart\r\n./java_lexer.go:736: undefined: _input\r\n./java_parser.go:14393: no new variables on left side of :=\r\n./java_lexer.go:736: too many errors\r\n```\r\n\r\n... and after changing `char` to `rune`:\r\n\r\n```\r\n./java_lexer.go:723: undefined: Character in Character.isJavaIdentifierStart\r\n./java_lexer.go:723: undefined: _input in _input.LA\r\n./java_lexer.go:726: undefined: Character in Character.isJavaIdentifierStart\r\n./java_lexer.go:726: undefined: _input in _input.LA\r\n./java_lexer.go:736: undefined: Character in Character.isJavaIdentifierPart\r\n./java_lexer.go:736: undefined: _input in _input.LA\r\n./java_lexer.go:739: undefined: Character in Character.isJavaIdentifierPart\r\n./java_lexer.go:739: undefined: _input in _input.LA\r\n./java_parser.go:14393: no new variables on left side of :=\r\n```", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {}, "title": "Go target generated code for Java.g4 grammar doesn't compile", "statsSkippedReason": "", "closed": "2016-12-01 18:49:11", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-01 10:48:18", "commitHash": "3ccb8279bf977dea51cab3ff918fed1a4d6c6574", "commitParents": ["aff8cba61ab89cbf5647bba63e706f2f14ae30be", "f00e346ccdf3f36299e40a1b36c9649a211c9fc2"], "commitGHEventType": "referenced", "nameRev": "3ccb8279bf977dea51cab3ff918fed1a4d6c6574 tags/4.6-rc1~61", "commitGitStats": [{"insertions": 10, "lines": 12, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/Go/Go.stg", "deletions": 2}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #1436 from pboyer/patch-5\n\nFix for #1397", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-01 10:48:18"}], "created": "2016-11-22 23:08:29"}, {"labels": ["comp:build", "comp:doc", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1381", "title": "mvn compile failing. Could not resolve dependencies", "closed": "2016-11-21 19:45:27", "commitsDetails": [], "commits": {}, "ttf": 1.0002777777777778, "created": "2016-11-20 15:50:27", "user": "bodymindarts", "body": "Just trying to compile antlr locally on MacOS Sierra 10.12.1 following [this doc](https://github.com/antlr/antlr4/blob/master/doc/building-antlr.md).\r\nThis is the end of the `mvn compile` run:\r\n```\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Building ANTLR 4 Tool Tests 4.6-SNAPSHOT\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Reactor Summary:\r\n[INFO]\r\n[INFO] ANTLR 4 ............................................ SUCCESS [  0.759 s]\r\n[INFO] ANTLR 4 Runtime .................................... SUCCESS [  5.714 s]\r\n[INFO] ANTLR 4 Tool ....................................... SUCCESS [  1.896 s]\r\n[INFO] ANTLR 4 Maven plugin ............................... SUCCESS [  2.277 s]\r\n[INFO] ANTLR 4 Runtime Test Annotations ................... SUCCESS [  0.014 s]\r\n[INFO] ANTLR 4 Runtime Test Processors .................... SUCCESS [  0.014 s]\r\n[INFO] ANTLR 4 Runtime Tests (2nd generation) ............. SUCCESS [  1.357 s]\r\n[INFO] ANTLR 4 Tool Tests ................................. FAILURE [  0.018 s]\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] BUILD FAILURE\r\n[INFO] ------------------------------------------------------------------------\r\n[INFO] Total time: 12.323 s\r\n[INFO] Finished at: 2016-11-20T16:42:17+01:00\r\n[INFO] Final Memory: 38M/431M\r\n[INFO] ------------------------------------------------------------------------\r\n[ERROR] Failed to execute goal on project antlr4-tool-testsuite: Could not resolve dependencies for project org.antlr:antlr4-tool-testsuite:jar:4.6-SNAPSHOT: The following artifacts could not be resolved: org.antlr:antlr4-runtime-testsuite:jar:tests:4.6-SNAPSHOT, org.antlr:antlr4:jar:tests:4.6-SNAPSHOT: Failure to find org.antlr:antlr4-runtime-testsuite:jar:tests:4.6-SNAPSHOT in https://oss.sonatype.org/content/repositories/snapshots was cached in the local repository, resolution will not be reattempted until the update interval of sonatype-nexus-snapshots has elapsed or updates are forced -> [Help 1]\r\n[ERROR]\r\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\r\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\r\n[ERROR]\r\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\r\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/DependencyResolutionException\r\n[ERROR]\r\n[ERROR] After correcting the problems, you can resume the build with the command\r\n[ERROR]   mvn <goals> -rf :antlr4-tool-testsuite\r\n```\r\n\r\nAll help apreciated"}, {"labels": ["atn-analysis", "type:bug"], "filteredCommits": ["125a509e4e389d839a67254844c73d5a74f1e49e"], "url": "https://github.com/antlr/antlr4/issues/1369", "gitStatsSummary": {"insertions": 12, "gitFilesChange": 1, "lines": 22, "deletions": 10}, "numCommits": 1, "commits": {"125a509e4e389d839a67254844c73d5a74f1e49e": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "parrt", "changesInPackagesSPOON": ["org.antlr.v4.runtime.atn.ATNState.addTransition(int,org.antlr.v4.runtime.atn.Transition)"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime/atn"], "body": "See `TestATNConstruction.testForRepeatedTransitionsToStopState()`. This grammar yields extra (repeated) transitions to block end states:\r\n\r\n```\r\ngrammar T;\r\ns : e EOF;\r\ne :<assoc=right> e '*' e\r\n  |<assoc=right> e '+' e\r\n  |<assoc=right> e '?' e ':' e\r\n  |<assoc=right> e '=' e\r\n  | ID\r\n  ;\r\nID : 'a'..'z'+ ;\r\nWS : (' '|'\\n') -> skip ;\r\n```\r\n\r\nThe ATNPrinter shows repeats:\r\n\r\n```\r\nRuleStop_e_3->BlockEnd_26\r\nRuleStop_e_3->BlockEnd_26\r\n...\r\nRuleStop_e_3->BlockEnd_26\r\n```\r\n\r\nIt looks to be the FOLLOW edges emanating from `e`'s stop state 3 to right edges of block alts to state 26. could really slow down closure that falls off end of rule.\r\n\r\n<img width=\"1456\" alt=\"screen shot 2016-11-17 at 12 30 11 pm\" src=\"https://cloud.githubusercontent.com/assets/178777/20406344/d5e907f6-acc1-11e6-83d2-991560fd3f72.png\">\r\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 0}, "title": "Repeated epsilon transitions in ATN from left-recursive grammar", "statsSkippedReason": "", "closed": "2016-11-17 20:41:49", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-11-17 12:41:32", "commitHash": "125a509e4e389d839a67254844c73d5a74f1e49e", "commitParents": ["1aa3c957ebb6f7060decbd78a1be62c67da2619c"], "commitGHEventType": "closed", "nameRev": "125a509e4e389d839a67254844c73d5a74f1e49e tags/4.6-rc1~138", "commitGitStats": [{"insertions": 12, "lines": 22, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/ATNState.java", "deletions": 10}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.ATNState.addTransition(int,org.antlr.v4.runtime.atn.Transition)"}], "spoonFilePath": "ATNState.java"}], "commitMessage": "Fixes #1369 by removing any redundant edges.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-17 12:41:32"}], "created": "2016-11-17 20:25:28"}, {"labels": ["target:java", "type:bug"], "filteredCommits": ["883e013cc6a6202b34545f465e3ed80e24f2da04"], "url": "https://github.com/antlr/antlr4/issues/1318", "gitStatsSummary": {"insertions": 2, "gitFilesChange": 1, "lines": 3, "deletions": 1}, "numCommits": 1, "commits": {"883e013cc6a6202b34545f465e3ed80e24f2da04": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 16.00027777777778, "user": "sharwell", "changesInPackagesSPOON": ["org.antlr.v4.runtime.misc.Array2DHashSet", "org.antlr.v4.runtime.misc.Array2DHashSet.clear()"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime/misc"], "body": "Currently the implementation of `Array2DHashSet.clear` does not set the value of the `threshold` field. If one of these sets is reused after calling `clear()`, it's likely that a large number of hash collisions will occur when the set is used again.", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 3, "DEL": 0, "INS": 2, "spoonFilesChanged": 1, "MOV": 1}, "title": "Array2DHashSet.clear does not reset threshold", "statsSkippedReason": "", "closed": "2016-11-20 00:14:32", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-11-19 16:13:50", "commitHash": "883e013cc6a6202b34545f465e3ed80e24f2da04", "commitParents": ["34f0c66a89abfa6d843c34d2f5ed9478a0ed7ef5"], "commitGHEventType": "closed", "nameRev": "883e013cc6a6202b34545f465e3ed80e24f2da04 tags/4.6-rc1~109", "commitGitStats": [{"insertions": 2, "lines": 3, "filePath": "runtime/Java/src/org/antlr/v4/runtime/misc/Array2DHashSet.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.runtime.misc.Array2DHashSet"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.misc.Array2DHashSet.clear()"}], "spoonFilePath": "Array2DHashSet.java"}], "commitMessage": "Fixes #1318.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-19 16:13:50"}], "created": "2016-11-03 20:37:50"}, {"labels": ["comp:tool", "type:bug"], "filteredCommits": ["4e6e7edf0ddb06523391c3e644a5c6cfb507518d"], "url": "https://github.com/antlr/antlr4/issues/1317", "gitStatsSummary": {"insertions": 5, "gitFilesChange": 1, "lines": 5, "deletions": 0}, "numCommits": 1, "commits": {"c7a68514b571bbf49440972e4841817c749cdf52": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "4e6e7edf0ddb06523391c3e644a5c6cfb507518d": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 18.00027777777778, "user": "Nulleye", "changesInPackagesSPOON": ["org.antlr.v4.tool.Grammar.loadImportedGrammars()"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/tool"], "body": "I can't use the complete 4.5.3 jar as the \"ANTLR tool\" in Eclipse, the jar manifest seems to be incorrect, \r\nI can use the 4.5 jar with no problems.\r\n\r\nHowever, my problem is, If I define a lexer and a composed grammar with multiple related grammar files, to avoid error and warning tips to appear in Eclipse, I have to put \"imports \" to lexer and related grammar files in every grammar file, but If I do that, I get this error on every file:\r\n\r\nException in thread \"main\" java.lang.StackOverflowError\r\n\tat org.antlr.v4.Tool.loadImportedGrammar(Tool.java:618)\r\n\tat org.antlr.v4.tool.Grammar.loadImportedGrammars(Grammar.java:399)\r\n\tat org.antlr.v4.tool.Grammar.loadImportedGrammars(Grammar.java:413)\r\n... many repeated lines ...\r\n\tat org.antlr.v4.tool.Grammar.loadImportedGrammars(Grammar.java:413)\r\n\tat org.antlr.v4.tool.Grammar.loadImportedGrammars(Grammar.java:413)\r\n\r\nBUILD SUCCESSFUL\r\nTotal time: 8 second(s)\r\n\r\nBut If I put the import only in the main grammar file it builds fine, but then I get many error tips everywhere.\r\n\r\nThis happen also in 4.5 and 4.2 complete jar.\r\nWhat I'm doing wrong?\r\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "spoonFilesChanged": 1, "MOV": 0}, "title": "ANTLR 4.5.3 & java.lang.StackOverflowError", "statsSkippedReason": "", "closed": "2016-11-21 21:47:09", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-11-21 13:47:08", "commitHash": "c7a68514b571bbf49440972e4841817c749cdf52", "commitParents": ["39ddd0da3a503fe96e94f1a01558384b14c7a36e", "4e6e7edf0ddb06523391c3e644a5c6cfb507518d"], "commitGHEventType": "referenced", "nameRev": "c7a68514b571bbf49440972e4841817c749cdf52 tags/4.6-rc1~98", "commitGitStats": [{"insertions": 13, "lines": 14, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestCompositeGrammars.java", "deletions": 1}, {"insertions": 5, "lines": 5, "filePath": "tool/src/org/antlr/v4/tool/Grammar.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestCompositeGrammars.testImportSelfLoop()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestCompositeGrammars.testImportFileLocationInSubdir()"}], "spoonFilePath": "TestCompositeGrammars.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.Grammar.loadImportedGrammars()"}], "spoonFilePath": "Grammar.java"}], "commitMessage": "Merge pull request #1384 from parrt/fix-1317\n\nFixes #1317", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-21 13:47:08"}, {"commitUser": "parrt", "commitDateTime": "2016-11-21 13:45:05", "commitHash": "4e6e7edf0ddb06523391c3e644a5c6cfb507518d", "commitParents": ["39ddd0da3a503fe96e94f1a01558384b14c7a36e"], "commitGHEventType": "closed", "nameRev": "4e6e7edf0ddb06523391c3e644a5c6cfb507518d tags/4.6-rc1~98^2", "commitGitStats": [{"insertions": 13, "lines": 14, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestCompositeGrammars.java", "deletions": 1}, {"insertions": 5, "lines": 5, "filePath": "tool/src/org/antlr/v4/tool/Grammar.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestCompositeGrammars.testImportSelfLoop()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestCompositeGrammars.testImportFileLocationInSubdir()"}], "spoonFilePath": "TestCompositeGrammars.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.Grammar.loadImportedGrammars()"}], "spoonFilePath": "Grammar.java"}], "commitMessage": "Fixes #1317\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-21 13:45:05"}], "created": "2016-11-03 16:05:27"}, {"labels": ["target:csharp", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1312", "title": "returns directive generates improper C# code ", "closed": "2016-12-14 15:59:27", "commitsDetails": [], "commits": {}, "ttf": 48.000277777777775, "created": "2016-10-27 09:52:49", "user": "GDimitroulakos", "body": "Hi \r\n\r\nI am testing one of the examples of book the The definitive ANTLR4 Reference which is in page 183-185.\r\nThe code i wrote is \r\n\r\n```\r\ngrammar Attr1;\r\n\r\n/*\r\n- Parser Rules\r\n  */\r\n\r\nfile\r\nlocals [int i=0]\r\n    :   hdr ( rows+=row[$hdr.text.Split(',')] {$i++;} )+\r\n    ;\r\n\r\nhdr : row[null]\r\n      ;\r\n\r\nrow [string[] columns] returns [Dictionary<string, string> values]\r\nlocals [int col=0]\r\n@init {\r\n    $values = new Dictionary<String,String>();\r\n}\r\n@after {\r\n    if ( $values!=null && $values.Count>0 ){\r\n        Console.WriteLine(\"values = \",$values);\r\n    }\r\n}\r\n    : field {\r\n            if ( $columns != null){\r\n                $values.Add($columns[$col++].Trim(),$field.text.Trim());\r\n            }\r\n        }\r\n    ( ',' field {\r\n            if ( $columns != null){\r\n                $values.Add($columns[$col++].Trim(),$field.text.Trim());\r\n            }\r\n        }\r\n\r\n```\r\n    )* '\\r'? '\\n'\r\n  ;\r\n```\r\n\r\nfield : TEXT\r\n        | STRING\r\n        ;\r\n\r\n/*\r\n- Lexer Rules\r\n  */\r\n\r\nTEXT : ~[,\\n\\r\"]+;\r\nSTRING : '\"' ('\"\"'|~'\"')\\* '\"';\r\n```\r\n\r\nThe problem is with the return directive of the \"row\" rule (returns [Dictionary<string,string> values]). It generates in Visual Studio 2015 the following improper code. I have already test a lot of things but it still doesn't work. In place of the \"values\" identifier for the Dictionary it generates a list of C#'s reserved words. This behaviour happens only for the identifier \"values\". If I use another name such as xxxx it works. Is it a bug or am I write something wrong in the grammar description?\r\n\r\n```\r\npublic partial class RowContext : ParserRuleContext {\r\n        public string[] columns;\r\n        public Dictionary<string,string> @struct@extern@do@ushort@float@while@operator@ref@protected@readonly@continue@else@checked@lock@catch@if@case@new@using@static@void@in@sizeof@byte@double@sealed@finally@this@unchecked@is@params@enum@explicit@as@null@true@fixed@try@decimal@object@implicit@internal@private@virtual@bool@const@string@for@interface@unsafe@long@out@switch@delegate@foreachkey@ulong@goto@public@stackalloc@override@event@class@typeof@break@false@volatile@abstract@uint@int@throw@char@namespace@sbyte@short@return@base;\r\n        public int col = 0;\r\n        public FieldContext _field;\r\n...\r\n```\r\n"}, {"labels": ["grammars", "status:cannot-reproduce", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1309", "title": "Grammar.getMaxTokenType() is wrong!", "closed": "2016-12-05 20:07:33", "commitsDetails": [], "commits": {}, "ttf": 47.000277777777775, "created": "2016-10-19 18:26:41", "user": "parrt", "body": "This is being used for two things: size and max token type. for size it's good. for max token type it is 1 too small!\n\n``` java\n    /** How many token types have been allocated so far? */\n    public int getMaxTokenType() {\n        return typeToTokenList.size() - 1; // don't count 0 (invalid)\n    }\n```\n\nNote that Recognizer.getTokenTypeMap() should refer to vocab get max type not `getATN().maxTokenType` anyway.\n\nI found this because i couldn't find the display name for last token type via vocabulary.\n"}, {"labels": ["comp:runtime", "error-handling", "trees-contexts", "type:bug"], "filteredCommits": ["b11ff9636aacd028f87a15e75b3927a0b7c67d20"], "url": "https://github.com/antlr/antlr4/issues/1299", "gitStatsSummary": {"insertions": 4, "gitFilesChange": 1, "lines": 5, "deletions": 1}, "numCommits": 1, "commits": {"ec5f2ecf311510bb21f973413f4d06368026965a": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "b11ff9636aacd028f87a15e75b3927a0b7c67d20": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 70.00027777777778, "user": "marcospassos", "changesInPackagesGIT": ["tool/resources/org/antlr/v4/tool/templates/codegen/Java/Java.stg"], "body": "I found a case where the parser is marking matched tokens found inside error nodes as an error. For instance, given the malformed expression `1 * 2 +++`, this is the resulting tree:\n\n![antlr4_parse_tree](https://cloud.githubusercontent.com/assets/943036/19059272/fbd9c52a-89b4-11e6-96f1-58314aa28204.png)\n\nHowever, it's the expected tree:\n\n![image](https://cloud.githubusercontent.com/assets/943036/19059287/224132f2-89b5-11e6-951c-0e456d91f5ce.png)\n\nNotice that the operators `+` are being marked as an error in the first tree, although they have being recognized as operators. \n\nIt worth noting that the former tree was generated using the TestRig, while the latter is a screenshot of the tree generated in the IntelliJ plugin. This issue is most likely related to antlr/intellij-plugin-v4#180.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {}, "title": "Matched tokens being marked as error", "statsSkippedReason": "", "closed": "2016-12-13 16:30:50", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-13 08:30:49", "commitHash": "ec5f2ecf311510bb21f973413f4d06368026965a", "commitParents": ["a69299c507c336722b7ab5093b24957f724700e2", "068a13e0f8e1ea3239f956b4c11cf6933f690624"], "commitGHEventType": "referenced", "nameRev": "ec5f2ecf311510bb21f973413f4d06368026965a tags/4.6-rc1~15", "commitGitStats": [{"insertions": 1, "lines": 1, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/Python3/Python3.stg", "deletions": 0}, {"insertions": 2, "lines": 3, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/Go/Go.stg", "deletions": 1}, {"insertions": 1, "lines": 1, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/JavaScript/JavaScript.stg", "deletions": 0}, {"insertions": 3, "lines": 4, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/Swift/Swift.stg", "deletions": 1}, {"insertions": 3, "lines": 4, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/Cpp/Cpp.stg", "deletions": 1}, {"insertions": 4, "lines": 5, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/Java/Java.stg", "deletions": 1}, {"insertions": 1, "lines": 1, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/Python2/Python2.stg", "deletions": 0}, {"insertions": 1, "lines": 1, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/CSharp/CSharp.stg", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #1498 from parrt/fix-1299\n\nFixes #1299. matching a set didn't properly notify error strategy of a successful match", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-13 08:30:49"}, {"commitUser": "parrt", "commitDateTime": "2016-12-12 17:54:53", "commitHash": "b11ff9636aacd028f87a15e75b3927a0b7c67d20", "commitParents": ["2739a0c9efb3f74d10f4b23553c0b984fa07b1e1"], "commitGHEventType": "closed", "nameRev": "b11ff9636aacd028f87a15e75b3927a0b7c67d20 tags/4.6-rc1~15^2~1", "commitGitStats": [{"insertions": 4, "lines": 5, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/Java/Java.stg", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Fixes #1299. matching a set didn't properly notify error strategy of a successful match.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-12 17:54:53"}], "created": "2016-10-04 01:14:50"}, {"labels": ["error-handling", "trees-contexts", "type:bug"], "filteredCommits": ["eb8e2890c3eec1346b5e547f8269d1bcbef7a031"], "url": "https://github.com/antlr/antlr4/issues/1298", "gitStatsSummary": {"insertions": 22, "gitFilesChange": 2, "lines": 24, "deletions": 2}, "numCommits": 1, "commits": {"eb8e2890c3eec1346b5e547f8269d1bcbef7a031": {"commitUser": "parrt", "commitGHEventType": "closed"}, "6a20919cb7dddb526d9215ccf740cc1678886fd8": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "fd3bd918287b6d2b6cc740d3839ecb09d825c351": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "e279cd699e2256bc6e715662148d51635bca97f0": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "3cbc2af0cc1f1c97f518b11b74294fa9cce05078": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 70.00027777777778, "user": "lionelplessis", "changesInPackagesSPOON": ["org.antlr.v4.test.runtime.descriptors.ParseTreesDescriptors.ExtraTokensShouldBeInTree", "org.antlr.v4.runtime.ParserRuleContext.copyFrom(org.antlr.v4.runtime.ParserRuleContext)"], "changesInPackagesGIT": ["runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors", "runtime/Java/src/org/antlr/v4/runtime"], "body": "Hi there,\n\nWhen single-token deletion kicks in and skips a token in a rule with alternative labels (it entered the rule but didn't find the alternative yet) the error node that is created is not attached to the parse tree. If the extra token is present after a valid rule alternative is found then the error node representing the token is correctly present in the parse tree.\n\nThis is due to the ParseRuleContext.CopyFrom method not copying children (at least error nodes). \nSee the comments on the generated code:\n\n``` java\nprivate VariableExprContext variableExpr(int _p) throws RecognitionException {\n   ParserRuleContext _parentctx = _ctx;\n   int _parentState = getState();\n   VariableExprContext _localctx = new VariableExprContext(_ctx, _parentState); // Base class of alt rule with labels (correct alt not found yet).\n   VariableExprContext _prevctx = _localctx;\n   int _startState = 6;\n   enterRecursionRule(_localctx, 6, RULE_variableExpr, _p);\n   int _la;\n   try {\n      int _alt;\n      enterOuterAlt(_localctx, 1);\n      {\n      setState(36);\n      _errHandler.sync(this); // Single-token deletion skips extra token and adds an error node to the children of _localctx (VariableExprContext).\n      switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {  // A valid alternative is found.\n      case 1:\n         {\n         _localctx = new LiteralExprContext(_localctx); // Simple fields(properties are copied here but not children (which include the sinlge-token deletion error node).\n         _ctx = _localctx;\n         _prevctx = _localctx;\n\n         setState(33);\n         literal();\n         }\n         break;\n```\n\nSome more context and a concrete example:\nWe are using Antlr 4.5.3 to build a proper grammar/parser for an existing template engine. Target languages are C# and java but we have been working mainly with C# so far. We have both a lexer and parser files to use Antlr modes.\nWe are writing and testing the grammar using the Antlr plugin for IntelliJ. Note that for this issue the **IntelliJ plugin is misleading** as it shows the missing error node in the tree which is not the case for the TestRig (-gui) (parse tree vs listener issue??).\n\nIn our template engine, dynamic expressions in text must be inside _${_ expr _}_ . Expressions mainly support basic operators, a few functions, identifiers and number literals. Our lexer file has a catch-all rule to match any unrecognized character and we skip (hidden channel) whitespace characters.\n\nSo expression _${abc}_ is valid. Expression _${ ? abc ? }_ with 2 single invalid '?' tokens before and after a valid labeled alternative produces a parse tree without the error node for the first token.\nSee the tree for _${ ? abc ? }_ :\n![java_2016-09-29_15-46-58](https://cloud.githubusercontent.com/assets/8976496/18983850/83c95130-86ef-11e6-98e2-d2c20b94bead.png)\n\nPlease note that to reproduce the issue with this simpler version of our grammar I had to generate it with the -xForce-atn option, otherwise it was generating LL1 code which doesn't call _errHandler.sync(this) before finding alternative (see the string template for C# extracts below for LL1 and LL_). Which leads me to another issue/question: *_why does LL1 generated code not do single-token deletion?**\n\nhttps://github.com/antlr/antlr4/blob/master/tool/resources/org/antlr/v4/tool/templates/codegen/CSharp/CSharp.stg\nLine 597\n\n```\n// LL(*) stuff\nAltBlock(choice, preamble, alts, error) ::= <<\nState = <choice.stateNumber>;\nErrorHandler.Sync(this); // CALLING THE ERROR RECOVERY STRATEGY?\n<if(choice.label)><labelref(choice.label)> = TokenStream.Lt(1);<endif>\n<preamble; separator=\"\\n\">\nswitch ( Interpreter.AdaptivePredict(TokenStream,<choice.decision>,Context) ) {\n<alts:{alt |\ncase <i>:\n<alt>\nbreak;}; separator=\"\\n\">\n}\n>>\n```\n\nLine 538\n\n```\nLL1AltBlock(choice, preamble, alts, error) ::= <<\nState = <choice.stateNumber>; // NO CALL TO ErrorHandler.Sync(this);\n<if(choice.label)><labelref(choice.label)> = TokenStream.Lt(1);<endif>\n<preamble; separator=\"\\n\">\nswitch (TokenStream.La(1)) {\n<choice.altLook,alts:{look,alt| <cases(ttypes=look)>\n<alt>\nbreak;}; separator=\"\\n\">\ndefault:\n<error>\n}\n>>\n```\n\nOne more issue/question: if no rule alternative is found (e.g. with _${???}_ ), the node that will be created on the parse tree will be of type \"alternative\" base class (here VariableExprContext). But there is no overload in the generated visitor to visit this class. I understand it could be a bit confusing at first but still I think it makes sense to have it (or find a way to make this base class abstract which could solve both the visitor and missing node issues).\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 4}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 2, "TOT": 3, "DEL": 0, "INS": 1, "spoonFilesChanged": 2, "MOV": 0}, "title": "Single-token deletion error node not in parse tree", "statsSkippedReason": "", "closed": "2016-12-09 23:31:09", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-09 11:10:26", "commitHash": "eb8e2890c3eec1346b5e547f8269d1bcbef7a031", "commitParents": ["53918ab41e78632e80bda8aadff5926a9c7ad4fd"], "commitGHEventType": "closed", "nameRev": "eb8e2890c3eec1346b5e547f8269d1bcbef7a031 tags/4.6-rc1~41^2~1", "commitGitStats": [{"insertions": 1, "lines": 1, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/BaseRuntimeTest.java", "deletions": 0}, {"insertions": 2, "lines": 4, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/ParseTreesDescriptors.java", "deletions": 2}, {"insertions": 20, "lines": 20, "filePath": "runtime/Java/src/org/antlr/v4/runtime/ParserRuleContext.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.runtime.descriptors.ParseTreesDescriptors.ExtraTokensShouldBeInTree"}], "spoonFilePath": "ParseTreesDescriptors.java"}, {"spoonMethods": [], "spoonFilePath": "BaseRuntimeTest.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.ParserRuleContext.copyFrom(org.antlr.v4.runtime.ParserRuleContext)"}], "spoonFilePath": "ParserRuleContext.java"}], "commitMessage": "copyFrom copies error nodes over. Fixes #1298\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-09 11:10:26"}, {"commitUser": "parrt", "commitDateTime": "2016-12-11 14:49:28", "commitHash": "6a20919cb7dddb526d9215ccf740cc1678886fd8", "commitParents": ["c7e27664c25ebeb3158b9b3ce355f774bd3b0c1b", "58d51450d48becfb8fb77e98cb26955c25f9b4e1"], "commitGHEventType": "referenced", "nameRev": "6a20919cb7dddb526d9215ccf740cc1678886fd8 tags/4.6-rc1~26", "commitGitStats": [{"insertions": 18, "lines": 18, "filePath": "runtime/Python3/src/antlr4/ParserRuleContext.py", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/ParseTreesDescriptors.java", "deletions": 1}, {"insertions": 18, "lines": 18, "filePath": "runtime/Python2/src/antlr4/ParserRuleContext.py", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.runtime.descriptors.ParseTreesDescriptors.ExtraTokensAndAltLabels.ignore(java.lang.String)"}], "spoonFilePath": "ParseTreesDescriptors.java"}], "commitMessage": "Merge pull request #1476 from renatahodovan/python-target-1472\n\nImplement the fix of #1298 for Python targets.", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-11 14:49:28"}, {"commitUser": "parrt", "commitDateTime": "2016-12-14 13:25:27", "commitHash": "fd3bd918287b6d2b6cc740d3839ecb09d825c351", "commitParents": ["8b75e3fc5bd28e5ee45fb30531c4ee762250c02e", "0c835a248aa1272e7cd79be588993fbf1583daf6"], "commitGHEventType": "referenced", "nameRev": "fd3bd918287b6d2b6cc740d3839ecb09d825c351 tags/4.6~7^2~1", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/ParseTreesDescriptors.java", "deletions": 1}, {"insertions": 12, "lines": 12, "filePath": "runtime/Swift/Antlr4/org/antlr/v4/runtime/ParserRuleContext.swift", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.runtime.descriptors.ParseTreesDescriptors.ExtraTokensAndAltLabels.ignore(java.lang.String)"}], "spoonFilePath": "ParseTreesDescriptors.java"}], "commitMessage": "Merge pull request #1508 from janyou/Fixes-1298\n\nFixes #1298 for Swift target", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-14 13:25:27"}, {"commitUser": "parrt", "commitDateTime": "2016-12-12 16:08:47", "commitHash": "e279cd699e2256bc6e715662148d51635bca97f0", "commitParents": ["b2d67261f29ec87a3bde19d738b13840a693581d", "caa581a9e015540f969faa533084a362e2bbcec2"], "commitGHEventType": "referenced", "nameRev": "e279cd699e2256bc6e715662148d51635bca97f0 tags/4.6-rc1~19", "commitGitStats": [{"insertions": 11, "lines": 11, "filePath": "runtime/JavaScript/src/antlr4/ParserRuleContext.js", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/ParseTreesDescriptors.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.runtime.descriptors.ParseTreesDescriptors.ExtraTokensAndAltLabels.ignore(java.lang.String)"}], "spoonFilePath": "ParseTreesDescriptors.java"}], "commitMessage": "Merge pull request #1494 from ericvergnaud/fix-#1298-for-JavaScript\n\nFix #1298 for JavaScript", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-12 16:08:47"}, {"commitUser": "parrt", "commitDateTime": "2017-02-13 10:29:47", "commitHash": "3cbc2af0cc1f1c97f518b11b74294fa9cce05078", "commitParents": ["ae5250685d1162357564bdab2a0165775413127b", "895681044e7575c8b6d22a3d49a4c6b3fcbcc1a3"], "commitGHEventType": "referenced", "nameRev": "3cbc2af0cc1f1c97f518b11b74294fa9cce05078 tags/4.7~112", "commitGitStats": [{"insertions": 28, "lines": 29, "filePath": "runtime/CSharp/runtime/CSharp/Antlr4.Runtime/ParserRuleContext.cs", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/ParseTreesDescriptors.java", "deletions": 1}, {"insertions": 2, "lines": 3, "filePath": "contributors.txt", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.runtime.descriptors.ParseTreesDescriptors.ExtraTokensAndAltLabels.ignore(java.lang.String)"}], "spoonFilePath": "ParseTreesDescriptors.java"}], "commitMessage": "Merge pull request #1655 from lionelplessis/fix-#1298-for-csharp\n\nFix #1298 for CSharp", "spoonStatsSkippedReason": "", "authoredDateTime": "2017-02-13 10:29:47"}], "created": "2016-09-30 08:01:46"}, {"labels": ["actions", "grammars", "type:bug"], "filteredCommits": ["ae1bc4cafe55f8397f949d96e4e102fdaa7cf77d"], "url": "https://github.com/antlr/antlr4/issues/1295", "gitStatsSummary": {"insertions": 6, "gitFilesChange": 1, "lines": 6, "deletions": 0}, "numCommits": 1, "commits": {"ae1bc4cafe55f8397f949d96e4e102fdaa7cf77d": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 54.000277777777775, "user": "harriman", "changesInPackagesSPOON": ["org.antlr.v4.test.runtime.descriptors.LeftRecursionDescriptors.MultipleAlternativesWithCommonLabel_5"], "changesInPackagesGIT": ["runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors"], "body": "The incorrect result can be seen in the Interactive Calculator example (actions/tools/Expr.g4) in chapter 10 of the ANTLR4 book, page 181, in which parenthesized expressions always yield 0. \n\nWhen a rule invokes itself recursively, and no label is used, incorrect code is generated when an action references either a variable returned by the recursive call, or any of the subexpression's predefined attributes `text`, `start`, `stop`, or `ctx`. The generated code refers to the current rule's context;  instead it should refer to the child's context. In the calculator example, `$e.v` incorrectly accesses `_localctx.v` (the field where the current rule should put its result, which is initially 0 if numeric or null if a reference type). Thus, the example action assigns the uninitialized field to itself. Instead it should access `_localctx.e.v` (the result from the recursive invocation).\n\nThe problem does not occur when the grammar assigns a label renaming the self-invocation - for example, it would be ok if changed to `'(' ee=e ')' {$v = $ee.v;} ;`    \n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 0}, "title": "$e.v yields incorrect value 0 in \"e returns [int v] : '1' {$v = 1;} | '(' e ')' {$v = $e.v;} ;\"", "statsSkippedReason": "", "closed": "2016-11-21 22:17:11", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-11-19 12:48:09", "commitHash": "ae1bc4cafe55f8397f949d96e4e102fdaa7cf77d", "commitParents": ["d0620a65f5b147a91ae408d62818f1f5dc3aca4b"], "commitGHEventType": "referenced", "nameRev": "ae1bc4cafe55f8397f949d96e4e102fdaa7cf77d tags/4.6-rc1~128^2", "commitGitStats": [{"insertions": 6, "lines": 6, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/LeftRecursionDescriptors.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.runtime.descriptors.LeftRecursionDescriptors.MultipleAlternativesWithCommonLabel_5"}], "spoonFilePath": "LeftRecursionDescriptors.java"}], "commitMessage": "add new test for all runtimes for issue #1295\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-19 12:48:09"}], "created": "2016-09-28 04:21:29"}, {"labels": ["target:javascript", "type:bug"], "filteredCommits": ["ace7758f6e73f5d556f373445728bee6f0072f89"], "url": "https://github.com/antlr/antlr4/issues/1280", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"ace7758f6e73f5d556f373445728bee6f0072f89": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 69.00027777777778, "user": "shds86", "changesInPackagesGIT": ["runtime/JavaScript/src/antlr4/PredictionContext.js"], "body": "Hi.\nI searched  some ways for optimization in ANTLR for JavaScript and found one strange line in code:\nhttps://github.com/antlr/antlr4/blob/d0fb48c2b89128158950f4b32a61d50d52d981ea/runtime/JavaScript/src/antlr4/PredictionContext.js#L191\nI researched like SingletonPredictionContext class implemented. I don't sure but SingletonPredictionContext doesn't have property EMPTY_RETURN_STATE always because PredictionContext.call(this, hashString); (https://github.com/antlr/antlr4/blob/d0fb48c2b89128158950f4b32a61d50d52d981ea/runtime/JavaScript/src/antlr4/PredictionContext.js#L136) doesn't give this property to SingletonPredictionContext. <function>.call(this,...) doesn't translate properties from prototype to children. Need to use Object.create or PredictionContext.EMPTY_RETURN_STATE in line 191 for this.\n\nDoes it a bug or mistake or typo?\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Strange code in JavaScript - PredictionContext.js line 191", "statsSkippedReason": "", "closed": "2016-11-22 20:49:43", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-11-22 12:49:24", "commitHash": "ace7758f6e73f5d556f373445728bee6f0072f89", "commitParents": ["aeaba48a0bc5351e0ee414f718dabf748ad36c6c"], "commitGHEventType": "closed", "nameRev": "ace7758f6e73f5d556f373445728bee6f0072f89 tags/4.6-rc1~89", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/JavaScript/src/antlr4/PredictionContext.js", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Fixes #1280\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-22 12:47:49"}], "created": "2016-09-14 07:34:18"}, {"labels": ["target:python3", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1265", "title": "A bug of the antlr4 python3 runtime 4.5.3", "closed": "2016-12-10 00:05:28", "commitsDetails": [], "commits": {}, "ttf": 115.00027777777778, "created": "2016-08-16 08:32:12", "user": "yagweb", "body": "In the file IntervalSet.py, the statement at line 147 is,\n     _i.start = v + 1_.\nIn which the variable _i_ is of type _range_, so its member _start_ is readonly.\nMaybe it can be replaced by, \n    _self.intervals[self.intervals.index(i)] = range(v + 1, i.stop)._\n"}, {"labels": ["cross-platform-issue", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1258", "title": "Many tests failing on Windows due to invalid paths", "closed": "2016-09-23 20:18:33", "commitsDetails": [], "commits": {}, "ttf": 43.000277777777775, "created": "2016-08-11 01:18:49", "user": "BurtHarris", "body": "Updated:   I'm retitling this issue to reflect the fact it was a bug and not just lack of understanding.  See PR #1268 for details on the bug.   \n\nI'm trying to setup so I can contribute to the antlr project by follow the instructions for building antlr4 from sources on a Windows 10 machine.   I initially started with [How-to-build-ANTLR-itself](https://github.com/antlr/antlr4/wiki/How-to-build-ANTLR-itself), but that page seems hopelessly out-of-date, referencing python scripts bild.py etc.   The separate page [building-antlr](https://github.com/antlr/antlr4/blob/d0fb48c2b89128158950f4b32a61d50d52d981ea/doc/building-antlr.md) seem more up-to-date (perhaps the older one should be deleted.)\n\nI think I've installed all the needed pre-requisites (including JDK 1.8.0_101, Maven 3.3.9, node.js v6.3.1 and mono 4.4.42.  None-the-less while compile succeeds, many tests in Java and the mono/c# are failing.  While I'm a long-time C# dev, I'm used to Microsoft's tools, and both mono and Java are a bit unfamiliar to me.   I'm hoping I can get someone to review the test failures and give me a hint how to address them.\n\n**UPDATE: some of the problem may have been due to having Pythong 2.7 rather than 3.5 installed.** _Can someone please help out with a complete list of build/test dependencies?_\n## Get the source \n\nProblems start right away with the git commands as documented:   \n\n```\nC:\\tmp>git clone git@github.com:antlr/antlr4.git\nCloning into 'antlr4'...\nPermission denied (publickey).\nfatal: Could not read from remote repository.\n\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n\nI'm no git wizard, but  `git@github.com:antlr/antlr4.git` looked funny, the following seems to work much better.   Is this equivalent:?\n\n```\nC:\\tmp>git clone https://github.com/antlr/antlr4.git\nCloning into 'antlr4'...\nremote: Counting objects: 61480, done.\nremote: Total 61480 (delta 0), reused 0 (delta 0), pack-reused 61480\nReceiving objects: 100% (61480/61480), 31.24 MiB | 7.18 MiB/s, done.\nResolving deltas: 100% (32970/32970), done.\nChecking connectivity... done.\nChecking out files: 100% (1427/1427), done.\n```\n## Compile\n\nThis seemed to go well.   I'll attach the log for completeness because I ran into problems later, but I see no warnings or errors:  [compile.txt](https://github.com/antlr/antlr4/files/412402/compile.txt)\n## Testing tools and targets\n\nThis is where I ran into problems.   [install.txt](https://github.com/antlr/antlr4/files/412413/install.txt)\n\nThere are a few preliminary warnings I'm unsure how to interpret, but the first outright failures seems to be these:\n\n```\n-------------------------------------------------------\n T E S T S\n-------------------------------------------------------\nRunning org.antlr.v4.test.runtime.csharp.TestCompositeLexers\ndir C:\\Users\\Burt_\\AppData\\Local\\Temp\\TestCompositeLexers-1470877266905\ndir C:\\Users\\Burt_\\AppData\\Local\\Temp\\TestCompositeLexers-1470877267468\nTests run: 2, Failures: 2, Errors: 0, Skipped: 0, Time elapsed: 0.687 sec <<< FAILURE!\ntestLexerDelegatorInvokesDelegateRule(org.antlr.v4.test.runtime.csharp.TestCompositeLexers)  Time elapsed: 0.565 sec  <<< FAILURE!\njava.lang.AssertionError: expected:<S.A\n[@0,0:0='a',<3>,1:0]\n[@1,1:1='b',<1>,1:1]\n[@2,2:2='c',<4>,1:2]\n[@3,3:2='<EOF>',<-1>,1:3]\n> but was:<null>\n    at org.junit.Assert.fail(Assert.java:88)\n    at org.junit.Assert.failNotEquals(Assert.java:743)\n    at org.junit.Assert.assertEquals(Assert.java:118)\n    at org.junit.Assert.assertEquals(Assert.java:144)\n    at org.antlr.v4.test.runtime.csharp.BaseTest.assertEquals(BaseTest.java:859)\n    at org.antlr.v4.test.runtime.csharp.TestCompositeLexers.testLexerDelegatorInvokesDelegateRule(TestCompositeLexers.java:29)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n    at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\n\ntestLexerDelegatorRuleOverridesDelegate(org.antlr.v4.test.runtime.csharp.TestCompositeLexers)  Time elapsed: 0.1 sec  <<< FAILURE!\njava.lang.AssertionError: expected:<M.A\n[@0,0:1='ab',<1>,1:0]\n[@1,2:1='<EOF>',<-1>,1:2]\n> but was:<null>\n    at org.junit.Assert.fail(Assert.java:88)\n    at org.junit.Assert.failNotEquals(Assert.java:743)\n    at org.junit.Assert.assertEquals(Assert.java:118)\n    at org.junit.Assert.assertEquals(Assert.java:144)\n    at org.antlr.v4.test.runtime.csharp.BaseTest.assertEquals(BaseTest.java:859)\n    at org.antlr.v4.test.runtime.csharp.TestCompositeLexers.testLexerDelegatorRuleOverridesDelegate(TestCompositeLexers.java:57)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n    at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:55)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:20)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:252)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:141)\n    at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:112)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:189)\n    at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:165)\n    at org.apache.maven.surefire.booter.ProviderFactory.invokeProvider(ProviderFactory.java:85)\n    at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:115)\n    at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:75)\n```\n\nany guidance would be appreciated...\n"}, {"labels": ["target:python2", "target:python3", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1252", "title": "Empty alternative in rule causes syntax error in *Parser.py for Python2/3 targets", "closed": "2016-11-22 21:03:40", "commitsDetails": [], "commits": {}, "ttf": 104.00027777777778, "created": "2016-08-10 17:24:14", "user": "robinkjoy", "body": "Sample grammar\n\n```\ngrammar Test;\n\ntokens { ID }\nroot\n  : ( ID\n    |\n    ) SEMI EOF\n  ;\nSEMI   : ';' ;\nWS : [ \\t\\r\\n]+ -> skip ;\n```\n\nthis generates following snippet in TestParser.py for python2 and 3\n\n```\n            if token in [SystemRDLParser.ID]:\n                self.state = 2\n                self.match(SystemRDLParser.ID)\n\n            elif token in [SystemRDLParser.SEMI]:\n\n            else:\n                raise NoViableAltException(self)\n\n```\n\nHere elif is empty resulting in syntax error. Maybe `pass` is missing?\n"}, {"labels": ["target:java", "type:bug"], "filteredCommits": ["c695ed25e9e716af0e33823a4e9d9b93a2b1bf02"], "url": "https://github.com/antlr/antlr4/issues/1238", "gitStatsSummary": {"insertions": 6, "gitFilesChange": 1, "lines": 13, "deletions": 7}, "numCommits": 1, "commits": {"8b75e3fc5bd28e5ee45fb30531c4ee762250c02e": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "c695ed25e9e716af0e33823a4e9d9b93a2b1bf02": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 119.00027777777778, "user": "KvanTTT", "changesInPackagesSPOON": ["org.antlr.v4.runtime.BufferedTokenStream.getText()"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime"], "body": "I created `CommonTokenStream` from list of tokens by the following way:\n\n``` Java\nList<? extends Token> preprocessorTokens = (List<Token>)lexer.getAllTokens();\nListTokenSource codeTokenSource = new ListTokenSource(tokens);\nCommonTokenStream tokensStream = new CommonTokenStream(codeTokenSource);\n```\n\nAfter it I tried to call method `getText(context)` for RuleContext but it returned a wrong result:\n\n``` Java\ntokensStream.getText(context); // returns incorrect text, only text of first token\ntokensStream.getText();             // returns correct text of all tokens\n```\n\nIf `fill()` method was called before `getText` methods, these methods return a correct text:\n\n``` Java\ntokensStream.fill();\ntokensStream.getText(context); // returns correct text of tokens from context\ntokensStream.getText();             // returns correct text of all tokens\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0.0, "TOT": 2.0, "DEL": 0.0, "INS": 0.0, "spoonFilesChanged": 1, "MOV": 2.0}, "title": "getText method with arguments not always works correctly", "statsSkippedReason": "", "closed": "2016-11-25 21:01:17", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-14 13:25:04", "commitHash": "8b75e3fc5bd28e5ee45fb30531c4ee762250c02e", "commitParents": ["64a8c32138b47c76745fc555d1fb6a02ef91126d", "c9508b74a4e661fd07c96cc8e29dca8f1abfae24"], "commitGHEventType": "referenced", "nameRev": "8b75e3fc5bd28e5ee45fb30531c4ee762250c02e tags/4.6~7^2~2", "commitGitStats": [{"insertions": 1, "lines": 4, "filePath": "runtime/Swift/Antlr4/org/antlr/v4/runtime/BufferedTokenStream.swift", "deletions": 3}, {"insertions": 174, "lines": 176, "filePath": "runtime/Swift/Antlr4/org/antlr/v4/runtime/atn/ParserATNSimulator.swift", "deletions": 2}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #1505 from janyou/Fixes-1238-994\n\nSwift target Fixes #1238, Fixes #994 ", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-14 13:25:04"}, {"commitUser": "parrt", "commitDateTime": "2016-11-25 13:01:07", "commitHash": "c695ed25e9e716af0e33823a4e9d9b93a2b1bf02", "commitParents": ["3506dcef1d7bfb5389ae8de2a29fd94bfad9a489"], "commitGHEventType": "closed", "nameRev": "c695ed25e9e716af0e33823a4e9d9b93a2b1bf02 tags/4.6-rc1~71", "commitGitStats": [{"insertions": 6, "lines": 13, "filePath": "runtime/Java/src/org/antlr/v4/runtime/BufferedTokenStream.java", "deletions": 7}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 2, "spoonMethodName": "org.antlr.v4.runtime.BufferedTokenStream.getText()"}], "spoonFilePath": "BufferedTokenStream.java"}], "commitMessage": "Fixes #1238.  @antlr/antlr-targets might want to tweak their targets.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-25 13:01:07"}], "created": "2016-07-29 20:22:32"}, {"labels": ["code-gen", "status:not-fixing", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1214", "title": "Antlr generates incorrect code when there are no tokens in the input", "closed": "2016-12-09 23:43:28", "commitsDetails": [], "commits": {}, "ttf": 173.00027777777777, "created": "2016-06-19 15:02:47", "user": "teverett", "body": "Please see:\r\n\r\nhttps://github.com/antlr/grammars-v4/issues/397\r\n\r\nThis can be fixed on the antlr4 tree in the file antlr4\\tool\\resources/org/antlr/v4/tool/templates/codegen/Java/Java.stg, at line 891\r\n\r\n```\r\n    <if(lexer.tokens)>\r\n    public static final int\r\n        <lexer.tokens:{k | <k>=<lexer.tokens.(k)>}; separator=\", \", wrap, anchor>;\r\n    <endif>\r\n```"}, {"labels": ["target:javascript", "type:bug"], "filteredCommits": ["4c1dc90064a73d7b57513c63c8fd68a418a9b212"], "url": "https://github.com/antlr/antlr4/issues/1213", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"4c1dc90064a73d7b57513c63c8fd68a418a9b212": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 272.0002777777778, "user": "dabbler0", "changesInPackagesGIT": ["tool/resources/org/antlr/v4/tool/templates/codegen/JavaScript/JavaScript.stg"], "body": "The JavaScript target compiles `.` to `matchWildcard()` instead of `this.matchWildcard()`, which raises an error. Manually changing to `this.matchWildcard()` in the generated source seems to fix the problem.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "JavaScript target can't use wildcards", "statsSkippedReason": "", "closed": "2017-03-15 17:29:10", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2017-03-15 09:04:47", "commitHash": "4c1dc90064a73d7b57513c63c8fd68a418a9b212", "commitParents": ["17054985aa7cc9deb7fa27f76659328607119622"], "commitGHEventType": "closed", "nameRev": "4c1dc90064a73d7b57513c63c8fd68a418a9b212 tags/4.7~35^2~1", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/JavaScript/JavaScript.stg", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "tweak wildcard. Fixes #1213\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2017-03-15 09:03:50"}], "created": "2016-06-16 15:12:38"}, {"labels": ["comp:tool", "type:bug"], "filteredCommits": ["6c2d4e6225f4ee5fd2b197a794b4eb0e65e84cf1"], "url": "https://github.com/antlr/antlr4/issues/1211", "gitStatsSummary": {"insertions": 8, "gitFilesChange": 1, "lines": 8, "deletions": 0}, "numCommits": 1, "commits": {"6c2d4e6225f4ee5fd2b197a794b4eb0e65e84cf1": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 162.00027777777777, "user": "grosenberg", "changesInPackagesSPOON": ["org.antlr.v4.codegen.ActionTranslator.qualifiedAttr(java.lang.String,org.antlr.runtime.Token,org.antlr.runtime.Token)"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/codegen"], "body": "Antlr 4.5.3 tool jar.\n\nOn a rule containing an action\n\n`a : b { System.out.println($c.text); } ;`  // Note: $c is an invalid reference\n                                                                  // Also: on $b.hext (invalid attribute)\n\nThe tool fails with:\n\n`java.lang.NullPointerException\n    at org.antlr.v4.codegen.ActionTranslator.qualifiedAttr(ActionTranslator.java:214) ~[antlr4.jar:?]\n    at org.antlr.v4.parse.ActionSplitter.mQUALIFIED_ATTR(ActionSplitter.java:394) ~[antlr4.jar:?]\n    at org.antlr.v4.parse.ActionSplitter.mTokens(ActionSplitter.java:868) ~[antlr4.jar:?]\n    at org.antlr.v4.parse.ActionSplitter.nextToken(ActionSplitter.java:89) ~[antlr4.jar:?]\n    at org.antlr.v4.parse.ActionSplitter.getActionTokens(ActionSplitter.java:43) ~[antlr4.jar:?]\n    at org.antlr.v4.codegen.ActionTranslator.translateActionChunk(ActionTranslator.java:170) ~[antlr4.jar:?]`\n\nFull error trace in \n[BadAttrName.txt](https://github.com/antlr/antlr4/files/311035/BadAttrName.txt)\n\nActionTranslator.java:214, unlike the other ActionSplitter delegate AttributeChecks.java:115, does not check for the potential null result of `node.resolver.resolveToAttribute`, indicating an invalid attribute reference.\n\nThe solution may be as simple as replicating the null handling of AttributeChecks in to ActionTranslator (and in the related method `attr()`).  \n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 0}, "title": "NullPointerException on invalid attribute reference", "statsSkippedReason": "", "closed": "2016-11-22 23:05:01", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-11-22 15:04:28", "commitHash": "6c2d4e6225f4ee5fd2b197a794b4eb0e65e84cf1", "commitParents": ["dc2c9b039e1497ad924c852e07f3a8f981ed078b"], "commitGHEventType": "closed", "nameRev": "6c2d4e6225f4ee5fd2b197a794b4eb0e65e84cf1 tags/4.6-rc1~83", "commitGitStats": [{"insertions": 8, "lines": 8, "filePath": "tool/src/org/antlr/v4/codegen/ActionTranslator.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestAttributeChecks.java", "deletions": 1}, {"insertions": 9, "lines": 71, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestActionTranslation.java", "deletions": 62}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.codegen.ActionTranslator.qualifiedAttr(java.lang.String,org.antlr.runtime.Token,org.antlr.runtime.Token)"}], "spoonFilePath": "ActionTranslator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRuleRefWhenRuleHasScope()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testPlusEqualStringLabel()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testTokenRefTreeProperty()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testDoNotTranslateAttributeCompare()"}, {"UPD": 0, "TOT": 5, "DEL": 1, "INS": 0, "MOV": 4, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testDynamicRuleScopeRefInSubrule()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testBracketArgParsing()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testLexerLabelRefs()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testSettingLexerRulePropertyRefs()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testFullyQualifiedRefToLabelInCurrentRule()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRuleLabelWithoutOutputOption()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testFullyQualifiedRefToTemplateAttributeInCurrentRule()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testIsolatedRefToRule()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testIllegalAssignToOwnRulenameAttr()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testArgsOnTokenInLexerRuleOfCombined()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testStringArgParsing()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testIsolatedRefToCurrentRule()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testDoNotTranslateScopeAttributeCompare()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testArgWithLT()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testLexerRulePropertyRefs()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testWildcardCharLabelInLexer()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testComplicatedSingleArgParsing()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testGenericsAsArgumentDefinition2()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testImplicitTokenLabel()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRefToTemplateAttributeForCurrentRule()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testCharListLabelInLexer()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testReturnInitValue()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testReuseExistingListLabelWithImplicitRuleLabel()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRefToStartAttributeForCurrentRule()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testListAndRuleLabelTypeMismatch()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testArgsWhenNoneDefined()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testPlusEqualWildcardLabel()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testAssignToOwnRulenameAttr()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testMissingArgsInLexer()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testAmbiguousTokenRefWithProp()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testArgsOnTokenInLexer()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testTokenLabelTreeProperty()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testAssignToOwnParamAttr()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testArgReturnValueMismatch()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testReuseExistingLabelWithImplicitTokenLabel()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testGenericsAsReturnValue()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testIllegalAssignTokenRefAttr()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRefToTextAttributeForCurrentTreeRule()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testMultipleReturnInitValue()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testListAndTokenLabelTypeMismatch()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRuleScopeFromAnotherRule()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testUnknownAttr()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testIllegalAssignRuleRefAttr()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testGenericsAsArgumentDefinition()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testAssignToTreeNodeAttribute()"}, {"UPD": 2, "TOT": 4, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRefToRuleRefInLexerNoAttribute()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testImplicitRuleLabel()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testTypeOfGuardedAttributeRefIsCorrect()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testCharLabelInLexer()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testReuseExistingLabelWithImplicitRuleLabel()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testFullyQualifiedRefToCurrentRuleRetVal()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testTreeRuleStopAttributeIsInvalid()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testMissingArgs()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testSetFullyQualifiedRefToCurrentRuleRetVal()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testTokenLabelFromMultipleAlts()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testArgsOnToken()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRefToRuleRefInLexer()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testArgsWithInitValues()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRuleRefWithDynamicScope()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testPlusEqualSetLabel()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testDynamicScopeRefOkEvenThoughRuleRefExists()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testIllegalAssignToLocalAttr()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testAmbiguousTokenRef()"}, {"UPD": 1, "TOT": 3, "DEL": 1, "INS": 0, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testLabelOnRuleRefInLexer()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testWildcardCharListLabelInLexer()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testUnqualifiedRuleScopeAttribute()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testSimplePlusEqualLabel()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testMissingArgsOnTokenInLexerRuleOfCombined()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testCStyleReturnInitValue()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRuleAndTokenLabelTypeMismatch()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testRuleLabelFromMultipleAlts()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testFullyQualifiedRefToListLabelInCurrentRule()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testReuseExistingListLabelWithImplicitTokenLabel()"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestActionTranslation.testFullyQualifiedRefToCurrentRuleParameter()"}], "spoonFilePath": "TestActionTranslation.java"}, {"spoonMethods": [], "spoonFilePath": "TestAttributeChecks.java"}], "commitMessage": "Fixes #1211\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-22 15:04:28"}], "created": "2016-06-12 23:26:24"}, {"labels": ["comp:runtime", "trees-contexts", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1206", "title": "getLookaheadParseTrees() should reset or create new error handler each alt but doesn't", "closed": "2016-12-10 22:45:02", "commitsDetails": [], "commits": {}, "ttf": 188.00027777777777, "created": "2016-06-04 23:49:49", "user": "parrt", "body": "Here is the fix https://github.com/antlr/intellij-plugin-v4/blob/master/src/java/org/antlr/intellij/plugin/preview/ShowAmbigTreesDialog.java#L203\n"}, {"labels": ["comp:runtime", "trees-contexts", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1205", "title": "getAllPossibleParseTrees() doesn't work when ambig input reaches eof.", "closed": "2016-12-09 23:55:44", "commitsDetails": [], "commits": {}, "ttf": 188.00027777777777, "created": "2016-06-04 23:48:43", "user": "parrt", "body": "https://github.com/antlr/intellij-plugin-v4/blob/master/src/java/org/antlr/intellij/plugin/preview/ShowAmbigTreesDialog.java#L246\n"}, {"labels": ["atn-analysis", "parsers", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1203", "title": "Changing '+' to '*' crashes antlr4", "closed": "2016-12-10 18:45:52", "commitsDetails": [], "commits": {}, "ttf": 195.00027777777777, "created": "2016-05-28 23:51:34", "user": "SimonStPeter", "body": "The following refers to TSQL (MS's dialect of SQL).\nBackground: TSQL uses semicolons as separators, but allows them to be scattered freely and in multiples, with no SQL in between, as well as allowing them to be omitted altogether, hence this code to handle them:\n\n```\nsql_items :\n        (\n            opt_sql_separators\n            sql_item\n        ) *\n        opt_sql_separators\n    ;\n```\n\nFurther, there is a kind of super-separator which terminates batches (lumps of SQL). It is traditionally given the name 'GO'. The token GO is not TSQL but recognised by a trivial scanner that zips through the code, collecting all TSQL into a batch, then when it hits GO or the end of the file, it sends the batch, as one lump, to the sql server engine to be executed. So\n\n```\nselect 1\nGO\nselect 2\nselect 3\nGO\nselect 4\nGO\nGo\nselect 5\n```\n\nis processsed as follows:\n\n`select 1` is sent to the server to be executed. When it's finished any results are returned.\n`select 2\nselect 3` is then sent to be processed as a batch, results returned\n\n`select 4` is then sent, results returned\n\nan empty batch is sent (the nothingness between the 2 consecutive GOs)\n\n`select 5` is then sent.\n\nThis is handled with this:\n\n```\nsql_batches :\n        (\n            opt_batch_separators\n            sql_items\n            opt_batch_separators\n        ) *\n    ;\n```\n\nFor convenience I'm treating GO as if it were an SQL language statement ie. as part of parsing SQL, even though it's distinctly not (it also has a few more options, as in the code below but you can ignore these).\n\nAnyway given the above, code crashes antlr. This works but is incorrect:\n\n```\nsql_items :\n        (\n            opt_sql_separators\n            sql_item\n        ) +   // <<<<<<<<<<< here, change to * to crash\n        opt_sql_separators\n    ;\n```\n\nNote the `+`. It needs to be `*` to handle batches as I want. Change it thus and it bombs. \nInput is \n\n```\nthrow\n```\n\ngets this:\n\n```\nthrow\n^Z\n[@0,0:4='throw',<1>,1:0]\n[@1,7:6='<EOF>',<-1>,2:0]\nenter   start_parse, LT(1)=throw\nenter   sql_batches, LT(1)=throw\nenter   opt_batch_separators, LT(1)=throw\nexit    opt_batch_separators, LT(1)=throw\nexit    sql_batches, LT(1)=throw\nexit    start_parse, LT(1)=throw\nException in thread \"main\" java.lang.reflect.InvocationTargetException\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n        at java.lang.reflect.Method.invoke(Unknown Source)\n        at org.antlr.v4.gui.TestRig.process(TestRig.java:246)\n        at org.antlr.v4.gui.TestRig.process(TestRig.java:189)\n        at org.antlr.v4.gui.TestRig.main(TestRig.java:143)\nCaused by: java.lang.StackOverflowError\n        at org.antlr.v4.runtime.atn.SemanticContext$Predicate.hashCode(SemanticContext.java:123)\n        at org.antlr.v4.runtime.atn.ATNConfigSet$ConfigEqualityComparator.hashCode(ATNConfigSet.java:75)\n        at org.antlr.v4.runtime.atn.ATNConfigSet$ConfigEqualityComparator.hashCode(ATNConfigSet.java:64)\n        at org.antlr.v4.runtime.misc.Array2DHashSet.getBucket(Array2DHashSet.java:132)\n        at org.antlr.v4.runtime.misc.Array2DHashSet.getOrAddImpl(Array2DHashSet.java:87)\n        at org.antlr.v4.runtime.misc.Array2DHashSet.getOrAdd(Array2DHashSet.java:83)\n        at org.antlr.v4.runtime.atn.ATNConfigSet.add(ATNConfigSet.java:170)\n        at org.antlr.v4.runtime.atn.ParserATNSimulator.closure_(ParserATNSimulator.java:1551)\n        at org.antlr.v4.runtime.atn.ParserATNSimulator.closureCheckingStopState(ParserATNSimulator.java:1535)\n        at org.antlr.v4.runtime.atn.ParserATNSimulator.closure_(ParserATNSimulator.java:1603)\n        at org.antlr.v4.runtime.atn.ParserATNSimulator.closureCheckingStopState(ParserATNSimulator.java:1535)\n        at org.antlr.v4.runtime.atn.ParserATNSimulator.closure_(ParserATNSimulator.java:1603)\n        at org.antlr.v4.runtime.atn.ParserATNSimulator.closureCheckingStopState(ParserATNSimulator.java:1535)\n        at org.antlr.v4.runtime.atn.ParserATNSimulator.closure_(ParserATNSimulator.java:1603)\n        at org.antlr.v4.runtime.atn.ParserATNSimulator.closureCheckingStopState(ParserATNSimulator.java:1535)\n... (lots more here)\n```\n\nCan reproduce? ANTLR 4.5.3 on windows. Code below\n\n```\ngrammar MSSQL;\n\nstart_parse :\n        sql_batches\n        EOF\n    ;\n\nsql_batches :\n        (\n            opt_batch_separators\n            sql_items\n            opt_batch_separators\n        ) *\n    ;\n\nsql_items :\n        (\n            opt_sql_separators\n            sql_item\n        ) *   // <<<<<<<<<<< here, change to * to crash\n        opt_sql_separators\n    ;\n\nSEMICOLON : ';' ;\n\nopt_sql_separators :\n        ( SEMICOLON * )\n    ;\n\nsql_item :\n        throw_statement\n    ;\n\nthrow_statement : 'throw' ;\n\nDECDIGITS : [0-9]+ ;\n\nfragment WUnl : ( '\\r' ? )  '\\n' ;\n\nopt_batch_separators :\n        ( batch_separator ) *\n    ;\n\nbatch_separator : BATCH_SEPARATOR ;\n\nBATCH_SEPARATOR :\n        HWS*\n        BATCH_SEPARATOR_TOKEN\n        HWS*\n        OPT_INT_CONST\n        HWS*\n        OPT_SLCOMMENT_BODY\n        HWS*\n        WUnl\n    ;\n\nBATCH_SEPARATOR_TOKEN : 'GO' | 'Go' | 'gO' | 'go' ;  // blech - todo\nfragment OPT_INT_CONST : ( HWS+ DECDIGITS ) ? ;\nfragment OPT_SLCOMMENT_BODY : ( '--' .*? ) ? ;\nfragment HWS : [ \\t] ; // horizontal whitespaces\nfragment ALLWSes   : [ \\t\\r\\n]+ ;\n\nSKIPWS : ALLWSes -> skip ; \n```\n\n (just realised, handling GO as an island grammar would possibly be better as it is a trivial language, however ignore that for now).\n"}, {"labels": ["error-handling", "grammars", "status:not-fixing", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1202", "title": "Duplicate lex/parse rules don't cause problems or warnings in imported files", "closed": "2017-03-14 18:21:36", "commitsDetails": [], "commits": {}, "ttf": 290.0002777777778, "created": "2016-05-28 13:13:05", "user": "SimonStPeter", "body": "Trivial to reproduce, bung the following in an imported file (specifically, a file that is included by `import someotherfile;` into an antlr grammar file)\n\n```\nfragment XX : [aA] ;\nfragment XX : [aA] ;\n\nHELLO : 'hello' ;\nHELLO : 'hello' ;\n\nhello: HELLO ;\nhello: HELLO ;\n```\n\nIs this a byproduct of included files silently overriding rules in the file into which they are imported? \nAntlr version 4.5.3, running on windows\n"}, {"labels": ["comp:tool", "grammars", "type:bug"], "filteredCommits": ["dc2c9b039e1497ad924c852e07f3a8f981ed078b"], "url": "https://github.com/antlr/antlr4/issues/1188", "gitStatsSummary": {"insertions": 3, "gitFilesChange": 1, "lines": 4, "deletions": 1}, "numCommits": 1, "commits": {"dc2c9b039e1497ad924c852e07f3a8f981ed078b": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 199.00027777777777, "user": "octylFractal", "changesInPackagesSPOON": ["org.antlr.v4.semantics.SemanticPipeline.process()"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/semantics"], "body": "If I provide an empty lexer, then ANTLR will crash with a confusing `NullPointerException`. I don't think an empty lexer is really a common case, but the NPE had me worried for a little bit because I didn't understand what was causing it.\n\nThe cause is that `LexerGrammar` doesn't initialize `modes` until a rule is added.\n\nRelevant stacktrace:\n\n``` java\nCaused by: java.lang.NullPointerException\n    at org.antlr.v4.semantics.SymbolChecks.checkForModeConflicts(SymbolChecks.java:278)\n    at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:132)\n    at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)\n    at org.antlr.v4.Tool.process(Tool.java:386)\n    at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:345)\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 4, "DEL": 0, "INS": 2, "spoonFilesChanged": 1, "MOV": 2}, "title": "Crash with NullPointerException in SymbolChecks.checkForModeConflicts with empty lexer", "statsSkippedReason": "", "closed": "2016-11-22 22:21:18", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-11-22 14:21:07", "commitHash": "dc2c9b039e1497ad924c852e07f3a8f981ed078b", "commitParents": ["d09276d9fd5f8493229f2f715c66a861c8767048"], "commitGHEventType": "closed", "nameRev": "dc2c9b039e1497ad924c852e07f3a8f981ed078b tags/4.6-rc1~84", "commitGitStats": [{"insertions": 3, "lines": 4, "filePath": "tool/src/org/antlr/v4/semantics/SemanticPipeline.java", "deletions": 1}, {"insertions": 9, "lines": 14, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestToolSyntaxErrors.java", "deletions": 5}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 4, "DEL": 0, "INS": 2, "MOV": 2, "spoonMethodName": "org.antlr.v4.semantics.SemanticPipeline.process()"}], "spoonFilePath": "SemanticPipeline.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors"}], "spoonFilePath": "TestToolSyntaxErrors.java"}], "commitMessage": "Fixes #1188\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-22 14:21:07"}], "created": "2016-05-06 22:45:11"}, {"labels": ["comp:runtime", "type:bug"], "filteredCommits": ["0a7e90fe8e5edd548432677f8fbf3e6d1888961d"], "url": "https://github.com/antlr/antlr4/issues/1177", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"0a7e90fe8e5edd548432677f8fbf3e6d1888961d": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 238.00027777777777, "user": "parrt", "changesInPackagesSPOON": ["org.antlr.v4.runtime.CommonTokenStream.LB(int)"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime"], "body": "LB scans w/o checking i:\n\n```\n        while ( n<=k ) {\n            // skip off-channel tokens\n            i = previousTokenOnChannel(i - 1, channel);\n            n++;\n        }\n```\n\nthen we fail an assertion in `sync()` called from `previousTokenOnChannel()`:\n\n```\n    protected boolean sync(int i) {\n        assert i >= 0;\n        int n = i - tokens.size() + 1; // how many more elements we need?\n...\n    }\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 1}, "title": "LB() can try to scan to i < 0", "statsSkippedReason": "", "closed": "2016-12-10 22:05:44", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-10 14:05:31", "commitHash": "0a7e90fe8e5edd548432677f8fbf3e6d1888961d", "commitParents": ["9ef75603ce1edf335c198a6299fd86cdd8f48fcb"], "commitGHEventType": "closed", "nameRev": "0a7e90fe8e5edd548432677f8fbf3e6d1888961d tags/4.6-rc1~36", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/Java/src/org/antlr/v4/runtime/CommonTokenStream.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.runtime.CommonTokenStream.LB(int)"}], "spoonFilePath": "CommonTokenStream.java"}], "commitMessage": "fix #1177 (LB(k) stops at index 0) @antlr/antlr-targets might care about this\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-10 14:05:31"}], "created": "2016-04-16 18:51:51"}, {"labels": ["actions", "comp:tool", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1143", "title": "String out of bounds", "closed": "2016-03-30 22:24:42", "commitsDetails": [], "commits": {}, "ttf": 9.000277777777777, "created": "2016-03-21 12:22:02", "user": "arturrataj", "body": "That's probably due to errors in the parsed file, yet there is no hint which part of the input file is the cause. Perhaps catching such errors by antlr4 and adding such a respective hint, if possible, would help not only in this case.\n\nException in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n    at java.lang.String.charAt(String.java:658)\n    at org.antlr.v4.codegen.ActionTranslator.translateAction(ActionTranslator.java:141)\n    at org.antlr.v4.codegen.model.InvokeRule.<init>(InvokeRule.java:89)\n    at org.antlr.v4.codegen.ParserFactory.ruleRef(ParserFactory.java:129)\n    at org.antlr.v4.codegen.OutputModelController.ruleRef(OutputModelController.java:386)\n    at org.antlr.v4.codegen.SourceGenTriggers.ruleref(SourceGenTriggers.java:1403)\n    at org.antlr.v4.codegen.SourceGenTriggers.atom(SourceGenTriggers.java:1317)\n    at org.antlr.v4.codegen.SourceGenTriggers.labeledElement(SourceGenTriggers.java:828)\n    at org.antlr.v4.codegen.SourceGenTriggers.element(SourceGenTriggers.java:594)\n    at org.antlr.v4.codegen.SourceGenTriggers.alt(SourceGenTriggers.java:427)\n    at org.antlr.v4.codegen.SourceGenTriggers.alternative(SourceGenTriggers.java:335)\n    at org.antlr.v4.codegen.SourceGenTriggers.block(SourceGenTriggers.java:270)\n    at org.antlr.v4.codegen.OutputModelController.buildNormalRuleFunction(OutputModelController.java:306)\n    at org.antlr.v4.codegen.OutputModelController.buildRuleFunction(OutputModelController.java:193)\n    at org.antlr.v4.codegen.OutputModelController.buildParserOutputModel(OutputModelController.java:119)\n    at org.antlr.v4.codegen.CodeGenerator.generateParser(CodeGenerator.java:145)\n    at org.antlr.v4.codegen.CodeGenPipeline.process(CodeGenPipeline.java:79)\n    at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:429)\n    at org.antlr.v4.Tool.process(Tool.java:387)\n    at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:346)\n    at org.antlr.v4.Tool.main(Tool.java:193)\n"}, {"labels": ["code-gen", "comp:tool", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1129", "title": "$stop not available in @after", "closed": "2016-03-30 16:43:07", "commitsDetails": [], "commits": {}, "ttf": 23.00027777777778, "created": "2016-03-07 12:27:46", "user": "gagern", "body": "The [parser rule attributes](https://github.com/antlr/antlr4/blob/master/doc/actions.md#parser-rule-attributes) documentation claims:\n\n> **`stop` (Token):** The last nonhidden channel token to be matched by the rule. When referring to the current rule, this attribute is available only to the after and finally actions.\n\nBut apparently the token is not available even in the `@after` action.\n\nExample:\n\n```\ngrammar test ;\n\ntop\n    : e { System.out.println(\"e.start = \" + $e.start + \", e.stop = \" + $e.stop); }\n    ;\n\ne\n    @after { System.out.println(\"start = \" + $start + \", stop = \" + $stop); }\n    : '(' e ')'\n    | OTHER+\n    ;\n\nOTHER: .;\n```\n\nRunning `(1+1)` through the `TestRig` I see\n\n```\nstart = [@1,1:1='1',<3>,1:1], stop = null\nstart = [@0,0:0='(',<1>,1:0], stop = null\ne.start = [@0,0:0='(',<1>,1:0], e.stop = [@4,4:4=')',<2>,1:4]\n```\n\nI observed this in ANTLR 4.5.2 and could reproduce it in a 4.5.3 snapshot based on d0fb48c2b89128158950f4b32a61d50d52d981ea.\n"}, {"labels": ["code-gen", "comp:tool", "type:bug"], "filteredCommits": ["eeea98c00bb7aa3aa14c65d9d96cae537c186cdb"], "url": "https://github.com/antlr/antlr4/issues/1048", "gitStatsSummary": {"insertions": 12, "gitFilesChange": 2, "lines": 24, "deletions": 12}, "numCommits": 1, "commits": {"eeea98c00bb7aa3aa14c65d9d96cae537c186cdb": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 130.00027777777777, "user": "michaelpj", "changesInPackagesSPOON": ["org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.toString()", "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.otherAlt(org.antlr.v4.tool.ast.AltAST,int)", "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.prefixAlt(org.antlr.v4.tool.ast.AltAST,int)", "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.getArtificialOpPrecRule()", "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer", "org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(org.antlr.v4.tool.ast.GrammarRootAST,org.antlr.v4.tool.LeftRecursiveRule,java.lang.String)"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/analysis"], "body": "```\ngrammar repro;\n\nexpr : literal                      \n     | op expr                    \n     | left=expr op right=expr\n     ;\n\nliteral : '-'? Integer;\n\nop : '+' | '-' ;\n\nInteger : [0-9]+ ;\n\nWS  :  [ \\t\\r\\n\\u000C]+ -> channel(1) ;\n```\n\n```\necho \"-1\" | java -cp antlr-4.5.1-complete.jar:. org.antlr.v4.gui.TestRig repro expr -tree\n(expr (op -) (expr (literal 1)))\n```\n\nThat is, `-1` parses as a unary minus applied to a literal 1, rather than a literal -1, despite the fact that the latter rule is an earlier alternative.\n\nNow, I know that ANTLR rewrites left-recursive rules to parse them sensibly. Examining the log, I can see the following rewrite of the rule:\n\n```\n2015-11-20 11:29:01:089 left-recursion LogManager.java:49 expr\n    :   ( {} op<tokenIndex=13> expr<tokenIndex=15,p=2> \n        | literal<tokenIndex=9> \n        )\n        (\n          {precpred(_ctx, 1)}?<p=1> op<tokenIndex=23> right=expr<tokenIndex=27,p=2>\n        )*\n    ;\n```\n\nIt looks like we put the recursive-but-not-left-recursive alternatives first, then the non-recursive (primary) alternatives, and then the left-recursive alternatives. This surprises me - I would have thought that we'd try the non-recursive alternatives first, but that doesn't appear to be the case.\n\nIs this the intended behaviour?\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 6, "UPD": 7, "TOT": 7, "DEL": 0, "INS": 0, "spoonFilesChanged": 2, "MOV": 0}, "title": "\"Unary prefix\" cases preferred ahead of \"primary\" cases in left-recursive rules", "statsSkippedReason": "", "closed": "2016-03-29 22:34:53", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-03-29 15:28:36", "commitHash": "eeea98c00bb7aa3aa14c65d9d96cae537c186cdb", "commitParents": ["f2cbc6eb7c0689943d7b1d4ec53c1a79b6c64f92"], "commitGHEventType": "closed", "nameRev": "eeea98c00bb7aa3aa14c65d9d96cae537c186cdb tags/antlr4-master-4.5.3~22^2~1", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "tool/src/org/antlr/v4/analysis/LeftRecursiveRuleTransformer.java", "deletions": 1}, {"insertions": 11, "lines": 22, "filePath": "tool/src/org/antlr/v4/analysis/LeftRecursiveRuleAnalyzer.java", "deletions": 11}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.otherAlt(org.antlr.v4.tool.ast.AltAST,int)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.getArtificialOpPrecRule()"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.toString()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.prefixAlt(org.antlr.v4.tool.ast.AltAST,int)"}], "spoonFilePath": "LeftRecursiveRuleAnalyzer.java"}, {"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(org.antlr.v4.tool.ast.GrammarRootAST,org.antlr.v4.tool.LeftRecursiveRule,java.lang.String)"}], "spoonFilePath": "LeftRecursiveRuleTransformer.java"}], "commitMessage": "tweak to michaelpj's PR; alter name. Indicate this fixes #1048.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-03-29 15:28:36"}], "created": "2015-11-20 11:34:11"}, {"labels": ["comp:runtime", "target:java", "type:bug"], "filteredCommits": ["f13b09eb3d32265939dfa4233112a4655e0cedef"], "url": "https://github.com/antlr/antlr4/issues/1042", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"89bfd56a769e67a7392fa3acc57a79fa2cd5d931": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "f13b09eb3d32265939dfa4233112a4655e0cedef": {"commitUser": "parrt", "commitGHEventType": "closed"}, "64a8c32138b47c76745fc555d1fb6a02ef91126d": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 392.0002777777778, "user": "parrt", "changesInPackagesSPOON": ["org.antlr.v4.runtime.Recognizer.getTokenTypeMap()"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime"], "body": "loop does `<` not `<=`\n\n```\nfor (int i = 0; i < getATN().maxTokenType; i++) {\n```\n\nit was not adding last token to the list.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 2}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 1.0, "TOT": 1.0, "DEL": 0.0, "INS": 0.0, "spoonFilesChanged": 1, "MOV": 0.0}, "title": "getTokenTypeMap should test all token type values", "statsSkippedReason": "", "closed": "2016-12-10 22:51:43", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-10 14:51:42", "commitHash": "89bfd56a769e67a7392fa3acc57a79fa2cd5d931", "commitParents": ["a6e7a72ac767d73e6f760750b53b13e2e89d7261", "f13b09eb3d32265939dfa4233112a4655e0cedef"], "commitGHEventType": "referenced", "nameRev": "89bfd56a769e67a7392fa3acc57a79fa2cd5d931 tags/4.6-rc1~34", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/Java/src/org/antlr/v4/runtime/Recognizer.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.Recognizer.getTokenTypeMap()"}], "spoonFilePath": "Recognizer.java"}], "commitMessage": "Merge pull request #1484 from parrt/fix-1042\n\nFixes #1042", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-10 14:51:42"}, {"commitUser": "parrt", "commitDateTime": "2016-12-10 14:51:17", "commitHash": "f13b09eb3d32265939dfa4233112a4655e0cedef", "commitParents": ["a6e7a72ac767d73e6f760750b53b13e2e89d7261"], "commitGHEventType": "closed", "nameRev": "f13b09eb3d32265939dfa4233112a4655e0cedef tags/4.6-rc1~34^2", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/Java/src/org/antlr/v4/runtime/Recognizer.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.Recognizer.getTokenTypeMap()"}], "spoonFilePath": "Recognizer.java"}], "commitMessage": "Fixes #1042\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-10 14:51:17"}, {"commitUser": "parrt", "commitDateTime": "2016-12-14 13:24:31", "commitHash": "64a8c32138b47c76745fc555d1fb6a02ef91126d", "commitParents": ["17bad8ae690fcee9b97ef61156d1629df30ac6fa", "f964dd4af0e9eb215893b343626fa0a8a49340f3"], "commitGHEventType": "referenced", "nameRev": "64a8c32138b47c76745fc555d1fb6a02ef91126d tags/4.6~7^2~3", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/Swift/Antlr4/org/antlr/v4/runtime/Recognizer.swift", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #1506 from janyou/Fixes-1042\n\nFixes #1042 Swift target", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-14 13:24:31"}], "created": "2015-11-13 23:20:57"}, {"labels": ["command-line-options", "comp:tool", "status:invalid", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/1041", "title": "no .tokens file found despite `-lib`, preventing parser generation", "closed": "2015-11-12 22:07:53", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2015-11-12 22:04:45", "user": "parrt", "body": "```\n$ antlr4 -listener \\\n    -lib /Users/parrt/antlr/code/jetbrains-plugin-st4/src/grammars/org/antlr/jetbrains/st4plugin/parsing -package org.antlr.jetbrains.st4plugin \\\n    -o /Users/parrt/antlr/code/jetbrains-plugin-st4/gen/org/antlr/jetbrains/st4plugin \\\n    -Dlanguage=Java \\\n    -no-visitor \\\n    /Users/parrt/antlr/code/jetbrains-plugin-st4/src/grammars/org/antlr/jetbrains/st4plugin/parsing/STParser.g4\nerror(160): STParser.g4:39:12: cannot find tokens file /Users/parrt/antlr/code/jetbrains-plugin-st4/gen/org/antlr/jetbrains/st4plugin/STLexer.tokens\n...\n$ ls /Users/parrt/antlr/code/jetbrains-plugin-st4/src/grammars/org/antlr/jetbrains/st4plugin/parsing\n./               ../              LexBasic.g4      LexUnicode.g4    STGLexer.g4      STGLexer.tokens  STGParser.g4     STParser.g4\n```\n\nSo it's ignoring -lib?\n"}, {"labels": ["comp:build", "type:bug"], "filteredCommits": ["c0e7c49a9e0684c4906b4b249cfa1d0b2d571aa0"], "url": "https://github.com/antlr/antlr4/issues/1036", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"c0e7c49a9e0684c4906b4b249cfa1d0b2d571aa0": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 400.0002777777778, "user": "RedTailedHawk", "changesInPackagesGIT": [], "body": "Several properties have been omitted from META-INF/MANIFEST.MF in antlr-4.5.1-complete.jar.  I noticed this when I added 4.5.1 to the ANTLR plugin for Eclipse -- it shows null in the Version column (screenshot attached).\n\nHere's what I'm seeing in the file:\n\nManifest-Version: 1.0\nArchiver-Version: Plexus Archiver\nBuilt-By: parrt\nCreated-By: Apache Maven 3.3.3\nBuild-Jdk: 1.8.0_60-ea\nMain-Class: org.antlr.v4.Tool\n\nAnd here's what's in the MANIFEST.MF for 4.5:\n\nManifest-Version: 1.0\nImplementation-Vendor: ANTLR\nImplementation-Title: ANTLR 4 Tool\nImplementation-Version: 4.5\nImplementation-Vendor-Id: org.antlr\nBuild-Jdk: 1.6\nBuilt-By: parrt\nCreated-By: http://www.bildtool.org\nMain-Class: org.antlr.v4.Tool\n\nCould we get the missing properties added to the 4.5.1 jar packaging?\n\nThanks.\n-Larry\n\n![image](https://cloud.githubusercontent.com/assets/8505928/10999656/3cfbe0e2-846b-11e5-85d0-e04defde3bb1.png)\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Version information omitted from MANIFEST.MF in antlr-4.5.1-complete.jar", "statsSkippedReason": "", "closed": "2016-12-11 01:33:04", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-10 16:43:10", "commitHash": "c0e7c49a9e0684c4906b4b249cfa1d0b2d571aa0", "commitParents": ["33bce0d8a8ae0bf71e876c9a22b1e37ce6043253"], "commitGHEventType": "closed", "nameRev": "c0e7c49a9e0684c4906b4b249cfa1d0b2d571aa0 tags/4.6-rc1~32^2~1", "commitGitStats": [{"insertions": 4, "lines": 6, "filePath": "runtime/Java/pom.xml", "deletions": 2}, {"insertions": 9, "lines": 18, "filePath": "tool/pom.xml", "deletions": 9}], "commitSpoonAstDiffStats": [], "commitMessage": "update jar version, add implementation manifest entries. Fixes #1036\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-10 16:43:10"}], "created": "2015-11-06 14:49:43"}, {"labels": ["comp:build", "type:bug"], "filteredCommits": ["0dae6359ec6787b28d23a451719ea7955ca3cfe3"], "url": "https://github.com/antlr/antlr4/issues/1007", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"0dae6359ec6787b28d23a451719ea7955ca3cfe3": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 437.0002777777778, "user": "u3r", "changesInPackagesGIT": [], "body": "The source artifact for \n\n```\n<groupId>org.antlr</groupId>    \n<artifactId>antlr4</artifactId>\n```\n\ndoes not contain sources for the (contained) antr4-runtime.\n\nDependent on the order of the classpath (read maven-imports) this prevents eclipse from showing javadoc/source for the runtime-classes.\n\nPlease include all sources in the source artifact for antlr4.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "antrl4-<version>-sources.jar does not contain sources for runtime", "statsSkippedReason": "", "closed": "2016-12-11 02:30:34", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-10 18:29:09", "commitHash": "0dae6359ec6787b28d23a451719ea7955ca3cfe3", "commitParents": ["fc20027da34603889d9bb2a929fcd36d5cfb22b9"], "commitGHEventType": "closed", "nameRev": "0dae6359ec6787b28d23a451719ea7955ca3cfe3 tags/4.6-rc1~31^2", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/Java/pom.xml", "deletions": 1}, {"insertions": 0, "lines": 1, "filePath": "tool/pom.xml", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Fixes #1007.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-10 18:29:09"}], "created": "2015-09-30 13:37:17"}, {"labels": ["grammars", "type:bug"], "filteredCommits": ["8bf480dcc5c6d146b4112dd347841c1ab80db787"], "url": "https://github.com/antlr/antlr4/issues/959", "gitStatsSummary": {"insertions": 19, "gitFilesChange": 2, "lines": 20, "deletions": 1}, "numCommits": 1, "commits": {"8bf480dcc5c6d146b4112dd347841c1ab80db787": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 139.00027777777777, "user": "SOberhoff", "changesInPackagesSPOON": ["org.antlr.v4.tool.ErrorType", "org.antlr.v4.semantics.BasicSemanticChecks.enterTerminal(org.antlr.v4.tool.ast.GrammarAST)"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/semantics", "tool/src/org/antlr/v4/tool"], "body": "This simple grammar dodges all static checks in the editor but causes a non-informative Nullpointer-Exception when generating a parser.\n\n```\ngrammar test;\nTEST : '''test''';\n```\n\nI'm getting this both via the IntelliJ plugin which claims to use 4.5.1 as well as the Maven plugin in version 4.5\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "spoonFilesChanged": 2, "MOV": 0}, "title": "nullpointer exception when generating parser", "statsSkippedReason": "", "closed": "2015-12-08 19:39:11", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2015-10-12 16:33:32", "commitHash": "8bf480dcc5c6d146b4112dd347841c1ab80db787", "commitParents": ["78427bae798f4e171fcc416cd796211e57ac45b8"], "commitGHEventType": "closed", "nameRev": "8bf480dcc5c6d146b4112dd347841c1ab80db787 tags/4.5.2~16^2~1^2~2", "commitGitStats": [{"insertions": 9, "lines": 10, "filePath": "tool/src/org/antlr/v4/semantics/BasicSemanticChecks.java", "deletions": 1}, {"insertions": 27, "lines": 27, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestToolSyntaxErrors.java", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestToolSyntaxErrors.testNotAllowedEmptyStrings()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.enterTerminal(org.antlr.v4.tool.ast.GrammarAST)"}], "spoonFilePath": "BasicSemanticChecks.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ErrorType"}], "spoonFilePath": "ErrorType.java"}], "commitMessage": "Fixed non-informative NullPointerException. Empty strings now not allowed. fixed #959.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-10-12 16:33:32"}], "created": "2015-07-21 21:15:08"}, {"labels": ["target:javascript", "type:bug"], "filteredCommits": ["a3aa610e3d0de82d90e5b49d7b367237c2381a9a"], "url": "https://github.com/antlr/antlr4/issues/958", "gitStatsSummary": {"insertions": 25, "gitFilesChange": 2, "lines": 26, "deletions": 1}, "numCommits": 1, "commits": {"a3aa610e3d0de82d90e5b49d7b367237c2381a9a": {"commitUser": "parrt", "commitGHEventType": "closed"}, "7c35979c2e69220b44f7459f3cb19f51435e7b74": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 511.0002777777778, "user": "akonsu", "changesInPackagesSPOON": ["org.antlr.v4.test.runtime.descriptors.SemPredEvalLexerDescriptors.RuleSempredFunction"], "changesInPackagesGIT": ["runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors", "tool/resources/org/antlr/v4/tool/templates/codegen/JavaScript/JavaScript.stg"], "body": "Grammar:\n\n```\ngrammar Language;\n\n@lexer::members {var blah = true;}\n\nP : T ',' T ;\nT : [a-z]+ {blah}? ;\ninit: P EOF ;\n```\n\ngenerates an error below when using Javascript target (`antlr4 -Dlanguage=JavaScript Language.g4`):\n\n```\nwarning(22):  template error: context [/LexerFile /Lexer /dumpActions /RuleSempredFunction] 1:4 attribute parser isn't defined \n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 0}, "title": "template error: attribute parser isn't defined", "statsSkippedReason": "", "closed": "2016-12-13 19:06:36", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-13 11:05:39", "commitHash": "a3aa610e3d0de82d90e5b49d7b367237c2381a9a", "commitParents": ["ec5f2ecf311510bb21f973413f4d06368026965a"], "commitGHEventType": "closed", "nameRev": "a3aa610e3d0de82d90e5b49d7b367237c2381a9a tags/4.6-rc1~13^2", "commitGitStats": [{"insertions": 24, "lines": 24, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/SemPredEvalLexerDescriptors.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/JavaScript/JavaScript.stg", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.runtime.descriptors.SemPredEvalLexerDescriptors.RuleSempredFunction"}], "spoonFilePath": "SemPredEvalLexerDescriptors.java"}], "commitMessage": "get recognizer name properly. Fixes #958\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-13 11:05:39"}, {"commitUser": "parrt", "commitDateTime": "2016-12-13 11:06:34", "commitHash": "7c35979c2e69220b44f7459f3cb19f51435e7b74", "commitParents": ["65982518eff5d5736df8633d58647eab55cb38e2", "a3aa610e3d0de82d90e5b49d7b367237c2381a9a"], "commitGHEventType": "referenced", "nameRev": "7c35979c2e69220b44f7459f3cb19f51435e7b74 tags/4.6-rc1~13", "commitGitStats": [{"insertions": 24, "lines": 24, "filePath": "runtime-testsuite/test/org/antlr/v4/test/runtime/descriptors/SemPredEvalLexerDescriptors.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/JavaScript/JavaScript.stg", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.runtime.descriptors.SemPredEvalLexerDescriptors.RuleSempredFunction"}], "spoonFilePath": "SemPredEvalLexerDescriptors.java"}], "commitMessage": "Merge pull request #1501 from parrt/fix-958\n\nget recognizer name properly. Fixes #958", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-13 11:06:34"}], "created": "2015-07-21 03:27:27"}, {"labels": ["status:duplicate", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/953", "title": "crash on adding an argument to a rule", "closed": "2015-07-10 22:50:20", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2015-07-10 16:50:42", "user": "davidcok", "body": "On a fairly large grammar (combined lexer and parser), which worked fine, I added a parameter to a parser rule :\n term[boolean ispred] : ...\nand added an argument to every place that the rule was invoked, e.g.  term[ispred] or term[true]\n\nNow running anltr on the grammar causes a crash:\n\njava.lang.reflect.InvocationTargetException\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)\n    at java.lang.reflect.Method.invoke(Unknown Source)\n    at org.antlr.v4.parse.GrammarTreeVisitor.visit(GrammarTreeVisitor.java:207)\n    at org.antlr.v4.parse.GrammarTreeVisitor.visitGrammar(GrammarTreeVisitor.java:201)\n    at org.antlr.v4.semantics.SymbolCollector.process(SymbolCollector.java:76)\n    at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:103)\n    at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:397)\n    at org.antlr.v4.Tool.process(Tool.java:384)\n    at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)\n    at org.antlr.v4.Tool.main(Tool.java:190)\nCaused by: java.lang.ArrayIndexOutOfBoundsException: 2\n    at org.antlr.v4.semantics.SymbolCollector.discoverOuterAlt(SymbolCollector.java:111)\n    at org.antlr.v4.parse.GrammarTreeVisitor.outerAlternative(GrammarTreeVisitor.java:2285)\n    at org.antlr.v4.parse.GrammarTreeVisitor.ruleBlock(GrammarTreeVisitor.java:2198)\n    at org.antlr.v4.parse.GrammarTreeVisitor.rule(GrammarTreeVisitor.java:1664)\n    at org.antlr.v4.parse.GrammarTreeVisitor.rules(GrammarTreeVisitor.java:1242)\n    at org.antlr.v4.parse.GrammarTreeVisitor.grammarSpec(GrammarTreeVisitor.java:481)\n    ... 12 more\nException in thread \"main\" java.lang.NullPointerException\n    at org.antlr.v4.tool.Rule.getAltLabels(Rule.java:217)\n    at org.antlr.v4.tool.Rule.hasAltSpecificContexts(Rule.java:200)\n    at org.antlr.v4.semantics.SymbolChecks.checkForLabelConflicts(SymbolChecks.java:157)\n    at org.antlr.v4.semantics.SymbolChecks.process(SymbolChecks.java:105)\n    at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:107)\n    at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:397)\n    at org.antlr.v4.Tool.process(Tool.java:384)\n    at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)\n    at org.antlr.v4.Tool.main(Tool.java:190)\n\nI'm dead in the water now, so help would be appreciated.\n"}, {"labels": ["comp:tool", "lexers", "status:duplicate", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/935", "title": "NullPointerException in bad lexer rule", "closed": "2015-07-29 21:30:02", "commitsDetails": [], "commits": {}, "ttf": 36.000277777777775, "created": "2015-06-23 09:57:23", "user": "hneuendo", "body": "After \"quick replace\" I got this lexer rule in my grammar:\n\n``` antlr\nCHARACTER_LITERAL\n    :   ''' '''\n    ;   \n```\n\n```\nThis generates an NullPointerException which is really hard to find out in a large grammar.\nException in thread \"main\" java.lang.NullPointerException\n    at org.antlr.v4.automata.ParserATNFactory.elemList(ParserATNFactory.java:490)\n    at org.antlr.v4.automata.ParserATNFactory.alt(ParserATNFactory.java:477)\n    at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:556)\n    at org.antlr.v4.parse.ATNBuilder.ruleBlock(ATNBuilder.java:290)\n    at org.antlr.v4.automata.ParserATNFactory._createATN(ParserATNFactory.java:186)\n    at org.antlr.v4.automata.LexerATNFactory.createATN(LexerATNFactory.java:134)\n    at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:405)\n    at org.antlr.v4.Tool.process(Tool.java:376)\n    at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)\n    at org.antlr.v4.CSharpTool.main(CSharpTool.java:59)\n```\n"}, {"labels": ["status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/919", "title": "org.antlr.v4.runtime.misc.Predicate not present", "closed": "2015-06-19 15:49:31", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2015-06-19 02:28:19", "user": "ZenHarbinger", "body": "I just did an upstream merge and build and org.antlr.v4.runtime.tree.Trees makes use of a Predicate.java that is not included:\n\n/home/matta/Dev/antlr4/runtime/Java/src/main/java/org/antlr/v4/runtime/tree/Trees.java:[38,32] error: cannot find symbol\n[ERROR]   symbol:   class Predicate\n  location: package org.antlr.v4.runtime.misc\n/home/matta/Dev/antlr4/runtime/Java/src/main/java/org/antlr/v4/runtime/tree/Trees.java:[321,45] error: cannot find symbol\n"}, {"labels": ["comp:runtime", "status:fixed", "trees-contexts", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/897", "title": "Empty rule matched first gives invalid source interval", "closed": "2015-06-11 20:13:19", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2015-06-11 19:16:05", "user": "parrt", "body": "```\ns : x A ;\nx : ;\n```\n\nGives invalid interval for x (INVALID -1..-2) not 0..-1.\n"}, {"labels": ["comp:runtime", "status:fixed", "trees-contexts", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/896", "title": "EOF leaf not included in parent tree source interval", "closed": "2015-06-11 20:13:19", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2015-06-11 17:42:17", "user": "parrt", "body": "[Test case shows issue](https://github.com/parrt/antlr4/blob/check-eof-in-tree/tool/test/org/antlr/v4/test/tool/TestParserInterpreter.java#L72).  Tree shows `<EOF>` but source interval doesn't include it.  Whoops. Culprit is `Parser`:\n\n``` java\n    public void exitRule() {\n        _ctx.stop = _input.LT(-1); <-- ooops; doesn't count EOF\n```\n\nIssue is that consume() of EOF doesn't move p in token stream so `LT(-1)` doesn't include it. Not sure of best solution. Must detect match of EOF.  Can't test `LT(1)==EOF` as that can't distinguish \"about to match EOF\" from \"matched EOF\".\n"}, {"labels": ["comp:runtime", "lexers", "status:invalid", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/895", "title": "fetchedEOF not reset in BufferedTokenStream.reset()", "closed": "2015-06-20 00:08:08", "commitsDetails": [], "commits": {}, "ttf": 11.000277777777777, "created": "2015-06-08 20:46:05", "user": "parrt", "body": "Seems like a bug, right, @sharwell?\n"}, {"labels": ["status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/890", "title": ".gitignore entries are missing a trailing /", "closed": "2015-06-06 16:30:22", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2015-06-06 00:10:48", "user": "sharwell", "body": "In commit cf473b469ca12e7fff92196a864e114b337177b8, several entries in **.gitignore** were altered in two ways:\n1. A leading slash was added\n2. A trailing slash was removed\n\nThese slashes have different meanings; in particular, the trailing slash was used to indicate that the item is a folder. Since each of these items is only intended to match a folder, the trailing slash should be re-added to ensure the entries never unintentionally exclude desired changes from a commit.\n"}, {"labels": ["status:invalid", "trees-contexts", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/879", "title": "`triggerEnterRuleEvent` invoked twice for rules with alt labels", "closed": "2015-05-22 20:00:36", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2015-05-22 05:29:56", "user": "sharwell", "body": "Pull request #876 added a second call to `triggerEnterRuleEvent` from within rules with outer alt labels.\n\nConsider the following rule:\n\n``` antlr\ntypeBound\n    :   type ('&' type)* # TypeBounds\n    ;\n```\n\nThe generated code for this rule is the following (this may differ slightly from the code generated by the reference release, but it's close):\n\n``` java\npublic final TypeBoundContext typeBound() throws RecognitionException {\n    TypeBoundContext _localctx = new TypeBoundContext(_ctx, getState());\n    enterRule(_localctx, 24, RULE_typeBound);\n    int _la;\n    try {\n        _localctx = new TypeBoundsContext(_localctx);\n        enterOuterAlt(_localctx, 1);\n\n// rest of rule ...\n```\n\nThe first call to `triggerEnterRuleEvent` occurs within `enterRule`. The second call, introduced by #876, occurs within `enterOuterAlt`. While this is not a problem if a user only adds code for `enterTypeBound`, it causes a problem for general listeners which handle `enterEveryRule`. One such rule in the runtime library itself is `TraceListener`.\n"}, {"labels": ["comp:build", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/871", "title": "Typo in antlr4/mvn docu", "closed": "2015-05-19 23:50:40", "commitsDetails": [], "commits": {}, "ttf": 4.000277777777778, "created": "2015-05-15 00:41:50", "user": "ghost", "body": "Two different antlr versions (4.1 in dependency section and 4.2 in plugin section) are used in the pom example:\nhttps://theantlrguy.atlassian.net/wiki/display/ANTLR4/Java+IDE+Integration\n\nThe used antlr4 version should be the same, either 4.1 or 4.2, otherwise mvn throws a compilation error:\n\n```\n[ERROR] COMPILATION ERROR :\n[INFO] -------------------------------------------------------------\n[ERROR] /.../array-example/target/generated-sources/antlr4/org/abcd/examples/ArrayInit/ArrayInitParser.\njava:[37,9] method does not override or implement a method from a supertype\n[ERROR] /.../array-example/target/generated-sources/antlr4/org/abcd/examples/ArrayInit/ArrayInitParser.\njava:[165,21] cannot find symbol\n  symbol:   class ATNDeserializer\n  location: class org.abcd.examples.ArrayInit.ArrayInitParser\n[ERROR] /.../array-example/target/generated-sources/antlr4/org/abcd/examples/ArrayInit/ArrayInitLexer.j\nava:[67,21] cannot find symbol\n  symbol:   class ATNDeserializer\n  location: class org.abcd.examples.ArrayInit.ArrayInitLexer\n[ERROR] /.../array-example/target/generated-sources/antlr4/org/abcd/examples/ArrayInit/ArrayInitLexer.j\nava:[46,9] method does not override or implement a method from a supertype\n[INFO] 4 errors\n```\n"}, {"labels": ["comp:build", "status:cannot-reproduce", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/864", "title": "Missing manifest for out-of-the-box call of ./bild.py", "closed": "2015-05-25 19:37:11", "commitsDetails": [], "commits": {}, "ttf": 27.00027777777778, "created": "2015-04-28 08:59:18", "user": "g2graman", "body": "Based on [instructions for building ANTLR from scratch](https://github.com/antlr/antlr4/wiki/How-to-build-ANTLR-itself), I used the following commands in bash\n\n```\nmkdir tmp && cd tmp\ngit clone https://github.com/antlr/antlr4.git &&  cd antlr4 && ./bild.py -debug mkjar\n```\n\nBut when it got to making the jar, I get:\n\n```\n...\nbuild mkjar_complete\n[04/28/15 04:47:03 require ./bild.py:91 bilder.py:430] build mkjar_complete\nTraceback (most recent call last):\n  File \"/home/g2graman/Desktop/translateJS/tmp/antlr4/bilder.py\", line 857, in processargs\n    target()\n  File \"./bild.py\", line 435, in all\n    _mkjar()\n  File \"./bild.py\", line 165, in _mkjar\n    mkjar_complete()\n  File \"./bild.py\", line 103, in mkjar_complete\n    manifest = manifest % (VERSION, os.getlogin()) \nOSError: [Errno 2] No such file or directory\n[04/28/15 04:47:03 processargs ./bild.py:444 bilder.py:860] [Errno 2] No such file or directory\nbild succeeded\n```\n\nWas there a missing step to generate the according manifest file for `mkjar`?\n"}, {"labels": ["comp:tool", "error-handling", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/855", "title": "Null pointer in named alternative with attributes", "closed": "2015-05-19 21:45:00", "commitsDetails": [], "commits": {}, "ttf": 36.000277777777775, "created": "2015-04-13 13:52:23", "user": "oldwo", "body": "Probably the same as https://github.com/antlr/antlr4/issues/822 , this one is stopping my work.\n\n``` antlr\ngrammar probz;\nstatement\nlocals[Scope scope]\n    : expressionA[$scope] ';'\n    ;\nexpressionA[Scope scope]\n    : atom[$scope]\n    | expressionA[$scope] '[' expressionA[$scope] ']'\n    ;\natom[Scope scope]\n    : 'dummy'\n    ;\n```\n\nWhich throws an exception upon compilation:\nC:\\ANTLRprobz>java -jar antlr4-4.5.1-complete.jar probz.g4\nnew Rule() name=T__0 ast=RULE\nnew Rule() name=T__1 ast=RULE\nnew Rule() name=T__2 ast=RULE\nnew Rule() name=T__3 ast=RULE\ngetAltLabels() index=0 numberOfAlts=1 name=T__0 alt[i1].Num1.ast=ALT=>true\ngetAltLabels() index=1 numberOfAlts=1 name=T__1 alt[i1].Num1.ast=ALT=>true\ngetAltLabels() index=2 numberOfAlts=1 name=T__2 alt[i1].Num1.ast=ALT=>true\ngetAltLabels() index=3 numberOfAlts=1 name=T__3 alt[i1].Num1.ast=ALT=>true\nnew Rule() name=statement ast=RULE\nnew Rule() name=expressionA ast=RULE\nnew Rule() name=atom ast=RULE\ngetAltLabels() index=0 numberOfAlts=1 name=statement alt[i1].Num1.ast=ALT=>true\ngetAltLabels() index=1 numberOfAlts=1 name=expressionA alt[i1].Num1.ast=ALT=>true\ngetAltLabels() index=1 numberOfAlts=1 name=expressionA alt[i1].Num1.ast=ALT=>true\ngetAltLabels() index=2 numberOfAlts=1 name=atom alt[i1].Num1.ast=null=>true\ncontext [/report INTERNAL_ERROR] 1:17 attribute arg isn't defined\nerror(20):  internal error:\nException in thread \"main\" java.lang.NullPointerException\n        at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:116)\n        at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:399)\n        at org.antlr.v4.Tool.process(Tool.java:386)\n        at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:345)\n        at org.antlr.v4.Tool.main(Tool.java:192)\n"}, {"labels": ["comp:build", "type:bug"], "filteredCommits": ["b7e5bfcbf8c9a773b9a5eb7d36a5d790241e89d6"], "url": "https://github.com/antlr/antlr4/issues/846", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 1, "deletions": 0}, "numCommits": 1, "commits": {"b7e5bfcbf8c9a773b9a5eb7d36a5d790241e89d6": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 53.000277777777775, "user": "zssty2010", "changesInPackagesGIT": ["bild.py"], "body": "I use `os.getenv('USERNAME')` in Windows 7 instead\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "os.getlogin() is not valid in windows", "statsSkippedReason": "", "closed": "2015-05-22 20:08:09", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2015-05-22 13:08:02", "commitHash": "b7e5bfcbf8c9a773b9a5eb7d36a5d790241e89d6", "commitParents": ["c2ea6aa49160c1acf365fbb1265c6944e80a5884"], "commitGHEventType": "closed", "nameRev": "b7e5bfcbf8c9a773b9a5eb7d36a5d790241e89d6 tags/4.5.1-beta-1~64", "commitGitStats": [{"insertions": 1, "lines": 1, "filePath": "bild.py", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Fixes #846. rm target file before rename in bild script.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-05-22 13:08:02"}], "created": "2015-03-30 04:07:23"}, {"labels": ["comp:tool", "error-handling", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/822", "title": "NullPointerException in bad recursion rule", "closed": "2015-05-19 21:45:00", "commitsDetails": [], "commits": {}, "ttf": 83.00027777777778, "created": "2015-02-25 19:34:11", "user": "marcpawl", "body": "Error on my part lead to discovering an exception being thrown while generating the grammar.\n\n$ cat error.g4 \n\n``` antlr\ngrammar Error;\n\na:\n  a | b;\n\nb: 'B';\n```\n\n$ cat build.xml\n\n``` xml\n <project name=\"error\" default=\"generate\">\n  <target name=\"generate\" >\n                <java classname=\"org.antlr.v4.Tool\" fork=\"false\" failonerror=\"true\">\n                        <arg value=\"-o\" />\n                        <arg value=\"java\" />\n                        <arg value=\"-package\" />\n                        <arg value=\"com.example\" />\n                        <arg value=\"-visitor\" />\n                        <arg value=\"-Werror\" />\n                        <arg value=\"error.g4\" />\n                        <classpath>\n                                <pathelement location=\"antlr-4.4-complete.jar\"/>\n                        </classpath>\n                </java>\n</target>\n</project>\n```\n\n```\n$ ant\nbuild.xml:3: java.lang.NullPointerException\n    at org.antlr.v4.tool.Rule.getAltLabels(Rule.java:217)\n    at org.antlr.v4.tool.Rule.hasAltSpecificContexts(Rule.java:200)\n    at org.antlr.v4.semantics.SymbolChecks.checkForLabelConflicts(SymbolChecks.java:157)\n    at org.antlr.v4.semantics.SymbolChecks.process(SymbolChecks.java:105)\n    at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:107)\n    at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:400)\n    at org.antlr.v4.Tool.process(Tool.java:387)\n    at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:346)\n    at org.antlr.v4.Tool.main(Tool.java:193)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.apache.tools.ant.taskdefs.ExecuteJava.run(ExecuteJava.java:217)\n    at org.apache.tools.ant.taskdefs.ExecuteJava.execute(ExecuteJava.java:152)\n    at org.apache.tools.ant.taskdefs.Java.run(Java.java:771)\n    at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:221)\n    at org.apache.tools.ant.taskdefs.Java.executeJava(Java.java:135)\n    at org.apache.tools.ant.taskdefs.Java.execute(Java.java:108)\n    at org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:292)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n    at java.lang.reflect.Method.invoke(Method.java:483)\n    at org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n    at org.apache.tools.ant.Task.perform(Task.java:348)\n    at org.apache.tools.ant.Target.execute(Target.java:435)\n    at org.apache.tools.ant.Target.performTasks(Target.java:456)\n    at org.apache.tools.ant.Project.executeSortedTargets(Project.java:1393)\n    at org.apache.tools.ant.Project.executeTarget(Project.java:1364)\n    at org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n    at org.apache.tools.ant.Project.executeTargets(Project.java:1248)\n    at org.apache.tools.ant.Main.runBuild(Main.java:851)\n    at org.apache.tools.ant.Main.startAnt(Main.java:235)\n    at org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n    at org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)\n\nTotal time: 0 seconds\n```\n"}, {"labels": ["atn-analysis", "comp:runtime", "status:fixed", "type:bug"], "filteredCommits": [], "url": "https://github.com/antlr/antlr4/issues/804", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"e8c6dc4e394f895fb5b29b3cb1ce7da6066d4231": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 7.000277777777778, "user": "parrt", "changesInPackagesSPOON": [], "changesInPackagesGIT": [], "body": "It looks like a transient problem, even in the environment where we saw the issue originally it hasn't been reproducible. Only happens in our automation environment (rehat 5.7 running on open stack running on I dunno what) and only occasionally.\n\nIt happens in here:\n\n``` java\nsynchronized (from) {\n    if ( from.edges==null ) { \n        from.edges = new DFAState[atn.maxTokenType+1+1];\n    }   \n\n    from.edges[t+1] = to; // connect\n}   \n```\n\nso in some case `atn.maxTokenType+1 > t` must be true.   \n\nI checked and it looks like the field \"edges\" is always protected by its parent `DFAState` object except for in one suspicious place where it appears to be guarded by an instance of `DFA` in `DFA.java`'s `setPrecedenceDfa` method.  (all in 4.3)\n\nIt would seem on the face of it that you need to synchronize inside `setPrecedenceDfa` on the `DFAState` rather than the `DFA` (or perhaps in addition too?).  \n\nMaybe we should just add an assert there.   \n\n``` java\nassert t +1 < from.edges.length : \"array index out of bounds!, t = \" + t + \", edges.length=\" + from.edges.length;\n```\n\nAnd perhaps add something about which threads are active and their stacks if it fails?\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0, "TOT": 0, "DEL": 0, "INS": 0, "spoonFilesChanged": 0, "MOV": 0}, "title": "Random ArrayIndexOutOfBounds exceptions coming from ParserATNSimulator", "statsSkippedReason": "", "closed": "2015-01-31 22:30:10", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2015-01-31 14:30:10", "commitHash": "e8c6dc4e394f895fb5b29b3cb1ce7da6066d4231", "commitParents": ["39818ad5479ba38ed3ddeeff98b11df699c373db", "bc98e5b68777487a10aa21efa07a5d07436d7292"], "commitGHEventType": "referenced", "nameRev": "e8c6dc4e394f895fb5b29b3cb1ce7da6066d4231 tags/4.4.1-opt~2^2~19", "commitGitStats": [{"insertions": 27, "lines": 57, "filePath": "runtime/Java/src/org/antlr/v4/runtime/dfa/DFA.java", "deletions": 30}, {"insertions": 0, "lines": 11, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java", "deletions": 11}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 12, "DEL": 6, "INS": 4, "MOV": 2, "spoonMethodName": "org.antlr.v4.runtime.dfa.DFA.setPrecedenceDfa(boolean)"}, {"UPD": 2, "TOT": 6, "DEL": 0, "INS": 4, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.dfa.DFA"}], "spoonFilePath": "DFA.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.ParserATNSimulator.adaptivePredict(org.antlr.v4.runtime.TokenStream,int,org.antlr.v4.runtime.ParserRuleContext)"}], "spoonFilePath": "ParserATNSimulator.java"}], "commitMessage": "Merge pull request #805 from sharwell/fix-804\n\nFixes #804 potential misuse of the DFA start state when initializing a decision", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-01-31 14:30:10"}], "created": "2015-01-24 19:27:19"}, {"labels": ["comp:build", "type:bug"], "filteredCommits": ["368aad82235cfd5bfa017e2239abc2d1f679a92b"], "url": "https://github.com/antlr/antlr4/issues/796", "gitStatsSummary": {"insertions": 10, "gitFilesChange": 1, "lines": 11, "deletions": 1}, "numCommits": 1, "commits": {"368aad82235cfd5bfa017e2239abc2d1f679a92b": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "parrt", "changesInPackagesGIT": ["bild.py"], "body": "ANTLR Tool version 4.4 used for code generation does not match the current runtime version 4.5\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "XPathLexer not regenerated during bild properly", "statsSkippedReason": "", "closed": "2015-01-20 00:13:33", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2015-01-19 16:13:00", "commitHash": "368aad82235cfd5bfa017e2239abc2d1f679a92b", "commitParents": ["0e03820487c93161715fc969d0f91744a043b773"], "commitGHEventType": "closed", "nameRev": "368aad82235cfd5bfa017e2239abc2d1f679a92b tags/before-fix-recovery-merge~3", "commitGitStats": [{"insertions": 10, "lines": 11, "filePath": "bild.py", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Fixes #796; wasnt rebuilding XPath stuff with latest 4.5\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-01-19 16:13:00"}], "created": "2015-01-19 23:53:14"}, {"labels": ["comp:runtime", "error-handling", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/795", "title": "Excess token consumption during recovery", "closed": "2015-01-21 18:18:05", "commitsDetails": [], "commits": {}, "ttf": 2.000277777777778, "created": "2015-01-19 16:59:42", "user": "michaelpj", "body": "The method `recoverInline` in `ANTLRErrorStrategy` returns a `Token`, however, in my generated parsers, I see it used like this:\n\n``` java\n        try {\n            enterOuterAlt(_localctx, 1);\n            {\n            setState(479);\n            _la = _input.LA(1);\n            if ( !(_la==TKminus || _la==TKplus) ) {\n            _errHandler.recoverInline(this);\n            }\n            consume();\n            }\n        }\n```\n\nThat is, the `Token` produced from `recoverInline` is ignored. \n\nThis can lead to excess token consumption, as the `DefaultErrorStrategy` will call `consume` if it deletes a token, returning the matched token. (It calls it first in `singleTokenDeletion` to delete the token, but then again in `recoverInline`). But then the parser will `consume` once again, so we also consume the token _after_ the one we wanted.\n\nNeedless to say, this can really mess up error recovery.\n\nIt's not clear to me from the documentation of `recoverInline` whether a successful return indicates that the token has been consumed or not. I suspect it does, since `singleTokenInsertion` does not in fact insert a token into the stream that could later be consumed. Hence, the fix is probably just to put the generated `consume` in an `else` block.\n"}, {"labels": ["actions", "comp:tool", "grammars", "status:fixed", "type:bug"], "filteredCommits": ["3e5fc6972a081f7efa950c2fa5683ca2777370ba"], "url": "https://github.com/antlr/antlr4/issues/773", "gitStatsSummary": {"insertions": 14, "gitFilesChange": 1, "lines": 16, "deletions": 2}, "numCommits": 1, "commits": {"3e5fc6972a081f7efa950c2fa5683ca2777370ba": {"commitUser": "parrt", "commitGHEventType": "closed"}, "85c145eff9d1bcef9149e54852a35299ca186fb2": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 163.00027777777777, "user": "yaitskov", "changesInPackagesSPOON": ["org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.text(org.antlr.v4.tool.ast.GrammarAST)"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/analysis"], "body": "``` antlr\ngrammar A;\nDIGIT: [0-9];\ns: val EOF;\nval: dval[1] | val '*' val;\ndval[int  x]: '.';\n```\n\nANTLR version 4.4\n\n```\nerror(50): :2:32: syntax error: '1' came as a complete surprise to me while looking for rule element \n/Users/parrt/antlr/code/antlr4/tool/src/org/antlr/v4/parse/GrammarTreeVisitor.g: node from after line 2:10 no viable alternative at input 'dval<tokenIndex=22>' \n/Users/parrt/antlr/code/antlr4/tool/src/org/antlr/v4/parse/GrammarTreeVisitor.g: node from after line 2:10 no viable alternative at input 'dval<tokenIndex=22>' \n/Users/parrt/antlr/code/antlr4/tool/src/org/antlr/v4/parse/GrammarTreeVisitor.g: node from after line 2:10 no viable alternative at input 'dval<tokenIndex=22>'\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 13, "DEL": 1, "INS": 2, "spoonFilesChanged": 1, "MOV": 10}, "title": "Rule parameter in left recursive rules disallowed", "statsSkippedReason": "", "closed": "2015-05-22 23:51:00", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2015-05-22 16:49:31", "commitHash": "3e5fc6972a081f7efa950c2fa5683ca2777370ba", "commitParents": ["b7e5bfcbf8c9a773b9a5eb7d36a5d790241e89d6"], "commitGHEventType": "closed", "nameRev": "3e5fc6972a081f7efa950c2fa5683ca2777370ba tags/4.5.1-beta-1~63^2", "commitGitStats": [{"insertions": 12, "lines": 14, "filePath": "tool/test/org/antlr/v4/test/tool/TestLeftRecursionToolIssues.java", "deletions": 2}, {"insertions": 14, "lines": 16, "filePath": "tool/src/org/antlr/v4/analysis/LeftRecursiveRuleAnalyzer.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 13, "DEL": 1, "INS": 2, "MOV": 10, "spoonMethodName": "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.text(org.antlr.v4.tool.ast.GrammarAST)"}], "spoonFilePath": "LeftRecursiveRuleAnalyzer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestLeftRecursionToolIssues.testArgOnPrimaryRuleInLeftRecursiveRule()"}], "spoonFilePath": "TestLeftRecursionToolIssues.java"}], "commitMessage": "Fixes #773. rule[arg] in non-lr rule alt didnt translate right\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-05-22 16:49:31"}, {"commitUser": "parrt", "commitDateTime": "2015-05-22 16:50:57", "commitHash": "85c145eff9d1bcef9149e54852a35299ca186fb2", "commitParents": ["b7e5bfcbf8c9a773b9a5eb7d36a5d790241e89d6", "3e5fc6972a081f7efa950c2fa5683ca2777370ba"], "commitGHEventType": "referenced", "nameRev": "85c145eff9d1bcef9149e54852a35299ca186fb2 tags/4.5.1-beta-1~63", "commitGitStats": [{"insertions": 12, "lines": 14, "filePath": "tool/test/org/antlr/v4/test/tool/TestLeftRecursionToolIssues.java", "deletions": 2}, {"insertions": 14, "lines": 16, "filePath": "tool/src/org/antlr/v4/analysis/LeftRecursiveRuleAnalyzer.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 13, "DEL": 1, "INS": 2, "MOV": 10, "spoonMethodName": "org.antlr.v4.analysis.LeftRecursiveRuleAnalyzer.text(org.antlr.v4.tool.ast.GrammarAST)"}], "spoonFilePath": "LeftRecursiveRuleAnalyzer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestLeftRecursionToolIssues.testArgOnPrimaryRuleInLeftRecursiveRule()"}], "spoonFilePath": "TestLeftRecursionToolIssues.java"}], "commitMessage": "Merge pull request #881 from parrt/fix-missing-arg-on-rule-ref-in-lr-rule\n\nFixes #773. rule[arg] in non-lr rule alt didnt translate right", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-05-22 16:50:57"}], "created": "2014-12-10 15:35:44"}, {"labels": ["cross-platform-issue", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/753", "title": "Unexpected code generation location behavior ", "closed": "2017-11-04 17:43:27", "commitsDetails": [], "commits": {}, "ttf": 1098.0002777777777, "created": "2014-11-01 22:42:54", "user": "grosenberg", "body": "On Windows / Antlr 4.4  (might be related to #638)\n\nThe following works as expected: grammars exist in the parent directory (parser) & all generated files wind up in the current directory (gen)\n\ncd /d D:\\DevFiles\\Java\\JsonEditor\\src\\net\\certiv\\json\\parser\\gen\\\njava org.antlr.v4.Tool ../JsonLexer.g4 ../JsonParser.g4\n\nThe following fails: \n\ncd /d D:\\DevFiles\\Java\\JsonEditor\\src\\net\\certiv\\json\\parser\\gen\\\njava org.antlr.v4.Tool ..\\JsonLexer.g4 ..\\JsonParser.g4\n\nJsonLexer.java and JsonLexer.tokens are generated in the parent directory (parser) and the compile of the JsonParser.g4 fails saying that it cannot find the JsonLexer.tokens in the current directory (gen).\n\nNote the difference in the slashes in the grammar paths - \"../\" works completely as expected, but \"..\\\" works sufficiently for the Tool to find the grammars, but generates in the wrong directory.  Adding -o and -lib options in various combinations don't affect the result.\n\nThis problem was encountered while rebuilding an early Antlr4 project.  So using \"..\\\" apparently worked as expected \"way back then.\"  \n"}, {"labels": ["status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/709", "title": "Maven build has test failures due to order of token types", "closed": "2014-09-29 16:40:03", "commitsDetails": [], "commits": {}, "ttf": 5.000277777777778, "created": "2014-09-23 22:40:28", "user": "jsculley", "body": "I am getting multiple test failures when trying to build ANTLR 4.4 with Maven using JDK 8 on my Linux Mint machine.  The problem seems to be the order of the tokens in the .token files generated by ANTLR.  For example, from the `org.antlr.v4.test.TestParseErrors` class, the `testConjuringUpToken` method fails as follows:\n\n`testConjuringUpToken(org.antlr.v4.test.TestParseErrors)  Time elapsed: 0.328 sec  <<< FAILURE!`\n`org.junit.ComparisonFailure: expected:<...-1='<missing 'b'>',<[1]>,1:1]`\n`> but was:<...-1='<missing 'b'>',<[2]>,1:1]`\n\nNote that the expected token type is 1, but the actual token type is 2.  The .token file generated by ANTLR (run separately using the antlr-4.4-complete.jar downloaded from ANTLR.org) looks like this:\n`jim@clifford ~/java $ cat T.tokens`\n`T__2=1`\n`T__1=2`\n`T__0=3`\n`'c'=3`\n`'b'=2`\n`'a'=1`\nSo, the test seems to be generating the same .token file where token 'b' is type 2, not type 1 as the test expects.\n\nOther tests fail in similar fashion.\n"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/707", "title": "Suppress warning 109 for matching options during import", "closed": "2014-09-26 21:40:36", "commitsDetails": [], "commits": {}, "ttf": 4.000277777777778, "created": "2014-09-21 23:42:01", "user": "sharwell", "body": "Warning 109 is emitted if an imported grammar contains an `options{}` block. The warning should be suppressed in the specific case that an imported grammar contains an `options{}` block, where every option value matches the values specified in the root grammar. For example, if a root grammar an imported grammar _each_ contain the following options, no warning should appear.\n\n``` antlr\noptions {\n  tokenVocab = FooLexer;\n}\n```\n"}, {"labels": ["code-gen", "comp:tool", "lexers", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/687", "title": "Empty zero-length tokens cannot have lexer commands", "closed": "2014-09-02 20:25:14", "commitsDetails": [], "commits": {}, "ttf": 5.000277777777778, "created": "2014-08-27 23:18:08", "user": "sharwell", "body": "Currently the Tool rejects the following lexer rule:\n\n``` antlr\nStringConstantMode_NotContinued\n    :   // intentionally empty\n        -> skip, popMode\n    ;\n```\n\nAs a workaround, the code generation process succeeds if an empty action is included.\n\n``` antlr\nAfterEscapeStringConstantMode_NotContinued\n    :   {} // intentionally empty\n        -> skip, popMode\n    ;\n```\n"}, {"labels": ["comp:tool", "type:bug"], "filteredCommits": ["4f0f361d93a6913f58e1169baa9cef249b7aee6d"], "url": "https://github.com/antlr/antlr4/issues/670", "gitStatsSummary": {"insertions": 19, "gitFilesChange": 2, "lines": 24, "deletions": 5}, "numCommits": 1, "commits": {"0d18457c6dea681b529bf1fe9829a0eb65f9c788": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "4f0f361d93a6913f58e1169baa9cef249b7aee6d": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 175.00027777777777, "user": "parrt", "changesInPackagesSPOON": ["org.antlr.v4.tool.Grammar", "org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules()", "org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(org.antlr.v4.tool.ast.GrammarRootAST,org.antlr.v4.tool.LeftRecursiveRule,java.lang.String)"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/analysis", "tool/src/org/antlr/v4/tool"], "body": "4.3 seems to do same thing as 4.4. 4.2.2 worked.\n\n```\n~/antlr/code/grammars-v4/java $ cp Java.g4 /tmp\n~/antlr/code/grammars-v4/java $ pushd /tmp\n/tmp ~/antlr/code/grammars-v4/java\n/tmp $ cat > NewJava.g4\ngrammar NewJava;\nimport Java;\n/tmp $ a4 NewJava.g4 \nException in thread \"main\" java.util.NoSuchElementException: token index 1851 out of range 0..11\n    at org.antlr.runtime.BufferedTokenStream.get(BufferedTokenStream.java:154)\n    at org.antlr.v4.parse.GrammarToken.getLine(GrammarToken.java:57)\n    at org.antlr.runtime.tree.CommonTreeNodeStream.hasPositionInformation(CommonTreeNodeStream.java:208)\n    at org.antlr.runtime.tree.CommonTreeNodeStream.remove(CommonTreeNodeStream.java:116)\n    at org.antlr.runtime.misc.LookaheadStream.consume(LookaheadStream.java:97)\n    at org.antlr.runtime.tree.TreeParser.matchAny(TreeParser.java:118)\n    at org.antlr.v4.parse.BlockSetTransformer.topdown(BlockSetTransformer.java:328)\n    at org.antlr.v4.parse.BlockSetTransformer.topdown(BlockSetTransformer.java:24)\n    at org.antlr.runtime.tree.TreeRewriter$2.rule(TreeRewriter.java:111)\n    at org.antlr.runtime.tree.TreeRewriter.applyOnce(TreeRewriter.java:61)\n    at org.antlr.runtime.tree.TreeRewriter$1.pre(TreeRewriter.java:93)\n    at org.antlr.runtime.tree.TreeVisitor.visit(TreeVisitor.java:56)\n    at org.antlr.runtime.tree.TreeRewriter.downup(TreeRewriter.java:97)\n    at org.antlr.runtime.tree.TreeRewriter.downup(TreeRewriter.java:86)\n    at org.antlr.v4.tool.GrammarTransformPipeline.reduceBlocksToSets(GrammarTransformPipeline.java:89)\n    at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(LeftRecursiveRuleTransformer.java:149)\n    at org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules(LeftRecursiveRuleTransformer.java:96)\n    at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:94)\n    at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:400)\n    at org.antlr.v4.Tool.process(Tool.java:387)\n    at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:346)\n    at org.antlr.v4.Tool.main(Tool.java:193)\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 3, "UPD": 0, "TOT": 6, "DEL": 2, "INS": 4, "spoonFilesChanged": 2, "MOV": 0}, "title": "exception when importing grammar", "statsSkippedReason": "", "closed": "2015-01-13 01:30:30", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2014-09-26 14:31:10", "commitHash": "0d18457c6dea681b529bf1fe9829a0eb65f9c788", "commitParents": ["0d4a28eac9291fe6483259312a751228fe4d10a7", "313767239011a7e044da864629380233cef58092"], "commitGHEventType": "referenced", "nameRev": "0d18457c6dea681b529bf1fe9829a0eb65f9c788 tags/4.5-rc-1~12^2~23", "commitGitStats": [{"insertions": 20, "lines": 20, "filePath": "tool/test/org/antlr/v4/test/TestCompositeGrammars.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestCompositeGrammars.testImportLargeGrammar()"}], "spoonFilePath": "TestCompositeGrammars.java"}], "commitMessage": "Merge pull request #716 from sharwell/fix-670\n\nAdd regression test for #670", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-09-26 14:31:10"}, {"commitUser": "parrt", "commitDateTime": "2015-01-12 13:05:03", "commitHash": "4f0f361d93a6913f58e1169baa9cef249b7aee6d", "commitParents": ["64f6e196b2197cfcf5f25349c7b49e73d7ddcd4c"], "commitGHEventType": "closed", "nameRev": "4f0f361d93a6913f58e1169baa9cef249b7aee6d tags/before-fix-recovery-merge~18^2", "commitGitStats": [{"insertions": 6, "lines": 9, "filePath": "tool/src/org/antlr/v4/analysis/LeftRecursiveRuleTransformer.java", "deletions": 3}, {"insertions": 13, "lines": 15, "filePath": "tool/src/org/antlr/v4/tool/Grammar.java", "deletions": 2}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRule(org.antlr.v4.tool.ast.GrammarRootAST,org.antlr.v4.tool.LeftRecursiveRule,java.lang.String)"}, {"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.analysis.LeftRecursiveRuleTransformer.translateLeftRecursiveRules()"}], "spoonFilePath": "LeftRecursiveRuleTransformer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.Grammar"}], "spoonFilePath": "Grammar.java"}], "commitMessage": "Fixes #670. Left recursive rules imported into a root grammar caused an error. All tests pass in all targets.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-01-12 13:05:03"}], "created": "2014-07-21 15:59:19"}, {"labels": ["comp:runtime", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/667", "title": "ANTLRInputStream.getSourceName() has @NotNull annotation, but returns null", "closed": "2014-09-29 16:36:41", "commitsDetails": [], "commits": {}, "ttf": 74.00027777777778, "created": "2014-07-17 16:15:19", "user": "arthurfabre", "body": "`ANTLRInputStream.getSourceName()` always returns null, yet the interface requiring this method (`IntStream`) decorates it with the `@NotNull` annotation.\n\n`getSourceName()` returns `name`, but `name` is never set from within the class or anywhere else (why is the field public?).\n"}, {"labels": ["comp:tool", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/664", "title": "Single alt + loops had no AST node pointing at decision ATN State (loop back)", "closed": "2014-07-18 01:40:12", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2014-07-17 03:41:11", "user": "parrt", "body": "Added unit test `a : A+ ;` and it has AST\n\n```\n(RULE a (BLOCK (ALT (+ (BLOCK (ALT A))))))\n```\n\nbut no AST node points at the ATN decision state: 10. Note:\n\n```\n{RULE=2, BLOCK=8, +=8, BLOCK=8, A=7}\n```\n\nThat should be `+=10`.\n"}, {"labels": ["atn-analysis", "comp:tool", "grammars", "type:bug"], "filteredCommits": ["bb389782da9fe9a9a1c56c31a5af4f61c39c31fb"], "url": "https://github.com/antlr/antlr4/issues/661", "gitStatsSummary": {"insertions": 218, "gitFilesChange": 9, "lines": 382, "deletions": 164}, "numCommits": 1, "commits": {"bb389782da9fe9a9a1c56c31a5af4f61c39c31fb": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "parrt", "changesInPackagesSPOON": ["org.antlr.v4.semantics.RuleCollector", "org.antlr.v4.semantics.BasicSemanticChecks.checkInvalidRuleRef(org.antlr.runtime.Token)", "org.antlr.v4.semantics.RuleCollector.getErrorManager()", "org.antlr.v4.tool.Grammar.getStringLiterals().2.getErrorManager()", "org.antlr.v4.tool.ErrorType", "org.antlr.v4.codegen.model.RuleFunction.ElementFrequenciesVisitor", "org.antlr.v4.semantics.SymbolCollector", "org.antlr.v4.semantics.SymbolCollector.getErrorManager()", "org.antlr.v4.codegen.model.ElementFrequenciesVisitor", "org.antlr.v4.semantics.BasicSemanticChecks.getErrorManager()", "org.antlr.v4.Tool.checkForRuleIssues(org.antlr.v4.tool.Grammar).1UndefChecker.ruleRef(org.antlr.v4.tool.ast.GrammarAST,org.antlr.v4.tool.ast.ActionAST)", "org.antlr.v4.Tool.checkForRuleIssues(org.antlr.v4.tool.Grammar)", "org.antlr.v4.Tool.checkForRuleIssues(org.antlr.v4.tool.Grammar).1UndefChecker.getErrorManager()", "org.antlr.v4.codegen.model.RuleFunction.getElementFrequenciesForAlt(org.antlr.v4.tool.ast.AltAST)", "org.antlr.v4.Tool.checkForRuleIssues(org.antlr.v4.tool.Grammar).1UndefChecker"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/codegen/model", "tool/src/org/antlr/v4/semantics", "tool/src/org/antlr/v4", "tool/src/org/antlr/v4/parse/GrammarTreeVisitor.g", "tool/src/org/antlr/v4/tool"], "body": "Grammar test:\n\n```\ngrammar U;\nA : a ;\n```\n\nYields:\n\n```\n~/IdeaProjects/testplugin $ a4 U.g4\nGrammarTreeVisitor.g: node from line 3:4 required (...)+ loop did not match anything at input 'a'\nGrammarTreeVisitor.g: node from line 3:4 required (...)+ loop did not match anything at input 'a'\nGrammarTreeVisitor.g: node from line 3:4 required (...)+ loop did not match anything at input 'a'\nGrammarTreeVisitor.g: node from line 3:4 required (...)+ loop did not match anything at input 'a'\nerror(20): U.g4:3:4: internal error: Rule a undefined \nerror(20):  internal error: element list has first|last == null \nException in thread \"main\" java.lang.NullPointerException\n    at org.antlr.v4.automata.ParserATNFactory.elemList(ParserATNFactory.java:504)\n    at org.antlr.v4.automata.ParserATNFactory.alt(ParserATNFactory.java:473)\n    at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:556)\n    at org.antlr.v4.parse.ATNBuilder.ruleBlock(ATNBuilder.java:290)\n    at org.antlr.v4.automata.ParserATNFactory._createATN(ParserATNFactory.java:184)\n    at org.antlr.v4.automata.LexerATNFactory.createATN(LexerATNFactory.java:137)\n    at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:414)\n    at org.antlr.v4.Tool.process(Tool.java:379)\n    at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:346)\n    at org.antlr.v4.Tool.main(Tool.java:193)\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 15, "UPD": 6, "TOT": 23, "DEL": 2, "INS": 13, "spoonFilesChanged": 8, "MOV": 2}, "title": "NullPtr and bad tree parse upon parser rule ref in lexer rule in combined grammar", "statsSkippedReason": "", "closed": "2014-07-11 19:10:43", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2014-07-11 12:09:47", "commitHash": "bb389782da9fe9a9a1c56c31a5af4f61c39c31fb", "commitParents": ["b4a53d56d4324739e823344237c4d7fdf6cac90c"], "commitGHEventType": "closed", "nameRev": "bb389782da9fe9a9a1c56c31a5af4f61c39c31fb tags/4.4~9^2", "commitGitStats": [{"insertions": 9, "lines": 10, "filePath": "tool/src/org/antlr/v4/semantics/RuleCollector.java", "deletions": 1}, {"insertions": 16, "lines": 21, "filePath": "tool/src/org/antlr/v4/Tool.java", "deletions": 5}, {"insertions": 5, "lines": 7, "filePath": "tool/src/org/antlr/v4/semantics/BasicSemanticChecks.java", "deletions": 2}, {"insertions": 4, "lines": 5, "filePath": "tool/src/org/antlr/v4/parse/GrammarTreeVisitor.g", "deletions": 1}, {"insertions": 6, "lines": 6, "filePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "deletions": 0}, {"insertions": 16, "lines": 21, "filePath": "tool/test/org/antlr/v4/test/TestATNConstruction.java", "deletions": 5}, {"insertions": 0, "lines": 153, "filePath": "tool/src/org/antlr/v4/codegen/model/RuleFunction.java", "deletions": 153}, {"insertions": 2, "lines": 3, "filePath": "tool/src/org/antlr/v4/tool/Grammar.java", "deletions": 1}, {"insertions": 10, "lines": 11, "filePath": "tool/src/org/antlr/v4/semantics/SymbolCollector.java", "deletions": 1}, {"insertions": 166, "lines": 166, "filePath": "tool/src/org/antlr/v4/codegen/model/ElementFrequenciesVisitor.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 3, "TOT": 25, "DEL": 1, "INS": 7, "MOV": 14, "spoonMethodName": "org.antlr.v4.test.TestATNConstruction.testParserRuleRefInLexerRule()"}], "spoonFilePath": "TestATNConstruction.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.Tool.checkForRuleIssues(org.antlr.v4.tool.Grammar).1UndefChecker.getErrorManager()"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.Tool.checkForRuleIssues(org.antlr.v4.tool.Grammar)"}, {"UPD": 1, "TOT": 5, "DEL": 1, "INS": 1, "MOV": 2, "spoonMethodName": "org.antlr.v4.Tool.checkForRuleIssues(org.antlr.v4.tool.Grammar).1UndefChecker.ruleRef(org.antlr.v4.tool.ast.GrammarAST,org.antlr.v4.tool.ast.ActionAST)"}, {"UPD": 1, "TOT": 1, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.Tool.checkForRuleIssues(org.antlr.v4.tool.Grammar).1UndefChecker"}], "spoonFilePath": "Tool.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.SymbolCollector"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.SymbolCollector.getErrorManager()"}], "spoonFilePath": "SymbolCollector.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.getErrorManager()"}, {"UPD": 1, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.checkInvalidRuleRef(org.antlr.runtime.Token)"}], "spoonFilePath": "BasicSemanticChecks.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.Grammar.getStringLiterals().2.getErrorManager()"}], "spoonFilePath": "Grammar.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.RuleCollector"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.RuleCollector.getErrorManager()"}], "spoonFilePath": "RuleCollector.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 1, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.codegen.model.RuleFunction.ElementFrequenciesVisitor"}, {"UPD": 2, "TOT": 2, "DEL": 0, "INS": 0, "MOV": 0, "spoonMethodName": "org.antlr.v4.codegen.model.RuleFunction.getElementFrequenciesForAlt(org.antlr.v4.tool.ast.AltAST)"}], "spoonFilePath": "RuleFunction.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.codegen.model.ElementFrequenciesVisitor"}], "spoonFilePath": "ElementFrequenciesVisitor.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ErrorType"}], "spoonFilePath": "ErrorType.java"}], "commitMessage": "Fixes #661.  A parser rule reference within a lexer rule would get a bad error message and then an exception. Further, errors within the grammar tree visitor would go to standard error instead of to an error manager because none of the subclasses implemented getErrorManager(). Introduced an error type for this error PARSER_RULE_REF_IN_LEXER_RULE. Added to unit test.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-07-11 12:09:47"}], "created": "2014-07-11 00:11:38"}, {"labels": ["comp:tool", "error-handling", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/649", "title": "unknown target causes null ptr exception.", "closed": "2014-07-21 16:12:44", "commitsDetails": [], "commits": {}, "ttf": 21.00027777777778, "created": "2014-06-29 19:32:43", "user": "parrt", "body": "Ripple effect looks to be huge. I recommend throwing a \"panic\" to bail out of tool.\n"}, {"labels": ["command-line-options", "comp:tool", "status:invalid", "type:bug", "type:feature"], "url": "https://github.com/antlr/antlr4/issues/644", "title": "ANTLR doesn't look in output dir for .tokens files if -lib doesn't have them", "closed": "2014-06-28 21:20:05", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2014-06-28 20:45:07", "user": "parrt", "body": " Imagine having your grammars in one directory and wanting to generate parsers in another directory. This is no problem we use -o option. Now imagine that we want to import grammars from another directory and use -lib. unfortunately, now the tool does not see the tokens files because it assumes that they are in the -lib dir. A simple fix is an enhancement that has the tool look in the output directory if the library director he does not have the file. See TestCompositeGrammars.testTokensFileInOutputDirAndImportFileInSubdir() in parrt/antlr4/test-tokens-and-imports-dir branch.\n"}, {"labels": ["comp:build", "status:duplicate", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/638", "title": "Compiling seperate lexer and parser in subdirectory fails", "closed": "2017-11-04 17:42:43", "commitsDetails": [], "commits": {}, "ttf": 1234.0002777777777, "created": "2014-06-19 09:11:03", "user": "arthurfabre", "body": "If one defines a seperate Parser and Lexer as such:\n\nLexer.g4:\n\n```\nlexer grammar Lexer;\n\ntokens {INDENT, DEDENT}\n\nINT     : [0-9]+ ;\n```\n\nParser.g4:\n\n```\nparser grammar Parser;\n\noptions { tokenVocab=Lexer; }\n\nmain    \n        : INT* EOF\n        ;\n```\n\nWith the following directory layout:\n\n```\n-project\n    -src\n        -Lexer.g4\n        -Parser.g4\n    -build\n    -antlr4.2.2-complete.jar\n```\n\nCompiling from the `project` directory with the following command:\n`java -jar antlr-4.2.2-complete.jar -o build src/*.g4`\n\nFails with: `error(3):  cannot find tokens file 'build/Lexer.tokens'`\n\n`Lexer.tokens` is correctly generated, but is in `build/src/Lexer.tokens` as expected.\n\nThis works fine if the grammar files are in the current directory when compiling them (ie one runs `java -jar ../antlr-4.2.2-complete.jar -o ../build *.g4` or if an extra `-lib build/src/` option is used. \n\nIt seems this shouldn't be required and antlr should know where to find the .tokens file it generates.\n## UPDATE:\n\nHere are some additional details about the proposed feature:\n\nFor the following, assume this directory layout:\n\n```\n-project\n    -src\n        -foo\n            -lexer.g4\n            -metarParser.g4\n            -tafParser.g4\n        -bar\n            -notamParser.g4\n    -build\n```\n\nWith the following dependency between the grammars:\n\n```\nlexer.g4:\nmetarParser.g4: lexer.g4\nnotamParser.g4: lexer.g4\ntafParser.g4: notamParser.g4\n```\n\nIn all the following cases it is assumed that all of the grammar files are compiled in a single invocation of antlr, and that we want the generated files\nto be in the build directory (optionally in sub folders).\n### 1st case: All grammars in working directory.\n- We wish to compile metarParser.g4\n- Our working directory is project/src/foo/\n- Run command: antlr *.g4 -o ../../build/\n  \n  Observed behavior:\n  - Antlr compiles lexer.g4\n  - lexer.g4 has a relative path of ., the generated token file is therefore in build/\n  - Antlr adds the ../../build/ directory to it's \"lib\" search path\n  - Antlr compiles meterParser.g4  \n  - Antlr searches the \"lib\" directories for the required lexer.tokens\n  - Antlr correctly finds the lexer.tokens file in ../../build/\n  \n  Desired behavior:\n  - Same.\n### 2nd case: All grammars are in a given subdirectory.\n- We wish to compile metarParser.g4\n- Our working directory is project/\n- Run command: antlr src/foo/*.g4 -o build/\n  \n  Observed behavior:\n  - Antlr compiles lexer.g4\n  - lexer.g4 has a relative path of src/foo/, the generated token file is therefore in build/src/foo/\n  - Antlr adds the build/ directory to it's \"lib\" search path\n  - Antlr compiles metarParser.g4\n  - Antlr searches the \"lib\" directories for the required lexer.tokens\n  - Antlr failes to find lexer.tokens as build/src/foo/ is not it's search path\n  \n  Desired behavior:\n  - Antlr compiles lexer.g4\n  - lexer.g4 has a relative path of src/foo/, the generated token file is therefore in build/src/foo/\n  - Antlr adds the build/src/foor directory to it's \"lib\" search path\n  - Antlr compiles metarParser.g4\n  - Antlr searches the \"lib\" directories for the required lexer.tokens\n  - Antlr correctly finds the lexer.tokens file in build/src/foo/\n### 3rd case: All grammars are in (potentially) different subdirectories.\n- We wish to compile tafParser.g4\n- Our working directory is project/\n- Run command: antlr src/foo/*.g4 src/bar/tafParser.g4 -o build/\n  \n  Observed behavior:\n  - Antlr compiles lexer.g4\n  - lexer.g4 has a relative path of src/foo/, the generated token file is therefore in build/src/foo/\n  - Antlr adds the build/ directory to it's \"lib\" search path\n  - Antlr compiles notamParser.g4\n  - Antlr searches the \"lib\" directories for the required lexer.tokens\n  - Antlr failes to find lexer.tokens as build/src/foo/ is not it's search path\n  \n  Desired behavior:\n  - Antlr compiles lexer.g4\n  - lexer.g4 has a relative path of src/foo/, the generated token file is therefore in build/src/foo/\n  - Antlr adds the build/src/foo/ directory to it's \"lib\" search path\n  - Antlr compiles notamParser.g4\n  - notamParser.g4 has a relative path of src/bar/, the generated token file is therefore in build/src/bar/\n  - Antlr adds the build/src/bar/ directory to it's \"lib\" search path\n  - Antlr searches the \"lib\" directories for the required lexer.token\n  - Antlr correctly finds the lexer.tokens file in build/src/foo/\n  - Antlr compiles tafParser.g4\n  - Antlr searches the \"lib\" directories for the required notamParser.tokens\n  - Antlr correctly finds the notamParser.tokens file in build/src/bar/\n\nFor the last two cases, all that is required is to keep track of the actual output directory (ie the directory specified with -o switch or the working directory, with the correct subdirectory) for every file, and to search those. \n"}, {"labels": ["comp:tool", "grammars", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/633", "title": "Multiline comments along with token declaration in lexer", "closed": "2014-09-29 16:37:47", "commitsDetails": [], "commits": {}, "ttf": 103.00027777777778, "created": "2014-06-18 15:22:26", "user": "arthurfabre", "body": "If a Lexer is created as such:\n\n```\n/*************************************************************************************************\n * Copyright (c) 2014, Example CORPORATION.  All rights reserved.\n ************************************************************************************************/\n\nlexer grammar Lexer;\n\ntokens {INDENT, DEDENT}\n\nINT     : [0-9]+ ;\n```\n\nAlong with the following parser:\n\n```\n/*************************************************************************************************\n * Copyright (c) 2014, Example CORPORATION.  All rights reserved.\n ************************************************************************************************/\n\ngrammar Parser;\nimport Lexer;\n\nmain    \n        : INT* EOF\n        ;\n```\n\nCompiling this grammar using the antlr tool (v 4.2.2)  fails with the following output:\n\n```\norg\\antlr\\v4\\parse\\GrammarTreeVisitor.g: node from line 1:0 mismatched tree node: /*************************************************************************************************\n * Copyright (c) 2014, Example CORPORATION.  All rights reserved.\n ************************************************************************************************/ expecting RULES\norg\\antlr\\v4\\parse\\GrammarTreeVisitor.g: node from line 1:0 mismatched tree node: /*************************************************************************************************\n * Copyright (c) 2014, Example CORPORATION.  All rights reserved.\n ************************************************************************************************/ expecting RULES\norg\\antlr\\v4\\parse\\GrammarTreeVisitor.g: node from line 1:0 mismatched tree node: /*************************************************************************************************\n * Copyright (c) 2014, Example CORPORATION.  All rights reserved.\n ************************************************************************************************/ expecting RULES\norg\\antlr\\v4\\parse\\GrammarTreeVisitor.g: node from line 1:0 mismatched tree node: /*************************************************************************************************\n * Copyright (c) 2014, Example CORPORATION.  All rights reserved.\n ************************************************************************************************/ expecting RULES\norg\\antlr\\v4\\parse\\GrammarTreeVisitor.g: node from line 1:0 mismatched tree node: /*************************************************************************************************\n * Copyright (c) 2014, Example CORPORATION.  All rights reserved.\n ************************************************************************************************/ expecting RULES\nException in thread \"main\" java.lang.NullPointerException\n    at org.antlr.v4.automata.ParserATNFactory.newState(ParserATNFactory.java:748)\n    at org.antlr.v4.automata.ParserATNFactory.addEOFTransitionToStartRules(ParserATNFactory.java:694)\n    at org.antlr.v4.automata.ParserATNFactory.createATN(ParserATNFactory.java:137)\n    at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:405)\n    at org.antlr.v4.Tool.process(Tool.java:384)\n    at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)\n    at org.antlr.v4.Tool.main(Tool.java:190)\n```\n\nThis doesn't happen if I omit the token declaration in the Lexer as such:\n\n```\n/*************************************************************************************************\n * Copyright (c) 2014, Example CORPORATION.  All rights reserved.\n ************************************************************************************************/\n\nlexer grammar Lexer;\n\nINT     : [0-9]+ ;\n```\n\nOr if I change the header comment to start with a single star in the Parser (and only the Parser):\n\n```\n/*\n * Copyright (c) 2014, Example CORPORATION.  All rights reserved.\n ************************************************************************************************/\n\ngrammar Parser;\nimport Lexer;\n\nmain    \n        : INT* EOF\n        ;\n```\n\nI'm willing to help debug / figure this out (I realize it's a very narrow corner case that not many users are bound to run into) if anyone can point me in the right direction.\n\nThanks for creating such an amazing tool!\n"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/625", "title": "Duplicate action breaks operator precedence", "closed": "2014-06-16 17:15:14", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2014-06-15 18:15:37", "user": "JFinis", "body": "Consider this super simple grammar:\n\n```\n prog : expr EOF ;\n\n expr\n    : Id\n    | expr '==' expr\n    | expr '||' expr\n    ;\n\nId : [a-z]+ ;\n```\n\nIt parses expression where an expression is either an `identifier`, an `equals` or an `or` expression. As in most programming languages, `equals` has higher precedence than or, so this code:\n\n```\ne==d||e==c\n```\n\nShould be parsed like this:\n\n```\n((e==d)||(e==c))\n```\n\nThis works fine. However, as soon as I add a duplicate action behind the first recursive alternative (the content does not matter, even an empty action will trigger the bug!), then the parser does it wrong:\n\n```\n prog : expr EOF ;\n\n expr\n    : Id\n    | expr '==' expr {}{}\n    | expr '||' expr\n    ;\n\nId : [a-z]+ ;\n```\n\nNote the two `{}{}`, they cause the bug. Now, the parser parses the above input like this:\n\n```\ne==(d||(e==c))\n```\n\nOf course, two actions behind each other are not necessary as they could be merged into one. However, using them is not forbidden. In addition, maybe this is just a symptom of a bug that has much wider consequences than just breaking upon double actions.\n"}, {"labels": ["comp:tool", "grammars", "status:invalid", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/604", "title": "wrong error line for unterminated rule.", "closed": "2014-06-05 00:20:00", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2014-06-05 00:16:30", "user": "parrt", "body": "In https://github.com/antlr/grammars-v4/blob/unterminated_rule/swift/Swift.g4 we get:\n\n```\nerror(50): /Volumes/SSD2/Users/parrt/antlr/code/grammars-v4/swift/backup.g4:13:0: syntax error: unterminated rule (missing ';') detected at 'loop_statement :' while looking for rule element\nerror(50): /Volumes/SSD2/Users/parrt/antlr/code/grammars-v4/swift/backup.g4:14:0: syntax error: unterminated rule (missing ';') detected at 'loop_statement :' while looking for rule element\nerror(50): /Volumes/SSD2/Users/parrt/antlr/code/grammars-v4/swift/backup.g4:15:0: syntax error: unterminated rule (missing ';') detected at 'loop_statement :' while looking for rule element\nerror(50): /Volumes/SSD2/Users/parrt/antlr/code/grammars-v4/swift/backup.g4:16:0: syntax error: unterminated rule (missing ';') detected at 'loop_statement :' while looking for rule element\nerror(50): /Volumes/SSD2/Users/parrt/antlr/code/grammars-v4/swift/backup.g4:20:0: syntax error: unterminated rule (missing ';') detected at 'for_statement :' while looking for rule element\nerror(50): /Volumes/SSD2/Users/parrt/antlr/code/grammars-v4/swift/backup.g4:20:40: syntax error: mismatched input ';' expecting COLON while matching a rule\n```\n"}, {"labels": ["comp:runtime", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/603", "title": "Update documentation for ANTLRErrorListener", "closed": "2014-06-16 15:35:38", "commitsDetails": [], "commits": {}, "ttf": 12.000277777777777, "created": "2014-06-04 03:11:02", "user": "sharwell", "body": "The documentation for ANTLRErrorListener does not adequately describe the relation between `reportContextSensitivity` and `reportAmbiguity`. In addition, it does not fully describe the difference between a context sensitivity reported through this interface and a context sensitivity as reported in the profiling tools. It should be updated to fully define these items to improve overall usability.\n"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/590", "title": "Cannot specify options for predicates in LR rules", "closed": "2014-06-02 03:36:34", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2014-06-01 17:18:47", "user": "sharwell", "body": "While the following is supported:\n\n``` antlr\na : a ID {false}?\n  | ID\n  ;\n```\n\nThe following does not work correctly due to a limitation in `LeftRecursiveRuleWalker.g`:\n\n``` antlr\na : a ID {false}?<fail='custom message'>\n  | ID\n  ;\n```\n"}, {"labels": ["grammars", "options", "status:invalid", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/580", "title": "Parser not loading tokens via tokenVocab", "closed": "2014-05-31 02:04:05", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2014-05-31 01:09:24", "user": "parrt", "body": " We get implicit token definition warnings from the parser despite the tokenVocab option.\n\n```\n/tmp $ a4 add*.g4\nwarning(125): addParser.g4:8:11: implicit definition of token 'INT' in parser\nwarning(125): addParser.g4:8:15: implicit definition of token 'ADD' in parser\n```\n\naddLexer.g4 with the grammar:\n\n```\nlexer grammar addLexer;\n\nINT : DIGIT (DIGIT)*\n      ;\n\nADD : '+'\n        ;\n\nfragment \nDIGIT : [0-9];\nWS : (' '|'\\t'|'\\r'|'\\n') ->skip;\n```\n\nand the parser is addParser.g4\n\n```\nparser grammar addParser;\n\n@option {\n        tokenVocab = addLexer;\n}\n\nadd\n        :   INT ADD INT\n        ;\n```\n"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/571", "title": "Rule reference is resolved wrong in recursive rules", "closed": "2014-06-16 23:38:40", "commitsDetails": [], "commits": {}, "ttf": 24.00027777777778, "created": "2014-05-23 09:31:24", "user": "JFinis", "body": "In a recursive rule,\nreferring to a recursive call of the rule is resolved incorrectly. Consider this simple recursive rule\n\n```\nexpr returns [String r]\n    : '(' expr ')' { $r = \"(\" + $expr.r +\")\"; } \n    | Identifier { $r = $Identifier.text; }\n    ;\n```\n\nObviously, the `$expr.r` in `{ $r = \"(\" + $expr.r +\")\"; }` should refer to the recursive expression call in parenthesis. However, ANTLR builds the following code for this action:\n\n```\n ((ExprContext)_localctx).r =  \"(\" + _localctx.r +\")\"; \n```\n\nIt resolves `$expr.r` to `_localctx.r`, i.e., the result of the rule itself, NOT the result of the recursive call to `expr`.\n"}, {"labels": ["code-gen", "comp:tool", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/563", "title": "Inconsistent token handling in ANTLR4", "closed": "2014-06-10 23:43:51", "commitsDetails": [], "commits": {}, "ttf": 29.00027777777778, "created": "2014-05-12 10:00:17", "user": "ptomli", "body": "There seems to be some inconsistency with, at a guess, non-ASCII literals, in Eclipse. It's a bit beyond me to diagnose quite what's happening.\n\nDocumented http://stackoverflow.com/questions/22613293/inconsistent-token-handling-in-antlr4 with a test project https://github.com/ptomli/antlr4-22613293\n"}, {"labels": ["code-gen", "comp:tool", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/561", "title": "Issue with parser generation in 4.2.2", "closed": "2014-05-24 21:48:35", "commitsDetails": [], "commits": {}, "ttf": 14.000277777777777, "created": "2014-05-10 02:42:29", "user": "teverett", "body": "Hello everyone.  With the 4.2.2 code generation for this grammar:\n\nhttps://github.com/antlr/grammars-v4/tree/master/basic\n\nI get these compilation errors.  I've verified that the generated code compiles fine with 4.2.1:\n\n[ERROR] COMPILATION ERROR : \n\n[INFO] -------------------------------------------------------------\n\n[ERROR] /Users/tom/projects/grammars-v4/basic/target/generated-sources/antlr4/com/khubla/antlr/jvmBasicParser.java:[1058,53] int cannot be dereferenced\n\n[ERROR] /Users/tom/projects/grammars-v4/basic/target/generated-sources/antlr4/com/khubla/antlr/jvmBasicParser.java:[1190,53] int cannot be dereferenced\n\n[ERROR] /Users/tom/projects/grammars-v4/basic/target/generated-sources/antlr4/com/khubla/antlr/jvmBasicParser.java:[4351,53] int cannot be dereferenced\n\n[ERROR] /Users/tom/projects/grammars-v4/basic/target/generated-sources/antlr4/com/khubla/antlr/jvmBasicParser.java:[4617,53] int cannot be dereferenced\n\n[INFO] 4\n"}, {"labels": ["grammars", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/556", "title": "null ptr exception for arg on expr rule", "closed": "2015-10-09 17:17:27", "commitsDetails": [], "commits": {}, "ttf": 523.0002777777778, "created": "2014-05-04 16:08:38", "user": "parrt", "body": "From grammar\n\n```\n        String grammar =\n                \"grammar T;\\n\" +\n                \"s : e ';' ;\\n\" +\n                \"e : e '*' e\\n\" +\n                \"  | e '+' e[4]\\n\" +\n                \"  | e '.' ID\\n\" +\n                \"  | '-' e\\n\" +\n                \"  | ID\\n\" +\n                \"  ;\\n\" +\n                \"ID : [a-z]+ ;\\n\";\n```\n\nwe get\n\n```\njava.lang.NullPointerException\n    at org.antlr.v4.automata.ParserATNFactory.elemList(ParserATNFactory.java:492)\n    at org.antlr.v4.automata.ParserATNFactory.alt(ParserATNFactory.java:473)\n    at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:568)\n    at org.antlr.v4.parse.ATNBuilder.block(ATNBuilder.java:401)\n    at org.antlr.v4.parse.ATNBuilder.subrule(ATNBuilder.java:1172)\n    at org.antlr.v4.parse.ATNBuilder.element(ATNBuilder.java:888)\n    at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:551)\n    at org.antlr.v4.parse.ATNBuilder.ruleBlock(ATNBuilder.java:290)\n    at org.antlr.v4.automata.ParserATNFactory._createATN(ParserATNFactory.java:184)\n    at org.antlr.v4.automata.ParserATNFactory.createATN(ParserATNFactory.java:134)\n    at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:405)\n    at org.antlr.v4.Tool.process(Tool.java:384)\n    at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)\n    at org.antlr.v4.test.BaseTest.antlr(BaseTest.java:438)\n    at org.antlr.v4.test.BaseTest.testErrors(BaseTest.java:747)\n    at org.antlr.v4.test.TestLexerPositionDirective.testInvalidCharAtStart(TestLexerPositionDirective.java:23)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    at org.junit.rules.TestWatcher$1.evaluate(TestWatcher.java:47)\n    at org.junit.rules.RunRules.evaluate(RunRules.java:18)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)\n```\n"}, {"labels": ["type:bug"], "filteredCommits": ["c959bf649b65d931ebe5ecd76a372eb3067ef52d"], "url": "https://github.com/antlr/antlr4/issues/550", "gitStatsSummary": {"insertions": 31, "gitFilesChange": 1, "lines": 45, "deletions": 14}, "numCommits": 1, "commits": {"30dddbb84d45b596d306bb66211460dca3edf0f9": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "c959bf649b65d931ebe5ecd76a372eb3067ef52d": {"commitUser": "parrt", "commitGHEventType": "closed"}}, "ttf": 962.0002777777778, "user": "mazurkin", "changesInPackagesSPOON": ["org.antlr.v4.runtime.TokenStreamRewriter.reduceToSingleOperationPerIndex(java.util.List)", "org.antlr.v4.runtime.TokenStreamRewriter.insertAfter(java.lang.String,int,java.lang.Object)", "org.antlr.v4.runtime.TokenStreamRewriter.InsertAfterOp"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime"], "body": "Output order differs when many overrides are inserted with the same index.\n\nI use `TokenStreamRewriter` in Listener. When a `placeholder` rule is entered I put `<b>` tag into rewriter with `insertBefore()`. When the placeholder is exited I put `</b>` tag into rewriter with `insertAfter()`. Everything is fine with call sequence but `rewriter.getText()` return something like the following when placeholders are side-by-side and not separated with some other lexer token.\n\n```\n<b>[placeholder1]<b></b>[placeholder1]</b>\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 3, "UPD": 0, "TOT": 16, "DEL": 3, "INS": 7, "spoonFilesChanged": 1, "MOV": 6}, "title": "TokenStreamRewriter doesn't preserve overrides order", "statsSkippedReason": "", "closed": "2016-12-03 18:25:56", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-12-03 10:25:55", "commitHash": "30dddbb84d45b596d306bb66211460dca3edf0f9", "commitParents": ["53b6153060977e9c2889596682313ad0d3764f8f", "c959bf649b65d931ebe5ecd76a372eb3067ef52d"], "commitGHEventType": "referenced", "nameRev": "30dddbb84d45b596d306bb66211460dca3edf0f9 tags/4.6-rc1~56", "commitGitStats": [{"insertions": 31, "lines": 45, "filePath": "runtime/Java/src/org/antlr/v4/runtime/TokenStreamRewriter.java", "deletions": 14}, {"insertions": 50, "lines": 54, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestTokenStreamRewriter.java", "deletions": 4}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestTokenStreamRewriter.testPreservesOrderOfContiguousInserts()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestTokenStreamRewriter.testDistinguishBetweenInsertAfterAndInsertBeforeToPreserverOrder2()"}], "spoonFilePath": "TestTokenStreamRewriter.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 7, "DEL": 2, "INS": 2, "MOV": 3, "spoonMethodName": "org.antlr.v4.runtime.TokenStreamRewriter.reduceToSingleOperationPerIndex(java.util.List)"}, {"UPD": 0, "TOT": 8, "DEL": 1, "INS": 4, "MOV": 3, "spoonMethodName": "org.antlr.v4.runtime.TokenStreamRewriter.insertAfter(java.lang.String,int,java.lang.Object)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.TokenStreamRewriter.InsertAfterOp"}], "spoonFilePath": "TokenStreamRewriter.java"}], "commitMessage": "Merge pull request #1445 from parrt/fixes-550-java\n\nFixes #550 by @lygav, which tweaks and more tests by me.", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-03 10:25:55"}, {"commitUser": "parrt", "commitDateTime": "2016-12-03 10:25:02", "commitHash": "c959bf649b65d931ebe5ecd76a372eb3067ef52d", "commitParents": ["8ead51d8ffea8d375a4b184404e5cee6460cca85"], "commitGHEventType": "closed", "nameRev": "c959bf649b65d931ebe5ecd76a372eb3067ef52d tags/4.6-rc1~56^2", "commitGitStats": [{"insertions": 31, "lines": 45, "filePath": "runtime/Java/src/org/antlr/v4/runtime/TokenStreamRewriter.java", "deletions": 14}, {"insertions": 50, "lines": 54, "filePath": "tool-testsuite/test/org/antlr/v4/test/tool/TestTokenStreamRewriter.java", "deletions": 4}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 1, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestTokenStreamRewriter.testPreservesOrderOfContiguousInserts()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.tool.TestTokenStreamRewriter.testDistinguishBetweenInsertAfterAndInsertBeforeToPreserverOrder2()"}], "spoonFilePath": "TestTokenStreamRewriter.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 7, "DEL": 2, "INS": 2, "MOV": 3, "spoonMethodName": "org.antlr.v4.runtime.TokenStreamRewriter.reduceToSingleOperationPerIndex(java.util.List)"}, {"UPD": 0, "TOT": 8, "DEL": 1, "INS": 4, "MOV": 3, "spoonMethodName": "org.antlr.v4.runtime.TokenStreamRewriter.insertAfter(java.lang.String,int,java.lang.Object)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.TokenStreamRewriter.InsertAfterOp"}], "spoonFilePath": "TokenStreamRewriter.java"}], "commitMessage": "Fixes #550 by @lygav, which tweaks and more tests by me.\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-12-03 10:25:02"}], "created": "2014-04-16 10:53:13"}, {"labels": ["comp:tool", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/549", "title": "mutually left-recursive error if and only if labels are used", "closed": "2018-06-23 16:37:20", "commitsDetails": [], "commits": {}, "ttf": 1531.0002777777777, "created": "2014-04-14 10:19:48", "user": "yankee42", "body": "ANTLR generates Parser/Lexer for the following grammar without any problem:\n\n``` ANTLR\ngrammar Demo;\n\nx: x x\n | 'y'\n ;\n```\n\nIf I add labels like this:\n\n``` ANTLR\ngrammar Demo;\n\nx: one=x two=x\n | 'y'\n ;\n```\n\nIt suddenly says: `error(119): Demo.g4::: The following sets of rules are mutually left-recursive [x]`\n\nI believe that adding/removing labels should not have such an effect.\n"}, {"labels": ["comp:tool", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/546", "title": " no viable alternative at input '..'", "closed": "2017-05-19 15:54:51", "commitsDetails": [], "commits": {}, "ttf": 1131.0002777777777, "created": "2014-04-13 22:43:28", "user": "Morgaroth", "body": "why?\nI've grammar:\n\n```\n    grammar Regulars;\n    start : test ;\n    test : 'a' .. 'z';\n```\n\nand can't generate anything:\n log https://gist.github.com/Morgaroth/10605312\nI'm using antlr-4.2.2-complete.jar\n"}, {"labels": ["comp:runtime", "parsers", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/544", "title": "Possible risk of index out of range exception in runtime", "closed": "2014-06-16 16:59:51", "commitsDetails": [], "commits": {}, "ttf": 65.00027777777778, "created": "2014-04-12 16:33:27", "user": "parrt", "body": "in BufferedTokenStream, this code is suspicious:\n\n```\n       protected int nextTokenOnChannel(int i, int channel) {\n              sync(i);\n              Token token = tokens.get(i);\n              if ( i>=size() ) return -1;\n```\n"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/543", "title": "ANTLR generated Visitor has incorrect JavaDoc links in cases generated by labeled alternatives", "closed": "2014-06-10 23:45:21", "commitsDetails": [], "commits": {}, "ttf": 61.000277777777775, "created": "2014-04-10 21:30:03", "user": "aivarannamaa", "body": "In my grammar `Suluavaldis` is not a rule, but a label of an alternative. Following is a fragment of Visitor generated for this grammar:\n\n```\n    /**\n     * Visit a parse tree produced by {@link AKTKParser#Suluavaldis}.\n     * @param ctx the parse tree\n     * @return the visitor result\n     */\n    T visitSuluavaldis(@NotNull AKTKParser.SuluavaldisContext ctx);\n```\n\nANTLR incorrectly references method `AKTKParser#Suluavaldis` which doesn't exist. This gives errors when compiling JavaDoc.\n\nANTLR version: 4.2.2\n"}, {"labels": ["atn-analysis", "error-handling", "parsers", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/529", "title": "Heuristic to improve error messages did not evaluate predicates and could choose an invalid alternative.", "closed": "2014-04-02 16:41:09", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2014-04-01 23:49:13", "user": "parrt", "body": "When delaying error reporting because prediction escapes the decision entry rule, we should evaluate predicates to turn off any configurations that are invalid semantically. After that, we can collect the list of alternatives that are satisfied with the input thus far and then choose the minimum as before.\n\nFor grammar:\n\n```\nfile:   para para EOF ;\npara:   paraContent '\\n' '\\n' ;\nparaContent : ('s'|'x'|{eval(_input.LA(2)!='\\n')}? '\\n')+ ;\n```\n\nand invalid input \"s\\n\\n\\nx\\n\", it should give an error message that it was expecting another \\n after the x butt found EOF. Instead, it first gives an error that \\n is not a viable alternative within the loop. The loopback decision did not issue an error message as part of our heuristic to delay error messages in favor of better error messages later. However, it was not evaluating the semantic predicates which means it chose alternative 1 to reenter the loop not 2, to fall out of the loop and paraContent. Since it went into the loop, the choice prediction failed to match anything because it was evaluating the predicates.\n"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "filteredCommits": ["014785b70a4c9b2e75eb29fa45746f0dd8d530bb"], "url": "https://github.com/antlr/antlr4/issues/515", "gitStatsSummary": {"insertions": 13, "gitFilesChange": 1, "lines": 26, "deletions": 13}, "numCommits": 1, "commits": {"6642a9222d7d49e533a5112e86774dfc50aae6a3": {"commitUser": "sharwell", "commitGHEventType": "referenced"}, "014785b70a4c9b2e75eb29fa45746f0dd8d530bb": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "sharwell", "changesInPackagesGIT": ["tool/test/org/antlr/v4/test/Java-LR.g4"], "body": "The new warning `UNRECOGNIZED_ASSOC_OPTION` is causing the unit test `TestPerformance.compileJdk` to fail.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {}, "title": "TestPerformance is failing", "statsSkippedReason": "", "closed": "2014-03-25 01:05:21", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2014-03-24 20:05:21", "commitHash": "6642a9222d7d49e533a5112e86774dfc50aae6a3", "commitParents": ["b4b91970bdbaea2f4874d1d2054e3524a604a2ba", "014785b70a4c9b2e75eb29fa45746f0dd8d530bb"], "commitGHEventType": "referenced", "nameRev": "6642a9222d7d49e533a5112e86774dfc50aae6a3 tags/4.4~95", "commitGitStats": [{"insertions": 13, "lines": 26, "filePath": "tool/test/org/antlr/v4/test/Java-LR.g4", "deletions": 13}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #516 from sharwell/fix-515\n\nFix usage of assoc=right in Java-LR.g4 (fixes #515)", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-03-24 20:05:21"}, {"commitUser": "sharwell", "commitDateTime": "2014-03-24 20:05:19", "commitHash": "014785b70a4c9b2e75eb29fa45746f0dd8d530bb", "commitParents": ["08300b457fc1edb24f8c11fc8e7f28b47402ed41"], "commitGHEventType": "closed", "nameRev": "014785b70a4c9b2e75eb29fa45746f0dd8d530bb tags/4.4~95^2", "commitGitStats": [{"insertions": 13, "lines": 26, "filePath": "tool/test/org/antlr/v4/test/Java-LR.g4", "deletions": 13}], "commitSpoonAstDiffStats": [], "commitMessage": "Fix usage of assoc=right in Java-LR.g4 (fixes #515)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-03-24 20:05:19"}], "created": "2014-03-24 02:52:16"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "filteredCommits": ["3e054df98b9e8f0e154e0a1b886c7947e5c00e88"], "url": "https://github.com/antlr/antlr4/issues/507", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"3e054df98b9e8f0e154e0a1b886c7947e5c00e88": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 2.000277777777778, "user": "JitCompiler", "changesInPackagesSPOON": ["org.antlr.v4.Tool.processGrammarsOnCommandLine()"], "changesInPackagesGIT": ["tool/src/org/antlr/v4"], "body": "I forgot to use double `'\\\\'` in my lexer rule:\n\n```\nfragment UNIVERSAL_CHARACTER_NAME:\n   (\n   '\\u' HEX_QUAD\n  |'\\U' HEX_QUAD HEX_QUAD ) \n ;\n```\n\nAnd the code generation Tool just gave me a `NullPointerException` with no helpful message nor location of the issue and it took me hours to locate the error.  Would it be nice to somehow gives some indication of the location the error?\n\n> java org.antlr.v4.Tool -o work\\parserSrc -no-listener -visitor CPPDefine.g4\n\n```\nException in thread \"main\" java.lang.NullPointerException\n        at org.antlr.v4.automata.ParserATNFactory.elemList(ParserATNFactory.java:452)\n        at org.antlr.v4.automata.ParserATNFactory.alt(ParserATNFactory.java:439)\n        at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:567)\n        at org.antlr.v4.parse.ATNBuilder.block(ATNBuilder.java:400)\n        at org.antlr.v4.parse.ATNBuilder.subrule(ATNBuilder.java:1197)\n        at org.antlr.v4.parse.ATNBuilder.element(ATNBuilder.java:887)\n        at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:550)\n        at org.antlr.v4.parse.ATNBuilder.ruleBlock(ATNBuilder.java:289)\n        at org.antlr.v4.automata.ParserATNFactory._createATN(ParserATNFactory.java:177)\n        at org.antlr.v4.automata.LexerATNFactory.createATN(LexerATNFactory.java:94)\n        at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:407)\n        at org.antlr.v4.Tool.process(Tool.java:376)\n        at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)\n        at org.antlr.v4.Tool.main(Tool.java:190)\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 1}, "title": "NullPointerException When Generating Code from Grammar", "statsSkippedReason": "", "closed": "2014-03-23 21:38:20", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2014-03-23 16:31:14", "commitHash": "3e054df98b9e8f0e154e0a1b886c7947e5c00e88", "commitParents": ["7daae3a89bc21fe6fe49e0afdd2683155e7dc3c1"], "commitGHEventType": "closed", "nameRev": "3e054df98b9e8f0e154e0a1b886c7947e5c00e88 tags/4.4~100^2~1", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "tool/src/org/antlr/v4/Tool.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.Tool.processGrammarsOnCommandLine()"}], "spoonFilePath": "Tool.java"}], "commitMessage": "Do not process grammars following an error during parsing (fixes #507)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-03-23 16:31:14"}], "created": "2014-03-21 16:50:28"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "filteredCommits": ["ea088eb893ac57350ddfce492f35654ff253bb83"], "url": "https://github.com/antlr/antlr4/issues/500", "gitStatsSummary": {"insertions": 36, "gitFilesChange": 3, "lines": 36, "deletions": 0}, "numCommits": 1, "commits": {"08300b457fc1edb24f8c11fc8e7f28b47402ed41": {"commitUser": "sharwell", "commitGHEventType": "referenced"}, "ea088eb893ac57350ddfce492f35654ff253bb83": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 3.000277777777778, "user": "Sneddles", "changesInPackagesSPOON": ["org.antlr.v4.semantics.SymbolChecks.checkReservedNames(java.util.Collection)", "org.antlr.v4.tool.Grammar.setTokenForType(int,java.lang.String)", "org.antlr.v4.semantics.SymbolChecks", "org.antlr.v4.semantics.SymbolChecks.process()", "org.antlr.v4.tool.ErrorType"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/semantics", "tool/src/org/antlr/v4/tool"], "body": "I was converting a grammar from another tool to Antlr4 format and accidentally defined EOF as a token.\n\nAntlr 4.2 threw an exception with no message.\n\n```\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: -1\n        at java.util.ArrayList.elementData(Unknown Source)\n        at java.util.ArrayList.get(Unknown Source)\n        at org.antlr.v4.tool.Grammar.setTokenForType(Grammar.java:712)\n        at org.antlr.v4.tool.Grammar.defineTokenAlias(Grammar.java:704)\n        at org.antlr.v4.semantics.SemanticPipeline.assignLexerTokenTypes(SemanticPipeline.java:179)\n        at org.antlr.v4.semantics.SemanticPipeline.process(SemanticPipeline.java:123)\n        at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:397)\n        at org.antlr.v4.Tool.process(Tool.java:376)\n        at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)\n        at org.antlr.v4.Tool.main(Tool.java:190)\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 5, "UPD": 0, "TOT": 6, "DEL": 0, "INS": 6, "spoonFilesChanged": 3, "MOV": 0}, "title": "Array Index Out Of Bounds", "statsSkippedReason": "", "closed": "2014-03-24 02:50:57", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2014-03-23 21:50:56", "commitHash": "08300b457fc1edb24f8c11fc8e7f28b47402ed41", "commitParents": ["ccda6205e61cfbc2491ebbfae1c85397a6057638", "ea088eb893ac57350ddfce492f35654ff253bb83"], "commitGHEventType": "referenced", "nameRev": "08300b457fc1edb24f8c11fc8e7f28b47402ed41 tags/4.4~97", "commitGitStats": [{"insertions": 21, "lines": 21, "filePath": "tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/src/org/antlr/v4/tool/Grammar.java", "deletions": 0}, {"insertions": 14, "lines": 14, "filePath": "tool/src/org/antlr/v4/semantics/SymbolChecks.java", "deletions": 0}, {"insertions": 17, "lines": 17, "filePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestToolSyntaxErrors.testTokenNamedEOF()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.SymbolChecks"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.SymbolChecks.process()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.SymbolChecks.checkReservedNames(java.util.Collection)"}], "spoonFilePath": "SymbolChecks.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.Grammar.setTokenForType(int,java.lang.String)"}], "spoonFilePath": "Grammar.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ErrorType"}], "spoonFilePath": "ErrorType.java"}], "commitMessage": "Merge pull request #514 from sharwell/fix-500\n\nAdd compile error 159: RESERVED_RULE_NAME (fixes #500)", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-03-23 21:50:56"}, {"commitUser": "sharwell", "commitDateTime": "2014-03-23 21:49:27", "commitHash": "ea088eb893ac57350ddfce492f35654ff253bb83", "commitParents": ["ccda6205e61cfbc2491ebbfae1c85397a6057638"], "commitGHEventType": "closed", "nameRev": "ea088eb893ac57350ddfce492f35654ff253bb83 tags/4.4~97^2", "commitGitStats": [{"insertions": 21, "lines": 21, "filePath": "tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/src/org/antlr/v4/tool/Grammar.java", "deletions": 0}, {"insertions": 14, "lines": 14, "filePath": "tool/src/org/antlr/v4/semantics/SymbolChecks.java", "deletions": 0}, {"insertions": 17, "lines": 17, "filePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestToolSyntaxErrors.testTokenNamedEOF()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.SymbolChecks"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.SymbolChecks.process()"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.SymbolChecks.checkReservedNames(java.util.Collection)"}], "spoonFilePath": "SymbolChecks.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.Grammar.setTokenForType(int,java.lang.String)"}], "spoonFilePath": "Grammar.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ErrorType"}], "spoonFilePath": "ErrorType.java"}], "commitMessage": "Add compile error 159: RESERVED_RULE_NAME (fixes #500)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-03-23 21:31:36"}], "created": "2014-03-20 04:27:15"}, {"labels": ["actions", "lexers", "status:duplicate", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/482", "title": "Actions at left edge not executed?", "closed": "2014-03-11 01:02:32", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2014-03-10 23:58:12", "user": "parrt", "body": "Only the 2nd action executes here.\n\n```\nS : '\"' ({System.out.println(_input.LA(1));} ESC{System.out.println(_input.LA(1));}|~('\\\\'|'\"'))* '\"' ;\n```\n\nDidn't we add a bug for this already?\n"}, {"labels": ["comp:runtime", "status:fixed", "type:bug"], "filteredCommits": ["1dde17efea302606bcb9159bf8a928bff1971e8a"], "url": "https://github.com/antlr/antlr4/issues/480", "gitStatsSummary": {"insertions": 6, "gitFilesChange": 1, "lines": 6, "deletions": 0}, "numCommits": 1, "commits": {"c6e6ccde4cef96101a19ba3681196972b7848550": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "1dde17efea302606bcb9159bf8a928bff1971e8a": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 12.000277777777777, "user": "Anthony-Breneliere", "changesInPackagesSPOON": ["org.antlr.v4.runtime.Recognizer.getTokenErrorDisplay(org.antlr.v4.runtime.Token)"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime"], "body": "> line 1:9 mismatched input 'AAA' expecting 'AAA'\n\nI guess it is a different token with the same text.\n1. why not displaying text and type as a default behavior ?\n2. The following code in the lexer does nothing.\n   \n   ``` java\n   @Override\n   public String getTokenErrorDisplay(Token t) {\n       return t.getText() + \"(\" + t.getType() + \")\";\n   } \n   ```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 0}, "title": "Mismatched input error", "statsSkippedReason": "", "closed": "2014-03-21 16:37:03", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2014-03-21 09:37:02", "commitHash": "c6e6ccde4cef96101a19ba3681196972b7848550", "commitParents": ["c0dda79dff3066e75ad0e7400d02062efa161635", "1dde17efea302606bcb9159bf8a928bff1971e8a"], "commitGHEventType": "referenced", "nameRev": "c6e6ccde4cef96101a19ba3681196972b7848550 tags/4.4~105", "commitGitStats": [{"insertions": 6, "lines": 6, "filePath": "runtime/Java/src/org/antlr/v4/runtime/Recognizer.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.Recognizer.getTokenErrorDisplay(org.antlr.v4.runtime.Token)"}], "spoonFilePath": "Recognizer.java"}], "commitMessage": "Merge pull request #502 from sharwell/fix-480\n\nMark Recognizer.getTokenErrorDisplay as deprecated (fixes #480)", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-03-21 09:37:02"}, {"commitUser": "sharwell", "commitDateTime": "2014-03-20 07:19:01", "commitHash": "1dde17efea302606bcb9159bf8a928bff1971e8a", "commitParents": ["c0dda79dff3066e75ad0e7400d02062efa161635"], "commitGHEventType": "closed", "nameRev": "1dde17efea302606bcb9159bf8a928bff1971e8a tags/4.4~105^2", "commitGitStats": [{"insertions": 6, "lines": 6, "filePath": "runtime/Java/src/org/antlr/v4/runtime/Recognizer.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.Recognizer.getTokenErrorDisplay(org.antlr.v4.runtime.Token)"}], "spoonFilePath": "Recognizer.java"}], "commitMessage": "Mark Recognizer.getTokenErrorDisplay as deprecated (fixes #480)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-03-20 07:19:01"}], "created": "2014-03-09 01:23:20"}, {"labels": ["lexers", "status:fixed", "type:bug"], "filteredCommits": ["0ed651cbc6d2350286fc9ef8335d6c84e891086b"], "url": "https://github.com/antlr/antlr4/issues/472", "gitStatsSummary": {"insertions": 60, "gitFilesChange": 2, "lines": 63, "deletions": 3}, "numCommits": 1, "commits": {"0ed651cbc6d2350286fc9ef8335d6c84e891086b": {"commitUser": "sharwell", "commitGHEventType": "closed"}, "ccda6205e61cfbc2491ebbfae1c85397a6057638": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 27.00027777777778, "user": "parrt", "changesInPackagesSPOON": ["org.antlr.v4.semantics.BasicSemanticChecks.enterLexerCommand(org.antlr.v4.tool.ast.GrammarAST)", "org.antlr.v4.semantics.BasicSemanticChecks.discoverLexerRule(org.antlr.v4.tool.ast.RuleAST,org.antlr.v4.tool.ast.GrammarAST,java.util.List,org.antlr.v4.tool.ast.GrammarAST)", "org.antlr.v4.semantics.BasicSemanticChecks", "org.antlr.v4.tool.ErrorType", "org.antlr.v4.semantics.BasicSemanticChecks.exitLexerRule(org.antlr.v4.tool.ast.GrammarAST)", "org.antlr.v4.semantics.BasicSemanticChecks.actionInAlt(org.antlr.v4.tool.ast.ActionAST)"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/semantics", "tool/src/org/antlr/v4/tool"], "body": "```\nfragment B : 'b' {foo} ;\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 6, "UPD": 0, "TOT": 10, "DEL": 3, "INS": 7, "spoonFilesChanged": 2, "MOV": 0}, "title": "Actions in fragment rules should not be allowed", "statsSkippedReason": "", "closed": "2014-03-24 00:32:55", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2014-03-23 18:02:09", "commitHash": "0ed651cbc6d2350286fc9ef8335d6c84e891086b", "commitParents": ["b2af59e73e7e96ea142cbb43e0d378449ddd960c"], "commitGHEventType": "closed", "nameRev": "0ed651cbc6d2350286fc9ef8335d6c84e891086b tags/4.4~98^2", "commitGitStats": [{"insertions": 29, "lines": 29, "filePath": "tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java", "deletions": 0}, {"insertions": 29, "lines": 32, "filePath": "tool/src/org/antlr/v4/semantics/BasicSemanticChecks.java", "deletions": 3}, {"insertions": 31, "lines": 31, "filePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestToolSyntaxErrors.testFragmentActionIgnored()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.enterLexerCommand(org.antlr.v4.tool.ast.GrammarAST)"}, {"UPD": 0, "TOT": 5, "DEL": 3, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.discoverLexerRule(org.antlr.v4.tool.ast.RuleAST,org.antlr.v4.tool.ast.GrammarAST,java.util.List,org.antlr.v4.tool.ast.GrammarAST)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.exitLexerRule(org.antlr.v4.tool.ast.GrammarAST)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.actionInAlt(org.antlr.v4.tool.ast.ActionAST)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks"}], "spoonFilePath": "BasicSemanticChecks.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ErrorType"}], "spoonFilePath": "ErrorType.java"}], "commitMessage": "Add compiler warning 158: FRAGMENT_ACTION_IGNORED (fixes #472)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-03-23 17:45:58"}, {"commitUser": "parrt", "commitDateTime": "2014-03-23 17:32:54", "commitHash": "ccda6205e61cfbc2491ebbfae1c85397a6057638", "commitParents": ["b2af59e73e7e96ea142cbb43e0d378449ddd960c", "0ed651cbc6d2350286fc9ef8335d6c84e891086b"], "commitGHEventType": "referenced", "nameRev": "ccda6205e61cfbc2491ebbfae1c85397a6057638 tags/4.4~98", "commitGitStats": [{"insertions": 29, "lines": 29, "filePath": "tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java", "deletions": 0}, {"insertions": 29, "lines": 32, "filePath": "tool/src/org/antlr/v4/semantics/BasicSemanticChecks.java", "deletions": 3}, {"insertions": 31, "lines": 31, "filePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestToolSyntaxErrors.testFragmentActionIgnored()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.enterLexerCommand(org.antlr.v4.tool.ast.GrammarAST)"}, {"UPD": 0, "TOT": 5, "DEL": 3, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.discoverLexerRule(org.antlr.v4.tool.ast.RuleAST,org.antlr.v4.tool.ast.GrammarAST,java.util.List,org.antlr.v4.tool.ast.GrammarAST)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.exitLexerRule(org.antlr.v4.tool.ast.GrammarAST)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks.actionInAlt(org.antlr.v4.tool.ast.ActionAST)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.BasicSemanticChecks"}], "spoonFilePath": "BasicSemanticChecks.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ErrorType"}], "spoonFilePath": "ErrorType.java"}], "commitMessage": "Merge pull request #513 from sharwell/fix-472\n\nAdd compiler warning 158: FRAGMENT_ACTION_IGNORED (fixes #472)", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-03-23 17:32:54"}], "created": "2014-02-24 18:28:38"}, {"labels": ["actions", "comp:runtime", "lexers", "status:fixed", "type:bug"], "filteredCommits": ["41e04a27c06d4f6004e6c2c85ba4bb308b207309"], "url": "https://github.com/antlr/antlr4/issues/469", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"41e04a27c06d4f6004e6c2c85ba4bb308b207309": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 29.00027777777778, "user": "parrt", "changesInPackagesSPOON": ["org.antlr.v4.runtime.atn.LexerATNSimulator.closure(org.antlr.v4.runtime.CharStream,org.antlr.v4.runtime.atn.LexerATNConfig,org.antlr.v4.runtime.atn.ATNConfigSet,boolean,boolean)"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime/atn"], "body": "Input should have \"Start: ...\" but doesn't:\n\n```\n$ grun Test tokens -tokens\nhello Steve\nStop:11\nHello: hello Steve\n\n[@0,0:11='hello Steve\\n',<1>,1:0]\n[@1,12:11='<EOF>',<-1>,2:12]\n```\n\nfrom grammar:\n\n```\nlexer grammar Test;\n\n@lexer::members\n{\nclass Marker\n{\n   Marker (Lexer lexer) { this.lexer = lexer; }\n\n   public String getText ()\n   {\n      return lexer._input.getText (new Interval (start_index, stop_index));\n   }\n\n   public void start ()  { start_index = lexer._input.index (); System.out.println (\"Start:\" + start_index);}\n   public void stop () { stop_index = lexer._input.index (); System.out.println (\"Stop:\" + stop_index);}\n\n   private int start_index = 0;\n   private int stop_index = 0;\n   private Lexer lexer;\n}\n\nMarker m_name = new Marker (this);\n}\n\nHELLO: 'hello' WS { m_name.start (); } NAME { m_name.stop (); } '\\n' { System.out.println (\"Hello: \" + m_name.getText ()); };\nNAME: ('a'..'z' | 'A'..'Z')+ ('\\n')?;\n\nfragment WS: [ \\r\\t\\n]+ ;\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "spoonFilesChanged": 1, "MOV": 0}, "title": "Not all internal lexer rule actions are executed", "statsSkippedReason": "", "closed": "2014-03-23 18:25:59", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2014-03-20 09:21:28", "commitHash": "41e04a27c06d4f6004e6c2c85ba4bb308b207309", "commitParents": ["6fc77cd88d07421d1303293de0d34fd54b13b0bb"], "commitGHEventType": "closed", "nameRev": "41e04a27c06d4f6004e6c2c85ba4bb308b207309 tags/4.4~103^2~2", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 1, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.LexerATNSimulator.closure(org.antlr.v4.runtime.CharStream,org.antlr.v4.runtime.atn.LexerATNConfig,org.antlr.v4.runtime.atn.ATNConfigSet,boolean,boolean)"}], "spoonFilePath": "LexerATNSimulator.java"}], "commitMessage": "Fix lexerActionExecutor not being preserved when returning from a rule invocation in the lexer (fixes #469)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-03-20 09:21:28"}], "created": "2014-02-21 18:29:34"}, {"labels": ["comp:runtime", "lexers", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/456", "title": "Lexer.getText() grabs extra character with skip", "closed": "2014-01-29 13:56:58", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2014-01-29 12:11:39", "user": "darylteo", "body": "Calling getText() in the Lexer to retrieve a Token returns an extra character if that character is skipped. I'm a ANTLR noob, so not really sure if this is really the right way to do things or if I'm doing something wrong.\n\nHere's a sample of the Grammar I'm working with.\n\n```\nSPECIAL : '@'   -> skip, pushMode(MODE_SPECIAL) ;\n\nTEXT\n  : ( '@@' \n    | ~'@'\n    ) + { setText(getText().replaceAll(\"@@\",\"@\")); }\n  ;\n...\n```\n\nSample Text\n\n```\nThis is some text @and.something() else in between\n```\n\nRoughly the result I get\n\n```\nTEXT\nThis is some text @\nSPECIAL_TOKEN\nand.something()\nTEXT\nelse in between\n```\n\nI'll probably just do the replacement as part of the listener instead of the Lexer. Everything works fine and dandy if I just remove the action, and call TEXT() on the parser rule context.\n\nThanks,\nDaryl\n"}, {"labels": ["comp:tool", "lexers", "status:fixed", "type:bug"], "filteredCommits": ["dc1926cfe3453d74e9a89afde7d6ea52f85381a0"], "url": "https://github.com/antlr/antlr4/issues/449", "gitStatsSummary": {"insertions": 20, "gitFilesChange": 2, "lines": 26, "deletions": 6}, "numCommits": 1, "commits": {"dc1926cfe3453d74e9a89afde7d6ea52f85381a0": {"commitUser": "sharwell", "commitGHEventType": "closed"}, "8d9cae93ec5e52e084d0a09d9b807b4f814aa846": {"commitUser": "sharwell", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "parrt", "changesInPackagesSPOON": ["org.antlr.v4.runtime.atn.ATNSerializer.serialize()", "org.antlr.v4.runtime.atn.ATNDeserializer.deserialize(char[])"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime/atn"], "body": "", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 22, "DEL": 0, "INS": 14, "spoonFilesChanged": 2, "MOV": 8}, "title": "->type(EOF) causes exception", "statsSkippedReason": "", "closed": "2014-01-24 22:12:38", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2014-01-24 14:42:53", "commitHash": "dc1926cfe3453d74e9a89afde7d6ea52f85381a0", "commitParents": ["815a1ad02570de6f567dbb3ac40ad9968d3d88b4"], "commitGHEventType": "closed", "nameRev": "dc1926cfe3453d74e9a89afde7d6ea52f85381a0 tags/4.4~119^2", "commitGitStats": [{"insertions": 8, "lines": 8, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/ATNDeserializer.java", "deletions": 0}, {"insertions": 12, "lines": 18, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/ATNSerializer.java", "deletions": 6}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 20, "DEL": 0, "INS": 12, "MOV": 8, "spoonMethodName": "org.antlr.v4.runtime.atn.ATNSerializer.serialize()"}], "spoonFilePath": "ATNSerializer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.ATNDeserializer.deserialize(char[])"}], "spoonFilePath": "ATNDeserializer.java"}], "commitMessage": "Fix encoding of -1 (EOF) in serialized lexer actions (fixes #449)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-01-24 14:42:53"}, {"commitUser": "sharwell", "commitDateTime": "2014-01-24 14:12:36", "commitHash": "8d9cae93ec5e52e084d0a09d9b807b4f814aa846", "commitParents": ["815a1ad02570de6f567dbb3ac40ad9968d3d88b4", "dc1926cfe3453d74e9a89afde7d6ea52f85381a0"], "commitGHEventType": "referenced", "nameRev": "8d9cae93ec5e52e084d0a09d9b807b4f814aa846 tags/4.4~119", "commitGitStats": [{"insertions": 8, "lines": 8, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/ATNDeserializer.java", "deletions": 0}, {"insertions": 12, "lines": 18, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/ATNSerializer.java", "deletions": 6}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 20, "DEL": 0, "INS": 12, "MOV": 8, "spoonMethodName": "org.antlr.v4.runtime.atn.ATNSerializer.serialize()"}], "spoonFilePath": "ATNSerializer.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.ATNDeserializer.deserialize(char[])"}], "spoonFilePath": "ATNDeserializer.java"}], "commitMessage": "Merge pull request #450 from sharwell/fix-449\n\nFix encoding of -1 (EOF) in serialized lexer actions (fixes #449)", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-01-24 14:12:36"}], "created": "2014-01-24 19:40:24"}, {"labels": ["code-gen", "comp:tool", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/372", "title": "language option is not working inside the grammar definition. At least to gererate the 'lexer' file for a combined grammar.", "closed": "2014-01-16 16:35:30", "commitsDetails": [], "commits": {}, "ttf": 31.00027777777778, "created": "2013-12-16 03:16:55", "user": "tiagomazzutti", "body": "Hi,\n\nI'm working on a Dart target for ANTLR4. I was unable to get a `XLexer.dart` generated from a `X.g4` grammar file using the `language` option:\n\n```\n   options {\n      language = Dart;\n   }\n```\n\nThe other files (`XListener.dart`, `XBaseListener.dart` and `XParser.dart`) are being correctly generated. If I use the comandline option `-Dlanguage=Dart` it works well. \n\nCould it be a bug? Or what I'm doing wrong?\n\nAn update.\n\nIt wrongly generates the lexer to default target, witch is XLexer.java.\n"}, {"labels": ["status:fixed", "type:bug"], "filteredCommits": ["3ba70ba1a72550fd05c46aadaaf7a7a3efd6014e"], "url": "https://github.com/antlr/antlr4/issues/342", "gitStatsSummary": {"insertions": 23, "gitFilesChange": 2, "lines": 27, "deletions": 4}, "numCommits": 1, "commits": {"3ba70ba1a72550fd05c46aadaaf7a7a3efd6014e": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 94.00027777777778, "user": "jaredbeck", "changesInPackagesSPOON": ["org.antlr.mojo.antlr4.Antlr4ErrorLog.warning(org.antlr.v4.tool.ANTLRMessage)", "org.antlr.mojo.antlr4.Antlr4ErrorLog.info(java.lang.String)", "org.antlr.mojo.antlr4.Antlr4Mojo.CustomTool", "org.antlr.mojo.antlr4.Antlr4ErrorLog.error(org.antlr.v4.tool.ANTLRMessage)", "org.antlr.mojo.antlr4.Antlr4ErrorLog"], "changesInPackagesGIT": ["antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4"], "body": "When I generate my parser through maven, and antlr encounters an [ErrorType](http://www.antlr.org/api/Java/org/antlr/v4/tool/ErrorType.html#EPSILON_TOKEN), maven does not print the helpful detailed message.\n\nFor example, the detailed message for EPSILON_TOKEN is \"non-fragment lexer rule .. can match the empty string\", which is very specific and helpful.  Unfortunately, maven prints only this:\n\n```\n[WARNING] Message{errorType=EPSILON_TOKEN, args=[LEXER_RULE_REDACTED], e=null, fileName='redacted.g4', line=12345, charPosition=0}\n```\n\nIf it's possible to print the detailed message, that would be great.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 5, "UPD": 0, "TOT": 23, "DEL": 2, "INS": 13, "spoonFilesChanged": 2, "MOV": 8}, "title": "antlr4-maven-plugin prints incomplete error messages, without detail", "statsSkippedReason": "", "closed": "2014-01-16 21:45:58", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2014-01-16 15:37:12", "commitHash": "3ba70ba1a72550fd05c46aadaaf7a7a3efd6014e", "commitParents": ["6b78500a506932a18ddb84e32cab662b237f8022"], "commitGHEventType": "closed", "nameRev": "3ba70ba1a72550fd05c46aadaaf7a7a3efd6014e tags/4.4~143^2~1", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/Antlr4Mojo.java", "deletions": 1}, {"insertions": 22, "lines": 25, "filePath": "antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/Antlr4ErrorLog.java", "deletions": 3}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.mojo.antlr4.Antlr4Mojo.CustomTool"}], "spoonFilePath": "Antlr4Mojo.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 9, "DEL": 1, "INS": 4, "MOV": 4, "spoonMethodName": "org.antlr.mojo.antlr4.Antlr4ErrorLog.warning(org.antlr.v4.tool.ANTLRMessage)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.mojo.antlr4.Antlr4ErrorLog.info(java.lang.String)"}, {"UPD": 0, "TOT": 9, "DEL": 1, "INS": 4, "MOV": 4, "spoonMethodName": "org.antlr.mojo.antlr4.Antlr4ErrorLog.error(org.antlr.v4.tool.ANTLRMessage)"}, {"UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "MOV": 0, "spoonMethodName": "org.antlr.mojo.antlr4.Antlr4ErrorLog"}], "spoonFilePath": "Antlr4ErrorLog.java"}], "commitMessage": "Improved maven plugin error reporting (fixes #342)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-01-16 15:37:12"}], "created": "2013-10-14 04:25:10"}, {"labels": ["status:invalid", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/331", "title": "Download does NOT contain an ANTLRInputStream that implements CharStream ", "closed": "2013-09-22 15:40:23", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2013-09-22 15:23:23", "user": "weedazarhub", "body": "Hey\n\nI have downloaded latest version of Antlr 4 - http://www.antlr.org/download/antlr-4.1-complete.jar - and I am able to complete the simple example \"A first example\" http://www.antlr.org/wiki/display/ANTLR4/Getting+Started+with+ANTLR+v4\n\nThe generated class HelloLexer.java seems to expect some class implementing a charstream as input:\n\nimport org.antlr.v4.runtime.CharStream;\n\n..\n\n```\npublic HelloLexer(CharStream input) {\n    super(input);\n    _interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);\n}\n```\n\nThe examples I have found indicates that ANTLRInputStream should implement Charstream and be used as parameters for the lexer constructor. Thats not the case in the downloaded jar \"antlr-4.1-complete.jar\" \n\nhttps://github.com/antlr/antlr4/blob/master/runtime/Java/src/org/antlr/v4/runtime/ANTLRInputStream.java\n\nCheers \nPeter\n"}, {"labels": ["status:invalid", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/330", "title": "Uncaught exceptions in Listeners silently ignored / modify parse", "closed": "2013-09-20 01:43:30", "commitsDetails": [], "commits": {}, "ttf": 1.0002777777777778, "created": "2013-09-18 11:21:14", "user": "kintoshmalae", "body": "Encountered this when working with the XML grammer and using a listener to process the input. Uncaught exceptions which are generated within the body of the listener methods appear to be caught somewhere in the ANTLR internals, and are not displayed to the user, but do appear to change the internal parse structure. The error messages produced can make it extremely difficult to track down the actual error. \n\nFor example, using the XML example grammer with the following methods in the listener:\n\n``` java\n@Override\npublic void enterElement(XMLParser.ElementContext ctx) {\n    print(\"Enter element: [\" + ctx.getText() + \"]\");\n    throw new NullPointerException();\n}\n\n@Override\npublic void exitElement(XMLParser.ElementContext ctx) {\n    print(\"Everything working fine...\");\n    print(\"Exit element: [\" + ctx.Name(0).getText() + \"]\");\n}\n```\n\nThe actual output being generated is:\n\n```\nEnter element: []\nEverything working fine...\nException in thread \"main\" java.lang.NullPointerException\n    at org.homedns.kintoshmalae.lang.xml.XMLPrintListener.exitElement(XMLPrintListener.java:41)\n    at org.homedns.kintoshmalae.lang.xml.XMLParser$ElementContext.exitRule(XMLParser.java:346)\n    at org.antlr.v4.runtime.Parser.triggerExitRuleEvent(Parser.java:398)\n    at org.antlr.v4.runtime.Parser.exitRule(Parser.java:547)\n    at org.homedns.kintoshmalae.lang.xml.XMLParser.document(XMLParser.java:130)\n    at org.homedns.kintoshmalae.lang.xml.TestXMLParser.main(TestXMLParser.java:30)\nJava Result: 1\n```\n\nIt appears that the first exception is causing the Context (in this case `ElementContext`) to be improperly constructed, which results in the error being generated when we attempt to access the name from the context.\nPerhaps we could just get the calls to the listener methods to be wrapped so that the exception is reported and not allowed to propagate out into somewhere in the middle of the parser. Even if it didn't actually stop the parser, having the error in the output would have made tracking down the bug which was causing this to be significantly easier (if nothing else I would have been looking in the right place). \n"}, {"labels": ["comp:tool", "error-handling", "type:bug"], "filteredCommits": ["05b8c2283341c8359efcd0b35554d641a29116ac"], "url": "https://github.com/antlr/antlr4/issues/308", "gitStatsSummary": {"insertions": 2, "gitFilesChange": 2, "lines": 3, "deletions": 1}, "numCommits": 1, "commits": {"05b8c2283341c8359efcd0b35554d641a29116ac": {"commitUser": "sharwell", "commitGHEventType": "closed"}, "fe5f93a0f49c9baca453ded501f9fee4b42f3fa8": {"commitUser": "sharwell", "commitGHEventType": "referenced"}}, "ttf": 177.00027777777777, "user": "charb", "changesInPackagesSPOON": ["org.antlr.v4.Tool.parse(java.lang.String,org.antlr.runtime.CharStream)"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/parse/ANTLRLexer.g", "tool/src/org/antlr/v4"], "body": "Hi,\n\nI have the following exception and not enough information to know what caused it\n\n```\nException in thread \"main\" java.lang.NullPointerException\n        at org.antlr.v4.automata.ParserATNFactory.elemList(ParserATNFactory.java:452)\n        at org.antlr.v4.automata.ParserATNFactory.alt(ParserATNFactory.java:439)\n        at org.antlr.v4.parse.ATNBuilder.alternative(ATNBuilder.java:567)\n        at org.antlr.v4.parse.ATNBuilder.ruleBlock(ATNBuilder.java:289)\n        at org.antlr.v4.automata.ParserATNFactory._createATN(ParserATNFactory.java:177)\n        at org.antlr.v4.automata.LexerATNFactory.createATN(LexerATNFactory.java:94)\n        at org.antlr.v4.Tool.processNonCombinedGrammar(Tool.java:407)\n        at org.antlr.v4.Tool.process(Tool.java:376)\n        at org.antlr.v4.Tool.processGrammarsOnCommandLine(Tool.java:343)\n        at org.antlr.v4.Tool.main(Tool.java:190)\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 1}, "title": "NullPointer exception", "statsSkippedReason": "", "closed": "2014-01-16 03:39:49", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2014-01-15 21:39:19", "commitHash": "05b8c2283341c8359efcd0b35554d641a29116ac", "commitParents": ["511c60fe7bee7a4fe94a84c64627626909054490"], "commitGHEventType": "closed", "nameRev": "05b8c2283341c8359efcd0b35554d641a29116ac tags/4.4~145^2", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "tool/src/org/antlr/v4/Tool.java", "deletions": 1}, {"insertions": 1, "lines": 1, "filePath": "tool/src/org/antlr/v4/parse/ANTLRLexer.g", "deletions": 0}, {"insertions": 32, "lines": 32, "filePath": "tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestToolSyntaxErrors.testDoubleQuotedStringLiteral()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.Tool.parse(java.lang.String,org.antlr.runtime.CharStream)"}], "spoonFilePath": "Tool.java"}], "commitMessage": "Syntax errors while lexing stop grammar compilation process (fixes #308)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-01-15 21:39:19"}, {"commitUser": "sharwell", "commitDateTime": "2014-01-15 19:39:49", "commitHash": "fe5f93a0f49c9baca453ded501f9fee4b42f3fa8", "commitParents": ["511c60fe7bee7a4fe94a84c64627626909054490", "05b8c2283341c8359efcd0b35554d641a29116ac"], "commitGHEventType": "referenced", "nameRev": "fe5f93a0f49c9baca453ded501f9fee4b42f3fa8 tags/4.4~145", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "tool/src/org/antlr/v4/Tool.java", "deletions": 1}, {"insertions": 1, "lines": 1, "filePath": "tool/src/org/antlr/v4/parse/ANTLRLexer.g", "deletions": 0}, {"insertions": 32, "lines": 32, "filePath": "tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestToolSyntaxErrors.testDoubleQuotedStringLiteral()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.Tool.parse(java.lang.String,org.antlr.runtime.CharStream)"}], "spoonFilePath": "Tool.java"}], "commitMessage": "Merge pull request #418 from sharwell/fix-308\n\nSyntax errors while lexing stop grammar compilation process (fixes #308)", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-01-15 19:39:49"}], "created": "2013-07-22 08:02:36"}, {"labels": ["type:bug"], "url": "https://github.com/antlr/antlr4/issues/307", "title": "warning 125 (implicit definition of token in parser) is displayed where not appropriate", "closed": "2014-01-17 02:51:55", "commitsDetails": [], "commits": {}, "ttf": 178.00027777777777, "created": "2013-07-22 06:40:02", "user": "fraschfn", "body": "I have a separate lexer and parser grammar (derived from the sample ModeTagsLexer/ModeTagsParser) and get a warning in AntlrWorks 2 that I don't understand:\nwarning(125): implicit definition of token OPEN in parser\n\nIf I replace the OPEN rule with '<' the warning goes away. I wonder what the difference between OPEN and CLOSE ist which get's no warning.\n\nI'm using antlr-4.1-complete.jar and 2013-01-22-antlrworks-2.0.\n\nLexer STLexer.g4:\n\n``` antlr\n\nlexer grammar STLexer;\n\n// Default mode rules (the SEA)\nOPEN  : '<'     -> pushMode(ISLAND) ;       // switch to ISLAND mode\nTEXT  : ~'<'+ ;                         // clump all text together\n\nmode ISLAND;\nCLOSE : '>'     -> popMode ; // back to SEA mode\nSLASH : '/' ;\nID    : [a-zA-Z0-9\"=]+ ;                     // match/send ID in tag to parser\nWS    : [ \\t]+ -> channel(HIDDEN);\n```\n\nParser STParser.g4:\n\n``` antlr\nparser grammar STParser;\n\noptions { tokenVocab=STLexer; } // use tokens from STLexer.g4\n\n\n\nunit: (tag | TEXT)* ;\n\ntag : OPEN ID+ CLOSE\n    | OPEN SLASH ID+ CLOSE\n    ;\n```\n\nIt even persists if I rename the rule slightly and remove the additional mode:\n\nLexer (modified):\n\n``` antlr\nlexer grammar STLexer;\n\n// Default mode rules (the SEA)\nOPPEN  : '<'    ;// -> pushMode(ISLAND) ;       // switch to ISLAND mode\nTEXT  : ~'<'+ ;                         // clump all text together\n\n//mode ISLAND;\nCLOSE : '>'  ; //   -> popMode ; // back to SEA mode\nSLASH : '/' ;\nID    : [a-zA-Z0-9\"=]+ ;                     // match/send ID in tag to parser\nWS    : [ \\t]+ -> channel(HIDDEN);\n```\n\nParser (modified):\n\n``` antlr\nparser grammar STParser;\n\noptions { tokenVocab=STLexer; } // use tokens from STLexer.g4\n\n\n\nunit: (tag | TEXT)* ;\n\ntag : ID OPPEN ID+ CLOSE\n    | ID OPPEN SLASH ID+ CLOSE\n    ;\n```\n\nAccording to Sam Harwell this is a bug in Antlr4 not Antlrworks2.\nSee https://bitbucket.org/sharwell/antlrworks2/issue/19/why-does-antlrworks-2-display-warning-125\n"}, {"labels": ["status:not-fixing", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/304", "title": "Encounter problem when modify tree in visit model", "closed": "2014-01-16 22:12:00", "commitsDetails": [], "commits": {}, "ttf": 181.00027777777777, "created": "2013-07-19 14:32:34", "user": "dongli", "body": "Dear all,\n\nI use visit model to modify the parse tree, and encounter a problem when I replace some child nodes while visiting the parent node. I think the problem is due to the loop style in `visitChildren` method as following:\n\n``` Java\n    public T visitChildren(@NotNull RuleNode node) {\n        T result = defaultResult();\n        int n = node.getChildCount();\n        for (int i=0; i<n; i++) {\n            if (!shouldVisitNextChild(node, result)) {\n                break;\n            }\n\n            ParseTree c = node.getChild(i);\n            T childResult = c.accept(this);\n            result = aggregateResult(result, childResult);\n        }\n\n        return result;\n    }\n```\n\nThe `for` loop will be interfered when I changed the child nodes. Can this loop be changed to more robust loop style, like `while`?\n"}, {"labels": ["status:duplicate", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/303", "title": "Precedence breaks if one alternative contains rules only", "closed": "2014-01-17 03:04:28", "commitsDetails": [], "commits": {}, "ttf": 184.00027777777777, "created": "2013-07-16 13:58:25", "user": "ChristianWulf", "body": "When parsing the following statement with the rule 'expression' (see below), the precedence of a multiplicative expression over an equality expression breaks.\n\n```\n...\nwhile (n%i==0) {\n  factors.add(i);n/=i;\n}\n...\n```\n\n```\nexpression\n    :   primary                                                         # primaryExpression\n    |   expression DOT Identifier                                       # expressionDot0\n    |   expression DOT 'this'                                           # expressionDot1\n    |   expression DOT 'new' nonWildcardTypeArguments? innerCreator     # expressionDot2\n    |   expression DOT 'super' superSuffix                              # expressionDot3\n    |   expression DOT explicitGenericInvocation                        # expressionDot4\n    |   expression '[' expression ']'                                   # arrayAccess\n    |   expression '(' expressionList? ')'                              # methodInvocation\n    |   NEW creator                                                     # typeCreationExpression\n    |   '(' type ')' expression                                         # castExpression\n    |   expression ('++' | '--')                                        # postFixExpression\n    |   ('+'|'-'|'++'|'--') expression                                  # preFixExpression\n    |   ('~'|'!') expression                                            # unaryExpression\n    |   expression multiplicativeOp expression                          # multiplicativeExpression\n    |   expression (ADD | SUB) expression                               # additiveExpression\n    |   expression ('<' '<' | '>' '>' '>' | '>' '>') expression         # shiftExpression\n    |   expression (LE | GE | GT | LT) expression                       # relationalExpression\n    |   expression equalityOp expression                                # equalityExpression\n    |   expression 'instanceof' type                                    # instanceofExpression\n    |   expression '&' expression                                       # binExpression0\n    |   expression '^' expression                                       # binExpression1\n    |   expression '|' expression                                       # binExpression2\n    |   expression '&&' expression                                      # logicalExpression0\n    |   expression '||' expression                                      # logicalExpression1\n    |   expression '?' expression ':' expression                        # ternaryExpression\n    |   expression assignmentOp expression                              # assignment                \n    ;\n\nmultiplicativeOp\n    : (MUL | DIV | MOD)\n    ;\n\nequalityOp\n    : (EQUAL | NOTEQUAL)\n    ;\n```\n\nIn this example, the alternatives 'multiplicativeExpression' and 'equalityExpression' use the rules 'multiplicativeOp' and, respectively, 'equalityOp' for the corresponding operators. Thus, by visiting the parse tree, we get\n\n```\nvisitMultiplicativeExpression: n%i==0\nvisitEqualityExpression: i==0\n```\n\nWhen replacing the rules by its body and, therefore, using the tokens directly in the expression rule, we get the expected result\n\n```\nvisitEqualityExpression: n%i==0\nvisitMultiplicativeExpression: n%i\n```\n\nPerhaps, specifying at least one token in each alternative is intended and necessary for antlr to correctly produce a left-recursive grammar. However, it is not intuitively understandable. Could you please consider to print out a warning or a hint in such cases or just do something different than not reporting anything ;)\n"}, {"labels": ["type:bug"], "filteredCommits": ["82330a8a785e340e5d7bdef5cee9c3399fb41623"], "url": "https://github.com/antlr/antlr4/issues/287", "gitStatsSummary": {"insertions": 21, "gitFilesChange": 1, "lines": 31, "deletions": 10}, "numCommits": 1, "commits": {"82330a8a785e340e5d7bdef5cee9c3399fb41623": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 5.000277777777778, "user": "cowang", "changesInPackagesSPOON": ["org.antlr.v4.test.JavaUnicodeInputStream.LA(int)", "org.antlr.v4.test.JavaUnicodeInputStream.readCharAt(int[],int[])", "org.antlr.v4.test.JavaUnicodeInputStream", "org.antlr.v4.test.JavaUnicodeInputStream.readCharAt(int[],int[],int[])", "org.antlr.v4.test.JavaUnicodeInputStream.consume()"], "changesInPackagesGIT": ["tool/test/org/antlr/v4/test"], "body": "JLS7 allows for multiple u's in Unicode escapes to indicate level of nested encodings. E.g. \\uu000d indicates a carriage return encoded twice (topic 3.3, bottom 3 paragraphs).\n\nThe code that does this for the Java7 compiler is located in method convertUnicode() in\nlangtools-ce654f4ecfd8\\src\\share\\classes\\com\\sun\\tools\\javac\\parser\\Scanner.java\n\nNeed to modify method readCharAt() in\ntool/test/org/antlr/v4/test/JavaUnicodeInputStream.java\nto also allow multiple u's.\n\nPerhaps we need to also allow multiple u's in the Unicode escapes for the Antlr tool.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 5, "UPD": 0, "TOT": 25, "DEL": 3, "INS": 17, "spoonFilesChanged": 1, "MOV": 5}, "title": "Allow multiple u's in Unicode escapes, \\uu000d", "statsSkippedReason": "", "closed": "2013-06-24 17:17:23", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2013-06-24 12:02:42", "commitHash": "82330a8a785e340e5d7bdef5cee9c3399fb41623", "commitParents": ["e575dc40e3ef70642c5eeff18b4c13fdb7d81bd1"], "commitGHEventType": "closed", "nameRev": "82330a8a785e340e5d7bdef5cee9c3399fb41623 tags/4.4~195^2", "commitGitStats": [{"insertions": 21, "lines": 31, "filePath": "tool/test/org/antlr/v4/test/JavaUnicodeInputStream.java", "deletions": 10}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 9, "DEL": 2, "INS": 6, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.JavaUnicodeInputStream.LA(int)"}, {"UPD": 0, "TOT": 4, "DEL": 1, "INS": 0, "MOV": 3, "spoonMethodName": "org.antlr.v4.test.JavaUnicodeInputStream.readCharAt(int[],int[])"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.JavaUnicodeInputStream"}, {"UPD": 0, "TOT": 8, "DEL": 0, "INS": 8, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.JavaUnicodeInputStream.readCharAt(int[],int[],int[])"}, {"UPD": 0, "TOT": 3, "DEL": 0, "INS": 2, "MOV": 1, "spoonMethodName": "org.antlr.v4.test.JavaUnicodeInputStream.consume()"}], "spoonFilePath": "JavaUnicodeInputStream.java"}], "commitMessage": "Support Unicode escape sequences in JavaUnicodeInputStream with indirection (multiple 'u' characters) (fixes #287)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-06-24 11:44:57"}], "created": "2013-06-19 03:04:27"}, {"labels": ["status:fixed", "type:bug"], "filteredCommits": ["6fe7154c44950af59da3ca393e8b2f2aaec151b1"], "url": "https://github.com/antlr/antlr4/issues/280", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"6fe7154c44950af59da3ca393e8b2f2aaec151b1": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "cowang", "changesInPackagesGIT": ["tool/test/org/antlr/v4/test/Java-LR.g4"], "body": "In the Java grammars, the ^-operator is the left-associative exclusive-or operator, not the right-associative power operator. (JLS7, topic 15.22).\n\nThe grammars in antlr/grammars-v4 were previously corrected.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Operator ^ is exclusive-or, not power", "statsSkippedReason": "", "closed": "2013-06-09 02:10:06", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2013-06-08 21:09:33", "commitHash": "6fe7154c44950af59da3ca393e8b2f2aaec151b1", "commitParents": ["6bf738cabd188baad0ce39881c76eeeb77481603"], "commitGHEventType": "closed", "nameRev": "6fe7154c44950af59da3ca393e8b2f2aaec151b1 tags/4.4~199", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/Java-LR.g4", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Exclusive or operator is left associative (fixes #280)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-06-08 21:08:56"}], "created": "2013-06-09 00:37:44"}, {"labels": ["comp:tool", "grammars", "status:duplicate", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/272", "title": "Extraneous ] token yields no syntax error in grammar syntax", "closed": "2013-06-01 21:16:15", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2013-06-01 19:05:44", "user": "parrt", "body": "should be `']'` not just `]` after `constant_range_expression`.\n\n```\n    net_lvalue :\n    hierarchical_net_identifier\n    | hierarchical_net_identifier '[' constant_expression ']' ( '[' constant_expression ']' )*[\n    | hierarchical_net_identifier '[' constant_expression ']' ( '[' constant_expression ']' )* '[' constant_range_expression ]\n    | hierarchical_net_identifier '[' constant_range_expression ]\n    | net_concatenation\n    ;\n```\n"}, {"labels": ["grammars", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/268", "title": "make left recursion pattern more flexible", "closed": "2014-01-17 14:17:21", "commitsDetails": [], "commits": {}, "ttf": 234.00027777777777, "created": "2013-05-28 04:05:13", "user": "parrt", "body": "```\n    expression\n        :   primary\n        |   unary_operator attribute_instance* primary\n        |   expression binary_operator attribute_instance* expression\n        |   expression '?' attribute_instance* expression ':' expression\n        ;\n```\n\nThis seems to mess up and not do left recur removal.\n\nAny  unrecognized pattern should do the standard left recursion elimination without ambiguity resolution.\n"}, {"labels": ["status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/248", "title": "Including grammar with only fragments breaks generated lexer", "closed": "2013-05-20 18:32:57", "commitsDetails": [], "commits": {}, "ttf": 12.000277777777777, "created": "2013-05-07 19:28:03", "user": "Virtlink", "body": "A grammar that contains only fragments (e.g. a file with only Unicode character classes in it) breaks the generated lexer. Putting just one (useless or overridden) rule in it fixes this.\n\nGrammars to demonstrate the problem:\n\n```\ngrammar Test;\nimport Unicode;\n\nprogram : 'test' 'test' ;\n\nWS : (UNICODE_CLASS_Zs)+ -> skip ;\n```\n\n&nbsp;\n\n```\nlexer grammar Unicode;\n\nfragment\nUNICODE_CLASS_Zs    : '\\u0020' | '\\u00A0' | '\\u1680' | '\\u180E'\n                    | '\\u2000'..'\\u200A'\n                    | '\\u202F' | '\\u205F' | '\\u3000'\n                    ;\n```\n"}, {"labels": ["status:invalid", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/239", "title": "recoursive parser using implicit tokens ignore white space lexer rule", "closed": "2013-06-09 19:12:53", "commitsDetails": [], "commits": {}, "ttf": 43.000277777777775, "created": "2013-04-27 10:21:41", "user": "somefreestring", "body": "for this gramar (using antlr-4.0-complete.jar)\n\n```\nexpression\n    : ID '(' expression (',' expression)* ')'               # doFunction\n    | '(' expression ')'                                    # doParenthesis\n    | '!' expression                                        # doNot\n    | '-' expression                                        # doNegate\n    | '+' expression                                        # doPositiv\n    | expression '^' expression                             # doPower\n    | expression '*' expression                             # doMultipy\n    | expression '/' expression                             # doDivide\n    | expression '%' expression                             # doModulo\n    | expression '-' expression                             # doMinus\n    | expression '+' expression                             # doPlus\n    | expression '=' expression                             # doEqual\n    | expression '!=' expression                            # doNotEqual\n    | expression '>' expression                             # doGreather\n    | expression '>=' expression                            # doGreatherEqual\n    | expression '<' expression                             # doLesser\n    | expression '<=' expression                            # doLesserEqual\n    | expression K_IN '(' expression (',' expression)* ')'  # doIn\n    | expression ( '&' | K_AND) expression                  # doAnd\n    | expression ( '|' | K_OR) expression                   # doOr\n    | '[' expression (',' expression)* ']'                  # newArray\n    | K_TRUE                                                # newTrueBoolean\n    | K_FALSE                                               # newFalseBoolean\n    | NUMBER                                                # newNumber\n    | DATE                                                  # newDateTime\n    | ID                                                    # newIdentifier\n    | SQ_STRING                                             # newString\n    | K_NULL                                                # newNull\n    ;\n\n// Fragements\nfragment DIGIT    : '0' .. '9';  \nfragment UPPER    : 'A' .. 'Z';\nfragment LOWER    : 'a' .. 'z';\nfragment LETTER   : LOWER | UPPER;\nfragment WORD     : LETTER | '_' | '$' | '#' | '.';\nfragment ALPHANUM : WORD | DIGIT;  \n\n// Tokens\nID              : LETTER ALPHANUM*;\nNUMBER          : DIGIT+ ('.' DIGIT+)? (('e'|'E')('+'|'-')? DIGIT+)?;\nDATE            : '\\'' DIGIT DIGIT DIGIT DIGIT '-' DIGIT DIGIT '-' DIGIT DIGIT (' ' DIGIT DIGIT ':' DIGIT DIGIT ':' DIGIT DIGIT ('.' DIGIT+)?)? '\\'';\nSQ_STRING       : '\\'' ('\\'\\'' | ~'\\'')* '\\'';\nDQ_STRING       : '\"' ('\\\\\"' | ~'\"')* '\"';\nWS              : [ \\t\\n\\r]+ -> skip ;\nCOMMENTS        : ('/*' .*? '*/' | '//' ~'\\n'* '\\n' ) -> skip;\n```\n\na expression like `Test(1,3)` compiles while `Test(1, 3)` does not. But any white space should be eliminated by my lexer rule `WS`.\n"}, {"labels": ["type:bug"], "url": "https://github.com/antlr/antlr4/issues/221", "title": "epsilon+ causes hangs", "closed": "2013-09-19 17:27:32", "commitsDetails": [], "commits": {}, "ttf": 159.00027777777777, "created": "2013-04-13 00:40:09", "user": "ampanasiuk", "body": "I'm using the following grammar:\n\n```\ngrammar grammar1;\n\na : d+ ;\nd:  /*epsilon*/;\nWS : [ \\r\\t\\n]+ -> skip;\n```\n\nin AntlrWorks 2 I use Run in Testrig with a file of contents \"x\".\n\nCPU usage spikes and memory does not stop to be allocated.\n\nWhile this grammar is not useful on its own, the same bug affected the grammar I was working on, after I accidentally put an extra pipe in a rule. One pipe was at the end of a long line, so I carelessly added another one while adding some alternative below.\n\n```\na: d+;\nd : some long line |\n   | 'e'\n   | 'f';\n```\n"}, {"labels": ["code-gen", "comp:tool", "status:fixed", "type:bug"], "filteredCommits": ["7f029a3c80e833bfbcd2009b63c3dd6b9d02ea58"], "url": "https://github.com/antlr/antlr4/issues/202", "gitStatsSummary": {"insertions": 6, "gitFilesChange": 1, "lines": 7, "deletions": 1}, "numCommits": 1, "commits": {"7f029a3c80e833bfbcd2009b63c3dd6b9d02ea58": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 0.0002777777777777778, "user": "sharwell", "changesInPackagesSPOON": ["org.antlr.v4.codegen.OutputModelController.buildLexerRuleActions(org.antlr.v4.codegen.model.Lexer,org.antlr.v4.tool.Rule)"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/codegen"], "body": "An action function is generated for the following lexer rule, even though the rule only contains a predicate (and no actions). The generated action function contributes to code bloat and contains an empty switch statement which may trigger a compiler warning.\n\n```\nENUM : 'enum' {enumSupported}?;\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 1}, "title": "Empty action method generated for lexer rule with only sempred", "statsSkippedReason": "", "closed": "2013-03-27 20:04:10", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2013-03-27 09:46:45", "commitHash": "7f029a3c80e833bfbcd2009b63c3dd6b9d02ea58", "commitParents": ["507f331bd08bc01c213822508d18bbc4ba769db4"], "commitGHEventType": "closed", "nameRev": "7f029a3c80e833bfbcd2009b63c3dd6b9d02ea58 tags/4.4~236^2", "commitGitStats": [{"insertions": 6, "lines": 7, "filePath": "tool/src/org/antlr/v4/codegen/OutputModelController.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.codegen.OutputModelController.buildLexerRuleActions(org.antlr.v4.codegen.model.Lexer,org.antlr.v4.tool.Rule)"}], "spoonFilePath": "OutputModelController.java"}], "commitMessage": "Avoid creating empty action methods in lexer (fixes #202)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-03-27 09:46:45"}], "created": "2013-03-27 14:46:21"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "filteredCommits": ["961f68c8655d534586cbce49b0bc035ddd986f1f"], "url": "https://github.com/antlr/antlr4/issues/195", "gitStatsSummary": {"insertions": 4, "gitFilesChange": 1, "lines": 4, "deletions": 0}, "numCommits": 1, "commits": {"961f68c8655d534586cbce49b0bc035ddd986f1f": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 2.000277777777778, "user": "yankee42", "changesInPackagesSPOON": ["org.antlr.v4.semantics.SymbolChecks.checkForLabelConflicts(java.util.Collection)"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/semantics"], "body": "I noticed that I can't write a rule like this:\n\n```\nausdruck: label=ausdruck 'x' #One\n        | label='foo'    #Two\n        ;\n```\n\nIt gives the following error:\n\n> label 'label' type mismatch with previous definition:\n> TOKEN_LABEL!=RULE_LABEL\n\nIt looks like this is because once label refers to a parser rule and once to a lexer rule. If I slightly change the rule:\n\n```\nausdruck: label=ausdruck 'x' #One\n        | label2='foo'    #Two\n        ;\n```\n\nEverything works fine.\nSince the labels are contained in seperate rules I think they should not interfere with each other.\n\n(Also on stackoverflow: http://stackoverflow.com/q/15481471)\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 1, "UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "spoonFilesChanged": 1, "MOV": 0}, "title": "label 'label' type mismatch with previous definition: TOKEN_LABEL!=RULE_LABEL", "statsSkippedReason": "", "closed": "2013-03-27 20:04:11", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2013-03-27 11:21:32", "commitHash": "961f68c8655d534586cbce49b0bc035ddd986f1f", "commitParents": ["507f331bd08bc01c213822508d18bbc4ba769db4"], "commitGHEventType": "closed", "nameRev": "961f68c8655d534586cbce49b0bc035ddd986f1f tags/4.4~234^2", "commitGitStats": [{"insertions": 4, "lines": 4, "filePath": "tool/src/org/antlr/v4/semantics/SymbolChecks.java", "deletions": 0}, {"insertions": 21, "lines": 21, "filePath": "tool/test/org/antlr/v4/test/TestParserExec.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.semantics.SymbolChecks.checkForLabelConflicts(java.util.Collection)"}], "spoonFilePath": "SymbolChecks.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestParserExec.testLabelAliasingAcrossLabeledAlternatives()"}], "spoonFilePath": "TestParserExec.java"}], "commitMessage": "Fix incorrect reports of label type conflicts for labels aliased across separate *labeled* outer alternatives (fixes #195)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-03-27 11:21:32"}], "created": "2013-03-25 16:44:36"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "filteredCommits": ["551100ea375bd3db4183ef3619c6f1e86bed5388"], "url": "https://github.com/antlr/antlr4/issues/190", "gitStatsSummary": {"insertions": 23, "gitFilesChange": 2, "lines": 23, "deletions": 0}, "numCommits": 1, "commits": {"551100ea375bd3db4183ef3619c6f1e86bed5388": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 11.000277777777777, "user": "hrskevin", "changesInPackagesSPOON": ["org.antlr.v4.tool.ErrorType", "org.antlr.v4.automata.LexerATNFactory.lexerCommand(org.antlr.v4.tool.ast.GrammarAST)", "org.antlr.v4.automata.LexerATNFactory.lexerCallCommand(org.antlr.v4.tool.ast.GrammarAST,org.antlr.v4.tool.ast.GrammarAST)"], "changesInPackagesGIT": ["tool/src/org/antlr/v4/automata", "tool/src/org/antlr/v4/tool"], "body": "I am getting a NullPointerException in LexerATNFactory.lexerCallCommand when I try to use -> token(X) in my lexer grammar.\n\nWhen I stop in the debugger, it appears to be looking for :\"LexerTokenCommand\" from codegenTemplates. Sure enough, when I look at the Java.stg file in org/antlr/v4/tool/templates/codegen/Java from the jar file, I see templates for the other lexer actions but none for token:\n\n```\nLexerSkipCommand()  ::= \"skip();\"\nLexerMoreCommand()  ::= \"more();\"\nLexerPopModeCommand() ::= \"popMode();\"\n\nLexerTypeCommand(arg)      ::= \"_type = <arg>;\"\nLexerChannelCommand(arg)   ::= \"_channel = <arg>;\"\nLexerModeCommand(arg)      ::= \"_mode = <arg>;\"\nLexerPushModeCommand(arg)  ::= \"pushMode(<arg>);\"\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 3, "UPD": 0, "TOT": 3, "DEL": 0, "INS": 3, "spoonFilesChanged": 2, "MOV": 0}, "title": "NullPointerException building lexer grammar using bogus 'token' action", "statsSkippedReason": "", "closed": "2013-03-27 20:04:10", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2013-03-26 23:57:11", "commitHash": "551100ea375bd3db4183ef3619c6f1e86bed5388", "commitParents": ["05f4b76fab637e118dc3172f067c5f60ad131412"], "commitGHEventType": "closed", "nameRev": "551100ea375bd3db4183ef3619c6f1e86bed5388 tags/4.4~237^2~1", "commitGitStats": [{"insertions": 10, "lines": 10, "filePath": "tool/src/org/antlr/v4/automata/LexerATNFactory.java", "deletions": 0}, {"insertions": 19, "lines": 19, "filePath": "tool/test/org/antlr/v4/test/TestToolSyntaxErrors.java", "deletions": 0}, {"insertions": 13, "lines": 13, "filePath": "tool/src/org/antlr/v4/tool/ErrorType.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.automata.LexerATNFactory.lexerCommand(org.antlr.v4.tool.ast.GrammarAST)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.automata.LexerATNFactory.lexerCallCommand(org.antlr.v4.tool.ast.GrammarAST,org.antlr.v4.tool.ast.GrammarAST)"}], "spoonFilePath": "LexerATNFactory.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestToolSyntaxErrors.testInvalidLexerCommand()"}], "spoonFilePath": "TestToolSyntaxErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.tool.ErrorType"}], "spoonFilePath": "ErrorType.java"}], "commitMessage": "Add error 149: INVALID_LEXER_COMMAND (fixes #190)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-03-26 23:57:11"}], "created": "2013-03-16 16:49:55"}, {"labels": ["status:fixed", "type:bug"], "filteredCommits": ["c35f5ec40c33416d65c0e0cb0ce29dc39649fa34"], "url": "https://github.com/antlr/antlr4/issues/176", "gitStatsSummary": {"insertions": 6, "gitFilesChange": 1, "lines": 7, "deletions": 1}, "numCommits": 1, "commits": {"c35f5ec40c33416d65c0e0cb0ce29dc39649fa34": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 3.000277777777778, "user": "parrt", "changesInPackagesSPOON": [], "changesInPackagesGIT": ["tool/src/org/antlr/v4/parse/ActionSplitter.g"], "body": "predicate `{_input.la(1) == '$'}?` in an ANTLR 4 lexer compiles to the Java expression without warning/error: \n`_input.la(1) == ''`\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0, "TOT": 0, "DEL": 0, "INS": 0, "spoonFilesChanged": 0, "MOV": 0}, "title": "in antlr v4 lexer, $ translation issue in action", "statsSkippedReason": "", "closed": "2013-03-06 19:23:51", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2013-03-06 13:13:33", "commitHash": "c35f5ec40c33416d65c0e0cb0ce29dc39649fa34", "commitParents": ["56c053a5be93c86fa81da24f8e6868d0d18830d6"], "commitGHEventType": "closed", "nameRev": "c35f5ec40c33416d65c0e0cb0ce29dc39649fa34 tags/4.4~274", "commitGitStats": [{"insertions": 6, "lines": 7, "filePath": "tool/src/org/antlr/v4/parse/ActionSplitter.g", "deletions": 1}, {"insertions": 14, "lines": 14, "filePath": "tool/test/org/antlr/v4/test/TestActionTranslation.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestActionTranslation.testUnescaped$InAction()"}], "spoonFilePath": "TestActionTranslation.java"}], "commitMessage": "Do not require escape for $ in action when not followed by an ID start char (fixes #176)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-03-06 13:13:33"}], "created": "2013-03-02 19:30:23"}, {"labels": ["command-line-options", "type:bug"], "filteredCommits": ["e0e6e0a94c09b6a2a3528bd7f30d0514e6964418"], "url": "https://github.com/antlr/antlr4/issues/158", "gitStatsSummary": {"insertions": 29, "gitFilesChange": 6, "lines": 50, "deletions": 21}, "numCommits": 1, "commits": {"e0e6e0a94c09b6a2a3528bd7f30d0514e6964418": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 17.00027777777778, "user": "parrt", "changesInPackagesSPOON": ["org.antlr.v4.runtime.tree.gui.PostScriptDocument.text(java.lang.String,double,double)", "org.antlr.v4.runtime.atn.ATNSimulator.deserialize(char[])", "org.antlr.v4.runtime.atn.LexerATNSimulator.execATN(org.antlr.v4.runtime.CharStream,org.antlr.v4.runtime.dfa.DFAState)", "org.antlr.v4.runtime.tree.gui.PostScriptDocument.setFont(java.lang.String,int)", "org.antlr.v4.runtime.tree.gui.PostScriptDocument.highlight(double,double,double,double)", "org.antlr.v4.runtime.atn.LexerATNSimulator.matchATN(org.antlr.v4.runtime.CharStream)", "org.antlr.v4.runtime.atn.LexerATNSimulator.accept(org.antlr.v4.runtime.CharStream,int,int,int,int,int)", "org.antlr.v4.runtime.atn.ATNState.addTransition(org.antlr.v4.runtime.atn.Transition)", "org.antlr.v4.runtime.atn.LexerATNSimulator.getReachableConfigSet(org.antlr.v4.runtime.CharStream,org.antlr.v4.runtime.atn.ATNConfigSet,org.antlr.v4.runtime.atn.ATNConfigSet,int)", "org.antlr.v4.runtime.atn.LexerATNSimulator.closure(org.antlr.v4.runtime.CharStream,org.antlr.v4.runtime.atn.LexerATNConfig,org.antlr.v4.runtime.atn.ATNConfigSet,boolean,boolean)", "org.antlr.v4.runtime.atn.ATNSimulator.stateFactory(int,int)", "org.antlr.v4.runtime.LexerNoViableAltException.toString()", "org.antlr.v4.runtime.tree.gui.PostScriptDocument.boundingBox(int,int)", "org.antlr.v4.runtime.tree.gui.PostScriptDocument.lineto(double,double)", "org.antlr.v4.runtime.FailedPredicateException.formatMessage(java.lang.String,java.lang.String)", "org.antlr.v4.runtime.tree.gui.PostScriptDocument.move(double,double)"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime/tree/gui", "runtime/Java/src/org/antlr/v4/runtime/atn", "runtime/Java/src/org/antlr/v4/runtime"], "body": "from: http://stackoverflow.com/questions/14914962/antlr-postscript-tree/14915933#14915933\nbut also:\n\nI export the parse tree to PostScript with the -ps and GSView emmit errors in the PostScript, view my stackoverflow ask... i guess it is the ambiguos number format, any locations coma and others dot for decimal.\n\nAlso the TestRig in cygwin not process the ctl+D for EOF.\n\nmy excecution environment is cygwin with the locale:\n\n$ locale\nLANG=es_ES.UTF-8\nLC_CTYPE=\"es_ES.UTF-8\"\nLC_NUMERIC=\"es_ES.UTF-8\"\nLC_TIME=\"es_ES.UTF-8\"\nLC_COLLATE=\"es_ES.UTF-8\"\nLC_MONETARY=\"es_ES.UTF-8\"\nLC_MESSAGES=\"es_ES.UTF-8\"\nLC_ALL=\n\nThe postscript:\n\n%!PS-Adobe-3.0 EPSF-3.0\n%%BoundingBox: 0 0 54 48\n\n0.3 setlinewidth\n%% x y w h highlight\n/highlight {\n        4 dict begin\n        /h exch def\n        /w exch def\n        /y exch def\n        /x exch def\n        gsave\n        newpath\n        x y moveto\n        0 h rlineto     % up to left corner\n        w 0 rlineto     % to upper right corner\n        0 h neg rlineto % to lower right corner\n        w neg 0 rlineto % back home to lower left corner\n        closepath\n        .95 .83 .82 setrgbcolor\n        fill\n        grestore\n        end\n} def\n/ArialMT findfont 11 scalefont setfont\n27,813 32,395 moveto\n12,616 15,395 lineto\n27,813 32,395 moveto\n43,011 15,395 lineto\n1,000 5,000 moveto\n(hello) show\nstroke\n33,232 5,000 moveto\n(parr) show\nstroke\n25,982 37,395 moveto\n(r) show\nstroke\n%%Trailer\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 16, "UPD": 0, "TOT": 19, "DEL": 0, "INS": 19, "spoonFilesChanged": 6, "MOV": 0}, "title": "locale issue with postscript gen in TestRig", "statsSkippedReason": "", "closed": "2013-03-06 17:27:41", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2013-03-06 11:26:38", "commitHash": "e0e6e0a94c09b6a2a3528bd7f30d0514e6964418", "commitParents": ["2ffb12028a9eefcf7fa4bc617e10e05eb3c05d5c"], "commitGHEventType": "closed", "nameRev": "e0e6e0a94c09b6a2a3528bd7f30d0514e6964418 tags/4.4~277", "commitGitStats": [{"insertions": 9, "lines": 17, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/LexerATNSimulator.java", "deletions": 8}, {"insertions": 2, "lines": 3, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/ATNState.java", "deletions": 1}, {"insertions": 3, "lines": 4, "filePath": "runtime/Java/src/org/antlr/v4/runtime/LexerNoViableAltException.java", "deletions": 1}, {"insertions": 9, "lines": 17, "filePath": "runtime/Java/src/org/antlr/v4/runtime/tree/gui/PostScriptDocument.java", "deletions": 8}, {"insertions": 3, "lines": 5, "filePath": "runtime/Java/src/org/antlr/v4/runtime/atn/ATNSimulator.java", "deletions": 2}, {"insertions": 3, "lines": 4, "filePath": "runtime/Java/src/org/antlr/v4/runtime/FailedPredicateException.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.LexerNoViableAltException.toString()"}], "spoonFilePath": "LexerNoViableAltException.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.LexerATNSimulator.closure(org.antlr.v4.runtime.CharStream,org.antlr.v4.runtime.atn.LexerATNConfig,org.antlr.v4.runtime.atn.ATNConfigSet,boolean,boolean)"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.LexerATNSimulator.matchATN(org.antlr.v4.runtime.CharStream)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.LexerATNSimulator.accept(org.antlr.v4.runtime.CharStream,int,int,int,int,int)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.LexerATNSimulator.getReachableConfigSet(org.antlr.v4.runtime.CharStream,org.antlr.v4.runtime.atn.ATNConfigSet,org.antlr.v4.runtime.atn.ATNConfigSet,int)"}, {"UPD": 0, "TOT": 2, "DEL": 0, "INS": 2, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.LexerATNSimulator.execATN(org.antlr.v4.runtime.CharStream,org.antlr.v4.runtime.dfa.DFAState)"}], "spoonFilePath": "LexerATNSimulator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.ATNState.addTransition(org.antlr.v4.runtime.atn.Transition)"}], "spoonFilePath": "ATNState.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.FailedPredicateException.formatMessage(java.lang.String,java.lang.String)"}], "spoonFilePath": "FailedPredicateException.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.ATNSimulator.deserialize(char[])"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.atn.ATNSimulator.stateFactory(int,int)"}], "spoonFilePath": "ATNSimulator.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.tree.gui.PostScriptDocument.text(java.lang.String,double,double)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.tree.gui.PostScriptDocument.lineto(double,double)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.tree.gui.PostScriptDocument.setFont(java.lang.String,int)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.tree.gui.PostScriptDocument.highlight(double,double,double,double)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.tree.gui.PostScriptDocument.boundingBox(int,int)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.tree.gui.PostScriptDocument.move(double,double)"}], "spoonFilePath": "PostScriptDocument.java"}], "commitMessage": "Specify locale for all format operations (fixes #158)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-03-06 11:26:38"}], "created": "2013-02-17 16:53:09"}, {"labels": ["comp:tool", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/140", "title": "undetected ill grammar", "closed": "2013-01-16 19:53:06", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2013-01-16 14:59:06", "user": "langit", "body": "The grammar below causes `IndexOutOfBoundException` for ANTLR 4 tool. I suppose it should report bad grammar.\n\n``` antlr\ngrammar Badref;\nx : x 'x';\n```\n"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/131", "title": "bad generated code due to name conflict", "closed": "2013-01-11 18:58:04", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2013-01-11 03:15:51", "user": "langit", "body": "In #128 the comment I made exposed another issue, which I suppose is caused by name conflict (`$body` is both a label and a local --- BTW, \"locals\" is somewhat misleading to me, for antlr4 is putting it into the context object and therefore it ends up in the parse tree, maybe \"attach\" makes more sense). Here is a complete grammar file to replicate it, hope this is helpful. Please ignore if it is fixed already. BTW, I have git-cloned your repo and I do have maven3 on my macbook, and I even succeeded in \"mvn package\", but I can't seem to use the produced jar files, they seem different from the antlr4-xx-complete.jar downloaded from antlr4 website. I'd appreciate if you could share with me the command to build that complete jar file to test with.\n\n```\ngrammar Bugout;\ncaseStmt locals[List branches = new ArrayList(),\nList body = new ArrayList()]:\n    'case' condval = ID 'in'\n    (conds += INT ':'\n        (body += stmt)*\n    {\n        $branches.add(new ArrayList($body));\n        $body.clear();\n    }\n    )+\n    ('else' ':'\n        (body += stmt)*\n    )? ';'\n;\nstmt: ID '=' (INT|ID) ('+' INT|ID)* ';' ;\nID: ['a'..'z''A'..'Z']+;\nINT: '0'..'9'+ ;\nWS : [ \\t\\n]+ -> skip ;\n```\n\ncompilation errors:\n\n```\nBugoutParser.java:110: cannot find symbol\nsymbol  : method body(BugoutParser.CaseStmtContext)\nlocation: class BugoutParser.CaseStmtContext\n                        _localctx.branches.add(new ArrayList(_localctx.body((CaseStmtContext)_localctx).body));\n                                                                      ^\nBugoutParser.java:111: cannot find symbol\nsymbol  : method body(BugoutParser.CaseStmtContext)\nlocation: class BugoutParser.CaseStmtContext\n                        _localctx.body((CaseStmtContext)_localctx).body.clear();\n                                 ^\n2 errors\n```\n"}, {"labels": ["type:bug"], "url": "https://github.com/antlr/antlr4/issues/111", "title": "'\\u000D' in ANTLR resulting \"'\\u000D'\" in generated code, leading to compilation error.", "closed": "2012-12-31 23:02:24", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2012-12-31 22:46:47", "user": "parrt", "body": "Java converts all Unicode escapes to characters before lexing begins.\n"}, {"labels": ["comp:runtime", "error-handling", "status:invalid", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/105", "title": "Still seeing errors in STDErr after removing ErrorListeners", "closed": "2012-12-18 14:06:14", "commitsDetails": [], "commits": {}, "ttf": 0.0002777777777777778, "created": "2012-12-18 12:46:59", "user": "syepes", "body": "Hello,\n\nI am building a configuration file parser and I need to remove all the error output messages, so I have tried removing the error listeners:\n\n```\nparser.setErrorHandler(new BailErrorStrategy())\nparser.removeErrorListeners()\n```\n\nBut when I run the parser I am still getting errors in the standard error output:\n\n```\nline 1:0 token recognition error at: '\u00a0'\nline 1:1 token recognition error at: '\u25a0'\nline 1:0 token recognition error at: '\u00a0'\nline 1:1 token recognition error at: '\u25a0'\nline 1:0 token recognition error at: ';'\nline 1:0 token recognition error at: ';'\nline 1:0 token recognition error at: '\u00a0'\nline 1:1 token recognition error at: '\u25a0'\nline 1:0 token recognition error at: '\u00a0'\nline 1:1 token recognition error at: '\u25a0'\n```\n\nIs this normal?\nwhats the best method for removing these errors? \n\nBest regards,\nSebastian\n"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "filteredCommits": ["38739cec5e18a3f9cab9a408b3d9f8fa8c01029e"], "url": "https://github.com/antlr/antlr4/issues/94", "gitStatsSummary": {"insertions": 4, "gitFilesChange": 1, "lines": 5, "deletions": 1}, "numCommits": 1, "commits": {"38739cec5e18a3f9cab9a408b3d9f8fa8c01029e": {"commitUser": "sharwell", "commitGHEventType": "referenced"}}, "ttf": 0.0002777777777777778, "user": "sharwell", "changesInPackagesSPOON": ["org.antlr.mojo.antlr4.Antlr4Mojo.processGrammarFiles(java.util.List,java.io.File)", "org.antlr.mojo.antlr4.Antlr4Mojo.findSourceSubdir(java.io.File,java.lang.String)"], "changesInPackagesGIT": ["antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4"], "body": "When a grammar file is located in the default package, the Maven plugin produces an error like the following:\n\n```\nMessage{errorType=org.antlr.v4.tool.ErrorType@be60d4b, args=[null\\test.g4], e=java.io.FileNotFoundException: C:\\maventest\\src\\main\\java\\null\\test.g4 (The system cannot find the path specified), fileName='null', line=-1, charPosition=-1}\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 0, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 2, "UPD": 0, "TOT": 3, "DEL": 0, "INS": 2, "spoonFilesChanged": 1, "MOV": 1}, "title": "Maven plugin breaks for grammars located in the default package", "statsSkippedReason": "", "closed": "2012-12-02 22:58:39", "commitsDetails": [{"commitUser": "sharwell", "commitDateTime": "2012-12-02 16:57:42", "commitHash": "38739cec5e18a3f9cab9a408b3d9f8fa8c01029e", "commitParents": ["f14cce653904adad2e3e551b17eafc1830418370"], "commitGHEventType": "referenced", "nameRev": "38739cec5e18a3f9cab9a408b3d9f8fa8c01029e tags/4.4~464", "commitGitStats": [{"insertions": 4, "lines": 5, "filePath": "antlr4-maven-plugin/src/main/java/org/antlr/mojo/antlr4/Antlr4Mojo.java", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 2, "DEL": 0, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.mojo.antlr4.Antlr4Mojo.processGrammarFiles(java.util.List,java.io.File)"}, {"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.mojo.antlr4.Antlr4Mojo.findSourceSubdir(java.io.File,java.lang.String)"}], "spoonFilePath": "Antlr4Mojo.java"}], "commitMessage": "Fix handling of grammars in the default package (resolves antlr/antlr4#94)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2012-12-02 16:57:42"}], "created": "2012-12-02 22:52:59"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/82", "title": "-Xsave-lexer Doesn't work", "closed": "2012-12-02 01:30:30", "commitsDetails": [], "commits": {}, "ttf": 21.00027777777778, "created": "2012-11-10 20:48:02", "user": "parrt", "body": ""}, {"labels": ["code-gen", "parsers", "status:fixed", "type:bug"], "filteredCommits": [], "url": "https://github.com/antlr/antlr4/issues/81", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"b15c37fd022e69d10c189c6e26e87b78aa2f47b4": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 2.000277777777778, "user": "parrt", "changesInPackagesGIT": [], "body": "``` antlr\nexpr:   ID\n    |   INT\n    ;\n```\n\nGenerates:\n\n``` java\n            setState(20);\n   ---->>>>>>       _input.LT(1);\n            _la = _input.LA(1);\n            if ( !(_la==ID || _la==INT) ) {\n            _errHandler.recoverInline(this);\n            }\n            consume();\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 1, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Extra LT() call in generated code for token set match", "statsSkippedReason": "", "closed": "2012-11-12 19:49:06", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-11-05 12:49:16", "commitHash": "b15c37fd022e69d10c189c6e26e87b78aa2f47b4", "commitParents": ["646b35284eafe44479e76fd4ffa797325f80e8a5", "7eb6aec61205a15413b0a0f8853c72a63949bf7c"], "commitGHEventType": "referenced", "nameRev": "b15c37fd022e69d10c189c6e26e87b78aa2f47b4 tags/4.6-rc1~169^2~3", "commitGitStats": [{"insertions": 0, "lines": 25, "filePath": "README.md", "deletions": 25}, {"insertions": 14, "lines": 14, "filePath": "doc/go-target.md", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #81 from pboyer/movedocs\n\nMove go target docs", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-05 12:49:16"}], "created": "2012-11-10 17:58:42"}, {"labels": ["comp:tool", "status:fixed", "type:bug"], "filteredCommits": [], "url": "https://github.com/antlr/antlr4/issues/80", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"6472f30d2f5f7f6b08cdae34e453f24f8424c491": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 21.00027777777778, "user": "parrt", "changesInPackagesGIT": [], "body": "", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 1, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "lexer grammar Foo doesn't check the grammar file name", "statsSkippedReason": "", "closed": "2012-11-25 22:18:49", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-11-05 13:08:07", "commitHash": "6472f30d2f5f7f6b08cdae34e453f24f8424c491", "commitParents": ["b15c37fd022e69d10c189c6e26e87b78aa2f47b4", "f553056a2b23c894541d379a6cd2d67a0730bb2e"], "commitGHEventType": "referenced", "nameRev": "6472f30d2f5f7f6b08cdae34e453f24f8424c491 tags/4.6-rc1~169^2~2", "commitGitStats": [{"insertions": 0, "lines": 18, "filePath": "runtime/Go/antlr/lexer_action_executor.go", "deletions": 18}, {"insertions": 0, "lines": 64, "filePath": "runtime/Go/antlr/lexer_atn_simulator.go", "deletions": 64}, {"insertions": 0, "lines": 5, "filePath": "runtime/Go/antlr/input_stream.go", "deletions": 5}, {"insertions": 0, "lines": 12, "filePath": "runtime/Go/antlr/error_listener.go", "deletions": 12}, {"insertions": 0, "lines": 81, "filePath": "runtime/Go/antlr/parser_atn_simulator.go", "deletions": 81}, {"insertions": 0, "lines": 22, "filePath": "runtime/Go/antlr/common_token_stream.go", "deletions": 22}, {"insertions": 0, "lines": 22, "filePath": "runtime/Go/antlr/error_strategy.go", "deletions": 22}, {"insertions": 0, "lines": 10, "filePath": "runtime/Go/antlr/interval_set.go", "deletions": 10}, {"insertions": 0, "lines": 11, "filePath": "runtime/Go/antlr/common_token_factory.go", "deletions": 11}, {"insertions": 0, "lines": 4, "filePath": "runtime/Go/antlr/file_stream.go", "deletions": 4}, {"insertions": 0, "lines": 14, "filePath": "runtime/Go/antlr/atn.go", "deletions": 14}, {"insertions": 0, "lines": 17, "filePath": "runtime/Go/antlr/parser.go", "deletions": 17}, {"insertions": 0, "lines": 36, "filePath": "runtime/Go/antlr/lexer.go", "deletions": 36}, {"insertions": 0, "lines": 51, "filePath": "runtime/Go/antlr/ll1_analyzer.go", "deletions": 51}, {"insertions": 0, "lines": 4, "filePath": "runtime/Go/antlr/recognizer.go", "deletions": 4}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #80 from pboyer/removePortDebug\n\nRemove PortDebug field", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-11-05 13:08:07"}], "created": "2012-11-04 02:33:06"}, {"labels": ["grammars", "status:fixed", "type:bug"], "url": "https://github.com/antlr/antlr4/issues/78", "title": "Sets with alt labels should not become sets", "closed": "2012-11-25 22:20:34", "commitsDetails": [], "commits": {}, "ttf": 29.00027777777778, "created": "2012-10-27 01:43:09", "user": "parrt", "body": "```\ngrammar T;\n\ns : A # Z\n  | B # Y\n  | C # D\n  ;\n```\n\ndoes not generate the expected `ZContext`, `YContext`, and `DContext` classes.\n"}, {"labels": ["code-gen", "comp:tool", "status:fixed", "type:bug"], "filteredCommits": ["c592e416379b33355d1daf7da82f22c5ea53b1d5"], "url": "https://github.com/antlr/antlr4/issues/76", "gitStatsSummary": {"insertions": 61, "gitFilesChange": 6, "lines": 63, "deletions": 2}, "numCommits": 1, "commits": {"29c2712ae1eee9575324db48c2f72c7cb0d28308": {"commitUser": "parrt", "commitGHEventType": "closed"}, "c592e416379b33355d1daf7da82f22c5ea53b1d5": {"commitUser": "sharwell", "commitGHEventType": "closed"}}, "ttf": 751.0002777777778, "user": "sharwell", "changesInPackagesSPOON": ["org.antlr.v4.codegen.Target.getSerializedATNSegmentLimit()", "org.antlr.v4.codegen.model.SerializedATN.getSegments()", "org.antlr.v4.codegen.JavaTarget.getSerializedATNSegmentLimit()", "org.antlr.v4.automata.ATNSerializer.serialize()", "org.antlr.v4.runtime.misc.Utils.join(java.lang.Object[],java.lang.String)"], "changesInPackagesGIT": ["runtime/Java/src/org/antlr/v4/runtime/misc", "tool/src/org/antlr/v4/codegen", "tool/src/org/antlr/v4/codegen/model", "tool/resources/org/antlr/v4/tool/templates/codegen/Java/Java.stg", "tool/src/org/antlr/v4/automata"], "body": "The `_serializedATN` string should be automatically split to ensure that string literals are never longer than the class file format limitation of 2<sup>16</sup> UTF-8 bytes.\n\nThe [`DataOutput.writeUTF`](http://docs.oracle.com/javase/6/docs/api/java/io/DataOutput.html#writeUTF(java.lang.String\\)) method could be used to determine the length of a string literal as it would appear in the class file, though there may be other way to approach this problem.\n\nThe following grammar reproduces this problem in ANTLR 4 beta 2.\n[example.g4](https://gist.github.com/3955844)\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 1, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {"spoonMethodsChanged": 5, "UPD": 4.0, "TOT": 11.0, "DEL": 1.0, "INS": 5.0, "spoonFilesChanged": 5, "MOV": 1.0}, "title": "Serialized ATN strings should be split when longer than 2^16 bytes (class file limitation)", "statsSkippedReason": "", "closed": "2014-11-16 02:15:26", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2014-11-15 18:13:22", "commitHash": "29c2712ae1eee9575324db48c2f72c7cb0d28308", "commitParents": ["36d259db12dd63c19e674d53a7c7f37f247126eb", "5847fd6995fc5ea6c6736a6615316eb0802344c4"], "commitGHEventType": "closed", "nameRev": "29c2712ae1eee9575324db48c2f72c7cb0d28308 tags/4.5-rc-1~14^2", "commitGitStats": [{"insertions": 0, "lines": 213, "filePath": "tool/test/org/antlr/v4/test/TestLexerErrors.java", "deletions": 213}, {"insertions": 13, "lines": 13, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParseTrees/RuleRef.st", "deletions": 0}, {"insertions": 9, "lines": 9, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/AorB.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestATNParserPrediction.java", "deletions": 1}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/MultiTokenDeletionDuringLoop2.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestATNInterpreter.java", "deletions": 1}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/AStar.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/ImportLexerWithOnlyFragmentRules_S.st", "deletions": 0}, {"insertions": 163, "lines": 163, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestParseTrees.java", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/ActionsHidePredsInGlobalFOLLOW.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/EOFInClosure.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestTokenPositionOptions.java", "deletions": 1}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/EOFByItself.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/ConjuringUpTokenFromSet.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/KeywordID.st", "deletions": 0}, {"insertions": 1, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestScopeParsing.java", "deletions": 2}, {"insertions": 4002, "lines": 4002, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/LargeLexer.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/RecursiveLexerRuleRefWithWildcardPlus.st", "deletions": 0}, {"insertions": 36, "lines": 36, "filePath": "tool/test/org/antlr/v4/test/rt/gen/CompositeParserTestMethod.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestSymbolIssues.java", "deletions": 1}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeLexers/LexerDelegatorRuleOverridesDelegate.st", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/PredicateDependentOnArg.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorInvokesDelegateRule_S.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSetWithReversedRange.st", "deletions": 0}, {"insertions": 12, "lines": 12, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/UnpredicatedPathsInAlt.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSetInSet.st", "deletions": 0}, {"insertions": 12, "lines": 12, "filePath": "tool/test/org/antlr/v4/test/rt/gen/AbstractParserTestMethod.java", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/CombinedImportsCombined.st", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/IndependentPredNotPassedOuterCtxToAvoidCastException.st", "deletions": 0}, {"insertions": 227, "lines": 227, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestSets.java", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/IfIfElseGreedyBinding1.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerErrors/StringsEmbeddedInActions.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/PlusLexerSingleElement.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorAccessesDelegateMembers_S.st", "deletions": 0}, {"insertions": 11, "lines": 11, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/ReturnValueAndActions.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/NonGreedyTermination2.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/AtomWithClosureInTranslatedLRRule.st", "deletions": 0}, {"insertions": 11, "lines": 11, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParseTrees/2Alts.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalLexer/EnumNotID.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorAccessesDelegateMembers.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/MultiTokenDeletionBeforeLoop.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorRuleOverridesDelegates_S.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorInvokesFirstVersionOfDelegateRule.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/AorAStar.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/SimpleValidate.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/IfIfElseNonGreedyBinding2.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/RefToRuleDoesNotSetTokenNorEmitAnother.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/OptionalLexerSingleElement.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/Optional.st", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/ListLabelsOnSet.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/NotChar.st", "deletions": 0}, {"insertions": 9, "lines": 9, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/FullContextParsing/CtxSensitiveDFATwoDiffInput.st", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/ContextListGetters.st", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/PredsInGlobalFOLLOW.st", "deletions": 0}, {"insertions": 9, "lines": 9, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/MultipleActionsPredicatesOptions.st", "deletions": 0}, {"insertions": 56, "lines": 56, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/JavaExpressions.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/IfIfElseGreedyBinding2.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestATNSerialization.java", "deletions": 1}, {"insertions": 23, "lines": 23, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Listeners/Basic.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/RuleAsSet.st", "deletions": 0}, {"insertions": 9, "lines": 9, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/FullContextParsing/CtxSensitiveDFA.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/SingleTokenDeletion.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/NonGreedyClosure.st", "deletions": 0}, {"insertions": 0, "lines": 283, "filePath": "tool/test/org/antlr/v4/test/TestSets.java", "deletions": 283}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestLexerActions.java", "deletions": 1}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/FullContextParsing/AmbigYieldsCtxSensitiveDFA.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/Slashes.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/CombinedImportsCombined_S.st", "deletions": 0}, {"insertions": 0, "lines": 0, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/Java.g4", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/NoViableAltAvoidance.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/InvalidEmptyInput.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestTokenTypeAssignment.java", "deletions": 1}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorInvokesFirstVersionOfDelegateRule_T.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerErrors/DFAToATNThatMatchesThenFailsInATN.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestXPath.java", "deletions": 1}, {"insertions": 342, "lines": 342, "filePath": "tool/test/org/antlr/v4/test/rt/java/Java.test.stg", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorRuleOverridesDelegates_T.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestAttributeChecks.java", "deletions": 1}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerErrors/InvalidCharAtStart.st", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/ToLeftWithVaryingPredicate.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestATNLexerInterpreter.java", "deletions": 1}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSetWithQuote2.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/SingleTokenDeletionExpectingSet.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestParseTreeMatcher.java", "deletions": 1}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSetWithMissingEscapeChar.st", "deletions": 0}, {"insertions": 1419, "lines": 1419, "filePath": "tool/test/org/antlr/v4/test/rt/gen/Generator.java", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/OptionalSingleElement.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorInvokesDelegateRuleWithArgs.st", "deletions": 0}, {"insertions": 0, "lines": 0, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/PositionAdjustingLexer.g4", "deletions": 0}, {"insertions": 24, "lines": 24, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Listeners/LRWithLabels.st", "deletions": 0}, {"insertions": 147, "lines": 147, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestSemPredEvalLexer.java", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/LexerOptionalSet.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/BringInLiteralsFromDelegate_S.st", "deletions": 0}, {"insertions": 0, "lines": 0, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/Psl.g4", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/AorBStar.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/StarLexerSingleElement.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/ToLeft.st", "deletions": 0}, {"insertions": 9, "lines": 9, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/PredFromAltTestedInLoopBack.st", "deletions": 0}, {"insertions": 67, "lines": 67, "filePath": "tool/test/org/antlr/v4/test/tool/TestLeftRecursion.java", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSetWithMissingEndRange.st", "deletions": 0}, {"insertions": 16, "lines": 16, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/MultipleAlternativesWithCommonLabel.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerErrors/DFAToATNThatFailsBackToDFA.st", "deletions": 0}, {"insertions": 12, "lines": 12, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParseTrees/TokenAndRuleContextString.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestTokenStreamRewriter.java", "deletions": 1}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalLexer/IDvsEnum.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/SimpleValidate2.st", "deletions": 0}, {"insertions": 13, "lines": 13, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParseTrees/Sync.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorInvokesFirstVersionOfDelegateRule_S.st", "deletions": 0}, {"insertions": 9, "lines": 9, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/2UnpredicatedAlts.st", "deletions": 0}, {"insertions": 0, "lines": 383, "filePath": "tool/test/org/antlr/v4/test/TestParseErrors.java", "deletions": 383}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/StartRuleWithoutEOF.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestParserInterpreter.java", "deletions": 1}, {"insertions": 9, "lines": 9, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/Simple.st", "deletions": 0}, {"insertions": 13, "lines": 13, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/FullContextParsing/ExprAmbiguity.st", "deletions": 0}, {"insertions": 21, "lines": 21, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/AmbigLR.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/ImportedRuleWithAction.st", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/Order.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/InvalidATNStateRemoval.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestActionSplitter.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "tool/pom.xml", "deletions": 1}, {"insertions": 0, "lines": 732, "filePath": "tool/test/org/antlr/v4/test/TestLeftRecursion.java", "deletions": 732}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/ErrorQueue.java", "deletions": 1}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/NoTruePredsThrowsNoViableAlt.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestIntervalSet.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestToolSyntaxErrors.java", "deletions": 1}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeLexers/LexerDelegatorRuleOverridesDelegate_S.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorInvokesDelegateRuleWithReturnStruct_S.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/KeywordVSIDOrder_S.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/ParserNotToken.st", "deletions": 0}, {"insertions": 2, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestCodeGeneration.java", "deletions": 2}, {"insertions": 2, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/BaseTest.java", "deletions": 2}, {"insertions": 138, "lines": 138, "filePath": "tool/test/org/antlr/v4/test/tool/TestParserExec.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestASTStructure.java", "deletions": 1}, {"insertions": 4647, "lines": 4647, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestLexerExec.java", "deletions": 0}, {"insertions": 20, "lines": 20, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/ListLabelForClosureContext.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/MultipleActions.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/SingleTokenDeletionBeforeLoop.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalLexer/IDnotEnum.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/ImportedGrammarWithEmptyOptions.st", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/2UnpredicatedAltsAndOneOrthogonalAlt.st", "deletions": 0}, {"insertions": 9, "lines": 9, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/ZeroLengthToken.st", "deletions": 0}, {"insertions": 13, "lines": 13, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/ReturnValueAndActionsList1.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/BringInLiteralsFromDelegate.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorInvokesDelegateRule.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/TokenMismatch.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeLexers/LexerDelegatorInvokesDelegateRule.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/HexVsID.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/LexerPlusSet.st", "deletions": 0}, {"insertions": 426, "lines": 426, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestSemPredEvalParser.java", "deletions": 0}, {"insertions": 24, "lines": 24, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Listeners/RuleGetters.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/StarSet.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestATNDeserialization.java", "deletions": 1}, {"insertions": 12, "lines": 12, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/FullContextParsing/AmbiguityNoLoop.st", "deletions": 0}, {"insertions": 0, "lines": 597, "filePath": "tool/test/org/antlr/v4/test/TestParserExec.java", "deletions": 597}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/ImportLexerWithOnlyFragmentRules.st", "deletions": 0}, {"insertions": 11, "lines": 11, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/DepedentPredsInGlobalFOLLOW.st", "deletions": 0}, {"insertions": 0, "lines": 0, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/Java-LR.g4", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/SemPredFailOption.st", "deletions": 0}, {"insertions": 1416, "lines": 1416, "filePath": "tool/test/org/antlr/v4/test/rt/java/BaseTest.java", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSetRange.st", "deletions": 0}, {"insertions": 1052, "lines": 1052, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestLeftRecursion.java", "deletions": 0}, {"insertions": 13, "lines": 13, "filePath": "tool/test/org/antlr/v4/test/rt/gen/ParserTestMethod.java", "deletions": 0}, {"insertions": 25, "lines": 25, "filePath": "tool/test/org/antlr/v4/test/rt/gen/ConcreteParserTestMethod.java", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/Basic.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/SingleTokenDeletionBeforeLoop2.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/SingleTokenDeletionDuringLoop2.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSet.st", "deletions": 0}, {"insertions": 4, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestCommonTokenStream.java", "deletions": 2}, {"insertions": 34, "lines": 34, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/PositionAdjustingLexer.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/ParserNotTokenWithLabel.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatesSeeSameTokenType_T.st", "deletions": 0}, {"insertions": 17, "lines": 17, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatesSeeSameTokenType.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/CharSetLiteral.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/QuoteTranslation.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSetNot.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/ImportedRuleWithAction_S.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatesSeeSameTokenType_S.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/Labels.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorRuleOverridesLookaheadInDelegate_S.st", "deletions": 0}, {"insertions": 219, "lines": 219, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestListeners.java", "deletions": 0}, {"insertions": 11, "lines": 11, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/ValidateInDFA.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSetPlus.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/JavaUnicodeInputStream.java", "deletions": 1}, {"insertions": 9, "lines": 20, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestATNConstruction.java", "deletions": 11}, {"insertions": 69, "lines": 69, "filePath": "tool/test/org/antlr/v4/test/tool/TestErrorSets.java", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/SingleSetInsertion.st", "deletions": 0}, {"insertions": 12, "lines": 12, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/ReturnValueAndActionsList2.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/NonGreedyTermination1.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestGraphNodes.java", "deletions": 1}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerErrors/EnforcedGreedyNestedBrances.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/AorAPlus.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/ParserSet.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestVocabulary.java", "deletions": 1}, {"insertions": 0, "lines": 690, "filePath": "tool/test/org/antlr/v4/test/TestLexerExec.java", "deletions": 690}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSetWithEscapedChar.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/AorBPlus.st", "deletions": 0}, {"insertions": 14, "lines": 14, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/PredictionIssue334.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/AlternateQuotes.st", "deletions": 0}, {"insertions": 0, "lines": 820, "filePath": "tool/test/org/antlr/v4/test/TestCompositeGrammars.java", "deletions": 820}, {"insertions": 14, "lines": 14, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParseTrees/ExtraToken.st", "deletions": 0}, {"insertions": 51, "lines": 51, "filePath": "tool/test/org/antlr/v4/test/rt/gen/Grammar.java", "deletions": 0}, {"insertions": 49, "lines": 49, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/WhitespaceInfluence.st", "deletions": 0}, {"insertions": 14, "lines": 14, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/LL1ErrorInfo.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalLexer/DisableRule.st", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/FullContextParsing/FullContextIF_THEN_ELSEParse.st", "deletions": 0}, {"insertions": 11, "lines": 11, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParseTrees/2AltLoop.st", "deletions": 0}, {"insertions": 0, "lines": 0, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestASTStructure.gunit", "deletions": 0}, {"insertions": 0, "lines": 154, "filePath": "tool/test/org/antlr/v4/test/TestParseTrees.java", "deletions": 154}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeLexers/LexerDelegatorInvokesDelegateRule_S.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/PredTestedEvenWhenUnAmbig.st", "deletions": 0}, {"insertions": 208, "lines": 208, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestFullContextParsing.java", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/CharSetWithQuote1.st", "deletions": 0}, {"insertions": 3, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestPerformance.java", "deletions": 2}, {"insertions": 14, "lines": 14, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/ReturnValueAndActionsAndLabels.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerErrors/ErrorInMiddle.st", "deletions": 0}, {"insertions": 2, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestActionTranslation.java", "deletions": 1}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/NotCharSetWithLabel.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/APlus.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorRuleOverridesDelegates.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/KeywordVSIDOrder.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/DuplicatedLeftRecursiveCall.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/NonGreedyConfigs.st", "deletions": 0}, {"insertions": 2, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestUnbufferedTokenStream.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestBufferedTokenStream.java", "deletions": 1}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/TernaryExpr.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/PlusSet.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/ConjuringUpToken.st", "deletions": 0}, {"insertions": 11, "lines": 11, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/DependentPredNotInOuterCtxShouldBeIgnored.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/DirectCallToLeftRecursiveRule.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerErrors/InvalidCharAtStartAfterDFACache.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestTopologicalSort.java", "deletions": 1}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/TernaryExprExplicitAssociativity.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/ParserInterpreterForTesting.java", "deletions": 1}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/ActionPlacement.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/GreedyConfigs.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/ReferenceToATN.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalLexer/Indent.st", "deletions": 0}, {"insertions": 0, "lines": 183, "filePath": "tool/test/org/antlr/v4/test/TestSemPredEvalLexer.java", "deletions": 183}, {"insertions": 17, "lines": 17, "filePath": "tool/test/org/antlr/v4/test/rt/gen/LexerTestMethod.java", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalLexer/PredicatedKeywords.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/GreedyClosure.st", "deletions": 0}, {"insertions": 13, "lines": 13, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/Expressions.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/NonGreedyPositiveClosure.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/NotCharSetWithRuleRef3.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/RewindBeforePredEval.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/PrecedenceFilterConsidersContext.st", "deletions": 0}, {"insertions": 34, "lines": 34, "filePath": "tool/test/org/antlr/v4/test/rt/gen/TestMethod.java", "deletions": 0}, {"insertions": 10, "lines": 10, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/PredicateDependentOnArg2.st", "deletions": 0}, {"insertions": 15, "lines": 15, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/FullContextParsing/LoopsSimulateTailRecursion.st", "deletions": 0}, {"insertions": 11, "lines": 11, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/PrefixOpWithActionAndLabel.st", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/SemPred.st", "deletions": 0}, {"insertions": 11, "lines": 11, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParseTrees/Token2.st", "deletions": 0}, {"insertions": 443, "lines": 443, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestParserExec.java", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/LexerStarSet.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/EOFSuffixInFirstRule.st", "deletions": 0}, {"insertions": 0, "lines": 356, "filePath": "tool/test/org/antlr/v4/test/TestFullContextParsing.java", "deletions": 356}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/NonGreedyOptional.st", "deletions": 0}, {"insertions": 2, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestParserProfiler.java", "deletions": 1}, {"insertions": 0, "lines": 226, "filePath": "tool/test/org/antlr/v4/test/TestListeners.java", "deletions": 226}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerErrors/InvalidCharInToken.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/MultipleEOFHandling.st", "deletions": 0}, {"insertions": 6, "lines": 6, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalLexer/LexerInputPositionSensitivePredicates.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/LL2.st", "deletions": 0}, {"insertions": 9, "lines": 9, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/ActionHidesPreds.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerErrors/LexerExecDFA.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/GreedyOptional.st", "deletions": 0}, {"insertions": 2, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestUnbufferedCharStream.java", "deletions": 1}, {"insertions": 23, "lines": 23, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Listeners/TokenGetters.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/GreedyPositiveClosure.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/LabelAliasingAcrossLabeledAlternatives.st", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/Simple.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/LLStar.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/MultiTokenDeletionDuringLoop.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/LabelsOnOpSubrule.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/NotCharSet.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/OptionalSet.st", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestFastQueue.java", "deletions": 1}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/LL3.st", "deletions": 0}, {"insertions": 4, "lines": 4, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorRuleOverridesDelegate.st", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/PredicatedIfIfElse.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/SingleTokenDeletionDuringLoop.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/ParserNotSet.st", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/LL1OptionalBlock.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/MultiTokenDeletionBeforeLoop2.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/ImportedGrammarWithEmptyOptions_S.st", "deletions": 0}, {"insertions": 285, "lines": 285, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestParserErrors.java", "deletions": 0}, {"insertions": 49, "lines": 49, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestCompositeLexers.java", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/SemPredEvalParser/DisabledAlternative.st", "deletions": 0}, {"insertions": 24, "lines": 24, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Listeners/LR.st", "deletions": 0}, {"insertions": 406, "lines": 406, "filePath": "tool/test/org/antlr/v4/test/tool/TestCompositeGrammars.java", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/Sets/SeqDoesNotBecomeSet.st", "deletions": 0}, {"insertions": 5, "lines": 5, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorInvokesDelegateRuleWithReturnStruct.st", "deletions": 0}, {"insertions": 0, "lines": 626, "filePath": "tool/test/org/antlr/v4/test/TestSemPredEvalParser.java", "deletions": 626}, {"insertions": 140, "lines": 140, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestLexerErrors.java", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorInvokesDelegateRuleWithArgs_S.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerErrors/InvalidCharInTokenAfterDFACache.st", "deletions": 0}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorRuleOverridesDelegate_S.st", "deletions": 0}, {"insertions": 14, "lines": 14, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LeftRecursion/Declarations.st", "deletions": 0}, {"insertions": 14, "lines": 14, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParseTrees/NoViableAlt.st", "deletions": 0}, {"insertions": 101, "lines": 101, "filePath": "tool/test/org/antlr/v4/test/rt/gen/TestFile.java", "deletions": 0}, {"insertions": 1, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/{ => tool}/TestBasicSemanticErrors.java", "deletions": 1}, {"insertions": 3, "lines": 3, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/RecursiveLexerRuleRefWithWildcardStar.st", "deletions": 0}, {"insertions": 326, "lines": 326, "filePath": "tool/test/org/antlr/v4/test/rt/java/TestCompositeParsers.java", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/CompositeParsers/DelegatorRuleOverridesLookaheadInDelegate.st", "deletions": 0}, {"insertions": 9, "lines": 9, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/FullContextParsing/SLLSeesEOFInLLGrammar.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/IfIfElseNonGreedyBinding1.st", "deletions": 0}, {"insertions": 2, "lines": 2, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserErrors/SingleTokenInsertion.st", "deletions": 0}, {"insertions": 35, "lines": 35, "filePath": "tool/test/org/antlr/v4/test/rt/gen/CompositeLexerTestMethod.java", "deletions": 0}, {"insertions": 7, "lines": 7, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/LexerExec/Parentheses.st", "deletions": 0}, {"insertions": 8, "lines": 8, "filePath": "tool/test/org/antlr/v4/test/rt/gen/grammars/ParserExec/AlternateQuotes_ModeTagsLexer.st", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "fetched runtime-tests-generator branch into master and did a manual merge. Fixes #76 as I was right there anyway.\n", "spoonStatsSkippedReason": "tooManyFiles", "authoredDateTime": "2014-11-15 18:13:22"}, {"commitUser": "sharwell", "commitDateTime": "2013-03-27 11:04:28", "commitHash": "c592e416379b33355d1daf7da82f22c5ea53b1d5", "commitParents": ["507f331bd08bc01c213822508d18bbc4ba769db4"], "commitGHEventType": "closed", "nameRev": "c592e416379b33355d1daf7da82f22c5ea53b1d5 tags/4.4~235^2", "commitGitStats": [{"insertions": 11, "lines": 11, "filePath": "tool/src/org/antlr/v4/codegen/model/SerializedATN.java", "deletions": 0}, {"insertions": 22, "lines": 22, "filePath": "tool/test/org/antlr/v4/test/TestLexerExec.java", "deletions": 0}, {"insertions": 12, "lines": 12, "filePath": "runtime/Java/src/org/antlr/v4/runtime/misc/Utils.java", "deletions": 0}, {"insertions": 14, "lines": 15, "filePath": "tool/resources/org/antlr/v4/tool/templates/codegen/Java/Java.stg", "deletions": 1}, {"insertions": 7, "lines": 7, "filePath": "tool/src/org/antlr/v4/codegen/JavaTarget.java", "deletions": 0}, {"insertions": 4, "lines": 5, "filePath": "tool/src/org/antlr/v4/automata/ATNSerializer.java", "deletions": 1}, {"insertions": 13, "lines": 13, "filePath": "tool/src/org/antlr/v4/codegen/Target.java", "deletions": 0}], "commitSpoonAstDiffStats": [{"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.codegen.JavaTarget.getSerializedATNSegmentLimit()"}], "spoonFilePath": "JavaTarget.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.codegen.Target.getSerializedATNSegmentLimit()"}], "spoonFilePath": "Target.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.runtime.misc.Utils.join(java.lang.Object[],java.lang.String)"}], "spoonFilePath": "Utils.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.TestLexerExec.testLargeLexer()"}], "spoonFilePath": "TestLexerExec.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.codegen.model.SerializedATN.getSegments()"}], "spoonFilePath": "SerializedATN.java"}, {"spoonMethods": [{"UPD": 4, "TOT": 7, "DEL": 1, "INS": 1, "MOV": 1, "spoonMethodName": "org.antlr.v4.automata.ATNSerializer.serialize()"}], "spoonFilePath": "ATNSerializer.java"}], "commitMessage": "Split serialized ATN in Java target to ensure string literals are under 65535 bytes limit (fixes #76)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2013-03-27 10:57:25"}], "created": "2012-10-25 22:19:56"}, {"labels": ["comp:tool", "lexers", "status:invalid", "type:bug"], "filteredCommits": [], "url": "https://github.com/antlr/antlr4/issues/61", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"30b8b1452ddc6435f6968d988a4e136465468a9a": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 179.00027777777777, "user": "parrt", "changesInPackagesGIT": [], "body": "Figure out if lexer rule attributes work.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 1, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Lexer rule attributes?", "statsSkippedReason": "", "closed": "2012-11-18 22:53:14", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2014-07-07 06:27:47", "commitHash": "30b8b1452ddc6435f6968d988a4e136465468a9a", "commitParents": ["580ef4f950af010a09505151b77ac1ffee0e1647", "75f10cbe4ebb501aee8c68ae1cd382619c9fd1e8"], "commitGHEventType": "referenced", "nameRev": "30b8b1452ddc6435f6968d988a4e136465468a9a tags/4.5.1-beta-1~3^2^2~73", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/CSharp/Antlr4BuildTasks/Antlr4.net35.targets", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "runtime/CSharp/Antlr4BuildTasks/Antlr4.net40.props", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "runtime/CSharp/Antlr4BuildTasks/Antlr4.net35.props", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "build/version.ps1", "deletions": 1}, {"insertions": 3, "lines": 6, "filePath": "runtime/CSharp/Antlr4.Runtime/Properties/AssemblyInfo.cs", "deletions": 3}, {"insertions": 1, "lines": 2, "filePath": "runtime/CSharp/Antlr4BuildTasks/Antlr4.net40.targets", "deletions": 1}, {"insertions": 3, "lines": 6, "filePath": "runtime/CSharp/Antlr4BuildTasks/Properties/AssemblyInfo.cs", "deletions": 3}, {"insertions": 1, "lines": 2, "filePath": "tool/pom.xml", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #61 from sharwell/release/4.3.0\n\nRelease/4.3.0", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-07-07 06:27:47"}], "created": "2012-05-22 23:46:35"}, {"labels": ["atn-analysis", "comp:runtime", "status:invalid", "type:bug"], "filteredCommits": ["0c0fc768467a8b5907c598e340b09bfe06c7886f"], "url": "https://github.com/antlr/antlr4/issues/32", "gitStatsSummary": {"insertions": 1, "gitFilesChange": 1, "lines": 2, "deletions": 1}, "numCommits": 1, "commits": {"50d1f2c6ccdae608d9836c235962ebe6537b8cc0": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "d63a9e31326c655c8852deb211806e68d56a7fa6": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "e3315015c5636506a8f6047e1d2f47e968f81b47": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "8ef638e2339f30522ba83c43910da9a5e3842d9b": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "0c0fc768467a8b5907c598e340b09bfe06c7886f": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 7.000277777777778, "user": "sharwell", "changesInPackagesSPOON": [], "changesInPackagesGIT": ["src/antlr4/PredictionContext.js"], "body": "Currently full-context parsing is prevented when one or more configs contain semantic predicates. However, full-context parsing may eliminate one or more configs before the predicate evaluation stage which could change the predicted alternative.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 3, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {"spoonMethodsChanged": 0, "UPD": 0.0, "TOT": 0.0, "DEL": 0.0, "INS": 0.0, "spoonFilesChanged": 0, "MOV": 0.0}, "title": "Semantic predicates prevent fallback to full-context parsing", "statsSkippedReason": "", "closed": "2012-03-08 20:05:12", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2014-11-24 18:53:38", "commitHash": "8ef638e2339f30522ba83c43910da9a5e3842d9b", "commitParents": ["80db2b3ff82b5b0e0f245d2b97bf9e9fdecab0ef", "0fbe7f077c06c1fa9f395b183b2127c9df7e783e"], "commitGHEventType": "referenced", "nameRev": "8ef638e2339f30522ba83c43910da9a5e3842d9b tags/4.5.1-beta-1~1^2~2^2~41", "commitGitStats": [{"insertions": 21, "lines": 21, "filePath": "tool/test/org/antlr/v4/test/rt/py2/TestUnicode.java", "deletions": 0}, {"insertions": 0, "lines": 1, "filePath": "tool/test/org/antlr/v4/test/rt/py2/TestLexerErrors.java", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "src/antlr4/Lexer.py", "deletions": 1}], "commitSpoonAstDiffStats": [{"spoonMethods": [], "spoonFilePath": "TestLexerErrors.java"}, {"spoonMethods": [{"UPD": 0, "TOT": 1, "DEL": 0, "INS": 1, "MOV": 0, "spoonMethodName": "org.antlr.v4.test.rt.py2.TestUnicode"}], "spoonFilePath": "TestUnicode.java"}], "commitMessage": "Merge pull request #32 from antlr/Lexer-unicode-issue\n\nFix unicode bug", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-24 18:53:38"}, {"commitUser": "parrt", "commitDateTime": "2016-08-02 16:05:34", "commitHash": "50d1f2c6ccdae608d9836c235962ebe6537b8cc0", "commitParents": ["183b7ce0a97556f2122074ca4c2ad591ca67dfcd", "db8339b4581996198cc381510822fc7a99b70b7f"], "commitGHEventType": "referenced", "nameRev": "50d1f2c6ccdae608d9836c235962ebe6537b8cc0 tags/4.6-rc1~160^2~57", "commitGitStats": [{"insertions": 7, "lines": 15, "filePath": "runtime/Cpp/runtime/src/support/CPPUtils.cpp", "deletions": 8}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #32 from nburles/fix-whitespace-escape\n\nLeave spaces alone unless escaped spaces requested", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-08-02 16:05:34"}, {"commitUser": "parrt", "commitDateTime": "2014-04-28 05:41:52", "commitHash": "d63a9e31326c655c8852deb211806e68d56a7fa6", "commitParents": ["2ace0f628a7a0da64c5a55b99046e9824b236415"], "commitGHEventType": "referenced", "nameRev": "d63a9e31326c655c8852deb211806e68d56a7fa6 tags/4.5.1-beta-1~3^2^2~89^2", "commitGitStats": [{"insertions": 1, "lines": 1, "filePath": "runtime/CSharp/Antlr4BuildTasks/Antlr4.v3.5.targets", "deletions": 0}, {"insertions": 1, "lines": 1, "filePath": "runtime/CSharp/Antlr4BuildTasks/Antlr4.v4.0.targets", "deletions": 0}, {"insertions": 16, "lines": 18, "filePath": "runtime/CSharp/Antlr4BuildTasks/Antlr4ClassGenerationTaskInternal.cs", "deletions": 2}, {"insertions": 7, "lines": 7, "filePath": "runtime/CSharp/Antlr4BuildTasks/Antlr4ClassGenerationTask.cs", "deletions": 0}], "commitSpoonAstDiffStats": [], "commitMessage": "Add the ability to explicitly specify the path to the Java executable (fixes #32, fixes #34)\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-04-27 22:12:59"}, {"commitUser": "parrt", "commitDateTime": "2015-05-28 00:50:24", "commitHash": "e3315015c5636506a8f6047e1d2f47e968f81b47", "commitParents": ["80bc8fbb62851c6dad1be0839d50d3714b453e92", "d3554cfd9e3018f424be99e3e8582fe178f613ee"], "commitGHEventType": "referenced", "nameRev": "e3315015c5636506a8f6047e1d2f47e968f81b47 tags/4.5.1-beta-1~1^2~1^2~37", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "src/antlr4/atn/LexerActionExecutor.py", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "src/antlr4/ParserInterpreter.py", "deletions": 1}, {"insertions": 3, "lines": 4, "filePath": "src/antlr4/tree/ParseTreePatternMatcher.py", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #32 from jcbrinfo/fix-python-3-2-import\n\nFix import statements under Python 3.2", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-05-28 00:50:24"}, {"commitUser": "parrt", "commitDateTime": "2015-06-02 21:17:30", "commitHash": "0c0fc768467a8b5907c598e340b09bfe06c7886f", "commitParents": ["b7b860fd2abdd88170598b28ff163b5c9686a64d"], "commitGHEventType": "referenced", "nameRev": "0c0fc768467a8b5907c598e340b09bfe06c7886f tags/4.5.1-beta-1~2^2^2~25", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "src/antlr4/PredictionContext.js", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Fix #32\n", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-06-02 21:17:30"}], "created": "2012-03-01 07:25:30"}, {"labels": ["comp:runtime", "error-handling", "status:fixed", "type:bug"], "filteredCommits": [], "url": "https://github.com/antlr/antlr4/issues/31", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"63b5e61c15ce1975002d7ca7f5ad1e2bbbc9216d": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "b8eb38edbab845233bae5f196875114620445cf4": {"commitUser": "parrt", "commitGHEventType": "referenced"}, "80db2b3ff82b5b0e0f245d2b97bf9e9fdecab0ef": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 24.00027777777778, "user": "sharwell", "changesInPackagesGIT": [], "body": "Currently, no call to `reportAmbiguity` occurs when one or more `ATNConfig` instances have a semantic context. This is particularly problematic in tracking down issues in LR rules due to the automatically inserted predicates. One way to resolve this is having `ParserATNSimulator.evalSemanticContext` return an `IntervalSet` of all passing alternatives (unpredicated or having a predicate returning true). If the set contains more than one alternative, `reportAmbiguity` can be called before resolving the set to a single chosen alternative.\n\nThis presents a potential problem due to the fact that resolution currently prefers the minimum passing predicated alternative as opposed to the standard minimum acceptable alternative. However, this resolution policy will have to be changed to minimum acceptable alternative to resolve antlr/antlr4#29.\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 2, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 1}, "spoonStatsSummary": {}, "title": "Predicated configs suppress reportAmbiguity", "statsSkippedReason": "", "closed": "2012-03-26 02:46:00", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-08-01 18:01:28", "commitHash": "63b5e61c15ce1975002d7ca7f5ad1e2bbbc9216d", "commitParents": ["8bbdbe0371cf61d39adf94f76a1f10bec442fe74", "64f1a654bd903ba8d0f2de50b1b3e125c56fe2f1"], "commitGHEventType": "referenced", "nameRev": "63b5e61c15ce1975002d7ca7f5ad1e2bbbc9216d tags/4.6-rc1~160^2~59", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/Cpp/runtime/src/atn/LexerIndexedCustomAction.cpp", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "runtime/Cpp/runtime/src/atn/LexerATNConfig.cpp", "deletions": 1}, {"insertions": 1, "lines": 2, "filePath": "runtime/Cpp/runtime/src/atn/LexerActionExecutor.cpp", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #31 from nburles/simpler-hash-calls\n\nThere is no need to call ->hashCode() explicitly", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-08-01 18:01:28"}, {"commitUser": "parrt", "commitDateTime": "2015-05-27 22:47:01", "commitHash": "b8eb38edbab845233bae5f196875114620445cf4", "commitParents": ["91abacbeca6f47c27eb645b8d15931bd4b4e660b", "89af462710fc284308bb3ca3b46c438c77ab8f82"], "commitGHEventType": "referenced", "nameRev": "b8eb38edbab845233bae5f196875114620445cf4 tags/4.5.1-beta-1~1^2~1^2~39", "commitGitStats": [{"insertions": 4, "lines": 8, "filePath": "src/antlr4/atn/ATNConfigSet.py", "deletions": 4}, {"insertions": 10, "lines": 20, "filePath": "src/antlr4/Token.py", "deletions": 10}, {"insertions": 3, "lines": 6, "filePath": "src/antlr4/IntervalSet.py", "deletions": 3}, {"insertions": 4, "lines": 8, "filePath": "src/antlr4/tree/ParseTreeMatch.py", "deletions": 4}, {"insertions": 2, "lines": 4, "filePath": "src/antlr4/dfa/DFASerializer.py", "deletions": 2}, {"insertions": 5, "lines": 10, "filePath": "src/antlr4/PredictionContext.py", "deletions": 5}, {"insertions": 3, "lines": 6, "filePath": "src/antlr4/Utils.py", "deletions": 3}, {"insertions": 3, "lines": 6, "filePath": "src/antlr4/RuleContext.py", "deletions": 3}, {"insertions": 2, "lines": 4, "filePath": "src/antlr4/dfa/DFAState.py", "deletions": 2}, {"insertions": 4, "lines": 8, "filePath": "src/antlr4/atn/SemanticContext.py", "deletions": 4}, {"insertions": 10, "lines": 20, "filePath": "src/antlr4/error/DiagnosticErrorListener.py", "deletions": 10}, {"insertions": 5, "lines": 10, "filePath": "src/antlr4/atn/ATNConfig.py", "deletions": 5}, {"insertions": 1, "lines": 2, "filePath": "src/antlr4/ParserRuleContext.py", "deletions": 1}, {"insertions": 2, "lines": 4, "filePath": "src/antlr4/tree/Trees.py", "deletions": 2}, {"insertions": 3, "lines": 6, "filePath": "src/antlr4/xpath/XPath.py", "deletions": 3}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #31 from jcbrinfo/fix-python-3-2-syntax\n\nFix syntax errors under Python 3.2", "spoonStatsSkippedReason": "", "authoredDateTime": "2015-05-27 22:47:01"}, {"commitUser": "parrt", "commitDateTime": "2014-11-24 17:31:21", "commitHash": "80db2b3ff82b5b0e0f245d2b97bf9e9fdecab0ef", "commitParents": ["4be10f7e5a61c26d5fec18625d32873decf740b1", "27cdc663067629efd9d55b7e02174ce6292ca458"], "commitGHEventType": "referenced", "nameRev": "80db2b3ff82b5b0e0f245d2b97bf9e9fdecab0ef tags/4.5.1-beta-1~1^2~2^2~42", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "src/antlr4/Lexer.py", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #31 from antlr/Fix-Unicode-error-in-Lexer.py-#25\n\nEnsure self.getErrorDisplayForChar always returns str", "spoonStatsSkippedReason": "", "authoredDateTime": "2014-11-24 17:31:21"}], "created": "2012-03-01 07:16:04"}, {"labels": ["code-gen", "status:fixed", "type:bug"], "filteredCommits": [], "url": "https://github.com/antlr/antlr4/issues/28", "gitStatsSummary": {"insertions": 0, "gitFilesChange": 0, "lines": 0, "deletions": 0}, "numCommits": 0, "commits": {"8bbdbe0371cf61d39adf94f76a1f10bec442fe74": {"commitUser": "parrt", "commitGHEventType": "referenced"}}, "ttf": 264.0002777777778, "user": "sharwell", "changesInPackagesGIT": [], "body": "In the code generated for the following rule, the `VarSpecContext.expressionList()` method returns a `List<TerminalNode<Token>>` when in reality the `expressionList` rule can be called at most 1 time.\n\n```\nvarSpec\n    :   identifierList\n        (   type ('=' expressionList)?\n        |   '=' expressionList\n        )\n    ;\n```\n", "filteredCommitsReason": {"duplicated": 0, "unavailable": 0, "moreThanOneParent": 1, "alsoFixesPhrase": 0, "mergeCommitUsed": 0, "multipleIssueFixes": 0}, "spoonStatsSummary": {}, "title": "Implicit label analysis only covers outer alts for list detection", "statsSkippedReason": "", "closed": "2012-11-18 22:52:32", "commitsDetails": [{"commitUser": "parrt", "commitDateTime": "2016-08-01 17:45:45", "commitHash": "8bbdbe0371cf61d39adf94f76a1f10bec442fe74", "commitParents": ["f3110fdd2212b92601f727c3316e047fedc0f934", "3ee53a79db7388dccaf75b6c2777cee46fab1612"], "commitGHEventType": "referenced", "nameRev": "8bbdbe0371cf61d39adf94f76a1f10bec442fe74 tags/4.6-rc1~160^2~60", "commitGitStats": [{"insertions": 1, "lines": 2, "filePath": "runtime/Cpp/runtime/src/misc/IntervalSet.cpp", "deletions": 1}], "commitSpoonAstDiffStats": [], "commitMessage": "Merge pull request #28 from nburles/fix-intervalset-comparisons\n\nFixes comparisons of IntervalSets", "spoonStatsSkippedReason": "", "authoredDateTime": "2016-08-01 17:45:45"}], "created": "2012-02-28 20:44:22"}], "captureTime": "Mon Jul  6 15:53:59 2020", "projectName": "antlr/antlr4"}