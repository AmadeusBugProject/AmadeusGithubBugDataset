{"projectName": "google/guice", "bugLabels": ["bug"], "captureTime": "Sat Jul  4 20:20:30 2020", "issues": [{"title": "Guice provides different instances of desired type.", "body": "_From [stepan.koltsov](https://code.google.com/u/113939464116033188989/) on March 11, 2012 11:18:55_\n\nCode:\n# \n\npublic static class A {\n&nbsp;&nbsp;&nbsp;&nbsp;B b;\n&nbsp;&nbsp;&nbsp;&nbsp;C c;\n\n&nbsp;&nbsp;&nbsp;&nbsp;public A() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"A\");\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject\n&nbsp;&nbsp;&nbsp;&nbsp;public void setB(B b) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.b = b;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject\n&nbsp;&nbsp;&nbsp;&nbsp;public void setC(C c) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.c = c;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\npublic static class B {\n&nbsp;&nbsp;&nbsp;&nbsp;A a;\n&nbsp;&nbsp;&nbsp;&nbsp;C c;\n\n&nbsp;&nbsp;&nbsp;&nbsp;public B() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"B\");\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject\n&nbsp;&nbsp;&nbsp;&nbsp;public void setA(A a) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.a = a;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject\n&nbsp;&nbsp;&nbsp;&nbsp;public void setC(C c) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.c = c;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;void foo() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(System.identityHashCode(this.c));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(System.identityHashCode(this.a.c));\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\npublic static class C {\n&nbsp;&nbsp;&nbsp;&nbsp;A a;\n&nbsp;&nbsp;&nbsp;&nbsp;B b;\n\n&nbsp;&nbsp;&nbsp;&nbsp;public C() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"C\");\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject\n&nbsp;&nbsp;&nbsp;&nbsp;public void setA(A a) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.a = a;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject\n&nbsp;&nbsp;&nbsp;&nbsp;public void setB(B b) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.b = b;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\npublic static void main(String[] args) {\n&nbsp;&nbsp;&nbsp;&nbsp;Guice.createInjector(new AbstractModule() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void configure() { }\n&nbsp;&nbsp;&nbsp;&nbsp;}).getInstance(B.class).foo();\n}\n# \n\nPrints:\n# \n\nB\nA\nC\nC\nA\nfalse\n1741825447\n#363211825\n\nIt means:\n* classes A and B were instantiated twice\n* B and A objects have different references to C\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=693_\n", "url": "https://github.com/google/guice/issues/693", "user": "gissuebot", "labels": ["bug", "imported"], "created": "2014-07-07 19:09:20", "closed": "2014-07-07 19:09:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Fix failing test: MultibinderTest.testSetAndMapValueConflict", "body": "_From [mcculls](https://code.google.com/u/108081409801028235828/) on November 28, 2011 14:22:14_\n\nSee http://groups.google.com/group/google-guice/browse_thread/thread/934e30b7ed0da98f/b90383ad4cd1228c\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=670_\n", "url": "https://github.com/google/guice/issues/670", "user": "gissuebot", "labels": ["bug", "imported"], "created": "2014-07-07 19:08:47", "closed": "2014-07-07 19:08:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ClassCastException: com.google.inject.internal.LinkedProviderBindingImpl cannot be cast to com.google.inject.spi.HasDependencies", "body": "_From [mcculls](https://code.google.com/u/108081409801028235828/) on June 29, 2010 12:59:43_\n\nThe code introduced in r1167 to clean up leftover bindings (Isssue 319) does not check the binding implements HasDependencies before casting it:\n\n&nbsp;&nbsp;private Set&lt;Dependency&lt;?&gt;&gt; getInternalDependencies(BindingImpl&lt;?&gt; binding) {\n&nbsp;&nbsp;&nbsp;&nbsp;if(binding instanceof ConstructorBindingImpl) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ((ConstructorBindingImpl)binding).getInternalDependencies();\n&nbsp;&nbsp;&nbsp;&nbsp;} else {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ((HasDependencies)binding).getDependencies(); // &lt;---!\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n\nTo reproduce the exception apply following patch, re-build, and re-test:\n\nIndex: test/com/google/inject/ImplicitBindingTest.java\n`===================================================================`\n--- test/com/google/inject/ImplicitBindingTest.java&nbsp;&nbsp;&nbsp;&nbsp; ( revision 1178 )\n+++ test/com/google/inject/ImplicitBindingTest.java&nbsp;&nbsp;&nbsp;&nbsp; (working copy)\n`@``@` -166,6 +166,7 `@``@`\n&nbsp;&nbsp;&nbsp;static class Invalid {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject Valid a;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject JitValid b;\n+&nbsp;&nbsp;&nbsp; `@`Inject Provided p;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject Invalid(InvalidLinked a) {}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject void foo(InvalidInterface a) {}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n\nThe binding in this particular scenario is LinkedProviderBindingImpl which does not implement HasDependencies - but there may be other bindings that could cause the same class cast exception.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=507_\n", "url": "https://github.com/google/guice/issues/507", "user": "gissuebot", "labels": ["3.0", "OpSys-All", "Priority-Critical", "bug", "imported"], "created": "2014-07-07 18:30:04", "closed": "2014-07-07 18:30:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "AnnotationType strategies are not canonicalized", "body": "_From [mcculls](https://code.google.com/u/108081409801028235828/) on May 18, 2010 04:37:25_\n\nGuice trunk converts keys with annotation instances of javax.inject.Named\ninto a canonical form using com.google.inject.name.Named - however it does\nnot convert keys which only have annotation types of javax.inject.Named.\n\nPATCH:\n\nIndex: test/com/google/inject/name/NamedEquivalanceTest.java\n`===================================================================`\n--- test/com/google/inject/name/NamedEquivalanceTest.java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( revision 2399 )\n+++ test/com/google/inject/name/NamedEquivalanceTest.java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (working copy)\n`@``@` -51,12 +51,19 `@``@`\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(keyForAnnotation(new GuiceNamed(\"foo\")),\nkeyForAnnotation(new JsrNamed(\"foo\")));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(keyForAnnotation(Names.named(\"foo\")),\nkeyForAnnotation(new GuiceNamed(\"foo\")));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(keyForAnnotation(Names.named(\"foo\")),\nkeyForAnnotation(new JsrNamed(\"foo\")));\n+\n+&nbsp;&nbsp;&nbsp; assertEquals(keyForAnnotationType(com.google.inject.name.Named.class),\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; keyForAnnotationType(javax.inject.Named.class));\n&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;private static Key&lt;String&gt; keyForAnnotation(Annotation annotation) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Key.get(String.class, annotation);\n&nbsp;&nbsp;&nbsp;}\n\n+&nbsp;&nbsp;private static Key&lt;String&gt; keyForAnnotationType(Class&lt;? extends\nAnnotation&gt; annotationType) {\n+&nbsp;&nbsp;&nbsp; return Key.get(String.class, annotationType);\n+&nbsp;&nbsp;}\n+\n&nbsp;&nbsp;&nbsp;public void testBindingWithNamesCanInjectBothTypes() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertInjectionsSucceed(GUICE_BINDING_MODULE);\n&nbsp;&nbsp;&nbsp;}\nIndex: src/com/google/inject/internal/Annotations.java\n`===================================================================`\n--- src/com/google/inject/internal/Annotations.java&nbsp;&nbsp;&nbsp;&nbsp; ( revision 2399 )\n+++ src/com/google/inject/internal/Annotations.java&nbsp;&nbsp;&nbsp;&nbsp; (working copy)\n`@``@` -139,4 +139,13 `@``@`\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return annotation;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;}\n+\n+&nbsp;&nbsp;public static Class&lt;? extends Annotation&gt; canonicalizeIfNamed(\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Class&lt;? extends Annotation&gt; annotationType) {\n+&nbsp;&nbsp;&nbsp; if(annotationType == javax.inject.Named.class) {\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return Named.class;\n+&nbsp;&nbsp;&nbsp; } else {\n+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return annotationType;\n+&nbsp;&nbsp;&nbsp; }\n+&nbsp;&nbsp;}\n&nbsp;}\nIndex: src/com/google/inject/Key.java\n`===================================================================`\n--- src/com/google/inject/Key.java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ( revision 2399 )\n+++ src/com/google/inject/Key.java&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (working copy)\n`@``@` -349,7 +349,7 `@``@`\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;checkNotNull(annotationType, \"annotation type\");\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureRetainedAtRuntime(annotationType);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ensureIsBindingAnnotation(annotationType);\n-&nbsp;&nbsp;&nbsp; return new AnnotationTypeStrategy(annotationType, null);\n+&nbsp;&nbsp;&nbsp; return new\nAnnotationTypeStrategy(Annotations.canonicalizeIfNamed(annotationType), null);\n&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;private static void ensureRetainedAtRuntime(\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=479_\n", "url": "https://github.com/google/guice/issues/479", "user": "gissuebot", "labels": ["Milestone-Release2.1", "bug", "imported"], "created": "2014-07-07 18:24:28", "closed": "2014-07-07 18:26:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "RequestDispatcher.forward() cannot dispatch to HTML or JSP files", "body": "_From [burke.eric](https://code.google.com/u/107049228697365395345/) on December 29, 2009 13:18:31_\n1. Put a static HTML file or JSP somewhere in your web app. For example, \n   WEB-INF/protected_page.html. This bug also applies to files in the root \n   dir, not just under WEB-INF.\n2. Write a simple Servlet that forwards to that page, and configure that \n   Servlet through a normal Guice ServletModule :\n\n`@`Singleton \npublic class MyServlet extends HttpServlet { \n&nbsp;&nbsp;protected void doGet(HttpServletRequest req, \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HttpServletResponse res) \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws ServletException, IOException { \n&nbsp;&nbsp;&nbsp;&nbsp;RequestDispatcher rd = req.getRequestDispatcher(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"/WEB-INF/protected_page.html\"); \n&nbsp;&nbsp;&nbsp;&nbsp;rd.forward(req, res); \n&nbsp;&nbsp;} \n} \n1. You'll see error code 404, \"The requested resource (/guice_bug/WEB-\n   INF/protected_page.html) is not available.\" \n\nI did some additional debugging this morning in Tomcat 6.0.20 and here is \nwhat I've found so far. If the servlet is a normal non-Guice Servlet, the \nforward works. \n\norg.apache.catalina.servlets.DefaultServlet line 308 calls \nrequest.getServletPath(): \n// ...extract the desired path directly from the request \nString result = request.getPathInfo(); \nif (result == null) { \n&nbsp;&nbsp;result = request.getServletPath();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// RIGHT HERE, line 308 \n} \n\nAt this point the \"request\" is an ApplicationHttpRequest object, and its \nservletPath is \"/WEB-INF/protected_page.html\". \n\n---------- \n\nNow if I go through the same path with Guice, the flow is different. \nStarting with the breakpoint at line 308 again, we go into \nrequest.getServletPath(). \n\nWith Guice, however, the \"request\" object is a \ncom.google.inject.servlet.ServletDefinition object. The getServletPath() \nmethod looks like this: \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Override \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public String getServletPath() { \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return computePath(); \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} \n\nWhich goes into the computePath() method: \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Memoizer pattern. \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private String computePath() { \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!pathComputed) { \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String servletPath = super.getServletPath(); \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path = patternMatcher.extractPath(servletPath); \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pathComputed = true; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (null == path) { \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path = servletPath; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return path; \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} \n&nbsp;&nbsp;&nbsp;&nbsp;}; \n\nAnd here is the problem -- the pathComputed field is true, and the \nMemoized path is \"/managed\", which is wrong. \n\nIf I use my debugger to change the pathComputed flag to false, the \npath is recomputed properly, and results in \"/WEB-INF/protected_page.html\". \n\nThis would be the correct value, and the dispatching then works. \n\nSo the quick summary is that \ncom.google.inject.servlet.ServletDefinition is caching an incorrect \nvalue for \"path\", which results in broken RequestDispatcher.forward(...). \n\nI suppose an easy (maybe naive) fix would be to remove the Memoizer \nidiom from this class, but I'm not familiar enough with Guice to \nunderstand how this would adversely impact runtime performance.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=455_\n", "url": "https://github.com/google/guice/issues/455", "user": "gissuebot", "labels": ["Priority-High", "bug", "imported"], "created": "2014-07-07 18:23:41", "closed": "2014-07-07 18:23:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Assisted Inject uses child injector to bind args", "body": "_From [dhanji](https://code.google.com/u/115972161424102003495/) on October 09, 2009 00:07:04_\n\nThis causes MASSIVE lock contention if used inside a running app. Which is Bad(TM)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=435_\n", "url": "https://github.com/google/guice/issues/435", "user": "gissuebot", "labels": ["Extension.AssistedInject", "Performance", "Priority-Critical", "bug", "imported"], "created": "2014-07-07 18:22:47", "closed": "2014-07-07 18:22:52", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "BridgeClassLoader is not aware of: java.lang.NoClassDefFoundError: sun/reflect/ConstructorAccessorImpl", "body": "_From [michael.zehender](https://code.google.com/u/104797681633922337634/) on August 19, 2009 09:14:51_\n\nI've just reached a threshhold of services in my project that triggers the following jvm bug: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265952 My Environment is Mac OS X, java 1.6.0_13 and I'm running guice inside felix (see \nfelix.apache.org).\n\nAs soon as I create my Injector I get following stacktrace:\n\ncom.google.inject.internal.ComputationException: java.lang.NoClassDefFoundError: \nsun/reflect/ConstructorAccessorImpl\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.internal.MapMaker$StrategyImpl.compute(MapMaker.java:553)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.internal.MapMaker$StrategyImpl.compute(MapMaker.java:419)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at \ncom.google.inject.internal.CustomConcurrentHashMap$ComputingImpl.get(CustomConcurrentH\nashMap.java:2041)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.internal.FailableCache.get(FailableCache.java:46)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ConstructorInjectorStore.get(ConstructorInjectorStore.java:52)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ConstructorBindingImpl.initialize(ConstructorBindingImpl.java:57)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.initializeBinding(InjectorImpl.java:377)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.createJustInTimeBinding(InjectorImpl.java:645)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.createJustInTimeBindingRecursive(InjectorImpl.java:581)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getJustInTimeBinding(InjectorImpl.java:172)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getBindingOrThrow(InjectorImpl.java:132)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getInternalFactory(InjectorImpl.java:651)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.FactoryProxy.notify(FactoryProxy.java:48)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.BindingProcessor.runCreationListeners(BindingProcessor.java:230)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorBuilder.initializeStatically(InjectorBuilder.java:131)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorBuilder.build(InjectorBuilder.java:105)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:92)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:69)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:59)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.tryge.negret.features.admin.Activator.start(Activator.java:45)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.felix.framework.util.SecureAction.startActivator(SecureAction.java:589)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.felix.framework.Felix.startBundle(Felix.java:1458)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.felix.framework.Felix.setActiveStartLevel(Felix.java:984)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at org.apache.felix.framework.StartLevelImpl.run(StartLevelImpl.java:263)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.Thread.run(Thread.java:637)\n\nAs the corresponding jvm bug shows the option: -Dsun.reflect.noInflation=true makes the bug \nreproducable.\n\nIt may or may not be a concern of guice to fix this issue, however for my project the only \nalternative is to fix the BridgeClassLoader of Guice ...\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=417_\n", "url": "https://github.com/google/guice/issues/417", "user": "gissuebot", "labels": ["Milestone-Release2.1", "bug", "duplicate", "imported"], "created": "2014-07-07 18:21:07", "closed": "2014-07-07 18:21:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Scopes.SINGLETON does not detect re-entrant calls", "body": "_From [mcculls](https://code.google.com/u/108081409801028235828/) on June 15, 2009 12:19:42_\n\nOriginal bug report: https://code.google.com/p/peaberry/issues/detail?id=35 Original diagnosis: http://peaberry.googlecode.com/issues/attachment?aid=-5668176808220216508&name=bug.txt Problem was tracked down to a circular dependency that isn't detected by\nGuice, presumably because there's a provider involved in the circle? This\nthen had an interesting side-effect in the SINGLETON class where it made\ntwo re-entrant calls.\n\nThe re-entrant call isn't detected by the SINGLETON code, so it silently\ncreates multiple instances. A flag could be added so it knows when it is\nalready processing a request - it could then report a circularity error.\nBut I'm not sure if this is worthwhile, or whether it is better to find out\nwhy the original circularity was not detected.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=391_\n", "url": "https://github.com/google/guice/issues/391", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:19:38", "closed": "2014-07-07 18:19:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Child Injector Linked Singletons Not Eager", "body": "_From [sberlin](https://code.google.com/u/sberlin/) on May 18, 2009 21:12:36_\n\nSee the thread: http://groups.google.com/group/google-guice/browse_thread/thread/32c683ff51c324d3 .\n\nLinked singletons in a child injector from a parent injector using\nStage.PRODUCTION are not eagerly instantiated.\n\nExample test (from the email thread)\n\n---\n\n&nbsp;&nbsp;&nbsp;public void testChildEagerSingletons() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Injector parent = Guice.createInjector(Stage.PRODUCTION, new\nAbstractModule() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Override\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void configure() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(S1.class).to(S1I.class);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Injector child = parent.createChildInjector(new AbstractModule() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Override\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void configure() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(S2.class).to(S2I.class);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(S3I.class);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue(S1I.created);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertSame(parent.getInstance(S1.class), child.getInstance(S1.class));\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue(S3I.created);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;assertTrue(S2I.created);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;private static interface S1 {}\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Singleton\n&nbsp;&nbsp;&nbsp;&nbsp;private static class S1I implements S1 {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private static boolean created = false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S1I () { created = true; }\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;private static interface S2 {}\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Singleton\n&nbsp;&nbsp;&nbsp;&nbsp;private static class S2I implements S2 {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private static boolean created = false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S2I () { created = true; }\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Singleton\n&nbsp;&nbsp;&nbsp;&nbsp;private static class S3I {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private static boolean created = false;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;S3I () { created = true; }\n&nbsp;&nbsp;&nbsp;&nbsp;} \n\n---\n\nThis fails: assertTrue(S2I.created);\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=373_\n", "url": "https://github.com/google/guice/issues/373", "user": "gissuebot", "labels": ["bug", "imported"], "created": "2014-07-07 18:16:22", "closed": "2014-07-07 18:16:22", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "@Provides methods don't respect null or @Nullable", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on April 29, 2009 20:14:27_\n\nThey should blow up on null unless the parameter is `@`Nullable.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=366_\n", "url": "https://github.com/google/guice/issues/366", "user": "gissuebot", "labels": ["Milestone-Release3.1", "Priority-High", "bug", "imported"], "created": "2014-07-07 18:15:56", "closed": "2015-02-04 03:40:09", "commits": {"9867f9c2142355ae958f9eeb8fb96811082c8812": {"commitGHEventType": "referenced", "commitUser": "sameb"}}, "ttf": 211.00027777777777, "commitsDetails": [{"commitHash": "9867f9c2142355ae958f9eeb8fb96811082c8812", "commitGHEventType": "referenced", "commitUser": "sameb", "commitParents": ["f11bf2d26ccd07e72805b789b33d855e223b1ed7"], "nameRev": "9867f9c2142355ae958f9eeb8fb96811082c8812 tags/4.0~9^2~2", "commitMessage": "Implement my old patch for issue #366, with some tweaks.  This does the\nfollowing:\n* Fixes @Provides injection so that parameters are checked for nullability.\nBy default this will error.  The flag is named:\nguice_check_nullable_provides_params and can be set to ERROR, WARNING or IGNORE.\n* Adds InjectionPoint.forMethod to build an InjectionPoint off an arbitrary\nmethod.\n* Adds Binder.getProvider(Dependency) to a get a Provider for a given\ndependency (with all its nullability & injection points maintained).\n* Update ProviderLookup to accept a Dependency in addition to a Key.\n\nThis is in preparation for two things:\n1) Allowing multibindings/mapbindings/optionalbindings to be specified as\nannotations on methods in a module.\n2) Adding a dagger compatibility module.\n... the general idea will be that I'll also add a hook into\nProvidesMethodModule somehow to look at arbitrary other annotations and let\nfolks process them specially.\n-------------\nCreated by MOE: http://code.google.com/p/moe-java\nMOE_MIGRATED_REVID=85353820\n", "commitDateTime": "2015-02-03 18:07:07", "authoredDateTime": "2015-02-02 12:45:25", "commitGitStats": [{"filePath": "core/src/com/google/inject/Binder.java", "insertions": 13, "deletions": 0, "lines": 13}, {"filePath": "core/src/com/google/inject/internal/Errors.java", "insertions": 29, "deletions": 0, "lines": 29}, {"filePath": "core/src/com/google/inject/internal/InjectorImpl.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "core/src/com/google/inject/internal/InternalFlags.java", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "core/src/com/google/inject/internal/LookupProcessor.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "core/src/com/google/inject/internal/ProviderMethodsModule.java", "insertions": 5, "deletions": 33, "lines": 38}, {"filePath": "core/src/com/google/inject/spi/Elements.java", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "core/src/com/google/inject/spi/InjectionPoint.java", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "core/src/com/google/inject/spi/ProviderLookup.java", "insertions": 16, "deletions": 7, "lines": 23}, {"filePath": "core/test/com/google/inject/spi/ProviderMethodsTest.java", "insertions": 154, "deletions": 41, "lines": 195}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Binder.java", "spoonMethods": [{"spoonMethodName": "com.google.inject.getProvider(com.google.inject.spi.Dependency)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Errors.java", "spoonMethods": [{"spoonMethodName": "com.google.inject.internal.Errors", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.inject.internal.Errors.checkForNull(java.lang.Object,java.lang.Object,com.google.inject.spi.Dependency)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "InjectorImpl.java", "spoonMethods": [{"spoonMethodName": "com.google.inject.internal.InjectorImpl.getProviderOrThrow(com.google.inject.Key,com.google.inject.internal.Errors)", "TOT": 6, "UPD": 4, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "com.google.inject.internal.InjectorImpl.getProvider(com.google.inject.Key)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "InternalFlags.java", "spoonMethods": [{"spoonMethodName": "com.google.inject.internal.InternalFlags", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.inject.internal.InternalFlags.NullableProvidesOption", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.inject.internal.InternalFlags.getNullableProvidesOption()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.inject.internal.InternalFlags.parseNullableProvidesOption(com.google.inject.internal.InternalFlags$NullableProvidesOption)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "LookupProcessor.java", "spoonMethods": [{"spoonMethodName": "com.google.inject.internal.LookupProcessor.visit(com.google.inject.spi.ProviderLookup)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ProviderMethodsModule.java", "spoonMethods": [{"spoonMethodName": "com.google.inject.internal.ProviderMethodsModule.createProviderMethod(com.google.inject.Binder,java.lang.reflect.Method)", "TOT": 19, "UPD": 10, "INS": 1, "MOV": 6, "DEL": 2}, {"spoonMethodName": "com.google.inject.internal.ProviderMethodsModule", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "com.google.inject.internal.ProviderMethodsModule.LogProvider", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "Elements.java", "spoonMethods": [{"spoonMethodName": "com.google.inject.spi.Elements.RecordingBinder.getProvider(com.google.inject.Key)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "com.google.inject.spi.Elements.RecordingBinder.getProvider(com.google.inject.spi.Dependency)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "InjectionPoint.java", "spoonMethods": [{"spoonMethodName": "com.google.inject.spi.InjectionPoint.forMethod(java.lang.reflect.Method,com.google.inject.TypeLiteral)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ProviderLookup.java", "spoonMethods": [{"spoonMethodName": "com.google.inject.spi.ProviderLookup", "TOT": 8, "UPD": 3, "INS": 3, "MOV": 2, "DEL": 0}, {"spoonMethodName": "com.google.inject.spi.ProviderLookup.applyTo(com.google.inject.Binder)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.inject.spi.ProviderLookup.getKey()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "com.google.inject.spi.ProviderLookup.getProvider().1.getDependencies()", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2}, {"spoonMethodName": "com.google.inject.spi.ProviderLookup.getProvider().1.toString()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "com.google.inject.spi.ProviderLookup.getDependency()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ProviderMethodsTest.java", "spoonMethods": [{"spoonMethodName": "com.google.inject.spi.ProviderMethodsTest.testProviderMethodDependenciesAreExposed()", "TOT": 19, "UPD": 7, "INS": 1, "MOV": 11, "DEL": 0}, {"spoonMethodName": "com.google.inject.spi.ProviderMethodsTest.testInjectsJustOneLogger()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "com.google.inject.spi.ProviderMethodsTest.runNullableTest(com.google.inject.Injector,com.google.inject.spi.Dependency,com.google.inject.Module)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.inject.spi.ProviderMethodsTest.validateNullableFails(com.google.inject.Injector,com.google.inject.Module)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.inject.spi.ProviderMethodsTest.validateNullableIgnored(com.google.inject.Injector)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.inject.spi.ProviderMethodsTest.validateNullableWarns(com.google.inject.Injector,com.google.inject.spi.Dependency)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.inject.spi.ProviderMethodsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.google.inject.spi.ProviderMethodsTest.testNullability()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9867f9c2142355ae958f9eeb8fb96811082c8812"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 107, "deletions": 45, "lines": 152, "gitFilesChange": 9}, "spoonStatsSummary": {"TOT": 60, "UPD": 20, "INS": 19, "MOV": 12, "DEL": 9, "spoonFilesChanged": 9, "spoonMethodsChanged": 22}, "statsSkippedReason": "", "changesInPackagesGIT": ["core/src/com/google/inject/internal", "core/src/com/google/inject/spi", "core/src/com/google/inject"], "changesInPackagesSPOON": ["com.google.inject.spi.ProviderLookup.getDependency()", "com.google.inject.internal.ProviderMethodsModule", "com.google.inject.internal.InjectorImpl.getProviderOrThrow(com.google.inject.Key,com.google.inject.internal.Errors)", "com.google.inject.spi.ProviderLookup.applyTo(com.google.inject.Binder)", "com.google.inject.internal.ProviderMethodsModule.LogProvider", "com.google.inject.spi.ProviderLookup", "com.google.inject.internal.LookupProcessor.visit(com.google.inject.spi.ProviderLookup)", "com.google.inject.internal.InternalFlags.parseNullableProvidesOption(com.google.inject.internal.InternalFlags$NullableProvidesOption)", "com.google.inject.internal.ProviderMethodsModule.createProviderMethod(com.google.inject.Binder,java.lang.reflect.Method)", "com.google.inject.spi.Elements.RecordingBinder.getProvider(com.google.inject.spi.Dependency)", "com.google.inject.spi.ProviderLookup.getProvider().1.getDependencies()", "com.google.inject.internal.Errors.checkForNull(java.lang.Object,java.lang.Object,com.google.inject.spi.Dependency)", "com.google.inject.internal.InternalFlags", "com.google.inject.spi.Elements.RecordingBinder.getProvider(com.google.inject.Key)", "com.google.inject.internal.InjectorImpl.getProvider(com.google.inject.Key)", "com.google.inject.spi.ProviderLookup.getProvider().1.toString()", "com.google.inject.spi.InjectionPoint.forMethod(java.lang.reflect.Method,com.google.inject.TypeLiteral)", "com.google.inject.internal.InternalFlags.getNullableProvidesOption()", "com.google.inject.spi.ProviderLookup.getKey()", "com.google.inject.internal.InternalFlags.NullableProvidesOption", "com.google.inject.internal.Errors", "com.google.inject.getProvider(com.google.inject.spi.Dependency)"]}, {"title": "Servlet module not very rigorous in deciding what's a singleton", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on April 28, 2009 20:18:18_\n\nIt doesn't follow links through private modules, for example.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=365_\n", "url": "https://github.com/google/guice/issues/365", "user": "gissuebot", "labels": ["Extension-Servlet", "Priority-Low", "bug", "imported"], "created": "2014-07-07 18:15:54", "closed": "2014-07-07 18:15:54", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Report better error when a @Provides method has void return type", "body": "_From [dhanji](https://code.google.com/u/115972161424102003495/) on February 17, 2009 00:04:57_\n\nWe should make a guard for this, since currently, the reported error is\nreally obscure.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=339_\n", "url": "https://github.com/google/guice/issues/339", "user": "gissuebot", "labels": ["Priority-Low", "bug", "duplicate", "imported"], "created": "2014-07-07 18:12:28", "closed": "2014-07-07 18:12:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Filters/Servlets should only be initialized once", "body": "_From [dhanji](https://code.google.com/u/115972161424102003495/) on February 14, 2009 04:07:03_\n\n...even if they appear multiple times in the filter chain.\n\nReported by Rex on the mailing list:\nSorry, my fault. ServletContainer is also a filter. \n\nMy usage: \nnew ServletModule () {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Override\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void configureServlets() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String, String&gt; initParams = Maps.newHashMap();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;initParams.put(\"com.sun.jersey.config.property.packages\", \nHome.class.getPackage().getName());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterRegex(\"/(home|logout|login.*)\").through(JerseyFilter.class, initParams);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},\n\nIf I announce filterRegex(\"/home\", \"/logout\", \"/login.*\"), the `@`Singleton JerseyFilter will initiate() 3 \ntimes. It this normal?\n\nThanks,\nRex\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=335_\n", "url": "https://github.com/google/guice/issues/335", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-High", "bug", "imported"], "created": "2014-07-07 18:12:16", "closed": "2014-07-07 18:12:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Grapher causing \"Illegal attribute align in <FONT>\" warnings in GraphViz", "body": "_From [phopkins](https://code.google.com/u/phopkins/) on February 12, 2009 13:45:31_\n\nThe grapher generates &lt;font&gt; tags with align=\"left\" in them, which is\ninvalid DOT and is ignored.\n\nThe grapher shouldn't produce these in the first place.\n\nWarning: Illegal attribute align in &lt;FONT&gt; - ignored\nin label of node k_4c05ecb1\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=331_\n", "url": "https://github.com/google/guice/issues/331", "user": "gissuebot", "labels": ["bug", "imported"], "created": "2014-07-07 18:12:07", "closed": "2014-07-07 18:12:08", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "AssistedInject issues misleading error messages for configuration errors", "body": "_From [gili.tzabari](https://code.google.com/u/104133752163818915509/) on February 08, 2009 20:14:33_\n\nIf I invoke:\n\nbinder.bind(factoryClass).toProvider(FactoryProvider.newFactory(factoryClass,\nconstructedType));\n\nwhere factoryClass does not return constructedType as expected then Guice\nissues this error message:\n\ncom.google.inject.ConfigurationException: Guice configuration errors:\n1) A binding to java.net.URI annotated with\n`@`com.google.inject.assistedinject.Assisted(value=) already exists on a\nchild injector.\n&nbsp;&nbsp;while locating java.net.URI annotated with\n`@`com.google.inject.assistedinject.Assisted(value=)\n&nbsp;&nbsp;&nbsp;&nbsp;for parameter 1 at ConstructedType.&lt;init&gt;(ConstructedType.java:24)\n&nbsp;&nbsp;while locating ConstructedType\n\nThe URI parameter corresponds to the `@`Assisted parameter in the constructor.\n\nGuice should ensure that factoryClass returns constructedType and fail-fast\nwith a clearer message if it doesn't.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=329_\n", "url": "https://github.com/google/guice/issues/329", "user": "gissuebot", "labels": ["Extension-AssistedInject", "Priority-Low", "bug", "imported"], "created": "2014-07-07 18:12:03", "closed": "2014-07-07 18:12:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "IllegalStateException in LateBoundConstructor only when calling Provider.get() for types setup in a child Injector.", "body": "_From [bigwalling](https://code.google.com/u/111026163045580846595/) on January 26, 2009 17:55:18_\n\nIt appears that some initialization never occurs when types are configured\nin the nested injector instead of the parent injected.\n\nThis only occurs for types setup in the nested injector - if you move the\nbind to the parent injector, the repo test executes perfectly.\n\nUnfortunately this makes nested injectors pretty pointless for me. :s\n\nStack trace:\njava.util.concurrent.ExecutionException: java.lang.IllegalStateException:\nConstruct before bind, null\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.FutureTask$Sync.innerGet(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.FutureTask.get(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at NestedInjectorScopedBugTest.main(NestedInjectorScopedBugTest.java:35)\nCaused by: java.lang.IllegalStateException: Construct before bind, null\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.internal.base.Preconditions.checkState(Preconditions.java:137)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InjectorImpl$LateBoundConstructor.get(InjectorImpl.java:457)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$7$1.call(InjectorImpl.java:783)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:829)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$7.get(InjectorImpl.java:779)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at ExampleBrokenClass.run(ExampleBrokenClass.java:32)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.Executors$RunnableAdapter.call(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.FutureTask$Sync.innerRun(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.FutureTask.run(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.Thread.run(Unknown Source)\n\n**Binary attachments:** [GuiceBugRepo.zip](http://code.google.com/p/google-guice/issues/detail?id=319)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=319_\n", "url": "https://github.com/google/guice/issues/319", "user": "gissuebot", "labels": ["Priority-High", "bug", "imported"], "created": "2014-07-07 18:11:43", "closed": "2014-07-07 18:11:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ServletModuleBuilder uses \"with\" as part of the  EDSL which causing issues with Scala", "body": "_From [peter.hausel](https://code.google.com/u/111573514078259412887/) on January 15, 2009 07:37:29_\n\nIn Scala 'with' is a keyword so invoking a method called 'with' won't work.\nWould it be possible to add a set of extra methods named 'by'? That way\nScala users would be able to use the new servlet extension without any hackery.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=310_\n", "url": "https://github.com/google/guice/issues/310", "user": "gissuebot", "labels": ["Extension-Servlet", "Priority-Low", "bug", "imported", "wontfix"], "created": "2014-07-07 18:11:23", "closed": "2014-07-07 18:11:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Calling getDependencies() can fail if Multibinder isn't initialized yet", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on January 12, 2009 22:10:14_\n\nIe. when the method is called during Injector-creation.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=309_\n", "url": "https://github.com/google/guice/issues/309", "user": "gissuebot", "labels": ["Extension-Multibindings", "Priority-Low", "bug", "duplicate", "imported"], "created": "2014-07-07 18:11:22", "closed": "2014-07-07 18:11:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "constructor injection gives better errors than field injection for circular dependency", "body": "_From [bslesinsky](https://code.google.com/u/bslesinsky/) on January 10, 2009 04:37:08_\n\nWhen using field injection, the field was set to null and I got:\n\n1) Error in custom provider, java.lang.NullPointerException\n\nWhen I changed it to use constructor injection, I got much better errors like:\n\n1) Tried proxying com.google.jsearch.project.ProjectRegistry to support a\ncircular dependency, but it is not an interface.\n... shows the circular dependency ...\n\n2) Error injecting constructor, java.lang.IllegalStateException: This is a\nproxy used to support circular references involving constructors. The\nobject we're proxying is not constructed yet. Please wait until after\ninjection has completed to use this object.\n\nThis was with r734 .\n\nHere's the stack trace for field injection:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.BoundProviderFactory.get(BoundProviderFactory.java:58)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:43)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:847)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Scopes$1$1.get(Scopes.java:49)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.SingleParameterInjector.inject(SingleParameterInjector.java:41)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.SingleParameterInjector.getAll(SingleParameterInjector.java:62)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ConstructorInjector.construct(ConstructorInjector.java:90)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InjectorImpl$LateBoundConstructor.get(InjectorImpl.java:447)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:43)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:847)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Scopes$1$1.get(Scopes.java:49)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$3.get(InjectorImpl.java:526)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.SingleParameterInjector.inject(SingleParameterInjector.java:41)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.SingleParameterInjector.getAll(SingleParameterInjector.java:62)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ConstructorInjector.construct(ConstructorInjector.java:90)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InjectorImpl$LateBoundConstructor.get(InjectorImpl.java:447)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:43)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:847)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Scopes$1$1.get(Scopes.java:49)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.SingleFieldInjector.inject(SingleFieldInjector.java:54)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ConstructorInjector.construct(ConstructorInjector.java:103)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InjectorImpl$LateBoundConstructor.get(InjectorImpl.java:447)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.BoundProviderFactory.get(BoundProviderFactory.java:56)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:43)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:847)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Scopes$1$1.get(Scopes.java:49)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:46)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorBuilder$1.call(InjectorBuilder.java:200)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorBuilder$1.call(InjectorBuilder.java:194)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:839)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InjectorBuilder.loadEagerSingletons(InjectorBuilder.java:194)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InjectorBuilder.injectDynamically(InjectorBuilder.java:175)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorBuilder.build(InjectorBuilder.java:115)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:92)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:69)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:59)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=308_\n", "url": "https://github.com/google/guice/issues/308", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported", "invalid"], "created": "2014-07-07 18:11:19", "closed": "2014-07-07 18:11:21", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Wrong error reporting with double declarations and overrides", "body": "_From [erik.putrycz@nrc-cnrc.gc.ca](https://code.google.com/u/103172680713861345019/) on January 06, 2009 01:19:21_\n\nI have a module A that install modules B and C and I override with module D.\nModules B, C and D have identical declarations and bind the class Clazz to\nsomething.\nThe error reported with this scenario is that Clazz is declared in both\nmodules B and D whereas the real bug is that it is declared in modules B and C.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=306_\n", "url": "https://github.com/google/guice/issues/306", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported"], "created": "2014-07-07 18:11:14", "closed": "2014-07-07 18:11:16", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "InstanceBinding of HasDependencies instance doesn't return InjectionPoint Dependencies from getDependencies()", "body": "_From [phopkins](https://code.google.com/u/phopkins/) on December 30, 2008 15:31:42_\n\nThis may not be a bug, but it looks fishy enough that I thought I'd raise it.\n\nIf you bind an instance that has `@`Injected fields or methods, but also implements \nHasDependencies, the InstanceBindingImpl and ProviderInstanceBindingImpl classes will return just \nthe instance's stated dependencies from #getDependencies().\n\nFor example, the Binding to RealMultibinder will return the dependencies on the Multibinder's \nbound elements, but not the Dependency on Injector, which is from the InjectionPoint for \n# initialize(Injector).\n\nI think that the Binding's getDependencies() should be comprehensive, and return both the \nDependencies from InjectionPoints as well as any additional Dependencies that the instance reports \nby implementing HasDependencies.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=298_\n", "url": "https://github.com/google/guice/issues/298", "user": "gissuebot", "labels": ["bug", "imported", "invalid"], "created": "2014-07-07 18:10:57", "closed": "2014-07-07 18:10:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NPE in #getDependencies() of ProviderInstanceBinding for Multibinder in Stage.TOOL", "body": "_From [phopkins](https://code.google.com/u/phopkins/) on December 30, 2008 15:18:23_\n\nprivate static class Multimodule extends AbstractModule {\n&nbsp;&nbsp;`@`Override\n&nbsp;&nbsp;protected void configure() {\n&nbsp;&nbsp;&nbsp;&nbsp;Multibinder&lt;String&gt; setBinder = Multibinder.newSetBinder(binder(), String.class);\n&nbsp;&nbsp;&nbsp;&nbsp;setBinder.addBinding().toInstance(\"One\");\n&nbsp;&nbsp;&nbsp;&nbsp;setBinder.addBinding().toInstance(\"Two\");\n&nbsp;&nbsp;&nbsp;&nbsp;setBinder.addBinding().toInstance(\"Three\");\n&nbsp;&nbsp;}\n}\n\nInjector injector = Guice.createInjector(Stage.TOOL, new Multimodule());\nProviderInstanceBinding&lt;?&gt; binding =\n&nbsp;&nbsp;&nbsp;&nbsp;(ProviderInstanceBinding&lt;?&gt;) injector.getBinding(Key.get(new TypeLiteral&lt;Set&lt;String&gt;&gt;() {}));\n// throws NullPointerException\nbinding.getDependencies();\n\nIt seems that in TOOL mode, the RealMultibinder#initialize() method is not called, so the \nDependency Set is never created.\n\nPrimary expectation is for this to not cause an exception, but secondary expectation is for the \nDependencies to be available even in TOOL mode.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=297_\n", "url": "https://github.com/google/guice/issues/297", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported"], "created": "2014-07-07 18:10:54", "closed": "2014-07-07 18:10:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "@ProvidedBy doesn't work with enums", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on December 29, 2008 15:22:36_\n\nThierry reports that `@`ProvidedBy doesn't work with enums. `@`ImplementedBy and enums doesn't \nmake sense, but this should definitely work.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=295_\n", "url": "https://github.com/google/guice/issues/295", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported"], "created": "2014-07-07 18:10:50", "closed": "2014-08-07 02:04:11", "commits": {}, "ttf": 30.00027777777778, "commitsDetails": []}, {"title": "Modules.override() + newPrivateBinder", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on November 28, 2008 14:52:40_\n\nWe'll need to change Modules.override() to remove overridden bindings from both top-level and \nprivate binders. Currently we'll leave the privately-bound versions around. This prevents you from \noverriding a binding that was exposed from a private module.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=279_\n", "url": "https://github.com/google/guice/issues/279", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-High", "bug", "imported"], "created": "2014-07-07 18:09:43", "closed": "2014-07-07 18:09:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Use proguard to reduce size of Guice", "body": "_From [mcculls](https://code.google.com/u/108081409801028235828/) on October 27, 2008 13:24:37_\n\nThe current Guice library built from trunk is ~900k because JarJar only\nworks at the class level. It doesn't trim classes with lots of static\nmethods (as in Google Collections) and this leads to many unnecessary\nclasses getting left in. Extending JarJar to trim static methods looks\nnon-trivial.\n\nSwitching over to just use ProGuard is also not an option, because it\ncannot seem to handle the CGLIB code properly (it ends up obfuscating\nclasses and members too much, which somehow breaks CGLIB).\n\nThe only reasonable option I've found is to apply ProGuard first to remove\nunused static collection methods and use JarJar to repackage CGLIB, etc.\n\nWith the attached patch, the Guice jar drops to ~600k\n\n[also attached ProGuard 4.3 beta 1 from http://proguard.sourceforge.net/ ]\n\n**Attachment:** [gist](https://gist.github.com/8850f8ae869be26b8e1b)\n&nbsp;&nbsp;&nbsp;_[GUICE_PROGUARD_PATCH.txt](https://gist.githubusercontent.com/gissuebot/8850f8ae869be26b8e1b/raw/8a449b31cd81fced5af34cf6cce8c1010704f7ad/GUICE_PROGUARD_PATCH.txt)_\n**Binary attachments:** [proguard.jar](http://code.google.com/p/google-guice/issues/detail?id=264)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=264_\n", "url": "https://github.com/google/guice/issues/264", "user": "gissuebot", "labels": ["Component-Scripts", "Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:08:30", "closed": "2014-07-07 18:08:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Modules.override() does not play nice with multibinder", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on October 21, 2008 14:59:30_\n\nBecause Multibinder relies on the fact that one module won't be installed\nmultiple times.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=263_\n", "url": "https://github.com/google/guice/issues/263", "user": "gissuebot", "labels": ["Priority-High", "bug", "imported"], "created": "2014-07-07 18:08:25", "closed": "2014-07-07 18:08:28", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "override() should invoke delegate modules lazily.", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on October 17, 2008 23:48:07_\n\nYou don't expect the modules to be configured as soon as they are now, and\nthis could cause problems when you install the same resulting module more\nthan once.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=262_\n", "url": "https://github.com/google/guice/issues/262", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:08:23", "closed": "2014-07-07 18:08:24", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Explicitly build for Java 5", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on October 15, 2008 14:09:21_\n\nWe have some incompatibilities, etc., when we build for 6.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=261_\n", "url": "https://github.com/google/guice/issues/261", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:08:21", "closed": "2014-07-07 18:08:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NullPointerException in Guice.createInjector(...) with null module", "body": "_From [kris.nuttycombe](https://code.google.com/u/kris.nuttycombe/) on October 14, 2008 19:56:57_\n\nThis is a bit trivial, but:\n\nModule mod = null;\nGuice.createInjector(Stage.Development, mod)\n\nresults in:\n\njava.lang.NullPointerException\n&nbsp;&nbsp;at com.google.inject.BinderImpl.install(BinderImpl.java:199)\n&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:77)\n&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:64)\n\nAlthough NullPointerException is possibly a legitimate error to throw here,\nIllegalArgumentException would be preferable due to the frequency with\nwhich NPEs are associated with programming errors.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=260_\n", "url": "https://github.com/google/guice/issues/260", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:07:46", "closed": "2014-07-07 18:08:20", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "[patch] a guice based JNDI provider", "body": "_From [james.strachan](https://code.google.com/u/112396942773084026914/) on October 09, 2008 07:26:34_\n\nThis patch provides a Guice based JNDI provider. While Guice Ioc is a general replacement for \nJNDI - there are times when developers need to work with JNDI (e.g. for JSR250/EJB3 or legacy \nreasons) and sometimes there is value in some kind of Registry or Service Locator pattern.\n\nSo this patch provides a JNDI provider which uses Guice to create an Injector from one or more \nmodules and then exposes the bindings from the injector into JNDI. This lets you use Guice to \nfully create the entire JNDI context in a simple easy way letting folks use Guice for all their IoC \nneeds while using JNDI if it is required.\n\nI can't create wiki documents in guice so for now I've created a wiki document in another project \nto describe how to use this JNDI provider and how to bind Guice bindings to JNDI https://code.google.com/p/camel-extra/wiki/GuiceJndi\n\n**Attachment:** [gist](https://gist.github.com/03f0a701bfd0f8a414de)\n&nbsp;&nbsp;&nbsp;_[a_guice_jndi_provider.patch](https://gist.githubusercontent.com/gissuebot/03f0a701bfd0f8a414de/raw/abf9a3251e90e381d35d3b1ba6aebdcb76393cb1/a_guice_jndi_provider.patch)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=259_\n", "url": "https://github.com/google/guice/issues/259", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:07:44", "closed": "2014-07-07 18:07:45", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "bindConstant().annotatedWith(clazz).to(null) causes ambigious error message", "body": "_From [juha.mynttinen](https://code.google.com/u/105290623397027910553/) on October 06, 2008 04:31:49_\n\nThis is not a bug, but an enhancement request.\n\nIf I have \"bindConstants().annotatedWith(clazz).to(null)\" in my code, the\nexception thrown will be:\n\njava.lang.NullPointerException: value\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.util.Objects.nonNull(Objects.java:35)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ConstantFactory.&lt;init&gt;(ConstantFactory.java:30)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ConstantBindingBuilderImpl$BindingInfo.createBinding(ConstantBindingBuilderImpl.java:161)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ConstantBindingBuilderImpl.createBinding(ConstantBindingBuilderImpl.java:141)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.BinderImpl.createConstantBinding(BinderImpl.java:355)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.BinderImpl.createConstantBindings(BinderImpl.java:349)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.BinderImpl.createInjector(BinderImpl.java:249)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:79)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:53)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:43)\n\nIf the codebase is full of constant bindings, this message is ambigious,\nbecause it doesn't tell _which_ binding was the problem. Normally the error\nmessages Guice provides are excellent and very nicely point to the real\nreason behind any exception. It'd be good idea to provide a more accurate\nerror message also in this case.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=256_\n", "url": "https://github.com/google/guice/issues/256", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:06:50", "closed": "2014-07-07 18:07:24", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "AbstractModule class documentation example error", "body": "_From [Leigh.Klotz](https://code.google.com/u/112516695972910268055/) on October 02, 2008 13:16:52_\n\nhttps://code.google.com/p/google-guice/source/browse/trunk/src/com/google/inject/AbstractModule.java#44 gives the example\n&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;link(Bar.class).to(BarImpl.class);\n\nI think it should be \"bind\" instead of \"link\"\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=255_\n", "url": "https://github.com/google/guice/issues/255", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:06:48", "closed": "2014-07-07 18:06:49", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Patch: use jarjar in multibindings build.xml", "body": "_From [mark.renouf](https://code.google.com/u/100301252568537087423/) on October 01, 2008 16:06:35_\n\nAttached is a patch to extensions/multibindings/build.xml which adds jarjar\nto the build process so google-collect-snapshot-20080530.jar is not a\nruntime dependency of guice-multibindings.\n\nSince google-collections is already pulled into guice.jar, right now this\nresults in only one duplicated class, \"com.google.common.base.Preconditions\".\n\nI suspect this is only temporary until google-collections hits 1.0.\n\n**Attachment:** [gist](https://gist.github.com/3140c03dd9ca4520f2e3)\n&nbsp;&nbsp;&nbsp;_[guice2-multibindings-use-jarjar.diff](https://gist.githubusercontent.com/gissuebot/3140c03dd9ca4520f2e3/raw/07cd90b507107e1f5bc065045b536749bf454e4d/guice2-multibindings-use-jarjar.diff)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=254_\n", "url": "https://github.com/google/guice/issues/254", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-High", "bug", "imported"], "created": "2014-07-07 18:06:45", "closed": "2014-07-07 18:06:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "new feature - search packages for objects to instantiate", "body": "_From [james.strachan](https://code.google.com/u/112396942773084026914/) on September 30, 2008 07:33:02_\n\nSpring supports this with `@`Component/`@`Service annotations as does Stripes and it can be quite \nhandy. \n\nBasically in a module it'd be handy to just declare the packages to scan for classes which are \nannotated with some annotation (say `@`Service) and they'll be automatically added to the module \nbinder without the developer having to edit the code for the module every time a new service is \ncreated. i.e. service objects can declare themselves as being bindable by using an annotation and \nbeing in the right package.\n\nAdmittedly, this isn't that hard for an end user to create for themselves; but I figured it'd be a \nhandy feature to include out of the box.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=253_\n", "url": "https://github.com/google/guice/issues/253", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:06:42", "closed": "2014-07-07 18:06:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Clean up @SuppressWarnings(\"DoubleCheckedLocking\")", "body": "_From [gili.tzabari](https://code.google.com/u/104133752163818915509/) on September 23, 2008 23:39:14_\n\nYou should probably replace this code using the Initialization On Demand\nHolder idiom mentioned here: http://www.cs.umd.edu/~pugh/java/memoryModel/jsr-133-faq.html#dcl\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=250_\n", "url": "https://github.com/google/guice/issues/250", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:06:37", "closed": "2014-07-07 18:06:38", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NPE in com.google.inject.ProviderToInternalFactoryAdapter$1.call()", "body": "_From [gili.tzabari](https://code.google.com/u/104133752163818915509/) on September 22, 2008 21:24:54_\n\nGuice 1.0... I have the following binding:\n\nbinder.bind(Key.get(PermanentRedirect.class,\nNames.named(\"RedirectMain\"))).in(Scopes.SINGLETON);\n\nand the following warp-persist code:\n\nMap&lt;String, String&gt; redirectMain = new HashMap&lt;String, String&gt;();\nredirectMain.put(\"source\", \"/Main\");\nredirectMain.put(\"target\", \"/main\");\nServlets.configure().filters().filterRegex(\"/Main/*\").through(Key.get(PermanentRedirect.class,\nNames.named(\"RedirectMain\")), redirectMain);\n\nGuice throws the following exception:\n\njava.lang.NullPointerException\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:37)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:756)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:35)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Scopes$1$1.get(Scopes.java:53)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:41)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$9$1.call(InjectorImpl.java:708)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:747)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$9.get(InjectorImpl.java:702)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getInstance(InjectorImpl.java:724)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.wideplay.warp.servlet.FilterDefinition.init(FilterDefinition.java:53)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.wideplay.warp.servlet.ManagedFilterPipeline.initPipeline(ManagedFilterPipeline.java:39)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.wideplay.warp.servlet.WebFilter.init(WebFilter.java:55)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\norg.apache.catalina.core.ApplicationFilterConfig.getFilter(ApplicationFilterConfig.java:257)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\norg.apache.catalina.core.ApplicationFilterConfig.setFilterDef(ApplicationFilterConfig.java:369)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\norg.apache.catalina.core.ApplicationFilterConfig.&lt;init&gt;(ApplicationFilterConfig.java:103)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\norg.apache.catalina.core.StandardContext.filterStart(StandardContext.java:4389)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\norg.apache.catalina.core.StandardContext.start(StandardContext.java:5189)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.sun.enterprise.web.WebModule.start(WebModule.java:326)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.sun.enterprise.web.LifecycleStarter.doRun(LifecycleStarter.java:58)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.sun.appserv.management.util.misc.RunnableBase.runSync(RunnableBase.java:304)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.sun.appserv.management.util.misc.RunnableBase.run(RunnableBase.java:341)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\njava.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.util.concurrent.FutureTask.run(FutureTask.java:138)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\njava.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\njava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.Thread.run(Thread.java:619)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=249_\n", "url": "https://github.com/google/guice/issues/249", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:06:34", "closed": "2014-07-07 18:06:36", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "AssistedInject should blow up if interceptors apply", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on September 16, 2008 16:08:54_\n\nThe fact that interception doesn't apply to AssistedInject -created classes\nviolates the principal of least astonishment. At a minimum, we should blow\nup if the user's code would have had interception but won't (ie. if methods\nqualify for the interceptors' matchers).\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=248_\n", "url": "https://github.com/google/guice/issues/248", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:06:32", "closed": "2014-07-07 18:06:34", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "untargeted bindings of parameterized types fail", "body": "_From [logan.johnson](https://code.google.com/u/101342417832033998532/) on September 16, 2008 11:59:23_\n\nThis:\n\n&nbsp;&nbsp;&nbsp;&nbsp;new AbstractModule() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void configure() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(new TypeLiteral&lt;ArrayList&lt;String&gt;&gt;() {}).in(Scopes.SINGLETON);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\nwill fail with this message:\n\n&nbsp;&nbsp;&nbsp;&nbsp;1) No implementation for java.util.ArrayList&lt;java.lang.String&gt; was bound.\n\nbecause BindingProcessor#visitUntargetted checks for this:\n\n&nbsp;&nbsp;&nbsp;&nbsp;type instanceof Class&lt;?&gt;\n\nBut if I modify visitUntargetted to do this:\n\nif ( type instanceof ParameterizedType) {\n&nbsp;&nbsp;&nbsp;&nbsp;type = ((ParameterizedType)type).getRawType();\n}\n\nthen everything is fine, and I get my ArrayList&lt;String&gt;.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=247_\n", "url": "https://github.com/google/guice/issues/247", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:06:31", "closed": "2014-07-07 18:06:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "jarjar doesn't play nice with Java 6 compiler", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on September 12, 2008 00:46:10_\n\nWhen running ant test.dist, we get this error in Java 6:\n\ntest.dist:\n&nbsp;&nbsp;&nbsp;&nbsp;[junit] Failed to invoke suite():java.lang.ClassFormatError: Truncated class file\n\nI believe this problem will be fixed by upgrading our jarjar to r119 : https://code.google.com/p/jarjar/source/detail?r=119\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=246_\n", "url": "https://github.com/google/guice/issues/246", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:06:29", "closed": "2014-07-07 18:06:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Guice should refuse to inject final fields", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on September 11, 2008 02:41:36_\n\nSetting final fields directly using reflection has unpredictable results and shouldn't be supported.\n\nFrom the Field.set() Javadoc:\n&nbsp;&nbsp;If the underlying field is final, the method throws an IllegalAccessException unless \nsetAccessible(true) has succeeded for this field and this field is non-static. Setting a final field in \nthis way is meaningful only during deserialization or reconstruction of instances of classes with \nblank final fields, before they are made available for access by other parts of a program. Use in any \nother context may have unpredictable effects, including cases in which other parts of a program \ncontinue to use the original value of this field.\n\nI believe we still need setAccessible(true) so we can update modify private non-final fields.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=245_\n", "url": "https://github.com/google/guice/issues/245", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Low", "bug", "imported", "wontfix"], "created": "2014-07-07 18:06:27", "closed": "2014-07-07 18:06:29", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JavaDocs for Guice 2 don't include \"Since\" information about new classes / methods", "body": "_From [Ben.Lings](https://code.google.com/u/Ben.Lings/) on September 08, 2008 08:02:16_\n\nFor example, Multibinder will be a new class in Guice 2. At the moment, its \nJavadoc doesn't include 'Since' information: http://google-guice.googlecode.com/svn/trunk/latest- javadoc/com/google/inject/multibindings/Multibinder.html\n\nIt would be useful to have this information to be able to tell which \nmethods an classes are new in Guice 2 and which already existed in Guice 1.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=243_\n", "url": "https://github.com/google/guice/issues/243", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:06:24", "closed": "2014-07-07 18:06:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Binding annotations warning breaks Scala", "body": "_From [jkriesten](https://code.google.com/u/110497397102495669580/) on September 03, 2008 14:37:59_\n\nHi,\n\nthe following construct (original code is Scala)\n\n---8&lt;---\n`@`Inject `@`Named( \"QUARTZ_FACTORY_KEY\" )\nprivate final String QUARTZ_FACTORY_KEY;\n\npublic String QUARTZ_FACTORY_KEY() { return QUARTZ_FACTORY_KEY; }\n---8&lt;---\n\ngives the following error with latest trunk ( r615 ):\n\nde.footprint.utils.scheduler.SchedulerProvider.QUARTZ_FACTORY_KEY() is\nannotated with `@`com.google.inject.name.Named(value=QUARTZ_FACTORY_KEY), but\nbinding annotations should be applied to its parameters instead.\n\nIt seems that Guice now gets irritated when fields and methods of the same\nname are available. It works with earlier Guice versions, though! Has there\nchanged something in the verifier?\n\nBest regards, --- Jan.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=242_\n", "url": "https://github.com/google/guice/issues/242", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:06:22", "closed": "2014-07-07 18:06:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "TypeLiteral should not be serializable", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on August 30, 2008 15:13:32_\n\nIt requires a warning to be suppressed in anonymous inner subclasses.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=241_\n", "url": "https://github.com/google/guice/issues/241", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:06:20", "closed": "2014-07-07 18:06:21", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make TypeLiteral not serializable", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on August 30, 2008 15:09:43_\n\nTypeLiteral requires users to create anonymous subclasses, and anonymous\nsubclasses are not reliably serializable.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=240_\n", "url": "https://github.com/google/guice/issues/240", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:06:19", "closed": "2014-07-07 18:06:20", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "In the Snapshot 20080713 Struts2 XML validator fails on Windows", "body": "_From [inder123](https://code.google.com/u/inder123/) on August 15, 2008 10:29:52_\n\nI am using Struts2 with tomcat5.0 with Guice on Eclipse. \n\nThe server fails at Startup with the error that \"URI is not hierarchical\". \n\nThis is happening because the parseValidators() method of\ncom.opensymphony.xwork2.validator.DefaultValidatorFactory does not handle\nfile URLs on windows properly. The file URL on windows have the disk drive\nin it, for example, file:D:/apps/jakarta-tomcat-5.0.30/common/classes/ is\none of the URLs that it gets from the ClassLoaderUtil.getResources call\n(line 98). The problem is that the new File() call fails, since File class\nthinks that this is a relative URL, but after seeing a : char, it thinks it\nis a malformed URL.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=236_\n", "url": "https://github.com/google/guice/issues/236", "user": "gissuebot", "labels": ["Extension-Struts", "Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:06:07", "closed": "2014-07-07 18:06:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "OSGi classloading doesn't work with package-private dependencies", "body": "_From [sberlin](https://code.google.com/u/sberlin/) on August 14, 2008 12:38:25_\n\nAdded a patch that demonstrates the problem.&nbsp;&nbsp;Basically the problem is\nthat injected parameters seem to be bleeding access out to the users of the\nclass.\n\n**Attachment:** [gist](https://gist.github.com/1c8f7e9bd98e3eefd11a)\n&nbsp;&nbsp;&nbsp;_[guice-visibility.txt](https://gist.githubusercontent.com/gissuebot/1c8f7e9bd98e3eefd11a/raw/ed83e02d92f6a68dedc8def684cdadd1f8161992/guice-visibility.txt)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=235_\n", "url": "https://github.com/google/guice/issues/235", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:06:03", "closed": "2014-07-07 18:06:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Update pom.xmls to build the project", "body": "_From [inder123](https://code.google.com/u/inder123/) on August 14, 2008 09:39:11_\n\nI see a few things that can be improved in the pom.xml\n\nUpdate Junit to 3.8.2 \nUpdate Jar version from 1.0RC2 to may be 2.0beta\nGroup id should be: com.google.code.guice since that is what you have used\nin the past for Guice at maven2 central repository.\n\nIt would be great if you can ditch ant builds and convert over to maven\ncompletely. I will be happy to help if you want me to.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=234_\n", "url": "https://github.com/google/guice/issues/234", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:06:00", "closed": "2014-07-07 18:06:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Link to Guice Web Extensions is broken", "body": "_From [inder123](https://code.google.com/u/inder123/) on August 14, 2008 09:23:38_\n\nUnder Wiki | 3rd Party Modules, Guice Web Extensions leads to a page not found.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=233_\n", "url": "https://github.com/google/guice/issues/233", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:05:58", "closed": "2014-07-07 18:05:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Include stacktraces for each error", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on August 07, 2008 02:06:26_\n\nThis has come up multiple times - users aren't seeing the messages logged by java.util.logging. http://groups.google.com/group/google- guice/browse_thread/thread/925e2729f63bd3b0/640018a6c1638883?\nshow_docid=640018a6c1638883\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=232_\n", "url": "https://github.com/google/guice/issues/232", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:05:57", "closed": "2014-07-07 18:05:58", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Support mixed injection and manual wiring", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on August 06, 2008 20:57:09_\n\nThere are cases where you want most members injected in a given class and\nthen to do some manual wiring (you may have a couple different bindings\nthat are wired slightly differently). Right now, it's an all or nothing\nproposition.\n\nFor a class FooImpl, I should be able to bind a provider to FooImpl, and in\nthe provider, I should be able to get an injected instance of FooImpl that\nI can further work on and return.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=231_\n", "url": "https://github.com/google/guice/issues/231", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:05:53", "closed": "2014-07-07 18:05:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make cglib dependency optional/pluggable", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on August 06, 2008 20:50:13_\n\nThis means method interception may not be supported when cglib isn't\npresent. This would help us use Guice on Android w/ fewer modifications.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=230_\n", "url": "https://github.com/google/guice/issues/230", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:05:52", "closed": "2014-07-07 18:05:53", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Abstract away serialization standins", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on August 06, 2008 20:48:36_\n\nI like to almost 100&#37; separate serialization logic from my classes and not\nlet it impact their design. We should avoid eagerly creating new objects\njust to make serialization happy and instead defer the creation of such\nobjects until serialization occurs. This has real performance implications\non platforms like Android.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=229_\n", "url": "https://github.com/google/guice/issues/229", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:05:50", "closed": "2014-07-07 18:05:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ServletModule should have .equals() and .hashCode() implementations", "body": "_From [dtm+external@google.com](https://code.google.com/u/115440404260700484642/) on August 05, 2008 10:48:10_\n\nWhen combining several features that provide guice modules that can only be\nused with Guice's ServletModule , I find that I must explicitly include \"new ServletModule ()\" in the list of modules that go into my guice injector,\neven if I don't intend to use request scope directly.\n\nIt would be nice if each of these features could just install() their\ndependencies directly.&nbsp;&nbsp;Unfortunately, as ServletModule has no equals() or\nhashCode(), doing so would result in lots of multiple bindings errors.\n\nPlease add these, or something very similar, to ServletModule :\n\n`@`Override\npublic boolean equals(Object other) {\n&nbsp;&nbsp;return other != null &amp;&amp; other.getClass().equals(getClass());\n}\n\n`@`Override\npublic int hashCode() {\n&nbsp;&nbsp;return getClass().hashCode();\n}\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=228_\n", "url": "https://github.com/google/guice/issues/228", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:05:49", "closed": "2014-07-07 18:05:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "FinalizableReferenceQueue leaks, preventing reloads in a Servlet container", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on August 04, 2008 15:43:09_\n\nPaolo Capriotti:\n&nbsp;\"The&nbsp;FinalizableReferenceQueue&nbsp;thread&nbsp;prevents&nbsp;my&nbsp;application&nbsp;&nbsp;from&nbsp;being&nbsp;unloaded.&nbsp;The&nbsp;thread&nbsp;\nis started from a stack-local instance, so I think there's no way I can stop it. \" http://groups.google.com/group/google- guice/browse_thread/thread/1d022bfc3505f7fa/5cdd912e7b8b1095?\nshow_docid=5cdd912e7b8b1095\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=227_\n", "url": "https://github.com/google/guice/issues/227", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:05:45", "closed": "2014-07-07 18:05:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Allow nesting injectors", "body": "_From [marko.kocic](https://code.google.com/u/100160664671025158830/) on August 02, 2008 17:38:24_\n\nIt would be usefull if it would be possible to create new Injector which\nwill inherit all bindings from its parent parent injector and override all\ndefined in its own modules.\n\nExample usage could look something like this:\n\nInjectot child = Guice.inheritInjector(parentInector, module1, module2);\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=226_\n", "url": "https://github.com/google/guice/issues/226", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:05:43", "closed": "2014-07-07 18:05:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "guice-assistedinject does not inject classes with default-constructors", "body": "_From [gili.tzabari](https://code.google.com/u/104133752163818915509/) on July 24, 2008 03:24:53_\n\nFactoryProvider.paramCanBeInjected(Parameter, Injector) is not\nsophisticated enough, returning false for a whole spectrum of classes that\nGuice *can* inject properly.\n\nFor example, if a class is not bound using Binder but it contains a default\nconstructor this method returns false even though Guice knows how to inject\nit. If a class constructor contains a non-default constructor whose\nparameters are all injectable it is also okay but this method returns false\nagain.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=224_\n", "url": "https://github.com/google/guice/issues/224", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:05:38", "closed": "2014-07-07 18:05:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "cannot build", "body": "_From [nada.amin](https://code.google.com/u/117029138208879756928/) on July 23, 2008 12:01:12_\n\nWhen I ran ant in the trunk, I can the following error:\n\ncompile:\n&nbsp;&nbsp;&nbsp;&nbsp;[mkdir] Created dir: /home/nadaa/guice/google-guice-read-only/build/classes\n&nbsp;&nbsp;&nbsp;&nbsp;[javac] Compiling 144 source files to\n/home/nadaa/guice/google-guice-read-only/build/classes\n&nbsp;&nbsp;&nbsp;&nbsp;[javac]\n/home/nadaa/guice/google-guice-read-only/src/com/google/inject/InjectorImpl.java:359:\nreference to visit is ambiguous, both method\nvisit(com.google.inject.spi.ConstantBinding&lt;? extends T&gt;) in\ncom.google.inject.spi.BindingVisitor&lt;capture#853 of ? super T&gt; and method\nvisit(com.google.inject.spi.ConvertedConstantBinding&lt;? extends T&gt;) in\ncom.google.inject.spi.BindingVisitor&lt;capture#853 of ? super T&gt; match\n&nbsp;&nbsp;&nbsp;&nbsp;[javac]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bindingVisitor.visit(this);\n&nbsp;&nbsp;&nbsp;&nbsp;[javac]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ^\n&nbsp;&nbsp;&nbsp;&nbsp;[javac] Note:\n/home/nadaa/guice/google-guice-read-only/src/com/google/inject/internal/Errors.java\nuses unchecked or unsafe operations.\n&nbsp;&nbsp;&nbsp;&nbsp;[javac] Note: Recompile with -Xlint:unchecked for details.\n&nbsp;&nbsp;&nbsp;&nbsp;[javac] 1 error\n\nBUILD FAILED\n/home/nadaa/guice/google-guice-read-only/common.xml:16: Compile failed; see\nthe compiler error output for details.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=223_\n", "url": "https://github.com/google/guice/issues/223", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:05:36", "closed": "2014-07-07 18:05:37", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NPE at com.google.inject.InjectorImpl$LateBoundConstructor.get()", "body": "_From [gili.tzabari](https://code.google.com/u/104133752163818915509/) on July 23, 2008 11:14:43_\n\nThis bug was reproduced against guice \"snapshot20080713\"\n\nRepro steps:\n\nCheck out warp-servlet/tags/warp-servlet-0.9_1 and run \"ant assemble.jar\".\nThe build will fail because InjectorImpl.java:478 throws a\nNullPointerException. The full stack-trace follows:\n\nFAILED: continueConvAcrossRequests\ncom.google.inject.ProvisionException: Guice provision errors:\n\n&nbsp;&nbsp;&nbsp;1) Error at [unknown source]:\n&nbsp;&nbsp;&nbsp;&nbsp;Error in custom provider, java.lang.NullPointerException\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while locating\ncom.wideplay.warp.servlet.conversation.CookieContinuationsTest$TestConvObject\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;1 error[s]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$8.get(InjectorImpl.java:1015)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getInstance(InjectorImpl.java:1042)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.wideplay.warp.servlet.conversation.CookieContinuationsTest$3.doFilter(CookieContinuationsTest.java:200)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.wideplay.warp.servlet.FilterChainInvocation.doFilter(FilterChainInvocation.java:54)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.wideplay.warp.servlet.ManagedFilterPipeline.dispatch(ManagedFilterPipeline.java:50)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.wideplay.warp.servlet.WebFilter.doFilter(WebFilter.java:64)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.wideplay.warp.servlet.conversation.CookieContinuationsTest.continueConvAcrossRequests(CookieContinuationsTest.java:103)\n&nbsp;&nbsp;&nbsp;Caused by: java.lang.NullPointerException\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InjectorImpl$LateBoundConstructor.get(InjectorImpl.java:478)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter$1.call(ProviderToInternalFactoryAdapter.java:43)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:1065)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProviderToInternalFactoryAdapter.get(ProviderToInternalFactoryAdapter.java:40)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.wideplay.warp.servlet.conversation.ConversationManagerImpl.getAndPutIfAbsent(ConversationManagerImpl.java:63)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.wideplay.warp.servlet.Servlets$5$1.get(Servlets.java:205)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.InternalFactoryToProviderAdapter.get(InternalFactoryToProviderAdapter.java:47)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$8$1.call(InjectorImpl.java:1004)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:1057)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$8.get(InjectorImpl.java:998)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;... 27 more\n&nbsp;&nbsp;&nbsp;... Removed 21 stack frames\n\nIt's not clear to me what this test is doing wrong. Guice should throw a\ncleaner error message.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=222_\n", "url": "https://github.com/google/guice/issues/222", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:05:34", "closed": "2014-07-07 18:05:36", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Objects.assertNoNulls performs a JVM-wide lock", "body": "_From [martin.vysny](https://code.google.com/u/109438976760034684863/) on July 23, 2008 10:29:29_\n\nThe following line:\n\nif ((\"I'm a bad hack\".equals(\n&nbsp;&nbsp;&nbsp;System.getProperty(\"guice.allow.nulls.bad.bad.bad\")))) {\n\nperforms a System.getProperty invocation, which in turn invokes get() on\nits static field props. The get() method is synchronized and thus\neffectively forms a lock, exclusive on the entire JVM. This negatively\naffects multi-thread injection performance as it is invoked transitively\nfrom InjectorImpl.getInstance().\nThis behaviour was observed on WebSphere on IBM Java 5 but is probably\npresent in SUN's java as well.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=221_\n", "url": "https://github.com/google/guice/issues/221", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:05:32", "closed": "2014-07-07 18:05:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Support Guice extensions for Maven", "body": "_From [inder123](https://code.google.com/u/inder123/) on July 17, 2008 08:00:52_\n\nIdeally, you would get these published in the maven central repository. \n\nBut since that takes too much effort, how about just publishing it under\nthis project itself. See how Google Gson project does it. For it, the\nrepository is available at http://google-gson.googlecode.com/svn/mavenrepo/ Also see the pom.xml for the gson. We just run \n\nmvn package\nmvn source:jar\nmvn javadoc:jar\nmvn assembly:assembly\nmvn deploy \n\nand then cd ../mavenrepo/com/google/code/gson/gson and add new files to\nsubersion. This gets the new releases published under our maven2\nrepository. You can follow a similar process to publish these locally. Thanks.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=219_\n", "url": "https://github.com/google/guice/issues/219", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:04:45", "closed": "2014-07-07 18:05:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Guice dependencies not specified correctly in maven pom", "body": "_From [rfciii](https://code.google.com/u/rfciii/) on June 24, 2008 10:26:09_\n\nGuice's dependency on the aopalliance jar is listed in guice maven pom\ninside the dependencyManagement element but is not listed outside of it in\na top-level dependencies element.&nbsp;&nbsp;This causes maven projects which declare\na dependency on guice to transatively resolve the aopalliance jar and\ncauses a class not found exception in client programs which work in a way\nthat require the aopalliance classes.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=215_\n", "url": "https://github.com/google/guice/issues/215", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:03:15", "closed": "2014-07-07 18:03:16", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Register additional scope and binding annotation during binding phase", "body": "_From [sven.linstaedt](https://code.google.com/u/108307716320526657255/) on June 24, 2008 06:09:45_\n\nRelating to issue #70 it would also be nice, if one could use 3rd party\nframework annotations such as javax.ejb.Stateful as scope or binding\nannotations, without being able to annotate them directly with\nScopeAnnotation or BindingAnnotation.\n\nThis could be done by registering additional scope and binding annotation\nduring binding phase:\n\nbindScope(SessionScoped.class, CustomScopes .SESSION);\nbind(Service.class).annotatedWith(Blue.class).to(SessionImpl.class);\n\nIn the example SessionScoped.class becomes registered as a scope annotation\nand Blue.class as a binding annotation, so error reporting of multiple\nscope or binding annotation usage is still consistently enabled.\n\nAny suggestions on this one?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=214_\n", "url": "https://github.com/google/guice/issues/214", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:03:13", "closed": "2014-07-07 18:03:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "com.google.inject.util.Providers.of() does not inject dependencies into it's instance", "body": "_From [sven.linstaedt](https://code.google.com/u/108307716320526657255/) on June 23, 2008 06:20:40_\n\nNot very important, but one pitfall less for developers:\n\nIt would be nice, if the above mentioned Provider factory method for single\ninstances would inject dependencies via Injector.injectMembers() e.g. to\nit's instance. Because the returned provider is subject to DI, I was\nexpecting this applies to the given instance too.\n\npublic final class Providers\n{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static &lt;T&gt; Provider&lt;T&gt; of(final T instance)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Provider&lt;T&gt;()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public T get()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return instance;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;void injectMembers(Injector injector)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;injector.injectMembers(instance);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private Providers()\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=212_\n", "url": "https://github.com/google/guice/issues/212", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported", "wontfix"], "created": "2014-07-07 18:03:05", "closed": "2014-07-07 18:03:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ConstructorInjector.java:105 should indicate exception cause", "body": "_From [gili.tzabari](https://code.google.com/u/104133752163818915509/) on June 17, 2008 03:15:02_\n\nConstructorInjector.java:105 catches a NoSuchMethodException and constructs\nthe following kind of exception message:\n\ncom.google.inject.ConfigurationException: Error at\nMyClass.&lt;init&gt;(MyClass.java:65) Could not find a suitable constructor in\nMyClass. Classes must have either one (and only one) constructor annotated\nwith `@`Inject or a zero-argument constructor.\n\nThat's fine and well, but if the messages included NoSuchMethodException as\nits \"cause\" it would really help me track down the underlying problem. As\nfar as I can see, MyClass does exactly what the exception message is asking\nfor :(\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=210_\n", "url": "https://github.com/google/guice/issues/210", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:03:01", "closed": "2014-07-07 18:03:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Exceptionhandling during requestStaticInjection phase?", "body": "_From [sven.linstaedt](https://code.google.com/u/108307716320526657255/) on June 16, 2008 07:17:30_\n\nappears in: current trunk revision 523 Is there any information available, how Guice handles exception during the\nrequestStaticInjection phase?\n\nAs far as I have experienced the problem, the exceptions in this phase are\nsilently ignored. This seems to be consistent with InjectorBuilder.build(),\nwhere errors.throwCreationExceptionIfErrorsExist() is done right before\nfulfillInjectionRequests().\n\nDue to static injection is often used for post initialization, I believe\nGuice should forward this kind of post initialization exception(s) to the\napplication by throwing some kind of PostInitializationException.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=209_\n", "url": "https://github.com/google/guice/issues/209", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:59", "closed": "2014-07-07 18:03:00", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Guice references invalid class \"com.google.inject.asm.util.TraceClassVisitor()\"", "body": "_From [A.E.MacSuibhne](https://code.google.com/u/100091882803993348797/) on June 12, 2008 10:47:46_\n\nIn net.sf.cglib.core.DebuggingClassWriter there is a call to\nClass.forName(\"org.objectweb.asm.util.TraceClassVisitor\").&nbsp;&nbsp;After the\njarjar transformation for Guice this becomes\nClass.forName(\"com.google.inject.cglib.asm.util.TraceClassVisitor\").&nbsp;&nbsp;This\nclass does not exist, and this spooks some OSGi implementations (which is\nhow I found it).&nbsp;&nbsp;This bug is sorta inherited from cglib-nodep, which has\nan analogous problem in its attempt to inline org.objectweb.asm -- in that\ncase the unresolveable class is net.sf.cglib.asm.util.TraceClassVisitor().\n&nbsp;This&nbsp;isn't&nbsp;an&nbsp;issue&nbsp;in&nbsp;the&nbsp;non-nodep&nbsp;cglib,&nbsp;since&nbsp;the&nbsp;class&nbsp;name&nbsp;reverts\nto its original org.objectweb.asm.util.TraceClassVisitor(), which can be\nresolved correctly so long as the asm-utils jar is available.&nbsp;&nbsp;However,\nafter the jarjar transformation into the com.google.inject namespace, the\nrenamed class is again no longer resolvable, effectively reimplementing the\noriginal cglib-nodep bug.&nbsp;&nbsp;The simplest fix is probably to add\nasm-util-3.1.jar to the call to jarjar, thus bringing the asm.util classes\ninto the com.google.inject class hierarchy.&nbsp;&nbsp;n.b. this will only work in\nthe current tree, fixing this for 1.0 would require repackaging cglib-nodep\nitself with asm-util.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=208_\n", "url": "https://github.com/google/guice/issues/208", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:02:55", "closed": "2014-07-07 18:02:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Guice + Wildcard types for Providers would be handy", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on June 10, 2008 16:39:25_\n\nFrom zorzella --\n\nSuppose you're in this situation - Guice doesn't like the wildcard, but you can't pass a \nProvider&lt;Bar&gt; to Ifc.a().\n&nbsp;&nbsp;public interface Ifc {\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject void a(Provider&lt;? extends Foo&gt; fooProvider);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;\n&nbsp;&nbsp;interface Foo {}\n&nbsp;&nbsp;interface Bar extends Foo {}\n&nbsp;&nbsp;\n&nbsp;&nbsp;public void test() {\n&nbsp;&nbsp;&nbsp;&nbsp;Provider&lt;Bar&gt; barProvider = Providers.&lt;Bar&gt;of(new Bar() {});\n&nbsp;&nbsp;&nbsp;&nbsp;Ifc ifc = ...;\n&nbsp;&nbsp;&nbsp;&nbsp;ifc.a(barProvider); // requires wildcard\n&nbsp;&nbsp;}\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=207_\n", "url": "https://github.com/google/guice/issues/207", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:54", "closed": "2014-07-07 18:02:55", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "2.0 Release", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on June 09, 2008 03:07:16_\n\nTargeted for summer 2008. Alongside closing issues, we need to finalize new API and Javadoc and \nget quite comfortable with our new names.\n\nWe need to figure out a release strategy for Guice extensions. For example, we plan to replace \nassistedinject with something more ambitious in a future release. Perhaps just give 'em a 'contrib' \nsubpackage?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=206_\n", "url": "https://github.com/google/guice/issues/206", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:52", "closed": "2014-07-07 18:02:53", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Unify commands and Binder SPI", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on June 09, 2008 03:02:45_\n\nRename Command to Element, and unify BindCommand and Binding.\n\nGetting this right is hard. \n\nCommands don't always know their scopes. They don't know the linked bindings. We can have \nuntargetted commands, that are later resolved via `@`ProvidedBy etc.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=205_\n", "url": "https://github.com/google/guice/issues/205", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:51", "closed": "2014-07-07 18:02:52", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Unable to compile guice under JDK 1.6", "body": "_From [abashev](https://code.google.com/u/105940686643805826148/) on June 05, 2008 07:34:44_\n\nWhen trying to compile guice from rev 509 under Windows + JDK 1.6.0_06 I\ngettin' this message\n\n&nbsp;&nbsp;&nbsp;&nbsp;[javac]\nC:\\guice-snapshot\\trunk\\src\\com\\google\\inject\\InjectorImpl.java:419:\nreference to visit is ambiguous, both m\nethod visit(com.google.inject.spi.ConstantBinding&lt;? extends T&gt;) in\ncom.google.inject.spi.BindingVisitor&lt;capture#839 of ?\n&nbsp;super&nbsp;T&gt;&nbsp;and&nbsp;method&nbsp;visit(com.google.inject.spi.ConvertedConstantBinding&lt;?\nextends T&gt;) in com.google.inject.spi.Binding\nVisitor&lt;capture#839 of ? super T&gt; match\n&nbsp;&nbsp;&nbsp;&nbsp;[javac]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bindingVisitor.visit(this);\n\nFrom JDK 1.5.0_15 it works fine.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=204_\n", "url": "https://github.com/google/guice/issues/204", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:02:49", "closed": "2014-07-07 18:02:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Construction interceptors", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on June 05, 2008 03:48:40_\n\nThe elevator pitch - give classes a hook to introspect a type at injector creation time. Then \nwhenever an instance of that type is instantiated, the classes get a callback. This can be used to \nimplement arbitrary APIs (such as EJB) on top of Guice.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=203_\n", "url": "https://github.com/google/guice/issues/203", "user": "gissuebot", "labels": ["Milestone-Release2.1", "Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:02:47", "closed": "2014-07-07 18:02:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Binder.requestInjection(Object)", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on May 30, 2008 16:30:43_\n\nLike Binder.requestStaticInjection, but for an instance.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=202_\n", "url": "https://github.com/google/guice/issues/202", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:46", "closed": "2014-07-07 18:02:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Guice leaks permgen space", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on May 23, 2008 13:49:55_\n\nCalling this method leaks memory - approximately 2Kb worth:\n&nbsp;&nbsp;public void leakMemory() {\n&nbsp;&nbsp;&nbsp;&nbsp;Guice.createInjector(new AbstractModule() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void configure() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bindInterceptor(Matchers.any(), Matchers.any(), new MethodInterceptor() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Object invoke(MethodInvocation methodInvocation) throws Throwable {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return methodInvocation.proceed();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}).getInstance(A.class);\n&nbsp;&nbsp;}\n\nWe could fix this problem by using a private classloader for cglib classes created by Guice. That \nshould make the generated subclasses of A.class eligible for garbage collection once the \noriginating injector and all instances go out of scope.\n\nThis problem isn't as much a big deal unless users are creating lots of injectors. But we tend to \nbe encouraging that pattern with hierarchical injectors etc.\n\nnet.sf.cglib.core.CodeGenerationException: java.lang.reflect.InvocationTargetException--&gt;null\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:237)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:377)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at net.sf.cglib.proxy.Enhancer.createClass(Enhancer.java:317)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ProxyFactory.createConstructionProxy(ProxyFactory.java:159)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ProxyFactory$1.create(ProxyFactory.java:61)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ProxyFactory$1.create(ProxyFactory.java:60)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.internal.ReferenceCache.create(ReferenceCache.java:53)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at \ncom.google.inject.internal.AbstractReferenceCache.internalCreate(AbstractReferenceCache.java:5\n9)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.internal.AbstractReferenceCache.get(AbstractReferenceCache.java:116)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ProxyFactory.get(ProxyFactory.java:215)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at \ncom.google.inject.RuntimeReflectionFactory$RuntimeReflection.getConstructionProxy(RuntimeRe\nflectionFactory.java:45)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ConstructorInjector.&lt;init&gt;(ConstructorInjector.java:38)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$9.create(InjectorImpl.java:1014)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$9.create(InjectorImpl.java:1005)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.internal.ReferenceCache.create(ReferenceCache.java:53)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at \ncom.google.inject.internal.AbstractReferenceCache.internalCreate(AbstractReferenceCache.java:5\n9)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.internal.AbstractReferenceCache.get(AbstractReferenceCache.java:116)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getConstructor(InjectorImpl.java:1175)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$LateBoundConstructor.bind(InjectorImpl.java:578)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ClassBindingImpl.initialize(ClassBindingImpl.java:45)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.initializeBinding(InjectorImpl.java:511)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.createBindingFromType(InjectorImpl.java:496)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.createBindingFromType(InjectorImpl.java:490)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.createBindingJustInTime(InjectorImpl.java:717)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getJitBindingImpl(InjectorImpl.java:255)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getBindingOrThrow(InjectorImpl.java:191)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getInternalFactory(InjectorImpl.java:722)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getProviderOrThrow(InjectorImpl.java:1094)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getProvider(InjectorImpl.java:1125)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getProvider(InjectorImpl.java:1090)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getInstance(InjectorImpl.java:1137)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.MemoryLeakinessTest.leakMemory(MemoryLeakinessTest.java:49)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.MemoryLeakinessTest.testLeakMemory(MemoryLeakinessTest.java:35)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at \nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)\nCaused by: java.lang.reflect.InvocationTargetException\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sun.reflect.GeneratedMethodAccessor1.invoke(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at \nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at net.sf.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:384)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:219)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;... 48 more\nCaused by: java.lang.OutOfMemoryError: PermGen space\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.ClassLoader.defineClass1(Native Method)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang...\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=200_\n", "url": "https://github.com/google/guice/issues/200", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-High", "bug", "imported"], "created": "2014-07-07 18:02:39", "closed": "2014-07-07 18:02:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Stage.PRODUCTION doesn't load @Singletons eagerly", "body": "_From [sberlin](https://code.google.com/u/sberlin/) on May 14, 2008 22:00:46_\n\nThat is, given...\n\n&nbsp;&nbsp;void testAnnotatedSingletonEagerlyLoads() {\n&nbsp;&nbsp;&nbsp;&nbsp;Guice.createInjector(Stage.PRODUCTION, new AbstractModule() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void configure() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(Hoo.class).to(Har.class);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(1, Har.count);\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;static interface Hoo {}\n&nbsp;&nbsp;`@`Singleton\n&nbsp;&nbsp;static class Har implements Hoo {\n&nbsp;&nbsp;&nbsp;&nbsp;static int count = 0;\n&nbsp;&nbsp;&nbsp;&nbsp;public Har() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n\n.... fails.&nbsp;&nbsp;(Har.count == 0)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=199_\n", "url": "https://github.com/google/guice/issues/199", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:36", "closed": "2014-07-07 18:02:37", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ProvisionException isn't serializable", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on May 09, 2008 23:42:48_\n\nDue to InjectionPoint.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=198_\n", "url": "https://github.com/google/guice/issues/198", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:34", "closed": "2014-07-07 18:02:35", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Compilation error involving generics in InjectorImpl.java", "body": "_From [typrase](https://code.google.com/u/111074496453683892757/) on May 08, 2008 20:47:25_\n\nUsing JDK 6 and running the build script for Guice, I get\n\ncompile:\nCreated dir: /space/src/guice/build/classes\nCompiling 149 source files to /space/src/guice/build/classes\n/space/src/guice/src/com/google/inject/InjectorImpl.java:467: reference to\nvisit is ambiguous, both method\nvisit(com.google.inject.spi.ConstantBinding&lt;? extends T&gt;) in\ncom.google.inject.spi.BindingVisitor&lt;capture#676 of ? super T&gt; and method\nvisit(com.google.inject.spi.ConvertedConstantBinding&lt;? extends T&gt;) in\ncom.google.inject.spi.BindingVisitor&lt;capture#676 of ? super T&gt; match\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bindingVisitor.visit(this);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^\n1 error\n\nNot sure exactly what this means but one plausible change that javac\naccepts is this:\n\nbindingVisitor.visit((ConstantBinding&lt;T&gt;) this);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^^^^^^^^^^^^^^^^^^^^\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=197_\n", "url": "https://github.com/google/guice/issues/197", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:02:32", "closed": "2014-07-07 18:02:34", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Race condition in cglib MethodProxy.invokeSuper() causes wrong method invocation", "body": "_From [juha.mynttinen](https://code.google.com/u/105290623397027910553/) on May 06, 2008 03:57:46_\n\nThis Guice discussion group thread describes a problem with Guice in\nheavily concurrent usage: http://groups.google.com/group/google-guice/browse_thread/thread/94e681aa7201dc0b/8eb5ca1e91b18298?lnk=gst&q=cglib#8eb5ca1e91b18298 Basically the problem is that the AOP functionality in Guice may end up\ncalling a wrong method in highly concurrent usage, which normally causes a\nClassCastException.\n\nI have witnessed the problem in load tests.\n\nThere's a fix the abovementioned thread, personally I haven't verified that\nthe fix works.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=196_\n", "url": "https://github.com/google/guice/issues/196", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:30", "closed": "2014-07-07 18:02:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "\"Who's calling\" ability to receive the object that requesting injection.", "body": "_From [dh.evolutionnext](https://code.google.com/u/103186955091615183734/) on April 24, 2008 14:23:07_\n\nSo, I have been trying to develop a frame scope. I have\ntinkered with ideas to create such a scope, and realized that having a\n\"Who's calling\" object would be best thing.\n\npublic class SwingScopes {\n&nbsp;&nbsp;&nbsp;&nbsp;public static final Scope FRAME = new Scope() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public &lt;T&gt; Provider&lt;T&gt; scope(final Key&lt;T&gt; key, final\nProvider&lt;T&gt; creator, final Object source) {&nbsp;&nbsp;//Note: Source is the object\nthat is requesting the injection\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return provider;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public String toString() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return CustomScopes .class.getSimpleName()+\".FRAME\";\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;};\n\n}\n\nReason for this is under swing development, we can determine the\nobject requiring it, and make appropriate decision as to what object\nthe Provider should provide. ;) There can be other reasons to make\nthis available. Let me know.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=195_\n", "url": "https://github.com/google/guice/issues/195", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:02:29", "closed": "2014-07-07 18:02:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Provide guice-servlet.jar in Maven repository", "body": "_From [inder123](https://code.google.com/u/inder123/) on April 21, 2008 09:22:36_\n\nThe Guice tutorial talks about ServletModule and all the other goodies, but\nthe associated guice-servlet.jar is no where to be found. Can you create a\njar file and post it prominently as a download, and also provide it under\nthe maven2 repository? Thanks.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=194_\n", "url": "https://github.com/google/guice/issues/194", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:02:28", "closed": "2014-07-07 18:02:28", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "GPL code in the project", "body": "_From [tkd.simon](https://code.google.com/u/107607119369606346888/) on April 17, 2008 14:07:45_\n\nI noticed that there is 1 library distributed with guice-1.0-src.zip that\nis actually a GPL project.\n\nthis file jarjar-0.9.jar inside \\lib\\build is actually from here http://sourceforge.net/projects/jarjar/ and listed as GPL.\n\nWill this make the whole thing GPL as well?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=193_\n", "url": "https://github.com/google/guice/issues/193", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:02:25", "closed": "2014-07-07 18:02:27", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Interceptor ineffective on private method", "body": "_From [alexis.agahi](https://code.google.com/u/116068512816655320379/) on April 16, 2008 12:14:39_\n\n*Description*\nWhen using interceptor on private method such as:\n\n`@`Transactional\nprivate dosomething(){}\n\nthe interception is not performed.\n\nThis is understandable as the method inside interception class could not be\nable to call a private method.\n\n*Problem*\n\nYou are never warned about the ineffectiveness of the annotation. \nSo you might think everything is going ok ;)\n\n*Suggestion*\n\nCheck at injection or binding stage that interception annotations are not\nset on private methods.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=192_\n", "url": "https://github.com/google/guice/issues/192", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:02:24", "closed": "2014-07-07 18:02:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Allow to read parameters from Injection annotations", "body": "_From [aleksander.naszko](https://code.google.com/u/107102441379588854513/) on April 16, 2008 05:30:37_\n\nIt would be fine if Provider could read passed parameters in Inject\nrelated annotations. Example:\n\nclass Foo {\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject(Foo.class.getName()) Logger logger;\n\n}\n\nSo in Module.configure(Binder binder) I would have:\n\nPorivder pp = new Porivder() {\nLogger get() {\n&nbsp;return&nbsp;Logger.getLogger(getAnnotation(Inject.class).value());&nbsp;//\ngetAnnotation(..) would return instance of Inject annotation and I have\nmade asumption that Inject annotation has value()\n&nbsp;//&nbsp;or&nbsp;maybe?\n&nbsp;return&nbsp;Logger.getLogger(getInstancianisedClass().getName());\n// then in Foo class we have simple `@`Inject Logger logger;\n}\n}\n\nbind(Logger.class).toProvider(pp).in(SingletonForInstancianisedClass.class);\n\nThe same would be used for injecting WebServices:\n\n`@`Inject `@`WebService(\"ClockServiceLocation\") IClockService clockService;\n\nSo in Module.configure(Binder binder) I would have:\n\n&nbsp;&nbsp;&nbsp;final Properites prop = new Properties();\n&nbsp;&nbsp;\nprop.load(getClass().getClassLoader().getResourceAsStream(\"myconfig.properites\"));\n\nPorivder pp2 = new Porivder() {\nIClockService get() {\n&nbsp;&nbsp;&nbsp;return new ExampleDynamicClientWebServiceStub(&nbsp;&nbsp;&nbsp;prop.get(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\ngetAnnotation(WebService.class).value()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ).toString()        );\n}\n}\n\nbind(IClockService.class).annotatedWith(WebService.class).toProvider(pp2);\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=191_\n", "url": "https://github.com/google/guice/issues/191", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:02:22", "closed": "2014-07-07 18:02:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": " NullPointerException during Provider.get() call in an proxied instance", "body": "_From [sven.linstaedt](https://code.google.com/u/108307716320526657255/) on April 15, 2008 12:42:01_\n\nRegarding http://groups.google.com/group/google-guice/browse_thread/thread/fd1c65570f0f07ca I have created a scope, that wraps another scope and returns a provider,\nwhich itself returns a proxy instead of a instance. When calling the proxy\n(which wraps all calls to the original instance via MethodInterceptor) the\nproxy asks the wrapped scope for an instances and delegates the invocation\nto the appropriate method of instance. The NullPointerException occurs when\nthe proxy tries to retrieve the instance from the wrapped scope.\n\nTested with Guice 1.0\n\n**Binary attachments:** [test.zip](http://code.google.com/p/google-guice/issues/detail?id=190)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=190_\n", "url": "https://github.com/google/guice/issues/190", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:02:20", "closed": "2014-07-07 18:02:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NamedImpl class has package scope", "body": "_From [aleksander.naszko](https://code.google.com/u/107102441379588854513/) on April 15, 2008 06:21:52_\n\nIt is not possible to use NamedImpl because class has a package scope\n(constructor is public but class declaration not)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=189_\n", "url": "https://github.com/google/guice/issues/189", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:02:19", "closed": "2014-07-07 18:02:20", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Honor type parameters", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on March 12, 2008 17:13:32_\n\nExample:\n\n`@`Singleton\nclass Foo&lt;T&gt; {\n}\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=186_\n", "url": "https://github.com/google/guice/issues/186", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:09", "closed": "2014-07-07 18:02:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Errors when static members depend on pre-existing providers", "body": "_From [netdpb](https://code.google.com/u/102933438871860647050/) on March 11, 2008 11:26:08_\n\nIf a static member of type Foo is injected, and Foo is bound to a provider\ninstance, then the provider's get() method will be called before the\nprovider instance itself is injected.\n\nThis happens because BinderImpl.createInjector() does static injection\n(line 284) before injecting pre-existing instances (line 291).\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=185_\n", "url": "https://github.com/google/guice/issues/185", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:02:08", "closed": "2014-07-07 18:02:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Binding to an abstract class causes NullPointerException at getInstance() time", "body": "_From [dtm+external@google.com](https://code.google.com/u/115440404260700484642/) on March 06, 2008 07:51:27_\n\nConsider this code:\n\npackage com.google.guicetest;\n\nimport com.google.inject.*;\n\npublic class GuiceTest {\n\n&nbsp;&nbsp;public static abstract class AbstractThing {\n&nbsp;&nbsp;&nbsp;&nbsp;public void doIt() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;doItImpl();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;protected abstract void doItImpl();\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;public static abstract class AccidentallyAbstract extends AbstractThing {\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Override protected void doItImpl() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(\"AccidentallyAbstract\");\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n\n&nbsp;&nbsp;public static void main(String args[]) {\n&nbsp;&nbsp;&nbsp;&nbsp;Injector injector = Guice.createInjector(new AbstractModule() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Override public void configure() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(AbstractThing.class).to(AccidentallyAbstract.class);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;AbstractThing at = injector.getInstance(AbstractThing.class);\n&nbsp;&nbsp;&nbsp;&nbsp;at.doIt();\n&nbsp;&nbsp;}\n}\n\nRunning this produces:\n\nException in thread \"main\" java.lang.NullPointerException\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.BindingBuilderImpl$FactoryProxy.get(BindingBuilderImpl.java:299)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$9$1.call(InjectorImpl.java:708)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:747)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$9.get(InjectorImpl.java:702)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getInstance(InjectorImpl.java:728)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.guicetest.GuiceTest.main(GuiceTest.java:26)\n\nNow, I realize that the binding shouldn't have worked - after all,\nAccidentallyAbstract is an abstract class, and I didn't supply any binding\nfor AccidentallyAbstract.&nbsp;&nbsp;However, I should get an error saying \"no\nbinding for AccidentallyAbstract\" or \"AccidentallyAbstract is an abstract\nclass\", or something similar.&nbsp;&nbsp;I shouldn't get a NullPointerException.\n\nAlthough obvious in this case because I named the classes to highlight the\naccidental \"abstract\" declaration, the error can get very hard to debug and\nburied in other layers of Guice error messages if there's some other class\nwhich requires an AbstractThing as an injected constructor parameter.\n\nI would prefer to get an error message when creating the injector itself,\nrather than have this ticking bomb waiting to explode when I ask for an\ninstance of something that eventually requires an instance of AbstractThing.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=184_\n", "url": "https://github.com/google/guice/issues/184", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:07", "closed": "2014-07-07 18:02:08", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Scopes.SINGLETON uses a global lock", "body": "_From [zorzella](https://code.google.com/u/117480957020302471907/) on February 25, 2008 20:12:21_\n\nSee the code below. If you run it, it never returns. The issue (as detailed\nin the code) has to do with SINGLETON using Injector.class as a lock (i.e.\nnot expecting nested Injectors).\n# \n\nimport com.google.inject.Binder;\nimport com.google.inject.Guice;\nimport com.google.inject.Inject;\nimport com.google.inject.Module;\nimport com.google.inject.Scopes;\n\nimport junit.framework.TestCase;\n\npublic class SingletonIsBorkedTest extends TestCase {\n\n&nbsp;&nbsp;public void testBorked() throws Exception {\n&nbsp;&nbsp;&nbsp;&nbsp;Module module = new Module() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void configure(Binder binder) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binder.bind(Foo.class).in(Scopes.SINGLETON);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;// 1) SINGLETON uses Injector.class as a lock, so the main thread \n&nbsp;&nbsp;&nbsp;&nbsp;// will hold it until an instance of Foo is returned, but...\n&nbsp;&nbsp;&nbsp;&nbsp;Guice.createInjector(module).getInstance(Foo.class);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;\n&nbsp;&nbsp;public static final class Foo {\n\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject\n&nbsp;&nbsp;&nbsp;&nbsp;public Foo() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Thread thread = new Thread(new Bar());\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2) We start a new thread\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread.start();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 3) (and we'll wait for it to finish)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;thread.join();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (InterruptedException e) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new RuntimeException(e);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;public static final class Baz {}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;private static final class Bar implements Runnable {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void run() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Module module = new Module() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void configure(Binder binder) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binder.bind(Baz.class).in(Scopes.SINGLETON);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// that also wants to create a SINGLETON. Since Injector.class is \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the same for the whole JVM, we have a deadlock.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Guice.createInjector(module).getInstance(Baz.class);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;}\n\n}\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=183_\n", "url": "https://github.com/google/guice/issues/183", "user": "gissuebot", "labels": ["Component-Core", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:02:00", "closed": "2014-07-07 18:02:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Scope is ignored depending on binding order", "body": "_From [oliver.buchtala](https://code.google.com/u/106859162963374025390/) on February 18, 2008 16:28:23_\n\nI added a simplistic example:\nIf a class A aggregates some instances B that depend on C,\nC is treated as unscoped (though it was scoped) when C is bound later than \nA.\n\nNot a circular dependency (#15); maybe related to (#166).\n\nBye,\nOliver\n\n**Attachment:** [gist](https://gist.github.com/e60671e5baaa88075c2b)\n&nbsp;&nbsp;&nbsp;_[IgnoringScopeDueToBindingOrder.java](https://gist.githubusercontent.com/gissuebot/e60671e5baaa88075c2b/raw/7279f74869fc121a7eb281c4ffbde70cf574402d/IgnoringScopeDueToBindingOrder.java)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=182_\n", "url": "https://github.com/google/guice/issues/182", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:01:55", "closed": "2014-07-07 18:01:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Bindings to Singleton fails depending on the order of bindings", "body": "_From [oliver.buchtala](https://code.google.com/u/106859162963374025390/) on February 16, 2008 18:25:16_\n\nI attached a runnable code sample.\n\nI make use of (dedicated) modules that make (dedicated) bindings to \nSingleton. Unfortunately the order of those bindings can not be arbitrary.\nI.e., binding a class in Singleton having a parameter which is bound \nlater - but before contruction - will fail.\n\nWorkaround is to make those singleton bindings the very last. But this \nbreaks the ease of using my modules...\n\nThank you for this awesome framework.\n\n**Attachment:** [gist](https://gist.github.com/72404a9d02d15d0ac5e7)\n&nbsp;&nbsp;&nbsp;_[Main.java](https://gist.githubusercontent.com/gissuebot/72404a9d02d15d0ac5e7/raw/9f60cd5c9eb7b26fc0e1341eaeea18f9233c98a8/Main.java)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=181_\n", "url": "https://github.com/google/guice/issues/181", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:01:53", "closed": "2014-07-07 18:01:54", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "singleton scope should apply to the value as well as the key", "body": "_From [logan.johnson](https://code.google.com/u/101342417832033998532/) on February 07, 2008 12:49:37_\n\nThis may well be a bad idea, but I wanted to get it out there for discussion.\n\nSeveral times now I've done this:\n\nclass MyModule {\n\n&nbsp;&nbsp;&nbsp;public void bind() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(MyInterface.class).to(MyImplementation.class).in(SINGLETON);\n&nbsp;&nbsp;&nbsp;}\n\n}\n\nclass SomeWiringHelperOrSomething {\n\n&nbsp;&nbsp;&nbsp;`@`Inject\n&nbsp;&nbsp;&nbsp;public void connect(MyImplementation thisThing, SomeClass toThatThing) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// ...\n&nbsp;&nbsp;&nbsp;} \n}\n\nOf course, I end up with multiple instances of MyImplementation, because I\n*should* have done this:\n\n&nbsp;&nbsp;&nbsp;bind(MyImplementation.class).in(SINGLETON);\n&nbsp;&nbsp;&nbsp;bind(MyInterface.class).to(MyImplementation.class).in(SINGLETON);\n\nI've seen a few other people do this as well-- everyone at work who's\nworked with Guice, actually-- and it's pretty perplexing until you realize\nyou're looking at different instances of MyImplementation.\n\nThat being the case, can SINGLETON be made a special scope, in that binding\na key in SINGLETON implicitly binds the value in SINGLETON as well?&nbsp;&nbsp;I have\nyet to run into a case where I didn't want that to happen.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=180_\n", "url": "https://github.com/google/guice/issues/180", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:01:51", "closed": "2014-07-07 18:01:52", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Exceptions during injection of pre-existing instances are swallowed", "body": "_From [netdpb](https://code.google.com/u/102933438871860647050/) on February 06, 2008 14:46:40_\n\nThe CreationListener created by\nBindingBuilderImpl.registerInstanceForInjection catches Exception when\nthrown by Injector.injectMembers. It logs the error and adds it to the\nbinder's errorMessages, but swallows the exception.\n\nSo any errors that occur while injecting the members of pre-existing\ninstances are logged but do not prevent the injector from being created.\nThis means that Guice.createInjector can return an invalid injector, which\nwould cause problems later.\n\nThis could be fixed by moving the block at BinderImpl line 276 below the\nblock at line 291, but I'm not sure what else would have to move with it\n(maybe also line 281). (Should that block move below the preloading step at\nline 298 as well?)\n\nI think it could also be fixed by setting configurationErrorHandler to a\nRuntimeErrorHandler after line 281, but that would mean that the first such\nerror would cause a ConfigurationException to be thrown, instead of\nincluding those errors into a CreationException.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=179_\n", "url": "https://github.com/google/guice/issues/179", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:01:49", "closed": "2014-07-07 18:01:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Instances and providers must be bound in dependency order", "body": "_From [netdpb](https://code.google.com/u/102933438871860647050/) on February 04, 2008 12:56:35_\n\nInstances and providers bound with\nLinkedBindingBuilder&lt;T&gt;.toInstance(T)/toProvider(Provider&lt;? extends T&gt;)\nmust be bound in dependency order.\n\nBecause BinderImpl.createInjector injects the members of these instances\nand providers in binding order, if an earlier-bound instance/provider A\ndepends transitively on a later-bound instance/provider B, B may be used\nbefore it has been injected, which may cause a NullPointerException or\nother exception.\n\nIs it possible for the binder to determine a dependency graph and then\nautomatically order the instances/providers whose members it injects? If\nnot, this dependency-order constraint should be documented.\n\nThis is related to, but different from, issue 166 .\n\nI've attached a failing test.\n\n**Attachment:** [gist](https://gist.github.com/5f1c15d0618b6b923726)\n&nbsp;&nbsp;&nbsp;_[BinderOrderTest.java](https://gist.githubusercontent.com/gissuebot/5f1c15d0618b6b923726/raw/e00303258dbf7a847d1b3b94a11ed4300afd868e/BinderOrderTest.java)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=178_\n", "url": "https://github.com/google/guice/issues/178", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:01:47", "closed": "2014-07-07 18:01:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Provider methods circular dependency StackOverflowError", "body": "_From [robbie.vanbrabant](https://code.google.com/u/109863691881355018720/) on February 02, 2008 13:37:31_\n\nUsing a modified version of the current unit test.\n{{{\npackage chapter8.providermethods;\n\nimport java.lang.annotation.ElementType;\nimport java.lang.annotation.Retention;\nimport java.lang.annotation.RetentionPolicy;\nimport java.lang.annotation.Target;\n\nimport com.google.inject.Binder;\nimport com.google.inject.BindingAnnotation;\nimport com.google.inject.Guice;\nimport com.google.inject.Injector;\nimport com.google.inject.Key;\nimport com.google.inject.Module;\nimport com.google.inject.ProviderMethods;\nimport com.google.inject.Provides;\nimport com.google.inject.Singleton;\n\npublic class Main {\n&nbsp;&nbsp;&nbsp;&nbsp;public static void main(String[] args) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Injector injector = Guice.createInjector(new Module() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void configure(Binder binder) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binder.install(ProviderMethods.from(new Main()));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bob bob = injector.getInstance(Key.get(Bob.class, Sole.class));\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Provides\n&nbsp;&nbsp;&nbsp;&nbsp;Bob provideBob(final Dagny dagny) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Bob() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public String getName() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return \"A Bob\";\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Dagny getDaughter() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dagny;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Provides\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Singleton\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Sole\n&nbsp;&nbsp;&nbsp;&nbsp;Bob provideSoleBob(final Dagny dagny) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Bob() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public String getName() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return \"Only Bob\";\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Dagny getDaughter() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return dagny;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Provides\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Singleton\n&nbsp;&nbsp;&nbsp;&nbsp;Dagny provideDagny(final `@`Sole Bob bob) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Dagny() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int getAge() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return 1;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Bob getDad() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return bob;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;interface Bob {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String getName();\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Dagny getDaughter();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;interface Dagny {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int getAge();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Bob getDad();\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Retention(RetentionPolicy.RUNTIME)\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Target( { ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD })\n&nbsp;&nbsp;&nbsp;&nbsp;`@`BindingAnnotation\n&nbsp;&nbsp;&nbsp;&nbsp;`@`interface Sole {\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n}\n}}}\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=177_\n", "url": "https://github.com/google/guice/issues/177", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:01:46", "closed": "2014-07-07 18:01:46", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Cross module singletons (true singletons)", "body": "_From [mpetzsch](https://code.google.com/u/110540258037802954405/) on January 14, 2008 10:54:34_\n\nCurrently it is not possible to enforce that a certain instance be a\nsingleton across multiple modules in the same JVM.&nbsp;&nbsp;This is most visible in\na J2EE context where you have several instances (maybe of the same module)\nwhich are bound to create multiple injectors, or at least one for each\nentry-point; e.g. Web services, struts2, EJB.  \n\nWhen using a pool of resources which is finite for a JVM you may want to\nforce this finite allocation across multiple modules - for example if there\ncan only be 25 open handles to some native software.&nbsp;&nbsp;This could be done\nwith a singleton which manages a pool; however this singleton must\nobviously be single for the whole JVM, otherwise more than 25 handles could\nbe opened.\n\nIt would be great if a class could be bound as `@`TrueSingleton or bound in a\nscope which was available to all modules in the JVM (essentially a static\nscope).&nbsp;&nbsp;This would allow Guice management of true singletons.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=176_\n", "url": "https://github.com/google/guice/issues/176", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:01:44", "closed": "2014-07-07 18:01:45", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Providers are used before they are injected", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on January 03, 2008 12:18:06_\n\nI've checked in a testcase in ProviderInjectionTest.java to demonstrate\nthis problem.\n\nThe gist is that if I call bind(...).toProvider(myProvider), then Guice\nwill sometimes invoke myProvider.get() before myProvider has been injected. \n\nThis only happens when the result of myProvider.get() is needed at injector\ncreation time.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=174_\n", "url": "https://github.com/google/guice/issues/174", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:01:41", "closed": "2014-07-07 18:01:42", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make objects with bound interceptors serializable", "body": "_From [phjardas](https://code.google.com/u/117999805272314766579/) on December 20, 2007 05:49:53_\n\nWe are using Beehive page flow controllers which are being injected with\nservices. Since we rely on session replication the page flow controllers\nwill eventually be serialized. Two problems arise:\n\n1) Since the injected services can not be serializable themselves, they are\nmarked as transient fields, that naturally tend to be null after\ndeserialization. How do I re-inject dependencies after deserialization?\n(See issue #172 for this issue).\n\n2) Any method interceptors bound to objects being serialized will cause the\nserialization to fail with a NotSerializableException:\nInterceptorStackCallback. This is the main issue of this ticket.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=173_\n", "url": "https://github.com/google/guice/issues/173", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:01:40", "closed": "2014-07-07 18:01:41", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Enable injection after deserialization", "body": "_From [phjardas](https://code.google.com/u/117999805272314766579/) on December 20, 2007 05:45:18_\n\nWe are using Beehive page flow controllers which are being injected with\nservices. Since we rely on session replication the page flow controllers\nwill eventually be serialized. Two problems arise:\n\n1) Since the injected services can not be serializable themselves, they are\nmarked as transient fields, that naturally tend to be null after\ndeserialization. How do I re-inject dependencies after deserialization?\nThis is the main issue of this ticket.\n\n2) Any method interceptors bound to objects being serialized will cause the\nserialization to fail with a NotSerializableException:\nInterceptorStackCallback. I probably will file a seperate ticket for this\nissue.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=172_\n", "url": "https://github.com/google/guice/issues/172", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported", "wontfix"], "created": "2014-07-07 18:01:37", "closed": "2014-07-07 18:01:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "bind(SomeConcreteType.class).toConstructor()", "body": "_From [wyuenho](https://code.google.com/u/102550882118164765418/) on December 18, 2007 13:42:42_\n\nRight now bind(Impl.class).to(Impl.class) gives an error saying \"Binding\npoints to itself\", but that's actually allowed by just calling\nbind(Impl.class). bind(Impl.class).to(Impl.class) should just work as expected.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=171_\n", "url": "https://github.com/google/guice/issues/171", "user": "gissuebot", "labels": ["Milestone-Release2.1", "Priority-Low", "bug", "imported"], "created": "2014-07-07 18:01:34", "closed": "2014-07-07 18:01:36", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Accessing Guice Injector from SessionListener", "body": "_From [chris.mathews](https://code.google.com/u/101852664862369411921/) on December 17, 2007 11:55:20_\n\nWe are writing an application using Struts 2 + Guice.&nbsp;&nbsp;We are using the\nGuice Struts 2 plugin of course and everything has been working great...\nuntil this morning when I tried to write a SessionListener.&nbsp;&nbsp;Clearly, the\nlifecycle of the SessionListener is not managed by Struts and therefore\nisn't going to go thru the GuiceObjectFactory.&nbsp;&nbsp;At first I figured I would\njust access the GuiceObjectFactory directly via\nObjectFactory.getObjectFactory() but this is dependent on a thread-local\nwhich is not available in the context of the SessionListener.&nbsp;&nbsp;Bummer...\n\nSo how do I get a hold of a \"global\" Guice Injector for cases like these? \nThis type of thing is easy to do in Spring but I couldn't find anything\nsimilar in Guice.&nbsp;&nbsp;The options I see are:\n\n1) Wire up Guice myself instead of using the Struts 2 Guice Plugin\n2) Extend the GuiceObjectFactory to make the instance available... almost\nlike a Singleton.&nbsp;&nbsp;Really just a variation on #1.\n3) ???\n\nThoughts?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=170_\n", "url": "https://github.com/google/guice/issues/170", "user": "gissuebot", "labels": ["Priority-Medium", "Struts2", "bug", "imported", "wontfix"], "created": "2014-07-07 18:01:32", "closed": "2014-07-07 18:01:34", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Just-in-time bindings cache isn't threadsafe", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on December 05, 2007 19:17:33_\n\nWe write to this map during Injector.getInstance() for a just-in-time binding that has not-yet been \nrequested, but the map is a bare HashMap with no synchronization.\n\nFor now, this is only a theoretical problem...\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=169_\n", "url": "https://github.com/google/guice/issues/169", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:01:31", "closed": "2014-07-07 18:01:31", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "VerifyError: \"Inconsistent stack height 1 != 2\" on Solaris, TPTP", "body": "_From [gstamp](https://code.google.com/u/115459475306224301049/) on November 25, 2007 20:40:41_\n\nFor full details see the following thread. http://groups.google.com/group/google-guice/browse_thread/thread/67b1b84962c1241 Specific version:\n\njava version \"1.6.0\"\nJava(TM) SE Runtime Environment (build 1.6.0-b105)\nJava HotSpot(TM) Server VM (build 1.6.0-b105, mixed mode)\n\non Solaris.\n\nError is :\n\njava.lang.VerifyError: (class:\ncom/sensis/ems/admin/pages/AnomaliesPage$$FastClassByGuice$$b73515e4,\nmethod: invoke signature:\n(ILjava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;) Inconsistent\nstack height 1 != 2\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Class.getDeclaredConstructors0(Native Method)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Class.privateGetDeclaredConstructors(Class.java:2389)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Class.getConstructor0(Class.java:2699)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Class.getDeclaredConstructor(Class.java:1985)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.cglib.core.ReflectUtils.getConstructor(ReflectUtils.java:244)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:220)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.cglib.reflect.FastClass$Generator.firstInstance(FastClass.java:76)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:231)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.cglib.reflect.FastClass$Generator.create(FastClass.java:64)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.util.GuiceFastClass.create(GuiceFastClass.java:38)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.util.GuiceFastClass.create(GuiceFastClass.java:30)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl$SingleMethodInjector.&lt;init&gt;(InjectorImpl.java:554)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl$5.create(InjectorImpl.java:360)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl$5.create(InjectorImpl.java:358)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl.addInjectorsForMembers(InjectorImpl.java:384)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl.addSingleInjectorsForMethods(InjectorImpl.java:356)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl.addInjectors(InjectorImpl.java:351)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl$4.create(InjectorImpl.java:332)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl$4.create(InjectorImpl.java:329)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.util.ReferenceCache.create(ReferenceCache.java:53)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.util.AbstractReferenceCache.internalCreate(AbstractReferenceCache.java:59)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.util.AbstractReferenceCache.get(AbstractReferenceCache.java:116)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl.injectMembers(InjectorImpl.java:672)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl$8.call(InjectorImpl.java:682)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl$8.call(InjectorImpl.java:681)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl.callInContext(InjectorImpl.java:747)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.InjectorImpl.injectMembers(InjectorImpl.java:680)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.sensis.ems.admin.pages.InjectingPage.onInit(InjectingPage.java:18)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net.sf.click.ClickServlet.processPage(ClickServlet.java:521)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net.sf.click.ClickServlet.handleRequest(ClickServlet.java:356)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;net.sf.click.ClickServlet.doGet(ClickServlet.java:280)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;javax.servlet.http.HttpServlet.service(HttpServlet.java:689)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.sensis.ems.common.RequestCleanupFilter.doFilter(RequestCleanupFilter.java:20)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;com.google.inject.servlet.GuiceFilter.doFilter(GuiceFilter.java:46)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:264)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.intercept.web.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:107)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.intercept.web.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:72)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.ui.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:110)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.providers.anonymous.AnonymousProcessingFilter.doFilter(AnonymousProcessingFilter.java:125)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.wrapper.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:81)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.ui.AbstractProcessingFilter.doFilter(AbstractProcessingFilter.java:217)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.ui.logout.LogoutFilter.doFilter(LogoutFilter.java:106)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.util.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:274)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;org.acegisecurity.context.HttpSessionContextIntegrationFilter.doFilter(HttpSessionContextIntegrationFilter.ja...\n\n**Binary attachments:** [AnomaliesPage$$FastClassByGuice$$b73515e4.class](http://code.google.com/p/google-guice/issues/detail?id=168)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=168_\n", "url": "https://github.com/google/guice/issues/168", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:01:24", "closed": "2014-07-07 18:01:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Binding out-of-order throws binding not found CreationException", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on November 20, 2007 16:57:09_\n\nI've checked in a test case that demonstrates the problem. \n\nDuring BinderImpl.createBindings, in some situations we're trying to verify\nthat some bindings exist. This fails if the binding has not yet been created.\n\nHere's the error message that is reported (but shouldn't be):\n\ncom.google.inject.CreationException: Guice configuration errors:\n\n1) Error at\ncom.google.inject.BindingOrderTest$BoundFirst.&lt;init&gt;(BindingOrderTest.java:36):\n&nbsp;Binding&nbsp;to&nbsp;com.google.inject.BindingOrderTest$BoundSecond&nbsp;not&nbsp;found.&nbsp;No\nbindings to that type were found.\n\n1 error[s]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.BinderImpl.createInjector(BinderImpl.java:465)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:96)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:69)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:59)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.BindingOrderTest.testBindingOutOfOrder(BindingOrderTest.java:27)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\nsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)\n\nThe hack workaround is to reorder modules and bind statements so that\neverything is ordered by dependencies.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=166_\n", "url": "https://github.com/google/guice/issues/166", "user": "gissuebot", "labels": ["Priority-Critical", "bug", "imported"], "created": "2014-07-07 18:01:18", "closed": "2014-07-07 18:01:20", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "matcher for annotation on class (not method)", "body": "_From [AaronJWhiteside](https://code.google.com/u/114976659901513010148/) on November 13, 2007 21:20:34_\n\nIt would be useful to match an annotation on the class, this comes in handy\nwhen intercepting the constructor (see issue #163 ) and finalize method (see issue #164 ).\n\nThis would allow a single annotation on the class level, and with the help\nof a method name matcher, allow one to intercept both the construct and\nfinalize method (without dedicated annotations per method/construct).\n\nSomething along the lines of..\n\nbinder.bindInterceptor(\nclassAnnotatedWith(XAnnotation.class), // Match class\ndefaultConstructor(), // Match method (in this case construct)\nnew MyConstructInterceptor() // The interceptor.\n);\n\nand\n\nbinder.bindInterceptor(\nclassAnnotatedWith(XAnnotation.class), // Match class\nmethodCalled(\"finalize\"), // Match method\nnew MyFinalizeInterceptor() // The interceptor.\n);\n\nOr is this crazy talk?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=165_\n", "url": "https://github.com/google/guice/issues/165", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:01:16", "closed": "2014-07-07 18:01:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "method name matcher", "body": "_From [AaronJWhiteside](https://code.google.com/u/114976659901513010148/) on November 13, 2007 21:11:40_\n\nIt would be useful to be able to match methods for interception based on\nmethod name (and/or param list).\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=164_\n", "url": "https://github.com/google/guice/issues/164", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:01:14", "closed": "2014-07-07 18:01:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "No way to bind a ConstructorInterceptor, bindInterceptor() expects an array of MethodInterceptor's", "body": "_From [AaronJWhiteside](https://code.google.com/u/114976659901513010148/) on November 13, 2007 20:14:59_\n\nThe supplied/packaged aopalliance.jar contains an interface\nConstructorInterceptor but the Binder provides no way to bind it to anything.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=163_\n", "url": "https://github.com/google/guice/issues/163", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:01:13", "closed": "2014-07-07 18:01:13", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "ambiguous method invoke", "body": "_From [lee.chaoqun](https://code.google.com/u/lee.chaoqun@gmail.com/) on November 12, 2007 03:19:28_\n\nI checked out the source from subversion.When I built the project using\nant,there is a error:\n\n&nbsp;&nbsp;&nbsp;&nbsp;google-guice\\src\\com\\google\\inject\\InjectorImpl.java:39\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4: reference to visit is ambiguous, both method&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\nvisit(com.google.inject.spi.Cons\ntantBinding&lt;? extends T&gt;) in\ncom.google.inject.spi.BindingVisitor&lt;capture#122 of\n&nbsp;?&nbsp;super&nbsp;T&gt;&nbsp;and&nbsp;method\nvisit(com.google.inject.spi.ConvertedConstantBinding&lt;? ex\ntends T&gt;) in com.google.inject.spi.BindingVisitor&lt;capture#122 of ? super T&gt;\nmatc\nh\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bindingVisitor.visit(this);\n\nI use jdk 1.6.03.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=162_\n", "url": "https://github.com/google/guice/issues/162", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-High", "bug", "imported"], "created": "2014-07-07 18:01:11", "closed": "2014-07-07 18:01:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "User Guide not too helpful for getting started.", "body": "_From [stephen@kestle.homeip.net](https://code.google.com/u/106549195377375130668/) on November 05, 2007 18:16:25_\n\nThe user guide states \"For Guice to inject Client, we must either directly\nask Guice to create a Client instance for us, or some other class must have\nClient injected into it.\"\n\nIt had to search the internet to figure out that Guice.createInjector\nactually returned an injector, and that I could call\ninjector.getInstance(MyClass.class) to start up.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=161_\n", "url": "https://github.com/google/guice/issues/161", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:01:09", "closed": "2014-07-07 18:01:10", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Give an error if you bind to an invalid type.", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on October 25, 2007 19:54:53_\n\nFor example, Guice doesn't support binding to types with type variables.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=160_\n", "url": "https://github.com/google/guice/issues/160", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:01:08", "closed": "2014-07-07 18:01:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Injecting Clazz<?>", "body": "_From [blackgnezdo](https://code.google.com/u/102147512089042209005/) on October 24, 2007 16:47:15_\n\nGuice seems unable to inject Clazz&lt;?&gt; values. The example below\ndemonstrates a use case. The code was run with guice-1.0.\n\nA possible fix as discussed with Kevin is to treat bindings of\nClazz.class as providing `@`Inject Clazz&lt;?&gt;.\n\npackage com.example;\n\nimport com.google.inject.AbstractModule;\nimport com.google.inject.Guice;\nimport com.google.inject.Inject;\nimport com.google.inject.Injector;\nimport com.google.inject.Key;\nimport com.google.inject.TypeLiteral;\n\nimport junit.framework.TestCase;\n\npublic class GuiceCaptureTest extends TestCase {\n&nbsp;public&nbsp;void&nbsp;testAnyTypeCapture()&nbsp;throws&nbsp;Exception&nbsp;{\n&nbsp;&nbsp;&nbsp;Injector injector = Guice.createInjector(new Module());\n&nbsp;&nbsp;&nbsp;assertNotNull(injector.getInstance(&nbsp;&nbsp;// this works\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Key.&lt;Parameterized&lt;String&gt;&gt;get(new\nTypeLiteral&lt;Parameterized&lt;String&gt;&gt;() {})));\n&nbsp;&nbsp;&nbsp;assertNotNull(injector.getInstance(Foo.class).p); // this bombs,\nexception below\n&nbsp;}\n\n&nbsp;static&nbsp;class&nbsp;Module&nbsp;extends&nbsp;AbstractModule&nbsp;{\n&nbsp;&nbsp;&nbsp;`@`Override\n&nbsp;&nbsp;&nbsp;protected void configure() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This binding is useless because a TypeLiteral has to be fully\nspecified.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(new TypeLiteral&lt;Parameterized&lt;?&gt;&gt;() {})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.to(ParameterizedImpl.class);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(new TypeLiteral&lt;Parameterized&lt;String&gt;&gt;() {})\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.to(ParameterizedImpl.class);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// This is the proposed binding which doesn't work yet.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(Parameterized.class).to(ParameterizedImpl.class);\n&nbsp;&nbsp;&nbsp;}\n&nbsp;}\n\n&nbsp;interface&nbsp;Parameterized&lt;T&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;T check();\n&nbsp;}\n\n&nbsp;static&nbsp;class&nbsp;ParameterizedImpl&nbsp;implements&nbsp;Parameterized&lt;String&gt;&nbsp;{\n&nbsp;&nbsp;&nbsp;`@`Override\n&nbsp;&nbsp;&nbsp;public String check() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;\n&nbsp;&nbsp;&nbsp;}\n&nbsp;}\n\n&nbsp;static&nbsp;class&nbsp;Foo&nbsp;{\n&nbsp;&nbsp;&nbsp;private Parameterized&lt;?&gt; p;\n\n&nbsp;&nbsp;&nbsp;`@`Inject Foo(Parameterized&lt;?&gt; p) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.p = p;\n&nbsp;&nbsp;&nbsp;}\n&nbsp;}\n}\n\n/*\ncom.google.inject.ConfigurationException:\nError at com.example.GuiceCaptureTest$Foo.&lt;init&gt;(GuiceCaptureTest.java:47)\nBinding to\ncom.example.GuiceCaptureTest.com.example.GuiceCaptureTest$Parameterized&lt;?&gt;\nnot found.\nNo bindings to that type were found.\n&nbsp;at\ncom.google.inject.BinderImpl$RuntimeErrorHandler.handle(BinderImpl.java:426)\n&nbsp;at&nbsp;com.google.inject.AbstractErrorHandler.handle(AbstractErrorHandler.java:30)\n&nbsp;at&nbsp;com.google.inject.ErrorMessages.handleMissingBinding(ErrorMessages.java:46)\n&nbsp;at\ncom.google.inject.InjectorImpl$MissingDependencyException.handle(InjectorImpl.java:791)\n&nbsp;at\ncom.google.inject.ConstructorInjector.createParameterInjector(ConstructorInjector.java:66)\n&nbsp;at&nbsp;com.google.inject.ConstructorInjector.&lt;init&gt;(ConstructorInjector.java:38)\n&nbsp;at&nbsp;com.google.inject.InjectorImpl$7.create(InjectorImpl.java:601)\n&nbsp;at&nbsp;com.google.inject.InjectorImpl$7.create(InjectorImpl.java:594)\n&nbsp;at&nbsp;com.google.inject.util.ReferenceCache.create(ReferenceCache.java:53)\n&nbsp;at\ncom.google.inject.util.AbstractReferenceCache.internalCreate(AbstractReferenceCache.java:59)\n&nbsp;at\ncom.google.inject.util.AbstractReferenceCache.get(AbstractReferenceCache.java:116)\n&nbsp;at&nbsp;com.google.inject.InjectorImpl.getConstructor(InjectorImpl.java:765)\n&nbsp;at&nbsp;com.google.inject.InjectorImpl.getImplicitBinding(InjectorImpl.java:973)\n&nbsp;at&nbsp;com.google.inject.InjectorImpl.getInternalFactory(InjectorImpl.java:308)\n&nbsp;at&nbsp;com.google.inject.InjectorImpl.getProvider(InjectorImpl.java:693)\n&nbsp;at&nbsp;com.google.inject.InjectorImpl.getProvider(InjectorImpl.java:689)\n&nbsp;at&nbsp;com.google.inject.InjectorImpl.getInstance(InjectorImpl.java:728)\n&nbsp;at&nbsp;com.example.GuiceCaptureTest.testAnyTypeCapture(GuiceCaptureTest.java:17)\n*/\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=159_\n", "url": "https://github.com/google/guice/issues/159", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:01:06", "closed": "2014-07-07 18:01:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Guice does not look up constructors with generic types correctly", "body": "_From [Martin.Mauch](https://code.google.com/u/Martin.Mauch@gmail.com/) on October 22, 2007 16:27:56_\n\nI have the following class to be constructed (simplified):\n\npublic HPStreamAlgorithm(NewClusterDecider&lt;TPoint&gt; newClusterDecider) {\nthis.newClusterDecider = newClusterDecider;\n}\n\nThe implementing class for NewClusterDecider looks like this (simplified):\npublic class DriftAlignmentNewClusterDecider&lt;TPoint extends IValues&gt;\nimplements NewClusterDecider&lt;TPoint&gt; {\n...\n}\n\nWhen omitting the type parameter &lt;TPoint&gt; Guice constructs the\nHPStreamAlgorithm correctly, when using the type parameter it doesn't.\n\nI don't know if this is a bug or a feature, but it's not obvious that you\nhave to omit generics...\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=158_\n", "url": "https://github.com/google/guice/issues/158", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:01:05", "closed": "2014-07-07 18:01:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "profiling swing application with tptp", "body": "_From [eldzino](https://code.google.com/u/112372704469405528292/) on October 19, 2007 11:22:30_\n\nHi guys,\n\ntoday I tried to profile my Swing application with Eclipse TPTP profiler. I\nuse Java 6 as runtime. After configuring and starting I always get an\nexception after approx. 7seconds of run:\n\nException in thread \"AWT-EventQueue-0\" java.lang.AssertionError:\njava.lang.VerifyError: (class:\nsk/seges/corpis/trapas/gui/TransactionsFrame$$FastClassByGuice$$ee270b0f,\nmethod: invoke signature:\n(ILjava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;) Inconsistent\nstack height 2 != 1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getImplicitBinding(InjectorImpl.java:984)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.BindingBuilderImpl$ImplicitImplementation$1.run(BindingBuilderImpl.java:327)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.withDefaultSource(InjectorImpl.java:142)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.BindingBuilderImpl$ImplicitImplementation.notify(BindingBuilderImpl.java:325)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.BinderImpl.createInjector(BinderImpl.java:264)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:79)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:53)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.Guice.createInjector(Guice.java:43)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sk.seges.corpis.trapas.TrapasApplication.startup(TrapasApplication.java:29)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at org.jdesktop.application.Application$1.run(Application.java:174)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.awt.event.InvocationEvent.dispatch(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.awt.EventQueue.dispatchEvent(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.awt.EventDispatchThread.pumpOneEventForFilters(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.awt.EventDispatchThread.pumpEventsForFilter(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.awt.EventDispatchThread.pumpEventsForHierarchy(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.awt.EventDispatchThread.pumpEvents(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.awt.EventDispatchThread.run(Unknown Source)\nCaused by: java.lang.VerifyError: (class:\nsk/seges/corpis/trapas/gui/TransactionsFrame$$FastClassByGuice$$ee270b0f,\nmethod: invoke signature:\n(ILjava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;) Inconsistent\nstack height 2 != 1\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.Class.getDeclaredConstructors0(Native Method)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.Class.privateGetDeclaredConstructors(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.Class.getConstructor0(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.Class.getDeclaredConstructor(Unknown Source)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.cglib.core.ReflectUtils.getConstructor(ReflectUtils.java:244)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.cglib.core.ReflectUtils.newInstance(ReflectUtils.java:220)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.cglib.reflect.FastClass$Generator.firstInstance(FastClass.java:76)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:225)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.cglib.reflect.FastClass$Generator.create(FastClass.java:64)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.util.GuiceFastClass.create(GuiceFastClass.java:38)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.util.GuiceFastClass.create(GuiceFastClass.java:30)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.DefaultConstructionProxyFactory.get(DefaultConstructionProxyFactory.java:59)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.ProxyFactory.createConstructionProxy(ProxyFactory.java:92)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ProxyFactory$1.create(ProxyFactory.java:57)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ProxyFactory$1.create(ProxyFactory.java:56)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.util.ReferenceCache.create(ReferenceCache.java:53)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.util.AbstractReferenceCache.internalCreate(AbstractReferenceCache.java:59)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.util.AbstractReferenceCache.get(AbstractReferenceCache.java:116)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ProxyFactory.get(ProxyFactory.java:204)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ConstructorInjector.&lt;init&gt;(ConstructorInjector.java:41)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$7.create(InjectorImpl.java:601)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl$7.create(InjectorImpl.java:594)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.util.ReferenceCache.create(ReferenceCache.java:53)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.util.AbstractReferenceCache.internalCreate(AbstractReferenceCache.java:59)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at\ncom.google.inject.util.AbstractReferenceCache.get(AbstractReferenceCache.java:116)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getConstructor(InjectorImpl.java:765)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getImplicitBinding(InjectorImpl.java:973)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;... 17 more\n\nCan you tell me what could be a problem?\n\nThanks in advance,\nLaco\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=157_\n", "url": "https://github.com/google/guice/issues/157", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:01:02", "closed": "2014-07-07 18:01:04", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": " Method Interceptors with Dependencies", "body": "_From [rodolfo.dpk](https://code.google.com/u/107634848407717930516/) on October 09, 2007 23:40:49_\n\nSee : http://groups.google.com/group/google-guice/browse_thread/thread/a2744812a7a2485f\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=156_\n", "url": "https://github.com/google/guice/issues/156", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:01:01", "closed": "2014-07-07 18:01:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "toProvider() with missing binding fails silently", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on October 03, 2007 17:06:09_\n\nIf I bind toProvider(), that provider will not be injected if any of its bindings are not bound. This \nshould cause a CreationException, but does not.\n\nThis problem exists in Guice 1.0 but is fixed in the current source. I've checked in \nProviderInjectionTest#testProvidersAreInjectedWhenBound that demonstrates the problem.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=155_\n", "url": "https://github.com/google/guice/issues/155", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:01:00", "closed": "2014-07-07 18:01:00", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Error message for non-static inner classes is not intuitive", "body": "_From [zorzella](https://code.google.com/u/117480957020302471907/) on September 12, 2007 23:14:08_\n\nsay you \n\nbind(Foo.class).toProvider(FooProvider.class)\n\nwhere FooProvider is an inner class of Bar. Say that, by mistake, the inner\nclass was not declared static. And say Foo has a non-zero-arg constructor.\n\nGuice will report an error saying FooProvider should have a zero-arg\nconstructor or a constructor marked as `@`Inject. Though technically correct,\nthe message is not very helpful.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=154_\n", "url": "https://github.com/google/guice/issues/154", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:00:58", "closed": "2014-07-07 18:00:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Optional injection doesn't work with Provider bindings", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on September 12, 2007 12:02:18_\n\ni.e. Guice reports a missing binding error. What's the right behavior here?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=153_\n", "url": "https://github.com/google/guice/issues/153", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:00:57", "closed": "2014-07-07 18:00:58", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "What does bind(Impl.class); do?", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on September 07, 2007 01:24:27_\n\nDoes it override `@`ImplementedBy and `@`ProvidedBy? Should bind(Impl.class)\nalone override the scope?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=152_\n", "url": "https://github.com/google/guice/issues/152", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:00:55", "closed": "2014-07-07 18:00:56", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Support scope annotations along with @ImplementedBy", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on September 06, 2007 21:10:07_\n\nAnd `@`ProvidedBy.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=150_\n", "url": "https://github.com/google/guice/issues/150", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:00:48", "closed": "2014-07-07 18:00:49", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Guice doesn't work with a Security Manager due to cglib", "body": "_From [edward.costello@orionhealth.com](https://code.google.com/u/107265531237432970480/) on September 05, 2007 23:42:56_\n\nCGLib doesn't play nice when JARs are signed. It generates classes in the\nsame package as the class being enhanced. This results in a Security\nException because the generated classes aren't signed but the rest of the\njars in the package are. The full exception text is:\n\njava.lang.SecurityException: class\n\"test.dao.DaoImpl$$FastClassByGuice$$fbce6afa\"'s signer information does\nnot match signer information of other classes in the same package\n\nIt would be good if we could make it possible to at least use the\nDependency Injection parts of GUICE without causing this problem. This\ncould be done by generating the classes in a different package (the\nattached patch causes them to be generated in a package with $ prepended).\n\nAlternatively a flag to turn off CGLib enhancement along with some of the\nmore advanced functionality (like method interceptor) would allow the basic\ndependency injection functions to be used.\n\nA third alternative would be to only generate the CGLib classes when\nthey're required by such advanced functionality, but I haven't investigated\nthe code base enough to know if this is feasible or not.\n\n**Attachment:** [gist](https://gist.github.com/b147635bea3d4b1c2184)\n&nbsp;&nbsp;&nbsp;_[generate-cglib-classes-in-dollar-package--guice-1.0.patch](https://gist.githubusercontent.com/gissuebot/b147635bea3d4b1c2184/raw/ee85227b29a64c2b1461060e12ab5dc2d68f652e/generate-cglib-classes-in-dollar-package--guice-1.0.patch)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=149_\n", "url": "https://github.com/google/guice/issues/149", "user": "gissuebot", "labels": ["Milestone-Release2.1", "Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:00:47", "closed": "2014-07-07 18:00:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Validate member injection at startup", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on September 04, 2007 20:38:07_\n\nRight now, I think we just call injectMembers() on instances after creating\nthe injector. We should validate them so we can display all the errors at\nonce just like other injection points.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=148_\n", "url": "https://github.com/google/guice/issues/148", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:00:45", "closed": "2014-07-07 18:00:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Don't allow null in ConstantProvider", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on September 04, 2007 19:51:15_\n\ni.e. undo part of change #346: http://fisheye3.cenqua.com/changelog/google-guice/?cs=346\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=147_\n", "url": "https://github.com/google/guice/issues/147", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:00:44", "closed": "2014-07-07 18:00:44", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Struts 2 and Guice problem", "body": "_From [rpohod](https://code.google.com/u/113006534571687093340/) on August 25, 2007 14:18:32_\n\nGuiceObjectFactory consist module property and setModule setter for it.\nThis value being injected via xwork2 from struts.xml. It's good. But\nGuiceObjectFactory buildBean method doesn't use this module, instead of it\ncreates new AbstractModule implementation. Hence, custom dependencies are\nnot applied.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=146_\n", "url": "https://github.com/google/guice/issues/146", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:00:41", "closed": "2014-07-07 18:00:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Struts 2 and Guice problem", "body": "_From [rpohod](https://code.google.com/u/113006534571687093340/) on August 25, 2007 14:17:38_\n\nGuiceObjectFactory consist module property and setModule setter for it.\nThis value being injected via xwork2 from struts.xml. It's good. But\nGuiceObjectFactory buildBean method doesn't use this module, instead of it\ncreates new AbstractModule implementation. Hence, custom dependencies are\nnot applied.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=145_\n", "url": "https://github.com/google/guice/issues/145", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:00:39", "closed": "2014-07-07 18:00:41", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make ProvisionException public, usable and documented", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on August 25, 2007 04:12:17_\n\nWe should provide a standard pattern for Guice users to catch and handle RuntimeExceptions \nthat are thrown by their providers.\n\nThe goals:\n&nbsp;-&nbsp;Limit&nbsp;injected&nbsp;Providers&nbsp;to&nbsp;throwing&nbsp;only&nbsp;ProvisionExceptions,&nbsp;so&nbsp;users&nbsp;do&nbsp;not&nbsp;have&nbsp;to&nbsp;catch&nbsp;\nRuntimeException\n&nbsp;-&nbsp;Avoid&nbsp;nesting&nbsp;ProvisionExceptions&nbsp;in&nbsp;one&nbsp;another&nbsp;so&nbsp;that&nbsp;ProvisionException.getCause()&nbsp;\nalways returns the users' root problem\n&nbsp;-&nbsp;Make&nbsp;ProvisionException&nbsp;public&nbsp;so&nbsp;that&nbsp;it&nbsp;can&nbsp;be&nbsp;caught\n\nThis changes the behaviour of an undocumented API. Previously it was possible for a user's \nexception (like UnsupportedOperationException or IllegalStateException) to bubble up \nunwrapped to the caller of Provider.get(). Changing this from the arbitrary exception type to \nProvisionException introduces backwards incompatibility.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=144_\n", "url": "https://github.com/google/guice/issues/144", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:00:37", "closed": "2014-07-07 18:00:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "createInjector should take Iterable<? extends Module> instead of Iterable<Module>", "body": "_From [robbie.vanbrabant](https://code.google.com/u/109863691881355018720/) on August 22, 2007 17:50:34_\n\nhttp://groups.google.com/group/google-guice/t/7813015f7a00f8a5 from&nbsp;&nbsp; Johannes Schneider &lt;johannes`@`familieschneider.info&gt;\nHi,\ncom.google.inject.Guice#createInjector has the following signature:\npublic static Injector createInjector(Iterable&lt;Module&gt; modules)\nShouldn't that be changed to\npublic static Injector createInjector(Iterable&lt;? extends Module&gt; modules)\n\nI have a list of my modules as static reference (usefull for testing\npurposes).\n\nCollections.unmodifiableList( Arrays.asList( new ApplicationModule(),\nnew SecurityModule(), new ScannerModule(), new InvoiceModule() ) )\n\nBut this line returns a List of AbstractModules (or List&lt;? extends\nModule&gt;)....\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=143_\n", "url": "https://github.com/google/guice/issues/143", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:00:35", "closed": "2014-07-07 18:00:36", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Names.bindProperties incorrect", "body": "_From [bpontarelli](https://code.google.com/u/100174058248095101649/) on August 12, 2007 22:57:32_\n\nThe Names.bindProperties(Binder, Properties) methods is incorrect because\nit uses the Map methods, which of course in this context, that is the\ncontext of the Properties class, suck almost as much as the fact that\nProperties extends Hashtable. But back to the topic at hand.\n\nSince this method is using the Map methods rather than the methods\nspecifically defined within the glorious Properties class, any of the\ndefault Properties are lost. Yeah, you would think if they geniuses at Sun\nwere gonna implement the Map interface they would do it correctly, but they\ndecided against that! Ah, yet again, I digress. Here's the fix:\n\nSourceProviders.withDefault(\n&nbsp;&nbsp;new SimpleSourceProvider(SourceProviders.defaultSource()),\n&nbsp;&nbsp;&nbsp;&nbsp;new Runnable() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public void run() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enumeration&lt;?&gt; keys = properties.propertyNames();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (keys.hasMoreElements()) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String key = (String) keys.nextElement();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(Key.get(String.class, new\nNamedImpl(key))).toInstance(properties.getProperty(key));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n);\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=142_\n", "url": "https://github.com/google/guice/issues/142", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 18:00:32", "closed": "2014-07-07 18:00:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Fix cyclic dependencies in Guice code base", "body": "_From [steven.devijver](https://code.google.com/u/117416437705510289031/) on August 10, 2007 15:32:34_\n\nSpring has no cyclic dependencies in it's code base which is considerable\nbigger than Guice.\n\nGuice has a couple of cyclic dependencies (see attachment), please remove\nthem for the sake of the project and its future.\n\nThanks\n\n**Binary attachments:** [guice.jpeg](http://code.google.com/p/google-guice/issues/detail?id=141)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=141_\n", "url": "https://github.com/google/guice/issues/141", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:00:30", "closed": "2014-07-07 18:00:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Improve Circular Dependency Error Message", "body": "_From [sberlin](https://code.google.com/u/sberlin/) on August 06, 2007 17:56:32_\n\nRight now, a circular dependency produces the following error msg: \ncom.google.inject.ConfigurationException: Tried proxying Circle to support \na circular dependency, but it is not an interface.\n\nIt would be very useful if this message was improved to show who the \nplayers in the circular dependency are.&nbsp;&nbsp;That is, if class Circle depends \non SquareHole and SquareHole depends on Circle, the message could say \nthat's what it's failing.&nbsp;&nbsp;This would make fixing the problem much easier.\n\nHere's a fuller stack trace, for reference: \n\ncom.google.inject.ConfigurationException: Tried proxying Circle to support \na circular dependency, but it is not an interface.\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ConstructionContext.createProxy\n(ConstructionContext.java:70)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.ConstructorInjector.construct\n(ConstructorInjector.java:126)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at [... lots of internal guice calls ...]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.google.inject.InjectorImpl.getInstance\n(InjectorImpl.java:728)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at [... my code ...]\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sun.reflect.NativeMethodAccessorImpl.invoke\n(NativeMethodAccessorImpl.java:39)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at sun.reflect.DelegatingMethodAccessorImpl.invoke\n(DelegatingMethodAccessorImpl.java:25)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at java.lang.reflect.Method.invoke(Method.java:597)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at com.limegroup.gnutella.gui.Main.main(Main.java:47)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=139_\n", "url": "https://github.com/google/guice/issues/139", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:00:27", "closed": "2014-07-07 18:00:28", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Add Injector.getStage() support", "body": "_From [mathias.bogaert](https://code.google.com/u/106243967654901135425/) on August 06, 2007 14:09:59_\n\nWould love to be able to query my injector for the stage it's in.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=138_\n", "url": "https://github.com/google/guice/issues/138", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 18:00:25", "closed": "2014-07-07 18:00:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make GuiceServletContextListener.INJECTOR_NAME public", "body": "_From [mathias.bogaert](https://code.google.com/u/106243967654901135425/) on August 06, 2007 12:34:18_\n\nTo implement GWT remote services, one needs to extend RemoteServiceServlet.\nTherefore one cannot extend InjectedHttpServlet, and has to resort to\noverride init(ServletConfig c).\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=137_\n", "url": "https://github.com/google/guice/issues/137", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:00:24", "closed": "2014-07-07 18:00:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "NPE when lazily using a scoped provider", "body": "_From [sberlin](https://code.google.com/u/sberlin/) on August 01, 2007 22:29:50_\n\nFor detailed info, see: http://groups.google.com/group/google- guice/browse_thread/thread/44f422a50f5b7991?hl=en .\n\nBasically, a meta-scope would be the ability to tell any scope that you \nwant people requesting an interface X to receive a lazy version of X.  \nIt'd take the feature that Guice already provides (allowing Provider&lt;X&gt; to \nbe handed when X is bound) and extend it so that a new implementation of X \ninternally delegates to something like a Provider&lt;X&gt; whenever a method is \ncalled.&nbsp;&nbsp;This lets developers receive an X directly (avoiding the \npropogation of Provider&lt;X&gt; throughout the code) but still get the benefits \nof lazy construction.\n\nExample syntax might be:\n&nbsp;`@`Singleton&nbsp;class&nbsp;X;&nbsp;and\n&nbsp;`@`Injected&nbsp;public&nbsp;User(`@`Lazy&nbsp;X&nbsp;x);&nbsp;or\n&nbsp;bind(X.class).to(XImpl.class).be(Lazy.class);&nbsp;or\n&nbsp;bind(X.class).to(XImpl.class).as(Scopes.RequestScope).be(Lazy.class);\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=136_\n", "url": "https://github.com/google/guice/issues/136", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:00:11", "closed": "2014-07-07 18:00:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "annotate @SessionScoped and @RequestScoped with @Inherited and @Documented", "body": "_From [isdate](https://code.google.com/u/110062353320128792088/) on August 01, 2007 09:44:32_\n\nit's better to annotate `@`SessionScoped and `@`RequestScoped with `@`Inherited\nand `@`Documented\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=135_\n", "url": "https://github.com/google/guice/issues/135", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:00:08", "closed": "2014-07-07 18:00:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Lifecycle Annotations", "body": "_From [bcrammond](https://code.google.com/u/114017745265272766532/) on July 29, 2007 17:42:46_\n\nNot sure if this has been suggested before but it would be useful to have a\nPost Injection (`@`PostInject) annotation to kickoff task after the whole\ninjection process has completed.&nbsp;&nbsp;This would be equivalent to the\ndefault-init-method option in spring or the InitializingBean.\n\nIf you did this then a destroy option would be useful as well, but not as\nmuch as the init.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=134_\n", "url": "https://github.com/google/guice/issues/134", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:00:07", "closed": "2014-07-07 18:00:08", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Add support for WebWork 2", "body": "_From [bdoncieu](https://code.google.com/u/113259750214527479394/) on July 10, 2007 11:52:29_\n\nPlease add support for WebWork 2. If already there, please document in the\nUser's Guide or the Wiki.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=133_\n", "url": "https://github.com/google/guice/issues/133", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 18:00:05", "closed": "2014-07-07 18:00:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Enable Guice to use custom injection markers like @EJB ", "body": "_From [wiesed](https://code.google.com/u/108153204373676242643/) on July 08, 2007 21:06:12_\n\nHi,\nbig compliments for Guice, excellent tool;-) \n\nI have enhanced Guice to use custom annotation markers like `@`EJB or\n`@`Ressource instead of only `@`Inject. This makes Guice very flexible - you\ncan use it e.g. as DI tool for a existing EJB3 application. \n\nExample:\nGuice.createInjector(Stage.PRODUCTION,&nbsp;&nbsp;Guice.markerToArray(EJB.class,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Inject.class), myModule1, myModule2);\n\nWe are planing to use Guice in our open source project Ejb3Unit\n( http://ejb3unit.sourceforge.net/ ). Guice is a excellent candidate to\nreplace our current creation of session beans for testing.\n\nPlease let me know if you can apply/commit the patch?\nRegards Daniel\n\n**Attachment:** [gist](https://gist.github.com/601a61d7bbf28331b3aa)\n&nbsp;&nbsp;&nbsp;_[Guice_ownMarkerAnnotations.patch](https://gist.githubusercontent.com/gissuebot/601a61d7bbf28331b3aa/raw/91bfb1f0bd7684ebb2880506f3d62f5ca9100331/Guice_ownMarkerAnnotations.patch)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=132_\n", "url": "https://github.com/google/guice/issues/132", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 18:00:01", "closed": "2014-07-07 18:00:04", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Support dynamic injector configuration", "body": "_From [jinhwan.lee](https://code.google.com/u/112452155619380969047/) on July 06, 2007 18:35:44_\n\nQuestion about dynamic injector configuration.\n\nThere is a parent class which injects CommonModule as below.\n\npublic class Parent {\n&nbsp;&nbsp;protected Injector injector;\n\n&nbsp;&nbsp;public Parent() {\n&nbsp;&nbsp;&nbsp;&nbsp;injector = Guice.createInjector(new CommonModule());\n}\n\nThere are two child classes which extends the parent class and has its own\nmodule as below\n\npublic class ChildOne extends Parent {\n&nbsp;&nbsp;protected Injector injector1;\n\n&nbsp;&nbsp;public ChildOne() {\n&nbsp;&nbsp;&nbsp;&nbsp;injector1 = Guice.createInjector(new Module1());\n}\n\npublic class ChildTwo extends Parent {\n&nbsp;&nbsp;protected Injector injector2;\n\n&nbsp;&nbsp;public ChildTwo() {\n&nbsp;&nbsp;&nbsp;&nbsp;injector2 = Guice.createInjector(new Module2())\n}\n\nIt throws exception since, I think, only one injector is allowed.\nIs there any way I can dynamically config injector so that two separate\nclasses can inject a common module and its own module?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=130_\n", "url": "https://github.com/google/guice/issues/130", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 17:59:50", "closed": "2014-07-07 17:59:52", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "explicit imports and exports to solve the robot problem", "body": "_From [bslesinsky](https://code.google.com/u/bslesinsky/) on July 05, 2007 23:25:01_\n\nPossible solution to the robot legs problem:\n\nconfigure() {\n&nbsp;&nbsp;Injector leftLeg = Guice.makeInjector(new LegModule(Left.class));\n&nbsp;&nbsp;Injector rightLeg = Guice.makeInjector(new LegModule(Right.class));\n&nbsp;\n&nbsp;&nbsp;bind(Leg.class).annotatedBy(`@`Left).toBindingFrom(leftLeg, Leg.class);\n&nbsp;&nbsp;bind(Leg.class).annotatedBy(`@`Right).toBindingFrom(rightLeg, Leg.class);\n}\n\nEach injector acts as a kind of static scope, so this allows us to avoid\ngetting parts from the \"left leg\" box connected to parts from the \"right\nleg\" box.\n\nBut suppose we have singletons we want to export to the leg modules?&nbsp;&nbsp;How\nabout this?\n\nconfigure() {\n&nbsp;&nbsp;Module exportToLegs = exportBindings(Torso.class);\n\n&nbsp;&nbsp;Injector leftLeg =\n&nbsp;&nbsp;&nbsp;&nbsp;Guice.makeInjector(new LegModule(Left.class), exportToLegs);\n&nbsp;&nbsp;Injector rightLeg =\n&nbsp;&nbsp;&nbsp;&nbsp;Guice.makeInjector(new LegModule(Right.class), exportToLegs);\n\n&nbsp;&nbsp;bind(Leg.class).annotatedBy(`@`Left).toBindingFrom(leftLeg, Leg.class);\n&nbsp;&nbsp;bind(Leg.class).annotatedBy(`@`Right).toBindingFrom(rightLeg, Leg.class);\n}\n\nThe nice thing about this is that any bindings that cross injectors are\nexplicitly mentioned using imports and exports.&nbsp;&nbsp;I think that's mostly a\nfeature.\n\nA possible issue is that `@`Singleton becomes ambiguous.&nbsp;&nbsp;Do you mean\nsingleton within one injector, or across all connected injectors?&nbsp;&nbsp;Maybe we\nneed `@`ReallyASingleton, which will cause Guice to report an error if two\ninjectors containing an instance of the same singleton are connected into a\nsingle system.\n\nIt's also possible that we don't really want linked injectors, but instead\nwe have a BoundaryModule that doesn't allow bindings to escape from it\nunless they're explicitly imported or exported.&nbsp;&nbsp;A BoundaryModule contains\nother Modules that can all interlink, but controls all imports and exports\nthat cross its boundary.&nbsp;&nbsp;Any two BoundaryModules can bind the same key\nwithout conflict because each gets its own set of bindings.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=129_\n", "url": "https://github.com/google/guice/issues/129", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 17:59:49", "closed": "2014-07-07 17:59:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Annotations with Attributes using enums not working", "body": "_From [luke.studley](https://code.google.com/u/107573340280341394465/) on July 03, 2007 14:54:03_\n\nCreated my own BindingAnnotation that takes an enum value and injection or \nlookup is failing even though you can see the entries in the binder. As \nfar as I can see it is because&nbsp;&nbsp;(InjectorImpl: 459)\n\nKey&lt;?&gt; key = Key.get(field.getGenericType(), field, field.getAnnotations\n(), errorHandler);\n\nthe Annotation[] returned by field.getAnnotations() contains Proxy object \nand not actual Annotation instances. These proxy objects don't compare \nequal with the original concrete annotation instances used as part of the \nbinder maps Key$SimpleKey and so the Map lookup is returning null at \n(InjectorImpl:408)\n\n&nbsp;&nbsp;public &lt;T&gt; BindingImpl&lt;T&gt; getBinding(Key&lt;T&gt; key) {\n&nbsp;&nbsp;&nbsp;&nbsp;return (BindingImpl&lt;T&gt;) bindings.get(key);\n&nbsp;&nbsp;}\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=126_\n", "url": "https://github.com/google/guice/issues/126", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 17:59:42", "closed": "2014-07-07 17:59:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Injector.getInstance() broken for annotation instances", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on July 02, 2007 20:26:44_\n\nWhen I create my injector, I refer to the annotation type statically:\n&nbsp;&nbsp;bind(...).to(...).annotatedWith(LoginName.class);\n\nBut when I annotate my injection points, the annotation as an instance:\n&nbsp;&nbsp;`@`LoginName String loginName;\nFor example, if I refer to this annotation at runtime, I get the annotation\ninstance instead of the annotation type.\n\nGuice elegantly behaves as if annotation instances and annotation types are\ninterchangeable, and I enjoy this behaviour.\n\nUnfortunately, this isn't the case for Keys, which means I cannot fetch a\nbinding at runtime using the annotation instance if it was bound with the\nannotation type.\n&nbsp;\nI can think of two possible fixes:\n&nbsp;-&nbsp;make&nbsp;it&nbsp;so&nbsp;Keys&nbsp;are&nbsp;equal&nbsp;if&nbsp;one&nbsp;is&nbsp;an&nbsp;annotation&nbsp;type&nbsp;and&nbsp;the&nbsp;other&nbsp;is\nthe default value of that annotation\n&nbsp;-&nbsp;make&nbsp;Injector.getBinding()&nbsp;work&nbsp;extra&nbsp;hard&nbsp;if&nbsp;an&nbsp;annotation&nbsp;instance&nbsp;is\npassed in, in which case it would also try the annotation type.\n\n**Attachment:** [gist](https://gist.github.com/2e901f09098138009478)\n&nbsp;&nbsp;&nbsp;_[AnnotationInstanceVsTypeTest.java](https://gist.githubusercontent.com/gissuebot/2e901f09098138009478/raw/ffca9bc146827971e726163a09fd87a5b92c0b2d/AnnotationInstanceVsTypeTest.java)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=125_\n", "url": "https://github.com/google/guice/issues/125", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:59:41", "closed": "2014-07-07 17:59:42", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Ensure bound implementation is valid ", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on July 02, 2007 14:45:12_\n\nbind(Runnable.class); should fail with an error.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=124_\n", "url": "https://github.com/google/guice/issues/124", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:59:39", "closed": "2014-07-07 17:59:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Specifiy alternate source of a binding", "body": "_From [bslesinsky](https://code.google.com/u/bslesinsky/) on June 29, 2007 01:29:17_\n\nSuppose I write a FlagsModule that reads a bunch of flags from a property\nfile and binds them.&nbsp;&nbsp;Each property corresponds to a binding.&nbsp;&nbsp;The\nBinding.getSource() method should ideally return the property file's name\nand line number, but I don't see any way to specify that.\n\nMaybe Binder and AbstractModule should just have a bind(Binding) method? \nThen I can write a Flag class that implements Binding.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=122_\n", "url": "https://github.com/google/guice/issues/122", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:59:32", "closed": "2014-07-07 17:59:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make guice jars OSGi bundles", "body": "_From [bradleyjames](https://code.google.com/u/108062140771944040259/) on June 28, 2007 19:58:35_\n\nFor inclusion into RCP applications, or running in any OSGi container, it\nwould lower the barrier of entry if the jars were proper OSGi bundles. Issue 16 hints at this as a solution to the problem described but it\ndoesn't seem like the goal end goal.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=121_\n", "url": "https://github.com/google/guice/issues/121", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:59:30", "closed": "2014-07-07 17:59:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Don't try to create classes with a private no-arg constructor", "body": "_From [bslesinsky](https://code.google.com/u/bslesinsky/) on June 28, 2007 01:17:01_\n\nIt's common to mark a class containing all static methods as\nnon-constructable by giving it a private no-arg constructor. \nUnfortunately, Guice doesn't respect this.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=120_\n", "url": "https://github.com/google/guice/issues/120", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:59:27", "closed": "2014-07-07 17:59:29", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "throw exception containing all error messages when Injector.getInstance() fails", "body": "_From [bslesinsky](https://code.google.com/u/bslesinsky/) on June 28, 2007 01:13:29_\n\nIt appears that when multiple errors occur at runtime in\nInjector.getInstance(), only the last one gets thrown.&nbsp;&nbsp;Unfortunately, in\nmy case, the earlier exceptions are quite a bit more helpful than the last\none.  \n\nI'm able to see the earlier exceptions by setting a breakpoint in\nInjectorImpl line 978, but given that we've promised to have wonderful\nerror messages, we need to do better than this.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=119_\n", "url": "https://github.com/google/guice/issues/119", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:59:26", "closed": "2014-07-07 17:59:27", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Get the class provided by a provider?", "body": "_From [bslesinsky](https://code.google.com/u/bslesinsky/) on June 27, 2007 23:38:53_\n\nOne problem with a Provider&lt;T&gt; is that, due to erasure, there's no good way\nto find out which class you're going to get without calling get().&nbsp;&nbsp;It\nmight be nice to be able to do this:\n\n`@`Inject\nFoo(BetterProvider&lt;T&gt; provider)\n\ninterface BetterProvider&lt;T&gt; extends Provider&lt;T&gt; {\n&nbsp;&nbsp;Class&lt;T&gt; getProvidedClass();\n}\n\n(The workaround is to pass a Class&lt;T&gt; to any method that takes a\nProvider&lt;T&gt; and also needs to know the class.)\n\nNot that it's urgent; I've only run across this once, when putting some\nproviders into a map based on class.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=118_\n", "url": "https://github.com/google/guice/issues/118", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported", "wontfix"], "created": "2014-07-07 17:59:24", "closed": "2014-07-07 17:59:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Reopen issue #90 as the suggested patch works...", "body": "_From [pete4711](https://code.google.com/u/106728933707921366470/) on June 21, 2007 10:11:33_\n\nI checked out the lastest release of guice from subversion and applied\nabove patch (in issue #90 ). \n\nThen I retrotranslated the resulting guice-snapshot.jar successfully with\nno errors or warnings.\n\nI did load of tests using raw datatypes, custom providers, using `@`Named,\n`@`ImplementedBy, checking cglib, own modules etc.\n\n&gt; Quick question -- is this issue really the only thing preventing \n&gt; guice from being retrotranslatable and usable in 1.4?&nbsp;&nbsp;I'll be blown \n&gt; away if so.\n\nSo you should be blown away now :-)\n\nEverything runs smoothly when simply applying this tiny little patch. So\nplease apply this tiny little patch and unlucky people still being locked\ninto java 1.4 for whatever reasons can at least have some real fun with\nguice :-)\n\nAlso this could significantly increase the number of active guice users :-))\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=117_\n", "url": "https://github.com/google/guice/issues/117", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 17:59:23", "closed": "2014-07-07 17:59:23", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Injector#getBinding does not handle primitives the same way as Injector#getInstance ", "body": "_From [jmourits](https://code.google.com/u/107778524531915524037/) on June 15, 2007 16:59:07_\n\nGuice seems treat primitives and their capital-letter counterparts\ninconsistently.\n\n&nbsp;&nbsp;public void testInjectorHandlesPrimitivesConsistently() {\n&nbsp;&nbsp;&nbsp;&nbsp;Injector inj = Guice.createInjector(new AbstractModule() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected void configure() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bind(int.class).toInstance(1984);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;});\n&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(1984, (int)inj.getInstance(int.class)); // pass\n&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(1984, (int)inj.getInstance(Integer.class)); // pass\n&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(1984, (int)inj.getInstance(Key.get(int.class))); //pass\n&nbsp;&nbsp;&nbsp;&nbsp;assertEquals(1984, (int)inj.getInstance(Key.get(Integer.class))); //pass\n&nbsp;&nbsp;&nbsp;&nbsp;assertNotNull(inj.getBinding (Key.get(int.class)));&nbsp;&nbsp;//pass\n&nbsp;&nbsp;&nbsp;&nbsp;assertNotNull(inj.getBinding(Key.get(Integer.class)));&nbsp;&nbsp;//fail\n&nbsp;&nbsp;}\n\nShouldn't the injector return the same binding for both Key.get(int.class)\nand Key.get(Integer.class)?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=116_\n", "url": "https://github.com/google/guice/issues/116", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:59:21", "closed": "2014-07-07 17:59:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Should not inject parameterless constructors without @Inject", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on June 08, 2007 15:20:09_\n\nRight now we will always inject a parameterless constructor when there is\nno `@`Inject constructor -- whether this is public, private, or even if it is\nnot \"actually there\" but implied.&nbsp;&nbsp;We should consider removing some of these.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=115_\n", "url": "https://github.com/google/guice/issues/115", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 17:59:20", "closed": "2014-07-07 17:59:21", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Thread scope for Guice", "body": "_From [robbie.vanbrabant](https://code.google.com/u/109863691881355018720/) on June 08, 2007 06:26:25_\n\nAs a follow-up to issue #100 , Guice could support a pure Thread scope:\n\n&nbsp;&nbsp;&nbsp;&nbsp;public static final Scope THREAD = new Scope() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public &lt;T&gt; Provider&lt;T&gt; scope(final Key&lt;T&gt; key, final Provider&lt;T&gt;\ncreator) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Provider&lt;T&gt;() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public T get() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ThreadLocalCache cache = ThreadLocalCache.getInstance();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T value = cache.get(key);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (value == null) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value = creator.get();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cache.add(key, value);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return value;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;private static final class ThreadLocalCache {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private Map&lt;Key&lt;?&gt;, Object&gt; map = new HashMap&lt;Key&lt;?&gt;, Object&gt;();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// use lazy init to avoid memory overhead when not using the scope?\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private static final ThreadLocal&lt;ThreadLocalCache&gt; THREAD_LOCAL = \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;new ThreadLocal&lt;ThreadLocalCache&gt;() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`Override protected ThreadLocalCache initialValue() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new ThreadLocalCache();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// suppress warnings because the add method\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// captures the type\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`SuppressWarnings(\"unchecked\")\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public &lt;T&gt; T get(Key&lt;T&gt; key) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (T) map.get(key);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public &lt;T&gt; void add(Key&lt;T&gt; key, T value) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map.put(key, value);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public static ThreadLocalCache getInstance() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return THREAD_LOCAL.get();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\nAs Kevin said, it could be useful when using classes that are not thread\nsafe, like SimpleDateFormat.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=114_\n", "url": "https://github.com/google/guice/issues/114", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 17:59:17", "closed": "2014-07-07 17:59:19", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Struts2 plugin should not use System.exit()", "body": "_From [meidos](https://code.google.com/u/102750384746873046156/) on June 07, 2007 13:12:01_\n\nIf guice fails to create an object (possibly due to missing dependencies in\nthe classpath during runtime), it will call System.exit(1). I feel this is\na really bad thing for a library to do, as you risk taking down common test\nenvironments if you do an error on deployment.\n\nExample:\nYou have a test tomcat server that hosts 2 webapps, one of them is beeing\ntested by 10 other developers, and the other is a webapp using Guice. You\ncreate the war and deploy it. But the war is missing a jar in the lib\nfolder that you have in your development environment. When the app starts,\nSystem.exit(1) gets called by Guice, and the entire Tomcat server is shut down.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=113_\n", "url": "https://github.com/google/guice/issues/113", "user": "gissuebot", "labels": ["Extension-Struts", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:59:13", "closed": "2014-07-07 17:59:16", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Document the RuntimeException thrown by Provider.get()", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on June 05, 2007 00:02:39_\n\nIt should be possible to write Providers that throw RuntimeExceptions as necessary.\n\nThe RuntimeException thrown here should be public in the Guice API, and it should be documented \nin a `@`throws tag on the Provider#get Javadoc.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=111_\n", "url": "https://github.com/google/guice/issues/111", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 17:59:08", "closed": "2014-07-07 17:59:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Update SpringComparison: Spring 2.1 Java configuration", "body": "_From [robbie.vanbrabant](https://code.google.com/u/109863691881355018720/) on May 29, 2007 11:07:34_\n\nAs described here:\n- http://tinyurl.com/2zx66s - http://tinyurl.com/2dm6vo It's hard to follow what the Spring guys are doing in this space. There's\nalso the previous (but still active) Spring Java config effort that looks\nlike the XML rewritten in Java. And then there's also this: http://sannotations.sourceforge.net/ The latest syntax as described in the blog posts above is more Guice-style,\nbut still doesn't look as flexible or type safe (`@`Named style) as Guice.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=110_\n", "url": "https://github.com/google/guice/issues/110", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported", "wontfix"], "created": "2014-07-07 17:59:06", "closed": "2014-07-07 17:59:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "add convenience method for binding an instance to its own class", "body": "_From [bslesinsky](https://code.google.com/u/bslesinsky/) on May 25, 2007 22:37:25_\n\nI use tiny classes to implement flags, and often find myself writing this:\n\n&nbsp;&nbsp;bind(SomeClass.class).toInstance(new SomeClass(arg1));\n\nIt would be convenient to abbreviate it to:\n\n&nbsp;&nbsp;bindInstance(new SomeClass(arg1));\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=109_\n", "url": "https://github.com/google/guice/issues/109", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 17:59:04", "closed": "2014-07-07 17:59:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "allow optional injection of a class with no @Inject annotation", "body": "_From [bslesinsky](https://code.google.com/u/bslesinsky/) on May 23, 2007 21:01:25_\n\nI have a class that doesn't have any `@`Inject annotation because I always\nbind in using toInstance().&nbsp;&nbsp;There is a setter on another class marked as\nan optional injection that takes this class as an argument.&nbsp;&nbsp;Guice fails\nbecause it can't find any `@`Inject annotation on the class, but it shouldn't\nneed one, because there's no binding and the injection is optional, so it\nshould just skip that injection.\n\nSo, it looks like you might need a check for optional injection in\nInjectorImpl.getParametersInjectors?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=107_\n", "url": "https://github.com/google/guice/issues/107", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:59:00", "closed": "2014-07-07 17:59:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "make guice annotations a separate build artifact", "body": "_From [ricebin](https://code.google.com/u/117118208457910765746/) on May 22, 2007 18:35:07_\n\nit would be nice we had:\n\nguice-annotations.jar\nguice-injector.jar\n\nso that i only have to link to guice-annotations.jar to compile without the\ninjector\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=106_\n", "url": "https://github.com/google/guice/issues/106", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 17:58:57", "closed": "2014-07-07 17:58:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Misplaced test class", "body": "_From [pkozelka](https://code.google.com/u/117241381257550951459/) on May 16, 2007 17:09:52_\n\nThe class in src/com/google/inject/ProviderMethodsTest.java should be moved\nto the test directory by a command like this:\n\nsvn mv src/com/google/inject/ProviderMethodsTest.java test/com/google/inject\n\nNot a big issue, but makes mavenized version uncompilable (see https://code.google.com/p/google-apis-mavenized/ ), and is probably not\nintentional anyway.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=105_\n", "url": "https://github.com/google/guice/issues/105", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:58:56", "closed": "2014-07-07 17:58:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "A no-arg Guice.createInjector() method may be useful for Groovy", "body": "_From [Paul.King.ASERT](https://code.google.com/u/105508550588099229829/) on May 15, 2007 20:52:30_\n\nI am using Guice from Groovy. In one 'getting started with Guice example' I\nhave all the dependencies as annotations (not scalable sure but fine for\nits purpose). I have to write:\n\n&nbsp;&nbsp;def injector = Guice.createInjector({} as Module)\n\nwhereas I want to write:\n\n&nbsp;&nbsp;def injector = Guice.createInjector()\n\nbecause all my dependencies (ok, only one) are implicit.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=104_\n", "url": "https://github.com/google/guice/issues/104", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 17:58:54", "closed": "2014-07-07 17:58:55", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Enhanced Object with Interceptor not Serializable", "body": "_From [ghislaine.bansard](https://code.google.com/u/109606452986823887334/) on May 09, 2007 02:56:58_\n\nI enhanced serializable objects using Guice and Interceptor.\n\nWhen I try to Serialize this objects, I have a\njava.io.NotSerializableException: com.google.inject.cglib.proxy.NoOp$1\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=103_\n", "url": "https://github.com/google/guice/issues/103", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 17:58:53", "closed": "2014-07-07 17:58:53", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "make guice javadoc a separate download", "body": "_From [bslesinsky](https://code.google.com/u/bslesinsky/) on May 08, 2007 23:03:07_\n\nIt seems like it would better to put the javadoc in a separate zip file\nsince few people need it.&nbsp;&nbsp; It's easier to just browse it on the web. \nAlso, IntelliJ generates javadoc popups from the source code, not javadoc,\nso a guice-src.jar that contains only the source would be more useful than\njavadoc.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=102_\n", "url": "https://github.com/google/guice/issues/102", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported", "wontfix"], "created": "2014-07-07 17:58:51", "closed": "2014-07-07 17:58:52", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Method anntation lost when interceptor used with class annotation.", "body": "_From [hiro0107](https://code.google.com/u/114836657227025635641/) on May 06, 2007 00:34:11_\n\nWhen an interceptor is defined as a class annotation, method annotations of\nthe class which is intercepted are lost.\n\nSee the attachments. In Test.java , it has 2 Module classes: one has an\ninterceptor definition, and another does not.\nRun Test.java, you will see the result as the following.\n# :true\n# :false\n\nThe second result means method annotations are lost.\n\n**Attachment:** [gist](https://gist.github.com/be925b89200c7741e6b5)\n&nbsp;&nbsp;&nbsp;_[MethodAnnon.java](https://gist.githubusercontent.com/gissuebot/be925b89200c7741e6b5/raw/94a38eb118f2ef0145766d2a53499119fa588ced/MethodAnnon.java)_\n&nbsp;&nbsp;&nbsp;_[TypeAnnon.java](https://gist.githubusercontent.com/gissuebot/be925b89200c7741e6b5/raw/b9d5892764ddc34a4cc4e54bdbeeab4860aca216/TypeAnnon.java)_\n&nbsp;&nbsp;&nbsp;_[Test.java](https://gist.githubusercontent.com/gissuebot/be925b89200c7741e6b5/raw/9f62fa33ad729e3ecbb8bbf12ae53513de976c3c/Test.java)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=101_\n", "url": "https://github.com/google/guice/issues/101", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 17:58:49", "closed": "2014-07-07 17:58:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Are Http scopes and scope implementations sufficiently general?", "body": "_From [cquezel](https://code.google.com/u/100936117136459441930/) on May 03, 2007 21:49:09_\n\nAre Http scopes and scope implementations sufficiently general?\n\nI am very new to Guice so what I am proposing here may not be correct ...\nbut here it goes.\n\nI was looking at the scope features (doc please ...) to figure how I could\nuse scopes in my applications. I noticed that the REQUEST and SESSION\nscopes are very http Servlet oriented. I was wondering if this was\nnecessary.\n\nI think that non http Servlet based application could benefit from general\npurpose REQUEST and SESSION scopes. Http Servlet based application could\nalso benefit from this. So I am proposing create more general REQUEST and\nSESSION scopes and to use these to implement http Servlet scoping.\n\nFirst, I would define a general purpose class for thread based scope to\ntake over the non http Servlet API part of the GuiceFilter class. For\nexample:\n\npublic final class RequestScopeSetter {\n\n&nbsp;&nbsp;&nbsp;&nbsp;private RequestScopeSetter()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Hide\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;private static final ThreadLocal&lt;Map&lt;String, Object&gt;&gt; REQUEST_CACHE \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= new ThreadLocal&lt;Map&lt;String, Object&gt;&gt;();\n\n&nbsp;&nbsp;&nbsp;&nbsp;public static void beginScope()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REQUEST_CACHE.set(new HashMap&lt;String, Object&gt;());\n&nbsp;&nbsp;&nbsp;&nbsp;}\n\n&nbsp;&nbsp;&nbsp;&nbsp;public static void endScope()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;REQUEST_CACHE.set(null);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;static Map&lt;String, Object&gt; getCache() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String, Object&gt; cache = REQUEST_CACHE.get();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (cache == null) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new IllegalStateException(\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Cannot access request scoped object. \" +\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"Either we are not currently inside a \" +\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"scoped thread, or you may have forgotten \" + \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\"to initialize the thread with \" +\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RequestScopeSetter.class.getName() +\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\".beginScope() method.\"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return cache;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nNext I would modify the Filter class to use this mechanism (or define\nanother Filter):\n\n&nbsp;&nbsp;public void doFilter(ServletRequest servletRequest,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ServletResponse servletResponse, FilterChain filterChain)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throws IOException, ServletException {\n&nbsp;&nbsp;&nbsp;&nbsp;Context previous = localContext.get();\n&nbsp;&nbsp;&nbsp;&nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localContext.set(new Context((HttpServletRequest) servletRequest,\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(HttpServletResponse) servletResponse));\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RequestScopeSetter.beginScope();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;filterChain.doFilter(servletRequest, servletResponse);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} finally {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RequestScopeSetter.endScope();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;} finally {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;localContext.set(previous);\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;}\n\nI would maybe define a Runnable for other uses:\n\nclass RequestScopeSetterRunnable implements Runnable {\n&nbsp;&nbsp;&nbsp;&nbsp;private final Runnable toRun;\n&nbsp;&nbsp;&nbsp;&nbsp;RequestScopeSetterRunnable(Runnable toRun)\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.toRun = toRun;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;public void run()\n&nbsp;&nbsp;&nbsp;&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RequestScopeSetter.beginScope();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;toRun.run();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} finally {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RequestScopeSetter.endScope();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\nThe REQUEST scope would be implemented as:\n\nfinal class Scopes {\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;public static final Scope REQUEST = new Scope() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public &lt;T&gt; Provider&lt;T&gt; scope(Key&lt;T&gt; key, \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final Provider&lt;T&gt; creator) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final String name = key.toString();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Provider&lt;T&gt;() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public T get() {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Map&lt;String, Object&gt; threadCache \n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;= ThreadScopeSetter.getCache();\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;synchronized (threadCache) {\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;`@`SuppressWarnings(\"unchecked\")\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;T t = (T) threadCache.get(name);\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbs...\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=100_\n", "url": "https://github.com/google/guice/issues/100", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 17:58:42", "closed": "2014-07-07 17:58:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Using bindProperties() and injecting an invalid name produces error message that is not awesome", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on May 02, 2007 13:41:13_\n\nHere is an example of just the *message*,\n\n1) Error at com.blah.Blah.&lt;init&gt;(Blah.java:186):\n&nbsp;Binding&nbsp;to&nbsp;java.lang.String&nbsp;annotated&nbsp;with&nbsp;`@`\ncom.google.inject.name.Named(value=BadPropName) not found. Annotations on\nother bindings to that type include:\n[`@`com.google.inject.name.Named(value=AGoodPropName1),\n`@`com.google.inject.name.Named(value=AGoodPropName2), `@`\ncom.google.inject.name.Named(value=AGoodPropName3), \n\n... and this list goes on and on and on.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=99_\n", "url": "https://github.com/google/guice/issues/99", "user": "gissuebot", "labels": ["Component-Core", "Priority-Low", "bug", "imported"], "created": "2014-07-07 17:58:40", "closed": "2014-07-07 17:58:41", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "JUnit xml results", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on May 01, 2007 12:58:42_\n\nGregory Kick:\n&nbsp;&nbsp;&nbsp;&nbsp;Second, I'd like to get the xml reports from junit.&nbsp;&nbsp;Could the java\n&nbsp;&nbsp;&nbsp;&nbsp;task that forks the test runner be changed to the junit task with a\n&nbsp;&nbsp;&nbsp;&nbsp;fomatter of type xml?&nbsp;&nbsp;Was there any particular reason that the junit\n&nbsp;&nbsp;&nbsp;&nbsp;task wasn't being used in the first place? \n\nBob:\n\nI copied the JUnit target over from Dynaop, so I don't remember the exact\nreason, but I think it's because I like the way JUnit itself outputs the\ndots--it's very clear whether you failed or succeeded. We can add another\ntarget or parameter which results in XML though (or output XML, too). I\nmostly use my IDE nowadays though.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=98_\n", "url": "https://github.com/google/guice/issues/98", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported", "wontfix"], "created": "2014-07-07 17:58:39", "closed": "2014-07-07 17:58:39", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "Inject a session scoped instance with specified name (session attribute name)", "body": "_From [kevin.wang.kp](https://code.google.com/u/104149268538997156213/) on April 28, 2007 01:49:37_\n\nMaybe just I don't know it, I can't find a way to inject a session scoped\ninstance with specified name (session attribute name). Thus I can't use the\ninstance on my jsp page, for example, sessionScope.&lt;myAttributName&gt;.value.\nOr that's not the way the thing should go?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=97_\n", "url": "https://github.com/google/guice/issues/97", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 17:58:37", "closed": "2014-07-07 17:58:38", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Something about Guice pisses off Emma", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on April 20, 2007 15:02:37_\n\nEMMA: collecting runtime coverage data ...\nEMMA: runtime controller started on port [47653]\nConnected to the target VM, address: '127.0.0.1:45938', transport: 'socket'\nEMMA: package [com/oogle/nject] contains classes\n[BoundProviderTest$Bar$$FastClassByGuice$$c5a47b] without full debug info\nEMMA: package [com/oogle/nject/atcher] contains classes [$Proxy21] without\nfull debug info\nraw session data merged into\n[/ar/ache/ntellij-idea-6/evinb/overage/uice$AllTests.es] {in 113 ms}\nDisconnected from the target VM, address: '127.0.0.1:45938', transport:\n'socket'\n\nthat's just one example.&nbsp;&nbsp;is there a way to fix this?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=95_\n", "url": "https://github.com/google/guice/issues/95", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 17:58:33", "closed": "2014-07-07 17:58:34", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "[patch] remove harmful unused imports", "body": "_From [pkozelka](https://code.google.com/u/117241381257550951459/) on April 18, 2007 08:21:19_\n\nfile \"SpringIntegrationTest.java\" contains import of\n\"com.google.inject.PerformanceComparison.TeeImpl\" which introduces bad\ndependency on test part of guice core.\nAttached patch also removes another unused dependency.\n\n**Attachment:** [gist](https://gist.github.com/40d8d81e8a6cb8e938e1)\n&nbsp;&nbsp;&nbsp;_[remove-imports-patch.txt](https://gist.githubusercontent.com/gissuebot/40d8d81e8a6cb8e938e1/raw/c7437c0ffb8ac2c1a84e9e859644cd0f8b40a9d2/remove-imports-patch.txt)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=93_\n", "url": "https://github.com/google/guice/issues/93", "user": "gissuebot", "labels": ["1.1", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:58:16", "closed": "2014-07-07 17:58:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Use &quot;snapshot&quot; as default version.", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on April 17, 2007 16:21:28_\n\nWe can provide the version in a command line parameter when we want to have\nofficial releases.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=92_\n", "url": "https://github.com/google/guice/issues/92", "user": "gissuebot", "labels": ["1.1", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:58:15", "closed": "2014-07-07 17:58:15", "commits": {}, "ttf": null, "commitsDetails": []}, {"title": "[patch] fix pom.xml to be a real Maven project file", "body": "_From [mkozelkova](https://code.google.com/u/115855113891117969086/) on April 16, 2007 08:07:30_\n\nThe current version of pom.xml is not functional at all.\nAttached is a patch that fixes it by:\n- overriding source and testsource directories to match real locations\n- overriding resource directories assuming that they are same as source \ndirs, although there are no resources yet\n- adding dependencies\nI did my best to match the versions that are used in the ant build, and \nalso to minimize compilation dependencies (spring-*, easymock and \ncommons-logging are only used for testing)\n\n**Attachment:** [gist](https://gist.github.com/7a08ded05792b129553f)\n&nbsp;&nbsp;&nbsp;_[pom.patch](https://gist.githubusercontent.com/gissuebot/7a08ded05792b129553f/raw/b72c38e79962a1b6be5b38d0a11c626f635914dd/pom.patch)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=91_\n", "url": "https://github.com/google/guice/issues/91", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 17:58:13", "closed": "2014-07-07 17:58:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "document visibility failure in AbstractReferenceCache", "body": "_From [tpeierls](https://code.google.com/u/116658917155462694901/) on April 10, 2007 12:39:37_\n\nThe private boolean field \"set\" of class FutureValue (nested in\nAbstractReferenceCache) is accessed without synchronization in\nFutureValue.get(). There is no happens-before edge between setting the\nfield's value to true and reading the value.\n\nThe code isn't really broken, because the worst that can happen is that\nwaitUntilSet() is called unnecessarily. So the test of (!set) is really an\noptimization that is only likely to win in certain situations, i.e., single\nCPUs. But in those systems the cost of a mostly uncontended lock\nacquisition is negligible.\n\nIf you have performance data that suggests that it really is a win,\ndocument it. Otherwise I suggest taking it out -- it's just confusing.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=89_\n", "url": "https://github.com/google/guice/issues/89", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:58:05", "closed": "2014-07-07 17:58:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "creating an inner class also creates a fresh instance of the outer class", "body": "_From [bslesinsky](https://code.google.com/u/bslesinsky/) on April 08, 2007 00:34:18_\n\nWhile experimenting with some test case I checked what would happen if I\nasked Guice to instantiate an inner class.&nbsp;&nbsp;It appears that it treats the\nouter class as a dependency and instantiates a fresh instance!&nbsp;&nbsp;This is\nunexpected to say the least.&nbsp;&nbsp;I think the least surprising thing would be\nreport an error; you shouldn't try to instantiate an inner class from Guice\nunless it's static.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=86_\n", "url": "https://github.com/google/guice/issues/86", "user": "gissuebot", "labels": ["1.1", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:57:58", "closed": "2014-07-07 17:57:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Guice error message can be misleading:", "body": "_From [limpbizkit](https://code.google.com/u/limpbizkit/) on April 04, 2007 19:43:11_\n\nI got this error while preparing my mailing list post:\n\n1) Error at RealBookService$RealBookShelf.&lt;init&gt;(RealBookService.java:48):\nCould not find a suitable constructor in RealBookService$RealBookShelf.\nClasses must have either one (and only one) constructor annotated with\n`@`Inject or a zero-argument constructor.\n\nThis error doesn't mention the fact that if the offending class is an inner\nclass, it must be a static inner class. This is nitpicky, but Guice has\nvery high standards for error messages.\n\nOfftopic - how does one instantaite a non-static inner class reflectively?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=85_\n", "url": "https://github.com/google/guice/issues/85", "user": "gissuebot", "labels": ["1.1", "Priority-Low", "bug", "imported"], "created": "2014-07-07 17:57:57", "closed": "2014-07-07 17:57:58", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Any plans for C++ or opinions about autumnframework?", "body": "_From [sammesh](https://code.google.com/u/101231099646349801611/) on March 19, 2007 19:39:37_\n\nautumnframework is at https://code.google.com/p/autumnframework\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=81_\n", "url": "https://github.com/google/guice/issues/81", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 17:57:47", "closed": "2014-07-07 17:57:48", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Support Provision Interception / Construction Interception", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on March 19, 2007 14:29:48_\n\nBob will add more details.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=78_\n", "url": "https://github.com/google/guice/issues/78", "user": "gissuebot", "labels": ["Priority-High", "bug", "imported"], "created": "2014-07-07 17:57:35", "closed": "2014-07-07 17:57:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "dependence on ASM", "body": "_From [shamilbi](https://code.google.com/u/110342929428525748883/) on March 19, 2007 06:52:52_\n\nguice depends mostly on asm-2.x except com.google.inject.util.LineNumbers\nthat depends on asm-3 (constructor LineNumbers(Class)).\nmaking guice depending on asm-3.x lead to exceptions in tests because\ncglib-2.2 depends on asm-2.x\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=77_\n", "url": "https://github.com/google/guice/issues/77", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:57:31", "closed": "2014-07-07 17:57:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Check for runtime retention in Matchers.annotatedWith()", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on March 18, 2007 21:55:22_\n\nThrow an exception if the annotation doesn't have runtime retention.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=76_\n", "url": "https://github.com/google/guice/issues/76", "user": "gissuebot", "labels": ["1.1", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:57:30", "closed": "2014-07-07 17:57:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "It's too much work to get your servlets injected", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on March 18, 2007 02:25:48_\n\nJust see this post: http://java-x.blogspot.com/2007/03/my-first-guice-web-application.html this should be far simpler.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=74_\n", "url": "https://github.com/google/guice/issues/74", "user": "gissuebot", "labels": ["1.1", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:57:25", "closed": "2014-07-07 17:57:27", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Support  @Inject inheritence", "body": "_From [chandra.patni](https://code.google.com/u/105226087307578986241/) on March 16, 2007 16:54:26_\n\npublic interface Cache {\n&nbsp;&nbsp;public void setMemory(long bytes);\n&nbsp;&nbsp;`@`Inject public void setMemory(`@`Named(\"memorySize\") String size);\n}\n\nThis doesn't work unless I move the annoation to the implementation class.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=73_\n", "url": "https://github.com/google/guice/issues/73", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2014-07-07 17:57:23", "closed": "2014-07-07 17:57:24", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Injector does not respect constructor's private visibility", "body": "_From [antti.brax](https://code.google.com/u/104629515627049550506/) on March 16, 2007 08:17:04_\n\nWhen an instance of the following Service class is created with an\nInjector, an instance of the Tool class is created. It would be safer to\nassume that this kind of a construction is a programming error.\n\npublic class Service {\n&nbsp;&nbsp;&nbsp;&nbsp;`@`Inject\n&nbsp;&nbsp;&nbsp;&nbsp;public Service(Tool tool) {\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\npublic class Tool {\n&nbsp;&nbsp;&nbsp;&nbsp;private Tool() {\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=72_\n", "url": "https://github.com/google/guice/issues/72", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:57:19", "closed": "2014-07-07 17:57:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Allow custom injection-point finders", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on March 15, 2007 14:15:28_\n\nGuice currently supports only one scheme for determining the injection\npoints in a class.&nbsp;&nbsp;Currently this is \"just look for `@`Inject\"; if we\naddress issue #70 , this will change to \"just look for any of the set of\ninjection annotations\".\n\nIf we allowed people to give a custom InjectionPointFinder (wanted: better\nname), they could override this logic, at least on a per-binding basis. \nThis would let them use their JavaBeans and so forth absolutely untouched.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=71_\n", "url": "https://github.com/google/guice/issues/71", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:57:15", "closed": "2014-07-07 17:57:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Support any annotation in place of @Inject", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on March 15, 2007 13:58:00_\n\nAllow any annotation to be used in place of `@`Inject.&nbsp;&nbsp;I believe we would\nnot provide the ability to disable recognition of `@`Inject itself, only\nallow additional annotations to also serve.\n\nA couple possible solutions.\n1. The \"surrogate annotation\" pattern.&nbsp;&nbsp;The user uses their own `@`MyInject\n   annotation, and they annotate *this* annotation itself with `@`Inject. Guice\n   follows this, treating `@`MyInject as an \"alias\".&nbsp;&nbsp;Upside: very very simple\n   to use.&nbsp;&nbsp;Downside: your implementation code now still has a dependency to\n   guice, it's just been made indirect.\n2. Binder.addInjectAnnotation(MyInject.class).&nbsp;&nbsp;This way a module can\n   contribute an additional annotation to recognize as being an injection\n   annotation, and it will automatically become recognized for any class in\n   your application.&nbsp;&nbsp;Upside: implementation classes have no dependency to\n   Guice even indirectly.&nbsp;&nbsp;The only thing that remains special about `@`Inject\n   itself is that the Injector happens to addInjectAnnotation() for it\n   automatically.&nbsp;&nbsp;Downside: I don't see how we could support recognizing the\n   new annotation \"for this module only\"; it would probably have to just\n   automatically apply to everything.&nbsp;&nbsp;People might dislike this, but it's\n   actually no different from binding an interface -- if your interface is\n   public, guice is not in the business of stopping anyone from depending on\n   it who wants to; that's the job of other tools.\n3. Others?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=70_\n", "url": "https://github.com/google/guice/issues/70", "user": "gissuebot", "labels": ["Priority-Low", "bug", "imported"], "created": "2014-07-07 17:57:08", "closed": "2014-07-07 17:57:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Unzipping Guice 1.0 Source Archive Does Not Create Separate Directory", "body": "_From [Catalin.Hritcu](https://code.google.com/u/106444120865487616284/) on March 15, 2007 05:25:47_\n\n&gt; wget http://google-guice.googlecode.com/files/guice-1.0-src.zip ...\n&gt; unzip guice-1.0-src.zip\n...\n&gt; ls -1\nCOPYING\nbuild.properties\nbuild.xml\ncommon.xml\nguice.iml\nguice.ipr\nguice.iws\njavadoc\nlib\npom.xml\nservlet\nspring\nsrc\nstruts2\ntest\nuploadJavadocs.sh\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=69_\n", "url": "https://github.com/google/guice/issues/69", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:57:06", "closed": "2014-07-07 17:57:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ConfigurationException needs to be made public and documented in @throws", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on March 15, 2007 00:41:04_\n\nFor methods like Injector.getProvider() or getInstance(), in the general\ncase it's impossible to know ahead of time whether they will succeed or\nthrow a ConfigurationException.&nbsp;&nbsp;Yet ConfigurationException is unchecked\nand is not a publicly exposed type in the API, making the whole situation\ndarn awkward.\n\nTechnically I think this should have been a checked exception, but too late\nto fix that now.&nbsp;&nbsp;The fix we can make is to make the exception type public\nand document it in the `@`throws clauses of the relevant methods.\n\nAnd we may as well name it appropriately before it becomes visible.&nbsp;&nbsp;The\nexception doesn't happen due to any configuration problem, it happens\nbecause you ask guice for a key that it can't resolve all the way to a\nprovider.&nbsp;&nbsp;so, ResolutionException, ProviderResolutionException,\nCantResolveProviderException, blah blah blah... ideas?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=68_\n", "url": "https://github.com/google/guice/issues/68", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:57:02", "closed": "2014-07-07 17:57:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Overridden methods are injected twice", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on March 14, 2007 18:47:12_\n\nIf you override a method with `@`Inject with another method with `@`Inject,\nGuice will call it twice. This usually isn't a big deal, but we really\nshould filter out overridden methods.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=67_\n", "url": "https://github.com/google/guice/issues/67", "user": "gissuebot", "labels": ["Milestone-Release2.1", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:56:59", "closed": "2014-07-07 17:57:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "DefaultConstructionProxyFactory can throw SecurityException", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on March 14, 2007 11:48:22_\n\nI accidentally ended up trying to inject a Class object, whose constructor\ncan't be made accessible by 'setAccessible(true)' (currently line 40 of\nthis class).&nbsp;&nbsp;We should catch this SecurityException and rethrow with one\nof our trademark helpful error messages. :)\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=64_\n", "url": "https://github.com/google/guice/issues/64", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Low", "bug", "imported"], "created": "2014-07-07 17:56:44", "closed": "2014-07-07 17:56:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Struts2 Plugin not installing user defined modules - Patch included", "body": "_From [zarars](https://code.google.com/u/101833268656305235757/) on March 14, 2007 11:03:50_\n\nThis is a tested patch to the problem discussed here: http://groups.google.com/group/google-guice/browse_thread/thread/6894cec32ae48d65 What steps will reproduce the problem? 1. Create a custom module (MyModule extends AbstractModule)\n2. Specify struts.objectFactory to guice and guice.module to your module\nclass (MyModule)\n3. Try injecting one of the classes you've mapped in your custom module in\na Struts2 action (created via ActionSupport) What is the expected output? What do you see instead? Instead of working, an error telling you that the mapping is not found. What version of the product are you using? On what operating system? 1.0 on Windows XP, JDK 1.5 Please provide any additional information below. http://groups.google.com/group/google-guice/browse_thread/thread/6894cec32ae48d65\n\n**Attachment:** [gist](https://gist.github.com/320ec25d24e114d039be)\n&nbsp;&nbsp;&nbsp;_[GuiceObjectFactory.InstallModule.patch](https://gist.githubusercontent.com/gissuebot/320ec25d24e114d039be/raw/855f76a7603ac9db27dd41592a2da3c63d74df9e/GuiceObjectFactory.InstallModule.patch)_\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=63_\n", "url": "https://github.com/google/guice/issues/63", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:56:42", "closed": "2014-07-07 17:56:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Extension to support javax.interceptor", "body": "_From [bileblog](https://code.google.com/u/103492904121565290181/) on March 14, 2007 09:17:59_\n\nSince you support aopalliance for interceptors, it might be worth adding support for \njavax.interceptor for a more JSR-friendly aop API. It's very simple and only allows for AroundInvoke, \nso shouldn't be that hard to check for and implement, I hope.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=61_\n", "url": "https://github.com/google/guice/issues/61", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:55:16", "closed": "2014-07-07 17:55:20", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Maven 2 POM for guice", "body": "_From [nils.wloka](https://code.google.com/u/100551008741719916888/) on March 13, 2007 09:22:39_\n\nMaven 2 metadata for guice would be great. Maybe you could even deploy it\nto some repository?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=60_\n", "url": "https://github.com/google/guice/issues/60", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 17:55:14", "closed": "2014-07-07 17:55:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "submit guice to the maven repository", "body": "_From [gk5885](https://code.google.com/u/116303290732678168218/) on March 12, 2007 09:43:32_\n\nguice seems great, and it'd be nice to be able to use it with maven without having to install the jars \ninto the repository manually.&nbsp;&nbsp;there already seems to be the beginning of a pom in the trunk, so it'd \nbe great if that got completed and the whole thing got put into the maven repository.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=59_\n", "url": "https://github.com/google/guice/issues/59", "user": "gissuebot", "labels": ["Milestone-Release2.0", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:54:56", "closed": "2014-07-07 17:55:13", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "MyModule.configure() should be public in the User's Guide", "body": "_From [burke.eric](https://code.google.com/u/107049228697365395345/) on March 09, 2007 11:53:16_\n\nThe MyModule example in the User's Guide, under the Startup heading,\ncontains this code:\n\npublic class MyModule implements Module {\n&nbsp;&nbsp;protected void configure(Binder binder) {\n&nbsp;&nbsp;&nbsp;&nbsp;...\n&nbsp;&nbsp;}\n}\n\nThe configure() method should be public, since it implements an interface\nand won't compile as written.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=57_\n", "url": "https://github.com/google/guice/issues/57", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:54:51", "closed": "2014-07-07 17:54:53", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "OutOfScopeException", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on March 08, 2007 16:15:17_\n\nOr better name.&nbsp;&nbsp;This is an exception that all Scopes including bundled\nones should throw when an attempt is made to use them \"out of scope\"; for\nexample using a RequestScoped object when you have no\nThreadLocalRequestContext set, meaning you're not inside any request.&nbsp;&nbsp;I\nthink it should probably be unchecked so it doesn't have to be wrapped to\nget out of a Provider.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=56_\n", "url": "https://github.com/google/guice/issues/56", "user": "gissuebot", "labels": ["1.1", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:54:49", "closed": "2014-07-07 17:54:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "bindConstant(foo) should be bindConstant().annotatedWith(foo)", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on March 06, 2007 19:40:10_\n\nIt's more consistent and more understandable, imho.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=53_\n", "url": "https://github.com/google/guice/issues/53", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:54:43", "closed": "2014-07-07 17:54:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Disallow conflicting scopes for linked bindings", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on March 02, 2007 15:20:01_\n\nIf you have\n\n&nbsp;bind(Foo.class).in(SomeScope.class);\nOR\n&nbsp;`@`SomeScope&nbsp;class&nbsp;Foo&nbsp;{}\n\nthen the following\n\n&nbsp;bind(Bar.class).to(Foo.class).in(SomeDifferentScope.class);\n\nhas underspecified behavior and we may lack the means to do anything smart\nabout this.&nbsp;&nbsp;I think we should prohibit \"rescoping\" like this.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=51_\n", "url": "https://github.com/google/guice/issues/51", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2014-07-07 17:54:38", "closed": "2014-07-07 17:54:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Clean up after exceptions in getImplicitBinding().", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on February 27, 2007 20:19:26_\n\nWe can leave behind a half constructed implicit binding.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=42_\n", "url": "https://github.com/google/guice/issues/42", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:54:07", "closed": "2014-07-07 17:54:08", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Guice should never ever inject a null value", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on February 27, 2007 14:58:17_\n\nRight now you can have a custom provider return null and I think guice will\ninject the null value.&nbsp;&nbsp;We should add sanity checking to make sure guice\n*never* injects null.&nbsp;&nbsp;This way people do not need to check for it in their\nconstructors etc., which in turn allows them to *use* null when they want\nto in their unit tests (which is quite a helpful ability to have).\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=41_\n", "url": "https://github.com/google/guice/issues/41", "user": "gissuebot", "labels": ["1.0RC3", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:54:05", "closed": "2014-07-07 17:54:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Binding API allows bogus sequences of calls", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on February 27, 2007 03:08:09_\n\nWe should tighten up the API so that you can only call things that are\nvalid; this will make auto-completion a breeze.&nbsp;&nbsp;A downside is that this\nusually forces us to mandate a particular *order* that the calls happen in\nas well, but I don't think this is a problem.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=36_\n", "url": "https://github.com/google/guice/issues/36", "user": "gissuebot", "labels": ["1.0RC3", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:53:37", "closed": "2014-07-07 17:53:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Prohibit bindings to any com.google.inject.* type", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on February 27, 2007 01:58:35_\n\nSomeone making such a binding seems like it could only lead to pain (\"so\nmuch pain\").&nbsp;&nbsp;We should probably forbid it?&nbsp;&nbsp;Without breaking the unit tests.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=32_\n", "url": "https://github.com/google/guice/issues/32", "user": "gissuebot", "labels": ["1.0RC3", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:53:27", "closed": "2014-07-07 17:53:29", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Handle de-duping of Modules (the &quot;diamond&quot; problem)", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on February 26, 2007 22:17:14_\n\nif module A installs B and C and B and C both install D, you'll get errors\nand you won't be able to create the container.&nbsp;&nbsp;We should be able to detect\nthis situation somehow and handle it correctly.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=31_\n", "url": "https://github.com/google/guice/issues/31", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:52:35", "closed": "2014-07-07 17:53:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Binder.addError() should accept a Throwable", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on February 26, 2007 22:14:47_\n\nIt's possible someone did something in their Module that caught an\nexception, and they should be able to include this in addError(), shouldn't\nthey?\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=30_\n", "url": "https://github.com/google/guice/issues/30", "user": "gissuebot", "labels": ["1.0RC3", "Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:52:33", "closed": "2014-07-07 17:52:35", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Require an @ScopeAnnotation on scope annotations", "body": "_From [crazyboblee](https://code.google.com/u/114815478402472606661/) on February 22, 2007 15:47:21_\n\nThis will help us catch problems where the user forgets to bind a scope.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=24_\n", "url": "https://github.com/google/guice/issues/24", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "imported"], "created": "2014-07-07 17:52:10", "closed": "2014-07-07 17:52:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Improve reporting of nested ProvisionExceptions", "body": "_From [kevinb9n](https://code.google.com/u/113026104107031516488/) on February 22, 2007 14:19:44_\n\nWhen a chain of dependencies produces a LocationException you get a whole\nchain of LocationExceptions; instead we could keep pushing additional\ncontext onto the initial LEx, then display a more unified and readable\nreport to the user.\n\n_Original issue: http://code.google.com/p/google-guice/issues/detail?id=23_\n", "url": "https://github.com/google/guice/issues/23", "user": "gissuebot", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2014-07-07 17:52:08", "closed": "2014-07-07 17:52:10", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}]}