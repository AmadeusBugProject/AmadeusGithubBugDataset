{"projectName": "requery/requery", "bugLabels": ["bug"], "captureTime": "Fri Jul  3 23:10:48 2020", "issues": [{"title": "The location of the Models file is different in different builds of the same code", "body": "The order of the packageNames Set is not guaranteed, this might be why the final location of the package is random:\r\nhttps://github.com/requery/requery/blob/d325639b4b14485d6375dd64c8931fac5088687b/requery-processor/src/main/java/io/requery/processor/EntityProcessor.java#L271\r\nShould it be sorted before use?", "url": "https://github.com/requery/requery/issues/862", "user": "zdevwu", "labels": ["bug"], "created": "2019-03-21 09:51:49", "closed": "2019-04-03 07:05:47", "commits": {"3070590c2ef76bb7062570bf9df03cd482db024a": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 12.000277777777777, "commitsDetails": [{"commitHash": "3070590c2ef76bb7062570bf9df03cd482db024a", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["72e07be8072ee9b57b9e593172fda0122a43ac23"], "nameRev": "3070590c2ef76bb7062570bf9df03cd482db024a tags/1.6.0~1", "commitMessage": "Resolve #862 Use sorted list for model package names (#864)\n\n", "commitDateTime": "2019-04-03 00:05:45", "authoredDateTime": "2019-04-03 08:05:45", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityProcessor.java", "insertions": 4, "deletions": 2, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityProcessor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityProcessor.findModelPackageName(io.requery.processor.EntityGraph)", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Annotation processor generates model types in arbitrary order, breaking incremental compilation", "body": "When observing `Models.java`, the order of types changes on every build, which breaks incremental compilation and instant-run on android.\r\n", "url": "https://github.com/requery/requery/issues/774", "user": "masc3d", "labels": ["bug"], "created": "2018-05-12 12:58:34", "closed": "2018-06-03 04:08:49", "commits": {"ec15eb63469f60890850da6e64b91c324f071d27": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 21.00027777777778, "commitsDetails": [{"commitHash": "ec15eb63469f60890850da6e64b91c324f071d27", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["db7063628f4dd02da8e04dd27fed5259fc9ce6bf"], "nameRev": "ec15eb63469f60890850da6e64b91c324f071d27 tags/1.6.0~30", "commitMessage": "Resolve #774 Generate Models source file in sorted order\n", "commitDateTime": "2018-06-02 21:08:42", "authoredDateTime": "2018-06-02 21:08:42", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/ModelGenerator.java", "insertions": 6, "deletions": 3, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ModelGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.ModelGenerator.generate()", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ec15eb63469f60890850da6e64b91c324f071d27"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 3, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.ModelGenerator.generate()"]}, {"title": "Using NumericExpression/StringExpression with mapped fields", "body": "In #217 you refactored some methods from the Functional interface into NumericExpression/StringExpression. This has caused some issues for me when moving from Requery 1.4.1 to 1.5.0. \r\n\r\nI'm using Converters to map e.g. java.time.Instant to Long. In 1.4.1 I could do MyEntity.TIMESTAMP.max() but this no longer works because my timestamp field is being generated as a QueryAttribute instead of a NumericAttribute. A similar problem occurs for string operations on fields that map to strings.\r\n\r\nI tried casting e.g. ((NumericAttribute<MyEntity, Instant>)MyEntity.TIMESTAMP).max() but this causes java.lang.ClassCastException: io.requery.meta.ImmutableAttribute cannot be cast to io.requery.meta.NumericAttribute.\r\n\r\nAny ideas? For now I'm going back to 1.4.1", "url": "https://github.com/requery/requery/issues/752", "user": "pdjstone", "labels": ["bug"], "created": "2018-02-02 10:40:09", "closed": "2018-02-08 06:41:21", "commits": {"42f6650967d9a19404597678c7accd4597ff2add": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "42f6650967d9a19404597678c7accd4597ff2add", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["bbe9a983cfb0bdfbd1f7bdea3da7ef712fa45de7"], "nameRev": "42f6650967d9a19404597678c7accd4597ff2add tags/1.5.1~6", "commitMessage": "Resolve #752 Add min/max functions to base expression types\n", "commitDateTime": "2018-02-07 22:41:11", "authoredDateTime": "2018-02-07 22:41:11", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/meta/AttributeDelegate.kt", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "requery/src/main/java/io/requery/query/FieldExpression.java", "insertions": 13, "deletions": 1, "lines": 14}, {"filePath": "requery/src/main/java/io/requery/query/Functional.java", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "requery/src/main/java/io/requery/query/NumericExpression.java", "insertions": 1, "deletions": 7, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FieldExpression.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.FieldExpression.max()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.FieldExpression.min()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Functional.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.max()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.min()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NumericExpression.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.max()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.query.min()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["42f6650967d9a19404597678c7accd4597ff2add"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 26, "deletions": 10, "lines": 36, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 6, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 2, "spoonFilesChanged": 3, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/query", "requery-kotlin/src/main/kotlin/io/requery/meta/AttributeDelegate.kt"], "changesInPackagesSPOON": ["io.requery.query.max()", "io.requery.query.min()", "io.requery.query.FieldExpression.max()", "io.requery.query.FieldExpression.min()"]}, {"title": "Cannot use function like max() for NamedExpression", "body": "In requery 1.5.0 I cannot use expressions like\r\n```\r\ndatastore.select(\r\n    NamedExpression.of(\"id\", Long.class).max().as(\"max_id\"),\r\n    ...\r\n).from(...)...\r\n```\r\nbecause of symbol `max()` is not found.\r\nIn 1.4 everything worked ok.\r\n\r\nLooks like that was broken in b5dd28cc05918da5e2964d69a8c5dd53f95bfa33", "url": "https://github.com/requery/requery/issues/749", "user": "Magister", "labels": ["bug"], "created": "2018-01-24 14:16:38", "closed": "2018-01-31 08:15:16", "commits": {"bbe9a983cfb0bdfbd1f7bdea3da7ef712fa45de7": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "bbe9a983cfb0bdfbd1f7bdea3da7ef712fa45de7", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["403077b7715f17c769d81b4c57c734613d2a937c"], "nameRev": "bbe9a983cfb0bdfbd1f7bdea3da7ef712fa45de7 tags/1.5.1~7", "commitMessage": "Resolve #749 Add methods to create different types of NamedExpressions\n", "commitDateTime": "2018-01-31 00:15:07", "authoredDateTime": "2018-01-31 00:15:07", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/query/NamedExpression.java", "insertions": 13, "deletions": 89, "lines": 102}, {"filePath": "requery/src/main/java/io/requery/query/NamedNumericExpression.java", "insertions": 65, "deletions": 0, "lines": 65}, {"filePath": "requery/src/main/java/io/requery/query/NamedStringExpression.java", "insertions": 59, "deletions": 0, "lines": 59}], "commitSpoonAstDiffStats": [{"spoonFilePath": "NamedExpression.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.NamedExpression.NamedStringExpression.trim()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.query.NamedExpression.NamedStringExpression.substr(int,int)", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.query.NamedExpression.NamedNumericExpression.avg()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.query.NamedExpression.ofInteger(java.lang.String)", "TOT": 5, "UPD": 1, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.requery.query.NamedExpression.NamedStringExpression.trim(java.lang.String)", "TOT": 4, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.requery.query.NamedExpression.ofString(java.lang.String)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.NamedExpression.NamedStringExpression", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.query.NamedExpression.NamedNumericExpression", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.query.NamedExpression.ofDouble(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.NamedExpression.ofFloat(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.NamedExpression.ofLong(java.lang.String)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NamedNumericExpression.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.NamedNumericExpression", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "NamedStringExpression.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.NamedStringExpression", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bbe9a983cfb0bdfbd1f7bdea3da7ef712fa45de7"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 137, "deletions": 89, "lines": 226, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 33, "UPD": 10, "INS": 9, "MOV": 7, "DEL": 7, "spoonFilesChanged": 3, "spoonMethodsChanged": 13}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/query"], "changesInPackagesSPOON": ["io.requery.query.NamedExpression.ofFloat(java.lang.String)", "io.requery.query.NamedExpression.ofInteger(java.lang.String)", "io.requery.query.NamedExpression.NamedStringExpression", "io.requery.query.NamedExpression.ofString(java.lang.String)", "io.requery.query.NamedStringExpression", "io.requery.query.NamedExpression.ofDouble(java.lang.String)", "io.requery.query.NamedExpression.NamedStringExpression.trim()", "io.requery.query.NamedExpression.NamedStringExpression.trim(java.lang.String)", "io.requery.query.NamedNumericExpression", "io.requery.query.NamedExpression.ofLong(java.lang.String)", "io.requery.query.NamedExpression.NamedStringExpression.substr(int,int)", "io.requery.query.NamedExpression.NamedNumericExpression.avg()", "io.requery.query.NamedExpression.NamedNumericExpression"]}, {"title": "Raw execution of stored procs results in a connection leak", "body": "I'm currently migrating a legacy database that I've inherited to something fronted by a service. I've been using requery to reconstuct the stored procs but some are rather involved. In doing so I've run into an issue. I think that if one runs a query of the form:\r\n\r\n```\r\nentityDataStore.raw(\"EXECUTE SOME_STORED_PROC @VALUE = ?\", value)\r\n```\r\nThat the RawTupleQuery has a queryType of SELECT, meaning that the statement is wrapped in a TupleResult. It looks like either if an exception is thrown while executing the query or if one immediately calls close on this object, there's no reference to connection close().\r\n\r\nIn BaseResult, we look for open iterators and close them. Is there some other way to use requery to support this use case, or is requery even intended for this use? I'd ideally be able to have a core raw (understandably unsafe) functionality that dumbly closes the statement and connection.", "url": "https://github.com/requery/requery/issues/737", "user": "stepbeek", "labels": ["bug"], "created": "2017-12-20 15:08:15", "closed": "2018-01-05 07:31:09", "commits": {"c8424605a1ce45620571a47e524fe3e58c425f41": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 15.000277777777777, "commitsDetails": [{"commitHash": "c8424605a1ce45620571a47e524fe3e58c425f41", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["b5dd28cc05918da5e2964d69a8c5dd53f95bfa33"], "nameRev": "c8424605a1ce45620571a47e524fe3e58c425f41 tags/1.5.0~4", "commitMessage": "Resolve #737 Connection not closed if exception executing raw query\n", "commitDateTime": "2018-01-04 23:31:01", "authoredDateTime": "2018-01-04 23:31:01", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/RawTupleQuery.java", "insertions": 16, "deletions": 3, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RawTupleQuery.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.RawTupleQuery.TupleResult.createIterator(int,int)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.sql.RawTupleQuery.TupleResult.close()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c8424605a1ce45620571a47e524fe3e58c425f41"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 16, "deletions": 3, "lines": 19, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.RawTupleQuery.TupleResult.close()", "io.requery.sql.RawTupleQuery.TupleResult.createIterator(int,int)"]}, {"title": "RxJava `observableResult()` accumulating iterators until complete", "body": "I confronted with behavior that query with \"observableResult()\" will accumulate iterators in itself until close. It can take a lot of memory for long-live observables and cause OOM exception with app crash.\r\n\r\nFor example select lis of entities:\r\n```\r\ndataStore\r\n.select(CarEntity.class)\r\n.where(CarEntity.DRIVER_ID.eq(driverId))\r\n.get()\r\n.observableResult()\r\n.observeOn(Schedulers.io())\r\n.map(cars -> cars.toList())\r\n.subscribe(...);\r\n```\r\nOn every CarEntity related commit \r\n`.map(cars -> cars.toList())`\r\nwill be called which leads to creation of Iterator, see BaseResult.toList() implementation.\r\n\r\nSo, is there any way to get only current (last) iterator and do not store history of them? Do not use \" Queue<CloseableIterator<E>> iterators\" at all", "url": "https://github.com/requery/requery/issues/731", "user": "maxxx", "labels": ["bug"], "created": "2017-12-01 12:31:53", "closed": "2017-12-03 18:07:31", "commits": {"7c2804374888d293eb07e1dfa7d1675ede6aeaf6": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "7c2804374888d293eb07e1dfa7d1675ede6aeaf6", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["b1ae3e0b2379afd4bd3f35f00e8f675ef72189b1"], "nameRev": "7c2804374888d293eb07e1dfa7d1675ede6aeaf6 tags/1.5.0~6", "commitMessage": "Resolve #731 Don't store Result iterators when not needed\n", "commitDateTime": "2017-12-03 10:07:25", "authoredDateTime": "2017-12-03 10:07:25", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/query/BaseResult.java", "insertions": 27, "deletions": 12, "lines": 39}, {"filePath": "requery/src/main/java/io/requery/sql/CollectionResult.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/GeneratedKeyResult.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "requery/src/main/java/io/requery/sql/RawEntityQuery.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/RawTupleQuery.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/SelectResult.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BaseResult.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.BaseResult.iterator()", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.BaseResult.stream()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.query.BaseResult.collect(java.util.Collection)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.BaseResult.first()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.query.BaseResult.firstOr(java.lang.Object)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.query.BaseResult.firstOr(io.requery.util.function.Supplier)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.BaseResult.each(io.requery.util.function.Consumer)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.query.BaseResult.toMap(io.requery.query.Expression,java.util.Map)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.query.BaseResult.iterator(int,int)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.requery.query.BaseResult.createIterator()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.BaseResult.createIterator(int,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CollectionResult.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.CollectionResult.iterator(int,int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "GeneratedKeyResult.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.GeneratedKeyResult.iterator(int,int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RawEntityQuery.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.RawEntityQuery.EntityResult.iterator(int,int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RawTupleQuery.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.RawTupleQuery.TupleResult.iterator(int,int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SelectResult.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SelectResult.iterator(int,int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7c2804374888d293eb07e1dfa7d1675ede6aeaf6"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 33, "deletions": 18, "lines": 51, "gitFilesChange": 6}, "spoonStatsSummary": {"TOT": 25, "UPD": 13, "INS": 4, "MOV": 7, "DEL": 1, "spoonFilesChanged": 6, "spoonMethodsChanged": 16}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery/src/main/java/io/requery/query"], "changesInPackagesSPOON": ["io.requery.query.BaseResult.createIterator(int,int)", "io.requery.query.BaseResult.createIterator()", "io.requery.sql.RawTupleQuery.TupleResult.iterator(int,int)", "io.requery.query.BaseResult.first()", "io.requery.sql.CollectionResult.iterator(int,int)", "io.requery.query.BaseResult.iterator()", "io.requery.query.BaseResult.firstOr(java.lang.Object)", "io.requery.sql.SelectResult.iterator(int,int)", "io.requery.query.BaseResult.stream()", "io.requery.query.BaseResult.collect(java.util.Collection)", "io.requery.query.BaseResult.each(io.requery.util.function.Consumer)", "io.requery.query.BaseResult.firstOr(io.requery.util.function.Supplier)", "io.requery.query.BaseResult.toMap(io.requery.query.Expression,java.util.Map)", "io.requery.sql.RawEntityQuery.EntityResult.iterator(int,int)", "io.requery.sql.GeneratedKeyResult.iterator(int,int)", "io.requery.query.BaseResult.iterator(int,int)"]}, {"title": "Inconsistent INTEGER type mapping with raw queries (at least on Android)", "body": "The same column of type INTEGER in raw query can be mapped to Long or to Integer.\r\n\r\nThe problem occurs because type mapping is stored in `Map` class, and the type mapping method:\r\nhttps://github.com/requery/requery/blob/14a8ac29a4a97872878ae773fc8c96d3e7c10dbb/requery/src/main/java/io/requery/sql/GenericMapping.java#L249\r\nJust iterates through that map to get mapped type.\r\n\r\nTypes map looks like this:\r\n```\r\n0 = {AbstractMap$SimpleEntry@8270} \"class java.sql.Timestamp\" -> \"TIMESTAMP\"\r\n1 = {AbstractMap$SimpleEntry@8271} \"class java.lang.Boolean\" -> \"BOOLEAN\"\r\n2 = {AbstractMap$SimpleEntry@8272} \"class java.lang.String\" -> \"VARCHAR(255)\"\r\n3 = {AbstractMap$SimpleEntry@8273} \"class java.math.BigDecimal\" -> \"DECIMAL\"\r\n4 = {AbstractMap$SimpleEntry@8274} \"float\" -> \"FLOAT\"\r\n5 = {AbstractMap$SimpleEntry@8275} \"class java.lang.Double\" -> \"REAL\"\r\n6 = {AbstractMap$SimpleEntry@8276} \"interface java.sql.Blob\" -> \"BLOB\"\r\n7 = {AbstractMap$SimpleEntry@8277} \"interface java.sql.Clob\" -> \"CLOB\"\r\n8 = {AbstractMap$SimpleEntry@8278} \"class java.lang.Byte\" -> \"TINYINT\"\r\n9 = {AbstractMap$SimpleEntry@8279} \"short\" -> \"SMALLINT\"\r\n10 = {AbstractMap$SimpleEntry@8280} \"class java.lang.Short\" -> \"SMALLINT\"\r\n11 = {AbstractMap$SimpleEntry@8281} \"class [B\" -> \"VARBINARY(null)\"\r\n12 = {AbstractMap$SimpleEntry@8282} \"class java.sql.Date\" -> \"DATE\"\r\n13 = {AbstractMap$SimpleEntry@8283} \"int\" -> \"INTEGER\"\r\n14 = {AbstractMap$SimpleEntry@8284} \"class java.lang.Integer\" -> \"INTEGER\"\r\n15 = {AbstractMap$SimpleEntry@8285} \"class java.lang.Long\" -> \"INTEGER\"\r\n16 = {AbstractMap$SimpleEntry@8286} \"boolean\" -> \"BOOLEAN\"\r\n17 = {AbstractMap$SimpleEntry@8287} \"class java.lang.Float\" -> \"FLOAT\"\r\n18 = {AbstractMap$SimpleEntry@8288} \"long\" -> \"INTEGER\"\r\n19 = {AbstractMap$SimpleEntry@8289} \"byte\" -> \"TINYINT\"\r\n20 = {AbstractMap$SimpleEntry@8290} \"class java.sql.Time\" -> \"TIME\"\r\n21 = {AbstractMap$SimpleEntry@8291} \"double\" -> \"REAL\"\r\n22 = {AbstractMap$SimpleEntry@8292} \"class java.util.Date\" -> \"DATE\"\r\n```\r\nSo, you see - SQL INTEGER type corresponds to Long and to Integer java types.\r\n\r\nAs `Map` does not guarantee consistent iteration order, we get different results in different situations - at least, the same code on API-22 returns Integer, while on API-19 - Long. Maybe there are other factors.\r\n\r\nSo it's impossible to use raw queries with `Long` or `Integer` fields - app just crashes because of incompatible types.\r\n\r\nP.S. for now my work-around was to use custom Mapping class.", "url": "https://github.com/requery/requery/issues/728", "user": "Magister", "labels": ["bug"], "created": "2017-11-20 13:26:14", "closed": "2017-11-27 06:31:52", "commits": {"0b6cb1e1909edcaa8ab23dbfb123d9faa4c8e6e7": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "0b6cb1e1909edcaa8ab23dbfb123d9faa4c8e6e7", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["70c2ea662692f53f9c3190b6e47fd16149e80da0"], "nameRev": "0b6cb1e1909edcaa8ab23dbfb123d9faa4c8e6e7 tags/1.5.0~9", "commitMessage": "Resolve #728 SQLite inconsistent type mapping for Integer types in raw query\n", "commitDateTime": "2017-11-26 22:31:44", "authoredDateTime": "2017-11-26 22:31:44", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/GenericMapping.java", "insertions": 17, "deletions": 4, "lines": 21}, {"filePath": "requery/src/main/java/io/requery/sql/Mapping.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "requery/src/main/java/io/requery/sql/RawTupleQuery.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GenericMapping.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.GenericMapping.typeOf(int)", "TOT": 6, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.requery.sql.GenericMapping", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.GenericMapping.typesOf(int)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Mapping.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.typeOf(int)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RawTupleQuery.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.RawTupleQuery.TupleResult.iterator(int,int)", "TOT": 6, "UPD": 4, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0b6cb1e1909edcaa8ab23dbfb123d9faa4c8e6e7"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 23, "deletions": 9, "lines": 32, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 18, "UPD": 8, "INS": 5, "MOV": 3, "DEL": 2, "spoonFilesChanged": 3, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.GenericMapping", "io.requery.sql.GenericMapping.typesOf(int)", "io.requery.sql.typeOf(int)", "io.requery.sql.RawTupleQuery.TupleResult.iterator(int,int)", "io.requery.sql.GenericMapping.typeOf(int)"]}, {"title": "1.4.1 Proguard fails", "body": "```Warning: io.requery.sql.platform.PostgresSQL$BlobType: can't find referenced class javax.sql.rowset.serial.SerialBlob```\r\n\r\nIt works fine on version 1.4.0.\r\n\r\n```Error:11:55:07.354 [ERROR] [system.err] Note: there were 31 duplicate class definitions.\r\n11:55:07.354 [ERROR] [system.err]       (http://proguard.sourceforge.net/manual/troubleshooting.html#duplicateclass)\r\n11:55:07.779 [ERROR] [system.err] Warning: io.requery.sql.platform.PostgresSQL$BlobType: can't find referenced class javax.sql.rowset.serial.SerialBlob\r\n11:55:07.779 [ERROR] [system.err] Warning: io.requery.sql.platform.PostgresSQL$BlobType: can't find referenced class javax.sql.rowset.serial.SerialBlob\r\n11:55:07.779 [ERROR] [system.err] Warning: io.requery.sql.platform.PostgresSQL$BlobType: can't find referenced class javax.sql.rowset.serial.SerialBlob\r\n11:55:10.120 [ERROR] [system.err] Warning: there were 3 unresolved references to classes or interfaces.\r\n11:55:10.120 [ERROR] [system.err]          You may need to add missing library jars or update their versions.\r\n11:55:10.120 [ERROR] [system.err]          If your code works fine without the missing classes, you can suppress\r\n11:55:10.120 [ERROR] [system.err]          the warnings with '-dontwarn' options.\r\n11:55:10.120 [ERROR] [system.err]          (http://proguard.sourceforge.net/manual/troubleshooting.html#unresolvedclass)\r\n11:55:10.122 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] \r\n11:55:10.122 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] FAILURE: Build failed with an exception.\r\n11:55:10.122 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] \r\n11:55:10.122 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] * What went wrong:\r\n11:55:10.122 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] Execution failed for task ':app:transformClassesAndResourcesWithProguardForProdRelease'.\r\n11:55:10.123 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] > Job failed, see logs for details\r\n11:55:10.123 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] \r\n11:55:10.123 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] * Try:\r\n11:55:10.123 [ERROR] [org.gradle.internal.buildevents.BuildExceptionReporter] Run with --stacktrace option to get the stack trace. \r\n```", "url": "https://github.com/requery/requery/issues/708", "user": "GeorgePetri", "labels": ["bug"], "created": "2017-10-17 08:59:08", "closed": "2017-10-19 08:35:30", "commits": {"f0b95e21aba2b6b774311fb35a4801a14fa48494": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "f0b95e21aba2b6b774311fb35a4801a14fa48494", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["5dd705a56dafa28351ee728289a79023f0e6e943"], "nameRev": "f0b95e21aba2b6b774311fb35a4801a14fa48494 tags/1.5.0~23", "commitMessage": "Resolve #708 Update Android proguard rules\n", "commitDateTime": "2017-10-19 01:35:26", "authoredDateTime": "2017-10-19 01:35:18", "commitGitStats": [{"filePath": "requery-android/proguard-rules.pro", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f0b95e21aba2b6b774311fb35a4801a14fa48494"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 0, "lines": 1, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/proguard-rules.pro"]}, {"title": "Error in creating table", "body": "Been using this library in a while but this is the first time I encountered this problem. Whenever I run this code \r\n```\r\nnew SchemaModifier(configuration)\r\n                .createTables(TableCreationMode.CREATE_NOT_EXISTS);\r\n```\r\n\r\nim getting error \r\n\r\n```\r\njava.util.NoSuchElementException\r\n                                                                               at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5406)\r\n                                                                               at android.app.ActivityThread.-wrap2(ActivityThread.java)\r\n                                                                               at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1545)\r\n                                                                               at android.os.Handler.dispatchMessage(Handler.java:102)\r\n                                                                               at android.os.Looper.loop(Looper.java:154)\r\n                                                                               at android.app.ActivityThread.main(ActivityThread.java:6119)\r\n                                                                               at java.lang.reflect.Method.invoke(Native Method)\r\n                                                                               at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:886)\r\n                                                                               at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:776)\r\n                                                                            Caused by: java.util.NoSuchElementException\r\n                                                                               at java.util.LinkedHashMap$LinkedHashIterator.nextEntry(LinkedHashMap.java:413)\r\n                                                                               at java.util.LinkedHashMap$KeyIterator.next(LinkedHashMap.java:422)\r\n                                                                               at java.util.Collections$UnmodifiableCollection$1.next(Collections.java:1115)\r\n                                                                               at io.requery.sql.SchemaModifier.createForeignKeyColumn(SchemaModifier.java:459)\r\n                                                                               at io.requery.sql.SchemaModifier.tableCreateStatement(SchemaModifier.java:425)\r\n                                                                               at io.requery.sql.SchemaModifier.createTables(SchemaModifier.java:147)\r\n                                                                               at io.requery.sql.SchemaModifier.createTables(SchemaModifier.java:126)\r\n                                                                               at io.requery.android.sqlite.DatabaseSource.onCreate(DatabaseSource.java:201)\r\n                                                                               at android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(SQLiteOpenHelper.java:251)\r\n                                                                               at android.database.sqlite.SQLiteOpenHelper.getWritableDatabase(SQLiteOpenHelper.java:163)\r\n                                                                               at io.requery.android.sqlite.DatabaseSource.getConnection(DatabaseSource.java:230)\r\n                                                                               at io.requery.sql.SchemaModifier.getConnection(SchemaModifier.java:91)\r\n                                                                               at io.requery.sql.SchemaModifier.createTables(SchemaModifier.java:124)\r\n```", "url": "https://github.com/requery/requery/issues/699", "user": "christianCallelero", "labels": ["bug"], "created": "2017-10-09 05:54:03", "closed": "2017-10-11 05:28:57", "commits": {"705e3407dce2ad36a78eead32ef30a470ec8c978": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "705e3407dce2ad36a78eead32ef30a470ec8c978", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["5bc76c3ba65568d9ca98f010bdddac7cd52cfcfe"], "nameRev": "705e3407dce2ad36a78eead32ef30a470ec8c978 tags/1.5.0~25", "commitMessage": "Resolve #699 Fix NoSuchElementException on empty key attributes\n", "commitDateTime": "2017-10-10 22:28:51", "authoredDateTime": "2017-10-10 22:28:51", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/SchemaModifier.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SchemaModifier.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SchemaModifier.createForeignKeyColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute,boolean,boolean)", "TOT": 7, "UPD": 0, "INS": 2, "MOV": 4, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["705e3407dce2ad36a78eead32ef30a470ec8c978"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 1, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 2, "MOV": 4, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.SchemaModifier.createForeignKeyColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute,boolean,boolean)"]}, {"title": "Endless toString loop for bidirectional reference", "body": "I cannot get around this stack overflow error:\r\n\r\n`at java.util.AbstractCollection.toString(AbstractCollection.java:462)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskListDataEntity.toString(TaskListDataEntity.java:368)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskItemDataEntity.toString(TaskItemDataEntity.java:539)\r\n\tat java.lang.String.valueOf(String.java:2994)\r\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\r\n\tat java.util.AbstractCollection.toString(AbstractCollection.java:462)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskListDataEntity.toString(TaskListDataEntity.java:368)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskItemDataEntity.toString(TaskItemDataEntity.java:539)\r\n\tat java.lang.String.valueOf(String.java:2994)\r\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\r\n\tat java.util.AbstractCollection.toString(AbstractCollection.java:462)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskListDataEntity.toString(TaskListDataEntity.java:368)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskItemDataEntity.toString(TaskItemDataEntity.java:539)\r\n\tat java.lang.String.valueOf(String.java:2994)\r\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\r\n\tat java.util.AbstractCollection.toString(AbstractCollection.java:462)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskListDataEntity.toString(TaskListDataEntity.java:368)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskItemDataEntity.toString(TaskItemDataEntity.java:539)\r\n\tat java.lang.String.valueOf(String.java:2994)\r\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\r\n\tat java.util.AbstractCollection.toString(AbstractCollection.java:462)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskListDataEntity.toString(TaskListDataEntity.java:368)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskItemDataEntity.toString(TaskItemDataEntity.java:539)\r\n\tat java.lang.String.valueOf(String.java:2994)\r\n\tat java.lang.StringBuilder.append(StringBuilder.java:131)\r\n\tat java.util.AbstractCollection.toString(AbstractCollection.java:462)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskListDataEntity.toString(TaskListDataEntity.java:368)\r\n\tat io.requery.proxy.EntityProxy.toString(EntityProxy.java:423)\r\n\tat com.bottlerocketstudios.infrastructure.requery.data.TaskItemDataEntity.toString(TaskItemDataEntity.java:539)\r\n\tat java.lang.String.valueOf(String.jav`\r\n\r\nOneToMany side:\r\n\r\n```kotlin\r\n@Entity\r\n@Table(name = \"task_list\")\r\ninterface TaskListData : Persistable {\r\n\r\n    @get:Key\r\n    @get:Generated\r\n    var id: Long\r\n\r\n    var name: String\r\n\r\n    @get:JunctionTable(type = OwnerData::class)\r\n    @get:ManyToMany\r\n    var owners: Set<PersonData>\r\n\r\n    @get:OneToMany(mappedBy = \"task_list_id\", cascade = arrayOf(CascadeAction.SAVE, CascadeAction.DELETE))\r\n    var tasks: Set<TaskItemData>\r\n\r\n    var created: Timestamp\r\n\r\n    var modified: Timestamp?\r\n}\r\n```\r\n\r\nand the ManyToOne side:\r\n\r\n```kotlin\r\n@Entity\r\n@Table(name = \"task_item\")\r\ninterface TaskItemData : Persistable {\r\n\r\n    @get:Key\r\n    @get:Generated\r\n    var id: Long\r\n\r\n    var name: String\r\n\r\n    @get:ManyToOne\r\n    @get:JoinColumn(name = \"task_list_id\")\r\n    var task_list_id: TaskListData\r\n\r\n    @get:ForeignKey(delete = ReferentialAction.NO_ACTION)\r\n    @get:OneToOne\r\n    @get:Column(name = \"person_id\")\r\n    var assignee: PersonData?\r\n\r\n    @get:Column(name = \"due_date\")\r\n    var dueDate: java.sql.Date?\r\n\r\n    @get:Column(name = \"complete_flag\")\r\n    var isComplete: Boolean\r\n\r\n    var created: Timestamp\r\n\r\n    var modified: Timestamp?\r\n}\r\n```", "url": "https://github.com/requery/requery/issues/697", "user": "dbaggett", "labels": ["bug"], "created": "2017-10-06 20:45:12", "closed": "2017-10-07 21:18:51", "commits": {"9f3b6c6d4c98dda8b486a6a2e46e421013d09e2a": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "9f3b6c6d4c98dda8b486a6a2e46e421013d09e2a", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["00e72c64a00c1163483e37a988eb697d2a28f965"], "nameRev": "9f3b6c6d4c98dda8b486a6a2e46e421013d09e2a tags/1.4.1~1", "commitMessage": "Resolve #697 Fix stack overflow in entity toString()\n", "commitDateTime": "2017-10-07 14:18:42", "authoredDateTime": "2017-10-07 14:18:42", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/proxy/EntityProxy.java", "insertions": 7, "deletions": 1, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityProxy.java", "spoonMethods": [{"spoonMethodName": "io.requery.proxy.EntityProxy.toString()", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9f3b6c6d4c98dda8b486a6a2e46e421013d09e2a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 1, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 5, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/proxy"], "changesInPackagesSPOON": ["io.requery.proxy.EntityProxy.toString()"]}, {"title": "Embedded Not Working: NoSuchMethodError getParameters()", "body": "Hi,\r\n\r\nI think I've tried everything but I can't make the embedded annotation work.\r\nMy problem is that I have a json like this:\r\n`{ ad: {id: \"myId\", wishes: {brand: \"Hehe\"}}}`\r\nSO I'm using jackson with requery to deserialize it but it always crash.\r\nThe brands could be inline in the model, but the json cannot change.\r\n\r\n```java\r\n@Entity\r\npublic abstract class AbstractAd implements Persistable, Parcelable {\r\n    @Key\r\n    String id;\r\n\r\n    @Embedded\r\n    AdWishes wishes;\r\n}\r\n```\r\n \r\n```java\r\n@Embedded\r\npublic class AdWishes {\r\n    @JsonProperty(\"brand\")\r\n    @Column\r\n    String brands;\r\n}\r\n```\r\n\r\nAnd it gives me:\r\n```\r\nNo virtual method getParameters()[Ljava/lang/reflect/Parameter; in class Ljava/lang/reflect/Method; or its super classes (declaration of 'java.lang.reflect.Method' appears in /system/framework/core-oj.jar)\r\n    io.requery.jackson.EntityBeanDeserializer.deserializeFromObjectUsingNonDefault(EntityBeanDeserializer.java:106)\r\n    com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:314)\r\n    io.requery.jackson.EntityBeanDeserializer.deserializeFromObject(EntityBeanDeserializer.java:49)\r\n    com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:148)\r\n```", "url": "https://github.com/requery/requery/issues/696", "user": "VincentMolinie", "labels": ["bug"], "created": "2017-10-04 09:57:41", "closed": "2017-10-05 16:32:10", "commits": {"00e72c64a00c1163483e37a988eb697d2a28f965": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "00e72c64a00c1163483e37a988eb697d2a28f965", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["eb441df0eab945dd294bdbd9883d143e691cdb5a"], "nameRev": "00e72c64a00c1163483e37a988eb697d2a28f965 tags/1.4.1~2", "commitMessage": "Resolve #696 Fix method parameter check for getter returning an embedded type\n", "commitDateTime": "2017-10-05 09:32:06", "authoredDateTime": "2017-10-05 09:32:06", "commitGitStats": [{"filePath": "requery-jackson/src/main/java/io/requery/jackson/EntityBeanDeserializer.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityBeanDeserializer.java", "spoonMethods": [{"spoonMethodName": "io.requery.jackson.EntityBeanDeserializer.deserializeFromObjectUsingNonDefault(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["00e72c64a00c1163483e37a988eb697d2a28f965"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-jackson/src/main/java/io/requery/jackson"], "changesInPackagesSPOON": ["io.requery.jackson.EntityBeanDeserializer.deserializeFromObjectUsingNonDefault(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)"]}, {"title": "ClassCastException for entity with Long primary key in Kotlin on Android", "body": "An example of this crash is available [here](https://github.com/scompt/requery_bug). Just build the app (`./gradlew assembleDebug`), install it (`adb install app/build/outputs/apk/debug/app-debug.apk`), run it, and you'll get the exception below.\r\n\r\nThe entity in question is defined so:\r\n\r\n```\r\n@Entity\r\ndata class ExampleEntity (\r\n        @get:Key @get:Generated\r\n        val id: Long,\r\n\r\n        val name: String?\r\n) : Persistable\r\n```\r\n\r\nand I'm trying to insert it like so:\r\n\r\n```\r\n        entityStore.insert(ExampleEntity(5, null), Long::class).subscribe()\r\n```\r\n\r\nAny ideas what could be the problem?\r\n\r\n# Exception Stacktrace\r\n\r\n```\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): FATAL EXCEPTION: main\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): Process: com.scompt.requery_bug, PID: 17918\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): io.reactivex.exceptions.OnErrorNotImplementedException: java.lang.Long cannot be cast to long\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.reactivex.internal.functions.Functions$OnErrorMissingConsumer.accept(Functions.java:704)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.reactivex.internal.functions.Functions$OnErrorMissingConsumer.accept(Functions.java:701)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.reactivex.internal.observers.ConsumerSingleObserver.onError(ConsumerSingleObserver.java:45)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.reactivex.internal.operators.single.SingleFromCallable.subscribeActual(SingleFromCallable.java:43)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.reactivex.Single.subscribe(Single.java:2703)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.reactivex.Single.subscribe(Single.java:2689)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.reactivex.Single.subscribe(Single.java:2610)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat com.scompt.requery_bug.BugApplication.onCreate(BikeBuilderApplication.kt:38)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1013)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat android.app.ActivityThread.handleBindApplication(ActivityThread.java:4712)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat android.app.ActivityThread.-wrap1(ActivityThread.java)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1405)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat android.os.Handler.dispatchMessage(Handler.java:102)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat android.os.Looper.loop(Looper.java:148)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat android.app.ActivityThread.main(ActivityThread.java:5422)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat java.lang.reflect.Method.invoke(Native Method)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:726)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:616)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): Caused by: java.lang.ClassCastException: java.lang.Long cannot be cast to long\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat java.lang.Class.cast(Class.java:1505)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.requery.sql.EntityDataStore.insert(EntityDataStore.java:207)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.requery.sql.KotlinEntityDataStore.insert(KotlinEntityDataStore.kt:121)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.requery.reactivex.KotlinReactiveEntityStore$insert$3.call(KotlinReactiveEntityStore.kt:59)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \tat io.reactivex.internal.operators.single.SingleFromCallable.subscribeActual(SingleFromCallable.java:35)\r\n10-03 12:48:37.155 E/AndroidRuntime(17918): \t... 14 more\r\n```", "url": "https://github.com/requery/requery/issues/693", "user": "scompt", "labels": ["bug"], "created": "2017-10-03 10:57:22", "closed": "2017-11-29 07:50:39", "commits": {"526ff0120daaf83df60cb7e17710ff95ab12adef": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 56.000277777777775, "commitsDetails": [{"commitHash": "526ff0120daaf83df60cb7e17710ff95ab12adef", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["0b6cb1e1909edcaa8ab23dbfb123d9faa4c8e6e7"], "nameRev": "526ff0120daaf83df60cb7e17710ff95ab12adef tags/1.5.0~8", "commitMessage": "Resolve #693 Kotlin ClassCastException when using insert returning key\n", "commitDateTime": "2017-11-28 23:50:32", "authoredDateTime": "2017-11-28 23:50:32", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["526ff0120daaf83df60cb7e17710ff95ab12adef"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt"]}, {"title": "How do I suppress reserved word warnings?", "body": "I'm getting warnings from requery about reserved words for a transient property in Kotlin.\r\n\r\nHere is the relevant code:\r\n\r\n```\r\ndata class Transaction(\r\n\r\n  ...\r\n\r\n  @get:JsonProperty(\"user\")\r\n  @get:Transient // Requery warns even though this is transient :(\r\n  val user: User? = null\r\n)\r\n```\r\n\r\nAnd this is the warning I get:\r\n\r\n```\r\nw: /Users/.../model/Transaction.java:66: warning: Column or index name user may need to be escaped\r\nw: \r\nw:     public final co.bird.model.User getUser() {\r\n```\r\n\r\nIs there a way to suppress (or fix) this warning? Thanks!", "url": "https://github.com/requery/requery/issues/664", "user": "ninjudd", "labels": ["bug"], "created": "2017-08-17 22:32:46", "closed": "2017-08-18 06:30:23", "commits": {"f01e60638a2c78f1077c4089600f8303ab8a49cf": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f01e60638a2c78f1077c4089600f8303ab8a49cf", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["6ab6bae13e12626958f8ec169d59086d3b524667"], "nameRev": "f01e60638a2c78f1077c4089600f8303ab8a49cf tags/1.4.1~19", "commitMessage": "Resolve #664 Don't check transient attributes for reserved names\n", "commitDateTime": "2017-08-17 23:30:15", "authoredDateTime": "2017-08-17 23:30:15", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/AttributeMember.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AttributeMember.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.AttributeMember.process(javax.annotation.processing.ProcessingEnvironment)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f01e60638a2c78f1077c4089600f8303ab8a49cf"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 1, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.AttributeMember.process(javax.annotation.processing.ProcessingEnvironment)"]}, {"title": "JPA @OneToMany(cascade = {CascadeType.ALL}) are not properly managed into Requery Entity", "body": "Creating 2 entities related by a @OneToMany relation:\r\n\r\n**AbstractTestEntity** ->> **AbstractRelatedTestEntity**\r\n\r\nif the relation is annotated with JPA `javax.persistence.OneToMany` with `CascadeType.ALL`\r\n\r\n```\r\n@Entity()\r\n@Table(name = \"TestEntity\")\r\npublic abstract class AbstractTestEntity {\r\n\r\n    @Id\r\n    @Column(nullable = false)\r\n    protected Long id;\r\n\r\n    @OneToMany(cascade = {CascadeType.ALL})\r\n    protected Set<RelatedTestEntity> relatedEntities;\r\n}\r\n```\r\n\r\nthe generated **TestEntity** the cascade action contains also `CascadeAction.NONE`\r\n\r\n`.setCascadeAction(CascadeAction.NONE,CascadeAction.SAVE,CascadeAction.DELETE)`\r\n\r\nwith this setup the **AbstractRelatedTestEntity** won't be saved on **AbstractTestEntity** save.\r\n\r\nYou can test the issue in the following repository:\r\nhttps://bitbucket.org/mirkoluchi/requery-issues \r\nin the proper **Issue643** directory you can find an Android project replicating the issue in the proper unit test `testInsertCascadeAll`", "url": "https://github.com/requery/requery/issues/643", "user": "lubbo", "labels": ["bug"], "created": "2017-07-26 14:59:13", "closed": "2017-07-27 06:39:57", "commits": {"73d743066b00ddab3ae34b85c717a5a542558f13": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "73d743066b00ddab3ae34b85c717a5a542558f13", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["6c2891c298d14dcf83c41c14ac32bce8c4ee948d"], "nameRev": "73d743066b00ddab3ae34b85c717a5a542558f13 tags/1.4.1~31", "commitMessage": "Resolve #643 Fix CascadeAction.NONE added for CascadeType.ALL\n", "commitDateTime": "2017-07-26 23:40:30", "authoredDateTime": "2017-07-26 23:40:30", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/AttributeMember.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AttributeMember.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.AttributeMember.ReflectiveAssociation.mapCascadeActions(javax.persistence.CascadeType[])", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["73d743066b00ddab3ae34b85c717a5a542558f13"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.AttributeMember.ReflectiveAssociation.mapCascadeActions(javax.persistence.CascadeType[])"]}, {"title": "Transient abstract class methods", "body": "Annotating a method with `@Transient` doesn't prevent custom method generation in the entity.\r\n\r\n```\r\n@Entity\r\npublic abstract class Data {\r\n  @Key\r\n  @Generated\r\n  abstract long getId();\r\n\r\n  @Transient\r\n  public Data copy() {\r\n    return null;\r\n  }\r\n}\r\n```\r\nGenerates this entity:\r\n```\r\npublic class DataEntity extends Data implements Persistable {\r\n    ...\r\n    \r\n    private Data copy;\r\n\r\n    @Override\r\n    public Data copy() {\r\n        return this.copy;\r\n    }\r\n\r\n    public void copy(Data copy) {\r\n        this.copy = copy;\r\n    }\r\n    \r\n    ...\r\n}\r\n```\r\n\r\nI hoped the method would stay unmodified and no new fields created or does `@Transient` not work for methods?\r\n\r\n**Edit:**\r\nThis kotlin class generates a correct entity:\r\n```\r\n@Entity\r\nabstract class Data {\r\n  @get:Key\r\n  @get:Generated\r\n  abstract val id: Long\r\n\r\n  @Transient\r\n  fun copy(): Data? {\r\n    return null\r\n  }\r\n}\r\n```\r\nHowever, when it overrides an interface's method it fails just like with a java class:\r\n```\r\ninterface Copyable {\r\n  fun copy(): Data?\r\n}\r\n\r\n@Entity\r\nabstract class Data : Copyable {\r\n  @get:Key\r\n  @get:Generated\r\n  abstract val id: Long\r\n\r\n  @Transient\r\n  override fun copy(): Data? {\r\n    return null\r\n  }\r\n}\r\n```", "url": "https://github.com/requery/requery/issues/634", "user": "absimas", "labels": ["bug"], "created": "2017-07-22 19:35:49", "closed": "2017-07-27 07:20:39", "commits": {"4277173bf16f01c29bee7437ab1053590ece6320": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "4277173bf16f01c29bee7437ab1053590ece6320", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["73d743066b00ddab3ae34b85c717a5a542558f13"], "nameRev": "4277173bf16f01c29bee7437ab1053590ece6320 tags/1.4.1~30", "commitMessage": "Resolve #634 Fix Transient annotation check for methods\n", "commitDateTime": "2017-07-27 00:21:13", "authoredDateTime": "2017-07-27 00:21:13", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4277173bf16f01c29bee7437ab1053590ece6320"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)"]}, {"title": "connection leak when rollback", "body": "```java\r\n@Override\r\n    public <V> V runInTransaction(Callable<V> callable, @Nullable TransactionIsolation isolation) {\r\n        Objects.requireNotNull(callable);\r\n        checkClosed();\r\n        Transaction transaction = transactionProvider.get();\r\n        if (transaction == null) {\r\n            throw new TransactionException(\"no transaction\");\r\n        }\r\n        try {\r\n            transaction.begin(isolation);\r\n            V result = callable.call();\r\n            transaction.commit();  // will close connection\r\n            return result;\r\n        } catch (Exception e) {\r\n            transaction.rollback();  //doesn't close connection\r\n            throw new RollbackException(e);\r\n        }\r\n    }\r\n```\r\n\r\ntransaction.rollback() in runInTransaction doesn't close connection,and cause connection leak\r\n", "url": "https://github.com/requery/requery/issues/628", "user": "ddyycao", "labels": ["bug"], "created": "2017-07-19 07:21:47", "closed": "2017-07-20 07:43:34", "commits": {"6c2891c298d14dcf83c41c14ac32bce8c4ee948d": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "6c2891c298d14dcf83c41c14ac32bce8c4ee948d", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["2c901016a7eaac0a956739bd84055a93ad5ca3f9"], "nameRev": "6c2891c298d14dcf83c41c14ac32bce8c4ee948d tags/1.4.1~32", "commitMessage": "Resolve #628 Use try with resources on transaction in runInTransaction\n", "commitDateTime": "2017-07-20 00:45:26", "authoredDateTime": "2017-07-20 00:45:26", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityDataStore.java", "insertions": 14, "deletions": 13, "lines": 27}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityDataStore.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityDataStore.raw(java.lang.String,java.lang.Object[])", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.requery.sql.EntityDataStore.runInTransaction(java.util.concurrent.Callable,io.requery.TransactionIsolation)", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 4, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6c2891c298d14dcf83c41c14ac32bce8c4ee948d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 14, "deletions": 13, "lines": 27, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 8, "UPD": 0, "INS": 1, "MOV": 4, "DEL": 3, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityDataStore.runInTransaction(java.util.concurrent.Callable,io.requery.TransactionIsolation)", "io.requery.sql.EntityDataStore.raw(java.lang.String,java.lang.Object[])"]}, {"title": "Update set method not working as expected in Kotlin", "body": "From the docs\r\n\r\n```\r\nint rows = data.update(Person.class)\r\n    .set(Person.ABOUT, \"student\")\r\n    .where(Person.AGE.lt(21)).get().value();\r\n```\r\n\r\nI would expect the Kotlin equivalent to work similarly\r\n\r\n```\r\nval rows = data.update(Person::class)\r\n    .set(Page::about, \"student\")\r\n    .where(Page::age lt 21).get().value()\r\n```\r\n\r\nBut I get `Type mismatch: inferred type is KMutableProperty1<Person, String> but Expression<String> was expected`. I realize that it must be an Expression, but I'm unsure of the proper way of converting the property to an Expression. \r\n\r\nThis is with a `KotlinReactiveEntityStore<Persistable>` data store", "url": "https://github.com/requery/requery/issues/592", "user": "ashervb", "labels": ["bug"], "created": "2017-06-16 23:33:56", "closed": "2017-06-20 03:34:25", "commits": {"1dd2b010f4a84b6f980c8962d2c9214b6e3e4a11": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "1dd2b010f4a84b6f980c8962d2c9214b6e3e4a11", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["4d7cdebe62036c54e4c047f2fb67e8bc125024cf"], "nameRev": "1dd2b010f4a84b6f980c8962d2c9214b6e3e4a11 tags/1.4.0~8", "commitMessage": "Resolve #592 Kotlin fix Update.set property extension method signature\n", "commitDateTime": "2017-06-19 20:34:12", "authoredDateTime": "2017-06-19 20:34:12", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/kotlin/Query.kt", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "requery-test/kotlin-test/src/test/kotlin/io/requery/test/kt/FunctionalTest.kt", "insertions": 12, "deletions": 0, "lines": 12}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1dd2b010f4a84b6f980c8962d2c9214b6e3e4a11"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/kotlin/Query.kt"]}, {"title": "Cannot add a UNIQUE column (code 1): , while compiling", "body": "Requery 1.3.0\r\nRequery-sqlite 3.18.0\r\n\r\nAfter adding this to an already existing entity `IJobOffer`\r\n\r\n    @get:Column(unique = true)\r\n    var localCreatorId: String?\r\n\r\nthe app crashes when the entity is accessed and database upgraded\r\n\r\n> Caused by:\r\nio.requery.PersistenceException:\r\njava.sql.SQLException:\r\nandroid.database.sqlite.SQLiteException:\r\nCannot add a UNIQUE column (code 1): , while compiling: alter table IJobOffer add column localCreatorId varchar(255) unique\r\nat io.requery.sql.SchemaModifier.executeSql(SchemaModifier.java:267)\r\nat io.requery.sql.SchemaModifier.executeSql(SchemaModifier.java:254)\r\nat io.requery.sql.SchemaModifier.addColumn(SchemaModifier.java:230)\r\nat io.requery.android.sqlite.SchemaUpdater.update(SchemaUpdater.java:106)\r\nat io.requery.android.sqlitex.SqlitexDatabaseSource.onUpgrade(SqlitexDatabaseSource.java:150)\r\nat cz.quickjobs.android.database.QuickJobsDatabaseSource.onUpgrade(QuickJobsDatabaseSource.kt:45)\r\nat io.requery.android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(SQLiteOpenHelper.java:268)\r\nat io.requery.android.database.sqlite.SQLiteOpenHelper.getWritableDatabase(SQLiteOpenHelper.java:170)\r\nat io.requery.android.sqlitex.SqlitexDatabaseSource.getConnection(SqlitexDatabaseSource.java:157)\r\nat io.requery.sql.EntityDataStore$DataContext.getConnection(EntityDataStore.java:631)\r\nat io.requery.sql.EntityDataStore.checkConnectionMetadata(EntityDataStore.java:570)\r\nat io.requery.sql.EntityDataStore$DataContext.read(EntityDataStore.java:651)\r\nat io.requery.sql.KotlinEntityDataStore.select(KotlinEntityDataStore.kt:51)\r\n...\r\n\r\nI believe adding the column and then adding the constriant should make it work.", "url": "https://github.com/requery/requery/issues/582", "user": "consp1racy", "labels": ["bug"], "created": "2017-06-08 18:43:05", "closed": "2017-06-13 06:03:32", "commits": {"e1b47050bd4b679a31cb08e68de435434b425488": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "e1b47050bd4b679a31cb08e68de435434b425488", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["6685dfdb247e3199aa4fd6611dd75dbd23ca823d"], "nameRev": "e1b47050bd4b679a31cb08e68de435434b425488 tags/1.4.0~11", "commitMessage": "Resolve #582 Android add unique index for unique columns added during upgrade\n", "commitDateTime": "2017-06-12 23:03:25", "authoredDateTime": "2017-06-12 23:03:25", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlite/SchemaUpdater.java", "insertions": 4, "deletions": 1, "lines": 5}, {"filePath": "requery/src/main/java/io/requery/sql/SchemaModifier.java", "insertions": 18, "deletions": 3, "lines": 21}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SchemaUpdater.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.SchemaUpdater.upgrade(java.sql.Connection,io.requery.sql.SchemaModifier)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SchemaModifier.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SchemaModifier.addColumn(java.sql.Connection,io.requery.meta.Attribute)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.createColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.createIndex(java.sql.Connection,io.requery.meta.Attribute,io.requery.sql.TableCreationMode)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.addColumn(java.sql.Connection,io.requery.meta.Attribute,boolean)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.createColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute,boolean)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e1b47050bd4b679a31cb08e68de435434b425488"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 22, "deletions": 4, "lines": 26, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 10, "UPD": 0, "INS": 9, "MOV": 1, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery-android/src/main/java/io/requery/android/sqlite"], "changesInPackagesSPOON": ["io.requery.sql.SchemaModifier.createIndex(java.sql.Connection,io.requery.meta.Attribute,io.requery.sql.TableCreationMode)", "io.requery.sql.SchemaModifier.createColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute)", "io.requery.android.sqlite.SchemaUpdater.upgrade(java.sql.Connection,io.requery.sql.SchemaModifier)", "io.requery.sql.SchemaModifier.addColumn(java.sql.Connection,io.requery.meta.Attribute)", "io.requery.sql.SchemaModifier.addColumn(java.sql.Connection,io.requery.meta.Attribute,boolean)", "io.requery.sql.SchemaModifier.createColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute,boolean)"]}, {"title": "Code generation fails  on @JunctionTable @ManyToMany relationships", "body": "Hello I have my models defined below. However compilation fails on this whenever the @JunctionTable annotation is added. \r\n\r\n\r\n```\r\npublic enum Permission {\r\n    EDIT_USER,\r\n    CREATE_USER\r\n}\r\n\r\n```\r\n\r\n```\r\n@Entity\r\npublic class AbstractAuthorization {\r\n    @Key\r\n    @Generated\r\n    int id;\r\n    Permission permission;\r\n    @ManyToMany(mappedBy = \"authorizations\")\r\n    protected MutableResult<Role> roles;\r\n}\r\n```\r\n\r\n```\r\n@Entity\r\npublic class AbstractRole {\r\n    @Key\r\n    @Generated\r\n    int id;\r\n    @Column(unique = true)\r\n    String name;\r\n\r\n    @JunctionTable\r\n    @ManyToMany\r\n    protected MutableResult<Authorization> authorizations;\r\n}\r\n```\r\n\r\n\r\n```\r\n Compilation failure: Compilation failure: \r\n[ERROR] /home/wale/IdeaProjects/beyond-credit-core-ng/target/generated-sources/ng/com/beyondcredit/core/model/Authorization.java:[101,25] cannot find symbol\r\n[ERROR]   symbol:   class Role_Authorization\r\n[ERROR]   location: class ng.com.beyondcredit.core.model.Authorization\r\n[ERROR] /home/wale/IdeaProjects/beyond-credit-core-ng/target/generated-sources/ng/com/beyondcredit/core/model/Role.java:[103,25] cannot find symbol\r\n[ERROR]   symbol:   class Role_Authorization\r\n[ERROR]   location: class ng.com.beyondcredit.core.model.Role\r\n[ERROR] -> [Help 1]\r\n[ERROR] \r\n[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\r\n[ERROR] Re-run Maven using the -X switch to enable full debug logging.\r\n[ERROR] \r\n[ERROR] For more information about the errors and possible solutions, please read the following articles:\r\n[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException\r\n\r\n```", "url": "https://github.com/requery/requery/issues/580", "user": "adewaleafolabi", "labels": ["bug"], "created": "2017-06-08 10:35:25", "closed": "2017-06-12 07:19:03", "commits": {"6685dfdb247e3199aa4fd6611dd75dbd23ca823d": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "6685dfdb247e3199aa4fd6611dd75dbd23ca823d", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["903f83899675cab5dd3a33d23a6438a1db9c609c"], "nameRev": "6685dfdb247e3199aa4fd6611dd75dbd23ca823d tags/1.4.0~12", "commitMessage": "Resolve #580 Fix MutuableResult type not detected correctly\n", "commitDateTime": "2017-06-12 00:21:50", "authoredDateTime": "2017-06-12 00:21:50", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/Mirrors.java", "insertions": 16, "deletions": 7, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Mirrors.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.Mirrors.implementsInterface(javax.lang.model.util.Types,javax.lang.model.element.TypeElement,java.lang.String)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6685dfdb247e3199aa4fd6611dd75dbd23ca823d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 16, "deletions": 7, "lines": 23, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.Mirrors.implementsInterface(javax.lang.model.util.Types,javax.lang.model.element.TypeElement,java.lang.String)"]}, {"title": "Column default value not work", "body": "Thanks for this great lib~\r\n\r\ni have defined the user bean as: \r\n\r\n```\r\n@Table(name = \"User\")\r\n@Entity(model = \"global\")\r\ninterface IUser : Persistable {\r\n\r\n    @get:Key @get:Generated var id: Long\r\n\r\n    @get:Column(value = \"'Newer'\")\r\n    var name: String?\r\n\r\n    var avatar: String?\r\n\r\n}\r\n```\r\nwhen i use the follow code to insert a new User into the db, the name column in the db is empty..\r\n\r\n```\r\ndb.insert(User().apply {\r\n                    this.avatar = \"http://......\"\r\n                })\r\n```\r\n\r\nit sense like insert a \"null\" name into the db and cover the default value\r\n\r\nhow can i fix it?\r\n", "url": "https://github.com/requery/requery/issues/579", "user": "MEiDIK", "labels": ["bug"], "created": "2017-06-06 12:29:13", "closed": "2017-06-29 06:10:53", "commits": {}, "ttf": 22.00027777777778, "commitsDetails": []}, {"title": "Modifying the table create statement?", "body": "I'd like create a FTS table, e.g. `CREATE VIRTUAL TABLE data USING fts3();`, but haven't been able to find a way of modifying the table creation statement. I've looked into using the `createAttributes` of the [@Table annotation](https://github.com/requery/requery/wiki/Defining-Entities) as well as [SchemaModifer class](https://github.com/requery/requery/wiki/Table-Generation), but haven't found any clear way of doing so? Any ideas? \r\n\r\nThank you!\r\n", "url": "https://github.com/requery/requery/issues/578", "user": "ashervb", "labels": ["bug"], "created": "2017-06-05 00:10:22", "closed": "2017-06-07 05:59:01", "commits": {"578deac760b1cce026176061e74ef336cde20d5b": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "578deac760b1cce026176061e74ef336cde20d5b", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["61aaa0f253d345ccd6764d4974312f6492cb3907"], "nameRev": "578deac760b1cce026176061e74ef336cde20d5b tags/1.4.0~14", "commitMessage": "Resolve #578 Apply Table.createAttributes to create table statement\n", "commitDateTime": "2017-06-06 23:01:10", "authoredDateTime": "2017-06-06 23:01:10", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/SchemaModifier.java", "insertions": 16, "deletions": 2, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SchemaModifier.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SchemaModifier.tableCreateStatement(io.requery.meta.Type,io.requery.sql.TableCreationMode)", "TOT": 8, "UPD": 0, "INS": 3, "MOV": 4, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["578deac760b1cce026176061e74ef336cde20d5b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 16, "deletions": 2, "lines": 18, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 8, "UPD": 0, "INS": 3, "MOV": 4, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.SchemaModifier.tableCreateStatement(io.requery.meta.Type,io.requery.sql.TableCreationMode)"]}, {"title": "JPA (kapt) annotation processing generates duplicate attributes", "body": "I've distilled this down to the simplest case (I think).\r\nI am using \r\n```\r\n    ext.kotlin_version = '1.1.2'\r\n    ext.jpa_version = '2.1.1'\r\n    ext.requery_version = '1.3.1'\r\n```\r\nNot sure if this is an environment issue, a Kapt issue or a Requery processor issue.\r\n\r\nSo given a simple JPA annotated schema as follows:\r\n\r\n```\r\npackage net.corda.schemas.jpa\r\n\r\nimport javax.persistence.*\r\n\r\n@Entity\r\n@Table(name = \"cash_states\")\r\nclass CashSchemaJPA(\r\n        @Column(name = \"owner_key\")\r\n        var owner: String,\r\n\r\n        @Column(name = \"pennies\")\r\n        var pennies: Long,\r\n\r\n        @Column(name = \"ccy_code\", length = 3)\r\n        var currency: String,\r\n\r\n        @Column(name = \"issuer_key\")\r\n        var issuerParty: String,\r\n\r\n        @Column(name = \"issuer_ref\")\r\n        var issuerRef: ByteArray\r\n)\r\n```\r\n\r\nThe code generated from running `kaptKotlin` always generates **duplicate attributes** in the resulting entity type (jump to the bottom of the following output and you'll see the constructor using x2 of each attribute generated):\r\n\r\n```\r\n// Generated file do not edit, generated by io.requery.processor.EntityProcessor\r\npackage net.corda.schemas.jpa;\r\n\r\nimport io.requery.meta.AttributeBuilder;\r\nimport io.requery.meta.AttributeDelegate;\r\nimport io.requery.meta.Type;\r\nimport io.requery.meta.TypeBuilder;\r\nimport io.requery.proxy.EntityProxy;\r\nimport io.requery.proxy.LongProperty;\r\nimport io.requery.proxy.Property;\r\nimport io.requery.util.function.Function;\r\nimport io.requery.util.function.Supplier;\r\nimport java.lang.Long;\r\nimport java.lang.Override;\r\nimport java.lang.String;\r\nimport javax.annotation.Generated;\r\n\r\n@Generated(\"io.requery.processor.EntityProcessor\")\r\npublic class CashSchemaJPAType {\r\n    public static final AttributeDelegate<CashSchemaJPA, String> OWNER = new AttributeDelegate(\r\n    new AttributeBuilder<CashSchemaJPA, String>(\"owner_key\", String.class)\r\n    .setProperty(new Property<CashSchemaJPA, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPA entity) {\r\n            return entity.getOwner();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPA entity, String value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    })\r\n    .setPropertyName(\"owner\")\r\n    .setBuilderProperty(new Property<CashSchemaJPAType, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPAType entity, String value) {\r\n            entity.owner = value;\r\n        }\r\n    })\r\n    .setGenerated(false)\r\n    .setReadOnly(false)\r\n    .setLazy(false)\r\n    .setNullable(true)\r\n    .setUnique(false)\r\n    .setLength(255)\r\n    .build());\r\n\r\n    public static final AttributeDelegate<CashSchemaJPA, Long> PENNIES = new AttributeDelegate(\r\n    new AttributeBuilder<CashSchemaJPA, Long>(\"pennies\", long.class)\r\n    .setProperty(new LongProperty<CashSchemaJPA>() {\r\n        @Override\r\n        public Long get(CashSchemaJPA entity) {\r\n            return entity.getPennies();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPA entity, Long value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public long getLong(CashSchemaJPA entity) {\r\n            return entity.getPennies();\r\n        }\r\n\r\n        @Override\r\n        public void setLong(CashSchemaJPA entity, long value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    })\r\n    .setPropertyName(\"pennies\")\r\n    .setBuilderProperty(new LongProperty<CashSchemaJPAType>() {\r\n        @Override\r\n        public Long get(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPAType entity, Long value) {\r\n            entity.pennies = value;\r\n        }\r\n\r\n        @Override\r\n        public long getLong(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void setLong(CashSchemaJPAType entity, long value) {\r\n            entity.pennies = value;\r\n        }\r\n    })\r\n    .setGenerated(false)\r\n    .setReadOnly(false)\r\n    .setLazy(false)\r\n    .setNullable(true)\r\n    .setUnique(false)\r\n    .setLength(255)\r\n    .build());\r\n\r\n    public static final AttributeDelegate<CashSchemaJPA, String> CURRENCY = new AttributeDelegate(\r\n    new AttributeBuilder<CashSchemaJPA, String>(\"ccy_code\", String.class)\r\n    .setProperty(new Property<CashSchemaJPA, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPA entity) {\r\n            return entity.getCurrency();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPA entity, String value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    })\r\n    .setPropertyName(\"currency\")\r\n    .setBuilderProperty(new Property<CashSchemaJPAType, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPAType entity, String value) {\r\n            entity.currency = value;\r\n        }\r\n    })\r\n    .setGenerated(false)\r\n    .setReadOnly(false)\r\n    .setLazy(false)\r\n    .setNullable(true)\r\n    .setUnique(false)\r\n    .setLength(3)\r\n    .build());\r\n\r\n    public static final AttributeDelegate<CashSchemaJPA, String> ISSUER_PARTY = new AttributeDelegate(\r\n    new AttributeBuilder<CashSchemaJPA, String>(\"issuer_key\", String.class)\r\n    .setProperty(new Property<CashSchemaJPA, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPA entity) {\r\n            return entity.getIssuerParty();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPA entity, String value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    })\r\n    .setPropertyName(\"issuerParty\")\r\n    .setBuilderProperty(new Property<CashSchemaJPAType, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPAType entity, String value) {\r\n            entity.issuerParty = value;\r\n        }\r\n    })\r\n    .setGenerated(false)\r\n    .setReadOnly(false)\r\n    .setLazy(false)\r\n    .setNullable(true)\r\n    .setUnique(false)\r\n    .setLength(255)\r\n    .build());\r\n\r\n    public static final AttributeDelegate<CashSchemaJPA, byte[]> ISSUER_REF = new AttributeDelegate(\r\n    new AttributeBuilder<CashSchemaJPA, byte[]>(\"issuer_ref\", byte[].class)\r\n    .setProperty(new Property<CashSchemaJPA, byte[]>() {\r\n        @Override\r\n        public byte[] get(CashSchemaJPA entity) {\r\n            return entity.getIssuerRef();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPA entity, byte[] value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    })\r\n    .setPropertyName(\"issuerRef\")\r\n    .setBuilderProperty(new Property<CashSchemaJPAType, byte[]>() {\r\n        @Override\r\n        public byte[] get(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPAType entity, byte[] value) {\r\n            entity.issuerRef = value;\r\n        }\r\n    })\r\n    .setGenerated(false)\r\n    .setReadOnly(false)\r\n    .setLazy(false)\r\n    .setNullable(true)\r\n    .setUnique(false)\r\n    .setLength(255)\r\n    .build());\r\n\r\n    public static final AttributeDelegate<CashSchemaJPA, String> OWNER = new AttributeDelegate(\r\n    new AttributeBuilder<CashSchemaJPA, String>(\"owner\", String.class)\r\n    .setProperty(new Property<CashSchemaJPA, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPA entity) {\r\n            return entity.getOwner();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPA entity, String value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    })\r\n    .setPropertyName(\"getOwner\")\r\n    .setBuilderProperty(new Property<CashSchemaJPAType, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPAType entity, String value) {\r\n            entity.owner = value;\r\n        }\r\n    })\r\n    .setGenerated(false)\r\n    .setReadOnly(false)\r\n    .setLazy(false)\r\n    .setNullable(true)\r\n    .setUnique(false)\r\n    .build());\r\n\r\n    public static final AttributeDelegate<CashSchemaJPA, Long> PENNIES = new AttributeDelegate(\r\n    new AttributeBuilder<CashSchemaJPA, Long>(\"pennies\", long.class)\r\n    .setProperty(new LongProperty<CashSchemaJPA>() {\r\n        @Override\r\n        public Long get(CashSchemaJPA entity) {\r\n            return entity.getPennies();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPA entity, Long value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public long getLong(CashSchemaJPA entity) {\r\n            return entity.getPennies();\r\n        }\r\n\r\n        @Override\r\n        public void setLong(CashSchemaJPA entity, long value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    })\r\n    .setPropertyName(\"getPennies\")\r\n    .setBuilderProperty(new LongProperty<CashSchemaJPAType>() {\r\n        @Override\r\n        public Long get(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPAType entity, Long value) {\r\n            entity.pennies = value;\r\n        }\r\n\r\n        @Override\r\n        public long getLong(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void setLong(CashSchemaJPAType entity, long value) {\r\n            entity.pennies = value;\r\n        }\r\n    })\r\n    .setGenerated(false)\r\n    .setReadOnly(false)\r\n    .setLazy(false)\r\n    .setNullable(false)\r\n    .setUnique(false)\r\n    .build());\r\n\r\n    public static final AttributeDelegate<CashSchemaJPA, String> CURRENCY = new AttributeDelegate(\r\n    new AttributeBuilder<CashSchemaJPA, String>(\"currency\", String.class)\r\n    .setProperty(new Property<CashSchemaJPA, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPA entity) {\r\n            return entity.getCurrency();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPA entity, String value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    })\r\n    .setPropertyName(\"getCurrency\")\r\n    .setBuilderProperty(new Property<CashSchemaJPAType, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPAType entity, String value) {\r\n            entity.currency = value;\r\n        }\r\n    })\r\n    .setGenerated(false)\r\n    .setReadOnly(false)\r\n    .setLazy(false)\r\n    .setNullable(true)\r\n    .setUnique(false)\r\n    .build());\r\n\r\n    public static final AttributeDelegate<CashSchemaJPA, String> ISSUER_PARTY = new AttributeDelegate(\r\n    new AttributeBuilder<CashSchemaJPA, String>(\"issuerParty\", String.class)\r\n    .setProperty(new Property<CashSchemaJPA, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPA entity) {\r\n            return entity.getIssuerParty();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPA entity, String value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    })\r\n    .setPropertyName(\"getIssuerParty\")\r\n    .setBuilderProperty(new Property<CashSchemaJPAType, String>() {\r\n        @Override\r\n        public String get(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPAType entity, String value) {\r\n            entity.issuerParty = value;\r\n        }\r\n    })\r\n    .setGenerated(false)\r\n    .setReadOnly(false)\r\n    .setLazy(false)\r\n    .setNullable(true)\r\n    .setUnique(false)\r\n    .build());\r\n\r\n    public static final AttributeDelegate<CashSchemaJPA, byte[]> ISSUER_REF = new AttributeDelegate(\r\n    new AttributeBuilder<CashSchemaJPA, byte[]>(\"issuerRef\", byte[].class)\r\n    .setProperty(new Property<CashSchemaJPA, byte[]>() {\r\n        @Override\r\n        public byte[] get(CashSchemaJPA entity) {\r\n            return entity.getIssuerRef();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPA entity, byte[] value) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n    })\r\n    .setPropertyName(\"getIssuerRef\")\r\n    .setBuilderProperty(new Property<CashSchemaJPAType, byte[]>() {\r\n        @Override\r\n        public byte[] get(CashSchemaJPAType entity) {\r\n            throw new UnsupportedOperationException();\r\n        }\r\n\r\n        @Override\r\n        public void set(CashSchemaJPAType entity, byte[] value) {\r\n            entity.issuerRef = value;\r\n        }\r\n    })\r\n    .setGenerated(false)\r\n    .setReadOnly(false)\r\n    .setLazy(false)\r\n    .setNullable(true)\r\n    .setUnique(false)\r\n    .build());\r\n\r\n    public static final Type<CashSchemaJPA> $TYPE = new TypeBuilder<CashSchemaJPA>(CashSchemaJPA.class, \"cash_states\")\r\n    .setBaseType(CashSchemaJPA.class)\r\n    .setCacheable(true)\r\n    .setImmutable(true)\r\n    .setReadOnly(false)\r\n    .setStateless(true)\r\n    .setView(false)\r\n    .setBuilderFactory(new Supplier<CashSchemaJPAType>() {\r\n        @Override\r\n        public CashSchemaJPAType get() {\r\n            return new CashSchemaJPAType();\r\n        }\r\n    })\r\n    .setBuilderFunction(new Function<CashSchemaJPAType, CashSchemaJPA>() {\r\n        @Override\r\n        public CashSchemaJPA apply(CashSchemaJPAType value) {\r\n            return value.build();\r\n        }\r\n    })\r\n    .setProxyProvider(new Function<CashSchemaJPA, EntityProxy<CashSchemaJPA>>() {\r\n        @Override\r\n        public EntityProxy<CashSchemaJPA> apply(CashSchemaJPA entity) {\r\n            return new EntityProxy<CashSchemaJPA>(entity, $TYPE);\r\n        }\r\n    })\r\n    .addAttribute(CURRENCY)\r\n    .addAttribute(OWNER)\r\n    .addAttribute(PENNIES)\r\n    .addAttribute(ISSUER_PARTY)\r\n    .addAttribute(ISSUER_REF)\r\n    .build();\r\n\r\n    private String owner;\r\n\r\n    private long pennies;\r\n\r\n    private String currency;\r\n\r\n    private String issuerParty;\r\n\r\n    private byte[] issuerRef;\r\n\r\n    private CashSchemaJPAType() {\r\n    }\r\n\r\n    CashSchemaJPA build() {\r\n        return new CashSchemaJPA(owner,owner,pennies,pennies,currency,currency,issuerParty,issuerParty,issuerRef,issuerRef);\r\n    }\r\n}\r\n```\r\n", "url": "https://github.com/requery/requery/issues/571", "user": "josecoll", "labels": ["bug"], "created": "2017-05-22 16:10:57", "closed": "2017-06-05 05:55:38", "commits": {"61aaa0f253d345ccd6764d4974312f6492cb3907": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 13.000277777777777, "commitsDetails": [{"commitHash": "61aaa0f253d345ccd6764d4974312f6492cb3907", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["8e6e48dcb331ab7fd1541afdd328427a6b5645f9"], "nameRev": "61aaa0f253d345ccd6764d4974312f6492cb3907 tags/1.4.0~15", "commitMessage": "Resolve #571 Avoid creating duplicate attributes\n", "commitDateTime": "2017-06-04 22:57:41", "authoredDateTime": "2017-06-04 22:57:30", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 18, "deletions": 14, "lines": 32}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.process(javax.annotation.processing.ProcessingEnvironment)", "TOT": 11, "UPD": 5, "INS": 0, "MOV": 3, "DEL": 3}, {"spoonMethodName": "io.requery.processor.EntityType.factoryArguments()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.generatesAdditionalTypes()", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.processor.EntityType.computeAttribute(javax.lang.model.element.Element)", "TOT": 7, "UPD": 1, "INS": 2, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.requery.processor.EntityType.merge(io.requery.processor.EntityDescriptor)", "TOT": 6, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 3}, {"spoonMethodName": "io.requery.processor.EntityType.attributes()", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["61aaa0f253d345ccd6764d4974312f6492cb3907"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 18, "deletions": 14, "lines": 32, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 34, "UPD": 11, "INS": 3, "MOV": 10, "DEL": 10, "spoonFilesChanged": 1, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityType.merge(io.requery.processor.EntityDescriptor)", "io.requery.processor.EntityType", "io.requery.processor.EntityType.generatesAdditionalTypes()", "io.requery.processor.EntityType.factoryArguments()", "io.requery.processor.EntityType.computeAttribute(javax.lang.model.element.Element)", "io.requery.processor.EntityType.process(javax.annotation.processing.ProcessingEnvironment)", "io.requery.processor.EntityType.attributes()"]}, {"title": "Several ManyToMany state null", "body": "Hi,\r\n\r\nsimilarly to #388 I have the problem that when a class has several ManyToMany to the same entity, the requery Jackson parses resoles them but the entity state is null. Thus they don't get inserted. Am I doing something wrong? Please find below a very simple example. Lookin at `Person` after it was deserialised, the states of `timelinePictures` and `profilePictures` are null. I used requery version 1.3.2.\r\n\r\n```Java\r\nString testJson = \"{\\n\" +\r\n    \"  \\\"name\\\": \\\"Great name\\\",\\n\" +\r\n    \"  \\\"timelinePictures\\\": [\\n\" +\r\n    \"    {\\n\" +\r\n    \"      \\\"src\\\": \\\"https://static.pexels.com/photos/86462/red-kite-bird-of-prey-milan-raptor-86462.jpeg\\\"\\n\" +\r\n    \"    }\\n\" +\r\n    \"  ],\\n\" +\r\n    \"  \\\"profilePictures\\\": [\\n\" +\r\n    \"    {\\n\" +\r\n    \"      \\\"src\\\": \\\"https://static.pexels.com/photos/145939/pexels-photo-145939.jpeg\\\"\\n\" +\r\n    \"    }\\n\" +\r\n    \"  ]\\n\" +\r\n    \"}\";\r\nDatabaseSource databaseSource = new DatabaseSource(this, Models.DEFAULT, 1);\r\nConfiguration configuration = databaseSource.getConfiguration();\r\nEntityDataStore<Persistable> store = new EntityDataStore<>(configuration);\r\n\r\nObjectMapper objectMapper = new EntityMapper(Models.DEFAULT, store);\r\n  try {\r\n      Person person = objectMapper.readValue(testJson, Person.class);\r\n  } catch (IOException e) {\r\n  e.printStackTrace();\r\n  }\r\n```\r\n\r\nEntities\r\n\r\n```Java\r\n@Entity\r\n@JsonDeserialize(as = PersonEntity.class)\r\npublic abstract class Person {\r\n  @Key\r\n  @Generated\r\n  int id;\r\n\r\n  String name;\r\n\r\n  @ManyToMany\r\n  @JunctionTable(name = \"person_picture_timeline\")\r\n  List<Picture> timelinePictures;\r\n  @ManyToMany\r\n  @JunctionTable(name = \"person_picture_profile\")\r\n  List<Picture> profilePictures;\r\n}\r\n```\r\n\r\n```Java\r\n@Entity\r\n@JsonDeserialize(as = PictureEntity.class)\r\npublic abstract class Picture {\r\n  @Key\r\n  @Generated\r\n  int id;\r\n\r\n  String src;\r\n}\r\n```", "url": "https://github.com/requery/requery/issues/563", "user": "Agraphie", "labels": ["bug"], "created": "2017-05-19 13:33:23", "closed": "2017-05-24 06:23:43", "commits": {"8dc0a7c241507a41aeb7f0222ba9dee845fe0742": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "8dc0a7c241507a41aeb7f0222ba9dee845fe0742", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["7b25401081524a44e701ba894ee0fde52e24d3dd"], "nameRev": "8dc0a7c241507a41aeb7f0222ba9dee845fe0742 tags/1.4.0~21", "commitMessage": "Resolve #563 Jackson collection types force the getter to be used\n", "commitDateTime": "2017-05-23 23:24:27", "authoredDateTime": "2017-05-23 23:24:27", "commitGitStats": [{"filePath": "requery-jackson/src/main/java/io/requery/jackson/DeserializerModifier.java", "insertions": 37, "deletions": 0, "lines": 37}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DeserializerModifier.java", "spoonMethods": [{"spoonMethodName": "io.requery.jackson.DeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8dc0a7c241507a41aeb7f0222ba9dee845fe0742"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 37, "deletions": 0, "lines": 37, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-jackson/src/main/java/io/requery/jackson"], "changesInPackagesSPOON": ["io.requery.jackson.DeserializerModifier.updateProperties(com.fasterxml.jackson.databind.DeserializationConfig,com.fasterxml.jackson.databind.BeanDescription,java.util.List)"]}, {"title": "QueryLoader closing previous result even if it's the same result", "body": "Here are two methods of `QueryLoader`:\r\n\r\n```java\r\n@Override\r\nprotected void onStartLoading() {\r\n    if (result != null) {\r\n        deliverResult(result);\r\n    } else {\r\n        forceLoad();\r\n    }\r\n}\r\n\r\n@Override\r\npublic void deliverResult(Result<E> data) {\r\n    if (isReset()) {\r\n        if (result != null) {\r\n            result.close();\r\n        }\r\n        return;\r\n    }\r\n    Result<E> previous = result;\r\n    result = data;\r\n    if (isStarted()) {\r\n        super.deliverResult(result);\r\n    }\r\n    if (previous != null) {\r\n        previous.close();\r\n    }\r\n}\r\n```\r\n\r\nAs it is a `Loader`, it tries to use the previous results if available (`onStartLoading()`'s `deliverResult(result);`). This is cool, but the problem is that `deliverResult(...)` does not check whether the previous result is the same as the new one, and closes it anyway. This results in `IllegalStateException` when trying to use the same result again as it has been closed.\r\n\r\nThere's a quick fix for the problem in `deliverResult(...)`, instead of\r\n```java\r\nif (previous != null) {\r\n    previous.close();\r\n}\r\n```\r\nit should check whether the previous and current results are different objects:\r\n```java\r\nif (previous != null && previous != data) {\r\n    previous.close();\r\n}\r\n```", "url": "https://github.com/requery/requery/issues/545", "user": "Gericop", "labels": ["bug"], "created": "2017-05-01 00:13:46", "closed": "2017-05-01 04:55:13", "commits": {"542bdd01131451623a65c13add6f84cb6accbfbd": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "542bdd01131451623a65c13add6f84cb6accbfbd", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["45049abecc305ecbe3c237a33270dcc77a58b8e7"], "nameRev": "542bdd01131451623a65c13add6f84cb6accbfbd tags/1.3.1~1", "commitMessage": "Resolve #545 Android fix QueryLoader closing previous result\n", "commitDateTime": "2017-04-30 21:55:19", "authoredDateTime": "2017-04-30 21:55:19", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/QueryLoader.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "QueryLoader.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.QueryLoader.deliverResult(io.requery.query.Result)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["542bdd01131451623a65c13add6f84cb6accbfbd"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android"], "changesInPackagesSPOON": ["io.requery.android.QueryLoader.deliverResult(io.requery.query.Result)"]}, {"title": "MysqlConnectionPoolDataSource is not used as a pool in requery-kotlin", "body": "The MySQL driver \"[Connector/J](https://dev.mysql.com/downloads/connector/j/5.1.html)\" (official JDBC library from Oracle) has a `MysqlConnectionPoolDataSource`.\r\n\r\n**Issue:** `requery-kotlin` has a `KotlinConfiguration`. This configuration uses a `is`-check to determine which provider to use:\r\n\r\n```kotlin\r\nprivate val connectionProvider = when (dataSource) {\r\n        is DataSource -> DataSourceConnectionProvider(dataSource)\r\n        is ConnectionPoolDataSource -> PooledConnectionProvider(dataSource);\r\n        else -> throw IllegalArgumentException(\"unsupported dataSource \" + dataSource)\r\n    }\r\n```\r\nHowever, `DataSource` is tested for first. The `MysqlConnectionPoolDataSource` is defined like this:\r\n\r\n```java\r\npublic class MysqlConnectionPoolDataSource extends MysqlDataSource implements ConnectionPoolDataSource\r\n```\r\nand `MysqlDataSource` which it extends, is defined like this:\r\n\r\n```java\r\npublic class MysqlDataSource extends ConnectionPropertiesImpl implements DataSource, Referenceable, Serializable\r\n```\r\nSo the data source is both a `DataSource` and a `ConnectionPoolDataSource`.\r\nTherefore, `connectionProvider` uses `DataSourceConnectionProvider`.\r\n\r\n**Expected:**\r\n`connectionProvider` should use `PooledConnectionProvider`.\r\n\r\n**Fix:**\r\nSimply swap the order of the two lines:\r\n\r\n```kotlin\r\nprivate val connectionProvider = when (dataSource) {\r\n        is ConnectionPoolDataSource -> PooledConnectionProvider(dataSource);\r\n        is DataSource -> DataSourceConnectionProvider(dataSource)\r\n        else -> throw IllegalArgumentException(\"unsupported dataSource \" + dataSource)\r\n    }\r\n```", "url": "https://github.com/requery/requery/issues/533", "user": "krissrex", "labels": ["bug"], "created": "2017-04-23 17:26:29", "closed": "2017-04-23 19:50:41", "commits": {"d589e560168252bf79afdf8a9626b8518e5e291d": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "09c823211100a2d2ce464abfc8d8a3d518ca1119": {"commitGHEventType": "referenced", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "d589e560168252bf79afdf8a9626b8518e5e291d", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["290bbe4689db0d54b95fdb09638b5d728c1cc453"], "nameRev": "d589e560168252bf79afdf8a9626b8518e5e291d tags/1.3.1~5", "commitMessage": "Resolve #533 Prioritize pooled connection provider (#534)\n\n", "commitDateTime": "2017-04-23 12:50:40", "authoredDateTime": "2017-04-23 21:50:40", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/sql/KotlinConfiguration.kt", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "09c823211100a2d2ce464abfc8d8a3d518ca1119", "commitGHEventType": "referenced", "commitUser": "npurushe", "commitParents": ["d589e560168252bf79afdf8a9626b8518e5e291d"], "nameRev": "09c823211100a2d2ce464abfc8d8a3d518ca1119 tags/1.3.1~4", "commitMessage": "Resolve #533 Prioritize pooled connection provider\n", "commitDateTime": "2017-04-23 21:27:35", "authoredDateTime": "2017-04-23 20:31:32", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/ConfigurationBuilder.java", "insertions": 4, "deletions": 4, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConfigurationBuilder.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.ConfigurationBuilder.createConnectionProvider(javax.sql.CommonDataSource)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 4, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["09c823211100a2d2ce464abfc8d8a3d518ca1119"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 4, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4.0, "UPD": 0.0, "INS": 0.0, "MOV": 4.0, "DEL": 0.0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.ConfigurationBuilder.createConnectionProvider(javax.sql.CommonDataSource)"]}, {"title": "[Question] Why doesn't work disable cascade with CascadeAction.NONE?", "body": "Hi,\r\nI have 3 entities in my project and they looks like with this:\r\n\r\n```java\r\n@Table( name = \"Task\" )\r\n@Entity( name = \"TaskEntity\" )\r\npublic interface ITaskEntity extends Persistable {\r\n    @Key @Generated\r\n    int getId();\r\n\r\n    String getTitle();\r\n\r\n    @ForeignKey\r\n    @OneToOne\r\n    ICycleEntity getCycle();\r\n}\r\n```\r\n```java\r\n@Table( name = \"Cycle\" )\r\n@Entity( name = \"CycleEntity\" )\r\npublic interface ICycleEntity extends Persistable {\r\n    @Key @Generated\r\n    int getId();\r\n\r\n    String getName();\r\n\r\n    @Convert( ListOfLongConverter.class )\r\n    List<Long> getIncrements();\r\n\r\n    @ForeignKey\r\n    @OneToOne\r\n    IAlarmEntity getAlarm();\r\n\r\n    @OneToOne( mappedBy = \"cycle\" )\r\n    ITaskEntity getTask();\r\n}\r\n```\r\n```java\r\n@Table( name = \"Alarm\" )\r\n@Entity( name = \"AlarmEntity\" )\r\npublic interface IAlarmEntity extends Persistable {\r\n    @Key @Generated\r\n    int getId();\r\n\r\n    @Convert( CalendarConverter.class )\r\n    Calendar getCalendar();\r\n\r\n    @OneToOne( mappedBy = \"alarm\" )\r\n    ICycleEntity getCycle();\r\n}\r\n```\r\n\r\nIn my code, to create a Task with `dataStore.insert( task )`, first I create a Cycle with `dataStore.insert( cycle )` and an Alarm, with the method `insert()` too. But, when I checked the log what I saw it was:\r\n\r\n```\r\nI/requery: beforeExecuteUpdate sql: create table Alarm (id integer primary key autoincrement not null, calendar varchar(255))\r\nI/requery: afterExecuteUpdate 0\r\nI/requery: beforeExecuteUpdate sql: create table Cycle (id integer primary key autoincrement not null, alarm integer, increments varchar(255), name varchar(255), foreign key (alarm) references Alarm (id) on delete cascade)\r\nI/requery: afterExecuteUpdate 0\r\nI/requery: beforeExecuteUpdate sql: create table Task (id integer primary key autoincrement not null, cycle integer, title varchar(255), foreign key (cycle) references Cycle (id) on delete cascade)\r\nI/requery: afterExecuteUpdate 0\r\nI/ALERT: On Insert Alarm\r\nI/requery: beforeExecuteUpdate sql: insert into Alarm (calendar) values (?)\r\nI/requery: afterExecuteUpdate 1\r\nI/ALERT: On Insert Cycle\r\nI/requery: beforeExecuteUpdate sql: insert into Alarm (calendar) values (?)\r\nI/requery: afterExecuteUpdate 1\r\nI/requery: beforeExecuteUpdate sql: insert into Cycle (alarm, increments, name) values (?, ?, ?)\r\nI/requery: afterExecuteUpdate 1\r\nI/ALERT: On Insert Task\r\nI/requery: beforeExecuteUpdate sql: insert into Alarm (calendar) values (?)\r\nI/requery: afterExecuteUpdate 1\r\nI/requery: beforeExecuteUpdate sql: insert into Cycle (alarm, increments, name) values (?, ?, ?)\r\nI/requery: afterExecuteUpdate 1\r\nI/requery: beforeExecuteUpdate sql: insert into Task (cycle, title) values (?, ?)\r\nI/requery: afterExecuteUpdate 1\r\n```\r\nSo, I researched and I found that we can use the annotation option `@OneToOne( cascade = CascadeAction.NONE )`, because I thought that it was the problem. The code changed like this:\r\n\r\n```java\r\n// In Task class\r\n   [...]\r\n    @ForeignKey\r\n    @OneToOne( cascade = CascadeAction.NONE )\r\n    ICycleEntity getCycle();\r\n   [...]\r\n\r\n// In Cycle class\r\n   [...]\r\n    @ForeignKey\r\n    @OneToOne( cascade = CascadeAction.NONE )\r\n    IAlarmEntity getAlarm();\r\n\r\n    @OneToOne( mappedBy = \"cycle\" )\r\n    ITaskEntity getTask();\r\n   [...]\r\n\r\n// In Alarm class\r\n   [...]\r\n    @OneToOne( mappedBy = \"alarm\" )\r\n    ICycleEntity getCycle();\r\n   [...]\r\n```\r\n\r\nBut, after run, the result was the same.\r\n\r\nWhat did I do wrong? I forgot something?\r\n\r\nBest regards", "url": "https://github.com/requery/requery/issues/526", "user": "TomazMartins", "labels": ["bug"], "created": "2017-04-21 15:22:15", "closed": "2017-05-04 02:54:58", "commits": {"a46f60806a3dd8f1263fa3e1ad8b825d2e48fd5f": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 12.000277777777777, "commitsDetails": [{"commitHash": "a46f60806a3dd8f1263fa3e1ad8b825d2e48fd5f", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["561a240901af3c5059ddbfecdda5e1ff1b4e5be6"], "nameRev": "a46f60806a3dd8f1263fa3e1ad8b825d2e48fd5f tags/1.3.2~4", "commitMessage": "Resolve #526 Don't cascade entity updates if CascadeAction.NONE is set\n", "commitDateTime": "2017-05-03 19:54:51", "authoredDateTime": "2017-05-03 19:54:51", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 4, "deletions": 2, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.2.test(io.requery.meta.Attribute)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a46f60806a3dd8f1263fa3e1ad8b825d2e48fd5f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 2, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate)", "io.requery.sql.EntityWriter.2.test(io.requery.meta.Attribute)"]}, {"title": "Can't add an index on a newly added column", "body": "Hi,\r\n\r\nI've tried adding this to my *existing* model:\r\n\r\n        @Index(\"some_index\")\r\n        @ForeignKey(update = ReferentialAction.CASCADE)\r\n        @ManyToOne\r\n        Service serviceModel;\r\n\r\nI use it to create a \"unique together\" index on a few columns. However, it doesn't work. I keep on getting:\r\n\r\n    java.lang.RuntimeException: Unable to start receiver com.etesync.syncadapter.App$AppUpdatedReceiver: io.requery.PersistenceException: java.sql.SQLException: android.database.sqlite.SQLiteException: table Journal has no column named serviceModel (code 1): , while compiling: create index if not exists journal_unique_together on Journal (serviceModel, uid)\r\n\r\nI have another model to which I only added the index (the field existed already) and it works there. Also, if I remove the @Index directive, it correctly adds the column, so it's definitely not a problem there.\r\n\r\nIn addition, adding a new model with a unique together index works, which leads to the conclusion, the problem only occurs when adding a column and an index to an already existing model.\r\n\r\nPlease let me know if I'm doing anything wrong or if you need more information.\r\n\r\nThanks.", "url": "https://github.com/requery/requery/issues/524", "user": "tasn", "labels": ["bug"], "created": "2017-04-20 12:00:29", "closed": "2017-04-22 05:25:07", "commits": {"99e027d4d65f7f1140fe486476b1df31ac0956af": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "99e027d4d65f7f1140fe486476b1df31ac0956af", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["f135553303bcb76686e36ec08f47e16944fe2169"], "nameRev": "99e027d4d65f7f1140fe486476b1df31ac0956af tags/1.3.1~8", "commitMessage": "Resolve #524 Create indexes after adding columns on upgrade\n", "commitDateTime": "2017-04-21 22:25:07", "authoredDateTime": "2017-04-21 22:25:07", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlite/SchemaUpdater.java", "insertions": 19, "deletions": 4, "lines": 23}, {"filePath": "requery/src/main/java/io/requery/sql/SchemaModifier.java", "insertions": 61, "deletions": 18, "lines": 79}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SchemaUpdater.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.SchemaUpdater.update()", "TOT": 6, "UPD": 1, "INS": 1, "MOV": 4, "DEL": 0}, {"spoonMethodName": "io.requery.android.sqlite.SchemaUpdater.upgrade(java.sql.Connection,io.requery.sql.SchemaModifier)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SchemaModifier.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SchemaModifier.dropColumn(io.requery.meta.Attribute)", "TOT": 12, "UPD": 2, "INS": 1, "MOV": 9, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.executeSql(io.requery.sql.QueryBuilder)", "TOT": 7, "UPD": 5, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.getConnection()", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.createIndexes(java.sql.Connection,io.requery.sql.TableCreationMode)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.createTables(io.requery.sql.TableCreationMode)", "TOT": 9, "UPD": 0, "INS": 4, "MOV": 5, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.addColumn(java.sql.Connection,io.requery.meta.Attribute)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.addColumn(io.requery.meta.Attribute)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["99e027d4d65f7f1140fe486476b1df31ac0956af"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 80, "deletions": 22, "lines": 102, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 44, "UPD": 9, "INS": 14, "MOV": 21, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 9}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery-android/src/main/java/io/requery/android/sqlite"], "changesInPackagesSPOON": ["io.requery.sql.SchemaModifier.addColumn(io.requery.meta.Attribute)", "io.requery.android.sqlite.SchemaUpdater.upgrade(java.sql.Connection,io.requery.sql.SchemaModifier)", "io.requery.sql.SchemaModifier.createTables(io.requery.sql.TableCreationMode)", "io.requery.sql.SchemaModifier.getConnection()", "io.requery.sql.SchemaModifier.executeSql(io.requery.sql.QueryBuilder)", "io.requery.sql.SchemaModifier.dropColumn(io.requery.meta.Attribute)", "io.requery.sql.SchemaModifier.createIndexes(java.sql.Connection,io.requery.sql.TableCreationMode)", "io.requery.sql.SchemaModifier.addColumn(java.sql.Connection,io.requery.meta.Attribute)", "io.requery.android.sqlite.SchemaUpdater.update()"]}, {"title": "Project not compileable with versions 1.2, 1.3 entityes not created", "body": "E:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\fragments\\ObservableFragment.java:27: error: cannot find symbol\r\nimport ru.samlib.client.domain.entity.AuthorEntity;\r\n                                     ^\r\n  symbol:   class AuthorEntity\r\n  location: package ru.samlib.client.domain.entity\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\job\\ObservableUpdateJob.java:17: error: cannot find symbol\r\nimport ru.samlib.client.domain.entity.AuthorEntity;\r\n                                     ^\r\n  symbol:   class AuthorEntity\r\n  location: package ru.samlib.client.domain.entity\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:30: error: cannot find symbol\r\n    private JoinAndOr<Result<AuthorEntity>> getAuthorQuery() {\r\n                             ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:37: error: cannot find symbol\r\n    public AuthorEntity insertAuthor(AuthorEntity entity) {\r\n                                     ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:37: error: cannot find symbol\r\n    public AuthorEntity insertAuthor(AuthorEntity entity) {\r\n           ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:41: error: cannot find symbol\r\n    public AuthorEntity updateAuthor(AuthorEntity entity) {\r\n                                     ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:41: error: cannot find symbol\r\n    public AuthorEntity updateAuthor(AuthorEntity entity) {\r\n           ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:45: error: cannot find symbol\r\n    public AuthorEntity doActionAuthor(Action action, AuthorEntity Author) {\r\n                                                      ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:45: error: cannot find symbol\r\n    public AuthorEntity doActionAuthor(Action action, AuthorEntity Author) {\r\n           ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:77: error: cannot find symbol\r\n    public void deleteAuthor(AuthorEntity entity) {\r\n                             ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:85: error: cannot find symbol\r\n    public AuthorEntity getAuthorById(Integer id) {\r\n           ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:89: error: cannot find symbol\r\n    public AuthorEntity getAuthorByLink(String link) {\r\n           ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\service\\ObservableService.java:93: error: cannot find symbol\r\n    public List<AuthorEntity> getObservableAuthors() {\r\n                ^\r\n  symbol:   class AuthorEntity\r\n  location: class ObservableService\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\domain\\entity\\Work.java:36: warning: This field does not exist, or would have been excluded anyway.\r\n@EqualsAndHashCode(callSuper = false, exclude = {\"rawContent\", \"rootElements\", \"chapters\", \"annotationBlocks\", \"indents\"})\r\n                                                               ^\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\domain\\entity\\Work.java:36: warning: This field does not exist, or would have been excluded anyway.\r\n@EqualsAndHashCode(callSuper = false, exclude = {\"rawContent\", \"rootElements\", \"chapters\", \"annotationBlocks\", \"indents\"})\r\n                                                                               ^\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\domain\\entity\\Work.java:37: warning: This field does not exist, or would have been excluded anyway.\r\n@ToString(exclude = {\"rawContent\", \"rootElements\", \"chapters\", \"annotationBlocks\", \"indents\"})\r\n                                   ^\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\domain\\entity\\Work.java:37: warning: This field does not exist, or would have been excluded anyway.\r\n@ToString(exclude = {\"rawContent\", \"rootElements\", \"chapters\", \"annotationBlocks\", \"indents\"})\r\n                                                   ^\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\domain\\entity\\Work.java:54: warning: 2 mappings found for: ru.samlib.client.domain.entity.WorkEntity.author -> ru.samlib.client.domain.entity.AuthorEntity\r\n    Author author;\r\n           ^\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\domain\\entity\\Work.java:56: warning: 2 mappings found for: ru.samlib.client.domain.entity.WorkEntity.rootAuthor -> ru.samlib.client.domain.entity.AuthorEntity\r\n    Author rootAuthor;\r\n           ^\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\domain\\entity\\Link.java:57: error: Entity reference missing relationship annotation\r\n    public Author getAuthor() {\r\n                  ^\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\domain\\entity\\Link.java:29: warning: 2 mappings found for: ru.samlib.client.domain.entity.LinkEntity.rootAuthor -> ru.samlib.client.domain.entity.AuthorEntity\r\n    Author rootAuthor;\r\n           ^\r\nE:\\samlib\\Samlib\\Client\\src\\main\\java\\ru\\samlib\\client\\domain\\entity\\Link.java:27: error: Entity reference missing relationship annotation\r\n    Author author;\r\n           ^\r\n```\r\n@NoArgsConstructor\r\n@Data\r\n@Entity\r\nclass Link {\r\n    @Key @Generated\r\n    Integer id;\r\n\r\n    @ForeignKey\r\n    @OneToOne(mappedBy = \"site\")\r\n    Author authorSite;\r\n\r\n    @Transient\r\n    Author author;\r\n    @ManyToOne(cascade = {CascadeAction.SAVE, CascadeAction.DELETE})\r\n    Author rootAuthor;\r\n    @ManyToOne(cascade = {CascadeAction.SAVE, CascadeAction.DELETE})\r\n    Category category;\r\n\r\n    String title;\r\n    String link;\r\n    String annotation;\r\n}\r\n```\r\nAs you see requery for some reason asked for  for relationship annotation in field that already have have transient annotation. Also I dont know if it is reason or not that all Entities not created.   \r\n\r\nlink to all entities: https://github.com/Rufim/Samlib/tree/master/Client/src/main/java/ru/samlib/client/domain/entity", "url": "https://github.com/requery/requery/issues/518", "user": "Rufim", "labels": ["bug"], "created": "2017-04-19 13:49:29", "closed": "2017-04-19 14:50:53", "commits": {"f135553303bcb76686e36ec08f47e16944fe2169": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f135553303bcb76686e36ec08f47e16944fe2169", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["5df49a3c6227ea0cb5921bf04ae1508c9516c7b9"], "nameRev": "f135553303bcb76686e36ec08f47e16944fe2169 tags/1.3.1~9", "commitMessage": "Resolve #518 Remove missing relationship error for a transient attribute\n", "commitDateTime": "2017-04-19 07:50:48", "authoredDateTime": "2017-04-19 07:50:48", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGraphValidator.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGraphValidator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGraphValidator.validateEntity(io.requery.processor.EntityDescriptor)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f135553303bcb76686e36ec08f47e16944fe2169"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityGraphValidator.validateEntity(io.requery.processor.EntityDescriptor)"]}, {"title": "Android BasePreparedStatement ISO8601_FORMAT is not thread-safe", "body": "Running the following on Android:\r\n```java\r\n@Test\r\npublic void testDateQueryMultiThreaded() throws InterruptedException, ExecutionException, TimeoutException {\r\n    int count = 100;\r\n    int threads = 4;\r\n    final int iterations = 100;\r\n    for (int i = 0; i < count; i++) {\r\n        Person person = randomPerson();\r\n        data.insert(person);\r\n    }\r\n    final Executor executor = Executors.newFixedThreadPool(threads);\r\n    final AtomicInteger totalCount = new AtomicInteger(0);\r\n    FutureTask[] tasks = new FutureTask[threads];\r\n    Callable<Void> callable = new Callable<Void>() {\r\n        @Override\r\n        public Void call() {\r\n            Date startDate = new Date(-2208988800000L);\r\n            Date endDate = new Date(946684800000L);\r\n            for (int i = 0; i < iterations; ++i) {\r\n                List<Person> people = data.select(Person.class)\r\n                        .where(Person.BIRTHDAY.between(startDate, endDate))\r\n                        .get()\r\n                        .toList();\r\n                totalCount.addAndGet(people.size());\r\n            }\r\n            return null;\r\n        }\r\n    };\r\n    for (int i = 0; i < threads; ++i) {\r\n        FutureTask<Void> task = new FutureTask<>(callable);\r\n        tasks[i] = task;\r\n        executor.execute(task);\r\n    }\r\n    for (FutureTask<?> task : tasks) {\r\n        task.get(30, TimeUnit.SECONDS);\r\n    }\r\n    assertEquals(threads * count * iterations, totalCount.get());\r\n}\r\n```\r\nOften fails with this exception:\r\n```\r\nio.requery.sql.StatementExecutionException: Exception executing statement: select id, address, age, birthday, description, email, homepage, name, picture, uuid from Person where birthday between ? and ?\r\nat io.requery.sql.SelectResult.iterator(SelectResult.java:131)\r\nat io.requery.query.BaseResult.iterator(BaseResult.java:121)\r\nat io.requery.query.BaseResult.collect(BaseResult.java:75)\r\nat io.requery.query.BaseResult.toList(BaseResult.java:69)\r\nat io.requery.test.FunctionalTest$1.call(FunctionalTest.java:1504)\r\nat io.requery.test.FunctionalTest$1.call(FunctionalTest.java:1495)\r\nat java.util.concurrent.FutureTask.run(FutureTask.java:237)\r\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1112)\r\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:587)\r\nat java.lang.Thread.run(Thread.java:818)\r\nCaused by: java.lang.IllegalArgumentException: Invalid day of week: 0\r\nat java.util.SimpleTimeZone.checkRange(SimpleTimeZone.java:560)\r\nat java.util.SimpleTimeZone.getOffset(SimpleTimeZone.java:346)\r\nat java.util.GregorianCalendar.fullFieldsCalc(GregorianCalendar.java:503)\r\nat java.util.GregorianCalendar.computeFields(GregorianCalendar.java:599)\r\nat java.util.Calendar.complete(Calendar.java:842)\r\nat java.util.Calendar.get(Calendar.java:897)\r\nat java.text.SimpleDateFormat.append(SimpleDateFormat.java:676)\r\nat java.text.SimpleDateFormat.formatImpl(SimpleDateFormat.java:529)\r\nat java.text.SimpleDateFormat.format(SimpleDateFormat.java:820)\r\nat java.text.DateFormat.format(DateFormat.java:314)\r\nat io.requery.android.sqlite.BasePreparedStatement.setDate(BasePreparedStatement.java:214)\r\nat io.requery.android.sqlite.BasePreparedStatement.setDate(BasePreparedStatement.java:209)\r\nat io.requery.sql.type.JavaDateType.write(JavaDateType.java:47)\r\nat io.requery.sql.type.JavaDateType.write(JavaDateType.java:28)\r\nat io.requery.sql.GenericMapping.write(GenericMapping.java:366)\r\nat io.requery.sql.SelectResult.iterator(SelectResult.java:123)\r\n... 9 more\r\n```\r\nBut can also fail with an unexpected number of entities being selected:\r\n``java.lang.AssertionError: expected:<40000> but was:<35821>``", "url": "https://github.com/requery/requery/issues/513", "user": "MikeNicholls", "labels": ["bug"], "created": "2017-04-18 03:12:15", "closed": "2017-04-18 04:24:38", "commits": {"dee07f4e7683bb159cb7b62cc6ae817d191f415a": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "dee07f4e7683bb159cb7b62cc6ae817d191f415a", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["8e834c031dc19eb19c438f513ea362435eadaa43"], "nameRev": "dee07f4e7683bb159cb7b62cc6ae817d191f415a tags/1.3.1~12", "commitMessage": "Resolve #513 Android use ThreadLocal for ISO8601_FORMAT (#514)\n\n", "commitDateTime": "2017-04-17 21:24:37", "authoredDateTime": "2017-04-18 16:24:37", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlite/BasePreparedStatement.java", "insertions": 9, "deletions": 6, "lines": 15}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlite/CursorResultSet.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BasePreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement", "TOT": 7, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 3}, {"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement.setDate(int,java.sql.Date,java.util.Calendar)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement.1.initialValue()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CursorResultSet.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.CursorResultSet.getDate(int)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Default values are handled incorrectly in PostgreSQL", "body": "I'm using following model with Requery 1.3.0:\r\n\r\n```\r\n@Entity\r\npublic class AbstractTest2 implements Persistable {\r\n\r\n    @Generated\r\n    @Key\r\n    Long id;\r\n\r\n    @Column(nullable = false, value = \"now()\")\r\n    Timestamp created;\r\n}\r\n```\r\n\r\nAnd I try to insert new row, which should use default value for the `created` column, using below code:\r\n\r\n```\r\nTest2 t = new Test2();\r\ndataStore.insert(t);\r\n```\r\n\r\nThe problem is that Requery will substitute `NULL` as value for `created` column. But it's incorrect in PostgreSQL. To get default value query should either skip column entirely or provide a keyword `DEFAULT` as value. See [this thread](https://www.postgresql.org/message-id/1904.1321935729%40sss.pgh.pa.us) for example. With current behavior query fails with error message: `ERROR: null value in column \"created\" violates not-null constraint`.", "url": "https://github.com/requery/requery/issues/505", "user": "devoto13", "labels": ["bug"], "created": "2017-04-10 17:53:10", "closed": "2017-06-29 06:10:13", "commits": {"83aa50a81f8af6d08b61b2c61ee6f279ec074c41": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 79.00027777777778, "commitsDetails": [{"commitHash": "83aa50a81f8af6d08b61b2c61ee6f279ec074c41", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["1dac7579484cad982f99f55872dbd923e3bca91e"], "nameRev": "83aa50a81f8af6d08b61b2c61ee6f279ec074c41 tags/1.4.0~4", "commitMessage": "Resolve #505 Fix handling of default values in insert\n", "commitDateTime": "2017-06-28 23:10:08", "authoredDateTime": "2017-06-28 23:10:08", "commitGitStats": [{"filePath": "requery-test/src/main/java/io/requery/test/FunctionalTest.java", "insertions": 8, "deletions": 0, "lines": 8}, {"filePath": "requery-test/src/main/java/io/requery/test/model/AbstractPerson.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 32, "deletions": 3, "lines": 35}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FunctionalTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.FunctionalTest.testInsertDefaultValue()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractPerson.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model.AbstractPerson", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.meta.Attribute[]).6", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.meta.Attribute[]).7", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).9", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).8", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).9.bindParameters(java.sql.PreparedStatement)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).8.test(io.requery.meta.Attribute)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.insert(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.sql.GeneratedKeys).5.bindParameters(java.sql.PreparedStatement)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.sql.EntityWriter", "TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.filterDefaultValues(io.requery.proxy.EntityProxy)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.canBatchInStatement()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.insert(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.sql.GeneratedKeys)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["83aa50a81f8af6d08b61b2c61ee6f279ec074c41"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 33, "deletions": 3, "lines": 36, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 18, "UPD": 6, "INS": 11, "MOV": 0, "DEL": 1, "spoonFilesChanged": 2, "spoonMethodsChanged": 12}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery-test/src/main/java/io/requery/test/model"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.insert(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.sql.GeneratedKeys)", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).9.bindParameters(java.sql.PreparedStatement)", "io.requery.sql.EntityWriter", "io.requery.test.model.AbstractPerson", "io.requery.sql.EntityWriter.insert(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.sql.GeneratedKeys).5.bindParameters(java.sql.PreparedStatement)", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).8.test(io.requery.meta.Attribute)", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.meta.Attribute[]).7", "io.requery.sql.EntityWriter.filterDefaultValues(io.requery.proxy.EntityProxy)", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).9", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).8", "io.requery.sql.EntityWriter.canBatchInStatement()", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.meta.Attribute[]).6"]}, {"title": "[Question] Passing null to OneToOne field", "body": "Original question:\r\nhttps://github.com/requery/requery/issues/501\r\n\r\nSorry, but setting `@Column(nullable=true)` didn't help me.\r\nIt still returns an object instead of null.\r\n\r\nInteresting that `nullable=true` is set by default, so it shouldn't help.\r\n\r\nThe code:\r\n```\r\n    @Column(nullable = true)\r\n    @ForeignKey\r\n    @OneToOne\r\n    @Nullable\r\n    Foo getFoo();\r\n    void setFoo(Foo foo);\r\n\r\n```\r\n\r\n", "url": "https://github.com/requery/requery/issues/503", "user": "JuzTosS", "labels": ["bug"], "created": "2017-04-10 10:42:51", "closed": "2017-04-23 19:34:21", "commits": {"290bbe4689db0d54b95fdb09638b5d728c1cc453": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 13.000277777777777, "commitsDetails": [{"commitHash": "290bbe4689db0d54b95fdb09638b5d728c1cc453", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["3007330653cff90336f3988638ef82006866c39a"], "nameRev": "290bbe4689db0d54b95fdb09638b5d728c1cc453 tags/1.3.1~6", "commitMessage": "Resolve #503 Nullable foreign key object not null on retrieval\n", "commitDateTime": "2017-04-23 12:34:34", "authoredDateTime": "2017-04-23 12:34:34", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/GenericMapping.java", "insertions": 4, "deletions": 0, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GenericMapping.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.GenericMapping.read(io.requery.query.Expression,java.sql.ResultSet,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["290bbe4689db0d54b95fdb09638b5d728c1cc453"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 0, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.GenericMapping.read(io.requery.query.Expression,java.sql.ResultSet,int)"]}, {"title": "No way to use Kotlin with Jackson", "body": "`EntityMapper` constructor requires `EntityStore` from package `io.requery`, but using Kotlin I have `EntityStore` from package `io.requery.kotlin`. They have same name and no inheritance relation.    \r\nPlease, fix that issue", "url": "https://github.com/requery/requery/issues/502", "user": "I60R", "labels": ["bug"], "created": "2017-04-10 07:19:10", "closed": "2017-04-11 04:14:41", "commits": {"8d44309dbe9d3e29b149d6b668888aa71536262b": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "8d44309dbe9d3e29b149d6b668888aa71536262b", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["72edf092077259f4f24cfa7711e97922902a2d81"], "nameRev": "8d44309dbe9d3e29b149d6b668888aa71536262b tags/1.3.1~14", "commitMessage": "Resolve #502 Kotlin make the wrapped java EntityDataStore accessible\n", "commitDateTime": "2017-04-10 21:14:34", "authoredDateTime": "2017-04-10 21:14:34", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt", "insertions": 4, "deletions": 3, "lines": 7}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8d44309dbe9d3e29b149d6b668888aa71536262b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 3, "lines": 7, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt"]}, {"title": "Kotlin: select(SomeEntity::property) returns type Return<out Result<SomeEntity>>", "body": "Requery version: 1.2.0\r\n\r\nIntent: \r\nI'd like to use a select statement result as part of another select statement without loading full entities as described here:\r\nhttps://github.com/requery/requery/blob/master/requery-test/src/main/java/io/requery/test/FunctionalTest.java#L1173\r\n\r\nExample 1:\r\n\r\n    val qa = store.select(IJobApplication::jobOfferId).distinct() where (IJobApplication::candidateId eq candidateId)\r\n    val ra = qa.get()\r\n    val la = ra.toList()\r\n\r\nresults in \r\n\r\n    Caused by: java.util.NoSuchElementException\r\n       at io.requery.sql.ResultSetIterator.next(ResultSetIterator.java:106)\r\n       at io.requery.query.BaseResult.collect(BaseResult.java:77)\r\n       at io.requery.query.BaseResult.toList(BaseResult.java:69)\r\n       ...\r\n    Caused by: java.sql.SQLDataException: no column _id\r\n       at io.requery.android.sqlite.CursorResultSet.findColumn(CursorResultSet.java:114)\r\n       at io.requery.sql.EntityReader.readCacheKey(EntityReader.java:472)\r\n       at io.requery.sql.EntityReader.fromResult(EntityReader.java:508)\r\n       at io.requery.sql.EntityResultReader.read(EntityResultReader.java:45)\r\n       at io.requery.sql.ResultSetIterator.next(ResultSetIterator.java:101)\r\n       at io.requery.query.BaseResult.collect(BaseResult.java:77)\u00a0\r\n       at io.requery.query.BaseResult.toList(BaseResult.java:69)\u00a0\r\n       ...\r\n\r\n`_id` is primary key of `IJobApplication`.\r\n\r\nExample 2: \r\nUsing `qa` as a `notIn` argument produces the following error:\r\n\r\n    Caused by: io.requery.sql.StatementExecutionException: Exception executing statement: select _id, authorId, createdAt, description, endsAt, gender, id, localCanContributeToNotifications, localSeen, localShouldShowNotification, offerDuration, offerUntil, pendingCreate, pendingRequestId, pendingRetry, pendingStatus, place, salaryUnit, salaryValue, showCandidatesDuration, showCandidatesUntil, startsAt, status, updatedAt from IJobOffer where authorId is not null and authorId != ? and status != ? and id not in ? order by offerUntil desc limit 10 \r\n       at io.requery.sql.SelectResult.iterator(SelectResult.java:131)\r\n       at io.requery.query.BaseResult.iterator(BaseResult.java:121)\r\n       at io.requery.query.BaseResult.collect(BaseResult.java:75)\r\n       at io.requery.query.BaseResult.toList(BaseResult.java:69)\r\n       ...\r\n    Caused by: android.database.sqlite.SQLiteException: near \"?\": syntax error (code 1): , while compiling: select _id, authorId, createdAt, description, endsAt, gender, id, localCanContributeToNotifications, localSeen, localShouldShowNotification, offerDuration, offerUntil, pendingCreate, pendingRequestId, pendingRetry, pendingStatus, place, salaryUnit, salaryValue, showCandidatesDuration, showCandidatesUntil, startsAt, status, updatedAt from IJobOffer where authorId is not null and authorId != ? and status != ? and id not in ? order by offerUntil desc limit 10\r\n       at io.requery.android.database.sqlite.SQLiteConnection.nativePrepareStatement(Native Method)\r\n       at io.requery.android.database.sqlite.SQLiteConnection.acquirePreparedStatement(SQLiteConnection.java:919)\r\n       at io.requery.android.database.sqlite.SQLiteConnection.prepare(SQLiteConnection.java:522)\r\n       at io.requery.android.database.sqlite.SQLiteSession.prepare(SQLiteSession.java:598)\r\n       at io.requery.android.database.sqlite.SQLiteProgram.<init>(SQLiteProgram.java:59)\r\n       at io.requery.android.database.sqlite.SQLiteStatement.<init>(SQLiteStatement.java:37)\r\n       at io.requery.android.database.sqlite.SQLiteDatabase.compileStatement(SQLiteDatabase.java:985)\r\n       at io.requery.android.sqlitex.SqlitexPreparedStatement.<init>(SqlitexPreparedStatement.java:39)\r\n       at io.requery.android.sqlitex.SqlitexConnection.prepareStatement(SqlitexConnection.java:129)\r\n       at io.requery.android.sqlite.BaseConnection.prepareStatement(BaseConnection.java:171)\r\n       at io.requery.sql.SelectResult.createStatement(SelectResult.java:74)\r\n       at io.requery.sql.SelectResult.iterator(SelectResult.ja\r\n    \r\n    E/SQLiteLog: (1) near \"?\": syntax error", "url": "https://github.com/requery/requery/issues/499", "user": "consp1racy", "labels": ["bug"], "created": "2017-04-06 22:54:34", "closed": "2017-04-10 02:21:06", "commits": {"42adc138817e6e7a5ff7c6e7128228aea49f2255": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "42adc138817e6e7a5ff7c6e7128228aea49f2255", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["241ba9c80a11d5b68415a0be778cb2b05e382f35"], "nameRev": "42adc138817e6e7a5ff7c6e7128228aea49f2255 tags/1.3.0~3", "commitMessage": "Resolve #499 Kotlin select properties now returns a Result<Tuple>\n", "commitDateTime": "2017-04-09 19:21:09", "authoredDateTime": "2017-04-09 19:21:09", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/kotlin/Queryable.kt", "insertions": 10, "deletions": 3, "lines": 13}, {"filePath": "requery-kotlin/src/main/kotlin/io/requery/reactivex/KotlinReactiveEntityStore.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-kotlin/src/main/kotlin/io/requery/rx/KotlinRxEntityStore.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt", "insertions": 3, "deletions": 4, "lines": 7}, {"filePath": "requery-test/kotlin-test/src/test/kotlin/io/requery/test/kt/FunctionalTest.kt", "insertions": 13, "deletions": 1, "lines": 14}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["42adc138817e6e7a5ff7c6e7128228aea49f2255"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 9, "lines": 24, "gitFilesChange": 4}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/reactivex/KotlinReactiveEntityStore.kt", "requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt", "requery-kotlin/src/main/kotlin/io/requery/rx/KotlinRxEntityStore.kt", "requery-kotlin/src/main/kotlin/io/requery/kotlin/Queryable.kt"]}, {"title": "@Collumn(nullable = false) with @ForeighKey() leads to missing NOT NULL", "body": "I'm using `SchemaModifier.createTables()` to generate create table statements for the following structure:\r\n\r\n```\r\n@Entity\r\npublic abstract class AbstractAccount implements Persistable {\r\n    @Key\r\n    @Generated\r\n    Long id;\r\n}\r\n\r\n@Entity\r\npublic abstract class AbstractApplication implements Persistable {\r\n    @Key\r\n    @Generated\r\n    Long id;\r\n\r\n    @Column(nullable = false)\r\n    @ForeignKey(references = AbstractAccount.class)\r\n    Long ownerId;\r\n}\r\n```\r\n\r\nThe problem is that, `NOT NULL` part is not being added to the `ownerId` column definition. If I remove `@ForeignKey()` annotation it adds `NOT NULL` correctly.\r\n\r\nIt seems to be related to the fact that `createForeignKeyColumn()` method doesn't check for nullability of the attribute as `createColumn()` [does](https://github.com/requery/requery/blob/master/requery/src/main/java/io/requery/sql/SchemaModifier.java#L532). Same issue applies to similar properties, like `DEFAULT`, `UNIQUE`, `PRIMARY KEY`, etc.\r\n\r\nI'm using Requery 1.2.1 with PostgreSQL.\r\n\r\ncc @alex-shpak ", "url": "https://github.com/requery/requery/issues/496", "user": "devoto13", "labels": ["bug"], "created": "2017-03-30 17:00:22", "closed": "2017-03-31 05:53:14", "commits": {"e54f699f020bd8959e506fadf45c7fe443dc3994": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "e54f699f020bd8959e506fadf45c7fe443dc3994", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["b7301d9d110fc53a4b0af5959610a366137a4260"], "nameRev": "e54f699f020bd8959e506fadf45c7fe443dc3994 tags/1.3.0~5", "commitMessage": "Resolve #496 Postgres foreign key missing non-null constraint\n", "commitDateTime": "2017-03-30 22:53:02", "authoredDateTime": "2017-03-30 22:53:02", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/SchemaModifier.java", "insertions": 11, "deletions": 0, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SchemaModifier.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SchemaModifier.createForeignKeyColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute,boolean,boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e54f699f020bd8959e506fadf45c7fe443dc3994"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 0, "lines": 11, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.SchemaModifier.createForeignKeyColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute,boolean,boolean)"]}, {"title": "INSERT INTO from SELECT using Kotlin", "body": "Are there examples of the correct way to use this feature with Kotlin?\r\n\r\nThis is my current attempt.\r\n\r\n``` Kotlin\r\n_data.insert(Table1Entity::class,\r\n   Table1Entity.COLUMN1,\r\n   Table1Entity.COLUMN2,\r\n   Table1Entity.COLUMN3,\r\n   Table1Entity.COLUMN4)(\r\n   _data.select(Table2Entity.COLUMN1,\r\n           Table2Entity.COLUMN2,\r\n           Table2Entity.COLUMN3,\r\n           Table2Entity.COLUMN4\r\n   )).get()\r\n```", "url": "https://github.com/requery/requery/issues/486", "user": "andre-artus", "labels": ["bug"], "created": "2017-03-23 20:23:44", "closed": "2017-03-27 06:19:41", "commits": {"3c89d9b09dc4d55e3d93ef2824965a4f487f02a2": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "3c89d9b09dc4d55e3d93ef2824965a4f487f02a2", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["610c4976b7e801c084a04a1c2e0b6a8259492090"], "nameRev": "3c89d9b09dc4d55e3d93ef2824965a4f487f02a2 tags/1.3.0~7", "commitMessage": "Resolve #486 Kotlin fix handling of insert into select query\n", "commitDateTime": "2017-03-26 23:19:49", "authoredDateTime": "2017-03-26 23:19:49", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/kotlin/Query.kt", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-kotlin/src/main/kotlin/io/requery/kotlin/QueryDelegate.kt", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "requery-kotlin/src/main/kotlin/io/requery/kotlin/Queryable.kt", "insertions": 7, "deletions": 0, "lines": 7}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3c89d9b09dc4d55e3d93ef2824965a4f487f02a2"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 3, "lines": 13, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/kotlin/Queryable.kt", "requery-kotlin/src/main/kotlin/io/requery/kotlin/QueryDelegate.kt", "requery-kotlin/src/main/kotlin/io/requery/kotlin/Query.kt"]}, {"title": "Requery 1.2.1 does not handle views properly.", "body": "In 1.2.0 a feature was added expose views with the `@View` annotation. I have a problem in 1.2.1 that occurs when the view does not yet exist in the DB it is created as a table by requery, which causes an error when one wants to create the view.\r\n\r\ne.g.\r\n\r\njava.lang.RuntimeException: Unable to start activity ComponentInfo{ActivityName}: android.database.sqlite.SQLiteException: use DROP TABLE to delete table MyView (code 1): , while compiling: DROP VIEW IF EXISTS MyView\r\n\r\nIt seems to work fine when the view is created first. I create the DB from code, so it causes issues for me.\r\n\r\nI'm using requery 1.2.1 and Kotlin 1.1.1 on Android", "url": "https://github.com/requery/requery/issues/485", "user": "andre-artus", "labels": ["bug"], "created": "2017-03-23 16:22:08", "closed": "2017-03-27 02:32:18", "commits": {"892cbb427cbb6307b85477f1a885db8564644ebc": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "892cbb427cbb6307b85477f1a885db8564644ebc", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["6a54c26fcec0cd15d189132065b4b72e030e0a43"], "nameRev": "892cbb427cbb6307b85477f1a885db8564644ebc tags/1.3.0~10", "commitMessage": "Resolve #485 Fix isView not assigned from TypeBuilder\n", "commitDateTime": "2017-03-26 19:30:53", "authoredDateTime": "2017-03-26 19:30:53", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/meta/ImmutableType.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ImmutableType.java", "spoonMethods": [{"spoonMethodName": "io.requery.meta.ImmutableType", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["892cbb427cbb6307b85477f1a885db8564644ebc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/meta"], "changesInPackagesSPOON": ["io.requery.meta.ImmutableType"]}, {"title": "Requery 1.2.1 generating wrong labels in join query", "body": "This is an issue I picked up when moving to 1.2.1, when I reverted to 1.2.1 it disappeared.\r\n\r\n``` Kotlin\r\n  val result = data\r\n                .select(Table1Entity.COLUMN1,\r\n                        Table1Entity.COLUMN2,\r\n                        Table2Entity.COLUMN3,\r\n                        Table3Entity.COLUMN4,\r\n                        Table3Entity.COLUMN5,\r\n                        Table3Entity.COLUMN6)\r\n                .from(Table1Entity::class)\r\n                .join(Table2Entity::class)\r\n                .on(Table1Entity.T2_ID.eq(Table2Entity.ID))\r\n                .leftJoin(Table3Entity::class)\r\n                .on(Table1Entity.COLUMN1.eq(Table3Entity.COLUMN1))\r\n                .where(Table1Entity.COLUMN1.eq(variable))\r\n                .orderBy(Table3Entity.COLUMN5)\r\n                .limit(1).get()\r\n```\r\nCaused by: io.requery.sql.StatementExecutionException: Exception executing statement: select a.column1, a.column2, b.column3, c.column4, c.column5, c.column6 from table1 a inner join table2 d on a.t2_id = d.id left join table3 e on a.column1 = e.column1 where a.column1 = ? order by e.column5 limit 1\r\n\r\nIt generates this, label mismatches in bold\r\n\r\n``` SQL\r\nSELECT\r\n  a.column1,\r\n  a.column2,\r\n  **b**.column3,\r\n  **c**.column4,\r\n  **c**.column5,\r\n  **c**.column6\r\nFROM table1 a INNER JOIN table2 **d** ON a.t2_id = d.id\r\n  LEFT JOIN table3 **e** ON a.column1 = e.column1\r\nWHERE a.column1 = ?\r\nORDER BY e.column5\r\nLIMIT 1\r\n``", "url": "https://github.com/requery/requery/issues/482", "user": "andre-artus", "labels": ["bug"], "created": "2017-03-23 11:54:11", "closed": "2017-03-31 05:53:14", "commits": {"b7301d9d110fc53a4b0af5959610a366137a4260": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "b7301d9d110fc53a4b0af5959610a366137a4260", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["3c89d9b09dc4d55e3d93ef2824965a4f487f02a2"], "nameRev": "b7301d9d110fc53a4b0af5959610a366137a4260 tags/1.3.0~6", "commitMessage": "Resolve #482 Fix incorrect join alias generated\n", "commitDateTime": "2017-03-30 22:48:46", "authoredDateTime": "2017-03-30 22:48:46", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/gen/DefaultOutput.java", "insertions": 7, "deletions": 11, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultOutput.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.gen.DefaultOutput.Aliases.appendJoin(io.requery.sql.QueryBuilder,java.lang.String)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.gen.DefaultOutput.appendJoin(io.requery.query.element.JoinOnElement)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.gen.DefaultOutput.Aliases.append(io.requery.sql.QueryBuilder,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.sql.gen.DefaultOutput.Aliases", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b7301d9d110fc53a4b0af5959610a366137a4260"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 11, "lines": 18, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 4, "INS": 1, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql/gen"], "changesInPackagesSPOON": ["io.requery.sql.gen.DefaultOutput.appendJoin(io.requery.query.element.JoinOnElement)", "io.requery.sql.gen.DefaultOutput.Aliases", "io.requery.sql.gen.DefaultOutput.Aliases.appendJoin(io.requery.sql.QueryBuilder,java.lang.String)", "io.requery.sql.gen.DefaultOutput.Aliases.append(io.requery.sql.QueryBuilder,java.lang.String)"]}, {"title": "Wrong generation of entity which is part of a hierarchy deeper than 2 levels", "body": "My data model has an **entity** (_IEntity_) which has a **mapped superclass** (_ISuperEntity_) which itself has a **mapped superclass** (_ISuperSuperEntity_).\r\n\r\n```Java\r\n\r\n@Entity\r\npublic interface IEntity extends ISuperEntity {\r\n    @Column\r\n    public String getAttributeOnEntity();\r\n}\r\n\r\n@MappedSuperclass\r\npublic interface ISuperEntity extends ISuperSuperEntity {\r\n    @Column\r\n    public String getAttributeOnSuperEntity();\r\n}\r\n\r\n@MappedSuperclass\r\npublic interface ISuperSuperEntity {\r\n    @Column\r\n    public String getAttributeOnSuperSuperEntity();\r\n}\r\n\r\n```\r\n\r\nThe annotation processor seems to behave **wrongly** processing **only one level** of the **hierarchy**, therefore **Entity class** ends up **missing** the attribute **attributeOnSuperSuperEntity** which was declared on its ancestor, causing this compilation error:\r\n\r\n`Error:(18, 8) error: Entity is not abstract and does not override abstract method getAttributeOnSuperSuperEntity() in ISuperSuperEntity`\r\n\r\n**I think the annotation processor should be fixed to handle hierarchies of depth greater than 2.**", "url": "https://github.com/requery/requery/issues/480", "user": "mirkoluchi", "labels": ["bug"], "created": "2017-03-22 08:27:57", "closed": "2017-03-23 15:45:42", "commits": {"3abfd4fb4bf7407355631c3ffc13809a78364486": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "3abfd4fb4bf7407355631c3ffc13809a78364486", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["10eb15ce06de1c3b1658c876d4351956cdfbecb8"], "nameRev": "3abfd4fb4bf7407355631c3ffc13809a78364486 tags/1.3.0~12", "commitMessage": "Resolve #480 Handle hierarchical super types on interfaces\n", "commitDateTime": "2017-03-23 08:45:34", "authoredDateTime": "2017-03-23 08:45:34", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityProcessor.java", "insertions": 6, "deletions": 3, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityProcessor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "TOT": 10, "UPD": 1, "INS": 3, "MOV": 5, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3abfd4fb4bf7407355631c3ffc13809a78364486"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 3, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 10, "UPD": 1, "INS": 3, "MOV": 5, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)"]}, {"title": "No-args constructor of @Embeddable object is not generated", "body": "I have this data model:\r\n* An **IPerson** entity\r\n* An **IAddress embeddable** object\r\n* The **IPerson** has an **embedded property** address of type IAddress\r\n\r\n```Java\r\n@Entity\r\npublic interface IPerson {\r\n  \r\n    @Id\r\n    @GeneratedValue\r\n    public Long getId();\r\n\r\n    @Embedded()\r\n    public IAddress getAddress();\r\n\r\n}\r\n\r\n@Embeddable\r\npublic interface IAddress {\r\n    \r\n    @Column\r\n    public String getAddress();\r\n\r\n}\r\n\r\n```\r\n\r\nThe generated class to represent the embedded relationship is **Person_Address**. The class **does not have a no-args constructor**, but just this:\r\n\r\n```Java\r\npublic Person_Address(EntityProxy<Person> proxy, Attribute<Person, String> address) {\r\n        this.$proxy = proxy;\r\n        this.$address = address;\r\n}\r\n```\r\n\r\nThis is a **problem when I try to parse the JSON representation of a Person** using for instance Jackson, because it **cannot find a no-args constructor** on the Person_Address class: `com.fasterxml.jackson.databind.JsonMappingException: Can not construct instance of com.lokrim.vehicle.Person_Address: no suitable constructor found`\r\n\r\n\r\n**Would it be a problem to modify the Person_Adress generated class to have also the no-args constructor**, and then make the Person.setAddress setter to properly set the two attributes that now are in the Person_Address constructor?\r\nSomething like this:\r\n\r\n```Java\r\n\r\nclass Person{\r\n ....\r\n   public void setAddress(Person_Address address) {\r\n        if(address != null && address.$proxy == null){\r\n             address.$proxy = $proxy;\r\n             address.$address = ADDRESS_ADDRESS;\r\n        }\r\n        this.address = address;\r\n    }\r\n}\r\n\r\n```\r\nNOTE that in the above code I neglected fact that Person_Address.$proxy and Person_Address.$address properties are both final and private.\r\n\r\n\r\n", "url": "https://github.com/requery/requery/issues/469", "user": "mirkoluchi", "labels": ["bug"], "created": "2017-03-15 14:41:52", "closed": "2017-03-21 04:34:26", "commits": {"b2e1dd9fd35749d90dc9b76612979f31e7bece50": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "b2e1dd9fd35749d90dc9b76612979f31e7bece50", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["c3928177101995f845a0c315ef8df5df8c14ea85"], "nameRev": "b2e1dd9fd35749d90dc9b76612979f31e7bece50 tags/1.3.0~14", "commitMessage": "Resolve #469 Jackson map embedded type to parent\n", "commitDateTime": "2017-03-20 21:34:17", "authoredDateTime": "2017-03-20 21:34:17", "commitGitStats": [{"filePath": "requery-jackson/src/main/java/io/requery/jackson/EntityBeanDeserializer.java", "insertions": 37, "deletions": 0, "lines": 37}, {"filePath": "requery-test/src/main/java/io/requery/test/model3/Address.java", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "requery-test/src/main/java/io/requery/test/model3/Location.java", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "requery-test/src/test/java/io/requery/test/JacksonTest.java", "insertions": 28, "deletions": 0, "lines": 28}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityBeanDeserializer.java", "spoonMethods": [{"spoonMethodName": "io.requery.jackson.EntityBeanDeserializer", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.jackson.EntityBeanDeserializer.deserializeFromObjectUsingNonDefault(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Address.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model3", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Location.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model3", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JacksonTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.JacksonTest.testEmbedSerialize()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.JacksonTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b2e1dd9fd35749d90dc9b76612979f31e7bece50"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 61, "deletions": 0, "lines": 61, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 0, "spoonFilesChanged": 3, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-test/src/main/java/io/requery/test/model3", "requery-jackson/src/main/java/io/requery/jackson"], "changesInPackagesSPOON": ["io.requery.test.model3", "io.requery.jackson.EntityBeanDeserializer.deserializeFromObjectUsingNonDefault(com.fasterxml.jackson.core.JsonParser,com.fasterxml.jackson.databind.DeserializationContext)", "io.requery.jackson.EntityBeanDeserializer"]}, {"title": "Project Broken after update android studio and gradle version", "body": "hello, I was using requery succesfully after an android tools and gradle update, now can't generate classes:\r\nI've tried everything.\r\n\r\nthis is my console output after full rebuild:\r\n\r\n`\r\nExecuting tasks: [clean, :app:generateDebugSources, :app:generateDebugAndroidTestSources, :app:mockableAndroidJar, :app:prepareDebugUnitTestDependencies, :app:compileDebugSources, :app:compileDebugAndroidTestSources, :app:compileDebugUnitTestSources]\r\n\r\nConfiguration on demand is an incubating feature.\r\nNDK is missing a \"platforms\" directory.\r\nIf you are using NDK, verify the ndk.dir is set to a valid NDK directory.  It is currently set to /home/devquilla/Android/Sdk/ndk-bundle.\r\nIf you are not using NDK, unset the NDK variable from ANDROID_NDK_HOME or local.properties to remove this warning.\r\n\r\n:clean\r\n:app:clean\r\n:app:preBuild UP-TO-DATE\r\n:app:preDebugBuild UP-TO-DATE\r\n:app:checkDebugManifest\r\n:app:preReleaseBuild UP-TO-DATE\r\n:app:prepareComAndroidDatabindingAdapters131Library\r\n:app:prepareComAndroidDatabindingLibrary131Library\r\n:app:prepareComAndroidSupportAnimatedVectorDrawable2520Library\r\n:app:prepareComAndroidSupportAppcompatV72520Library\r\n:app:prepareComAndroidSupportSupportCompat2520Library\r\n:app:prepareComAndroidSupportSupportCoreUi2520Library\r\n:app:prepareComAndroidSupportSupportCoreUtils2520Library\r\n:app:prepareComAndroidSupportSupportFragment2520Library\r\n:app:prepareComAndroidSupportSupportMediaCompat2520Library\r\n:app:prepareComAndroidSupportSupportV42520Library\r\n:app:prepareComAndroidSupportSupportVectorDrawable2520Library\r\n:app:prepareIoReactivexRxandroid121Library\r\n:app:prepareIoRequeryRequeryAndroid120Library\r\n:app:prepareDebugDependencies\r\n:app:compileDebugAidl\r\n:app:compileDebugRenderscript UP-TO-DATE\r\n:app:generateDebugBuildConfig\r\n:app:generateDebugResValues\r\n:app:generateDebugResources\r\n:app:mergeDebugResources\r\n:app:dataBindingProcessLayoutsDebug\r\n:app:processDebugManifest\r\n:app:processDebugResources\r\n:app:generateDebugSources\r\n:app:preDebugAndroidTestBuild UP-TO-DATE\r\n:app:prepareComAndroidSupportTestEspressoEspressoCore222Library\r\n:app:prepareComAndroidSupportTestEspressoEspressoIdlingResource222Library\r\n:app:prepareComAndroidSupportTestExposedInstrumentationApiPublish05Library\r\n:app:prepareComAndroidSupportTestRules05Library\r\n:app:prepareComAndroidSupportTestRunner05Library\r\n:app:prepareDebugAndroidTestDependencies\r\n:app:compileDebugAndroidTestAidl\r\n:app:processDebugAndroidTestManifest\r\n:app:compileDebugAndroidTestRenderscript UP-TO-DATE\r\n:app:generateDebugAndroidTestBuildConfig\r\n:app:generateDebugAndroidTestResValues\r\n:app:generateDebugAndroidTestResources\r\n:app:mergeDebugAndroidTestResources\r\n:app:processDebugAndroidTestResources\r\n:app:generateDebugAndroidTestSources\r\n:app:mockableAndroidJar\r\n:app:preDebugUnitTestBuild UP-TO-DATE\r\n:app:prepareDebugUnitTestDependencies\r\n:app:dataBindingExportBuildInfoDebug\r\n:app:incrementalDebugJavaCompilationSafeguard\r\n:app:javaPreCompileDebug\r\n:app:transformClassesAndDataBindingWithDataBindingMergeArtifactsForDebug\r\n:app:compileDebugJavaWithJavac\r\n/home/devquilla/AndroidStudioProjects/Wayuu/app/build/generated/source/apt/debug/main/zlab/com/wayuu/repository/model/DictionaryEntity.java:235: error: cannot find symbol\r\n        notifyPropertyChanged(main.zlab.com.wayuu.repository.model.BR.word);\r\n                                                                  ^\r\n  symbol:   class BR\r\n  location: package main.zlab.com.wayuu.repository.model\r\n/home/devquilla/AndroidStudioProjects/Wayuu/app/build/generated/source/apt/debug/main/zlab/com/wayuu/repository/model/DictionaryEntity.java:246: error: cannot find symbol\r\n        notifyPropertyChanged(main.zlab.com.wayuu.repository.model.BR.definition);\r\n                                                                  ^\r\n  symbol:   class BR\r\n  location: package main.zlab.com.wayuu.repository.model\r\n/home/devquilla/AndroidStudioProjects/Wayuu/app/build/generated/source/apt/debug/main/zlab/com/wayuu/repository/model/DictionaryEntity.java:257: error: cannot find symbol\r\n        notifyPropertyChanged(main.zlab.com.wayuu.repository.model.BR.letra);\r\n                                                                  ^\r\n  symbol:   class BR\r\n  location: package main.zlab.com.wayuu.repository.model\r\n3 errors\r\n\r\n FAILED\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':app:compileDebugJavaWithJavac'.\r\n> Compilation failed; see the compiler error output for details.\r\n\r\n* Try:\r\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.\r\n\r\nBUILD FAILED\r\n\r\nTotal time: 5.578 secs\r\n\r\n`\r\n\r\nalso after --info i did notice:\r\n\r\n`\r\nExecuting task ':app:compileDebugJavaWithJavac' (up-to-date check took 0.004 secs) due to:\r\n  No history is available.\r\nAll input files are considered out-of-date for incremental task ':app:compileDebugJavaWithJavac'.\r\nCompiling with source level 1.7 and target level 1.7.\r\nfile or directory '/home/devquilla/AndroidStudioProjects/Wayuu/app/src/debug/java', not found\r\nfile or directory '/home/devquilla/AndroidStudioProjects/Wayuu/app/build/generated/source/rs/debug', not found\r\nCompiling with JDK Java compiler API.\r\n\r\n`\r\n\r\nAny help would be appreciated.\r\n\r\n\r\n", "url": "https://github.com/requery/requery/issues/467", "user": "steelxt", "labels": ["bug"], "created": "2017-03-13 20:25:21", "closed": "2017-03-25 07:31:13", "commits": {"6a54c26fcec0cd15d189132065b4b72e030e0a43": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 11.000277777777777, "commitsDetails": [{"commitHash": "6a54c26fcec0cd15d189132065b4b72e030e0a43", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["3abfd4fb4bf7407355631c3ffc13809a78364486"], "nameRev": "6a54c26fcec0cd15d189132065b4b72e030e0a43 tags/1.3.0~11", "commitMessage": "Resolve #467 Android handle databinding module processor option\n", "commitDateTime": "2017-03-25 00:31:02", "authoredDateTime": "2017-03-25 00:31:02", "commitGitStats": [{"filePath": "build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-android/example/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-processor/src/main/java/io/requery/processor/AndroidObservableExtension.java", "insertions": 8, "deletions": 2, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AndroidObservableExtension.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.AndroidObservableExtension", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.AndroidObservableExtension.addToSetter(io.requery.processor.AttributeDescriptor,com.squareup.javapoet.MethodSpec$Builder)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6a54c26fcec0cd15d189132065b4b72e030e0a43"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 4, "lines": 14, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 5, "UPD": 0, "INS": 4, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["", "requery-android/example", "requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.AndroidObservableExtension", "io.requery.processor.AndroidObservableExtension.addToSetter(io.requery.processor.AttributeDescriptor,com.squareup.javapoet.MethodSpec$Builder)"]}, {"title": "Wrong join tables generated when superclass has @ManyToMany relationship", "body": "I have a data model containing:\r\n* a **superclass** (SuperClass)\r\n* **2 subclasses** of that superclass (SubClassA and SubClassB)\r\n* the superclass has a **many-to-many relationship** towards a relatedclass (RelatedClass)\r\n\r\n```Java\r\n@MappedSuperclass\r\npublic interface ISuperClass {\r\n    @Id\r\n    public Long getId();\r\n\r\n    @ManyToMany\r\n    @JoinTable\r\n    public List<IRelatedClass> getRelatedClasses();\r\n}\r\n\r\n@Entity\r\npublic interface ISubClassA extends ISuperClass {\r\n}\r\n\r\n@Entity\r\npublic interface ISubClassB extends ISuperClass{\r\n}\r\n\r\n@Entity\r\npublic interface IRelatedClass {\r\n    @Id\r\n    public Long getId();\r\n}\r\n\r\n```\r\n\r\nThe **classes generated** by the requery annotation processor to map the **join tables** of the many-to-many relationship are **incorrect**:\r\n\r\n```Java\r\n@Entity(\r\n        model = \"interfaces\",\r\n        stateless = false\r\n)\r\n@Table(\r\n        name = \"ISubClassB_IRelatedClass\"\r\n)\r\npublic abstract class AbstractSubClassB_RelatedClass implements Serializable {\r\n    @ForeignKey(\r\n            delete = ReferentialAction.CASCADE,\r\n            update = ReferentialAction.CASCADE,\r\n            references = SubClassA.class\r\n    )\r\n    @Key\r\n    protected Integer ISubClassAId;\r\n\r\n    @ForeignKey(\r\n            delete = ReferentialAction.CASCADE,\r\n            update = ReferentialAction.CASCADE,\r\n            references = RelatedClass.class\r\n    )\r\n    @Key\r\n    protected Long IRelatedClassId;\r\n}\r\n\r\n\r\n@Entity(\r\n        model = \"interfaces\",\r\n        stateless = false\r\n)\r\n@Table(\r\n        name = \"ISubClassA_IRelatedClass\"\r\n)\r\npublic abstract class AbstractSubClassA_RelatedClass implements Serializable {\r\n    @ForeignKey(\r\n            delete = ReferentialAction.CASCADE,\r\n            update = ReferentialAction.CASCADE,\r\n            references = SubClassA.class\r\n    )\r\n    @Key\r\n    protected Long ISubClassAId;\r\n\r\n    @ForeignKey(\r\n            delete = ReferentialAction.CASCADE,\r\n            update = ReferentialAction.CASCADE,\r\n            references = RelatedClass.class\r\n    )\r\n    @Key\r\n    protected Long IRelatedClassId;\r\n}\r\n```\r\n\r\nNotice in fact that **both AbstractSubClassA_RelatedClass and AbstractSubClassB_RelatedClass** have a **reference** to the **same subclass** SubClassA, while one should have a reference to SubClassA and the other to SubClassB.\r\n\r\n_NOTE: As a workaround I have overridden the getter of the many-to-many relationship in both SubClassA and SubClassB, which made the annotation processor behave correctly._", "url": "https://github.com/requery/requery/issues/461", "user": "mirkoluchi", "labels": ["bug"], "created": "2017-03-09 11:41:36", "closed": "2017-03-10 08:44:06", "commits": {"55352361faef7e8d62ecd0b4bec3f2a114da93c6": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "55352361faef7e8d62ecd0b4bec3f2a114da93c6", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["515a1d405e252ee6a0dfca74e764aca8f4665607"], "nameRev": "55352361faef7e8d62ecd0b4bec3f2a114da93c6 tags/1.2.1~12", "commitMessage": "Resolve #461 Recreate entity attributes when merging from a Superclass\n", "commitDateTime": "2017-03-10 00:43:59", "authoredDateTime": "2017-03-10 00:43:59", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 5, "deletions": 6, "lines": 11}, {"filePath": "requery-test/src/main/java/io/requery/test/superclass/Base.java", "insertions": 18, "deletions": 0, "lines": 18}, {"filePath": "requery-test/src/main/java/io/requery/test/superclass/DerivedA.java", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "requery-test/src/main/java/io/requery/test/superclass/DerivedB.java", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "requery-test/src/main/java/io/requery/test/superclass/Related.java", "insertions": 10, "deletions": 0, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.merge(io.requery.processor.EntityDescriptor)", "TOT": 12, "UPD": 0, "INS": 3, "MOV": 4, "DEL": 5}]}, {"spoonFilePath": "Base.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.superclass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DerivedA.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.superclass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DerivedB.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.superclass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Related.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.superclass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["55352361faef7e8d62ecd0b4bec3f2a114da93c6"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 47, "deletions": 6, "lines": 53, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 16, "UPD": 0, "INS": 7, "MOV": 4, "DEL": 5, "spoonFilesChanged": 5, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor", "requery-test/src/main/java/io/requery/test/superclass"], "changesInPackagesSPOON": ["io.requery.test.superclass", "io.requery.processor.EntityType.merge(io.requery.processor.EntityDescriptor)"]}, {"title": "Calling delete(iterable) on ManyToOne does not delete as expected", "body": "Here is a test that I've appended onto the functional tests that you have set up.\r\n\r\nThe first test is test for deleting multiple entities from ManyToOne.\r\nThe second test is test for deleting a single entry from ManyToOne.\r\n\r\nAm I doing something unexpected that causes the first test to fail? Thanks for your time.\r\n\r\n```\r\n    @Test\r\n    public void testAllDeleteFromManyToOne() {\r\n        Person person = randomPerson();\r\n        data.insert(person);\r\n        Phone phone1 = randomPhone();\r\n        Phone phone2 = randomPhone();\r\n        phone1.setOwner(person);\r\n        phone2.setOwner(person);\r\n        data.insert(phone1);\r\n        data.insert(phone2);\r\n        data.refresh(person);\r\n        data.delete(person.getPhoneNumbers());\r\n\r\n        Phone cached = data.findByKey(Phone.class, phone1.getId());\r\n        assertNull(cached);\r\n    }\r\n\r\n    @Test\r\n    public void testSingleDeleteFromManyToOne() {\r\n        Person person = randomPerson();\r\n        data.insert(person);\r\n        Phone phone1 = randomPhone();\r\n        Phone phone2 = randomPhone();\r\n        phone1.setOwner(person);\r\n        phone2.setOwner(person);\r\n        data.insert(phone1);\r\n        data.insert(phone2);\r\n        data.refresh(person);\r\n        data.delete(phone1);\r\n\r\n        Phone cached = data.findByKey(Phone.class, phone1.getId());\r\n        assertNull(cached);\r\n    }\r\n```", "url": "https://github.com/requery/requery/issues/458", "user": "Tomo-SmudgeApps", "labels": ["bug"], "created": "2017-03-06 20:31:25", "closed": "2017-03-08 07:48:24", "commits": {"515a1d405e252ee6a0dfca74e764aca8f4665607": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "515a1d405e252ee6a0dfca74e764aca8f4665607", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["88e0f34e122eb53a69ef05fbd6a1b6a9dba0ed93"], "nameRev": "515a1d405e252ee6a0dfca74e764aca8f4665607 tags/1.2.1~13", "commitMessage": "Resolve #458 Fix deleting entities from a one to many collection\n", "commitDateTime": "2017-03-07 23:48:19", "authoredDateTime": "2017-03-07 23:48:19", "commitGitStats": [{"filePath": "requery-test/src/main/java/io/requery/test/FunctionalTest.java", "insertions": 17, "deletions": 0, "lines": 17}, {"filePath": "requery/src/main/java/io/requery/sql/EntityDataStore.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FunctionalTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.FunctionalTest.testDeleteOneToManyResult()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityDataStore.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityDataStore.delete(java.lang.Iterable)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.clearAssociations(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["515a1d405e252ee6a0dfca74e764aca8f4665607"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 1, "lines": 8, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.clearAssociations(java.lang.Object,io.requery.proxy.EntityProxy)", "io.requery.sql.EntityDataStore.delete(java.lang.Iterable)"]}, {"title": "AutoValue setters not generated properly.", "body": "I have my AutoValue class setup with method names without \"get\", e.g.:\r\n\r\n    public abstract String name();\r\n\r\nWhen I annotate it with `@Entity` it will try to generate setters like this:\r\n\r\n    @Override\r\n    public void set(ShoeType entity, String value) {\r\n        entity.builder.name(value);\r\n    }\r\n\r\nHowever, my builder class does include \"set\", e.g.:\r\n\r\n    public abstract Builder setName(String name);\r\n\r\nIf I change my methods to include \"get\" (e.g. `public abstract string getName()` it works ok. It also works ok if i change my builder methods to not include \"set\" (e.g. `public abstract Builder name(String name);`\r\n\r\nIMO different combinations of set / get should be supported.", "url": "https://github.com/requery/requery/issues/449", "user": "ghost", "labels": ["bug", "enhancement"], "created": "2017-02-24 00:19:07", "closed": "2017-02-24 06:48:55", "commits": {"0e9b067779fd1c37008fb0afdbe0c21f228d7536": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "0e9b067779fd1c37008fb0afdbe0c21f228d7536", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["30d82819e1975617db5b3fc7e7894f64b956f79b"], "nameRev": "0e9b067779fd1c37008fb0afdbe0c21f228d7536 tags/1.2.1~17", "commitMessage": "Resolve #449 Match setters in builder types when possible\n", "commitDateTime": "2017-02-23 22:48:51", "authoredDateTime": "2017-02-23 22:48:51", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityMetaGenerator.java", "insertions": 7, "deletions": 3, "lines": 10}, {"filePath": "requery-processor/src/main/java/io/requery/processor/Names.java", "insertions": 7, "deletions": 1, "lines": 8}, {"filePath": "requery-processor/src/main/java/io/requery/processor/PropertyAccess.java", "insertions": 0, "deletions": 22, "lines": 22}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityMetaGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generateProperties(io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor,javax.lang.model.type.TypeMirror,com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName,com.squareup.javapoet.CodeBlock$Builder)", "TOT": 15, "UPD": 7, "INS": 2, "MOV": 5, "DEL": 1}]}, {"spoonFilePath": "Names.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.Names.matchesSetter(java.lang.String,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PropertyAccess.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.PropertyAccess", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0e9b067779fd1c37008fb0afdbe0c21f228d7536"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 14, "deletions": 26, "lines": 40, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 17, "UPD": 7, "INS": 3, "MOV": 5, "DEL": 2, "spoonFilesChanged": 3, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.PropertyAccess", "io.requery.processor.EntityMetaGenerator.generateProperties(io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor,javax.lang.model.type.TypeMirror,com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName,com.squareup.javapoet.CodeBlock$Builder)", "io.requery.processor.Names.matchesSetter(java.lang.String,java.lang.String)"]}, {"title": "Self-referential @ManyToMany relationships", "body": "Using an entity similar to this:\r\n```java\r\n@Entity()\r\ninterface MyObject extends Parcelable, Persistable {\r\n\r\n    @Key\r\n    @Generated\r\n    int id();\r\n\r\n    String myString();\r\n\r\n    @JunctionTable(name = \"related_objects\")\r\n    @ManyToMany(mappedBy = \"id\")\r\n    List<MyObject> relatedObjects();\r\n\r\n    void setRelatedObjects(List<? extends MyObject> relatedObjects);\r\n}\r\n```\r\n\r\nThe following `AbstractRelated_objects` is generated:\r\n```java\r\n@Entity(model = \"default\", stateless = false)\r\n@Table(name = \"related_objects\")\r\n@Generated(\"io.requery.processor.EntityProcessor\")\r\npublic abstract class AbstractRelated_objects implements Serializable {\r\n    @ForeignKey(\r\n            delete = ReferentialAction.CASCADE,\r\n            update = ReferentialAction.CASCADE,\r\n            references = com.example.MyObjectEntity.class\r\n    )\r\n    @Key\r\n    protected Integer MyObjectId;\r\n}\r\n```\r\n\r\nI was under the impression that the junction should generate two columns rather than the single one.", "url": "https://github.com/requery/requery/issues/440", "user": "autovalue", "labels": ["bug", "enhancement"], "created": "2017-02-19 14:20:36", "closed": "2017-02-21 06:57:01", "commits": {"8ad84ffcfe4fdee5ecfad2f10bc37c2ac6892004": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "8ad84ffcfe4fdee5ecfad2f10bc37c2ac6892004", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["860f446c1ebc4b6e4f8c7b06c30d9937d6af19f6"], "nameRev": "8ad84ffcfe4fdee5ecfad2f10bc37c2ac6892004 tags/1.2.1~19", "commitMessage": "Resolve #440 Handle self referencing Many-to-Many relationship\n", "commitDateTime": "2017-02-20 22:57:16", "authoredDateTime": "2017-02-20 22:57:16", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/JoinEntityGenerator.java", "insertions": 10, "deletions": 8, "lines": 18}, {"filePath": "requery-test/src/main/java/io/requery/test/FunctionalTest.java", "insertions": 16, "deletions": 0, "lines": 16}, {"filePath": "requery-test/src/main/java/io/requery/test/model/AbstractPerson.java", "insertions": 5, "deletions": 1, "lines": 6}, {"filePath": "requery/src/main/java/io/requery/sql/EntityReader.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/gen/DefaultOutput.java", "insertions": 11, "deletions": 1, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JoinEntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.JoinEntityGenerator.generate()", "TOT": 9, "UPD": 0, "INS": 2, "MOV": 6, "DEL": 1}]}, {"spoonFilePath": "FunctionalTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.FunctionalTest.testInsertManyToManySelfReferencing()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractPerson.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model.AbstractPerson", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityReader.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityReader.associativeQuery(io.requery.proxy.EntityProxy,io.requery.meta.Attribute)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.updateAssociation(io.requery.sql.EntityWriter$Cascade,java.lang.Object,io.requery.proxy.EntityProxy,io.requery.meta.Attribute)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "DefaultOutput.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.gen.DefaultOutput.appendJoin(io.requery.query.element.JoinOnElement)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.gen.DefaultOutput.Aliases.appendJoin(io.requery.sql.QueryBuilder,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8ad84ffcfe4fdee5ecfad2f10bc37c2ac6892004"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 28, "deletions": 12, "lines": 40, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 16, "UPD": 1, "INS": 6, "MOV": 8, "DEL": 1, "spoonFilesChanged": 5, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery/src/main/java/io/requery/sql/gen", "requery-processor/src/main/java/io/requery/processor", "requery-test/src/main/java/io/requery/test/model"], "changesInPackagesSPOON": ["io.requery.sql.gen.DefaultOutput.appendJoin(io.requery.query.element.JoinOnElement)", "io.requery.sql.gen.DefaultOutput.Aliases.appendJoin(io.requery.sql.QueryBuilder,java.lang.String)", "io.requery.sql.EntityWriter.updateAssociation(io.requery.sql.EntityWriter$Cascade,java.lang.Object,io.requery.proxy.EntityProxy,io.requery.meta.Attribute)", "io.requery.processor.JoinEntityGenerator.generate()", "io.requery.test.model.AbstractPerson", "io.requery.sql.EntityReader.associativeQuery(io.requery.proxy.EntityProxy,io.requery.meta.Attribute)"]}, {"title": "Connection is not returned to pool on exception", "body": "When you are not using transactions and sql exception is thrown, connection are not released. ", "url": "https://github.com/requery/requery/issues/436", "user": "low205", "labels": ["bug"], "created": "2017-02-17 10:43:41", "closed": "2017-02-19 05:25:04", "commits": {"99dc5c0c09032a12dc38e9a182a01f9d3763a184": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "99dc5c0c09032a12dc38e9a182a01f9d3763a184", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["ed9568a58ff134cd8a5efa6b6031106ad752c078"], "nameRev": "99dc5c0c09032a12dc38e9a182a01f9d3763a184 tags/1.2.0~1", "commitMessage": "Resolve #436 Close connection/statement if exception occurs during prepare/execution\n", "commitDateTime": "2017-02-18 21:24:25", "authoredDateTime": "2017-02-18 21:24:25", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/InsertReturningOperation.java", "insertions": 4, "deletions": 5, "lines": 9}, {"filePath": "requery/src/main/java/io/requery/sql/RawEntityQuery.java", "insertions": 5, "deletions": 4, "lines": 9}, {"filePath": "requery/src/main/java/io/requery/sql/RawTupleQuery.java", "insertions": 5, "deletions": 4, "lines": 9}, {"filePath": "requery/src/main/java/io/requery/sql/SelectResult.java", "insertions": 7, "deletions": 38, "lines": 45}, {"filePath": "requery/src/main/java/io/requery/sql/StatementExecutionException.java", "insertions": 47, "deletions": 1, "lines": 48}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InsertReturningOperation.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.InsertReturningOperation.evaluate(io.requery.query.element.QueryElement)", "TOT": 5, "UPD": 1, "INS": 2, "MOV": 0, "DEL": 2}]}, {"spoonFilePath": "RawEntityQuery.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.RawEntityQuery.get()", "TOT": 13, "UPD": 1, "INS": 3, "MOV": 7, "DEL": 2}]}, {"spoonFilePath": "RawTupleQuery.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.RawTupleQuery.get()", "TOT": 8, "UPD": 1, "INS": 3, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "SelectResult.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SelectResult.iterator(int,int)", "TOT": 9, "UPD": 1, "INS": 4, "MOV": 1, "DEL": 3}, {"spoonMethodName": "io.requery.sql.SelectResult", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 4}, {"spoonMethodName": "io.requery.sql.SelectResult.createStatement(boolean)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.requery.sql.SelectResult.close()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "StatementExecutionException.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.StatementExecutionException", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.StatementExecutionException.closing(java.sql.Statement,java.lang.Throwable,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.StatementExecutionException.closeSuppressed(java.lang.AutoCloseable)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["99dc5c0c09032a12dc38e9a182a01f9d3763a184"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 68, "deletions": 52, "lines": 120, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 46, "UPD": 4, "INS": 16, "MOV": 10, "DEL": 16, "spoonFilesChanged": 5, "spoonMethodsChanged": 10}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.SelectResult", "io.requery.sql.StatementExecutionException.closing(java.sql.Statement,java.lang.Throwable,java.lang.String)", "io.requery.sql.StatementExecutionException.closeSuppressed(java.lang.AutoCloseable)", "io.requery.sql.RawEntityQuery.get()", "io.requery.sql.RawTupleQuery.get()", "io.requery.sql.StatementExecutionException", "io.requery.sql.InsertReturningOperation.evaluate(io.requery.query.element.QueryElement)", "io.requery.sql.SelectResult.iterator(int,int)", "io.requery.sql.SelectResult.close()", "io.requery.sql.SelectResult.createStatement(boolean)"]}, {"title": "How to use functions?", "body": "    val q = select(IJobOffer::class) where\r\n                (IJobOffer::createdAt gt Now.now(OffsetDateTime::class.java))\r\n    return q.get()\r\n\r\njava.lang.ClassCastException: io.requery.query.function.Now cannot be cast to org.threeten.bp.OffsetDateTime\r\n\r\nIt's not a working piece of code, point is the Function is not executed. No Function is executed. How do I make it work?", "url": "https://github.com/requery/requery/issues/433", "user": "consp1racy", "labels": ["bug"], "created": "2017-02-11 12:26:19", "closed": "2017-02-11 21:23:04", "commits": {"6d8ef59bdd50a1236ad18776e7400cfdd7269c24": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "6d8ef59bdd50a1236ad18776e7400cfdd7269c24", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["1e06752d28900947d5052621b2d9da09e4a184a3"], "nameRev": "6d8ef59bdd50a1236ad18776e7400cfdd7269c24 tags/1.2.0~5", "commitMessage": "Resolve #433 Fix ClassCastException from Expression with function argument\n", "commitDateTime": "2017-02-11 13:23:03", "authoredDateTime": "2017-02-11 13:23:03", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/gen/DefaultOutput.java", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultOutput.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.gen.DefaultOutput.appendConditionValue(io.requery.query.Expression,java.lang.Object,boolean)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6d8ef59bdd50a1236ad18776e7400cfdd7269c24"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 0, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql/gen"], "changesInPackagesSPOON": ["io.requery.sql.gen.DefaultOutput.appendConditionValue(io.requery.query.Expression,java.lang.Object,boolean)"]}, {"title": "Adding a foreign key column on non-SQLite platform may fail", "body": "Requery 1.1.2\r\n\r\nio.requery.sql.SchemaModifier:205\r\n\r\n    public <T> void addColumn(Attribute<T, ?> attribute) {\r\n        Type<T> type = attribute.getDeclaringType();\r\n        QueryBuilder qb = createQueryBuilder();\r\n        qb.keyword(ALTER, TABLE).tableName(type.getName());\r\n        if (attribute.isForeignKey()) {\r\n            if (platform.supportsAddingConstraint()) {\r\n                // create the column first then the constraint\r\n                qb.keyword(ADD, COLUMN);\r\n                createColumn(qb, attribute); // <============== We prepare a column creating statement.\r\n                executeSql(qb); // <=========================== We create a column.\r\n                qb = createQueryBuilder();\r\n                qb.keyword(ALTER, TABLE)\r\n                    .tableName(type.getName()).keyword(ADD);\r\n                createForeignKeyColumn(qb, attribute, true); // We prepare a statement that\r\n                                                                creates a column with a foreign key contraint.\r\n            } else {\r\n                qb = createQueryBuilder();\r\n                qb.keyword(ALTER, TABLE)\r\n                    .tableName(type.getName()).keyword(ADD);\r\n                createForeignKeyColumn(qb, attribute, false);\r\n            }\r\n        } else {\r\n            qb.keyword(ADD, COLUMN);\r\n            createColumn(qb, attribute);\r\n        }\r\n        executeSql(qb); // We create a column with a for-\r\n                        // Nope, column with such name already exists, cannot create, crash!\r\n    }\r\n\r\nI'd expect something like `createForeignKeyReferenceOnColumn` instead of `createForeignKeyColumn`.\r\n\r\nI haven't tested what actually happens if you try executing this code so please correct me if creating a column that already exists is OK.\r\n", "url": "https://github.com/requery/requery/issues/429", "user": "consp1racy", "labels": ["bug"], "created": "2017-02-10 15:17:46", "closed": "2017-02-10 17:16:04", "commits": {"1e06752d28900947d5052621b2d9da09e4a184a3": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "1e06752d28900947d5052621b2d9da09e4a184a3", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["178be8b8eee2a2df3e881aed66cc92844eec1316"], "nameRev": "1e06752d28900947d5052621b2d9da09e4a184a3 tags/1.2.0~6", "commitMessage": "Resolve #429 Improved compatibility of generated addColumn statements\n", "commitDateTime": "2017-02-10 09:16:10", "authoredDateTime": "2017-02-10 09:16:10", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/SchemaModifier.java", "insertions": 5, "deletions": 5, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SchemaModifier.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SchemaModifier.createForeignKeyColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute,boolean)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.sql.SchemaModifier.createForeignKeyColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute,boolean,boolean)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.tableCreateStatement(io.requery.meta.Type,io.requery.sql.TableCreationMode)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.SchemaModifier.addColumn(io.requery.meta.Attribute)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1e06752d28900947d5052621b2d9da09e4a184a3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 5, "lines": 10, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 8, "UPD": 0, "INS": 6, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.SchemaModifier.addColumn(io.requery.meta.Attribute)", "io.requery.sql.SchemaModifier.createForeignKeyColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute,boolean)", "io.requery.sql.SchemaModifier.tableCreateStatement(io.requery.meta.Type,io.requery.sql.TableCreationMode)", "io.requery.sql.SchemaModifier.createForeignKeyColumn(io.requery.sql.QueryBuilder,io.requery.meta.Attribute,boolean,boolean)"]}, {"title": "UNIQUE constraint not placed on table uniqueIndexes", "body": "64c3e74 added support for multi-column unique indexes. The indexes do get created, but do not have the UNIQUE constraint applied to them.", "url": "https://github.com/requery/requery/issues/425", "user": "MikeNicholls", "labels": ["bug"], "created": "2017-02-09 07:01:41", "closed": "2017-02-09 07:38:58", "commits": {"27aa95bcd4b1d6a5435320b06baba4c8c9146b0d": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "27aa95bcd4b1d6a5435320b06baba4c8c9146b0d", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["3942c905aa06f401b89ad96e8d3e677a3be140bc"], "nameRev": "27aa95bcd4b1d6a5435320b06baba4c8c9146b0d tags/1.2.0~8", "commitMessage": "Resolve #425 Unique constraint from Table uniqueIndexes not applied (#426)\n\n", "commitDateTime": "2017-02-08 23:38:57", "authoredDateTime": "2017-02-09 20:38:57", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/meta/ImmutableType.java", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ImmutableType.java", "spoonMethods": [{"spoonMethodName": "io.requery.meta.ImmutableType", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Transaction auto-commit's when using Transaction.Mode.NONE ", "body": "The ConnectionTransaction commit() code automatically sets the connection AutoCommit to true (in the finally block), instead of checking whether 'supportsTransaction' is true (which it does correctly in the begin() function). \r\n\r\nThe effect of this bug is that transactions will be committed immediately upon the first operation.\r\nFor example,\r\n        databaseTransaction(database) {\r\n            transactionStorage.addTransaction(txn)\r\n            requerySession.withTransaction {\r\n                insert(createVaultStateEntity(txn))   // AUTO-COMMIT FORCE COMMIT HERE!!!\r\n            }\r\n            rollback()  // ROLLBACK IGNORED (as transactions already committed)\r\n        }", "url": "https://github.com/requery/requery/issues/423", "user": "josecoll", "labels": ["bug"], "created": "2017-02-08 14:59:01", "closed": "2017-02-08 17:02:10", "commits": {"90b96fbacbac7391fc669b5f148632fb764d40a4": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "90b96fbacbac7391fc669b5f148632fb764d40a4", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["b417f8cdbbc893b0ae82a98bdad6131791d0dfdd"], "nameRev": "90b96fbacbac7391fc669b5f148632fb764d40a4 tags/1.2.0~10", "commitMessage": "Resolve #423 Fix connection autoCommit value changed when using TransactionMode.NONE\n", "commitDateTime": "2017-02-08 09:00:21", "authoredDateTime": "2017-02-08 09:00:21", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/ConnectionTransaction.java", "insertions": 16, "deletions": 13, "lines": 29}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ConnectionTransaction.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.ConnectionTransaction.rollback()", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.sql.ConnectionTransaction.resetConnection()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.ConnectionTransaction.commit()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["90b96fbacbac7391fc669b5f148632fb764d40a4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 16, "deletions": 13, "lines": 29, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 1, "INS": 2, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.ConnectionTransaction.rollback()", "io.requery.sql.ConnectionTransaction.resetConnection()", "io.requery.sql.ConnectionTransaction.commit()"]}, {"title": "Null pointer when using JunctionTable definition", "body": "Hi,\r\n\r\nI get a null pointer exception (see below) when upserting an entity with a junction table.\r\n\r\n```Java\r\n@Entity\r\npublic abstract class AbstractPerson implements Parcelable, Persistable {\r\n\r\n  @Key\r\n  int id;\r\n\r\n  @ManyToMany\r\n  @JunctionTable(type = AbstractPersonPicture.class)\r\n  List<AbstractPersonPicture> pictures;\r\n}\r\n```\r\n\r\n```Java\r\n@Entity\r\npublic abstract class AbstractPicture implements Persistable {\r\n  @Key\r\n  int id;\r\n  String url;\r\n}\r\n```\r\n\r\n```Java\r\n```\r\n\r\n```Java\r\n@Entity\r\npublic abstract class AbstractPersonPicture implements Persistable {\r\n\r\n  @Column(name = \"referenced_user\")\r\n  @ForeignKey(\r\n      delete = ReferentialAction.CASCADE,\r\n      update = ReferentialAction.CASCADE,\r\n      references = AbstractPicture.class)\r\n  @Key\r\n  int pictureId;\r\n\r\n  @ForeignKey(\r\n      delete = ReferentialAction.CASCADE,\r\n      update = ReferentialAction.CASCADE,\r\n      references = AbstractPerson.class)\r\n  @Key\r\n  int personId;\r\n\r\n  String additionalField = \"additionalField\";\r\n}\r\n```\r\n\r\n```Java\r\n      Person person = new Person();\r\n      person.setId(1);\r\n      Picture picture = new Picture();\r\n      picture.setId(1);\r\n      person.getPictures().add(picture);\r\n      database.upsert(person).blockingGet();\r\n```\r\n\r\nWhere `database` is a ReactiveEntityStore.\r\n\r\n```Java\r\njava.lang.NullPointerException: Attempt to invoke virtual method 'boolean java.lang.Class.isInterface()' on a null object reference\r\n    at java.lang.Class.isAssignableFrom(Class.java:545)\r\n    at io.requery.sql.EntityWriter.updateAssociation(EntityWriter.java:679)\r\n    at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:625)\r\n    at io.requery.sql.EntityWriter.insert(EntityWriter.java:441)\r\n    at io.requery.sql.EntityWriter.upsert(EntityWriter.java:483)\r\n    at io.requery.sql.EntityDataStore.upsert(EntityDataStore.java:280)\r\n    at io.requery.reactivex.WrappedEntityStore$8.call(WrappedEntityStore.java:138)\r\n    at io.reactivex.internal.operators.single.SingleFromCallable.subscribeActual(SingleFromCallable.java:35)\r\n    at io.reactivex.Single.subscribe(Single.java:2517)\r\n    at io.reactivex.Single.blockingGet(Single.java:2001)\r\n```\r\n\r\nI also tried settig `type` to `PersonPicture.class` instead of  `AbstractPersonPicture.class` but this resulted in the compile error \r\n```Java\r\nError:Execution failed for task ':app:compileDebugJavaWithJavac'.\r\n> java.lang.IllegalArgumentException: part '<any?>' is keyword\r\n```", "url": "https://github.com/requery/requery/issues/422", "user": "Agraphie", "labels": ["bug"], "created": "2017-02-08 13:34:52", "closed": "2017-02-09 06:55:24", "commits": {"3942c905aa06f401b89ad96e8d3e677a3be140bc": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "3942c905aa06f401b89ad96e8d3e677a3be140bc", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["90b96fbacbac7391fc669b5f148632fb764d40a4"], "nameRev": "3942c905aa06f401b89ad96e8d3e677a3be140bc tags/1.2.0~9", "commitMessage": "Resolve #422 Fix NPE from non-associative attribute in join table\n", "commitDateTime": "2017-02-08 22:55:20", "authoredDateTime": "2017-02-08 22:55:20", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 9, "deletions": 6, "lines": 15}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.updateAssociation(io.requery.sql.EntityWriter$Cascade,java.lang.Object,io.requery.proxy.EntityProxy,io.requery.meta.Attribute)", "TOT": 15, "UPD": 2, "INS": 5, "MOV": 6, "DEL": 2}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3942c905aa06f401b89ad96e8d3e677a3be140bc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 6, "lines": 15, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 15, "UPD": 2, "INS": 5, "MOV": 6, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.updateAssociation(io.requery.sql.EntityWriter$Cascade,java.lang.Object,io.requery.proxy.EntityProxy,io.requery.meta.Attribute)"]}, {"title": "SQL syntax error when ordering by a function expression", "body": "```java\r\n    @Test\r\n    public void testQueryOrderByFunction() {\r\n        Person person = randomPerson();\r\n        person.setName(\"BOBB\");\r\n        data.insert(person);\r\n        person = randomPerson();\r\n        person.setName(\"BobA\");\r\n        data.insert(person);\r\n        person = randomPerson();\r\n        person.setName(\"bobC\");\r\n        data.insert(person);\r\n        Result<Tuple> result = data.select\r\n                (Person.NAME)\r\n                .orderBy(Upper.upper(Person.NAME).desc())\r\n                .get();\r\n        List<Tuple> list = result.toList();\r\n        assertTrue(list.get(0).get(0).equals(\"bobC\"));\r\n        assertTrue(list.get(1).get(0).equals(\"BOBB\"));\r\n        assertTrue(list.get(2).get(0).equals(\"BobA\"));\r\n    }\r\n```\r\nThe orderBy() works correctly if .asc()/.desc() is left off of the end of the function.", "url": "https://github.com/requery/requery/issues/414", "user": "MikeNicholls", "labels": ["bug"], "created": "2017-01-30 04:48:35", "closed": "2017-01-30 07:17:31", "commits": {"f0febf5b664d48127ffa2fa5896a1d5157fd979f": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f0febf5b664d48127ffa2fa5896a1d5157fd979f", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["061e4b28776018673fa61ca6db20bcba8a05261c"], "nameRev": "f0febf5b664d48127ffa2fa5896a1d5157fd979f tags/1.1.2~1", "commitMessage": "Resolve #414 Fix incorrect sql generated when using a function in a order by clause\n", "commitDateTime": "2017-01-29 23:17:41", "authoredDateTime": "2017-01-29 23:17:41", "commitGitStats": [{"filePath": "requery-test/src/main/java/io/requery/test/FunctionalTest.java", "insertions": 19, "deletions": 0, "lines": 19}, {"filePath": "requery/src/main/java/io/requery/sql/gen/OrderByGenerator.java", "insertions": 4, "deletions": 2, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FunctionalTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.FunctionalTest.testQueryOrderByFunction()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OrderByGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.gen.OrderByGenerator.write(io.requery.sql.gen.Output,io.requery.query.element.OrderByElement)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f0febf5b664d48127ffa2fa5896a1d5157fd979f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 2, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql/gen"], "changesInPackagesSPOON": ["io.requery.sql.gen.OrderByGenerator.write(io.requery.sql.gen.Output,io.requery.query.element.OrderByElement)"]}, {"title": "Error reading date from view using requery and Kotlin", "body": "I'm getting an exception trying to read a date column from a view using requery and Kotlin. I'm not sure if this is a bug, or whether I'm doing something wrong.\r\n\r\nOther SQLite mechanisms I've used previously would  save the dates to a string format. This seems to store a Long n a Text column.\r\n\r\nAll the examples have been simplified,\r\n``` Kotlin\r\n  val result = data.raw(\"\"\"SELECT * FROM my_view WHERE id = ?\"\"\", id)\r\n  val tuple = result.firstOrNull()\r\n\tval ld: Long? = tuple[\"verified_on\"] // Error casting Int to Long\r\n\r\n\r\n@Entity\r\n@Table(name = \"my_table\")\r\ninterface MyTable : Parcelable, Persistable {\r\n    @get:Key\r\n    @get:Generated\r\n    val id: Int\r\n   @get:Column(name = \"verified_on\", nullable = false)\r\n    var verifiedOn: Date\r\n\r\n    @get:Column(name = \"synced_on\", nullable = true)\r\n    var syncedOn: Date?\r\n}\r\n```\r\n\r\n``` SQLite\r\n// Generated from MyTable\r\nCREATE TABLE my_table\r\n(\r\n    id INTEGER PRIMARY KEY NOT NULL,\r\n    synced_on TEXT,\r\n    verified_on TEXT,\r\n);\r\n// Written by hand\r\nCREATE VIEW IF NOT EXISTS my_view AS\r\n  SELECT\r\n\tid, verified_on\r\n  FROM my_table;\r\n```\r\nData look like this\r\n|id|synced_on|verified_on|\r\n|----|----|----|\r\n|1|<null>|1485489137089|\r\n|2|<null>|1485489146007|\r\n|3|<null>|1485489163036|\r\n|4|<null>|1485489246512|\r\n|5|<null>|1485489519243|\r\n|6|<null>|1485489600925|\r\n|7|<null>|1485489624563|\r\n\r\n\r\nAny help would be much appreciated.", "url": "https://github.com/requery/requery/issues/413", "user": "andre-artus", "labels": ["bug"], "created": "2017-01-27 13:27:33", "closed": "2017-01-30 06:39:52", "commits": {"0ab8d5139a975634b9682b9c4399037f7f5dd26b": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "0ab8d5139a975634b9682b9c4399037f7f5dd26b", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["cc443c3f61895e8688dc3f63b7044c0641163c4a"], "nameRev": "0ab8d5139a975634b9682b9c4399037f7f5dd26b tags/1.1.2~3", "commitMessage": "Resolve #413 Android default date type to iso8601 for compatibility with sqlite functions\n", "commitDateTime": "2017-01-29 22:40:01", "authoredDateTime": "2017-01-29 22:40:01", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlite/BasePreparedStatement.java", "insertions": 14, "deletions": 6, "lines": 20}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlite/CursorResultSet.java", "insertions": 12, "deletions": 2, "lines": 14}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BasePreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement.setDate(int,java.sql.Date,java.util.Calendar)", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 4, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "CursorResultSet.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.CursorResultSet.getDate(int)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0ab8d5139a975634b9682b9c4399037f7f5dd26b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 26, "deletions": 8, "lines": 34, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 11, "UPD": 0, "INS": 5, "MOV": 5, "DEL": 1, "spoonFilesChanged": 2, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android/sqlite"], "changesInPackagesSPOON": ["io.requery.android.sqlite.CursorResultSet.getDate(int)", "io.requery.android.sqlite.BasePreparedStatement.setDate(int,java.sql.Date,java.util.Calendar)", "io.requery.android.sqlite.BasePreparedStatement"]}, {"title": "@PreInsert @PreUpdate not called while upserting", "body": "When you upsert methods annotated by @PreInsert and/or @PreUpdate are not called. ", "url": "https://github.com/requery/requery/issues/412", "user": "low205", "labels": ["bug"], "created": "2017-01-27 12:51:05", "closed": "2017-01-30 06:56:31", "commits": {"061e4b28776018673fa61ca6db20bcba8a05261c": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "061e4b28776018673fa61ca6db20bcba8a05261c", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["0ab8d5139a975634b9682b9c4399037f7f5dd26b"], "nameRev": "061e4b28776018673fa61ca6db20bcba8a05261c tags/1.1.2~2", "commitMessage": "Resolve #412 Invoke update listener on upsert\n", "commitDateTime": "2017-01-29 22:56:41", "authoredDateTime": "2017-01-29 22:56:41", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.upsert(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["061e4b28776018673fa61ca6db20bcba8a05261c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 0, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.upsert(java.lang.Object,io.requery.proxy.EntityProxy)"]}, {"title": "delete(E entity) vs delete(Iterable<E> entities)", "body": "I should say thank you @npurushe for hard work on this library. Please look at this:\r\n```\r\n@Override\r\n    public <E extends T> Void delete(E entity) {\r\n        try (TransactionScope transaction = new TransactionScope(transactionProvider)) {\r\n            EntityProxy<E> proxy = context.proxyOf(entity, true);\r\n            synchronized (proxy.syncObject()) {\r\n                context.write(proxy.type().getClassType()).delete(entity, proxy);\r\n                transaction.commit();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public <E extends T> Void delete(Iterable<E> entities) {\r\n        Iterator<E> iterator = entities.iterator();\r\n        if (iterator.hasNext()) {\r\n            try (TransactionScope transaction = new TransactionScope(transactionProvider)) {\r\n                E entity = iterator.next();\r\n                EntityProxy<E> proxy = context.proxyOf(entity, false);\r\n                EntityWriter<E, T> writer = context.write(proxy.type().getClassType());\r\n                writer.delete(entities);\r\n                transaction.commit();\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n```\r\n\r\nI have noticed that in group deletion we do not notify updates for entity type so we do not trigger observableResult() update. Is there any reason behind this behaviour?\r\n\r\nI expected observableResult() be triggered on group deletion, am I missing something?", "url": "https://github.com/requery/requery/issues/406", "user": "imort", "labels": ["bug"], "created": "2017-01-24 12:37:14", "closed": "2017-01-26 07:39:12", "commits": {"cc443c3f61895e8688dc3f63b7044c0641163c4a": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "cc443c3f61895e8688dc3f63b7044c0641163c4a", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["fe53f08dc98ada69d71e12dd1a911ed8b5f3fd4c"], "nameRev": "cc443c3f61895e8688dc3f63b7044c0641163c4a tags/1.1.2~4", "commitMessage": "Resolve #406 Fix type change not triggered for multiple entity delete\n", "commitDateTime": "2017-01-25 23:39:09", "authoredDateTime": "2017-01-25 23:39:09", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityDataStore.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityDataStore.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityDataStore.delete(java.lang.Iterable)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.batchDelete(java.lang.Iterable)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cc443c3f61895e8688dc3f63b7044c0641163c4a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.batchDelete(java.lang.Iterable)", "io.requery.sql.EntityDataStore.delete(java.lang.Iterable)"]}, {"title": "OptimisticLockException when updating an entity with a @Version column", "body": "```java\r\n@Test\r\npublic void testVersionColumn() {\r\n    Group group = new Group();\r\n\r\n    group.setName(\"One\");\r\n    data.insert(group);\r\n\r\n    group.setName(\"Two\");\r\n    data.update(group);\r\n\r\n    group.setName(\"Three\");\r\n    data.update(group);\r\n}\r\n```\r\nAppears to have regressed between requery 1.1.0 and 1.1.1.  An exception is thrown on the last line when running with 1.1.1:\r\n```\r\nio.requery.sql.OptimisticLockException: Couldn't update (Groups [1, null, null, io.requery.query.ModifiableResult@3e27aa33, Three, io.requery.query.ModifiableResult@2e385cce, null, null, 3]) with version 3 entity may have been modified or deleted\r\n\r\n\tat io.requery.sql.EntityWriter.checkRowsAffected(EntityWriter.java:170)\r\n\tat io.requery.sql.EntityWriter.update(EntityWriter.java:508)\r\n\tat io.requery.sql.EntityDataStore.update(EntityDataStore.java:242)\r\n```\r\n", "url": "https://github.com/requery/requery/issues/399", "user": "MikeNicholls", "labels": ["bug"], "created": "2017-01-17 06:07:53", "closed": "2017-01-17 08:21:05", "commits": {"c708b90f7575aed192d23ad977861d08c6bc7635": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "c708b90f7575aed192d23ad977861d08c6bc7635", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["f51d39da036413206ae17d281e1691ae76845916"], "nameRev": "c708b90f7575aed192d23ad977861d08c6bc7635 tags/1.1.2~14", "commitMessage": "Resolve #399 Fix OptimisticLockException when updating an entity\n", "commitDateTime": "2017-01-17 00:21:30", "authoredDateTime": "2017-01-17 00:21:21", "commitGitStats": [{"filePath": "requery-test/src/main/java/io/requery/test/FunctionalTest.java", "insertions": 17, "deletions": 1, "lines": 18}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FunctionalTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.FunctionalTest.testVersionUpdate()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).8.test(io.requery.meta.Attribute)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c708b90f7575aed192d23ad977861d08c6bc7635"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).8.test(io.requery.meta.Attribute)"]}, {"title": "Custom converters broken in 1.1.1 update", "body": "We were using custom converters to handle simple objects that don't fit well into the SQL relational tables model. For example, our API sends objects with a UNIX time and Set&lt;String&gt; which we need to persist to compare the times for caching purposes. So I created custom converters that stored the data as a JSON string. Using a separate table and relation for each string set seemed seriously overkill.\r\n\r\nNow in 1.1.1, we're seeing a hard compile-time error like the following because Requery sees the custom Objects when generating entities and assumes they need a missing relation to work correctly. I do not know any way to tell the library otherwise. That's what I thought the custom converter accomplished.\r\n\r\n> Error:(26, 17) error: Entity reference missing relationship annotation\r\n\r\nAny advice to resolve this situation with Requery or to handle this model better?", "url": "https://github.com/requery/requery/issues/396", "user": "colintheshots", "labels": ["bug"], "created": "2017-01-11 18:36:25", "closed": "2017-01-12 05:00:35", "commits": {"d97f26afe50a1d11fb1fa145f7a6002d8460f0b9": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "d97f26afe50a1d11fb1fa145f7a6002d8460f0b9", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["4e86b771b131ba4f8a6cc4416d8056ac254df05a"], "nameRev": "d97f26afe50a1d11fb1fa145f7a6002d8460f0b9 tags/1.1.2~17", "commitMessage": "Resolve #396 Ignore missing relational annotation on entity field with converter\n", "commitDateTime": "2017-01-11 21:00:29", "authoredDateTime": "2017-01-11 21:00:29", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGraphValidator.java", "insertions": 4, "deletions": 3, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGraphValidator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGraphValidator.validateEntity(io.requery.processor.EntityDescriptor)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d97f26afe50a1d11fb1fa145f7a6002d8460f0b9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 3, "lines": 7, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityGraphValidator.validateEntity(io.requery.processor.EntityDescriptor)"]}, {"title": "runInTransaction do not rollback on exception", "body": "Hello. JavaDoc on runInTransaction says \r\n\r\n> If the callable throws an exception the transaction will be rolled back.\r\n\r\nBut it don't. \r\n\r\nNext test is failing. \r\n\r\n```\r\n@Test\r\n    public void testTransaction() {\r\n        final DataSource dataSource = dataSource();\r\n        final EntityDataStore<Persistable> data = data(dataSource);\r\n\r\n        final Section section = new Section();\r\n        section.setName(\"name\");\r\n        section.setId(-500L);\r\n\r\n        try (Transaction transaction = data.toBlocking().transaction().begin(TransactionIsolation.SERIALIZABLE)) {\r\n            data.insert(section);\r\n            Assert.assertNotNull(data.select(Section.class).where(Section.ID.eq(-500L)).get().firstOrNull());//OK\r\n            throw new PersistenceException(\"some reason\");\r\n            //transaction.commit();\r\n        } catch (Exception e) {\r\n            Assert.assertNull(data.select(Section.class).where(Section.ID.eq(-500L)).get().firstOrNull());//OK\r\n            e.printStackTrace();\r\n        }\r\n\r\n        final Section section2 = new Section();\r\n        section2.setName(\"name\");\r\n        section2.setId(-500L);\r\n\r\n        try {\r\n            data.runInTransaction(() -> {\r\n                data.insert(section2);\r\n                Assert.assertNotNull(data.select(Section.class).where(Section.ID.eq(-500L)).get().firstOrNull());//OK\r\n                throw new PersistenceException(\"some other reason\");\r\n            }, TransactionIsolation.SERIALIZABLE);\r\n        } catch (Exception ignored) {\r\n            ignored.printStackTrace();\r\n            Assert.assertNull(data.select(Section.class).where(Section.ID.eq(-500L)).get().firstOrNull()); //FAILED!!\r\n        }\r\n    }\r\n```", "url": "https://github.com/requery/requery/issues/395", "user": "low205", "labels": ["bug"], "created": "2017-01-11 10:43:07", "closed": "2017-01-12 05:24:25", "commits": {"97c0f446afadfbffa2478c8e1745dc4f882ffea0": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "97c0f446afadfbffa2478c8e1745dc4f882ffea0", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["d97f26afe50a1d11fb1fa145f7a6002d8460f0b9"], "nameRev": "97c0f446afadfbffa2478c8e1745dc4f882ffea0 tags/1.1.2~16", "commitMessage": "Resolve #395 Fix runInTransaction rollback behavior\n", "commitDateTime": "2017-01-11 21:24:18", "authoredDateTime": "2017-01-11 21:24:18", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "requery-test/src/main/java/io/requery/test/FunctionalTest.java", "insertions": 22, "deletions": 0, "lines": 22}, {"filePath": "requery/src/main/java/io/requery/sql/EntityDataStore.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FunctionalTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.FunctionalTest.testDeleteManyToMany()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.FunctionalTest.testDeleteManyToMany().4", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.FunctionalTest.testQuerySelectCount().5", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.FunctionalTest.testQueryConsume().6", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.FunctionalTest.testQuerySelectCount().5.accept(java.lang.Integer)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.FunctionalTest.testInsertWithTransactionCallableRollback()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityDataStore.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityDataStore.runInTransaction(java.util.concurrent.Callable,io.requery.TransactionIsolation)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["97c0f446afadfbffa2478c8e1745dc4f882ffea0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 3, "lines": 9, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt", "requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityDataStore.runInTransaction(java.util.concurrent.Callable,io.requery.TransactionIsolation)"]}, {"title": "For oracle raw query sql for next sequence value return Boolean", "body": "When you execute\r\ndata.raw(\"select SEQ_ID.nextval from dual\").first().get(0);\r\nYou get boolean. \r\n\r\nCan we specify return type?", "url": "https://github.com/requery/requery/issues/394", "user": "low205", "labels": ["bug"], "created": "2017-01-10 11:56:30", "closed": "2017-01-11 08:32:08", "commits": {"99c47db7ba3af918651426ae5301559b277edcaf": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "99c47db7ba3af918651426ae5301559b277edcaf", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["7ab1da87fbe38ac5575074cbeb2a0f97a9bd33f4"], "nameRev": "99c47db7ba3af918651426ae5301559b277edcaf tags/1.1.1~1", "commitMessage": "Resolve #394 Oracle treat numeric as integer type in raw query result\n", "commitDateTime": "2017-01-11 00:32:05", "authoredDateTime": "2017-01-11 00:32:05", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/RawTupleQuery.java", "insertions": 4, "deletions": 0, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RawTupleQuery.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.RawTupleQuery.TupleResult.iterator(int,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["99c47db7ba3af918651426ae5301559b277edcaf"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 0, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.RawTupleQuery.TupleResult.iterator(int,int)"]}, {"title": "Stackoverflow error after latest commit", "body": "After the latest commit that solved issue #366, I am getting stackoverflow error, at the same place when I was getting the UNIQUE constraint failed error. I had posted the stack trace on that issue only, but that issue has been closed, so posting this in a different issue.\r\n\r\n```\r\nCaused by: java.lang.StackOverflowError: stack size 1036KB\r\n\r\nat android.database.sqlite.SQLiteConnectionPool.finishAcquireConnectionLocked(SQLiteConnectionPool.java:911) ~[na:0.0]\r\nat android.database.sqlite.SQLiteConnectionPool.tryAcquirePrimaryConnectionLocked(SQLiteConnectionPool.java:847) ~[na:0.0]\r\nat android.database.sqlite.SQLiteConnectionPool.waitForConnection(SQLiteConnectionPool.java:613) ~[na:0.0]\r\nat android.database.sqlite.SQLiteConnectionPool.acquireConnection(SQLiteConnectionPool.java:348) ~[na:0.0]\r\nat android.database.sqlite.SQLiteSession.acquireConnection(SQLiteSession.java:894) ~[na:0.0]\r\nat android.database.sqlite.SQLiteSession.prepare(SQLiteSession.java:586) ~[na:0.0]\r\nat android.database.sqlite.SQLiteProgram.<init>(SQLiteProgram.java:58) ~[na:0.0]\r\nat android.database.sqlite.SQLiteStatement.<init>(SQLiteStatement.java:31) ~[na:0.0]\r\nat android.database.sqlite.SQLiteDatabase.compileStatement(SQLiteDatabase.java:994) ~[na:0.0]\r\nat io.requery.android.sqlite.SqlitePreparedStatement.<init>(SqlitePreparedStatement.java:38) ~[na:0.0]\r\nat io.requery.android.sqlite.SqliteConnection.prepareStatement(SqliteConnection.java:127) ~[na:0.0]\r\nat io.requery.android.sqlite.BaseConnection.prepareStatement(BaseConnection.java:160) ~[na:0.0]\r\nat io.requery.sql.EntityReader.refresh(EntityReader.java:220) ~[na:0.0]\r\nat io.requery.sql.EntityReader.refresh(EntityReader.java:182) ~[na:0.0]\r\nat io.requery.sql.EntityReader.load(EntityReader.java:152) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.loadProperty(EntityProxy.java:61) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.get(EntityProxy.java:75) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.get(EntityProxy.java:70) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.getKey(EntityProxy.java:262) ~[na:0.0]\r\nat io.requery.sql.EntityReader.refresh(EntityReader.java:223) ~[na:0.0]\r\nat io.requery.sql.EntityReader.refresh(EntityReader.java:182) ~[na:0.0]\r\nat io.requery.sql.EntityReader.load(EntityReader.java:152) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.loadProperty(EntityProxy.java:61) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.get(EntityProxy.java:75) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.get(EntityProxy.java:70) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.getKey(EntityProxy.java:262) ~[na:0.0]\r\nat io.requery.sql.EntityReader.refresh(EntityReader.java:223) ~[na:0.0]\r\nat io.requery.sql.EntityReader.refresh(EntityReader.java:182) ~[na:0.0]\r\nat io.requery.sql.EntityReader.load(EntityReader.java:152) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.loadProperty(EntityProxy.java:61) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.get(EntityProxy.java:75) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.get(EntityProxy.java:70) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.getKey(EntityProxy.java:262) ~[na:0.0]\r\nat io.requery.sql.EntityReader.refresh(EntityReader.java:223) ~[na:0.0]\r\nat io.requery.sql.EntityReader.refresh(EntityReader.java:182) ~[na:0.0]\r\nat io.requery.sql.EntityReader.load(EntityReader.java:152) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.loadProperty(EntityProxy.java:61) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.get(EntityProxy.java:75) ~[na:0.0]\r\nat io.requery.proxy.EntityProxy.get(Ent\r\nI/art: Background sticky concurrent mark sweep GC freed 34065(2MB) AllocSpace objects, 0(0B) LOS objects, 0% free, 37MB/37MB, paused 14.396ms total 37.719ms\r\nW/SQLiteConnectionPool: A SQLiteConnection object for database '/data/data/com.abc.example/databases/default' was leaked!  Please fix your application to end transactions in progress properly and to close the database when it is no longer needed.\r\n```", "url": "https://github.com/requery/requery/issues/393", "user": "guptakeshav", "labels": ["bug"], "created": "2017-01-10 05:37:23", "closed": "2017-01-10 07:54:19", "commits": {"be3dfde6f6188547eb77da2f34384094930e363e": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "be3dfde6f6188547eb77da2f34384094930e363e", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["d30ebe8bebffa76f59921883aab27300f47b0916"], "nameRev": "be3dfde6f6188547eb77da2f34384094930e363e tags/1.1.1~6", "commitMessage": "Resolve #393 Don't fetch key attributes as they should already be loaded\n", "commitDateTime": "2017-01-09 23:54:16", "authoredDateTime": "2017-01-09 23:54:16", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/proxy/EntityProxy.java", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityProxy.java", "spoonMethods": [{"spoonMethodName": "io.requery.proxy.EntityProxy.getKey(io.requery.meta.Attribute)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["be3dfde6f6188547eb77da2f34384094930e363e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/proxy"], "changesInPackagesSPOON": ["io.requery.proxy.EntityProxy.getKey(io.requery.meta.Attribute)"]}, {"title": "Join not producing the expected SQL", "body": "I'm trying to get a simple join to work, but there is either a bug or I'm missing something:\r\n\r\n\r\n``` Kotlin\r\n// in Kotlin\r\n  val assets = data\r\n                .select(AssetEntity.BAR_CODE, AssetDescriptionEntity.DESCRIPTION)\r\n                .from(AssetEntity::class)\r\n                .join(AssetDescriptionEntity::class)\r\n                .on(AssetEntity.DESCRIPTION_ID.eq(AssetDescriptionEntity.ID))\r\n                .where(AssetEntity.ROOM_CODE.eq(barCode))\r\n                .get()\r\n                .toList()\r\n```\r\nproduces the following \r\n`select a.bar_code, b.description from assets a inner join descriptions b on a.descriptionId = ? where a.roomCode = ?`\r\nWhich returns no results, what I want is the following:\r\n\r\n```\r\nSELECT\r\n  a.bar_code,\r\n  b.description\r\nFROM assets a\r\n  INNER JOIN descriptions b ON a.descriptionId = b.id\r\nWHERE a.roomCode = ?\r\n```\r\n\r\nAlso, is there a way I can set up an entity so that I can write the foreign key but read the related entity?\r\nE.g.\r\n```\r\n\r\ninterface Bar {\r\n    var fooCode: String  // write to this\r\n    var foo: Foo // read from this\r\n}\r\n\r\ninterface Foo {\r\n    @get:Key\r\n    var code: String\r\n\r\n    @get:OneToMany(mappedBy = \"foo\")\r\n    val bars: MutableSet<Bar>\r\n}\r\n```", "url": "https://github.com/requery/requery/issues/392", "user": "andre-artus", "labels": ["bug"], "created": "2017-01-09 09:49:13", "closed": "2017-01-11 05:49:35", "commits": {"c3ebb16166c00784b906f2d0faefb1bff69ac738": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "c3ebb16166c00784b906f2d0faefb1bff69ac738", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["be3dfde6f6188547eb77da2f34384094930e363e"], "nameRev": "c3ebb16166c00784b906f2d0faefb1bff69ac738 tags/1.1.1~5", "commitMessage": "Resolve #392 Kotlin fix join query condition sql\n", "commitDateTime": "2017-01-10 21:47:49", "authoredDateTime": "2017-01-10 21:47:49", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/kotlin/PropertyExtensions.kt", "insertions": 9, "deletions": 1, "lines": 10}, {"filePath": "requery-test/kotlin-test/src/test/kotlin/io/requery/test/kt/FunctionalTest.kt", "insertions": 18, "deletions": 1, "lines": 19}, {"filePath": "requery/src/main/java/io/requery/sql/gen/DefaultOutput.java", "insertions": 4, "deletions": 1, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DefaultOutput.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.gen.DefaultOutput.appendConditionValue(io.requery.query.Expression,java.lang.Object,boolean)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c3ebb16166c00784b906f2d0faefb1bff69ac738"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 2, "lines": 15, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/kotlin/PropertyExtensions.kt", "requery/src/main/java/io/requery/sql/gen"], "changesInPackagesSPOON": ["io.requery.sql.gen.DefaultOutput.appendConditionValue(io.requery.query.Expression,java.lang.Object,boolean)"]}, {"title": "SQLiteException: near \"on\": syntax error", "body": "My version of requery is 1.1.0.\r\n\r\nI get the following error when Requery initializes `android.database.sqlite.SQLiteException: near \"on\": syntax error (code 1): , while compiling: create unique index on FeedSubscription (feedId)`.\r\n\r\nThe following statements are executed:\r\n```sql\r\ncreate table FeedSubscription (id integer primary key autoincrement not null, accentColor integer not null, description varchar(255), feedId varchar(255) unique, name varchar(255), photoUrl varchar(255), primaryColor integer not null, subscribed boolean not null)\r\ncreate unique index on FeedSubscription (feedId)\r\n```\r\n\r\nIf I manually provide a value for `Index#value` I get no error and the `CREATE INDEX` statement is valid:\r\n```sql\r\ncreate unique index feed_id on FeedSubscription (feedId)\r\n```\r\n\r\nThe default value `\"\"` for `Index#value` appears to be used which leads to a malformed sql statement. This differs from the Javadoc for `Index#value`.\r\n\r\n> If empty a generic name will be created for the index.\r\n\r\nFor reference, my model class:\r\n```java\r\n@Entity\r\npublic interface FeedSubscription extends Parcelable, Persistable {\r\n\r\n    @Key @Generated\r\n    int getId();\r\n\r\n    @Index\r\n    //@Index(\"feed_id\") \r\n    @Column(unique = true)\r\n    String getFeedId();\r\n\r\n    void setFeedId(String id);\r\n\r\n    String getName();\r\n\r\n    void setName(String name);\r\n\r\n    String getDescription();\r\n\r\n    void setDescription(String description);\r\n\r\n    String getPhotoUrl();\r\n\r\n    void setPhotoUrl(String photoUrl);\r\n\r\n    int getPrimaryColor();\r\n\r\n    void setPrimaryColor(int color);\r\n\r\n    int getAccentColor();\r\n\r\n    void setAccentColor(int color);\r\n\r\n    boolean isSubscribed();\r\n\r\n    void setSubscribed(boolean subscribed);\r\n\r\n}\r\n```", "url": "https://github.com/requery/requery/issues/387", "user": "Pear0", "labels": ["bug"], "created": "2016-12-29 04:37:06", "closed": "2016-12-29 07:00:30", "commits": {"b84a958e7f89a7b8ab891c1811eacdf3c94ecb8a": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "b84a958e7f89a7b8ab891c1811eacdf3c94ecb8a", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["4d0912b6405df98bee7d35d4af5df83107121c6e"], "nameRev": "b84a958e7f89a7b8ab891c1811eacdf3c94ecb8a tags/1.1.1~16", "commitMessage": "Resolve #387 Fix default empty index name\n", "commitDateTime": "2016-12-28 23:01:09", "authoredDateTime": "2016-12-28 23:01:09", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/SchemaModifier.java", "insertions": 4, "deletions": 5, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SchemaModifier.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SchemaModifier.createIndexes(java.sql.Connection,io.requery.sql.TableCreationMode,io.requery.meta.Type)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b84a958e7f89a7b8ab891c1811eacdf3c94ecb8a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 5, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.SchemaModifier.createIndexes(java.sql.Connection,io.requery.sql.TableCreationMode,io.requery.meta.Type)"]}, {"title": "StackOverflowError After update to 1.1.0 (from 1.0.2)", "body": "Hello,\r\nEverything was working fine in 1.0.2 version on my project, however after update to 1.1.0 I got StackOverflowError with stacktrace (truncated):\r\n```\r\n\r\njava.lang.StackOverflowError\r\n\tat io.requery.proxy.EntityProxy.stateListener(EntityProxy.java:323)\r\n\tat io.requery.proxy.EntityProxy.preUpdate(EntityProxy.java:328)\r\n\tat io.requery.sql.CompositeEntityListener.preUpdate(CompositeEntityListener.java:44)\r\n\tat io.requery.sql.EntityWriter.update(EntityWriter.java:523)\r\n\tat io.requery.sql.EntityWriter.upsert(EntityWriter.java:489)\r\n\tat io.requery.sql.EntityWriter.cascadeWrite(EntityWriter.java:902)\r\n\tat io.requery.sql.EntityWriter.updateMappedAssociation(EntityWriter.java:792)\r\n\tat io.requery.sql.EntityWriter.updateAssociation(EntityWriter.java:660)\r\n\tat io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:621)\r\n...\r\n\tat io.requery.sql.EntityWriter.update(EntityWriter.java:523)\r\n\tat io.requery.sql.EntityWriter.upsert(EntityWriter.java:489)\r\n\tat io.requery.sql.EntityWriter.cascadeWrite(EntityWriter.java:902)\r\n\tat io.requery.sql.EntityWriter.updateMappedAssociation(EntityWriter.java:792)\r\n\tat io.requery.sql.EntityWriter.updateAssociation(EntityWriter.java:660)\r\n\tat io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:621)\r\n...\r\n```\r\n\r\nI do have Entities with @OneToMany and @ManyToOne relation. (no example to share yet).\r\nIf you know what might be issue let me know of something changed that I wasn't aware of - maybe some configuration entry?\r\n\r\nI may create a test project in free time to reproduce it.\r\n", "url": "https://github.com/requery/requery/issues/386", "user": "magillus", "labels": ["bug"], "created": "2016-12-27 15:28:00", "closed": "2017-02-12 05:59:50", "commits": {}, "ttf": 46.000277777777775, "commitsDetails": []}, {"title": "KotlinEntityDataStore.withTransaction never commits, always rolls back during close", "body": "requery-kotlin-1.1.0-sources.jar!/io/requery/sql/KotlinEntityDataStore.kt:139\r\n\r\n    override fun <V> withTransaction(body: BlockingEntityStore<T>.() -> V): V {\r\n        try {\r\n            data.transaction().begin()\r\n            return body()\r\n        } finally {\r\n            data.transaction().close()\r\n        }\r\n    }\r\n", "url": "https://github.com/requery/requery/issues/382", "user": "consp1racy", "labels": ["bug"], "created": "2016-12-24 02:45:50", "closed": "2016-12-25 07:04:29", "commits": {"3022db9ffbe8fad2e92c133af1041d6e71c331da": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "3022db9ffbe8fad2e92c133af1041d6e71c331da", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["f86a63ec0d3af0aae943ac601da0dd6ced3258f2"], "nameRev": "3022db9ffbe8fad2e92c133af1041d6e71c331da tags/1.1.1~19", "commitMessage": "Resolve #382 Kotlin fix data store withTransaction\n", "commitDateTime": "2016-12-24 23:04:39", "authoredDateTime": "2016-12-24 23:04:39", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt", "insertions": 13, "deletions": 8, "lines": 21}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3022db9ffbe8fad2e92c133af1041d6e71c331da"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 8, "lines": 21, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt"]}, {"title": "toObservable not working after 1.1.0", "body": "Hi,\r\nI updated to 1.1.0, but after updating wherever I had defined toObservable and toSelfObservable, it showed these methods could not be referenced. I have defined my data variable as KotlinEntityDataStore. What changes are required to make them working again?", "url": "https://github.com/requery/requery/issues/376", "user": "guptakeshav", "labels": ["bug"], "created": "2016-12-20 07:34:19", "closed": "2016-12-21 06:51:29", "commits": {"f86a63ec0d3af0aae943ac601da0dd6ced3258f2": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f86a63ec0d3af0aae943ac601da0dd6ced3258f2", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["87a69ee3c9dae76b7840674b16e3eceb85d12e84"], "nameRev": "f86a63ec0d3af0aae943ac601da0dd6ced3258f2 tags/1.1.1~20", "commitMessage": "Resolve #376 Kotlin specific RxJava 1.0 and 2.0 support\n", "commitDateTime": "2016-12-20 22:51:31", "authoredDateTime": "2016-12-20 22:51:31", "commitGitStats": [{"filePath": "requery-kotlin/build.gradle", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "requery-kotlin/src/main/kotlin/io/requery/kotlin/QueryDelegate.kt", "insertions": 28, "deletions": 22, "lines": 50}, {"filePath": "requery-kotlin/src/main/kotlin/io/requery/kotlin/Queryable.kt", "insertions": 13, "deletions": 14, "lines": 27}, {"filePath": "requery-kotlin/src/main/kotlin/io/requery/reactivex/KotlinReactiveEntityStore.kt", "insertions": 89, "deletions": 0, "lines": 89}, {"filePath": "requery-kotlin/src/main/kotlin/io/requery/rx/KotlinRxEntityStore.kt", "insertions": 88, "deletions": 0, "lines": 88}, {"filePath": "requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "requery-test/kotlin-test/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "requery-test/kotlin-test/src/test/kotlin/io/requery/test/kt/FunctionalTest.kt", "insertions": 16, "deletions": 14, "lines": 30}, {"filePath": "requery-test/kotlin-test/src/test/kotlin/io/requery/test/kt/ReactiveTest.kt", "insertions": 135, "deletions": 0, "lines": 135}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f86a63ec0d3af0aae943ac601da0dd6ced3258f2"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 223, "deletions": 38, "lines": 261, "gitFilesChange": 7}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/reactivex/KotlinReactiveEntityStore.kt", "requery-kotlin/src/main/kotlin/io/requery/kotlin/QueryDelegate.kt", "requery-kotlin/src/main/kotlin/io/requery/sql/KotlinEntityDataStore.kt", "requery-kotlin", "requery-kotlin/src/main/kotlin/io/requery/kotlin/Queryable.kt", "requery-test/kotlin-test", "requery-kotlin/src/main/kotlin/io/requery/rx/KotlinRxEntityStore.kt"]}, {"title": "ClassCastException when fetching with collection stored with convertion by by custom converter", "body": "## Problem\r\n\r\nI have a converter like [it](https://github.com/requery/requery/blob/master/requery-test/src/main/java/io/requery/test/model/IntegerListConverter.java) and an entity definition like a below\r\n\r\n```\r\n@Entity\r\nabstract class AbstractEntity {\r\n    //...\r\n\r\n    @Converter(IntergerListConverter.class)\r\n    List<Integer> ints;\r\n\r\n    //...\r\n}\r\n```\r\n\r\nI query like a below\r\n\r\n```\r\nList<Integer> ints = new ArrayList<>();\r\nints.add(1);\r\nints.add(2);\r\nResult<Entity> reuslt = entityStore.select(Entity.class).where(ENTITY.INTS.eq(ints)).get();\r\n```\r\n\r\nClassCastException occurs\r\n\r\n```\r\njava.lang.ClassCastException: java.lang.Integer cannot be cast to java.util.List<Integer>;\r\n  at com.example.IntegerListConverter.convertToPersisted(IntegerListConverter.java:18)\r\n  at io.requery.sql.GenericMapping.write(GenericMapping.java:349)\r\n  at io.requery.sql.SelectResult.iterator(SelectResult.java:135)\r\n  at io.requery.query.BaseResult.iterator(BaseResult.java:124)\r\n  at io.requery.query.BaseResult.first(BaseResult.java:88)\r\n  at io.requery.sql.SelectCountOperation$1.evaluate(SelectCountOperation.java:42)\r\n  at io.requery.sql.SelectCountOperation$1.evaluate(SelectCountOperation.java:38)\r\n  at io.requery.query.BaseScalar.value(BaseScalar.java:49)\r\n```\r\n\r\n## Cause\r\n\r\nI located the source of this problem. https://github.com/requery/requery/blob/feb0bb6b1470086feaebccd83f6addb7606bd6df/requery/src/main/java/io/requery/sql/gen/DefaultOutput.java#L318p\r\n\r\nBut I don't have any idea to solve it. Can I fix it?\r\n\r\n", "url": "https://github.com/requery/requery/issues/373", "user": "sakuna63", "labels": ["bug"], "created": "2016-12-19 11:06:42", "closed": "2016-12-20 05:45:36", "commits": {"ef426d4f9f38d6db8eaa0896a14c3d79b486cdcc": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "ef426d4f9f38d6db8eaa0896a14c3d79b486cdcc", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["27fa5a781e6e71d22c02347897819bb47cc9c134"], "nameRev": "ef426d4f9f38d6db8eaa0896a14c3d79b486cdcc tags/1.1.1~22", "commitMessage": "Resolve #373 Fix using a collection attribute with converter in a query expression\n", "commitDateTime": "2016-12-19 21:45:30", "authoredDateTime": "2016-12-19 21:45:30", "commitGitStats": [{"filePath": "requery-test/src/main/java/io/requery/test/FunctionalTest.java", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "requery/src/main/java/io/requery/sql/gen/DefaultOutput.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FunctionalTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.FunctionalTest.testConverter()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultOutput.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.gen.DefaultOutput.appendOperation(io.requery.query.Condition,int)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ef426d4f9f38d6db8eaa0896a14c3d79b486cdcc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 1, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql/gen"], "changesInPackagesSPOON": ["io.requery.sql.gen.DefaultOutput.appendOperation(io.requery.query.Condition,int)"]}, {"title": "Error with Upsert on entity with Composite Key", "body": "Hi,\r\nI had created an entity with a composite key and I was using \"upsert\" to insert or update the data. But I received the exception \"android.database.sqlite.SQLiteConstraintException: UNIQUE constraint failed\", as instead of updating, it tried to insert the data when the data having the same key was found.\r\n<img width=\"838\" alt=\"screen shot 2016-12-15 at 9 26 07 pm\" src=\"https://cloud.githubusercontent.com/assets/8845010/21231609/e2fdb334-c30e-11e6-985a-a9bc0d2d9ed2.png\">\r\n\r\nPS: Using sqlite on Android.", "url": "https://github.com/requery/requery/issues/366", "user": "guptakeshav", "labels": ["bug"], "created": "2016-12-15 16:09:30", "closed": "2017-01-09 08:50:57", "commits": {"d30ebe8bebffa76f59921883aab27300f47b0916": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 24.00027777777778, "commitsDetails": [{"commitHash": "d30ebe8bebffa76f59921883aab27300f47b0916", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["1b4ce5ea64246ebcf375ef797e09ef98619d7968"], "nameRev": "d30ebe8bebffa76f59921883aab27300f47b0916 tags/1.1.1~7", "commitMessage": "Resolve #366 Handle entity associations used as primary keys\n", "commitDateTime": "2017-01-09 00:51:06", "authoredDateTime": "2017-01-09 00:51:06", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/cache/SerializableEntityCache.java", "insertions": 8, "deletions": 4, "lines": 12}, {"filePath": "requery/src/main/java/io/requery/proxy/EntityProxy.java", "insertions": 18, "deletions": 2, "lines": 20}, {"filePath": "requery/src/main/java/io/requery/sql/EntityReader.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 7, "deletions": 9, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SerializableEntityCache.java", "spoonMethods": [{"spoonMethodName": "io.requery.cache.SerializableEntityCache.getKeyClass(io.requery.meta.Type)", "TOT": 8, "UPD": 4, "INS": 2, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "EntityProxy.java", "spoonMethods": [{"spoonMethodName": "io.requery.proxy.EntityProxy.key()", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.proxy.EntityProxy.getKey(io.requery.meta.Attribute)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityReader.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityReader.refresh(java.lang.Object,io.requery.proxy.EntityProxy,java.util.Set)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.bindParameters(java.sql.PreparedStatement,java.lang.Object,io.requery.util.function.Predicate)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).9.bindParameters(java.sql.PreparedStatement)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d30ebe8bebffa76f59921883aab27300f47b0916"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 34, "deletions": 16, "lines": 50, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 17, "UPD": 7, "INS": 5, "MOV": 3, "DEL": 2, "spoonFilesChanged": 4, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery/src/main/java/io/requery/cache", "requery/src/main/java/io/requery/proxy"], "changesInPackagesSPOON": ["io.requery.proxy.EntityProxy.getKey(io.requery.meta.Attribute)", "io.requery.sql.EntityWriter.bindParameters(java.sql.PreparedStatement,java.lang.Object,io.requery.util.function.Predicate)", "io.requery.cache.SerializableEntityCache.getKeyClass(io.requery.meta.Type)", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).9.bindParameters(java.sql.PreparedStatement)", "io.requery.sql.EntityReader.refresh(java.lang.Object,io.requery.proxy.EntityProxy,java.util.Set)", "io.requery.proxy.EntityProxy.key()"]}, {"title": "Cannot bind argument at index 3 because the index is out of range.  The statement has 2 parameters.", "body": "Hi,\r\n\r\nI am trying to update a record to the database with RxJava in Android, and having trouble updating one field. It often throws java.lang.IllegalArgumentException and gives me the **same** message. There are always some updates on same instance between multiple threads (2 types of threads only which is Schedulers.io and Schedulers.computation).\r\n\r\nPotential buggy query:\r\n```\r\nI/requery: beforeExecuteUpdate sql: update Device set status = ? where address = ?\r\nI/requery: afterExecuteUpdate\r\n```\r\n\r\nThe function call:\r\n`dataStore.update(device).toObservable();`\r\n\r\n```\r\n@Entity\r\npublic interface Device extends Observable, Parcelable, Persistable {\r\n\r\n    @Key\r\n    @Index(value = \"address_index\")\r\n    @Column(unique = true)\r\n    @Bindable\r\n    String getAddress();\r\n\r\n    @Bindable\r\n    int getRssi();\r\n\r\n    @Bindable\r\n    String getName();\r\n\r\n    @Bindable\r\n    String getNickname();\r\n\r\n    @Bindable\r\n    String getItemInfo();\r\n\r\n    String getIcon();\r\n\r\n    @Bindable\r\n    int getDistance();\r\n\r\n    @Bindable\r\n    int getAlert();\r\n\r\n    @Column(value = \"CURRENT_TIMESTAMP\")\r\n    long getCreateTime();\r\n\r\n    @Bindable\r\n    boolean getConnected();\r\n\r\n    @Bindable\r\n    int getStatus();\r\n\r\n    @Bindable\r\n    int getBatteryLevel();\r\n}\r\n```\r\n\r\nFull trace:\r\n```\r\njava.lang.IllegalArgumentException: Cannot bind argument at index 3 because the index is out of range.  The statement has 2 parameters.\r\n                     at android.database.sqlite.SQLiteProgram.bind(SQLiteProgram.java:212)\r\n                     at android.database.sqlite.SQLiteProgram.bindString(SQLiteProgram.java:166)\r\n                     at io.requery.android.sqlite.SqlitePreparedStatement.bindNullOrString(SqlitePreparedStatement.java:50)\r\n                     at io.requery.android.sqlite.BasePreparedStatement.setString(BasePreparedStatement.java:356)\r\n                     at io.requery.android.sqlite.BasePreparedStatement.setObject(BasePreparedStatement.java:310)\r\n                     at io.requery.sql.BaseType.write(BaseType.java:63)\r\n                     at io.requery.sql.GenericMapping.write(GenericMapping.java:351)\r\n                     at io.requery.sql.EntityWriter$9.bindParameters(EntityWriter.java:554)\r\n                     at io.requery.sql.EntityUpdateOperation$1.evaluate(EntityUpdateOperation.java:52)\r\n                     at io.requery.sql.EntityUpdateOperation$1.evaluate(EntityUpdateOperation.java:40)\r\n                     at io.requery.query.BaseScalar.value(BaseScalar.java:49)\r\n                     at io.requery.sql.EntityWriter.update(EntityWriter.java:592)\r\n                     at io.requery.sql.EntityWriter.update(EntityWriter.java:513)\r\n                     at io.requery.sql.EntityDataStore.update(EntityDataStore.java:242)\r\n                     at io.requery.rx.SingleEntityStoreFromBlocking$5.call(SingleEntityStoreFromBlocking.java:123)\r\n                     at rx.internal.operators.SingleFromCallable.call(SingleFromCallable.java:41)\r\n                     at rx.internal.operators.SingleFromCallable.call(SingleFromCallable.java:29)\r\n                     at rx.Single.subscribe(Single.java:1835)\r\n                     at rx.Single$13$1.call(Single.java:1907)\r\n                     at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)\r\n                     at rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker.run(ExecutorScheduler.java:107)\r\n                     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1133)\r\n                     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:607)\r\n                     at java.lang.Thread.run(Thread.java:761)\r\n```", "url": "https://github.com/requery/requery/issues/365", "user": "jashhk", "labels": ["bug"], "created": "2016-12-15 14:13:16", "closed": "2016-12-30 07:33:06", "commits": {"9f0b95954a718fdcb3e6afe79b0c0cbd33571079": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 14.000277777777777, "commitsDetails": [{"commitHash": "9f0b95954a718fdcb3e6afe79b0c0cbd33571079", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["47171a2f04fb73933921c5377cf9bb5ccd38d142"], "nameRev": "9f0b95954a718fdcb3e6afe79b0c0cbd33571079 tags/1.1.1~14", "commitMessage": "Resolve #365 Create list of updateable properties once\n", "commitDateTime": "2016-12-29 23:33:48", "authoredDateTime": "2016-12-29 23:33:48", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 9, "deletions": 3, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).8.test(io.requery.meta.Attribute)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9f0b95954a718fdcb3e6afe79b0c0cbd33571079"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 3, "lines": 12, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate)", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,io.requery.sql.EntityWriter$Cascade,io.requery.util.function.Predicate,io.requery.util.function.Predicate).8.test(io.requery.meta.Attribute)"]}, {"title": "SqlCipherDatabaseSource delete doesn't delete @OneToMany table relations", "body": "Hello,\r\nI noticed that when using `SqlCipherDatabaseSource` and calling delete on entity that have relation to other entity by `@OneToMany` the related entities are not deleted.\r\nWhen using `DatabaseSource` it does delete the related entities.\r\n\r\nWhen I get a chance I will prepare sample project.", "url": "https://github.com/requery/requery/issues/364", "user": "magillus", "labels": ["bug"], "created": "2016-12-14 17:55:17", "closed": "2016-12-15 05:45:13", "commits": {"da466987ca3291bfd763a66a623581db0404a5d9": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "da466987ca3291bfd763a66a623581db0404a5d9", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["3246bb42061b4c49fe05d57f2063f40fc44981ee"], "nameRev": "da466987ca3291bfd763a66a623581db0404a5d9 tags/1.1.0~7", "commitMessage": "Resolve #364 Foreign keys not enabled in SqlCipher\n", "commitDateTime": "2016-12-14 21:45:04", "authoredDateTime": "2016-12-14 21:45:04", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlcipher/SqlCipherDatabaseSource.java", "insertions": 3, "deletions": 1, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SqlCipherDatabaseSource.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlcipher.SqlCipherDatabaseSource.onConfigure(net.sqlcipher.database.SQLiteDatabase)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["da466987ca3291bfd763a66a623581db0404a5d9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 1, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android/sqlcipher"], "changesInPackagesSPOON": ["io.requery.android.sqlcipher.SqlCipherDatabaseSource.onConfigure(net.sqlcipher.database.SQLiteDatabase)"]}, {"title": "java.lang.ClassNotFoundException: Didn't find class \"rx.subjects.SerializedSubject\"", "body": "```\r\nCaused by: java.lang.ClassNotFoundException: Didn't find class \"rx.subjects.SerializedSubject\" on path: DexPathList\r\n                                                                           at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:56)\r\n                                                                           at java.lang.ClassLoader.loadClass(ClassLoader.java:511)\r\n                                                                           at java.lang.ClassLoader.loadClass(ClassLoader.java:469)\r\n                                                                           at io.requery.rx.TypeChangeListener.<init>(TypeChangeListener.java:41)\u00a0\r\n                                                                           at io.requery.rx.RxSupport.<clinit>(RxSupport.java:43)\u00a0\r\n                                                                           at io.requery.reactivex.ReactiveSupport$2.test(ReactiveSupport.java:63)\u00a0\r\n                                                                           at io.requery.reactivex.ReactiveSupport$2.test(ReactiveSupport.java:59)\u00a0\r\n                                                                           at io.reactivex.internal.operators.observable.ObservableFilter$FilterObserver.onNext(ObservableFilter.java:45)\u00a0\r\n                                                                           at io.reactivex.subjects.PublishSubject$PublishDisposable.onNext(PublishSubject.java:263)\u00a0\r\n                                                                           at io.reactivex.subjects.PublishSubject.onNext(PublishSubject.java:182)\u00a0\r\n                                                                           at io.reactivex.subjects.SerializedSubject.onNext(SerializedSubject.java:104)\u00a0\r\n                                                                           at io.requery.reactivex.TransactionListenerSupplier$1.afterCommit(TransactionListenerSupplier.java:61)\u00a0\r\n                                                                           at io.requery.sql.CompositeTransactionListener.afterCommit(CompositeTransactionListener.java:63)\u00a0\r\n                                                                           at io.requery.sql.ConnectionTransaction.commit(ConnectionTransaction.java:144)\u00a0\r\n                                                                           at io.requery.sql.ThreadLocalTransaction.commit(ThreadLocalTransaction.java:76)\u00a0\r\n                                                                           at io.requery.reactivex.WrappedEntityStore$18.call(WrappedEntityStore.java:318)\u00a0\r\n                                                                           at io.reactivex.internal.operators.completable.CompletableFromCallable.subscribeActual(CompletableFromCallable.java:35)\u00a0\r\n                                                                           at io.reactivex.Completable.subscribe(Completable.java:1592)\u00a0\r\n                                                                           at io.reactivex.internal.operators.completable.CompletableToObservable.subscribeActual(CompletableToObservable.java:29)\u00a0\r\n                                                                           at io.reactivex.Observable.subscribe(Observable.java:10514)\u00a0\r\n                                                                           at io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.drain(ObservableConcatMap.java:467)\u00a0\r\n                                                                           at io.reactivex.internal.operators.observable.ObservableConcatMap$ConcatMapDelayErrorObserver.onSubscribe(ObservableConcatMap.java:325)\u00a0\r\n                                                                           at io.reactivex.internal.operators.observable.ObservableFromArray.subscribeActual(ObservableFromArray.java:29)\u00a0\r\n                                                                           at io.reactivex.Observable.subscribe(Observable.java:10514)\u00a0\r\n                                                                           at io.reactivex.internal.operators.observable.ObservableConcatMap.subscribeActual(ObservableConcatMap.java:54)\u00a0\r\n                                                                           at io.reactivex.Observable.subscribe(Observable.java:10514)\u00a0\r\n                                                                           at io.reactivex.internal.operators.completable.CompletableFromObservable.subscribeActual(CompletableFromObservable.java:29)\u00a0\r\n                                                                           at io.reactivex.Completable.subscribe(Completable.java:1592)\u00a0\r\n                                                                           at io.reactivex.internal.operators.completable.CompletableObserveOn.subscribeActual(CompletableObserveOn.java:34)\u00a0\r\n                                                                           at io.reactivex.Completable.subscribe(Completable.java:1592)\u00a0\r\n                                                                           at io.reactivex.Completable.subscribe(Completable.java:\r\n```\r\n\r\nThis is an incomplete stacktrace but I think it's sufficient enough. This happens while some data changes.\r\n\r\nBasically our project has switched to RxJava2 only, therefore there's no RxJava1 at runtime. \r\n\r\nThe RxJava2 version of RxSupport, namely `ReactiveSupport`, tries to access `RxSupport.referencesType()` in `toObservableResult`, which causes the `RxSupport` class to be initialised, which in turn creates a new `io.requery.rx.TypeChangeListener`instance. The TypeChangeListener will then create instances of RxJava1's SerializedSubject, which doesn't exist in this project.", "url": "https://github.com/requery/requery/issues/362", "user": "simophin", "labels": ["bug"], "created": "2016-12-14 04:04:21", "closed": "2016-12-15 07:15:56", "commits": {"3dd6bba89d2589d53a17ea47c4dfec449496d309": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "3dd6bba89d2589d53a17ea47c4dfec449496d309", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["9d97d4ec26284499e69d2a84a86ce1d8ff80d0a7"], "nameRev": "3dd6bba89d2589d53a17ea47c4dfec449496d309 tags/1.1.0~5", "commitMessage": "Resolve #362 Move referencesType() to a seperate class\n", "commitDateTime": "2016-12-14 23:15:53", "authoredDateTime": "2016-12-14 23:15:53", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/meta/Types.java", "insertions": 49, "deletions": 0, "lines": 49}, {"filePath": "requery/src/main/java/io/requery/reactivex/ReactiveSupport.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "requery/src/main/java/io/requery/rx/RxSupport.java", "insertions": 2, "deletions": 26, "lines": 28}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Types.java", "spoonMethods": [{"spoonMethodName": "io.requery.meta.Types", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ReactiveSupport.java", "spoonMethods": [{"spoonMethodName": "io.requery.reactivex.ReactiveSupport.toObservableResult(io.requery.reactivex.ReactiveResult).2.test(java.util.Set)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RxSupport.java", "spoonMethods": [{"spoonMethodName": "io.requery.rx.RxSupport.referencesType(java.util.Set,java.util.Set)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.rx.RxSupport.toResultObservable(io.requery.rx.RxResult).2.call(java.util.Set)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3dd6bba89d2589d53a17ea47c4dfec449496d309"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 53, "deletions": 28, "lines": 81, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 4, "UPD": 1, "INS": 2, "MOV": 0, "DEL": 1, "spoonFilesChanged": 3, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/rx", "requery/src/main/java/io/requery/meta", "requery/src/main/java/io/requery/reactivex"], "changesInPackagesSPOON": ["io.requery.reactivex.ReactiveSupport.toObservableResult(io.requery.reactivex.ReactiveResult).2.test(java.util.Set)", "io.requery.rx.RxSupport.toResultObservable(io.requery.rx.RxResult).2.call(java.util.Set)", "io.requery.rx.RxSupport.referencesType(java.util.Set,java.util.Set)", "io.requery.meta.Types"]}, {"title": "Insertion does not cascade through relationships", "body": "Hi,\r\n\r\nIn the first place, thanks for your library. I'm actually having trouble when inserting an entity with a `@OneToMany` relationship, the related entities are not inserted at the same time. To be more precise, the ObservableList is emptied after the insertion.\r\n\r\nBelow are the two interfaces which I know concerned : the class I try to persist is Show, the one not persisted is Slide.\r\n\r\n```java\r\n/**\r\n * Repr\u00e9sentation d'un show\r\n */\r\n@Entity\r\npublic interface Show extends Persistable {\r\n    /**\r\n     * Identifiant\r\n     */\r\n    @Key\r\n    int getId();\r\n\r\n    /**\r\n     * Titre\r\n     */\r\n    String getTitle();\r\n\r\n    /**\r\n     * Date de cr\u00e9ation\r\n     */\r\n    @Column(name = \"dateCreation\")\r\n    OffsetDateTime getDate();\r\n\r\n    /**\r\n     * Dur\u00e9e en seconde\r\n     */\r\n    int getDuration();\r\n\r\n    /**\r\n     * Etat de synchronisation\r\n     */\r\n    @Column(nullable = false)\r\n    @Convert(ShowSyncState.Converter.class)\r\n    ShowSyncState getState();\r\n\r\n    /**\r\n     * Setter pour l'\u00e9tat du show\r\n     *\r\n     * @param state l'\u00e9tat du show\r\n     */\r\n    void setState(ShowSyncState state);\r\n\r\n    /**\r\n     * Etape de t\u00e9l\u00e9chargement\r\n     */\r\n    @Column(nullable = false)\r\n    @Convert(ShowDownloadStep.Converter.class)\r\n    ShowDownloadStep getDownloadStep();\r\n\r\n    /**\r\n     * Setter pour l'\u00e9tape de t\u00e9l\u00e9chargement du sho\r\n     *\r\n     * @param downloadStep l'\u00e9tape de t\u00e9l\u00e9chargement du show\r\n     */\r\n    void setDownloadStep(ShowDownloadStep downloadStep);\r\n\r\n    /**\r\n     * Identifiant de l'auteur\r\n     */\r\n    int getIdAuthor();\r\n\r\n    /**\r\n     * Slides\r\n     */\r\n    @OneToMany(cascade = {CascadeAction.SAVE, CascadeAction.DELETE})\r\n    List<Slide> getSlides();\r\n}\r\n\r\n/**\r\n * Repr\u00e9sentation d'une slide dans un show\r\n *\r\n * @see Show\r\n */\r\n@Entity\r\npublic interface Slide extends Persistable {\r\n    /**\r\n     * Identifiant\r\n     */\r\n    @Key\r\n    int getId();\r\n\r\n    /**\r\n     * Show auquel appartient cette slide\r\n     */\r\n    @ManyToOne(cascade = {CascadeAction.SAVE, CascadeAction.DELETE})\r\n    Show getShow();\r\n\r\n    /**\r\n     * Modifier le show auquel appartient cette slide\r\n     *\r\n     * @param show Le nouveau show\r\n     */\r\n    void setShow(Show show);\r\n\r\n    /**\r\n     * Position technique de la slide dans le show, d\u00e9marre \u00e0 0\r\n     */\r\n    @Column(name = \"slide_index\")\r\n    int getIndex();\r\n\r\n    /**\r\n     * Titre\r\n     */\r\n    String getTitle();\r\n\r\n    /**\r\n     * Nom de la vignette\r\n     */\r\n    String getThumbName();\r\n}\r\n```", "url": "https://github.com/requery/requery/issues/355", "user": "flassont", "labels": ["bug"], "created": "2016-12-02 16:16:32", "closed": "2016-12-08 08:28:41", "commits": {"41103feaeda163cb6c3c45b86263ae2c6d1ccabb": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "41103feaeda163cb6c3c45b86263ae2c6d1ccabb", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["766118c337194a78e8676dc3498da9f15f702d00"], "nameRev": "41103feaeda163cb6c3c45b86263ae2c6d1ccabb tags/1.1.0~10", "commitMessage": "Resolve #355 One to many entity incorrectly updated instead of inserted\n", "commitDateTime": "2016-12-08 00:28:38", "authoredDateTime": "2016-12-08 00:28:38", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.batchDelete(java.lang.Iterable)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.sql.EntityWriter.hasKey(io.requery.proxy.EntityProxy)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["41103feaeda163cb6c3c45b86263ae2c6d1ccabb"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 3, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.batchDelete(java.lang.Iterable)", "io.requery.sql.EntityWriter.hasKey(io.requery.proxy.EntityProxy)"]}, {"title": "StackOverflowError in ManagedTransaction.begin()", "body": "Hi!\r\nI was setting up some transactions for tests and ran into\r\n\r\n```\r\njava.lang.StackOverflowError\r\n\tat io.requery.sql.ManagedTransaction.begin(ManagedTransaction.java:131)\r\n\tat io.requery.sql.ManagedTransaction.begin(ManagedTransaction.java:131)\r\n\tat io.requery.sql.ManagedTransaction.begin(ManagedTransaction.java:131)\r\n\tat io.requery.sql.ManagedTransaction.begin(ManagedTransaction.java:131)\r\n```\r\n\r\n```java\r\n    @Override\r\n    public Transaction begin(TransactionIsolation isolation) {\r\n        if (isolation != null) {\r\n            throw new TransactionException(\"isolation can't be specified in managed mode\");\r\n        } else {\r\n            return begin(null);\r\n        }\r\n    }\r\n```\r\n\r\nLooks like if I set `transactionIsolation` in configuration - it leads to exception and not setting `transactionIsolation` with `TransactionMode.MANAGED` leads to SO.\r\n\r\nPlease tell if you need some additional information.", "url": "https://github.com/requery/requery/issues/354", "user": "alex-shpak", "labels": ["bug"], "created": "2016-12-01 14:14:42", "closed": "2016-12-02 06:19:01", "commits": {"42c46bdea417df28745126b10a8a0bd8b3a14f11": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "42c46bdea417df28745126b10a8a0bd8b3a14f11", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["19133e9ea35825c6fbd63f7deec885889ccf4fd1"], "nameRev": "42c46bdea417df28745126b10a8a0bd8b3a14f11 tags/1.1.0~17", "commitMessage": "Resolve #354 Fix ManagedTransaction.begin() stackoverflow\n", "commitDateTime": "2016-12-01 22:22:54", "authoredDateTime": "2016-12-01 22:19:16", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/ManagedTransaction.java", "insertions": 1, "deletions": 2, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ManagedTransaction.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.ManagedTransaction.begin(io.requery.TransactionIsolation)", "TOT": 7, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 2}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["42c46bdea417df28745126b10a8a0bd8b3a14f11"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 2, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.ManagedTransaction.begin(io.requery.TransactionIsolation)"]}, {"title": "bindBlobLiteral on Android fails if there are more than one variable to substitute", "body": "When a query contains more than one binary field that is filled by `bindBlobLiteral` method (https://github.com/requery/requery/blob/master/requery-android/src/main/java/io/requery/android/sqlite/BasePreparedStatement.java#L97), the first field is filled correctly, but any subsequent call fails.\r\n\r\nThe issue is that the method searches for literal question marks in the statement, but then substitutes the `?` in the query for the binary blob.  However it does not keep track of how many question marks have been substituted. If a prepared statement initially had 2 `?`s, if one is substituted, the attempt to substitute the second one fails as there is only one `?` left.", "url": "https://github.com/requery/requery/issues/353", "user": "watercrossing", "labels": ["bug"], "created": "2016-12-01 10:48:46", "closed": "2016-12-06 07:43:02", "commits": {"eaa5f7c6f6c012abd41d78b724e1fe8a16217031": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "eaa5f7c6f6c012abd41d78b724e1fe8a16217031", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["af8e565b296bc674396eb96d3c8db17dfd643174"], "nameRev": "eaa5f7c6f6c012abd41d78b724e1fe8a16217031 tags/1.1.0~12", "commitMessage": "Resolve #353 Android fix multiple blob query arguments\n", "commitDateTime": "2016-12-05 23:47:20", "authoredDateTime": "2016-12-05 23:47:20", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlcipher/SqlCipherPreparedStatement.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlite/BasePreparedStatement.java", "insertions": 28, "deletions": 13, "lines": 41}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlite/SqlitePreparedStatement.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlitex/SqlitexPreparedStatement.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SqlCipherPreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlcipher.SqlCipherPreparedStatement.executeQuery()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "BasePreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement.bindBlobLiteral(int,byte[])", "TOT": 31, "UPD": 9, "INS": 1, "MOV": 15, "DEL": 6}, {"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement.byteToHexString(byte[])", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement.inlineBlobLiterals()", "TOT": 7, "UPD": 0, "INS": 7, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement.getSql()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SqlitePreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.SqlitePreparedStatement.executeQuery()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "SqlitexPreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlitex.SqlitexPreparedStatement.executeQuery()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["eaa5f7c6f6c012abd41d78b724e1fe8a16217031"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 31, "deletions": 16, "lines": 47, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 48, "UPD": 11, "INS": 13, "MOV": 15, "DEL": 9, "spoonFilesChanged": 4, "spoonMethodsChanged": 8}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android/sqlite", "requery-android/src/main/java/io/requery/android/sqlcipher", "requery-android/src/main/java/io/requery/android/sqlitex"], "changesInPackagesSPOON": ["io.requery.android.sqlitex.SqlitexPreparedStatement.executeQuery()", "io.requery.android.sqlite.BasePreparedStatement", "io.requery.android.sqlite.BasePreparedStatement.bindBlobLiteral(int,byte[])", "io.requery.android.sqlite.BasePreparedStatement.inlineBlobLiterals()", "io.requery.android.sqlite.SqlitePreparedStatement.executeQuery()", "io.requery.android.sqlcipher.SqlCipherPreparedStatement.executeQuery()", "io.requery.android.sqlite.BasePreparedStatement.byteToHexString(byte[])", "io.requery.android.sqlite.BasePreparedStatement.getSql()"]}, {"title": "String key", "body": "Hello! I have this models:\r\n\r\n@Entity\r\npublic interface RQCourse extends Persistable {\r\n\r\n    @Key // i can't integer id\r\n    String getEntityId();\r\n\r\n    String getName();\r\n\r\n    boolean getIsFree();\r\n\r\n    @OneToMany(mappedBy = \"course\", cascade = {CascadeAction.DELETE, CascadeAction.SAVE})\r\n    List<RQTopic> getTopics();\r\n}\r\n\r\nand\r\n\r\n\r\n@Entity\r\npublic interface RQTopic extends Persistable {\r\n\r\n    @Key  // i can't integer id\r\n    String getEntityId();\r\n    \r\n\r\n    @ManyToOne\r\n    RQCourse getCourse();\r\n\r\n    void setCourse(RQCourse person);\r\n\r\n    @OneToMany(mappedBy = \"topic\", cascade = {CascadeAction.DELETE, CascadeAction.SAVE})\r\n    List<RQTopic> getSubTopics();\r\n\r\n    @ManyToOne\r\n    RQTopic getTopic();\r\n\r\n    void setTopic(RQTopic person);\r\n}\r\n\r\n mDataBase.insert(entity).subscribe(courseAction);\r\n\r\nData can be [course][List topic][List subtopic]\r\n\r\nWhen i insert course in base, I can't add topics in course. When i use integer id, this work. but I can't use integer id. How  i can resolve this issue?", "url": "https://github.com/requery/requery/issues/349", "user": "Helmt89", "labels": ["bug"], "created": "2016-11-27 21:38:24", "closed": "2016-12-08 08:30:11", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "Android + Jack Compiler: NullPointerException", "body": "```\r\n* Exception is:\r\norg.gradle.api.tasks.TaskExecutionException: Execution failed for task ':app:transformJackWithJackForProdDebug'.\r\n        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:84)\r\n        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:55)\r\n        at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:61)\r\n        at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)\r\n        at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:88)\r\n        at org.gradle.api.internal.tasks.execution.ResolveTaskArtifactStateTaskExecuter.execute(ResolveTaskArtifactStateTaskExecuter.java:45)\r\n        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:51)\r\n        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:54)\r\n        at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)\r\n        at org.gradle.api.internal.tasks.execution.CatchExceptionTaskExecuter.execute(CatchExceptionTaskExecuter.java:34)\r\n        at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:233)\r\n        at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:215)\r\n        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:74)\r\n        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:55)\r\n        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)\r\n        at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)\r\nCaused by: java.lang.RuntimeException: com.android.jack.ir.JNodeInternalError: java.lang.Exception: java.lang.NullPointerException\r\n        at com.android.jack.api.v01.impl.Api01ConfigImpl$Api01CompilationTaskImpl.run(Api01ConfigImpl.java:126)\r\n        at com.android.builder.core.AndroidBuilder.convertByteCodeUsingJackApis(AndroidBuilder.java:1816)\r\n        at com.android.builder.core.AndroidBuilder.convertByteCodeUsingJack(AndroidBuilder.java:1643)\r\n        at com.android.build.gradle.internal.transforms.JackTransform.runJack(JackTransform.java:221)\r\n        at com.android.build.gradle.internal.transforms.JackTransform.transform(JackTransform.java:195)\r\n        at com.android.build.gradle.internal.pipeline.TransformTask$2.call(TransformTask.java:178)\r\n        at com.android.build.gradle.internal.pipeline.TransformTask$2.call(TransformTask.java:174)\r\n        at com.android.builder.profile.ThreadRecorder.record(ThreadRecorder.java:156)\r\n        at com.android.build.gradle.internal.pipeline.TransformTask.transform(TransformTask.java:173)\r\n        at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:73)\r\n        at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$IncrementalTaskAction.doExecute(DefaultTaskClassInfoStore.java:163)\r\n        at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:134)\r\n        at org.gradle.api.internal.project.taskfactory.DefaultTaskClassInfoStore$StandardTaskAction.execute(DefaultTaskClassInfoStore.java:123)\r\n        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:95)\r\n        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:76)\r\n        ... 15 more\r\nCaused by: com.android.jack.ir.JNodeInternalError: java.lang.Exception: java.lang.NullPointerException\r\n        at com.android.jack.frontend.java.JAstBuilder.handleInternalException(JAstBuilder.java:252)\r\n        at com.android.jack.eclipse.jdt.internal.compiler.Compiler.handleInternalException(Compiler.java:763)\r\n        at com.android.jack.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:460)\r\n        at com.android.jack.frontend.java.JackBatchCompiler.performCompilation(JackBatchCompiler.java:223)\r\n        at com.android.jack.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1712)\r\n        at com.android.jack.frontend.java.JackBatchCompiler.compile(JackBatchCompiler.java:188)\r\n        at com.android.jack.Jack.buildSession(Jack.java:977)\r\n        at com.android.jack.Jack.run(Jack.java:496)\r\n        at com.android.jack.api.v01.impl.Api01ConfigImpl$Api01CompilationTaskImpl.run(Api01ConfigImpl.java:102)\r\n        ... 29 more\r\nCaused by: java.lang.Exception: java.lang.NullPointerException\r\n        at com.android.jack.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:169)\r\n        at com.android.jack.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.round(RoundDispatcher.java:121)\r\n        at com.android.jack.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:159)\r\n        at com.android.jack.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:909)\r\n        at com.android.jack.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:434)\r\n        ... 35 more\r\nCaused by: java.lang.NullPointerException\r\n        at io.requery.processor.Mirrors.namesEqual(Mirrors.java:159)\r\n        at io.requery.processor.Mirrors.implementsInterface(Mirrors.java:109)\r\n        at io.requery.processor.Mirrors.isInstance(Mirrors.java:91)\r\n        at io.requery.processor.AttributeMember.validateCollectionType(AttributeMember.java:202)\r\n        at io.requery.processor.AttributeMember.checkMemberType(AttributeMember.java:194)\r\n        at io.requery.processor.AttributeMember.process(AttributeMember.java:147)\r\n        at io.requery.processor.EntityType.lambda$process$5(EntityType.java:114)\r\n        at io.requery.processor.EntityType.process(EntityType.java:114)\r\n        at io.requery.processor.EntityProcessor.process(EntityProcessor.java:147)\r\n        at com.android.jack.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:139)\r\n        ... 39 more\r\n\r\n\r\nBUILD FAILED\r\n```\r\n", "url": "https://github.com/requery/requery/issues/344", "user": "wa1demar", "labels": ["bug"], "created": "2016-11-21 08:42:39", "closed": "2017-03-15 03:12:15", "commits": {"1a3d5aeeb1007f3829cb72d171d38a81095d3e02": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "df380254d12b626bbc12efc1c1b0ae7a796ef855": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "766118c337194a78e8676dc3498da9f15f702d00": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 113.00027777777778, "commitsDetails": [{"commitHash": "1a3d5aeeb1007f3829cb72d171d38a81095d3e02", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["acabd9c63dd4cecc020507e82bcc10e9af2df30e"], "nameRev": "1a3d5aeeb1007f3829cb72d171d38a81095d3e02 tags/1.1.0~21", "commitMessage": "Resolve #344 Additional check for null type elements\n", "commitDateTime": "2016-11-21 22:51:15", "authoredDateTime": "2016-11-21 22:51:15", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/Mirrors.java", "insertions": 9, "deletions": 2, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Mirrors.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.Mirrors.isInstance(javax.lang.model.util.Types,javax.lang.model.element.TypeElement,java.lang.Class)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.Mirrors.isInstance(javax.lang.model.util.Types,javax.lang.model.element.TypeElement,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.Mirrors.namesEqual(javax.lang.model.element.TypeElement,java.lang.String)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "df380254d12b626bbc12efc1c1b0ae7a796ef855", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["42c46bdea417df28745126b10a8a0bd8b3a14f11"], "nameRev": "df380254d12b626bbc12efc1c1b0ae7a796ef855 tags/1.1.0~16", "commitMessage": "Resolve #344 Additional null checks for Android Jack compiler\n", "commitDateTime": "2016-12-01 22:22:54", "authoredDateTime": "2016-12-01 22:20:24", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGraph.java", "insertions": 9, "deletions": 9, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGraph.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGraph.referencingEntity(io.requery.processor.AttributeDescriptor)", "TOT": 9, "UPD": 0, "INS": 2, "MOV": 6, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "766118c337194a78e8676dc3498da9f15f702d00", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["eaa5f7c6f6c012abd41d78b724e1fe8a16217031"], "nameRev": "766118c337194a78e8676dc3498da9f15f702d00 tags/1.1.0~11", "commitMessage": "Resolve #344 Additional type element checks for Android Jack compiler\n", "commitDateTime": "2016-12-07 23:05:32", "authoredDateTime": "2016-12-07 23:05:32", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/AttributeMember.java", "insertions": 17, "deletions": 11, "lines": 28}, {"filePath": "requery-processor/src/main/java/io/requery/processor/ElementValidator.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "requery-processor/src/main/java/io/requery/processor/ListenerMethod.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AttributeMember.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.AttributeMember.checkMemberType(javax.annotation.processing.ProcessingEnvironment,javax.lang.model.type.TypeMirror,java.util.Set)", "TOT": 6, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 1}, {"spoonMethodName": "io.requery.processor.AttributeMember.validateCollectionType(javax.annotation.processing.ProcessingEnvironment)", "TOT": 5, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 0}]}, {"spoonFilePath": "ElementValidator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.ElementValidator", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ListenerMethod.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.ListenerMethod.process(javax.annotation.processing.ProcessingEnvironment)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1a3d5aeeb1007f3829cb72d171d38a81095d3e02", "df380254d12b626bbc12efc1c1b0ae7a796ef855", "766118c337194a78e8676dc3498da9f15f702d00"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 3, "gitStatsSummary": {"insertions": 39, "deletions": 24, "lines": 63, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 28, "UPD": 0, "INS": 11, "MOV": 14, "DEL": 3, "spoonFilesChanged": 5, "spoonMethodsChanged": 8}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.Mirrors.isInstance(javax.lang.model.util.Types,javax.lang.model.element.TypeElement,java.lang.String)", "io.requery.processor.Mirrors.isInstance(javax.lang.model.util.Types,javax.lang.model.element.TypeElement,java.lang.Class)", "io.requery.processor.AttributeMember.validateCollectionType(javax.annotation.processing.ProcessingEnvironment)", "io.requery.processor.Mirrors.namesEqual(javax.lang.model.element.TypeElement,java.lang.String)", "io.requery.processor.ElementValidator", "io.requery.processor.EntityGraph.referencingEntity(io.requery.processor.AttributeDescriptor)", "io.requery.processor.AttributeMember.checkMemberType(javax.annotation.processing.ProcessingEnvironment,javax.lang.model.type.TypeMirror,java.util.Set)", "io.requery.processor.ListenerMethod.process(javax.annotation.processing.ProcessingEnvironment)"]}, {"title": "Creating insert query failed", "body": "Hi.\r\nI have a entity with generated key and relations to other entities.\r\n```java\r\n@Entity\r\npublic abstract class AbstractLevel_1 implements Parcelable{\r\n\r\n    @Key\r\n    @Generated\r\n    Integer mId;\r\n\r\n    @OneToMany\r\n    List<AbstractLevel_2_1> mLevel_2_1;\r\n\r\n    @OneToMany\r\n    List<AbstractLevel_2_2> mLevel_2_2;\r\n}\r\n```\r\n\r\nWhen I try to insert this model into entity store, I get the SQLiteException.\r\nTest:\r\n```java\r\n@Test\r\npublic void tryInsert(){\r\n    Level_1 level1 = new Level_1();\r\n\r\n    mEntityStore.upsert(level1).toBlocking().value();\r\n    List<Level_1> insertedLevels = mEntityStore.select(Level_1.class).get().toList();\r\n\r\n    assertNotSame(0, insertedLevels.size());\r\n}\r\n```\r\n\r\nStacktrace:\r\n```\r\nandroid.database.sqlite.SQLiteException: Cannot prepare statement, base error code: 1\r\n\r\n\tat org.robolectric.shadows.ShadowSQLiteConnection$Connections.getSqliteException(ShadowSQLiteConnection.java:495)\r\n\tat org.robolectric.shadows.ShadowSQLiteConnection$Connections.execute(ShadowSQLiteConnection.java:464)\r\n\tat org.robolectric.shadows.ShadowSQLiteConnection$Connections.prepareStatement(ShadowSQLiteConnection.java:388)\r\n\tat org.robolectric.shadows.ShadowSQLiteConnection.nativePrepareStatement(ShadowSQLiteConnection.java:79)\r\n\tat android.database.sqlite.SQLiteConnection.nativePrepareStatement(SQLiteConnection.java)\r\n\tat android.database.sqlite.SQLiteConnection.acquirePreparedStatement(SQLiteConnection.java:889)\r\n\tat android.database.sqlite.SQLiteConnection.prepare(SQLiteConnection.java:500)\r\n\tat android.database.sqlite.SQLiteSession.prepare(SQLiteSession.java:588)\r\n\tat android.database.sqlite.SQLiteProgram.__constructor__(SQLiteProgram.java:58)\r\n\tat android.database.sqlite.SQLiteProgram.<init>(SQLiteProgram.java)\r\n\tat android.database.sqlite.SQLiteStatement.<init>(SQLiteStatement.java)\r\n\tat android.database.sqlite.SQLiteDatabase.compileStatement(SQLiteDatabase.java:994)\r\n\tat io.requery.android.sqlite.SqlitePreparedStatement.<init>(SqlitePreparedStatement.java:38)\r\n\tat io.requery.android.sqlite.SqliteConnection.prepareStatement(SqliteConnection.java:147)\r\n\tat io.requery.sql.ConnectionDelegate.prepareStatement(ConnectionDelegate.java:237)\r\n\tat io.requery.sql.PreparedQueryOperation.prepare(PreparedQueryOperation.java:53)\r\n\tat io.requery.sql.EntityUpdateOperation$1.evaluate(EntityUpdateOperation.java:51)\r\n\tat io.requery.sql.EntityUpdateOperation$1.evaluate(EntityUpdateOperation.java:40)\r\n\tat io.requery.query.BaseScalar.value(BaseScalar.java:49)\r\n\tat io.requery.sql.EntityWriter.insert(EntityWriter.java:446)\r\n\tat io.requery.sql.EntityWriter.upsert(EntityWriter.java:463)\r\n\tat io.requery.sql.EntityDataStore.upsert(EntityDataStore.java:280)\r\n\tat io.requery.rx.SingleEntityStoreFromBlocking$8.get(SingleEntityStoreFromBlocking.java:154)\r\n\tat io.requery.rx.SingleOnSubscribeFromSupplier.call(SingleOnSubscribeFromSupplier.java:34)\r\n\tat io.requery.rx.SingleOnSubscribeFromSupplier.call(SingleOnSubscribeFromSupplier.java:23)\r\n\tat rx.Single$1.call(Single.java:90)\r\n\tat rx.Single$1.call(Single.java:70)\r\n\tat rx.Single.subscribe(Single.java:1839)\r\n\tat rx.Single.subscribe(Single.java:1916)\r\n\tat rx.Single$19$1.call(Single.java:1971)\r\n\tat rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)\r\n\tat rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker.run(ExecutorScheduler.java:107)\r\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\r\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\r\n\tat java.lang.Thread.run(Thread.java:745)\r\nCaused by: java.util.concurrent.ExecutionException: com.almworks.sqlite4java.SQLiteException: [1] DB[1] prepare() insert into Level_1 () default values [near \")\": syntax error]\r\n\tat java.util.concurrent.FutureTask.report(FutureTask.java:122)\r\n\tat java.util.concurrent.FutureTask.get(FutureTask.java:192)\r\n\tat com.google.common.util.concurrent.Uninterruptibles.getUninterruptibly(Uninterruptibles.java:143)\r\n\tat org.robolectric.shadows.ShadowSQLiteConnection$Connections.execute(ShadowSQLiteConnection.java:459)\r\n\tat org.robolectric.shadows.ShadowSQLiteConnection$Connections.prepareStatement(ShadowSQLiteConnection.java:388)\r\n\tat org.robolectric.shadows.ShadowSQLiteConnection.nativePrepareStatement(ShadowSQLiteConnection.java:79)\r\n\tat android.database.sqlite.SQLiteConnection.nativePrepareStatement(SQLiteConnection.java)\r\n\tat android.database.sqlite.SQLiteConnection.$$robo$$acquirePreparedStatement(SQLiteConnection.java:889)\r\n\tat android.database.sqlite.SQLiteConnection.acquirePreparedStatement(SQLiteConnection.java)\r\n\tat android.database.sqlite.SQLiteConnection.$$robo$$prepare(SQLiteConnection.java:500)\r\n\tat android.database.sqlite.SQLiteConnection.prepare(SQLiteConnection.java)\r\n\tat android.database.sqlite.SQLiteSession.$$robo$$prepare(SQLiteSession.java:588)\r\n\tat android.database.sqlite.SQLiteSession.prepare(SQLiteSession.java)\r\n\tat android.database.sqlite.SQLiteProgram.$$robo$$__constructor__(SQLiteProgram.java:58)\r\n\tat android.database.sqlite.SQLiteProgram.<init>(SQLiteProgram.java)\r\n\tat android.database.sqlite.SQLiteStatement.<init>(SQLiteStatement.java)\r\n\tat android.database.sqlite.SQLiteDatabase.$$robo$$compileStatement(SQLiteDatabase.java:994)\r\n\tat android.database.sqlite.SQLiteDatabase.compileStatement(SQLiteDatabase.java)\r\n\t... 23 more\r\nCaused by: com.almworks.sqlite4java.SQLiteException: [1] DB[1] prepare() insert into Level_1 () default values [near \")\": syntax error]\r\n\tat com.almworks.sqlite4java.SQLiteConnection.throwResult(SQLiteConnection.java:1309)\r\n\tat com.almworks.sqlite4java.SQLiteConnection.prepare(SQLiteConnection.java:487)\r\n\tat com.almworks.sqlite4java.SQLiteConnection.prepare(SQLiteConnection.java:542)\r\n\tat com.almworks.sqlite4java.SQLiteConnection.prepare(SQLiteConnection.java:529)\r\n\tat org.robolectric.shadows.ShadowSQLiteConnection$Connections$2.call(ShadowSQLiteConnection.java:392)\r\n\tat org.robolectric.shadows.ShadowSQLiteConnection$Connections$2.call(ShadowSQLiteConnection.java:388)\r\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n\t... 3 more\r\n```\r\n\r\nIf I add some field into this entity, test passed. Is it so designed?", "url": "https://github.com/requery/requery/issues/341", "user": "stbychkov", "labels": ["bug"], "created": "2016-11-17 10:28:32", "closed": "2016-11-21 04:17:10", "commits": {"cff305dc7eec96a6254fb4db97e684567ccc8750": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "cff305dc7eec96a6254fb4db97e684567ccc8750", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["b95b6d964c64343069273f3c1ffe8e9f849e7ab9"], "nameRev": "cff305dc7eec96a6254fb4db97e684567ccc8750 tags/1.0.2~2", "commitMessage": "Resolve #341 Fix empty expression list in empty insert statement\n", "commitDateTime": "2016-11-20 20:19:50", "authoredDateTime": "2016-11-20 20:19:50", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/gen/InsertGenerator.java", "insertions": 19, "deletions": 18, "lines": 37}], "commitSpoonAstDiffStats": [{"spoonFilePath": "InsertGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.gen.InsertGenerator.write(io.requery.sql.gen.Output,java.util.Map)", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 4, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cff305dc7eec96a6254fb4db97e684567ccc8750"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 19, "deletions": 18, "lines": 37, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 5, "UPD": 0, "INS": 0, "MOV": 4, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql/gen"], "changesInPackagesSPOON": ["io.requery.sql.gen.InsertGenerator.write(io.requery.sql.gen.Output,java.util.Map)"]}, {"title": "Relationships not working with Java 8 Android Jack compiler", "body": "If enable jackOptions and add some relations to entities app it was crashed during build\r\n\r\n`Caused by: java.lang.NullPointerException\r\n        at io.requery.processor.Mirrors.namesEqual(Mirrors.java:159)\r\n        at io.requery.processor.Mirrors.implementsInterface(Mirrors.java:109)\r\n        at io.requery.processor.Mirrors.isInstance(Mirrors.java:91)\r\n        at io.requery.processor.AttributeMember.validateCollectionType(AttributeMember.java:202)\r\n        at io.requery.processor.AttributeMember.checkMemberType(AttributeMember.java:194)\r\n        at io.requery.processor.AttributeMember.process(AttributeMember.java:147)\r\n        at io.requery.processor.EntityType.lambda$process$5(EntityType.java:114)\r\n        at io.requery.processor.EntityType.process(EntityType.java:114)\r\n        at io.requery.processor.EntityProcessor.process(EntityProcessor.java:147)\r\n        at com.android.jack.eclipse.jdt.internal.compiler.apt.dispatch.RoundDispatcher.handleProcessor(RoundDispatcher.java:139)\r\n`", "url": "https://github.com/requery/requery/issues/332", "user": "wa1demar", "labels": ["bug", "enhancement"], "created": "2016-11-09 15:25:27", "closed": "2016-11-15 06:18:11", "commits": {"35b652dae94bc4b3cd2ddc2e114ab2ef7d2c277e": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "35b652dae94bc4b3cd2ddc2e114ab2ef7d2c277e", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["9feefeced32d5e48c109b4d4eca03da49cb1d22a"], "nameRev": "35b652dae94bc4b3cd2ddc2e114ab2ef7d2c277e tags/1.0.2~7", "commitMessage": "Resolve #332 Handle null TypeElement in Android Jack compiler\n", "commitDateTime": "2016-11-14 22:20:07", "authoredDateTime": "2016-11-14 22:20:07", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/Mirrors.java", "insertions": 3, "deletions": 3, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Mirrors.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.Mirrors.implementsInterface(javax.lang.model.util.Types,javax.lang.model.element.TypeElement,java.lang.String)", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.processor.Mirrors.extendsClass(javax.lang.model.util.Types,javax.lang.model.element.TypeElement,java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["35b652dae94bc4b3cd2ddc2e114ab2ef7d2c277e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 3, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.Mirrors.extendsClass(javax.lang.model.util.Types,javax.lang.model.element.TypeElement,java.lang.String)", "io.requery.processor.Mirrors.implementsInterface(javax.lang.model.util.Types,javax.lang.model.element.TypeElement,java.lang.String)"]}, {"title": "Example Android App crash", "body": "Hi there,\r\n\r\nthe example Android App crashes immediately after installation. Tested on the emulator with Android API 22 and the latest source code.\r\n\r\n```Java\r\n java.lang.RuntimeException: Unable to start activity ComponentInfo{io.requery.android.example.app/io.requery.android.example.app.PeopleActivity}: rx.exceptions.OnErrorNotImplementedException: java.sql.SQLException: android.database.sqlite.SQLiteException: near \"Group\": syntax error (code 1): , while compiling: create table Group (id integer primary key autoincrement not null, name varchar(255))\r\n     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2325)\r\n     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2387)\r\n     at android.app.ActivityThread.access$800(ActivityThread.java:151)\r\n     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1303)\r\n     at android.os.Handler.dispatchMessage(Handler.java:102)\r\n     at android.os.Looper.loop(Looper.java:135)\r\n     at android.app.ActivityThread.main(ActivityThread.java:5254)\r\n     at java.lang.reflect.Method.invoke(Native Method)\r\n     at java.lang.reflect.Method.invoke(Method.java:372)\r\n     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:903)\r\n     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:698)\r\n  Caused by: rx.exceptions.OnErrorNotImplementedException: java.sql.SQLException: android.database.sqlite.SQLiteException: near \"Group\": syntax error (code 1): , while compiling: create table Group (id integer primary key autoincrement not null, name varchar(255))\r\n     at rx.Single$15.onError(Single.java:1637)\r\n     at rx.observers.SafeSubscriber._onError(SafeSubscriber.java:152)\r\n     at rx.observers.SafeSubscriber.onError(SafeSubscriber.java:115)\r\n     at rx.Single$1$1.onError(Single.java:84)\r\n     at io.requery.rx.SingleOnSubscribeFromSupplier.call(SingleOnSubscribeFromSupplier.java:37)\r\n     at io.requery.rx.SingleOnSubscribeFromSupplier.call(SingleOnSubscribeFromSupplier.java:23)\r\n     at rx.Single$1.call(Single.java:89)\r\n     at rx.Single$1.call(Single.java:69)\r\n     at rx.Single.subscribe(Single.java:1824)\r\n     at rx.Single.subscribe(Single.java:1628)\r\n     at io.requery.android.example.app.PeopleActivity.onCreate(PeopleActivity.java:72)\r\n     at android.app.Activity.performCreate(Activity.java:5990)\r\n     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1106)\r\n     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2278)\r\n     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2387)\u00a0\r\n     at android.app.ActivityThread.access$800(ActivityThread.java:151)\u00a0\r\n     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1303)\u00a0\r\n     at android.os.Handler.dispatchMessage(Handler.java:102)\u00a0\r\n     at android.os.Looper.loop(Looper.java:135)\u00a0\r\n     at android.app.ActivityThread.main(ActivityThread.java:5254)\u00a0\r\n     at java.lang.reflect.Method.invoke(Native Method)\u00a0\r\n     at java.lang.reflect.Method.invoke(Method.java:372)\u00a0\r\n     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:903)\u00a0\r\n     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:698)\u00a0\r\n  Caused by: io.requery.sql.TableModificationException: java.sql.SQLException: android.database.sqlite.SQLiteException: near \"Group\": syntax error (code 1): , while compiling: create table Group (id integer primary key autoincrement not null, name varchar(255))\r\n     at io.requery.sql.SchemaModifier.createTables(SchemaModifier.java:142)\r\n     at io.requery.android.sqlite.DatabaseSource.onCreate(DatabaseSource.java:201)\r\n     at android.database.sqlite.SQLiteOpenHelper.getDatabaseLocked(SQLiteOpenHelper.java:251)\r\n     at android.database.sqlite.SQLiteOpenHelper.getWritableDatabase(SQLiteOpenHelper.java:163)\r\n     at io.requery.android.sqlite.DatabaseSource.getConnection(DatabaseSource.java:230)\r\n     at io.requery.sql.EntityDataStore$DataContext.getConnection(EntityDataStore.java:607)\r\n     at io.requery.sql.EntityDataStore.checkConnectionMetadata(EntityDataStore.java:546)\r\n     at io.requery.sql.EntityDataStore$DataContext.getPlatform(EntityDataStore.java:685)\r\n     at io.requery.sql.EntityDataStore$DataContext.getStatementGenerator(EntityDataStore.java:692)\r\n     at io.requery.sql.gen.DefaultOutput.<init>(DefaultOutput.java:65)\r\n     at io.requery.sql.SelectResult.createQuery(SelectResult.java:97)\r\n     at io.requery.sql.SelectResult.iterator(SelectResult.java:106)\r\n     at io.requery.query.BaseResult.iterator(BaseResult.java:123)\r\n     at io.requery.query.BaseResult.first(BaseResult.java:87)\r\n     at io.requery.sql.SelectCountOperation$1.evaluate(SelectCountOperation.java:42)\r\n     at io.requery.sql.SelectCountOperation$1.evaluate(SelectCountOperation.java:38)\r\n     at io.requery.query.BaseScalar.value(BaseScalar.java:49)\r\n     at io.requery.query.BaseScalar$2.get(BaseScalar.java:98)\r\n     at io.requery.rx.SingleOnSubscribeFromSupplier.call(SingleOnSubscribeFromSupplier.java:34)\r\n     at io.requery.rx.SingleOnSubscribeFromSupplier.call(SingleOnSubscribeFromSupplier.java:23)\u00a0\r\n     at rx.Single$1.call(Single.java:89)\u00a0\r\n     at rx.Single$1.call(Single.java:69)\u00a0\r\n     at rx.Single.subscribe(Single.java:1824)\u00a0\r\n     at rx.Single.subscribe(Single.java:1628)\u00a0\r\n     at io.requery.android.example.app.PeopleActivity.onCreate(PeopleActivity.java:72)\u00a0\r\n     at android.app.Activity.performCreate(Activity.java:5990)\u00a0\r\n     at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1106)\u00a0\r\n     at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2278)\u00a0\r\n     at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:2387)\u00a0\r\n     at android.app.ActivityThread.access$800(ActivityThread.java:151)\u00a0\r\n     at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1303)\u00a0\r\n     at android.os.Handler.dispatchMessage(Handler.java:102)\u00a0\r\n     at android.os.Looper.loop(Looper.java:135)\u00a0\r\n     at android.app.ActivityThread.main(ActivityThread.java:5254)\u00a0\r\n     at java.lang.reflect.Method.invoke(Native Method)\u00a0\r\n     at java.lang.reflect.Method.invoke(Method.java:372)\u00a0\r\n     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:903)\u00a0\r\n     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:698)\u00a0\r\n```", "url": "https://github.com/requery/requery/issues/329", "user": "Agraphie", "labels": ["bug"], "created": "2016-11-08 12:29:20", "closed": "2016-11-09 02:25:38", "commits": {"8136aea9134bc13a470d3c8d387ec22181c2fa9a": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "8136aea9134bc13a470d3c8d387ec22181c2fa9a", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["3b16bc851c76c15ffc5e2e5b227cd08ca85dea15"], "nameRev": "8136aea9134bc13a470d3c8d387ec22181c2fa9a tags/1.0.2~12", "commitMessage": "Resolve #329 Remove unused group entity from example\n", "commitDateTime": "2016-11-08 18:27:03", "authoredDateTime": "2016-11-08 18:27:03", "commitGitStats": [{"filePath": "requery-android/example/src/main/java/io/requery/android/example/app/model/Group.java", "insertions": 0, "deletions": 45, "lines": 45}, {"filePath": "requery-android/example/src/main/java/io/requery/android/example/app/model/Person.java", "insertions": 0, "deletions": 4, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Group.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.example.app.model", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "Person.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.example.app.model.getGroups()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8136aea9134bc13a470d3c8d387ec22181c2fa9a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 0, "deletions": 49, "lines": 49, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/example/src/main/java/io/requery/android/example/app"], "changesInPackagesSPOON": ["io.requery.android.example.app.model.getGroups()", "io.requery.android.example.app.model"]}, {"title": "Annotation @OrderBy: can not use a prefix m for ordering field", "body": "Requery 1.0.1\r\nHi, \r\nI have a model with order field with prefix m:\r\n```\r\n@Entity\r\npublic abstract class AbstractBanner {\r\n    int mOrder;\r\n}\r\n```\r\nI use this model in another model with relation `@OneToMany` and I want to set the query sort order within `@OrderBy`:\r\n```\r\n// another model\r\n...\r\n@OneToMany\r\n@OrderBy(value = \"mOrder\")\r\n List<Banner> mBanners;\r\n...\r\n```\r\nBut in generated class used incorrect attribute for ordering:\r\n```\r\n...\r\n.setOrderByAttribute(new Supplier<Attribute>() {\r\n        @Override\r\n        public Attribute get() {\r\n            return Banner.M_ORDER;\r\n        }\r\n    })\r\n...\r\n```\r\nIt should be used Banner.ORDER.", "url": "https://github.com/requery/requery/issues/320", "user": "PhobosXIII", "labels": ["bug"], "created": "2016-11-01 09:45:28", "closed": "2016-11-02 04:02:40", "commits": {"0400c1ed6757b3b1b2e550008de0b4a2f4328404": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "0400c1ed6757b3b1b2e550008de0b4a2f4328404", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["b980b84bc1c4c24d30695b2173edf87ddde59ce1"], "nameRev": "0400c1ed6757b3b1b2e550008de0b4a2f4328404 tags/1.0.2~22", "commitMessage": "Resolve #320 Fix OrderBy attribute name prefix not removed\n", "commitDateTime": "2016-11-01 21:03:16", "authoredDateTime": "2016-11-01 21:03:16", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityMetaGenerator.java", "insertions": 11, "deletions": 9, "lines": 20}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityMetaGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generate(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generateEmbedded(io.requery.processor.AttributeDescriptor,io.requery.processor.EntityDescriptor,com.squareup.javapoet.TypeSpec$Builder,com.squareup.javapoet.TypeName)", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.type.TypeMirror,boolean)", "TOT": 8, "UPD": 6, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityMetaGenerator.upperCaseUnderscoreRemovePrefixes(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0400c1ed6757b3b1b2e550008de0b4a2f4328404"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 9, "lines": 20, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 15, "UPD": 10, "INS": 1, "MOV": 4, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityMetaGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.type.TypeMirror,boolean)", "io.requery.processor.EntityMetaGenerator.upperCaseUnderscoreRemovePrefixes(java.lang.String)", "io.requery.processor.EntityMetaGenerator.generate(com.squareup.javapoet.TypeSpec$Builder)", "io.requery.processor.EntityMetaGenerator.generateEmbedded(io.requery.processor.AttributeDescriptor,io.requery.processor.EntityDescriptor,com.squareup.javapoet.TypeSpec$Builder,com.squareup.javapoet.TypeName)"]}, {"title": "[Android] Blocking on runInTransaction", "body": "Hi,\n\nI'm trying to initially populate a database in the [MainActivity](https://gist.github.com/wolkenschieber/a8b5e8e26ef29218b4297d509fbe88b3#file-mainactivity-java). \nThe observerable containing the insert operations are defined in the [CreateLotteries](https://gist.github.com/wolkenschieber/a8b5e8e26ef29218b4297d509fbe88b3#file-createlotteries-java) helper. Since the data comprises entries in different tables, they should run in an transaction.\n\nHowever on executing the transaction (or subscribing to it), the app blocks and [logs](https://gist.github.com/wolkenschieber/a8b5e8e26ef29218b4297d509fbe88b3#file-log-output) `\nW/SQLiteConnectionPool: The connection pool for database '/data/user/0/app/databases/default' has been unable to grant a connection\n`.\n\nThe population seems to work, if the insert is done without the transaction.\n\nI attached an excerpt of the datamodel in a [gist](https://gist.github.com/wolkenschieber/a8b5e8e26ef29218b4297d509fbe88b3).\n\nAm I doing something wrong, my conversion of the transaction parameter looks a little bit strange to me.\n\nThanks in advance.\n", "url": "https://github.com/requery/requery/issues/319", "user": "wolkenschieber", "labels": ["bug"], "created": "2016-10-28 18:18:13", "closed": "2016-11-04 05:47:33", "commits": {"aa56bfd43bcbf3756ee4cc4b307aee2d0bd1a81d": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "aa56bfd43bcbf3756ee4cc4b307aee2d0bd1a81d", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["3738a1268d1f3b3077e3d3439bdcd9101ed529bd"], "nameRev": "aa56bfd43bcbf3756ee4cc4b307aee2d0bd1a81d tags/1.0.2~20", "commitMessage": "Resolve #319 Fix incorrect behavior of Rx runInTransaction\n", "commitDateTime": "2016-11-03 22:48:25", "authoredDateTime": "2016-11-03 22:48:19", "commitGitStats": [{"filePath": "requery-test/src/test/java/io/requery/test/RxTest.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "requery/src/main/java/io/requery/reactivex/WrappedEntityStore.java", "insertions": 25, "deletions": 24, "lines": 49}, {"filePath": "requery/src/main/java/io/requery/rx/RxSupport.java", "insertions": 10, "deletions": 3, "lines": 13}, {"filePath": "requery/src/main/java/io/requery/rx/SingleEntityStoreFromBlocking.java", "insertions": 27, "deletions": 24, "lines": 51}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RxTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.RxTest.testRunInTransaction()", "TOT": 7, "UPD": 3, "INS": 1, "MOV": 3, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testRunInTransaction().17.call(io.requery.test.model.Person)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "WrappedEntityStore.java", "spoonMethods": [{"spoonMethodName": "io.requery.reactivex.WrappedEntityStore.runInTransaction(java.util.List).17.subscribe(io.reactivex.ObservableEmitter).1.call()", "TOT": 18, "UPD": 7, "INS": 0, "MOV": 11, "DEL": 0}, {"spoonMethodName": "io.requery.reactivex.WrappedEntityStore.runInTransaction(java.util.List)", "TOT": 8, "UPD": 1, "INS": 5, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.reactivex.WrappedEntityStore.runInTransaction(java.util.List).17.subscribe(io.reactivex.ObservableEmitter)", "TOT": 6, "UPD": 1, "INS": 0, "MOV": 5, "DEL": 0}]}, {"spoonFilePath": "RxSupport.java", "spoonMethods": [{"spoonMethodName": "io.requery.rx.RxSupport.toSingle(io.requery.query.Scalar)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.rx.RxSupport.toSingle(io.requery.util.function.Supplier,rx.Scheduler)", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SingleEntityStoreFromBlocking.java", "spoonMethods": [{"spoonMethodName": "io.requery.rx.SingleEntityStoreFromBlocking.runInTransaction(java.util.List).<unknown>.call(Subscriber).<unknown>.call()", "TOT": 16, "UPD": 6, "INS": 0, "MOV": 10, "DEL": 0}, {"spoonMethodName": "io.requery.rx.SingleEntityStoreFromBlocking.runInTransaction(java.util.List)", "TOT": 8, "UPD": 1, "INS": 5, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.rx.SingleEntityStoreFromBlocking.runInTransaction(java.util.List).<unknown>.call(Subscriber)", "TOT": 5, "UPD": 1, "INS": 0, "MOV": 4, "DEL": 0}, {"spoonMethodName": "io.requery.rx.SingleEntityStoreFromBlocking.runInTransaction(java.util.List).17.call()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["aa56bfd43bcbf3756ee4cc4b307aee2d0bd1a81d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 62, "deletions": 51, "lines": 113, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 66, "UPD": 19, "INS": 12, "MOV": 33, "DEL": 2, "spoonFilesChanged": 3, "spoonMethodsChanged": 9}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/rx", "requery/src/main/java/io/requery/reactivex"], "changesInPackagesSPOON": ["io.requery.rx.RxSupport.toSingle(io.requery.util.function.Supplier,rx.Scheduler)", "io.requery.reactivex.WrappedEntityStore.runInTransaction(java.util.List)", "io.requery.rx.SingleEntityStoreFromBlocking.runInTransaction(java.util.List).<unknown>.call(Subscriber).<unknown>.call()", "io.requery.rx.SingleEntityStoreFromBlocking.runInTransaction(java.util.List).17.call()", "io.requery.rx.SingleEntityStoreFromBlocking.runInTransaction(java.util.List).<unknown>.call(Subscriber)", "io.requery.rx.SingleEntityStoreFromBlocking.runInTransaction(java.util.List)", "io.requery.rx.RxSupport.toSingle(io.requery.query.Scalar)", "io.requery.reactivex.WrappedEntityStore.runInTransaction(java.util.List).17.subscribe(io.reactivex.ObservableEmitter)", "io.requery.reactivex.WrappedEntityStore.runInTransaction(java.util.List).17.subscribe(io.reactivex.ObservableEmitter).1.call()"]}, {"title": "Have OffsetDateTimeConverter retain offset", "body": "- ZonedDateTimeConvrter retain zone info\n\nCurrently OffsetDateTime is stored as `Instant` with zero offset.\n\nBesides having another hidden column storing the offset I have no idea how to implement it (maintaining backwards compatibility).\n", "url": "https://github.com/requery/requery/issues/316", "user": "consp1racy", "labels": ["bug"], "created": "2016-10-25 14:38:31", "closed": "2017-01-03 04:06:58", "commits": {"4b532ffe98625dcab00276dd7dd90b8c766deb1f": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 69.00027777777778, "commitsDetails": [{"commitHash": "4b532ffe98625dcab00276dd7dd90b8c766deb1f", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["9f0b95954a718fdcb3e6afe79b0c0cbd33571079"], "nameRev": "4b532ffe98625dcab00276dd7dd90b8c766deb1f tags/1.1.1~13", "commitMessage": "Resolve #316 Clarify behavior of offset/zone datetime conversion\n", "commitDateTime": "2017-01-02 20:05:13", "authoredDateTime": "2017-01-02 20:05:13", "commitGitStats": [{"filePath": "requery-test/src/test/java/io/requery/test/TimeConversionsTest.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "requery/src/main/java/io/requery/converter/OffsetDateTimeConverter.java", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "requery/src/main/java/io/requery/converter/ZonedDateTimeConverter.java", "insertions": 6, "deletions": 4, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TimeConversionsTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.TimeConversionsTest.testInsertReadDateTime()", "TOT": 6, "UPD": 0, "INS": 4, "MOV": 2, "DEL": 0}]}, {"spoonFilePath": "OffsetDateTimeConverter.java", "spoonMethods": [{"spoonMethodName": "io.requery.converter.OffsetDateTimeConverter.convertToMapped(java.lang.Class,java.sql.Timestamp)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "ZonedDateTimeConverter.java", "spoonMethods": [{"spoonMethodName": "io.requery.converter.ZonedDateTimeConverter.convertToMapped(java.lang.Class,java.sql.Timestamp)", "TOT": 5, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 2}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4b532ffe98625dcab00276dd7dd90b8c766deb1f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 11, "deletions": 7, "lines": 18, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 3, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/converter"], "changesInPackagesSPOON": ["io.requery.converter.OffsetDateTimeConverter.convertToMapped(java.lang.Class,java.sql.Timestamp)", "io.requery.converter.ZonedDateTimeConverter.convertToMapped(java.lang.Class,java.sql.Timestamp)"]}, {"title": "The method which inserts a collection of entities & returns generated keys does not work.", "body": "Requery 1.0.0\n\nIn the android sample, app generated Peoples collection inserted without returning of the generated keys values `return data.insert(people).toObservable();`. But if we will call `return data.insert(people, Integer.class).toObservable();` requery won't insert any entities to the database.\n\nI dug into the sources and found the problem in the insert method implementation in the **EntityDataStore** class.\n\n```\n@Override\n    public <K, E extends T> Iterable<K> insert(Iterable<E> entities, @Nullable Class<K> keyClass) {\n        Iterator<E> iterator = entities.iterator();\n        if (iterator.hasNext()) {\n            try (TransactionScope transaction = new TransactionScope(transactionProvider)) {\n                E entity = iterator.next();\n                EntityProxy<E> proxy = context.proxyOf(entity, true);\n                EntityWriter<E, T> writer = context.write(proxy.type().getClassType());\n                GeneratedKeys<E> keys = writer.batchInsert(entities, keyClass != null);\n                if (keys != null) {\n                    @SuppressWarnings(\"unchecked\")\n                    Iterable<K> result = (Iterable<K>) keys;\n                    return result;\n                }\n                transaction.commit(); //Transaction is not commited, but the keys was returned\n            }\n        }\n        return null;\n    }\n```\n", "url": "https://github.com/requery/requery/issues/309", "user": "antonshilov", "labels": ["bug"], "created": "2016-10-20 04:46:04", "closed": "2016-10-20 05:18:04", "commits": {"2333c52a3d86a3b6acc2d7d532a8b4a5c91d66c0": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "2333c52a3d86a3b6acc2d7d532a8b4a5c91d66c0", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["ca2d256ec42f02ea3218518665585f4b2bc213fb"], "nameRev": "2333c52a3d86a3b6acc2d7d532a8b4a5c91d66c0 tags/1.0.1~6", "commitMessage": "Resolve #309 Fix transaction not committed in insert method returning generated keys\n", "commitDateTime": "2016-10-19 22:21:44", "authoredDateTime": "2016-10-19 22:21:44", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityDataStore.java", "insertions": 3, "deletions": 5, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityDataStore.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityDataStore.insert(java.lang.Iterable,java.lang.Class)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2333c52a3d86a3b6acc2d7d532a8b4a5c91d66c0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 5, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityDataStore.insert(java.lang.Iterable,java.lang.Class)"]}, {"title": "Cannot compare persisted UUID", "body": "Version used: 1.0.0\n\nUUID (persisted as `ByteArray`) cannot be used with `eq` method. Are byte arrays compared by reference?\n", "url": "https://github.com/requery/requery/issues/303", "user": "consp1racy", "labels": ["bug"], "created": "2016-10-18 00:11:26", "closed": "2016-10-21 03:33:50", "commits": {"f36e23b44ff6bbb933cc7287463c0916b203aff3": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "f36e23b44ff6bbb933cc7287463c0916b203aff3", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["a48558cd68d4b6d43cc6c9027dae6f86d1f25000"], "nameRev": "f36e23b44ff6bbb933cc7287463c0916b203aff3 tags/1.0.1~4", "commitMessage": "Resolve #303 Android inline blob literals when used in query statements\n", "commitDateTime": "2016-10-20 20:37:36", "authoredDateTime": "2016-10-20 20:37:36", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlcipher/SqlCipherPreparedStatement.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlite/BasePreparedStatement.java", "insertions": 18, "deletions": 1, "lines": 19}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlite/SqlitePreparedStatement.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlitex/SqlitexPreparedStatement.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SqlCipherPreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlcipher.SqlCipherPreparedStatement.bindBlob(int,byte[])", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "BasePreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement.bindBlobLiteral(int,byte[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SqlitePreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.SqlitePreparedStatement.bindBlob(int,byte[])", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "SqlitexPreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlitex.SqlitexPreparedStatement.bindBlob(int,byte[])", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f36e23b44ff6bbb933cc7287463c0916b203aff3"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 21, "deletions": 4, "lines": 25, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 14, "UPD": 0, "INS": 4, "MOV": 6, "DEL": 4, "spoonFilesChanged": 4, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android/sqlite", "requery-android/src/main/java/io/requery/android/sqlcipher", "requery-android/src/main/java/io/requery/android/sqlitex"], "changesInPackagesSPOON": ["io.requery.android.sqlite.SqlitePreparedStatement.bindBlob(int,byte[])", "io.requery.android.sqlite.BasePreparedStatement", "io.requery.android.sqlite.BasePreparedStatement.bindBlobLiteral(int,byte[])", "io.requery.android.sqlitex.SqlitexPreparedStatement.bindBlob(int,byte[])", "io.requery.android.sqlcipher.SqlCipherPreparedStatement.bindBlob(int,byte[])"]}, {"title": "\"builder\" parameter is ignored", "body": "I'm currently integrating my Immutables value classes with requery.\nI tried to avoid defining additional abstract `Builder` classes in my models by setting the `builder` parameter of `Entity` to the `Builder` classes generated by Immutables.\n\nWhat I hoped would work is something like this\n\n```\n@Value.Immutable\n@Value.Style(builder = \"new\")\n@Entity(builder = ImmutableTestModel.Builder.class)\nabstract class TestModel {\n    @Key abstract int id();\n    abstract String a();\n    abstract String b();\n    abstract String c();\n}\n```\n\nUnfortunately the annotation processor for requery generates an `TestModelType` class and the build fails with the error message `error: cannot find symbol method build()`\n", "url": "https://github.com/requery/requery/issues/297", "user": "fabianeichinger", "labels": ["bug", "enhancement"], "created": "2016-10-11 14:00:10", "closed": "2017-02-07 04:46:26", "commits": {"8007b822ddde658942b9472f89177be6d0b15861": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 118.00027777777778, "commitsDetails": [{"commitHash": "8007b822ddde658942b9472f89177be6d0b15861", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["372b7dafe630d1f20b2e085326cb44065dbb9412"], "nameRev": "8007b822ddde658942b9472f89177be6d0b15861 tags/1.2.0~13", "commitMessage": "Resolve #297, Resolve #421 Improved handling of immutables.org types\n", "commitDateTime": "2017-02-06 20:46:21", "authoredDateTime": "2017-02-06 20:46:21", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityDescriptor.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 31, "deletions": 10, "lines": 41}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityMetaGenerator.java", "insertions": 52, "deletions": 34, "lines": 86}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 21, "deletions": 19, "lines": 40}, {"filePath": "requery-processor/src/main/java/io/requery/processor/ImmutableAnnotationKind.java", "insertions": 63, "deletions": 0, "lines": 63}, {"filePath": "requery-test/build.gradle", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "requery-test/src/main/java/io/requery/test/immutables/Address.java", "insertions": 31, "deletions": 0, "lines": 31}, {"filePath": "requery-test/src/main/java/io/requery/test/immutables/Person.java", "insertions": 31, "deletions": 0, "lines": 31}, {"filePath": "requery-test/src/main/java/io/requery/test/immutables/Phone.java", "insertions": 29, "deletions": 0, "lines": 29}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityDescriptor.java", "spoonMethods": []}, {"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateImmutableTypeBuildMethod(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityGenerator.generateMembers(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 15, "UPD": 4, "INS": 3, "MOV": 6, "DEL": 2}, {"spoonMethodName": "io.requery.processor.EntityGenerator.initializeBuilder(io.requery.processor.EntityDescriptor,com.squareup.javapoet.TypeName,java.lang.String)", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 1}]}, {"spoonFilePath": "EntityMetaGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generateProperties(io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor,javax.lang.model.type.TypeMirror,com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName,com.squareup.javapoet.CodeBlock$Builder)", "TOT": 28, "UPD": 1, "INS": 5, "MOV": 19, "DEL": 3}]}, {"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.merge(io.requery.processor.EntityType)", "TOT": 8, "UPD": 4, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.requery.processor.EntityType.isImmutable()", "TOT": 5, "UPD": 2, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.processor.EntityType.builderType()", "TOT": 22, "UPD": 6, "INS": 4, "MOV": 11, "DEL": 1}, {"spoonMethodName": "io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)", "TOT": 7, "UPD": 0, "INS": 1, "MOV": 4, "DEL": 2}]}, {"spoonFilePath": "ImmutableAnnotationKind.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.ImmutableAnnotationKind", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Address.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.immutables.Address", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Person.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.immutables.Person", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Phone.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.immutables.Phone", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Proguard v1.0.0", "body": "Having proguard issues with 1.0.0 on android. See below. Adding `-dontwarn io.requery.**` seems to temporarily fix. \n\n```\nWarning:io.requery.reactivex.QuerySubscription: can't find superclass or interface org.reactivestreams.Subscription\nWarning:io.requery.reactivex.ReactiveSupport$1: can't find superclass or interface io.reactivex.functions.Function\nWarning:io.requery.reactivex.ReactiveSupport$2: can't find superclass or interface io.reactivex.functions.Predicate\nWarning:io.requery.reactivex.ReactiveSupport$3: can't find superclass or interface io.reactivex.Flowable\nWarning:io.requery.reactivex.WrappedEntityStore$17: can't find superclass or interface io.reactivex.ObservableOnSubscribe\nWarning:io.requery.query.BaseResult: can't find referenced class io.reactivex.Flowable\nWarning:io.requery.query.BaseResult: can't find referenced class io.reactivex.Observable\nWarning:io.requery.query.BaseScalar: can't find referenced class io.reactivex.Single\nWarning:io.requery.query.ModifiableResult: can't find referenced class io.reactivex.Flowable\nWarning:io.requery.query.ModifiableResult: can't find referenced class io.reactivex.Observable\nWarning:io.requery.query.ModifiableResult: can't find referenced class io.reactivex.Flowable\nWarning:io.requery.query.ModifiableResult: can't find referenced class io.reactivex.Observable\nWarning:io.requery.query.ModifiableResult: can't find referenced class io.reactivex.Flowable\nWarning:io.requery.query.ModifiableResult: can't find referenced class io.reactivex.Observable\nWarning:io.requery.query.ModifiableResult: can't find referenced class io.reactivex.Flowable\nWarning:io.requery.query.ModifiableResult: can't find referenced class io.reactivex.Observable\nWarning:io.requery.query.Result: can't find referenced class io.reactivex.Flowable\nWarning:io.requery.query.Result: can't find referenced class io.reactivex.Observable\nWarning:io.requery.query.Scalar: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.QuerySubscription: can't find referenced class io.reactivex.internal.util.BackpressureHelper\nWarning:io.requery.reactivex.QuerySubscription: can't find referenced class org.reactivestreams.Subscriber\nWarning:io.requery.reactivex.QuerySubscription: can't find referenced class org.reactivestreams.Subscription\nWarning:io.requery.reactivex.QuerySubscription: can't find referenced class io.reactivex.internal.util.BackpressureHelper\nWarning:io.requery.reactivex.QuerySubscription: can't find referenced class org.reactivestreams.Subscriber\nWarning:io.requery.reactivex.QuerySubscription: can't find referenced class org.reactivestreams.Subscription\nWarning:io.requery.reactivex.ReactiveEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.ReactiveEntityStore: can't find referenced class io.reactivex.Completable\nWarning:io.requery.reactivex.ReactiveEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.ReactiveEntityStore: can't find referenced class io.reactivex.Observable\nWarning:io.requery.reactivex.ReactiveEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.ReactiveEntityStore: can't find referenced class io.reactivex.Observable\nWarning:io.requery.reactivex.ReactiveEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.ReactiveEntityStore: can't find referenced class io.reactivex.Observable\nWarning:io.requery.reactivex.ReactiveSupport: can't find referenced class io.reactivex.subjects.Subject\nWarning:io.requery.reactivex.ReactiveSupport: can't find referenced class io.reactivex.Observable\nWarning:io.requery.reactivex.ReactiveSupport: can't find referenced class io.reactivex.subjects.Subject\nWarning:io.requery.reactivex.ReactiveSupport: can't find referenced class io.reactivex.Observable\nWarning:io.requery.reactivex.ReactiveSupport: can't find referenced class io.reactivex.Flowable\nWarning:io.requery.reactivex.ReactiveSupport$1: can't find referenced class io.reactivex.functions.Function\nWarning:io.requery.reactivex.ReactiveSupport$2: can't find referenced class io.reactivex.functions.Predicate\nWarning:io.requery.reactivex.ReactiveSupport$3: can't find referenced class io.reactivex.Flowable\nWarning:io.requery.reactivex.ReactiveSupport$3: can't find referenced class org.reactivestreams.Subscriber\nWarning:io.requery.reactivex.ReactiveSupport$3: can't find referenced class io.reactivex.Flowable\nWarning:io.requery.reactivex.ReactiveSupport$3: can't find referenced class org.reactivestreams.Subscriber\nWarning:io.requery.reactivex.ReactiveSupport$3: can't find referenced class io.reactivex.Flowable\nWarning:io.requery.reactivex.TransactionListenerSupplier: can't find referenced class io.reactivex.subjects.PublishSubject\nWarning:io.requery.reactivex.TransactionListenerSupplier: can't find referenced class io.reactivex.subjects.Subject\nWarning:io.requery.reactivex.TransactionListenerSupplier$1: can't find referenced class io.reactivex.subjects.Subject\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Completable\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Observable\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Completable\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Observable\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Completable\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Observable\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.WrappedEntityStore: can't find referenced class io.reactivex.Observable\nWarning:io.requery.reactivex.WrappedEntityStore$17: can't find referenced class io.reactivex.ObservableOnSubscribe\nWarning:io.requery.reactivex.WrappedEntityStore$17: can't find referenced class io.reactivex.ObservableEmitter\nWarning:io.requery.reactivex.WrappedEntityStore$17: can't find referenced class io.reactivex.ObservableOnSubscribe\nWarning:io.requery.reactivex.WrappedEntityStore$17$1: can't find referenced class io.reactivex.Single\nWarning:io.requery.reactivex.WrappedEntityStore$17$1: can't find referenced class io.reactivex.ObservableEmitter\nWarning:io.requery.reactivex.WrappedEntityStore$17$1: can't find referenced class io.reactivex.Single\nWarning:io.requery.rx2.rx.RxSupport: can't find referenced class io.requery.rx2.rx.SingleEntityStoreFromBlocking\nWarning:io.requery.rx2.rx.RxSupport: can't find referenced class io.requery.rx2.rx.SingleOnSubscribeFromSupplier\nWarning:io.requery.rx2.rx.SingleEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.rx2.rx.SingleEntityStore: can't find referenced class io.reactivex.Observable\nWarning:io.requery.rx2.rx.SingleEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.rx2.rx.SingleEntityStore: can't find referenced class io.reactivex.Observable\nWarning:io.requery.rx2.rx.SingleEntityStore: can't find referenced class io.reactivex.Single\nWarning:io.requery.rx2.rx.SingleEntityStore: can't find referenced class io.reactivex.Observable\nWarning:io.requery.rx2.rx.SingleEntityStore: can't find referenced class io.reactivex.Single\n```\n", "url": "https://github.com/requery/requery/issues/293", "user": "alistairsykes", "labels": ["bug"], "created": "2016-10-03 08:23:01", "closed": "2016-10-11 05:57:13", "commits": {"3499f89a00be65db5311dbab748f7b0af310dca6": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "901f1d5a311609cc385f72e4ae5b1d2833e72183": {"commitGHEventType": "referenced", "commitUser": "npurushe"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "3499f89a00be65db5311dbab748f7b0af310dca6", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["2ea9e250f472a95a75671af57b93a231bdf40e84"], "nameRev": "3499f89a00be65db5311dbab748f7b0af310dca6 tags/1.0.1~16", "commitMessage": "Resolve #293 Android proguard don't warn on io.requery.reactivex.*\n", "commitDateTime": "2016-10-10 22:59:56", "authoredDateTime": "2016-10-10 22:59:43", "commitGitStats": [{"filePath": "requery-android/proguard-rules.pro", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "901f1d5a311609cc385f72e4ae5b1d2833e72183", "commitGHEventType": "referenced", "commitUser": "npurushe", "commitParents": ["3499f89a00be65db5311dbab748f7b0af310dca6"], "nameRev": "901f1d5a311609cc385f72e4ae5b1d2833e72183 tags/1.0.1~15", "commitMessage": "Resolve #293 update Android proguard rules\n", "commitDateTime": "2016-10-12 23:48:37", "authoredDateTime": "2016-10-12 23:48:37", "commitGitStats": [{"filePath": "requery-android/proguard-rules.pro", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3499f89a00be65db5311dbab748f7b0af310dca6", "901f1d5a311609cc385f72e4ae5b1d2833e72183"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 2, "deletions": 0, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/proguard-rules.pro"]}, {"title": "Neither standard nor experimental KAPT 1.0.4 generate Entity and Models classes", "body": "Last version I know to work is 1.0.4-62 EAP.\n", "url": "https://github.com/requery/requery/issues/291", "user": "consp1racy", "labels": ["bug"], "created": "2016-09-26 15:58:04", "closed": "2016-09-29 03:51:54", "commits": {"46adfdd08d142fbfafee9f278e8145055b920d5e": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "46adfdd08d142fbfafee9f278e8145055b920d5e", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["29618bc2f858f41aab2751e08a62c2da157d7a40"], "nameRev": "46adfdd08d142fbfafee9f278e8145055b920d5e tags/1.0.0~1", "commitMessage": "Resolve #291 Annotation processing work around for Kotlin 1.0.4\n", "commitDateTime": "2016-09-28 20:53:09", "authoredDateTime": "2016-09-28 20:53:09", "commitGitStats": [{"filePath": "build.gradle", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "requery-android/example-kotlin/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-kotlin/build.gradle", "insertions": 0, "deletions": 12, "lines": 12}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityProcessor.java", "insertions": 19, "deletions": 1, "lines": 20}, {"filePath": "requery-processor/src/main/java/io/requery/processor/SourceLanguage.java", "insertions": 16, "deletions": 0, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityProcessor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "TOT": 3, "UPD": 1, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityProcessor.isEmptyKotlinAnnotationSet(java.util.Set)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SourceLanguage.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.SourceLanguage.readKaptTypes(javax.annotation.processing.ProcessingEnvironment,java.util.Map)", "TOT": 14, "UPD": 0, "INS": 6, "MOV": 7, "DEL": 1}, {"spoonMethodName": "io.requery.processor.SourceLanguage", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.SourceLanguage.getAnnotations()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.SourceLanguage.map(javax.annotation.processing.ProcessingEnvironment)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["46adfdd08d142fbfafee9f278e8145055b920d5e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 38, "deletions": 15, "lines": 53, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 21, "UPD": 1, "INS": 12, "MOV": 7, "DEL": 1, "spoonFilesChanged": 2, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["", "requery-processor/src/main/java/io/requery/processor", "requery-kotlin", "requery-android/example-kotlin"], "changesInPackagesSPOON": ["io.requery.processor.SourceLanguage.map(javax.annotation.processing.ProcessingEnvironment)", "io.requery.processor.EntityProcessor.isEmptyKotlinAnnotationSet(java.util.Set)", "io.requery.processor.SourceLanguage.readKaptTypes(javax.annotation.processing.ProcessingEnvironment,java.util.Map)", "io.requery.processor.SourceLanguage", "io.requery.processor.SourceLanguage.getAnnotations()", "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)"]}, {"title": "Timestamp is read from wrong column index", "body": "I used the attached class to write and read `Instant`s from ThreeTenABP. Writing works fine and long millis is written to correct column.\n\nWhen reading back the return values was null. I was able to track it down to incorrect index somewhere around `CursorResultSet`, then I got lost. Value in the column with - 1 index was null according to SQLite Editor.\n\nIf I save it as a String instead everything works fine.\n\n```\n/**\n * Converts from a [OffsetDateTime] to a [java.sql.Timestamp] for Java 8.\n * Did not work, read from wrong column.\n */\nobject InstantBpConverterBak : Converter<Instant, java.sql.Timestamp> {\n\n    override fun getMappedType(): Class<Instant> {\n        return Instant::class.java\n    }\n\n    override fun getPersistedType(): Class<java.sql.Timestamp> {\n        return java.sql.Timestamp::class.java\n    }\n\n    override fun getPersistedSize(): Int? {\n        return null\n    }\n\n    override fun convertToPersisted(value: Instant?): java.sql.Timestamp? {\n        if (value == null) {\n            return null\n        }\n        return DateTimeUtils.toSqlTimestamp(value)\n    }\n\n    override fun convertToMapped(type: Class<out Instant>,\n                                 value: java.sql.Timestamp?): Instant? {\n        if (value == null) {\n            return null\n        }\n        return DateTimeUtils.toInstant(value)\n    }\n}\n```\n", "url": "https://github.com/requery/requery/issues/283", "user": "consp1racy", "labels": ["bug"], "created": "2016-09-10 21:25:41", "closed": "2016-09-11 03:48:44", "commits": {"8908dacedbf1531483e73385e2a263cfde51b0fa": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "8908dacedbf1531483e73385e2a263cfde51b0fa", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["28ceb77ea36cd7e19e980379461d255906312b31"], "nameRev": "8908dacedbf1531483e73385e2a263cfde51b0fa tags/1.0.0~19", "commitMessage": "Resolve #283 Fix reading java.sql.Timestamp on Android\n", "commitDateTime": "2016-09-10 20:53:38", "authoredDateTime": "2016-09-10 20:53:38", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlite/CursorResultSet.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "CursorResultSet.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.CursorResultSet.getTimestamp(int)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8908dacedbf1531483e73385e2a263cfde51b0fa"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android/sqlite"], "changesInPackagesSPOON": ["io.requery.android.sqlite.CursorResultSet.getTimestamp(int)"]}, {"title": "Kotlin var setter with generics issue", "body": "Introduced in rc4.\n\n![image](https://cloud.githubusercontent.com/assets/4589773/18387345/6d99c7ea-769c-11e6-90d1-ea4f7b0ff1f8.png)\n\n> Order is not abstract and does not override abstract method setItems(List<RestOrderItem>) in IOrder\n> \n> name clash: setItems(List <? extends RestOrderItem>) in Order and setItems(List<RestOrderItem>) in IOrder have the same erasure, yet neither overrides the other\n\nIOrder.kt\n\n```\nvar items: List<RestOrderItem>?\n```\n\nOrder.java\n\n```\n@SuppressWarnings(\"unchecked\")\npublic void setItems(List<? extends RestOrderItem> items) {\n    $proxy.set(ITEMS, (List<RestOrderItem>)items);\n}\n```\n", "url": "https://github.com/requery/requery/issues/281", "user": "consp1racy", "labels": ["bug"], "created": "2016-09-09 12:50:49", "closed": "2016-09-11 20:21:07", "commits": {"7169d9f0f8a687284710ce63e2fede8a16a45b83": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "7169d9f0f8a687284710ce63e2fede8a16a45b83", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["8908dacedbf1531483e73385e2a263cfde51b0fa"], "nameRev": "7169d9f0f8a687284710ce63e2fede8a16a45b83 tags/1.0.0~18", "commitMessage": "Resolve #281 Use bounded wildcard for Kotlin setter only on interface types\n", "commitDateTime": "2016-09-11 13:25:58", "authoredDateTime": "2016-09-11 13:25:58", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 12, "deletions": 4, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityGenerator.generateProxyMethods(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7169d9f0f8a687284710ce63e2fede8a16a45b83"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 12, "deletions": 4, "lines": 16, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 8, "UPD": 3, "INS": 1, "MOV": 3, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityGenerator", "io.requery.processor.EntityGenerator.generateProxyMethods(com.squareup.javapoet.TypeSpec$Builder)"]}, {"title": "onCreateMapping is called too soon", "body": "My `onCreateMapping` method has dependency on an instance of `Moshi` which is stored in a variable only after the super constructor has already run resulting in a `NullPointerException`.\n\nThe super constructor:\n\n```\npublic SqlitexDatabaseSource(Context context,\n                             EntityModel model,\n                             String name,\n                             int version) {\n    super(context, name, null, version);\n    if (model == null) {\n        throw new IllegalArgumentException(\"null model\");\n    }\n    this.platform = new SQLite();\n    this.mapping = onCreateMapping(platform);\n    this.model = model;\n    this.mode = TableCreationMode.CREATE_NOT_EXISTS;\n}\n```\n\nA solution would be to call `onCreateMapping` lazily. It's only used in `getConfiguration` method.\n\nI don't see a workaround except using reflection. Or maybe another form of dependency injection.\n", "url": "https://github.com/requery/requery/issues/277", "user": "consp1racy", "labels": ["bug"], "created": "2016-09-08 20:20:06", "closed": "2016-09-09 03:12:55", "commits": {"f5a50e23c707a87411041e53b92096dca6801c88": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "ce4b345b454d2fad2ea329b76ea516d925ba6cd5": {"commitGHEventType": "referenced", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f5a50e23c707a87411041e53b92096dca6801c88", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["3efa782e677db742ca6f75e36c9cc9ea96ce092b"], "nameRev": "f5a50e23c707a87411041e53b92096dca6801c88 tags/1.0.0~24", "commitMessage": "Resolve #277 Create mapping after constructor\n", "commitDateTime": "2016-09-08 20:17:34", "authoredDateTime": "2016-09-08 20:17:34", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlite/DatabaseSource.java", "insertions": 7, "deletions": 2, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DatabaseSource.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.DatabaseSource", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.requery.android.sqlite.DatabaseSource.getConfiguration()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "ce4b345b454d2fad2ea329b76ea516d925ba6cd5", "commitGHEventType": "referenced", "commitUser": "npurushe", "commitParents": ["4c152f841a0f4985fde541df0768549e0ead1652"], "nameRev": "ce4b345b454d2fad2ea329b76ea516d925ba6cd5 tags/1.0.1~18", "commitMessage": "Resolve #277 Create mapping after constructor in SqlitexDatabaseSource (#292)\n\n", "commitDateTime": "2016-09-29 21:09:36", "authoredDateTime": "2016-09-30 06:09:36", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlitex/SqlitexDatabaseSource.java", "insertions": 7, "deletions": 2, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SqlitexDatabaseSource.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlitex.SqlitexDatabaseSource", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 2}, {"spoonMethodName": "io.requery.android.sqlitex.SqlitexDatabaseSource.getConfiguration()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f5a50e23c707a87411041e53b92096dca6801c88"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 2, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android/sqlite"], "changesInPackagesSPOON": ["io.requery.android.sqlite.DatabaseSource.getConfiguration()", "io.requery.android.sqlite.DatabaseSource"]}, {"title": "upserting entity with ManyToMany", "body": "When upserting an entity with A ManyToMany relationship I get a Foreign Key constraint failed exception on the Junction Table entity because it already exist in the JunctionTable. When I set through it with debugger all the entity have CascadeMode.UPSERT in the EntityWriter but the Junction Table has CascadeMode.INSERT when it tries to insert the same object which has previously been inserted.\n\nShouldn't it have CascasdeMode.UPSERT since it has a valid primary key?\nThe entities I use are below.\n\n``` java\n@Entity\npublic interface Thread {\n    @Key\n    String id();\n\n    @Column(nullable = false)\n    String subject();\n\n    @JunctionTable\n    @ManyToMany\n    List<AccountEntity> participants();\n}\n\n@Entity\npublic interface Account {\n\n    @Key\n    String id();\n\n    @NonNull\n    @Column(nullable = false)\n    String email();\n}\n```\n", "url": "https://github.com/requery/requery/issues/275", "user": "aegis123", "labels": ["bug"], "created": "2016-09-08 11:28:45", "closed": "2016-09-12 05:06:59", "commits": {"71df79f45bfd0b42abc06e9718b1a4ba4b718c4e": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "71df79f45bfd0b42abc06e9718b1a4ba4b718c4e", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["16b5e9b9cc31a2d3592de095d0d03b8e12d137be"], "nameRev": "71df79f45bfd0b42abc06e9718b1a4ba4b718c4e tags/1.0.0~13", "commitMessage": "Resolve #275 Incorrect cascade type upserting many-to-many\n", "commitDateTime": "2016-09-11 22:11:57", "authoredDateTime": "2016-09-11 22:11:57", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.updateAssociation(io.requery.sql.EntityWriter$Cascade,java.lang.Object,io.requery.proxy.EntityProxy,io.requery.meta.Attribute)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["71df79f45bfd0b42abc06e9718b1a4ba4b718c4e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.updateAssociation(io.requery.sql.EntityWriter$Cascade,java.lang.Object,io.requery.proxy.EntityProxy,io.requery.meta.Attribute)"]}, {"title": "Prefix not removed from referenced field when using @ForeignKey", "body": "The 'm' prefix is not being removed in the generated code for a foreign entity (setReferencedAttribute method). E.g.:\n\n```\nabstract class BaseCategory {\n  @Key\n  @Generated\n  @Column(name = \"id\")\n  Integer mId;\n}\n\nabstract class BaseVehicle {\n  @Key\n  @Generated\n  @Column(name = \"id\")\n  Integer mId;\n\n  @ForeignKey\n  @Column(name  = \"category_id\")\n  BaseCategory mCategory;\n}\n\n```\n\nThe code generated for the Category entity:\n\n```\n  public static final QueryAttribute<Category, Integer> ID = ...\n```\n\nAnd for the Vehicle entity:\n\n```\n...\n.setReferencedAttribute(new Supplier<Attribute>() {\n  @Override\n  public Attribute get() {\n    return Category.M_ID;\n  }\n})\n...\n```\n\nI suppose the expected would be the `get` above to return `Category.ID`. If `BaseCategory.mId` is changed to `Category.id` (without the prefix), the code is generated correctly.\n", "url": "https://github.com/requery/requery/issues/272", "user": "ecdpalma", "labels": ["bug"], "created": "2016-09-03 14:54:15", "closed": "2016-09-06 03:26:58", "commits": {"b7c2bce04c6f5d96af1b62d9d85246df8afb2bce": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "b7c2bce04c6f5d96af1b62d9d85246df8afb2bce", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["2bf71436eaa60afeac0723cbe12eec636b36a766"], "nameRev": "b7c2bce04c6f5d96af1b62d9d85246df8afb2bce tags/1.0.0-rc4~5", "commitMessage": "Resolve #272 Member prefix not removed in setReferencedAttribute\n", "commitDateTime": "2016-09-05 20:31:18", "authoredDateTime": "2016-09-05 20:31:18", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityMetaGenerator.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityMetaGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.type.TypeMirror,boolean)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b7c2bce04c6f5d96af1b62d9d85246df8afb2bce"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityMetaGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.type.TypeMirror,boolean)"]}, {"title": "Custom model is not generated after usage of ManyToMany ", "body": "Hi, I have 3 entities:\n\nFirstDefaultEntity \n\n``` java\n@Entity(name = \"FirstDefault\")\npublic abstract class FirstDefaultEntity {\n\n    @Key\n    Long id;\n\n    @ManyToMany\n    @JunctionTable(name = \"junction_table\")\n    Set<SecondDefaultEntity> list;\n\n}\n```\n\nSecondDefaultEntity \n\n``` java\n@Entity(name = \"SecondDefault\")\npublic abstract class SecondDefaultEntity {\n\n    @Key\n    Long id;\n\n    @ManyToMany\n    Set<FirstDefaultEntity> list;\n\n}\n```\n\nThirdCustomEntity \n\n``` java\n@Entity(name = \"ThirdCustom\", model = \"custom\")\npublic abstract class ThirdCustomEntity {\n\n    @Key\n    Long id;\n\n    String name;\n\n}\n```\n\nWithout @ManyToMany in FirstDefaultEntity  and SecondDefaultEntity  everything working, otherwise in your generated file Models.java these lines of code are missing:\n\n``` java\n public static final EntityModel CUSTOM = new EntityModelBuilder(\"custom\")\n    .addType(ThirdCustom.$TYPE)\n    .build();\n```\n", "url": "https://github.com/requery/requery/issues/270", "user": "krabatom", "labels": ["bug"], "created": "2016-09-01 20:30:18", "closed": "2016-09-04 06:15:41", "commits": {"73bf9905117a12ac0d3bd78c9bb15c58ee1ad967": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "73bf9905117a12ac0d3bd78c9bb15c58ee1ad967", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["b422cccff49999529518001ec74c0ef778df2ec1"], "nameRev": "73bf9905117a12ac0d3bd78c9bb15c58ee1ad967 tags/1.0.0-rc4~7", "commitMessage": "Resolve #270 Fix different model definitions in the same package not generated\n", "commitDateTime": "2016-09-03 23:19:47", "authoredDateTime": "2016-09-03 23:19:47", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityDescriptor.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityProcessor.java", "insertions": 22, "deletions": 17, "lines": 39}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityDescriptor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.generatesAdditionalTypes()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityProcessor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "TOT": 31, "UPD": 9, "INS": 4, "MOV": 15, "DEL": 3}, {"spoonMethodName": "io.requery.processor.EntityProcessor", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityProcessor.init(javax.annotation.processing.ProcessingEnvironment)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.generatesAdditionalTypes()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["73bf9905117a12ac0d3bd78c9bb15c58ee1ad967"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 29, "deletions": 18, "lines": 47, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 37, "UPD": 9, "INS": 9, "MOV": 16, "DEL": 3, "spoonFilesChanged": 3, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityProcessor", "io.requery.processor.EntityType.generatesAdditionalTypes()", "io.requery.processor.generatesAdditionalTypes()", "io.requery.processor.EntityProcessor.init(javax.annotation.processing.ProcessingEnvironment)", "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)"]}, {"title": "What is the proper way to define Parent-Child relationships?", "body": "What is the proper way to define a foreign model relationship? Given the following models:\n\n```\n@Entity\ninterface Parent : Persistable {\n    @get:Key\n    var primaryId: String\n    var children: MutableList<Child>\n}\n```\n\n```\n@Entity\ninterface Child: Persistable {\n    @get:Key\n    var primaryId: String\n\n    var name: String\n}\n```\n## The following methods seem to be the possible ways to define the `children` relationship, yet each has an issue that prevents use.\n\n```\n@get:OneToMany\nvar children: MutableList<com.nlefler.requerytest.Child>\n```\n\ncauses\n\n```\nCauses stack overflow\n           at io.requery.proxy.EntityProxy.toString(EntityProxy.java:387)\n                      at com.nlefler.requerytest.ParentEntity.toString(ParentEntity.java:160)\n                      at io.requery.proxy.EntityProxy.toString(EntityProxy.java:387)\n                      at com.nlefler.requerytest.ChildEntity.toString(ChildEntity.java:192)\n                      at java.lang.String.valueOf(String.java:2683)\n                      at java.lang.StringBuilder.append(StringBuilder.java:129)\n                      at java.util.AbstractCollection.toString(AbstractCollection.java:458)\n                      at io.requery.proxy.EntityProxy.toString(EntityProxy.java:387)\n                      at com.nlefler.requerytest.ParentEntity.toString(ParentEntity.java:160)\n                      at io.requery.android.sqlite.BasePreparedStatement.setObject(BasePreparedStatement.java:286)\n                      at io.requery.sql.BaseType.write(BaseType.java:63)\n                      at io.requery.sql.GenericMapping.write(GenericMapping.java:351)\n                      at io.requery.sql.EntityWriter.bindParameters(EntityWriter.java:363)\n                      at io.requery.sql.EntityWriter$6.bindParameters(EntityWriter.java:542)\n                      at io.requery.sql.EntityUpdateOperation$1.evaluate(EntityUpdateOperation.java:67)\n                      at io.requery.sql.EntityUpdateOperation$1.evaluate(EntityUpdateOperation.java:55)\n                      at io.requery.query.BaseScalar.value(BaseScalar.java:49)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:592)\n                      at io.requery.sql.EntityWriter.cascadeWrite(EntityWriter.java:927)\n                      at io.requery.sql.EntityWriter.updateInverseAssociation(EntityWriter.java:780)\n                      at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:663)\n                      at io.requery.sql.EntityWriter.insert(EntityWriter.java:453)\n                      at io.requery.sql.EntityWriter.insert(EntityWriter.java:410)\n                      at io.requery.sql.EntityDataStore.insert(EntityDataStore.java:199)\n                      at io.requery.sql.EntityDataStore.insert(EntityDataStore.java:189)\n                      at io.requery.sql.KotlinEntityDataStore.insert(KotlinEntityDataStore.kt:113)\n                      at com.nlefler.requerytest.MainActivity.onCreate(MainActivity.kt:29)\n```\n\n---\n\n```\n@get:OneToMany(mappedBy = \"parent\")\nvar children: MutableList<Child>\n```\n\nwith\n\n```\nvar parent: Parent\n```\n\ncauses\n\n```\nat io.requery.sql.EntityWriter.updateInverseAssociation(EntityWriter.java:780)\n             at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:663)\n             at io.requery.sql.EntityWriter.update(EntityWriter.java:601)\n             at io.requery.sql.EntityWriter.cascadeWrite(EntityWriter.java:927)\n             at io.requery.sql.EntityWriter.update(EntityWriter.java:573)\n             at io.requery.sql.EntityWriter.cascadeWrite(EntityWriter.java:927)\n             at io.requery.sql.EntityWriter.updateInverseAssociation(EntityWriter.java:780)\n```\n\n---\n\n```\nvar children: MutableList<Child>\n```\n\ndoes not crash, but inserts the following into the database, which is not sustainable\n\n```\n CREATE TABLE Child (primaryId varchar(255) primary key, name varchar(255));\nCREATE TABLE Parent (primaryId varchar(255) primary key, children varchar(255));\nINSERT INTO \"Parent\" VALUES('fc67661b-d8b0-4d51-8bea-4182548e6bc3','[Child [a18b5208-6478-47c2-9574-f42ef2547da5, A]]');\n```\n\nExample project here: https://github.com/nlefler/requery_test\n", "url": "https://github.com/requery/requery/issues/267", "user": "nlefler", "labels": ["bug"], "created": "2016-08-31 01:19:30", "closed": "2016-09-06 06:00:37", "commits": {"cdfda1ec181da89b42bd9955e01c5872cb93099b": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "cdfda1ec181da89b42bd9955e01c5872cb93099b", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["b8bc384e92d550dcc6c938bddc23d5bc2d25da57"], "nameRev": "cdfda1ec181da89b42bd9955e01c5872cb93099b tags/1.0.0-rc4~2", "commitMessage": "Resolve #267 Fix setDeclaringType when using Kotlin properties\n", "commitDateTime": "2016-09-05 22:48:29", "authoredDateTime": "2016-09-05 22:48:29", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/meta/AttributeDelegate.kt", "insertions": 7, "deletions": 6, "lines": 13}, {"filePath": "requery/src/main/java/io/requery/meta/ImmutableType.java", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ImmutableType.java", "spoonMethods": [{"spoonMethodName": "io.requery.meta.ImmutableType.setDeclaringType(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cdfda1ec181da89b42bd9955e01c5872cb93099b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 6, "lines": 15, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/meta", "requery-kotlin/src/main/kotlin/io/requery/meta/AttributeDelegate.kt"], "changesInPackagesSPOON": ["io.requery.meta.ImmutableType.setDeclaringType(java.lang.Object)"]}, {"title": "Custom mappings are ignored", "body": "```\npublic void addConverter(Converter<?, ?> converter, Class<?>... classes) {\n    for (Class<?> type : classes) {\n        converters.put(type, converter);\n    }\n}\n```\n\n```\npublic class DefaultMapping extends GenericMapping {\n    public DefaultMapping(Platform platform) {\n        super(platform);\n        addConverter(new UriConverter());\n    }\n}\n```\n\na) The `Uri.class` is not specified as `classes` parameter in `addConverter` call.\n\nb) The contract of `addConverter` does not need the `classes` parameter at all. Mapped type can be obtained by calling `Converter.getMappedType()`.\n\nSuggested fix:\n\n```\npublic void addConverter(Converter<?, ?> converter) {\n    converters.put(converter.getMappedType(), converter);\n}\n```\n", "url": "https://github.com/requery/requery/issues/265", "user": "consp1racy", "labels": ["bug"], "created": "2016-08-29 02:02:44", "closed": "2016-08-29 04:19:31", "commits": {"48242c2491ecc8f4773be46c343f0fd9a7c5dc56": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "48242c2491ecc8f4773be46c343f0fd9a7c5dc56", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["fe7ea72a7b0783ca33f8efa13c03dc374a786dc9"], "nameRev": "48242c2491ecc8f4773be46c343f0fd9a7c5dc56 tags/1.0.0-rc4~10", "commitMessage": "Resolve #265 Android UriConverter not applied\n", "commitDateTime": "2016-08-28 21:19:39", "authoredDateTime": "2016-08-28 21:19:39", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/GenericMapping.java", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "GenericMapping.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.GenericMapping.addConverter(io.requery.Converter,java.lang.Class[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["48242c2491ecc8f4773be46c343f0fd9a7c5dc56"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 0, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.GenericMapping.addConverter(io.requery.Converter,java.lang.Class[])"]}, {"title": "ambiguous column name in orderby", "body": "When trying to create a select query the query builder does not take account of the aliasing in the orderby part of the query\n\n``` java\nfinal List<Thread> threads = helper.select(Thread.class)\n                .join(Message.class)\n                .on(MessageEntity.THREAD_ID.eq(ThreadEntity.ID))\n                .orderBy(MessageEntity.CREATED_AT.desc())\n                .limit(limit).offset(offset)\n                .get()\n                .toList();\n```\n\nGenerates the following query:\n\n``` sql\nSELECT a._id, a.createdAt, a.createdBy, a.remoteId, a.subject \nFROM Thread a INNER JOIN Message b ON b.thread = a._id \nORDER BY createdAt DESC \nLIMIT 10 OFFSET 0\n```\n\n`createdAt` should be `b.createdAt`\n", "url": "https://github.com/requery/requery/issues/260", "user": "aegis123", "labels": ["bug"], "created": "2016-08-23 09:26:19", "closed": "2016-08-24 15:53:37", "commits": {"fe7ea72a7b0783ca33f8efa13c03dc374a786dc9": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "fe7ea72a7b0783ca33f8efa13c03dc374a786dc9", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["19a119ce64cdc21f88ca267791aa750d751de917"], "nameRev": "fe7ea72a7b0783ca33f8efa13c03dc374a786dc9 tags/1.0.0-rc4~11", "commitMessage": "Resolve #260 Fix column expression not auto aliased\n", "commitDateTime": "2016-08-24 08:53:18", "authoredDateTime": "2016-08-24 08:53:18", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/meta/AttributeDelegate.kt", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "requery-test/src/main/java/io/requery/test/FunctionalTest.java", "insertions": 15, "deletions": 0, "lines": 15}, {"filePath": "requery/src/main/java/io/requery/query/AliasedExpression.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/query/FieldExpression.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "requery/src/main/java/io/requery/query/OrderingExpression.java", "insertions": 6, "deletions": 4, "lines": 10}, {"filePath": "requery/src/main/java/io/requery/query/element/QueryElement.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/EntityReader.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/gen/DefaultOutput.java", "insertions": 7, "deletions": 3, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FunctionalTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.FunctionalTest.testQueryJoinOrderBy()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AliasedExpression.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.AliasedExpression.innerExpression()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "FieldExpression.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.FieldExpression.OrderExpression.getInnerExpression()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "OrderingExpression.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.getInnerExpression()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.NullOrder", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "QueryElement.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.element.QueryElement.fromExpressions()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityReader.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityReader.batchRefresh(java.lang.Iterable,io.requery.meta.Attribute[])", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DefaultOutput.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.gen.DefaultOutput.unwrapExpression(io.requery.query.Expression)", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.gen.DefaultOutput.appendColumn(io.requery.query.Expression)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fe7ea72a7b0783ca33f8efa13c03dc374a786dc9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 22, "deletions": 10, "lines": 32, "gitFilesChange": 7}, "spoonStatsSummary": {"TOT": 12, "UPD": 4, "INS": 4, "MOV": 3, "DEL": 1, "spoonFilesChanged": 6, "spoonMethodsChanged": 8}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/query", "requery/src/main/java/io/requery/sql", "requery/src/main/java/io/requery/query/element", "requery/src/main/java/io/requery/sql/gen", "requery-kotlin/src/main/kotlin/io/requery/meta/AttributeDelegate.kt"], "changesInPackagesSPOON": ["io.requery.query.element.QueryElement.fromExpressions()", "io.requery.query.getInnerExpression()", "io.requery.query.NullOrder", "io.requery.query.FieldExpression.OrderExpression.getInnerExpression()", "io.requery.sql.EntityReader.batchRefresh(java.lang.Iterable,io.requery.meta.Attribute[])", "io.requery.sql.gen.DefaultOutput.unwrapExpression(io.requery.query.Expression)", "io.requery.query.AliasedExpression.innerExpression()", "io.requery.sql.gen.DefaultOutput.appendColumn(io.requery.query.Expression)"]}, {"title": "Queries with kotlin do not work", "body": "When executing query:\n`val result = data select(Counterparty::class) where (CounterpartyEntity::id eq \"one\")`\n\nI'm getting this error:\n`kotlin.TypeCastException: null cannot be cast to non-null type io.requery.meta.AttributeDelegate<T, R>`\n\nFunction `findAttribute` in PropertyExtensions.kt searches attribute by name of the property. Attributes have uppercase name, and property has lowercase name. \n\nAfter changing `findAttribute` function implementation to user upperCase it worked as expected\n`val attribute: Attribute<*, *>? = type.attributes\n            .filter { attribute -> attribute.name.equals(property.name.toUpperCase()) }.firstOrNull()`\n", "url": "https://github.com/requery/requery/issues/255", "user": "low205", "labels": ["bug"], "created": "2016-08-18 19:42:17", "closed": "2016-08-19 06:35:40", "commits": {"9138d3198b70403f92b18d3e47ffdf480011939a": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "9138d3198b70403f92b18d3e47ffdf480011939a", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["310b073384725bde63947763d43edf57208711f3"], "nameRev": "9138d3198b70403f92b18d3e47ffdf480011939a tags/1.0.0-rc3~1", "commitMessage": "Resolve #255 Fix kotlin property to attribute matching\n", "commitDateTime": "2016-08-18 23:35:24", "authoredDateTime": "2016-08-18 23:35:24", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/kotlin/PropertyExtensions.kt", "insertions": 4, "deletions": 2, "lines": 6}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9138d3198b70403f92b18d3e47ffdf480011939a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 2, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/kotlin/PropertyExtensions.kt"]}, {"title": "Processor tries to annotate static fields with @NotNull, fails", "body": "Kotlin static interface fields cause `NotNull not applicable to static or final member` error.\n\n```\n@Entity\ninterface Thing : Persistable, Observable, Parcelable {\n    @get:Key @get:Generated\n    var id : Int\n\n    companion object {\n        const val THING_CONSTANT = \"something\"\n    }\n}\n```\n\nI haven't tried with Java.\n", "url": "https://github.com/requery/requery/issues/253", "user": "consp1racy", "labels": ["bug"], "created": "2016-08-17 18:45:30", "closed": "2016-08-18 04:59:41", "commits": {"f52155dfad50667a597ca2b33347795698f8bc15": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f52155dfad50667a597ca2b33347795698f8bc15", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["380b3022c197e40f967593f76a29c1c04c490c7b"], "nameRev": "f52155dfad50667a597ca2b33347795698f8bc15 tags/1.0.0-rc3~4", "commitMessage": "Resolve #253 Remove error on non-requery annotations in static final fields\n", "commitDateTime": "2016-08-17 21:59:22", "authoredDateTime": "2016-08-17 21:59:22", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 6, "deletions": 2, "lines": 8}, {"filePath": "requery-test/kotlin-test/src/main/kotlin/io/requery/test/kt/Address.kt", "insertions": 4, "deletions": 0, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.addAnnotationElement(javax.lang.model.element.TypeElement,javax.lang.model.element.Element)", "TOT": 6, "UPD": 1, "INS": 1, "MOV": 3, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f52155dfad50667a597ca2b33347795698f8bc15"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 2, "lines": 12, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 6, "UPD": 1, "INS": 1, "MOV": 3, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor", "requery-test/kotlin-test/src/main/kotlin/io/requery/test/kt/Address.kt"], "changesInPackagesSPOON": ["io.requery.processor.EntityType.addAnnotationElement(javax.lang.model.element.TypeElement,javax.lang.model.element.Element)"]}, {"title": "Allow adding a UNIQUE constraint across multiple columns", "body": "SQL allows applying a UNIQUE constraint across multiple columns on tables ([see](http://stackoverflow.com/a/2701903/1502352)). I don't think there's a way to express that in requery yet, but there probably should be.\n\nIf you could please confirm whether there's a way to do this currently, I could look into implementing this if it's not already possible.\n", "url": "https://github.com/requery/requery/issues/252", "user": "cbruegg", "labels": ["bug"], "created": "2016-08-17 18:18:35", "closed": "2016-10-18 06:37:40", "commits": {"27a966da80b5f8070253f042738306bb3b3bae7c": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "64c3e74193a4edcdbd1512e71854990a2f27ec28": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 61.000277777777775, "commitsDetails": [{"commitHash": "27a966da80b5f8070253f042738306bb3b3bae7c", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["f52155dfad50667a597ca2b33347795698f8bc15"], "nameRev": "27a966da80b5f8070253f042738306bb3b3bae7c tags/1.0.0-rc3~3", "commitMessage": "Resolve #252 Fix unique constraint on multiple column index\n", "commitDateTime": "2016-08-18 08:52:22", "authoredDateTime": "2016-08-18 08:52:22", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/SchemaModifier.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SchemaModifier.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SchemaModifier.createIndex(io.requery.sql.QueryBuilder,java.lang.String,java.util.Set,io.requery.meta.Type,io.requery.sql.TableCreationMode)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "64c3e74193a4edcdbd1512e71854990a2f27ec28", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["397f3f294819cc8335cde33cda37938aea949be3"], "nameRev": "64c3e74193a4edcdbd1512e71854990a2f27ec28 tags/1.0.1~12", "commitMessage": "Resolve #252 Support unique multi column index\n", "commitDateTime": "2016-10-17 23:41:10", "authoredDateTime": "2016-10-17 23:41:10", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityDescriptor.java", "insertions": 6, "deletions": 1, "lines": 7}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityMetaGenerator.java", "insertions": 10, "deletions": 1, "lines": 11}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 15, "deletions": 0, "lines": 15}, {"filePath": "requery/src/main/java/io/requery/Table.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "requery/src/main/java/io/requery/meta/BaseType.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "requery/src/main/java/io/requery/meta/Type.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "requery/src/main/java/io/requery/meta/TypeBuilder.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "requery/src/main/java/io/requery/sql/SchemaModifier.java", "insertions": 4, "deletions": 1, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityDescriptor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.tableUniqueIndexes()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityMetaGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generateType(com.squareup.javapoet.TypeSpec$Builder,com.squareup.javapoet.TypeName)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.isImmutable()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.tableUniqueIndexes()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Table.java", "spoonMethods": [{"spoonMethodName": "io.requery.uniqueIndexes()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "BaseType.java", "spoonMethods": [{"spoonMethodName": "io.requery.meta.BaseType", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.meta.BaseType.getTableUniqueIndexes()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Type.java", "spoonMethods": [{"spoonMethodName": "io.requery.meta.getTableUniqueIndexes()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TypeBuilder.java", "spoonMethods": [{"spoonMethodName": "io.requery.meta.TypeBuilder.setTableUniqueIndexes(java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SchemaModifier.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SchemaModifier.createIndex(io.requery.sql.QueryBuilder,java.lang.String,java.util.Set,io.requery.meta.Type,io.requery.sql.TableCreationMode)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["27a966da80b5f8070253f042738306bb3b3bae7c", "64c3e74193a4edcdbd1512e71854990a2f27ec28"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 58, "deletions": 4, "lines": 62, "gitFilesChange": 8}, "spoonStatsSummary": {"TOT": 14, "UPD": 2, "INS": 9, "MOV": 2, "DEL": 1, "spoonFilesChanged": 8, "spoonMethodsChanged": 10}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery-processor/src/main/java/io/requery/processor", "requery/src/main/java/io/requery/meta", "requery/src/main/java/io/requery"], "changesInPackagesSPOON": ["io.requery.sql.SchemaModifier.createIndex(io.requery.sql.QueryBuilder,java.lang.String,java.util.Set,io.requery.meta.Type,io.requery.sql.TableCreationMode)", "io.requery.meta.BaseType.getTableUniqueIndexes()", "io.requery.processor.EntityMetaGenerator.generateType(com.squareup.javapoet.TypeSpec$Builder,com.squareup.javapoet.TypeName)", "io.requery.uniqueIndexes()", "io.requery.processor.EntityType.isImmutable()", "io.requery.processor.tableUniqueIndexes()", "io.requery.meta.TypeBuilder.setTableUniqueIndexes(java.lang.String[])", "io.requery.meta.getTableUniqueIndexes()", "io.requery.meta.BaseType", "io.requery.processor.EntityType.tableUniqueIndexes()"]}, {"title": "Repeated @Embedded fields conflict", "body": "When specifying two fields in the same class with the same `@Embeddable` reference, the generated embedded fields conflict (and the code generator errors).\n\nMinimal example:\n\n```\n@AutoValue\n@Entity\npublic abstract class Bike {\n\n    @AutoValue.Builder\n    public static abstract class Builder {\n        public abstract Builder setSeat(Seat seat);\n        public abstract Builder setSecondSeat(Seat secondSeat);\n        public abstract Bike build();\n    }\n\n    public static Builder builder() {\n        return new AutoValue_Bike.Builder();\n    }\n\n    @Embedded\n    public abstract Seat getSeat();\n    @Embedded\n    public abstract Seat getSecondSeat();\n}\n```\n\n```\n@AutoValue\n@Embeddable\npublic abstract class Seat {\n\n    @AutoValue.Builder\n    public static abstract class Builder {\n        public abstract Builder setMake(String name);\n        public abstract Builder setYear(int year);\n        public abstract Seat build();\n    }\n\n    public static Builder builder() {\n        return new AutoValue_Seat.Builder();\n    }\n\n    public abstract String getMake();\n    public abstract int getYear();\n}\n```\n\nWhen attempting to build this, it attempts to recreate the `BikeType_SeatType` generated class (crashes). Further, the fields `make` and `year` are not namespaced, leading to a conflict.\n\nExpected:\n1. `Bike_SeatType` crash doesn't happen\n2. Embedded fields are namespaced so they can be repeatedly composed.\n\nI attempted to put together a PR but got over my head in `EntityGenerator.generateAttribute`, so opening an issue instead.\n", "url": "https://github.com/requery/requery/issues/232", "user": "objcode", "labels": ["bug", "enhancement"], "created": "2016-07-25 17:38:04", "closed": "2016-11-06 02:57:21", "commits": {"3e6ae56395a6034c05a727359354a0092cee1a4a": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 103.00027777777778, "commitsDetails": [{"commitHash": "3e6ae56395a6034c05a727359354a0092cee1a4a", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["e59b1b74c584f3f0d495a939b4e025f2cfa442f1"], "nameRev": "3e6ae56395a6034c05a727359354a0092cee1a4a tags/1.0.2~16", "commitMessage": "Resolve #232 Support repeated @Embedded fields (#326)\n\n", "commitDateTime": "2016-11-05 19:57:19", "authoredDateTime": "2016-11-06 11:57:19", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 32, "deletions": 2, "lines": 34}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityMetaGenerator.java", "insertions": 24, "deletions": 10, "lines": 34}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityPartGenerator.java", "insertions": 25, "deletions": 0, "lines": 25}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateImmutableTypeBuildMethod(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityGenerator.generateProxyMethods(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 6, "UPD": 0, "INS": 4, "MOV": 0, "DEL": 2}, {"spoonMethodName": "io.requery.processor.EntityGenerator.generateMembers(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityMetaGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generateEmbedded(io.requery.processor.AttributeDescriptor,io.requery.processor.EntityDescriptor,com.squareup.javapoet.TypeSpec$Builder,com.squareup.javapoet.TypeName)", "TOT": 5, "UPD": 4, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.type.TypeMirror,boolean)", "TOT": 10, "UPD": 2, "INS": 3, "MOV": 3, "DEL": 2}, {"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generate(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 3, "UPD": 1, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityMetaGenerator.generateEmbeddedEntity(io.requery.processor.EntityDescriptor)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityPartGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityPartGenerator.attributeFieldName(io.requery.processor.AttributeDescriptor)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityPartGenerator.embeddedAttributeName(io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityPartGenerator.resolveAttributeType(io.requery.processor.AttributeDescriptor)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "where.and query w/ two notLike conditions doesn't work?", "body": "I have a query that looks like this:\n\n```\n\nList<Stops> stops = mDataStore.select(Stops.class)\n                            .where(StopsEntity.TAG.notLike(\"hubway_%\")\n                            .and(StopsEntity.TAG.notLike(\"%_ar\")))\n                            .orderBy(StopsEntity.LAT, StopsEntity.LON)\n                            .get().toList();\n```\n\nRemove the .and condition and it works fine.  Leave it in and I get this cryptic compile time error: \n\n```\nError:(55, 29) error: method where in interface Where<E> cannot be applied to given types;\nrequired: Condition<V,?>\nfound: LogicalCondition<CAP#1,CAP#2>\nreason: inferred type does not conform to equality constraint(s)\ninferred: CAP#3\nequality constraints(s): CAP#3,CAP#4\nwhere V,E are type-variables:\nV extends Object declared in method <V>where(Condition<V,?>)\nE extends Object declared in interface Where\nwhere CAP#1,CAP#2,CAP#3,CAP#4 are fresh type-variables:\nCAP#1 extends Object from capture of ?\nCAP#2 extends Object from capture of ?\nCAP#3 extends Object from capture of ?\nCAP#4 extends Object from capture of ?\n\n```\n", "url": "https://github.com/requery/requery/issues/229", "user": "kenyee", "labels": ["bug"], "created": "2016-07-21 15:46:28", "closed": "2016-08-21 03:41:16", "commits": {"d0c6e8ccd92d525bfe3ef2de4887c6358e607b2b": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 30.00027777777778, "commitsDetails": [{"commitHash": "d0c6e8ccd92d525bfe3ef2de4887c6358e607b2b", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["7350dcbb9c1c7a4b443b3d4a8ccbe88c6d53f7fc"], "nameRev": "d0c6e8ccd92d525bfe3ef2de4887c6358e607b2b tags/1.0.0-rc4~14", "commitMessage": "Resolve #229 Fix javac 'inferred type does not conform to equality constraint' error\n", "commitDateTime": "2016-08-20 20:41:08", "authoredDateTime": "2016-08-20 20:40:36", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/query/FieldExpression.java", "insertions": 8, "deletions": 4, "lines": 12}, {"filePath": "requery/src/main/java/io/requery/query/LogicalCondition.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FieldExpression.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.FieldExpression.ExpressionCondition.and(io.requery.query.Condition)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.FieldExpression.ExpressionCondition.or(io.requery.query.Condition)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "LogicalCondition.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d0c6e8ccd92d525bfe3ef2de4887c6358e607b2b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 10, "deletions": 5, "lines": 15, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/query"], "changesInPackagesSPOON": ["io.requery.query.FieldExpression.ExpressionCondition.or(io.requery.query.Condition)", "io.requery.query.FieldExpression.ExpressionCondition.and(io.requery.query.Condition)"]}, {"title": "dex2oat fails in runtime", "body": "## Given\n- Any Android OS with ART\n- multidex enabled 1.0.1\n- compile 'io.requery:requery:1.0.0-rc2'\n- compile 'io.requery:requery-android:1.0.0-rc2'\n- compile 'io.requery:requery-kotlin:1.0.0-rc2'\n- kapt 'io.requery:requery-processor:1.0.0-rc2'\n- kotlin 1.0.3\n## Description\n\nWhile using Kotlin data store, the application compiles but installing the app fails with\n\n```\n4425 KB/s (43996204 bytes in 9.708s)\n    pkg: /data/local/tmp/app-debug.apk\nFailure [INSTALL_FAILED_DEXOPT]\n```\n\nOn the ADB console I can see:\n\n```\n07-21 13:17:33.823 5484-5484 E/dex2oat: Failed to open dex from file descriptor for zip file '/data/app/my.package-1/base.apk': Failure to verify dex file '/data/app/my.package-1/base.apk': Invalid method name: '!='\n07-21 13:17:33.923 1250-4008 I/art: Explicit concurrent mark sweep GC freed 115598(4MB) AllocSpace objects, 33(1612KB) LOS objects, 32% free, 65MB/97MB, paused 2.995ms total 207.774ms\n07-21 13:17:34.013 5127-5488 I/art: Explicit concurrent mark sweep GC freed 136267(6MB) AllocSpace objects, 0(0B) LOS objects, 35% free, 29MB/45MB, paused 483us total 54.522ms\n07-21 13:17:34.033 474-474 E/installd: DexInv: --- END '/data/app/my.package-1/base.apk' --- status=0x0100, process failed\n07-21 13:17:34.043 1250-1337 W/PackageManager: Package couldn't be installed in /data/app/my.package-1\n                                               com.android.server.pm.PackageManagerException: scanPackageLI\n                                                   at com.android.server.pm.PackageManagerService.scanPackageDirtyLI(PackageManagerService.java:7180)\n                                                   at com.android.server.pm.PackageManagerService.scanPackageLI(PackageManagerService.java:6463)\n                                                   at com.android.server.pm.PackageManagerService.installNewPackageLI(PackageManagerService.java:11738)\n                                                   at com.android.server.pm.PackageManagerService.installPackageLI(PackageManagerService.java:12329)\n                                                   at com.android.server.pm.PackageManagerService.access$2700(PackageManagerService.java:275)\n                                                   at com.android.server.pm.PackageManagerService$8.run(PackageManagerService.java:10074)\n                                                   at android.os.Handler.handleCallback(Handler.java:739)\n                                                   at android.os.Handler.dispatchMessage(Handler.java:95)\n                                                   at android.os.Looper.loop(Looper.java:135)\n                                                   at android.os.HandlerThread.run(HandlerThread.java:61)\n                                                   at com.android.server.ServiceThread.run(ServiceThread.java:46)\n\n```\n\nLooks like `Conditional` interface method `!=` causes some issues.\n", "url": "https://github.com/requery/requery/issues/227", "user": "uKL", "labels": ["bug"], "created": "2016-07-21 11:32:41", "closed": "2016-07-22 05:20:21", "commits": {"b9c707fef0844b9eaf6ade102d84db82be89822f": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "b9c707fef0844b9eaf6ade102d84db82be89822f", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["98204c28af2d92dfacf48ea856e3fce05d5b80f4"], "nameRev": "b9c707fef0844b9eaf6ade102d84db82be89822f tags/1.0.0-rc3~22", "commitMessage": "Resolve #227 Remove methods incompatible with Android ART\n", "commitDateTime": "2016-07-21 21:56:59", "authoredDateTime": "2016-07-21 21:56:59", "commitGitStats": [{"filePath": "requery-kotlin/src/main/kotlin/io/requery/kotlin/Query.kt", "insertions": 0, "deletions": 9, "lines": 9}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b9c707fef0844b9eaf6ade102d84db82be89822f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 0, "deletions": 9, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-kotlin/src/main/kotlin/io/requery/kotlin/Query.kt"]}, {"title": "@Transient should throw error when used inside interface or define the store/methods.", "body": "When defining an entity like so:\n\n@Entity\npublic interface Person {\n  @Transient\n  Double getWeight();\n  @Transient\n  void setWeight(Double value);\n}\n\nYou'll get a compile time error of: \"PersonEntity is not abstract and does not override abstract method setWeight(double) in Person.\"\n\nIf @Transient cannot be used in an interface, it should throw an error when used there.  Or Requery should generate the field/methods defined by @Transient.\n", "url": "https://github.com/requery/requery/issues/225", "user": "kenyee", "labels": ["bug"], "created": "2016-07-20 20:24:15", "closed": "2016-07-21 04:58:57", "commits": {"69f913f08205bb45dd5649a1d60016c03cf3977b": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "69f913f08205bb45dd5649a1d60016c03cf3977b", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["df1eb3f0295a66e0217dcdd714965c4ccb83dcba"], "nameRev": "69f913f08205bb45dd5649a1d60016c03cf3977b tags/1.0.0-rc2~1", "commitMessage": "Resolve #225 Fix transient property not generated when used on an interface type\n", "commitDateTime": "2016-07-20 21:56:55", "authoredDateTime": "2016-07-20 21:56:55", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 6, "deletions": 4, "lines": 10}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 0, "deletions": 2, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateType(com.squareup.javapoet.TypeSpec$Builder,com.squareup.javapoet.TypeName)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityGenerator.generateImmutableTypeBuildMethod(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityGenerator.generateMembers(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 9, "UPD": 1, "INS": 2, "MOV": 5, "DEL": 1}]}, {"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)", "TOT": 9, "UPD": 2, "INS": 1, "MOV": 4, "DEL": 2}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["69f913f08205bb45dd5649a1d60016c03cf3977b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 6, "lines": 12, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 21, "UPD": 6, "INS": 3, "MOV": 9, "DEL": 3, "spoonFilesChanged": 2, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityGenerator.generateType(com.squareup.javapoet.TypeSpec$Builder,com.squareup.javapoet.TypeName)", "io.requery.processor.EntityGenerator.generateImmutableTypeBuildMethod(com.squareup.javapoet.TypeSpec$Builder)", "io.requery.processor.EntityGenerator.generateMembers(com.squareup.javapoet.TypeSpec$Builder)", "io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)"]}, {"title": "Need an example of @JunctionTable where column names are specified", "body": "I'm trying 1.0.0-rc1, but this still doesn't seem to have support for this (at least I couldn't find an example in the repo).\n\nThe DB schema looks like this:\n\n```\nCREATE TABLE routes (route STRING PRIMARY KEY, color INTEGER, oppositecolor INTEGER, pathblob BLOB, listorder INTEGER, agencyid INTEGER, routetitle STRING);\nCREATE TABLE stopmapping (route STRING, tag STRING, PRIMARY KEY (route, tag));\nCREATE TABLE stops (tag STRING PRIMARY KEY, lat FLOAT, lon FLOAT, title STRING, parent STRING);\n```\n\nThe Stops interface includes this:\n\n```\n    @JunctionTable(name=\"stopmapping\")\n    @ManyToMany\n    Set<Routes> getRoutes();\n```\n\nThe Routes interface includes this:\n\n```\n    @ManyToMany\n    Set<Stops> getStops();\n```\n\n@JunctionTable appears to be able to take a columns parameter but I can't figure out what to put into it.  I tried doing \n\n`columns = { \"route\", \"tag\"}`\n\nbut it wanted Column data types, so I also tried this, but it wanted constants:\n\n`columns = { RouteEntity.ROUTE, StopsEntity.TAG }`\n\nNeither seem to work because when I do StopsEntity.getRoutes(), it tries using routesId and stopsId for the column names instead of route and tag :-(\n", "url": "https://github.com/requery/requery/issues/222", "user": "kenyee", "labels": ["bug"], "created": "2016-07-19 02:19:47", "closed": "2016-07-21 04:58:56", "commits": {"9c70d80f4f8f5b71f8301902f26f38cd7f0b27b4": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "9c70d80f4f8f5b71f8301902f26f38cd7f0b27b4", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["0509a134ec92f279ce756d0ebfbe112db1a0bfec"], "nameRev": "9c70d80f4f8f5b71f8301902f26f38cd7f0b27b4 tags/1.0.0-rc2~3", "commitMessage": "Resolve #222 Fix referencedColumn attribute not used in generated join entity\n", "commitDateTime": "2016-07-20 21:36:26", "authoredDateTime": "2016-07-20 21:36:26", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/AssociativeReference.java", "insertions": 11, "deletions": 3, "lines": 14}, {"filePath": "requery-processor/src/main/java/io/requery/processor/JoinEntityGenerator.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "requery-processor/src/main/java/io/requery/processor/JoinTableAssociation.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "requery-processor/src/main/java/io/requery/processor/JunctionTableAssociation.java", "insertions": 34, "deletions": 18, "lines": 52}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AssociativeReference.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.AssociativeReference", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.processor.AssociativeReference.referencedColumn()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.AssociativeReference.hashCode()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.AssociativeReference.equals(java.lang.Object)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JoinEntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.JoinEntityGenerator.generate()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "JoinTableAssociation.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.JoinTableAssociation", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JunctionTableAssociation.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.JunctionTableAssociation", "TOT": 42, "UPD": 14, "INS": 7, "MOV": 17, "DEL": 4}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9c70d80f4f8f5b71f8301902f26f38cd7f0b27b4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 51, "deletions": 23, "lines": 74, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 55, "UPD": 14, "INS": 17, "MOV": 20, "DEL": 4, "spoonFilesChanged": 4, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.JoinTableAssociation", "io.requery.processor.JunctionTableAssociation", "io.requery.processor.AssociativeReference", "io.requery.processor.AssociativeReference.referencedColumn()", "io.requery.processor.AssociativeReference.hashCode()", "io.requery.processor.AssociativeReference.equals(java.lang.Object)", "io.requery.processor.JoinEntityGenerator.generate()"]}, {"title": "Kotlin @Superclass inheritance not working as expected", "body": "The following interfaces:\n\n``` kotlin\n@Superclass\ninterface BaseModel {\n  @get:Key\n  @get:Column(unique = true, nullable = false) //Not sure if this is needed, error is same with/without\n  var id: UUID\n}\n```\n\nand:\n\n``` kotlin\n@Entity\ninterface User : BaseModel, Persistable {\n  var username: String\n  var password: String\n}\n```\n\nResults in the generated class throwing this error when compiled: \n`UserEntity is not abstract and does not override abstract method setId(UUID) in BaseModel`\n", "url": "https://github.com/requery/requery/issues/221", "user": "trevjonez", "labels": ["bug"], "created": "2016-07-19 01:17:44", "closed": "2016-07-19 06:37:51", "commits": {"0509a134ec92f279ce756d0ebfbe112db1a0bfec": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "0509a134ec92f279ce756d0ebfbe112db1a0bfec", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["196a3b7a6f4278cb151cf38dd91a6611babfdaa9"], "nameRev": "0509a134ec92f279ce756d0ebfbe112db1a0bfec tags/1.0.0-rc2~4", "commitMessage": "Resolve #221 @Superclass handled for interface types\n", "commitDateTime": "2016-07-18 23:37:38", "authoredDateTime": "2016-07-18 23:37:38", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityProcessor.java", "insertions": 23, "deletions": 8, "lines": 31}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityProcessor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityProcessor.mergeSuperType(io.requery.processor.EntityType,javax.lang.model.element.TypeElement)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "TOT": 5, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 0}]}, {"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.process(javax.annotation.processing.ProcessingEnvironment)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0509a134ec92f279ce756d0ebfbe112db1a0bfec"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 24, "deletions": 9, "lines": 33, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 8, "UPD": 0, "INS": 4, "MOV": 4, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityProcessor.mergeSuperType(io.requery.processor.EntityType,javax.lang.model.element.TypeElement)", "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "io.requery.processor.EntityType.process(javax.annotation.processing.ProcessingEnvironment)"]}, {"title": "Can't compile after adding a Junction Table type.", "body": "I am using requery's release 1.0.0-rc1\n\nMy Entities are like this:\n\n``` java\n@Entity abstract class Item implements Parcelable {\n  @Key @Generated int id;\n\n  @JunctionTable(type = ItemPurchase.class) @ManyToMany List<Purchase> purchases;\n\n  long code;\n\n  String brand;\n\n  String category;\n\n  String size;\n\n  String description;\n\n  float price;\n\n  int quantity;\n}\n```\n\n``` java\n@Entity abstract class Purchase implements Parcelable {\n  @Key @Generated int id;\n\n  @ManyToMany List<Item> items;\n\n  String paymentType;\n\n  float totalPrice;\n\n  int totalItemQuantityPurchased;\n\n  Date purchaseDate;\n}\n```\n\n``` java\n@Entity abstract class ItemPurchase {\n  @ForeignKey(references = Item.class) @Key int itemId;\n  @ForeignKey(references = Purchase.class) @Key int itemPurchase;\n\n  int itemQuantityPurchased;\n}\n```\n\nWhenever I add:\n\n> @JunctionTable(type = ItemPurchase.class)\n\nI can't compile my code. When I run with --stacktrace option I get the following message:\n\n```\norg.gradle.api.tasks.TaskExecutionException: Execution failed for task ':app:compileDebugJavaWithJavac'.\n    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69)\n    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46)\n    at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35)\n    at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:64)\n    at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)\n    at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:52)\n    at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52)\n    at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53)\n    at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)\n    at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:203)\n    at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:185)\n    at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:66)\n    at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:50)\n    at org.gradle.execution.taskgraph.DefaultTaskPlanExecutor.process(DefaultTaskPlanExecutor.java:25)\n    at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter.execute(DefaultTaskGraphExecuter.java:110)\n    at org.gradle.execution.SelectedTaskExecutionAction.execute(SelectedTaskExecutionAction.java:37)\n    at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37)\n    at org.gradle.execution.DefaultBuildExecuter.access$000(DefaultBuildExecuter.java:23)\n    at org.gradle.execution.DefaultBuildExecuter$1.proceed(DefaultBuildExecuter.java:43)\n    at org.gradle.execution.DryRunBuildExecutionAction.execute(DryRunBuildExecutionAction.java:32)\n    at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:37)\n    at org.gradle.execution.DefaultBuildExecuter.execute(DefaultBuildExecuter.java:30)\n    at org.gradle.initialization.DefaultGradleLauncher$4.run(DefaultGradleLauncher.java:154)\n    at org.gradle.internal.Factories$1.create(Factories.java:22)\n    at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)\n    at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:52)\n    at org.gradle.initialization.DefaultGradleLauncher.doBuildStages(DefaultGradleLauncher.java:151)\n    at org.gradle.initialization.DefaultGradleLauncher.access$200(DefaultGradleLauncher.java:32)\n    at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:99)\n    at org.gradle.initialization.DefaultGradleLauncher$1.create(DefaultGradleLauncher.java:93)\n    at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:90)\n    at org.gradle.internal.progress.DefaultBuildOperationExecutor.run(DefaultBuildOperationExecutor.java:62)\n    at org.gradle.initialization.DefaultGradleLauncher.doBuild(DefaultGradleLauncher.java:93)\n    at org.gradle.initialization.DefaultGradleLauncher.run(DefaultGradleLauncher.java:82)\n    at org.gradle.launcher.exec.InProcessBuildActionExecuter$DefaultBuildController.run(InProcessBuildActionExecuter.java:94)\n    at org.gradle.tooling.internal.provider.runner.BuildModelActionRunner.run(BuildModelActionRunner.java:46)\n    at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\n    at org.gradle.tooling.internal.provider.runner.SubscribableBuildActionRunner.run(SubscribableBuildActionRunner.java:58)\n    at org.gradle.launcher.exec.ChainingBuildActionRunner.run(ChainingBuildActionRunner.java:35)\n    at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:43)\n    at org.gradle.launcher.exec.InProcessBuildActionExecuter.execute(InProcessBuildActionExecuter.java:28)\n    at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:78)\n    at org.gradle.launcher.exec.ContinuousBuildActionExecuter.execute(ContinuousBuildActionExecuter.java:48)\n    at org.gradle.launcher.daemon.server.exec.ExecuteBuild.doBuild(ExecuteBuild.java:52)\n    at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n    at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n    at org.gradle.launcher.daemon.server.exec.WatchForDisconnection.execute(WatchForDisconnection.java:37)\n    at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n    at org.gradle.launcher.daemon.server.exec.ResetDeprecationLogger.execute(ResetDeprecationLogger.java:26)\n    at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n    at org.gradle.launcher.daemon.server.exec.RequestStopIfSingleUsedDaemon.execute(RequestStopIfSingleUsedDaemon.java:34)\n    at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n    at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:74)\n    at org.gradle.launcher.daemon.server.exec.ForwardClientInput$2.call(ForwardClientInput.java:72)\n    at org.gradle.util.Swapper.swap(Swapper.java:38)\n    at org.gradle.launcher.daemon.server.exec.ForwardClientInput.execute(ForwardClientInput.java:72)\n    at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n    at org.gradle.launcher.daemon.server.health.DaemonHealthTracker.execute(DaemonHealthTracker.java:47)\n    at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n    at org.gradle.launcher.daemon.server.exec.LogToClient.doBuild(LogToClient.java:66)\n    at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n    at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n    at org.gradle.launcher.daemon.server.exec.EstablishBuildEnvironment.doBuild(EstablishBuildEnvironment.java:72)\n    at org.gradle.launcher.daemon.server.exec.BuildCommandOnly.execute(BuildCommandOnly.java:36)\n    at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n    at org.gradle.launcher.daemon.server.health.HintGCAfterBuild.execute(HintGCAfterBuild.java:41)\n    at org.gradle.launcher.daemon.server.api.DaemonCommandExecution.proceed(DaemonCommandExecution.java:120)\n    at org.gradle.launcher.daemon.server.exec.StartBuildOrRespondWithBusy$1.run(StartBuildOrRespondWithBusy.java:50)\n    at org.gradle.launcher.daemon.server.DaemonStateCoordinator$1.run(DaemonStateCoordinator.java:246)\n    at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)\n    at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)\nCaused by: java.lang.RuntimeException: java.lang.IllegalArgumentException: couldn't make a guess for \n    at com.sun.tools.javac.main.Main.compile(Main.java:553)\n    at com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:129)\n    at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:138)\n    at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:45)\n    at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:33)\n    at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.delegateAndHandleErrors(NormalizingJavaCompiler.java:101)\n    at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:50)\n    at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:36)\n    at org.gradle.api.internal.tasks.compile.CleaningJavaCompilerSupport.execute(CleaningJavaCompilerSupport.java:34)\n    at org.gradle.api.internal.tasks.compile.CleaningJavaCompilerSupport.execute(CleaningJavaCompilerSupport.java:25)\n    at org.gradle.api.tasks.compile.JavaCompile.performCompilation(JavaCompile.java:157)\n    at org.gradle.api.tasks.compile.JavaCompile.compile(JavaCompile.java:139)\n    at org.gradle.api.tasks.compile.JavaCompile.compile(JavaCompile.java:93)\n    at com.android.build.gradle.tasks.factory.AndroidJavaCompile.compile(AndroidJavaCompile.java:49)\n    at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:75)\n    at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$IncrementalTaskAction.doExecute(AnnotationProcessingTaskFactory.java:244)\n    at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:220)\n    at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$IncrementalTaskAction.execute(AnnotationProcessingTaskFactory.java:231)\n    at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:209)\n    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:80)\n    at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:61)\n    ... 70 more\nCaused by: java.lang.IllegalArgumentException: couldn't make a guess for \n    at io.requery.com.squareup.javapoet.Util.checkArgument(Util.java:64)\n    at io.requery.com.squareup.javapoet.ClassName.bestGuess(ClassName.java:159)\n    at io.requery.processor.EntityNameResolver.joinEntityName(EntityNameResolver.java:68)\n    at io.requery.processor.EntityGenerator.lambda$generateJunctionType$27(EntityGenerator.java:823)\n    at io.requery.processor.EntityGenerator.generateJunctionType(EntityGenerator.java:823)\n    at io.requery.processor.EntityGenerator.lambda$generateAttribute$25(EntityGenerator.java:754)\n    at io.requery.processor.EntityGenerator.generateAttribute(EntityGenerator.java:749)\n    at io.requery.processor.EntityGenerator.lambda$generateStaticMetadata$16(EntityGenerator.java:551)\n    at io.requery.processor.EntityGenerator.generateStaticMetadata(EntityGenerator.java:528)\n    at io.requery.processor.EntityGenerator.generate(EntityGenerator.java:148)\n    at io.requery.processor.EntityProcessor.process(EntityProcessor.java:191)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:794)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:705)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$1800(JavacProcessingEnvironment.java:91)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1035)\n    at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1176)\n    at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1170)\n    at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:856)\n    at com.sun.tools.javac.main.Main.compile(Main.java:523)\n    ... 90 more\n```\n", "url": "https://github.com/requery/requery/issues/219", "user": "ghost", "labels": ["bug"], "created": "2016-07-14 16:27:23", "closed": "2016-07-15 03:14:42", "commits": {"d07b977e00d6781ec63e0131e1a9e6681aa41421": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "d07b977e00d6781ec63e0131e1a9e6681aa41421", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["7f37fb5ac0f78632f86d6939bd471e7c0fc4a78a"], "nameRev": "d07b977e00d6781ec63e0131e1a9e6681aa41421 tags/1.0.0-rc2~8", "commitMessage": "Resolve #219 Fix missing typename when defining JunctionTable.type()\n", "commitDateTime": "2016-07-14 20:05:32", "authoredDateTime": "2016-07-14 20:05:32", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 13, "deletions": 8, "lines": 21}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateJunctionType(io.requery.processor.AttributeDescriptor,io.requery.processor.EntityDescriptor,java.util.Set)", "TOT": 25, "UPD": 6, "INS": 6, "MOV": 10, "DEL": 3}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d07b977e00d6781ec63e0131e1a9e6681aa41421"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 8, "lines": 21, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 25, "UPD": 6, "INS": 6, "MOV": 10, "DEL": 3, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityGenerator.generateJunctionType(io.requery.processor.AttributeDescriptor,io.requery.processor.EntityDescriptor,java.util.Set)"]}, {"title": "AutoValue Entity: Map<String, List<Package>> fails", "body": "I have a method:\n\n`public abstract Map<String, List<Package>> promos();`\n\nbut the generated code (see below) of requery won't compile.\n\n``` java\npublic static final QueryAttribute<FeatureFlags, Map<String, List<FeatureFlags.Package>>> PROMOS = \n    new MapAttributeBuilder<FeatureFlags, Map<String, List<FeatureFlags.Package>>, String, List<FeatureFlags.Package>>(\"promos\", Map.class, String.class, List<FeatureFlags.Package>.class)\n```\n\nThe problem lies in this `List<FeatureFlags.Package>.class`\n\nI'm using beta18 version. Is there any way to work around this?\n", "url": "https://github.com/requery/requery/issues/212", "user": "vanniktech", "labels": ["bug"], "created": "2016-06-30 15:51:12", "closed": "2016-07-06 05:23:53", "commits": {"ceaddc52df69717597e5eaf5acd85ae6ade7277c": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "ceaddc52df69717597e5eaf5acd85ae6ade7277c", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["37a23a71b72dfb535fdd7f67cb327f9191521e37"], "nameRev": "ceaddc52df69717597e5eaf5acd85ae6ade7277c tags/1.0.0-rc1~3", "commitMessage": "Resolve #212 Don't use map attribute builder for non relational map\n", "commitDateTime": "2016-07-05 22:23:44", "authoredDateTime": "2016-07-05 22:23:44", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/AttributeMember.java", "insertions": 1, "deletions": 2, "lines": 3}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AttributeMember.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.AttributeMember.checkMemberType(javax.annotation.processing.ProcessingEnvironment,javax.lang.model.type.TypeMirror,java.util.Set)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.type.TypeMirror,boolean,io.requery.processor.AttributeDescriptor)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ceaddc52df69717597e5eaf5acd85ae6ade7277c"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 3, "lines": 5, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.type.TypeMirror,boolean,io.requery.processor.AttributeDescriptor)", "io.requery.processor.AttributeMember.checkMemberType(javax.annotation.processing.ProcessingEnvironment,javax.lang.model.type.TypeMirror,java.util.Set)"]}, {"title": "Entity is not abstract and does not override abstract method", "body": "``` java\n@Entity\npublic interface Category extends Parcelable, Persistable {\n\n    @Key\n    String getTitle();\n\n    void setTitle(String title);\n\n    @ManyToOne\n    Category getParent();\n\n}\n```\n\nError:(26, 8) error: CategoryEntity is not abstract and does not override abstract method getParent() in Category\n", "url": "https://github.com/requery/requery/issues/206", "user": "OHoussein", "labels": ["bug"], "created": "2016-06-25 01:20:18", "closed": "2016-06-25 17:15:16", "commits": {"73b11a063693d57fc7972cb4ee44986c8f97c67f": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "73b11a063693d57fc7972cb4ee44986c8f97c67f", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["31ee3449605040697ee9dafa8765cf437c2da8dd"], "nameRev": "73b11a063693d57fc7972cb4ee44986c8f97c67f tags/1.0.0-rc1~23", "commitMessage": "Resolve #206 Fix self referencing entity relationship attribute\n", "commitDateTime": "2016-06-25 10:02:57", "authoredDateTime": "2016-06-25 10:02:57", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 9, "deletions": 18, "lines": 27}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.computeAttribute(javax.lang.model.element.Element)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["73b11a063693d57fc7972cb4ee44986c8f97c67f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 18, "lines": 27, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityType.computeAttribute(javax.lang.model.element.Element)", "io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)"]}, {"title": "Stackoverflow when upserting", "body": "I get a Stackoverflow with the following exception:\n\nCaused by: java.lang.StackOverflowError: stack size 1037KB\n                                                                            at android.database.sqlite.SQLiteConnection$OperationLog.endOperation(SQLiteConnection.java:1355)\n                                                                            at android.database.sqlite.SQLiteConnection.prepare(SQLiteConnection.java:525)\n                                                                            at android.database.sqlite.SQLiteSession.prepare(SQLiteSession.java:588)\n                                                                            at android.database.sqlite.SQLiteProgram.<init>(SQLiteProgram.java:58)\n                                                                            at android.database.sqlite.SQLiteStatement.<init>(SQLiteStatement.java:31)\n                                                                            at android.database.sqlite.SQLiteDatabase.compileStatement(SQLiteDatabase.java:996)\n                                                                            at io.requery.android.sqlite.SqlitePreparedStatement.<init>(SqlitePreparedStatement.java:38)\n                                                                            at io.requery.android.sqlite.SqliteConnection.prepareStatement(SqliteConnection.java:127)\n                                                                            at io.requery.sql.ConnectionDelegate.prepareStatement(ConnectionDelegate.java:225)\n                                                                            at io.requery.sql.PreparedQueryOperation.prepare(PreparedQueryOperation.java:58)\n                                                                            at io.requery.sql.EntityUpdateOperation$1.evaluate(EntityUpdateOperation.java:66)\n                                                                            at io.requery.sql.EntityUpdateOperation$1.evaluate(EntityUpdateOperation.java:55)\n                                                                            at io.requery.query.BaseScalar.value(BaseScalar.java:49)\n                                                                            at io.requery.sql.EntityWriter.update(EntityWriter.java:594)\n                                                                            at io.requery.sql.EntityWriter.upsert(EntityWriter.java:494)\n                                                                            at io.requery.sql.EntityWriter.cascadeWrite(EntityWriter.java:932)\n                                                                            at io.requery.sql.EntityWriter.update(EntityWriter.java:575)\n                                                                            at io.requery.sql.EntityWriter.upsert(EntityWriter.java:494)\n                                                                            at io.requery.sql.EntityWriter.cascadeWrite(EntityWriter.java:932)\n                                                                            at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:641)\n                                                                            at io.requery.sql.EntityWriter.update(EntityWriter.java:600)\n                                                                            at io.requery.sql.EntityWriter.upsert(EntityWriter.java:494)\n                                                                            at io.requery.sql.EntityWriter.cascadeWrite(EntityWriter.java:932)\n\nIt seems to be related to these two entities:\n\n```\n@Entity(stateless = true)\npublic abstract class AbstractMedia implements Persistable {\n\n    @Key\n    String id = UUID.randomUUID().toString();\n\n    @OneToOne(mappedBy = \"media\")\n    Submission submission;\n\n    @ForeignKey\n    @OneToOne(cascade = {CascadeAction.DELETE, CascadeAction.SAVE})\n    OEmbed oembed;\n\n    String type;\n\n}\n```\n\n```\n@Entity(stateless = true)\npublic abstract class AbstractOEmbed implements Persistable {\n\n    @Key\n    String id = UUID.randomUUID().toString();\n\n    @OneToOne(mappedBy = \"oembed\")\n    Media media;\n\n    String provider_url;\n    String description;\n    String title;\n    String url;\n    String type;\n    String author_name;\n    String author_url;\n    int thumbnail_height;\n    int thumbnail_width;\n    String thumbnail_url;\n}\n```\n\nAs always I'll keep doing some debugging but if you spot any glaring issues let me know.\n", "url": "https://github.com/requery/requery/issues/205", "user": "Glurt", "labels": ["bug"], "created": "2016-06-24 15:29:04", "closed": "2016-07-01 05:40:43", "commits": {"bfe288ceb8acab0db33c2ae223b7c01161d61473": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 6.000277777777778, "commitsDetails": [{"commitHash": "bfe288ceb8acab0db33c2ae223b7c01161d61473", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["8c2a57c6bc04299b69501e9d1afa1543ad869fe6"], "nameRev": "bfe288ceb8acab0db33c2ae223b7c01161d61473 tags/1.0.0-rc1~15", "commitMessage": "Resolve #205 Don't cascade foreign key reference in certain cases\n", "commitDateTime": "2016-06-30 22:11:27", "authoredDateTime": "2016-06-30 22:11:27", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 6, "deletions": 8, "lines": 14}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean,io.requery.sql.EntityWriter$CascadeMode)", "TOT": 5, "UPD": 2, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bfe288ceb8acab0db33c2ae223b7c01161d61473"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 8, "lines": 14, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 2, "INS": 1, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean,io.requery.sql.EntityWriter$CascadeMode)", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy)"]}, {"title": "doc request: adding requery over existing DB", "body": "This is probably an unusual use case for requery, but for an old Android app that already has a DB (copied from assets into a specific database file on program startup), how do you map requery objects to it?\n", "url": "https://github.com/requery/requery/issues/200", "user": "kenkyee", "labels": ["bug", "question"], "created": "2016-06-21 14:37:28", "closed": "2016-06-27 05:10:40", "commits": {"73a308df52ea523fa0d10ad292e4a949b82656ae": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 5.000277777777778, "commitsDetails": [{"commitHash": "73a308df52ea523fa0d10ad292e4a949b82656ae", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["b20b2784e793094f516ac14eb2d34e323ff286c0"], "nameRev": "73a308df52ea523fa0d10ad292e4a949b82656ae tags/1.0.0-rc1~21", "commitMessage": "Resolve #200 Fix empty name when using JunctionTable.type\n", "commitDateTime": "2016-06-26 22:10:07", "authoredDateTime": "2016-06-26 22:10:07", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 15, "deletions": 11, "lines": 26}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateJunctionType(io.requery.processor.AttributeDescriptor,io.requery.processor.EntityDescriptor,java.util.Set)", "TOT": 18, "UPD": 5, "INS": 5, "MOV": 6, "DEL": 2}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["73a308df52ea523fa0d10ad292e4a949b82656ae"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 11, "lines": 26, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 18, "UPD": 5, "INS": 5, "MOV": 6, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityGenerator.generateJunctionType(io.requery.processor.AttributeDescriptor,io.requery.processor.EntityDescriptor,java.util.Set)"]}, {"title": "Build failed when using AutoValue and Parcelable together", "body": "Here is my code:\n\n``` java\n@Entity\n@AutoValue\npublic abstract class Feed implements Parcelable {\n    public static Builder builder() {\n        return new AutoValue_Feed.Builder();\n    }\n\n    public static TypeAdapter<Feed> typeAdapter(Gson gson) {\n        return new AutoValue_Feed.GsonTypeAdapter(gson);\n    }\n\n    @Key\n    public abstract String feedId();\n\n    public abstract String title();\n\n    public abstract String content();\n\n    @AutoValue.Builder\n    public abstract static class Builder {\n        public abstract Builder feedId(String feedId);\n\n        public abstract Builder title(String title);\n\n        public abstract Builder content(String content);\n\n        public abstract Feed build();\n    }\n}\n```\n\nAnd the generated code is:\n\n``` java\npublic class FeedType implements Parcelable {\n    /* Some definitions */\n\n    public static final Type<Feed> $TYPE = new TypeBuilder<Feed>(Feed.class, \"Feed\")\n    .setBaseType(Feed.class)\n    .setCacheable(true)\n    .setImmutable(true)\n    .setReadOnly(false)\n    .setStateless(true)\n    .setBuilderFactory(new Supplier<Feed.Builder>() {\n        @Override\n        public Feed.Builder get() {\n            return Feed.builder();\n        }\n    })\n    .setBuilderFunction(new Function<Feed.Builder, Feed>() {\n        @Override\n        public Feed apply(Feed.Builder value) {\n            return value.build();\n        }\n    })\n    .setProxyProvider(new Function<Feed, EntityProxy<Feed>>() {\n        @Override\n        public EntityProxy<Feed> apply(Feed entity) {\n            return new EntityProxy<Feed>(entity, $TYPE);\n        }\n    })\n    .addAttribute(FEED_ID)\n    .addAttribute(TITLE)\n    .addAttribute(CONTENT)\n    .build();\n\n    public static final Parcelable.Creator<FeedType> CREATOR = new Parcelable.Creator<FeedType>() {\n        @Override\n        public FeedType createFromParcel(Parcel source) {\n            return PARCELER.readFromParcel(source);\n        }\n\n        @Override\n        public FeedType[] newArray(int size) {\n            return new FeedType[size];\n        }\n    };\n\n    /**\n     * Error occurs here: \n     * EntityParceler (io.requery.meta.Type<FeedType>) in EntityParceler cannot be applied\n     * to (io.requery.meta.Type<Feed>)\n     */\n    private static final EntityParceler<FeedType> PARCELER = new EntityParceler<FeedType>($TYPE);\n\n    /* Some other code */\n}\n```\n\nAgain, the error message is: \n`EntityParceler (io.requery.meta.Type<FeedType>) in EntityParceler cannot be applied to (io.requery.meta.Type<Feed>)`\n\n`Feed` must be `Parcelble` so I cannot remove this interface. Anyone knows how to fix it?\n", "url": "https://github.com/requery/requery/issues/196", "user": "choichen", "labels": ["bug"], "created": "2016-06-20 07:00:10", "closed": "2016-06-21 05:47:49", "commits": {"5047eae3353b165b3197919cf93a0f8f8978eb26": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "5047eae3353b165b3197919cf93a0f8f8978eb26", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["c84e3a936c12ee0f8a633dc24f4c98827f635ecb"], "nameRev": "5047eae3353b165b3197919cf93a0f8f8978eb26 tags/1.0.0-beta23~1", "commitMessage": "Resolve #196 Don't create Parcelable support for @AutoValue types\n", "commitDateTime": "2016-06-20 22:47:33", "authoredDateTime": "2016-06-20 22:47:33", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/AndroidParcelableExtension.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AndroidParcelableExtension.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.AndroidParcelableExtension.generate(io.requery.processor.EntityDescriptor,com.squareup.javapoet.TypeSpec$Builder)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5047eae3353b165b3197919cf93a0f8f8978eb26"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.AndroidParcelableExtension.generate(io.requery.processor.EntityDescriptor,com.squareup.javapoet.TypeSpec$Builder)"]}, {"title": "NPE: limit is null in OffsetFetchGenerator using SQLServer platform", "body": "**Example code:**\n\n``` kotlin\ndataStore.select(FooEntity::class.java).get().toList() // throws NPE.\ndataStore.select(FooEntity::class.java).limit(999).get().toList() // works.\n```\n\n**Exception stacktrace:**\n\n```\nException in thread \"main\" java.lang.NullPointerException\n    at io.requery.sql.gen.OffsetFetchGenerator.write(OffsetFetchGenerator.java:47)\n    at io.requery.sql.platform.SQLServer$OrderByOffsetFetchLimit.write(SQLServer.java:150)\n    at io.requery.sql.gen.OffsetFetchGenerator.write(OffsetFetchGenerator.java:37)\n    at io.requery.sql.gen.OffsetFetchGenerator.write(OffsetFetchGenerator.java:30)\n    at io.requery.sql.gen.StatementGenerator.write(StatementGenerator.java:93)\n    at io.requery.sql.gen.DefaultOutput.toSql(DefaultOutput.java:93)\n    at io.requery.sql.SelectResult.createQuery(SelectResult.java:97)\n    at io.requery.sql.SelectResult.iterator(SelectResult.java:105)\n    at io.requery.query.BaseResult.iterator(BaseResult.java:122)\n    at io.requery.query.BaseResult.collect(BaseResult.java:76)\n    at io.requery.query.BaseResult.toList(BaseResult.java:70)\n```\n\n**Run with debugger (`OffsetFetchGenerator.java`):**\n\n``` java\nprotected void write(QueryBuilder qb, Integer limit, Integer offset) {\n    if (offset != null) {\n        qb.keyword(OFFSET) // qb: \"select ...\"\n            .value(offset)\n            .keyword(offset > 1 ? ROWS : ROW) // offset: \"0\"\n            .keyword(FETCH, NEXT)\n            .value(limit)\n            .keyword(limit > 1 ? ROWS : ROW) // limit: null\n            .keyword(ONLY);\n    // ...\n}\n```\n\n**build.gradle:**\n\n``` gradle\ncompile \"io.requery:requery:1.0.0-beta22\"\nkapt \"io.requery:requery-processor:1.0.0-beta22\"\ncompile \"net.sourceforge.jtds:jtds:1.3.1\" // open source driver.\ncompile \"com.microsoft.sqlserver:sqljdbc42:4.2\" // closed source driver.\n```\n\nThrows the exception with both `net.sourceforge.jtds.jdbcx.JtdsDataSource` and `com.microsoft.sqlserver.jdbc.SQLServerDataSource`.\n", "url": "https://github.com/requery/requery/issues/193", "user": "hastebrot", "labels": ["bug"], "created": "2016-06-17 09:47:29", "closed": "2016-06-17 20:04:39", "commits": {"f380e8591ecca6606deef2a2a9430f91921e50db": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f380e8591ecca6606deef2a2a9430f91921e50db", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["e61437196b400a51dbe5cb5c066d9f503705d99b"], "nameRev": "f380e8591ecca6606deef2a2a9430f91921e50db tags/1.0.0-beta23~6", "commitMessage": "Resolve #193 Fix NPE in generation of offset/fetch\n", "commitDateTime": "2016-06-17 13:04:22", "authoredDateTime": "2016-06-17 13:04:22", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/gen/OffsetFetchGenerator.java", "insertions": 4, "deletions": 2, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "OffsetFetchGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.gen.OffsetFetchGenerator.write(io.requery.sql.gen.Output,io.requery.query.element.LimitedElement)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f380e8591ecca6606deef2a2a9430f91921e50db"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 2, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql/gen"], "changesInPackagesSPOON": ["io.requery.sql.gen.OffsetFetchGenerator.write(io.requery.sql.gen.Output,io.requery.query.element.LimitedElement)"]}, {"title": "Can't upsert many to many entries.", "body": "I might be wrong on this so feel free to correct me. \n\nI have an AccountEntity and SubredditEntity related via many-to-many, all of this data comes from the internet so it's as though it's just been created. \n\nFor testing purposes, I attempted to add the same account twice and got this exception:\n\n```\nUNIQUE constraint failed: Subreddit_Subscribers.SubredditId, Subreddit_Subscribers.AccountId (code 1555)\n#################################################################\nError Code : 1555 (SQLITE_CONSTRAINT_PRIMARYKEY)\nCaused By : Abort due to constraint violation.\n    (UNIQUE constraint failed: Subreddit_Subscribers.SubredditId, Subreddit_Subscribers.AccountId (code 1555))\n#################################################################\n```\n\nI could prevent duplicate Accounts being added but I'd rather just take the new data and upsert it rather than throwing it away\n", "url": "https://github.com/requery/requery/issues/192", "user": "Glurt", "labels": ["bug"], "created": "2016-06-17 09:17:07", "closed": "2016-06-20 05:58:14", "commits": {"c84e3a936c12ee0f8a633dc24f4c98827f635ecb": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "c84e3a936c12ee0f8a633dc24f4c98827f635ecb", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["4a697960fd6a93fc800aa9566beea06266de91bf"], "nameRev": "c84e3a936c12ee0f8a633dc24f4c98827f635ecb tags/1.0.0-beta23~2", "commitMessage": "Resolve #192 Support upsert of many-to-many elements\n", "commitDateTime": "2016-06-19 22:58:01", "authoredDateTime": "2016-06-19 22:58:01", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 5, "deletions": 1, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.updateAssociations(io.requery.sql.EntityWriter$CascadeMode,java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["c84e3a936c12ee0f8a633dc24f4c98827f635ecb"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 1, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.updateAssociations(io.requery.sql.EntityWriter$CascadeMode,java.lang.Object,io.requery.proxy.EntityProxy)"]}, {"title": "Stateless entities don't initialise collections.", "body": "If I mark an entity as stateless then any lists within it aren't initialised, this means that entity1.getList() returns null and since there's no entity.setList() you can't create one either.\n", "url": "https://github.com/requery/requery/issues/191", "user": "Glurt", "labels": ["bug"], "created": "2016-06-16 13:24:34", "closed": "2016-06-17 06:35:35", "commits": {"e61437196b400a51dbe5cb5c066d9f503705d99b": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "e61437196b400a51dbe5cb5c066d9f503705d99b", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["9b3a4d804fa10620b8637654dc191edfe007a005"], "nameRev": "e61437196b400a51dbe5cb5c066d9f503705d99b tags/1.0.0-beta23~7", "commitMessage": "Resolve #191 Fix initialization of collections for stateless entity\n", "commitDateTime": "2016-06-16 23:35:20", "authoredDateTime": "2016-06-16 23:35:20", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/proxy/EntityProxy.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityProxy.java", "spoonMethods": [{"spoonMethodName": "io.requery.proxy.EntityProxy.get(io.requery.meta.Attribute,boolean)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e61437196b400a51dbe5cb5c066d9f503705d99b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/proxy"], "changesInPackagesSPOON": ["io.requery.proxy.EntityProxy.get(io.requery.meta.Attribute,boolean)"]}, {"title": "Observe query on table changes and db connection idle", "body": "I'm using RxJava observe query on table changes\n\n`data.select(DbItemEntity::class.java)\n.orderBy(DbItemEntity.CHECKED.asc())\n.get()\n.toSelfObservable()\n.subscribeOn(Schedulers.io())\n.map { it.map { it.toAppModel() } }\n.observeOn(AndroidSchedulers.mainThread())\n.subscribe { ... }`\n\nAnd after that when I made update in db and once again used select, the query didn't finish. In log I get only 'beforeExecuteQuery', 'afterExecuteQuery' didn't occure.\nAnd I get information that connection is idle.\n\n`W/SQLiteConnectionPool: The connection pool for database '/data/data/pl.lizardproject.qe2016/databases/default' has been unable to grant a connection to thread 574 (RxIoScheduler-3) with flags 0x1 for 120.00101 seconds.\n                                                                               Connections: 0 active, 1 idle, 0 available.`\n\nMy datastore configuration:\n\n`val source = SqlitexDatabaseSource(context, Models.DEFAULT, 1)\nsource.setLoggingEnabled(true)\nval data = RxSupport.toReactiveStore(EntityDataStore<Persistable>(source.configuration))`\n", "url": "https://github.com/requery/requery/issues/188", "user": "mgorski-mg", "labels": ["bug"], "created": "2016-06-15 06:53:17", "closed": "2016-06-18 08:35:33", "commits": {"4a697960fd6a93fc800aa9566beea06266de91bf": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 3.000277777777778, "commitsDetails": [{"commitHash": "4a697960fd6a93fc800aa9566beea06266de91bf", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["412081f074dc80752126c48c566142ba8c538d3c"], "nameRev": "4a697960fd6a93fc800aa9566beea06266de91bf tags/1.0.0-beta23~3", "commitMessage": "Resolve #188 Android remove transaction created on query read\n", "commitDateTime": "2016-06-18 01:35:19", "authoredDateTime": "2016-06-18 01:35:19", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlcipher/SqlCipherConnection.java", "insertions": 0, "deletions": 6, "lines": 6}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlite/SqliteConnection.java", "insertions": 0, "deletions": 6, "lines": 6}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlitex/SqlitexConnection.java", "insertions": 0, "deletions": 6, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "SqlCipherConnection.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlcipher.SqlCipherConnection.createStatement()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlcipher.SqlCipherConnection.createStatement(int,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlcipher.SqlCipherConnection.createStatement(int,int,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlcipher.SqlCipherConnection.prepareStatement(java.lang.String,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlcipher.SqlCipherConnection.prepareStatement(java.lang.String,int,int,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlcipher.SqlCipherConnection.prepareStatement(java.lang.String,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "SqliteConnection.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.SqliteConnection.createStatement()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlite.SqliteConnection.createStatement(int,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlite.SqliteConnection.createStatement(int,int,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlite.SqliteConnection.prepareStatement(java.lang.String,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlite.SqliteConnection.prepareStatement(java.lang.String,int,int,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlite.SqliteConnection.prepareStatement(java.lang.String,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "SqlitexConnection.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlitex.SqlitexConnection.createStatement()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlitex.SqlitexConnection.createStatement(int,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlitex.SqlitexConnection.createStatement(int,int,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlitex.SqlitexConnection.prepareStatement(java.lang.String,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlitex.SqlitexConnection.prepareStatement(java.lang.String,int,int,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.android.sqlitex.SqlitexConnection.prepareStatement(java.lang.String,java.lang.String[])", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4a697960fd6a93fc800aa9566beea06266de91bf"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 0, "deletions": 18, "lines": 18, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 18, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 18, "spoonFilesChanged": 3, "spoonMethodsChanged": 18}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android/sqlite", "requery-android/src/main/java/io/requery/android/sqlitex", "requery-android/src/main/java/io/requery/android/sqlcipher"], "changesInPackagesSPOON": ["io.requery.android.sqlcipher.SqlCipherConnection.createStatement(int,int,int)", "io.requery.android.sqlite.SqliteConnection.prepareStatement(java.lang.String,int)", "io.requery.android.sqlcipher.SqlCipherConnection.createStatement()", "io.requery.android.sqlitex.SqlitexConnection.prepareStatement(java.lang.String,int)", "io.requery.android.sqlite.SqliteConnection.createStatement()", "io.requery.android.sqlcipher.SqlCipherConnection.createStatement(int,int)", "io.requery.android.sqlitex.SqlitexConnection.prepareStatement(java.lang.String,int,int,int)", "io.requery.android.sqlite.SqliteConnection.createStatement(int,int)", "io.requery.android.sqlite.SqliteConnection.prepareStatement(java.lang.String,java.lang.String[])", "io.requery.android.sqlcipher.SqlCipherConnection.prepareStatement(java.lang.String,int,int,int)", "io.requery.android.sqlcipher.SqlCipherConnection.prepareStatement(java.lang.String,int)", "io.requery.android.sqlitex.SqlitexConnection.createStatement(int,int,int)", "io.requery.android.sqlcipher.SqlCipherConnection.prepareStatement(java.lang.String,java.lang.String[])", "io.requery.android.sqlitex.SqlitexConnection.createStatement(int,int)", "io.requery.android.sqlitex.SqlitexConnection.createStatement()", "io.requery.android.sqlite.SqliteConnection.createStatement(int,int,int)", "io.requery.android.sqlite.SqliteConnection.prepareStatement(java.lang.String,int,int,int)", "io.requery.android.sqlitex.SqlitexConnection.prepareStatement(java.lang.String,java.lang.String[])"]}, {"title": "EntityDataStore. Incorrect check size Set<EntityStateListener>.", "body": "File - EntityDataStore.java, line - 177\n\n```\n    if (configuration.getEntityStateListener().isEmpty()) {\n        for (@SuppressWarnings(\"unchecked\")\n             EntityStateListener<T> listener : configuration.getEntityStateListener()) {\n            entityListeners.add(listener);\n        }\n    }\n```\n", "url": "https://github.com/requery/requery/issues/186", "user": "a1grim", "labels": ["bug"], "created": "2016-06-14 12:07:16", "closed": "2016-06-15 01:08:41", "commits": {"e1a3e389ec5019e3240fcf1ecbe12f30410692fe": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "e1a3e389ec5019e3240fcf1ecbe12f30410692fe", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["6c75d6bc9722a98658a1f411edc235ab8f4672f1"], "nameRev": "e1a3e389ec5019e3240fcf1ecbe12f30410692fe tags/1.0.0-beta23~11", "commitMessage": "Resolve #186 Fix getEntityStateListener check\n", "commitDateTime": "2016-06-14 18:06:25", "authoredDateTime": "2016-06-14 18:06:25", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityDataStore.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityDataStore.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityDataStore", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e1a3e389ec5019e3240fcf1ecbe12f30410692fe"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityDataStore"]}, {"title": "Column names should be in quotes", "body": "It doesn't seem possible to use sqlite keywords as column names because they aren't being quoted as instructed by the [sqlite docs](https://www.sqlite.org/lang_keywords.html).\n\nIf I have the following entity:\n\n``` java\n@Entity\npublic abstract class DbModel {\n\n    @Key\n    @Generated\n    int id;\n\n    @Column(nullable = false, unique = true)\n    int order;\n}\n```\n\nI get this exception\n\n``` sql\njava.sql.SQLException: android.database.sqlite.SQLiteException:\nnear \"order\": syntax error (code 1): , while compiling: \ncreate table DbModel (id integer primary key autoincrement, order integer not null unique)\n```\n\n`order` should be `\"order\"` in the create table statement\n", "url": "https://github.com/requery/requery/issues/184", "user": "gowong", "labels": ["bug", "enhancement"], "created": "2016-06-12 05:15:46", "closed": "2016-06-13 05:22:01", "commits": {"025a298388c45009338b602d2194b759f1eea450": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "025a298388c45009338b602d2194b759f1eea450", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["dd9d518a38c10732edf0b65ff71a55de9c3d7a26"], "nameRev": "025a298388c45009338b602d2194b759f1eea450 tags/1.0.0-beta23~15", "commitMessage": "Resolve #184 Check reserved name for basic fields\n", "commitDateTime": "2016-06-12 21:31:40", "authoredDateTime": "2016-06-12 21:31:40", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/AttributeMember.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AttributeMember.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.AttributeMember.process(javax.annotation.processing.ProcessingEnvironment)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["025a298388c45009338b602d2194b759f1eea450"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.AttributeMember.process(javax.annotation.processing.ProcessingEnvironment)"]}, {"title": "Observable result is never emitted if limit clause is used with flatMap", "body": "I'm facing a strange issue while using limit clause in my query within a flatmap to convert the result into an list, like the following:\n\n``` java\ngetData().select(ModelEntity.class)\n        .orderBy(ModelEntity.CREATED_AT.desc())\n        .limit(3)\n        .get().toSelfObservable()\n        .flatMap(modelEntities -> modelEntities.toObservable().toList())\n        .subscribe(modelEntities -> {\n            // this is never called\n        }, throwable -> {\n            // this is never called\n        });\n```\n\nCallbacks are never called in this way\n\nBut if I remove the `limit` clause the list gets emitted, also if I remove the flatMap call leaving the limit there, the Result object gets emitted, but if I use both the list never get emitted and no errors are thrown.\n\nAnother test I did was adding a where clause to this snippet to fetch less items in db, and this way the items get emitted.. \n\nBut I need to make this work with the snippet above, I don't know the reason, I'm using the latest version... \n\nIf you need more info, please feel free to ask.\n### EDIT:\n\nAfter some tests I discovered that if the param for limit clause goes below than full result count, the objects don't emit.\ni.e I have 500 entities in db, if I call `limit(550)` the items are emitted, but if I call `limit(450)` they are never emitted.\n", "url": "https://github.com/requery/requery/issues/181", "user": "YuriHeupa", "labels": ["bug"], "created": "2016-06-09 05:25:34", "closed": "2016-06-09 05:52:41", "commits": {"3b4e4df4c1102fe1a77ce223fd78c2f33bf92b67": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "3b4e4df4c1102fe1a77ce223fd78c2f33bf92b67", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["4ca8380ed1dd75ac8b2df543c6af3feb3b328a41"], "nameRev": "3b4e4df4c1102fe1a77ce223fd78c2f33bf92b67 tags/1.0.0-beta23~21", "commitMessage": "Resolve #181 Remove unnecessary maxElement parameter in OnSubscribeFromQuery\n", "commitDateTime": "2016-06-08 22:52:24", "authoredDateTime": "2016-06-08 22:52:24", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/query/BaseResult.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/rx/OnSubscribeFromQuery.java", "insertions": 2, "deletions": 5, "lines": 7}, {"filePath": "requery/src/main/java/io/requery/rx/RxSupport.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BaseResult.java", "spoonMethods": [{"spoonMethodName": "io.requery.query.BaseResult.toObservable()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "OnSubscribeFromQuery.java", "spoonMethods": [{"spoonMethodName": "io.requery.rx.OnSubscribeFromQuery", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 3}, {"spoonMethodName": "io.requery.rx.OnSubscribeFromQuery.ElementProducer.request(long)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "RxSupport.java", "spoonMethods": [{"spoonMethodName": "io.requery.rx.RxSupport.toObservable(io.requery.query.BaseResult,java.lang.Integer)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3b4e4df4c1102fe1a77ce223fd78c2f33bf92b67"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 8, "lines": 13, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 8, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 6, "spoonFilesChanged": 3, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/rx", "requery/src/main/java/io/requery/query"], "changesInPackagesSPOON": ["io.requery.rx.OnSubscribeFromQuery", "io.requery.rx.OnSubscribeFromQuery.ElementProducer.request(long)", "io.requery.query.BaseResult.toObservable()", "io.requery.rx.RxSupport.toObservable(io.requery.query.BaseResult,java.lang.Integer)"]}, {"title": "[BUG] Query builder condition with ManyToOne relation is broke", "body": "**Entites example:**\n\n``` java\npublic interface User extends Parcelable, Persistable {\n    @Key\n    String getId();\n\n    @OneToMany(cascade = {CascadeAction.SAVE, CascadeAction.DELETE})\n    List<Post> getPosts();\n}\n```\n\n``` java\npublic interface Post extends Parcelable, Persistable {\n    @Key\n    String getId();\n\n    @ManyToOne(cascade = {CascadeAction.NONE})\n    User getUser();\n}\n```\n\nI have an execption when I try to count the Post for an specific user:\n\n``` java\nInteger countPost = singleEntityStore.count(PostEntity.class)\n    .where(PostEntity.USER_ID.equal(\"<user_id>\"));\n```\n\nException:\n\n```\njava.lang.ClassCastException: java.lang.String cannot be cast to com.example.models.UserEntity\n```\n\nUse `eq()` method doesn't change.\n\nHowever, no problem if I use a class instance:\n\n``` java\nUserEntity user = new UserEntity();\nuser.setId(\"<user_id>\");\n\nInteger countPost = singleEntityStore.count(PostEntity.class)\n    .where(PostEntity.USER.equal(user));\n```\n", "url": "https://github.com/requery/requery/issues/180", "user": "francoispluchino", "labels": ["bug"], "created": "2016-06-08 13:19:00", "closed": "2016-06-09 19:21:59", "commits": {"5b93c248d2176654ca1c693a8e804523a1ac7e2b": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "5b93c248d2176654ca1c693a8e804523a1ac7e2b", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["3b4e4df4c1102fe1a77ce223fd78c2f33bf92b67"], "nameRev": "5b93c248d2176654ca1c693a8e804523a1ac7e2b tags/1.0.0-beta23~20", "commitMessage": "Resolve #180 Basic foreign key expression shouldn't return true for isAssociation()\n", "commitDateTime": "2016-06-09 12:17:22", "authoredDateTime": "2016-06-09 12:17:22", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 4, "deletions": 2, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.type.TypeMirror,boolean,io.requery.processor.AttributeDescriptor)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5b93c248d2176654ca1c693a8e804523a1ac7e2b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 2, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName,java.lang.String,javax.lang.model.type.TypeMirror,boolean,io.requery.processor.AttributeDescriptor)"]}, {"title": "[BUG] Delete method not working properly?", "body": "With `Blocking Entity Store` or `Reactive Store`, I have the `io.requery.sql.RowCountException: Expected 1 row affected actual 0` exception when I try to delete an entity just after called the `findByKey` method.\n\n``` java\nUser user = reactiveStoreEntity.toBlocking().findByKey(User.class, id);\n\nif (user != null) {\n    reactiveStoreEntity.toBlocking().delete(user);\n}\n```\n\nI do not know if I've missed something, but with `1.0-beta21` version, it no longer works.\n", "url": "https://github.com/requery/requery/issues/174", "user": "francoispluchino", "labels": ["bug"], "created": "2016-06-05 19:33:18", "closed": "2016-06-07 23:33:54", "commits": {"29971a186f2bf5b0fb611ff07265c34fae034154": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "29971a186f2bf5b0fb611ff07265c34fae034154", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["25a0139704fb652060d52fbd0b39a65555d45b6b"], "nameRev": "29971a186f2bf5b0fb611ff07265c34fae034154 tags/1.0.0-beta22~3", "commitMessage": "Resolve #174 Fix row count exception when deleting entity that cascades\n", "commitDateTime": "2016-06-07 16:33:33", "authoredDateTime": "2016-06-07 16:33:33", "commitGitStats": [{"filePath": "requery-test/src/main/java/io/requery/test/FunctionalTest.java", "insertions": 20, "deletions": 1, "lines": 21}, {"filePath": "requery-test/src/main/java/io/requery/test/model/AbstractAddress.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "requery-test/src/main/java/io/requery/test/model/AbstractPerson.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 33, "deletions": 24, "lines": 57}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FunctionalTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.FunctionalTest.testFindByKeyDeleteInverse()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.FunctionalTest.testFindByKeyDelete()", "TOT": 6, "UPD": 0, "INS": 5, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "AbstractAddress.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model.AbstractAddress", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractPerson.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model.AbstractPerson", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.clearAssociations(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 11, "UPD": 1, "INS": 4, "MOV": 4, "DEL": 2}, {"spoonMethodName": "io.requery.sql.EntityWriter.removeEntity(io.requery.proxy.EntityProxy,java.lang.Object)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.batchDelete(java.lang.Iterable)", "TOT": 7, "UPD": 3, "INS": 2, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.delete(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 12, "UPD": 0, "INS": 5, "MOV": 6, "DEL": 1}, {"spoonMethodName": "io.requery.sql.EntityWriter.cascadeRemove(java.lang.Object,java.lang.Object,boolean)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["29971a186f2bf5b0fb611ff07265c34fae034154"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 36, "deletions": 26, "lines": 62, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 35, "UPD": 5, "INS": 14, "MOV": 12, "DEL": 4, "spoonFilesChanged": 3, "spoonMethodsChanged": 7}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-test/src/main/java/io/requery/test/model", "requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.clearAssociations(java.lang.Object,io.requery.proxy.EntityProxy)", "io.requery.sql.EntityWriter.cascadeRemove(java.lang.Object,java.lang.Object,boolean)", "io.requery.sql.EntityWriter.batchDelete(java.lang.Iterable)", "io.requery.test.model.AbstractPerson", "io.requery.test.model.AbstractAddress", "io.requery.sql.EntityWriter.delete(java.lang.Object,io.requery.proxy.EntityProxy)", "io.requery.sql.EntityWriter.removeEntity(io.requery.proxy.EntityProxy,java.lang.Object)"]}, {"title": "ClassCastException when using primitive data type in CompoundKey", "body": "Hi,\nOne of my models has the following primary keys:\n\n``` java\n@Entity\npublic abstract class Measure {\n...\n    @Key\n    int measureNb;\n    @Key\n    String instrumentId;\n...\n}\n```\n\nand I wanted to fetch one using `findByKey()`, the key being constructed via the following\n\n``` java\n    private CompositeKey<MeasureEntity> makeKey(Measure m) {\n        Map<Attribute<MeasureEntity,?>, Object> map = new HashMap<>();\n        map.put(MeasureEntity.INSTRUMENT_ID, m.getInstrument().getId());\n        map.put(MeasureEntity.MEASURE_NB, m.getNumber());\n        return new CompositeKey<>(map);\n    }\n```\n\n`getNumber()` returns an `int`.\n\nWhen I run findByKey, I get the following crash:\n\nCaused by: java.lang.ClassCastException: java.lang.Integer cannot be cast to int\n                                                                                at java.lang.Class.cast(Class.java:1402)\n                                                                                at io.requery.proxy.CompositeKey.get(CompositeKey.java:58)\n                                                                                at io.requery.sql.EntityDataStore.findByKey(EntityDataStore.java:371)\n                                                                                at io.requery.rx.SingleEntityStoreFromBlocking$15.get(SingleEntityStoreFromBlocking.java:232)\n                                                                                at io.requery.rx.SingleOnSubscribeFromSupplier.call(SingleOnSubscribeFromSupplier.java:34)\n                                                                                at io.requery.rx.SingleOnSubscribeFromSupplier.call(SingleOnSubscribeFromSupplier.java:23)\n                                                                                at rx.Single$1.call(Single.java:110)\n                                                                                at rx.Single$1.call(Single.java:90)\n                                                                                at rx.Observable.unsafeSubscribe(Observable.java:8098)\n                                                                                at rx.internal.operators.OperatorSubscribeOn$1$1.call(OperatorSubscribeOn.java:62)\n                                                                                at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)\n                                                                                at rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker.run(ExecutorScheduler.java:98)\n                                                                                at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1076)\u00a0\n                                                                                at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:569)\u00a0\n                                                                                at java.lang.Thread.run(Thread.java:856)\n\nSomewhere in there, there is problem with the un/boxing of Java primitive types, it seems.\n\nCheers,\nSimon\n", "url": "https://github.com/requery/requery/issues/170", "user": "laarmen", "labels": ["bug"], "created": "2016-06-02 17:04:04", "closed": "2016-06-03 14:06:59", "commits": {"674906e979d844dde81f212fbefd44cf4f7264c8": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "674906e979d844dde81f212fbefd44cf4f7264c8", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["1c66478bd048c79668ee2d1881ef2010f85a5a50"], "nameRev": "674906e979d844dde81f212fbefd44cf4f7264c8 tags/1.0.0-beta22~6", "commitMessage": "Resolve #170 Fix primitive ClassCastException in CompositeKey\n", "commitDateTime": "2016-06-03 07:06:46", "authoredDateTime": "2016-06-03 07:06:46", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/proxy/CompositeKey.java", "insertions": 5, "deletions": 69, "lines": 74}, {"filePath": "requery/src/main/java/io/requery/{sql/ResultTuple.java => query/MutableTuple.java}", "insertions": 14, "deletions": 18, "lines": 32}, {"filePath": "requery/src/main/java/io/requery/sql/InsertReturningOperation.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "requery/src/main/java/io/requery/sql/RawTupleQuery.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "requery/src/main/java/io/requery/sql/TupleResultReader.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "CompositeKey.java", "spoonMethods": [{"spoonMethodName": "io.requery.proxy.CompositeKey", "TOT": 12, "UPD": 2, "INS": 2, "MOV": 6, "DEL": 2}, {"spoonMethodName": "io.requery.proxy.CompositeKey.toString()", "TOT": 4, "UPD": 1, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.requery.proxy.CompositeKey.get(io.requery.query.Expression)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.proxy.CompositeKey.get(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.proxy.CompositeKey.get(int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.proxy.CompositeKey.count()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.proxy.CompositeKey.equals(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.proxy.CompositeKey.hashCode()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "MutableTuple.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.ResultTuple", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.ResultTuple.set(int,io.requery.query.Expression,java.lang.Object)", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.ResultTuple.get(io.requery.query.Expression)", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.sql.ResultTuple.get(java.lang.String)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.ResultTuple.equals(java.lang.Object)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.ResultTuple.toString()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.ResultTuple.get(int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.ResultTuple.count()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.sql.ResultTuple.hashCode()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.query.MutableTuple", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.MutableTuple.set(int,io.requery.query.Expression,java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.query.MutableTuple.get(io.requery.query.Expression)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "InsertReturningOperation.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.InsertReturningOperation.evaluate(io.requery.query.element.QueryElement)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RawTupleQuery.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.RawTupleQuery.TupleResult.read(java.sql.ResultSet,java.util.Set)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.RawTupleQuery.get()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TupleResultReader.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.TupleResultReader.read(java.sql.ResultSet,java.util.Set)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["674906e979d844dde81f212fbefd44cf4f7264c8"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 26, "deletions": 91, "lines": 117, "gitFilesChange": 5}, "spoonStatsSummary": {"TOT": 57, "UPD": 32, "INS": 5, "MOV": 10, "DEL": 10, "spoonFilesChanged": 5, "spoonMethodsChanged": 24}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery/src/main/java/io/requery/proxy", "requery/src/main/java/io/requery/{sql/ResultTuple.java => query"], "changesInPackagesSPOON": ["io.requery.sql.ResultTuple.get(java.lang.String)", "io.requery.proxy.CompositeKey.get(java.lang.String)", "io.requery.query.MutableTuple.set(int,io.requery.query.Expression,java.lang.Object)", "io.requery.sql.InsertReturningOperation.evaluate(io.requery.query.element.QueryElement)", "io.requery.sql.ResultTuple", "io.requery.sql.ResultTuple.count()", "io.requery.proxy.CompositeKey", "io.requery.proxy.CompositeKey.hashCode()", "io.requery.proxy.CompositeKey.count()", "io.requery.sql.ResultTuple.get(io.requery.query.Expression)", "io.requery.sql.ResultTuple.equals(java.lang.Object)", "io.requery.proxy.CompositeKey.get(io.requery.query.Expression)", "io.requery.sql.ResultTuple.hashCode()", "io.requery.proxy.CompositeKey.equals(java.lang.Object)", "io.requery.sql.ResultTuple.set(int,io.requery.query.Expression,java.lang.Object)", "io.requery.query.MutableTuple.get(io.requery.query.Expression)", "io.requery.query.MutableTuple", "io.requery.proxy.CompositeKey.get(int)", "io.requery.sql.ResultTuple.get(int)", "io.requery.sql.ResultTuple.toString()", "io.requery.sql.RawTupleQuery.TupleResult.read(java.sql.ResultSet,java.util.Set)", "io.requery.sql.RawTupleQuery.get()", "io.requery.proxy.CompositeKey.toString()", "io.requery.sql.TupleResultReader.read(java.sql.ResultSet,java.util.Set)"]}, {"title": "[question] toSelfObservable() with delete() query", "body": "Hello!\n\nI create new Observable:\n\n```\n    private Observable<Result<Person>> getObservable() {\n        return dbInterface.select(Person.class).get()\n                .toSelfObservable()\n                .subscribeOn(Schedulers.computation())\n                .observeOn(AndroidSchedulers.mainThread());\n    }\n```\n\n```\n    public void load(MainActivity view) {\n        getObservable()\n        .subscribe(persons -> {\n            onNext(view, persons);\n        }, throwable -> {\n            onError(view, throwable);\n        });\n    }\n```\n\nAnd get new data to onNext() after insert: \n\n```\n    private Observable generatorObservable() {\n      ...\n        return dbInterface\n                .insert(persons)\n                .toObservable();\n    }\n\n```\n\n```\n    public void doAddWork() {\n        generatorObservable()\n            .subscribeOn(Schedulers.computation())\n            .observeOn(AndroidSchedulers.mainThread())\n            .subscribe();\n    }\n```\n\nBut .onNext() for .delete() queries doesn't call, despite of correct deleting:\n\n```\n    private Single<Integer> eraseObservable() {\n        return dbInterface.delete(Person.class).get().toSingle();\n    }\n\n    public void doRemoveWork() {\n        eraseObservable()\n            .subscribeOn(Schedulers.io())\n            .observeOn(Schedulers.computation())\n            .subscribe();\n    }\n\n```\n\nCould you please explain me: what's wrong?\n", "url": "https://github.com/requery/requery/issues/168", "user": "huzzoid", "labels": ["bug", "enhancement"], "created": "2016-06-02 06:22:20", "closed": "2016-06-03 04:10:06", "commits": {"1c66478bd048c79668ee2d1881ef2010f85a5a50": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "1c66478bd048c79668ee2d1881ef2010f85a5a50", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["e77f61f2dfb4561b588e669717624ddb9f35c34b"], "nameRev": "1c66478bd048c79668ee2d1881ef2010f85a5a50 tags/1.0.0-beta22~7", "commitMessage": "Resolve #168 Generate type changes for update queries\n", "commitDateTime": "2016-06-02 21:09:44", "authoredDateTime": "2016-06-02 21:09:44", "commitGitStats": [{"filePath": "requery-test/src/test/java/io/requery/test/CompletableEntityStoreTest.java", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "requery-test/src/test/java/io/requery/test/RxTest.java", "insertions": 20, "deletions": 1, "lines": 21}, {"filePath": "requery/src/main/java/io/requery/TransactionListener.java", "insertions": 9, "deletions": 9, "lines": 18}, {"filePath": "requery/src/main/java/io/requery/query/{SuppliedScalar.java => BaseScalar.java}", "insertions": 9, "deletions": 12, "lines": 21}, {"filePath": "requery/src/main/java/io/requery/query/element/QueryElement.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/query/element/QueryOperation.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/rx/TypeChangeListener.java", "insertions": 6, "deletions": 17, "lines": 23}, {"filePath": "requery/src/main/java/io/requery/sql/BatchUpdateOperation.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/CompositeTransactionListener.java", "insertions": 9, "deletions": 9, "lines": 18}, {"filePath": "requery/src/main/java/io/requery/sql/ConnectionTransaction.java", "insertions": 12, "deletions": 9, "lines": 21}, {"filePath": "requery/src/main/java/io/requery/sql/EntityDataStore.java", "insertions": 7, "deletions": 2, "lines": 9}, {"filePath": "requery/src/main/java/io/requery/sql/{EntityProxyTransaction.java => EntityTransaction.java}", "insertions": 6, "deletions": 7, "lines": 13}, {"filePath": "requery/src/main/java/io/requery/sql/EntityUpdateOperation.java", "insertions": 7, "deletions": 8, "lines": 15}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/InsertReturningOperation.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/ManagedTransaction.java", "insertions": 18, "deletions": 14, "lines": 32}, {"filePath": "requery/src/main/java/io/requery/sql/RuntimeConfiguration.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/SelectCountOperation.java", "insertions": 6, "deletions": 7, "lines": 13}, {"filePath": "requery/src/main/java/io/requery/sql/SelectOperation.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/ThreadLocalTransaction.java", "insertions": 14, "deletions": 4, "lines": 18}, {"filePath": "requery/src/main/java/io/requery/sql/TransactionEntitiesSet.java", "insertions": 25, "deletions": 1, "lines": 26}, {"filePath": "requery/src/main/java/io/requery/sql/TransactionProvider.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "requery/src/main/java/io/requery/sql/TransactionScope.java", "insertions": 13, "deletions": 4, "lines": 17}, {"filePath": "requery/src/main/java/io/requery/sql/UpdateOperation.java", "insertions": 21, "deletions": 26, "lines": 47}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}], "filteredCommits": ["1c66478bd048c79668ee2d1881ef2010f85a5a50"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 172, "deletions": 137, "lines": 309, "gitFilesChange": 22}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/rx", "requery/src/main/java/io/requery/sql", "requery/src/main/java/io/requery/query", "requery/src/main/java/io/requery", "requery/src/main/java/io/requery/query/element"]}, {"title": "[BUG] The cleaned collections in entity are inserted on upsert", "body": "With the 6a4f061dc99a9a791a13c7b7ca57c17a6d9424a4 commit, the problem was partially solved for the `insert`, but always present for the `upsert`.\n\n**Entites example:**\n\n``` java\npublic interface User extends Parcelable, Persistable {\n    @Key\n    String getId();\n\n    @OneToMany(cascade = {CascadeAction.SAVE, CascadeAction.DELETE})\n    List<Post> getPosts();\n}\n```\n\n``` java\npublic interface Post extends Parcelable, Persistable {\n    @Key\n    String getId();\n\n    @ManyToOne(cascade = {CascadeAction.NONE})\n    User getUser();\n}\n```\n\nWith this code:\n\n``` java\n//...\nPost post = new Post();\npost.setId(UUID.randomUUID().toString());\n\nUser user = new User();\nuser.setId(UUID.randomUUID().toString());\nuser.getPosts().add(post);\nuser.getPosts().clear();\n\nsingleEntityStore.upsert(user);\n```\n\nThe user is inserted in database, and the post is also inserted in database, but without user relation (the value of user field in post is `null` in database). Even if we define the `CascadeAction.NONE`, the behavior is identical.\n\nNormally, the `upsert` should have the same behavior as the `insert`.\n\n**Other problem for `OneToMany`:**\n\nFor the `insert`, the cascade action is not used, and so, the collection is never persisted, even if you used `CascadeAction.SAVE`.\n\nThe issue #155 is perhaps a related problem.\n", "url": "https://github.com/requery/requery/issues/166", "user": "francoispluchino", "labels": ["bug"], "created": "2016-05-30 15:59:08", "closed": "2016-06-01 03:35:43", "commits": {"1a87218b1bb0a2a34ec4bf2aecbe77d31b3e8376": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "1a87218b1bb0a2a34ec4bf2aecbe77d31b3e8376", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["dea14249f9646e2373536828aa618c23719663a6"], "nameRev": "1a87218b1bb0a2a34ec4bf2aecbe77d31b3e8376 tags/1.0.0-beta21~4", "commitMessage": "Resolve #155, Resolve #166 Fix one-to-many cascade constraint violation, unnecessary insert\n", "commitDateTime": "2016-05-31 20:35:27", "authoredDateTime": "2016-05-31 20:35:27", "commitGitStats": [{"filePath": "requery-test/src/test/java/io/requery/test/UpsertTest.java", "insertions": 13, "deletions": 2, "lines": 15}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 16, "deletions": 14, "lines": 30}], "commitSpoonAstDiffStats": [{"spoonFilePath": "UpsertTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.UpsertTest.testUpsertInsertOneToManyEmptyCollection()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.UpsertTest.testUpsertOneToMany()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean,io.requery.sql.EntityWriter$CascadeMode)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.sql.EntityWriter.updateAssociations(io.requery.sql.EntityWriter$CascadeMode,java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 6, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 3}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Invalid UUID conversion from byte array", "body": "", "url": "https://github.com/requery/requery/issues/163", "user": "npurushe", "labels": ["bug"], "created": "2016-05-27 06:01:10", "closed": "2016-05-27 06:04:15", "commits": {"f1e66a5520ff6c05f9c9528b66ca65d4b59ce41e": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f1e66a5520ff6c05f9c9528b66ca65d4b59ce41e", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["1b60fcc81454e91117ceb4c38b20d962c9d23e37"], "nameRev": "f1e66a5520ff6c05f9c9528b66ca65d4b59ce41e tags/1.0.0-beta21~10", "commitMessage": "Resolve #163 Fix UUID conversion from byte array\n", "commitDateTime": "2016-05-26 23:01:50", "authoredDateTime": "2016-05-26 23:01:50", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/converter/UUIDConverter.java", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "UUIDConverter.java", "spoonMethods": [{"spoonMethodName": "io.requery.converter.UUIDConverter.convertToMapped(java.lang.Class,byte[])", "TOT": 6, "UPD": 1, "INS": 2, "MOV": 2, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f1e66a5520ff6c05f9c9528b66ca65d4b59ce41e"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 1, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 1, "INS": 2, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/converter"], "changesInPackagesSPOON": ["io.requery.converter.UUIDConverter.convertToMapped(java.lang.Class,byte[])"]}, {"title": "Null object reference on OneToMany cascade relation when entity is saved", "body": "When I want to insert (with upsert) an entity in the database with a relation `OneToMany`, an exception is thrown.\n\n**Entity example:**\n\n``` java\npublic interface User extends Parcelable, Persistable {\n    //...\n\n    @OneToMany(cascade = {CascadeAction.SAVE, CascadeAction.DELETE})\n    List<Post> getPosts();\n}\n```\n\n**Stack trace:**\n\n```\nW/System.err: java.lang.NullPointerException: Attempt to invoke interface method 'java.lang.Object io.requery.util.function.Supplier.get()' on a null object reference\nW/System.err:     at io.requery.sql.Attributes.get(Attributes.java:38)\nW/System.err:     at io.requery.sql.EntityWriter.updateInverseAssociation(EntityWriter.java:771)\nW/System.err:     at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:655)\nW/System.err:     at io.requery.sql.EntityWriter.insert(EntityWriter.java:452)\nW/System.err:     at io.requery.sql.EntityWriter.upsert(EntityWriter.java:493)\nW/System.err:     at io.requery.sql.EntityDataStore.upsert(EntityDataStore.java:265)\nW/System.err:     at io.requery.rx.SingleEntityStoreFromBlocking$7.get(SingleEntityStoreFromBlocking.java:148)\nW/System.err:     at io.requery.rx.SingleOnSubscribeFromSupplier.call(SingleOnSubscribeFromSupplier.java:34)\nW/System.err:     at io.requery.rx.SingleOnSubscribeFromSupplier.call(SingleOnSubscribeFromSupplier.java:23)\nW/System.err:     at rx.Single$1.call(Single.java:94)\nW/System.err:     at rx.Single$1.call(Single.java:74)\nW/System.err:     at rx.Single.subscribe(Single.java:1725)\nW/System.err:     at rx.Single.subscribe(Single.java:1802)\nW/System.err:     at rx.Single$19$1.call(Single.java:1857)\nW/System.err:     at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:55)\nW/System.err:     at rx.internal.schedulers.ExecutorScheduler$ExecutorSchedulerWorker.run(ExecutorScheduler.java:108)\nW/System.err:     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1113)\nW/System.err:     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:588)\nW/System.err:     at java.lang.Thread.run(Thread.java:818)\n```\n\nI used the `1.0.0-beta20` version and Rx observable. I added the `mappedBy` option, but I get the same error.\n", "url": "https://github.com/requery/requery/issues/162", "user": "francoispluchino", "labels": ["bug"], "created": "2016-05-26 14:53:03", "closed": "2016-05-27 04:44:19", "commits": {"9a39021159d33010a47588e3cb9aa5bfb2344488": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "9a39021159d33010a47588e3cb9aa5bfb2344488", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["9873845890bd114ae3b5ec0a2eae1c9359c50a2e"], "nameRev": "9a39021159d33010a47588e3cb9aa5bfb2344488 tags/1.0.0-beta21~12", "commitMessage": "Resolve #162 Validate OneToMany has a reverse mapping\n", "commitDateTime": "2016-05-26 21:44:02", "authoredDateTime": "2016-05-26 21:44:02", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGraphValidator.java", "insertions": 4, "deletions": 1, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGraphValidator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGraphValidator.validateEntity(io.requery.processor.EntityDescriptor)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.requery.processor.EntityGraphValidator.validateRelationship(io.requery.processor.ElementValidator,io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9a39021159d33010a47588e3cb9aa5bfb2344488"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 1, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 0, "INS": 2, "MOV": 3, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityGraphValidator.validateEntity(io.requery.processor.EntityDescriptor)", "io.requery.processor.EntityGraphValidator.validateRelationship(io.requery.processor.ElementValidator,io.requery.processor.AttributeDescriptor,io.requery.processor.AttributeDescriptor)"]}, {"title": "Proguard issues Requery beta19", "body": "#136 is still not resolved. I upgraded to beta19 and removed `-dontwarn io.requery.**` and we're still getting issues.\n\n> Warning: io.requery.android.sqlcipher.SqlCipherDatabaseSource: can't find superclass or interface net.sqlcipher.database.SQLiteOpenHelper\n> Warning: io.requery.android.sqlitex.SqlitexDatabaseSource: can't find superclass or interface io.requery.android.database.sqlite.SQLiteOpenHelper\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteConstraintException\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteException\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteException\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteException\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteException\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherConnection: can't find referenced class net.sqlcipher.database.SQLiteException\n> Warning: io.requery.android.sqlcipher.SqlCipherDatabaseSource: can't find referenced class net.sqlcipher.database.SQLiteOpenHelper\n> Warning: io.requery.android.sqlcipher.SqlCipherDatabaseSource: can't find referenced class net.sqlcipher.database.SQLiteDatabase\n> Warning: io.requery.android.sqlcipher.SqlCipherDatabaseSource: can't find referenced method 'net.sqlcipher.database.SQLiteDatabase getWritableDatabase(java.lang.String)' in program class io.requery.android.sqlcipher.SqlCipherDatabaseSource\n> Warning: io.requery.android.sqlcipher.SqlCipherDatabaseSource: can't find referenced method 'net.sqlcipher.database.SQLiteDatabase getReadableDatabase(java.lang.String)' in program class io.requery.android.sqlcipher.SqlCipherDatabaseSource\n", "url": "https://github.com/requery/requery/issues/160", "user": "vanniktech", "labels": ["bug"], "created": "2016-05-25 08:18:41", "closed": "2016-05-26 04:38:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Is there a way to auto insert/update relationship?", "body": "Let's say, I am using a web api which gives me a list of articles, each article has an author relationship, article is keyed by id, author is keyed by username.\n\nNow I am trying to do\ndataStore.insert(articles), this throws unique constraint violation on author username if articles has same author.\n\nSo my question\nis there a way to auto-detect if the relationship is already existing by the key, then do insert or update accordingly?\n", "url": "https://github.com/requery/requery/issues/155", "user": "tsunamilx", "labels": ["bug", "question"], "created": "2016-05-24 04:01:18", "closed": "2016-06-01 03:35:43", "commits": {"6a4f061dc99a9a791a13c7b7ca57c17a6d9424a4": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "1a87218b1bb0a2a34ec4bf2aecbe77d31b3e8376": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 7.000277777777778, "commitsDetails": [{"commitHash": "6a4f061dc99a9a791a13c7b7ca57c17a6d9424a4", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["f1e66a5520ff6c05f9c9528b66ca65d4b59ce41e"], "nameRev": "6a4f061dc99a9a791a13c7b7ca57c17a6d9424a4 tags/1.0.0-beta21~9", "commitMessage": "Resolve #155 Ignore row count on clearing one-to-many elements\n", "commitDateTime": "2016-05-26 23:03:39", "authoredDateTime": "2016-05-26 23:03:39", "commitGitStats": [{"filePath": "requery-test/src/main/java/io/requery/test/model3/AbstractEvent.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "requery-test/src/test/java/io/requery/test/UpsertTest.java", "insertions": 20, "deletions": 7, "lines": 27}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AbstractEvent.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model3.AbstractEvent", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "UpsertTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.UpsertTest.testUpsertInsert()", "TOT": 10, "UPD": 1, "INS": 2, "MOV": 5, "DEL": 2}, {"spoonMethodName": "io.requery.test.UpsertTest.testUpsertInsertOneToMany()", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.requery.test.UpsertTest.testUpsertUpdate()", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.requery.test.UpsertTest.testUpsertInsertOneToManyEmptyCollection()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.cascadeWrite(io.requery.sql.EntityWriter$CascadeMode,java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "1a87218b1bb0a2a34ec4bf2aecbe77d31b3e8376", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["dea14249f9646e2373536828aa618c23719663a6"], "nameRev": "1a87218b1bb0a2a34ec4bf2aecbe77d31b3e8376 tags/1.0.0-beta21~4", "commitMessage": "Resolve #155, Resolve #166 Fix one-to-many cascade constraint violation, unnecessary insert\n", "commitDateTime": "2016-05-31 20:35:27", "authoredDateTime": "2016-05-31 20:35:27", "commitGitStats": [{"filePath": "requery-test/src/test/java/io/requery/test/UpsertTest.java", "insertions": 13, "deletions": 2, "lines": 15}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 16, "deletions": 14, "lines": 30}], "commitSpoonAstDiffStats": [{"spoonFilePath": "UpsertTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.UpsertTest.testUpsertInsertOneToManyEmptyCollection()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.UpsertTest.testUpsertOneToMany()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean,io.requery.sql.EntityWriter$CascadeMode)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}, {"spoonMethodName": "io.requery.sql.EntityWriter.updateAssociations(io.requery.sql.EntityWriter$CascadeMode,java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 6, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 3}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["6a4f061dc99a9a791a13c7b7ca57c17a6d9424a4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 2, "lines": 6, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-test/src/main/java/io/requery/test/model3", "requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.test.model3.AbstractEvent", "io.requery.sql.EntityWriter.cascadeWrite(io.requery.sql.EntityWriter$CascadeMode,java.lang.Object,io.requery.proxy.EntityProxy)"]}, {"title": "Raw select picks String datatype if the first row has a null value", "body": "beta19\n\nI'm using a variant of the EnumOrdinalConverter which stores `Integer` (instead of `int`) so I can use null values.  After going through the results of  `.raw(...).get().toList()` I ran into an unexpected type mismatch where 1 of 3 enum fields out of `tuple.get(index)` reported itself as a String instead of an Integer.  After looking at my database, it seems this is happening because the first several rows of the dataset have a `null` value for that field.  (The other two enum fields that are working correctly are never null.)\n", "url": "https://github.com/requery/requery/issues/154", "user": "dukeyin", "labels": ["bug"], "created": "2016-05-23 23:42:04", "closed": "2016-06-01 07:26:14", "commits": {"f6756693d1abf65a32dd4ab1283a1782fc92006c": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "e853e2e8017cbfe6848febe1f726dfbed39a8eb4": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 8.000277777777777, "commitsDetails": [{"commitHash": "f6756693d1abf65a32dd4ab1283a1782fc92006c", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["24358e9901e1a53ffa7220d2743ffd258cb64c21"], "nameRev": "f6756693d1abf65a32dd4ab1283a1782fc92006c tags/1.0.0-beta20~1", "commitMessage": "Resolve #154 Handle key attribute that is also an association\n", "commitDateTime": "2016-05-25 21:03:56", "authoredDateTime": "2016-05-25 21:03:56", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityReader.java", "insertions": 3, "deletions": 2, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityReader.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityReader.fromResult(java.lang.Object,java.sql.ResultSet,io.requery.meta.Attribute[])", "TOT": 7, "UPD": 0, "INS": 4, "MOV": 2, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "e853e2e8017cbfe6848febe1f726dfbed39a8eb4", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["1a87218b1bb0a2a34ec4bf2aecbe77d31b3e8376"], "nameRev": "e853e2e8017cbfe6848febe1f726dfbed39a8eb4 tags/1.0.0-beta21~3", "commitMessage": "Resolve #154 Handle association primary key in select query / write operations\n", "commitDateTime": "2016-06-01 00:25:55", "authoredDateTime": "2016-06-01 00:25:55", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/Attributes.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/EntityReader.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 3, "deletions": 2, "lines": 5}, {"filePath": "requery/src/main/java/io/requery/sql/GenericMapping.java", "insertions": 2, "deletions": 4, "lines": 6}, {"filePath": "requery/src/main/java/io/requery/sql/PreparedQueryOperation.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/SelectResult.java", "insertions": 3, "deletions": 2, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Attributes.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.Attributes.replaceForeignKeyReference(java.lang.Object,io.requery.meta.Attribute)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityReader.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityReader", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.1.test(io.requery.meta.Attribute)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean,io.requery.sql.EntityWriter$CascadeMode).5.test(io.requery.meta.Attribute)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "GenericMapping.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.GenericMapping.mapAttribute(io.requery.meta.Attribute)", "TOT": 6, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 2}]}, {"spoonFilePath": "PreparedQueryOperation.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.PreparedQueryOperation.mapParameters(java.sql.PreparedStatement,io.requery.sql.BoundParameters)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SelectResult.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.SelectResult.iterator(int,int)", "TOT": 3, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f6756693d1abf65a32dd4ab1283a1782fc92006c", "e853e2e8017cbfe6848febe1f726dfbed39a8eb4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 16, "deletions": 13, "lines": 29, "gitFilesChange": 6}, "spoonStatsSummary": {"TOT": 25, "UPD": 3, "INS": 10, "MOV": 9, "DEL": 3, "spoonFilesChanged": 6, "spoonMethodsChanged": 8}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.Attributes.replaceForeignKeyReference(java.lang.Object,io.requery.meta.Attribute)", "io.requery.sql.GenericMapping.mapAttribute(io.requery.meta.Attribute)", "io.requery.sql.EntityWriter.1.test(io.requery.meta.Attribute)", "io.requery.sql.PreparedQueryOperation.mapParameters(java.sql.PreparedStatement,io.requery.sql.BoundParameters)", "io.requery.sql.EntityReader.fromResult(java.lang.Object,java.sql.ResultSet,io.requery.meta.Attribute[])", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean,io.requery.sql.EntityWriter$CascadeMode).5.test(io.requery.meta.Attribute)", "io.requery.sql.SelectResult.iterator(int,int)", "io.requery.sql.EntityReader"]}, {"title": "Error while watching for changes with Limit statement", "body": "I've an selection with limit statement, and I'm using the method `toSelfObservable()` to watch changes on FileEntity table:\n\n``` java\ngetData().select(FileEntity.class).where(FileEntity.DOWNLOAD_COMPLETED.eq(true))\n        .limit(PAGINATION_LIMIT).get().toSelfObservable()\n        .observeOn(AndroidSchedulers.mainThread())\n        .flatMap(fileEntities -> fileEntities.toObservable().toList())\n        .subscribe(fileEntities -> {\n            //do something with entities\n        }, Throwable::printStackTrace);\n```\n\nBut when another query affects this one I receive the following error:\n\n```\n05-23 01:42:12.848 W/System.err: java.lang.IllegalStateException\n05-23 01:42:12.849 W/System.err:     at io.requery.query.BaseResult.iterator(BaseResult.java:109)\n05-23 01:42:12.849 W/System.err:     at io.requery.query.BaseResult.iterator(BaseResult.java:48)\n05-23 01:42:12.849 W/System.err:     at rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:50)\n05-23 01:42:12.849 W/System.err:     at rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:33)\n05-23 01:42:12.849 W/System.err:     at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50)\n05-23 01:42:12.849 W/System.err:     at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)\n05-23 01:42:12.849 W/System.err:     at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50)\n05-23 01:42:12.849 W/System.err:     at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)\n05-23 01:42:12.849 W/System.err:     at rx.Observable.unsafeSubscribe(Observable.java:8460)\n05-23 01:42:12.849 W/System.err:     at rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:248)\n05-23 01:42:12.849 W/System.err:     at rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:145)\n05-23 01:42:12.849 W/System.err:     at rx.internal.operators.OperatorMap$MapSubscriber.onNext(OperatorMap.java:74)\n05-23 01:42:12.849 W/System.err:     at rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.call(OperatorObserveOn.java:215)\n05-23 01:42:12.849 W/System.err:     at rx.android.schedulers.LooperScheduler$ScheduledAction.run(LooperScheduler.java:107)\n05-23 01:42:12.849 W/System.err:     at android.os.Handler.handleCallback(Handler.java:739)\n05-23 01:42:12.849 W/System.err:     at android.os.Handler.dispatchMessage(Handler.java:95)\n05-23 01:42:12.849 W/System.err:     at android.os.Looper.loop(Looper.java:135)\n05-23 01:42:12.849 W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:5256)\n05-23 01:42:12.849 W/System.err:     at java.lang.reflect.Method.invoke(Native Method)\n05-23 01:42:12.849 W/System.err:     at java.lang.reflect.Method.invoke(Method.java:372)\n05-23 01:42:12.849 W/System.err:     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:898)\n05-23 01:42:12.849 W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:693)\n05-23 01:42:12.850 W/System.err: java.lang.IllegalStateException\n05-23 01:42:12.850 W/System.err:     at io.requery.query.BaseResult.iterator(BaseResult.java:109)\n05-23 01:42:12.850 W/System.err:     at io.requery.query.BaseResult.iterator(BaseResult.java:48)\n05-23 01:42:12.850 W/System.err:     at rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:50)\n05-23 01:42:12.850 W/System.err:     at rx.internal.operators.OnSubscribeFromIterable.call(OnSubscribeFromIterable.java:33)\n05-23 01:42:12.850 W/System.err:     at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50)\n05-23 01:42:12.850 W/System.err:     at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)\n05-23 01:42:12.850 W/System.err:     at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:50)\n05-23 01:42:12.850 W/System.err:     at rx.internal.operators.OnSubscribeLift.call(OnSubscribeLift.java:30)\n05-23 01:42:12.850 W/System.err:     at rx.Observable.unsafeSubscribe(Observable.java:8460)\n05-23 01:42:12.850 W/System.err:     at rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:248)\n05-23 01:42:12.850 W/System.err:     at rx.internal.operators.OperatorMerge$MergeSubscriber.onNext(OperatorMerge.java:145)\n05-23 01:42:12.850 W/System.err:     at rx.internal.operators.OperatorMap$MapSubscriber.onNext(OperatorMap.java:74)\n05-23 01:42:12.850 W/System.err:     at rx.internal.operators.OperatorObserveOn$ObserveOnSubscriber.call(OperatorObserveOn.java:215)\n05-23 01:42:12.850 W/System.err:     at rx.android.schedulers.LooperScheduler$ScheduledAction.run(LooperScheduler.java:107)\n05-23 01:42:12.850 W/System.err:     at android.os.Handler.handleCallback(Handler.java:739)\n05-23 01:42:12.850 W/System.err:     at android.os.Handler.dispatchMessage(Handler.java:95)\n05-23 01:42:12.850 W/System.err:     at android.os.Looper.loop(Looper.java:135)\n05-23 01:42:12.851 W/System.err:     at android.app.ActivityThread.main(ActivityThread.java:5256)\n05-23 01:42:12.851 W/System.err:     at java.lang.reflect.Method.invoke(Native Method)\n05-23 01:42:12.851 W/System.err:     at java.lang.reflect.Method.invoke(Method.java:372)\n05-23 01:42:12.851 W/System.err:     at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:898)\n05-23 01:42:12.851 W/System.err:     at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:693)\n```\n", "url": "https://github.com/requery/requery/issues/153", "user": "YuriHeupa", "labels": ["bug"], "created": "2016-05-23 04:49:25", "closed": "2016-05-24 03:40:06", "commits": {"d7b67d33e8d1cfb531b5c045976a6c9fe51ef5e0": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "d7b67d33e8d1cfb531b5c045976a6c9fe51ef5e0", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["48a8973385167b00fc46c8d02e61a800e11bfe8a"], "nameRev": "d7b67d33e8d1cfb531b5c045976a6c9fe51ef5e0 tags/1.0.0-beta20~13", "commitMessage": "Resolve #153 Fix result closed exception when observing query with limit\n", "commitDateTime": "2016-05-23 20:39:51", "authoredDateTime": "2016-05-23 20:39:51", "commitGitStats": [{"filePath": "requery-test/src/test/java/io/requery/test/RxTest.java", "insertions": 27, "deletions": 2, "lines": 29}, {"filePath": "requery/src/main/java/io/requery/rx/OnSubscribeFromQuery.java", "insertions": 12, "deletions": 10, "lines": 22}, {"filePath": "requery/src/main/java/io/requery/rx/RxSupport.java", "insertions": 1, "deletions": 13, "lines": 14}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RxTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.RxTest.testRunInTransaction().12", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testRunInTransaction().13", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQueryObservablePull().14", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQuerySelfObservableRelational().9", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQuerySelfObservableDelete().8", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQueryObservableFromEntity().10", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQueryObservableFromEntity().11", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQueryObservablePull().14.onStart()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQueryObservablePull().14.onNext(io.requery.test.model.Person)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQueryObservableFromEntity().11.call(io.requery.test.model.Person)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQuerySelfObservableMap()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQuerySelfObservableDelete()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.test.RxTest.testQuerySelfObservableRelational()", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "OnSubscribeFromQuery.java", "spoonMethods": [{"spoonMethodName": "io.requery.rx.OnSubscribeFromQuery", "TOT": 4, "UPD": 2, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.rx.OnSubscribeFromQuery.call(rx.Subscriber)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.rx.OnSubscribeFromQuery.ElementProducer.request(long)", "TOT": 5, "UPD": 1, "INS": 2, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.rx.OnSubscribeFromQuery.ElementProducer", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 4}]}, {"spoonFilePath": "RxSupport.java", "spoonMethods": [{"spoonMethodName": "io.requery.rx.RxSupport.toObservable(io.requery.query.BaseResult,java.lang.Integer)", "TOT": 4, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["d7b67d33e8d1cfb531b5c045976a6c9fe51ef5e0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 13, "deletions": 23, "lines": 36, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 20, "UPD": 5, "INS": 5, "MOV": 4, "DEL": 6, "spoonFilesChanged": 2, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/rx"], "changesInPackagesSPOON": ["io.requery.rx.OnSubscribeFromQuery", "io.requery.rx.OnSubscribeFromQuery.call(rx.Subscriber)", "io.requery.rx.OnSubscribeFromQuery.ElementProducer.request(long)", "io.requery.rx.OnSubscribeFromQuery.ElementProducer", "io.requery.rx.RxSupport.toObservable(io.requery.query.BaseResult,java.lang.Integer)"]}, {"title": "StackOverflowError on inserting Entity", "body": "Hey,\n\nI've spent a couple hours trying for the life of me getting Requery working as intended.  After stumbling around for a while, I've hit this error and cannot proceed.\n\n``` java\n@Entity\npublic interface InterfaceTest extends Persistable {\n    @Key @Generated\n    int id();\n\n    @OneToMany\n    List<WtfInterfaceEntity> getTests();\n\n    String string();\n}\n```\n\n``` java\n@Entity\npublic interface WtfInterface extends Persistable {\n    @Key int getId();\n\n    @ManyToOne\n    InterfaceTestEntity entity();\n}\n```\n\n``` java\n@RunWith(AndroidJUnit4.class)\npublic class ApplicationTest {\n    public static EntityDataStore<Persistable> dataStore;\n\n    @BeforeClass\n    public static void init() {\n        DatabaseSource source = new DatabaseSource(InstrumentationRegistry.getTargetContext(), Models.DEFAULT, 1);\n        source.setTableCreationMode(TableCreationMode.DROP_CREATE);\n\n        dataStore = new EntityDataStore<>(source.getConfiguration());\n    }\n\n    @Test\n    public void testInterfaceModel() {\n        dataStore.delete(InterfaceTestEntity.class).get().value();\n\n        InterfaceTestEntity entity = new InterfaceTestEntity();\n        entity.string(\"test\");\n\n        for (int i = 0; i < 10; i++) {\n            WtfInterfaceEntity test = new WtfInterfaceEntity();\n            test.setId(i);\n            test.entity(entity);\n\n            entity.getTests().add(test);\n        }\n\n        dataStore.insert(entity);\n        int count = dataStore.count(InterfaceTest.class).get().value();\n\n        assertEquals(1, count);\n    }\n}\n```\n\nThe resulting test operation returns a StackOverflowError, on dataStore.insert(entity);\n\nThe full logcat for this is [here](http://pastebin.com/fhjhwR1f)\n\nThanks!\n", "url": "https://github.com/requery/requery/issues/150", "user": "prefanatic", "labels": ["bug"], "created": "2016-05-21 21:07:03", "closed": "2016-05-24 06:15:26", "commits": {"e87761f41aff7eb2ec68b3cc80bb7dcf710d35a6": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "e87761f41aff7eb2ec68b3cc80bb7dcf710d35a6", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["049054b08c68b888325e1301dd9e443d82881298"], "nameRev": "e87761f41aff7eb2ec68b3cc80bb7dcf710d35a6 tags/1.0.0-beta20~11", "commitMessage": "Resolve #150 Fix StackOverflow on cascade one to many\n", "commitDateTime": "2016-05-23 23:15:14", "authoredDateTime": "2016-05-23 23:15:14", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/Attributes.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 15, "deletions": 13, "lines": 28}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Attributes.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.Attributes.replaceForeignKeyReference(java.lang.Object,io.requery.meta.Attribute)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.updateAssociations(io.requery.sql.EntityWriter$CascadeMode,java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 14, "UPD": 4, "INS": 7, "MOV": 3, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.bindParameters(java.sql.PreparedStatement,java.lang.Object,io.requery.util.function.Predicate)", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.upsert(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean,io.requery.sql.EntityWriter$CascadeMode).6.bindParameters(java.sql.PreparedStatement,java.lang.Object,io.requery.util.function.Predicate)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e87761f41aff7eb2ec68b3cc80bb7dcf710d35a6"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 16, "deletions": 14, "lines": 30, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 20, "UPD": 4, "INS": 13, "MOV": 3, "DEL": 0, "spoonFilesChanged": 2, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.Attributes.replaceForeignKeyReference(java.lang.Object,io.requery.meta.Attribute)", "io.requery.sql.EntityWriter.updateAssociations(io.requery.sql.EntityWriter$CascadeMode,java.lang.Object,io.requery.proxy.EntityProxy)", "io.requery.sql.EntityWriter.upsert(java.lang.Object,io.requery.proxy.EntityProxy)", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean,io.requery.sql.EntityWriter$CascadeMode).6.bindParameters(java.sql.PreparedStatement,java.lang.Object,io.requery.util.function.Predicate)", "io.requery.sql.EntityWriter.bindParameters(java.sql.PreparedStatement,java.lang.Object,io.requery.util.function.Predicate)"]}, {"title": "Strange behavior of EntityStore.findByKey returned exception without result", "body": "This is my code to implement update/insert for android sqlite:\n\n``` java\n        if(RequeryOrm.store().findByKey(CloudAccount.class, cloudAccount.getAccountId()) == null){\n            RequeryOrm.store().insert(cloudAccount);\n        }else{\n            RequeryOrm.store().update(cloudAccount);\n        }\n```\n\nfindByKey method throws NoSuchElementException from here:\n\n``` java\njava.util.NoSuchElementException\n    at io.requery.sql.ResultSetIterator.next(ResultSetIterator.java:98)\n    at io.requery.query.BaseResult.first(BaseResult.java:86)\n    at io.requery.sql.EntityDataStore.findByKey(EntityDataStore.java:376)\n```\n\nAs I excpected, findByKey should return null if there is not a matched result by query.\n\nHow do you think?\n", "url": "https://github.com/requery/requery/issues/149", "user": "cocia", "labels": ["bug"], "created": "2016-05-21 13:33:13", "closed": "2016-05-23 01:17:54", "commits": {"e88fb66f885b515b1cf2834cea5fc4a5efcd3cca": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "e88fb66f885b515b1cf2834cea5fc4a5efcd3cca", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["9c658ed4a55a868246cbe5b3f897505c6f30661b"], "nameRev": "e88fb66f885b515b1cf2834cea5fc4a5efcd3cca tags/1.0.0-beta19~4", "commitMessage": "Resolve #149 findByKey return null if entity not found\n", "commitDateTime": "2016-05-22 18:17:38", "authoredDateTime": "2016-05-22 18:17:38", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityDataStore.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityDataStore.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityDataStore.findByKey(java.lang.Class,java.lang.Object)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["e88fb66f885b515b1cf2834cea5fc4a5efcd3cca"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityDataStore.findByKey(java.lang.Class,java.lang.Object)"]}, {"title": "Can't select entity which has a compound key using another entity", "body": "Entity example same as before:\n\n```\npublic interface Chart...\n    @Key\n    @ManyToOne\n    Song getSong(); // Song has a single column @Key, primitive int, not autogenerated\n\n   @Key\n    Integer getChart();\n\n    ....\n```\n\nI try to run:\n\n```\nSingleEntityStore<Persistable>.select(ChartEntity.class).get().toList()\n```\n\n```\nCaused by: java.sql.SQLDataException: no column song\n at io.requery.android.sqlite.CursorResultSet.findColumn(CursorResultSet.java:113)\n at io.requery.sql.EntityReader.readCacheKey(EntityReader.java:476)\n at io.requery.sql.EntityReader.fromResult(EntityReader.java:496)\n at io.requery.sql.EntityResultReader.read(EntityResultReader.java:45)\n at io.requery.sql.ResultSetIterator.next(ResultSetIterator.java:101)\n at io.requery.query.BaseResult.collect(BaseResult.java:78) \n at io.requery.query.BaseResult.toList(BaseResult.java:70) \n```\n\nwhich includes all columns except for the ManyToOne Entity ID column.  (It does include the Integer part of the compound key).  This results in no rows being able to load.\n\nOn the other hand, this raw query works:\n`List<Tuple> list = SingleEntityStore<Persistable>.raw(\"SELECT c.*, s.name FROM Chart c, Song s WHERE c.song = s.id ORDER BY s.name, c.chart\").toList();`\n", "url": "https://github.com/requery/requery/issues/147", "user": "dukeyin", "labels": ["bug"], "created": "2016-05-19 20:08:55", "closed": "2016-05-24 04:14:01", "commits": {"88f1fec91c4350f3aae0598b27b019a0522f4734": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "049054b08c68b888325e1301dd9e443d82881298": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 4.000277777777778, "commitsDetails": [{"commitHash": "88f1fec91c4350f3aae0598b27b019a0522f4734", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["19fb67681c5fd1a1492fa205c43dcea793094963"], "nameRev": "88f1fec91c4350f3aae0598b27b019a0522f4734 tags/1.0.0-beta19~8", "commitMessage": "Resolve #147 Include foreign key in default selection\n", "commitDateTime": "2016-05-20 21:22:40", "authoredDateTime": "2016-05-20 21:22:40", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityReader.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityReader.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityReader", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "049054b08c68b888325e1301dd9e443d82881298", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["d7b67d33e8d1cfb531b5c045976a6c9fe51ef5e0"], "nameRev": "049054b08c68b888325e1301dd9e443d82881298 tags/1.0.0-beta20~12", "commitMessage": "Resolve #147 Fix ClassCastException when key value is an entity type\n", "commitDateTime": "2016-05-23 21:13:47", "authoredDateTime": "2016-05-23 21:13:47", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityReader.java", "insertions": 12, "deletions": 5, "lines": 17}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityReader.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityReader.readCacheKey(java.sql.ResultSet)", "TOT": 10, "UPD": 3, "INS": 0, "MOV": 4, "DEL": 3}, {"spoonMethodName": "io.requery.sql.EntityReader.readKey(io.requery.meta.Attribute,java.sql.ResultSet,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["88f1fec91c4350f3aae0598b27b019a0522f4734", "049054b08c68b888325e1301dd9e443d82881298"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 13, "deletions": 6, "lines": 19, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 13, "UPD": 3, "INS": 2, "MOV": 5, "DEL": 3, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityReader", "io.requery.sql.EntityReader.readKey(io.requery.meta.Attribute,java.sql.ResultSet,int)", "io.requery.sql.EntityReader.readCacheKey(java.sql.ResultSet)"]}, {"title": "Syntax error when upserting with a compound @Key", "body": "I'm trying to use requery for the first time, using 1.0.0-beta18 for android.\n\nI have an Entity where I'd like to be able to do an upsert based on a pair of identity columns:\n\n```\npublic interface Chart...\n    @Key\n    @ManyToOne\n    Song getSong();\n\n   @Key\n    Integer getChart();\n\n    ....\n```\n\nThe operation ends up failing up for:\n\n```\nE/SQLiteLog: (1) near \"ANDsong\": syntax error\nMessage: near \"ANDsong\": syntax error (code 1): , while compiling: select chart from Chart where chart =? ANDsong =?\n```\n\nI thought it might be because of using an Entity as the `@Key` column, so I tried switching it out for an Integer ID without the `@ManyToOne`, but same problem:\n\n```\npublic interface Chart...\n    @Key\n    Integer getSongId();\n\n   @Key\n    Integer getChart();\n\n    ....\n```\n\n```\nE/SQLiteLog: (1) near \"ANDsongId\": syntax error\nMessage: near \"ANDsongId\": syntax error (code 1): , while compiling: select chart from Chart where chart =? ANDsongId =?\n```\n\nThe relevant part of the Requery stack trace seems to be:\n\n```\n...\nat io.requery.android.sqlite.SqlitePreparedStatement.<init>(SqlitePreparedStatement.java:38)\nat io.requery.android.sqlite.SqliteConnection.prepareStatement(SqliteConnection.java:131)\nat io.requery.android.sqlite.BaseConnection.prepareStatement(BaseConnection.java:160)\nat io.requery.sql.ConnectionDelegate.prepareStatement(ConnectionDelegate.java:53)\nat io.requery.sql.EntityReader.refresh(EntityReader.java:218)\nat io.requery.sql.EntityReader.refresh(EntityReader.java:180)\nat io.requery.sql.EntityReader.load(EntityReader.java:150)\nat io.requery.proxy.EntityProxy.loadProperty(EntityProxy.java:61)\nat io.requery.proxy.EntityProxy.get(EntityProxy.java:75)\nat io.requery.proxy.EntityProxy.get(EntityProxy.java:70)\nat io.requery.sql.EntityWriter.bindParameters(EntityWriter.java:360)\nat io.requery.sql.EntityUpdateOperation$1.get(EntityUpdateOperation.java:66)\nat io.requery.sql.EntityUpdateOperation$1.get(EntityUpdateOperation.java:55)\nat io.requery.query.SuppliedScalar.value(SuppliedScalar.java:51)\nat io.requery.sql.EntityWriter.insert(EntityWriter.java:445)\nat io.requery.sql.EntityWriter.upsert(EntityWriter.java:484)\nat io.requery.sql.EntityDataStore.upsert(EntityDataStore.java:263)\n...\n```\n", "url": "https://github.com/requery/requery/issues/143", "user": "dukeyin", "labels": ["bug"], "created": "2016-05-19 01:25:05", "closed": "2016-05-19 07:32:08", "commits": {"8fbf17dd39d0be86b4d6f5d7983a05701fc222db": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "8fbf17dd39d0be86b4d6f5d7983a05701fc222db", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["4b363da5e5d1c6e76e907c764a1f06769afbae96"], "nameRev": "8fbf17dd39d0be86b4d6f5d7983a05701fc222db tags/1.0.0-beta19~10", "commitMessage": "Resolve #143 Syntax error when upserting with a compound Key (#144)", "commitDateTime": "2016-05-19 00:32:08", "authoredDateTime": "2016-05-19 03:32:08", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/QueryBuilder.java", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "QueryBuilder.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.QueryBuilder.appendWhereConditions(java.util.Set)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Proguard issues. Warning can't find referenced class", "body": "When running our app with proguard we get the following warnings:\n\n```\nWarning: io.requery.query.Scalar: can't find referenced class java.util.concurrent.CompletableFuture\nWarning: io.requery.query.Scalar: can't find referenced class java.util.concurrent.CompletableFuture\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.concurrent.CompletableFuture\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.concurrent.CompletableFuture\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.function.Supplier\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.concurrent.CompletableFuture\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.concurrent.CompletableFuture\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.concurrent.CompletableFuture\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.concurrent.CompletableFuture\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.concurrent.CompletableFuture\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.function.Supplier\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.function.Supplier\nWarning: io.requery.query.SuppliedScalar: can't find referenced class java.util.concurrent.CompletableFuture\nWarning: io.requery.query.SuppliedScalar$1: can't find referenced class java.util.function.Supplier\nWarning: io.requery.query.SuppliedScalar$1: can't find referenced class java.util.function.Supplier\nWarning: io.requery.rx.RxSupport$4: can't find enclosing method 'rx.Observable toObservable(io.requery.util.CloseableIterator)' in program class io.requery.rx.RxSupport\nWarning: io.requery.sql.ConnectionDelegate: can't find referenced method 'void setSchema(java.lang.String)' in library class java.sql.Connection\nWarning: io.requery.sql.ConnectionDelegate: can't find referenced method 'java.lang.String getSchema()' in library class java.sql.Connection\nWarning: io.requery.sql.ConnectionDelegate: can't find referenced method 'void abort(java.util.concurrent.Executor)' in library class java.sql.Connection\nWarning: io.requery.sql.ConnectionDelegate: can't find referenced method 'void setNetworkTimeout(java.util.concurrent.Executor,int)' in library class java.sql.Connection\nWarning: io.requery.sql.ConnectionDelegate: can't find referenced method 'int getNetworkTimeout()' in library class java.sql.Connection\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.naming.InitialContext\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.TransactionSynchronizationRegistry\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.naming.NamingException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.UserTransaction\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.TransactionSynchronizationRegistry\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.Status\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.UserTransaction\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.NotSupportedException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.SystemException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.TransactionSynchronizationRegistry\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.UserTransaction\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.RollbackException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.HeuristicMixedException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.HeuristicRollbackException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.UserTransaction\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.TransactionSynchronizationRegistry\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.Synchronization\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.naming.NamingException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.SystemException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.TransactionSynchronizationRegistry\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.naming.InitialContext\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.TransactionSynchronizationRegistry\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.UserTransaction\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.TransactionSynchronizationRegistry\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.naming.NamingException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.UserTransaction\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.naming.NamingException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.SystemException\nWarning: io.requery.sql.ManagedTransaction: can't find referenced class javax.transaction.TransactionSynchronizationRegistry\nWarning: io.requery.sql.StatementDelegate: can't find referenced method 'void closeOnCompletion()' in library class java.sql.Statement\nWarning: io.requery.sql.StatementDelegate: can't find referenced method 'boolean isCloseOnCompletion()' in library class java.sql.Statement\nWarning: io.requery.util.function.Consumer: can't find referenced class java.lang.FunctionalInterface\nWarning: io.requery.util.function.Function: can't find referenced class java.lang.FunctionalInterface\nWarning: io.requery.util.function.Predicate: can't find referenced class java.lang.FunctionalInterface\nWarning: io.requery.util.function.Supplier: can't find referenced class java.lang.FunctionalInterface\n```\n\nand a few more.  Adding `-dontwarn io.requery.**` resolves this.\n\nShould not this be part of the Proguard rules that are shipped with the `aar`?\n", "url": "https://github.com/requery/requery/issues/136", "user": "vanniktech", "labels": ["bug"], "created": "2016-05-11 08:31:27", "closed": "2016-05-12 04:04:00", "commits": {"104668cfc1e5d544271f639b2c413030b78949c4": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "104668cfc1e5d544271f639b2c413030b78949c4", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["2d343a8aaa7008880673260338587fbedfad180e"], "nameRev": "104668cfc1e5d544271f639b2c413030b78949c4 tags/1.0.0-beta19~18", "commitMessage": "Resolve #136 Android update proguard rules\n", "commitDateTime": "2016-05-11 21:03:45", "authoredDateTime": "2016-05-11 21:03:45", "commitGitStats": [{"filePath": "requery-android/example/build.gradle", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-android/example/proguard-rules.pro", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "requery-android/proguard-rules.pro", "insertions": 11, "deletions": 1, "lines": 12}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["104668cfc1e5d544271f639b2c413030b78949c4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 2, "lines": 17, "gitFilesChange": 3}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/example/proguard-rules.pro", "requery-android/example", "requery-android/proguard-rules.pro"]}, {"title": "@Entity's \"name\" key being ignored", "body": "Using\n\n`@Entity(name = \"MyName\")`\n`...`\n\ndoes not generate MyName class. Instead, a class following the default rules is generated.\n", "url": "https://github.com/requery/requery/issues/130", "user": "ecdpalma", "labels": ["bug"], "created": "2016-05-06 21:19:46", "closed": "2016-05-07 03:43:52", "commits": {"f91974f240da2345134c308f26251aac616d5f6a": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f91974f240da2345134c308f26251aac616d5f6a", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["59a521ae8ca20dc28c45011dab931bc4a8f76f65"], "nameRev": "f91974f240da2345134c308f26251aac616d5f6a tags/1.0.0-beta18~5", "commitMessage": "Resolve #130 Fix @Entity.name not taking effect\n", "commitDateTime": "2016-05-06 20:40:43", "authoredDateTime": "2016-05-06 20:40:43", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 15, "deletions": 8, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.createQualifiedName()", "TOT": 21, "UPD": 4, "INS": 4, "MOV": 9, "DEL": 4}, {"spoonMethodName": "io.requery.processor.EntityType.isImmutable()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.createModelName()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f91974f240da2345134c308f26251aac616d5f6a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 8, "lines": 23, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 24, "UPD": 5, "INS": 5, "MOV": 10, "DEL": 4, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityType.createQualifiedName()", "io.requery.processor.EntityType.isImmutable()", "io.requery.processor.EntityType.createModelName()"]}, {"title": "Inheritance. keyAttribute and keyAttributes is null if @Key is defined in base class.", "body": "In case of inheritance for derived class $TYPE (io.requery.meta.Type) is incorrectly generated. keyAttribute and keyAttributes is null. @Key is defined in base class.\n", "url": "https://github.com/requery/requery/issues/126", "user": "a1grim", "labels": ["bug"], "created": "2016-05-04 09:14:44", "closed": "2016-05-06 06:14:42", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Inheritance. @PostUpdate @PostInsert @PostDelete methods in base class.", "body": "If to define the @PostUpdate @PostInsert @PostDelete methods in base class, then in the generated derived class there is no creation of listeners for these methods. In the version 1.0.0-beta15 it worked.\n", "url": "https://github.com/requery/requery/issues/125", "user": "a1grim", "labels": ["bug"], "created": "2016-05-04 08:46:04", "closed": "2016-05-16 03:39:29", "commits": {"091c3e2793280cbcd964b4e9bd1616893200a137": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "4b363da5e5d1c6e76e907c764a1f06769afbae96": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 11.000277777777777, "commitsDetails": [{"commitHash": "091c3e2793280cbcd964b4e9bd1616893200a137", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["598ab60f814b585b32eb9b5022b59be5c854d2c7"], "nameRev": "091c3e2793280cbcd964b4e9bd1616893200a137 tags/1.0.0-beta18~13", "commitMessage": "Resolve #125 Entity state listeners not added from super class\n", "commitDateTime": "2016-05-04 20:52:18", "authoredDateTime": "2016-05-04 20:52:18", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 10, "deletions": 0, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.isImmutable()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.merge(io.requery.processor.EntityType)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "4b363da5e5d1c6e76e907c764a1f06769afbae96", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["d23b24cd313bdae354e986d6cb4278aa5677d394"], "nameRev": "4b363da5e5d1c6e76e907c764a1f06769afbae96 tags/1.0.0-beta19~11", "commitMessage": "Resolve #125 Handle case when super class listener methods are not processed\n", "commitDateTime": "2016-05-15 20:39:14", "authoredDateTime": "2016-05-15 20:39:14", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 13, "deletions": 5, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.process(javax.annotation.processing.ProcessingEnvironment)", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.merge(io.requery.processor.EntityType)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.isImmutable()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["091c3e2793280cbcd964b4e9bd1616893200a137", "4b363da5e5d1c6e76e907c764a1f06769afbae96"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 23, "deletions": 5, "lines": 28, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7, "UPD": 5, "INS": 2, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityType.isImmutable()", "io.requery.processor.EntityType.merge(io.requery.processor.EntityType)", "io.requery.processor.EntityType.process(javax.annotation.processing.ProcessingEnvironment)"]}, {"title": "Stateless entity not working", "body": "Based on the example project, I changed all interfaces to abstract classes, it works, but when I add stateless = true to each entity, it throws exception:\nio.requery.PersistenceException: 1-1 relationship can only be removed from the owning side \n\nI need stateless entity due to discussion on this issue #73 .\n", "url": "https://github.com/requery/requery/issues/122", "user": "tsunamilx", "labels": ["bug"], "created": "2016-05-02 16:01:26", "closed": "2016-05-03 03:54:57", "commits": {"16523ceb43e6c76c0612e65c8b6d17ecaafc5f16": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "16523ceb43e6c76c0612e65c8b6d17ecaafc5f16", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["833eefbf71de0d712b69b611c740016ca549ef73"], "nameRev": "16523ceb43e6c76c0612e65c8b6d17ecaafc5f16 tags/1.0.0-beta18~16", "commitMessage": "Resolve #122 Don't throw exception if missing one-to-one value\n", "commitDateTime": "2016-05-02 20:54:39", "authoredDateTime": "2016-05-02 20:54:39", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 7, "deletions": 6, "lines": 13}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.updateAssociations(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 16, "UPD": 4, "INS": 1, "MOV": 9, "DEL": 2}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["16523ceb43e6c76c0612e65c8b6d17ecaafc5f16"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 7, "deletions": 6, "lines": 13, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 16, "UPD": 4, "INS": 1, "MOV": 9, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.updateAssociations(java.lang.Object,io.requery.proxy.EntityProxy)"]}, {"title": "Kotlin methods and property fields with getters incorrectly generate columns ", "body": "With the below example **beta16** generates an entity with `friend` and `enemy` columns, whereas only the `type` field should have been added as a column to the generated entity.\n\nIt is worth noting that with the example, as it is, compilation fails since the generated `PersonEntity` overrides `isFriend` and `isEnemy` which have not been marked as `open` for overriding (Kotlin classes and methods are not open for extension by default). Adding the `open` modifier to both of them does make the code compile, however I still don't think that the produced result is correct as only fields marked as `abstract` should be added as columns to the entity.\n\n``` kotlin\n@Entity\nabstract class Person {\n\n    @get:Column(nullable = false)\n    abstract var type: String\n\n    val isFriend: Boolean\n        get() = type == \"friend\"\n\n    fun isEnemy() = type == \"enemy\"\n}\n```\n\nI'd be quite happy with having a tackle at a fix myself, once agreed as to what the correct approach with regards to Kotlin entity definitions should be.\n", "url": "https://github.com/requery/requery/issues/114", "user": "martino2k6", "labels": ["bug"], "created": "2016-04-26 13:07:32", "closed": "2016-04-27 03:44:54", "commits": {"10f409f8b3c9940c4889a85de1360dd00e486cf0": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "10f409f8b3c9940c4889a85de1360dd00e486cf0", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["8306b23b97f3a4cc3427799783a0b6a378425471"], "nameRev": "10f409f8b3c9940c4889a85de1360dd00e486cf0 tags/1.0.0-beta17~16", "commitMessage": "Resolve #114 Don't generate attributes for final methods\n", "commitDateTime": "2016-04-26 20:43:58", "authoredDateTime": "2016-04-26 20:43:58", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/AttributeMember.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityDescriptor.java", "insertions": 4, "deletions": 2, "lines": 6}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 6, "deletions": 6, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AttributeMember.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.AttributeMember.validateField(io.requery.processor.ElementValidator)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityDescriptor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.isFinal()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generate()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityGenerator.generateType(com.squareup.javapoet.TypeSpec$Builder,com.squareup.javapoet.TypeName)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityGenerator.generateProperties(io.requery.processor.AttributeDescriptor,javax.lang.model.type.TypeMirror,com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName,com.squareup.javapoet.CodeBlock$Builder)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.isFinal()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.isStateless()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.isImmutable()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.typeName()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["10f409f8b3c9940c4889a85de1360dd00e486cf0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 13, "lines": 28, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 14, "UPD": 10, "INS": 2, "MOV": 2, "DEL": 0, "spoonFilesChanged": 4, "spoonMethodsChanged": 10}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityType.isFinal()", "io.requery.processor.EntityType.isStateless()", "io.requery.processor.AttributeMember.validateField(io.requery.processor.ElementValidator)", "io.requery.processor.isFinal()", "io.requery.processor.EntityType.isImmutable()", "io.requery.processor.EntityType.typeName()", "io.requery.processor.EntityGenerator.generateType(com.squareup.javapoet.TypeSpec$Builder,com.squareup.javapoet.TypeName)", "io.requery.processor.EntityGenerator.generate()", "io.requery.processor.EntityGenerator.generateProperties(io.requery.processor.AttributeDescriptor,javax.lang.model.type.TypeMirror,com.squareup.javapoet.TypeName,com.squareup.javapoet.TypeName,com.squareup.javapoet.CodeBlock$Builder)", "io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)"]}, {"title": "unable to marshal value io.requery.util.ObservableSet", "body": "On Android I get the following exception when trying to parcel an entity created from the abstract class below:\n\n```\njava.lang.RuntimeException: Parcel: unable to marshal value io.requery.util.ObservableSet@e324b4b\n     at android.os.Parcel.writeValue(Parcel.java:1418)\n     at io.requery.android.EntityParceler.writeToParcel(EntityParceler.java:80) \n     at com.m.b.persistence.requery.RequeryBEntity.writeToParcel(RequeryBEntity.java:686)\n     ...\n```\n\nRequeryB:\n\n``` Java\n@Entity\npublic abstract class RequeryB implements InterfaceB, Parcelable {\n\n\n    @Key @Generated\n    Long id;\n\n    String name;\n    Status status;\n    boolean alarmEnabled;\n    Long statusTimeStamp;\n    String imagePath;\n    Type type;\n    String notes;\n    float currentEstimate;\n\n\n\n    @OneToMany\n    Set<RequeryA> measurements_;\n\n    Long creationTimeStamp;\n    Double longitude;\n    Double latitude;\n    Double altitude;\n\n    @Override\n    public String toString() {\n        return this.getName() + \" [\" + this.getStatus().toString() + \"]\" ;\n    }\n}\n```\n\nRequeryA: \n\n``` Java\n@Entity\npublic abstract class RequeryA implements InterfaceA, Parcelable {\n\n    @Key\n    @Generated\n    long id;\n\n    @ManyToOne\n    RequeryA belongsTo_;\n\n    int count;\n\n    long observationTimeStamp;\n\n    String comment;\n\n\n}\n```\n", "url": "https://github.com/requery/requery/issues/113", "user": "thomas-se", "labels": ["bug"], "created": "2016-04-25 07:45:15", "closed": "2016-04-26 05:07:48", "commits": {"8306b23b97f3a4cc3427799783a0b6a378425471": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "8306b23b97f3a4cc3427799783a0b6a378425471", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["164b819a6e6ed7b72a12b1f016e159dcc5b3b126"], "nameRev": "8306b23b97f3a4cc3427799783a0b6a378425471 tags/1.0.0-beta17~17", "commitMessage": "Resolve #113 Don't parcel associations\n", "commitDateTime": "2016-04-25 22:07:35", "authoredDateTime": "2016-04-25 22:07:35", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/EntityParceler.java", "insertions": 3, "deletions": 0, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityParceler.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.EntityParceler.writeToParcel(java.lang.Object,android.os.Parcel)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8306b23b97f3a4cc3427799783a0b6a378425471"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 0, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android"], "changesInPackagesSPOON": ["io.requery.android.EntityParceler.writeToParcel(java.lang.Object,android.os.Parcel)"]}, {"title": "NullPointerException when running app for the second time.", "body": "I am collecting data from the web and storing it in DB when the app is run for the first time. \nOn the first run, insert and select query works fine without any problem.\nBut on the second run when I try to fetch data from the DB, it gives NullPointerException.\n\n`Caused by: java.lang.NullPointerException: Attempt to invoke interface method 'java.lang.Object io.requery.sql.Mapping.read(io.requery.query.Expression, java.sql.ResultSet, int)' on a null object reference\n                                                                        at io.requery.sql.EntityReader.fromResult(EntityReader.java:531)\n                                                                        at io.requery.sql.EntityResultReader.read(EntityResultReader.java:45)\n                                                                        at io.requery.sql.ResultSetIterator.next(ResultSetIterator.java:101)\n                                                                        at io.requery.query.BaseResult.collect(BaseResult.java:77)\n                                                                        at io.requery.query.BaseResult.toList(BaseResult.java:69)`\n\nThe query I have is:\n`data.select(Section.class).limit(20).offset(0).get().toList();`\n", "url": "https://github.com/requery/requery/issues/111", "user": "julianraj", "labels": ["bug"], "created": "2016-04-24 17:18:57", "closed": "2016-04-25 03:43:30", "commits": {"79e2b694baaef2dab52326a7e86853290563d3d8": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "79e2b694baaef2dab52326a7e86853290563d3d8", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["dc58e1d1b389ff40cf3f6f01ee51974d962006f2"], "nameRev": "79e2b694baaef2dab52326a7e86853290563d3d8 tags/1.0.0-beta16~4", "commitMessage": "Resolve #111 check connection meta data before creating reader/writers\n", "commitDateTime": "2016-04-24 20:33:05", "authoredDateTime": "2016-04-24 20:33:05", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityDataStore.java", "insertions": 6, "deletions": 0, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityDataStore.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityDataStore.context()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityDataStore.DataContext.read(java.lang.Class)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityDataStore.DataContext.write(java.lang.Class)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["79e2b694baaef2dab52326a7e86853290563d3d8"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 0, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityDataStore.context()", "io.requery.sql.EntityDataStore.DataContext.write(java.lang.Class)", "io.requery.sql.EntityDataStore.DataContext.read(java.lang.Class)"]}, {"title": "NullPointerException when adding to database", "body": "I'm getting the following exception when adding some new entities to the database:\n\n> java.lang.NullPointerException: Attempt to invoke virtual method 'boolean java.lang.Class.isInterface()' on a null object reference\n\nThere's no stacktrace so I can't track down where it's coming from but it seems to be one of the values being null, is it necessary for every value being added to have a value or is null acceptable? \n", "url": "https://github.com/requery/requery/issues/109", "user": "Glurt", "labels": ["bug"], "created": "2016-04-23 10:48:13", "closed": "2016-04-25 03:43:30", "commits": {"dc58e1d1b389ff40cf3f6f01ee51974d962006f2": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "fe7002118dbd7260845aaf47badb4cccbaf138d9": {"commitGHEventType": "referenced", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "dc58e1d1b389ff40cf3f6f01ee51974d962006f2", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["ae1d1b915c007f300cbcb80b924bd24956666b32"], "nameRev": "dc58e1d1b389ff40cf3f6f01ee51974d962006f2 tags/1.0.0-beta16~5", "commitMessage": "Resolve #109 Check for invalid reference class\n", "commitDateTime": "2016-04-24 20:31:20", "authoredDateTime": "2016-04-24 20:31:20", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 4, "deletions": 0, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.updateAssociations(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "fe7002118dbd7260845aaf47badb4cccbaf138d9", "commitGHEventType": "referenced", "commitUser": "npurushe", "commitParents": ["79e2b694baaef2dab52326a7e86853290563d3d8"], "nameRev": "fe7002118dbd7260845aaf47badb4cccbaf138d9 tags/1.0.0-beta16~3", "commitMessage": "Resolve #109 Use matching key type in generated join table entity\n", "commitDateTime": "2016-04-24 20:41:07", "authoredDateTime": "2016-04-24 20:41:07", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/JoinEntityGenerator.java", "insertions": 51, "deletions": 17, "lines": 68}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JoinEntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.JoinEntityGenerator.generate()", "TOT": 40, "UPD": 10, "INS": 14, "MOV": 9, "DEL": 7}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["dc58e1d1b389ff40cf3f6f01ee51974d962006f2", "fe7002118dbd7260845aaf47badb4cccbaf138d9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 55, "deletions": 17, "lines": 72, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 41, "UPD": 10, "INS": 15, "MOV": 9, "DEL": 7, "spoonFilesChanged": 2, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.updateAssociations(java.lang.Object,io.requery.proxy.EntityProxy)", "io.requery.processor.JoinEntityGenerator.generate()"]}, {"title": "Strict mode exception", "body": "@OneToMany MutableResult<DocumentVersion> getVersions();\n\nin other class we have \n\n@ManyToOne Document getDocument();\n\ninsert some data with .getVersions().add() and when i call getVersions() strict mode throws exception\n\n```\nE/StrictMode: A resource was acquired at attached stack trace but never released. See java.io.Closeable for information on avoiding resource leaks.\n              java.lang.Throwable: Explicit termination method 'close' not called\n                  at dalvik.system.CloseGuard.open(CloseGuard.java:180)\n                  at android.database.CursorWindow.<init>(CursorWindow.java:111)\n                  at android.database.AbstractWindowedCursor.clearOrCreateWindow(AbstractWindowedCursor.java:198)\n                  at android.database.sqlite.SQLiteCursor.fillWindow(SQLiteCursor.java:138)\n                  at android.database.sqlite.SQLiteCursor.getCount(SQLiteCursor.java:132)\n                  at android.database.AbstractCursor.moveToPosition(AbstractCursor.java:219)\n                  at io.requery.android.sqlite.CursorResultSet.<init>(CursorResultSet.java:68)\n                  at io.requery.android.sqlite.SqlitePreparedStatement.executeQuery(SqlitePreparedStatement.java:148)\n                  at io.requery.sql.SelectResult.iterator(SelectResult.java:136)\n                  at io.requery.query.BaseResult.iterator(BaseResult.java:111)\n                  at io.requery.query.ModifiableResult.iterator(ModifiableResult.java:69)\n```\n\nbeta11 version of the library\n", "url": "https://github.com/requery/requery/issues/108", "user": "miomao656", "labels": ["bug"], "created": "2016-04-21 12:06:18", "closed": "2016-04-23 04:04:50", "commits": {}, "ttf": 1.0002777777777778, "commitsDetails": []}, {"title": "Upgrading issue", "body": "When upgrading from beta11 to beta12 or above i get\n\n```\nE/AndroidRuntime: FATAL EXCEPTION: android_0\n                  java.lang.IllegalStateException: Fatal Exception thrown on Scheduler.Worker thread.\n                      at rx.internal.schedulers.ScheduledAction.run(ScheduledAction.java:62)\n                      at rx.schedulers.ExecutorScheduler$ExecutorSchedulerWorker.run(ExecutorScheduler.java:110)\n                      at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1080)\n                      at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:573)\n                      at java.lang.Thread.run(Thread.java:841)\n                   Caused by: java.lang.StackOverflowError\n                      at java.util.Arrays.hashCode(Arrays.java:1260)\n                      at io.requery.util.Objects.hash(Objects.java:61)\n                      at io.requery.meta.BaseType.hashCode(BaseType.java:167)\n                      at java.util.HashMap.secondaryHash(HashMap.java:350)\n                      at java.util.HashMap.put(HashMap.java:404)\n                      at java.util.HashSet.add(HashSet.java:95)\n                      at java.util.AbstractCollection.addAll(AbstractCollection.java:76)\n                      at io.requery.query.element.QueryElement.from(QueryElement.java:264)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:556)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.updateInverseAssociation(EntityWriter.java:739)\n                      at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:641)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:593)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:565)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.updateInverseAssociation(EntityWriter.java:739)\n                      at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:641)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:593)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:565)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.updateInverseAssociation(EntityWriter.java:739)\n                      at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:641)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:593)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:565)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.updateInverseAssociation(EntityWriter.java:739)\n                      at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:641)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:593)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:565)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.updateInverseAssociation(EntityWriter.java:739)\n                      at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:641)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:593)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:565)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:496)\n                      at io.requery.sql.EntityWriter.cascadeSave(EntityWriter.java:874)\n                      at io.requery.sql.EntityWriter.updateInverseAssociation(EntityWriter.java:739)\n                      at io.requery.sql.EntityWriter.updateAssociations(EntityWriter.java:641)\n                      at io.requery.sql.EntityWriter.update(EntityWriter.java:593)\n                    at io.requer\n```\n", "url": "https://github.com/requery/requery/issues/99", "user": "miomao656", "labels": ["bug"], "created": "2016-04-18 12:40:07", "closed": "2016-04-29 04:55:32", "commits": {"cdb48f1d0266dc74d8fa6db0e8ed3af0c6151a43": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "4d59af4b359438d0e3f4ca2c3bafd57d5c582796": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "cdb48f1d0266dc74d8fa6db0e8ed3af0c6151a43", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["656c3344b9c7d367bd1d40b29b17870d80587e05"], "nameRev": "cdb48f1d0266dc74d8fa6db0e8ed3af0c6151a43 tags/1.0.0-beta16~17", "commitMessage": "Resolve #99 StackOverflowError in cascade reference\n", "commitDateTime": "2016-04-19 22:51:29", "authoredDateTime": "2016-04-19 22:51:29", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 13, "deletions": 16, "lines": 29}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter", "TOT": 4, "UPD": 4, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.canBatchInStatement()", "TOT": 5, "UPD": 5, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean)", "TOT": 13, "UPD": 1, "INS": 1, "MOV": 5, "DEL": 6}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean).6.bindParameters(java.sql.PreparedStatement,java.lang.Object,io.requery.util.function.Predicate)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "4d59af4b359438d0e3f4ca2c3bafd57d5c582796", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["fab1bc476d6a8f693ca63527174e4646bcb6b30a"], "nameRev": "4d59af4b359438d0e3f4ca2c3bafd57d5c582796 tags/1.0.0-beta17~10", "commitMessage": "Resolve #99 Fix cascade save stackoverflow\n", "commitDateTime": "2016-04-28 21:55:17", "authoredDateTime": "2016-04-28 21:55:17", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 6, "deletions": 4, "lines": 10}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean)", "TOT": 8, "UPD": 1, "INS": 1, "MOV": 4, "DEL": 2}, {"spoonMethodName": "io.requery.sql.EntityWriter.cascadeSave(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["cdb48f1d0266dc74d8fa6db0e8ed3af0c6151a43", "4d59af4b359438d0e3f4ca2c3bafd57d5c582796"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 19, "deletions": 20, "lines": 39, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 32, "UPD": 12, "INS": 3, "MOV": 9, "DEL": 8, "spoonFilesChanged": 1, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean)", "io.requery.sql.EntityWriter.cascadeSave(java.lang.Object,io.requery.proxy.EntityProxy)", "io.requery.sql.EntityWriter", "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean).6.bindParameters(java.sql.PreparedStatement,java.lang.Object,io.requery.util.function.Predicate)", "io.requery.sql.EntityWriter.canBatchInStatement()"]}, {"title": "AutoValue static factory leads to mixed up params", "body": "This class\n\n``` java\n@Entity @AutoValue public abstract class Todo implements Comparable<Todo> {\n\n   @NonNull public static Todo create(@NonNull TodoContent content,\n                                      boolean isList,\n                                      long id,\n                                      boolean done,\n                                      @NonNull String title,\n                                      @NonNull TaskType type,\n                                      long sortIndex) {\n      return new AutoValue_Todo(content, isList, id, done, title, type, sortIndex);\n   }\n\n   public boolean isStored() {\n      return id() != -1;\n   }\n\n   @NonNull public abstract TodoContent content();\n\n   public abstract boolean list();\n\n   @Override public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n\n      Todo todo = (Todo) o;\n\n      return id() == todo.id();\n   }\n\n   public abstract long id();\n\n   public abstract boolean done();\n\n   @NonNull public TodoContent.TodoList descriptionAsList() {\n      checkArgument(list());\n      return (TodoContent.TodoList) content();\n   }\n\n   @NonNull public TodoContent.SimpleText descriptionAsSimpleText() {\n      checkArgument(!list());\n      return (TodoContent.SimpleText) content();\n   }\n\n   @NonNull public abstract String title();\n\n   @NonNull public abstract TaskType type();\n\n   public abstract long sortIndex();\n\n   @Override public int compareTo(@NonNull Todo another) {\n      int byDone = Compare.b(done(), another.done());\n      if (byDone != 0) return byDone;\n\n      int byPrio = Compare.l(sortIndex(), another.sortIndex());\n      if (byPrio != 0) return byPrio;\n\n      int byTitle = title().compareTo(another.title());\n      if (byTitle != 0) return byTitle;\n\n      return Compare.l(id(), another.id());\n   }\n\n   @NonNull public Todo withIdAndSortIndex(long id, long sortIndex) {\n      return Todo.create(content(), list(), id, done(), title(), type(), sortIndex);\n   }\n\n   @NonNull public Todo withListTitleContent(boolean isList,\n                                             @NonNull String title, @NonNull TodoContent content) {\n      return create(content, isList, id(), done(), title, type(), sortIndex());\n   }\n\n   @NonNull public Todo withType(@NonNull TaskType type) {\n      return create(content(), list(), id(), done(), title(), type, sortIndex());\n   }\n\n   @NonNull public Todo withDone(boolean done) {\n      return create(content(), list(), id(), done, title(), type(), sortIndex());\n   }\n}\n```\n\nLeads to this class being generated:\n\n``` java\n// Generated file do not edit, generated by io.requery.processor.EntityProcessor\npackage de.paul_woitaschek.notes.model;\n\nimport io.requery.meta.AttributeBuilder;\nimport io.requery.meta.QueryAttribute;\nimport io.requery.meta.Type;\nimport io.requery.meta.TypeBuilder;\nimport io.requery.proxy.BooleanProperty;\nimport io.requery.proxy.EntityProxy;\nimport io.requery.proxy.LongProperty;\nimport io.requery.proxy.Property;\nimport io.requery.util.function.Function;\nimport io.requery.util.function.Supplier;\nimport java.lang.Boolean;\nimport java.lang.Long;\nimport java.lang.Override;\nimport java.lang.String;\nimport javax.annotation.Generated;\n\n@Generated(\"io.requery.processor.EntityProcessor\")\npublic class TodoType {\n    public static final QueryAttribute<Todo, Boolean> STORED = \n    new AttributeBuilder<Todo, Boolean>(\"stored\", boolean.class)\n    .setProperty(new BooleanProperty<Todo>() {\n        @Override\n        public Boolean get(Todo entity) {\n            return entity.isStored();\n        }\n\n        @Override\n        public void set(Todo entity, Boolean value) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean getBoolean(Todo entity) {\n            return entity.isStored();\n        }\n\n        @Override\n        public void setBoolean(Todo entity, boolean value) {\n            throw new UnsupportedOperationException();\n        }\n    })\n    .setBuilderProperty(new BooleanProperty<TodoType>() {\n        @Override\n        public Boolean get(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void set(TodoType entity, Boolean value) {\n            entity.stored = value;\n        }\n\n        @Override\n        public boolean getBoolean(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void setBoolean(TodoType entity, boolean value) {\n            entity.stored = value;\n        }\n    })\n    .setGenerated(false)\n    .setLazy(false)\n    .setNullable(false)\n    .setUnique(false)\n    .build();\n\n    public static final QueryAttribute<Todo, TodoContent> CONTENT = \n    new AttributeBuilder<Todo, TodoContent>(\"content\", TodoContent.class)\n    .setProperty(new Property<Todo, TodoContent>() {\n        @Override\n        public TodoContent get(Todo entity) {\n            return entity.content();\n        }\n\n        @Override\n        public void set(Todo entity, TodoContent value) {\n            throw new UnsupportedOperationException();\n        }\n    })\n    .setBuilderProperty(new Property<TodoType, TodoContent>() {\n        @Override\n        public TodoContent get(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void set(TodoType entity, TodoContent value) {\n            entity.content = value;\n        }\n    })\n    .setGenerated(false)\n    .setLazy(false)\n    .setNullable(true)\n    .setUnique(false)\n    .build();\n\n    public static final QueryAttribute<Todo, Boolean> LIST = \n    new AttributeBuilder<Todo, Boolean>(\"list\", boolean.class)\n    .setProperty(new BooleanProperty<Todo>() {\n        @Override\n        public Boolean get(Todo entity) {\n            return entity.list();\n        }\n\n        @Override\n        public void set(Todo entity, Boolean value) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean getBoolean(Todo entity) {\n            return entity.list();\n        }\n\n        @Override\n        public void setBoolean(Todo entity, boolean value) {\n            throw new UnsupportedOperationException();\n        }\n    })\n    .setBuilderProperty(new BooleanProperty<TodoType>() {\n        @Override\n        public Boolean get(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void set(TodoType entity, Boolean value) {\n            entity.list = value;\n        }\n\n        @Override\n        public boolean getBoolean(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void setBoolean(TodoType entity, boolean value) {\n            entity.list = value;\n        }\n    })\n    .setGenerated(false)\n    .setLazy(false)\n    .setNullable(false)\n    .setUnique(false)\n    .build();\n\n    public static final QueryAttribute<Todo, Long> ID = \n    new AttributeBuilder<Todo, Long>(\"id\", long.class)\n    .setProperty(new LongProperty<Todo>() {\n        @Override\n        public Long get(Todo entity) {\n            return entity.id();\n        }\n\n        @Override\n        public void set(Todo entity, Long value) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long getLong(Todo entity) {\n            return entity.id();\n        }\n\n        @Override\n        public void setLong(Todo entity, long value) {\n            throw new UnsupportedOperationException();\n        }\n    })\n    .setBuilderProperty(new LongProperty<TodoType>() {\n        @Override\n        public Long get(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void set(TodoType entity, Long value) {\n            entity.id = value;\n        }\n\n        @Override\n        public long getLong(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void setLong(TodoType entity, long value) {\n            entity.id = value;\n        }\n    })\n    .setGenerated(false)\n    .setLazy(false)\n    .setNullable(false)\n    .setUnique(false)\n    .build();\n\n    public static final QueryAttribute<Todo, Boolean> DONE = \n    new AttributeBuilder<Todo, Boolean>(\"done\", boolean.class)\n    .setProperty(new BooleanProperty<Todo>() {\n        @Override\n        public Boolean get(Todo entity) {\n            return entity.done();\n        }\n\n        @Override\n        public void set(Todo entity, Boolean value) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public boolean getBoolean(Todo entity) {\n            return entity.done();\n        }\n\n        @Override\n        public void setBoolean(Todo entity, boolean value) {\n            throw new UnsupportedOperationException();\n        }\n    })\n    .setBuilderProperty(new BooleanProperty<TodoType>() {\n        @Override\n        public Boolean get(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void set(TodoType entity, Boolean value) {\n            entity.done = value;\n        }\n\n        @Override\n        public boolean getBoolean(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void setBoolean(TodoType entity, boolean value) {\n            entity.done = value;\n        }\n    })\n    .setGenerated(false)\n    .setLazy(false)\n    .setNullable(false)\n    .setUnique(false)\n    .build();\n\n    public static final QueryAttribute<Todo, TodoContent.TodoList> DESCRIPTION_AS_LIST = \n    new AttributeBuilder<Todo, TodoContent.TodoList>(\"descriptionAsList\", TodoContent.TodoList.class)\n    .setProperty(new Property<Todo, TodoContent.TodoList>() {\n        @Override\n        public TodoContent.TodoList get(Todo entity) {\n            return entity.descriptionAsList();\n        }\n\n        @Override\n        public void set(Todo entity, TodoContent.TodoList value) {\n            throw new UnsupportedOperationException();\n        }\n    })\n    .setBuilderProperty(new Property<TodoType, TodoContent.TodoList>() {\n        @Override\n        public TodoContent.TodoList get(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void set(TodoType entity, TodoContent.TodoList value) {\n            entity.descriptionAsList = value;\n        }\n    })\n    .setGenerated(false)\n    .setLazy(false)\n    .setNullable(true)\n    .setUnique(false)\n    .build();\n\n    public static final QueryAttribute<Todo, TodoContent.SimpleText> DESCRIPTION_AS_SIMPLE_TEXT = \n    new AttributeBuilder<Todo, TodoContent.SimpleText>(\"descriptionAsSimpleText\", TodoContent.SimpleText.class)\n    .setProperty(new Property<Todo, TodoContent.SimpleText>() {\n        @Override\n        public TodoContent.SimpleText get(Todo entity) {\n            return entity.descriptionAsSimpleText();\n        }\n\n        @Override\n        public void set(Todo entity, TodoContent.SimpleText value) {\n            throw new UnsupportedOperationException();\n        }\n    })\n    .setBuilderProperty(new Property<TodoType, TodoContent.SimpleText>() {\n        @Override\n        public TodoContent.SimpleText get(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void set(TodoType entity, TodoContent.SimpleText value) {\n            entity.descriptionAsSimpleText = value;\n        }\n    })\n    .setGenerated(false)\n    .setLazy(false)\n    .setNullable(true)\n    .setUnique(false)\n    .build();\n\n    public static final QueryAttribute<Todo, String> TITLE = \n    new AttributeBuilder<Todo, String>(\"title\", String.class)\n    .setProperty(new Property<Todo, String>() {\n        @Override\n        public String get(Todo entity) {\n            return entity.title();\n        }\n\n        @Override\n        public void set(Todo entity, String value) {\n            throw new UnsupportedOperationException();\n        }\n    })\n    .setBuilderProperty(new Property<TodoType, String>() {\n        @Override\n        public String get(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void set(TodoType entity, String value) {\n            entity.title = value;\n        }\n    })\n    .setGenerated(false)\n    .setLazy(false)\n    .setNullable(true)\n    .setUnique(false)\n    .build();\n\n    public static final QueryAttribute<Todo, TaskType> TYPE = \n    new AttributeBuilder<Todo, TaskType>(\"type\", TaskType.class)\n    .setProperty(new Property<Todo, TaskType>() {\n        @Override\n        public TaskType get(Todo entity) {\n            return entity.type();\n        }\n\n        @Override\n        public void set(Todo entity, TaskType value) {\n            throw new UnsupportedOperationException();\n        }\n    })\n    .setBuilderProperty(new Property<TodoType, TaskType>() {\n        @Override\n        public TaskType get(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void set(TodoType entity, TaskType value) {\n            entity.type = value;\n        }\n    })\n    .setGenerated(false)\n    .setLazy(false)\n    .setNullable(true)\n    .setUnique(false)\n    .build();\n\n    public static final QueryAttribute<Todo, Long> SORT_INDEX = \n    new AttributeBuilder<Todo, Long>(\"sortIndex\", long.class)\n    .setProperty(new LongProperty<Todo>() {\n        @Override\n        public Long get(Todo entity) {\n            return entity.sortIndex();\n        }\n\n        @Override\n        public void set(Todo entity, Long value) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public long getLong(Todo entity) {\n            return entity.sortIndex();\n        }\n\n        @Override\n        public void setLong(Todo entity, long value) {\n            throw new UnsupportedOperationException();\n        }\n    })\n    .setBuilderProperty(new LongProperty<TodoType>() {\n        @Override\n        public Long get(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void set(TodoType entity, Long value) {\n            entity.sortIndex = value;\n        }\n\n        @Override\n        public long getLong(TodoType entity) {\n            throw new UnsupportedOperationException();\n        }\n\n        @Override\n        public void setLong(TodoType entity, long value) {\n            entity.sortIndex = value;\n        }\n    })\n    .setGenerated(false)\n    .setLazy(false)\n    .setNullable(false)\n    .setUnique(false)\n    .build();\n\n    public static final Type<Todo> $TYPE = new TypeBuilder<Todo>(Todo.class, \"Todo\")\n    .setBaseType(Todo.class)\n    .setCacheable(true)\n    .setImmutable(true)\n    .setReadOnly(false)\n    .setStateless(true)\n    .setBuilderFactory(new Supplier<TodoType>() {\n        @Override\n        public TodoType get() {\n            return new TodoType();\n        }\n    })\n    .setBuilderFunction(new Function<TodoType, Todo>() {\n        @Override\n        public Todo apply(TodoType value) {\n            return value.build();\n        }\n    })\n    .setProxyProvider(new Function<Todo, EntityProxy<Todo>>() {\n        @Override\n        public EntityProxy<Todo> apply(Todo entity) {\n            return new EntityProxy<Todo>(entity, $TYPE);\n        }\n    })\n    .addAttribute(DONE)\n    .addAttribute(STORED)\n    .addAttribute(DESCRIPTION_AS_SIMPLE_TEXT)\n    .addAttribute(TITLE)\n    .addAttribute(CONTENT)\n    .addAttribute(ID)\n    .addAttribute(LIST)\n    .addAttribute(TYPE)\n    .addAttribute(DESCRIPTION_AS_LIST)\n    .addAttribute(SORT_INDEX)\n    .build();\n\n    private boolean stored;\n\n    private TodoContent content;\n\n    private boolean list;\n\n    private long id;\n\n    private boolean done;\n\n    private TodoContent.TodoList descriptionAsList;\n\n    private TodoContent.SimpleText descriptionAsSimpleText;\n\n    private String title;\n\n    private TaskType type;\n\n    private long sortIndex;\n\n    private TodoType() {\n    }\n\n    Todo build() {\n        return Todo.create(content,id,done,title,type,sortIndex);\n    }\n}\n```\n\nWhich has several flaws. It has the wrong parameter order in build. It misses parameters in `#build()` so it does not compile.\n\n Also it kind of caches values that are not covered by AutoValue. For example it as has a field `private boolean done` which should not be treated at all.\n", "url": "https://github.com/requery/requery/issues/93", "user": "PaulWoitaschek", "labels": ["bug"], "created": "2016-04-16 16:28:02", "closed": "2016-04-16 20:30:17", "commits": {"fb48079845009db846cd54f76d86ef7b5bcf7f62": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "fb48079845009db846cd54f76d86ef7b5bcf7f62", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["8fe040b8cb82f4c6c405869389d7b63a22041d3a"], "nameRev": "fb48079845009db846cd54f76d86ef7b5bcf7f62 tags/1.0.0-beta15~5", "commitMessage": "Resolve #93 Skip non-abstract methods in immutable types\n", "commitDateTime": "2016-04-16 13:30:00", "authoredDateTime": "2016-04-16 13:30:00", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 5, "deletions": 0, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fb48079845009db846cd54f76d86ef7b5bcf7f62"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 0, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityType.isMethodProcessable(javax.lang.model.element.ExecutableElement)"]}, {"title": "Kotlin data classes: not applicable to static or final member", "body": "When I have a simple data class like\n\n``` kotlin\n@Entity data class Sample(val first: String)\n```\n\nThe code does not longer compile with the warning:\n\n> error: NotNull not applicable to static or final member\n> 1 error\n\nHow to fix that?\n\nBtw it took me some time to find this out. In addition requery should tell which class caused the problem and that it's requery throwing the exception.\n", "url": "https://github.com/requery/requery/issues/89", "user": "PaulWoitaschek", "labels": ["bug"], "created": "2016-04-16 13:00:40", "closed": "2016-04-16 17:22:52", "commits": {"caa6666ea43a01d68112a632b51656e88f937f7b": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "caa6666ea43a01d68112a632b51656e88f937f7b", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["5e60d7f9d7d01bf1a18edabca89df3ac0ec64769"], "nameRev": "caa6666ea43a01d68112a632b51656e88f937f7b tags/1.0.0-beta15~7", "commitMessage": "Resolve #89 Fix isFinal check for final classes after the addition of the extendable property\n", "commitDateTime": "2016-04-16 10:22:37", "authoredDateTime": "2016-04-16 10:22:37", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 3, "deletions": 2, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.isFinal()", "TOT": 5, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["caa6666ea43a01d68112a632b51656e88f937f7b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 2, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 5, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityType.isFinal()"]}, {"title": "Incorrect assembly of requery-android", "body": "For compilation of requery-android-1.0.0-beta14 library the old source code is used of 05.04.2016. For example there is no \"Resolve #72 onCreateMapping is provided platform instance\". But at the same time contains an actual code in requery-android-1.0.0-beta14-source.jar. I found this problem for the version 1.0.0-beta13.\n", "url": "https://github.com/requery/requery/issues/86", "user": "a1grim", "labels": ["bug"], "created": "2016-04-14 11:27:03", "closed": "2016-04-15 03:34:46", "commits": {"fe79265409f944faf6f16eb3416b2926958e90dc": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "fe79265409f944faf6f16eb3416b2926958e90dc", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["aaf56d75445921ab047c8260fb5507584ec6b449"], "nameRev": "fe79265409f944faf6f16eb3416b2926958e90dc tags/1.0.0-beta15~15", "commitMessage": "Resolve #86 assembleRelease task not run on publish step\n", "commitDateTime": "2016-04-14 20:34:10", "authoredDateTime": "2016-04-14 20:34:10", "commitGitStats": [{"filePath": "requery-android/build.gradle", "insertions": 9, "deletions": 4, "lines": 13}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fe79265409f944faf6f16eb3416b2926958e90dc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 9, "deletions": 4, "lines": 13, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android"]}, {"title": "Parcelable entity class error", "body": "Hope to get your help,But My English is very rotten, do not know can you understand it?Thank you\nEntity is `public abstract class Tables implements Parcelable`\nSend the Entity\uff1a`intent.putExtra(\"table\",tables);`\nReceiving the Entity\uff1a`TableEntity tables =this.getIntent().getParcelableExtra(\"table\");`\nError info\n\n```\n Caused by: java.lang.IllegalArgumentException: 19140577594376268 is not a constant in \nio.requery.proxy.PropertyState\nat java.lang.Enum.valueOf(Enum.java:192)\nat io.requery.proxy.PropertyState.valueOf(PropertyState.java:19)\nat io.requery.android.EntityParceler.readFromParcel(EntityParceler.java:63)\n```\n\nIf the Entity is Serializable\nThe receiving entity will go wrong \nError info\uff1a\n$proxy is NULL\n", "url": "https://github.com/requery/requery/issues/84", "user": "jnwsczh", "labels": ["bug"], "created": "2016-04-12 16:15:16", "closed": "2016-04-13 05:28:34", "commits": {"f2bceb577cf73a8f4a986d4e9e064f6764fe611b": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f2bceb577cf73a8f4a986d4e9e064f6764fe611b", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["e471993c7033efb84d6930ed2132cff8924edc62"], "nameRev": "f2bceb577cf73a8f4a986d4e9e064f6764fe611b tags/1.0.0-beta14~6", "commitMessage": "Resolve #84 fix parceling of entity property state\n", "commitDateTime": "2016-04-12 22:26:54", "authoredDateTime": "2016-04-12 22:26:54", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/EntityParceler.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityParceler.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.EntityParceler.readFromParcel(android.os.Parcel)", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f2bceb577cf73a8f4a986d4e9e064f6764fe611b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android"], "changesInPackagesSPOON": ["io.requery.android.EntityParceler.readFromParcel(android.os.Parcel)"]}, {"title": "Entities not building after updating to beta12", "body": "After upgrading to beta12, my project will no longer build.\n\nI receive the following in the gradle build messages:\n\n```\nError:Execution failed for task ':app:compileDebugJavaWithJavac'.\n> java.lang.NoSuchMethodError: com.squareup.javapoet.TypeSpec.classBuilder(Lcom/squareup/javapoet/ClassName;)Lcom/squareup/javapoet/TypeSpec$Builder;\n```\n\nI can have `requery`, and `requery-android` at beta12 and `requery-processor` at beta11 and the project will build fine. But upgrading `requery-processor` to beta12 will stop it from building.\n", "url": "https://github.com/requery/requery/issues/75", "user": "ghost", "labels": ["bug"], "created": "2016-04-09 19:15:08", "closed": "2016-04-10 02:31:54", "commits": {"a2ad38758051eabe1a6608a028de94cf8f009911": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "a2ad38758051eabe1a6608a028de94cf8f009911", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["d49103b7576e0abf83b71d81d3dbb9ef34853bad"], "nameRev": "a2ad38758051eabe1a6608a028de94cf8f009911 tags/1.0.0-beta13~1", "commitMessage": "Resolve #75 Javapoet dependency embedded with gradle shadow plugin\n", "commitDateTime": "2016-04-09 19:31:34", "authoredDateTime": "2016-04-09 19:31:34", "commitGitStats": [{"filePath": "requery-processor/build.gradle", "insertions": 15, "deletions": 1, "lines": 16}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a2ad38758051eabe1a6608a028de94cf8f009911"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 1, "lines": 16, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor"]}, {"title": "Converters and generics", "body": "Hi, it's me again. :) I just tried to use a converter for a generic field, e.g.\n\n``` java\n@Entity\npublic abstract class TestTable {\n    @Column\n    @Convert(ValueConverter.class)\n    ArrayList<Integer> values;\n}\n```\n\n``` java\npublic class ValueConverter implements Converter<ArrayList<Integer>, String> {\n    @Override\n    public Class<ArrayList<Integer>> mappedType() {\n        return (Class) ArrayList.class;\n    }\n\n...\n\n}\n```\n\nRequery generates the class `TestTableEntity` but it doesn't compile because of this line:\n\n``` java\nnew AttributeBuilder<TestTableEntity, ArrayList<Integer>>(\"values\", ArrayList<Integer>.class)\n```\n\nAren't generics supported by converters or am I missing something?\n", "url": "https://github.com/requery/requery/issues/74", "user": "alexmerkle", "labels": ["bug"], "created": "2016-04-05 20:15:07", "closed": "2016-04-07 03:38:58", "commits": {"f97b29d096916134fbbfed064d737045128ec0f0": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "f97b29d096916134fbbfed064d737045128ec0f0", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["1eaf61a0fab74f58ecfebe4c10b89e21943df9d4"], "nameRev": "f97b29d096916134fbbfed064d737045128ec0f0 tags/1.0.0-beta12~1", "commitMessage": "Resolve #74 Handle converters with generic type parameters\n", "commitDateTime": "2016-04-06 20:38:45", "authoredDateTime": "2016-04-06 20:38:45", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/AttributeMember.java", "insertions": 8, "deletions": 5, "lines": 13}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 20, "deletions": 11, "lines": 31}, {"filePath": "requery-test/src/main/java/io/requery/test/model/AbstractPhone.java", "insertions": 10, "deletions": 3, "lines": 13}, {"filePath": "requery-test/src/main/java/io/requery/test/model/IntegerListConverter.java", "insertions": 56, "deletions": 0, "lines": 56}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AttributeMember.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.AttributeMember.checkMemberType(javax.annotation.processing.ProcessingEnvironment,javax.lang.model.type.TypeMirror,java.util.Set)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.requery.processor.AttributeMember.process(javax.annotation.processing.ProcessingEnvironment)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "AbstractPhone.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model.AbstractPhone", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 3}]}, {"spoonFilePath": "IntegerListConverter.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model.IntegerListConverter", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f97b29d096916134fbbfed064d737045128ec0f0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 94, "deletions": 19, "lines": 113, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 15, "UPD": 0, "INS": 6, "MOV": 5, "DEL": 4, "spoonFilesChanged": 4, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-test/src/main/java/io/requery/test/model", "requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.AttributeMember.process(javax.annotation.processing.ProcessingEnvironment)", "io.requery.test.model.IntegerListConverter", "io.requery.processor.AttributeMember.checkMemberType(javax.annotation.processing.ProcessingEnvironment,javax.lang.model.type.TypeMirror,java.util.Set)", "io.requery.processor.EntityGenerator.generateAttribute(io.requery.processor.AttributeDescriptor,com.squareup.javapoet.TypeName)", "io.requery.test.model.AbstractPhone"]}, {"title": "Sources are missing for requery-android on Maven Central", "body": "[Maven Central](http://search.maven.org/#artifactdetails%7Cio.requery%7Crequery-android%7C1.0.0-beta10%7Caar)\n[JCenter](https://jcenter.bintray.com/io/requery/requery-android/1.0.0-beta10/)\n\nFor the `requery-android` library `-javadoc.jar` is present, but not `-sources.jar`\n\nNot sure if this is related to this problem, but Android Studio is not importing the source OR javadoc when I include the library in my app. It only shows me the decompiled class when I open the Requery classes.\n", "url": "https://github.com/requery/requery/issues/69", "user": "austynmahoney", "labels": ["bug"], "created": "2016-04-04 21:11:53", "closed": "2016-04-05 01:03:11", "commits": {"bff2f54d9a97021d1180d3568bc7869d7fcadd8a": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "bff2f54d9a97021d1180d3568bc7869d7fcadd8a", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["4a70e78b7562afb2a3c49f2a31c533dd223921bb"], "nameRev": "bff2f54d9a97021d1180d3568bc7869d7fcadd8a tags/1.0.0-beta12~8", "commitMessage": "Resolve #69 add sources to artifacts\n", "commitDateTime": "2016-04-04 18:02:55", "authoredDateTime": "2016-04-04 18:02:55", "commitGitStats": [{"filePath": "requery-android/build.gradle", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["bff2f54d9a97021d1180d3568bc7869d7fcadd8a"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 0, "lines": 1, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android"]}, {"title": "Cascade Save cause constraint violation", "body": "I have this relation between 2 of my entities : \n\n```\n@Entity\npublic abstract class AbstractNewsArticle extends StreamItem {\n\n    @Key\n    String id;\n    String title;\n    String content;\n\n    @OneToMany(mappedBy = \"article\", cascade = {CascadeAction.DELETE, CascadeAction.NONE})\n    Set<Image> imageSet;\n}\n```\n\nand \n\n```\n@Entity\npublic abstract class AbstractImage {\n\n    @Key\n    @Generated\n    int id;\n\n    @ManyToOne\n    NewsArticle article;\n\n    String path;\n    String caption;\n}\n```\n\nUpdating my NewsAticle (with dataStore.update(article)) cause a cascadeSave on the Image entities, which tries to insert a new NewsArticle with the same id, causing a constraint violation (primary key).\n\nThe Exception is thrown in EntityUpdateOperation.java method execute(final QueryElement<Scalar<Integer>> query)\n", "url": "https://github.com/requery/requery/issues/65", "user": "rafipanoyan", "labels": ["bug"], "created": "2016-03-31 07:45:05", "closed": "2016-04-13 05:28:34", "commits": {"97e84b742752175dcb4b62da696c413299d8a2fd": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "534010cca00e33495d23d1c6c6dc4a3d651ad647": {"commitGHEventType": "referenced", "commitUser": "npurushe"}, "3e0247709b3219ddb9c9aa05f453115a0a3df4c7": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 12.000277777777777, "commitsDetails": [{"commitHash": "97e84b742752175dcb4b62da696c413299d8a2fd", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["a6b03c876d8fd9e0128e3ae34683ad0311c57330"], "nameRev": "97e84b742752175dcb4b62da696c413299d8a2fd tags/1.0.0-beta11~2", "commitMessage": "Resolve #65 Cascade update when key(s) set in the entity instead of insert\n", "commitDateTime": "2016-04-01 21:08:00", "authoredDateTime": "2016-04-01 21:08:00", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 17, "deletions": 2, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.hasKey(io.requery.proxy.EntityProxy)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.cascadeSave(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "534010cca00e33495d23d1c6c6dc4a3d651ad647", "commitGHEventType": "referenced", "commitUser": "npurushe", "commitParents": ["bff2f54d9a97021d1180d3568bc7869d7fcadd8a"], "nameRev": "534010cca00e33495d23d1c6c6dc4a3d651ad647 tags/1.0.0-beta12~7", "commitMessage": "#65 Cascade save (insert/update) foreign key reference instead of always insert\n", "commitDateTime": "2016-04-04 22:38:35", "authoredDateTime": "2016-04-04 22:38:35", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 7, "deletions": 6, "lines": 13}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.updateInverseAssociation(java.lang.Object,io.requery.meta.Attribute,java.lang.Object)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityWriter.updateAssociations(java.lang.Object,io.requery.proxy.EntityProxy)", "TOT": 3, "UPD": 3, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "3e0247709b3219ddb9c9aa05f453115a0a3df4c7", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["f2bceb577cf73a8f4a986d4e9e064f6764fe611b"], "nameRev": "3e0247709b3219ddb9c9aa05f453115a0a3df4c7 tags/1.0.0-beta14~5", "commitMessage": "Resolve #65 Fix entity proxy not linked in update operation\n", "commitDateTime": "2016-04-12 22:28:14", "authoredDateTime": "2016-04-12 22:28:14", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["97e84b742752175dcb4b62da696c413299d8a2fd", "534010cca00e33495d23d1c6c6dc4a3d651ad647", "3e0247709b3219ddb9c9aa05f453115a0a3df4c7"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 3, "gitStatsSummary": {"insertions": 25, "deletions": 8, "lines": 33, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 10, "UPD": 6, "INS": 3, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityWriter.update(java.lang.Object,io.requery.proxy.EntityProxy,boolean)", "io.requery.sql.EntityWriter.hasKey(io.requery.proxy.EntityProxy)", "io.requery.sql.EntityWriter.cascadeSave(java.lang.Object,io.requery.proxy.EntityProxy)", "io.requery.sql.EntityWriter.updateInverseAssociation(java.lang.Object,io.requery.meta.Attribute,java.lang.Object)", "io.requery.sql.EntityWriter.updateAssociations(java.lang.Object,io.requery.proxy.EntityProxy)"]}, {"title": "Db Creation Android", "body": "I have a simple model User\n\n``` java\n@Entity\npublic abstract class User implements Persistable {\n    @Key @Generated\n    public int id;\n    public String name;\n    public String email;\n}\n```\n\nand my Application class looks like this\n\n``` java\npublic SingleEntityStore<Persistable> getData() {\n        if(dataStore == null) {\n            DatabaseSource source = new DatabaseSource(this, Models.DEFAULT, Util.APP_DB_NAME, 1);\n            Configuration configuration = source.getConfiguration();\n            dataStore = RxSupport.toReactiveStore(new EntityDataStore<Persistable>(configuration));\n        }\n        return dataStore;\n    }\n```\n\nI created a Repository class that calls this getData from application, and try to found a list of Users. But I saw this message in adb: E/SQLiteLog: (1) no such table: User\n\nI changed the code above removing the database name and no luck again =(\n\nWhat am I doing wrong? And when I change my model, how can I upgrade my model?\n\nEDIT: Ok, so trying a lot this evening, i figured out this situation, using the code below on my Application class:\n\n``` java\ndataStore = new EntityDataStore<Persistable>(configuration);\n```\n\nThe database was created, and the user class load correctly. I think there is some weird problem using the SingleEntityStore on Android. \n\nThere is a way to provide you some log file or other log type for helping you?\n", "url": "https://github.com/requery/requery/issues/63", "user": "feliperaymundo", "labels": ["bug"], "created": "2016-03-29 19:49:16", "closed": "2016-04-16 02:39:23", "commits": {"b5e061a121db3dffb1a7bf2a0ea5ed47ed2b2993": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 17.00027777777778, "commitsDetails": [{"commitHash": "b5e061a121db3dffb1a7bf2a0ea5ed47ed2b2993", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["38b8ad6cc1c79cfcf99b55c87f74f158eba5c09b"], "nameRev": "b5e061a121db3dffb1a7bf2a0ea5ed47ed2b2993 tags/1.0.0-beta15~13", "commitMessage": "Resolve #63 enable SQLite write ahead logging only after database created\n", "commitDateTime": "2016-04-15 19:39:07", "authoredDateTime": "2016-04-15 19:39:07", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlite/DatabaseSource.java", "insertions": 15, "deletions": 3, "lines": 18}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DatabaseSource.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.DatabaseSource", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}, {"spoonMethodName": "io.requery.android.sqlite.DatabaseSource.onOpen(android.database.sqlite.SQLiteDatabase)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.android.sqlite.DatabaseSource.setWriteAheadLoggingEnabled(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b5e061a121db3dffb1a7bf2a0ea5ed47ed2b2993"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 3, "lines": 18, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 7, "UPD": 0, "INS": 5, "MOV": 2, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-android/src/main/java/io/requery/android/sqlite"], "changesInPackagesSPOON": ["io.requery.android.sqlite.DatabaseSource.onOpen(android.database.sqlite.SQLiteDatabase)", "io.requery.android.sqlite.DatabaseSource.setWriteAheadLoggingEnabled(boolean)", "io.requery.android.sqlite.DatabaseSource"]}, {"title": "@Superclass inheritance", "body": "It seems that requery is only recognizing the direct super class with the `@Superclass` annotation. Let's say you have these three classes\n`public abstract class A extends B {\n    @Column\n    int a;\n}`\n`@Superclass\npublic abstract class B extends C {\n    @Column\n    int b;\n}`\n`@Superclass\npublic abstract class C {\n    @Column\n    int c;\n}`\nThe entity generated from `A` will only have the columns `a` and `b` but there will be no `c`.\n", "url": "https://github.com/requery/requery/issues/59", "user": "alexmerkle", "labels": ["bug"], "created": "2016-03-28 16:31:51", "closed": "2016-03-29 03:41:19", "commits": {"7b5862bb8511bfc3eeda7c3a706bd6e5cf318251": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "7b5862bb8511bfc3eeda7c3a706bd6e5cf318251", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["fd5fb089bae5176c18316f5a1ab4922287b3b6d6"], "nameRev": "7b5862bb8511bfc3eeda7c3a706bd6e5cf318251 tags/1.0.0-beta10~1", "commitMessage": "Resolve #59 Check type hierarchy for superclass elements\n", "commitDateTime": "2016-03-28 20:41:05", "authoredDateTime": "2016-03-28 20:41:05", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityProcessor.java", "insertions": 6, "deletions": 2, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityProcessor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "TOT": 8, "UPD": 0, "INS": 3, "MOV": 4, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["7b5862bb8511bfc3eeda7c3a706bd6e5cf318251"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 2, "lines": 8, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 8, "UPD": 0, "INS": 3, "MOV": 4, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)"]}, {"title": "Missing space in query", "body": "When using aliases in some cases the generated sql query is not valid because of a missing space.\nExample:\n`data.select(Person.LAST_NAME).from(data.select(Person.LAST_NAME).as(\"l_name\"))\n.groupBy(Person.LAST_NAME)`\nWell, this is a somewhat hypothetical example but it will result in this sql query:\n`select lastname from (select lastname from Person) l_namegroup by lastname`\nYou can avoid that by adding a trailing white space to the alias but it's still a bug I think. ;-)\n", "url": "https://github.com/requery/requery/issues/53", "user": "alexmerkle", "labels": ["bug"], "created": "2016-03-22 20:56:03", "closed": "2016-03-23 03:27:56", "commits": {"929fbe96ffcd490766a185a816f04b67173ed111": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "929fbe96ffcd490766a185a816f04b67173ed111", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["7e524ec2b50a978d8160e2df6a13ea8404a14799"], "nameRev": "929fbe96ffcd490766a185a816f04b67173ed111 tags/1.0.0-beta10~12", "commitMessage": "Resolve #53 missing space after sub query alias\n", "commitDateTime": "2016-03-22 20:27:43", "authoredDateTime": "2016-03-22 20:27:43", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/QueryGenerator.java", "insertions": 1, "deletions": 2, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "QueryGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.QueryGenerator.appendFromExpression(io.requery.query.Expression)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["929fbe96ffcd490766a185a816f04b67173ed111"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 2, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.QueryGenerator.appendFromExpression(io.requery.query.Expression)"]}, {"title": "onNext() is not invoked on toSelfObservable() when deleting entitiy", "body": "I don't know if it's still present, but I had to make a design workaround because I didn't get onNext() callback on toSelfObservable() when I was deleting objects from my database... Haven't seen this covered in Android example or tests.\n", "url": "https://github.com/requery/requery/issues/41", "user": "KrzysztofWrobel", "labels": ["bug"], "created": "2016-03-14 23:29:53", "closed": "2016-03-16 04:30:53", "commits": {"601214b38378eca1fafb58aa93b3a3b19ef56843": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "601214b38378eca1fafb58aa93b3a3b19ef56843", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["aec0801417f0594bba1b3cb121658bf742004b90"], "nameRev": "601214b38378eca1fafb58aa93b3a3b19ef56843 tags/1.0.0-beta7~2", "commitMessage": "Resolve #41 Fix observable not triggered when deleting a single entity\n", "commitDateTime": "2016-03-15 21:30:37", "authoredDateTime": "2016-03-15 21:30:37", "commitGitStats": [{"filePath": "requery-test/src/test/java/io/requery/test/RxTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/EntityDataStore.java", "insertions": 6, "deletions": 3, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RxTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.RxTest.testQuerySelfObservableDelete()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityDataStore.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityDataStore.delete(java.lang.Object)", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["601214b38378eca1fafb58aa93b3a3b19ef56843"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 3, "lines": 9, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 2, "MOV": 2, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityDataStore.delete(java.lang.Object)"]}, {"title": "Constraint exception when inserting", "body": "I am trying to write a performance test for your library, but currently fail to insert elements due to constraint exceptions. I feel like I do not understand correctly how to insert/update existing entity objects.\n\nThe code affected is in greenrobot/android-database-performance#7.\n\nThe entities are generated like:\n\n```\nprotected static SimpleEntityNotNull createEntity(long id) {\n        SimpleEntityNotNull entity = new SimpleEntityNotNull();\n        entity.setId(id);\n        entity.setSimpleBoolean(true);\n        entity.setSimpleByte(Byte.MAX_VALUE);\n        entity.setSimpleShort(Short.MAX_VALUE);\n        entity.setSimpleInt(Integer.MAX_VALUE);\n        entity.setSimpleLong(Long.MAX_VALUE);\n        entity.setSimpleFloat(Float.MAX_VALUE);\n        entity.setSimpleDouble(Double.MAX_VALUE);\n        entity.setSimpleString(\"greenrobot greenDAO\");\n        byte[] bytes = { 42, -17, 23, 0, 127, -128 };\n        entity.setSimpleByteArray(bytes);\n        return entity;\n    }\n```\n\nThen they are inserted like\n\n```\nDatabaseSource source = new DatabaseSource(getApplication(), Models.DEFAULT, DATABASE_VERSION);\nConfiguration configuration = new ConfigurationBuilder(source, Models.DEFAULT).build();\nBlockingEntityStore<Object> data = new EntityDataStore<>(configuration).toBlocking();\n\n// TODO: NOT NULL constraint failed: SimpleEntityNotNull.simpleByte\ndata.insert(entities.get(i)); // entites = List<SimpleEntityNotNull>\n```\n\nI saw that in other issues (#32, #33) inserting entities was done pretty much the same. As the documentation is spotty in that regard I hope you can point me into the right direction.\n", "url": "https://github.com/requery/requery/issues/37", "user": "greenrobot-team", "labels": ["bug"], "created": "2016-03-14 07:31:11", "closed": "2016-03-14 08:16:25", "commits": {"247f2f3f8c10f3b68a12ecf79ab54b124849bdb3": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "8d86eac34cf8d1cc0095d9b6aaf1596d969ae22b": {"commitGHEventType": "referenced", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "247f2f3f8c10f3b68a12ecf79ab54b124849bdb3", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["e1f057c608f2e17abe31c570db4b01807c930213"], "nameRev": "247f2f3f8c10f3b68a12ecf79ab54b124849bdb3 tags/1.0.0-beta5~1", "commitMessage": "Resolve #37 Add primitive byte type specialization\n", "commitDateTime": "2016-03-14 01:15:44", "authoredDateTime": "2016-03-14 01:15:44", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "requery/src/main/java/io/requery/proxy/ByteProperty.java", "insertions": 24, "deletions": 0, "lines": 24}, {"filePath": "requery/src/main/java/io/requery/proxy/EntityBuilderProxy.java", "insertions": 12, "deletions": 6, "lines": 18}, {"filePath": "requery/src/main/java/io/requery/proxy/EntityProxy.java", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "requery/src/main/java/io/requery/proxy/Gettable.java", "insertions": 6, "deletions": 4, "lines": 10}, {"filePath": "requery/src/main/java/io/requery/proxy/Settable.java", "insertions": 5, "deletions": 3, "lines": 8}, {"filePath": "requery/src/main/java/io/requery/sql/EntityReader.java", "insertions": 5, "deletions": 0, "lines": 5}, {"filePath": "requery/src/main/java/io/requery/sql/EntityWriter.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "requery/src/main/java/io/requery/sql/GeneratedKeys.java", "insertions": 14, "deletions": 6, "lines": 20}, {"filePath": "requery/src/main/java/io/requery/sql/GenericMapping.java", "insertions": 27, "deletions": 11, "lines": 38}, {"filePath": "requery/src/main/java/io/requery/sql/Mapping.java", "insertions": 20, "deletions": 0, "lines": 20}, {"filePath": "requery/src/main/java/io/requery/sql/type/PrimitiveByteType.java", "insertions": 29, "deletions": 0, "lines": 29}, {"filePath": "requery/src/main/java/io/requery/sql/type/TinyIntType.java", "insertions": 12, "deletions": 1, "lines": 13}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.propertyClassFor(javax.lang.model.type.TypeMirror)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ByteProperty.java", "spoonMethods": [{"spoonMethodName": "io.requery.proxy", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityBuilderProxy.java", "spoonMethods": [{"spoonMethodName": "io.requery.proxy.EntityBuilderProxy.setByte(io.requery.meta.Attribute,byte,io.requery.proxy.PropertyState)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.proxy.EntityBuilderProxy.setShort(io.requery.meta.Attribute,short,io.requery.proxy.PropertyState)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "EntityProxy.java", "spoonMethods": [{"spoonMethodName": "io.requery.proxy.EntityProxy.getByte(io.requery.meta.Attribute)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.proxy.EntityProxy.setByte(io.requery.meta.Attribute,byte,io.requery.proxy.PropertyState)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Gettable.java", "spoonMethods": [{"spoonMethodName": "io.requery.proxy.getByte(io.requery.meta.Attribute)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.proxy.getShort(io.requery.meta.Attribute)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.proxy.getBoolean(io.requery.meta.Attribute)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "Settable.java", "spoonMethods": [{"spoonMethodName": "io.requery.proxy.setByte(io.requery.meta.Attribute,byte,io.requery.proxy.PropertyState)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.proxy.setDouble(io.requery.meta.Attribute,double,io.requery.proxy.PropertyState)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.proxy.setFloat(io.requery.meta.Attribute,float,io.requery.proxy.PropertyState)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.proxy.setShort(io.requery.meta.Attribute,short,io.requery.proxy.PropertyState)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "EntityReader.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityReader.readPrimitiveField(io.requery.proxy.Settable,io.requery.meta.Attribute,java.sql.ResultSet,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityWriter.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityWriter.mapPrimitiveType(io.requery.proxy.EntityProxy,io.requery.meta.Attribute,java.sql.PreparedStatement,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "GeneratedKeys.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.GeneratedKeys.setByte(io.requery.meta.Attribute,byte,io.requery.proxy.PropertyState)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.GeneratedKeys.setShort(io.requery.meta.Attribute,short,io.requery.proxy.PropertyState)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "GenericMapping.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.GenericMapping", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.GenericMapping.readByte(java.sql.ResultSet,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.GenericMapping.writeByte(java.sql.PreparedStatement,int,byte)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.GenericMapping.replace(io.requery.util.ClassMap,int,io.requery.sql.FieldType)", "TOT": 8, "UPD": 0, "INS": 3, "MOV": 5, "DEL": 0}, {"spoonMethodName": "io.requery.sql.GenericMapping.readShort(java.sql.ResultSet,int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "io.requery.sql.GenericMapping.writeShort(java.sql.PreparedStatement,int,short)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "Mapping.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.readByte(java.sql.ResultSet,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.writeByte(java.sql.PreparedStatement,int,byte)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PrimitiveByteType.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.type", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TinyIntType.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.type.TinyIntType.readByte(java.sql.ResultSet,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.type.TinyIntType.writeByte(java.sql.PreparedStatement,int,byte)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "8d86eac34cf8d1cc0095d9b6aaf1596d969ae22b", "commitGHEventType": "referenced", "commitUser": "npurushe", "commitParents": ["dad0705eb730603ffe826db1fb6b5dd42d97fc33"], "nameRev": "8d86eac34cf8d1cc0095d9b6aaf1596d969ae22b tags/1.0.0-beta6~5", "commitMessage": "Resolve #37 Add primitive byte in setObject\n", "commitDateTime": "2016-03-14 19:13:51", "authoredDateTime": "2016-03-14 19:13:51", "commitGitStats": [{"filePath": "requery-android/src/main/java/io/requery/android/sqlite/BasePreparedStatement.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "requery-android/src/main/java/io/requery/android/sqlite/SqlitePreparedStatement.java", "insertions": 0, "deletions": 3, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BasePreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement.setObject(int,java.lang.Object)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 3, "DEL": 0}, {"spoonMethodName": "io.requery.android.sqlite.BasePreparedStatement.setObject(int,java.lang.Object,int)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SqlitePreparedStatement.java", "spoonMethods": [{"spoonMethodName": "io.requery.android.sqlite.SqlitePreparedStatement.executeUpdate()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["247f2f3f8c10f3b68a12ecf79ab54b124849bdb3", "8d86eac34cf8d1cc0095d9b6aaf1596d969ae22b"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 185, "deletions": 34, "lines": 219, "gitFilesChange": 15}, "spoonStatsSummary": {"TOT": 44, "UPD": 0, "INS": 26, "MOV": 17, "DEL": 1, "spoonFilesChanged": 15, "spoonMethodsChanged": 31}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery/src/main/java/io/requery/proxy", "requery-android/src/main/java/io/requery/android/sqlite", "requery-processor/src/main/java/io/requery/processor", "requery/src/main/java/io/requery/sql/type"], "changesInPackagesSPOON": ["io.requery.sql.GenericMapping.readByte(java.sql.ResultSet,int)", "io.requery.sql.writeByte(java.sql.PreparedStatement,int,byte)", "io.requery.proxy.setFloat(io.requery.meta.Attribute,float,io.requery.proxy.PropertyState)", "io.requery.sql.EntityReader.readPrimitiveField(io.requery.proxy.Settable,io.requery.meta.Attribute,java.sql.ResultSet,int)", "io.requery.proxy.getByte(io.requery.meta.Attribute)", "io.requery.sql.GenericMapping", "io.requery.sql.readByte(java.sql.ResultSet,int)", "io.requery.sql.GenericMapping.readShort(java.sql.ResultSet,int)", "io.requery.sql.EntityWriter.mapPrimitiveType(io.requery.proxy.EntityProxy,io.requery.meta.Attribute,java.sql.PreparedStatement,int)", "io.requery.proxy.getBoolean(io.requery.meta.Attribute)", "io.requery.sql.GenericMapping.writeShort(java.sql.PreparedStatement,int,short)", "io.requery.sql.type.TinyIntType.writeByte(java.sql.PreparedStatement,int,byte)", "io.requery.sql.GeneratedKeys.setShort(io.requery.meta.Attribute,short,io.requery.proxy.PropertyState)", "io.requery.android.sqlite.SqlitePreparedStatement.executeUpdate()", "io.requery.proxy.EntityBuilderProxy.setByte(io.requery.meta.Attribute,byte,io.requery.proxy.PropertyState)", "io.requery.proxy.EntityProxy.setByte(io.requery.meta.Attribute,byte,io.requery.proxy.PropertyState)", "io.requery.sql.type.TinyIntType.readByte(java.sql.ResultSet,int)", "io.requery.sql.GenericMapping.replace(io.requery.util.ClassMap,int,io.requery.sql.FieldType)", "io.requery.android.sqlite.BasePreparedStatement.setObject(int,java.lang.Object,int)", "io.requery.sql.type", "io.requery.proxy.setByte(io.requery.meta.Attribute,byte,io.requery.proxy.PropertyState)", "io.requery.android.sqlite.BasePreparedStatement.setObject(int,java.lang.Object)", "io.requery.proxy", "io.requery.proxy.setShort(io.requery.meta.Attribute,short,io.requery.proxy.PropertyState)", "io.requery.proxy.EntityBuilderProxy.setShort(io.requery.meta.Attribute,short,io.requery.proxy.PropertyState)", "io.requery.proxy.setDouble(io.requery.meta.Attribute,double,io.requery.proxy.PropertyState)", "io.requery.proxy.EntityProxy.getByte(io.requery.meta.Attribute)", "io.requery.sql.GeneratedKeys.setByte(io.requery.meta.Attribute,byte,io.requery.proxy.PropertyState)", "io.requery.sql.GenericMapping.writeByte(java.sql.PreparedStatement,int,byte)", "io.requery.proxy.getShort(io.requery.meta.Attribute)", "io.requery.processor.EntityGenerator.propertyClassFor(javax.lang.model.type.TypeMirror)"]}, {"title": "Missing import for referenced class when entities in different packages", "body": "See https://github.com/requery/requery/issues/13#issuecomment-195848787\n", "url": "https://github.com/requery/requery/issues/34", "user": "npurushe", "labels": ["bug"], "created": "2016-03-13 04:03:17", "closed": "2016-03-13 04:05:09", "commits": {"f4f4dc4924d5d5b21e0c35044a8a42a0795e4815": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "f4f4dc4924d5d5b21e0c35044a8a42a0795e4815", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["cb527ceffb65d6bdd144d958964e5e56f079c829"], "nameRev": "f4f4dc4924d5d5b21e0c35044a8a42a0795e4815 tags/1.0.0-beta4~5", "commitMessage": "Resolve #34 Missing import for referenced class when entities in different packages\n", "commitDateTime": "2016-03-12 20:04:57", "authoredDateTime": "2016-03-12 20:04:57", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 2, "deletions": 3, "lines": 5}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityNameResolver.java", "insertions": 7, "deletions": 4, "lines": 11}, {"filePath": "requery-processor/src/main/java/io/requery/processor/JoinEntityGenerator.java", "insertions": 3, "deletions": 2, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateStaticMetadata(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "EntityNameResolver.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityNameResolver.generatedJoinEntityName(io.requery.processor.AssociativeEntityDescriptor,io.requery.processor.EntityDescriptor,io.requery.processor.EntityDescriptor)", "TOT": 9, "UPD": 1, "INS": 4, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "JoinEntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.JoinEntityGenerator.generate()", "TOT": 6, "UPD": 2, "INS": 2, "MOV": 1, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["f4f4dc4924d5d5b21e0c35044a8a42a0795e4815"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 12, "deletions": 9, "lines": 21, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 18, "UPD": 4, "INS": 6, "MOV": 4, "DEL": 4, "spoonFilesChanged": 3, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityNameResolver.generatedJoinEntityName(io.requery.processor.AssociativeEntityDescriptor,io.requery.processor.EntityDescriptor,io.requery.processor.EntityDescriptor)", "io.requery.processor.EntityGenerator.generateStaticMetadata(com.squareup.javapoet.TypeSpec$Builder)", "io.requery.processor.JoinEntityGenerator.generate()"]}, {"title": "Multi database compile issues", "body": "helper\n\n```\npublic class CityReQuery {\n\n    public static final String STATE_DB = \"state_db\";\n\n    private static CityReQuery mInstance;\n    private SingleEntityStore<Persistable> entityStore;\n\n    private CityReQuery() {\n    }\n\n    public static CityReQuery getInstance() {\n        if (mInstance == null) {\n            mInstance = new CityReQuery();\n        }\n        return mInstance;\n    }\n\n    public SingleEntityStore<Persistable> getEntityStore() {\n        return entityStore;\n    }\n\n    /**\n     * Initialize general database on first start\n     */\n    public void init(Context context) {\n        initGeneralDataStore(context);\n    }\n\n    /**\n     * @return {@link EntityDataStore} single instance for the application. <p/> Note if you're\n     * using Dagger you can make this part of your application level module returning {@code\n     * @Provides @Singleton}.\n     */\n    private SingleEntityStore<Persistable> initGeneralDataStore(Context context) {\n        if (entityStore == null) {\n            // override onUpgrade to handle migrating to a new version\n//            DatabaseSource source = new DatabaseSource(context, , Models., STATE_DB, 1);\n//            Configuration configuration = source.getConfiguration();\n//            entityStore = RxSupport.toReactiveStore(new EntityDataStore<>(configuration));\n        }\n        return entityStore;\n    }\n}\n```\n\nhelper,\n\n```\npublic class UserReQuery {\n\n    public static final String USER_DB = \"user_db\";\n\n    private static UserReQuery mInstance;\n    private SingleEntityStore<Persistable> entityStore;\n\n    private UserReQuery() {\n    }\n\n    public static UserReQuery getInstance() {\n        if (mInstance == null) {\n            mInstance = new UserReQuery();\n        }\n        return mInstance;\n    }\n\n    public SingleEntityStore<Persistable> getEntityStore() {\n        return entityStore;\n    }\n\n    /**\n     * Initialize general database on first start\n     */\n    public void init(Context context) {\n        initGeneralDataStore(context);\n    }\n\n    /**\n     * @return {@link EntityDataStore} single instance for the application. <p/> Note if you're\n     * using Dagger you can make this part of your application level module returning {@code\n     * @Provides @Singleton}.\n     */\n    private SingleEntityStore<Persistable> initGeneralDataStore(Context context) {\n        if (entityStore == null) {\n            // override onUpgrade to handle migrating to a new version\n//            DatabaseSource source = new DatabaseSource(context, Models., USER_DB, 1);\n//            Configuration configuration = source.getConfiguration();\n//            entityStore = RxSupport.toReactiveStore(new EntityDataStore<>(configuration));\n        }\n        return entityStore;\n    }\n}\n```\n\nuser\n\n```\n\n@Entity(name = UserReQuery.USER_DB)\npublic interface User {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getName();\n\n    void setName(String name);\n\n    @ManyToMany(mappedBy = \"members\")\n    Result<Group> getMemberGroups();\n\n    @ManyToMany(mappedBy = \"admins\")\n    Result<Group> getAdminGroups();\n\n}\n```\n\ngroup\n\n```\n@Entity(name = UserReQuery.USER_DB)\npublic interface Group {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getName();\n\n    void setName(String name);\n\n    @JunctionTable(name = \"group_members\")\n    @ManyToMany(mappedBy = \"memberGroups\")\n    Result<User> getMembers();\n\n    @JunctionTable(name = \"group_admins\")\n    @ManyToMany(mappedBy = \"adminGroups\")\n    Result<User> getAdmins();\n}\n```\n\ncity\n\n```\n@Entity(name = CityReQuery.STATE_DB)\npublic interface City {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getPTT();\n\n    void setPTT(String ptt);\n\n    String getName();\n\n    void setName(String name);\n\n    @ManyToOne\n    State getState();\n\n    void setState(State state);\n\n    @OneToMany(mappedBy = \"city\")\n    Result<Street> getStreets();\n}\n```\n\nstate\n\n```\n@Entity(name = CityReQuery.STATE_DB)\npublic interface State {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getPostCode();\n\n    void setPostCode(String line1);\n\n    String getName();\n\n    void setName(String line2);\n\n    @OneToMany(mappedBy = \"state\")\n    Result<City> getCities();\n}\n```\n\nstreet \n\n```\n@Entity(name = CityReQuery.STATE_DB)\npublic interface Street {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getName();\n\n    void setName(String name);\n\n    @ManyToOne\n    City getCity();\n\n    void setCity(City city);\n\n}\n```\n\nand when i try to compile it throws this stack trace \n\n```\nFAILURE: Build failed with an exception.\n\n* What went wrong:\nExecution failed for task ':app:compileDebugJavaWithJavac'.\n> java.lang.IllegalArgumentException: couldn't make a guess for requerytest.user_db\n\n* Try:\nRun with --info or --debug option to get more log output.\n\n* Exception is:\norg.gradle.api.tasks.TaskExecutionException: Execution failed for task ':app:compileDebugJavaWithJavac'.\n        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:69)\n        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.execute(ExecuteActionsTaskExecuter.java:46)\n        at org.gradle.api.internal.tasks.execution.PostExecutionAnalysisTaskExecuter.execute(PostExecutionAnalysisTaskExecuter.java:35)\n        at org.gradle.api.internal.tasks.execution.SkipUpToDateTaskExecuter.execute(SkipUpToDateTaskExecuter.java:64)\n        at org.gradle.api.internal.tasks.execution.ValidatingTaskExecuter.execute(ValidatingTaskExecuter.java:58)\n        at org.gradle.api.internal.tasks.execution.SkipEmptySourceFilesTaskExecuter.execute(SkipEmptySourceFilesTaskExecuter.java:52)\n        at org.gradle.api.internal.tasks.execution.SkipTaskWithNoActionsExecuter.execute(SkipTaskWithNoActionsExecuter.java:52)\n        at org.gradle.api.internal.tasks.execution.SkipOnlyIfTaskExecuter.execute(SkipOnlyIfTaskExecuter.java:53)\n        at org.gradle.api.internal.tasks.execution.ExecuteAtMostOnceTaskExecuter.execute(ExecuteAtMostOnceTaskExecuter.java:43)\n        at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:203)\n        at org.gradle.execution.taskgraph.DefaultTaskGraphExecuter$EventFiringTaskWorker.execute(DefaultTaskGraphExecuter.java:185)\n        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.processTask(AbstractTaskPlanExecutor.java:66)\n        at org.gradle.execution.taskgraph.AbstractTaskPlanExecutor$TaskExecutorWorker.run(AbstractTaskPlanExecutor.java:50)\n        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)\n        at org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)\nCaused by: java.lang.RuntimeException: java.lang.IllegalArgumentException: couldn't make a guess for requerytest.user_db\n        at com.sun.tools.javac.main.Main.compile(Main.java:553)\n        at com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:129)\n        at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:138)\n        at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:45)\n        at org.gradle.api.internal.tasks.compile.JdkJavaCompiler.execute(JdkJavaCompiler.java:33)\n        at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.delegateAndHandleErrors(NormalizingJavaCompiler.java:101)\n        at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:50)\n        at org.gradle.api.internal.tasks.compile.NormalizingJavaCompiler.execute(NormalizingJavaCompiler.java:36)\n        at org.gradle.api.internal.tasks.compile.CleaningJavaCompilerSupport.execute(CleaningJavaCompilerSupport.java:34)\n        at org.gradle.api.internal.tasks.compile.CleaningJavaCompilerSupport.execute(CleaningJavaCompilerSupport.java:25)\n        at org.gradle.api.tasks.compile.JavaCompile.performCompilation(JavaCompile.java:157)\n        at org.gradle.api.tasks.compile.JavaCompile.compile(JavaCompile.java:139)\n        at org.gradle.api.tasks.compile.JavaCompile.compile(JavaCompile.java:93)\n        at com.android.build.gradle.tasks.factory.AndroidJavaCompile.compile(AndroidJavaCompile.java:39)\n        at org.gradle.internal.reflect.JavaMethod.invoke(JavaMethod.java:75)\n        at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$IncrementalTaskAction.doExecute(AnnotationProcessingTaskFactory.java:244)\n        at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:220)\n        at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$IncrementalTaskAction.execute(AnnotationProcessingTaskFactory.java:231)\n        at org.gradle.api.internal.project.taskfactory.AnnotationProcessingTaskFactory$StandardTaskAction.execute(AnnotationProcessingTaskFactory.java:209)\n        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeAction(ExecuteActionsTaskExecuter.java:80)\n        at org.gradle.api.internal.tasks.execution.ExecuteActionsTaskExecuter.executeActions(ExecuteActionsTaskExecuter.java:61)\n        ... 14 more\nCaused by: java.lang.IllegalArgumentException: couldn't make a guess for requerytest.user_db\n        at com.squareup.javapoet.Util.checkArgument(Util.java:62)\n        at com.squareup.javapoet.ClassName.bestGuess(ClassName.java:149)\n        at io.requery.processor.EntityNameResolver.typeNameOf(EntityNameResolver.java:35)\n        at io.requery.processor.EntityGenerator.<init>(EntityGenerator.java:108)\n        at io.requery.processor.EntityProcessor.process(EntityProcessor.java:114)\n        at com.sun.tools.javac.processing.JavacProcessingEnvironment.callProcessor(JavacProcessingEnvironment.java:794)\n        at com.sun.tools.javac.processing.JavacProcessingEnvironment.discoverAndRunProcs(JavacProcessingEnvironment.java:705)\n        at com.sun.tools.javac.processing.JavacProcessingEnvironment.access$1800(JavacProcessingEnvironment.java:91)\n        at com.sun.tools.javac.processing.JavacProcessingEnvironment$Round.run(JavacProcessingEnvironment.java:1035)\n        at com.sun.tools.javac.processing.JavacProcessingEnvironment.doProcessing(JavacProcessingEnvironment.java:1176)\n        at com.sun.tools.javac.main.JavaCompiler.processAnnotations(JavaCompiler.java:1170)\n        at com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:856)\n        at com.sun.tools.javac.main.Main.compile(Main.java:523)\n        ... 34 more\n\n\n```\n", "url": "https://github.com/requery/requery/issues/17", "user": "miomao656", "labels": ["bug"], "created": "2016-02-26 09:49:23", "closed": "2016-02-27 18:48:04", "commits": {"58914575c1e066a206f308e4d0424dd9c6d9d558": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "edd5547cd5b450778bebe13230d2278419a52337": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "58914575c1e066a206f308e4d0424dd9c6d9d558", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["c7babbc78d08130660eb4e91ee04c0840195c0bb"], "nameRev": "58914575c1e066a206f308e4d0424dd9c6d9d558 tags/1.0.0-beta1~35", "commitMessage": "Resolve #17 handle multiple model definitions in same package\n", "commitDateTime": "2016-02-26 22:21:03", "authoredDateTime": "2016-02-26 22:21:03", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityProcessor.java", "insertions": 49, "deletions": 2, "lines": 51}, {"filePath": "requery-processor/src/main/java/io/requery/processor/ModelGenerator.java", "insertions": 7, "deletions": 34, "lines": 41}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityProcessor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "TOT": 12, "UPD": 2, "INS": 5, "MOV": 4, "DEL": 1}, {"spoonMethodName": "io.requery.processor.EntityProcessor.findModelPackageName(io.requery.processor.EntityGraph)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ModelGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.ModelGenerator.generate()", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 4}, {"spoonMethodName": "io.requery.processor.ModelGenerator", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "edd5547cd5b450778bebe13230d2278419a52337", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["58914575c1e066a206f308e4d0424dd9c6d9d558"], "nameRev": "edd5547cd5b450778bebe13230d2278419a52337 tags/1.0.0-beta1~34", "commitMessage": "Resolve #17 handle multiple model definitions in same package\n", "commitDateTime": "2016-02-27 10:47:50", "authoredDateTime": "2016-02-27 10:47:50", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityProcessor.java", "insertions": 13, "deletions": 16, "lines": 29}, {"filePath": "requery-processor/src/main/java/io/requery/processor/ModelGenerator.java", "insertions": 2, "deletions": 2, "lines": 4}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityProcessor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "TOT": 27, "UPD": 7, "INS": 3, "MOV": 12, "DEL": 5}]}, {"spoonFilePath": "ModelGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.ModelGenerator.generate()", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["58914575c1e066a206f308e4d0424dd9c6d9d558"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 56, "deletions": 36, "lines": 92, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 21, "UPD": 2, "INS": 10, "MOV": 4, "DEL": 5, "spoonFilesChanged": 2, "spoonMethodsChanged": 4}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.ModelGenerator", "io.requery.processor.EntityProcessor.findModelPackageName(io.requery.processor.EntityGraph)", "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "io.requery.processor.ModelGenerator.generate()"]}, {"title": "Multiple many to many relations", "body": "Does this library support multiple many to many relations?\n\ni have \n\n```\n@Entity\npublic interface Group {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getName();\n\n    void setName(String name);\n\n    @JunctionTable(name = \"group_members\")\n    @ManyToMany(mappedBy = \"memberGroups\")\n    Result<User> getMembers();\n\n    @JunctionTable(name = \"group_admins\")\n    @ManyToMany(mappedBy = \"adminGroups\")\n    Result<User> getAdmins();\n\n}\n```\n\nand \n\n```\n@Entity\npublic interface User {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getName();\n\n    void setName(String name);\n\n    @ManyToMany(mappedBy = \"members\")\n    Result<Group> getMemberGroups();\n\n    @ManyToMany(mappedBy = \"admins\")\n    Result<Group> getAdminGroups();\n\n}\n```\n\nand i get error when trying to compile \n\n```\nError:Attempt to recreate a file for type requerytest.AbstractGroupEntity_UserEntity\nError:Execution failed for task ':app:compileDebugJavaWithJavac'.\n> Compilation failed; see the compiler error output for details.\nInformation:BUILD FAILED\nInformation:Total time: 3.308 secs\nInformation:2 errors\n```\n", "url": "https://github.com/requery/requery/issues/15", "user": "miomao656", "labels": ["bug"], "created": "2016-02-25 14:51:56", "closed": "2016-02-26 09:03:54", "commits": {"5f6c005eedf865c1660270bb574b4d3b484c890d": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "c7babbc78d08130660eb4e91ee04c0840195c0bb": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "5f6c005eedf865c1660270bb574b4d3b484c890d", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["1f73e13ce1ada305431a4a24d01a59a8746fb317"], "nameRev": "5f6c005eedf865c1660270bb574b4d3b484c890d tags/1.0.0-beta1~38", "commitMessage": "Resolve #15 handle multiple ManyToMany relations between the same types\n", "commitDateTime": "2016-02-25 19:42:30", "authoredDateTime": "2016-02-25 19:42:30", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 17, "deletions": 7, "lines": 24}, {"filePath": "requery-test/src/main/java/io/requery/test/model/AbstractGroup.java", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "requery-test/src/main/java/io/requery/test/model/AbstractPerson.java", "insertions": 3, "deletions": 0, "lines": 3}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateJunctionType(io.requery.processor.AttributeDescriptor)", "TOT": 7, "UPD": 1, "INS": 3, "MOV": 3, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityGenerator.getJunctionTypeName(boolean,io.requery.processor.AssociativeEntityDescriptor,io.requery.processor.EntityDescriptor,io.requery.processor.EntityDescriptor)", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityGenerator.generateStaticMetadata(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 3, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityGenerator.getJunctionTypeName(boolean,io.requery.processor.EntityDescriptor,io.requery.processor.EntityDescriptor)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "AbstractGroup.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model.AbstractGroup", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AbstractPerson.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.model.AbstractPerson", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "c7babbc78d08130660eb4e91ee04c0840195c0bb", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["c0333066ff2448bf5b10cf6f3df5b25b9b461666"], "nameRev": "c7babbc78d08130660eb4e91ee04c0840195c0bb tags/1.0.0-beta1~36", "commitMessage": "Resolve #15 handle all lower case join table name\n", "commitDateTime": "2016-02-26 01:03:43", "authoredDateTime": "2016-02-26 01:03:43", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.getJunctionTypeName(boolean,io.requery.processor.AssociativeEntityDescriptor,io.requery.processor.EntityDescriptor,io.requery.processor.EntityDescriptor)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5f6c005eedf865c1660270bb574b4d3b484c890d", "c7babbc78d08130660eb4e91ee04c0840195c0bb"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 25, "deletions": 8, "lines": 33, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 20, "UPD": 1, "INS": 11, "MOV": 8, "DEL": 0, "spoonFilesChanged": 3, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor", "requery-test/src/main/java/io/requery/test/model"], "changesInPackagesSPOON": ["io.requery.processor.EntityGenerator.getJunctionTypeName(boolean,io.requery.processor.AssociativeEntityDescriptor,io.requery.processor.EntityDescriptor,io.requery.processor.EntityDescriptor)", "io.requery.processor.EntityGenerator.generateStaticMetadata(com.squareup.javapoet.TypeSpec$Builder)", "io.requery.processor.EntityGenerator.getJunctionTypeName(boolean,io.requery.processor.EntityDescriptor,io.requery.processor.EntityDescriptor)", "io.requery.test.model.AbstractPerson", "io.requery.processor.EntityGenerator.generateJunctionType(io.requery.processor.AttributeDescriptor)", "io.requery.test.model.AbstractGroup"]}, {"title": "Can't get things working on new project.", "body": "I'd love to use your lib for a new personal project, and while I was setting it up, I was never able to get entities generated.\n\nWhat am I missing ?\n\nProject is absolutely empty, only contains the following models.\n\n**Models:**\n\n``` java\nimport android.os.Parcelable;\n\nimport java.util.Date;\n\nimport io.requery.Entity;\nimport io.requery.Generated;\nimport io.requery.Index;\nimport io.requery.Key;\nimport io.requery.ManyToOne;\nimport io.requery.Persistable;\n\n@Entity\npublic interface ITransaction extends Persistable, Parcelable {\n\n    @Key @Generated\n    long getId();\n\n    float getValue();\n\n    String getDescription();\n\n    Date getDate();\n\n    @ManyToOne\n    Category getCategory(); // Expecting generated, or should I reference interface?\n\n    @ManyToOne\n    Account getFromAccount(); // Expecting generated, or should I reference interface?\n}\n```\n\n``` java\n@Entity\npublic interface IAccount extends Persistable, Parcelable {\n\n    @Key\n    String getName();\n\n    float getCapital();\n}\n```\n\n``` java\n@Entity\npublic interface ICategory extends Persistable, Parcelable {\n\n    @Key\n    String getName();\n}\n```\n\n**Probably usefull info:**\n$ java -version\n\n> java version \"1.8.0_74\"\n> Java(TM) SE Runtime Environment (build 1.8.0_74-b02)\n> Java HotSpot(TM) 64-Bit Server VM (build 25.74-b02, mixed mode)\n\n``` groovy\ncompileOptions {\n    sourceCompatibility JavaVersion.VERSION_1_7\n    targetCompatibility JavaVersion.VERSION_1_7\n}\n\napply plugin: 'com.neenbedankt.android-apt'\n\nrepositories {\n    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local' }\n}\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:23.1.1'\n    compile 'com.android.support:design:23.1.1'\n\n    compile 'io.requery:requery:1.0-SNAPSHOT'\n    compile 'io.requery:requery-android:1.0-SNAPSHOT'\n    apt 'io.requery:requery-processor:1.0-SNAPSHOT'\n\n    compile 'io.reactivex:rxjava:1.1.0'\n    compile 'io.reactivex:rxandroid:1.1.0'\n    compile 'com.google.dagger:dagger:2.0.2'\n    provided 'com.google.dagger:dagger-compiler:2.0.2'\n}\n```\n\n**Things I tried with no success:**\n- $ gradle clean build\n- $ gradle assemble\n- Invalidate caches and restart Android Studio.\n- Clone requery and compile example. \n\nThanks in advance!\n", "url": "https://github.com/requery/requery/issues/14", "user": "GMuniz", "labels": ["bug"], "created": "2016-02-24 03:34:57", "closed": "2016-02-25 14:44:11", "commits": {"b9ebc18d92c23b5065f877f2b3770162739cd20d": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "1f73e13ce1ada305431a4a24d01a59a8746fb317": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "b9ebc18d92c23b5065f877f2b3770162739cd20d", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["7bf7139a960b10080838fa91916f2c47ca8fd838"], "nameRev": "b9ebc18d92c23b5065f877f2b3770162739cd20d tags/1.0.0-beta1~43", "commitMessage": "Resolve #14 handle generated type name in interface return type\n", "commitDateTime": "2016-02-24 19:04:37", "authoredDateTime": "2016-02-24 19:04:37", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 10, "deletions": 9, "lines": 19}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateJunctionType(io.requery.processor.AttributeDescriptor)", "TOT": 11, "UPD": 1, "INS": 3, "MOV": 3, "DEL": 4}, {"spoonMethodName": "io.requery.processor.EntityGenerator.generateMembers(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 4, "UPD": 1, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "io.requery.processor.EntityGenerator", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "1f73e13ce1ada305431a4a24d01a59a8746fb317", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["b4815b8d52b5f341d095d23389c7165333c3d9fe"], "nameRev": "1f73e13ce1ada305431a4a24d01a59a8746fb317 tags/1.0.0-beta1~39", "commitMessage": "Resolve #14 handle collections in generating members from return type\n", "commitDateTime": "2016-02-25 06:44:02", "authoredDateTime": "2016-02-25 06:44:02", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGenerator.java", "insertions": 9, "deletions": 4, "lines": 13}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGenerator.generateMembers(com.squareup.javapoet.TypeSpec$Builder)", "TOT": 15, "UPD": 4, "INS": 4, "MOV": 5, "DEL": 2}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["b9ebc18d92c23b5065f877f2b3770162739cd20d", "1f73e13ce1ada305431a4a24d01a59a8746fb317"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 19, "deletions": 13, "lines": 32, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 31, "UPD": 6, "INS": 8, "MOV": 9, "DEL": 8, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.EntityGenerator.generateMembers(com.squareup.javapoet.TypeSpec$Builder)", "io.requery.processor.EntityGenerator.generateJunctionType(io.requery.processor.AttributeDescriptor)", "io.requery.processor.EntityGenerator"]}, {"title": "Issue with entity mapping", "body": "Hi i have \n\n```\n@Entity\npublic interface State {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getPostCode();\n\n    void setPostCode(String line1);\n\n    String getName();\n\n    void setName(String line2);\n\n    @OneToMany(mappedBy = \"state\")\n    Result<City> getCities();\n}\n```\n\n```\n@Entity\npublic interface City {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getPTT();\n\n    void setPTT(String ptt);\n\n    String getName();\n\n    void setName(String name);\n\n    @ManyToOne\n    State getState();\n\n    void setState(State state);\n\n    @OneToMany(mappedBy = \"city\")\n    Result<Street> getStreets();\n}\n```\n\nand \n\n```\n@Entity\npublic interface Street {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getName();\n\n    void setName(String name);\n\n    @ManyToOne\n    City getCity();\n\n    void setCity(City city);\n}\n```\n\nWhen i try to compile it just give errors like this \n\n> Error:(26, 11) Note: mapping: requerytest.CityEntity.state -> requerytest.StateEntity.cities\n> Error:(31, 20) Note: mapping: requerytest.CityEntity.streets -> requerytest.StreetEntity.city\n> Note: mapping: requerytest.StreetEntity.city -> requerytest.CityEntity.streets\n> Note: mapping: requerytest.StateEntity.cities -> requerytest.CityEntity.state\n> Note: mapping: requerytest.CityEntity.state -> requerytest.StateEntity.cities\n> Note: mapping: requerytest.CityEntity.streets -> requerytest.StreetEntity.city\n> Note: mapping: requerytest.StreetEntity.city -> requerytest.CityEntity.streets\n> Note: mapping: requerytest.StateEntity.cities -> requerytest.CityEntity.state\n> Note: mapping: requerytest.CityEntity.state -> requerytest.StateEntity.cities\n> Note: mapping: requerytest.CityEntity.streets -> .requerytest.StreetEntity.city\n\nI can't make out anything from these errors. Am i doing something wrong? \n", "url": "https://github.com/requery/requery/issues/9", "user": "miomao656", "labels": ["bug"], "created": "2016-02-22 14:12:17", "closed": "2016-02-24 04:43:27", "commits": {"aaf75c20a84e5933552260889e216ca18c764ca8": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 1.0002777777777778, "commitsDetails": [{"commitHash": "aaf75c20a84e5933552260889e216ca18c764ca8", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["ee12b9b08cdfa17a549dcc0f268430f5f1c43e8c"], "nameRev": "aaf75c20a84e5933552260889e216ca18c764ca8 tags/1.0.0-beta1~48", "commitMessage": "Resolve #9 remove note messages from the processor for now to avoid Intellij treating them as errors\n", "commitDateTime": "2016-02-22 07:23:10", "authoredDateTime": "2016-02-22 07:23:10", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/ElementValidator.java", "insertions": 0, "deletions": 4, "lines": 4}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityGraphValidator.java", "insertions": 1, "deletions": 3, "lines": 4}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityProcessor.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 3, "deletions": 11, "lines": 14}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ElementValidator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.ElementValidator.note(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "EntityGraphValidator.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityGraphValidator.validateEntity(io.requery.processor.EntityDescriptor)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "EntityProcessor.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType", "TOT": 5, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 2}, {"spoonMethodName": "io.requery.processor.EntityType.addAnnotationElement(javax.lang.model.element.TypeElement,javax.lang.model.element.Element)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["aaf75c20a84e5933552260889e216ca18c764ca8"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 19, "lines": 24, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 9, "UPD": 1, "INS": 1, "MOV": 2, "DEL": 5, "spoonFilesChanged": 4, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.ElementValidator.note(java.lang.String)", "io.requery.processor.EntityGraphValidator.validateEntity(io.requery.processor.EntityDescriptor)", "io.requery.processor.EntityType.addAnnotationElement(javax.lang.model.element.TypeElement,javax.lang.model.element.Element)", "io.requery.processor.EntityType", "io.requery.processor.EntityProcessor.process(java.util.Set,javax.annotation.processing.RoundEnvironment)"]}, {"title": "Entities beginning with letter \"m\"", "body": "I'm having trouble setting up my entity-classes which begin with a 'm':\n\n```\n@Entity\nabstract class AbstractManufacture {\n    @Key\n    @Generated\n    int id;\n\n    @OneToMany(mappedBy = \"manufacture\")\n    Set<Product> products;\n}\n```\n\n```\n@Entity\nabstract class AbstractProduct {\n    @Key\n    @Generated\n    int id;\n\n    @ManyToOne\n    Manufacture manufacture;\n}\n```\n\nCompiling fails with error: \"cannot find symbol variable MANUFACTURE\" in the generated class \"Manufacture\".\nI looked into the generated class \"Product\" which seems to have problems generating setters and getters for \"Manufacture\", the 'm' is missing:\n\n```\npublic static final Attribute<Product, Manufacture> ANUFACTURE = \n    new AttributeBuilder<Product, Manufacture>(\"manufacture\", Manufacture.class)\n   ....\n```\n\nand\n\n```\n    public Manufacture getAnufacture() {\n        return $proxy.get(ANUFACTURE);\n    }\n\n    public void setAnufacture(Manufacture anufacture) {\n        $proxy.set(ANUFACTURE, anufacture);\n    }\n```\n", "url": "https://github.com/requery/requery/issues/8", "user": "vtuan10", "labels": ["bug"], "created": "2016-02-20 17:41:05", "closed": "2016-02-20 19:19:22", "commits": {"9d8bdadfd52f0a7ec723438bc581e5e838cd7539": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "9d8bdadfd52f0a7ec723438bc581e5e838cd7539", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["096570ddce2e57c1b946ab3d7ef3b3fa314497f5"], "nameRev": "9d8bdadfd52f0a7ec723438bc581e5e838cd7539 tags/1.0.0-beta1~64", "commitMessage": "Resolve #8 fix detection of mPrefix style member names\n", "commitDateTime": "2016-02-20 11:19:06", "authoredDateTime": "2016-02-20 11:19:06", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/Names.java", "insertions": 6, "deletions": 1, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Names.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.Names.removeMemberPrefixes(java.lang.CharSequence)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9d8bdadfd52f0a7ec723438bc581e5e838cd7539"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 6, "deletions": 1, "lines": 7, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor"], "changesInPackagesSPOON": ["io.requery.processor.Names.removeMemberPrefixes(java.lang.CharSequence)"]}, {"title": "Couple of databases", "body": "I have defined a couple of entities and some of them need to go to general db and others to specific db. Is there a way to do this? I want to have exchange specific databases in runtime.\n\nUpdate i found @Entity(model = \"general\") and @Entity(model = \"spectific\") but when i build the project i get this \n`Error:(4, 68) error: cannot find symbol class Models` and \n`Error:Attempt to recreate a file for type requery.general.Models`\n\nthis is general helper\n\n```\n`public class GeneralReQuery {\n\n    private static final String GENERAL = \"General\";\n    private SingleEntityStore<Persistable> generalDataStore;\n\n    /**\n     * @return {@link EntityDataStore} single instance for the application. <p/> Note if you're\n     * using Dagger you can make this part of your application level module returning {@code\n     * @Provides @Singleton}.\n     */\n    SingleEntityStore<Persistable> getGeneralDataStore(Context context) {\n        if (generalDataStore == null) {\n            // override onUpgrade to handle migrating to a new version\n            DatabaseSource source = new DatabaseSource(context, Models.GENERALDB, GENERAL, 1);\n            Configuration configuration = source.getConfiguration();\n            generalDataStore = RxSupport.toReactiveStore(new EntityDataStore<>(configuration));\n        }\n        return generalDataStore;\n    }\n}`\n```\n\nand specific helper\n\n```\npublic class SpecificReQuery {\n    private static final String SPECIFIC = \"CD\";\n    private SingleEntityStore<Persistable> specificDataStore;\n\n    /**\n     * @return {@link EntityDataStore} single instance for the application. <p/> Note if you're\n     * using Dagger you can make this part of your application level module returning {@code\n     * @Provides @Singleton}.\n     */\n    SingleEntityStore<Persistable> getTenantDataStore(Context context, String userid) {\n        if (specificDataStore == null) {\n            // override onUpgrade to handle migrating to a new version\n            DatabaseSource source = new DatabaseSource(context, Models.SPECIFICDB, SPECIFIC + tenantID, 1);\n            Configuration configuration = source.getConfiguration();\n            specificDataStore = RxSupport.toReactiveStore(\n                    new EntityDataStore<Persistable>(configuration));\n        }\n        return specificDataStore;\n    }\n}\n```\n\nand these are entities\n\n```\n@Entity(model = \"SPECIFICDB\")\npublic interface User {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getName();\n\n    void setName(String line2);\n}\n```\n\n```\n@Entity(model = \"GENERALDB\")\npublic interface General {\n\n    @Key\n    @Generated\n    int getId();\n\n    String getName();\n\n    void setName(String line2);\n\n}\n```\n", "url": "https://github.com/requery/requery/issues/7", "user": "miomao656", "labels": ["bug"], "created": "2016-02-19 12:06:31", "closed": "2016-02-19 14:29:21", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "OneToMany and ManyToOne", "body": "Hey there,\nThirst of all thank you for this very nice library :+1: \n\n Yet I am currently having an issues with implementing a `OneToMany`and `ManyToOne`relationship as follows:\n\n``` java\n@Entity()\npublic interface Category {\n\n    // Getters\n\n    @Key\n    @Generated\n    int getId();\n\n    @OneToMany(mappedBy = \"category\")\n    Set<Record> getRecords();\n}\n\n@Entity\npublic interface Record {\n\n    // Getters\n\n    @Key\n    @Generated\n    int getId();\n\n    @ManyToOne()\n    Category getCategory();\n}\n```\n\nAt first it seems to work, but when I restart the application via Android Studio (and only then) the app crashes with the following stacktrace:\n\n``` java\nFATAL EXCEPTION: java.lang.IllegalStateException                                                                                                                                                 \nat io.requery.sql.EntityReader.associativeQuery(EntityReader.java:304)\nat io.requery.sql.EntityReader.refreshAssociation(EntityReader.java:227)\nat io.requery.sql.EntityReader.refresh(EntityReader.java:219)\nat io.requery.sql.EntityReader.refresh(EntityReader.java:153)\nat io.requery.sql.EntityReader.load(EntityReader.java:123)\nat io.requery.proxy.EntityProxy.get(EntityProxy.java:96)\nat  o.requery.proxy.EntityProxy.get(EntityProxy.java:80)\nat xxx.models.RecordEntity.getCategory(RecordEntity.java:184)\n```\n\nFollowing the stacktrace leads to https://github.com/requery/requery/blob/master/requery/src/main/java/io/requery/sql/EntityReader.java#L304. Where I obtain the following code snippet:\n\n``` java\n case MANY_TO_ONE:\n default:\n     throw new IllegalStateException();\n```\n\n**My question now is:**\nAm **I** doing something completely wrong or have a basic misunderstanding here?\nOr is this **feature yet to be implemented**?\nOr is it even a **bug**?\n\nThanks in advance.\n", "url": "https://github.com/requery/requery/issues/5", "user": "Gi-lo", "labels": ["bug"], "created": "2016-02-18 21:21:44", "closed": "2016-02-19 02:12:30", "commits": {"8350771a697e360f4916de2ab561e7dc98085c8f": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "8350771a697e360f4916de2ab561e7dc98085c8f", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["98371f29f6ae1a07d10afbc2db84841fe6afc569"], "nameRev": "8350771a697e360f4916de2ab561e7dc98085c8f tags/1.0.0-beta1~68", "commitMessage": "Resolve #5 exception refreshing ManyToOne relationship\n", "commitDateTime": "2016-02-18 18:10:05", "authoredDateTime": "2016-02-18 18:10:05", "commitGitStats": [{"filePath": "requery-test/src/main/java/io/requery/test/FunctionalTest.java", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "requery/src/main/java/io/requery/sql/EntityReader.java", "insertions": 4, "deletions": 2, "lines": 6}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FunctionalTest.java", "spoonMethods": [{"spoonMethodName": "io.requery.test.FunctionalTest.testManyToOneRefresh()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "EntityReader.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.EntityReader.refreshAssociation(io.requery.proxy.EntityProxy,io.requery.meta.Attribute)", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.EntityReader.associativeQuery(io.requery.proxy.EntityProxy,io.requery.meta.Attribute)", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["8350771a697e360f4916de2ab561e7dc98085c8f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 2, "lines": 6, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 5, "UPD": 3, "INS": 1, "MOV": 1, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.sql.EntityReader.refreshAssociation(io.requery.proxy.EntityProxy,io.requery.meta.Attribute)", "io.requery.sql.EntityReader.associativeQuery(io.requery.proxy.EntityProxy,io.requery.meta.Attribute)"]}, {"title": "Error when reading Long value from database.", "body": "Long value gets persisted as INTEGER sql type which is fine, but is mapped as java.lang.Integer when read from database, then an invalid typecast exception is thrown when converting.\n\nWorkaround i found is to use a custom converter to a BLOB type:\n\n```\npublic class LongToByteArrayConverter implements Converter<Long, byte[]> {\n\n    @Override\n    public Class<Long> mappedType() {\n        return Long.class;\n    }\n\n    @Override\n    public Class<byte[]> persistedType() {\n        return byte[].class;\n    }\n\n    @Override\n    public Integer persistedSize() {\n        return Long.SIZE / Byte.SIZE;\n    }\n\n    @Override\n    public byte[] convertToPersisted(Long value) {\n        return ByteBuffer.allocate(Long.SIZE / Byte.SIZE).putLong(value).array();\n    }\n\n    @Override\n    public Long convertToMapped(Class<? extends Long> type, byte[] value) {\n        return ByteBuffer.wrap(value).getLong();\n    }\n}\n```\n\nMaybe a way to know when to convert back to java's Long is needed.\n", "url": "https://github.com/requery/requery/issues/3", "user": "nathanieloliveira", "labels": ["bug"], "created": "2016-02-15 18:48:50", "closed": "2016-02-16 00:38:04", "commits": {"96b15bc932f2ac7ee2a6885e984d764be6311401": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "96b15bc932f2ac7ee2a6885e984d764be6311401", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["5f57f826a6b8400a4e59c0c3b36061ab6903e9b6"], "nameRev": "96b15bc932f2ac7ee2a6885e984d764be6311401 tags/1.0.0-beta1~74", "commitMessage": "Resolve #3 fix handling of long mapping when used as primary key in SQLite, fix BigInt type\n", "commitDateTime": "2016-02-15 16:37:55", "authoredDateTime": "2016-02-15 16:37:55", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/BasicTypes.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "requery/src/main/java/io/requery/sql/GenericMapping.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "requery/src/main/java/io/requery/sql/platform/SQLite.java", "insertions": 34, "deletions": 1, "lines": 35}, {"filePath": "requery/src/main/java/io/requery/sql/type/BigIntType.java", "insertions": 4, "deletions": 4, "lines": 8}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BasicTypes.java", "spoonMethods": []}, {"spoonFilePath": "GenericMapping.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.GenericMapping", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SQLite.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.platform.SQLite.LongType", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.platform.SQLite.addMappings(io.requery.sql.Mapping)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "BigIntType.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.type.BigIntType", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.sql.type.BigIntType.fromResult(java.sql.ResultSet,int)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["96b15bc932f2ac7ee2a6885e984d764be6311401"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 41, "deletions": 8, "lines": 49, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 8, "UPD": 6, "INS": 2, "MOV": 0, "DEL": 0, "spoonFilesChanged": 3, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery/src/main/java/io/requery/sql", "requery/src/main/java/io/requery/sql/type", "requery/src/main/java/io/requery/sql/platform"], "changesInPackagesSPOON": ["io.requery.sql.GenericMapping", "io.requery.sql.type.BigIntType.fromResult(java.sql.ResultSet,int)", "io.requery.sql.platform.SQLite.LongType", "io.requery.sql.type.BigIntType", "io.requery.sql.platform.SQLite.addMappings(io.requery.sql.Mapping)"]}, {"title": "Exceptions should be more informative.", "body": "During testing I got the following exception:\n\n```\njava.lang.IllegalStateException\nat io.requery.sql.QueryGenerator.appendInsert(QueryGenerator.java:155)\nat io.requery.sql.QueryGenerator.toSql(QueryGenerator.java:92)\nat io.requery.sql.UpdateOperation$1.get(UpdateOperation.java:53)\nat io.requery.sql.UpdateOperation$1.get(UpdateOperation.java:48)\nat io.requery.query.SuppliedScalar.value(SuppliedScalar.java:51)\nat io.requery.sql.EntityWriter.insert(EntityWriter.java:346)\nat io.requery.sql.EntityDataStore.insert(EntityDataStore.java:183)\nat com.ubervet.RequeryTest.testUser(RequeryTest.java:47)\nat android.test.AndroidTestRunner.runTest(AndroidTestRunner.java:191)\nat android.test.AndroidTestRunner.runTest(AndroidTestRunner.java:176)\nat android.test.InstrumentationTestRunner.onStart(InstrumentationTestRunner.java:555)\nat android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:1879).\n```\n\nMy Entity Class is:\n\n```\n@Entity\npublic abstract class AbstractUser {\n    @Key @Generated\n    int localId;\n}\n```\n\nI'm testing the library like this:\n\n```\npublic class RequeryTest extends ApplicationTestCase<UbervetApplication> {\n\n    SingleEntityStore<Persistable> data;\n\n    public RequeryTest() {\n        super(UbervetApplication.class);\n    }\n\n    @Override\n    protected void setUp() throws Exception {\n        super.setUp();\n\n        DatabaseSource source = new DatabaseSource(getContext(), Models.DEFAULT, 1);\n        Configuration configuration = source.getConfiguration();\n        data = RxSupport.toReactiveStore(new EntityDataStore<Persistable>(configuration));\n    }\n\n    @SmallTest\n    public void testUser() {\n        User user1 = new User();\n        User user2 = new User();\n        User user3 = new User();\n\n        int localId1 = data.toBlocking().insert(user1).getLocalId();\n        int localId2 = data.toBlocking().insert(user2).getLocalId();\n        int localId3 = data.toBlocking().insert(user3).getLocalId();\n\n        assertEquals(user1.getLocalId(), localId1);\n        assertEquals(user2.getLocalId(), localId2);\n        assertEquals(user3.getLocalId(), localId3);\n    }\n}\n\n```\n\nI'm sorry if this is trivial to solve but I can't find what is the problem with my code.\nRegards\n", "url": "https://github.com/requery/requery/issues/2", "user": "nathanieloliveira", "labels": ["bug"], "created": "2016-02-15 13:39:46", "closed": "2016-02-18 03:26:10", "commits": {"5f57f826a6b8400a4e59c0c3b36061ab6903e9b6": {"commitGHEventType": "closed", "commitUser": "npurushe"}, "ca413d20fe71e61ab5668e145f1e119265709569": {"commitGHEventType": "closed", "commitUser": "npurushe"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "5f57f826a6b8400a4e59c0c3b36061ab6903e9b6", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["a5b8f14e5e336e60869079d0609de4e1271f2063"], "nameRev": "5f57f826a6b8400a4e59c0c3b36061ab6903e9b6 tags/1.0.0-beta1~75", "commitMessage": "resolves #2 add exception message when values are empty in an insert/update\n", "commitDateTime": "2016-02-15 07:34:08", "authoredDateTime": "2016-02-15 07:34:08", "commitGitStats": [{"filePath": "requery/src/main/java/io/requery/sql/QueryGenerator.java", "insertions": 12, "deletions": 9, "lines": 21}], "commitSpoonAstDiffStats": [{"spoonFilePath": "QueryGenerator.java", "spoonMethods": [{"spoonMethodName": "io.requery.sql.QueryGenerator.appendInsert()", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.requery.sql.QueryGenerator.appendUpdate()", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "io.requery.sql.QueryGenerator.checkEmptyValues(java.util.Map)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "ca413d20fe71e61ab5668e145f1e119265709569", "commitGHEventType": "closed", "commitUser": "npurushe", "commitParents": ["09ae85d7dbcada190dc61e94b07ad616c1451eaa"], "nameRev": "ca413d20fe71e61ab5668e145f1e119265709569 tags/1.0.0-beta1~72", "commitMessage": "Resolve #2 better warnings for possibly invalid entities\n", "commitDateTime": "2016-02-17 19:22:33", "authoredDateTime": "2016-02-17 19:22:33", "commitGitStats": [{"filePath": "requery-processor/src/main/java/io/requery/processor/EntityType.java", "insertions": 12, "deletions": 3, "lines": 15}], "commitSpoonAstDiffStats": [{"spoonFilePath": "EntityType.java", "spoonMethods": [{"spoonMethodName": "io.requery.processor.EntityType.process(javax.annotation.processing.ProcessingEnvironment)", "TOT": 3, "UPD": 1, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "io.requery.processor.EntityType.isCacheable()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5f57f826a6b8400a4e59c0c3b36061ab6903e9b6", "ca413d20fe71e61ab5668e145f1e119265709569"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 24, "deletions": 12, "lines": 36, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 14, "UPD": 1, "INS": 6, "MOV": 4, "DEL": 3, "spoonFilesChanged": 2, "spoonMethodsChanged": 5}, "statsSkippedReason": "", "changesInPackagesGIT": ["requery-processor/src/main/java/io/requery/processor", "requery/src/main/java/io/requery/sql"], "changesInPackagesSPOON": ["io.requery.processor.EntityType.isCacheable()", "io.requery.sql.QueryGenerator.appendUpdate()", "io.requery.processor.EntityType.process(javax.annotation.processing.ProcessingEnvironment)", "io.requery.sql.QueryGenerator.checkEmptyValues(java.util.Map)", "io.requery.sql.QueryGenerator.appendInsert()"]}]}