{"projectName": "EsotericSoftware/kryo", "bugLabels": ["BC-breaking", "bug"], "captureTime": "Sat Jul  4 16:58:25 2020", "issues": [{"title": "Update clirr exclusions for Kryo 5", "body": "As mentioned in #342, we should make all classes/methods package private that are not intended to be part of the public api, to reduce the possibility of binary incompatible changes.\nClasses for that the visibility cannot be reduced should explicitely be marked as _INTERNAL_, to make clear that they're not part of the public api (and might be changed).\n\nClasses part of the internal api only should be excluded from compatibility (clirr) checks.\n", "url": "https://github.com/EsotericSoftware/kryo/issues/343", "user": "magro", "labels": ["BC-breaking"], "created": "2015-08-26 10:53:28", "closed": "2018-06-14 22:41:34", "commits": {"1bb264196d84dc8aada42e00745a3d0b29db4d58": {"commitGHEventType": "referenced", "commitUser": "magro"}, "6ed24723e4beb35bb25afcb9e04e86624fa30cf9": {"commitGHEventType": "closed", "commitUser": "NathanSweet"}}, "ttf": 1023.0002777777778, "commitsDetails": [{"commitHash": "1bb264196d84dc8aada42e00745a3d0b29db4d58", "commitGHEventType": "referenced", "commitUser": "magro", "commitParents": ["ee97d96459e5b6abbbb99982cde2785741cbc370"], "nameRev": "1bb264196d84dc8aada42e00745a3d0b29db4d58 tags/kryo-parent-4.0.0~46", "commitMessage": "Push version to 4.0.0-SNAPSHOT due to incompatibilites from #342\n\nBefore releasing 4.0.0 #343 should be done as well.\n", "commitDateTime": "2015-10-22 22:47:26", "authoredDateTime": "2015-10-22 22:47:26", "commitGitStats": [{"filePath": "pom-main.xml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pom-shaded.xml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "pom.xml", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "6ed24723e4beb35bb25afcb9e04e86624fa30cf9", "commitGHEventType": "closed", "commitUser": "NathanSweet", "commitParents": ["d22a23dccd9b38461950084188f69597f29c4a9a"], "nameRev": "6ed24723e4beb35bb25afcb9e04e86624fa30cf9 tags/kryo-parent-5.0.0-RC1~27^2~135", "commitMessage": "Refactoring.\n\ncloses #343\n", "commitDateTime": "2017-07-18 02:07:08", "authoredDateTime": "2017-07-17 01:18:38", "commitGitStats": [{"filePath": ".project", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/com/esotericsoftware/kryo/io/InputChunked.java", "insertions": 5, "deletions": 6, "lines": 11}, {"filePath": "src/com/esotericsoftware/kryo/io/OutputChunked.java", "insertions": 4, "deletions": 5, "lines": 9}, {"filePath": "src/com/esotericsoftware/kryo/serializers/CachedFields.java", "insertions": 61, "deletions": 53, "lines": 114}, {"filePath": "src/com/esotericsoftware/kryo/serializers/CompatibleFieldSerializer.java", "insertions": 17, "deletions": 15, "lines": 32}, {"filePath": "src/com/esotericsoftware/kryo/serializers/DeflateSerializer.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/com/esotericsoftware/kryo/serializers/FieldSerializer.java", "insertions": 33, "deletions": 24, "lines": 57}, {"filePath": "src/com/esotericsoftware/kryo/serializers/FieldSerializerGenericsUtil.java", "insertions": 55, "deletions": 60, "lines": 115}, {"filePath": "src/com/esotericsoftware/kryo/serializers/GenericsResolver.java", "insertions": 56, "deletions": 8, "lines": 64}, {"filePath": "src/com/esotericsoftware/kryo/serializers/OptionalSerializers.java", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "src/com/esotericsoftware/kryo/serializers/ReflectField.java", "insertions": 32, "deletions": 70, "lines": 102}, {"filePath": "src/com/esotericsoftware/kryo/serializers/TaggedFieldSerializer.java", "insertions": 19, "deletions": 9, "lines": 28}, {"filePath": "src/com/esotericsoftware/kryo/serializers/TimeSerializers.java", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "src/com/esotericsoftware/kryo/serializers/VersionFieldSerializer.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "src/com/esotericsoftware/kryo/util/DefaultInstantiatorStrategy.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "src/com/esotericsoftware/kryo/util/Util.java", "insertions": 6, "deletions": 7, "lines": 13}, {"filePath": "test/com/esotericsoftware/kryo/ChunkedTest.java", "insertions": 9, "deletions": 9, "lines": 18}, {"filePath": "test/com/esotericsoftware/kryo/CompatibleFieldSerializerTest.java", "insertions": 0, "deletions": 2, "lines": 2}, {"filePath": "test/com/esotericsoftware/kryo/FieldSerializerInheritanceTest.java", "insertions": 0, "deletions": 4, "lines": 4}, {"filePath": "test/com/esotericsoftware/kryo/FieldSerializerTest.java", "insertions": 8, "deletions": 11, "lines": 19}, {"filePath": "test/com/esotericsoftware/kryo/GenericsTest.java", "insertions": 0, "deletions": 3, "lines": 3}, {"filePath": "test/com/esotericsoftware/kryo/KryoStringTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "test/com/esotericsoftware/kryo/MapSerializerTest.java", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "test/com/esotericsoftware/kryo/SerializationCompatTestData.java", "insertions": 1, "deletions": 21, "lines": 22}, {"filePath": "test/com/esotericsoftware/kryo/TaggedFieldSerializerTest.java", "insertions": 4, "deletions": 7, "lines": 11}, {"filePath": "test/com/esotericsoftware/kryo/WarnUnregisteredClassesTest.java", "insertions": 0, "deletions": 2, "lines": 2}, {"filePath": "test/com/esotericsoftware/kryo/pool/KryoPoolTest.java", "insertions": 5, "deletions": 5, "lines": 10}, {"filePath": "test/com/esotericsoftware/kryo/serializers/Java8ClosureSerializerTest.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "test/com/esotericsoftware/kryo/serializers/Java8OptionalSerializersTest.java", "insertions": 0, "deletions": 3, "lines": 3}, {"filePath": "test/com/esotericsoftware/kryo/serializers/Java8TimeSerializersTest.java", "insertions": 0, "deletions": 1, "lines": 1}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}], "filteredCommits": ["6ed24723e4beb35bb25afcb9e04e86624fa30cf9"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 296, "deletions": 263, "lines": 559, "gitFilesChange": 16}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/com/esotericsoftware/kryo/serializers", "src/com/esotericsoftware/kryo/util", "src/com/esotericsoftware/kryo/io", ".project"]}, {"title": "KryoPool misuses generics", "body": "If the queue provided to `KryoPool.Builder` is truly a specialized `Queue<Kryo>` not a generic `Queue<T>` with `Kryo` as the type-parameter, then the softreference code will cause a `ClassCastException` because it discards the type parameter in the constructor of `SoftReferenceQueue`.\n\nReally, the generic type of the queue should be `Queue<Object>` which would free the KryoPool to put either `Kryo` or `SoftReference<Kryo>` in it as it sees fit.\n\nThe computational cost should be the same, as the `CHECKCAST` instruction is performed after a `get()`, but with the \"correct\" implementation of generics, the cast will have to be explicit with `KryoPoolQueueImpl`.\n", "url": "https://github.com/EsotericSoftware/kryo/issues/283", "user": "shevek", "labels": ["BC-breaking"], "created": "2015-01-27 01:25:44", "closed": "2018-06-14 22:41:35", "commits": {"0d1332b3be1a01d72116c78905b63b543a35197d": {"commitGHEventType": "closed", "commitUser": "NathanSweet"}}, "ttf": 1234.0002777777777, "commitsDetails": [{"commitHash": "0d1332b3be1a01d72116c78905b63b543a35197d", "commitGHEventType": "closed", "commitUser": "NathanSweet", "commitParents": ["d62b293389db813347aed610638724252a3034f9"], "nameRev": "0d1332b3be1a01d72116c78905b63b543a35197d tags/kryo-parent-5.0.0-RC1~27^2~130", "commitMessage": "Fixed KryoPool allowing a queue of the wrong type.\n\ncloses #283\n", "commitDateTime": "2017-07-18 02:45:06", "authoredDateTime": "2017-07-18 02:45:06", "commitGitStats": [{"filePath": "src/com/esotericsoftware/kryo/pool/KryoPool.java", "insertions": 4, "deletions": 3, "lines": 7}, {"filePath": "src/com/esotericsoftware/kryo/pool/KryoPoolQueueImpl.java", "insertions": 4, "deletions": 6, "lines": 10}, {"filePath": "src/com/esotericsoftware/kryo/pool/SoftReferenceQueue.java", "insertions": 7, "deletions": 9, "lines": 16}], "commitSpoonAstDiffStats": [{"spoonFilePath": "KryoPool.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.pool.Builder.build()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "KryoPoolQueueImpl.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl.borrow()", "TOT": 6, "UPD": 3, "INS": 1, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "SoftReferenceQueue.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.pool.SoftReferenceQueue.poll()", "TOT": 12, "UPD": 0, "INS": 2, "MOV": 6, "DEL": 4}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["0d1332b3be1a01d72116c78905b63b543a35197d"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 18, "lines": 33, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 19, "UPD": 4, "INS": 3, "MOV": 7, "DEL": 5, "spoonFilesChanged": 3, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/com/esotericsoftware/kryo/pool"], "changesInPackagesSPOON": ["com.esotericsoftware.kryo.pool.Builder.build()", "com.esotericsoftware.kryo.pool.KryoPoolQueueImpl.borrow()", "com.esotericsoftware.kryo.pool.SoftReferenceQueue.poll()"]}, {"title": "Input's 'total' is a long, but the setter takes an int", "body": "https://github.com/EsotericSoftware/kryo/blob/master/src/com/esotericsoftware/kryo/io/Input.java\n\nProbably the setter just needs to be changed from int to long.\n", "url": "https://github.com/EsotericSoftware/kryo/issues/223", "user": "brianfromoregon", "labels": ["BC-breaking"], "created": "2014-06-18 14:15:29", "closed": "2014-07-28 22:24:33", "commits": {"62ea11b0c684f8ee715e5e31a4195a1c28b47a2a": {"commitGHEventType": "closed", "commitUser": "romix"}, "4cd880bcefa532f9660a0009ff1059bad4b5e509": {"commitGHEventType": "referenced", "commitUser": "romix"}, "ffe6931b559c1579f44936f13e73a9f71640a96b": {"commitGHEventType": "closed", "commitUser": "romix"}}, "ttf": 40.000277777777775, "commitsDetails": [{"commitHash": "62ea11b0c684f8ee715e5e31a4195a1c28b47a2a", "commitGHEventType": "closed", "commitUser": "romix", "commitParents": ["faca94981c41aa9bd92a8a7f81b073d6b85ba0c4"], "nameRev": "62ea11b0c684f8ee715e5e31a4195a1c28b47a2a tags/kryo-parent-3.0.0~23", "commitMessage": "Fix #223. setTotal should take long as a parameter.\n", "commitDateTime": "2014-06-18 16:32:19", "authoredDateTime": "2014-06-18 16:32:19", "commitGitStats": [{"filePath": "src/com/esotericsoftware/kryo/io/Input.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Input.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.io.Input.setTotal(int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "4cd880bcefa532f9660a0009ff1059bad4b5e509", "commitGHEventType": "referenced", "commitUser": "romix", "commitParents": ["62ea11b0c684f8ee715e5e31a4195a1c28b47a2a"], "nameRev": "4cd880bcefa532f9660a0009ff1059bad4b5e509 tags/kryo-parent-3.0.0~22", "commitMessage": "Revert \"Fix #223. setTotal should take long as a parameter.\"\n\nThis reverts commit 62ea11b0c684f8ee715e5e31a4195a1c28b47a2a.\n", "commitDateTime": "2014-06-19 10:35:06", "authoredDateTime": "2014-06-19 10:35:06", "commitGitStats": [{"filePath": "src/com/esotericsoftware/kryo/io/Input.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Input.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.io.Input.setTotal(long)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "ffe6931b559c1579f44936f13e73a9f71640a96b", "commitGHEventType": "closed", "commitUser": "romix", "commitParents": ["ca153ba7deca816f9b95405e6cf956da56f2e464"], "nameRev": "ffe6931b559c1579f44936f13e73a9f71640a96b tags/kryo-parent-3.0.0~11", "commitMessage": "Fix #223. setTotal should take long as a parameter.\n", "commitDateTime": "2014-07-29 00:22:56", "authoredDateTime": "2014-06-18 16:32:19", "commitGitStats": [{"filePath": "src/com/esotericsoftware/kryo/io/Input.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Input.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.io.Input.setTotal(int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["62ea11b0c684f8ee715e5e31a4195a1c28b47a2a", "4cd880bcefa532f9660a0009ff1059bad4b5e509"], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 2, "gitStatsSummary": {"insertions": 2, "deletions": 2, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 2}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/com/esotericsoftware/kryo/io"], "changesInPackagesSPOON": ["com.esotericsoftware.kryo.io.Input.setTotal(long)", "com.esotericsoftware.kryo.io.Input.setTotal(int)"]}, {"title": "FieldSerializer serializes removed fields in some situations", "body": "FieldSerializer serializes removed fields in some situations. See this thread on mailing list for more information:\nhttps://groups.google.com/forum/?fromgroups=#!topic/kryo-users/p1tuHM56YCQ\n", "url": "https://github.com/EsotericSoftware/kryo/issues/158", "user": "romix", "labels": ["bug"], "created": "2013-11-30 09:00:20", "closed": "2013-11-30 09:05:05", "commits": {"fa2f729da3c87bfa94f6816ff80e390e0688c5c2": {"commitGHEventType": "closed", "commitUser": "romix"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "fa2f729da3c87bfa94f6816ff80e390e0688c5c2", "commitGHEventType": "closed", "commitUser": "romix", "commitParents": ["a1372389ef88218bea2ffda7f8282095b85738d8"], "nameRev": "fa2f729da3c87bfa94f6816ff80e390e0688c5c2 tags/kryo-2.23.0~18", "commitMessage": "Fix #158: Remember which fields were removed and when rebuilding the set of fields by means of rebuildCachedFields, remove all fields that were removed before.\n", "commitDateTime": "2013-11-30 10:04:51", "authoredDateTime": "2013-11-30 10:04:51", "commitGitStats": [{"filePath": "src/com/esotericsoftware/kryo/serializers/FieldSerializer.java", "insertions": 5, "deletions": 0, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FieldSerializer.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.serializers.FieldSerializer", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.serializers.FieldSerializer.removeField(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["fa2f729da3c87bfa94f6816ff80e390e0688c5c2"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 0, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/com/esotericsoftware/kryo/serializers"], "changesInPackagesSPOON": ["com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields()", "com.esotericsoftware.kryo.serializers.FieldSerializer.removeField(java.lang.String)", "com.esotericsoftware.kryo.serializers.FieldSerializer"]}, {"title": "IntMap toString should not ignore 0 as a key", "body": "_From [Vladisla...@gmail.com](https://code.google.com/u/102588119883715653765/) on November 03, 2013 08:45:24_\n\n<b>What steps will reproduce the problem?</b>\n1. intMap.put(0, \"valueFor0Key-zeroIsAValidKeyToo\"&#13;\nintMap.toString()&#13;\n&#13;\nWhat is the expected output? &#13;\n[0, valueFor0Key-zeroIsAValidKeyToo]&#13;\n &#13;\nWhat do you see instead?&#13;\n[]&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nProposed fix:&#13;\n&#13;\n    public String toString() {&#13;\n        if (size == 0) return \"[]\";&#13;\n        StringBuilder buffer = new StringBuilder(32);&#13;\n        buffer.append('[');&#13;\n        int[] keyTable = this.keyTable;&#13;\n        V[] valueTable = this.valueTable;&#13;\n        int i = keyTable.length;&#13;\n        while (i-- &gt; 0) {&#13;\n            int key = keyTable[i];&#13;\n            if (key == EMPTY) continue;&#13;\n            buffer.append(key);&#13;\n            buffer.append('=');&#13;\n            buffer.append(valueTable[i]);&#13;\n            break;&#13;\n        }&#13;\n        while (i-- &gt; 0) {&#13;\n            int key = keyTable[i];&#13;\n            if (key == EMPTY) continue;&#13;\n            buffer.append(\", \");&#13;\n            buffer.append(key);&#13;\n            buffer.append('=');&#13;\n            buffer.append(valueTable[i]);&#13;\n        }&#13;\n&#13;\n        if (hasZeroValue) {&#13;\n            if (size &gt; 1)&#13;\n                buffer.append(\", \");&#13;\n&#13;\n            buffer.append(EMPTY);&#13;\n            buffer.append('=');&#13;\n            buffer.append(zeroValue);&#13;\n        }&#13;\n&#13;\n        buffer.append(']');&#13;\n        return buffer.toString();&#13;\n    }&#13;\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=145_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/145", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 23:22:38", "closed": "2013-11-11 23:22:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "IntMap.clear() does not work as expected", "body": "_From [romixlev](https://code.google.com/u/romixlev/) on October 22, 2013 21:53:30_\n\nIntMap.clear() does not make a map empty. I run into this bug while experimenting with the DefaultClassResolver class who uses this method.\n\nHere is a unit test to reproduce a problem:\n\npackage com.esotericsoftware.kryo;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.IOException;\nimport java.sql.Date;\nimport java.util.ArrayList;\nimport java.util.IdentityHashMap;\nimport java.util.List;\n\nimport com.esotericsoftware.kryo.Kryo;\nimport com.esotericsoftware.kryo.io.Input;\nimport com.esotericsoftware.kryo.io.Output;\nimport com.esotericsoftware.kryo.util.IntMap;\nimport com.esotericsoftware.minlog.Log;\n\npublic class IntMapTest extends KryoTestCase {\n\n```\npublic void testCase () throws Exception {\n    IntMap<Object> map = new IntMap<Object>();\n    map.put(9, new Object());\n    map.clear();\n    assertNull(\"Key 9 should not be present\", map.get(9));\n    System.out.println(map);\n}\n```\n\n}\n\nMy current proposal for a fix would be this:\n    public void clear () {\n        int[] keyTable = this.keyTable;\n        V[] valueTable = this.valueTable;\n\n```\n    for (int i = capacity + stashSize; i-- > 0;) {\n        keyTable[i] = EMPTY;\n        valueTable[i] = null;\n    }\n```\n\n//      for (int i = size - 1; i >= 0; i--) {\n//          keyTable[i] = EMPTY;\n//          valueTable[i] = null;\n//      }\n//      for (int i = capacity, n = i + stashSize - 1; i < n; i++) {\n//          keyTable[i] = EMPTY;\n//          valueTable[i] = null;\n//      }\n        size = 0;\n        stashSize = 0;\n        zeroValue = null;\n        hasZeroValue = false;\n    }\n\nBut I'm wondering what is the current logic in the code which I commented out? May be there is a more efficient way to clear a map than what I suggested above?\n\n@Nate: Do you remember why it is written this way currently?\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=144_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/144", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 23:22:34", "closed": "2013-11-11 23:22:37", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Unable to deserialize custom Object ", "body": "_From [andrew.d...@gmail.com](https://code.google.com/u/113838865510327364254/) on October 22, 2013 17:26:16_\n\n<b>What steps will reproduce the problem?</b>\n1. Serialize object using Kryo, return byte[]&#13;\n2. Cache the value using Ehcache&#13;\n3. Retrieve from Ehcache and attempt deserialization&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nExpect to see deserialized object, instead getting exception:&#13;\n[code]&#13;\ncom.esotericsoftware.kryo.KryoException: Unable to find class: mil.ardec.hld_if.ifuicds.adapters.ip2.filtering.CachingObject&#13;\n    at com.esotericsoftware.kryo.util.DefaultClassResolver.readName(DefaultClassResolver.java:138)&#13;\n    at com.esotericsoftware.kryo.util.DefaultClassResolver.readClass(DefaultClassResolver.java:115)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:656)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:767)&#13;\n    at mil.ardec.hld_if.ifuicds.adapters.ip2.filtering.KryoSerializer.read(KryoSerializer.java:185)&#13;\n    at mil.ardec.hld_if.ifuicds.adapters.ip2.filtering.KryoSerializer.deserialize(KryoSerializer.java:126)&#13;\n    at mil.ardec.hld_if.ifuicds.adapters.ip2.filtering.MessageCache.deserializeCachedObject(MessageCache.java:260)&#13;\n    at mil.ardec.hld_if.ifuicds.adapters.ip2.filtering.MessageCache.getFromCache(MessageCache.java:73)&#13;\n    at mil.ardec.hld_if.ifuicds.adapters.ip2.filtering.MessageCache.getFromCacheViaSystemID(MessageCache.java:84)&#13;\n    at mil.ardec.hld_if.ifuicds.adapters.ip2.filtering.IP2MessageFilter.accept(IP2MessageFilter.java:129)&#13;\n    at org.mule.routing.MessageFilter.accept(MessageFilter.java:89)&#13;\n    at org.mule.processor.AbstractFilteringMessageProcessor.process(AbstractFilteringMessageProcessor.java:42)&#13;\n    at org.mule.execution.ExceptionToMessagingExceptionExecutionInterceptor.execute(ExceptionToMessagingExceptionExecutionInterceptor.java:27)&#13;\n    at org.mule.execution.MessageProcessorNotificationExecutionInterceptor.execute(MessageProcessorNotificationExecutionInterceptor.java:47)&#13;\n    at org.mule.execution.MessageProcessorExecutionTemplate.execute(MessageProcessorExecutionTemplate.java:43)&#13;\n    at org.mule.processor.chain.DefaultMessageProcessorChain.doProcess(DefaultMessageProcessorChain.java:94)&#13;\n    at org.mule.processor.chain.AbstractMessageProcessorChain.process(AbstractMessageProcessorChain.java:69)&#13;\n    at org.mule.execution.ExceptionToMessagingExceptionExecutionInterceptor.execute(ExceptionToMessagingExceptionExecutionInterceptor.java:27)&#13;\n    at org.mule.execution.MessageProcessorExecutionTemplate.execute(MessageProcessorExecutionTemplate.java:43)&#13;\n    at org.mule.processor.AbstractInterceptingMessageProcessorBase.processNext(AbstractInterceptingMessageProcessorBase.java:105)&#13;\n    at org.mule.interceptor.AbstractEnvelopeInterceptor.process(AbstractEnvelopeInterceptor.java:55)&#13;\n    at org.mule.processor.AsyncInterceptingMessageProcessor.processNextTimed(AsyncInterceptingMessageProcessor.java:122)&#13;\n    at org.mule.processor.AsyncInterceptingMessageProcessor$AsyncMessageProcessorWorker$1.process(AsyncInterceptingMessageProcessor.java:192)&#13;\n    at org.mule.processor.AsyncInterceptingMessageProcessor$AsyncMessageProcessorWorker$1.process(AsyncInterceptingMessageProcessor.java:185)&#13;\n    at org.mule.execution.ExecuteCallbackInterceptor.execute(ExecuteCallbackInterceptor.java:20)&#13;\n    at org.mule.execution.HandleExceptionInterceptor.execute(HandleExceptionInterceptor.java:34)&#13;\n    at org.mule.execution.HandleExceptionInterceptor.execute(HandleExceptionInterceptor.java:18)&#13;\n    at org.mule.execution.BeginAndResolveTransactionInterceptor.execute(BeginAndResolveTransactionInterceptor.java:58)&#13;\n    at org.mule.execution.ResolvePreviousTransactionInterceptor.execute(ResolvePreviousTransactionInterceptor.java:48)&#13;\n    at org.mule.execution.SuspendXaTransactionInterceptor.execute(SuspendXaTransactionInterceptor.java:54)&#13;\n    at org.mule.execution.ValidateTransactionalStateInterceptor.execute(ValidateTransactionalStateInterceptor.java:44)&#13;\n    at org.mule.execution.IsolateCurrentTransactionInterceptor.execute(IsolateCurrentTransactionInterceptor.java:44)&#13;\n    at org.mule.execution.ExternalTransactionInterceptor.execute(ExternalTransactionInterceptor.java:52)&#13;\n    at org.mule.execution.RethrowExceptionInterceptor.execute(RethrowExceptionInterceptor.java:32)&#13;\n    at org.mule.execution.RethrowExceptionInterceptor.execute(RethrowExceptionInterceptor.java:17)&#13;\n    at org.mule.execution.TransactionalErrorHandlingExecutionTemplate.execute(TransactionalErrorHandlingExecutionTemplate.java:113)&#13;\n    at org.mule.execution.TransactionalErrorHandlingExecutionTemplate.execute(TransactionalErrorHandlingExecutionTemplate.java:34)&#13;\n    at org.mule.processor.AsyncInterceptingMessageProcessor$AsyncMessageProcessorWorker.doRun(AsyncInterceptingMessageProcessor.java:184)&#13;\n    at org.mule.work.AbstractMuleEventWork.run(AbstractMuleEventWork.java:43)&#13;\n    at org.mule.work.WorkerContext.run(WorkerContext.java:311)&#13;\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)&#13;\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)&#13;\n    at java.lang.Thread.run(Thread.java:724)&#13;\nCaused by: java.lang.ClassNotFoundException: mil.ardec.hld_if.ifuicds.adapters.ip2.filtering.CachingObject&#13;\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:366)&#13;\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:355)&#13;\n    at java.security.AccessController.doPrivileged(Native Method)&#13;\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:354)&#13;\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:424)&#13;\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)&#13;\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:357)&#13;\n    at java.lang.Class.forName0(Native Method)&#13;\n    at java.lang.Class.forName(Class.java:270)&#13;\n    at com.esotericsoftware.kryo.util.DefaultClassResolver.readName(DefaultClassResolver.java:136)&#13;\n    ... 42 more&#13;\n[\\code]&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.22&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nrunning in Mule ESB 3.4, I made sure that kryo jar (with latest ASM4.0) is ordered top in classpath, since mule runtime uses ASM3.1&#13;\n&#13;\nI can create a simple java test to serialize/deserialize the same object multiple times and it works fine, this exception only happens when running inside of Mule ESB.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=143_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/143", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 23:22:31", "closed": "2014-05-19 08:29:53", "commits": {}, "ttf": 188.00027777777777, "commitsDetails": []}, {"title": "Change type (int->long) of field total in class Output return int", "body": "_From [khmelevs...@gmail.com](https://code.google.com/u/108586087157863835510/) on October 18, 2013 11:33:21_\n\n<b>What steps will reproduce the problem?</b>\nint output.total()&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nlong output.total()&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.22&#13;\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=142_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/142", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 23:22:22", "closed": "2013-11-11 23:22:29", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Deserialization problem for the classes which extend the implementation classes of Java collection", "body": "_From [yangzhao...@gmail.com](https://code.google.com/u/104485754562907536955/) on October 18, 2013 07:46:17_\n\nMy test class extends ArrayList and has a _name attribute. By Kryo deserializer, the _name attribute stays null, can't be read correctly.\n\n```\npublic class TestClassForList extends ArrayList<String>\n{\n  private static final long serialVersionUID = 8944285015775325886L;\n  String _name;\n  public String getName()\n  {\n    return _name;\n  }\n\n  public void setName( String name )\n  {\n    _name = name;\n  }\n\n  @Override\n  public boolean equals( Object o )\n  {\n    TestClassForList obj = (TestClassForList) o;\n    return super.equals( obj )  && _name.equals( obj.getName() );\n  }\n}\n```\n\nTest Method:\n\n```\n@Test\npublic void validateList()\n{\n  TestClassForList testClass = new TestClassForList();\n  testClass.add( \"value\" );\n  testClass.setName( \"name\" );\n  Kryo kryo = new Kryo();\n  ByteArrayOutputStream os = new ByteArrayOutputStream();\n\n  Output output = new Output( os );\n  kryo.writeClassAndObject( output, testClass );\n  output.flush();\n\n  ByteArrayInputStream is = new ByteArrayInputStream( os.toByteArray() );\n  Input input = new Input( is );\n  TestClassForList readObject = (TestClassForList) kryo.readClassAndObject( input );\n\n  assertEquals( testClass.getName(), readObject.getName() );\n}\n```\n\nThe test failed with output:\n\n```\njava.lang.AssertionError: expected:<name> but was:<null>\nat org.junit.Assert.fail(Assert.java:91)\nat org.junit.Assert.failNotEquals(Assert.java:645)\nat org.junit.Assert.assertEquals(Assert.java:126)\nat org.junit.Assert.assertEquals(Assert.java:145)\nat blackboard.redis.serialization.KryoTest.validateList(KryoTest.java:61)\n```\n\nAs to this problem, now we have to write a customised serializer which can set Name in read(...) method.\nAlthough this can resolve issue, this still makes our code not reliable because we need to keep adding the customised serializer. \n\nCan this be resolved by kryo?\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=141_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/141", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 23:22:18", "closed": "2013-11-14 00:16:15", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "kryo 2.22 requires sun.nio.ch and sun.misc package dependencies", "body": "_From [zsol...@gmail.com](https://code.google.com/u/106005469042344669143/) on October 16, 2013 00:53:34_\n\n<b>What steps will reproduce the problem?</b>\n1. Use kryo 2.22 in my Java 1.6.0.26 OSGI executable.&#13;\n2. Launch the exe in eclipse or via a built exe.&#13;\n3. The app immediately fails because OSGI cannot find package imports of sun.misc and sun.nio.ch&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.22&#13;\n&#13;\nWhere do I find the jar (OSGI compatible) that includes these packages? Do I need to be on Java 1.7 in order to have these resolved? Up until this release, I have been able to successfully use Java 1.6 with Kryo.&#13;\n&#13;\nThanks for the help in advance!&#13;\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=140_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/140", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 23:22:09", "closed": "2016-02-20 01:28:35", "commits": {"a59cef66c3f302e42e44f49f18ff28da01dc3dbc": {"commitGHEventType": "closed", "commitUser": "magro"}}, "ttf": 830.0002777777778, "commitsDetails": [{"commitHash": "a59cef66c3f302e42e44f49f18ff28da01dc3dbc", "commitGHEventType": "closed", "commitUser": "magro", "commitParents": ["f21208643e883fde952ad883fd81e5d7709e87eb"], "nameRev": "a59cef66c3f302e42e44f49f18ff28da01dc3dbc tags/kryo-2.23.0~16", "commitMessage": "Fix #140 Add optional OSGI imports for sun.misc and sun.nio.ch\n", "commitDateTime": "2013-12-01 00:09:25", "authoredDateTime": "2013-12-01 00:09:25", "commitGitStats": [{"filePath": "pom.xml", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a59cef66c3f302e42e44f49f18ff28da01dc3dbc"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Kryo gets ClassCastException when deserializing TreeSet with Comparator", "body": "_From [moru0...@gmail.com](https://code.google.com/u/109956740682506252532/) on October 08, 2013 13:13:07_\n\n<b>What steps will reproduce the problem?</b>\nserialize this after uncommenting the 2 lines mentioning Kryo.&#13;\n1. Kryo refuses to serialize inner class if not static&#13;\n2. Kryo gets ClassCast Exception when deserializing TreeSet &#13;\n&#13;\n<a href=\"http://code.google.com/p/fast-serialization/source/browse/trunk/src/test/java/de/ruedigermoeller/serialization/testclasses/basicstuff/CommonCollections.java\" rel=\"nofollow\">http://code.google.com/p/fast-serialization/source/browse/trunk/src/test/java/de/ruedigermoeller/serialization/testclasses/basicstuff/CommonCollections.java</a>&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.2.2&#13;\n&#13;\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=139_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/139", "user": "ghost", "labels": ["Milestone-2.23", "Priority-Medium", "bug", "imported"], "created": "2013-11-11 23:22:03", "closed": "2013-11-11 23:22:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Performance Outliers", "body": "_From [moru0...@gmail.com](https://code.google.com/u/109956740682506252532/) on October 08, 2013 13:09:50_\n\n<b>What steps will reproduce the problem?</b>\n&#13;\nRun fast-serialization benchmarks :-)&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.2.2&#13;\n&#13;\n<a href=\"http://fast-serialization.googlecode.com/files/result-1.24.html\" rel=\"nofollow\">http://fast-serialization.googlecode.com/files/result-1.24.html</a>&#13;\n&#13;\ndeserialization of large arrays and large strings seem broken. Other stuff has improved significantly, congrats ;-)&#13;\n&#13;\nthis&#13;\n<a href=\"http://code.google.com/p/fast-serialization/source/browse/trunk/src/test/java/de/ruedigermoeller/serialization/testclasses/basicstuff/LargeNativeArrays.java\" rel=\"nofollow\">http://code.google.com/p/fast-serialization/source/browse/trunk/src/test/java/de/ruedigermoeller/serialization/testclasses/basicstuff/LargeNativeArrays.java</a>&#13;\n&#13;\nand this&#13;\n<a href=\"http://code.google.com/p/fast-serialization/source/browse/trunk/src/test/java/de/ruedigermoeller/serialization/testclasses/basicstuff/StringPerformance.java\" rel=\"nofollow\">http://code.google.com/p/fast-serialization/source/browse/trunk/src/test/java/de/ruedigermoeller/serialization/testclasses/basicstuff/StringPerformance.java</a>&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=138_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/138", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 23:21:55", "closed": "2018-06-14 22:51:03", "commits": {"9f0bfa7e7a81e34ef536e5c6ae263538eaf944b7": {"commitGHEventType": "referenced", "commitUser": "romix"}}, "ttf": 1675.0002777777777, "commitsDetails": [{"commitHash": "9f0bfa7e7a81e34ef536e5c6ae263538eaf944b7", "commitGHEventType": "referenced", "commitUser": "romix", "commitParents": ["3ab6f19e58647c33e4be8832af4ea30a771813a6"], "nameRev": "9f0bfa7e7a81e34ef536e5c6ae263538eaf944b7 tags/kryo-2.23.0~13", "commitMessage": "Add a possibility to set a custom InstantiationStrategy. The Kryo.DefaultInstantiatorStrategy implements the usual Kryo behavior, where it tries to invoke a no-arg constructor when it needs to create a new instance.\nBut when org.objenesis.strategy.StdInstantiatorStrategy is used, then new instances are created without invoking a no-arg constructor, even if such a constructor is available. This improves Kryo's performance on fast-serialization tests (see issue #138)\n", "commitDateTime": "2013-12-02 16:52:37", "authoredDateTime": "2013-12-02 16:52:37", "commitGitStats": [{"filePath": "src/com/esotericsoftware/kryo/Kryo.java", "insertions": 82, "deletions": 52, "lines": 134}, {"filePath": "src/com/esotericsoftware/kryo/Serializer.java", "insertions": 11, "deletions": 1, "lines": 12}, {"filePath": "test/com/esotericsoftware/kryo/FieldSerializerTest.java", "insertions": 29, "deletions": 0, "lines": 29}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Kryo.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.Kryo.newInstantiator(java.lang.Class)", "TOT": 8, "UPD": 3, "INS": 1, "MOV": 4, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.Kryo.newInstantiator(java.lang.Class).2.newInstance()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.Kryo.newInstantiator(java.lang.Class).1.newInstance()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.Kryo.newInstance(java.lang.Class)", "TOT": 10, "UPD": 0, "INS": 1, "MOV": 8, "DEL": 1}, {"spoonMethodName": "com.esotericsoftware.kryo.Kryo", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.Kryo.getInstantiatorStrategy()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.Kryo.DefaultInstantiatorStrategy", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.Kryo.getDefaultSerializer(java.lang.Class)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.Kryo.DefaultInstantiatorStrategy.newInstantiatorOf(java.lang.Class)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Serializer.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.Serializer", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.Serializer.isDefaultSerializer()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.Serializer.setDefaultSerializer(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "FieldSerializerTest.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.FieldSerializerTest.testDefaultInstantiatorStrategy()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.FieldSerializerTest.testStdInstantiatorStrategy()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.FieldSerializerTest.HasPrivateConstructor", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["9f0bfa7e7a81e34ef536e5c6ae263538eaf944b7"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 93, "deletions": 53, "lines": 146, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 36, "UPD": 5, "INS": 14, "MOV": 16, "DEL": 1, "spoonFilesChanged": 2, "spoonMethodsChanged": 12}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/com/esotericsoftware/kryo"], "changesInPackagesSPOON": ["com.esotericsoftware.kryo.Serializer.isDefaultSerializer()", "com.esotericsoftware.kryo.Kryo.getDefaultSerializer(java.lang.Class)", "com.esotericsoftware.kryo.Kryo.newInstantiator(java.lang.Class).2.newInstance()", "com.esotericsoftware.kryo.Kryo.DefaultInstantiatorStrategy", "com.esotericsoftware.kryo.Kryo.newInstantiator(java.lang.Class).1.newInstance()", "com.esotericsoftware.kryo.Serializer", "com.esotericsoftware.kryo.Kryo.getInstantiatorStrategy()", "com.esotericsoftware.kryo.Kryo.DefaultInstantiatorStrategy.newInstantiatorOf(java.lang.Class)", "com.esotericsoftware.kryo.Serializer.setDefaultSerializer(boolean)", "com.esotericsoftware.kryo.Kryo.newInstance(java.lang.Class)", "com.esotericsoftware.kryo.Kryo", "com.esotericsoftware.kryo.Kryo.newInstantiator(java.lang.Class)"]}, {"title": "com.esotericsoftware.kryo.KryoException: Encountered unregistered class ID: 12819", "body": "_From [jlia...@gmail.com](https://code.google.com/u/114285941166948159934/) on October 08, 2013 10:08:38_\n\n<b>What steps will reproduce the problem?</b>\n1. Used kryo 2.21 version to serialize deserialize&#13;\n2. Update to version 2.22 and deserialization fails&#13;\n&#13;\n I was using kryo version 2.21 to serialize / deserialize objects to db.&#13;\nIt worked perfectly until I decided to download the latest version 2.22. Deserialization fails with the following message:&#13;\n&#13;\ncom.esotericsoftware.kryo.KryoException: Encountered unregistered class ID: 12819&#13;\n&#13;\nmethods to read/ write:&#13;\n&#13;\n    public  MyObject readKryo(byte[] out)&#13;\n            throws IOException {&#13;\n                Kryo kryo = new Kryo();&#13;\n        Input kryoIn = null;&#13;\n        MyObject surveyObject = null;&#13;\n        try {&#13;\n            kryoIn = new Input(out);&#13;\n         synchronized (this) {&#13;\n             surveyObject = kryo.readObject(kryoIn, MyObject.class);&#13;\n        }&#13;\n            &#13;\n        } catch (Exception e) {&#13;\n            e.printStackTrace();&#13;\n        }&#13;\n        return surveyObject;&#13;\n&#13;\n    }&#13;\n&#13;\n    public  ByteArrayOutputStream writeKryo(MyObject test,&#13;\n            ) throws IOException {&#13;\n        Output output = null;&#13;\n                Kryo kryo = new Kryo();&#13;\n        ByteArrayOutputStream out = null;&#13;\n        try {&#13;\n            out = new ByteArrayOutputStream();&#13;\n            output = new Output(out);&#13;\n            kryo.writeObject(output, test);&#13;\n        } finally {&#13;\n            if (output != null) {&#13;\n                output.close();&#13;\n            }&#13;\n        }&#13;\n        return out;&#13;\n    }\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=137_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/137", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:54:56", "closed": "2013-11-11 22:55:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Serialization of File Object munges Path", "body": "_From [dturan...@gmail.com](https://code.google.com/u/114441121113645363561/) on October 02, 2013 19:57:29_\n\n<b>What steps will reproduce the problem?</b>\nFile file=new File(\"/foo/bar\")&#13;\nKryo kryo = new Kryo();&#13;\nkryo.register(File.class);&#13;\nkryo.setInstantiatorStrategy(new StdInstantiatorStrategy());&#13;\n&#13;\nRound trip serialize/deserialize&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nThe deserialized instance File file2.getAbsolutePath()  is relative to the current directory. Apparently because the internal prefixLength property is 0.  I was able to resolve it setting the prefixLengthField via reflection. Something like this. Not too robust, but you get the idea:&#13;\n&#13;\nFile file = kryo.readObject(input, File.class);&#13;\nif (file.getPath().startsWith(\"/\")) {&#13;\n    DirectFieldAccessor dfa = new DirectFieldAccessor(file);&#13;\n    dfa.setPropertyValue(\"prefixLength\", 1);&#13;\n}&#13;\nreturn file; &#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.21&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=136_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/136", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:54:49", "closed": "2013-11-11 22:54:54", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "deep copy of ArrayAsListSerializer: Caused by: java.lang.NullPointerException", "body": "_From [agentilr...@gmail.com](https://code.google.com/u/112999105213711554496/) on September 27, 2013 13:26:27_\n\n<b>What steps will reproduce the problem?</b>\n1. I used ArrayAsListSerializer from Martin's project kryo-serializers to do deep clone of objects.&#13;\nHowever, copy method is not implemented.&#13;\nI tried to implemented copy like that:&#13;\n        protected List&lt;?&gt; createCopy(Kryo kryo, List&lt;?&gt; original) {&#13;\n        return kryo.newInstance(original.getClass());&#13;\n    }&#13;\n&#13;\n        @Override&#13;\n    public List copy(Kryo kryo, List original) {&#13;\n        List copy = createCopy(kryo, original);&#13;\n        for (Object elem : original) {&#13;\n            copy.add(kryo.copy(elem));&#13;\n        }&#13;\n        return copy;&#13;\n    }&#13;\n&#13;\n&#13;\nWhat is the expected output? &#13;\nBut I receive the following error:&#13;\nCaused by: java.lang.NullPointerException&#13;\n    at java.util.Arrays$ArrayList.size(Arrays.java:3362)&#13;\n    at java.util.AbstractList.add(AbstractList.java:91)&#13;\n    at pt.ptinovacao.deepcloner.kryo.ArraysAsListSerializer.copy(ArraysAsListSerializer.java:127)&#13;\n    at pt.ptinovacao.deepcloner.kryo.ArraysAsListSerializer.copy(ArraysAsListSerializer.java:1)&#13;\n    at com.esotericsoftware.kryo.Kryo.copy(Kryo.java:830)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.copy(FieldSerializer.java:638)&#13;\n    ... 28 more&#13;\n&#13;\nWhat do you see instead?&#13;\nSuccessful copy of object.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.21&#13;\n&#13;\nPS: This new discussion is started on this issue:&#13;\n<a href=\"https://code.google.com/p/kryo/issues/detail?id=134\" rel=\"nofollow\">https://code.google.com/p/kryo/issues/detail?id=134</a>&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=135_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/135", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:54:44", "closed": "2013-11-11 22:54:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Caused by: java.lang.ClassCastException: class test.enums.ActivityTypeEnum != null", "body": "_From [agentilr...@gmail.com](https://code.google.com/u/112999105213711554496/) on September 23, 2013 12:59:10_\n\n<b>What steps will reproduce the problem?</b>\n1. When I copy an object:&#13;\nprivate static final Kryo kryo = new Kryo();&#13;\nkryo.copy(object)&#13;\n&#13;\nWhat is the expected output? &#13;\nThe successful copy of the object, like appends on default java serialization.&#13;\n&#13;\nWhat do you see instead?&#13;\nCaused by: java.lang.ClassCastException: class test.enums.ActivityTypeEnum != null&#13;\n    at java.util.EnumMap.typeCheck(EnumMap.java:658)&#13;\n    at java.util.EnumMap.put(EnumMap.java:241)&#13;\n    at java.util.EnumMap.put(EnumMap.java:62)&#13;\n    at com.esotericsoftware.kryo.serializers.MapSerializer.copy(MapSerializer.java:148)&#13;\n    at com.esotericsoftware.kryo.serializers.MapSerializer.copy(MapSerializer.java:17)&#13;\n    at com.esotericsoftware.kryo.Kryo.copy(Kryo.java:830)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.copy(FieldSerializer.java:638)&#13;\n    ... 22 more&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.21&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nI'm running a test on eclipse IDE.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=134_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/134", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:54:27", "closed": "2013-11-11 22:54:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Add support to disable Object to primitive datatype conversion", "body": "_From [pa...@anahata-it.com.au](https://code.google.com/u/104725920361403919195/) on September 04, 2013 10:14:25_\n\nLooks like the default Class serializer converts Long to long, would it be good to have a way of disabling this or it is already possible to have some documentation about it.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=132_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/132", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:54:01", "closed": "2013-11-11 22:54:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Kryo makes pointless allocations when serializing private primitive fields", "body": "_From [jordanth...@gmail.com](https://code.google.com/u/103410944693236881656/) on September 02, 2013 17:19:19_\n\n<b>What steps will reproduce the problem?</b>\n1. Serialize an object with private boolean fields&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nThere should be no new instances of Boolean on the heap - the two cached instances should always be reused. Instead, Kryo allocates new instances of Boolean.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nThis occurs on the latest version in source control as well as 2.21.&#13;\n&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nIf you use Field.getBoolean() on a primitive boolean field and cast to Boolean, the returned object will be one of the two cached Boolean objects already in the heap. However, if you use Field.get() and cast to Boolean, the returned object will actually be a brand new Boolean instance. This behavior is demonstrated in the following gist (the test passes): <a href=\"https://gist.github.com/jordanlewis/6413827\" rel=\"nofollow\">https://gist.github.com/jordanlewis/6413827</a>&#13;\n&#13;\nKryo falls back on Field.get() in FieldSerializer.java when it can't use ASM or Unsafe, such as in the case of private fields. Ideally, it would instead use Field.getBoolean (or getLong, etc) for fields of primitive type. Instead, it ends up creating a lot of pointless garbage because of this reflection quirk.&#13;\n&#13;\nI wrote a patch that fixes ObjectField to detect the type of the field before serializing, and to use getBoolean/getLong/etc when appropriate. ObjectFields now take the type of the field that they represent in their constructor to facilitate the correct behavior.\n\n**Attachment:** [primitiveSerializationFix.patch](http://code.google.com/p/kryo/issues/detail?id=130)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=130_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/130", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:53:46", "closed": "2013-11-11 22:53:53", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "readClassAndObject throws KryoException: Buffer underflow.", "body": "_From [Kolor...@gmail.com](https://code.google.com/u/115207160773405303223/) on August 22, 2013 09:36:08_\n\nthis exception happens in my kryo performance test\ninvoke readClassAndObject 1000000 times in 100 thread\n\n<b>What steps will reproduce the problem?</b>\n1.multi-thread invoke readClassAndObject&#13;\n2.each thread with kryo,input and output sington instance in thread local&#13;\n3.each thread get kryo,input and output instance from thread local,and invoke kryo.readClassAndObject&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\ncom.esotericsoftware.kryo.KryoException: Buffer underflow.&#13;\n    at com.esotericsoftware.kryo.io.Input.require(Input.java:156)&#13;\n    at com.esotericsoftware.kryo.io.Input.readInt(Input.java:337)&#13;\n    at com.esotericsoftware.kryo.util.DefaultClassResolver.readClass(DefaultClassResolver.java:109)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:610)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:721)&#13;\n    at com.esotericsoftware.kryo.serializers.MapSerializer.read(MapSerializer.java:134)&#13;\n    at com.esotericsoftware.kryo.serializers.MapSerializer.read(MapSerializer.java:17)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:729)&#13;\n    at push.serializer.KryoSerializer.deserialize(KryoSerializer.java:40)&#13;\n    at push.KryoTest.decode(KryoTest.java:68)&#13;\n    at push.KryoTest.access$0(KryoTest.java:67)&#13;\n    at push.KryoTest$1.run(KryoTest.java:44)&#13;\n    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)&#13;\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)&#13;\n    at java.lang.Thread.run(Thread.java:662)&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.21&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n/**&#13;\n- &#13;\n  _/&#13;\n  package push;&#13;\n  &#13;\n  import java.util.HashMap;&#13;\n  import java.util.UUID;&#13;\n  import java.util.concurrent.ExecutorService;&#13;\n  import java.util.concurrent.Executors;&#13;\n  import java.util.concurrent.TimeUnit;&#13;\n  import java.util.concurrent.atomic.AtomicInteger;&#13;\n  &#13;\n  import push.serializer.KryoSerializer;&#13;\n  &#13;\n  /_*&#13;\n- @author kolor&#13;\n- &#13;\n  */&#13;\n  public class KryoTest {&#13;\n  &#13;\n  private static final KryoSerializer serializer = new KryoSerializer();&#13;\n  &#13;\n  public static void main(String[] args) throws Exception {&#13;\n      final HashMap&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();&#13;\n      for (int i = 0; i &lt; 10; i++) {&#13;\n          map.put(UUID.randomUUID().toString() + i, UUID.randomUUID().toString());&#13;\n      }&#13;\n      //&#13;\n  &#13;\n      final byte[] bytes = encode(map);&#13;\n      System.out.println(bytes.length);&#13;\n      System.out.println(decode(bytes));&#13;\n      final AtomicInteger seq = new AtomicInteger();&#13;\n      ExecutorService executor = Executors.newFixedThreadPool(100);&#13;\n      long bt = System.currentTimeMillis();&#13;\n      //&#13;\n      for (int i = 0; i &lt; 1000000; i++) {&#13;\n          executor.execute(new Runnable() {&#13;\n              @Override&#13;\n              public void run() {&#13;\n                  try {&#13;\n                      //&#13;\n                      // encode(map);&#13;\n                      decode(bytes);&#13;\n                  } catch (Exception e) {&#13;\n                      if (seq.incrementAndGet() == 1) {&#13;\n                          e.printStackTrace();&#13;\n                      }&#13;\n                  }&#13;\n              }&#13;\n          });&#13;\n      }&#13;\n      executor.shutdown();&#13;\n      executor.awaitTermination(10000, TimeUnit.DAYS);&#13;\n  &#13;\n      long et = System.currentTimeMillis();&#13;\n  &#13;\n      System.out.println(\"cost \" + (et - bt) + \" fails:\" + seq.get());&#13;\n  }&#13;\n  &#13;\n  private static byte[] encode(HashMap&lt;String, Object&gt; map) {&#13;\n      return serializer.serialize(map);&#13;\n  }&#13;\n  &#13;\n  private static HashMap&lt;String, Object&gt; decode(byte[] data) throws Exception {&#13;\n      return (HashMap&lt;String, Object&gt;) serializer.deserialize(data);&#13;\n  }&#13;\n  &#13;\n  }&#13;\n  &#13;\n\n**Attachment:** [Serializer.java KryoSerializer.java KryoTest.java](http://code.google.com/p/kryo/issues/detail?id=128)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=128_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/128", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:53:27", "closed": "2013-11-11 22:53:41", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "EnumSet deserialization doesn't work", "body": "_From [rok.lena...@gmail.com](https://code.google.com/u/115962338486557045709/) on August 20, 2013 12:03:17_\n\nWhen deserializing a object that contains an EnumSet, after serializing it with call to:\nkryo.writeClassAndObject(output, objectContainingEnumSet);\n\nI get the following exception when deserializing it with call to:\n\nkryo.readClassAndObject(input)\n\nUnable to find class: java.util.RegularEnumSet\n\nI put a breakpoint into the default enum set deserializer method and the thread never reaches that.\n\nI'm using Kryo 2.20 on IBM JVM java version 5.0. References are disabled.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=126_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/126", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:53:05", "closed": "2014-05-19 08:30:28", "commits": {}, "ttf": 188.00027777777777, "commitsDetails": []}, {"title": "Patch to get KryoNet working with Kryo 2.21", "body": "_From [robin.ki...@gmail.com](https://code.google.com/u/114916895304570456707/) on August 18, 2013 18:32:47_\n\nKryonet fails tests if you try to use kryo 2.21 with it.  Attached is a patch to apply to both kryo and kryonet to fix the issues.\n\nPatch summary:\n- Fix ByteBufferInputStream#read to not return -1 (indicating EOF) if length is zero.\n- New ThrowableSerializer, because FieldSerializer won't work on Throwables as of Java 1.7\n- KryoSerialization now supports references (and requires them for some RMI tests)\n\n**Attachment:** [kryo_kryonet_patch.txt](http://code.google.com/p/kryo/issues/detail?id=125)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=125_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/125", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:53:03", "closed": "2016-02-20 01:21:31", "commits": {}, "ttf": 830.0002777777778, "commitsDetails": []}, {"title": "KryoException because Input.require() does not properly compact full Input buffer", "body": "_From [pbailis@gmail.com](https://code.google.com/u/pbailis@gmail.com/) on August 07, 2013 03:55:02_\n\n<b>What steps will reproduce the problem?</b>\n1. Use Kryo to serialize at least two objects of lengths M and N&#13;\n2. Create an new Input of size M.&#13;\n3. Read the first object from the Input, then attempt to read the second object.&#13;\n&#13;\n(See an example below where M=N=512b.)&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nInstead of deserialization, a a \"Buffer underflow\" KryoException is thrown.&#13;\n&#13;\nException in thread \"main\" java.lang.RuntimeException: com.esotericsoftware.kryo.KryoException: Buffer underflow.&#13;\n    at org.bailis.kryobug.main(KryoBug.java:64)&#13;\nCaused by: com.esotericsoftware.kryo.KryoException: Buffer underflow.&#13;\n    at com.esotericsoftware.kryo.io.Input.require(Input.java:159)&#13;\n    at com.esotericsoftware.kryo.io.Input.readBytes(Input.java:321)&#13;\n    at com.esotericsoftware.kryo.io.Input.readBytes(Input.java:306)&#13;\n    at org.bailis.kryobug.main(KryoBug.java:61)&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.21&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nThis appears to have been introduced as part of <a title=\"Make input.java not compact if no stream is available (with patch)\" class=\"closed_ref\" href=\"/p/kryo/issues/detail?id=89\"> Issue 89 </a> (<a href=\"/p/kryo/source/detail?r=352\">r352</a>).&#13;\n&#13;\nIt appears that, to fix this bug, the first invocation of fill() in require() should only occur if remaining &gt; 0. This can be accomplished via the patch below.&#13;\n&#13;\nFortunately, 2.20 does not have this error since it compacts correctly:&#13;\n<a href=\"https://code.google.com/p/kryo/source/browse/trunk/src/com/esotericsoftware/kryo/io/Input.java?r=338#148\" rel=\"nofollow\">https://code.google.com/p/kryo/source/browse/trunk/src/com/esotericsoftware/kryo/io/Input.java?r=338#148</a>&#13;\n&#13;\nExample below:&#13;\n&#13;\nByteBuffer buf = ByteBuffer.allocate(1024);&#13;\nByteBufferOutputStream byteBufferOutputStream = new ByteBufferOutputStream(buf);&#13;\nOutput testOutput = new Output(byteBufferOutputStream);&#13;\ntestOutput.writeBytes(new byte[512]);&#13;\ntestOutput.writeBytes(new byte[512]);&#13;\ntestOutput.flush();&#13;\n&#13;\nByteBufferInputStream testInputs = new ByteBufferInputStream();&#13;\nbuf.flip();&#13;\ntestInputs.setByteBuffer(buf);&#13;\nInput input = new Input(testInputs, 512);&#13;\nbyte[] toRead = new byte[512];&#13;\ninput.readBytes(toRead);&#13;\n&#13;\n//this will throw a KryoException&#13;\ninput.readBytes(toRead);&#13;\n&#13;\nPATCH&#13;\n&#13;\nIndex: src/com/esotericsoftware/kryo/io/Input.java&#13;\n===================================================================&#13;\n--- src/com/esotericsoftware/kryo/io/Input.java (<a href=\"/p/kryo/source/detail?r=384\">revision 384</a>)&#13;\n+++ src/com/esotericsoftware/kryo/io/Input.java (working copy)&#13;\n@@ -154,14 +154,18 @@&#13;\n        if (remaining &gt;= required) return remaining;&#13;\n        if (required &gt; capacity) throw new KryoException(\"Buffer too small: capacity: \" + capacity + \", required: \" + required);&#13;\n &#13;\n-       int count;&#13;\n  +&#13;\n      // Try to fill the buffer.&#13;\n-       int count = fill(buffer, limit, capacity - limit);&#13;\n-       if (count == -1) throw new KryoException(\"Buffer underflow.\");&#13;\n-       remaining += count;&#13;\n-       if (remaining &gt;= required) {&#13;\n-           limit += count;&#13;\n-           return remaining;&#13;\n-       }&#13;\n-       if (remaining &gt; 0) {&#13;\n-           count = fill(buffer, limit, capacity - limit);&#13;\n-           if (count == -1) throw new KryoException(\"Buffer underflow.\");&#13;\n-           remaining += count;&#13;\n-           if (remaining &gt;= required) {&#13;\n-               limit += count;&#13;\n-                   return remaining;&#13;\n-       }&#13;\n-        }&#13;\n  &#13;\n        // Was not enough, compact and try again.&#13;\n        System.arraycopy(buffer, position, buffer, 0, remaining);\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=124_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/124", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:52:54", "closed": "2013-11-11 22:53:00", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Input API is ridiculous", "body": "_From [denis.af...@gmail.com](https://code.google.com/u/118244682889604526085/) on August 05, 2013 10:40:47_\n\n@Test\n    public void test() throws Exception {\n        final byte[] buf = new byte[30];\n        final Input in = new Input(buf, 10, 10);\n        assertEquals(10, in.available());\n    }\n\njava.lang.AssertionError: \nExpected :10\nActual   :0\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=123_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/123", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:52:49", "closed": "2013-11-11 22:52:52", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Varint is broken in UnsafeOutput in 2.22-SNAPSHOT", "body": "_From [denis.af...@gmail.com](https://code.google.com/u/118244682889604526085/) on August 05, 2013 08:46:39_\n\n@Test\n    public void test() {\n        final int value = 39117;\n        final Output out = new UnsafeOutput(1024);\n        out.writeVarInt(value, true);\n        final Input in = new UnsafeInput(out.toBytes());\n        final int actualValue = in.readVarInt(true);\n        assertEquals(value, actualValue);\n    }\n\njava.lang.AssertionError: \nExpected :39117\nActual   :55501\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=122_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/122", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:52:44", "closed": "2013-11-11 22:52:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "CompatibleFieldSerializer performance issue", "body": "_From [njz...@gmail.com](https://code.google.com/u/105929176084098242792/) on July 19, 2013 08:41:45_\n\nBoth CompatibleFieldSerializer & TaggeFieldSerializer typically generate a way larger byte stream due to :\nfor (int i = 0, n = fields.length; i < n; i++)\n      output.writeString(fields[i].field.getName());\n\nHowever,using FieldSerializer provides zero backward compatibility.\n\nShould there be an optional annotation/setting that allows an \"integer-field\" mapping that replaces \"output.writeString(fields[i].field.getName())\" by \"output.writeInt(fieldId)\" ?\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=120_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/120", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:52:21", "closed": "2016-02-20 01:21:14", "commits": {}, "ttf": 830.0002777777778, "commitsDetails": []}, {"title": "Input#skip(long) always skips MAX_INT bytes.", "body": "_From [luke.da...@gradle.biz](https://code.google.com/u/115227949229025856757/) on July 03, 2013 23:47:17_\n\n<a href=\"https://code.google.com/p/kryo/source/browse/trunk/src/com/esotericsoftware/kryo/io/Input.java#263\" rel=\"nofollow\">https://code.google.com/p/kryo/source/browse/trunk/src/com/esotericsoftware/kryo/io/Input.java#263</a>&#13;\n&#13;\nThe logic in here is wrong. It should be using min() instead of max().\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=119_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/119", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:52:16", "closed": "2013-11-11 22:52:20", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Switch to SLF4J (from MinLog)", "body": "_From [m...@thebishops.org](https://code.google.com/u/100737968351120931000/) on July 03, 2013 21:29:53_\n\nSLF4J is preferrable MinLog for a variety of reasons, mostly around configurabliity, industry acceptance and adaptability. If you really want your logs consumed by someone, especially in a clustered environment, SLF4J is the best way to go.\n\nFrom the groups: <a href=\"https://groups.google.com/forum/#!topic/kryo-users/-M--TGWfr7g\" rel=\"nofollow\">https://groups.google.com/forum/#!topic/kryo-users/-M--TGWfr7g</a>&#13;\n&#13;\nSLF4J is here:  <a href=\"http://slf4j.org\" rel=\"nofollow\">http://slf4j.org</a>\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=118_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/118", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:52:09", "closed": "2013-11-11 22:52:14", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Add OSGi headers to MANIFEST.MF", "body": "_From [m...@thebishops.org](https://code.google.com/u/100737968351120931000/) on July 03, 2013 21:24:50_\n\nIt would be great to use Kryo inside an OSGi container like Eclipse, felix, knopplerfish, Glassfish, etc. In order to do so, the jar file's MANIFEST.MF needs additional headers describing how this library can be interacted with and what it depends on.\n\nFortunately this header can be automatically generated, usually via the Apache Felix Maven plugin. If interested I can create a patch with the necessary changes.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=117_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/117", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:51:58", "closed": "2014-01-26 00:09:40", "commits": {"3ab6f19e58647c33e4be8832af4ea30a771813a6": {"commitGHEventType": "referenced", "commitUser": "magro"}}, "ttf": 75.00027777777778, "commitsDetails": [{"commitHash": "3ab6f19e58647c33e4be8832af4ea30a771813a6", "commitGHEventType": "referenced", "commitUser": "magro", "commitParents": ["1fc2dc8ad484ab0dc0af6ce86a5bef44c699631e"], "nameRev": "3ab6f19e58647c33e4be8832af4ea30a771813a6 tags/kryo-2.23.0~14", "commitMessage": "Refs #117: Don't export org.objenesis* package (as proposed with patch).\n", "commitDateTime": "2013-12-01 01:59:22", "authoredDateTime": "2013-12-01 01:59:22", "commitGitStats": [{"filePath": "pom.xml", "insertions": 3, "deletions": 2, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3ab6f19e58647c33e4be8832af4ea30a771813a6"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "asm 4.0 dependency should not be present", "body": "_From [vincent...@gmail.com](https://code.google.com/u/102496386568794718383/) on June 25, 2013 23:20:42_\n\nHi,\n\nUsing Kryo in my project, I see that it still has a dependency on asm 4.0 even though it appropriately uses a dependency on a shaded version of reflectasm (that, I guess, was intended to remove that dependency on asm 4.0...)\n\n---\n\n[INFO] The following files have been resolved:\n[INFO]    com.esotericsoftware.kryo:kryo:jar:2.21:compile\n[INFO]    com.esotericsoftware.minlog:minlog:jar:1.2:compile\n[INFO] com.esotericsoftware.reflectasm:reflectasm:jar:shaded:1.07:compile\n[INFO]    org.objenesis:objenesis:jar:1.2:compile\n## [INFO]    org.ow2.asm:asm:jar:4.0:compile\n\nIt looks like the published pom of the shaded reflectasm is incorrect (as it still contains a dependency to asm 4.0, that has normaly been shaded and relocated). \nIt should be replaced by a \"dependency-reduced\" pom (without any dependency to asm) (<a href=\"http://maven.apache.org/plugins/maven-shade-plugin/shade-mojo.html#createDependencyReducedPom\" rel=\"nofollow\">http://maven.apache.org/plugins/maven-shade-plugin/shade-mojo.html#createDependencyReducedPom</a>)&#13;\n&#13;\nKind regards,&#13;\nVincent\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=116_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/116", "user": "ghost", "labels": ["Milestone-2.22", "Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:51:47", "closed": "2013-11-11 22:51:56", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ArrayIndexOutOfBoundsException in IdentityMap.clear()", "body": "_From [tcmarti...@yahoo.com](https://code.google.com/u/116741318305277927722/) on June 24, 2013 22:27:59_\n\n<b>What steps will reproduce the problem?</b>\n1. Instantiate Kryo instance.&#13;\n2. Instantiate fairly complex composite Java class (my project uses one that I can't share)&#13;\n3. Create 100+ copies of the complex instance in a loop&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nExpect all 100+ copies to be made, but instead, I'm getting an ArrayIndexOutOfBoundsException at some point.&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.19, 2.20, 2.21&#13;\n&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nThis problem does NOT exhibit itself in 2.17 or lower. It pops up only in 2.19 and above. I recognize the problem is probably very specific to the nature of my complex, composite Java object that I'm cloning (copying) and therefore may be difficult for you guys to replicate. If time permits, I may try to troubleshoot this for you, however, I can clearly see something must have changed between 2.17 &amp; 2.19 that affects IdentityMap.clear() to cause this. Perhaps you guys will be able to see the difference and arrive at a conclusion fairly easily. If not, let me know and I'll try to have a deeper look myself when I get an opportunity. In the meantime, I'll go just use 2.17.&#13;\n&#13;\nThanks&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=115_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/115", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:51:28", "closed": "2013-11-21 14:29:47", "commits": {}, "ttf": 9.000277777777777, "commitsDetails": []}, {"title": "int[].class and DeflaterInputStream fails", "body": "_From [frust...@gmail.com](https://code.google.com/u/101642048683469207653/) on May 29, 2013 14:56:56_\n\n<b>What steps will reproduce the problem?</b>\n&#13;\nint[] testArray = new int[100];&#13;\nArrays.fill(testArray, 6);&#13;\nOutput output = new Output(new DeflaterOutputStream(Gdx.files.external(\"kryofile.bin\").write(false)));              &#13;\nkryo.writeObject(output, testArray);&#13;\noutput.close();&#13;\n&#13;\n//.....&#13;\n&#13;\nFileHandle fh = Gdx.files.external(\"kryofile.bin\");&#13;\n            &#13;\nif(fh.exists())&#13;\n{&#13;\n   Input input = new Input(new DeflaterInputStream(fh.read()));&#13;\n                &#13;\n   int[] testArray = kryo.readObject(input, int[].class);&#13;\n   input.close();   &#13;\n}   &#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nExpected: An evil array full of sixes ;)&#13;\nbut get this instead.&#13;\n&#13;\nException in thread \"Thread-7\" java.lang.IndexOutOfBoundsException: Index: 118, Size: 0&#13;\n    at java.util.ArrayList.rangeCheck(Unknown Source)&#13;\n    at java.util.ArrayList.get(Unknown Source)&#13;\n    at com.esotericsoftware.kryo.util.MapReferenceResolver.getReadObject(MapReferenceResolver.java:42)&#13;\n    at com.esotericsoftware.kryo.Kryo.readReferenceOrNull(Kryo.java:773)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:624)&#13;\n    at com.frustaci.miners.Main.InitLevel(Main.java:3586)&#13;\n    at com.frustaci.miners.Main$StateRestart$1.run(Main.java:789)&#13;\n&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\nkryo-2.21-all.jar&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nAlso, if you remove the DeflaterIOSteam it works fine.&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=114_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/114", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:51:18", "closed": "2013-11-11 22:51:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Serialization of Class.class fails", "body": "_From [alessand...@gmail.com](https://code.google.com/u/102130706848349570292/) on May 22, 2013 11:47:46_\n\n<b>What steps will reproduce the problem?</b>\n&#13;\nI am evaluating your library. For the moment it works nicely, I just have a small problem.&#13;\n&#13;\nI have one class (let us call it \"MyClass\") that contains the following field:&#13;\n&#13;\n    private final Class&lt;?&gt; contentType;&#13;\n&#13;\nI have problems when serializing that field. If I create a serializer such as:&#13;\n&#13;\n    public static class MyClassSerializer extends Serializer&lt;MyClass&gt; {&#13;\n        @Override&#13;\n        public void write(final Kryo kryo, final Output output, final MyClass object) {&#13;\n            ...&#13;\n            kryo.writeObject(output, object.contentType);&#13;\n            ...&#13;\n        }&#13;\n&#13;\n        @Override&#13;\n        public MyClass read(final Kryo kryo, final Input input, final Class&lt;MyClass&gt; type) {&#13;\n            ...&#13;\n            kryo.readObject(input, Class.class);&#13;\n            ...&#13;\n        }&#13;\n    }&#13;\n&#13;\nit does not work properly because java.lang.Integer is deserialized as primitive \"int\". The workaround that I used to make it working is the following:&#13;\n&#13;\n    public static class MyClassSerializer extends Serializer&lt;MyClass&gt; {&#13;\n        @Override&#13;\n        public void write(final Kryo kryo, final Output output, final MyClass object) {&#13;\n            ...&#13;\n            output.writeString(object.contentType.getName());&#13;\n            ...&#13;\n        }&#13;\n&#13;\n        @Override&#13;\n        public MyClass read(final Kryo kryo, final Input input, final Class&lt;MyClass&gt; type) {&#13;\n            ...&#13;\n            Class tmpContentType;&#13;\n            try {&#13;\n                tmpContentType = Class.forName(input.readString());&#13;\n            } catch (final ClassNotFoundException e) {&#13;\n                throw new RuntimeException(e);&#13;\n            }&#13;\n            ...&#13;\n        }&#13;\n    }&#13;\n&#13;\nIt works pretty well, although it is not so elegant. So I wrote a custom serializer for Class.class:&#13;\n&#13;\n    public final static Serializer&lt;Class&lt;?&gt;&gt; SIMPLE_CLASS_SERIALIZER = new Serializer&lt;Class&lt;?&gt;&gt;() {&#13;\n        @Override&#13;\n        public void write(final Kryo kryo, final Output output, final Class&lt;?&gt; object) {&#13;\n            output.writeString(output.toString());&#13;\n        }&#13;\n&#13;\n        @Override&#13;\n        public Class&lt;?&gt; read(final Kryo kryo, final Input input, final Class&lt;Class&lt;?&gt;&gt; type) {&#13;\n            try {&#13;\n                return Class.forName(input.readString());&#13;\n            } catch (final Exception e) {&#13;\n                throw new RuntimeException(e);&#13;\n            }&#13;\n        }&#13;\n    };&#13;\n&#13;\nbut the following code does not work as expected:&#13;\n&#13;\n    public static class MyClassSerializer extends Serializer&lt;MyClass&gt; {&#13;\n        @Override&#13;\n        public void write(final Kryo kryo, final Output output, final MyClass object) {&#13;\n            ...&#13;\n            kryo.writeObject(output, object.contentType, SIMPLE_CLASS_SERIALIZER);&#13;\n            ...&#13;\n        }&#13;\n&#13;\n        @Override&#13;\n        public MyClass read(final Kryo kryo, final Input input, final Class&lt;MyClass&gt; type) {&#13;\n            ...&#13;\n            kryo.readObject(input, Class.class, SIMPLE_CLASS_SERIALIZER);&#13;\n            ...&#13;\n        }&#13;\n    }&#13;\n&#13;\nIndeed I get the following exception:&#13;\n&#13;\n        java.lang.ClassNotFoundException: com.esotericsoftware.kryo.io.Output@5b10347e&#13;\n&#13;\nObviously I never put that class in my field \"contentType\", and notice that the previous workaround works well.&#13;\n&#13;\nWhat should I do?&#13;\n&#13;\nThanks&#13;\n&#13;\nAlessandro&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\n2.21&#13;\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=113_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/113", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:51:04", "closed": "2013-11-11 22:51:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "TreeMap deserialization error", "body": "_From [michael....@gmail.com](https://code.google.com/u/108097774180191871609/) on April 29, 2013 10:15:36_\n\n<b>What steps will reproduce the problem?</b>\ntest code:&#13;\nbean for serialization&#13;\npublic class TreeMapSerializerTestData implements Serializable {&#13;\n    private static final long serialVersionUID = 8449423540690186724L;&#13;\n&#13;\n    public String x1 = \"abc\";&#13;\n    private Map&lt;String, String&gt; treeMap;&#13;\n    public String x2 = \"abc\";&#13;\n    public String x3 = \"def\";&#13;\n&#13;\n    public TreeMapSerializerTestData() {&#13;\n        treeMap = new TreeMap&lt;String, String&gt;(new FakeComparator());&#13;\n    }&#13;\n&#13;\n    public TreeMapSerializerTestData(Map&lt;String, String&gt; init) {&#13;\n        treeMap = new TreeMap&lt;String, String&gt;(new FakeComparator());&#13;\n        treeMap.putAll(init);&#13;\n    }&#13;\n&#13;\n    public static class FakeComparator implements Comparator&lt;String&gt;, Serializable {&#13;\n        private static final long serialVersionUID = 3667761299603933963L;&#13;\n&#13;\n        @Override&#13;\n        public int compare(String o1, String o2) {&#13;\n            return o2.compareTo(o1);&#13;\n        }&#13;\n    }&#13;\n}&#13;\n&#13;\nclient code:&#13;\n    public void testTreeMap2() {&#13;\n        TreeMapSerializerTestData tm =&#13;\n                new TreeMapSerializerTestData(ImmutableMap.of(\"zxczxc\", \"qweasd\", \"fghfghd\", \"567652\", \"vbnvbn\", \"2013-04-29\"));&#13;\n&#13;\n        Kryo kryo = new Kryo();&#13;\n        Output output = new Output(16384, 1024*1024);&#13;\n        kryo.writeClassAndObject(output, tm);&#13;\n        output.close();&#13;\n&#13;\n        byte[] bytes = output.toBytes();&#13;\n        TreeMapSerializerTestData utm = (TreeMapSerializerTestData) kryo.readClassAndObject(new Input(bytes));&#13;\n&#13;\n        assertEquals(utm, tm);&#13;\n    }&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nI expect test passed, but get exception instead:&#13;\n&#13;\ncom.esotericsoftware.kryo.KryoException: java.lang.IndexOutOfBoundsException: Index: 120, Size: 2&#13;\nSerialization trace:&#13;\ntreeMap (com.zina.serializer.beans.test.TreeMapSerializerTestData)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.read(FieldSerializer.java:626)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:221)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:729)&#13;\n...&#13;\nCaused by: java.lang.IndexOutOfBoundsException: Index: 120, Size: 2&#13;\n    at java.util.ArrayList.RangeCheck(ArrayList.java:547)&#13;\n    at java.util.ArrayList.get(ArrayList.java:322)&#13;\n    at com.esotericsoftware.kryo.util.MapReferenceResolver.getReadObject(MapReferenceResolver.java:42)&#13;\n    at com.esotericsoftware.kryo.Kryo.readReferenceOrNull(Kryo.java:773)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObjectOrNull(Kryo.java:697)&#13;\n    at com.esotericsoftware.kryo.serializers.MapSerializer.read(MapSerializer.java:122)&#13;\n    at com.esotericsoftware.kryo.serializers.MapSerializer.read(MapSerializer.java:17)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:648)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.read(FieldSerializer.java:605)&#13;\n    ... 26 more&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.21 has this issue, 2.20 - no&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nAny class that contains TreeMap fails to deserialize - sometimes get java.lang.IndexOutOfBoundsException, sometimes class cast exception\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=112_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/112", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:50:56", "closed": "2013-11-11 22:51:01", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Output.setOutputStream() doesn't set the buffer size", "body": "_From [Pitxy...@gmail.com](https://code.google.com/u/104407607739500827604/) on April 28, 2013 10:40:49_\n\n<b>What steps will reproduce the problem?</b>\n&#13;\nThis is a minimal snippet of something where it made sense to use the same Output and to set the OutputStream later.&#13;\n&#13;\npublic class SerTest {&#13;\n  public static void main(String[] args) {&#13;\n      Kryo kryo = new Kryo();&#13;\n      Output out = new Output();&#13;\n      out.setOutputStream(new ByteArrayOutputStream());&#13;\n      &#13;\n      kryo.writeClassAndObject(out, new String(\"Somestuff\"));&#13;\n  }&#13;\n}&#13;\n&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nI was expecting this code to work. :-)&#13;\n&#13;\nApparently, the Output doesn't set the buffer size when you create it with the default constructor. The buffer size isn't set if you use setOutputStream(OutputStream) and don't use the Output(int bufferSize) constructor.&#13;\n&#13;\nThis is what I get with the given example:&#13;\nException in thread \"main\" com.esotericsoftware.kryo.KryoException: Buffer overflow. Max capacity: 0, required: 1&#13;\n    at com.esotericsoftware.kryo.io.Output.require(Output.java:134)&#13;\n    at com.esotericsoftware.kryo.io.Output.writeInt(Output.java:242)&#13;\n    at com.esotericsoftware.kryo.util.DefaultClassResolver.writeClass(DefaultClassResolver.java:84)&#13;\n    at com.esotericsoftware.kryo.Kryo.writeClass(Kryo.java:472)&#13;\n    at com.esotericsoftware.kryo.Kryo.writeClassAndObject(Kryo.java:565)&#13;\n    at SerTest.main(SerTest.java:16)&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.21&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nSome possible fixes:&#13;\n- Set a sensible default buffer size on the default constructor (such as 4096, like what is used when you use Output(Outputstream str));&#13;\n- Add to the Javadoc of Output's setOutputStream something like:&#13;\n  public void setOutputStream(java.io.OutputStream outputStream)&#13;\n  Sets a new OutputStream. The position and total are reset, discarding any buffered bytes. The Output's internal buffer size isn't set. _Please use the Output(int bufferSize) constructor._&#13;\n- Set the internal buffer size to some sensible value if it is set to 0 when using setOutputStream().&#13;\n  &#13;\n  &#13;\n  Also, the same problem occurs for Input, for which I propose the same possible solutions:&#13;\n  Input input = new Input();&#13;\n  byte[] data = getMyData();&#13;\n  input.setInputStream(new ByteArrayInputStream(data));&#13;\n  kryo.readClassAndObject(input);&#13;\n  &#13;\n  Exception in thread \"main\" com.esotericsoftware.kryo.KryoException: Buffer too small: capacity: 0, required: 1&#13;\n  at com.esotericsoftware.kryo.io.Input.require(Input.java:152)&#13;\n  at com.esotericsoftware.kryo.io.Input.readInt(Input.java:337)&#13;\n  at com.esotericsoftware.kryo.util.DefaultClassResolver.readClass(DefaultClassResolver.java:109)&#13;\n  at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:610)&#13;\n  at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:721)&#13;\n  at SerTest.coise(SerTest.java:39)&#13;\n  at SerTest.main(SerTest.java:18)&#13;\n  &#13;\n  Thanks and best regards,&#13;\n  Pitxyoki\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=111_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/111", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:50:49", "closed": "2013-11-11 22:50:55", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "CompatibleFieldSerializer fails on a single field delete", "body": "_From [karthik....@gmail.com](https://code.google.com/u/106667846881506203190/) on April 20, 2013 23:14:30_\n\n<b>What steps will reproduce the problem?</b>\n1. Copy the kryo.bin file to a particular location. Edit test.java reference to kryo.bin to point to that location.&#13;\n2. Run test.java&#13;\n3. Program fails to deserialize class.&#13;\n&#13;\nTo run the full test:&#13;\n1. Edit MeasureSettings and CategorySettings to uncomment the string field and associated getter/setter methods.&#13;\n2. Uncomment the setting of the corresponding setter methods in Test.java&#13;\n3. In Test.java's main() method, uncomment method kryoWrite().&#13;\n4. Run the program. You will note that the write and subsequent read succeed.&#13;\n5. Now comment out the write. Comment the staticDisplayname field of MeasureSettings and CategorySettings (and setter call in Test).&#13;\n6. Run the Test program and you get a complete failure.&#13;\n&#13;\nNote: MeasureSettings, CategorySettings and SortSettings objects have their hashCode and equals implementations overridden.&#13;\n&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.21-shaded&#13;\n&#13;\n&#13;\n\n**Attachment:** [kryotest.zip kryo.bin](http://code.google.com/p/kryo/issues/detail?id=110)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=110_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/110", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:50:45", "closed": "2014-05-26 15:51:16", "commits": {}, "ttf": 195.00027777777777, "commitsDetails": []}, {"title": "MapSerialisation failing", "body": "_From [schelfho...@gmail.com](https://code.google.com/u/116280045535399140350/) on April 12, 2013 17:18:07_\n\nHI, I tried using the Map serialisation for which I find very little actual examples. I want to serialise a hashMap<String, Object> and deserialize it\n\nMy code below\nHashMap<String, Object> hm = new HashMap<String, Object> ();\nhm.put(\"a\", \"woozle\");\nhm.put(\"b\", 5);\nKryo kryo = new Kryo();\nByteBuffer buffer = ByteBuffer.allocate(1024);\nMapSerializer serializer = new MapSerializer(kryo);\n        kryo.register(HashMap.class, serializer, true);\n        kryo.register(Object.class, serializer, true);\n\n```\n    serializer.setKeyClass(String.class);\n    serializer.setKeysCanBeNull(false);\n    serializer.setValuesCanBeNull(true);        \n    serializer.writeObjectData(buffer, hm);\n```\n\nbuffer.flip();\n\nMapSerializer serializer = new MapSerializer(kryo);\n        kryo.register(HashMap.class, serializer, true);\n        kryo.register(Object.class, serializer, true);\n\n```\n    HashMap<String, Object> hm2 = serializer.readObjectData(buffer, HashMap.class); \n```\n\nSystem.err.println(hm2.toString());\n\n<b>What is the expected output? What do you see instead?</b>\nI expect to see the following HashMap to come out&#13;\n{b=5, a=woozle}&#13;\ninstead I see {false=woozle}&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nI am using version 2.14&#13;\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=109_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/109", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:50:40", "closed": "2013-11-11 22:50:44", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Memory leak when serializing collections", "body": "_From [rok.lena...@gmail.com](https://code.google.com/u/115962338486557045709/) on April 10, 2013 15:48:34_\n\nWhen trying to serialize a list with 1900 elements (simple beans which have some string, int and date props) - total size of 1.5 MB, memory consumption will exceed 2 GB and java OOM error will occur. Serializing same object with just 340 elements works normally.\n\nDisabling references will cause a stack overflow.\n\nReproducing: \n\nI'm trying to serialize an Object[2] array with first element being instance of DocumentList, with list member being an ArrayList with 1900 instances of Document class (no large data in there, all 1900 elements occupy a bit under 2 MB in database). See attachment for DocumentList and Document classes. Second element of object[] is null. \n\nException created : java.lang.OutOfMemoryError: Java heap space\n    at com.esotericsoftware.kryo.util.IdentityObjectIntMap.resize(IdentityObjectIntMap.java:410)\n    at com.esotericsoftware.kryo.util.IdentityObjectIntMap.putStash(IdentityObjectIntMap.java:227)\n    at com.esotericsoftware.kryo.util.IdentityObjectIntMap.push(IdentityObjectIntMap.java:221)\n    at com.esotericsoftware.kryo.util.IdentityObjectIntMap.put(IdentityObjectIntMap.java:117)\n    at com.esotericsoftware.kryo.util.IdentityObjectIntMap.putStash(IdentityObjectIntMap.java:228)\n    at com.esotericsoftware.kryo.util.IdentityObjectIntMap.push(IdentityObjectIntMap.java:221)\n    at com.esotericsoftware.kryo.util.IdentityObjectIntMap.put(IdentityObjectIntMap.java:117)\n    at com.esotericsoftware.kryo.util.MapReferenceResolver.addWrittenObject(MapReferenceResolver.java:23)\n    at com.esotericsoftware.kryo.Kryo.writeReferenceOrNull(Kryo.java:598)\n    at com.esotericsoftware.kryo.Kryo.writeObjectOrNull(Kryo.java:539)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.write(FieldSerializer.java:570)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:213)\n    at com.esotericsoftware.kryo.Kryo.writeClassAndObject(Kryo.java:568)\n    at com.esotericsoftware.kryo.serializers.CollectionSerializer.write(CollectionSerializer.java:75)\n    at com.esotericsoftware.kryo.serializers.CollectionSerializer.write(CollectionSerializer.java:18)\n    at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:501)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.write(FieldSerializer.java:564)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:213)\n    at com.esotericsoftware.kryo.Kryo.writeClassAndObject(Kryo.java:568)\n    at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.write(DefaultArraySerializers.java:318)\n    at com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer.write(DefaultArraySerializers.java:293)\n    at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:486)\n\n**Attachment:** [classes.txt](http://code.google.com/p/kryo/issues/detail?id=108)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=108_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/108", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:50:28", "closed": "2016-02-20 01:20:04", "commits": {}, "ttf": 830.0002777777778, "commitsDetails": []}, {"title": "Does not handle MethodHandle", "body": "_From [jakobsem...@gmail.com](https://code.google.com/u/100015263516152942046/) on April 09, 2013 16:55:18_\n\nHi,\n\ncan Kryo handle MethodHandle objects? Or how could I get that to work - I can't write my own serializer since I don't know the internals of MethodHandle, or?\n\nThe following program gives the error message below:\n\nimport java.io.FileOutputStream;\nimport java.lang.invoke.MethodHandle;\nimport java.lang.invoke.MethodHandles;\nimport org.objenesis.strategy.StdInstantiatorStrategy;\nimport com.esotericsoftware.kryo.Kryo;\nimport com.esotericsoftware.kryo.io.Output;\n\npublic class Main {\n\n```\npublic static void main(String[] args) throws Exception {\n    Kryo kryo = new Kryo();\n    kryo.setInstantiatorStrategy(new StdInstantiatorStrategy());\n    kryo.register(MethodHandle.class);\n\n    Output out = new Output(new FileOutputStream(\"d.dat\"));\n    kryo.writeObject(out,  new T1());\n    out.close();            \n}\n\n\npublic static class T1 {\n    MethodHandle a;\n    int b = 4;\n\n    public T1() {\n        try {\n            a = MethodHandles.lookup().unreflectGetter(getClass().getDeclaredField(\"b\")).bindTo(this);\n        } catch (Throwable ex) {\n            ex.printStackTrace();\n        }\n    }\n}\n```\n\n}\n\nException in thread \"main\" com.esotericsoftware.kryo.KryoException: java.lang.NullPointerException\nSerialization trace:\nvmtarget (java.lang.invoke.DirectMethodHandle)\nvmtarget (java.lang.invoke.AdapterMethodHandle)\nvmtarget (java.lang.invoke.MethodHandleImpl$FieldAccessor)\nvmtarget (java.lang.invoke.BoundMethodHandle)\na (Main$T1)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.write(FieldSerializer.java:585)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:213)\n    at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:501)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.write(FieldSerializer.java:564)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:213)\n    at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:501)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.write(FieldSerializer.java:564)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:213)\n    at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:501)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.write(FieldSerializer.java:564)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:213)\n    at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:501)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.write(FieldSerializer.java:564)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:213)\n    at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:486)\n    at Main.main(Main.java:18)\nCaused by: java.lang.NullPointerException\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.write(FieldSerializer.java:562)\n    ... 15 more\n\nThanks,\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=107_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/107", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:50:23", "closed": "2013-11-11 22:50:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Kryo deserialization fails with large data", "body": "_From [Da...@path.com](https://code.google.com/u/101582762407885666439/) on April 06, 2013 00:45:18_\n\n<b>What steps will reproduce the problem?</b>\n1. Serialize an object with a big list (more then 1000 elements)&#13;\n2. Try to deserialize it, you get an exception&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nDeserialization fails with KryoException: Encountered unregistered class ID: -668407074&#13;\n(exception change based on number of elements, I've got also ClassCastException)&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.21&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nAttached you will find a sample java code that reproduce the issue\n\n**Attachment:** [kryotest.java](http://code.google.com/p/kryo/issues/detail?id=106)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=106_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/106", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:50:20", "closed": "2013-11-11 22:50:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Equals objects produce different byte sequences.", "body": "_From [a.solov...@tinkoffdigital.ru](https://code.google.com/u/113816139368312594170/) on March 22, 2013 10:16:01_\n\n<b>What steps will reproduce the problem?</b>\n&#13;\n1. Create a composite Object (object0) . Serialize the object0 to a   file0 with default settings.&#13;\n2. Save the object0, for example, to a database.&#13;\n3. Restore the object (object1) from the database.&#13;\n4. Be sure that the object1 equals object0;&#13;\n5. Serialize object1 to a file1.&#13;\n6. Compare file0 and file1. They are different.&#13;\n   &#13;\n   <b>What is the expected output? What do you see instead?</b>\n   &#13;\n   Equals objects produce equals byte sequence; &#13;\n   &#13;\n   &#13;\n   <b>What version of the Kryo are you using?</b>\n   2.20&#13;\n   &#13;\n   <b>Please provide any additional information below.</b>\n   There is a workaround - kryo.setReferences(false);&#13;\n\n**Attachment:** [objectStructure.7z](http://code.google.com/p/kryo/issues/detail?id=105)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=105_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/105", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:50:17", "closed": "2016-02-20 01:17:23", "commits": {}, "ttf": 830.0002777777778, "commitsDetails": []}, {"title": "Registered Class IDs failing", "body": "_From [GM3...@gmail.com](https://code.google.com/u/110162525530359085221/) on March 11, 2013 12:18:24_\n\n<b>What steps will reproduce the problem?</b>\n1. Android App saves out an object using registered classes.&#13;\n(On a side note when trying to register as class's 1,2,3 this failed because the IDs seemed to already be in use so moved the range).&#13;\nm_kryo =  new Kryo();&#13;\nm_kryo.register(someclassA.class, 10);&#13;\nm_kryo.register(someclassB.class, 12);&#13;\nm_kryo.register(someclassC.class, 14);&#13;\n&#13;\n2. On windows I have an app that will read in the files, written in Java.&#13;\nm_kryo =  new Kryo();&#13;\nm_kryo.register(someclassA.class, 10);&#13;\nm_kryo.register(someclassB.class, 12);&#13;\nm_kryo.register(someclassC.class, 14);&#13;\n&#13;\nAgain I have the same setup for Kryo making sure the ID's are the same&#13;\n&#13;\nWhat is the expected output? &#13;\nI expect to open the object in the windows app&#13;\n&#13;\nWhat do you see instead?&#13;\nI get an exception :-&#13;\ncom.esotericsoftware.kryo.KryoException: Encountered unregistered class ID: 121&#13;\nSerialization trace:&#13;\nvalues (someclassB)&#13;\nfields (someclassA)&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.21&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nAs you can see its talking about an unregistered class, 121. Also this file is opened and closed many times in the Android app, during app usage then again after a device reboot and seems to work fine.&#13;\nI'm sure sure why its looking for class ID 121 when clearly i'm registering it as 12.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=104_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/104", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:50:06", "closed": "2014-05-26 15:44:46", "commits": {}, "ttf": 195.00027777777777, "commitsDetails": []}, {"title": "Kryo Output/Input  String  deserialization failed in heavy load  application after 3 hours running", "body": "_From [zh...@navcanada.ca](https://code.google.com/u/102569919510176293227/) on January 25, 2013 17:53:01_\n\n<b>What steps will reproduce the problem?</b>\n1. Write a class Message with two sting type variables: field1 &amp; field2;  and let it implements KryoSerializable (use writeString and readString);&#13;\n1. Create a sever/client application: the server accepts client connections, keep creating Message objects and send to clients; the clients print out the received objects;&#13;\n3.Start 1 server instance and 10 client instances;&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nThe server/client instances should work well without exceptions.  At the beginning, the system works fine util 3 hours later, the clients got underflow exception.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.18/2.20&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nWhen exception happened, the client print field1 value, which actually is the concatenation of the field1 and field2 values. It seems that the readString method got the wrong length of its first string. &#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=102_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/102", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:49:54", "closed": "2014-05-26 15:42:22", "commits": {}, "ttf": 195.00027777777777, "commitsDetails": []}, {"title": "How to do ArrayList with custom object serialization", "body": "_From [sant...@braindigit.com](https://code.google.com/u/114482208769868831317/) on December 22, 2012 07:43:15_\n\nI have a class name News\n\npublic class News{\n public String title =\"\",description =\"\",link=\"\";\n}\n\nAnd I need to save and retrieve ArrayList<News> from and to a file\nI have done the following as shown in your example\n    ArrayList<News> newsList;\n    Kryo kryo = new Kryo();\n    CollectionSerializer listSerializer = new CollectionSerializer();                               listSerializer.setElementClass(News.class,new Serializer<News>() {\n    @Override\n    public News read(Kryo kryo, Input input,              Class<News> someClass) {\n    News news = new News();\n    news.title = input.readString();\n    news.link =input.readString();\n    news.category =input.readString();\n    return news;\n     }\n\n```\n @Override\n public void write(Kryo kryo, Output output, News news) {                                                        \n output.writeString(news.title);                              \n output.writeString(news.link);                         \n output.writeString(news.category);                         \n}\n });\nlistSerializer.setElementsCanBeNull(false);\n    kryo.register(ArrayList.class, listSerializer);                   \n\nOutput output =new Output(new FileOutputStream(\"hello.txt\"));\nkryo.writeObject(output, newsList);\noutput.close();\n```\n\nBut I couldn't get the required output when I look upon the file hello.txt and further I don't know how to read the objects from same file hello.txt\n\nThanks\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=101_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/101", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:49:48", "closed": "2013-11-11 22:49:53", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "serialization for java.util.Locale under java 1.7 is broke", "body": "_From [boris.pa...@gmail.com](https://code.google.com/u/115837452394399243722/) on December 12, 2012 19:36:49_\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\n<b>2.</b>\n<b>3.</b>\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=100_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/100", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:49:38", "closed": "2014-01-25 21:39:19", "commits": {}, "ttf": 74.00027777777778, "commitsDetails": []}, {"title": "Exception when serializing void.class", "body": "_From [someguy...@gmail.com](https://code.google.com/u/112866518838131755981/) on December 07, 2012 13:29:46_\n\n<b>What steps will reproduce the problem?</b>\nKryo k = new Kryo();&#13;\nOutput out = new Output(4096, Integer.MAX_VALUE);&#13;\nk.writeClassAndObject(out, void.class);&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nreadClassAndObject should return void.class&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.20, with Sun's Java 7 VM&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nIt seems void's class is not a class, at least on sun's vm. The following throws an exception:&#13;\n&#13;\nif(!Class.class.isAssignableFrom(void.class))&#13;\n     throw new RuntimeException(\"void's class is not a class\");\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=99_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/99", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:49:35", "closed": "2013-11-11 22:49:37", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Review documentation (was: Wiki should document references)", "body": "_From [nathan.s...@gmail.com](https://code.google.com/u/111140558169510542790/) on November 30, 2012 06:44:13_\n\nThe wiki doesn't mention calling reference(). It is completely out of date as it mentions Serializer having a create method!\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=98_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/98", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:49:18", "closed": "2018-06-08 23:45:24", "commits": {}, "ttf": 1670.0002777777777, "commitsDetails": []}, {"title": "com.esotericsoftware.kryo.KryoException: Unable to find class: sun.reflect.GeneratedMethodAccessor", "body": "_From [ficksong](https://code.google.com/u/ficksong/) on November 29, 2012 08:51:38_\n\n<b>What steps will reproduce the problem?</b>\n1.I serialize my Object(MyComplexObject) for 25 times into 25 files(the same object) in a for statement,1 second sleep per circle;&#13;\n2.When I deserialize the Object from the 25 files,the problem occured; &#13;\n3.No problem before first 11,problem begine from the 12th and after 12;&#13;\n4.Something difference between the first 11 files and the 12th file;&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.20&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n*******_deserialize**_********&#13;\ncom.esotericsoftware.kryo.KryoException: Unable to find class: sun.reflect.GeneratedMethodAccessor5&#13;\nSerialization trace:&#13;\ndelegate (sun.reflect.DelegatingMethodAccessorImpl)&#13;\nmethodAccessor (java.lang.reflect.Method)&#13;\nmethod (com.espertech.esper.event.bean.ReflectionPropMethodGetter)&#13;\npropertyGetterCache (com.espertech.esper.event.bean.BeanEventType)&#13;\neventType (com.espertech.esper.event.bean.BeanEventBean)&#13;\nsecond (com.espertech.esper.collection.Pair)&#13;\n    at com.esotericsoftware.kryo.util.DefaultClassResolver.readName(DefaultClassResolver.java:132)&#13;\n    at com.esotericsoftware.kryo.util.DefaultClassResolver.readClass(DefaultClassResolver.java:109)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:613)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.read(FieldSerializer.java:599)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:221)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:651)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.read(FieldSerializer.java:605)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:221)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObjectOrNull(Kryo.java:702)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.read(FieldSerializer.java:611)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:221)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:732)&#13;\n    at com.esotericsoftware.kryo.serializers.MapSerializer.read(MapSerializer.java:134)&#13;\n    at com.esotericsoftware.kryo.serializers.MapSerializer.read(MapSerializer.java:17)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:651)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.read(FieldSerializer.java:605)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:221)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:651)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.read(FieldSerializer.java:605)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:221)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:651)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer$ObjectField.read(FieldSerializer.java:605)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:221)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:732)&#13;\n    at com.espertech.esper.util.SerializerUtil.deserialize(SerializerUtil.java:124)&#13;\n    at com.espertech.esper.util.SerializerUtil.doserialize(SerializerUtil.java:162)&#13;\n    at com.espertech.esper.collection.TimeWindow.add(TimeWindow.java:199)&#13;\n    at com.espertech.esper.view.window.TimeWindowView.update(TimeWindowView.java:136)&#13;\n    at com.espertech.esper.view.ZeroDepthStream.insert(ZeroDepthStream.java:58)&#13;\n    at com.espertech.esper.view.stream.StreamFactorySvcImpl$2.matchFound(StreamFactorySvcImpl.java:181)&#13;\n    at com.espertech.esper.core.service.EPRuntimeImpl.processStatementFilterSingle(EPRuntimeImpl.java:1258)&#13;\n    at com.espertech.esper.core.service.EPRuntimeImpl.processMatches(EPRuntimeImpl.java:1019)&#13;\n    at com.espertech.esper.core.service.EPRuntimeImpl.processWrappedEvent(EPRuntimeImpl.java:505)&#13;\n    at com.espertech.esper.core.service.EPRuntimeImpl.processEvent(EPRuntimeImpl.java:481)&#13;\n    at com.espertech.esper.core.service.EPRuntimeImpl.sendEvent(EPRuntimeImpl.java:240)&#13;\n    at com.espertech.esper.example.terminal.jse.simulate.TerminalEventProcessingAgent.sendEvent(TerminalEventProcessingAgent.java:165)&#13;\n    at com.espertech.esper.example.terminal.jse.simulate.TerminalEventSimulator.sendEvents(TerminalEventSimulator.java:49)&#13;\n    at com.espertech.esper.example.terminal.jse.simulate.TerminalEventSimulator.main(TerminalEventSimulator.java:64)&#13;\nCaused by: java.lang.ClassNotFoundException: sun.reflect.GeneratedMethodAccessor5&#13;\n    at java.net.URLClassLoader$1.run(Unknown Source)&#13;\n    at java.security.AccessController.doPrivileged(Native Method)&#13;\n    at java.net.URLClassLoader.findClass(Unknown Source)&#13;\n    at java.lang.ClassLoader.loadClass(Unknown Source)&#13;\n    at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)&#13;\n    at java.lang.ClassLoader.loadClass(Unknown Source)&#13;\n    at java.lang.Class.forName0(Native Method)&#13;\n    at java.lang.Class.forName(Unknown Source)&#13;\n    at com.esotericsoftware.kryo.util.DefaultClassResolver.readName(DefaultClassResolver.java:130)&#13;\n    ... 37 more&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=97_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/97", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:49:08", "closed": "2013-11-11 22:49:16", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Ability to indicate the type of Kryo encoding in the serialized message", "body": "_From [romixlev](https://code.google.com/u/romixlev/) on October 22, 2012 14:54:38_\n\nImagine that we have a use-case where serializer and deserializer are configured and operated by two (or more) network nodes, controlled by different parties. In such a situation it is important that Kryo's are configured in a 100&#37; compatible way, otherwise the deserializtion process will fail. But what happens if one of the sides changes something in the configuration, e.g. enables compression or drops using varint encoding for speed, etc? \n\nIt could be interesting if it would be possible to indicate in the message (at the beginning?) what are the major parameters and their values used for serialization. E.g. compression - on/off, varInt - on/off, references - on/off and so on. Then the receiving side can analyze this information and dynamically configure its Kryo instance to be compatible with the encoding/mode used by the Kryo instance used in serializer.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=95_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/95", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:48:58", "closed": "2018-06-08 23:44:38", "commits": {}, "ttf": 1670.0002777777777, "commitsDetails": []}, {"title": "InstantiatorStrategy won't work in DalvikVM (Android)", "body": "_From [sofiasno...@gmail.com](https://code.google.com/u/100372971459544143426/) on October 18, 2012 18:09:24_\n\n<b>What steps will reproduce the problem?</b>\n1. Deserialize a third-party class without a no-arg constructor. I.e. android.content.Intent&#13;\n2. Call kryo.setInstantiatorStrategy(new StdInstantiatorStrategy()) so it can create the object regardless&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nExpected a working object, an exception is thrown instead: java.lang.NoClassDefFoundError: sun.reflect.ReflectionFactory, the LogCat shows \"Could not find method sun.reflect.ReflectionFactory.getReflectionFactory, referenced from method org.objenesis.instantiator.sun.SunReflectionFactoryInstantiator.&lt;init&gt;\"&#13;\n&#13;\nAn approach to achieve this on Dalvik is shown here, would it work for Kryo?&#13;\n<a href=\"http://stackoverflow.com/questions/3121515/is-it-possible-to-bypass-constructors-when-instantiating-objects-in-android\" rel=\"nofollow\">http://stackoverflow.com/questions/3121515/is-it-possible-to-bypass-constructors-when-instantiating-objects-in-android</a>&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.20&#13;\n&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nThanks for the awesome library!&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=94_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/94", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:48:53", "closed": "2013-11-11 22:48:56", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": " Could the latest Kryo keep compatible with asm3.3.1", "body": "_From [jerrysco...@gmail.com](https://code.google.com/u/100626134528516598363/) on October 08, 2012 09:12:22_\n\n<b>What steps will reproduce the problem?</b>\nAs asm3.3.1 is widely used, I think latest kryo should keep compatiblity with it.&#13;\n&#13;\nfor once upated to asm4 many compatible problems forthcoming.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nasm3.3.1 not support the latest kryo, maybe kryo could publish some compatible jars&#13;\nwith it with the latest kryo.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nkryo-2.20(but only 2.02 support asm3.3.1)&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=93_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/93", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:48:50", "closed": "2013-11-11 22:48:52", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Serializing fails, when a Generic is set", "body": "_From [mgledi@gmail.com](https://code.google.com/u/mgledi@gmail.com/) on October 04, 2012 14:13:15_\n\nWith gson 2.2.2 google introduced a StringMap<V> which extends AbstractMap<String, V>. Kryo seems to assume the wrong number of generics for this class. \n\nThe error occured with serializing a JsonObject of JsonObjects.\n\nHave a look at the discussion here: <a href=\"https://groups.google.com/forum/?fromgroups=#!topic/kryo-users/GJWr6DB2cco\" rel=\"nofollow\">https://groups.google.com/forum/?fromgroups=#!topic/kryo-users/GJWr6DB2cco</a>&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=92_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/92", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:48:46", "closed": "2014-05-26 15:43:50", "commits": {}, "ttf": 195.00027777777777, "commitsDetails": []}, {"title": "Make Input.optional() accessible, or provide an eof() method", "body": "_From [shevek.h...@googlemail.com](https://code.google.com/u/109466405678862022285/) on September 11, 2012 04:23:07_\n\nWhen writing a reader over a Kryo Input, it's nice to know when one has reached end of stream at a \"normal\" point.\n\nThe way to do this is to call optional(1) before trying to read. However, optional() isn't public.\n\nPlease make optional() public, or create a public boolean eof() { return optional(1) > 0; }\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=90_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/90", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:48:38", "closed": "2013-11-11 22:48:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Make input.java not compact if no stream is available (with patch)", "body": "_From [shevek.h...@googlemail.com](https://code.google.com/u/109466405678862022285/) on September 10, 2012 18:17:28_\n\n<b>What steps will reproduce the problem?</b>\n1. Create an Input over a fixed array.&#13;\n2. Read from it until it's exhausted.&#13;\n3. Recreate the input over the same array and read again.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nI expect to be able to read it again.&#13;\n&#13;\nWhat happens is that the optional() or require() calls as the buffer becomes exhausted, so the last byte(s) of the buffer are copied to the start. However, there's no point compacting if there's no stream, as there will never be any more data.&#13;\n&#13;\nThe only workaround is to memdup the array before handing it to kryo, but this can cost an extra 20Mb for really no reason.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\nsvn rev 341&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n--- src/com/esotericsoftware/kryo/io/Input.java (<a href=\"/p/kryo/source/detail?r=341\">revision 341</a>)&#13;\n+++ src/com/esotericsoftware/kryo/io/Input.java (working copy)&#13;\n@@ -149,7 +149,7 @@&#13;\n                int remaining = limit - position;&#13;\n                if (remaining &gt;= required) return remaining;&#13;\n                if (required &gt; capacity) throw new KryoException(\"Buffer too small: capacity: \" + capacity + \", required: \" + required);&#13;\n-&#13;\n-               if (inputStream == null) throw new KryoException(\"Buffer underflow, with no InputStream\");&#13;\n              // Compact.&#13;\n              System.arraycopy(buffer, position, buffer, 0, remaining);&#13;\n              total += position;&#13;\n  @@ -174,6 +174,7 @@&#13;\n              int remaining = limit - position;&#13;\n              if (remaining &gt;= optional) return optional;&#13;\n              optional = Math.min(optional, capacity);&#13;\n-               if (inputStream != null) {&#13;\n  &#13;\n                // Compact.&#13;\n                System.arraycopy(buffer, position, buffer, 0, remaining);&#13;\n  @@ -187,6 +188,7 @@&#13;\n                      if (remaining &gt;= optional) break; // Enough has been read.&#13;\n              }&#13;\n              limit = remaining;&#13;\n-               }&#13;\n              return remaining == 0 ? -1 : Math.min(remaining, optional);&#13;\n      }&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=89_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/89", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:48:35", "closed": "2013-11-11 22:48:37", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Serialization of java.sql.Timestamp", "body": "_From [selene.f...@artemicode.de](https://code.google.com/u/105161582870518633492/) on September 06, 2012 21:04:36_\n\n<b>What steps will reproduce the problem?</b>\n1. Create an object / class with a reference field to java.sql.Timestamp&#13;\n2. Serialize it with Kryo&#13;\n3. Deserialize it with Kryo&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nThe object should be deserialized correctly. The deserialization process crashes while setting the Timestamp field.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\n2.20&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nWhile serializing, the Date default serializer is used because the Timestamp class inherits from Date. The deserializer tries to put the Date class in the Timestamp field which leads to an IllegalArgumentException in the Field.set method.&#13;\n&#13;\nA possible fix would be adding a default serializer for Timestamp or only applying the serializers when the class matches exactly\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=88_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/88", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:48:31", "closed": "2014-01-25 21:41:26", "commits": {}, "ttf": 74.00027777777778, "commitsDetails": []}, {"title": "Serialization problems with >= 128 classes", "body": "_From [selene.f...@artemicode.de](https://code.google.com/u/105161582870518633492/) on September 06, 2012 20:50:16_\n\n<b>What steps will reproduce the problem?</b>\n&#13;\n1. Serialize an object graph with many different classes (&gt;=128)&#13;\n2. Deserialize the object graph&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nThe object graph should be deserialized correctly. But in the serialization code, the class id is written out as a byte, while the deserialization code expects an optimized integer value. For values &gt;= 128 this leads to incorrect class id value and desynchronization of the object stream.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\n2.20&#13;\n&#13;\n&#13;\n&#13;\nSee my proposed patch&#13;\n\n**Attachment:** [Kryo128Classes.patch](http://code.google.com/p/kryo/issues/detail?id=87)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=87_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/87", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:48:27", "closed": "2013-11-11 22:48:29", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Kryo customization is good only for final classes", "body": "_From [valtih1...@gmail.com](https://code.google.com/u/112948542041976580204/) on September 05, 2012 15:42:11_\n\nKryo seems ignoring that some objects have writeObject(ObjectStream) method that is invoked by standard java serialization. In order to handle this case, I intercept the default serializer and call on the object beforeSerialized() before serialization.\n\nSerializer deflt = kryo.getDefaultSerializer(MyItem.class)\nkryo.addDefaultSerializer(MyItem.class, new Serializer() {\n    public void write(Kryo kryo, Output output, Object object) {\n        ((MyItem)object).beforeSerialized();\n        deflt.write(kryo, output, object);\n\nThe problem is that default serializer, when overriden, serializes only MyItem fields but not the fields of object.getClass(), which extends MyItem. So, I get abridged objects when customize the serialization. Can you please fix this and show how no-arg constructors can be instantiated?\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=86_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/86", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:48:15", "closed": "2013-11-11 22:48:25", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Add [Output.writeUnicode(String value)]", "body": "_From [denysenk...@gmail.com](https://code.google.com/u/108266652927631474440/) on August 23, 2012 19:55:45_\n\n[Output.writeUnicode] must be exposed the same way you exposed [Output.writeAscii]\n\nVery often user knows that it's using Unicode chars in strings.\nso the following code in [Ouput.writeString] is small but overkill:\n\n// Detect ASCII.\nboolean ascii = false;\nif (charCount > 1 && charCount < 64) {\n    ascii = true;\n    for (int i = 0; i < charCount; i++) {\n        int c = value.charAt(i);\n        if (c > 127) {\n            ascii = false;\n            break;\n        }\n    }\n}\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=85_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/85", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:48:13", "closed": "2016-02-20 01:12:25", "commits": {}, "ttf": 830.0002777777778, "commitsDetails": []}, {"title": "Add a possibility to skip objects", "body": "_From [romixlev](https://code.google.com/u/romixlev/) on August 21, 2012 14:16:39_\n\nAdd skip() method to all serializers and Kryo.\nThis way, one can skip objects in the input stream without first deserializing them into newly created objects.\n\nThe implementation should be straight forward. The skip() method method should do the same as the read method, but avoid storing read values anywhere.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=84_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/84", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:48:07", "closed": "2016-02-20 01:11:26", "commits": {}, "ttf": 830.0002777777778, "commitsDetails": []}, {"title": "Copy should not ignore transient fields", "body": "_From [nathan.s...@gmail.com](https://code.google.com/u/111140558169510542790/) on August 20, 2012 20:34:42_\n\nCopy should not ignore transient fields.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=83_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/83", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:48:03", "closed": "2013-11-14 08:13:27", "commits": {"cd79d9142e46b7f498c1c46615d1a83348be2db0": {"commitGHEventType": "referenced", "commitUser": "romix"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "cd79d9142e46b7f498c1c46615d1a83348be2db0", "commitGHEventType": "referenced", "commitUser": "romix", "commitParents": ["0a8d593937a282c584156bb67f88c6658852d444"], "nameRev": "cd79d9142e46b7f498c1c46615d1a83348be2db0 tags/kryo-2.23.0~23^2~4", "commitMessage": "Fix issues #148 and #83. Now you can control copying of transient fields by means of FieldSerializer.setCopyTransient. The default is set to copy transient field.\n", "commitDateTime": "2013-11-14 09:12:11", "authoredDateTime": "2013-11-14 09:12:11", "commitGitStats": [{"filePath": "src/com/esotericsoftware/kryo/serializers/FieldSerializer.java", "insertions": 9, "deletions": 6, "lines": 15}, {"filePath": "test/com/esotericsoftware/kryo/FieldSerializerTest.java", "insertions": 54, "deletions": 1, "lines": 55}], "commitSpoonAstDiffStats": [{"spoonFilePath": "FieldSerializer.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.serializers.FieldSerializer", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "com.esotericsoftware.kryo.serializers.FieldSerializer.setCopyTransient(boolean)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.serializers.FieldSerializer.getCopyTransient()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "FieldSerializerTest.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.FieldSerializerTest.testTransients()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.FieldSerializerTest.HasTransients", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "GenericType not reset when collection size 0", "body": "_From [dtabu...@gmail.com](https://code.google.com/u/111673602704231459602/) on August 08, 2012 17:32:43_\n\nCollectionSerializer and MapSerializer use the fields \"genericType\" and \"keyGenericType\", \"valueGenericType\" respectively to lookup serializers. These fields are then reset back to null.\n\nWhen the collection length is 0, it returns out of the write method immediately without ever resetting the genericType. This causes situations where the wrong serializer is fetched due to wrong genericType on subsequent calls to write. Here is some code that will reproduce the issue:\n\n```\npublic class NonFinalClass{\n\n}\n\npublic class CollectionRoot{\n    private List<String> aStringCollection;\n    private List<NonFinalClass> nonFinalClasses;\n\n    public CollectionRoot() {\n        super();\n        aStringCollection = new ArrayList<String>();\n        nonFinalClasses = new ArrayList<CollectionSerializerTest.NonFinalClass>();\n        nonFinalClasses.add(new NonFinalClass());\n    }\n\n\n}\n\npublic void test_generic_type_not_reset_with_empty_collection(){\n    Kryo kryo = new Kryo();\n    Output output  = new Output(100, 4096);\n    kryo.writeClassAndObject(output, new CollectionRoot());\n}\n```\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=82_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/82", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:47:59", "closed": "2013-11-11 22:48:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Error in TreeMapSerializer MapReferenceResolver readObjects ID ", "body": "_From [rawl...@gmail.com](https://code.google.com/u/109978773477291006661/) on July 24, 2012 11:39:03_\n\n<b>What steps will reproduce the problem?</b>\n1.Class has one TreeMap and two other same type member.&#13;\n2.The other type members have same value.&#13;\n3.Write and read.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nThe second other type deserialize failed. Because when TreeMap deserialize ,Comparator &amp; TreeMap use same readObjects index. So all index after TreeMap is wrong, and reference fails.&#13;\nIn sample list below x2 will get wrong value.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.18&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\npublic class TreeMapSerializerTestData implements Serializable {&#13;\n    private static final long serialVersionUID = 8449423540690186724L;&#13;\n&#13;\n    private Map&lt;String, Map&lt;String, Object&gt;&gt; treeMap;&#13;\n    public String x1=\"abc\";&#13;\n    public String x2=\"abc\";&#13;\n    public String x3=\"def\";&#13;\n    &#13;\n    public TreeMapSerializerTestData(){&#13;\n        treeMap=new TreeMap&lt;String, Map&lt;String, Object&gt;&gt;(new FakeComparator());&#13;\n    }&#13;\n    public TreeMapSerializerTestData(String name){&#13;\n        treeMap=new TreeMap&lt;String, Map&lt;String, Object&gt;&gt;(new FakeComparator()); &#13;\n    }&#13;\n    public static class FakeComparator implements Comparator&lt;Object&gt;, Serializable&#13;\n    {&#13;\n        private static final long serialVersionUID = 3667761299603933963L;&#13;\n        public int compare(Object o, Object o1)&#13;\n        {&#13;\n            return 0;&#13;\n        }&#13;\n    }&#13;\n}&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=81_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/81", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:47:54", "closed": "2013-11-11 22:47:58", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Transient member inside no-arg constructor Class deserialize", "body": "_From [rawl...@gmail.com](https://code.google.com/u/109978773477291006661/) on July 20, 2012 13:15:19_\n\n<b>What steps will reproduce the problem?</b>\n1.ClassNoConstruct obj=new ClassNoConstruct(10);&#13;\n&#13;\n2.kryo.writeClassAndObject(output, obj);&#13;\n3.kryo.setInstantiatorStrategy(new SerializingInstantiatorStrategy());&#13;\nkryo.readClassAndObject(input);&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nThe transient member x inside does not use default value(\"abc\") as expected.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.18&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\npublic class ClassNoConstruct implements Serializable{&#13;\n    private transient Object x =new String(\"abc\");&#13;\n        private int i;&#13;\n    public ClassNoConstruct(int i){&#13;\n        this .i=i;&#13;\n    }&#13;\n}&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=80_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/80", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:47:51", "closed": "2013-11-11 22:47:53", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Additions to the API: Add copyInto, readInto to Serializer", "body": "_From [serverpe...@gmail.com](https://code.google.com/u/116386398789762926665/) on July 08, 2012 22:26:01_\n\nCurrently, Serializer.read and Serializer.copy methods create a new instance in first place, then do the work, and finally return that instance.\n\nIt whould be great to have also the equivalents:\n\n  public void copyInto(Kryo kryo, T original, T destination);\n  public void readInto(Kryo kryo, Input input, T destination);\n\n(and the read and copy methods should be rewritten to use internally these).\n\nThis methods would help in several situations...\n\nFor instance, it Kryo could be used internally in the standard Externalization (externalRead would call Serializer.readInto).\n\nThis use-case (Kryo inside standard Serialization) will be a big improvement inapplication using standard JMS, RMI or remote EJBs. In fact, I also suggest to document it in the main page of the Project.\n\nCheers!\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=79_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/79", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:47:42", "closed": "2016-02-20 01:08:30", "commits": {}, "ttf": 830.0002777777778, "commitsDetails": []}, {"title": "EnumSet serialization problem", "body": "_From [j...@turrettech.com](https://code.google.com/u/102047765200155815433/) on July 07, 2012 18:04:09_\n\nWhen the collections serializer tried to .add() to the EnumSet it got an exception.\n\nI made a quick hack that allowed me to move on, which may be useful as a reference.\n\n**Attachment:** [EnumSetSerializer.java](http://code.google.com/p/kryo/issues/detail?id=78)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=78_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/78", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:47:38", "closed": "2013-11-11 22:47:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "unable ro write/readClass", "body": "_From [oreissig](https://code.google.com/u/oreissig/) on July 03, 2012 16:51:08_\n\n<b>What steps will reproduce the problem?</b>\n1. I first write a type for objects, that will be following later on&#13;\nOutput out = new Output(myOutStream);&#13;\nKryo k = new Kryo();&#13;\nk.writeClass(out, String.class);&#13;\nout.flush();&#13;\n&#13;\n2. it just puts 0x03 on the wire&#13;\n&#13;\n3. doing a k.readClass(in) just results in:&#13;\ncom.esotericsoftware.kryo.KryoException: Buffer underflow.&#13;\n    at com.esotericsoftware.kryo.io.Input.require(Input.java:157)&#13;\n    at com.esotericsoftware.kryo.io.Input.readInt(Input.java:302)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:594)&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nDocumentation states, that the complete class name is to be transferred over the wire.&#13;\nAnd readClass() should give me String.class instead of throwing an exception, of course.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.16&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nI do not use class registration or custom serializers\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=77_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/77", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:47:33", "closed": "2013-11-11 22:47:36", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "copy of a graph sometimes still refers to the root of the copy", "body": "_From [antony.b...@gmail.com](https://code.google.com/u/114932548315552703515/) on June 29, 2012 07:29:27_\n\n<b>What steps will reproduce the problem?</b>\n&#13;\nCreate a graph structure that contains back pointers to the root.&#13;\nMake a copy of that root.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nThe expectation is that, in the copy, references to the root are replaced by references to the copy of the root. However references to the root refer to the original, not the copy.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\n2.16&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nIf I put the root into a singleton list, copy the list and then .get(0), the copy is fine. Seems like the root is being incorrectly registered.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=76_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/76", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:47:28", "closed": "2013-11-11 22:47:31", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Provide sun.misc.Unsafe-based implementation of FieldSerializer", "body": "_From [romixlev](https://code.google.com/u/romixlev/) on June 28, 2012 08:37:32_\n\nIt could be interesting to provide sun.misc.Unsafe based implementation of FieldSerializer. It would be able to read object's memory, write into memory buffers directly using readXYZ/writeXYZ methods of the Unsafe class.\n\nOne potential advantage could be speed.\n\nMore over, and probably more important, it could be seen as an alternative to using ASM, because some people may want to reduce external dependencies to a minimum.\n\nThe implementation should pretty easy and straight forward. Many frameworks use a similar trick already (protostuff, etc).\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=75_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/75", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:46:53", "closed": "2013-11-11 22:47:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Deserialization fails on ConcurrentHashMap in Spring User object", "body": "_From [monster...@gmail.com](https://code.google.com/u/106829663774569401640/) on June 20, 2012 20:41:23_\n\n<b>What steps will reproduce the problem?</b>\n1. Try to serialize a spring User object that contains a TreeSet&#13;\n<b>2.</b>\n<b>3.</b>\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nCorrect serialization. Stack Trace&#13;\nWARNING: Could not load session with id C85C5CD2388F9929DC99908ED6013146-n1 from memcached.&#13;\ncom.esotericsoftware.kryo.SerializationException: Unable to deserialize object of type: java.util.concurrent.ConcurrentHashMap&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:593)&#13;\n    at com.esotericsoftware.kryo.ObjectBuffer.readObject(ObjectBuffer.java:213)&#13;\n    at de.javakaffee.web.msm.serializer.kryo.KryoTranscoder.deserializeAttributes(KryoTranscoder.java:256)&#13;\n    at de.javakaffee.web.msm.TranscoderService.deserializeAttributes(TranscoderService.java:159)&#13;\n    at de.javakaffee.web.msm.TranscoderService.deserialize(TranscoderService.java:116)&#13;\n    at de.javakaffee.web.msm.MemcachedSessionService.loadFromMemcached(MemcachedSessionService.java:1027)&#13;\n    at de.javakaffee.web.msm.MemcachedSessionService.findSession(MemcachedSessionService.java:578)&#13;\n    at de.javakaffee.web.msm.MemcachedBackupSessionManager.findSession(MemcachedBackupSessionManager.java:196)&#13;\n    at org.apache.catalina.connector.Request.doGetSession(Request.java:2841)&#13;\n    at org.apache.catalina.connector.Request.getSession(Request.java:2307)&#13;\n    at org.apache.catalina.connector.RequestFacade.getSession(RequestFacade.java:897)&#13;\n    at javax.servlet.http.HttpServletRequestWrapper.getSession(HttpServletRequestWrapper.java:229)&#13;\n    at org.springframework.security.web.context.HttpSessionSecurityContextRepository$SaveToSessionResponseWrapper.createNewSessionIfAllowed(HttpSessionSecurityContextRepository.java:339)&#13;\n    at org.springframework.security.web.context.HttpSessionSecurityContextRepository$SaveToSessionResponseWrapper.saveContext(HttpSessionSecurityContextRepository.java:280)&#13;\n    at org.springframework.security.web.context.HttpSessionSecurityContextRepository.saveContext(HttpSessionSecurityContextRepository.java:104)&#13;\n    at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:87)&#13;\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323)&#13;\n    at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)&#13;\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323)&#13;\n    at com.redbox.digital.proxy.security.WSFedRememberMeAuthenticationFilter.doFilter(WSFedRememberMeAuthenticationFilter.java:104)&#13;\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323)&#13;\n    at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:54)&#13;\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323)&#13;\n    at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)&#13;\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323)&#13;\n    at org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:201)&#13;\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323)&#13;\n    at com.redbox.digital.proxy.security.WSFedRequestParamPreAuthenticationFilter.doFilter(WSFedRequestParamPreAuthenticationFilter.java:195)&#13;\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323)&#13;\n    at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:105)&#13;\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323)&#13;\n    at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)&#13;\n    at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:323)&#13;\n    at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:173)&#13;\n    at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:346)&#13;\n    at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:259)&#13;\n    at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)&#13;\n    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)&#13;\n    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)&#13;\n    at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)&#13;\n    at de.javakaffee.web.msm.SessionTrackerValve.invoke(SessionTrackerValve.java:126)&#13;\n    at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:581)&#13;\n    at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)&#13;\n    at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)&#13;\n    at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927)&#13;\n    at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)&#13;\n    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)&#13;\n    at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987)&#13;\n    at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579)&#13;\n    at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:309)&#13;\n    at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)&#13;\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)&#13;\n    at java.lang.Thread.run(Thread.java:722)&#13;\nCaused by: com.esotericsoftware.kryo.SerializationException: Unable to deserialize object of type: org.springframework.security.core.context.SecurityContextImpl&#13;\n    at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:571)&#13;\n    at com.esotericsoftware.kryo.serialize.MapSerializer.readObjectData(MapSerializer.java:129)&#13;\n    at com.esotericsoftware.kryo.Serializer.readObject(Serializer.java:61)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:589)&#13;\n    ... 52 more&#13;\nCaused by: com.esotericsoftware.kryo.SerializationException: Serialization trace:&#13;\nauthorities (org.springframework.security.core.userdetails.User)&#13;\nprincipal (org.springframework.security.authentication.UsernamePasswordAuthenticationToken)&#13;\nauthentication (org.springframework.security.core.context.SecurityContextImpl)&#13;\n    at com.esotericsoftware.kryo.s...\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=74_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/74", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:46:46", "closed": "2013-11-11 22:46:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Direct primitives serializarion/deserializarion instead of autoboxing", "body": "_From [serverpe...@gmail.com](https://code.google.com/u/116386398789762926665/) on June 18, 2012 03:12:08_\n\nCould Output, Input and Fieldserializer make use of the new functionality added to reflectasm to avoid autoboxing in both sides?\n\nI don't really know how difficult it could be, and I'm prettry sure you have already it in mind... ;)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=73_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/73", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:46:41", "closed": "2013-11-11 22:46:45", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Avoid two System.arraycopy when serializing+deserializing StringBuilder", "body": "_From [serverpe...@gmail.com](https://code.google.com/u/116386398789762926665/) on June 18, 2012 02:49:34_\n\nDefaultSerializers.StringBuilderSerializer performs toString() conversion when writing and copy-from-String constructors when reading.\n\nThat internally implies one System.arraycopy invocation at each side.\n\nI propose you the following:\n1. Change the Output.writeString signature to accept a CharSequence parameter), no other change is necessary inside the method.\n2. Change the StringBuilderSerializer.write method with this:\n        public void write (Kryo kryo, Output output, StringBuilder object) {\n            output.writeString(object);\n        }\n3. Overload or make new methods equivalent to Input.getString and Input.readUtf8 to allow generaing StringBuilder directly from the char[] buffer, instead a String.\n4. Chenge the StringBuilderSerializer.read method in an equivalent way to avoid pivoting over a String instance.\n\nBy the way, the same approach sould be done, I propose with DefaultArraySerializers.CharArraySerializer in order to efficent store/read its contents as UTF-8.\n\nP.S: The same shoudn't be done with StringBufferSerializer, I think, because the charAt method is synchronized.\n\nP.S.2: Sorry for my English... :-(\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=72_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/72", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:46:36", "closed": "2013-11-11 22:46:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Suggestion: add new default Serializers for Calendar and TimeZone", "body": "_From [serverpe...@gmail.com](https://code.google.com/u/116386398789762926665/) on June 18, 2012 02:29:14_\n\nI'm starting loving Kryo as I do with ReflectASM!!\n\nIt is a good practice for some applications not to store/use java.util.Date in data structures and comparisons, but using java.util.Calendar instead. At least my applications do.\n\nI propose to add these two serializers as defaults for Calendar and TimeZone.\n\nSee the attachments with my implementation proposals (the attachment hasn't any package name, copyright, etc), they could be nested classes of com.esotericsoftware.kryo.serializers.DefaultSerializers.\n\nThe CalendarSerializer is compatible with both java.util.GregorianCalendar, java.util.JapaneseImperialCalendar, sun.util.BuddhistCalendar. With the only limitation that the default Locale/Calendar must be the same when writting and when reading. I suppouse it could be made more robust...\n\nThe TimeZoneSerializer assumes the immutabilitiy of TimeZone instances (it doesn't have to, strictly).\n\nRegards, \nJesus\n\n**Attachment:** [CalendarSerializer.java TimeZoneSerializer.java](http://code.google.com/p/kryo/issues/detail?id=71)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=71_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/71", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:46:29", "closed": "2013-11-11 22:46:35", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "java.nio.BufferUnderflowException", "body": "_From [batchuch...@gmail.com](https://code.google.com/u/109361277301846607925/) on June 13, 2012 20:33:53_\n\n<b>What steps will reproduce the problem?</b>\n1. Created an Exception class and serialized the class using Kryo and wrote the data to a file, using Java 1.6.0_30&#13;\n2. Now, reading the file to de-serialize the Exception class using Kryo, using Java 1.7.0_05. I am getting BufferUnderflowException.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nExpected to de-serialize the Exception class without getting BufferUnderflowException.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nI am using Kryo 1.03 version. I tried using Kryo 1.05 as well, and found the same issue. I do not want to use Kryo 2.x, as I need to change a lot in my application.&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nThe src is attached.&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=70_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/70", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:46:23", "closed": "2013-11-11 22:46:27", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Very high overhead issued by ArrayList iteration when serializing a big object with large number of elements", "body": "_From [coderp...@gmail.com](https://code.google.com/u/113689871878718973691/) on June 07, 2012 11:40:07_\n\nWe did a benchmark on serializing a big object that made up with a ArrayList, which has 1000 elements. The reference was turned on in order to avoid cyclic object. To our surprise, kryo is about 10X slower than that of java built-in serialization in this case, and is slightly slower than Hessian.\n\nKryo      cost time(ns): 5.7967346583333336E7  size(bytes):16994.0\nHessian   cost time(ns): 9645093.133333333     size(bytes):139122.0\nJava      cost time(ns): 3280809.3433333333    size(bytes):31339.0\n\nWe found kryo was busy in iterating an ArrayList for the purpose of determining the index of an object which appeared before. The attachment is the profiling result by Java VisualVM. Below lines is the hotspot (see #Kryo.writeReferenceOrNull() )\n\nfor (int i = 0, n = writtenObjects.size(); i < n; i++) {\n  if (writtenObjects.get(i) == object) {\n  if (DEBUG) debug(\"kryo\", \"Write object reference \" + i + \": \" + string(object));\n  output.writeInt(i + 1, true); // + 1 because 0 means null.\n  return true;\n}\n\nWe replace the ArrayList with a HashMap, in which key is the object appeared, value is the index of that object. After optimization we found a good performance improvement, nearly 20X faster in this case.\n\nKryo      cost time(ns): 3015971.38        size(bytes):12996.0\nHessian   cost time(ns): 9678737.976666667 size(bytes):139122.0\nJava      cost time(ns): 3314982.203333333 size(bytes):31339.0\n\nWe'll upload our patch soon.\n\n**Attachment:** [Snap5.jpg](http://code.google.com/p/kryo/issues/detail?id=69)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=69_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/69", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:46:12", "closed": "2013-11-11 22:46:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "More efficient serialization of element's types for collections and maps", "body": "_From [romixlev](https://code.google.com/u/romixlev/) on June 06, 2012 12:26:40_\n\nCurrently, CollectionSerializer supports methods for setting the class of elements and dedicated serializer. But it needs to be invoked explicitly.\n\nBy default, CollectionSerializer would write information about a type for each element.\n\nBut in some cases it is possible to obtain the information about the type of elements dynamically using reflection.\n\nFor example, the following code \nclass ClassWithIntList {\n  List<Integer> iList = new ArrayList<Integer>();\n  Map<String, Long> iMap;\n}\n\nClassWithIntList o = new ClassWithIntList();\nClass<?> iClass = o.getClass();\nfor(Field field : iClass.getDeclaredFields()) {\n    System.out.println(field.getName() + \" :\" + field.getGenericType());\n}\n\nwould print:\niList :java.util.List<java.lang.Integer>\niMap :java.util.Map<java.lang.String, java.lang.Long>\n\nTherefore, it is possible to derive static types of collection elements for fields. And with this information a more efficient encoding can be used by means of writing the type info only once, if the static type of elements is final or primitve, which is a very typical use-case.\n\nAs example shows, similar approach can be also used for Maps serialization.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=68_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/68", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:46:05", "closed": "2013-11-11 22:46:11", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Kryo#writeObjectOrNull() is broken", "body": "_From [pbak...@groupon.com](https://code.google.com/u/109109944947845318512/) on May 31, 2012 01:21:11_\n\nIn both the current trunk and v2.09 the method Kryo#writeObjectOrNull(Output, Object) does not accept null objects.\n\nHere are the first few lines of that method:\n\npublic void writeObjectOrNull (Output output, Object object) {\n    if (output == null) throw new IllegalArgumentException(\"output cannot be null.\");\n    depth++;\n    try {\n        Serializer serializer = getRegistration(object.getClass()).getSerializer();\n\nThe issue appears to be that object.getClass() is being called before checking if object is null, so a null pointer exception is being thrown from the last line shown above.\n\nMy current workaround is to use the 3 argument version of the method which accepts a serializer and doesn't do the getClass() call on object.\n\nShould be an easy fix, thanks!\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=67_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/67", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:45:59", "closed": "2013-11-11 22:46:04", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Between 2.07 and 2.09 Empty String (\"\") broke", "body": "_From [kro...@gmail.com](https://code.google.com/u/108777956947066108363/) on May 26, 2012 16:48:48_\n\n<b>What steps will reproduce the problem?</b>\n1. Serialize an empty string \"\" in an object with other attributes&#13;\n2. Deserialzie it and it brings back way too much information&#13;\n<b>3.</b>\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nAn empty string&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nThe latest 2.09&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nInformation provided above&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=66_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/66", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:45:54", "closed": "2013-11-11 22:45:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Create a github mirror of this project or move it to github", "body": "_From [romixlev](https://code.google.com/u/romixlev/) on May 24, 2012 13:50:46_\n\nGitHub seems to be more popular and more feature-rich, when it comes to collaborative open-source project development. Also cloning, branching, etc is much easier there than on Google Code. \n\nI think Kryo could benefit from moving to GitHub or at least having an official clone there that tracks changes on the main repo at Google Code.\n\nWhat do you think about it?\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=65_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/65", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:45:48", "closed": "2013-11-11 22:45:53", "commits": {"2d398bce497c4fb73aa46d5e4eaa8dcfaf4492ea": {"commitGHEventType": "referenced", "commitUser": "NathanSweet"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "2d398bce497c4fb73aa46d5e4eaa8dcfaf4492ea", "commitGHEventType": "referenced", "commitUser": "NathanSweet", "commitParents": ["b02a589c1b414f3987debaa856e03a8c2252cdde"], "nameRev": "2d398bce497c4fb73aa46d5e4eaa8dcfaf4492ea tags/kryo-2.24.0~13", "commitMessage": "Fixed IntMap.\n\ncloses #65\n", "commitDateTime": "2014-03-03 11:14:35", "authoredDateTime": "2014-03-03 11:14:35", "commitGitStats": [{"filePath": "src/com/esotericsoftware/kryo/util/IntMap.java", "insertions": 203, "deletions": 7, "lines": 210}], "commitSpoonAstDiffStats": [{"spoonFilePath": "IntMap.java", "spoonMethods": [{"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap", "TOT": 3, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 1}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.get(int)", "TOT": 7, "UPD": 0, "INS": 3, "MOV": 3, "DEL": 1}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.putAll(com.esotericsoftware.kryo.util.IntMap)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.entries()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.values()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.keys()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.Entry", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.MapIterator", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.Entries", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.Values", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.Keys", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.put(int,java.lang.Object)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 0}, {"spoonMethodName": "com.esotericsoftware.kryo.util.IntMap.get(int,java.lang.Object)", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 3, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["2d398bce497c4fb73aa46d5e4eaa8dcfaf4492ea"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 203, "deletions": 7, "lines": 210, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 27, "UPD": 0, "INS": 16, "MOV": 9, "DEL": 2, "spoonFilesChanged": 1, "spoonMethodsChanged": 13}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/com/esotericsoftware/kryo/util"], "changesInPackagesSPOON": ["com.esotericsoftware.kryo.util.IntMap.Entries", "com.esotericsoftware.kryo.util.IntMap.get(int,java.lang.Object)", "com.esotericsoftware.kryo.util.IntMap.put(int,java.lang.Object)", "com.esotericsoftware.kryo.util.IntMap", "com.esotericsoftware.kryo.util.IntMap.Values", "com.esotericsoftware.kryo.util.IntMap.keys()", "com.esotericsoftware.kryo.util.IntMap.putAll(com.esotericsoftware.kryo.util.IntMap)", "com.esotericsoftware.kryo.util.IntMap.Keys", "com.esotericsoftware.kryo.util.IntMap.values()", "com.esotericsoftware.kryo.util.IntMap.Entry", "com.esotericsoftware.kryo.util.IntMap.entries()", "com.esotericsoftware.kryo.util.IntMap.get(int)", "com.esotericsoftware.kryo.util.IntMap.MapIterator"]}, {"title": "BigDecimalSerializer not supporting null values", "body": "_From [michael....@gmail.com](https://code.google.com/u/113220306338625534136/) on May 23, 2012 21:19:30_\n\n<b>What steps will reproduce the problem?</b>\n1.create BigDecimalSerializer&#13;\n2.set AcceptsNull(true)&#13;\n3.throw in a null value&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nreturn value of null&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.0.8&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nSource indicates you missed the following on the write method:&#13;\nif (object == null) {&#13;\n  output.writeByte(NULL);&#13;\n  return;&#13;\n}&#13;\n&#13;\nIt seems the receive side handling of the null value is also missing.&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=64_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/64", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:45:45", "closed": "2013-11-11 22:45:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Test fails for 2.08 build", "body": "_From [brya...@gmail.com](https://code.google.com/u/109882303512495768649/) on May 15, 2012 19:49:02_\n\n<b>What steps will reproduce the problem?</b>\n1. Download 2.08 distribution&#13;\n2. Make sure jars are installed in local maven repo&#13;\n3. Run build, test fails&#13;\n&#13;\nFailed tests: &#13;\n  testNoDefaultConstructor(com.esotericsoftware.kryo.FieldSerializerTest): expected:&lt;com.esotericsoftware.kryo.FieldSerializerTest$ComplexNoDefaultConstructor@318259bf&gt; but was:&lt;com.esotericsoftware.kryo.FieldSerializerTest$ComplexNoDefaultConstructor@2beb4d6f&gt;&#13;\n&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nThe tests should all pass.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.08&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nI'm using JDK 1.6.0_31 on both Mac OS 10.7.4 and CentOS 6.2&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=63_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/63", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:45:41", "closed": "2013-11-11 22:45:43", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Big overhead when serializing object graphs with shared nodes", "body": "_From [romixlev](https://code.google.com/u/romixlev/) on May 03, 2012 13:07:29_\n\nI did some benchmarking and profiling of Kryo.\nKryo supports serialization of object graphs with sharing, but it introduces quite some overhead. \nInspection of sources has shown that 3 different (identity) maps are used to implement this feature. Lookups and insertion in those maps plus usage of InstanceId wrapper for instance ids are the reasons for this overhead.\n\nI sketched a possible solution here:\n<a href=\"https://github.com/romix/kryo/commit/845ae6018c4f4adcae81269392f972275dff2a54\" rel=\"nofollow\">https://github.com/romix/kryo/commit/845ae6018c4f4adcae81269392f972275dff2a54</a>&#13;\n&#13;\nIt gives a better performance on my tests. It seems to be faster for object graphs that are not very big, because it uses linear scan through entries and no hashing at all. For bigger graphs it will degrade to O(n^2). So, it is not ideal solution for all cases. &#13;\n&#13;\nIt would be actually nice to introduce a GraphReferenceManager API or something like this. Then one could provide a custom implementation for it. For example, one could use my (or similar) approach for small graphs and/or current approach based on hashing for big graphs. &#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=62_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/62", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:45:35", "closed": "2013-11-11 22:45:40", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ArraySerializer is slow due to reflection", "body": "_From [romixlev](https://code.google.com/u/romixlev/) on May 03, 2012 12:59:08_\n\nArraySerializer is slow due to reflection:\nArrays.get and Arrays.set introduce quite some overhead according to profilers.\n\nOne way to solve the issue could be to avoid using reflection in simple, typical cases, i.e. for one-dimensional arrays.\n\nI created a possible solution. The code can be found here:\n<a href=\"https://github.com/romix/kryo/commit/0b92463995ef2dc867252e9a9596337dc87527ef\" rel=\"nofollow\">https://github.com/romix/kryo/commit/0b92463995ef2dc867252e9a9596337dc87527ef</a>\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=61_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/61", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:45:29", "closed": "2013-11-11 22:45:34", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Kryo#setInstantiatorStrategy has no effect if constructor is not accessable", "body": "_From [honkbert@gmail.com](https://code.google.com/u/honkbert@gmail.com/) on April 21, 2012 17:10:01_\n\n<b>What steps will reproduce the problem?</b>\n1. Set a new strategy with Kryo#setInstantiatorStrategy(myStrategy)&#13;\n2. Watch how Kryo#newInstantiator ignores it for classes that have private no-arg constructors.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nIt's obvious. :-) And that there is a test verifying this behaviour.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.05&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nThe problem is, that Kryo#newInstantiator always tries to use a default constructor first. Only if there is none, the strategy is used. But if there is one that is not accessable it fails later on.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=60_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/60", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:45:25", "closed": "2013-11-11 22:45:28", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "CompatibleFieldSerializer read/writes field schema only once", "body": "_From [dries.sc...@gmail.com](https://code.google.com/u/112349801069608788217/) on April 20, 2012 20:56:29_\n\n<b>What steps will reproduce the problem?</b>\n<b>1.</b>\nCreate 2 simple objects:&#13;\nObjectB: boolean field&#13;\nObjectA: ObjectB field&#13;\n<b>2.</b>\nCreate an instance of ObjectA and set a instance of ObjectB&#13;\n<b>3.</b>\nSerialize ObjectA using a CompatibleFieldSerializer as default serializer&#13;\n4.&#13;\nTry to deserialize the byte array&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nExpected a deserialized object graph containing ObjectA that has a reference to a instance of ObjectB but the output is a ClassCastException when deserializing the ObjectB instance.&#13;\n&#13;\nDebugging shows the following:&#13;\nWhen serializing the object (starting with ObjectA) it will write a schema to the output containing the field names, it will also set a key: 'schemaWritten' in the ObjectMap. When serializing ObjectB it checks for the 'schemaWritten' key, which is already set so it will not write a schema.&#13;\n&#13;\nWhen deserializing it wil try reading a schema, its starts with ObjectA so it wil read its field names and set them in the ObjectMap under the 'schema' key. When deserializing ObjectB it wil check for the 'schema' key in the ObjectMap, the key exists so it re-uses the schema... So while reading the object data it wil try to set a field that is part of ObjectA in an instance of ObjectB resulting in a ClassCastException.&#13;\n&#13;\nPossible fix: creating a ObjectMap instance for every object type the serializer encounters, this ensures that a schema is written/read once for every object type. Currently there is 1 shared instance of the ObjectMap.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n2.05&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nAttached is a test-case (extension on CompatibleFieldSerializerTest)\n\n**Attachment:** [CompatibleFieldSerializerTest.diff](http://code.google.com/p/kryo/issues/detail?id=59)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=59_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/59", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:45:19", "closed": "2013-11-11 22:45:23", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Unable to set custom default serializer", "body": "_From [dries.sc...@gmail.com](https://code.google.com/u/112349801069608788217/) on April 20, 2012 20:02:52_\n\nThe setter for the field:\nprivate Class<? extends Serializer> defaultSerializer = FieldSerializer.class;\nIn Kryo.java:129 doesn't take the correct argument.\n\nThe argument is specified as a: Class<Serializer> effectively not allowing the user to set (for example) a CompatibleFieldSerializer as default serializer. The argument type should be a Class<? extends Serializer> to match the field type and allow subtypes to be set.\n\nWe currently use reflection to manipulate the field at runtime to set the default serializer.\n\nVersion: 2.05\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=58_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/58", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:45:15", "closed": "2013-11-11 22:45:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Deserialization failing randomly -  version 2.02", "body": "_From [andhappi...@gmail.com](https://code.google.com/u/112134686187390525315/) on April 18, 2012 00:39:06_\n\n<b>What steps will reproduce the problem?</b>\n1. Create and use same serializer class on both ends of a client server application.&#13;\n2. Serialize the class from one end.&#13;\n3. Deserialize the class on the other end.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nI have noticed the deserialization fails randomly with the following exception, even though I created the serializer class with kryo.setRegistrationRequired(true) :&#13;\n&#13;\ncom.esotericsoftware.kryo.KryoException: Encountered unregistered class ID: 48&#13;\nSerialization trace:&#13;\ncommand (remoting.Message)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:517)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:208)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:537)&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\nVersion 2.02&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nFirst of all let me say that this is an awesome project and really rocks, thank you!&#13;\n&#13;\nAs described above I created a MessageConverted class which is capable of serializing/deserializing a Message object and I have been careful to use kryo.setRegistrationRequired(true) so that I can explicitly catch any classes that are not registered. This did help me catch classes that were not registered like Arrays.ArrayList. I am using the same converter class on both ends of a client server application. The problem I am seeing is that the deserialization often fails with the following message:&#13;\n&#13;\ncom.esotericsoftware.kryo.KryoException: Encountered unregistered class ID: 48&#13;\nSerialization trace:&#13;\ncommand (remoting.Message)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:517)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:208)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:537)&#13;\n&#13;\nSince I am using the same converter class on both the ends and have explicitly set class registration as required, I am not sure why the serialization succeeds and deserialization fails with the above exception. Furthermore both the server and the client is brand new code that I am writing and so there is no question of different versions of the classes running on each end. &#13;\n&#13;\nHere is the converter class that I am using:&#13;\n&#13;\nimport java.io.ByteArrayOutputStream;&#13;\nimport java.lang.reflect.Field;&#13;\nimport java.math.BigDecimal;&#13;\nimport java.util.ArrayList;&#13;\nimport java.util.Arrays;&#13;\nimport java.util.Date;&#13;\nimport java.util.HashMap;&#13;\n&#13;\nimport com.esotericsoftware.kryo.Kryo;&#13;\nimport com.esotericsoftware.kryo.Serializer;&#13;\nimport com.esotericsoftware.kryo.io.Input;&#13;\nimport com.esotericsoftware.kryo.io.Output;&#13;\nimport com.esotericsoftware.kryo.serializers.ArraySerializer;&#13;\nimport com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer;&#13;\n&#13;\nimport data.user.User;&#13;\nimport hibernate.LongId;&#13;\nimport model.stockdata.WriteProtectedTicker;&#13;\nimport model.trade.QuoteType;&#13;\nimport model.trade.stock.DirectionSymbol;&#13;\nimport model.trade.stock.Exchange;&#13;\nimport model.trade.stock.Quote;&#13;\nimport model.trade.stock.Quote.HaltIndicatorCode;&#13;\nimport model.trade.stock.Quote.HaltStatusCode;&#13;\nimport model.trade.stock.Quote.QuoteSource;&#13;\nimport model.trade.stock.Ticker;&#13;\nimport remoting.Message;&#13;\nimport remoting.MessageContext;&#13;\nimport remoting.MessageConverter;&#13;\n&#13;\n/**&#13;\n- This class is used to provide extremely compact representation of messages when sent over the wire.&#13;\n- &lt;p&gt;&#13;\n- &#13;\n- The class internally uses the Kryo java serialization framework (<a href=\"http://code.google.com/p/kryo/\" rel=\"nofollow\">http://code.google.com/p/kryo/</a>).&#13;\n- &lt;p&gt;&#13;\n- &#13;\n- @author me&#13;\n  _/&#13;\n  public class DefaultMessageConverter implements MessageConverter {&#13;\n  /_*&#13;\n  - An internal thread local is used to cache the created Kryo instances at a&#13;\n  - thread local level (Kryo is not thread safe) ...&#13;\n    _/&#13;\n    private ThreadLocal&lt;Kryo&gt; converters = new ThreadLocal&lt;Kryo&gt;();&#13;\n    &#13;\n    /_*&#13;\n  - This method is used to convert a message into bytes.&#13;\n  - &lt;p&gt;&#13;\n  - &#13;\n  - @param message&#13;\n  -            instance of Message that needs to be converted&#13;\n  - @return a byte array representing the conversion&#13;\n  - @throws NullPointerException&#13;\n  -             if passed in message is null&#13;\n    _/&#13;\n    public byte[] toBytes(Message message) {&#13;\n    Kryo converter = getConverter();&#13;\n    &#13;\n    ByteArrayOutputStream bos = new ByteArrayOutputStream();&#13;\n    Output output = new Output(bos);&#13;\n    &#13;\n    converter.writeObject(output, message);&#13;\n    &#13;\n    return output.toBytes();&#13;\n    }&#13;\n    &#13;\n    /_*&#13;\n  - This method reconstructs the Message from the given bytes.&#13;\n  - &lt;p&gt;&#13;\n  - &#13;\n  - @param encoded&#13;\n  -            a byte array representing the serialized message&#13;\n  - @return the reconstructed Message&#13;\n  - @throws NullPointerException&#13;\n  -             if passed in byte array is null&#13;\n    _/&#13;\n    public Message fromBytes(byte[] encoded) {&#13;\n    Kryo converter = getConverter();&#13;\n    Input input = new Input(encoded);&#13;\n    &#13;\n    return converter.readObject(input, Message.class);&#13;\n    }&#13;\n    &#13;\n    /_*&#13;\n  - This method is used to get the instance of the kryo converter associated with&#13;\n  - the running thread.&#13;\n  - &lt;p&gt;&#13;\n  - &#13;\n  - @return a new Kryo instance&#13;\n    */&#13;\n    private Kryo getConverter() {&#13;\n    Kryo kryo = converters.get();&#13;\n    if (kryo == null) {&#13;\n        // PLEASE DO NOT CHANGE THE SEQUENCE OF ANY OF THE CLASSES&#13;\n        // WHILE ADDING NEW CLASSES, ADD AT THE BOTTOM ...&#13;\n    &#13;\n        kryo = new Kryo();&#13;\n        kryo.setRegistrationRequired(true);&#13;\n    &#13;\n        kryo.register(Class.class);&#13;\n        kryo.register(HashMap.class);&#13;\n        kryo.register(ArrayList.class);&#13;\n        kryo.register(BigDecimal.class);&#13;\n        kryo.register(Date.class);&#13;\n    &#13;\n        // This one is required for the special cases where we are using Arrays.asList() functionality ...&#13;\n        kryo.register(Arrays.asList(\"\").getClass(), new ArrayAsListSerializer());&#13;\n    &#13;\n        kryo.register(Ticker.class, new TickerSerializer());&#13;\n        kryo.register(Commands.class, new CommandsSerializer());&#13;\n        kryo.register(LongId.class);&#13;\n        kryo.register(User.class);&#13;\n        kryo.register(Message.class);&#13;\n        kryo.register(MessageContext.class);&#13;\n        kryo.register(Qu...\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=57_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/57", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:45:11", "closed": "2013-11-11 22:45:13", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "deserialization failed", "body": "_From [vylo...@gmail.com](https://code.google.com/u/101850661038718127291/) on April 17, 2012 11:08:49_\n\n<b>What steps will reproduce the problem?</b>\npublic class CircleTest extends KryoTestCase {&#13;\n    public void test () {&#13;\n        Kryo k = new Kryo();&#13;\n        Output o = new Output(2048);&#13;\n        k.writeClassAndObject(o, new A());&#13;\n        o.flush();&#13;\n        &#13;\n        byte[] buffer = o.getBuffer();&#13;\n        Input i = new Input(buffer);&#13;\n        Object object = k.readClassAndObject(i);&#13;\n    }&#13;\n    &#13;\n    static class A{&#13;\n        String name=\"aaa\";&#13;\n        B b=new B(this);&#13;\n        &#13;\n        static class B{&#13;\n            A owner;&#13;\n            &#13;\n            public B(){}&#13;\n&#13;\n            public B(A owner) {&#13;\n                super();&#13;\n                this.owner = owner;&#13;\n            }&#13;\n            &#13;\n        }&#13;\n    }&#13;\n}&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nexpected:deserialized successful.&#13;\ninstead:&#13;\ncom.esotericsoftware.kryo.KryoException: Encountered unregistered class ID: 95&#13;\nSerialization trace:&#13;\nb (com.esotericsoftware.kryo.CircleTest$A)&#13;\nb (com.esotericsoftware.kryo.CircleTest$A)&#13;\nowner (com.esotericsoftware.kryo.CircleTest$A$B)&#13;\nb (com.esotericsoftware.kryo.CircleTest$A)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClass(Kryo.java:517)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:208)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:560)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:211)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:560)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:211)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:560)&#13;\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.read(FieldSerializer.java:211)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:643)&#13;\n    at com.esotericsoftware.kryo.CircleTest.test(CircleTest.java:17)&#13;\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&#13;\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&#13;\n    at java.lang.reflect.Method.invoke(Method.java:597)&#13;\n    at junit.framework.TestCase.runTest(TestCase.java:168)&#13;\n    at junit.framework.TestCase.runBare(TestCase.java:134)&#13;\n    at junit.framework.TestResult$1.protect(TestResult.java:110)&#13;\n    at junit.framework.TestResult.runProtected(TestResult.java:128)&#13;\n    at junit.framework.TestResult.run(TestResult.java:113)&#13;\n    at junit.framework.TestCase.run(TestCase.java:124)&#13;\n    at junit.framework.TestSuite.runTest(TestSuite.java:232)&#13;\n    at junit.framework.TestSuite.run(TestSuite.java:227)&#13;\n    at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:91)&#13;\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;\n&#13;\n&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nkryo2&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=56_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/56", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:45:04", "closed": "2013-11-11 22:45:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Can not serialize,please help!", "body": "_From [vylo...@gmail.com](https://code.google.com/u/101850661038718127291/) on April 09, 2012 11:02:47_\n\nIt shows message:\n\ncom.esotericsoftware.kryo.KryoException: java.lang.IllegalArgumentException: Unable to create serializer \"com.esotericsoftware.kryo.serializers.FieldSerializer\" for class: java.awt.geom.Ellipse2D$Double\nSerialization trace:\nellipse (org.jhotdraw.samples.svg.figures.SVGEllipse)\nupdater (com.lorent.whiteboard.command.impl.BroadcastCommand)\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:189) ~[kryo2-2.02-all.jar:na]\n    at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:405) ~[kryo2-2.02-all.jar:na]\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:170) ~[kryo2-2.02-all.jar:na]\n    at com.esotericsoftware.kryo.Kryo.writeObject(Kryo.java:390) ~[kryo2-2.02-all.jar:na]\n    at com.lorent.whiteboard.server.db.DatabaseOutputStream$1.run(DatabaseOutputStream.java:42) ~[bin/:na]\n    at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886) [na:1.6.0_31]\n    at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908) [na:1.6.0_31]\n    at java.lang.Thread.run(Thread.java:662) [na:1.6.0_31]\nCaused by: java.lang.IllegalArgumentException: Unable to create serializer \"com.esotericsoftware.kryo.serializers.FieldSerializer\" for class: java.awt.geom.Ellipse2D$Double\n    at com.esotericsoftware.kryo.Kryo.newSerializer(Kryo.java:239) ~[kryo2-2.02-all.jar:na]\n    at com.esotericsoftware.kryo.Kryo.getDefaultSerializer(Kryo.java:219) ~[kryo2-2.02-all.jar:na]\n    at com.esotericsoftware.kryo.Kryo.getRegistration(Kryo.java:329) ~[kryo2-2.02-all.jar:na]\n    at com.esotericsoftware.kryo.Kryo.writeClass(Kryo.java:357) ~[kryo2-2.02-all.jar:na]\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.write(FieldSerializer.java:168) ~[kryo2-2.02-all.jar:na]\n    ... 7 common frames omitted\nCaused by: java.lang.reflect.InvocationTargetException: null\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:1.6.0_31]\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39) ~[na:1.6.0_31]\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27) ~[na:1.6.0_31]\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:513) ~[na:1.6.0_31]\n    at com.esotericsoftware.kryo.Kryo.newSerializer(Kryo.java:226) ~[kryo2-2.02-all.jar:na]\n    ... 11 common frames omitted\nCaused by: java.lang.IncompatibleClassChangeError: Found class org.objectweb.asm.MethodVisitor, but interface was expected\n    at com.esotericsoftware.reflectasm.FieldAccess.get(FieldAccess.java:50) ~[kryo2-2.02-all.jar:na]\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.rebuildCachedFields(FieldSerializer.java:115) ~[kryo2-2.02-all.jar:na]\n    at com.esotericsoftware.kryo.serializers.FieldSerializer.<init>(FieldSerializer.java:49) ~[kryo2-2.02-all.jar:na]\n    ... 16 common frames omitted\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=55_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/55", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:44:57", "closed": "2013-11-11 22:45:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Example of ObjectBuffer on front page does not correspond to the actual API", "body": "_From [jeanfran...@gmail.com](https://code.google.com/u/108455147088522730235/) on March 23, 2012 17:04:13_\n\nOn the front page of Kryo (<a href=\"http://code.google.com/p/kryo/\" rel=\"nofollow\">http://code.google.com/p/kryo/</a>), in the usage examples, there is the following code.&#13;\n&#13;\nObjectBuffer buffer = new ObjectBuffer(kryo);&#13;\nbuffer.writeObject(someObject, new FileOutputStream(\"object.bin\"));&#13;\nsomeObject = buffer.readObject(new FileInputStream(\"object.bin\"));&#13;\nbyte[] bytes = buffer.writeObject(someObject);&#13;\nsomeObject = buffer.readObject(bytes);&#13;\n&#13;\nHowever, in the documentation (<a href=\"http://kryo.googlecode.com/svn/api/com/esotericsoftware/kryo/ObjectBuffer.html\" rel=\"nofollow\">http://kryo.googlecode.com/svn/api/com/esotericsoftware/kryo/ObjectBuffer.html</a>), the signature for writeObject is given as writeObject(OutputStream output, Object object), the opposite of what is in the example. Furthermore, there does not seem to be a one parameter version of readObject anymore.&#13;\n&#13;\nI believe the correct example would be:&#13;\n&#13;\nObjectBuffer buffer = new ObjectBuffer(kryo);&#13;\nbuffer.writeObject(new FileOutputStream(\"object.bin\"), someObject);&#13;\nsomeObject = buffer.readObject(new FileInputStream(\"object.bin\"), someObject.getClass());&#13;\nbyte[] bytes = buffer.writeObject(someObject);&#13;\nsomeObject = buffer.readObject(bytes);\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=54_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/54", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:44:53", "closed": "2013-11-11 22:44:55", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Remove dependency on ByteBuffer", "body": "_From [rka...@gmail.com](https://code.google.com/u/116755208212771764698/) on March 07, 2012 21:03:32_\n\nChange the API to use something like DataInput and DataOutput (or define your own interfaces) instead of ByteBuffer.\n\nByteBuffers have limited extensibility and things like resizing are implemented very inefficiently.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=53_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/53", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:44:48", "closed": "2013-11-11 22:44:52", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Very slow automatic serialization of ArrayList", "body": "_From [victor.t...@gmail.com](https://code.google.com/u/116311427315709103574/) on February 29, 2012 13:38:50_\n\n<b>What steps will reproduce the problem?</b>\n1. kryo.register(ArrayList.class);&#13;\n2. serialize - deserialize&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nVery slow serialization. SerializableSerializer works about 10 times faster.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.04&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n1. ArrayList contains an elements having another ArrayList&lt;byte[]&gt; as a field. All other fields are primitives, or Strings, or another objects containing only primitives or Strings. All objects are registered.&#13;\n2. setRegistrationOptional() is not set. All classes are registered via kryo.register(ClassName.class)&#13;\n3. Changing kryo.register(ArrayList.class); -&gt; &#13;\nkryo.register(ArrayList.class, new SerializableSerializer());&#13;\nleads to great speedup&#13;\n4. Profiling with jvisualvm on read process said that all the time is spend in ArraySerializer.readArray(...) method.&#13;\nIf I'm doing something wrong will be happy to hear corrections.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=52_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/52", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:44:43", "closed": "2013-11-11 22:44:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Compressor isn't able to compress more then 36k of data", "body": "_From [ste...@romankov.name](https://code.google.com/u/103291225311951400778/) on February 17, 2012 12:35:55_\n\nThe problem is in com\\esotericsoftware\\kryo\\Compressor.java \nline 78\n    buffer.putShort((short)(outputBuffer.limit()));\nline 91\n    int length = buffer.getShort();\n\nI can see 2 solutions for the problem:\n    1. Throw exception if outputBuffer.limit() > (int)Short.MAX_VALUE\n    2. buffer.putInt(outputBuffer.limit());int length = buffer.getInt();\n\nCurrent situation is very confusing, because no exception generated and reading of object does not work properly.\n\nKryo 1.04  \n\nThanks in advance for great serialization library.\n\nSteve Romankov stepan(at)romankov.name\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=51_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/51", "user": "ghost", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2013-11-11 22:44:39", "closed": "2013-11-11 22:44:41", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Deserializing a class with transient field that requires deserialization of another class", "body": "_From [weiss...@gmail.com](https://code.google.com/u/118144098345522119868/) on February 14, 2012 12:49:56_\n\nI have a class B which contains a transient field that its initialization requires deserialization of class A. Trying to deserialize class B completely breaks Kryo (running a single thread). I thought that maybe calling 'Kryo.getContext().reset()' would solve the issue but that didn't help.\n\n<b>What steps will reproduce the problem?</b>\n&#13;\n  Run the attached code (also given below).&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\n  I expect the program to end successfully. Instead I get an exception.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\n  1.04&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n  The code to reproduce the problem:&#13;\n&#13;\n&#13;\n-------------------------------------------------------------------&#13;\n&#13;\nimport java.io.FileInputStream;&#13;\nimport java.io.FileNotFoundException;&#13;\nimport java.io.FileOutputStream;&#13;\nimport java.io.IOException;&#13;\nimport java.io.InputStream;&#13;\nimport java.io.OutputStream;&#13;\nimport java.util.HashMap;&#13;\nimport java.util.LinkedList;&#13;\nimport java.util.Map;&#13;\nimport java.util.Vector;&#13;\n&#13;\nimport com.esotericsoftware.kryo.Kryo;&#13;\nimport com.esotericsoftware.kryo.ObjectBuffer;&#13;\n&#13;\npublic class Main {&#13;\n    &#13;\n    public static &lt;T&gt; void serialize(T obj, String filename) throws FileNotFoundException, IOException&#13;\n    {&#13;\n        Kryo kryo = new Kryo();&#13;\n        kryo.setRegistrationOptional(true);&#13;\n        //Kryo.getContext().reset();&#13;\n        ObjectBuffer buffer = new ObjectBuffer(kryo, 100000);&#13;\n        OutputStream os = new FileOutputStream(filename);&#13;\n        buffer.writeClassAndObject(os, obj);&#13;\n        os.close();&#13;\n    }&#13;\n    &#13;\n    @SuppressWarnings(\"unchecked\")&#13;\n    public static &lt;T&gt; T deserialize(String filename) throws IOException, ClassNotFoundException&#13;\n    {&#13;\n        Kryo kryo = new Kryo();&#13;\n        kryo.setRegistrationOptional(true);&#13;\n        //Kryo.getContext().reset();        &#13;\n        InputStream is = new FileInputStream(filename);&#13;\n        ObjectBuffer buffer = new ObjectBuffer(kryo, 100000);&#13;\n        Object obj = buffer.readClassAndObject(is);&#13;\n        is.close();&#13;\n        return (T) obj;&#13;\n    }&#13;\n    &#13;\n    &#13;\n    public static class Class1&#13;\n    {&#13;\n        private Vector&lt;float[]&gt; values = new Vector&lt;float[]&gt;();&#13;\n        public Class1() {&#13;\n            for(int i=0; i &lt; 2; ++i) values.add(new float[i+1]);&#13;\n        }&#13;\n        public float[] getValue(int i) { return values.get(i); }&#13;\n    }&#13;\n    &#13;\n    public static class Class2&#13;\n    {&#13;\n        private Map&lt;String, Vector&lt;LinkedList&lt;Float&gt;&gt;&gt; data = new HashMap&lt;String, Vector&lt;LinkedList&lt;Float&gt;&gt;&gt;();&#13;\n        private transient Class1 class_1 = readClass1();&#13;\n        public Class2() {&#13;\n            &#13;\n            Vector&lt;LinkedList&lt;Float&gt;&gt; value1 = new Vector&lt;LinkedList&lt;Float&gt;&gt;();&#13;\n            value1.add(new LinkedList&lt;Float&gt;());&#13;\n            value1.lastElement().add(1.1f);&#13;\n            value1.lastElement().add(1.2f);&#13;\n            value1.add(new LinkedList&lt;Float&gt;());&#13;\n            value1.lastElement().add(2.1f);&#13;\n            value1.lastElement().add(2.2f);&#13;\n            &#13;\n            Vector&lt;LinkedList&lt;Float&gt;&gt; value2 = new Vector&lt;LinkedList&lt;Float&gt;&gt;();&#13;\n            value2.add(new LinkedList&lt;Float&gt;());&#13;\n            value2.lastElement().add(1.1f);&#13;\n            value2.lastElement().add(1.2f);&#13;\n            value2.add(new LinkedList&lt;Float&gt;());&#13;\n            value2.lastElement().add(2.1f);&#13;\n            value2.lastElement().add(2.2f);&#13;\n            value2.add(new LinkedList&lt;Float&gt;());&#13;\n            value2.lastElement().add(3.1f);&#13;\n            value2.lastElement().add(3.2f);&#13;\n            &#13;\n            data.put(\"key1\", value1);&#13;\n            data.put(\"key2\", value2);&#13;\n        }&#13;\n        public float[] getValue() { return class_1.getValue(1); }&#13;\n        &#13;\n        private Class1 readClass1()&#13;\n        {&#13;\n            try {&#13;\n                return deserialize(\"d:/test_java_class_1.dat\");&#13;\n            } catch (Exception e) {&#13;\n                throw new Error(\"Can't deserialize !\", e);&#13;\n            }&#13;\n        }&#13;\n    }&#13;\n    &#13;\n    &#13;\n    public static void main(String[] args) throws Exception&#13;\n    {&#13;\n        com.esotericsoftware.minlog.Log.TRACE = true;&#13;\n        &#13;\n        Class1 base = new Class1();&#13;\n        serialize(base, \"d:/test_java_class_1.dat\");&#13;\n        Class2 one = new Class2();&#13;\n        System.out.println(one.getValue().length);&#13;\n        serialize(one, \"d:/test_java_class_2.dat\");&#13;\n        Class2 two = deserialize(\"d:/test_java_class_2.dat\");&#13;\n        System.out.println(two.getValue().length);&#13;\n    }&#13;\n    &#13;\n}&#13;\n&#13;\n\n**Attachment:** [Main.java](http://code.google.com/p/kryo/issues/detail?id=50)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=50_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/50", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:44:35", "closed": "2013-11-11 22:44:38", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "\"Can not set field to java.lang.Boolean\"", "body": "_From [carlozan...@gmail.com](https://code.google.com/u/109925922249402533569/) on November 25, 2011 04:02:57_\n\nUsing Kryonet we're having a bit of trouble when moving large-ish objects over a network connection. The error does not happen when connecting to localhost, only when connecting to a remote computer.\n\nThe error itself comes from the depths of Kryo where, for some reason, Kryo is trying to set a field of non-Boolean type to a Boolean value. The particular field which it tries to set is not always the same, either.\n\nAny ideas on why this might be happening?\n\nUsing Kryo/Kryonet v1.04.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=49_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/49", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:44:31", "closed": "2013-11-11 22:44:34", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Build Kryo 1.04", "body": "_From [Rob3rt...@googlemail.com](https://code.google.com/u/102554042193889702033/) on November 18, 2011 09:56:04_\n\nHello,\n\ni want to build kryo 1.04 as maven project.\nThe problem is that in the pom.xml the version is 1.1-SNAPSHOT and\nif i want to build this it returns:\nThe following artifacts could not be resolved: com.esotericsoftware:reflectasm:jar:0.8, com.esotericsoftware:minlog:jar:1.2\n\nWere can i get this artifacts? The tags i can find are in the wrong version. I need this as maven project in svn or git.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=48_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/48", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:44:28", "closed": "2013-11-11 22:44:30", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Compressor cannot handle large graphs", "body": "_From [fang...@gmail.com](https://code.google.com/u/106777011765531892827/) on September 08, 2011 16:44:57_\n\nCompressor only uses a short to store the length of the compressed data (lines 78 and 91).  This cannot be easily changed by subclasses either, since the length is written in the parent class.\n\nI altered Compressor to use int, and was able to successfully retrieve my data.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=47_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/47", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:44:22", "closed": "2013-11-11 22:44:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "exception thrown when using the remote object", "body": "_From [egan.lan...@googlemail.com](https://code.google.com/u/117596701273910364517/) on July 19, 2011 16:04:11_\n\n<b>What steps will reproduce the problem?</b>\n1.install java 7&#13;\n2.run java program&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nnot to throw a exception, exception thrown saying the proxy class isnt registered&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nnewest&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nit worked before i installed the new java&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=46_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/46", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:44:18", "closed": "2013-11-11 22:44:21", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "CompatibleSerializer deserializes wrongly if subclass has the same field as super class", "body": "_From [thin...@gmail.com](https://code.google.com/u/104046616110284029740/) on May 04, 2011 09:33:48_\n\n<b>What steps will reproduce the problem?</b>\n1. Run the code attached.&#13;\n   jvm arg:  -Djava.io.tmpdir=&lt;tempdir to stored the output file&gt;&#13;\n   &#13;\n   //For default FieldSerializer&#13;\n   test.withDefault(); &#13;\n&#13;\n   //For CompatibleFieldSerializer&#13;\n   test.withCompatibleFieldSerializer;&#13;\n&#13;\n &#13;\n2.  If the file is not there it will serialize a sample object to a file and save it to tempdir.&#13;\n    If the file has already existed, the program will deserialize it.&#13;\n&#13;\n<b>3.</b>\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\n//Output with default FieldSerializer: &#13;\nclass[class com.scb.saturn.services.position.NewKryoTest$ChildModel];field1[f1];field2[f2];longField[25];&#13;\n&#13;\n//Output with CompatibleFieldSerializer:&#13;\nclass[class com.scb.saturn.services.position.NewKryoTest$ChildModel];field1[f1];field2[f2];longField[0];&#13;\n&#13;\nExpected the same output from both FieldSerializer and CompatibleFieldSerializer&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.04&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n\n**Attachment:** [NewKryoTest.java](http://code.google.com/p/kryo/issues/detail?id=45)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=45_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/45", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:44:14", "closed": "2013-11-11 22:44:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Unable to deserialize with CompatibleFieldSerializer", "body": "_From [thin...@gmail.com](https://code.google.com/u/104046616110284029740/) on May 03, 2011 08:45:55_\n\n<b>What steps will reproduce the problem?</b>\n1. Create any class with an enum field&#13;\n2. Register the class and enum in step 1 with CompatibleFieldSerializer&#13;\n3. Serialize the class and deserialize it with CompatibleFieldSerializer&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nExpected output: the object should be deserialized correctly&#13;\n&#13;\nReceived exception:&#13;\n&#13;\nClass cannot be created (missing no-arg constructor): test.KryoBackwardCompatiblityTest$TestEnumSer&#13;\nSerialization trace:&#13;\ntestEnum (test.KryoBackwardCompatiblityTest$AModel)&#13;\n    at com.esotericsoftware.kryo.Kryo.newInstance(Kryo.java:688)&#13;\n    at com.esotericsoftware.kryo.Serializer.newInstance(Serializer.java:75)&#13;\n    at com.esotericsoftware.kryo.serialize.CompatibleFieldSerializer.readObjectData(CompatibleFieldSerializer.java:215)&#13;\n    at com.esotericsoftware.kryo.Serializer.readObject(Serializer.java:61)&#13;\n    at com.esotericsoftware.kryo.serialize.CompatibleFieldSerializer.readObjectData(CompatibleFieldSerializer.java:283)&#13;\n    at com.esotericsoftware.kryo.serialize.CompatibleFieldSerializer.readObjectData(CompatibleFieldSerializer.java:215)&#13;\n    at com.esotericsoftware.kryo.Kryo.readClassAndObject(Kryo.java:566)&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\n1.03 &#13;\n1.04&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=44_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/44", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:44:09", "closed": "2013-11-11 22:44:12", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "The size of the serialized array which contains the same String refrence is larger than java built-in", "body": "_From [ma.yue.c...@gmail.com](https://code.google.com/u/116921440124892423711/) on April 20, 2011 18:24:37_\n\n<b>What steps will reproduce the problem?</b>\n1.create a string array which contains the same String reference&#13;\n2.serialize the array with kryo and java built-in&#13;\n3.you will see the size of kryo is much more than java&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nI think the same String should only be serialized once.&#13;\nAnd the size of the array should be smaller than java built-in.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.04&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nthe code is here:&#13;\n@Test&#13;\n    public void testStringSer() throws IOException{&#13;\n        char[] chars = new char[1500];&#13;\n        Arrays.fill(chars, 'a');&#13;\n        String str = new String(chars);&#13;\n        testStringSer(str);&#13;\n        &#13;\n        String[] strArray = new String[]{str, str, str};&#13;\n        testStringArraySer(strArray);&#13;\n    }&#13;\n    &#13;\n    private void testStringSer(String str) throws IOException{&#13;\n        Kryo kryo = new Kryo();&#13;\n        kryo.setRegistrationOptional(true);&#13;\n        ObjectBuffer ob = new ObjectBuffer(kryo, 5 \\* 1024);&#13;\n        byte[] bytesKryo = ob.writeObjectData(str);&#13;\n        System.out.println(\"kryo byte length of string:\"+ bytesKryo.length);&#13;\n        &#13;\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();&#13;\n        ObjectOutputStream oos = new ObjectOutputStream(bos);&#13;\n        oos.writeObject(str);&#13;\n        byte[] bytesJava = bos.toByteArray();&#13;\n        bos.close();&#13;\n        oos.close();&#13;\n        System.out.println(\"java byte length of string:\"+bytesJava.length);&#13;\n    }&#13;\n    &#13;\n    private void testStringArraySer(String[] strArray) throws IOException{&#13;\n        Kryo kryo = new Kryo();&#13;\n        kryo.setRegistrationOptional(true);&#13;\n        ObjectBuffer ob = new ObjectBuffer(kryo, 5 \\* 1024);&#13;\n        byte[] bytesKryo = ob.writeObjectData(strArray);&#13;\n        System.out.println(\"kryo byte length of string array:\"+ bytesKryo.length);&#13;\n        &#13;\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();&#13;\n        ObjectOutputStream oos = new ObjectOutputStream(bos);&#13;\n        oos.writeObject(strArray);&#13;\n        byte[] bytesJava = bos.toByteArray();&#13;\n        bos.close();&#13;\n        oos.close();&#13;\n        System.out.println(\"java byte length of string array:\"+bytesJava.length);&#13;\n    }&#13;\n&#13;\nand the result is:&#13;\nkryo byte length of string:1502&#13;\njava byte length of string:1507&#13;\nkryo byte length of string array:4511&#13;\njava byte length of string array:1557\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=43_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/43", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:44:04", "closed": "2013-11-11 22:44:07", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Optimization for objectbuffer", "body": "_From [rbakhru@gmail.com](https://code.google.com/u/rbakhru@gmail.com/) on March 09, 2011 01:28:44_\n\nHi - \n\nOne suggestion to improve performance of ObjectBuffer on large objects (when at runtime its unknown that they're large, so the buffer's initial capacity is low) -- Is it possible for the buffer to determine by how much its underallocated when it finds that its max capacity is insufficient?  E.g. in our case we're Kryoing an object that contains a byte[], and the byte[] is very large, but it should be possible for Kryo to know how much extra room it needs, and rather than just double the capacity, it could keep doubling until it the new allocated amount meets the new allocation requirement.\n\nHope that makes sense\n\nThanks!\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=42_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/42", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:44:00", "closed": "2013-11-11 22:44:03", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "BufferOverflowException", "body": "_From [flyonst...@gmail.com](https://code.google.com/u/101287173147506919889/) on March 08, 2011 07:00:51_\n\n<b>What steps will reproduce the problem?</b>\n1.create a bean class, holding a reference to another one, like &#13;\n     public class Dinner&#13;\n     {&#13;\n    private Dinner next;&#13;\n&#13;\n    public Dinner getNext()&#13;\n    {&#13;\n        return next;&#13;\n    }&#13;\n&#13;\n    public void setNext(Dinner next)&#13;\n    {&#13;\n        this.next = next;&#13;\n    }   &#13;\n     }&#13;\n2.instantiate one and set the next to itself,&#13;\n     Dinner d = new Dinner();&#13;\n     d.setNext(d);&#13;\n3.Use kryo ( version 1.01 ) to serialize it,&#13;\n     byte[] bytes = buffer.writeObjectData(src);&#13;\n  &#13;\n   You will get the BufferOverflowException for sure.&#13;\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=41_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/41", "user": "ghost", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2013-11-11 22:43:55", "closed": "2013-11-11 22:43:58", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Buffer Allocation Fails when using Integer.MAX_VALUE", "body": "_From [rbakhru@gmail.com](https://code.google.com/u/rbakhru@gmail.com/) on March 06, 2011 14:34:02_\n\n<b>What steps will reproduce the problem?</b>\n1. Use an ObjectBuffer with a max allocation of Integer.MAX_VALUE&#13;\n2. Try allocate a very large object&#13;\n3. On the last increment of trying to double the buffer, the line that has int newCapacity = Math.min(maxCapacity, capacity \\* 2) results in a negative value because capacity*2 flips to negative.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nIt should take maxCapacity over a negative value&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.03&#13;\n&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=40_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/40", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:43:52", "closed": "2013-11-11 22:43:54", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "2D arrays are incorrectly (de)serialized", "body": "_From [yuri.gav...@gmail.com](https://code.google.com/u/105297752852798510029/) on March 03, 2011 08:18:52_\n\n<b>What steps will reproduce the problem?</b>\n1. Run the following code:&#13;\npublic static void main(String[] args)&#13;\n  {&#13;\n    Kryo kryo = new Kryo();&#13;\n    kryo.setRegistrationOptional(true);&#13;\n    ByteBuffer buffer = ByteBuffer.allocate(1024);&#13;\n&#13;\n    float[][] array = new float[4][];&#13;\n    array[0] = new float[]{0.0f,1.0f};&#13;\n    array[1] = null;&#13;\n    array[2] = new float[]{2.0f,3.0f};&#13;\n    array[3] = new float[]{3.0f};&#13;\n    print(array,\"Original array:\");&#13;\n&#13;\n    kryo.writeClassAndObject(buffer, array);&#13;\n    buffer.rewind();&#13;\n    Object o = kryo.readClassAndObject(buffer);&#13;\n    float[][] array_ = (float[][])o;&#13;\n    print(array_,\"Deserialized array:\");&#13;\n  }&#13;\n&#13;\n  static void print(float[][] array, String header)&#13;\n  {&#13;\n    System.out.println(header);&#13;\n    for(int i=0;i&lt;array.length;i++)&#13;\n    {&#13;\n      System.out.println(Arrays.toString(array[i]));&#13;\n    }&#13;\n    System.out.println();&#13;\n  }&#13;\n&#13;\nI get this:&#13;\nOriginal array:&#13;\n[0.0, 1.0]&#13;\nnull&#13;\n[2.0, 3.0]&#13;\n[3.0]&#13;\n&#13;\nDeserialized array:&#13;\n[0.0, 1.0]&#13;\n[2.0, 3.0]&#13;\n[3.0, 0.0]&#13;\n[0.0, 0.0]&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nI expect the data to be deserialized into array with the same data.&#13;\nDeserialized array should be the same as Original array, but it isn't.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.04&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nWith 1.02 I had an ArrayOutOfBoundsException in not the same, but similar situation.&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=39_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/39", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:43:47", "closed": "2013-11-11 22:43:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Collections/Map/Array references at not handled by the ReferenceFieldSerializer", "body": "_From [mathieu....@gmail.com](https://code.google.com/u/108915948300482283699/) on March 02, 2011 23:32:04_\n\n<b>What steps will reproduce the problem?</b>\n1.When 2 objects reference the same collection/map/array and you make a roundtrip (serialize/deserialize), you end up with 2 collections/map/array instead of the same ones in each object.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nSerializing the same collection should result in only one collection after deserialization. Right now I end up with 2 collections. I understand the the ReferenceFieldSerializer is not intended to handle this case, because Collections/Map/Array are handled by other serializers so I made some modifications to the code to be able to handle this case with a decorator. If you want to integrate it to kryo, feel free to, or maybe you have a better approch to propose.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.04&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nAttached is a patch for the modifications and a jUnit test for the case.\n\n**Attachment:** [kryo_collections_references.patch](http://code.google.com/p/kryo/issues/detail?id=38)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=38_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/38", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:43:43", "closed": "2013-11-11 22:43:46", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Enums with Method definitions", "body": "_From [knowledg...@gmail.com](https://code.google.com/u/112338194384781701863/) on January 28, 2011 03:42:12_\n\n<b>What steps will reproduce the problem?</b>\n1. Create an Enum A where the constant values have method definitions. Create a class B with a public field of type A.&#13;\n2.Instantiate B and serialize it where handling of unregistered classes is enabled.&#13;\n3.Deserialize it.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nThe expected output is that the original output gets recovered. Instead, a null pointer exception is thrown (which gets re-thrown as a serialization exception.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nI tried this with 1.03 and the current head of trunk.&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nFor Enums where the constant values have method definitions, Java assigns each enumeration value its own inner class. For an Enum A with values \"One\" and \"Two\", the class of A.One would be A$1. This seems to cause trouble with Kryo. When registration is mandatory, Kryo will fail on serialization because A$1 has not been registered even though A has. But even if I register A.One and A.Two explicitly, this still causes trouble inside the FieldSerializer for objects that use this enum as a field type.&#13;\n&#13;\nMaybe using the declaring class of an enum constant (i.e. A.One.getDeclaringClass()) rather than getClass() would solve the problem.&#13;\n&#13;\nExample stack trace:&#13;\ncom.esotericsoftware.kryo.SerializationException: Unable to deserialize object of type: edu.umd.umiacs.dogma.diskgraph.serializer.test.TestClass&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:596)&#13;\n    at edu.umd.umiacs.dogma.diskgraph.serializer.test.SerializerUnitTest.objectWriteRead(SerializerUnitTest.java:52)&#13;\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)&#13;\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)&#13;\n    at java.lang.reflect.Method.invoke(Method.java:597)&#13;\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)&#13;\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)&#13;\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)&#13;\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)&#13;\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&#13;\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)&#13;\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:73)&#13;\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:46)&#13;\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:180)&#13;\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:41)&#13;\n    at org.junit.runners.ParentRunner$1.evaluate(ParentRunner.java:173)&#13;\n    at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)&#13;\n    at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)&#13;\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:220)&#13;\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:46)&#13;\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)&#13;\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)&#13;\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)&#13;\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)&#13;\nCaused by: com.esotericsoftware.kryo.SerializationException: Serialization trace:&#13;\ne (edu.umd.umiacs.dogma.diskgraph.serializer.test.TestClass)&#13;\n    at com.esotericsoftware.kryo.serialize.FieldSerializer.readObjectData(FieldSerializer.java:237)&#13;\n    at com.esotericsoftware.kryo.serialize.FieldSerializer.readObjectData(FieldSerializer.java:199)&#13;\n    at com.esotericsoftware.kryo.Serializer.readObject(Serializer.java:61)&#13;\n    at com.esotericsoftware.kryo.Kryo.readObject(Kryo.java:592)&#13;\n    ... 25 more&#13;\nCaused by: java.lang.NullPointerException&#13;\n    at com.esotericsoftware.kryo.serialize.EnumSerializer.readObjectData(EnumSerializer.java:24)&#13;\n    at com.esotericsoftware.kryo.serialize.FieldSerializer.readObjectData(FieldSerializer.java:219)&#13;\n    ... 28 more&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=37_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/37", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:43:38", "closed": "2013-11-11 22:43:41", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Zip archive does not expand into a directory", "body": "_From [sponsore...@gmail.com](https://code.google.com/u/103422734487991703677/) on December 31, 2010 02:14:15_\n\nIt is convention to zip a directory so that on expansion you get a directory. Instead I got the contents of the kryo directory sprayed across my working area which I then had to go an clean up manually.\n\n<b>What steps will reproduce the problem?</b>\n1.unzip kryo.zip&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nkryo-1.0.3&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=36_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/36", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:43:34", "closed": "2013-11-11 22:43:36", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "BufferUnderflowException in CompatibleFieldSerializer", "body": "_From [mike.new...@gmail.com](https://code.google.com/u/111883712278272446811/) on December 22, 2010 22:51:25_\n\n<b>What steps will reproduce the problem?</b>\nSerializing large objects extends the Context.getByteArray() indefinitely ( and it seems it is not reset under any conditions ). On subsequent calls to serialize ( another or the same object ) the temp byte array is still very large and may exceed the length of available bytes in the buffer on buffer.get()&#13;\n&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nBufferUnderflowException thrown at line 189 of CompatibleFieldSerializer&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.03&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=35_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/35", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:43:30", "closed": "2013-11-11 22:43:32", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "IllegalArgumentException thrown using CompatibleFieldSerializer during deserialization", "body": "_From [mike.new...@gmail.com](https://code.google.com/u/111883712278272446811/) on December 22, 2010 19:16:15_\n\n<b>What steps will reproduce the problem?</b>\nNo problems in serializing / deserializing using a default FieldSerializer. Uisng the CompatibleFieldSerializer serializing / deserializing round-trips work for shallow graphs but for deeply nested collections the round-trip fails by throwing an IllegalArgumentException ( usually during deserialization and when passing a null value to a primitive value field ). Cant tell if its the deserialization thats broken or the serialized stream is incomplete / wrong.&#13;\n&#13;\nRegistering the classes to use the CompatibleFieldSerializer remedies the problem in some cases ( such as the example attached ) but in others it has no effect ( not attached ).&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nExpected round trip serializing / deserializing to produce equivalent objects - instead the test case attached errors out when using CompatibleFieldSerializer &#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.03&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nAttached test case and MultiMap / aggregate object to reproduce the error&#13;\n&#13;\n\n**Attachment:** [KryoTest.java Finger.java MultiMap.java](http://code.google.com/p/kryo/issues/detail?id=34)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=34_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/34", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:43:24", "closed": "2013-11-11 22:43:28", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Serializes items that can't be deserialized", "body": "_From [rbakhru@gmail.com](https://code.google.com/u/rbakhru@gmail.com/) on December 20, 2010 18:23:03_\n\n<b>What steps will reproduce the problem?</b>\n1. Register a number of classes with Kryo, including 'Class.class'&#13;\n2. Serialize something containing a Class as a field with Kryo&#13;\n3. Deserialize with Kryo&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nWe'd expect that it would fail serializing given that it won't be able to deserialize due to the 'newInstance' constraint w/ Class.  Instead it serializes just fine, but a VM with the same registration properties as the current one can't deserialize it.&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nLatest&#13;\n&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=33_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/33", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:43:16", "closed": "2013-11-11 22:43:22", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Internal Class Version in Bytecode Generated Classes", "body": "_From [fran.fue...@gmail.com](https://code.google.com/u/109202352462598111466/) on November 24, 2010 09:20:08_\n\nThe generated classes with ASM should have the internal version compatible with the JVM that runs the code. Actually, is fixed in the 1.6 version.\n\nThis is not a big problem (maybe only we still running our products in 1.5 only), but maybe should say something about \"for JRE 1.6+\" somewhere in the documentation.\n\nThanks.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=32_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/32", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:43:10", "closed": "2013-11-11 22:43:15", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "StackOverflowError when serializing set containing itself", "body": "_From [chaschev](https://code.google.com/u/chaschev/) on November 17, 2010 15:37:44_\n\n<b>What steps will reproduce the problem?</b>\n1. public class CyclicSet {&#13;\n    public Set set = new HashSet();&#13;\n    {&#13;\n        set.add(set);&#13;\n    }&#13;\n   }   &#13;\n2. Then just try to serialize new CyclicSet() &#13;\n&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\n I expect this object to be serialized.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n &#13;\n 1.03\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=31_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/31", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:43:06", "closed": "2013-11-11 22:43:09", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Public final fields are being set through ASM instead of reflection in FieldSerializer", "body": "_From [matei.za...@gmail.com](https://code.google.com/u/108179495440602545132/) on November 09, 2010 08:49:33_\n\n<b>What steps will reproduce the problem?</b>\n1. Create and serialize a class with a public final field&#13;\n2. Try to deserialize it&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nA java.lang.IllegalAccessError is thrown when the ASM-generated helper class tries to set the field's value.&#13;\n&#13;\nOne would expect the changes in <a title=\"final fields should be handled by FieldSerializer if setFieldsAsAccessible is set to true\" class=\"closed_ref\" href=\"/p/kryo/issues/detail?id=15\"> issue #15 </a> to call setAccessible on the field, but because the field gets put into the publicFields array list in FieldSerializer.rebuildCachedFields, it is handled with ASM regardless of the fact that it's final.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n&#13;\n1.03&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\nThe fix is very simple -- in the if statement in FieldSerializer.java that adds elements to publicFields (line 99 in Kryo 1.03), add the condition !Modifier.isFinal(modifiers).\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=30_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/30", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:43:00", "closed": "2013-11-11 22:43:04", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Field Kryo.listeners should be declared volatile", "body": "_From [kaspe...@gmail.com](https://code.google.com/u/118377905324468759943/) on October 07, 2010 11:04:20_\n\nNo happens-before relationship between updates to listeners\naddListener/removeListener and calls to removeRemoteEntity\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=29_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/29", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:42:57", "closed": "2013-11-11 22:42:59", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Not able to Serialize a class which had EnumSet as a member variable.", "body": "_From [manish.s...@gmail.com](https://code.google.com/u/100620801448429509570/) on September 30, 2010 06:53:56_\n\n<b>What steps will reproduce the problem?</b>\n1. Register a class which has EnumSet in it&#13;\n<b>2.</b>\n<b>3.</b>\n&#13;\n<b>What is the expected output? What do you see instead?</b>\n&#13;\nCaused by: java.lang.IllegalArgumentException: Class is not registered: java.util.RegularEnumSet&#13;\n    at com.esotericsoftware.kryo.Kryo.getRegisteredClass(Kryo.java:311)&#13;\n    at com.esotericsoftware.kryo.Kryo.writeClass(Kryo.java:366)&#13;\n    at com.esotericsoftware.kryo.serialize.FieldSerializer.writeObjectData(FieldSerializer.java:165)&#13;\n    ... 3 more&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.03&#13;\n&#13;\n&#13;\n<b>Please provide any additional information below.</b>\nRegularEnumSet is not public so not able to register I could register EnumSet but not working.&#13;\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=28_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/28", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:42:53", "closed": "2013-11-11 22:42:55", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Can't figure out how to get rid of some loggings", "body": "_From [tomas.fe...@gmail.com](https://code.google.com/u/106808517373981265288/) on September 28, 2010 00:07:45_\n\n<b>What steps will reproduce the problem?</b>\n1. file read&#13;\n2. kryo.register(MarketData.class, new DeltaCompressor(kryo, new FieldSerializer(kryo, MarketData.class)));&#13;\n3. buffer.writeObject(fileOutputStream, o);&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nno logging&#13;\n&#13;\nI see:&#13;\ncompress APPEND 10: -64,-115,-73,1,-14,-59,-119,-105,-127,66,&#13;\ncompress APPEND 29: 63,-26,92,-111,-47,78,59,-51,-96,-128,-79,1,63,-26,90,28,-84,8,49,39,-64,-124,61,-56,-35,-119,-105,-127,66,&#13;\ncompress COPY at 0, length 14: 63,-26,92,-111,-47,78,59,-51,-96,-128,-79,1,63,-26,&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.03&#13;\n&#13;\nActually it's not minlog logs, in code there are system.outs, and some debug boolean, do I have to set it to false somehow?\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=27_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/27", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:42:49", "closed": "2013-11-11 22:42:51", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Support concurrent access of Kryo.register", "body": "_From [martin.grotzke](https://code.google.com/u/martin.grotzke/) on September 08, 2010 15:05:35_\n\nWhen Kryo is used in a multi-threaded environment external synchronization is required to ensure that the internally used HashMap classToRegisteredClass (and probably the IntHashMap idToRegisteredClass) cannot be broken which might cause infinite loops.\n\nThe suggested patch now synchronizes write access of classToRegisteredClass on exactly this object. From my understanding this is enough to ensure that the HashMap internal linked lists cannot be broken. As read access is not synchronized it might happen that some thread gets an \"invalid\" object from the map that is replaced by a second thread, but IMHO this isn't an issue as correct functionality/behavior is not affected by this.\n\nAs the synchronized block on classToRegisteredClass also included the idToRegisteredClass.put, I think this potential concurrency issue is also solved.\n\nIs this patch acceptable? Can you apply it as soon as possible and make a new release? This would save the world for me right now :-)\n\n**Attachment:** [Kryo_concurrentHashMapAccess.patch](http://code.google.com/p/kryo/issues/detail?id=26)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=26_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/26", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:42:45", "closed": "2013-11-11 22:42:47", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Feature: Print object graph when serialization fails", "body": "_From [martin.grotzke](https://code.google.com/u/martin.grotzke/) on August 11, 2010 11:02:52_\n\nWhen serialization fails it would be really helpfull to get the object graph printed to get an idea of potential issues.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=24_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/24", "user": "ghost", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2013-11-11 22:42:35", "closed": "2013-11-11 22:42:38", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Incorrect (de)serialization of java.util.Date", "body": "_From [vincas.m...@gmail.com](https://code.google.com/u/107502656793763807437/) on August 03, 2010 13:48:36_\n\n<b>What steps will reproduce the problem?</b>\n1. Make a new Kryo object and register java.util.Date class.&#13;\n2. Make a new Date object and serialize it.&#13;\n3. Deserialize the Date object.&#13;\n&#13;\n<b>What is the expected output? What do you see instead?</b>\nThe original date object and the deserialized one should be identical.&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\n1.01&#13;\n&#13;\nQuick google'ing on this problem reveals a related note: <a href=\"http://stackoverflow.com/questions/2725233/kryo-serialization-library-is-it-used-in-production\" rel=\"nofollow\">http://stackoverflow.com/questions/2725233/kryo-serialization-library-is-it-used-in-production</a>&#13;\n&#13;\nThe workaroud provided there is to override the Date serializer:&#13;\n[code]&#13;\nkryo.register(Date.class, &#13;\n  new SimpleSerializer&lt;Date&gt;() {&#13;\n   @Override public void write (ByteBuffer b, Date d) { b.putLong(d.getTime()); }&#13;\n   @Override public Date read (ByteBuffer b) { return new Date(b.getLong()); }&#13;\n  });&#13;\n[/code]&#13;\n&#13;\nI attached a unit test to reproduce the problem. It also contains the workaround code.&#13;\n\n**Attachment:** [KryoDateDefect.java](http://code.google.com/p/kryo/issues/detail?id=23)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=23_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/23", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:42:31", "closed": "2013-11-11 22:42:33", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Better error reporting for FieldSerializer", "body": "_From [martin.grotzke](https://code.google.com/u/martin.grotzke/) on May 26, 2010 16:48:25_\n\nRight now, when there's an error during deserialization somewhere below \nFieldSerializer.readObjectData it's hard to tell what's the reason for the \nissue.\n\nFor debugging I deployed patched the FieldSerializer so that I was able to \nlocate the issue.\n\nThe attached patch is a suggestion for an improvement.\n\n**Attachment:** [FieldSerializer.java.patch](http://code.google.com/p/kryo/issues/detail?id=21)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=21_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/21", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:42:18", "closed": "2013-11-11 22:42:24", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Deserialization of SomeIFace[] with Enum as impl of SomeIFace fails", "body": "_From [martin.grotzke](https://code.google.com/u/martin.grotzke/) on May 26, 2010 00:44:30_\n\nThe attached ArraySerializerTest fails with \njava.lang.IllegalArgumentException: array element type mismatch\n    at java.lang.reflect.Array.set(Native Method)\n    at \ncom.esotericsoftware.kryo.serialize.ArraySerializer.readArray(ArraySerializ\ner.java)\n\nJust place the ArraySerializerTest in \ntest/com/esotericsoftware/kryo/serialize and execute.\n\nI ran it against the kryo trunk (rev 108).\n\nWe have such a combination of an interface-array and enum implementations, \nso this is a real issue for us.\n\n**Attachment:** [ArraySerializerTest.java](http://code.google.com/p/kryo/issues/detail?id=20)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=20_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/20", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:42:13", "closed": "2013-11-11 22:42:17", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ByteArrayCompressor.compress() allocates byte array that is too short if input buffer length > 2048 ", "body": "_From [paul.run...@gmail.com](https://code.google.com/u/115435931416558939613/) on April 22, 2010 09:45:02_\n\nIn Kryo 1.0, when ByteArrayCompressor.compress() is passed an inputBuffer \nthat contains more than 2048 bytes to be compressed, it throws an \nIndexOutOfBoundsException.\n\nHere's the code.\n\npublic void compress (ByteBuffer inputBuffer, Object object, ByteBuffer \noutputBuffer) {\n    Context context = Kryo.getContext();                        // 1\n    byte[] inputBytes = context.getBuffer(bufferSize).array();  // 2\n    int inputLength = inputBuffer.remaining();                  // 3\n    inputBuffer.get(inputBytes, 0, inputLength);                // 4\n    compress(inputBytes, inputLength, outputBuffer);            // 5\n}\n\nThe problem is that line 2 will normally return a byte array that is only \n2048 bytes long and line 4 will throw an exception if the 'inputBytes' \narray is shorter than 'inputLength'.\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=18_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/18", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:41:55", "closed": "2013-11-11 22:41:58", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "ReferenceFieldSerializerTest failure: non static inner class", "body": "_From [pfirm...@bigpond.net.au](https://code.google.com/u/103758328402221037731/) on April 12, 2010 21:52:41_\n\nHi Nate,\n\nI've checked out the latest revision of kryo from svn and built using\nNetbeans 6.0.1\n\n$ uname -a\nSunOS bluto 5.10 Generic_137111-06 sun4u sparc SUNW,Ultra-80\n\n$ java -version\njava version \"1.6.0_07\"\nJava(TM) Platform, Standard Edition for Business (build 1.6.0_07-b06)\nJava HotSpot(TM) Server VM (build 10.0-b23, mixed mode)\n\nThese are the failure results, all other tests are passing:\n\nTestsuite: com.esotericsoftware.kryo.serialize.ReferenceFieldSerializerTest\nTests run: 5, Failures: 2, Errors: 0, Time elapsed: 1.028 sec\n\nTestcase:\ntestNonStaticInnerClassPublicConstructor(com.esotericsoftware.kryo.serialize.ReferenceFieldSerializerTest):\nFAILED\nIncorrect length. expected:<18> but was:<15>\njunit.framework.AssertionFailedError: Incorrect length. expected:<18> but\nwas:<15>\n        at\ncom.esotericsoftware.kryo.KryoTestCase.roundTripKryo(KryoTestCase.java:86)\n        at\ncom.esotericsoftware.kryo.KryoTestCase.roundTrip(KryoTestCase.java:74)\n        at\ncom.esotericsoftware.kryo.serialize.ReferenceFieldSerializerTest.testNonStaticInnerClassPublicConstructor(ReferenceFieldSerializerTest.java:76)\n\nTestcase:\ntestNonStaticInnerClassPrivateConstructor(com.esotericsoftware.kryo.serialize.ReferenceFieldSerializerTest):\nFAILED\nIncorrect length. expected:<18> but was:<15>\njunit.framework.AssertionFailedError: Incorrect length. expected:<18> but\nwas:<15>\n        at\ncom.esotericsoftware.kryo.KryoTestCase.roundTripKryo(KryoTestCase.java:86)\n        at\ncom.esotericsoftware.kryo.KryoTestCase.roundTrip(KryoTestCase.java:74)\n        at\ncom.esotericsoftware.kryo.serialize.ReferenceFieldSerializerTest.testNonStaticInnerClassPrivateConstructor(ReferenceFieldSerializerTest.java:91)\n\nTest com.esotericsoftware.kryo.serialize.ReferenceFieldSerializerTest FAILED\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=16_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/16", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:33:55", "closed": "2013-11-11 22:33:57", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "final fields should be handled by FieldSerializer if setFieldsAsAccessible is set to true", "body": "_From [martin.grotzke](https://code.google.com/u/martin.grotzke/) on April 05, 2010 23:10:33_\n\nThe FieldSerializer right now does not handle final fields. It should do so if setFieldsAsAccessible is set to true \n(default). As an alternative, it would be nice to have the possible to have s.th. like \nsetSupportFinalFields(boolean).\n\nAttached is a patch for FieldSerializer that checks setFieldsAsAccessible and does not skip the field if \nsetFieldsAsAccessible is true.\n\n**Attachment:** [FieldSerializer_finalFields.patch](http://code.google.com/p/kryo/issues/detail?id=15)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=15_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/15", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:33:47", "closed": "2013-11-11 22:33:53", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Provide maven pom.xml", "body": "_From [martin.grotzke](https://code.google.com/u/martin.grotzke/) on April 05, 2010 21:17:40_\n\nIn kryo-serializers I just wanted to reference the latest kryo from trunk without just referencing the projects \nin eclipse :-)\n\nFor this I created a very simple pom.xml (for maven2) that builds kryo, see the file attached.\nAs version I chose 1.1-SNAPSHOT as a wild guess. Stuff like scm info, license, mailing list etc. is left out...\n\nWhen you run \"$ mvn install\" maven tells you that neither minlog nor reflectasm is available in public repos \nand that you need to install them. So just do\n$ mvn install:install-file -DgroupId=com.esotericsoftware -DartifactId=reflectasm -Dversion=0.8 -\nDpackaging=jar -Dfile=lib/reflectasm-0.8.jar\nand\n$ mvn install:install-file -DgroupId=com.esotericsoftware -DartifactId=minlog -Dversion=1.2 -\nDpackaging=jar -Dfile=lib/minlog-1.2.jar\nand afterwards again\n$ mvn install\n\nThen everything's fine.\n\nIt would be great to find this or s.th. similar in kryo. :)\n\n**Attachment:** [pom.xml](http://code.google.com/p/kryo/issues/detail?id=14)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=14_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/14", "user": "ghost", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2013-11-11 22:33:37", "closed": "2013-11-11 22:33:45", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Wrong buffer contents (bytes) when using ObjectBuffer to read object data", "body": "_From [martin.r...@gmail.com](https://code.google.com/u/112784064517998338762/) on March 23, 2010 21:18:20_\n\nDetailed Problem Description:\n\nThe issue appears when the ObjectBuffer is created with an initial capacity\nthat is lower than the object data to read. (If the initial capacity is\ngreater than the size of the object to read, the issue does not appear).\n\nThe source of the problem seems to reside in the resizeBuffer method in the\nfollowing statement:\nif (preserveContents) newBuffer.put(buffer);\n\nnewBuffer.put only transfers the REMAINING bytes of buffer (the source\nbuffer). I think the statement should be corrected to:\nif (preserveContents) {\n  buffer.position(0);\n  newBuffer.put(buffer);\n}\n\n<b>What is the expected output? What do you see instead?</b>\nWithout the fix above I get a wrong sequence of bytes due to copying only&#13;\nremaining bytes when resizing the buffer.&#13;\n&#13;\n&#13;\n<b>What version of the Kryo are you using?</b>\nVersion 1.0&#13;\n&#13;\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=11_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/11", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:32:54", "closed": "2013-11-11 22:32:56", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "BigDecimal and BigInteger Serialization Support", "body": "_From [joe.m.je...@gmail.com](https://code.google.com/u/105668038242099223422/) on March 11, 2010 04:51:10_\n\nKryo should support BigDecimal and BigInteger classes out of the box.\n\nThey could probably stand to be optimized but I have attached Serializers\nto provide the basic required functionality, and appropriate unit tests.\n\n**Attachment:** [BigDecimalSerializer.java BigIntegerSerializer.java BigDecimalSerializerTest.java BigIntegerSerializerTest.java](http://code.google.com/p/kryo/issues/detail?id=9)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=9_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/9", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:32:40", "closed": "2013-11-11 22:32:42", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Circular field-types", "body": "_From [m.br...@gmx.de](https://code.google.com/u/105898782153975993999/) on March 01, 2010 09:08:41_\n\nHello\n\nI'm just investigating alternativs for java serialization. We are using\nSpringHTTPInvoker to transmit objects. After it seems everything should run\nnow. I run into a Stackoverflow during serialisation. We have a quite\ncomplex entity-structure where it is possible to navigate forth and back\nthrough the object tree. When I look at the stacktrace I would say the\nrepeating fieldtypes are the problem.\n\njava.lang.StackOverflowError\n    at java.lang.reflect.AccessibleObject.<init>(AccessibleObject.java:137)\n    at java.lang.reflect.Field.<init>(Field.java:104)\n    at java.lang.reflect.Field.copy(Field.java:127)\n    at java.lang.reflect.ReflectAccess.copyField(ReflectAccess.java:122)\n    at sun.reflect.ReflectionFactory.copyField(ReflectionFactory.java:289)\n    at java.lang.Class.copyFields(Class.java:2739)\n    at java.lang.Class.getDeclaredFields(Class.java:1743)\n    at\ncom.esotericsoftware.kryo.serialize.FieldSerializer.rebuildCachedFields(FieldSerializer.java:65)\n    at\ncom.esotericsoftware.kryo.serialize.FieldSerializer.<init>(FieldSerializer.java:52)\n    at com.esotericsoftware.kryo.Kryo.getDefaultSerializer(Kryo.java:224)\n    at com.esotericsoftware.kryo.Kryo.getRegisteredClass(Kryo.java:240)\n    at\ncom.esotericsoftware.kryo.serialize.FieldSerializer.rebuildCachedFields(FieldSerializer.java:100)\n    at\ncom.esotericsoftware.kryo.serialize.FieldSerializer.<init>(FieldSerializer.java:52)\n    at com.esotericsoftware.kryo.Kryo.getDefaultSerializer(Kryo.java:224)\n    at com.esotericsoftware.kryo.Kryo.getRegisteredClass(Kryo.java:240)\n    at\ncom.esotericsoftware.kryo.serialize.FieldSerializer.rebuildCachedFields(FieldSerializer.java:100)\n    at\ncom.esotericsoftware.kryo.serialize.FieldSerializer.<init>(FieldSerializer.java:52)\n    at com.esotericsoftware.kryo.Kryo.getDefaultSerializer(Kryo.java:224)\n    at com.esotericsoftware.kryo.Kryo.getRegisteredClass(Kryo.java:240)\n    at\ncom.esotericsoftware.kryo.serialize.FieldSerializer.rebuildCachedFields(FieldSerializer.java:100)\n    at\ncom.esotericsoftware.kryo.serialize.FieldSerializer.<init>(FieldSerializer.java:52)\n    at com.esotericsoftware.kryo.Kryo.getDefaultSerializer(Kryo.java:224)\n    at com.esotericsoftware.kryo.Kryo.getRegisteredClass(Kryo.java:240)\n<snip>\n\nI'm wondering if kryo would have the same problem with repeated objects and\ncircular references.\nMaybee an IdentiyHashMap would solve this during processing the fields.\n\nCheers\nMarco\n\n<b>What version of the product are you using? On what operating system?</b>\nWindows Kryo 0.99&#13;\n&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=8_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/8", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "invalid"], "created": "2013-11-11 22:26:32", "closed": "2013-11-11 22:26:39", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "not all fields are correctly serialized", "body": "_From [kp86...@googlemail.com](https://code.google.com/u/114677539436478315023/) on November 30, 2009 04:36:08_\n\nfields with the modifier final should be serialized, as they can contain\nruntime data. Same goes to static fields\n\nclass Foo {\n    static int count = 0;\n    final int ID;\n\n```\npublic Foo() {\n    ID = count++;\n}\n```\n\n}\n\nthe only fields not needed to be serialized are: \"transient\", \"static final\"\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=6_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/6", "user": "ghost", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2013-11-11 22:25:38", "closed": "2013-11-11 22:25:50", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Cann't read serialized ArrayList or HashMap", "body": "_From [yipen...@gmail.com](https://code.google.com/u/103494309728684871610/) on November 09, 2009 16:05:34_\n\n<b>What steps will reproduce the problem?</b>\n        Kryo kryo = new Kryo();&#13;\n        kryo.register(ArrayList.class);&#13;\n        //TestClass stc = new TestClass();&#13;\n        ArrayList al = new ArrayList(Arrays.asList(\"1\", \"2\", \"3\"));&#13;\n        ByteBuffer buffer = ByteBuffer.allocate(1024);&#13;\n        &#13;\n        kryo.writeObject(buffer,al); &#13;\n        buffer.flip();      &#13;\n        ArrayList stc1 = kryo.readObject(buffer, ArrayList.class);&#13;\n        System.out.println(stc1.get(1));&#13;\n<b>What is the expected output? What do you see instead?</b>\nException is java.nio.BufferUnderflowException&#13;\n&#13;\n<b>What version of the product are you using? On what operating system?</b>\n&#13;\n0.92, XP SP2 and jdk 1.6&#13;\n<b>Please provide any additional information below.</b>\n&#13;\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=4_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/4", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:24:15", "closed": "2013-11-11 22:24:24", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "StringSerializer decode error", "body": "_From [minwang...@gmail.com](https://code.google.com/u/104212142272760458439/) on October 31, 2009 00:53:14_\n\nStringSerializer's get() reads too much data from the buffer.\n\nput() counts byte[]'s length, but get() reads char[length],\nAs some char is more then 1 byte(eg. chinese), it causes an error.\n\nThe fixed get() looks like:\n    static public String get (final ByteBuffer buffer) {\n        int length = IntSerializer.get(buffer, true);\n        Context context = Kryo.getContext();\n        byte[] bytes = (byte[])context.get(\"byteArray\");\n        if (bytes == null || bytes.length < length) {\n            bytes = new byte[length];\n            context.put(\"byteArray\", bytes);\n        }\n        buffer.get(bytes, 0, length);\n        return new String(bytes, 0, length, charset);\n    }\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=3_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/3", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported"], "created": "2013-11-11 22:24:03", "closed": "2013-11-11 22:24:06", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "infinite loop when child object reference parent", "body": "_From [rafa...@gmail.com](https://code.google.com/u/106547037463435580145/) on October 28, 2009 20:03:52_\n\nIt looks like kryo cannot serialize objects with cyclic reference :\n\nclass Parent {\n    List<Child> children;\n}\n\nclass Child {\n    Parent parent;\n}\n\nDo you think kryo can support those objects some day ?\n\nThanx\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=2_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/2", "user": "ghost", "labels": ["Priority-Medium", "bug", "duplicate", "imported"], "created": "2013-11-11 22:23:59", "closed": "2013-11-11 22:24:02", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "java.nio.BufferOverflowException", "body": "_From [xjod...@gmail.com](https://code.google.com/u/105153134932698706622/) on October 28, 2009 05:06:45_\n\nWhen you serialise a large amount of data the ByteBuffer has not enought\navailable space and throw an exception.\n\n**Attachment:** [TestKryo.java](http://code.google.com/p/kryo/issues/detail?id=1)\n\n_Original issue: http://code.google.com/p/kryo/issues/detail?id=1_\n", "url": "https://github.com/EsotericSoftware/kryo/issues/1", "user": "ghost", "labels": ["Priority-Medium", "bug", "imported", "wontfix"], "created": "2013-11-11 22:23:47", "closed": "2013-11-11 22:23:56", "commits": {"1603b8aee195c474c788eff707f90578302bab19": {"commitGHEventType": "referenced", "commitUser": "romix"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "1603b8aee195c474c788eff707f90578302bab19", "commitGHEventType": "referenced", "commitUser": "romix", "commitParents": ["aacf104f7f74d59ebae6535a996c92b58f12d10b", "eaf8316648cf8f0f5a81d2a4a3ee424dbe234b2c"], "nameRev": "1603b8aee195c474c788eff707f90578302bab19 tags/kryo-2.24.0~8^2~1", "commitMessage": "Merge pull request #1 from EsotericSoftware/master\n\nRebase on current Kryo trunk", "commitDateTime": "2014-01-25 03:36:45", "authoredDateTime": "2014-01-25 03:36:45", "commitGitStats": [{"filePath": "pom.xml", "insertions": 6, "deletions": 11, "lines": 17}, {"filePath": "src/com/esotericsoftware/kryo/Kryo.java", "insertions": 136, "deletions": 90, "lines": 226}, {"filePath": "src/com/esotericsoftware/kryo/Serializer.java", "insertions": 11, "deletions": 1, "lines": 12}, {"filePath": "src/com/esotericsoftware/kryo/io/ByteBufferOutput.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "src/com/esotericsoftware/kryo/io/Output.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "src/com/esotericsoftware/kryo/io/UnsafeInput.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/com/esotericsoftware/kryo/io/UnsafeMemoryInput.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "src/com/esotericsoftware/kryo/io/UnsafeMemoryOutput.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/com/esotericsoftware/kryo/io/UnsafeOutput.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/com/esotericsoftware/kryo/serializers/AsmCacheFields.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/com/esotericsoftware/kryo/serializers/BeanSerializer.java", "insertions": 0, "deletions": 4, "lines": 4}, {"filePath": "src/com/esotericsoftware/kryo/serializers/BlowfishSerializer.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "src/com/esotericsoftware/kryo/serializers/DefaultArraySerializers.java", "insertions": 0, "deletions": 2, "lines": 2}, {"filePath": "src/com/esotericsoftware/kryo/serializers/DefaultSerializers.java", "insertions": 128, "deletions": 5, "lines": 133}, {"filePath": "src/com/esotericsoftware/kryo/serializers/FieldSerializer.java", "insertions": 45, "deletions": 54, "lines": 99}, {"filePath": "src/com/esotericsoftware/kryo/serializers/FieldSerializerGenericsUtil.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/com/esotericsoftware/kryo/serializers/ObjectField.java", "insertions": 264, "deletions": 3, "lines": 267}, {"filePath": "src/com/esotericsoftware/kryo/serializers/UnsafeCacheFields.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "src/com/esotericsoftware/kryo/util/DefaultClassResolver.java", "insertions": 14, "deletions": 10, "lines": 24}, {"filePath": "src/com/esotericsoftware/kryo/util/DefaultStreamFactory.java", "insertions": 1, "deletions": 4, "lines": 5}, {"filePath": "src/com/esotericsoftware/kryo/util/FastestStreamFactory.java", "insertions": 0, "deletions": 2, "lines": 2}, {"filePath": "src/com/esotericsoftware/kryo/util/UnsafeUtil.java", "insertions": 40, "deletions": 24, "lines": 64}, {"filePath": "test/com/esotericsoftware/kryo/CopyTest.java", "insertions": 14, "deletions": 0, "lines": 14}, {"filePath": "test/com/esotericsoftware/kryo/FieldSerializerTest.java", "insertions": 29, "deletions": 0, "lines": 29}, {"filePath": "test/com/esotericsoftware/kryo/InputOutputTest.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyFiles"}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}]}