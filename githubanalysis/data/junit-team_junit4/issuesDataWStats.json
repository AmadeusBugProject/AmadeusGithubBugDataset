{"projectName": "junit-team/junit4", "bugLabels": ["bug", "nonregression", "regression"], "captureTime": "Sat Jul  4 17:07:15 2020", "issues": [{"title": "AssumeFalse description : \"got\" and \"expected\" are inverted", "body": "The description of Assume.assumeFalse is wrong.\r\n\r\nRunning the test :\r\n`assumeFalse(true);`\r\n\r\ngive the description :\r\n`org.junit.AssumptionViolatedException: got: <false>, expected: is <true>`\r\n\r\ninstead of \r\n`org.junit.AssumptionViolatedException: got: <true>, expected: is <false>`\r\n\r\nI think the implementation of assumeFalse should be :\r\n`Assume.assumeThat(b, CoreMatchers.is(false));`", "url": "https://github.com/junit-team/junit4/issues/1616", "user": "LeGritche", "labels": ["bug"], "created": "2019-06-01 17:25:31", "closed": "2019-06-20 18:07:02", "commits": {"a5de8a09218b4b85616e231ae7aac0eb49bf9188": {"commitGHEventType": "referenced", "commitUser": "marcphilipp"}}, "ttf": 19.00027777777778, "commitsDetails": [{"commitHash": "a5de8a09218b4b85616e231ae7aac0eb49bf9188", "commitGHEventType": "referenced", "commitUser": "marcphilipp", "commitParents": ["fd27d36274fe53b36ca59e0f9e9e74a6761e8306"], "nameRev": "a5de8a09218b4b85616e231ae7aac0eb49bf9188 tags/r4.13-rc-1~20", "commitMessage": "Changed the assumeFalse method following this suggestion: https://github.com/junit-team/junit4/issues/1616\n", "commitDateTime": "2019-06-20 20:07:01", "authoredDateTime": "2019-06-20 17:02:35", "commitGitStats": [{"filePath": "src/main/java/org/junit/Assume.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Assume.java", "spoonMethods": [{"spoonMethodName": "org.junit.Assume.assumeFalse(boolean)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["a5de8a09218b4b85616e231ae7aac0eb49bf9188"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 1, "deletions": 1, "lines": 2, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit"], "changesInPackagesSPOON": ["org.junit.Assume.assumeFalse(boolean)"]}, {"title": "BlockJUnit4ClassRunner.methodBlock() should be called after fireTestStarted() ", "body": "In the fix for #1066 (https://github.com/junit-team/junit4/commit/a90b496a6595856066504baf4f737fb853a6e45d) `methodBlock()` is being called before `fireTestStarted()`. If creating the test instance is slow or has visible side-effects, it should be done after we send the notification that the test has started.\r\n", "url": "https://github.com/junit-team/junit4/issues/1462", "user": "kcooney", "labels": ["bug"], "created": "2017-06-07 18:02:03", "closed": "2017-06-08 16:05:32", "commits": {"3f736cf514b0421a82383db74188f6c0e3dfef1a": {"commitGHEventType": "referenced", "commitUser": "kcooney"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "3f736cf514b0421a82383db74188f6c0e3dfef1a", "commitGHEventType": "referenced", "commitUser": "kcooney", "commitParents": ["563d32cd3eea98a0f87aa12c48b309678d94d5a2"], "nameRev": "3f736cf514b0421a82383db74188f6c0e3dfef1a tags/r4.13-beta-1~57", "commitMessage": "Call methodBlock() after fireTestStarted() (#1463)\n\nFixes #1462\r\n", "commitDateTime": "2017-06-08 09:05:31", "authoredDateTime": "2017-06-08 23:05:31", "commitGitStats": [{"filePath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "insertions": 6, "deletions": 7, "lines": 13}, {"filePath": "src/test/java/org/junit/tests/running/classes/BlockJUnit4ClassRunnerTest.java", "insertions": 36, "deletions": 1, "lines": 37}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BlockJUnit4ClassRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod).1", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod,org.junit.runner.notification.RunNotifier)", "TOT": 7, "UPD": 1, "INS": 1, "MOV": 3, "DEL": 2}, {"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod).1.runReflectiveCall()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "BlockJUnit4ClassRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest.MethodBlockAfterFireTestStarted", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest.methodBlockAfterFireTestStarted()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Unrooted Tests when running single test in Eclipse with failing @AfterClass", "body": "I used JUnit 4 to test method that works with Apache Storm and Elasticsearch. \nWhen tested method throws an exception Unrooted Tests appears at JUnit console of Eclipse.\nWhen tested method works correctly, JUnit is correct.\n", "url": "https://github.com/junit-team/junit4/issues/1370", "user": "TmayoMyth", "labels": ["bug", "external issue"], "created": "2016-10-12 03:36:06", "closed": "2017-02-04 09:57:12", "commits": {}, "ttf": 115.00027777777778, "commitsDetails": []}, {"title": "Interrupted test cases cause random failures with thread reuse", "body": "Whenever a test case is interrupted (Thread.interrupt()), the test runner thread seems to stay in interrupted state. This causes random failures later when the thread is reused for other test cases.\n\nExpected behaviour: When the thread is reused, interrupted flag for the thread is cleaned before starting a new test case. This can be done by calling `Thread.interrupted()`, which returns the interrupted state, and clears the interrupted flag.\n\nThe following code should reproduce the problem, given that test1 is run before test2\n\n``` java\nimport org.junit.Test;\n\npublic class ThreadTest {\n  @Test\n  public void test1() {\n    Thread.currentThread().interrupt();\n  }\n\n  @Test\n  public void test2() throws InterruptedException {\n    Thread.sleep(1000);\n  }\n}\n```\n\nThe problem I encountered is similar to the one described in https://www.thoughtwire.com/junit-interupt/\n", "url": "https://github.com/junit-team/junit4/issues/1365", "user": "terorontti", "labels": ["bug"], "created": "2016-09-28 07:49:10", "closed": "2019-01-20 10:08:18", "commits": {"303986e62c54e2838e6f08dd44096ae4ab4831da": {"commitGHEventType": "referenced", "commitUser": "marcphilipp"}, "6ba145aa3e8b05fdd48b1be2f184901d0e7a1335": {"commitGHEventType": "referenced", "commitUser": "marcphilipp"}, "07a47b7e6fa2197d89645ef2163c74f73b0cbd28": {"commitGHEventType": "referenced", "commitUser": "marcphilipp"}, "faa0e334080cd91f05fc1acbc7c39a525e172256": {"commitGHEventType": "referenced", "commitUser": "marcphilipp"}}, "ttf": 844.0002777777778, "commitsDetails": [{"commitHash": "303986e62c54e2838e6f08dd44096ae4ab4831da", "commitGHEventType": "referenced", "commitUser": "marcphilipp", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "6ba145aa3e8b05fdd48b1be2f184901d0e7a1335", "commitGHEventType": "referenced", "commitUser": "marcphilipp", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "07a47b7e6fa2197d89645ef2163c74f73b0cbd28", "commitGHEventType": "referenced", "commitUser": "marcphilipp", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "faa0e334080cd91f05fc1acbc7c39a525e172256", "commitGHEventType": "referenced", "commitUser": "marcphilipp", "commitParents": ["9a28848007830dca4b92c73cc571cbe753a560ba"], "nameRev": "faa0e334080cd91f05fc1acbc7c39a525e172256 tags/r4.13-beta-2~2", "commitMessage": "Clear thread interrupt status after each test\n\nThe thread interrupt status flag is now cleared from `classBlock()` and\n`methodBlock()`. The flag is cleared after each test case completes and\nafter `AfterClass` methods and `ClassRules` have been executed.\n\nFixes #1365.\n", "commitDateTime": "2019-01-20 11:08:17", "authoredDateTime": "2018-10-26 19:49:38", "commitGitStats": [{"filePath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "src/main/java/org/junit/runners/ParentRunner.java", "insertions": 17, "deletions": 0, "lines": 17}, {"filePath": "src/test/java/org/junit/tests/running/classes/AllClassesTests.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "src/test/java/org/junit/tests/running/classes/ThreadsTest.java", "insertions": 91, "deletions": 0, "lines": 91}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BlockJUnit4ClassRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ParentRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.ParentRunner.comparator(org.junit.runner.manipulation.Sorter)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.ParentRunner.comparator(org.junit.runner.manipulation.Sorter).4", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier).3", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.ParentRunner.comparator(org.junit.runner.manipulation.Sorter).4.compare(java.lang.Object,java.lang.Object)", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.ParentRunner.withInterruptIsolation(org.junit.runners.model.Statement)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllClassesTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.AllClassesTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ThreadsTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.ThreadsTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["faa0e334080cd91f05fc1acbc7c39a525e172256"], "filteredCommitsReason": {"duplicated": 3, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 18.0, "deletions": 0.0, "lines": 18.0, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 9.0, "UPD": 6.0, "INS": 3.0, "MOV": 0.0, "DEL": 0.0, "spoonFilesChanged": 2, "spoonMethodsChanged": 8}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/runners"], "changesInPackagesSPOON": ["org.junit.runners.ParentRunner.comparator(org.junit.runner.manipulation.Sorter).4", "org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier).3", "org.junit.runners.ParentRunner.comparator(org.junit.runner.manipulation.Sorter).4.compare(java.lang.Object,java.lang.Object)", "org.junit.runners.BlockJUnit4ClassRunner.methodBlock(org.junit.runners.model.FrameworkMethod)", "org.junit.runners.ParentRunner.withInterruptIsolation(org.junit.runners.model.Statement)", "org.junit.runners.ParentRunner.comparator(org.junit.runner.manipulation.Sorter)", "org.junit.runners.ParentRunner.runChildren(org.junit.runner.notification.RunNotifier)", "org.junit.runners.ParentRunner.classBlock(org.junit.runner.notification.RunNotifier)"]}, {"title": "ErrorCollector reports AssumptionViolatedException as failure when assumption is not meet multiple times.", "body": "Sample test:\n\n``` java\nimport org.junit.Assume;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.ErrorCollector;\n\npublic class SampleTest {\n\n    @Rule\n    public ErrorCollector errorCollector = new ErrorCollector();\n\n    @Test\n    public void test() throws Exception {\n        errorCollector.checkSucceeds(() -> {\n            doSth();\n            return null;\n        });\n        errorCollector.checkSucceeds(() -> {\n            doSth();\n            return null;\n        });\n    }\n\n    private void doSth() {\n        Assume.assumeTrue(false);\n    }\n\n}\n```\n\nExpected result: test ignored.\nActual: test failed.\n\nWorking as expected (ie. test results as ignored) when:\n\n``` java\n    @Test\n    public void test() throws Exception {\n        errorCollector.checkSucceeds(() -> {\n            doSth();\n            return null;\n        });\n    }\n```\n", "url": "https://github.com/junit-team/junit4/issues/1363", "user": "rpost", "labels": ["bug"], "created": "2016-09-21 16:20:36", "closed": "2016-12-05 07:06:51", "commits": {"88f63daafb9eec076c09f532c9f0bd823a150be0": {"commitGHEventType": "closed", "commitUser": "kcooney"}}, "ttf": 74.00027777777778, "commitsDetails": [{"commitHash": "88f63daafb9eec076c09f532c9f0bd823a150be0", "commitGHEventType": "closed", "commitUser": "kcooney", "commitParents": ["44cd8f80dbac11849a42a5d73fc9b5ddc75cd1b4"], "nameRev": "88f63daafb9eec076c09f532c9f0bd823a150be0 tags/r4.13-beta-1~100", "commitMessage": "Wrap assumption violations in ErrorCollector.addError() and checkSucceeds().\n\nFixes #1363\n", "commitDateTime": "2016-12-04 23:06:13", "authoredDateTime": "2016-11-29 18:20:05", "commitGitStats": [{"filePath": "src/main/java/org/junit/experimental/results/PrintableResult.java", "insertions": 9, "deletions": 0, "lines": 9}, {"filePath": "src/main/java/org/junit/experimental/results/ResultMatchers.java", "insertions": 21, "deletions": 0, "lines": 21}, {"filePath": "src/main/java/org/junit/rules/ErrorCollector.java", "insertions": 14, "deletions": 2, "lines": 16}, {"filePath": "src/test/java/org/junit/rules/VerifierRuleTest.java", "insertions": 40, "deletions": 0, "lines": 40}], "commitSpoonAstDiffStats": [{"spoonFilePath": "PrintableResult.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.results.PrintableResult.failures()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ResultMatchers.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.results.ResultMatchers.hasFailureContaining(java.lang.String).3", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.results.ResultMatchers.hasSingleFailureMatching(org.hamcrest.Matcher)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.results.ResultMatchers.hasFailureContaining(java.lang.String).4.matchesSafely(org.junit.experimental.results.PrintableResult)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ErrorCollector.java", "spoonMethods": [{"spoonMethodName": "org.junit.rules.ErrorCollector.addError(java.lang.Throwable)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.rules.ErrorCollector.checkSucceeds(java.util.concurrent.Callable)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "VerifierRuleTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.rules.VerifierRuleTest.PassesAssumptionViolatedExceptionToErrorCollector", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.rules.VerifierRuleTest.passingAssumptionViolatedExceptionShouldResultInFailure()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.rules.VerifierRuleTest.UsesErrorCollectorCheckSucceedsWithAssumptionViolatedException", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.rules.VerifierRuleTest.usedErrorCollectorCheckSucceedsWithAssumptionViolatedExceptionShouldFail()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["88f63daafb9eec076c09f532c9f0bd823a150be0"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 44, "deletions": 2, "lines": 46, "gitFilesChange": 3}, "spoonStatsSummary": {"TOT": 7, "UPD": 1, "INS": 5, "MOV": 1, "DEL": 0, "spoonFilesChanged": 3, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/experimental/results", "src/main/java/org/junit/rules"], "changesInPackagesSPOON": ["org.junit.experimental.results.PrintableResult.failures()", "org.junit.experimental.results.ResultMatchers.hasFailureContaining(java.lang.String).4.matchesSafely(org.junit.experimental.results.PrintableResult)", "org.junit.experimental.results.ResultMatchers.hasFailureContaining(java.lang.String).3", "org.junit.rules.ErrorCollector.checkSucceeds(java.util.concurrent.Callable)", "org.junit.experimental.results.ResultMatchers.hasSingleFailureMatching(org.hamcrest.Matcher)", "org.junit.rules.ErrorCollector.addError(java.lang.Throwable)"]}, {"title": "ExternalResource: the behavior is different than using multiple After methods", "body": "Multiple issues here:\n1. When the test fails _and_ closing the resource fails, the test failure is lost: only the exception coming from the after() method is propagated.\n2. In case there are multiple (ExternalResource) rules in place, and (closing) one fails, then all of the subsequent resources will _not_ be closed (without even trying to!).\n\nThis was not the case when encapsulating the tear down logic in multiple `@After` methods: RunAfters runs all of the After methods regardless of the result of each, and throws a MultipleFailureException in case more than one thing (test method and/or after logic) goes wrong.\n\nI'm working on a fix for 1 for now, which is an easy one.\n", "url": "https://github.com/junit-team/junit4/issues/1334", "user": "alb-i986", "labels": ["bug", "needs more info"], "created": "2016-06-28 18:17:52", "closed": "2018-06-02 23:10:13", "commits": {"85d7d3327a10435291f948121e1a8402b131fbd4": {"commitGHEventType": "closed", "commitUser": "kcooney"}}, "ttf": 704.0002777777778, "commitsDetails": [{"commitHash": "85d7d3327a10435291f948121e1a8402b131fbd4", "commitGHEventType": "closed", "commitUser": "kcooney", "commitParents": ["b1d37670892cd885b87a7c62d7c5808517fd20b6"], "nameRev": "85d7d3327a10435291f948121e1a8402b131fbd4 tags/r4.13-beta-1~129", "commitMessage": "Fix ExternalResource: the test failure was lost..\n\n.. when the test failed *and* closing the resource failed:\nonly the exception coming from the after() method was propagated,\nas per semantics of the try-finally\n(see http://docs.oracle.com/javase/specs/jls/se8/html/jls-14.html#jls-14.20.2).\n\nFinally, the new behavior is compatible with @After method semantics\n(see class RunAfters).\n\nFixes #1334, point 1.\n", "commitDateTime": "2016-07-16 14:57:59", "authoredDateTime": "2016-06-25 20:06:25", "commitGitStats": [{"filePath": "src/main/java/org/junit/rules/ExternalResource.java", "insertions": 15, "deletions": 1, "lines": 16}, {"filePath": "src/test/java/org/junit/rules/ExternalResourceRuleTest.java", "insertions": 31, "deletions": 0, "lines": 31}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ExternalResource.java", "spoonMethods": [{"spoonMethodName": "org.junit.rules.ExternalResource.statement(org.junit.runners.model.Statement).1.evaluate()", "TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1}]}, {"spoonFilePath": "ExternalResourceRuleTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.rules.ExternalResourceRuleTest.shouldThrowMultipleFailureExceptionWhenTestFailsAndClosingResourceFails()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["85d7d3327a10435291f948121e1a8402b131fbd4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 15, "deletions": 1, "lines": 16, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 6, "UPD": 0, "INS": 3, "MOV": 2, "DEL": 1, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/rules"], "changesInPackagesSPOON": ["org.junit.rules.ExternalResource.statement(org.junit.runners.model.Statement).1.evaluate()"]}, {"title": "Request.classes(newTestClass).getRunner().getDescription()", "body": "With a quite straightforward testclass annotated \n@RunWith(Suite.class)\n@SuiteClasses({\n    XMSectionTest.Basic.class\n})\npublic class XMSectionTest {\n...\n\nI obtain for Request.classes(testClass).getRunner().getDescription() the value null, \nwhereas for Request.aClass(testClass).getRunner().getDescription() \nI obtain eu.simuline.arithmetics.left2right.XMSectionTest \nHm,.... the first seems a bug to me, \nwhereas the second one.. seems to me at least uncomfortable, \nbecause I think the description shall reflect the structure of the request and not its origin. \n", "url": "https://github.com/junit-team/junit4/issues/1320", "user": "Reissner", "labels": ["bug", "up-for-grabs"], "created": "2016-06-02 01:25:32", "closed": "2016-10-31 15:39:37", "commits": {"23b0bb0ef9b690660cd3853005f9b635533d3770": {"commitGHEventType": "closed", "commitUser": "kcooney"}}, "ttf": 151.00027777777777, "commitsDetails": [{"commitHash": "23b0bb0ef9b690660cd3853005f9b635533d3770", "commitGHEventType": "closed", "commitUser": "kcooney", "commitParents": ["d50032d673544330fcaa68b5476a5dc99df9633d"], "nameRev": "23b0bb0ef9b690660cd3853005f9b635533d3770 tags/r4.13-beta-1~114", "commitMessage": "Test for #1320 - Description produced by Request.classes() shouldn't be null (#1377)\n\nFixes #1320", "commitDateTime": "2016-10-31 08:39:34", "authoredDateTime": "2016-10-31 16:39:34", "commitGitStats": [{"filePath": "src/main/java/org/junit/runner/Computer.java", "insertions": 11, "deletions": 1, "lines": 12}, {"filePath": "src/test/java/org/junit/runner/AllRunnerTests.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/test/java/org/junit/runner/RequestTest.java", "insertions": 21, "deletions": 0, "lines": 21}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Computer.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.Computer.getSuite(org.junit.runners.model.RunnerBuilder,java.lang.Class[])", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "AllRunnerTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.AllRunnerTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RequestTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.RequestTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Tests annotated with `@Test(expected = AssumptionViolatedException.class)` will be marked as skipped instead of passing", "body": "When using `@Test(expected = AssumptionViolatedException.class)` the test will actually be marked as skipped instead of passing, as if the AssumptionViolatedException were thrown up in the stack.\nIn fact that's what seems to happen: https://github.com/junit-team/junit4/blob/master/src/main/java/org/junit/internal/runners/statements/ExpectException.java#L22\n\nI've found this bug while doing #1289, while inspecting our skipped unit tests.\nSee e.g. https://github.com/junit-team/junit4/blob/master/src/test/java/org/junit/tests/experimental/AssumptionTest.java#L80\n\nBut maybe this is actually working as expected. I mean, no one should ever expect AssumptionViolatedException. It can happen only to us, in our unit tests. Wherever we need to, we have to use a try/catch block instead.\n\n@stefanbirkner You seem to have worked on assumptions quite a lot, can you please advise?\n", "url": "https://github.com/junit-team/junit4/issues/1290", "user": "alb-i986", "labels": ["bug"], "created": "2016-05-12 23:25:36", "closed": "2017-02-14 02:18:09", "commits": {"df016dc056ab15dfa7a6c448ef1905b27eff877f": {"commitGHEventType": "referenced", "commitUser": "marcphilipp"}, "a29f45a3be64caa53feee6f6cc4d70cc43542362": {"commitGHEventType": "referenced", "commitUser": "kcooney"}}, "ttf": 277.0002777777778, "commitsDetails": [{"commitHash": "df016dc056ab15dfa7a6c448ef1905b27eff877f", "commitGHEventType": "referenced", "commitUser": "marcphilipp", "commitParents": ["17a2f11783fa8e731fe49cf638d51c78468c8c25"], "nameRev": "df016dc056ab15dfa7a6c448ef1905b27eff877f tags/r4.13-beta-1~151", "commitMessage": "Refactor AssumptionTests to use try-catch (#1299)\n\nUse a try/catch block instead of the attribute 'expected' of the @Test annotation.\r\nSee bug #1290.\r\nSee discussion on #1289.", "commitDateTime": "2016-05-14 21:37:00", "authoredDateTime": "2016-05-14 20:37:00", "commitGitStats": [{"filePath": "src/test/java/org/junit/tests/experimental/AssumptionTest.java", "insertions": 21, "deletions": 6, "lines": 27}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AssumptionTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.AssumptionTest.assumeThatWorks()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.AssumptionTest.assumeNotNullThrowsException()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.AssumptionTest.assumeTrueWorks()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "a29f45a3be64caa53feee6f6cc4d70cc43542362", "commitGHEventType": "referenced", "commitUser": "kcooney", "commitParents": ["a58d459d76add6a1621ae7da80c7412134076af2"], "nameRev": "a29f45a3be64caa53feee6f6cc4d70cc43542362 tags/r4.13-beta-1~77", "commitMessage": "Tests expecting AssumptionViolatedException should be marked as passed, not skipped (#1291)\n\nTests annotated with `@Test(expected = AssumptionViolatedException.class)`\r\nwhich throw AssumptionViolatedException should be marked as passing, not skipped.\r\n\r\nFixes #1290", "commitDateTime": "2017-02-13 18:18:08", "authoredDateTime": "2017-02-14 03:18:08", "commitGitStats": [{"filePath": "src/main/java/org/junit/internal/runners/statements/ExpectException.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "src/test/java/org/junit/internal/AllInternalTests.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "src/test/java/org/junit/internal/runners/statements/ExpectExceptionTest.java", "insertions": 88, "deletions": 0, "lines": 88}, {"filePath": "src/test/java/org/junit/tests/running/methods/ExpectedTest.java", "insertions": 13, "deletions": 0, "lines": 13}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ExpectException.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.runners.statements.ExpectException.evaluate()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "AllInternalTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.AllInternalTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExpectExceptionTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.runners.statements.ExpectExceptionTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ExpectedTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.methods.ExpectedTest.ExpectAssumptionViolatedException", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.methods.ExpectedTest.expectsAssumptionViolatedException()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 2, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "MultipleFailureException should override printStackTrace()", "body": "Currently `MultipleFailureException` overrides the `getMessage()` method, but not this `printStackTrace()` method. This means that anyone calling `printStackTrace()` will only see the last exception in the `MultipleFailureException`, which is often the least useful.\n\nIdeally `MultipleFailureException#printStackTrace()` should include the stack traces of all the wrapped exceptions.\n", "url": "https://github.com/junit-team/junit4/issues/1238", "user": "drewhannay", "labels": ["bug", "up-for-grabs"], "created": "2016-02-04 17:18:38", "closed": "2016-09-18 18:40:43", "commits": {"35c8fd373965ab1b06d63e5c3bbc5d9f2c356ec4": {"commitGHEventType": "referenced", "commitUser": "kcooney"}}, "ttf": 227.00027777777777, "commitsDetails": [{"commitHash": "35c8fd373965ab1b06d63e5c3bbc5d9f2c356ec4", "commitGHEventType": "referenced", "commitUser": "kcooney", "commitParents": ["41d44734f41aba0cf6ba5a11ff5d32ffed155027"], "nameRev": "35c8fd373965ab1b06d63e5c3bbc5d9f2c356ec4 tags/r4.13-beta-1~125", "commitMessage": "Fix StackTrace printing when multiple exceptions occur (#1238) (#1359)\n\n", "commitDateTime": "2016-09-17 15:31:28", "authoredDateTime": "2016-09-17 17:31:28", "commitGitStats": [{"filePath": "src/main/java/org/junit/runners/model/MultipleFailureException.java", "insertions": 23, "deletions": 0, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "MultipleFailureException.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.model.MultipleFailureException.printStackTrace()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.model.MultipleFailureException.printStackTrace(java.io.PrintStream)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.model.MultipleFailureException.printStackTrace(java.io.PrintWriter)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "\"after\" method of ExternalResource is not called for @ClassRule in case of error in some @Test", "body": "I can see the fact that after() isn't called when some fail happens in one of the test methods.\n\nfor example:\n\n``` java\n/**\n * Created by aieremenko on 1/27/16.\n */\npublic class TestExternalResourceRule {\n    @ClassRule\n    public static ExternalResource externalResource = new ExternalResource() {\n        NodeJsServer server = new NodeJsServer();\n\n        @Override\n        protected void before() throws Throwable {\n            server.start();\n        }\n\n        @Override\n        protected void after() {\n            server.stop();\n        }\n    };\n\n    @Test\n    public void getBarryPathShouldReturnBarrysMsg() throws IOException {\n        //some fail stuff\n    }\n}\n```\n\nIn case of error my server is still being run after test finished.\n", "url": "https://github.com/junit-team/junit4/issues/1236", "user": "coreer", "labels": ["bug", "needs more info"], "created": "2016-01-27 15:25:08", "closed": "2016-10-25 22:11:01", "commits": {}, "ttf": 272.0002777777778, "commitsDetails": []}, {"title": "Test case failures are hidden by temporary folder rule's assured deletion failures", "body": "See https://github.com/reinholdfuereder/junit/tree/test-case-failure-is-hidden-by-temporary-folder-rule-assured-deletion-failure for a little test case that demonstrates the problem.\n\nIt happened that a test case failure (on Windows) actually had the side effect of a leftover open file handle to a temporary file/folder and so the assured deletion of the temporary folder rule failed. And the latter failure hided the first or actual one.\n\nIn theory two approaches would be possible:\n(1) Multiple failures\n(2) Just keep the first one (the actual one) and solely log out the second one or so\n", "url": "https://github.com/junit-team/junit4/issues/1224", "user": "reinholdfuereder", "labels": ["bug"], "created": "2015-11-27 14:56:54", "closed": "2017-05-17 13:22:27", "commits": {}, "ttf": 536.0002777777778, "commitsDetails": []}, {"title": "java.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"user.home\" \"read\") running under security manager, because JUnit forgot to use doPrivileged", "body": "If you perform actions which cause permission checks with the security manager (and you're doing some action which is not exploitable by the caller), then you're supposed to use doPrivileged.\n\n`BaseTestRunner` in JUnit has this:\n\n```\n    private static File getPreferencesFile() {\n        String home = System.getProperty(\"user.home\");  // <- not using doPrivileged\n        return new File(home, \"junit.properties\");\n    }\n```\n\nWhen running our test suite with the security manager enabled, we get a failure:\n\n```\nCaused by: java.security.AccessControlException: access denied (\"java.util.PropertyPermission\" \"user.home\" \"read\")\n    at java.security.AccessControlContext.checkPermission(AccessControlContext.java:457)\n    at java.security.AccessController.checkPermission(AccessController.java:884)\n    at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n    at java.lang.SecurityManager.checkPropertyAccess(SecurityManager.java:1294)\n    at java.lang.System.getProperty(System.java:717)\n    at junit.runner.BaseTestRunner.getPreferencesFile(BaseTestRunner.java:225)\n    at junit.runner.BaseTestRunner.readPreferences(BaseTestRunner.java:232)\n    at junit.runner.BaseTestRunner.getPreferences(BaseTestRunner.java:51)\n    at junit.runner.BaseTestRunner.getPreference(BaseTestRunner.java:246)\n    at junit.runner.BaseTestRunner.getPreference(BaseTestRunner.java:250)\n    at junit.runner.BaseTestRunner.<clinit>(BaseTestRunner.java:324)\n```\n\nThis occurs irrespective of the fact that our security policy allows reading any system property, because something further down the stack, i.e. something inside IDEA's JUnit launcher (perhaps some dynamically-generated bytecode?) is \"completely\" untrustworthy and thus even the \"grant to all code sources\" section of the policy does not apply to it.\n\nAt the moment, our workaround for this is to give AllPermission to the IDEA installation, but this is not really satisfactory because every developer tends to install it in a different location depending on their own conventions, what platform they're on, whether they have admin access on the box, etc.\n\nIf JUnit would add a doPrivileged block here (and to any other place where it seems appropriate) then we wouldn't have to do this and our rule which says JUnit is completely trusted would be sufficient.\n", "url": "https://github.com/junit-team/junit4/issues/1213", "user": "trejkaz", "labels": ["bug", "has pull"], "created": "2015-10-22 05:00:23", "closed": "2016-10-14 22:19:11", "commits": {"a25189631a9eb551a1ac961ca4d2c2db37a687a0": {"commitGHEventType": "referenced", "commitUser": "kcooney"}}, "ttf": 358.0002777777778, "commitsDetails": [{"commitHash": "a25189631a9eb551a1ac961ca4d2c2db37a687a0", "commitGHEventType": "referenced", "commitUser": "kcooney", "commitParents": ["25495b3e91e346121e3292e8e01a3cc085b644f3"], "nameRev": "a25189631a9eb551a1ac961ca4d2c2db37a687a0 tags/r4.13-beta-1~117", "commitMessage": "Catch SecurityException in addition to IOException. (#1227)\n\nFixes #1213, not by adding the doPrivileged, but by coping with lack of access to the file by pretending it doesn't exist.", "commitDateTime": "2016-10-14 15:19:09", "authoredDateTime": "2016-10-15 09:19:09", "commitGitStats": [{"filePath": "src/main/java/junit/runner/BaseTestRunner.java", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BaseTestRunner.java", "spoonMethods": [{"spoonMethodName": "junit.runner.BaseTestRunner.readPreferences()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "JUnit4TestAdapter blocks JUnit-3-style suites that are included via @RunWith(Suite.class)", "body": "The intention of junit.framework.JUnit4TestAdapter is to allow a JUnit-3-style test runner to run JUnit-4-style tests.\n\nHowever, due to a bug in JUnit, this doesn't work when a JUnit-4-style test suite (@RunWith(Suite.class)) includes a JUnit-3-style suite class.\nHappened to us in https://bugs.eclipse.org/bugs/show_bug.cgi?id=474777\n\nTo reproduce in JUnit itself:\n- remove the @RunWith(AllTests.class) annotation from org.junit.tests.junit3compatibility.OldTests\n- run the whole org.junit.tests.AllTests:\n  - if you run it with a JUnit-4-style runner, it passes\n  - but with a JUnit-3-style runner that calls the suite() method, it fails with:\n\n```\nAllTests (org.junit.tests)\norg.junit.tests.AllTests\norg.junit.tests.junit3compatibility.OldTests\ninitializationError(org.junit.tests.junit3compatibility.OldTests)\njava.lang.Exception: No runnable methods\n    at org.junit.runners.BlockJUnit4ClassRunner.validateInstanceMethods(BlockJUnit4ClassRunner.java:202)\n    at org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(BlockJUnit4ClassRunner.java:138)\n    at org.junit.runners.ParentRunner.validate(ParentRunner.java:416)\n    at org.junit.runners.ParentRunner.<init>(ParentRunner.java:84)\n    at org.junit.runners.BlockJUnit4ClassRunner.<init>(BlockJUnit4ClassRunner.java:68)\n    at org.junit.internal.builders.JUnit4Builder.runnerForClass(JUnit4Builder.java:10)\n    at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n    at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\n    at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n    at org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:101)\n    at org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:87)\n    at org.junit.runners.Suite.<init>(Suite.java:102)\n    at org.junit.runners.Suite.<init>(Suite.java:70)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n    at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:39)\n    at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:27)\n    at java.lang.reflect.Constructor.newInstance(Constructor.java:501)\n    at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBuilder.java:108)\n    at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(AnnotatedBuilder.java:86)\n    at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n    at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForClass(AllDefaultPossibilitiesBuilder.java:26)\n    at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilder.java:59)\n    at org.junit.internal.requests.ClassRequest.getRunner(ClassRequest.java:33)\n    at junit.framework.JUnit4TestAdapter.<init>(JUnit4TestAdapter.java:40)\n    at junit.framework.JUnit4TestAdapter.<init>(JUnit4TestAdapter.java:34)\n    at org.junit.tests.AllTests.suite(AllTests.java:246)\n...\n```\n\nI'm preparing a pull request.\n", "url": "https://github.com/junit-team/junit4/issues/1189", "user": "mkeller", "labels": ["bug", "has pull"], "created": "2015-08-12 14:31:16", "closed": "2016-10-08 18:13:23", "commits": {"25495b3e91e346121e3292e8e01a3cc085b644f3": {"commitGHEventType": "closed", "commitUser": "kcooney"}}, "ttf": 423.0002777777778, "commitsDetails": [{"commitHash": "25495b3e91e346121e3292e8e01a3cc085b644f3", "commitGHEventType": "closed", "commitUser": "kcooney", "commitParents": ["ee4403455a9573a67668da695fea223f77606326"], "nameRev": "25495b3e91e346121e3292e8e01a3cc085b644f3 tags/r4.13-beta-1~118", "commitMessage": "Fixes #1189: JUnit4TestAdapter blocks JUnit-3-style suites that are included via @RunWith(Suite.class) (#1344)\n\n* Fixes #1189: JUnit4TestAdapter blocks JUnit-3-style suites that are included via @RunWith(Suite.class)\r\n\r\n* Redo fix of 1189 in a way that won't break code that subclasses AllDefaultPossibilitiesBuilder\r\n", "commitDateTime": "2016-10-08 11:13:17", "authoredDateTime": "2016-10-08 11:13:17", "commitGitStats": [{"filePath": "src/main/java/junit/framework/JUnit4TestAdapter.java", "insertions": 10, "deletions": 0, "lines": 10}, {"filePath": "src/main/java/org/junit/internal/builders/AllDefaultPossibilitiesBuilder.java", "insertions": 11, "deletions": 0, "lines": 11}, {"filePath": "src/main/java/org/junit/internal/requests/ClassRequest.java", "insertions": 27, "deletions": 1, "lines": 28}, {"filePath": "src/main/java/org/junit/runner/Request.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/junit/runners/Suite.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/junit3compatibility/AllJUnit3CompatibilityTests.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "src/test/java/org/junit/tests/junit3compatibility/JUnit4TestAdapterTest.java", "insertions": 82, "deletions": 0, "lines": 82}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JUnit4TestAdapter.java", "spoonMethods": []}, {"spoonFilePath": "AllDefaultPossibilitiesBuilder.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.builders.AllDefaultPossibilitiesBuilder", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ClassRequest.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.requests.ClassRequest.getRunner()", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.internal.requests.ClassRequest.CustomAllDefaultPossibilitiesBuilder", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.internal.requests.ClassRequest.CustomSuiteMethodBuilder", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Request.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.Request.classes(org.junit.runner.Computer,java.lang.Class[])", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Suite.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.Suite", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllJUnit3CompatibilityTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.junit3compatibility.AllJUnit3CompatibilityTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "JUnit4TestAdapterTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.junit3compatibility.JUnit4TestAdapterTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Null Pointer exception assertArrayEquals with no message.", "body": "When assertArrayEquals (at least for Boolean[]) fails the assert, it throws a null pointer exception looking for a message.  This is, of course, when using the prototype that has no message.  You'll still get the line number for the failure, you'll still probably just debug focused test method, and be on your merry way, but just technically it's not quite the best/correct behavior.\n\nThanks!\n\nUpdate: this is for 4.12\n", "url": "https://github.com/junit-team/junit4/issues/1178", "user": "EmteeW", "labels": ["bug", "regression"], "created": "2015-07-07 18:02:59", "closed": "2016-07-17 12:31:09", "commits": {"e6a20043db694056ac00456f6076091012ecba87": {"commitGHEventType": "closed", "commitUser": "marcphilipp"}}, "ttf": 375.0002777777778, "commitsDetails": [{"commitHash": "e6a20043db694056ac00456f6076091012ecba87", "commitGHEventType": "closed", "commitUser": "marcphilipp", "commitParents": ["c07965ab1b232b04a13ea84fdbcdd8be04ea0182"], "nameRev": "e6a20043db694056ac00456f6076091012ecba87 tags/r4.13-beta-1~127", "commitMessage": "ArrayComparisonFailure serialization incompatibility fix (#1315)\n\n* Add back field fCause, initialize and use it in the constructor (via initCause()) to avoid NPE and unused field warnings, respectively.\r\n* Override getCause() to allow fallback to the deprecated fCause field.\r\n* Run tests around possible forward incompatibility of the class from r4.11, 4.12.\r\n\r\nFixes #1178.", "commitDateTime": "2016-07-17 14:31:03", "authoredDateTime": "2016-07-17 05:31:03", "commitGitStats": [{"filePath": "src/main/java/org/junit/internal/ArrayComparisonFailure.java", "insertions": 9, "deletions": 2, "lines": 11}, {"filePath": "src/test/java/org/junit/internal/AllInternalTests.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "src/test/java/org/junit/internal/ArrayComparisonFailureTest.java", "insertions": 68, "deletions": 0, "lines": 68}, {"filePath": "src/test/resources/org/junit/internal/arrayComparisonFailure_411", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "src/test/resources/org/junit/internal/arrayComparisonFailure_412", "insertions": 0, "deletions": 0, "lines": 0}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ArrayComparisonFailure.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.ArrayComparisonFailure", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.internal.ArrayComparisonFailure.getCause()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllInternalTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.AllInternalTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ArrayComparisonFailureTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.ArrayComparisonFailureTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "junit 4.12 is incompatible with cucumber-junit 1.2.0", "body": "PublicClassValidator throws an Exception with message:\n  \"The class cucumber.runtime.junit.ExamplesRunner is not public.\"\n\njunit 4.12 is incompatible with cucumber-junit 1.2.0, see http://stackoverflow.com/a/25540276/13365 and https://groups.google.com/d/msg/cukes/w1QhqqqvJ8M/F9Pjoxe6Xb0J\n", "url": "https://github.com/junit-team/junit4/issues/1083", "user": "henrik242", "labels": ["bug", "regression"], "created": "2015-02-19 11:04:38", "closed": "2017-08-06 23:58:04", "commits": {}, "ttf": 899.0002777777778, "commitsDetails": []}, {"title": "Backwards wildcard bound on ExpectedException.expectCause()", "body": "The signature of that method is `expectCause(Matcher<? extends Throwable> expectedCause)`.  This accepts `Matcher<RuntimeException>`, but possibly passes it other types such as `IOException`, resulting in heap pollution.\n\nOn the other hand, it forbids `Matcher<Object>`, even though that would be completely type-safe.\n\nThe type should be `Matcher<? super Throwable>` instead.\n", "url": "https://github.com/junit-team/junit4/issues/1073", "user": "tavianator", "labels": ["bug", "nonregression", "up-for-grabs"], "created": "2015-01-20 21:29:49", "closed": "2016-12-01 20:35:45", "commits": {"44cd8f80dbac11849a42a5d73fc9b5ddc75cd1b4": {"commitGHEventType": "referenced", "commitUser": "stefanbirkner"}}, "ttf": 680.0002777777778, "commitsDetails": [{"commitHash": "44cd8f80dbac11849a42a5d73fc9b5ddc75cd1b4", "commitGHEventType": "referenced", "commitUser": "stefanbirkner", "commitParents": ["638e82435a01af83e77c23e9f8d7b658a89eb4bf"], "nameRev": "44cd8f80dbac11849a42a5d73fc9b5ddc75cd1b4 tags/r4.13-beta-1~101", "commitMessage": "Change generics on ExpectedException.expectCause().\n\nThe previous generics (Matcher<? extends Throwable>) would not allow\nyou do use matchers on Object, like notNullValue().\n\nFixes #1073\n", "commitDateTime": "2016-12-01 21:35:45", "authoredDateTime": "2016-11-30 10:38:13", "commitGitStats": [{"filePath": "src/main/java/org/junit/internal/matchers/ThrowableCauseMatcher.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "src/main/java/org/junit/rules/ExpectedException.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ThrowableCauseMatcher.java", "spoonMethods": []}, {"spoonFilePath": "ExpectedException.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["44cd8f80dbac11849a42a5d73fc9b5ddc75cd1b4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 4, "lines": 8, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/rules", "src/main/java/org/junit/internal/matchers"]}, {"title": "JUnit hangs if a null value is in a Parameters name {} parameter", "body": "Create a Parameters method with a name and parameters like name = \"{0}\". If a value is null, JUnit hangs. It should print \"null\" instead.\n", "url": "https://github.com/junit-team/junit4/issues/1014", "user": "garydgregory", "labels": ["bug", "nonregression"], "created": "2014-10-31 01:37:45", "closed": "2014-11-08 00:53:01", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "ParentRunner swallows AssumptionViolationExceptions and notifies as ignored instead of skipped", "body": "The ParentRunner.run(RunNotifier) method catches AssumptionViolationExceptions but fires the notifier for testIgnored rather than notifying for a failed assumption. If a @ClassRule of @BeforeClass throws an AssumptionViolationException, a RunListener is unable to get access to the exception.\n\nIt seems possible that this was done by design. I did not find an open discussion on this, but it is possible that I'm not looking in the correct place.\n", "url": "https://github.com/junit-team/junit4/issues/894", "user": "brianberzins", "labels": ["bug"], "created": "2014-05-01 15:00:18", "closed": "2014-05-05 16:49:17", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "AllMembersSupplier.addMultiPointMethods() swallows exceptions", "body": "From  the class `AllMembersSupplier`:\n\n```\nprivate void addMultiPointMethods(List<PotentialAssignment> list) {\n    for (FrameworkMethod dataPointsMethod : fClass.getAnnotatedMethods(DataPoints.class))\n        try {\n            addArrayValues(dataPointsMethod.getName(), list, dataPointsMethod.invokeExplosively(null));\n        } catch (Throwable e) {\n            // ignore and move on\n        }\n}\n```\n\nThis try/catch block seems inappropriate to me: exceptions thrown in a `@DataPoints`-annotated method will silently be ignored. Surely this cannot be the desired behavior?\n", "url": "https://github.com/junit-team/junit4/issues/449", "user": "Stephan202", "labels": ["bug", "theories"], "created": "2012-06-07 08:27:06", "closed": "2013-03-26 17:27:30", "commits": {"5c2070d7cf981e2e103aef6fd0ef64c473331325": {"commitGHEventType": "closed", "commitUser": "dsaff"}, "34e66740b9117ce85cfd416f9e931b2e533ab16e": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 292.0002777777778, "commitsDetails": [{"commitHash": "5c2070d7cf981e2e103aef6fd0ef64c473331325", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["e012e06dc326394a3a834d974e9af3fea0e6df91"], "nameRev": "5c2070d7cf981e2e103aef6fd0ef64c473331325 tags/r4.12-beta-1~118^2~1^2~2", "commitMessage": "Fixes #449, stopping AllMembersSupplier hiding DataPoint method exceptions\n\nAlso includes a rewrite of the Theory nullsAccepted code, since that relied on the previous behaviour of this.", "commitDateTime": "2013-03-16 22:53:57", "authoredDateTime": "2013-02-17 14:23:26", "commitGitStats": [{"filePath": "src/main/java/org/junit/experimental/theories/ParameterSupplier.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/junit/experimental/theories/Theories.java", "insertions": 14, "deletions": 9, "lines": 23}, {"filePath": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "insertions": 3, "deletions": 7, "lines": 10}, {"filePath": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "insertions": 9, "deletions": 16, "lines": 25}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/AssumingInTheoriesTest.java", "insertions": 2, "deletions": 7, "lines": 9}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/TheoryTestUtils.java", "insertions": 13, "deletions": 1, "lines": 14}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/internal/AllMembersSupplierTest.java", "insertions": 38, "deletions": 20, "lines": 58}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/internal/SpecificDataPointsSupplierTest.java", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/WithDataPointMethod.java", "insertions": 31, "deletions": 17, "lines": 48}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/WithExtendedParameterSources.java", "insertions": 38, "deletions": 5, "lines": 43}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/WithNamedDataPoints.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/WithParameterSupplier.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ParameterSupplier.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.ParameterSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Theories.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.Theories.TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments).1.createTest()", "TOT": 6, "UPD": 1, "INS": 2, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.experimental.theories.Theories.TheoryAnchor.methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod,org.junit.experimental.theories.internal.Assignments,java.lang.Object).2.evaluate()", "TOT": 8, "UPD": 0, "INS": 2, "MOV": 5, "DEL": 1}]}, {"spoonFilePath": "AllMembersSupplier.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Assignments.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.Assignments.getActualValues(int,int,boolean)", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 4}, {"spoonMethodName": "org.junit.experimental.theories.internal.Assignments.getConstructorArguments(boolean)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 2}, {"spoonMethodName": "org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "org.junit.experimental.theories.internal.Assignments.getAllArguments(boolean)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "AssumingInTheoriesTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.AssumingInTheoriesTest.theoryMeansOnlyAssumeShouldFail()", "TOT": 5, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 3}]}, {"spoonFilePath": "TheoryTestUtils.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.TheoryTestUtils.potentialAssignments(java.lang.reflect.Method)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.TheoryTestUtils.runTheoryClass(java.lang.Class)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "StubbedTheories.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.extendingwithstubs.StubbedTheories.StubbedTheoryAnchor.createGuesserQueue(org.junit.experimental.theories.internal.Assignments)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllMembersSupplierTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.dataPointsArrayMethodMayContainNullValue()", "TOT": 11, "UPD": 4, "INS": 1, "MOV": 5, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.dataPointsAnnotationMeansTreatAsArrayOnly()", "TOT": 14, "UPD": 4, "INS": 1, "MOV": 8, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.dataPointsArrayFieldMayContainNullValue()", "TOT": 15, "UPD": 3, "INS": 1, "MOV": 10, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.HasFailingDataPointsArrayMethod", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.allMembersFailsOnFailingDataPointsArrayMethod()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.allMemberValuesFor(java.lang.Class,java.lang.Class[])", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SpecificDataPointsSupplierTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedFieldDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedMethodDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedSingleFieldDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedSingleMethodDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnNothingIfTheNamedDataPointsAreMissing()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "WithDataPointMethod.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasUglyDataPointMethod", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.ignoreExceptionsFromDataPointMethods()", "TOT": 3, "UPD": 2, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasUglyDataPointMethod.oneUglyHundred()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.oneHundred()", "TOT": 4, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.ignoreDataPointMethodsWithWrongTypes()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod", "TOT": 4, "UPD": 0, "INS": 1, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasFailingDataPointArrayMethod", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.shouldFailFromExceptionsInDataPointArrayMethods()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.shouldFailFromExceptionsInSingleDataPointMethods()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.notADataPoint()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasUglyDataPointMethod.oneHundred()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.allIntsOk(int)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.onlyStringsOk(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.onlyDatesOk(java.util.Date)", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "WithExtendedParameterSources.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldFilterNull", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.shouldFilterNull()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldFilterNull.allStringsAreNonNull(java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldFilterOutNullElementsFromDataPointArrays", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.shouldFilterOutNullElementsFromDataPointArrays()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldRejectTheoriesWithOnlyDisallowedNullData", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldRejectTheoriesWithOnlyDisallowedNullData()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "WithNamedDataPoints.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithNamedDataPoints.onlyUseSpecificDataPointsIfSpecified()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "WithParameterSupplier.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithParameterSupplier.shouldPickUpDataPointsFromParameterSupplier()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "34e66740b9117ce85cfd416f9e931b2e533ab16e", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["8d7f5cc1d267cbc77b20fa17324350b5859d701e", "dbe771125873b707dfbc95f066649b4be8f247b2"], "nameRev": "34e66740b9117ce85cfd416f9e931b2e533ab16e tags/r4.12-beta-1~118", "commitMessage": "Merge pull request #639 from pimterry/datapoints-exceptions-#449\n\nFixes #449, stopping AllMembersSupplier & Theories hiding DataPoints method exceptions", "commitDateTime": "2013-03-26 10:27:28", "authoredDateTime": "2013-03-26 10:27:28", "commitGitStats": [{"filePath": "src/main/java/org/junit/experimental/theories/DataPoint.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "src/main/java/org/junit/experimental/theories/DataPoints.java", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "src/main/java/org/junit/experimental/theories/ParameterSupplier.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/main/java/org/junit/experimental/theories/PotentialAssignment.java", "insertions": 7, "deletions": 0, "lines": 7}, {"filePath": "src/main/java/org/junit/experimental/theories/Theories.java", "insertions": 14, "deletions": 9, "lines": 23}, {"filePath": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "insertions": 29, "deletions": 11, "lines": 40}, {"filePath": "src/main/java/org/junit/experimental/theories/internal/Assignments.java", "insertions": 9, "deletions": 16, "lines": 25}, {"filePath": "src/main/java/org/junit/experimental/theories/internal/SpecificDataPointsSupplier.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/TheoryTestUtils.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/extendingwithstubs/StubbedTheories.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/internal/AllMembersSupplierTest.java", "insertions": 39, "deletions": 17, "lines": 56}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/internal/SpecificDataPointsSupplierTest.java", "insertions": 6, "deletions": 6, "lines": 12}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/FailingDataPointMethods.java", "insertions": 136, "deletions": 0, "lines": 136}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/WithAutoGeneratedDataPoints.java", "insertions": 4, "deletions": 4, "lines": 8}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/WithDataPointMethod.java", "insertions": 3, "deletions": 30, "lines": 33}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/WithExtendedParameterSources.java", "insertions": 38, "deletions": 5, "lines": 43}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/WithNamedDataPoints.java", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/WithParameterSupplier.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "DataPoint.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.ignoredExceptions()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "DataPoints.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.ignoredExceptions()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ParameterSupplier.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.ParameterSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "PotentialAssignment.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.PotentialAssignment.CouldNotGenerateValueException", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Theories.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.Theories.TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments).1.createTest()", "TOT": 6, "UPD": 1, "INS": 2, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.experimental.theories.Theories.TheoryAnchor.methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod,org.junit.experimental.theories.internal.Assignments,java.lang.Object).2.evaluate()", "TOT": 8, "UPD": 0, "INS": 2, "MOV": 5, "DEL": 1}]}, {"spoonFilePath": "AllMembersSupplier.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.MethodParameterValue.getValue()", "TOT": 4, "UPD": 2, "INS": 2, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)", "TOT": 4, "UPD": 1, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.isAssignableToAnyOf(java.lang.Class[],java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "Assignments.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.Assignments.getActualValues(int,int,boolean)", "TOT": 5, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 4}, {"spoonMethodName": "org.junit.experimental.theories.internal.Assignments.getConstructorArguments(boolean)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 2}, {"spoonMethodName": "org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 2}, {"spoonMethodName": "org.junit.experimental.theories.internal.Assignments.getAllArguments(boolean)", "TOT": 4, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 2}]}, {"spoonFilePath": "SpecificDataPointsSupplier.java", "spoonMethods": []}, {"spoonFilePath": "TheoryTestUtils.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.TheoryTestUtils.potentialAssignments(java.lang.reflect.Method)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "StubbedTheories.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.extendingwithstubs.StubbedTheories.StubbedTheoryAnchor.createGuesserQueue(org.junit.experimental.theories.internal.Assignments)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllMembersSupplierTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.dataPointsArrayMethodMayContainNullValue()", "TOT": 11, "UPD": 4, "INS": 1, "MOV": 5, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.dataPointsArrayShouldBeRecognized()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.dataPointsArrayShouldBeRecognizedOnValueTypeNotFieldType()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.dataPointMethodShouldBeRecognizedForOverlyGeneralParameters()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.dataPointsAnnotationMeansTreatAsArrayOnly()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.dataPointsArrayFieldMayContainNullValue()", "TOT": 17, "UPD": 5, "INS": 1, "MOV": 10, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.HasFailingDataPointsArrayMethod", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.allMembersFailsOnFailingDataPointsArrayMethod()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.AllMembersSupplierTest.allMemberValuesFor(java.lang.Class,java.lang.Class[])", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "SpecificDataPointsSupplierTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedFieldDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedMethodDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedSingleFieldDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnOnlyTheNamedSingleMethodDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.internal.SpecificDataPointsSupplierTest.shouldReturnNothingIfTheNamedDataPointsAreMissing()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "FailingDataPointMethods.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.FailingDataPointMethods", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "WithAutoGeneratedDataPoints.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints.shouldAutomaticallyGenerateEnumDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints.shouldAutomaticallyGenerateBooleanDataPoints()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints.shouldNotAutogenerateEnumDataPointsWhenSpecificDataPointGiven()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithAutoGeneratedDataPoints.shouldNotAutogenerateBooleanDataPointsWhenSpecificDataPointGiven()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "WithDataPointMethod.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.ignoreDataPointMethodsWithWrongTypes()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasUglyDataPointMethod", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.ignoreExceptionsFromDataPointMethods()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.oneHundred()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.notADataPoint()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasUglyDataPointMethod.oneHundred()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasUglyDataPointMethod.oneUglyHundred()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "WithExtendedParameterSources.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldFilterNull", "TOT": 2, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.shouldFilterNull()", "TOT": 2, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldFilterNull.allStringsAreNonNull(java.lang.String)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldFilterOutNullElementsFromDataPointArrays", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.shouldFilterOutNullElementsFromDataPointArrays()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldRejectTheoriesWithOnlyDisallowedNullData", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldRejectTheoriesWithOnlyDisallowedNullData()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "WithNamedDataPoints.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithNamedDataPoints.onlyUseSpecificDataPointsIfSpecified()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "WithParameterSupplier.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.WithParameterSupplier.shouldPickUpDataPointsFromParameterSupplier()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["5c2070d7cf981e2e103aef6fd0ef64c473331325"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 27, "deletions": 33, "lines": 60, "gitFilesChange": 4}, "spoonStatsSummary": {"TOT": 72, "UPD": 16, "INS": 16, "MOV": 26, "DEL": 14, "spoonFilesChanged": 9, "spoonMethodsChanged": 34}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/experimental/theories", "src/main/java/org/junit/experimental/theories/internal"], "changesInPackagesSPOON": ["org.junit.experimental.theories.internal.Assignments.getAllArguments(boolean)", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.onlyDatesOk(java.util.Date)", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.shouldFailFromExceptionsInSingleDataPointMethods()", "org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)", "org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasUglyDataPointMethod.oneUglyHundred()", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.oneHundred()", "org.junit.experimental.theories.ParameterSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)", "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.shouldFilterOutNullElementsFromDataPointArrays()", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasUglyDataPointMethod", "org.junit.tests.experimental.theories.extendingwithstubs.StubbedTheories.StubbedTheoryAnchor.createGuesserQueue(org.junit.experimental.theories.internal.Assignments)", "org.junit.tests.experimental.theories.runner.WithParameterSupplier.shouldPickUpDataPointsFromParameterSupplier()", "org.junit.experimental.theories.internal.Assignments.getConstructorArguments(boolean)", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasFailingDataPointArrayMethod", "org.junit.experimental.theories.Theories.TheoryAnchor.runWithCompleteAssignment(org.junit.experimental.theories.internal.Assignments).1.createTest()", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.notADataPoint()", "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldRejectTheoriesWithOnlyDisallowedNullData()", "org.junit.tests.experimental.theories.runner.WithNamedDataPoints.onlyUseSpecificDataPointsIfSpecified()", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.shouldFailFromExceptionsInDataPointArrayMethods()", "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldFilterOutNullElementsFromDataPointArrays", "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldFilterNull", "org.junit.experimental.theories.internal.Assignments.potentialsForNextUnassigned()", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.ignoreDataPointMethodsWithWrongTypes()", "org.junit.experimental.theories.internal.Assignments.getMethodArguments(boolean)", "org.junit.experimental.theories.internal.Assignments.getActualValues(int,int,boolean)", "org.junit.experimental.theories.Theories.TheoryAnchor.methodCompletesWithParameters(org.junit.runners.model.FrameworkMethod,org.junit.experimental.theories.internal.Assignments,java.lang.Object).2.evaluate()", "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.shouldFilterNull()", "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldFilterNull.allStringsAreNonNull(java.lang.String)", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.onlyStringsOk(java.lang.String)", "org.junit.tests.experimental.theories.runner.WithExtendedParameterSources.ShouldRejectTheoriesWithOnlyDisallowedNullData", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasUglyDataPointMethod.oneHundred()", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.HasDateMethod.allIntsOk(int)", "org.junit.tests.experimental.theories.runner.WithDataPointMethod.ignoreExceptionsFromDataPointMethods()"]}, {"title": "fix for issue 283 (recursive temp folders) caused incompatibility", "body": "The fix for issue 283, described here:\n- `TemporaryFolder#newFolder(String... folderNames)` creates\n  recursively deep temporary folders\n  [@rodolfoliviero, closing gh-283]\n\ncauses existing uses of (the now missing) TemporaryFolder#newFolder(String) to fail with NoSuchMethodError. If this was deliberate, then that's fine -- we'll edit and recompile, but I just wanted to be sure you were aware. \n", "url": "https://github.com/junit-team/junit4/issues/441", "user": "LeeBreisacher", "labels": ["bug"], "created": "2012-05-30 13:05:36", "closed": "2012-06-23 16:17:06", "commits": {"67e43ab827da24baa6477e33e4e883a36dfcf645": {"commitGHEventType": "closed", "commitUser": "kcooney"}}, "ttf": 24.00027777777778, "commitsDetails": [{"commitHash": "67e43ab827da24baa6477e33e4e883a36dfcf645", "commitGHEventType": "closed", "commitUser": "kcooney", "commitParents": ["e8b91fa9f797dfe16aff66ed6ad5d6104e5133fe"], "nameRev": "67e43ab827da24baa6477e33e4e883a36dfcf645 tags/r4.11-beta-1~27^2", "commitMessage": "Fixes #441 fix for issue 283 (recursive temp folders) caused incompatibility\nPut back in the method folder.newFolder(String) that\nwas removed in #283. Tests that the method is there using\nreflection.\n", "commitDateTime": "2012-06-19 13:58:32", "authoredDateTime": "2012-06-19 13:58:32", "commitGitStats": [{"filePath": "src/main/java/org/junit/rules/TemporaryFolder.java", "insertions": 9, "deletions": 1, "lines": 10}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/TempFolderRuleTest.java", "insertions": 20, "deletions": 3, "lines": 23}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TemporaryFolder.java", "spoonMethods": [{"spoonMethodName": "org.junit.rules.TemporaryFolder.newFolder(java.lang.String)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TempFolderRuleTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.rules.TempFolderRuleTest.CreatesSubFolder.testUsingTempFolder()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.rules.TempFolderRuleTest.CreatesSubFolder.testUsingTempFolderStringReflection()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "ParameterizedAssertionError in Theory", "body": "The following test throws a ParameterizedAssertionError.\nIt seems that both parameters of the test method get the same argument, although they are of different types.\n\n``` java\n\nimport java.lang.reflect.Field;\nimport java.util.ResourceBundle;\n\nimport org.junit.experimental.theories.DataPoint;\nimport org.junit.experimental.theories.DataPoints;\nimport org.junit.experimental.theories.Theories;\nimport org.junit.experimental.theories.Theory;\nimport org.junit.runner.RunWith;\n\n@RunWith(Theories.class)\npublic class ErrorIDsTest {\n\n    @DataPoints\n    public static Field[] errorIDs() {\n        return ErrorIDs.class.getDeclaredFields();\n    }\n\n    @DataPoint\n    public static ResourceBundle bundle = null;\n\n    @Theory\n    public void testThatFails(Field field, ResourceBundle bundle) throws Exception {\n    }\n}\n\n\ninterface ErrorIDs {\n      public final String Fehler = \"ErrorIDs.Fehler\";\n}\n```\n\nThe exception is\n\norg.junit.experimental.theories.internal.ParameterizedAssertionError: testThatFails(errorIDs[0], errorIDs[0])\n    at org.junit.experimental.theories.Theories$TheoryAnchor.reportParameterizedError(Theories.java:183)\n    at org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate(Theories.java:138)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithCompleteAssignment(Theories.java:119)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(Theories.java:103)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(Theories.java:112)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(Theories.java:101)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithIncompleteAssignment(Theories.java:112)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.runWithAssignment(Theories.java:101)\n    at org.junit.experimental.theories.Theories$TheoryAnchor.evaluate(Theories.java:89)\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: java.lang.IllegalArgumentException: argument type mismatch\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    at java.lang.reflect.Method.invoke(Method.java:592)\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n    at org.junit.experimental.theories.Theories$TheoryAnchor$2.evaluate(Theories.java:167)\n    at org.junit.experimental.theories.Theories$TheoryAnchor$1$1.evaluate(Theories.java:133)\n    ... 22 more\n", "url": "https://github.com/junit-team/junit4/issues/379", "user": "NicoleRauch", "labels": ["bug", "theories"], "created": "2012-02-12 19:43:04", "closed": "2012-09-04 20:33:36", "commits": {}, "ttf": 205.00027777777777, "commitsDetails": []}, {"title": "filtering by category can lead to ExceptionInInitializerError", "body": "I am testing the support of categories in maven/surefire.\n\nIn categories.Categories#shouldRun you end up calling Description#getTestClass to check the annotations.\n\nThis is implemented by a direct classForName(className). This leads to a full initialization of this class (static & so on), even if at the end this test class won't be retained. As the initialization can be expensive for some categories of tests, it's already an issue.\n\nIn a context where there is a separation between the jvm used to select/launch the tests and the jvm used to execute them, it just does not work.\n\nThis can be very easily fixed in JUnit by not initializing the class in Description#getTestClass by calling\n`Class.forName(name, false, getClass().getClassLoader());`\n\ninstead of\n\n``` Class.forName(name);```\n\nThis method exists since java 1.2 (see http://download.oracle.com/javase/6/docs/api/java/lang/Class.html#forName%28java.lang.String,%20boolean,%20java.lang.ClassLoader%29)\n\nTested, it works with maven/surefire.\n```\n", "url": "https://github.com/junit-team/junit4/issues/359", "user": "nkeywal", "labels": ["bug", "nonregression"], "created": "2011-11-08 00:15:09", "closed": "2012-04-21 20:09:33", "commits": {"b1068dc55c95d1000e07b71d3a9d9a2fd26bfff9": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 165.00027777777777, "commitsDetails": [{"commitHash": "b1068dc55c95d1000e07b71d3a9d9a2fd26bfff9", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["1cec456a2c5638818959856eb3cef98743cbe08b", "eb307fa6f37ac8ec695b2f556e543969503418f5"], "nameRev": "b1068dc55c95d1000e07b71d3a9d9a2fd26bfff9 tags/r4.11-beta-1~54", "commitMessage": "Merge pull request #362 from nkeywal/eb307fa6f37ac8ec695b2f556e543969503418f5\n\nFix for #359", "commitDateTime": "2012-03-05 13:52:06", "authoredDateTime": "2012-03-05 13:52:06", "commitGitStats": [{"filePath": "src/main/java/org/junit/runner/Description.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Description.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.Description.getTestClass()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "@Rule should not require MethodRule in 4.10, regression?", "body": "I believe this is a regression. I was investigating an issue I was having where a test would fail on a build server but pass locally when I realised I was using 4.9 locally and 4.10 on the server. It was complaining the my @Rule field \"must implement MethodRule\" and I started to suspect a regression, especially since MethodRule is supposedly deprecated. This field was implementing TestRule which should've worked ( as far as I understant rules). As such I decided to test this using the example code from http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/RuleChain.html\n\nWhich I updated to be compilable (the example is missing some parentheses for example, could someone update that as well with this fragment?) which gave me the same error. So either there is a regression, or the example is wrong, or I am stupid and missing something: those are all equally possible.\n\n```\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.RuleChain;\nimport org.junit.rules.TestRule;\nimport org.junit.runner.Description;\nimport org.junit.runners.model.Statement;\nimport static org.junit.Assert.assertTrue;\n\n\npublic class UseRuleChain {\n    @Rule\n    public TestRule chain= RuleChain\n                           .outerRule(new LoggingRule(\"outer rule\"))\n                           .around(new LoggingRule(\"middle rule\"))\n                           .around(new LoggingRule(\"inner rule\"));\n\n    @Test\n    public void example() {\n            assertTrue(true);\n    }\n\n    static class LoggingRule implements TestRule{\n        String s;\n        public LoggingRule( String s ){\n            this.s = s;\n        }\n\n        @Override\n        public Statement apply( Statement arg0, Description arg1 ){\n            System.out.println( this.s );\n            return arg0;\n        }\n    }\n}\n```\n", "url": "https://github.com/junit-team/junit4/issues/350", "user": "Art-B", "labels": ["bug", "regression"], "created": "2011-10-21 18:39:09", "closed": "2011-10-21 19:48:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Categories javadoc does not specify the behavior of categories on parents and children.", "body": "", "url": "https://github.com/junit-team/junit4/issues/338", "user": "dsaff", "labels": ["bug", "categories", "javadoc", "nonregression"], "created": "2011-10-10 14:46:06", "closed": "2013-09-18 20:05:30", "commits": {}, "ttf": 709.0002777777778, "commitsDetails": []}, {"title": "build.xml is broken after merges (invalid XML)", "body": "build.xml is broken on main trunk after merges\nafter \"Merge branch 4.10\" changes by dsaff on 2011-09-29.\n\n```\n...\n<<<<<<< HEAD\n  <property name=\"version-base\" value=\"4.11\" />\n  <property name=\"version-status\" value=\"-SNAPSHOT\" />\n=======\n  <property name=\"version-base\" value=\"4.10\" />\n  <property name=\"version-status\" value=\"\" />\n>>>>>>> 4.10\n...\n```\n", "url": "https://github.com/junit-team/junit4/issues/333", "user": "jenisys", "labels": ["bug", "regression"], "created": "2011-10-04 21:10:41", "closed": "2011-10-07 13:25:39", "commits": {"ebbcb2d3a730e8313546eae1602e274c228102a3": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "ebbcb2d3a730e8313546eae1602e274c228102a3", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["4c8d3ff5ea9d1556bf05af6262ee58f65984e22f", "f82403fb69db120079c861d4da560e7cae329be9"], "nameRev": "ebbcb2d3a730e8313546eae1602e274c228102a3 tags/r4.11-beta-1~63", "commitMessage": "Merge pull request #334 from matthewfarwell/333-build.xml-is-broken-after-merges\n\nFixes gh-333: build.xml is broken after merge", "commitDateTime": "2011-10-07 06:25:38", "authoredDateTime": "2011-10-07 06:25:38", "commitGitStats": [{"filePath": "build.xml", "insertions": 0, "deletions": 5, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "4.9 and 4.10 \"junit\" artifacts in Maven Central have hamcrest as dependency defined while in \"junit\" artifact the hamcrest classes are already included", "body": "", "url": "https://github.com/junit-team/junit4/issues/332", "user": "Vampire", "labels": ["bug", "hamcrest", "maven", "nonregression"], "created": "2011-10-03 16:54:00", "closed": "2012-09-23 14:10:31", "commits": {}, "ttf": 355.0002777777778, "commitsDetails": []}, {"title": "Fix 4.9.1 release notes, make sure markdown errors don't get passed through again..", "body": "", "url": "https://github.com/junit-team/junit4/issues/311", "user": "dsaff", "labels": ["bug", "regression"], "created": "2011-09-13 20:06:52", "closed": "2011-09-14 19:51:39", "commits": {"ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605": {"commitGHEventType": "closed", "commitUser": "dsaff"}, "b6c1407343259de943e181401b29c6fad0f31e58": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["e76c5f0fe7e1e2034765fd80cd7556b6bfc82345"], "nameRev": "ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605 tags/r4.10~7^2", "commitMessage": "Fixes gh-311: Fix 4.9.1 release notes, make sure markdown errors halt build\n", "commitDateTime": "2011-09-14 15:50:08", "authoredDateTime": "2011-09-14 15:50:08", "commitGitStats": [{"filePath": "build.xml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "doc/ReleaseNotes4.9.1.html", "insertions": 0, "deletions": 4, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "b6c1407343259de943e181401b29c6fad0f31e58", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["3914b8fc8a4d6ad574994979d2a4c7b63258e227", "ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605"], "nameRev": "b6c1407343259de943e181401b29c6fad0f31e58 tags/r4.10~7", "commitMessage": "Merge pull request #315 from dsaff/master\n\nFixes gh-311: Fix 4.9.1 release notes, make sure markdown errors halt build", "commitDateTime": "2011-09-14 12:51:38", "authoredDateTime": "2011-09-14 12:51:38", "commitGitStats": [{"filePath": "build.xml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "doc/ReleaseNotes4.9.1.html", "insertions": 0, "deletions": 4, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 0, "deletions": 4, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["doc/ReleaseNotes4.9.1.html"]}, {"title": "build.xml uploads junitX.jar as junit-depX.jar", "body": "This means that although the correct junit-depX.jar files are created locally (that is, without the hamcrest classes), they are ignored, and the junitX.jar file is uploaded under the name junit-depX.jar.\n", "url": "https://github.com/junit-team/junit4/issues/309", "user": "dsaff", "labels": ["bug", "regression"], "created": "2011-09-13 19:44:50", "closed": "2011-09-14 19:35:01", "commits": {"3914b8fc8a4d6ad574994979d2a4c7b63258e227": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "3914b8fc8a4d6ad574994979d2a4c7b63258e227", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["96df21cba5e56ee6d78fe51e86b4cc2bd2ceaf30", "e76c5f0fe7e1e2034765fd80cd7556b6bfc82345"], "nameRev": "3914b8fc8a4d6ad574994979d2a4c7b63258e227 tags/r4.10~8", "commitMessage": "Merge pull request #310 from dsaff/master\n\nFixes gh-309: build.xml uploads junitX.jar as junit-depX.jar", "commitDateTime": "2011-09-14 12:35:00", "authoredDateTime": "2011-09-14 12:35:00", "commitGitStats": [{"filePath": "build.xml", "insertions": 56, "deletions": 19, "lines": 75}, {"filePath": "build/lib/ant-contrib-1.0b3.jar", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "pom-template.xml => build/maven/pom-template.xml", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "build/maven/post_maven_tests.sh", "insertions": 49, "deletions": 0, "lines": 49}, {"filePath": "build/maven/sample_project_template/pom.xml", "insertions": 61, "deletions": 0, "lines": 61}, {"filePath": "build/maven/sample_project_template/src/test/java/JunitDependencyTest.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "build/run_tests.sh", "insertions": 36, "deletions": 0, "lines": 36}, {"filePath": "build_tests.sh", "insertions": 1, "deletions": 34, "lines": 35}, {"filePath": "doc/ReleaseNotes4.9.1.html", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pom-template.xml.asc", "insertions": 0, "deletions": 12, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JunitDependencyTest.java", "spoonMethods": [{"spoonMethodName": "JunitDependencyTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Is it possible to get a 4.9 tag?", "body": "thanks :)\n", "url": "https://github.com/junit-team/junit4/issues/303", "user": "orip", "labels": ["bug", "regression"], "created": "2011-09-09 11:34:36", "closed": "2011-09-13 21:02:04", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "TestWatchman.failed should not be invoked for AssumptionViolatedExceptions", "body": "I have set up a TestWatchman which is out of sync with the regular JUnit test reporters since the failed method is invoked even when the test passes as an assumption fails.\n\nI believe the least astonishing thing to do here is no not invoke failed for AssumptionViolatedExceptions.\n", "url": "https://github.com/junit-team/junit4/issues/296", "user": "rombert", "labels": ["bug", "nonregression"], "created": "2011-08-30 12:41:15", "closed": "2011-09-09 20:30:42", "commits": {"561a736d4400c32a608a6ee97424c20ca70bf8ae": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "561a736d4400c32a608a6ee97424c20ca70bf8ae", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["61f06547599bb6b98bca99d5bc457eb20bc17cab", "ada8735cda0fe94c9cfea9b8fb2012488a3a44e6"], "nameRev": "561a736d4400c32a608a6ee97424c20ca70bf8ae tags/r4.10~14", "commitMessage": "Merge pull request #302 from stefanbirkner/TestWatcher\n\nfixed issue #296", "commitDateTime": "2011-09-09 13:28:18", "authoredDateTime": "2011-09-09 13:28:18", "commitGitStats": [{"filePath": "acknowledgements.txt", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "src/main/java/org/junit/rules/TestWatcher.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "src/main/java/org/junit/rules/TestWatchman.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/LoggingTestWatcher.java", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/TestRuleTest.java", "insertions": 15, "deletions": 27, "lines": 42}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/TestWatcherTest.java", "insertions": 52, "deletions": 0, "lines": 52}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/TestWatchmanTest.java", "insertions": 71, "deletions": 0, "lines": 71}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TestWatcher.java", "spoonMethods": [{"spoonMethodName": "org.junit.rules.TestWatcher.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestWatchman.java", "spoonMethods": [{"spoonMethodName": "org.junit.rules.TestWatchman.apply(org.junit.runners.model.Statement,org.junit.runners.model.FrameworkMethod,java.lang.Object).1.evaluate()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "LoggingTestWatcher.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.rules.LoggingTestWatcher", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestRuleTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.OnFailureTest", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.WatchmanTest", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.BeforesAndAfters", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.BeforesAndAfters.before()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.BeforesAndAfters.after()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.BeforesAndAfters.succeeds()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.beforesAndAfters()", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "TestWatcherTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.rules.TestWatcherTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestWatchmanTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.rules.TestWatchmanTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "odd and unclear language in Result javadoc", "body": "http://junit.sourceforge.net/javadoc/org/junit/runner/Result.html\n\nThis doc says:\n\n   A Result collects and summarizes information from running\n   multiple tests. Since tests are expected to run correctly, successful\n   tests are only noted in the count of tests that ran. \n\nShould this be, instead, this?\n\n   A Result collects and summarizes information from running\n   multiple tests. Since tests are expected to run correctly, only successful\n   tests are noted in the count of tests that ran. \n\nThat seems to be clearer.\n", "url": "https://github.com/junit-team/junit4/issues/295", "user": "rkiddy", "labels": ["bug", "javadoc", "nonregression"], "created": "2011-08-28 03:40:08", "closed": "2012-05-25 21:29:18", "commits": {"4311a62451755c3bb0a2c9c8cb737bda9d09d4c7": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 271.0002777777778, "commitsDetails": [{"commitHash": "4311a62451755c3bb0a2c9c8cb737bda9d09d4c7", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["99c4e59a2c01c215c9c1fe26a5b1a80f429d8ba1"], "nameRev": "4311a62451755c3bb0a2c9c8cb737bda9d09d4c7 tags/r4.11-beta-1~32^2", "commitMessage": "Fixes #295 clarify javadoc for Result\n", "commitDateTime": "2012-05-25 12:45:01", "authoredDateTime": "2012-05-25 12:45:01", "commitGitStats": [{"filePath": "src/main/java/org/junit/runner/Result.java", "insertions": 2, "deletions": 3, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Result.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4311a62451755c3bb0a2c9c8cb737bda9d09d4c7"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 3, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/runner"]}, {"title": "junit-dep-4.9.jar in Maven repository contains hamcrest classes", "body": "You may have a look at http://search.maven.org/#artifactdetails|junit|junit-dep|4.9|jar\n", "url": "https://github.com/junit-team/junit4/issues/292", "user": "stefanbirkner", "labels": ["bug", "regression"], "created": "2011-08-25 17:23:24", "closed": "2011-10-03 16:44:28", "commits": {}, "ttf": 38.000277777777775, "commitsDetails": []}, {"title": "Why is there an \"errors.clear()\" in RunAfters?", "body": "The `clear()` in line 29 of [RunAfters.java](https://github.com/KentBeck/junit/blob/b3789b3f879d34bbe968d5aa51d15c8856b9d102/src/main/java/org/junit/internal/runners/statements/RunAfters.java) is probably not necessary :-)\n", "url": "https://github.com/junit-team/junit4/issues/289", "user": "digulla", "labels": ["bug", "nonregression"], "created": "2011-08-16 07:06:20", "closed": "2011-09-22 17:36:32", "commits": {"f34121370f3698a529087013fecc45b0e94fb968": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 37.000277777777775, "commitsDetails": [{"commitHash": "f34121370f3698a529087013fecc45b0e94fb968", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["561a736d4400c32a608a6ee97424c20ca70bf8ae", "39545426e07dcb3bb3d71c930451514ba54c5999"], "nameRev": "f34121370f3698a529087013fecc45b0e94fb968 tags/r4.10~13", "commitMessage": "Merge pull request #301 from stefanbirkner/issue289\n\nfixed issue #289 (removed useless code)", "commitDateTime": "2011-09-10 03:17:29", "authoredDateTime": "2011-09-10 03:17:29", "commitGitStats": [{"filePath": "acknowledgements.txt", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "src/main/java/org/junit/internal/runners/statements/RunAfters.java", "insertions": 0, "deletions": 1, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RunAfters.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.runners.statements.RunAfters.evaluate()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Test result missing in JUnit View for a test runned in two test suites", "body": "OS : Win XP\nIDE : Eclipse Indigo\nJUnit : 4.8.2\n\nWhen i run the same test in two different test suites, i get a test result only for the last executed one.\nHere is the code to reproduce the defect :\n\npublic class AllTests {\n\n```\npublic static Test suite() {\n    TestSuite suite = new TestSuite(\"My tests\");\n\n    TestSuite ff = new TestSuite(\"Firefox\");\n    TestSuite ie = new TestSuite(\"InternetExplorer\");\n\n    suite.addTest(ff);\n    suite.addTest(ie);\n\n    ff.addTestSuite(TC01.class);\n    ie.addTestSuite(TC01.class);\n\n    return suite;\n}\n```\n\n}\n\npublic class TC01 extends TestCase{\n    public void test10() {\n        assertTrue( true );\n    }\n    public void test11() {\n        fail(\"failed\");\n    }\n}\n", "url": "https://github.com/junit-team/junit4/issues/262", "user": "florentbr", "labels": ["bug", "nonregression"], "created": "2011-07-15 21:35:38", "closed": "2012-04-21 20:12:28", "commits": {}, "ttf": 280.0002777777778, "commitsDetails": []}, {"title": "Non-Public @Rule field results in strange exception message", "body": "Running a test with a non public @Rule field resutls in a strange exception message: How did getFields return a field we couldn't access?\n", "url": "https://github.com/junit-team/junit4/issues/260", "user": "stefanbirkner", "labels": ["bug", "regression"], "created": "2011-07-09 20:07:39", "closed": "2011-08-11 20:05:46", "commits": {}, "ttf": 32.000277777777775, "commitsDetails": []}, {"title": "Non-public @ClassRule field results in strange exception message ", "body": "Running the following test:\n\n``` java\npublic class ClassRuleNonPublic {\n    @ClassRule\n    static ExternalResource resource = new ExternalResource() {    };\n\n    @Test\n    public void pass() {\n        assertTrue(true);\n    }\n}\n```\n\nresults in:\n\n```\njava.lang.RuntimeException: How did getAnnotatedFields return a field we couldn't access?\n    at org.junit.runners.ParentRunner.getClassRule(ParentRunner.java:214)\n    at org.junit.runners.ParentRunner.classRules(ParentRunner.java:206)\n    at org.junit.runners.ParentRunner.withClassRules(ParentRunner.java:194)\n    at org.junit.runners.ParentRunner.classBlock(ParentRunner.java:153)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:304)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n```\n\nI suggest the exception message be changed to something like \"Field X must be public\", where X is the field name.\n", "url": "https://github.com/junit-team/junit4/issues/258", "user": "nigelcharman", "labels": ["bug", "regression"], "created": "2011-07-09 05:04:32", "closed": "2011-08-12 14:34:26", "commits": {}, "ttf": 34.000277777777775, "commitsDetails": []}, {"title": "Missing static keyword on @ClassRule field causes NPE", "body": "When the static keyword is missing on a field annotated by @ClassRule, a NullPointerException occurs.  For example:\n\n``` java\npublic class ClassRuleNPE {\n    @ClassRule\n    public ExternalResource resource = new ExternalResource() {    };\n\n    @Test\n    public void pass() {\n        assertTrue(true);\n    }\n}\n```\n\nresults in:\n\n```\njava.lang.NullPointerException\n    at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:36)\n    at sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:18)\n    at java.lang.reflect.Field.get(Field.java:358)\n    at org.junit.runners.model.FrameworkField.get(FrameworkField.java:48)\n    at org.junit.runners.ParentRunner.getClassRule(ParentRunner.java:212)\n    at org.junit.runners.ParentRunner.classRules(ParentRunner.java:206)\n    at org.junit.runners.ParentRunner.withClassRules(ParentRunner.java:194)\n    at org.junit.runners.ParentRunner.classBlock(ParentRunner.java:153)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:304)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n```\n", "url": "https://github.com/junit-team/junit4/issues/257", "user": "nigelcharman", "labels": ["bug", "regression"], "created": "2011-07-09 04:51:08", "closed": "2011-08-12 14:34:35", "commits": {}, "ttf": 34.000277777777775, "commitsDetails": []}, {"title": "protected BlockJUnit4ClassRunner#rules method removed from 4.8.2", "body": "As this method is of scope `protected` in 4.8 and 4.8.1 it seems that it is (was) meant for possible overriding. Especially I use that to add from my custom `Runner` an extra `MethodRule` to the list of rules.\nThis allows users of the runner to not have to specify a rule as well and then minimise configuration.\n\nIf there is a clean work around this particular issue, I'm more than happy to hear about it. Looking at the code I couldn't find a clean and simple way to do this\u2026\n\nCan the `rules` method be added back?\n\nBTW, the code for the `ActiveObjectsJUnitRunner` I am talking about is here if that helps: http://java.net/projects/activeobjects/sources/svn/content/trunk/activeobjects-test/src/main/java/net/java/ao/test/junit/ActiveObjectsJUnitRunner.java\n\nThe actual overridding of the `rules` method:\n\n``` java\n@Override\n    protected List<MethodRule> rules(Object test)\n    {\n        final LinkedList<MethodRule> methodRules = new LinkedList<MethodRule>(super.rules(test));\n        methodRules.add(new ActiveObjectTransactionMethodRule(test, jdbcConfiguration, withIndex, tableNameConverter, fieldNameConverter));\n        return methodRules;\n    }\n```\n", "url": "https://github.com/junit-team/junit4/issues/248", "user": "sleberrigaud", "labels": ["bug", "regression"], "created": "2011-06-23 10:14:12", "closed": "2011-06-29 15:51:25", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Commits for pull requests 237-239 not reachable from master", "body": "Pull requests 237, 238 and 239 were submitted, but they are not reachable from KentBeck/junit:master (and, as far as I can tell, they are not reachable from any branch listed in KentBeck/junit). They are all reachable from https://github.com/KentBeck/junit/commit/7b5661e\n\nNote that pull request 237 fixes a regression bug\n", "url": "https://github.com/junit-team/junit4/issues/242", "user": "kcooney", "labels": ["bug", "regression"], "created": "2011-06-12 15:11:36", "closed": "2011-06-15 04:19:57", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "4.7 release notes inconsistent", "body": "https://github.com/KentBeck/junit/commit/c618504adee4bc91b3bd7e0ff06be6e1fa9d88cc#commitcomment-403453\n\nCopy of my commit comment text:\n\nThis change has also to be done in the 4.7 HTML release notes. I've read these release notes couple of weeks ago in text form and found sadly that Hamcrest was downgraded again. Then I've read the release notes again today in html and wondered that I don't see the spot again about downgrading Hamcrest.\n", "url": "https://github.com/junit-team/junit4/issues/235", "user": "Vampire", "labels": ["bug", "regression"], "created": "2011-05-27 22:30:19", "closed": "2011-06-07 05:14:16", "commits": {"3d2826cb5650b127c5ffb55786b0b595674fda54": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "3d2826cb5650b127c5ffb55786b0b595674fda54", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["30b0c3000e75657cbd95a09110cec40d1695160c"], "nameRev": "3d2826cb5650b127c5ffb55786b0b595674fda54 tags/r4.9b3~8", "commitMessage": "Fixes #235: 4.7 release notes inconsistent\n", "commitDateTime": "2011-06-07 01:04:33", "authoredDateTime": "2011-06-07 01:04:33", "commitGitStats": [{"filePath": "acknowledgements.txt", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "build.xml", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "doc/ReleaseNotes4.7.html", "insertions": 5, "deletions": 36, "lines": 41}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3d2826cb5650b127c5ffb55786b0b595674fda54"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 36, "lines": 41, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["doc/ReleaseNotes4.7.html"]}, {"title": "ParentRunner now assumes that getChildren() returns a modifiable list", "body": "As of commit 01b427b3b89ce04d01f0, ParentRunner now assumes that getChildren() returns a  modifiable list. Previously, the sorting and the filtering happened in a list that was a copy of the List returned by getChildren()\n\nLess of an issue, but the call to Filter.intersect() in ParentRunner.filter() is probably not needed, since when the first filter was applied, the items not matching the filter were removed.\n", "url": "https://github.com/junit-team/junit4/issues/227", "user": "kcooney", "labels": ["bug", "regression"], "created": "2011-05-02 14:39:23", "closed": "2011-06-02 14:39:42", "commits": {}, "ttf": 31.00027777777778, "commitsDetails": []}, {"title": "error using JUnit4TestAdapter with class which has no test methods", "body": "Suppose we have two classes:\n\n``` java\n// A.java\npublic class A\n{\n}\n\n// Main.java\nimport junit.framework.JUnit4TestAdapter;\nimport junit.framework.Test;\nimport junit.framework.TestResult;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Test test = new JUnit4TestAdapter(A.class);\n\n        System.out.println(test.countTestCases());\n\n        TestResult res = new TestResult();\n        test.run(res); // Running a test class with no tests??\n        System.out.println(res.wasSuccessful());\n    }\n}\n```\n\nIf I run this application, Main class produces this output:\n\n``` java\n1\nfalse\n```\n\nSo, class A doesn't have any test methods, but JUnit4TestAdapter says that it does!\n", "url": "https://github.com/junit-team/junit4/issues/226", "user": "orionll", "labels": ["bug", "nonregression"], "created": "2011-05-01 14:14:41", "closed": "2016-09-18 07:21:28", "commits": {}, "ttf": 1966.0002777777777, "commitsDetails": []}, {"title": "error count not initialized in junit.tests.framework.TestListenerTest", "body": "I noticed that the variable fErrorCount in junit.tests.framework.TestListenerTest does not get initialized.\n\nI have version 4.9\n", "url": "https://github.com/junit-team/junit4/issues/225", "user": "rvdhorst", "labels": ["bug", "nonregression"], "created": "2011-04-30 13:01:08", "closed": "2011-09-16 13:54:44", "commits": {"901550a36244503ef2769724899cba213f11945f": {"commitGHEventType": "closed", "commitUser": "dsaff"}, "c82eef0da9be7201acb6dece4e96045756837c5a": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 139.00027777777777, "commitsDetails": [{"commitHash": "901550a36244503ef2769724899cba213f11945f", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["800f59a5089e58287c93def0fc00da6274b51e70"], "nameRev": "901550a36244503ef2769724899cba213f11945f tags/r4.10~5^2", "commitMessage": "Fixes gh-225 (initialize error count)\n", "commitDateTime": "2011-09-15 19:38:33", "authoredDateTime": "2011-09-15 19:38:33", "commitGitStats": [{"filePath": "src/test/java/junit/tests/framework/TestListenerTest.java", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TestListenerTest.java", "spoonMethods": [{"spoonMethodName": "junit.tests.framework.TestListenerTest.setUp()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "c82eef0da9be7201acb6dece4e96045756837c5a", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["800f59a5089e58287c93def0fc00da6274b51e70", "901550a36244503ef2769724899cba213f11945f"], "nameRev": "c82eef0da9be7201acb6dece4e96045756837c5a tags/r4.10~5", "commitMessage": "Merge pull request #317 from stefanbirkner/issue225\n\nFixes gh-225 (initialize error count)", "commitDateTime": "2011-09-16 06:54:43", "authoredDateTime": "2011-09-16 06:54:43", "commitGitStats": [{"filePath": "src/test/java/junit/tests/framework/TestListenerTest.java", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TestListenerTest.java", "spoonMethods": [{"spoonMethodName": "junit.tests.framework.TestListenerTest.setUp()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["901550a36244503ef2769724899cba213f11945f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Method DataPoints does not honor ParameterSignature", "body": "AllMembersSupplier.getValueSources does not pass 'sig' to addMultiPointMethods and therefore does not filter by parameter signature type.. Thus if you have\n\n@DataPoint public static int x = 5;\n@DataPoints public static String[] generateStrings() { .. }\n@Theory public void test(String s, int y) { .. }\n\nYou'll get a parameter mismatch, because generateStrings is forced to match against 'int y'.\n\nCurrently dataPointsMethod does not provide a signature analysis tool for proper efficient filtering, BUT you can just execute the method and check the returned data-type.\n\nI'll provide a pull request shortly with my temporary hack\n", "url": "https://github.com/junit-team/junit4/issues/220", "user": "maraist", "labels": ["bug", "nonregression", "theories"], "created": "2011-04-26 14:31:12", "closed": "2012-09-04 20:33:14", "commits": {}, "ttf": 497.0002777777778, "commitsDetails": []}, {"title": "Assert.assertArrayEquals(float[], float[], float) reports failures as doubles", "body": "Both Assert.assertArrayEquals(float[], float[], float) and Assert.assertArrayEquals(String, float[], float[], float) report AssertionFailures with doubles instead of floats. This does not seem like the desired functionality, since if you are doing a specified precision assertion about floats - the failure message should be written out as floats and not as doubles.\n\nThis is mostly because of InexactComparisonCriteria which is shared by both float and double. Constructor takes a primitive double, so when it is called by the signatures with float the float is being auto converted to a double. When InexactComparisonCriteria.assertElementsEqual() is called with floats, the type checking and casting ends up not functioning as it seems like it would for two reasons:\n1. delta field being stored as a double and then not cast to float means it will always match the signature (double, double, double) not (float, float, float) in the case of floats.\n2. there is no signature Assert.assertEquals(float, float, float) to match\n\nQuick code example to show problem:\n\n``` java\nfloat delta = 0.0001f;\nint failIndex = 1;\nfloat[] f1 = new float[] { 0.123f, 0.9301f, 21.823f };\nfloat[] f2 = new float[f1.length];\nSystem.arraycopy(f1, 0, f2, 0, f1.length);\nf2[failIndex] = f2[failIndex] + (delta + 0.0001f);\n\nSystem.out.println(\"\");\nSystem.out.println(Arrays.toString(f1));\nSystem.out.println(Arrays.toString(f2));\nSystem.out.println(\"\");\n\nSystem.out.println(\"arrays first differed at element [\" + failIndex + \"]; expected:<\" + f1[failIndex] + \"> but was:<\" + f2[failIndex] + \">\");\ntry {\n    Assert.assertArrayEquals(f1, f2, delta);\n} catch(AssertionError e) {\n    System.out.println(e.getMessage());\n}\n```\n", "url": "https://github.com/junit-team/junit4/issues/219", "user": "marksn", "labels": ["bug", "nonregression"], "created": "2011-04-25 16:03:34", "closed": "2013-06-17 13:35:34", "commits": {"688854ba468c53884b74952f4daf938a99c44e8c": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 783.0002777777778, "commitsDetails": [{"commitHash": "688854ba468c53884b74952f4daf938a99c44e8c", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["2e460f845c4198a0d12c010b3e478be61f480bcd", "0c38750119accdea92004723c8c177d7cc65b16c"], "nameRev": "688854ba468c53884b74952f4daf938a99c44e8c tags/r4.11-beta-1~31", "commitMessage": "Merge pull request #416 from jcortez/master\n\nFixed issue #219 (rebased)", "commitDateTime": "2012-05-25 14:48:29", "authoredDateTime": "2012-05-25 14:48:29", "commitGitStats": [{"filePath": "acknowledgements.txt", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "src/main/java/org/junit/Assert.java", "insertions": 47, "deletions": 2, "lines": 49}, {"filePath": "src/main/java/org/junit/internal/InexactComparisonCriteria.java", "insertions": 7, "deletions": 3, "lines": 10}, {"filePath": "src/test/java/org/junit/tests/assertion/AssertionTest.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Assert.java", "spoonMethods": [{"spoonMethodName": "org.junit.Assert.assertEquals(float,float,float)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.Assert.assertEquals(java.lang.String,float,float,float)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "InexactComparisonCriteria.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.InexactComparisonCriteria", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AssertionTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.assertion.AssertionTest.floatsNotDoublesInArrays()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "@Ignored tests are not reported", "body": "tests marked as @Ignore are not reported at all.\n\nin a class containing 6 tests (one of which ignored), I get this verbose output:\n\n<pre>\n    [junit] junit.framework.TestListener: tests to run: 6\n    [junit] junit.framework.TestListener: startTest(testCanFindTestDir)\n    [junit] junit.framework.TestListener: endTest(testCanFindTestDir)\n    [junit] junit.framework.TestListener: startTest(testCanFindTestDirWithSlash)\n    [junit] junit.framework.TestListener: endTest(testCanFindTestDirWithSlash)\n    [junit] junit.framework.TestListener: startTest(testBasicPaths)\n    [junit] junit.framework.TestListener: endTest(testBasicPaths)\n    [junit] junit.framework.TestListener: startTest(testPathsCaseSentive)\n    [junit] junit.framework.TestListener: endTest(testPathsCaseSentive)\n    [junit] junit.framework.TestListener: startTest(testGetCaseSubPath)\n    [junit] junit.framework.TestListener: endTest(testGetCaseSubPath)\n    [junit] Implicitly adding /usr/share/ant/lib/junit.jar:/usr/share/java/ant-launcher-1.8.0.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/ant-junit.jar to CLASSPATH\n</pre>\n\n\nthe ignored test is counted in the 6, but further not mentioned.\n\nin the xml report I get this:\n\n<pre>\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testCanFindTestDir\" time=\n\"0.018\" />\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testCanFindTestDirWithSla\nsh\" time=\"0.002\" />\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testBasicPaths\" time=\"0.0\n02\" />\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testPathsCaseSentive\" tim\ne=\"0.004\" />\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testGetCaseSubPath\" time=\"0.016\" />\n</pre>\n\n\nwhile I would expect also this:\n\n<pre>\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testCanFindSambaShare\" time=\"0.016\">\n    &lt;skipped/>\n  &lt;/testcase>\n</pre>\n\n\nnot getting ignored tests in the reports makes the reports less informative.\n", "url": "https://github.com/junit-team/junit4/issues/218", "user": "mfrasca", "labels": ["bug", "nonregression"], "created": "2011-04-21 13:53:11", "closed": "2011-05-02 13:41:05", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "Removing through iterator not supported by CopyOnWriteArrayList", "body": "Run-listener throwing exception causes this, and it can be seen that removing an element by its iterator is not suppored on copyonwritearraylist.\n\nCaused by: java.lang.IllegalStateException\n        at java.util.AbstractList$Itr.remove(AbstractList.java:356)\n        at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:43)\n        at org.junit.runner.notification.RunNotifier.fireTestRunFinished(RunNotifier.java:68)\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:158)\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:136)\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:127)\n        at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:51)\n        at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:110)\n\nFix with the following change or similar:\n            for (Iterator<RunListener> all = fListeners.iterator(); all.hasNext();){\n                RunListener next = all.next();\n                try {\n                    notifyListener(next);\n                } catch (Exception e) {\n                    fListeners.remove( next); // Remove the offending listener first to avoid an infinite loop\n                    fireTestFailure(new Failure(Description.TEST_MECHANISM, e));\n                }\n            }\n", "url": "https://github.com/junit-team/junit4/issues/209", "user": "krosenvold", "labels": ["bug", "nonregression"], "created": "2011-03-29 11:19:43", "closed": "2012-04-06 20:42:06", "commits": {"36397848551f1dc843e4bf5036ff7b00b5cd6adb": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 374.0002777777778, "commitsDetails": [{"commitHash": "36397848551f1dc843e4bf5036ff7b00b5cd6adb", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["d5bce273008bc4fbc7a0805a21b9e2991313bd3b", "0ce06206263ed060bd0ede049c1713286c2487ea"], "nameRev": "36397848551f1dc843e4bf5036ff7b00b5cd6adb tags/r4.11-beta-1~52", "commitMessage": "Merge pull request #397 from stefanbirkner/removeListener\n\nDon't remove listeners, which throw exceptions (fixes #209 and #395)", "commitDateTime": "2012-04-06 13:42:05", "authoredDateTime": "2012-04-06 13:42:05", "commitGitStats": [{"filePath": "src/main/java/org/junit/runner/notification/RunNotifier.java", "insertions": 36, "deletions": 11, "lines": 47}, {"filePath": "src/test/java/org/junit/runner/notification/RunNotifierTest.java", "insertions": 49, "deletions": 0, "lines": 49}, {"filePath": "src/test/java/org/junit/tests/listening/TestListenerTest.java", "insertions": 2, "deletions": 5, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RunNotifier.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)", "TOT": 7, "UPD": 4, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.junit.runner.notification.RunNotifier.SafeNotifier.run()", "TOT": 12, "UPD": 2, "INS": 7, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure).4.notifyListener(org.junit.runner.notification.RunListener)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.junit.runner.notification.RunNotifier.SafeNotifier", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runner.notification.RunNotifier.fireTestFailures(java.util.List,java.util.List).4.notifyListener(org.junit.runner.notification.RunListener)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RunNotifierTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.notification.RunNotifierTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestListenerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.listening.TestListenerTest.removeFailingListeners()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Javadoc error in JUnitMatchers.either", "body": "The Javadoc for the JUnitMatchers.either() is obviously wrong; copy/paste error in the sample code:\n\n```\nThis is useful for fluently combining matchers where either may pass, for example:\n\n   assertThat(string, both(containsString(\"a\")).and(containsString(\"b\")));\n```\n", "url": "https://github.com/junit-team/junit4/issues/208", "user": "bubenheimer", "labels": ["bug", "regression"], "created": "2011-03-24 17:32:03", "closed": "2011-04-15 19:43:25", "commits": {}, "ttf": 22.00027777777778, "commitsDetails": []}, {"title": "JUnit 4.9b2 depends on Java 6", "body": "The latest change in junit.framework.Assert#format(String, Object, Object) made JUnit depend on Java 6, because java.lang.String#isEmpty() has only been added in 1.6.\n\nCould you please replace \"!message.isEmpty()\" with \"message.length() != 0\"?\n", "url": "https://github.com/junit-team/junit4/issues/187", "user": "mkeller", "labels": ["bug", "regression"], "created": "2011-01-31 17:10:23", "closed": "2011-04-29 19:30:47", "commits": {}, "ttf": 88.00027777777778, "commitsDetails": []}, {"title": "ErrorReportingRunner accepts null testClass, tries to dereference", "body": "Given:\n\n10: Runner r = new ErrorReportingRunner(null, new RuntimeException());\n11: r.getDescription();\n\nLine 11 will throw a NullPointerException.  Either line 10 should throw the exception, or line 11 should do something sensible.\n", "url": "https://github.com/junit-team/junit4/issues/177", "user": "dsaff", "labels": ["bug", "needs more info", "nonregression"], "created": "2011-01-03 16:37:25", "closed": "2014-04-12 03:11:57", "commits": {"96cfed79612de559e454a1a91724a061e8615ae4": {"commitGHEventType": "closed", "commitUser": "kcooney"}, "e65558c174a8f5c4c7758f0d9dd1ffe027b023d8": {"commitGHEventType": "referenced", "commitUser": "kcooney"}}, "ttf": 1194.0002777777777, "commitsDetails": [{"commitHash": "96cfed79612de559e454a1a91724a061e8615ae4", "commitGHEventType": "closed", "commitUser": "kcooney", "commitParents": ["d1b8c04e54f0b9e4807fa88a2ff36ad9ba177107"], "nameRev": "96cfed79612de559e454a1a91724a061e8615ae4 tags/r4.12-beta-1~42^2", "commitMessage": "fixes #177\n\nnull check for test class in ErrorReportingRunner", "commitDateTime": "2014-04-11 23:11:40", "authoredDateTime": "2014-04-08 23:19:46", "commitGitStats": [{"filePath": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "src/test/java/org/junit/tests/internal/runners/ErrorReportingRunnerTest.java", "insertions": 11, "deletions": 0, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ErrorReportingRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.runners.ErrorReportingRunner", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ErrorReportingRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.internal.runners.ErrorReportingRunnerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "e65558c174a8f5c4c7758f0d9dd1ffe027b023d8", "commitGHEventType": "referenced", "commitUser": "kcooney", "commitParents": ["dbfd4faa383f29fae45d265cf628cc4195169dbf", "96cfed79612de559e454a1a91724a061e8615ae4"], "nameRev": "e65558c174a8f5c4c7758f0d9dd1ffe027b023d8 tags/r4.12-beta-1~42", "commitMessage": "Merge pull request #871 from clumsy/#177\n\nfixes #177", "commitDateTime": "2014-04-11 20:11:56", "authoredDateTime": "2014-04-11 20:11:56", "commitGitStats": [{"filePath": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "src/test/java/org/junit/tests/internal/runners/ErrorReportingRunnerTest.java", "insertions": 11, "deletions": 0, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ErrorReportingRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.runners.ErrorReportingRunner", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ErrorReportingRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.internal.runners.ErrorReportingRunnerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["96cfed79612de559e454a1a91724a061e8615ae4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 0, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/internal/runners"], "changesInPackagesSPOON": ["org.junit.internal.runners.ErrorReportingRunner"]}, {"title": "junit-dep doesn't work without Hamcrest", "body": "Since I switched from junit to junit-dep (4.8.2), I'm running into the following exception every now and then:\n\njava.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing\n\nIt seems that even the part of JUnit that should be independent of Hamcrest does have dependencies on it. Class org.junit.internal.AssumptionViolatedException which implements org.hamcrest.SelfDescribing is an example. \n", "url": "https://github.com/junit-team/junit4/issues/165", "user": "pniederw", "labels": ["bug", "regression"], "created": "2010-11-24 02:26:29", "closed": "2011-04-29 18:50:06", "commits": {}, "ttf": 156.00027777777777, "commitsDetails": []}, {"title": "Unable to run JUnit from command line in Linux", "body": "Running \"java -cp .:junit-4.8.2.jar org.junit.runner.JUnitCore org.junit.tests.AllTests\" from unzipped junit directory leads to an exception:\n\n'JUnit version 4.8.2\nException in thread \"main\" java.lang.NoClassDefFoundError: org/junit/tests/AllTests (wrong name: lib/junit4.8.2/org/junit/tests/AllTests)\n    at java.lang.ClassLoader.defineClass1(Native Method)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n    at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n    at java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n    at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n    at java.lang.Class.forName0(Native Method)\n    at java.lang.Class.forName(Class.java:164)\n    at org.junit.runner.JUnitCore.runMain(JUnitCore.java:89)\n    at org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\n    at org.junit.runner.JUnitCore.main(JUnitCore.java:45)'\n\nsetting CLASSPATH environment variable to .:junit-4.8.2.jar or $JUNIT_DIR:junit-4.8.2.jar, where $JUNIT_DIR is the path for unzipped junit, results in the same effect.\n", "url": "https://github.com/junit-team/junit4/issues/150", "user": "gusega", "labels": ["bug", "nonregression"], "created": "2010-11-03 13:46:50", "closed": "2012-04-22 06:00:25", "commits": {}, "ttf": 535.0002777777778, "commitsDetails": []}, {"title": "API docs: Depricated method of Assert refers to non-existing signature", "body": "In the API docs (http://junit.org/apidocs/) of org.junit.Assert in the Method Summary is referred to another method with signature \"assertEquals(double expected, double actual, double epsilon)\". \nThere is no such method, but there is a \"assertEquals(double expected, double actual, double delta)\". \n\nSame for the methods including a \"String message\".\n", "url": "https://github.com/junit-team/junit4/issues/134", "user": "electrickery", "labels": ["bug", "nonregression"], "created": "2010-08-10 07:57:55", "closed": "2011-08-11 17:40:42", "commits": {"225b4d05785d650c892dd13852955f60584ee46d": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 366.0002777777778, "commitsDetails": [{"commitHash": "225b4d05785d650c892dd13852955f60584ee46d", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "spoonStatsSummary": {}, "statsSkippedReason": ""}, {"title": "Please update Maven repo to 4.8.2", "body": "The latest version available through Maven is still 4.8.1, though 4.8.2 has been out for quite a while.\n", "url": "https://github.com/junit-team/junit4/issues/131", "user": "michel-slm", "labels": ["bug", "needs more info", "regression"], "created": "2010-08-06 16:07:50", "closed": "2011-04-15 17:33:52", "commits": {}, "ttf": 252.00027777777777, "commitsDetails": []}, {"title": "No error/warning on non static method annotated with @DataPoint", "body": "This test is marked as successfull but did _not_ run:\n\n```\n @RunWith( Theories.class )\n public class TheoriesTest {\n  @Theory\n  public void aTheory( String arg ) {\n    System.out.println( \"TheoriesTest.aTheory(\" + arg + \")\" );\n    assertNotNull( arg );\n  }\n\n  @DataPoint\n  public String getParam() {\n    return \"daParam\";\n  }\n }\n```\n\nI think the problem lies in Theories:126.\nstatement.evaluate() catches exceptions silently\n(org.junit.experimental.theories.Theories.TheoryAnchor#methodCompletesWithParameters:158).\n\nTherefore \"handleDataPointSuccess\" is called even when an exception has\nbeen thrown....\n\nSo I think there are at least two things missing:\n- Proper exception handling...\n- Checking the DataPoint(s) methods for the static keyword\n", "url": "https://github.com/junit-team/junit4/issues/125", "user": "jschneider", "labels": ["bug", "nonregression", "theories"], "created": "2010-07-28 14:16:16", "closed": "2013-01-29 06:45:33", "commits": {"27ba66f2da17ec2580dc8289b68c29365a872a1a": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 915.0002777777778, "commitsDetails": [{"commitHash": "27ba66f2da17ec2580dc8289b68c29365a872a1a", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["2903ff09a196761c9a6596b8f46ae3828a66d099", "2c6c142aa801cef3520ca668e75a670a32b4859a"], "nameRev": "27ba66f2da17ec2580dc8289b68c29365a872a1a tags/r4.12-beta-1~132", "commitMessage": "Merge pull request #623 from pimterry/errors-on-non-static-datapoints-#125\n\nAdded validation that all datapoint methods and fields are public and static to theory initialization", "commitDateTime": "2013-01-28 16:11:09", "authoredDateTime": "2013-01-28 16:11:09", "commitGitStats": [{"filePath": "src/main/java/org/junit/experimental/theories/Theories.java", "insertions": 19, "deletions": 1, "lines": 20}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/UnsuccessfulWithDataPointFields.java", "insertions": 127, "deletions": 32, "lines": 159}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Theories.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.Theories.validateDataPointMethods(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.Theories.collectInitializationErrors(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "UnsuccessfulWithDataPointFields.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.HasATheory", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.DataPointsMustBeStatic", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.dataPointsMustBeStatic()", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.DataPointsMustBePublic", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.dataPointsMustBePublic()", "TOT": 7, "UPD": 4, "INS": 0, "MOV": 3, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.HasATheory.everythingIsZero(int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.canRunTheories()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.theoryAnnotationsAreRetained()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.theoryClassMethodsShowUp()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.DataPointMethodsMustBeStatic", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.dataPointMethodsMustBeStatic()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.DataPointMethodsMustBePublic", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.dataPointMethodsMustBePublic()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.dataPointFieldsMustBePublic()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Assumptions don't work in tests with expected exceptions", "body": "The following test should be ignored, but fails with JUnit 4.8.2:\n\n```\n@Test(expected = UnsupportedOperationException.class)\npublic void testExpectedVsAssumption() {\n    Assume.assumeTrue(false);\n}\n```\n\nThis test succeeds if run with @RunWith(JUnit4ClassRunner.class). The reason it works with the older runner, but fails with the new runner seems to be that org.junit.internal.runners.MethodRoadie.runTestMethod() has special handling for AssumptionViolatedException, but this handling is missing from org.junit.internal.runners.statements.ExpectException.evaluate().\n", "url": "https://github.com/junit-team/junit4/issues/121", "user": "petur", "labels": ["bug", "nonregression"], "created": "2010-07-13 09:28:50", "closed": "2012-04-09 17:14:36", "commits": {"c4279e432212ed6c23dee817113ae61ec4fbf86e": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 636.0002777777778, "commitsDetails": [{"commitHash": "c4279e432212ed6c23dee817113ae61ec4fbf86e", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["3a5c9f2731462e36dd1c173ea8840d7b9b34b0ab", "f3ae021fb078fc3b1576febbce1b02e249329516"], "nameRev": "c4279e432212ed6c23dee817113ae61ec4fbf86e tags/r4.11-beta-1~49", "commitMessage": "Merge pull request #323 from stefanbirkner/assumption\n\nFixes gh-121 (ExpectedException handles JUnit exceptions)", "commitDateTime": "2012-04-09 10:14:35", "authoredDateTime": "2012-04-09 10:14:35", "commitGitStats": [{"filePath": "src/main/java/org/junit/rules/ExpectedException.java", "insertions": 82, "deletions": 20, "lines": 102}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/EventCollector.java", "insertions": 159, "deletions": 0, "lines": 159}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionRuleTest.java", "insertions": 0, "deletions": 232, "lines": 232}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionTest.java", "insertions": 324, "deletions": 0, "lines": 324}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Assumptions don't work in tests with expected exceptions", "body": "The following test should be ignored, but fails with JUnit 4.8.2:\n\n```\n@Test(expected = UnsupportedOperationException.class)\npublic void testExpectedVsAssumption() {\n    Assume.assumeTrue(false);\n}\n```\n\nThis test succeeds if run with @RunWith(JUnit4ClassRunner.class). The reason it works with the older runner, but fails with the new runner seems to be that org.junit.internal.runners.MethodRoadie.runTestMethod() has special handling for AssumptionViolatedException, but this handling is missing from org.junit.internal.runners.statements.ExpectException.evaluate().\n", "url": "https://github.com/junit-team/junit4/issues/120", "user": "petur", "labels": ["bug", "nonregression"], "created": "2010-07-13 09:08:10", "closed": "2010-07-13 09:23:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "junit/runner contents missing from the 4.8.1 and 4.8.2 .zip source files", "body": "I tried getting the .zip but it does not have the juinit/runner directory, so the build fails as build.xml refers to the Version.java.template that should be there.\n", "url": "https://github.com/junit-team/junit4/issues/119", "user": "fnasser", "labels": ["bug", "regression"], "created": "2010-07-08 15:37:02", "closed": "2011-04-15 21:30:25", "commits": {}, "ttf": 281.0002777777778, "commitsDetails": []}, {"title": "NoSuchMethodError has occured when call assertThat(true,is(true))", "body": "assertThat is simple api but not supported to call assertThat(true,org.hamcrest.Matcher.is(true)).\nI'm using JUnit 4.8.1 . The JAR got from maven repository. I think the behavior was changed after 4.8 release.\nI hope to fix it.\n", "url": "https://github.com/junit-team/junit4/issues/105", "user": "kompiro", "labels": ["bug"], "created": "2010-05-18 08:22:13", "closed": "2010-05-21 15:48:07", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "Parameterized: data() returns Collection<Object[]>, which in Parameterized.getParametersList() is cast to List<Object[]>", "body": "First of all, I was very happy to discover the Parameterized runner today, I came very close to reverting to a JUnit 3 Suite, but stumbled on this very elegant solution to a common enough problem - dynamically configuring a bunch of tests whose results should be reported separately.\n\n@Parameters data() returns Collection<Object[]>, but in Parameterized.getParametersList(), this collection is immediately cast to List<Object>. This is unfortunate if the Collection is not a List.\n\nA simple workaround is to simply return a list from data(), but really, I think this is unnecessarily confusing, and I don't see any reason why Parameterized would care what kind of Collection this is.\n\nHere's an example which demonstrates the issue:\n\n@RunWith(Parameterized.class)\npublic class PersistentEntityTest {\n    private final String entity;\n\n```\npublic PersistentEntityTest(String entity) {\n    this.entity = entity;\n}\n\n@Test\npublic void test() {\n    Assert.assertEquals(\"testEntity\", this.entity);\n}\n\n@Parameters\npublic static Collection<Object[]> data() {\n    return Collections.singleton(new Object[] { \"testEntity\" });\n}\n```\n\n}\n", "url": "https://github.com/junit-team/junit4/issues/104", "user": "mlauritse", "labels": ["bug", "nonregression", "parameterized"], "created": "2010-05-17 20:14:55", "closed": "2011-12-31 13:03:42", "commits": {"45eaab756edc8913b1c74e87ef3b519da6afa5fc": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 592.0002777777778, "commitsDetails": [{"commitHash": "45eaab756edc8913b1c74e87ef3b519da6afa5fc", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["a681b760978751ca4c4ccc6de616b0643d6c2b0e", "5475e12b57f5af0140deffa7f45c75dc47803167"], "nameRev": "45eaab756edc8913b1c74e87ef3b519da6afa5fc tags/r4.11-beta-1~59", "commitMessage": "Merge pull request #348 from stefanbirkner/iterable\n\nUse Iterable for the parameters of Parameterized (fixes gh-104).", "commitDateTime": "2011-12-31 05:03:41", "authoredDateTime": "2011-12-31 05:03:41", "commitGitStats": [{"filePath": "src/main/java/org/junit/runners/Parameterized.java", "insertions": 46, "deletions": 36, "lines": 82}, {"filePath": "src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java", "insertions": 32, "deletions": 15, "lines": 47}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Parameterized.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.runners.Parameterized.TestClassRunnerForParameters", "TOT": 6, "UPD": 6, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.Parameterized", "TOT": 11, "UPD": 4, "INS": 1, "MOV": 5, "DEL": 1}, {"spoonMethodName": "org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)", "TOT": 8, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 6}, {"spoonMethodName": "org.junit.runners.Parameterized.TestClassRunnerForParameters.createTest()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.runners.Parameterized.TestClassRunnerForParameters.computeParams()", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.runners.Parameterized.createRunnersForParameters(java.lang.Iterable)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.Parameterized.parametersMethodReturnedWrongType()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.Parameterized.getParametersMethod()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ParameterizedTestTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.FibonacciTest.data()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.WrongElementType.data()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.meaningfulFailureWhenParameterListsAreNotArrays()", "TOT": 13, "UPD": 3, "INS": 0, "MOV": 8, "DEL": 2}, {"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.meaningfulFailureWhenParametersAreNotArrays()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.ParametersNotIterable", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.meaningfulFailureWhenParametersAreNotAnIterable()", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "assumeTrue() does not work with expected exceptions", "body": "assumeTrue() does not work if a test has an expected exception.\n\nExample code:\n\n```\nimport static org.junit.Assume.*;\nimport org.junit.Test;\n\npublic class TestAssume {\n    @Test(expected = IllegalArgumentException.class)\n    public void test() {\n        assumeTrue(false);\n    }\n}\n```\n\nThis exception is thrown by JUnit 4.8.1:\n\n```\njava.lang.Exception: Unexpected exception, expected<java.lang.IllegalArgumentException> but was<org.junit.internal.AssumptionViolatedException>\n    at org.junit.internal.runners.statements.ExpectException.evaluate(ExpectException.java:28)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n    [...]\n```\n", "url": "https://github.com/junit-team/junit4/issues/98", "user": "jonas22", "labels": ["bug"], "created": "2010-04-27 11:21:28", "closed": "2010-05-04 02:25:05", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "TestSuite(MyTestCase.class) should dynamically detect if MyTestCase is a TestCase", "body": "Currently, passing the TestSuite constructor a single testclass that is not statically guaranteed to be a TestCase calls the varargs constructor TestSuite (Class<?>... classes), rather than an analogue of the single-class constructor TestSuite(final Class<? extends TestCase> theClass).\n\nThis leads to unexpected changes in behavior for custom subclasses of BaseTestRunner between 4.5 and 4.8.1\n", "url": "https://github.com/junit-team/junit4/issues/96", "user": "dsaff", "labels": ["bug"], "created": "2010-04-01 17:50:53", "closed": "2010-04-08 15:52:08", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "FAQ has a dead link", "body": "Hi,\n\nIf you go to Getting Started, then to the Frequently Asked Questions section, down at the bottom you get the link to IDE integration page, but it's a dead link:\nIDE integration instructions\n\nRegards,\nUri\n", "url": "https://github.com/junit-team/junit4/issues/94", "user": "dsaff", "labels": ["bug"], "created": "2010-03-22 14:06:46", "closed": "2010-05-04 02:40:55", "commits": {}, "ttf": 42.000277777777775, "commitsDetails": []}, {"title": "Fibonacci example in Javadocs of Parameterized uses a strange object array item", "body": "http://kentbeck.github.com/junit/javadoc/latest/org/junit/runners/Parameterized.html\n[...]\n        @Parameters\n        public static List<Object[]> data() {\n                return Arrays.asList(new Object[][] {\n                                Fibonacci,\n                                { { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 },\n                                                { 6, 8 } } });\n        }\n[...]\nI suppose that the line \"Fibonacci,\" is a typo and should disappear. Otherwise please explain its existence.\nThanks.\n", "url": "https://github.com/junit-team/junit4/issues/89", "user": "andi5", "labels": ["bug", "nonregression", "parameterized"], "created": "2010-03-02 15:32:18", "closed": "2011-08-11 17:40:19", "commits": {"f7ae09bafb3b7dec806af5f979f8cf839a63529e": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 527.0002777777778, "commitsDetails": [{"commitHash": "f7ae09bafb3b7dec806af5f979f8cf839a63529e", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "spoonStatsSummary": {}, "statsSkippedReason": ""}, {"title": "Findbugs warning", "body": "Dear all,\n\nWe are conducting an study about the relevance of the warnings reported by the FindBugs tool  when executed over several open-source systems.\n\nParticularly, in the case of JUnit, we would like to confirm the relevance of the following warning reported by the tool (for JUnit 4.7):\n\n> package: org.junit.experimental.theories.suppliers.\n> method: TestedOnSupplier.getValueSources \n> \n> for (final int i : ints) {\n>    list.add(PotentialAssignment.forValue(Arrays.asList(ints).toString(), i));\n> }\n\nFindbugs is complaining that \"this code passes a primitive array (ints) to a function that takes a variable number of object arguments (asList). This creates an array of length one to hold the primitive array and passes it to the function.\"\n\nSince this warning seemed relevant to us, we would like to confirm our classification with JUnit's developers.\n\nBest regards,\n\nMarco Tulio Valente\nBrazil\n", "url": "https://github.com/junit-team/junit4/issues/88", "user": "mtov", "labels": ["bug", "nonregression"], "created": "2010-03-01 15:42:26", "closed": "2012-04-23 18:28:33", "commits": {"1df71004338faf30b9287b03b726e1ce4f1246be": {"commitGHEventType": "closed", "commitUser": "marcphilipp"}}, "ttf": 784.0002777777778, "commitsDetails": [{"commitHash": "1df71004338faf30b9287b03b726e1ce4f1246be", "commitGHEventType": "closed", "commitUser": "marcphilipp", "commitParents": ["34d2943cef583ecb34cc182b79dbb4af0c778b3f"], "nameRev": "1df71004338faf30b9287b03b726e1ce4f1246be tags/r4.11-beta-1~44^2", "commitMessage": "Fix #88", "commitDateTime": "2012-04-21 21:56:51", "authoredDateTime": "2012-04-21 21:56:51", "commitGitStats": [{"filePath": "src/main/java/org/junit/experimental/theories/suppliers/TestedOnSupplier.java", "insertions": 1, "deletions": 4, "lines": 5}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/TestedOnSupplierTest.java", "insertions": 32, "deletions": 0, "lines": 32}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TestedOnSupplier.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "AllTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.AllTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestedOnSupplierTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.TestedOnSupplierTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1df71004338faf30b9287b03b726e1ce4f1246be"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Fix cookbook text", "body": "From: Steve Claflin steve@steveclaflin.com\nDate: February 17, 2010 8:34:27 AM CST\nTo: junit@objectmentor.com\nSubject: Error on Cookbook page\n\nPage has the following:\n\nRunning Tests\nHow do you run your tests and collect their results?\n\nOnce you have tests, you'll want to run them. JUnit provides tools to define the suite to be run and to display its results. To run tests and see the results on the console, run this from a Java program:\n\n   org.junit.runner.JUnitCore.runClasses(TestClass1.class, ...);\n\nor this from the command line, with both your test class and junit on the classpath:\n\n   java org.junit.runner.JUnitCore TestClass1.class [...other test classes...]\n\n---\n\nThe last line does not work as is; it works without the .class on TestClass.  I haven't tried the other approaches that mention TestClass.class\n", "url": "https://github.com/junit-team/junit4/issues/84", "user": "dsaff", "labels": ["bug"], "created": "2010-02-23 15:06:30", "closed": "2010-05-04 02:42:35", "commits": {}, "ttf": 69.00027777777778, "commitsDetails": []}, {"title": "Performance issue: @DataPoints called N+1 times for each theory", "body": "I created a set of theories to verify the equals(), hashCode()\nrelationship. While I had the equals and reciprocal equals working\nproperly, I was surprised at the unintended hashCode collisions I had in\nmy code. More importantly I was surprised at how often the @DataPoints\nmethod was called to set up the tests. It was called no less than 61\ntimes for 60 discrete data points. That seems a bit excessive to me.\n\nI set up a bunch of data with the assumption that it was set up once,\nand then the contents were copied as needed. Essentially the expensive\nset up work is done 61 times, accounting for a large portion of the 37\nseconds it takes to run all my tests. If the @DataPoints method is only\ncalled once, and the values are copied as necessary, then the\nimplementation would be much faster.\n", "url": "https://github.com/junit-team/junit4/issues/82", "user": "bloritsch", "labels": ["bug", "nonregression", "theories"], "created": "2010-02-18 17:07:38", "closed": "2013-11-15 01:15:51", "commits": {}, "ttf": 1365.0002777777777, "commitsDetails": []}, {"title": "javadoc is missing junit.* packages", "body": "Having a look here:\n\nhttp://kentbeck.github.com/junit/javadoc/latest/\n\nThe junit.\\* packages seem to be missing.\n", "url": "https://github.com/junit-team/junit4/issues/81", "user": "groovycookbook", "labels": ["bug", "javadoc", "nonregression"], "created": "2010-02-12 11:57:24", "closed": "2017-08-22 04:15:11", "commits": {"376c2fc3f269eaba580c75cd1689ca2ba16ad202": {"commitGHEventType": "referenced", "commitUser": "kcooney"}}, "ttf": 2747.0002777777777, "commitsDetails": [{"commitHash": "376c2fc3f269eaba580c75cd1689ca2ba16ad202", "commitGHEventType": "referenced", "commitUser": "kcooney", "commitParents": ["24dfdd762e753c83babca3768d4b508cf5c6a86c"], "nameRev": "376c2fc3f269eaba580c75cd1689ca2ba16ad202 tags/r4.13-beta-1~49", "commitMessage": "Generate Javadoc for the junit.* packages. (#1477)\n\nFixes #81", "commitDateTime": "2017-08-21 21:15:10", "authoredDateTime": "2017-08-21 21:15:10", "commitGitStats": [{"filePath": "pom.xml", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "@DataPoints does not allow you to map Classes to Theories", "body": "Just to see how things map, I attempted to do something like this:\n\n```\n@RunWith(Theories.class)\npublic class TrackableTestCase {\n  @DataPoints\n  public static Class[] collectTargets() {\n    Class[] targets = new Class[] {\n        User.class, Incident.class\n    };\n\n    return targets;\n  }\n\n  @Theory\n  public void examineClass(Class klass) {\n    System.out.println(klass.getName());\n  }\n}\n```\n\nThe problem of course is that the Theories runner couldn't map the\ndatapoints to the Theory:\njava.lang.AssertionError: Never found parameters that satisfied method\nassumptions. Violated assumptions: []\n\nWhen I did the same thing with Strings, I had no problems. I did find\nout that the return type had to be an array and not a list. The\nTheories runner just couldn't map the classes to the theory that took\nthe class. Additionally, when I had both the class data points and the\nstring data points, the Theories runner attempted to map the whole array\nof strings to the examineClass theory above. Unsurprisingly there was a\nclass cast exception there.\n", "url": "https://github.com/junit-team/junit4/issues/76", "user": "bloritsch", "labels": ["bug", "nonregression", "theories"], "created": "2010-02-02 14:41:42", "closed": "2015-03-27 10:58:41", "commits": {}, "ttf": 1878.0002777777777, "commitsDetails": []}, {"title": "Categories + Parameterized", "body": "Hi,\nI am trying to use the new experimental Categories Feature. Unfortunately it doesn't seem to be compatible with Parameterized Tests. I run the following in eclipse, but since these are\n\nWhen defining  Tests and TestSuite as below, the execution of the suite results in errors/failures. The exact error depends on the order in which the tests are specified in the Suite (see below).\n\nSo I guess my points/ questions are:\n- The behavior of a TestSuite should not depend on the order of contained Tests\n- If a Runner isn't supported by a Suite Runner, this should result in an instructive error message\n- Is there a Category compatible version of the Parameterized runner?\n\nThanx\nJens\n\nWith the normal Test first I get this call stack on the console:\n\nJUnit version 4.8.1\nException in thread \"main\" java.lang.NullPointerException\n at org.junit.runner.Description.createSuiteDescription(Description.java:\n72)\n at org.junit.experimental.categories.Categories$CategoryFilter.parentDes\ncription(Categories.java:127)\n at org.junit.experimental.categories.Categories$CategoryFilter.categorie\ns(Categories.java:121)\n at org.junit.experimental.categories.Categories$CategoryFilter.hasCorrec\ntCategoryAnnotation(Categories.java:106)\n at org.junit.experimental.categories.Categories$CategoryFilter.shouldRun\n(Categories.java:97)\n at org.junit.experimental.categories.Categories$CategoryFilter.shouldRun\n(Categories.java:100)\n at org.junit.runners.ParentRunner.shouldRun(ParentRunner.java:299)\n at org.junit.runners.ParentRunner.getFilteredChildren(ParentRunner.java:\n277)\n at org.junit.runners.ParentRunner.getDescription(ParentRunner.java:225)\n at org.junit.runners.Suite.describeChild(Suite.java:123)\n at org.junit.runners.Suite.describeChild(Suite.java:24)\n at org.junit.runners.ParentRunner.getDescription(ParentRunner.java:226)\n at org.junit.runner.JUnitCore.run(JUnitCore.java:156)\n at org.junit.runner.JUnitCore.run(JUnitCore.java:136)\n at org.junit.runner.JUnitCore.run(JUnitCore.java:117)\n at org.junit.runner.JUnitCore.runMain(JUnitCore.java:98)\n at org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\n at org.junit.runner.JUnitCore.main(JUnitCore.java:45)\n\n---\n\nWith the Parameterized Test first, I get a Failure Trace (which also isn't very instructive):\n\nJUnit version 4.8.1\n.E\nTime: 0,006\nThere was 1 failure:\n1) initializationError(de.schauderhaft.junit.categories.ParameterTokenSuite)\njava.lang.NullPointerException\n at org.junit.runner.Description.createSuiteDescription(Description.java:\n72)\n at org.junit.experimental.categories.Categories$CategoryFilter.parentDes\ncription(Categories.java:127)\n at org.junit.experimental.categories.Categories$CategoryFilter.categorie\ns(Categories.java:121)\n at org.junit.experimental.categories.Categories$CategoryFilter.hasCorrec\ntCategoryAnnotation(Categories.java:106)\n at org.junit.experimental.categories.Categories$CategoryFilter.shouldRun\n(Categories.java:97)\n at org.junit.experimental.categories.Categories$CategoryFilter.shouldRun\n(Categories.java:100)\n at org.junit.runners.ParentRunner.shouldRun(ParentRunner.java:299)\n at org.junit.runners.ParentRunner.filter(ParentRunner.java:254)\n at org.junit.experimental.categories.Categories.(Categories.java:1\n42)\n at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\nat sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Sou\nrce)\n at java.lang.reflect.Constructor.newInstance(Unknown Source)\n at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBui\nlder.java:35)\n at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(Annotated\nBuilder.java:24)\n at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilde\nr.java:57)\n at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForC\nlass(AllDefaultPossibilitiesBuilder.java:29)\n at org.junit.runner.Computer.getRunner(Computer.java:38)\n at org.junit.runner.Computer$1.runnerForClass(Computer.java:29)\n at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilde\nr.java:57)\n at org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:93)\n at org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:84)\n at org.junit.runners.Suite.(Suite.java:79)\n at org.junit.runner.Computer.getSuite(Computer.java:26)\n at org.junit.runner.Request.classes(Request.java:69)\n at org.junit.runner.JUnitCore.run(JUnitCore.java:117)\n at org.junit.runner.JUnitCore.runMain(JUnitCore.java:98)\n at org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\n at org.junit.runner.JUnitCore.main(JUnitCore.java:45)\nFAILURES!!!\nTests run: 1,  Failures: 1\n\nClass Definitions ------------------------------------------------------------------------------------\n\npackage de.schauderhaft.junit.categories;\nimport java.util.Collection;\nimport java.util.Collections;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n@RunWith(Parameterized.class)\npublic class ParameterizedTestA {\npublic ParameterizedTestA(String a) {\n }\n@Parameters\n public static Collection getParameters() {\n return Collections.singletonList(new String[] { \"a\" });\n }\n@Test\n public void testSomething() {\n Assert.assertTrue(true);\n##  }\n\npackage de.schauderhaft.junit.categories;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.experimental.categories.Category;\n@Category(Token.class)\npublic class SomeTestB {\n@Test\n public void testSomething() {\n Assert.assertTrue(true);\n }\n}\n\n---\n\npackage de.schauderhaft.junit.categories;\nimport org.junit.experimental.categories.Categories;\nimport org.junit.experimental.categories.Categories.IncludeCategory;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Suite.SuiteClasses;\n@RunWith(Categories.class)\n@IncludeCategory(Token.class)\n@SuiteClasses( { SomeTestB.class, ParameterizedTestA.class }) // switch order of classes for slightly different behaviour\npublic class ParameterTokenSuite {\n}\n## }\n## \n", "url": "https://github.com/junit-team/junit4/issues/74", "user": "dsaff", "labels": ["bug", "parameterized", "regression"], "created": "2010-01-21 20:44:33", "closed": "2011-09-16 14:17:04", "commits": {}, "ttf": 602.0002777777778, "commitsDetails": []}, {"title": "can't run with two runners", "body": "I created a Suite that allows me to run tests in a separate class loader.\nI use it like this:\n\n@RunWith(ClassLoaderSuite.class)\n@SuiteClasses({ MyTest1.class, MyTest2.class })\n@TestClass(ClassToTest.class)\npublic class MyTestSuite {\n}\n\nIf I want one of those tests to be parameterized, should I expect to\nbe able to do:\n\n@RunWith(Parameterized.class)\npublic class MyTest1 {\n...\n}\n\nIt doesn't seem to work.\n\nWhat would I have to do in ClassLoaderSuite to make this work?\n\nFYI, you can find ClassLoaderSuite.java at:\nhttp://kenai.com/projects/javamail/sources/mercurial/content/mail/src/test/java/com/sun/mail/test/ClassLoaderSuite.java?rev=231\n\nHere's how to reproduce the problem using JavaMail:\n\nYou can find JavaMail at http://kenai.com/projects/javamail.\nYou'll need to check out the source code using Mercurial.\nYou'll find instruction here:\nhttp://kenai.com/projects/javamail/pages/BuildInstructions\n\nMost of the tests are in the workspace at\nmail/src/test/java/javax/mail/internet.\n\nHere's what I did to test this...\n\nInternetAddressTest.java is a parameterized test.  Copy it to IA.java,\nthen change IA.java so that all instances of \"InternetAddressTest\"\nare changed to \"IA\".  Edit the constructor or the data() method to\ninclude a println so you can see when the test is actually being run.\n\nParameterListTestSuite.java uses my ClassLoaderSuite, and contains a\nlist of tests to run in a separate class loader.  Edit it and add\nIA.class to the list.\n\nNow run \"mvn\" in the \"mail\" directory.  The IA.java test won't\nbe run.\n", "url": "https://github.com/junit-team/junit4/issues/73", "user": "bshannon", "labels": ["bug", "parameterized"], "created": "2010-01-20 17:02:30", "closed": "2010-05-04 02:33:36", "commits": {}, "ttf": 103.00027777777778, "commitsDetails": []}, {"title": "Missing Warnings for Theories", "body": "Theories runner warn if @DataPoint targets an instance field (as opposed to a static field) with an Error (\"DataPoint field f must be static).\n\nHowever, if @DataPoint targets a non-public field, the field is ignored silently.  In the following test junit runner ignores `ignoredSilently` nonpublic static field:\n\n```\n@RunWith(Theories.class)\npublic class TestTheory1 {\n    @DataPoint static String ignoredSilently = null;\n    @DataPoint public static String field = \"m\";\n    @Theory public void nonNull(String s) { Assert.assertNotNull(s); }\n}\n```\n", "url": "https://github.com/junit-team/junit4/issues/62", "user": "notnoop", "labels": ["bug", "nonregression", "theories"], "created": "2009-12-08 21:39:02", "closed": "2012-11-16 18:40:06", "commits": {}, "ttf": 1073.0002777777777, "commitsDetails": []}, {"title": "Categories don't work on classes", "body": "", "url": "https://github.com/junit-team/junit4/issues/61", "user": "dsaff", "labels": ["bug"], "created": "2009-12-08 02:10:27", "closed": "2009-12-08 20:11:55", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Type Matching Between MultiPointsMethod and array Is Not Performed Correctly.", "body": "DataPoints declared in MultiPointsMethod will be matched incorrectly with array causing an exception due to argument type mismatch. Below is an example showing the bug:  \n @RunWith(Theories.class)\npublic class TestDataPoints {\n\n```\n@DataPoint\npublic static String[] stringArr1= { \"Good\", \"Morning\" };\n\n@DataPoints\npublic static String[] stringArr2() {\n    return new String[] { \"Hello\", \"World\" };\n}\n\n/**\n * An array is expected so only stringArr1 should be passed in but\n * stringArr2 will be passed in as parameter,causing an exception due to\n * argument type mismatch\n * \n * @param arr\n */\n@Theory\npublic void testTheory(String[] arr) {\n\n    for (int i= 0; i < arr.length; i++) {\n        System.out.print(arr[i] + \" \");\n    }\n}\n```\n\n}\n", "url": "https://github.com/junit-team/junit4/issues/55", "user": "stan6", "labels": ["bug", "nonregression", "theories"], "created": "2009-11-29 17:34:56", "closed": "2012-08-21 17:36:58", "commits": {"f9ec0474bb646a2751f1f2c73f3fee524dbb4b52": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 996.0002777777778, "commitsDetails": [{"commitHash": "f9ec0474bb646a2751f1f2c73f3fee524dbb4b52", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["87fe5054ec0d03bb4f828f836a64ea9140b6818e", "61326c93276d31e249e57815edf93b695df5669d"], "nameRev": "f9ec0474bb646a2751f1f2c73f3fee524dbb4b52 tags/r4.11-beta-1~16", "commitMessage": "Merge pull request #485 from awulder/issue-55\n\nFix for issue #55", "commitDateTime": "2012-08-20 14:47:33", "authoredDateTime": "2012-08-20 14:47:33", "commitGitStats": [{"filePath": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "insertions": 26, "deletions": 12, "lines": 38}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/TypeMatchingBetweenMultiDataPointsMethod.java", "insertions": 57, "deletions": 0, "lines": 57}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AllMembersSupplier.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)", "TOT": 16, "UPD": 4, "INS": 1, "MOV": 11, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.isCorrectlyTyped(org.junit.experimental.theories.ParameterSignature,java.lang.Class)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature,java.util.List)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "TypeMatchingBetweenMultiDataPointsMethod.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.TypeMatchingBetweenMultiDataPointsMethod", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "master git branch does not build on windows", "body": "With or without cygwin:\n\nc:\\src\\junitkb\\build.xml:113: Execute failed: java.io.IOException: Cannot run program \"build\\Markdown.pl\": CreateProcess error=193, %1 is not a valid Win32 application\n\nMuch as I dislike windows, I was hoping to build ;)\n\nMy kludge to build was to modify build.xml as follows:\n    <target name=\"release-notes\" if=\"os.family!='windows' \">\n", "url": "https://github.com/junit-team/junit4/issues/49", "user": "krosenvold", "labels": ["bug", "nonregression"], "created": "2009-11-17 06:37:45", "closed": "2011-09-23 20:04:00", "commits": {"130408bd716cc0f9a9c4ee0014b470f8865feefc": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 675.0002777777778, "commitsDetails": [{"commitHash": "130408bd716cc0f9a9c4ee0014b470f8865feefc", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["1660ebdf1ebc316747a1c3f29c03f616125a9dc7", "9a82d0027247d7be667966766b01d4a24e4b834f"], "nameRev": "130408bd716cc0f9a9c4ee0014b470f8865feefc tags/r4.11-beta-1~66", "commitMessage": "Merge pull request #326 from matthewfarwell/49-master-git-branch-does-not-build-on-windows\n\nFixes gh-49 Master now builds on windows", "commitDateTime": "2011-09-23 13:03:59", "authoredDateTime": "2011-09-23 13:03:59", "commitGitStats": [{"filePath": "build.xml", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Provide up-to-date javadocs on www.junit.org", "body": "Latest Javadocs are not available any more on www.junit.org; the latest available seems to be http://junit.org/junit/javadoc/4.5/.  With the introduction of Rules, it would be very nice to see javadocs for 4.7.\n", "url": "https://github.com/junit-team/junit4/issues/48", "user": "irobertson", "labels": ["bug", "regression"], "created": "2009-11-16 22:54:04", "closed": "2009-12-17 20:12:03", "commits": {}, "ttf": 30.00027777777778, "commitsDetails": []}, {"title": "Confusing error for non-static inner test classes", "body": "Hi!\n\nIf  the suite InnerTestClass (see below) is run, an error stating \"Test class should have exactly one public zero-argument constructor\" is issued. However, the real issue is that the inner test class should be \"static\" (at least as long as JUnit does not provide a way to instantiate from an outer class). \n\nFrom what I gather is, that a judiciously placed test like\nif (clazz.isMemberClass() && ! Modifier.isStatic(clazz.getModifiers())\n     throw new Error(\"inner class \" + clazz.getName() + \" must be declared static.\");\nshould do the trick.\n\nCheers,\n Georg\n\n@RunWith(Suite.class)\n@SuiteClasses(\n{\n    InnerTestClass.T1.class\n})\npublic class InnerTestClass\n{\n    public class T1\n    {\n        @Test public void test() {  }\n    }\n}\n", "url": "https://github.com/junit-team/junit4/issues/42", "user": "georgthimm", "labels": ["bug", "nonregression"], "created": "2009-11-09 05:05:53", "closed": "2011-09-19 14:36:08", "commits": {"1014436692b0829a7287fbab81ef8720309d7945": {"commitGHEventType": "closed", "commitUser": "dsaff"}, "7663a302ff8392b07431e775965aa1dac2556ab9": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 679.0002777777778, "commitsDetails": [{"commitHash": "1014436692b0829a7287fbab81ef8720309d7945", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["2d13004b3fbba2fe6ed919bbc98f2e3f69bb4809"], "nameRev": "1014436692b0829a7287fbab81ef8720309d7945 tags/r4.10~3^2", "commitMessage": "Fixes gh-42 (error message for non-static inner class)\n\nAdd an appropriate error when a test class is a non-static inner class\nand don't try to validate the parameter count of its constructor.\n", "commitDateTime": "2011-09-18 23:20:46", "authoredDateTime": "2011-09-18 23:20:46", "commitGitStats": [{"filePath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "insertions": 12, "deletions": 2, "lines": 14}, {"filePath": "src/main/java/org/junit/runners/model/TestClass.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/running/classes/BlockJUnit4ClassRunnerTest.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "insertions": 35, "deletions": 0, "lines": 35}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BlockJUnit4ClassRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)", "TOT": 6, "UPD": 1, "INS": 2, "MOV": 3, "DEL": 0}, {"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.validateNoNonStaticInnerClass(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestClass.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.model.TestClass.isANonStaticInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.AllTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "BlockJUnit4ClassRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestClassTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.OuterClass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.identifyNonStaticInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.OuterClass2", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.dontMarkStaticInnerClassAsNonStatic()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.SimpleClass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.dontMarkNonInnerClassAsInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "7663a302ff8392b07431e775965aa1dac2556ab9", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["2d13004b3fbba2fe6ed919bbc98f2e3f69bb4809", "1014436692b0829a7287fbab81ef8720309d7945"], "nameRev": "7663a302ff8392b07431e775965aa1dac2556ab9 tags/r4.10~3", "commitMessage": "Merge pull request #304 from stefanbirkner/NonStaticInnerTestClass\n\nfixed issue #42 (error message for non-static inner class)", "commitDateTime": "2011-09-19 07:36:07", "authoredDateTime": "2011-09-19 07:36:07", "commitGitStats": [{"filePath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "insertions": 12, "deletions": 2, "lines": 14}, {"filePath": "src/main/java/org/junit/runners/model/TestClass.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/running/classes/BlockJUnit4ClassRunnerTest.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "insertions": 35, "deletions": 0, "lines": 35}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BlockJUnit4ClassRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)", "TOT": 6, "UPD": 1, "INS": 2, "MOV": 3, "DEL": 0}, {"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.validateNoNonStaticInnerClass(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestClass.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.model.TestClass.isANonStaticInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.AllTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "BlockJUnit4ClassRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestClassTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.OuterClass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.identifyNonStaticInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.OuterClass2", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.dontMarkStaticInnerClassAsNonStatic()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.SimpleClass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.dontMarkNonInnerClassAsInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1014436692b0829a7287fbab81ef8720309d7945"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 12, "deletions": 2, "lines": 14, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 8, "UPD": 1, "INS": 4, "MOV": 3, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/runners"], "changesInPackagesSPOON": ["org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)", "org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)", "org.junit.runners.BlockJUnit4ClassRunner.validateNoNonStaticInnerClass(java.util.List)"]}, {"title": "Only one (the last) filter is considered", "body": "In the course of upgrading from JUnit 4.4 to JUnit 4.7 I stumbled over this\nbug:\n\n```\n@Test\npublic void testMultipleFilters() throws Exception {\n    JUnitCore junitCore = new JUnitCore();\n    Request request = Request.aClass(ExampleTest.class);\n    Request requestFiltered = request.filterWith(new SingleMethodNameFilter(\"test1\"));\n    Request requestFilteredFiltered = requestFiltered.filterWith(new SingleMethodNameFilter(\"test2\"));\n    Result result = junitCore.run(requestFilteredFiltered);\n    printResult(result);\n    assertEquals(1, result.getRunCount()); // Fails here: actual 2\n}\n\nprivate static class SingleMethodNameFilter extends Filter {\n\n    private String methodName;\n\n    public SingleMethodNameFilter(String methodName) {\n        this.methodName = methodName;\n    }\n\n    @Override\n    public boolean shouldRun(Description description) {\n        return !description.getMethodName().equals(methodName);\n    }\n\n    @Override\n    public String describe() {\n        return \"filter method name: \" + methodName;\n    }\n\n}\n\npublic class ExampleTest {\n\n@Test\npublic void test1() throws Exception {\n    System.out.println(\"Run: test1\");\n    assertEquals(1, 1);\n}\n\n@Test\npublic void test2() throws Exception {\n    System.out.println(\"Run: test2\");\n    assertEquals(1, 1);\n}\n\n@Test\npublic void test3() throws Exception {\n    System.out.println(\"Run: test3\");\n    assertEquals(1, 1);\n}\n\n}\n```\n\nOf course one could make a composite Filter, but the old behaviour and the API seem to show that this limitation is not on purpose.\n\nThe Bug \"ID: 2094316\" (\"Request.filterWith has bizarre behavior\") is kind of related, but does not point to the main problem in my mind. \n\nMoreover, the filtering is carried out too often in my mind (we are using filters for a range of QA/TA related aspects): e.g. in the\ntestSingleFilter() method the filters shouldRun() method is called 11 times for ExampleTest (containing 3 test cases):\n\n```\n@Test\npublic void testSingleFilter() throws Exception {\n    Request requestFiltered = request.filterWith(new SingleMethodNameFilter(\"test1\"));\n    Result result = junitCore.run(requestFiltered);\n    printResult(result);\n    assertEquals(2, result.getRunCount());\n}\n```\n", "url": "https://github.com/junit-team/junit4/issues/39", "user": "reinholdfuereder", "labels": ["bug", "regression"], "created": "2009-10-27 09:33:57", "closed": "2011-04-15 19:29:09", "commits": {"669bb577583f2edd8cd65008a7c9ac19ebc350ea": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 535.0002777777778, "commitsDetails": [{"commitHash": "669bb577583f2edd8cd65008a7c9ac19ebc350ea", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["d3de6079892fa89aa46386c0369a29b4ef9e9e3c"], "nameRev": "669bb577583f2edd8cd65008a7c9ac19ebc350ea tags/r4.9b3~18", "commitMessage": "Fixes issue #39, by having multiple calls to ParentRunner.filter\nresult in the intersection of filters, rather than just the last\none used.\n", "commitDateTime": "2011-04-15 13:35:45", "authoredDateTime": "2011-04-15 13:35:45", "commitGitStats": [{"filePath": "src/main/java/org/junit/runner/manipulation/Filter.java", "insertions": 25, "deletions": 0, "lines": 25}, {"filePath": "src/main/java/org/junit/runners/ParentRunner.java", "insertions": 5, "deletions": 6, "lines": 11}, {"filePath": "src/test/java/junit/tests/framework/AssertTest.java", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/ParentRunnerTest.java", "insertions": 68, "deletions": 0, "lines": 68}, {"filePath": "src/test/java/org/junit/tests/manipulation/FilterTest.java", "insertions": 34, "deletions": 0, "lines": 34}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Filter.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.manipulation.Filter.intersect(org.junit.runner.manipulation.Filter)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runner.manipulation.Filter.1.apply(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ParentRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.ParentRunner", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.runners.ParentRunner.filterChild(java.lang.Object)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.runners.ParentRunner.shouldRun(java.lang.Object)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "AssertTest.java", "spoonMethods": []}, {"spoonFilePath": "AllTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.AllTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ParentRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.ParentRunnerTest.testMultipleFilters()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.ParentRunnerTest.isEmpty()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.ParentRunnerTest.Exclude", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.ParentRunnerTest.ExampleTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "FilterTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.manipulation.FilterTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["669bb577583f2edd8cd65008a7c9ac19ebc350ea"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 30, "deletions": 6, "lines": 36, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 11, "UPD": 0, "INS": 4, "MOV": 3, "DEL": 4, "spoonFilesChanged": 2, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/runners", "src/main/java/org/junit/runner/manipulation"], "changesInPackagesSPOON": ["org.junit.runners.ParentRunner.filterChild(java.lang.Object)", "org.junit.runners.ParentRunner", "org.junit.runner.manipulation.Filter.1.apply(java.lang.Object)", "org.junit.runner.manipulation.Filter.intersect(org.junit.runner.manipulation.Filter)", "org.junit.runners.ParentRunner.shouldRun(java.lang.Object)", "org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)"]}, {"title": "ParentRunner filtering \"internally temporarily\" broken", "body": "(I was not sure how to formulate the summary...) This issue is also related to these JUnit bugs and is in version 4.7 (release), but may have entered already after version 4.4:\n- \"CompositeRunner.filter incorrect if child throws NoTestsRema\" - ID: 1815188\n- \"Sorters and Filters are ignored in 4.5\" - ID: 2008607\n\nWhen using a filter on a composite test, i.e. ParentRunner and below, the filtering happens in two steps:\n1. Partial filtering on composite test based on Filter class and Filterable interface 2. Full filtering when running the tests via ParentRunner class:\nchildrenInvoker(), runChildren() and getFilteredChildren() methods\n\nI think the behaviour of JUnit 4.3.1 and 4.4 was different and better in that the filtering was done in a single step.\nThe problems of the current approach are in my mind:\n- The first filtering that throws the NoTestsRemainException is not complete, so it may happen that only the second filtering removes \"silently\"\n  some more tests. This leads in my case to JUnit reports (via ant-junit) that contains test classes without test cases.\n- Performance could be improved: as filtering is done multiple times and\n  shouldRun() is additionally used vai getDescription() and sorting in\n  getFilteredChildren())\n\nAs I think it was more or less suggested in one of the referenced bug reports above a quick \"fix\" (in fact a refactoring of the two step filtering should be strived for in my mind) is in ParentRunner.filter(Filter filter)\nmethod:\n\nOld:\n\n```\npublic void filter(Filter filter) throws NoTestsRemainException {\n    fFilter= filter;\n\n    for (T each : getChildren())\n        if (shouldRun(each))\n            return;\n    throw new NoTestsRemainException();\n}\n```\n\nNew:\n\n```\npublic void filter(Filter filter) throws NoTestsRemainException {\n    fFilter= filter;\n\n    ArrayList<T> filtered= new ArrayList<T>();\n    for (T each : getChildren()) {\n        if (shouldRun(each)) {\n            try {\n                filterChild(each);\n                filtered.add(each);\n            } catch (NoTestsRemainException e) {\n                // don't add it\n            }\n        }\n    }\n    if (filtered.isEmpty()) {\n        throw new NoTestsRemainException();\n    }\n}\n```\n", "url": "https://github.com/junit-team/junit4/issues/38", "user": "reinholdfuereder", "labels": ["bug", "needs more info", "regression"], "created": "2009-10-27 09:31:03", "closed": "2011-05-02 12:51:16", "commits": {}, "ttf": 552.0002777777778, "commitsDetails": []}, {"title": "we're breaking gump", "body": "", "url": "https://github.com/junit-team/junit4/issues/35", "user": "dsaff", "labels": ["bug"], "created": "2009-10-23 15:25:09", "closed": "2009-10-27 03:02:17", "commits": {}, "ttf": 3.000277777777778, "commitsDetails": []}, {"title": "junit-dep not uploaded to Maven repository since 4.5", "body": "I see versions 4.6 and 4.7 of the bundled-libraries version of JUnit in the Maven Central repo, but no junit-dep. Can this be added by whoever is doing the uploads?\n", "url": "https://github.com/junit-team/junit4/issues/33", "user": "MichaelHackett", "labels": ["bug", "regression"], "created": "2009-10-20 20:23:02", "closed": "2011-04-14 15:54:19", "commits": {}, "ttf": 540.0002777777778, "commitsDetails": []}, {"title": "Bug in assertNull", "body": "OK.\n\nb.t.w. just pulled and found this:\n\n```\n   static public void assertNull(Object object) {\n           String message = \"Expected: <null> but was: \" + object.toString();\n           assertNull(message, object);\n   }\n```\n\nwhich fails if object is null because of object.toString()\n\nshould be String.valueOf(object) ?\n", "url": "https://github.com/junit-team/junit4/issues/28", "user": "dsaff", "labels": ["bug"], "created": "2009-09-02 20:34:27", "closed": "2009-10-27 03:03:20", "commits": {}, "ttf": 54.000277777777775, "commitsDetails": []}, {"title": "Javadoc is wrong in 4.7", "body": "", "url": "https://github.com/junit-team/junit4/issues/23", "user": "dsaff", "labels": ["bug"], "created": "2009-08-10 18:58:51", "closed": "2009-12-08 02:19:03", "commits": {}, "ttf": 119.00027777777778, "commitsDetails": []}, {"title": "Backwards wildcard bound on ExpectedException.expectCause()", "body": "The signature of that method is `expectCause(Matcher<? extends Throwable> expectedCause)`.  This accepts `Matcher<RuntimeException>`, but possibly passes it other types such as `IOException`, resulting in heap pollution.\n\nOn the other hand, it forbids `Matcher<Object>`, even though that would be completely type-safe.\n\nThe type should be `Matcher<? super Throwable>` instead.\n", "url": "https://github.com/junit-team/junit4/issues/1073", "user": "tavianator", "labels": ["bug", "nonregression", "up-for-grabs"], "created": "2015-01-20 21:29:49", "closed": "2016-12-01 20:35:45", "commits": {"44cd8f80dbac11849a42a5d73fc9b5ddc75cd1b4": {"commitGHEventType": "referenced", "commitUser": "stefanbirkner"}}, "ttf": 680.0002777777778, "commitsDetails": [{"commitHash": "44cd8f80dbac11849a42a5d73fc9b5ddc75cd1b4", "commitGHEventType": "referenced", "commitUser": "stefanbirkner", "commitParents": ["638e82435a01af83e77c23e9f8d7b658a89eb4bf"], "nameRev": "44cd8f80dbac11849a42a5d73fc9b5ddc75cd1b4 tags/r4.13-beta-1~101", "commitMessage": "Change generics on ExpectedException.expectCause().\n\nThe previous generics (Matcher<? extends Throwable>) would not allow\nyou do use matchers on Object, like notNullValue().\n\nFixes #1073\n", "commitDateTime": "2016-12-01 21:35:45", "authoredDateTime": "2016-11-30 10:38:13", "commitGitStats": [{"filePath": "src/main/java/org/junit/internal/matchers/ThrowableCauseMatcher.java", "insertions": 3, "deletions": 3, "lines": 6}, {"filePath": "src/main/java/org/junit/rules/ExpectedException.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ThrowableCauseMatcher.java", "spoonMethods": []}, {"spoonFilePath": "ExpectedException.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["44cd8f80dbac11849a42a5d73fc9b5ddc75cd1b4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 4, "deletions": 4, "lines": 8, "gitFilesChange": 2}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/rules", "src/main/java/org/junit/internal/matchers"]}, {"title": "JUnit hangs if a null value is in a Parameters name {} parameter", "body": "Create a Parameters method with a name and parameters like name = \"{0}\". If a value is null, JUnit hangs. It should print \"null\" instead.\n", "url": "https://github.com/junit-team/junit4/issues/1014", "user": "garydgregory", "labels": ["bug", "nonregression"], "created": "2014-10-31 01:37:45", "closed": "2014-11-08 00:53:01", "commits": {}, "ttf": 7.000277777777778, "commitsDetails": []}, {"title": "filtering by category can lead to ExceptionInInitializerError", "body": "I am testing the support of categories in maven/surefire.\n\nIn categories.Categories#shouldRun you end up calling Description#getTestClass to check the annotations.\n\nThis is implemented by a direct classForName(className). This leads to a full initialization of this class (static & so on), even if at the end this test class won't be retained. As the initialization can be expensive for some categories of tests, it's already an issue.\n\nIn a context where there is a separation between the jvm used to select/launch the tests and the jvm used to execute them, it just does not work.\n\nThis can be very easily fixed in JUnit by not initializing the class in Description#getTestClass by calling\n`Class.forName(name, false, getClass().getClassLoader());`\n\ninstead of\n\n``` Class.forName(name);```\n\nThis method exists since java 1.2 (see http://download.oracle.com/javase/6/docs/api/java/lang/Class.html#forName%28java.lang.String,%20boolean,%20java.lang.ClassLoader%29)\n\nTested, it works with maven/surefire.\n```\n", "url": "https://github.com/junit-team/junit4/issues/359", "user": "nkeywal", "labels": ["bug", "nonregression"], "created": "2011-11-08 00:15:09", "closed": "2012-04-21 20:09:33", "commits": {"b1068dc55c95d1000e07b71d3a9d9a2fd26bfff9": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 165.00027777777777, "commitsDetails": [{"commitHash": "b1068dc55c95d1000e07b71d3a9d9a2fd26bfff9", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["1cec456a2c5638818959856eb3cef98743cbe08b", "eb307fa6f37ac8ec695b2f556e543969503418f5"], "nameRev": "b1068dc55c95d1000e07b71d3a9d9a2fd26bfff9 tags/r4.11-beta-1~54", "commitMessage": "Merge pull request #362 from nkeywal/eb307fa6f37ac8ec695b2f556e543969503418f5\n\nFix for #359", "commitDateTime": "2012-03-05 13:52:06", "authoredDateTime": "2012-03-05 13:52:06", "commitGitStats": [{"filePath": "src/main/java/org/junit/runner/Description.java", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Description.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.Description.getTestClass()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Categories javadoc does not specify the behavior of categories on parents and children.", "body": "", "url": "https://github.com/junit-team/junit4/issues/338", "user": "dsaff", "labels": ["bug", "categories", "javadoc", "nonregression"], "created": "2011-10-10 14:46:06", "closed": "2013-09-18 20:05:30", "commits": {}, "ttf": 709.0002777777778, "commitsDetails": []}, {"title": "4.9 and 4.10 \"junit\" artifacts in Maven Central have hamcrest as dependency defined while in \"junit\" artifact the hamcrest classes are already included", "body": "", "url": "https://github.com/junit-team/junit4/issues/332", "user": "Vampire", "labels": ["bug", "hamcrest", "maven", "nonregression"], "created": "2011-10-03 16:54:00", "closed": "2012-09-23 14:10:31", "commits": {}, "ttf": 355.0002777777778, "commitsDetails": []}, {"title": "TestWatchman.failed should not be invoked for AssumptionViolatedExceptions", "body": "I have set up a TestWatchman which is out of sync with the regular JUnit test reporters since the failed method is invoked even when the test passes as an assumption fails.\n\nI believe the least astonishing thing to do here is no not invoke failed for AssumptionViolatedExceptions.\n", "url": "https://github.com/junit-team/junit4/issues/296", "user": "rombert", "labels": ["bug", "nonregression"], "created": "2011-08-30 12:41:15", "closed": "2011-09-09 20:30:42", "commits": {"561a736d4400c32a608a6ee97424c20ca70bf8ae": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "561a736d4400c32a608a6ee97424c20ca70bf8ae", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["61f06547599bb6b98bca99d5bc457eb20bc17cab", "ada8735cda0fe94c9cfea9b8fb2012488a3a44e6"], "nameRev": "561a736d4400c32a608a6ee97424c20ca70bf8ae tags/r4.10~14", "commitMessage": "Merge pull request #302 from stefanbirkner/TestWatcher\n\nfixed issue #296", "commitDateTime": "2011-09-09 13:28:18", "authoredDateTime": "2011-09-09 13:28:18", "commitGitStats": [{"filePath": "acknowledgements.txt", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "src/main/java/org/junit/rules/TestWatcher.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "src/main/java/org/junit/rules/TestWatchman.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/LoggingTestWatcher.java", "insertions": 32, "deletions": 0, "lines": 32}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/TestRuleTest.java", "insertions": 15, "deletions": 27, "lines": 42}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/TestWatcherTest.java", "insertions": 52, "deletions": 0, "lines": 52}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/TestWatchmanTest.java", "insertions": 71, "deletions": 0, "lines": 71}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TestWatcher.java", "spoonMethods": [{"spoonMethodName": "org.junit.rules.TestWatcher.apply(org.junit.runners.model.Statement,org.junit.runner.Description).1.evaluate()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestWatchman.java", "spoonMethods": [{"spoonMethodName": "org.junit.rules.TestWatchman.apply(org.junit.runners.model.Statement,org.junit.runners.model.FrameworkMethod,java.lang.Object).1.evaluate()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "LoggingTestWatcher.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.rules.LoggingTestWatcher", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestRuleTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.OnFailureTest", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.WatchmanTest", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.BeforesAndAfters", "TOT": 3, "UPD": 2, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.BeforesAndAfters.before()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.BeforesAndAfters.after()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.BeforesAndAfters.succeeds()", "TOT": 3, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.junit.tests.experimental.rules.TestRuleTest.beforesAndAfters()", "TOT": 4, "UPD": 0, "INS": 2, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "TestWatcherTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.rules.TestWatcherTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestWatchmanTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.rules.TestWatchmanTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "odd and unclear language in Result javadoc", "body": "http://junit.sourceforge.net/javadoc/org/junit/runner/Result.html\n\nThis doc says:\n\n   A Result collects and summarizes information from running\n   multiple tests. Since tests are expected to run correctly, successful\n   tests are only noted in the count of tests that ran. \n\nShould this be, instead, this?\n\n   A Result collects and summarizes information from running\n   multiple tests. Since tests are expected to run correctly, only successful\n   tests are noted in the count of tests that ran. \n\nThat seems to be clearer.\n", "url": "https://github.com/junit-team/junit4/issues/295", "user": "rkiddy", "labels": ["bug", "javadoc", "nonregression"], "created": "2011-08-28 03:40:08", "closed": "2012-05-25 21:29:18", "commits": {"4311a62451755c3bb0a2c9c8cb737bda9d09d4c7": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 271.0002777777778, "commitsDetails": [{"commitHash": "4311a62451755c3bb0a2c9c8cb737bda9d09d4c7", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["99c4e59a2c01c215c9c1fe26a5b1a80f429d8ba1"], "nameRev": "4311a62451755c3bb0a2c9c8cb737bda9d09d4c7 tags/r4.11-beta-1~32^2", "commitMessage": "Fixes #295 clarify javadoc for Result\n", "commitDateTime": "2012-05-25 12:45:01", "authoredDateTime": "2012-05-25 12:45:01", "commitGitStats": [{"filePath": "src/main/java/org/junit/runner/Result.java", "insertions": 2, "deletions": 3, "lines": 5}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Result.java", "spoonMethods": []}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["4311a62451755c3bb0a2c9c8cb737bda9d09d4c7"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 2, "deletions": 3, "lines": 5, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/runner"]}, {"title": "Why is there an \"errors.clear()\" in RunAfters?", "body": "The `clear()` in line 29 of [RunAfters.java](https://github.com/KentBeck/junit/blob/b3789b3f879d34bbe968d5aa51d15c8856b9d102/src/main/java/org/junit/internal/runners/statements/RunAfters.java) is probably not necessary :-)\n", "url": "https://github.com/junit-team/junit4/issues/289", "user": "digulla", "labels": ["bug", "nonregression"], "created": "2011-08-16 07:06:20", "closed": "2011-09-22 17:36:32", "commits": {"f34121370f3698a529087013fecc45b0e94fb968": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 37.000277777777775, "commitsDetails": [{"commitHash": "f34121370f3698a529087013fecc45b0e94fb968", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["561a736d4400c32a608a6ee97424c20ca70bf8ae", "39545426e07dcb3bb3d71c930451514ba54c5999"], "nameRev": "f34121370f3698a529087013fecc45b0e94fb968 tags/r4.10~13", "commitMessage": "Merge pull request #301 from stefanbirkner/issue289\n\nfixed issue #289 (removed useless code)", "commitDateTime": "2011-09-10 03:17:29", "authoredDateTime": "2011-09-10 03:17:29", "commitGitStats": [{"filePath": "acknowledgements.txt", "insertions": 1, "deletions": 0, "lines": 1}, {"filePath": "src/main/java/org/junit/internal/runners/statements/RunAfters.java", "insertions": 0, "deletions": 1, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RunAfters.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.runners.statements.RunAfters.evaluate()", "TOT": 1, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 1}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Test result missing in JUnit View for a test runned in two test suites", "body": "OS : Win XP\nIDE : Eclipse Indigo\nJUnit : 4.8.2\n\nWhen i run the same test in two different test suites, i get a test result only for the last executed one.\nHere is the code to reproduce the defect :\n\npublic class AllTests {\n\n```\npublic static Test suite() {\n    TestSuite suite = new TestSuite(\"My tests\");\n\n    TestSuite ff = new TestSuite(\"Firefox\");\n    TestSuite ie = new TestSuite(\"InternetExplorer\");\n\n    suite.addTest(ff);\n    suite.addTest(ie);\n\n    ff.addTestSuite(TC01.class);\n    ie.addTestSuite(TC01.class);\n\n    return suite;\n}\n```\n\n}\n\npublic class TC01 extends TestCase{\n    public void test10() {\n        assertTrue( true );\n    }\n    public void test11() {\n        fail(\"failed\");\n    }\n}\n", "url": "https://github.com/junit-team/junit4/issues/262", "user": "florentbr", "labels": ["bug", "nonregression"], "created": "2011-07-15 21:35:38", "closed": "2012-04-21 20:12:28", "commits": {}, "ttf": 280.0002777777778, "commitsDetails": []}, {"title": "error using JUnit4TestAdapter with class which has no test methods", "body": "Suppose we have two classes:\n\n``` java\n// A.java\npublic class A\n{\n}\n\n// Main.java\nimport junit.framework.JUnit4TestAdapter;\nimport junit.framework.Test;\nimport junit.framework.TestResult;\n\npublic class Main\n{\n    public static void main(String[] args)\n    {\n        Test test = new JUnit4TestAdapter(A.class);\n\n        System.out.println(test.countTestCases());\n\n        TestResult res = new TestResult();\n        test.run(res); // Running a test class with no tests??\n        System.out.println(res.wasSuccessful());\n    }\n}\n```\n\nIf I run this application, Main class produces this output:\n\n``` java\n1\nfalse\n```\n\nSo, class A doesn't have any test methods, but JUnit4TestAdapter says that it does!\n", "url": "https://github.com/junit-team/junit4/issues/226", "user": "orionll", "labels": ["bug", "nonregression"], "created": "2011-05-01 14:14:41", "closed": "2016-09-18 07:21:28", "commits": {}, "ttf": 1966.0002777777777, "commitsDetails": []}, {"title": "error count not initialized in junit.tests.framework.TestListenerTest", "body": "I noticed that the variable fErrorCount in junit.tests.framework.TestListenerTest does not get initialized.\n\nI have version 4.9\n", "url": "https://github.com/junit-team/junit4/issues/225", "user": "rvdhorst", "labels": ["bug", "nonregression"], "created": "2011-04-30 13:01:08", "closed": "2011-09-16 13:54:44", "commits": {"901550a36244503ef2769724899cba213f11945f": {"commitGHEventType": "closed", "commitUser": "dsaff"}, "c82eef0da9be7201acb6dece4e96045756837c5a": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 139.00027777777777, "commitsDetails": [{"commitHash": "901550a36244503ef2769724899cba213f11945f", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["800f59a5089e58287c93def0fc00da6274b51e70"], "nameRev": "901550a36244503ef2769724899cba213f11945f tags/r4.10~5^2", "commitMessage": "Fixes gh-225 (initialize error count)\n", "commitDateTime": "2011-09-15 19:38:33", "authoredDateTime": "2011-09-15 19:38:33", "commitGitStats": [{"filePath": "src/test/java/junit/tests/framework/TestListenerTest.java", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TestListenerTest.java", "spoonMethods": [{"spoonMethodName": "junit.tests.framework.TestListenerTest.setUp()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "c82eef0da9be7201acb6dece4e96045756837c5a", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["800f59a5089e58287c93def0fc00da6274b51e70", "901550a36244503ef2769724899cba213f11945f"], "nameRev": "c82eef0da9be7201acb6dece4e96045756837c5a tags/r4.10~5", "commitMessage": "Merge pull request #317 from stefanbirkner/issue225\n\nFixes gh-225 (initialize error count)", "commitDateTime": "2011-09-16 06:54:43", "authoredDateTime": "2011-09-16 06:54:43", "commitGitStats": [{"filePath": "src/test/java/junit/tests/framework/TestListenerTest.java", "insertions": 1, "deletions": 0, "lines": 1}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TestListenerTest.java", "spoonMethods": [{"spoonMethodName": "junit.tests.framework.TestListenerTest.setUp()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["901550a36244503ef2769724899cba213f11945f"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Method DataPoints does not honor ParameterSignature", "body": "AllMembersSupplier.getValueSources does not pass 'sig' to addMultiPointMethods and therefore does not filter by parameter signature type.. Thus if you have\n\n@DataPoint public static int x = 5;\n@DataPoints public static String[] generateStrings() { .. }\n@Theory public void test(String s, int y) { .. }\n\nYou'll get a parameter mismatch, because generateStrings is forced to match against 'int y'.\n\nCurrently dataPointsMethod does not provide a signature analysis tool for proper efficient filtering, BUT you can just execute the method and check the returned data-type.\n\nI'll provide a pull request shortly with my temporary hack\n", "url": "https://github.com/junit-team/junit4/issues/220", "user": "maraist", "labels": ["bug", "nonregression", "theories"], "created": "2011-04-26 14:31:12", "closed": "2012-09-04 20:33:14", "commits": {}, "ttf": 497.0002777777778, "commitsDetails": []}, {"title": "Assert.assertArrayEquals(float[], float[], float) reports failures as doubles", "body": "Both Assert.assertArrayEquals(float[], float[], float) and Assert.assertArrayEquals(String, float[], float[], float) report AssertionFailures with doubles instead of floats. This does not seem like the desired functionality, since if you are doing a specified precision assertion about floats - the failure message should be written out as floats and not as doubles.\n\nThis is mostly because of InexactComparisonCriteria which is shared by both float and double. Constructor takes a primitive double, so when it is called by the signatures with float the float is being auto converted to a double. When InexactComparisonCriteria.assertElementsEqual() is called with floats, the type checking and casting ends up not functioning as it seems like it would for two reasons:\n1. delta field being stored as a double and then not cast to float means it will always match the signature (double, double, double) not (float, float, float) in the case of floats.\n2. there is no signature Assert.assertEquals(float, float, float) to match\n\nQuick code example to show problem:\n\n``` java\nfloat delta = 0.0001f;\nint failIndex = 1;\nfloat[] f1 = new float[] { 0.123f, 0.9301f, 21.823f };\nfloat[] f2 = new float[f1.length];\nSystem.arraycopy(f1, 0, f2, 0, f1.length);\nf2[failIndex] = f2[failIndex] + (delta + 0.0001f);\n\nSystem.out.println(\"\");\nSystem.out.println(Arrays.toString(f1));\nSystem.out.println(Arrays.toString(f2));\nSystem.out.println(\"\");\n\nSystem.out.println(\"arrays first differed at element [\" + failIndex + \"]; expected:<\" + f1[failIndex] + \"> but was:<\" + f2[failIndex] + \">\");\ntry {\n    Assert.assertArrayEquals(f1, f2, delta);\n} catch(AssertionError e) {\n    System.out.println(e.getMessage());\n}\n```\n", "url": "https://github.com/junit-team/junit4/issues/219", "user": "marksn", "labels": ["bug", "nonregression"], "created": "2011-04-25 16:03:34", "closed": "2013-06-17 13:35:34", "commits": {"688854ba468c53884b74952f4daf938a99c44e8c": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 783.0002777777778, "commitsDetails": [{"commitHash": "688854ba468c53884b74952f4daf938a99c44e8c", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["2e460f845c4198a0d12c010b3e478be61f480bcd", "0c38750119accdea92004723c8c177d7cc65b16c"], "nameRev": "688854ba468c53884b74952f4daf938a99c44e8c tags/r4.11-beta-1~31", "commitMessage": "Merge pull request #416 from jcortez/master\n\nFixed issue #219 (rebased)", "commitDateTime": "2012-05-25 14:48:29", "authoredDateTime": "2012-05-25 14:48:29", "commitGitStats": [{"filePath": "acknowledgements.txt", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "src/main/java/org/junit/Assert.java", "insertions": 47, "deletions": 2, "lines": 49}, {"filePath": "src/main/java/org/junit/internal/InexactComparisonCriteria.java", "insertions": 7, "deletions": 3, "lines": 10}, {"filePath": "src/test/java/org/junit/tests/assertion/AssertionTest.java", "insertions": 9, "deletions": 0, "lines": 9}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Assert.java", "spoonMethods": [{"spoonMethodName": "org.junit.Assert.assertEquals(float,float,float)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.Assert.assertEquals(java.lang.String,float,float,float)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "InexactComparisonCriteria.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.InexactComparisonCriteria", "TOT": 2, "UPD": 1, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AssertionTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.assertion.AssertionTest.floatsNotDoublesInArrays()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "@Ignored tests are not reported", "body": "tests marked as @Ignore are not reported at all.\n\nin a class containing 6 tests (one of which ignored), I get this verbose output:\n\n<pre>\n    [junit] junit.framework.TestListener: tests to run: 6\n    [junit] junit.framework.TestListener: startTest(testCanFindTestDir)\n    [junit] junit.framework.TestListener: endTest(testCanFindTestDir)\n    [junit] junit.framework.TestListener: startTest(testCanFindTestDirWithSlash)\n    [junit] junit.framework.TestListener: endTest(testCanFindTestDirWithSlash)\n    [junit] junit.framework.TestListener: startTest(testBasicPaths)\n    [junit] junit.framework.TestListener: endTest(testBasicPaths)\n    [junit] junit.framework.TestListener: startTest(testPathsCaseSentive)\n    [junit] junit.framework.TestListener: endTest(testPathsCaseSentive)\n    [junit] junit.framework.TestListener: startTest(testGetCaseSubPath)\n    [junit] junit.framework.TestListener: endTest(testGetCaseSubPath)\n    [junit] Implicitly adding /usr/share/ant/lib/junit.jar:/usr/share/java/ant-launcher-1.8.0.jar:/usr/share/ant/lib/ant.jar:/usr/share/ant/lib/ant-junit.jar to CLASSPATH\n</pre>\n\n\nthe ignored test is counted in the 6, but further not mentioned.\n\nin the xml report I get this:\n\n<pre>\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testCanFindTestDir\" time=\n\"0.018\" />\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testCanFindTestDirWithSla\nsh\" time=\"0.002\" />\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testBasicPaths\" time=\"0.0\n02\" />\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testPathsCaseSentive\" tim\ne=\"0.004\" />\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testGetCaseSubPath\" time=\"0.016\" />\n</pre>\n\n\nwhile I would expect also this:\n\n<pre>\n  &lt;testcase classname=\"test.nl.nelen_schuurmans.io.TestFileFunctions\" name=\"testCanFindSambaShare\" time=\"0.016\">\n    &lt;skipped/>\n  &lt;/testcase>\n</pre>\n\n\nnot getting ignored tests in the reports makes the reports less informative.\n", "url": "https://github.com/junit-team/junit4/issues/218", "user": "mfrasca", "labels": ["bug", "nonregression"], "created": "2011-04-21 13:53:11", "closed": "2011-05-02 13:41:05", "commits": {}, "ttf": 10.000277777777777, "commitsDetails": []}, {"title": "Removing through iterator not supported by CopyOnWriteArrayList", "body": "Run-listener throwing exception causes this, and it can be seen that removing an element by its iterator is not suppored on copyonwritearraylist.\n\nCaused by: java.lang.IllegalStateException\n        at java.util.AbstractList$Itr.remove(AbstractList.java:356)\n        at org.junit.runner.notification.RunNotifier$SafeNotifier.run(RunNotifier.java:43)\n        at org.junit.runner.notification.RunNotifier.fireTestRunFinished(RunNotifier.java:68)\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:158)\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:136)\n        at org.junit.runner.JUnitCore.run(JUnitCore.java:127)\n        at org.apache.maven.surefire.junitcore.JUnitCoreWrapper.execute(JUnitCoreWrapper.java:51)\n        at org.apache.maven.surefire.junitcore.JUnitCoreProvider.invoke(JUnitCoreProvider.java:110)\n\nFix with the following change or similar:\n            for (Iterator<RunListener> all = fListeners.iterator(); all.hasNext();){\n                RunListener next = all.next();\n                try {\n                    notifyListener(next);\n                } catch (Exception e) {\n                    fListeners.remove( next); // Remove the offending listener first to avoid an infinite loop\n                    fireTestFailure(new Failure(Description.TEST_MECHANISM, e));\n                }\n            }\n", "url": "https://github.com/junit-team/junit4/issues/209", "user": "krosenvold", "labels": ["bug", "nonregression"], "created": "2011-03-29 11:19:43", "closed": "2012-04-06 20:42:06", "commits": {"36397848551f1dc843e4bf5036ff7b00b5cd6adb": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 374.0002777777778, "commitsDetails": [{"commitHash": "36397848551f1dc843e4bf5036ff7b00b5cd6adb", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["d5bce273008bc4fbc7a0805a21b9e2991313bd3b", "0ce06206263ed060bd0ede049c1713286c2487ea"], "nameRev": "36397848551f1dc843e4bf5036ff7b00b5cd6adb tags/r4.11-beta-1~52", "commitMessage": "Merge pull request #397 from stefanbirkner/removeListener\n\nDon't remove listeners, which throw exceptions (fixes #209 and #395)", "commitDateTime": "2012-04-06 13:42:05", "authoredDateTime": "2012-04-06 13:42:05", "commitGitStats": [{"filePath": "src/main/java/org/junit/runner/notification/RunNotifier.java", "insertions": 36, "deletions": 11, "lines": 47}, {"filePath": "src/test/java/org/junit/runner/notification/RunNotifierTest.java", "insertions": 49, "deletions": 0, "lines": 49}, {"filePath": "src/test/java/org/junit/tests/listening/TestListenerTest.java", "insertions": 2, "deletions": 5, "lines": 7}], "commitSpoonAstDiffStats": [{"spoonFilePath": "RunNotifier.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure)", "TOT": 7, "UPD": 4, "INS": 1, "MOV": 2, "DEL": 0}, {"spoonMethodName": "org.junit.runner.notification.RunNotifier.SafeNotifier.run()", "TOT": 12, "UPD": 2, "INS": 7, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.runner.notification.RunNotifier.fireTestFailure(org.junit.runner.notification.Failure).4.notifyListener(org.junit.runner.notification.RunListener)", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 1, "DEL": 1}, {"spoonMethodName": "org.junit.runner.notification.RunNotifier.SafeNotifier", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runner.notification.RunNotifier.fireTestFailures(java.util.List,java.util.List).4.notifyListener(org.junit.runner.notification.RunListener)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "RunNotifierTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.notification.RunNotifierTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestListenerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.listening.TestListenerTest.removeFailingListeners()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "ErrorReportingRunner accepts null testClass, tries to dereference", "body": "Given:\n\n10: Runner r = new ErrorReportingRunner(null, new RuntimeException());\n11: r.getDescription();\n\nLine 11 will throw a NullPointerException.  Either line 10 should throw the exception, or line 11 should do something sensible.\n", "url": "https://github.com/junit-team/junit4/issues/177", "user": "dsaff", "labels": ["bug", "needs more info", "nonregression"], "created": "2011-01-03 16:37:25", "closed": "2014-04-12 03:11:57", "commits": {"96cfed79612de559e454a1a91724a061e8615ae4": {"commitGHEventType": "closed", "commitUser": "kcooney"}, "e65558c174a8f5c4c7758f0d9dd1ffe027b023d8": {"commitGHEventType": "referenced", "commitUser": "kcooney"}}, "ttf": 1194.0002777777777, "commitsDetails": [{"commitHash": "96cfed79612de559e454a1a91724a061e8615ae4", "commitGHEventType": "closed", "commitUser": "kcooney", "commitParents": ["d1b8c04e54f0b9e4807fa88a2ff36ad9ba177107"], "nameRev": "96cfed79612de559e454a1a91724a061e8615ae4 tags/r4.12-beta-1~42^2", "commitMessage": "fixes #177\n\nnull check for test class in ErrorReportingRunner", "commitDateTime": "2014-04-11 23:11:40", "authoredDateTime": "2014-04-08 23:19:46", "commitGitStats": [{"filePath": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "src/test/java/org/junit/tests/internal/runners/ErrorReportingRunnerTest.java", "insertions": 11, "deletions": 0, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ErrorReportingRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.runners.ErrorReportingRunner", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ErrorReportingRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.internal.runners.ErrorReportingRunnerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "e65558c174a8f5c4c7758f0d9dd1ffe027b023d8", "commitGHEventType": "referenced", "commitUser": "kcooney", "commitParents": ["dbfd4faa383f29fae45d265cf628cc4195169dbf", "96cfed79612de559e454a1a91724a061e8615ae4"], "nameRev": "e65558c174a8f5c4c7758f0d9dd1ffe027b023d8 tags/r4.12-beta-1~42", "commitMessage": "Merge pull request #871 from clumsy/#177\n\nfixes #177", "commitDateTime": "2014-04-11 20:11:56", "authoredDateTime": "2014-04-11 20:11:56", "commitGitStats": [{"filePath": "src/main/java/org/junit/internal/runners/ErrorReportingRunner.java", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "src/test/java/org/junit/tests/internal/runners/ErrorReportingRunnerTest.java", "insertions": 11, "deletions": 0, "lines": 11}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ErrorReportingRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.runners.ErrorReportingRunner", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ErrorReportingRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.internal.runners.ErrorReportingRunnerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["96cfed79612de559e454a1a91724a061e8615ae4"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 3, "deletions": 0, "lines": 3, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 1}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/internal/runners"], "changesInPackagesSPOON": ["org.junit.internal.runners.ErrorReportingRunner"]}, {"title": "Unable to run JUnit from command line in Linux", "body": "Running \"java -cp .:junit-4.8.2.jar org.junit.runner.JUnitCore org.junit.tests.AllTests\" from unzipped junit directory leads to an exception:\n\n'JUnit version 4.8.2\nException in thread \"main\" java.lang.NoClassDefFoundError: org/junit/tests/AllTests (wrong name: lib/junit4.8.2/org/junit/tests/AllTests)\n    at java.lang.ClassLoader.defineClass1(Native Method)\n    at java.lang.ClassLoader.defineClass(ClassLoader.java:620)\n    at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:124)\n    at java.net.URLClassLoader.defineClass(URLClassLoader.java:260)\n    at java.net.URLClassLoader.access$100(URLClassLoader.java:56)\n    at java.net.URLClassLoader$1.run(URLClassLoader.java:195)\n    at java.security.AccessController.doPrivileged(Native Method)\n    at java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:306)\n    at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:268)\n    at java.lang.ClassLoader.loadClass(ClassLoader.java:251)\n    at java.lang.ClassLoader.loadClassInternal(ClassLoader.java:319)\n    at java.lang.Class.forName0(Native Method)\n    at java.lang.Class.forName(Class.java:164)\n    at org.junit.runner.JUnitCore.runMain(JUnitCore.java:89)\n    at org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\n    at org.junit.runner.JUnitCore.main(JUnitCore.java:45)'\n\nsetting CLASSPATH environment variable to .:junit-4.8.2.jar or $JUNIT_DIR:junit-4.8.2.jar, where $JUNIT_DIR is the path for unzipped junit, results in the same effect.\n", "url": "https://github.com/junit-team/junit4/issues/150", "user": "gusega", "labels": ["bug", "nonregression"], "created": "2010-11-03 13:46:50", "closed": "2012-04-22 06:00:25", "commits": {}, "ttf": 535.0002777777778, "commitsDetails": []}, {"title": "API docs: Depricated method of Assert refers to non-existing signature", "body": "In the API docs (http://junit.org/apidocs/) of org.junit.Assert in the Method Summary is referred to another method with signature \"assertEquals(double expected, double actual, double epsilon)\". \nThere is no such method, but there is a \"assertEquals(double expected, double actual, double delta)\". \n\nSame for the methods including a \"String message\".\n", "url": "https://github.com/junit-team/junit4/issues/134", "user": "electrickery", "labels": ["bug", "nonregression"], "created": "2010-08-10 07:57:55", "closed": "2011-08-11 17:40:42", "commits": {"225b4d05785d650c892dd13852955f60584ee46d": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 366.0002777777778, "commitsDetails": [{"commitHash": "225b4d05785d650c892dd13852955f60584ee46d", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "spoonStatsSummary": {}, "statsSkippedReason": ""}, {"title": "No error/warning on non static method annotated with @DataPoint", "body": "This test is marked as successfull but did _not_ run:\n\n```\n @RunWith( Theories.class )\n public class TheoriesTest {\n  @Theory\n  public void aTheory( String arg ) {\n    System.out.println( \"TheoriesTest.aTheory(\" + arg + \")\" );\n    assertNotNull( arg );\n  }\n\n  @DataPoint\n  public String getParam() {\n    return \"daParam\";\n  }\n }\n```\n\nI think the problem lies in Theories:126.\nstatement.evaluate() catches exceptions silently\n(org.junit.experimental.theories.Theories.TheoryAnchor#methodCompletesWithParameters:158).\n\nTherefore \"handleDataPointSuccess\" is called even when an exception has\nbeen thrown....\n\nSo I think there are at least two things missing:\n- Proper exception handling...\n- Checking the DataPoint(s) methods for the static keyword\n", "url": "https://github.com/junit-team/junit4/issues/125", "user": "jschneider", "labels": ["bug", "nonregression", "theories"], "created": "2010-07-28 14:16:16", "closed": "2013-01-29 06:45:33", "commits": {"27ba66f2da17ec2580dc8289b68c29365a872a1a": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 915.0002777777778, "commitsDetails": [{"commitHash": "27ba66f2da17ec2580dc8289b68c29365a872a1a", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["2903ff09a196761c9a6596b8f46ae3828a66d099", "2c6c142aa801cef3520ca668e75a670a32b4859a"], "nameRev": "27ba66f2da17ec2580dc8289b68c29365a872a1a tags/r4.12-beta-1~132", "commitMessage": "Merge pull request #623 from pimterry/errors-on-non-static-datapoints-#125\n\nAdded validation that all datapoint methods and fields are public and static to theory initialization", "commitDateTime": "2013-01-28 16:11:09", "authoredDateTime": "2013-01-28 16:11:09", "commitGitStats": [{"filePath": "src/main/java/org/junit/experimental/theories/Theories.java", "insertions": 19, "deletions": 1, "lines": 20}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/UnsuccessfulWithDataPointFields.java", "insertions": 127, "deletions": 32, "lines": 159}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Theories.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.Theories.validateDataPointMethods(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.Theories.collectInitializationErrors(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.Theories.validateDataPointFields(java.util.List)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "UnsuccessfulWithDataPointFields.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.HasATheory", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.DataPointsMustBeStatic", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.dataPointsMustBeStatic()", "TOT": 4, "UPD": 3, "INS": 0, "MOV": 1, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.DataPointsMustBePublic", "TOT": 3, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 2}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.dataPointsMustBePublic()", "TOT": 7, "UPD": 4, "INS": 0, "MOV": 3, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.HasATheory.everythingIsZero(int)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.canRunTheories()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.theoryAnnotationsAreRetained()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.theoryClassMethodsShowUp()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.DataPointMethodsMustBeStatic", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.dataPointMethodsMustBeStatic()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.DataPointMethodsMustBePublic", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.dataPointMethodsMustBePublic()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.experimental.theories.runner.UnsuccessfulWithDataPointFields.dataPointFieldsMustBePublic()", "TOT": 2, "UPD": 0, "INS": 2, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Assumptions don't work in tests with expected exceptions", "body": "The following test should be ignored, but fails with JUnit 4.8.2:\n\n```\n@Test(expected = UnsupportedOperationException.class)\npublic void testExpectedVsAssumption() {\n    Assume.assumeTrue(false);\n}\n```\n\nThis test succeeds if run with @RunWith(JUnit4ClassRunner.class). The reason it works with the older runner, but fails with the new runner seems to be that org.junit.internal.runners.MethodRoadie.runTestMethod() has special handling for AssumptionViolatedException, but this handling is missing from org.junit.internal.runners.statements.ExpectException.evaluate().\n", "url": "https://github.com/junit-team/junit4/issues/121", "user": "petur", "labels": ["bug", "nonregression"], "created": "2010-07-13 09:28:50", "closed": "2012-04-09 17:14:36", "commits": {"c4279e432212ed6c23dee817113ae61ec4fbf86e": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 636.0002777777778, "commitsDetails": [{"commitHash": "c4279e432212ed6c23dee817113ae61ec4fbf86e", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["3a5c9f2731462e36dd1c173ea8840d7b9b34b0ab", "f3ae021fb078fc3b1576febbce1b02e249329516"], "nameRev": "c4279e432212ed6c23dee817113ae61ec4fbf86e tags/r4.11-beta-1~49", "commitMessage": "Merge pull request #323 from stefanbirkner/assumption\n\nFixes gh-121 (ExpectedException handles JUnit exceptions)", "commitDateTime": "2012-04-09 10:14:35", "authoredDateTime": "2012-04-09 10:14:35", "commitGitStats": [{"filePath": "src/main/java/org/junit/rules/ExpectedException.java", "insertions": 82, "deletions": 20, "lines": 102}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 2, "deletions": 2, "lines": 4}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/EventCollector.java", "insertions": 159, "deletions": 0, "lines": 159}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionRuleTest.java", "insertions": 0, "deletions": 232, "lines": 232}, {"filePath": "src/test/java/org/junit/tests/experimental/rules/ExpectedExceptionTest.java", "insertions": 324, "deletions": 0, "lines": 324}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": "tooManyChanges"}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Assumptions don't work in tests with expected exceptions", "body": "The following test should be ignored, but fails with JUnit 4.8.2:\n\n```\n@Test(expected = UnsupportedOperationException.class)\npublic void testExpectedVsAssumption() {\n    Assume.assumeTrue(false);\n}\n```\n\nThis test succeeds if run with @RunWith(JUnit4ClassRunner.class). The reason it works with the older runner, but fails with the new runner seems to be that org.junit.internal.runners.MethodRoadie.runTestMethod() has special handling for AssumptionViolatedException, but this handling is missing from org.junit.internal.runners.statements.ExpectException.evaluate().\n", "url": "https://github.com/junit-team/junit4/issues/120", "user": "petur", "labels": ["bug", "nonregression"], "created": "2010-07-13 09:08:10", "closed": "2010-07-13 09:23:05", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "Parameterized: data() returns Collection<Object[]>, which in Parameterized.getParametersList() is cast to List<Object[]>", "body": "First of all, I was very happy to discover the Parameterized runner today, I came very close to reverting to a JUnit 3 Suite, but stumbled on this very elegant solution to a common enough problem - dynamically configuring a bunch of tests whose results should be reported separately.\n\n@Parameters data() returns Collection<Object[]>, but in Parameterized.getParametersList(), this collection is immediately cast to List<Object>. This is unfortunate if the Collection is not a List.\n\nA simple workaround is to simply return a list from data(), but really, I think this is unnecessarily confusing, and I don't see any reason why Parameterized would care what kind of Collection this is.\n\nHere's an example which demonstrates the issue:\n\n@RunWith(Parameterized.class)\npublic class PersistentEntityTest {\n    private final String entity;\n\n```\npublic PersistentEntityTest(String entity) {\n    this.entity = entity;\n}\n\n@Test\npublic void test() {\n    Assert.assertEquals(\"testEntity\", this.entity);\n}\n\n@Parameters\npublic static Collection<Object[]> data() {\n    return Collections.singleton(new Object[] { \"testEntity\" });\n}\n```\n\n}\n", "url": "https://github.com/junit-team/junit4/issues/104", "user": "mlauritse", "labels": ["bug", "nonregression", "parameterized"], "created": "2010-05-17 20:14:55", "closed": "2011-12-31 13:03:42", "commits": {"45eaab756edc8913b1c74e87ef3b519da6afa5fc": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 592.0002777777778, "commitsDetails": [{"commitHash": "45eaab756edc8913b1c74e87ef3b519da6afa5fc", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["a681b760978751ca4c4ccc6de616b0643d6c2b0e", "5475e12b57f5af0140deffa7f45c75dc47803167"], "nameRev": "45eaab756edc8913b1c74e87ef3b519da6afa5fc tags/r4.11-beta-1~59", "commitMessage": "Merge pull request #348 from stefanbirkner/iterable\n\nUse Iterable for the parameters of Parameterized (fixes gh-104).", "commitDateTime": "2011-12-31 05:03:41", "authoredDateTime": "2011-12-31 05:03:41", "commitGitStats": [{"filePath": "src/main/java/org/junit/runners/Parameterized.java", "insertions": 46, "deletions": 36, "lines": 82}, {"filePath": "src/test/java/org/junit/tests/running/classes/ParameterizedTestTest.java", "insertions": 32, "deletions": 15, "lines": 47}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Parameterized.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.Parameterized.getParametersList(org.junit.runners.model.TestClass)", "TOT": 5, "UPD": 2, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.runners.Parameterized.TestClassRunnerForParameters", "TOT": 6, "UPD": 6, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.Parameterized", "TOT": 11, "UPD": 4, "INS": 1, "MOV": 5, "DEL": 1}, {"spoonMethodName": "org.junit.runners.Parameterized.getParametersMethod(org.junit.runners.model.TestClass)", "TOT": 8, "UPD": 2, "INS": 0, "MOV": 0, "DEL": 6}, {"spoonMethodName": "org.junit.runners.Parameterized.TestClassRunnerForParameters.createTest()", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.runners.Parameterized.TestClassRunnerForParameters.computeParams()", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.runners.Parameterized.createRunnersForParameters(java.lang.Iterable)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.Parameterized.parametersMethodReturnedWrongType()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.Parameterized.getParametersMethod()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ParameterizedTestTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.FibonacciTest.data()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.WrongElementType.data()", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.meaningfulFailureWhenParameterListsAreNotArrays()", "TOT": 13, "UPD": 3, "INS": 0, "MOV": 8, "DEL": 2}, {"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.meaningfulFailureWhenParametersAreNotArrays()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.ParametersNotIterable", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.ParameterizedTestTest.meaningfulFailureWhenParametersAreNotAnIterable()", "TOT": 3, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Fibonacci example in Javadocs of Parameterized uses a strange object array item", "body": "http://kentbeck.github.com/junit/javadoc/latest/org/junit/runners/Parameterized.html\n[...]\n        @Parameters\n        public static List<Object[]> data() {\n                return Arrays.asList(new Object[][] {\n                                Fibonacci,\n                                { { 0, 0 }, { 1, 1 }, { 2, 1 }, { 3, 2 }, { 4, 3 }, { 5, 5 },\n                                                { 6, 8 } } });\n        }\n[...]\nI suppose that the line \"Fibonacci,\" is a typo and should disappear. Otherwise please explain its existence.\nThanks.\n", "url": "https://github.com/junit-team/junit4/issues/89", "user": "andi5", "labels": ["bug", "nonregression", "parameterized"], "created": "2010-03-02 15:32:18", "closed": "2011-08-11 17:40:19", "commits": {"f7ae09bafb3b7dec806af5f979f8cf839a63529e": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 527.0002777777778, "commitsDetails": [{"commitHash": "f7ae09bafb3b7dec806af5f979f8cf839a63529e", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": [], "nameRev": "", "commitMessage": "", "commitDateTime": "", "authoredDateTime": "", "commitGitStats": [], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 1, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "spoonStatsSummary": {}, "statsSkippedReason": ""}, {"title": "Findbugs warning", "body": "Dear all,\n\nWe are conducting an study about the relevance of the warnings reported by the FindBugs tool  when executed over several open-source systems.\n\nParticularly, in the case of JUnit, we would like to confirm the relevance of the following warning reported by the tool (for JUnit 4.7):\n\n> package: org.junit.experimental.theories.suppliers.\n> method: TestedOnSupplier.getValueSources \n> \n> for (final int i : ints) {\n>    list.add(PotentialAssignment.forValue(Arrays.asList(ints).toString(), i));\n> }\n\nFindbugs is complaining that \"this code passes a primitive array (ints) to a function that takes a variable number of object arguments (asList). This creates an array of length one to hold the primitive array and passes it to the function.\"\n\nSince this warning seemed relevant to us, we would like to confirm our classification with JUnit's developers.\n\nBest regards,\n\nMarco Tulio Valente\nBrazil\n", "url": "https://github.com/junit-team/junit4/issues/88", "user": "mtov", "labels": ["bug", "nonregression"], "created": "2010-03-01 15:42:26", "closed": "2012-04-23 18:28:33", "commits": {"1df71004338faf30b9287b03b726e1ce4f1246be": {"commitGHEventType": "closed", "commitUser": "marcphilipp"}}, "ttf": 784.0002777777778, "commitsDetails": [{"commitHash": "1df71004338faf30b9287b03b726e1ce4f1246be", "commitGHEventType": "closed", "commitUser": "marcphilipp", "commitParents": ["34d2943cef583ecb34cc182b79dbb4af0c778b3f"], "nameRev": "1df71004338faf30b9287b03b726e1ce4f1246be tags/r4.11-beta-1~44^2", "commitMessage": "Fix #88", "commitDateTime": "2012-04-21 21:56:51", "authoredDateTime": "2012-04-21 21:56:51", "commitGitStats": [{"filePath": "src/main/java/org/junit/experimental/theories/suppliers/TestedOnSupplier.java", "insertions": 1, "deletions": 4, "lines": 5}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 3, "deletions": 1, "lines": 4}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/TestedOnSupplierTest.java", "insertions": 32, "deletions": 0, "lines": 32}], "commitSpoonAstDiffStats": [{"spoonFilePath": "TestedOnSupplier.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.suppliers.TestedOnSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}]}, {"spoonFilePath": "AllTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.AllTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestedOnSupplierTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.TestedOnSupplierTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1df71004338faf30b9287b03b726e1ce4f1246be"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Performance issue: @DataPoints called N+1 times for each theory", "body": "I created a set of theories to verify the equals(), hashCode()\nrelationship. While I had the equals and reciprocal equals working\nproperly, I was surprised at the unintended hashCode collisions I had in\nmy code. More importantly I was surprised at how often the @DataPoints\nmethod was called to set up the tests. It was called no less than 61\ntimes for 60 discrete data points. That seems a bit excessive to me.\n\nI set up a bunch of data with the assumption that it was set up once,\nand then the contents were copied as needed. Essentially the expensive\nset up work is done 61 times, accounting for a large portion of the 37\nseconds it takes to run all my tests. If the @DataPoints method is only\ncalled once, and the values are copied as necessary, then the\nimplementation would be much faster.\n", "url": "https://github.com/junit-team/junit4/issues/82", "user": "bloritsch", "labels": ["bug", "nonregression", "theories"], "created": "2010-02-18 17:07:38", "closed": "2013-11-15 01:15:51", "commits": {}, "ttf": 1365.0002777777777, "commitsDetails": []}, {"title": "javadoc is missing junit.* packages", "body": "Having a look here:\n\nhttp://kentbeck.github.com/junit/javadoc/latest/\n\nThe junit.\\* packages seem to be missing.\n", "url": "https://github.com/junit-team/junit4/issues/81", "user": "groovycookbook", "labels": ["bug", "javadoc", "nonregression"], "created": "2010-02-12 11:57:24", "closed": "2017-08-22 04:15:11", "commits": {"376c2fc3f269eaba580c75cd1689ca2ba16ad202": {"commitGHEventType": "referenced", "commitUser": "kcooney"}}, "ttf": 2747.0002777777777, "commitsDetails": [{"commitHash": "376c2fc3f269eaba580c75cd1689ca2ba16ad202", "commitGHEventType": "referenced", "commitUser": "kcooney", "commitParents": ["24dfdd762e753c83babca3768d4b508cf5c6a86c"], "nameRev": "376c2fc3f269eaba580c75cd1689ca2ba16ad202 tags/r4.13-beta-1~49", "commitMessage": "Generate Javadoc for the junit.* packages. (#1477)\n\nFixes #81", "commitDateTime": "2017-08-21 21:15:10", "authoredDateTime": "2017-08-21 21:15:10", "commitGitStats": [{"filePath": "pom.xml", "insertions": 1, "deletions": 1, "lines": 2}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "@DataPoints does not allow you to map Classes to Theories", "body": "Just to see how things map, I attempted to do something like this:\n\n```\n@RunWith(Theories.class)\npublic class TrackableTestCase {\n  @DataPoints\n  public static Class[] collectTargets() {\n    Class[] targets = new Class[] {\n        User.class, Incident.class\n    };\n\n    return targets;\n  }\n\n  @Theory\n  public void examineClass(Class klass) {\n    System.out.println(klass.getName());\n  }\n}\n```\n\nThe problem of course is that the Theories runner couldn't map the\ndatapoints to the Theory:\njava.lang.AssertionError: Never found parameters that satisfied method\nassumptions. Violated assumptions: []\n\nWhen I did the same thing with Strings, I had no problems. I did find\nout that the return type had to be an array and not a list. The\nTheories runner just couldn't map the classes to the theory that took\nthe class. Additionally, when I had both the class data points and the\nstring data points, the Theories runner attempted to map the whole array\nof strings to the examineClass theory above. Unsurprisingly there was a\nclass cast exception there.\n", "url": "https://github.com/junit-team/junit4/issues/76", "user": "bloritsch", "labels": ["bug", "nonregression", "theories"], "created": "2010-02-02 14:41:42", "closed": "2015-03-27 10:58:41", "commits": {}, "ttf": 1878.0002777777777, "commitsDetails": []}, {"title": "Missing Warnings for Theories", "body": "Theories runner warn if @DataPoint targets an instance field (as opposed to a static field) with an Error (\"DataPoint field f must be static).\n\nHowever, if @DataPoint targets a non-public field, the field is ignored silently.  In the following test junit runner ignores `ignoredSilently` nonpublic static field:\n\n```\n@RunWith(Theories.class)\npublic class TestTheory1 {\n    @DataPoint static String ignoredSilently = null;\n    @DataPoint public static String field = \"m\";\n    @Theory public void nonNull(String s) { Assert.assertNotNull(s); }\n}\n```\n", "url": "https://github.com/junit-team/junit4/issues/62", "user": "notnoop", "labels": ["bug", "nonregression", "theories"], "created": "2009-12-08 21:39:02", "closed": "2012-11-16 18:40:06", "commits": {}, "ttf": 1073.0002777777777, "commitsDetails": []}, {"title": "Type Matching Between MultiPointsMethod and array Is Not Performed Correctly.", "body": "DataPoints declared in MultiPointsMethod will be matched incorrectly with array causing an exception due to argument type mismatch. Below is an example showing the bug:  \n @RunWith(Theories.class)\npublic class TestDataPoints {\n\n```\n@DataPoint\npublic static String[] stringArr1= { \"Good\", \"Morning\" };\n\n@DataPoints\npublic static String[] stringArr2() {\n    return new String[] { \"Hello\", \"World\" };\n}\n\n/**\n * An array is expected so only stringArr1 should be passed in but\n * stringArr2 will be passed in as parameter,causing an exception due to\n * argument type mismatch\n * \n * @param arr\n */\n@Theory\npublic void testTheory(String[] arr) {\n\n    for (int i= 0; i < arr.length; i++) {\n        System.out.print(arr[i] + \" \");\n    }\n}\n```\n\n}\n", "url": "https://github.com/junit-team/junit4/issues/55", "user": "stan6", "labels": ["bug", "nonregression", "theories"], "created": "2009-11-29 17:34:56", "closed": "2012-08-21 17:36:58", "commits": {"f9ec0474bb646a2751f1f2c73f3fee524dbb4b52": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 996.0002777777778, "commitsDetails": [{"commitHash": "f9ec0474bb646a2751f1f2c73f3fee524dbb4b52", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["87fe5054ec0d03bb4f828f836a64ea9140b6818e", "61326c93276d31e249e57815edf93b695df5669d"], "nameRev": "f9ec0474bb646a2751f1f2c73f3fee524dbb4b52 tags/r4.11-beta-1~16", "commitMessage": "Merge pull request #485 from awulder/issue-55\n\nFix for issue #55", "commitDateTime": "2012-08-20 14:47:33", "authoredDateTime": "2012-08-20 14:47:33", "commitGitStats": [{"filePath": "src/main/java/org/junit/experimental/theories/internal/AllMembersSupplier.java", "insertions": 26, "deletions": 12, "lines": 38}, {"filePath": "src/test/java/org/junit/tests/experimental/theories/runner/TypeMatchingBetweenMultiDataPointsMethod.java", "insertions": 57, "deletions": 0, "lines": 57}], "commitSpoonAstDiffStats": [{"spoonFilePath": "AllMembersSupplier.java", "spoonMethods": [{"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.addSinglePointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)", "TOT": 16, "UPD": 4, "INS": 1, "MOV": 11, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(java.util.List)", "TOT": 1, "UPD": 1, "INS": 0, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.isCorrectlyTyped(org.junit.experimental.theories.ParameterSignature,java.lang.Class)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.addMultiPointMethods(org.junit.experimental.theories.ParameterSignature,java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.getValueSources(org.junit.experimental.theories.ParameterSignature)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.experimental.theories.internal.AllMembersSupplier.addFields(org.junit.experimental.theories.ParameterSignature,java.util.List)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "TypeMatchingBetweenMultiDataPointsMethod.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.experimental.theories.runner.TypeMatchingBetweenMultiDataPointsMethod", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "master git branch does not build on windows", "body": "With or without cygwin:\n\nc:\\src\\junitkb\\build.xml:113: Execute failed: java.io.IOException: Cannot run program \"build\\Markdown.pl\": CreateProcess error=193, %1 is not a valid Win32 application\n\nMuch as I dislike windows, I was hoping to build ;)\n\nMy kludge to build was to modify build.xml as follows:\n    <target name=\"release-notes\" if=\"os.family!='windows' \">\n", "url": "https://github.com/junit-team/junit4/issues/49", "user": "krosenvold", "labels": ["bug", "nonregression"], "created": "2009-11-17 06:37:45", "closed": "2011-09-23 20:04:00", "commits": {"130408bd716cc0f9a9c4ee0014b470f8865feefc": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 675.0002777777778, "commitsDetails": [{"commitHash": "130408bd716cc0f9a9c4ee0014b470f8865feefc", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["1660ebdf1ebc316747a1c3f29c03f616125a9dc7", "9a82d0027247d7be667966766b01d4a24e4b834f"], "nameRev": "130408bd716cc0f9a9c4ee0014b470f8865feefc tags/r4.11-beta-1~66", "commitMessage": "Merge pull request #326 from matthewfarwell/49-master-git-branch-does-not-build-on-windows\n\nFixes gh-49 Master now builds on windows", "commitDateTime": "2011-09-23 13:03:59", "authoredDateTime": "2011-09-23 13:03:59", "commitGitStats": [{"filePath": "build.xml", "insertions": 2, "deletions": 1, "lines": 3}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Confusing error for non-static inner test classes", "body": "Hi!\n\nIf  the suite InnerTestClass (see below) is run, an error stating \"Test class should have exactly one public zero-argument constructor\" is issued. However, the real issue is that the inner test class should be \"static\" (at least as long as JUnit does not provide a way to instantiate from an outer class). \n\nFrom what I gather is, that a judiciously placed test like\nif (clazz.isMemberClass() && ! Modifier.isStatic(clazz.getModifiers())\n     throw new Error(\"inner class \" + clazz.getName() + \" must be declared static.\");\nshould do the trick.\n\nCheers,\n Georg\n\n@RunWith(Suite.class)\n@SuiteClasses(\n{\n    InnerTestClass.T1.class\n})\npublic class InnerTestClass\n{\n    public class T1\n    {\n        @Test public void test() {  }\n    }\n}\n", "url": "https://github.com/junit-team/junit4/issues/42", "user": "georgthimm", "labels": ["bug", "nonregression"], "created": "2009-11-09 05:05:53", "closed": "2011-09-19 14:36:08", "commits": {"1014436692b0829a7287fbab81ef8720309d7945": {"commitGHEventType": "closed", "commitUser": "dsaff"}, "7663a302ff8392b07431e775965aa1dac2556ab9": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 679.0002777777778, "commitsDetails": [{"commitHash": "1014436692b0829a7287fbab81ef8720309d7945", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["2d13004b3fbba2fe6ed919bbc98f2e3f69bb4809"], "nameRev": "1014436692b0829a7287fbab81ef8720309d7945 tags/r4.10~3^2", "commitMessage": "Fixes gh-42 (error message for non-static inner class)\n\nAdd an appropriate error when a test class is a non-static inner class\nand don't try to validate the parameter count of its constructor.\n", "commitDateTime": "2011-09-18 23:20:46", "authoredDateTime": "2011-09-18 23:20:46", "commitGitStats": [{"filePath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "insertions": 12, "deletions": 2, "lines": 14}, {"filePath": "src/main/java/org/junit/runners/model/TestClass.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/running/classes/BlockJUnit4ClassRunnerTest.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "insertions": 35, "deletions": 0, "lines": 35}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BlockJUnit4ClassRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)", "TOT": 6, "UPD": 1, "INS": 2, "MOV": 3, "DEL": 0}, {"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.validateNoNonStaticInnerClass(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestClass.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.model.TestClass.isANonStaticInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.AllTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "BlockJUnit4ClassRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestClassTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.OuterClass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.identifyNonStaticInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.OuterClass2", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.dontMarkStaticInnerClassAsNonStatic()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.SimpleClass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.dontMarkNonInnerClassAsInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}, {"commitHash": "7663a302ff8392b07431e775965aa1dac2556ab9", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["2d13004b3fbba2fe6ed919bbc98f2e3f69bb4809", "1014436692b0829a7287fbab81ef8720309d7945"], "nameRev": "7663a302ff8392b07431e775965aa1dac2556ab9 tags/r4.10~3", "commitMessage": "Merge pull request #304 from stefanbirkner/NonStaticInnerTestClass\n\nfixed issue #42 (error message for non-static inner class)", "commitDateTime": "2011-09-19 07:36:07", "authoredDateTime": "2011-09-19 07:36:07", "commitGitStats": [{"filePath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "insertions": 12, "deletions": 2, "lines": 14}, {"filePath": "src/main/java/org/junit/runners/model/TestClass.java", "insertions": 6, "deletions": 0, "lines": 6}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/running/classes/BlockJUnit4ClassRunnerTest.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "src/test/java/org/junit/tests/running/classes/TestClassTest.java", "insertions": 35, "deletions": 0, "lines": 35}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BlockJUnit4ClassRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)", "TOT": 6, "UPD": 1, "INS": 2, "MOV": 3, "DEL": 0}, {"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.validateNoNonStaticInnerClass(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestClass.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.model.TestClass.isANonStaticInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.AllTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "BlockJUnit4ClassRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.BlockJUnit4ClassRunnerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "TestClassTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.OuterClass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.identifyNonStaticInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.OuterClass2", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.dontMarkStaticInnerClassAsNonStatic()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.SimpleClass", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.running.classes.TestClassTest.dontMarkNonInnerClassAsInnerClass()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["1014436692b0829a7287fbab81ef8720309d7945"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 12, "deletions": 2, "lines": 14, "gitFilesChange": 1}, "spoonStatsSummary": {"TOT": 8, "UPD": 1, "INS": 4, "MOV": 3, "DEL": 0, "spoonFilesChanged": 1, "spoonMethodsChanged": 3}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/runners"], "changesInPackagesSPOON": ["org.junit.runners.BlockJUnit4ClassRunner.validateZeroArgConstructor(java.util.List)", "org.junit.runners.BlockJUnit4ClassRunner.collectInitializationErrors(java.util.List)", "org.junit.runners.BlockJUnit4ClassRunner.validateNoNonStaticInnerClass(java.util.List)"]}, {"title": "Null Pointer exception assertArrayEquals with no message.", "body": "When assertArrayEquals (at least for Boolean[]) fails the assert, it throws a null pointer exception looking for a message.  This is, of course, when using the prototype that has no message.  You'll still get the line number for the failure, you'll still probably just debug focused test method, and be on your merry way, but just technically it's not quite the best/correct behavior.\n\nThanks!\n\nUpdate: this is for 4.12\n", "url": "https://github.com/junit-team/junit4/issues/1178", "user": "EmteeW", "labels": ["bug", "regression"], "created": "2015-07-07 18:02:59", "closed": "2016-07-17 12:31:09", "commits": {"e6a20043db694056ac00456f6076091012ecba87": {"commitGHEventType": "closed", "commitUser": "marcphilipp"}}, "ttf": 375.0002777777778, "commitsDetails": [{"commitHash": "e6a20043db694056ac00456f6076091012ecba87", "commitGHEventType": "closed", "commitUser": "marcphilipp", "commitParents": ["c07965ab1b232b04a13ea84fdbcdd8be04ea0182"], "nameRev": "e6a20043db694056ac00456f6076091012ecba87 tags/r4.13-beta-1~127", "commitMessage": "ArrayComparisonFailure serialization incompatibility fix (#1315)\n\n* Add back field fCause, initialize and use it in the constructor (via initCause()) to avoid NPE and unused field warnings, respectively.\r\n* Override getCause() to allow fallback to the deprecated fCause field.\r\n* Run tests around possible forward incompatibility of the class from r4.11, 4.12.\r\n\r\nFixes #1178.", "commitDateTime": "2016-07-17 14:31:03", "authoredDateTime": "2016-07-17 05:31:03", "commitGitStats": [{"filePath": "src/main/java/org/junit/internal/ArrayComparisonFailure.java", "insertions": 9, "deletions": 2, "lines": 11}, {"filePath": "src/test/java/org/junit/internal/AllInternalTests.java", "insertions": 2, "deletions": 1, "lines": 3}, {"filePath": "src/test/java/org/junit/internal/ArrayComparisonFailureTest.java", "insertions": 68, "deletions": 0, "lines": 68}, {"filePath": "src/test/resources/org/junit/internal/arrayComparisonFailure_411", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "src/test/resources/org/junit/internal/arrayComparisonFailure_412", "insertions": 0, "deletions": 0, "lines": 0}], "commitSpoonAstDiffStats": [{"spoonFilePath": "ArrayComparisonFailure.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.ArrayComparisonFailure", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.internal.ArrayComparisonFailure.getCause()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllInternalTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.AllInternalTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ArrayComparisonFailureTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.internal.ArrayComparisonFailureTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "junit 4.12 is incompatible with cucumber-junit 1.2.0", "body": "PublicClassValidator throws an Exception with message:\n  \"The class cucumber.runtime.junit.ExamplesRunner is not public.\"\n\njunit 4.12 is incompatible with cucumber-junit 1.2.0, see http://stackoverflow.com/a/25540276/13365 and https://groups.google.com/d/msg/cukes/w1QhqqqvJ8M/F9Pjoxe6Xb0J\n", "url": "https://github.com/junit-team/junit4/issues/1083", "user": "henrik242", "labels": ["bug", "regression"], "created": "2015-02-19 11:04:38", "closed": "2017-08-06 23:58:04", "commits": {}, "ttf": 899.0002777777778, "commitsDetails": []}, {"title": "Exceptions thrown from methodBlock() result in the failing method being unrooted in test reports", "body": "The introduction of the `runLeaf()` method in `BlockJUnit4ClassRunner` in JUnit 4.9 introduces a regression with regard to exception handling. \n\nConsult the following versions to see the difference:\n1. [BlockJUnit4ClassRunner (4.8)](https://github.com/junit-team/junit/blob/r4.8/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java)\n2. [BlockJUnit4ClassRunner (4.9)](https://github.com/junit-team/junit/blob/r4.9/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java)\n\nAs stated in the Javadoc for `methodBlock()`, `methodBlock()` _can be overridden in subclasses, either by overriding this method, or the implementations creating each sub-statement._\n\nThus, although other changes to the JUnit codebase itself in the JUnit 4.9 release do not result in an exception being thrown from `methodBlock()`, custom modifications to `methodBlock()` or the methods it invokes may in fact throw exceptions. In such cases, exceptions thrown from methodBlock() cause the current test execution to abort immediately. As a result, the failing test method is **_unrooted_** in test reports, and subsequent test methods are **never invoked**. Furthermore, RunListeners registered with JUnit are **not notified**.\n\nThe root cause is that the invocation of `methodBlock()` is no longer executed within a try-catch block as was the case in previous versions of JUnit.\n\nA fix for this regression can be seen in recent changes to the [SpringJUnit4ClassRunner](https://github.com/spring-projects/spring-framework/commit/b81c522ee1624f3d5f170fc3468f4600956950bd) from the Spring Framework.\n\nSee also: [SPR-12613](https://jira.spring.io/browse/SPR-12613) in Spring's JIRA issue tracker.\n", "url": "https://github.com/junit-team/junit4/issues/1066", "user": "sbrannen", "labels": ["regression", "up-for-grabs"], "created": "2015-01-10 18:27:33", "closed": "2015-03-01 16:55:22", "commits": {"a90b496a6595856066504baf4f737fb853a6e45d": {"commitGHEventType": "closed", "commitUser": "kcooney"}}, "ttf": 49.000277777777775, "commitsDetails": [{"commitHash": "a90b496a6595856066504baf4f737fb853a6e45d", "commitGHEventType": "closed", "commitUser": "kcooney", "commitParents": ["0f0152a8cd6dcbdb9f9cbb6ec5ca1cf2629dc12a"], "nameRev": "a90b496a6595856066504baf4f737fb853a6e45d tags/r4.13-beta-1~194", "commitMessage": "Ensure exceptions from methodBlock() don't result in unrooted tests.\n\nThe introduction of the runLeaf() method in BlockJUnit4ClassRunner in\nJUnit 4.9 introduced a regression with regard to exception handling.\n\nSpecifically, the invocation of methodBlock() is no longer executed\nwithin a try-catch block as was the case in previous versions of JUnit.\n\nCustom modifications to methodBlock() or the methods it invokes may in\nfact throw exceptions. In such cases, exceptions thrown from\nmethodBlock() cause the current test execution to abort immediately. As\na result, the failing test method is unrooted in test reports, and\nsubsequent test methods are never invoked. Furthermore, RunListeners\nregistered with JUnit are not notified.\n\nThis commit addresses this issue by wrapping the invocation of\nmethodBlock() within a try-catch block. If an exception is not thrown,\nthe resulting Statement is passed to runLeaf(). If an exception is\nthrown, it is wrapped in a Fail statement which is passed to runLeaf().\n\nCloses #1066\nCloses #1082\n", "commitDateTime": "2015-03-01 08:54:31", "authoredDateTime": "2015-02-15 21:53:52", "commitGitStats": [{"filePath": "src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java", "insertions": 13, "deletions": 4, "lines": 17}, {"filePath": "src/test/java/org/junit/runners/CustomBlockJUnit4ClassRunnerTest.java", "insertions": 90, "deletions": 0, "lines": 90}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 2, "deletions": 0, "lines": 2}], "commitSpoonAstDiffStats": [{"spoonFilePath": "BlockJUnit4ClassRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.BlockJUnit4ClassRunner.runChild(org.junit.runners.model.FrameworkMethod,org.junit.runner.notification.RunNotifier)", "TOT": 4, "UPD": 0, "INS": 3, "MOV": 1, "DEL": 0}]}, {"spoonFilePath": "CustomBlockJUnit4ClassRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.CustomBlockJUnit4ClassRunnerTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "AllTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.AllTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 1, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "@Rule should not require MethodRule in 4.10, regression?", "body": "I believe this is a regression. I was investigating an issue I was having where a test would fail on a build server but pass locally when I realised I was using 4.9 locally and 4.10 on the server. It was complaining the my @Rule field \"must implement MethodRule\" and I started to suspect a regression, especially since MethodRule is supposedly deprecated. This field was implementing TestRule which should've worked ( as far as I understant rules). As such I decided to test this using the example code from http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/RuleChain.html\n\nWhich I updated to be compilable (the example is missing some parentheses for example, could someone update that as well with this fragment?) which gave me the same error. So either there is a regression, or the example is wrong, or I am stupid and missing something: those are all equally possible.\n\n```\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.junit.rules.RuleChain;\nimport org.junit.rules.TestRule;\nimport org.junit.runner.Description;\nimport org.junit.runners.model.Statement;\nimport static org.junit.Assert.assertTrue;\n\n\npublic class UseRuleChain {\n    @Rule\n    public TestRule chain= RuleChain\n                           .outerRule(new LoggingRule(\"outer rule\"))\n                           .around(new LoggingRule(\"middle rule\"))\n                           .around(new LoggingRule(\"inner rule\"));\n\n    @Test\n    public void example() {\n            assertTrue(true);\n    }\n\n    static class LoggingRule implements TestRule{\n        String s;\n        public LoggingRule( String s ){\n            this.s = s;\n        }\n\n        @Override\n        public Statement apply( Statement arg0, Description arg1 ){\n            System.out.println( this.s );\n            return arg0;\n        }\n    }\n}\n```\n", "url": "https://github.com/junit-team/junit4/issues/350", "user": "Art-B", "labels": ["bug", "regression"], "created": "2011-10-21 18:39:09", "closed": "2011-10-21 19:48:26", "commits": {}, "ttf": 0.0002777777777777778, "commitsDetails": []}, {"title": "build.xml is broken after merges (invalid XML)", "body": "build.xml is broken on main trunk after merges\nafter \"Merge branch 4.10\" changes by dsaff on 2011-09-29.\n\n```\n...\n<<<<<<< HEAD\n  <property name=\"version-base\" value=\"4.11\" />\n  <property name=\"version-status\" value=\"-SNAPSHOT\" />\n=======\n  <property name=\"version-base\" value=\"4.10\" />\n  <property name=\"version-status\" value=\"\" />\n>>>>>>> 4.10\n...\n```\n", "url": "https://github.com/junit-team/junit4/issues/333", "user": "jenisys", "labels": ["bug", "regression"], "created": "2011-10-04 21:10:41", "closed": "2011-10-07 13:25:39", "commits": {"ebbcb2d3a730e8313546eae1602e274c228102a3": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 2.000277777777778, "commitsDetails": [{"commitHash": "ebbcb2d3a730e8313546eae1602e274c228102a3", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["4c8d3ff5ea9d1556bf05af6262ee58f65984e22f", "f82403fb69db120079c861d4da560e7cae329be9"], "nameRev": "ebbcb2d3a730e8313546eae1602e274c228102a3 tags/r4.11-beta-1~63", "commitMessage": "Merge pull request #334 from matthewfarwell/333-build.xml-is-broken-after-merges\n\nFixes gh-333: build.xml is broken after merge", "commitDateTime": "2011-10-07 06:25:38", "authoredDateTime": "2011-10-07 06:25:38", "commitGitStats": [{"filePath": "build.xml", "insertions": 0, "deletions": 5, "lines": 5}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": []}, {"title": "Fix 4.9.1 release notes, make sure markdown errors don't get passed through again..", "body": "", "url": "https://github.com/junit-team/junit4/issues/311", "user": "dsaff", "labels": ["bug", "regression"], "created": "2011-09-13 20:06:52", "closed": "2011-09-14 19:51:39", "commits": {"ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605": {"commitGHEventType": "closed", "commitUser": "dsaff"}, "b6c1407343259de943e181401b29c6fad0f31e58": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["e76c5f0fe7e1e2034765fd80cd7556b6bfc82345"], "nameRev": "ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605 tags/r4.10~7^2", "commitMessage": "Fixes gh-311: Fix 4.9.1 release notes, make sure markdown errors halt build\n", "commitDateTime": "2011-09-14 15:50:08", "authoredDateTime": "2011-09-14 15:50:08", "commitGitStats": [{"filePath": "build.xml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "doc/ReleaseNotes4.9.1.html", "insertions": 0, "deletions": 4, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}, {"commitHash": "b6c1407343259de943e181401b29c6fad0f31e58", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["3914b8fc8a4d6ad574994979d2a4c7b63258e227", "ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605"], "nameRev": "b6c1407343259de943e181401b29c6fad0f31e58 tags/r4.10~7", "commitMessage": "Merge pull request #315 from dsaff/master\n\nFixes gh-311: Fix 4.9.1 release notes, make sure markdown errors halt build", "commitDateTime": "2011-09-14 12:51:38", "authoredDateTime": "2011-09-14 12:51:38", "commitGitStats": [{"filePath": "build.xml", "insertions": 1, "deletions": 1, "lines": 2}, {"filePath": "doc/ReleaseNotes4.9.1.html", "insertions": 0, "deletions": 4, "lines": 4}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["ce0195c3d81d32bc2fd4d7a0c15aa78aaaa47605"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 0, "deletions": 4, "lines": 4, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["doc/ReleaseNotes4.9.1.html"]}, {"title": "build.xml uploads junitX.jar as junit-depX.jar", "body": "This means that although the correct junit-depX.jar files are created locally (that is, without the hamcrest classes), they are ignored, and the junitX.jar file is uploaded under the name junit-depX.jar.\n", "url": "https://github.com/junit-team/junit4/issues/309", "user": "dsaff", "labels": ["bug", "regression"], "created": "2011-09-13 19:44:50", "closed": "2011-09-14 19:35:01", "commits": {"3914b8fc8a4d6ad574994979d2a4c7b63258e227": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 0.0002777777777777778, "commitsDetails": [{"commitHash": "3914b8fc8a4d6ad574994979d2a4c7b63258e227", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["96df21cba5e56ee6d78fe51e86b4cc2bd2ceaf30", "e76c5f0fe7e1e2034765fd80cd7556b6bfc82345"], "nameRev": "3914b8fc8a4d6ad574994979d2a4c7b63258e227 tags/r4.10~8", "commitMessage": "Merge pull request #310 from dsaff/master\n\nFixes gh-309: build.xml uploads junitX.jar as junit-depX.jar", "commitDateTime": "2011-09-14 12:35:00", "authoredDateTime": "2011-09-14 12:35:00", "commitGitStats": [{"filePath": "build.xml", "insertions": 56, "deletions": 19, "lines": 75}, {"filePath": "build/lib/ant-contrib-1.0b3.jar", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "pom-template.xml => build/maven/pom-template.xml", "insertions": 0, "deletions": 0, "lines": 0}, {"filePath": "build/maven/post_maven_tests.sh", "insertions": 49, "deletions": 0, "lines": 49}, {"filePath": "build/maven/sample_project_template/pom.xml", "insertions": 61, "deletions": 0, "lines": 61}, {"filePath": "build/maven/sample_project_template/src/test/java/JunitDependencyTest.java", "insertions": 33, "deletions": 0, "lines": 33}, {"filePath": "build/run_tests.sh", "insertions": 36, "deletions": 0, "lines": 36}, {"filePath": "build_tests.sh", "insertions": 1, "deletions": 34, "lines": 35}, {"filePath": "doc/ReleaseNotes4.9.1.html", "insertions": 4, "deletions": 0, "lines": 4}, {"filePath": "pom-template.xml.asc", "insertions": 0, "deletions": 12, "lines": 12}], "commitSpoonAstDiffStats": [{"spoonFilePath": "JunitDependencyTest.java", "spoonMethods": [{"spoonMethodName": "JunitDependencyTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": [], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 1, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 0, "gitStatsSummary": {"insertions": 0, "deletions": 0, "lines": 0, "gitFilesChange": 0}, "spoonStatsSummary": {"TOT": 0, "UPD": 0, "INS": 0, "MOV": 0, "DEL": 0, "spoonFilesChanged": 0, "spoonMethodsChanged": 0}, "statsSkippedReason": "", "changesInPackagesGIT": [], "changesInPackagesSPOON": []}, {"title": "Is it possible to get a 4.9 tag?", "body": "thanks :)\n", "url": "https://github.com/junit-team/junit4/issues/303", "user": "orip", "labels": ["bug", "regression"], "created": "2011-09-09 11:34:36", "closed": "2011-09-13 21:02:04", "commits": {}, "ttf": 4.000277777777778, "commitsDetails": []}, {"title": "junit-dep-4.9.jar in Maven repository contains hamcrest classes", "body": "You may have a look at http://search.maven.org/#artifactdetails|junit|junit-dep|4.9|jar\n", "url": "https://github.com/junit-team/junit4/issues/292", "user": "stefanbirkner", "labels": ["bug", "regression"], "created": "2011-08-25 17:23:24", "closed": "2011-10-03 16:44:28", "commits": {}, "ttf": 38.000277777777775, "commitsDetails": []}, {"title": "Non-Public @Rule field results in strange exception message", "body": "Running a test with a non public @Rule field resutls in a strange exception message: How did getFields return a field we couldn't access?\n", "url": "https://github.com/junit-team/junit4/issues/260", "user": "stefanbirkner", "labels": ["bug", "regression"], "created": "2011-07-09 20:07:39", "closed": "2011-08-11 20:05:46", "commits": {}, "ttf": 32.000277777777775, "commitsDetails": []}, {"title": "Non-public @ClassRule field results in strange exception message ", "body": "Running the following test:\n\n``` java\npublic class ClassRuleNonPublic {\n    @ClassRule\n    static ExternalResource resource = new ExternalResource() {    };\n\n    @Test\n    public void pass() {\n        assertTrue(true);\n    }\n}\n```\n\nresults in:\n\n```\njava.lang.RuntimeException: How did getAnnotatedFields return a field we couldn't access?\n    at org.junit.runners.ParentRunner.getClassRule(ParentRunner.java:214)\n    at org.junit.runners.ParentRunner.classRules(ParentRunner.java:206)\n    at org.junit.runners.ParentRunner.withClassRules(ParentRunner.java:194)\n    at org.junit.runners.ParentRunner.classBlock(ParentRunner.java:153)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:304)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n```\n\nI suggest the exception message be changed to something like \"Field X must be public\", where X is the field name.\n", "url": "https://github.com/junit-team/junit4/issues/258", "user": "nigelcharman", "labels": ["bug", "regression"], "created": "2011-07-09 05:04:32", "closed": "2011-08-12 14:34:26", "commits": {}, "ttf": 34.000277777777775, "commitsDetails": []}, {"title": "Missing static keyword on @ClassRule field causes NPE", "body": "When the static keyword is missing on a field annotated by @ClassRule, a NullPointerException occurs.  For example:\n\n``` java\npublic class ClassRuleNPE {\n    @ClassRule\n    public ExternalResource resource = new ExternalResource() {    };\n\n    @Test\n    public void pass() {\n        assertTrue(true);\n    }\n}\n```\n\nresults in:\n\n```\njava.lang.NullPointerException\n    at sun.reflect.UnsafeFieldAccessorImpl.ensureObj(UnsafeFieldAccessorImpl.java:36)\n    at sun.reflect.UnsafeObjectFieldAccessorImpl.get(UnsafeObjectFieldAccessorImpl.java:18)\n    at java.lang.reflect.Field.get(Field.java:358)\n    at org.junit.runners.model.FrameworkField.get(FrameworkField.java:48)\n    at org.junit.runners.ParentRunner.getClassRule(ParentRunner.java:212)\n    at org.junit.runners.ParentRunner.classRules(ParentRunner.java:206)\n    at org.junit.runners.ParentRunner.withClassRules(ParentRunner.java:194)\n    at org.junit.runners.ParentRunner.classBlock(ParentRunner.java:153)\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:304)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:49)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\n```\n", "url": "https://github.com/junit-team/junit4/issues/257", "user": "nigelcharman", "labels": ["bug", "regression"], "created": "2011-07-09 04:51:08", "closed": "2011-08-12 14:34:35", "commits": {}, "ttf": 34.000277777777775, "commitsDetails": []}, {"title": "protected BlockJUnit4ClassRunner#rules method removed from 4.8.2", "body": "As this method is of scope `protected` in 4.8 and 4.8.1 it seems that it is (was) meant for possible overriding. Especially I use that to add from my custom `Runner` an extra `MethodRule` to the list of rules.\nThis allows users of the runner to not have to specify a rule as well and then minimise configuration.\n\nIf there is a clean work around this particular issue, I'm more than happy to hear about it. Looking at the code I couldn't find a clean and simple way to do this\u2026\n\nCan the `rules` method be added back?\n\nBTW, the code for the `ActiveObjectsJUnitRunner` I am talking about is here if that helps: http://java.net/projects/activeobjects/sources/svn/content/trunk/activeobjects-test/src/main/java/net/java/ao/test/junit/ActiveObjectsJUnitRunner.java\n\nThe actual overridding of the `rules` method:\n\n``` java\n@Override\n    protected List<MethodRule> rules(Object test)\n    {\n        final LinkedList<MethodRule> methodRules = new LinkedList<MethodRule>(super.rules(test));\n        methodRules.add(new ActiveObjectTransactionMethodRule(test, jdbcConfiguration, withIndex, tableNameConverter, fieldNameConverter));\n        return methodRules;\n    }\n```\n", "url": "https://github.com/junit-team/junit4/issues/248", "user": "sleberrigaud", "labels": ["bug", "regression"], "created": "2011-06-23 10:14:12", "closed": "2011-06-29 15:51:25", "commits": {}, "ttf": 6.000277777777778, "commitsDetails": []}, {"title": "Commits for pull requests 237-239 not reachable from master", "body": "Pull requests 237, 238 and 239 were submitted, but they are not reachable from KentBeck/junit:master (and, as far as I can tell, they are not reachable from any branch listed in KentBeck/junit). They are all reachable from https://github.com/KentBeck/junit/commit/7b5661e\n\nNote that pull request 237 fixes a regression bug\n", "url": "https://github.com/junit-team/junit4/issues/242", "user": "kcooney", "labels": ["bug", "regression"], "created": "2011-06-12 15:11:36", "closed": "2011-06-15 04:19:57", "commits": {}, "ttf": 2.000277777777778, "commitsDetails": []}, {"title": "4.7 release notes inconsistent", "body": "https://github.com/KentBeck/junit/commit/c618504adee4bc91b3bd7e0ff06be6e1fa9d88cc#commitcomment-403453\n\nCopy of my commit comment text:\n\nThis change has also to be done in the 4.7 HTML release notes. I've read these release notes couple of weeks ago in text form and found sadly that Hamcrest was downgraded again. Then I've read the release notes again today in html and wondered that I don't see the spot again about downgrading Hamcrest.\n", "url": "https://github.com/junit-team/junit4/issues/235", "user": "Vampire", "labels": ["bug", "regression"], "created": "2011-05-27 22:30:19", "closed": "2011-06-07 05:14:16", "commits": {"3d2826cb5650b127c5ffb55786b0b595674fda54": {"commitGHEventType": "closed", "commitUser": "dsaff"}}, "ttf": 10.000277777777777, "commitsDetails": [{"commitHash": "3d2826cb5650b127c5ffb55786b0b595674fda54", "commitGHEventType": "closed", "commitUser": "dsaff", "commitParents": ["30b0c3000e75657cbd95a09110cec40d1695160c"], "nameRev": "3d2826cb5650b127c5ffb55786b0b595674fda54 tags/r4.9b3~8", "commitMessage": "Fixes #235: 4.7 release notes inconsistent\n", "commitDateTime": "2011-06-07 01:04:33", "authoredDateTime": "2011-06-07 01:04:33", "commitGitStats": [{"filePath": "acknowledgements.txt", "insertions": 3, "deletions": 0, "lines": 3}, {"filePath": "build.xml", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "doc/ReleaseNotes4.7.html", "insertions": 5, "deletions": 36, "lines": 41}], "commitSpoonAstDiffStats": [], "spoonStatsSkippedReason": ""}], "filteredCommits": ["3d2826cb5650b127c5ffb55786b0b595674fda54"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 5, "deletions": 36, "lines": 41, "gitFilesChange": 1}, "spoonStatsSummary": {}, "statsSkippedReason": "", "changesInPackagesGIT": ["doc/ReleaseNotes4.7.html"]}, {"title": "ParentRunner now assumes that getChildren() returns a modifiable list", "body": "As of commit 01b427b3b89ce04d01f0, ParentRunner now assumes that getChildren() returns a  modifiable list. Previously, the sorting and the filtering happened in a list that was a copy of the List returned by getChildren()\n\nLess of an issue, but the call to Filter.intersect() in ParentRunner.filter() is probably not needed, since when the first filter was applied, the items not matching the filter were removed.\n", "url": "https://github.com/junit-team/junit4/issues/227", "user": "kcooney", "labels": ["bug", "regression"], "created": "2011-05-02 14:39:23", "closed": "2011-06-02 14:39:42", "commits": {}, "ttf": 31.00027777777778, "commitsDetails": []}, {"title": "Javadoc error in JUnitMatchers.either", "body": "The Javadoc for the JUnitMatchers.either() is obviously wrong; copy/paste error in the sample code:\n\n```\nThis is useful for fluently combining matchers where either may pass, for example:\n\n   assertThat(string, both(containsString(\"a\")).and(containsString(\"b\")));\n```\n", "url": "https://github.com/junit-team/junit4/issues/208", "user": "bubenheimer", "labels": ["bug", "regression"], "created": "2011-03-24 17:32:03", "closed": "2011-04-15 19:43:25", "commits": {}, "ttf": 22.00027777777778, "commitsDetails": []}, {"title": "JUnit 4.9b2 depends on Java 6", "body": "The latest change in junit.framework.Assert#format(String, Object, Object) made JUnit depend on Java 6, because java.lang.String#isEmpty() has only been added in 1.6.\n\nCould you please replace \"!message.isEmpty()\" with \"message.length() != 0\"?\n", "url": "https://github.com/junit-team/junit4/issues/187", "user": "mkeller", "labels": ["bug", "regression"], "created": "2011-01-31 17:10:23", "closed": "2011-04-29 19:30:47", "commits": {}, "ttf": 88.00027777777778, "commitsDetails": []}, {"title": "junit-dep doesn't work without Hamcrest", "body": "Since I switched from junit to junit-dep (4.8.2), I'm running into the following exception every now and then:\n\njava.lang.NoClassDefFoundError: org/hamcrest/SelfDescribing\n\nIt seems that even the part of JUnit that should be independent of Hamcrest does have dependencies on it. Class org.junit.internal.AssumptionViolatedException which implements org.hamcrest.SelfDescribing is an example. \n", "url": "https://github.com/junit-team/junit4/issues/165", "user": "pniederw", "labels": ["bug", "regression"], "created": "2010-11-24 02:26:29", "closed": "2011-04-29 18:50:06", "commits": {}, "ttf": 156.00027777777777, "commitsDetails": []}, {"title": "Please update Maven repo to 4.8.2", "body": "The latest version available through Maven is still 4.8.1, though 4.8.2 has been out for quite a while.\n", "url": "https://github.com/junit-team/junit4/issues/131", "user": "michel-slm", "labels": ["bug", "needs more info", "regression"], "created": "2010-08-06 16:07:50", "closed": "2011-04-15 17:33:52", "commits": {}, "ttf": 252.00027777777777, "commitsDetails": []}, {"title": "junit/runner contents missing from the 4.8.1 and 4.8.2 .zip source files", "body": "I tried getting the .zip but it does not have the juinit/runner directory, so the build fails as build.xml refers to the Version.java.template that should be there.\n", "url": "https://github.com/junit-team/junit4/issues/119", "user": "fnasser", "labels": ["bug", "regression"], "created": "2010-07-08 15:37:02", "closed": "2011-04-15 21:30:25", "commits": {}, "ttf": 281.0002777777778, "commitsDetails": []}, {"title": "Categories + Parameterized", "body": "Hi,\nI am trying to use the new experimental Categories Feature. Unfortunately it doesn't seem to be compatible with Parameterized Tests. I run the following in eclipse, but since these are\n\nWhen defining  Tests and TestSuite as below, the execution of the suite results in errors/failures. The exact error depends on the order in which the tests are specified in the Suite (see below).\n\nSo I guess my points/ questions are:\n- The behavior of a TestSuite should not depend on the order of contained Tests\n- If a Runner isn't supported by a Suite Runner, this should result in an instructive error message\n- Is there a Category compatible version of the Parameterized runner?\n\nThanx\nJens\n\nWith the normal Test first I get this call stack on the console:\n\nJUnit version 4.8.1\nException in thread \"main\" java.lang.NullPointerException\n at org.junit.runner.Description.createSuiteDescription(Description.java:\n72)\n at org.junit.experimental.categories.Categories$CategoryFilter.parentDes\ncription(Categories.java:127)\n at org.junit.experimental.categories.Categories$CategoryFilter.categorie\ns(Categories.java:121)\n at org.junit.experimental.categories.Categories$CategoryFilter.hasCorrec\ntCategoryAnnotation(Categories.java:106)\n at org.junit.experimental.categories.Categories$CategoryFilter.shouldRun\n(Categories.java:97)\n at org.junit.experimental.categories.Categories$CategoryFilter.shouldRun\n(Categories.java:100)\n at org.junit.runners.ParentRunner.shouldRun(ParentRunner.java:299)\n at org.junit.runners.ParentRunner.getFilteredChildren(ParentRunner.java:\n277)\n at org.junit.runners.ParentRunner.getDescription(ParentRunner.java:225)\n at org.junit.runners.Suite.describeChild(Suite.java:123)\n at org.junit.runners.Suite.describeChild(Suite.java:24)\n at org.junit.runners.ParentRunner.getDescription(ParentRunner.java:226)\n at org.junit.runner.JUnitCore.run(JUnitCore.java:156)\n at org.junit.runner.JUnitCore.run(JUnitCore.java:136)\n at org.junit.runner.JUnitCore.run(JUnitCore.java:117)\n at org.junit.runner.JUnitCore.runMain(JUnitCore.java:98)\n at org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\n at org.junit.runner.JUnitCore.main(JUnitCore.java:45)\n\n---\n\nWith the Parameterized Test first, I get a Failure Trace (which also isn't very instructive):\n\nJUnit version 4.8.1\n.E\nTime: 0,006\nThere was 1 failure:\n1) initializationError(de.schauderhaft.junit.categories.ParameterTokenSuite)\njava.lang.NullPointerException\n at org.junit.runner.Description.createSuiteDescription(Description.java:\n72)\n at org.junit.experimental.categories.Categories$CategoryFilter.parentDes\ncription(Categories.java:127)\n at org.junit.experimental.categories.Categories$CategoryFilter.categorie\ns(Categories.java:121)\n at org.junit.experimental.categories.Categories$CategoryFilter.hasCorrec\ntCategoryAnnotation(Categories.java:106)\n at org.junit.experimental.categories.Categories$CategoryFilter.shouldRun\n(Categories.java:97)\n at org.junit.experimental.categories.Categories$CategoryFilter.shouldRun\n(Categories.java:100)\n at org.junit.runners.ParentRunner.shouldRun(ParentRunner.java:299)\n at org.junit.runners.ParentRunner.filter(ParentRunner.java:254)\n at org.junit.experimental.categories.Categories.(Categories.java:1\n42)\n at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\nat sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Sou\nrce)\n at java.lang.reflect.Constructor.newInstance(Unknown Source)\n at org.junit.internal.builders.AnnotatedBuilder.buildRunner(AnnotatedBui\nlder.java:35)\n at org.junit.internal.builders.AnnotatedBuilder.runnerForClass(Annotated\nBuilder.java:24)\n at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilde\nr.java:57)\n at org.junit.internal.builders.AllDefaultPossibilitiesBuilder.runnerForC\nlass(AllDefaultPossibilitiesBuilder.java:29)\n at org.junit.runner.Computer.getRunner(Computer.java:38)\n at org.junit.runner.Computer$1.runnerForClass(Computer.java:29)\n at org.junit.runners.model.RunnerBuilder.safeRunnerForClass(RunnerBuilde\nr.java:57)\n at org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:93)\n at org.junit.runners.model.RunnerBuilder.runners(RunnerBuilder.java:84)\n at org.junit.runners.Suite.(Suite.java:79)\n at org.junit.runner.Computer.getSuite(Computer.java:26)\n at org.junit.runner.Request.classes(Request.java:69)\n at org.junit.runner.JUnitCore.run(JUnitCore.java:117)\n at org.junit.runner.JUnitCore.runMain(JUnitCore.java:98)\n at org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:53)\n at org.junit.runner.JUnitCore.main(JUnitCore.java:45)\nFAILURES!!!\nTests run: 1,  Failures: 1\n\nClass Definitions ------------------------------------------------------------------------------------\n\npackage de.schauderhaft.junit.categories;\nimport java.util.Collection;\nimport java.util.Collections;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Parameterized;\nimport org.junit.runners.Parameterized.Parameters;\n@RunWith(Parameterized.class)\npublic class ParameterizedTestA {\npublic ParameterizedTestA(String a) {\n }\n@Parameters\n public static Collection getParameters() {\n return Collections.singletonList(new String[] { \"a\" });\n }\n@Test\n public void testSomething() {\n Assert.assertTrue(true);\n##  }\n\npackage de.schauderhaft.junit.categories;\nimport org.junit.Assert;\nimport org.junit.Test;\nimport org.junit.experimental.categories.Category;\n@Category(Token.class)\npublic class SomeTestB {\n@Test\n public void testSomething() {\n Assert.assertTrue(true);\n }\n}\n\n---\n\npackage de.schauderhaft.junit.categories;\nimport org.junit.experimental.categories.Categories;\nimport org.junit.experimental.categories.Categories.IncludeCategory;\nimport org.junit.runner.RunWith;\nimport org.junit.runners.Suite.SuiteClasses;\n@RunWith(Categories.class)\n@IncludeCategory(Token.class)\n@SuiteClasses( { SomeTestB.class, ParameterizedTestA.class }) // switch order of classes for slightly different behaviour\npublic class ParameterTokenSuite {\n}\n## }\n## \n", "url": "https://github.com/junit-team/junit4/issues/74", "user": "dsaff", "labels": ["bug", "parameterized", "regression"], "created": "2010-01-21 20:44:33", "closed": "2011-09-16 14:17:04", "commits": {}, "ttf": 602.0002777777778, "commitsDetails": []}, {"title": "Provide up-to-date javadocs on www.junit.org", "body": "Latest Javadocs are not available any more on www.junit.org; the latest available seems to be http://junit.org/junit/javadoc/4.5/.  With the introduction of Rules, it would be very nice to see javadocs for 4.7.\n", "url": "https://github.com/junit-team/junit4/issues/48", "user": "irobertson", "labels": ["bug", "regression"], "created": "2009-11-16 22:54:04", "closed": "2009-12-17 20:12:03", "commits": {}, "ttf": 30.00027777777778, "commitsDetails": []}, {"title": "Only one (the last) filter is considered", "body": "In the course of upgrading from JUnit 4.4 to JUnit 4.7 I stumbled over this\nbug:\n\n```\n@Test\npublic void testMultipleFilters() throws Exception {\n    JUnitCore junitCore = new JUnitCore();\n    Request request = Request.aClass(ExampleTest.class);\n    Request requestFiltered = request.filterWith(new SingleMethodNameFilter(\"test1\"));\n    Request requestFilteredFiltered = requestFiltered.filterWith(new SingleMethodNameFilter(\"test2\"));\n    Result result = junitCore.run(requestFilteredFiltered);\n    printResult(result);\n    assertEquals(1, result.getRunCount()); // Fails here: actual 2\n}\n\nprivate static class SingleMethodNameFilter extends Filter {\n\n    private String methodName;\n\n    public SingleMethodNameFilter(String methodName) {\n        this.methodName = methodName;\n    }\n\n    @Override\n    public boolean shouldRun(Description description) {\n        return !description.getMethodName().equals(methodName);\n    }\n\n    @Override\n    public String describe() {\n        return \"filter method name: \" + methodName;\n    }\n\n}\n\npublic class ExampleTest {\n\n@Test\npublic void test1() throws Exception {\n    System.out.println(\"Run: test1\");\n    assertEquals(1, 1);\n}\n\n@Test\npublic void test2() throws Exception {\n    System.out.println(\"Run: test2\");\n    assertEquals(1, 1);\n}\n\n@Test\npublic void test3() throws Exception {\n    System.out.println(\"Run: test3\");\n    assertEquals(1, 1);\n}\n\n}\n```\n\nOf course one could make a composite Filter, but the old behaviour and the API seem to show that this limitation is not on purpose.\n\nThe Bug \"ID: 2094316\" (\"Request.filterWith has bizarre behavior\") is kind of related, but does not point to the main problem in my mind. \n\nMoreover, the filtering is carried out too often in my mind (we are using filters for a range of QA/TA related aspects): e.g. in the\ntestSingleFilter() method the filters shouldRun() method is called 11 times for ExampleTest (containing 3 test cases):\n\n```\n@Test\npublic void testSingleFilter() throws Exception {\n    Request requestFiltered = request.filterWith(new SingleMethodNameFilter(\"test1\"));\n    Result result = junitCore.run(requestFiltered);\n    printResult(result);\n    assertEquals(2, result.getRunCount());\n}\n```\n", "url": "https://github.com/junit-team/junit4/issues/39", "user": "reinholdfuereder", "labels": ["bug", "regression"], "created": "2009-10-27 09:33:57", "closed": "2011-04-15 19:29:09", "commits": {"669bb577583f2edd8cd65008a7c9ac19ebc350ea": {"commitGHEventType": "referenced", "commitUser": "dsaff"}}, "ttf": 535.0002777777778, "commitsDetails": [{"commitHash": "669bb577583f2edd8cd65008a7c9ac19ebc350ea", "commitGHEventType": "referenced", "commitUser": "dsaff", "commitParents": ["d3de6079892fa89aa46386c0369a29b4ef9e9e3c"], "nameRev": "669bb577583f2edd8cd65008a7c9ac19ebc350ea tags/r4.9b3~18", "commitMessage": "Fixes issue #39, by having multiple calls to ParentRunner.filter\nresult in the intersection of filters, rather than just the last\none used.\n", "commitDateTime": "2011-04-15 13:35:45", "authoredDateTime": "2011-04-15 13:35:45", "commitGitStats": [{"filePath": "src/main/java/org/junit/runner/manipulation/Filter.java", "insertions": 25, "deletions": 0, "lines": 25}, {"filePath": "src/main/java/org/junit/runners/ParentRunner.java", "insertions": 5, "deletions": 6, "lines": 11}, {"filePath": "src/test/java/junit/tests/framework/AssertTest.java", "insertions": 0, "deletions": 1, "lines": 1}, {"filePath": "src/test/java/org/junit/tests/AllTests.java", "insertions": 2, "deletions": 0, "lines": 2}, {"filePath": "src/test/java/org/junit/tests/ParentRunnerTest.java", "insertions": 68, "deletions": 0, "lines": 68}, {"filePath": "src/test/java/org/junit/tests/manipulation/FilterTest.java", "insertions": 34, "deletions": 0, "lines": 34}], "commitSpoonAstDiffStats": [{"spoonFilePath": "Filter.java", "spoonMethods": [{"spoonMethodName": "org.junit.runner.manipulation.Filter.intersect(org.junit.runner.manipulation.Filter)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.runner.manipulation.Filter.1.apply(java.lang.Object)", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ParentRunner.java", "spoonMethods": [{"spoonMethodName": "org.junit.runners.ParentRunner", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)", "TOT": 2, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 1}, {"spoonMethodName": "org.junit.runners.ParentRunner.filterChild(java.lang.Object)", "TOT": 3, "UPD": 0, "INS": 0, "MOV": 2, "DEL": 1}, {"spoonMethodName": "org.junit.runners.ParentRunner.shouldRun(java.lang.Object)", "TOT": 2, "UPD": 0, "INS": 0, "MOV": 1, "DEL": 1}]}, {"spoonFilePath": "AssertTest.java", "spoonMethods": []}, {"spoonFilePath": "AllTests.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.AllTests", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "ParentRunnerTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.ParentRunnerTest.testMultipleFilters()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.ParentRunnerTest.isEmpty()", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.ParentRunnerTest.Exclude", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}, {"spoonMethodName": "org.junit.tests.ParentRunnerTest.ExampleTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}, {"spoonFilePath": "FilterTest.java", "spoonMethods": [{"spoonMethodName": "org.junit.tests.manipulation.FilterTest", "TOT": 1, "UPD": 0, "INS": 1, "MOV": 0, "DEL": 0}]}], "spoonStatsSkippedReason": ""}], "filteredCommits": ["669bb577583f2edd8cd65008a7c9ac19ebc350ea"], "filteredCommitsReason": {"duplicated": 0, "alsoFixesPhrase": 0, "moreThanOneParent": 0, "multipleIssueFixes": 0, "unavailable": 0, "mergeCommitUsed": 0}, "numCommits": 1, "gitStatsSummary": {"insertions": 30, "deletions": 6, "lines": 36, "gitFilesChange": 2}, "spoonStatsSummary": {"TOT": 11, "UPD": 0, "INS": 4, "MOV": 3, "DEL": 4, "spoonFilesChanged": 2, "spoonMethodsChanged": 6}, "statsSkippedReason": "", "changesInPackagesGIT": ["src/main/java/org/junit/runners", "src/main/java/org/junit/runner/manipulation"], "changesInPackagesSPOON": ["org.junit.runners.ParentRunner.filterChild(java.lang.Object)", "org.junit.runners.ParentRunner", "org.junit.runner.manipulation.Filter.1.apply(java.lang.Object)", "org.junit.runner.manipulation.Filter.intersect(org.junit.runner.manipulation.Filter)", "org.junit.runners.ParentRunner.shouldRun(java.lang.Object)", "org.junit.runners.ParentRunner.filter(org.junit.runner.manipulation.Filter)"]}, {"title": "ParentRunner filtering \"internally temporarily\" broken", "body": "(I was not sure how to formulate the summary...) This issue is also related to these JUnit bugs and is in version 4.7 (release), but may have entered already after version 4.4:\n- \"CompositeRunner.filter incorrect if child throws NoTestsRema\" - ID: 1815188\n- \"Sorters and Filters are ignored in 4.5\" - ID: 2008607\n\nWhen using a filter on a composite test, i.e. ParentRunner and below, the filtering happens in two steps:\n1. Partial filtering on composite test based on Filter class and Filterable interface 2. Full filtering when running the tests via ParentRunner class:\nchildrenInvoker(), runChildren() and getFilteredChildren() methods\n\nI think the behaviour of JUnit 4.3.1 and 4.4 was different and better in that the filtering was done in a single step.\nThe problems of the current approach are in my mind:\n- The first filtering that throws the NoTestsRemainException is not complete, so it may happen that only the second filtering removes \"silently\"\n  some more tests. This leads in my case to JUnit reports (via ant-junit) that contains test classes without test cases.\n- Performance could be improved: as filtering is done multiple times and\n  shouldRun() is additionally used vai getDescription() and sorting in\n  getFilteredChildren())\n\nAs I think it was more or less suggested in one of the referenced bug reports above a quick \"fix\" (in fact a refactoring of the two step filtering should be strived for in my mind) is in ParentRunner.filter(Filter filter)\nmethod:\n\nOld:\n\n```\npublic void filter(Filter filter) throws NoTestsRemainException {\n    fFilter= filter;\n\n    for (T each : getChildren())\n        if (shouldRun(each))\n            return;\n    throw new NoTestsRemainException();\n}\n```\n\nNew:\n\n```\npublic void filter(Filter filter) throws NoTestsRemainException {\n    fFilter= filter;\n\n    ArrayList<T> filtered= new ArrayList<T>();\n    for (T each : getChildren()) {\n        if (shouldRun(each)) {\n            try {\n                filterChild(each);\n                filtered.add(each);\n            } catch (NoTestsRemainException e) {\n                // don't add it\n            }\n        }\n    }\n    if (filtered.isEmpty()) {\n        throw new NoTestsRemainException();\n    }\n}\n```\n", "url": "https://github.com/junit-team/junit4/issues/38", "user": "reinholdfuereder", "labels": ["bug", "needs more info", "regression"], "created": "2009-10-27 09:31:03", "closed": "2011-05-02 12:51:16", "commits": {}, "ttf": 552.0002777777778, "commitsDetails": []}, {"title": "junit-dep not uploaded to Maven repository since 4.5", "body": "I see versions 4.6 and 4.7 of the bundled-libraries version of JUnit in the Maven Central repo, but no junit-dep. Can this be added by whoever is doing the uploads?\n", "url": "https://github.com/junit-team/junit4/issues/33", "user": "MichaelHackett", "labels": ["bug", "regression"], "created": "2009-10-20 20:23:02", "closed": "2011-04-14 15:54:19", "commits": {}, "ttf": 540.0002777777778, "commitsDetails": []}]}